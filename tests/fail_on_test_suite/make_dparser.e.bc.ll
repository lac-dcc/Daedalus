; ModuleID = '/src/llvm-test-suite/build/MultiSource/Applications/d/make_dparser.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ArgumentState = type { ptr, i32, ptr, ptr }
%struct.ArgumentDescription = type { ptr, i8, ptr, ptr, ptr, ptr, ptr }
%struct.hash_fns_t = type { ptr, ptr, [2 x ptr] }
%struct.EnumStr = type { i32, ptr }
%struct.anon = type { i32, i32, ptr, [3 x ptr] }
%struct.D_Reduction = type { i16, i16, ptr, ptr, i16, i16, i32, i32, i32, i32, ptr }
%struct.D_Shift = type { i16, i8, i8, i32, i32, ptr }
%struct.SB_uint8 = type { ptr, [4 x ptr] }
%struct.SB_trans_uint8 = type { [4 x ptr] }
%struct.D_ErrorRecoveryHint = type { i16, i16, ptr }
%struct.D_State = type { ptr, i32, %struct.EnumStr, %struct.EnumStr, %struct.EnumStr, ptr, ptr, ptr, i8, i8, i8, ptr, ptr, i32 }
%struct.D_Symbol = type { i32, ptr, i32 }
%struct.D_ParserTables = type { i32, ptr, ptr, i32, i32, ptr, ptr, i32, ptr, i32 }
%struct.Grammar = type { ptr, %struct.anon, %struct.anon, %struct.anon, %struct.Code, ptr, i32, %struct.anon, %struct.anon, ptr, i32, i32, i32, i32, i32, i32, i32, [256 x i8], i32, i32, i32, i32, i32, ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.Code = type { ptr, i32 }
%struct.anon.9 = type { i32, i32, ptr, [3 x i64] }
%struct.ScannerBlock = type { i32, i32, i32, ptr, ptr }
%struct.Term = type { i32, i32, i32, i32, i32, ptr, i32, i8, ptr }
%struct.Production = type { ptr, i32, %struct.anon, i32, i8, ptr, [8 x ptr], [8 x ptr], ptr, ptr, ptr, ptr }
%struct.Rule = type { i32, ptr, i32, i32, i32, i32, %struct.anon, ptr, %struct.Code, %struct.Code, %struct.anon, i32, ptr }
%struct.State = type { i32, i64, %struct.anon, %struct.anon, %struct.anon, %struct.anon, %struct.anon, %struct.anon, %struct.anon, %struct.Scanner, i8, ptr, i32, ptr, ptr, ptr, ptr }
%struct.Scanner = type { %struct.anon, %struct.anon }
%struct.Action = type { i32, ptr, ptr, ptr, i32, ptr }
%struct.ScanStateTransition = type { i32, %struct.anon, %struct.anon }
%struct.ScanState = type { i32, [256 x ptr], %struct.anon, %struct.anon, [256 x ptr] }
%struct.Elem = type { i32, i32, ptr, %union.anon }
%union.anon = type { %struct.Code }
%struct.Goto = type { ptr, ptr }
%struct.Hint = type { i32, ptr, ptr }
%struct.D_Pass = type { ptr, i32, i32, i32 }
%struct.Declaration = type { ptr, i32, i32 }
%struct.EqState = type { ptr, ptr, ptr }
%struct.D_Parser = type { ptr, ptr, ptr, ptr, ptr, ptr, %struct.d_loc_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.d_loc_t = type { ptr, ptr, i32, i32, i32 }
%struct.LexState = type { i32, %struct.anon, i32, i32, i32 }
%struct.NFAState = type { i32, [256 x %struct.anon], %struct.anon, %struct.anon, %struct.anon }
%struct.DFAState = type { %struct.anon, [256 x ptr], ptr }
%struct.PNode = type { i32, i32, i32, i32, ptr, ptr, i32, %struct.anon, i32, i8, i8, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.D_ParseNode }
%struct.D_ParseNode = type { i32, %struct.d_loc_t, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.Parser = type { %struct.D_Parser, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32, %struct.PNodeHash, %struct.SNodeHash, ptr, ptr, ptr, ptr, i32, ptr, ptr, i32, ptr, ptr, ptr, %struct.anon, ptr, %struct.D_Shift, ptr, ptr }
%struct.PNodeHash = type { ptr, i32, i32, i32, ptr }
%struct.SNodeHash = type { ptr, i32, i32, i32, ptr, ptr }
%struct.SNode = type { ptr, ptr, ptr, %struct.d_loc_t, i32, ptr, %struct.anon, i32, ptr, ptr }
%struct.ZNode = type { ptr, %struct.anon }
%struct.Reduction = type { ptr, ptr, ptr, ptr, i32, ptr }
%struct.ShiftResult = type { ptr, %struct.d_loc_t }
%struct.StackPNode = type { ptr, ptr, ptr, [8 x ptr] }
%struct.StackInt = type { ptr, ptr, ptr, [8 x i32] }
%struct.D_Scope = type { i8, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.D_SymHash = type { i32, i32, %struct.anon }
%struct.D_Sym = type { ptr, i32, i32, ptr, ptr, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }
%struct.D_ParseNode.127 = type { i32, %struct.d_loc_t, ptr, ptr, ptr, ptr, ptr, %struct.ParseNode_User }
%struct.ParseNode_User = type { ptr, ptr, ptr, i32 }

@arg_state = internal global %struct.ArgumentState { ptr null, i32 0, ptr @.str.3, ptr @arg_desc }, align 8
@set_op_priority_from_rule = internal global i32 0, align 4
@right_recursive_BNF = internal global i32 0, align 4
@states_for_whitespace = internal global i32 1, align 4
@states_for_all_nterms = internal global i32 0, align 4
@tokenizer = internal global i32 0, align 4
@longest_match = internal global i32 0, align 4
@grammar_ident = internal global [256 x i8] c"gramalign 16
@scanner_blocks = internal global i32 4, align 4
@write_line_directives = internal global i32 1, align 4
@write_header = internal global i32 -1, align 4
@token_type = internal global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"unable to parse grammar '%s'\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"unable to load grammar '%s'\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"unable to write C tables '%s'\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"program\00", align 1
@arg_desc = internal global [15 x %struct.ArgumentDescription] [%struct.ArgumentDescription { ptr @.str.4, i8 108, ptr @.str.5, ptr @.str.6, ptr @longest_match, ptr @.str.7, ptr null }, %struct.ArgumentDescription { ptr @.str.8, i8 84, ptr @.str.9, ptr @.str.6, ptr @tokenizer, ptr @.str.10, ptr null }, %struct.ArgumentDescription { ptr @.str.11, i8 72, ptr @.str.12, ptr @.str.13, ptr @write_header, ptr @.str.14, ptr null }, %struct.ArgumentDescription { ptr @.str.15, i8 116, ptr @.str.16, ptr @.str.13, ptr @token_type, ptr @.str.17, ptr null }, %struct.ArgumentDescription { ptr @.str.18, i8 67, ptr @.str.19, ptr @.str.6, ptr @states_for_whitespace, ptr @.str.20, ptr null }, %struct.ArgumentDescription { ptr @.str.21, i8 65, ptr @.str.22, ptr @.str.6, ptr @states_for_all_nterms, ptr @.str.23, ptr null }, %struct.ArgumentDescription { ptr @.str.24, i8 105, ptr @.str.25, ptr @.str.26, ptr @grammar_ident, ptr @.str.27, ptr null }, %struct.ArgumentDescription { ptr @.str.28, i8 98, ptr @.str.29, ptr @.str.13, ptr @scanner_blocks, ptr @.str.30, ptr null }, %struct.ArgumentDescription { ptr @.str.31, i8 112, ptr @.str.32, ptr @.str.6, ptr @set_op_priority_from_rule, ptr @.str.33, ptr null }, %struct.ArgumentDescription { ptr @.str.34, i8 114, ptr @.str.35, ptr @.str.6, ptr @right_recursive_BNF, ptr @.str.36, ptr null }, %struct.ArgumentDescription { ptr @.str.37, i8 76, ptr @.str.38, ptr @.str.6, ptr @write_line_directives, ptr @.str.39, ptr null }, %struct.ArgumentDescription { ptr @.str.40, i8 118, ptr @.str.41, ptr @.str.42, ptr @verbose_level, ptr @.str.43, ptr null }, %struct.ArgumentDescription { ptr @.str.44, i8 100, ptr @.str.45, ptr @.str.42, ptr @debug_level, ptr @.str.46, ptr null }, %struct.ArgumentDescription { ptr @.str.47, i8 104, ptr @.str.48, ptr null, ptr null, ptr null, ptr @help }, %struct.ArgumentDescription zeroinitializer], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"longest_match\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"Use Longest Match Rule for Tokens\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"D_MAKE_LONGEST_MATCH\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"tokenizer\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"Tokenizer for START\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"D_MAKE_PARSER_TOKENIZER\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"write_header\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"Write Header (-1:if not empty)\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"D_MAKE_PARSER_HEADER\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"token_type\00", align 1
@.str.16 = private unnamed_addr constant [30 x i8] c"Token Type (0:define, 1:enum)\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"D_MAKE_PARSER_TOKEN\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"whitespace_states\00", align 1
@.str.19 = private unnamed_addr constant [26 x i8] c"Compute Whitespace States\00", align 1
@.str.20 = private unnamed_addr constant [25 x i8] c"D_MAKE_PARSER_WHITESPACE\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"all_states\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"Compute States For All NTERMs\00", align 1
@.str.23 = private unnamed_addr constant [25 x i8] c"D_MAKE_PARSER_ALL_NTERMS\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"grammar_ident\00", align 1
@.str.25 = private unnamed_addr constant [19 x i8] c"Grammar Identifier\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"S255\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"D_MAKE_PARSER_GRAMMAR_IDENT\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"scanner_blocks\00", align 1
@.str.29 = private unnamed_addr constant [15 x i8] c"Scanner Blocks\00", align 1
@.str.30 = private unnamed_addr constant [29 x i8] c"D_MAKE_PARSER_SCANNER_BLOCKS\00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c"op_pri_from_rule\00", align 1
@.str.32 = private unnamed_addr constant [32 x i8] c"Set Operator Priority From Rule\00", align 1
@.str.33 = private unnamed_addr constant [27 x i8] c"D_MAKE_PARSER_SET_PRIORITY\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"right_recurse_BNF\00", align 1
@.str.35 = private unnamed_addr constant [28 x i8] c"Use Right Recursion For */+\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"D_MAKE_PARSER_RIGHT_RECURSIVE_BNF\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"write_lines\00", align 1
@.str.38 = private unnamed_addr constant [15 x i8] c"Write #line(s)\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"D_MAKE_PARSER_WRITE_LINE_DIRECTIVES\00", align 1
@.str.40 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"Verbose\00", align 1
@.str.42 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.43 = private unnamed_addr constant [22 x i8] c"D_MAKE_PARSER_VERBOSE\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"Debug\00", align 1
@.str.46 = private unnamed_addr constant [20 x i8] c"D_MAKE_PARSER_DEBUG\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"Help\00", align 1
@.str.49 = private unnamed_addr constant [26 x i8] c"D Make Parser Version %s \00", align 1
@.str.50 = private unnamed_addr constant [38 x i8] c"Copyright (c) 2002-2003 John Plevyak\0A\00", align 1
@scanner_block_fns = internal global %struct.hash_fns_t { ptr @scanner_block_hash_fn, ptr @scanner_block_cmp_fn, [2 x ptr] zeroinitializer }, align 8
@trans_scanner_block_fns = internal global %struct.hash_fns_t { ptr @trans_scanner_block_hash_fn, ptr @trans_scanner_block_cmp_fn, [2 x ptr] zeroinitializer }, align 8
@shift_fns = internal global %struct.hash_fns_t { ptr @shift_hash_fn, ptr @shift_cmp_fn, [2 x ptr] zeroinitializer }, align 8
@er_hint_hash_fns = internal global %struct.hash_fns_t { ptr @er_hint_hash_fn, ptr @er_hint_cmp_fn, [2 x ptr] zeroinitializer }, align 8
@.str.51 = private unnamed_addr constant [12 x i8] c".d_parser.c\00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@.str.1.52 = private unnamed_addr constant [31 x i8] c"unable to open `%s` for write\0A\00", align 1
@.str.2.69 = private unnamed_addr constant [21 x i8] c"#include \22dparse.h\22\0A\00", align 1
@.str.3.70 = private unnamed_addr constant [26 x i8] c"#include \22%s.d_parser.h\22\0A\00", align 1
@.str.4.89 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5.94 = private unnamed_addr constant [11 x i8] c"whitespace\00", align 1
@.str.6.95 = private unnamed_addr constant [37 x i8] c"D_ParserTables parser_tables_%s = {\0A\00", align 1
@.str.7.92 = private unnamed_addr constant [5 x i8] c"%d, \00", align 1
@.str.8.96 = private unnamed_addr constant [14 x i8] c"d_states_%s, \00", align 1
@.str.9.97 = private unnamed_addr constant [13 x i8] c"d_gotos_%s, \00", align 1
@.str.10.98 = private unnamed_addr constant [15 x i8] c"d_symbols_%s, \00", align 1
@.str.11.93 = private unnamed_addr constant [5 x i8] c"%s, \00", align 1
@.str.12.91 = private unnamed_addr constant [7 x i8] c"NULL, \00", align 1
@.str.13.99 = private unnamed_addr constant [14 x i8] c"d_passes_%s, \00", align 1
@.str.16.90 = private unnamed_addr constant [4 x i8] c"};\0A\00", align 1
@.str.17.53 = private unnamed_addr constant [12 x i8] c".d_parser.h\00", align 1
@.str.18.54 = private unnamed_addr constant [15 x i8] c"#ifndef _%s_h\0A\00", align 1
@.str.19.55 = private unnamed_addr constant [15 x i8] c"#define _%s_h\0A\00", align 1
@.str.20.56 = private unnamed_addr constant [16 x i8] c"#define %s \09%d\0A\00", align 1
@.str.21.57 = private unnamed_addr constant [20 x i8] c"enum D_Tokens_%s {\0A\00", align 1
@.str.22.60 = private unnamed_addr constant [10 x i8] c"%s = %d%s\00", align 1
@.str.23.58 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.24.59 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.25.61 = private unnamed_addr constant [5 x i8] c"\0A};\0A\00", align 1
@.str.26.62 = private unnamed_addr constant [30 x i8] c"#define D_START_STATE_%s \09%d\0A\00", align 1
@.str.27.63 = private unnamed_addr constant [8 x i8] c"#endif\0A\00", align 1
@.str.28.64 = private unnamed_addr constant [15 x i8] c"#line %d \22%s\22\0A\00", align 1
@.str.29.65 = private unnamed_addr constant [6 x i8] c"nterm\00", align 1
@.str.30.66 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.31.67 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@.str.32.68 = private unnamed_addr constant [30 x i8] c"bad $ escape in code line %u\0A\00", align 1
@.str.33.100 = private unnamed_addr constant [51 x i8] c"attempt to find symbol for non-unique string '%s'\0A\00", align 1
@.str.34.71 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.35.72 = private unnamed_addr constant [46 x i8] c"int d_speculative_reduction_code_%d_%d_%s%s;\0A\00", align 1
@.str.36.73 = private unnamed_addr constant [40 x i8] c"int d_final_reduction_code_%d_%d_%s%s;\0A\00", align 1
@.str.37.74 = private unnamed_addr constant [48 x i8] c"extern D_ReductionCode d_pass_code_%d_%d_%s[];\0A\00", align 1
@.str.38.75 = private unnamed_addr constant [32 x i8] c"int d_pass_code_%d_%d_%d_%s%s;\0A\00", align 1
@.str.39.76 = private unnamed_addr constant [45 x i8] c"int d_speculative_reduction_code_%d_%d_%s%s \00", align 1
@.str.40.77 = private unnamed_addr constant [39 x i8] c"int d_final_reduction_code_%d_%d_%s%s \00", align 1
@.str.41.78 = private unnamed_addr constant [31 x i8] c"int d_pass_code_%d_%d_%d_%s%s \00", align 1
@.str.42.79 = private unnamed_addr constant [38 x i8] c"d_speculative_reduction_code_%d_%d_%s\00", align 1
@.str.43.80 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.44.81 = private unnamed_addr constant [32 x i8] c"d_final_reduction_code_%d_%d_%s\00", align 1
@.str.45.82 = private unnamed_addr constant [21 x i8] c"d_pass_code_%d_%d_%s\00", align 1
@.str.46.83 = private unnamed_addr constant [25 x i8] c"D_ReductionCode %s[] = {\00", align 1
@.str.47.84 = private unnamed_addr constant [26 x i8] c"d_pass_code_%d_%d_%d_%s%s\00", align 1
@.str.48.85 = private unnamed_addr constant [7 x i8] c"NULL%s\00", align 1
@.str.49.86 = private unnamed_addr constant [5 x i8] c"};\0A\0A\00", align 1
@.str.50.87 = private unnamed_addr constant [33 x i8] c"D_Reduction d_reduction_%d_%s = \00", align 1
@.str.51.88 = private unnamed_addr constant [47 x i8] c"{%d, %d, %s, %s, %d, %d, %d, %d, %d, %d, %s};\0A\00", align 1
@.str.52 = private unnamed_addr constant [79 x i8] c"(void *_ps, void **_children, int _n_children, int _offset, D_Parser *_parser)\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c"(_n_children)\00", align 1
@.str.55 = private unnamed_addr constant [30 x i8] c"(D_PN(_ps, _offset)->globals)\00", align 1
@.str.56 = private unnamed_addr constant [34 x i8] c"(*(D_PN(_children[%d], _offset)))\00", align 1
@.str.57 = private unnamed_addr constant [50 x i8] c"$nXXXX greater than number of children at line %d\00", align 1
@.str.58 = private unnamed_addr constant [24 x i8] c"(*(D_PN(_ps, _offset)))\00", align 1
@.str.59 = private unnamed_addr constant [27 x i8] c"(D_PN(_ps, _offset)->user)\00", align 1
@.str.60 = private unnamed_addr constant [37 x i8] c"(D_PN(_children[%d], _offset)->user)\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"reject\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c" return -1 \00", align 1
@.str.63 = private unnamed_addr constant [11 x i8] c"free_below\00", align 1
@.str.64 = private unnamed_addr constant [54 x i8] c" free_D_ParseTreeBelow(_parser, (D_PN(_ps, _offset)))\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"scope\00", align 1
@.str.66 = private unnamed_addr constant [28 x i8] c"(D_PN(_ps, _offset)->scope)\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"parser\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"_parser\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c"pass\00", align 1
@.str.70 = private unnamed_addr constant [26 x i8] c"unknown pass '%s' line %d\00", align 1
@.str.71 = private unnamed_addr constant [12 x i8] c"  return 0;\00", align 1
@.str.72 = private unnamed_addr constant [4 x i8] c"}\0A\0A\00", align 1
@.str.73 = private unnamed_addr constant [53 x i8] c"D_Shift d_shift_%d_%s = { %d, %d, %d, %d, %d, %s };\0A\00", align 1
@.str.74 = private unnamed_addr constant [31 x i8] c"D_Shift *d_shifts_%d_%s[] = {\0A\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"&d_shift_%d_%s%s\00", align 1
@.str.76 = private unnamed_addr constant [7 x i8] c", NULL\00", align 1
@.str.77 = private unnamed_addr constant [39 x i8] c"D_Shift *d_accepts_diff_%d_%d_%s[] = {\00", align 1
@.str.78 = private unnamed_addr constant [16 x i8] c"&d_shift_%d_%s,\00", align 1
@.str.79 = private unnamed_addr constant [5 x i8] c"0};\0A\00", align 1
@.str.80 = private unnamed_addr constant [38 x i8] c"D_Shift **d_accepts_diff_%d_%s[] = {\0A\00", align 1
@.str.81 = private unnamed_addr constant [26 x i8] c"d_accepts_diff_%d_%d_%s%s\00", align 1
@.str.82 = private unnamed_addr constant [3 x i8] c",\0A\00", align 1
@.str.83 = private unnamed_addr constant [50 x i8] c"%s d_scanner_%d_%d_%d_%s[SCANNER_BLOCK_SIZE] = {\0A\00", align 1
@.str.84 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.85 = private unnamed_addr constant [55 x i8] c"%s d_accepts_diff_%d_%d_%d_%s[SCANNER_BLOCK_SIZE] = {\0A\00", align 1
@.str.86 = private unnamed_addr constant [17 x i8] c"d_shift_%d_%d_%s\00", align 1
@.str.87 = private unnamed_addr constant [19 x i8] c"D_Shift *%s[] = { \00", align 1
@.str.88 = private unnamed_addr constant [11 x i8] c", NULL};\0A\0A\00", align 1
@.str.89 = private unnamed_addr constant [31 x i8] c"SB_%s d_scanner_%d_%s[%d] = {\0A\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"{ %s, {\00", align 1
@.str.91 = private unnamed_addr constant [22 x i8] c"{ d_shift_%d_%d_%s, {\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"{ NULL, {\00", align 1
@.str.93 = private unnamed_addr constant [22 x i8] c"d_scanner_%d_%d_%d_%s\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"\0A  \00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"}},\0A\00", align 1
@.str.96 = private unnamed_addr constant [4 x i8] c"}}\0A\00", align 1
@.str.97 = private unnamed_addr constant [40 x i8] c"SB_trans_%s d_transition_%d_%s[%d] = {\0A\00", align 1
@.str.98 = private unnamed_addr constant [4 x i8] c"{{ \00", align 1
@.str.99 = private unnamed_addr constant [27 x i8] c"d_accepts_diff_%d_%d_%d_%s\00", align 1
@.str.100 = private unnamed_addr constant [14 x i8] c"unsigned char\00", align 1
@.str.101 = private unnamed_addr constant [15 x i8] c"unsigned short\00", align 1
@.str.102 = private unnamed_addr constant [13 x i8] c"unsigned int\00", align 1
@.str.104 = private unnamed_addr constant [6 x i8] c"uint8\00", align 1
@.str.105 = private unnamed_addr constant [7 x i8] c"uint16\00", align 1
@.str.106 = private unnamed_addr constant [7 x i8] c"uint32\00", align 1
@.str.107 = private unnamed_addr constant [153 x i8] c"int d_scan_code_%d_%s(char **as, int *col, int *line,unsigned short *symbol, int *term_priority,unsigned char *op_assoc, int *op_priority) {\0A  int res;\0A\00", align 1
@.str.108 = private unnamed_addr constant [14 x i8] c"  if ((res = \00", align 1
@.str.109 = private unnamed_addr constant [4 x i8] c"%s(\00", align 1
@.str.110 = private unnamed_addr constant [106 x i8] c"as, col, line, op_assoc, op_priority))) {\0A    *symbol = %d;\0A    *term_priority = %d;\0A    return res;\0A  }\0A\00", align 1
@.str.111 = private unnamed_addr constant [16 x i8] c"  return 0;\0A}\0A\0A\00", align 1
@.str.112 = private unnamed_addr constant [40 x i8] c"unsigned char d_goto_valid_%d_%s[] = {\0A\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"0x%x%s\00", align 1
@.str.114 = private unnamed_addr constant [38 x i8] c"D_Reduction *d_reductions_%d_%s[] = {\00", align 1
@.str.115 = private unnamed_addr constant [21 x i8] c"&d_reduction_%d_%s%s\00", align 1
@.str.116 = private unnamed_addr constant [53 x i8] c"D_RightEpsilonHint d_right_epsilon_hints_%d_%s[] = {\00", align 1
@.str.117 = private unnamed_addr constant [32 x i8] c"{ %d, %d, &d_reduction_%d_%s}%s\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"unsigned short d_gotos_%s[%d] = {\0A\00", align 1
@.str.119 = private unnamed_addr constant [37 x i8] c"unsigned short d_gotos_%s[1] = {0};\0A\00", align 1
@.str.120 = private unnamed_addr constant [57 x i8] c"D_ErrorRecoveryHint d_error_recovery_hints_%d_%s[] = {%s\00", align 1
@.str.121 = private unnamed_addr constant [18 x i8] c"{ %d, %d, \22%s\22}%s\00", align 1
@.str.122 = private unnamed_addr constant [26 x i8] c"\0AD_State d_states_%s[] = \00", align 1
@.str.123 = private unnamed_addr constant [3 x i8] c"{ \00", align 1
@.str.124 = private unnamed_addr constant [21 x i8] c"d_goto_valid_%d_%s, \00", align 1
@.str.125 = private unnamed_addr constant [28 x i8] c"{ %d, d_reductions_%d_%s}, \00", align 1
@.str.126 = private unnamed_addr constant [13 x i8] c"{ 0, NULL}, \00", align 1
@.str.127 = private unnamed_addr constant [37 x i8] c"{ %d, d_right_epsilon_hints_%d_%s}, \00", align 1
@.str.128 = private unnamed_addr constant [38 x i8] c"{ %d, d_error_recovery_hints_%d_%s}, \00", align 1
@.str.129 = private unnamed_addr constant [17 x i8] c"d_shifts_%d_%s, \00", align 1
@.str.130 = private unnamed_addr constant [16 x i8] c"D_SHIFTS_CODE, \00", align 1
@.str.131 = private unnamed_addr constant [20 x i8] c"d_scan_code_%d_%s, \00", align 1
@.str.132 = private unnamed_addr constant [25 x i8] c"(void*)d_scanner_%d_%s, \00", align 1
@.str.133 = private unnamed_addr constant [13 x i8] c"sizeof(%s), \00", align 1
@.str.134 = private unnamed_addr constant [4 x i8] c"1, \00", align 1
@.str.135 = private unnamed_addr constant [4 x i8] c"0, \00", align 1
@scan_kind_strings = internal unnamed_addr constant [4 x ptr] [ptr @.str.142, ptr @.str.143, ptr @.str.144, ptr null], align 16
@.str.136 = private unnamed_addr constant [28 x i8] c"(void*)d_transition_%d_%s, \00", align 1
@.str.137 = private unnamed_addr constant [23 x i8] c"d_accepts_diff_%d_%s, \00", align 1
@.str.138 = private unnamed_addr constant [19 x i8] c"(D_Shift***)NULL, \00", align 1
@.str.139 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.140 = private unnamed_addr constant [5 x i8] c"}%s\0A\00", align 1
@.str.141 = private unnamed_addr constant [29 x i8] c"{{0, {0, NULL}, 0, NULL}};\0A\0A\00", align 1
@.str.142 = private unnamed_addr constant [11 x i8] c"D_SCAN_ALL\00", align 1
@.str.143 = private unnamed_addr constant [15 x i8] c"D_SCAN_LONGEST\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c"D_SCAN_MIXED\00", align 1
@.str.145 = private unnamed_addr constant [29 x i8] c"D_Symbol d_symbols_%s[] = {\0A\00", align 1
@.str.146 = private unnamed_addr constant [17 x i8] c"{%s, \22%s\22, %d},\0A\00", align 1
@d_internal = internal unnamed_addr constant [2 x ptr] [ptr @.str.147, ptr @.str.148], align 16
@d_symbol = internal unnamed_addr constant [4 x ptr] [ptr @.str.149, ptr @.str.150, ptr @.str.151, ptr @.str.152], align 16
@.str.147 = private unnamed_addr constant [15 x i8] c"D_SYMBOL_NTERM\00", align 1
@.str.148 = private unnamed_addr constant [18 x i8] c"D_SYMBOL_INTERNAL\00", align 1
@.str.149 = private unnamed_addr constant [16 x i8] c"D_SYMBOL_STRING\00", align 1
@.str.150 = private unnamed_addr constant [15 x i8] c"D_SYMBOL_REGEX\00", align 1
@.str.151 = private unnamed_addr constant [14 x i8] c"D_SYMBOL_CODE\00", align 1
@.str.152 = private unnamed_addr constant [15 x i8] c"D_SYMBOL_TOKEN\00", align 1
@.str.153 = private unnamed_addr constant [26 x i8] c"D_Pass d_passes_%s[] = {\0A\00", align 1
@.str.154 = private unnamed_addr constant [24 x i8] c"{\22%s\22, %d, 0x%X, %d}%s\0A\00", align 1
@.str.155 = private unnamed_addr constant [34 x i8] c"declare expects argument, line %d\00", align 1
@.str.1.156 = private unnamed_addr constant [42 x i8] c"declare does not expect argument, line %d\00", align 1
@.str.2.159 = private unnamed_addr constant [28 x i8] c"duplicate pass '%s' line %d\00", align 1
@.str.3.160 = private unnamed_addr constant [26 x i8] c"unknown pass '%s' line %d\00", align 1
@.str.4.161 = private unnamed_addr constant [12 x i8] c" _synthetic\00", align 1
@.str.5.162 = private unnamed_addr constant [6 x i8] c"%s.%d\00", align 1
@.str.6.163 = private unnamed_addr constant [8 x i8] c"0 Start\00", align 1
@.str.7.164 = private unnamed_addr constant [8 x i8] c"1 Start\00", align 1
@.str.8.165 = private unnamed_addr constant [7 x i8] c"<EOF> \00", align 1
@.str.9.166 = private unnamed_addr constant [14 x i8] c"string(\22%s\22) \00", align 1
@.str.10.167 = private unnamed_addr constant [13 x i8] c"regex(\22%s\22) \00", align 1
@.str.11.168 = private unnamed_addr constant [12 x i8] c"code(\22%s\22) \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"token(\22%s\22) \00", align 1
@.str.13.170 = private unnamed_addr constant [19 x i8] c"unknown token kind\00", align 1
@.str.14.171 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.15.181 = private unnamed_addr constant [6 x i8] c"$none\00", align 1
@.str.16.182 = private unnamed_addr constant [6 x i8] c"$left\00", align 1
@.str.17.183 = private unnamed_addr constant [7 x i8] c"$right\00", align 1
@.str.18.184 = private unnamed_addr constant [12 x i8] c"$unary_left\00", align 1
@.str.19.185 = private unnamed_addr constant [13 x i8] c"$unary_right\00", align 1
@.str.20.186 = private unnamed_addr constant [13 x i8] c"$binary_left\00", align 1
@.str.21.187 = private unnamed_addr constant [14 x i8] c"$binary_right\00", align 1
@.str.22.188 = private unnamed_addr constant [9 x i8] c"$noassoc\00", align 1
@assoc_strings = internal global [8 x %struct.EnumStr] [%struct.EnumStr { i32 0, ptr @.str.15.181 }, %struct.EnumStr { i32 5, ptr @.str.16.182 }, %struct.EnumStr { i32 6, ptr @.str.17.183 }, %struct.EnumStr { i32 9, ptr @.str.18.184 }, %struct.EnumStr { i32 10, ptr @.str.19.185 }, %struct.EnumStr { i32 17, ptr @.str.20.186 }, %struct.EnumStr { i32 18, ptr @.str.21.187 }, %struct.EnumStr { i32 32, ptr @.str.22.188 }], align 16
@.str.23.172 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@.str.24.173 = private unnamed_addr constant [30 x i8] c"SPECULATIVE_CODE\0A%s\0AEND CODE\0A\00", align 1
@.str.25.174 = private unnamed_addr constant [24 x i8] c"FINAL_CODE\0A%s\0AEND CODE\0A\00", align 1
@.str.27.175 = private unnamed_addr constant [9 x i8] c"%s (%d)\0A\00", align 1
@.str.28.176 = private unnamed_addr constant [4 x i8] c"\09: \00", align 1
@.str.29.177 = private unnamed_addr constant [4 x i8] c"\09| \00", align 1
@.str.30.178 = private unnamed_addr constant [7 x i8] c"op %d \00", align 1
@.str.31.179 = private unnamed_addr constant [9 x i8] c"rule %d \00", align 1
@.str.36.180 = private unnamed_addr constant [6 x i8] c"(%d)\0A\00", align 1
@.str.37.205 = private unnamed_addr constant [10 x i8] c"eq %d %d \00", align 1
@.str.38.206 = private unnamed_addr constant [20 x i8] c"diff state (%d %d) \00", align 1
@.str.39.207 = private unnamed_addr constant [11 x i8] c"diff rule \00", align 1
@.str.40.208 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.41.209 = private unnamed_addr constant [4 x i8] c"][ \00", align 1
@.str.43.210 = private unnamed_addr constant [18 x i8] c"reduces_to %d %d\0A\00", align 1
@.str.44.217 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.45.226 = private unnamed_addr constant [55 x i8] c"%d productions %d terminals %d states %d declarations\0A\00", align 1
@.str.46.105 = private unnamed_addr constant [50 x i8] c"encountered an escaped NULL while processing '%s'\00", align 1
@.str.47.106 = private unnamed_addr constant [33 x i8] c"empty string after unescape '%s'\00", align 1
@.str.48.191 = private unnamed_addr constant [23 x i8] c"STATE %d (%d ITEMS)%s\0A\00", align 1
@.str.49.190 = private unnamed_addr constant [8 x i8] c" ACCEPT\00", align 1
@.str.50.189 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.52.194 = private unnamed_addr constant [7 x i8] c" : %d\0A\00", align 1
@.str.54.195 = private unnamed_addr constant [5 x i8] c"\09%s\09\00", align 1
@action_types = internal unnamed_addr constant [3 x ptr] [ptr @.str.60.200, ptr @.str.61.201, ptr @.str.62.202], align 16
@.str.55.196 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.56.197 = private unnamed_addr constant [14 x i8] c"reduce/reduce\00", align 1
@.str.57.198 = private unnamed_addr constant [13 x i8] c"shift/reduce\00", align 1
@.str.58.192 = private unnamed_addr constant [6 x i8] c"\09%s: \00", align 1
@.str.59.193 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.60.200 = private unnamed_addr constant [7 x i8] c"ACCEPT\00", align 1
@.str.61.201 = private unnamed_addr constant [6 x i8] c"SHIFT\00", align 1
@.str.62.202 = private unnamed_addr constant [7 x i8] c"REDUCE\00", align 1
@.str.64.199 = private unnamed_addr constant [14 x i8] c"\09%s conflict \00", align 1
@.str.65.220 = private unnamed_addr constant [26 x i8] c"duplicate production '%s'\00", align 1
@.str.66.221 = private unnamed_addr constant [28 x i8] c"unresolved identifier: '%s'\00", align 1
@.str.67.228 = private unnamed_addr constant [31 x i8] c"circular regex production '%s'\00", align 1
@.str.68.229 = private unnamed_addr constant [69 x i8] c"final and/or multi-rule code not permitted in regex productions '%s'\00", align 1
@.str.69.230 = private unnamed_addr constant [62 x i8] c"regex production '%s' cannot invoke non-regex production '%s'\00", align 1
@.str.70.231 = private unnamed_addr constant [56 x i8] c"code not permitted in rule %d of regex productions '%s'\00", align 1
@.str.71.232 = private unnamed_addr constant [56 x i8] c"regex production '%s' cannot include scanners or tokens\00", align 1
@.str.72.233 = private unnamed_addr constant [50 x i8] c"unable to resolve circular regex production: '%s'\00", align 1
@.str.73.222 = private unnamed_addr constant [28 x i8] c"unresolved declaration '%s'\00", align 1
@.str.74.227 = private unnamed_addr constant [25 x i8] c"shared tokenize subtrees\00", align 1
@.str.75.223 = private unnamed_addr constant [11 x i8] c"whitespace\00", align 1
@.str.76.224 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.77.225 = private unnamed_addr constant [39 x i8] c"number of rules in default action != 1\00", align 1
@str = private unnamed_addr constant [13 x i8] c"PRODUCTIONS\0A\00", align 1
@str.78 = private unnamed_addr constant [11 x i8] c"TERMINALS\0A\00", align 1
@str.79 = private unnamed_addr constant [3 x i8] c"\09;\00", align 1
@str.80 = private unnamed_addr constant [9 x i8] c"  ACTION\00", align 1
@str.81 = private unnamed_addr constant [7 x i8] c"  GOTO\00", align 1
@str.82 = private unnamed_addr constant [49 x i8] c"  CONFLICT (before precedence and associativity)\00", align 1
@.str.236 = private unnamed_addr constant [28 x i8] c"%d scanners %d transitions\0A\00", align 1
@.str.1.237 = private unnamed_addr constant [25 x i8] c"bad (part of) regex: %s\0A\00", align 1
@trans_hash_fns = internal global %struct.hash_fns_t { ptr @trans_hash_fn, ptr @trans_cmp_fn, [2 x ptr] zeroinitializer }, align 8
@.str.246 = private unnamed_addr constant [29 x i8] c"%s:bad argument description\0A\00", align 1
@.str.1.247 = private unnamed_addr constant [24 x i8] c"Usage: %s [flags|args]\0A\00", align 1
@.str.2.251 = private unnamed_addr constant [18 x i8] c"  %c%c%c --%s%s%s\00", align 1
@.str.3.249 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@arg_types_desc = internal unnamed_addr constant [9 x ptr] [ptr @.str.15.262, ptr @.str.16.263, ptr @.str.17.264, ptr @.str.18.265, ptr @.str.19.266, ptr @.str.20.267, ptr @.str.21.268, ptr @.str.22.269, ptr @.str.23.270], align 16
@.str.4.252 = private unnamed_addr constant [11 x i8] c"          \00", align 1
@.str.5.253 = private unnamed_addr constant [8 x i8] c" %-9lld\00", align 1
@.str.6.254 = private unnamed_addr constant [6 x i8] c" %-9s\00", align 1
@.str.7.255 = private unnamed_addr constant [8 x i8] c" %-7s..\00", align 1
@.str.8.256 = private unnamed_addr constant [11 x i8] c" (null)   \00", align 1
@.str.9.257 = private unnamed_addr constant [8 x i8] c" %-9.3e\00", align 1
@.str.10.258 = private unnamed_addr constant [6 x i8] c" %-9d\00", align 1
@.str.11.260 = private unnamed_addr constant [6 x i8] c"true \00", align 1
@.str.12.259 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.13.261 = private unnamed_addr constant [5 x i8] c" %s\0A\00", align 1
@.str.14.248 = private unnamed_addr constant [80 x i8] c"                                                                               \00", align 1
@.str.15.262 = private unnamed_addr constant [9 x i8] c"int     \00", align 1
@.str.16.263 = private unnamed_addr constant [9 x i8] c"string  \00", align 1
@.str.17.264 = private unnamed_addr constant [9 x i8] c"double  \00", align 1
@.str.18.265 = private unnamed_addr constant [9 x i8] c"set off \00", align 1
@.str.19.266 = private unnamed_addr constant [9 x i8] c"set on  \00", align 1
@.str.20.267 = private unnamed_addr constant [9 x i8] c"incr    \00", align 1
@.str.21.268 = private unnamed_addr constant [9 x i8] c"toggle  \00", align 1
@.str.22.269 = private unnamed_addr constant [9 x i8] c"int64   \00", align 1
@.str.23.270 = private unnamed_addr constant [9 x i8] c"        \00", align 1
@.str.24.250 = private unnamed_addr constant [9 x i8] c"ISDfF+TL\00", align 1
@.str.4.273 = private unnamed_addr constant [5 x i8] c"[%s]\00", align 1
@.str.6.274 = private unnamed_addr constant [37 x i8] c"unresolved ambiguity line %d file %s\00", align 1
@_wspace = internal global <{ [33 x i8], [223 x i8] }> <{ [33 x i8] c"\00\00\00\00\00\00\00\00\00\01\00\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", [223 x i8] zeroinitializer }>, align 16
@.str.8.282 = private unnamed_addr constant [36 x i8] c"internal error: bad final reduction\00", align 1
@.str.9.283 = private unnamed_addr constant [71 x i8] c"%d states %d scans %d shifts %d reductions %d compares %d ambiguities\0A\00", align 1
@.str.10.279 = private unnamed_addr constant [28 x i8] c"syntax error, '%s' line %d\0A\00", align 1
@.str.11.277 = private unnamed_addr constant [5 x i8] c"line\00", align 1
@child_table = internal unnamed_addr constant [4 x [3 x [6 x i32]]] [[3 x [6 x i32]] [[6 x i32] [i32 1, i32 0, i32 1, i32 1, i32 0, i32 0], [6 x i32] [i32 1, i32 1, i32 1, i32 1, i32 666, i32 666], [6 x i32] [i32 1, i32 0, i32 666, i32 666, i32 1, i32 1]], [3 x [6 x i32]] [[6 x i32] [i32 1, i32 0, i32 0, i32 0, i32 1, i32 1], [6 x i32] [i32 1, i32 0, i32 1, i32 1, i32 666, i32 666], [6 x i32] [i32 1, i32 1, i32 666, i32 666, i32 1, i32 1]], [3 x [6 x i32]] [[6 x i32] [i32 1, i32 0, i32 0, i32 666, i32 0, i32 666], [6 x i32] [i32 1, i32 0, i32 1, i32 666, i32 666, i32 666], [6 x i32] [i32 1, i32 1, i32 666, i32 666, i32 1, i32 666]], [3 x [6 x i32]] [[6 x i32] [i32 1, i32 0, i32 666, i32 0, i32 666, i32 0], [6 x i32] [i32 1, i32 1, i32 666, i32 1, i32 666, i32 666], [6 x i32] [i32 1, i32 0, i32 666, i32 666, i32 666, i32 1]]], align 16
@path1 = internal global %struct.anon zeroinitializer, align 8
@.str.12.278 = private unnamed_addr constant [48 x i8] c"circular parse: unable to fixup internal symbol\00", align 1
@prime2 = internal global [29 x i32] [i32 1, i32 3, i32 7, i32 13, i32 31, i32 61, i32 127, i32 251, i32 509, i32 1021, i32 2039, i32 4093, i32 8191, i32 16381, i32 32749, i32 65521, i32 131071, i32 262139, i32 524287, i32 1048573, i32 2097143, i32 4194301, i32 8388593, i32 16777213, i32 33554393, i32 67108859, i32 134217689, i32 268435399, i32 536870909], align 16
@verbose_level = internal global i32 0, align 4
@debug_level = internal global i32 0, align 4
@.str.292 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.301 = private unnamed_addr constant [10 x i8] c"fail: %s\0A\00", align 1
@stderr = external local_unnamed_addr global ptr, align 8
@.str.324 = private unnamed_addr constant [6 x i8] c"%d.%d\00", align 1
@.str.1.325 = private unnamed_addr constant [4 x i8] c".%d\00", align 1
@d_reduction_1_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 1, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_2_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 2, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_3_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 3, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_4_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 3, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_5_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 4, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_6_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 5, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_7_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 5, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_8_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 6, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_9_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 6, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_10_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 7, ptr null, ptr @d_final_reduction_code_7_10_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_11_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 7, ptr null, ptr @d_final_reduction_code_7_11_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_12_dparser_gram = internal global %struct.D_Reduction { i16 4, i16 7, ptr null, ptr @d_final_reduction_code_7_12_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_13_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 7, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_14_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 7, ptr null, ptr @d_final_reduction_code_7_14_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_15_dparser_gram = internal global %struct.D_Reduction { i16 4, i16 7, ptr null, ptr @d_final_reduction_code_7_15_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_16_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 8, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_17_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 8, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_18_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 9, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_19_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 9, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_20_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 10, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_21_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 10, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_22_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 11, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_23_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 11, ptr null, ptr @d_final_reduction_code_11_23_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_24_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 12, ptr null, ptr @d_final_reduction_code_12_24_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_25_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 12, ptr null, ptr @d_final_reduction_code_12_25_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_26_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 12, ptr null, ptr @d_final_reduction_code_12_26_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_27_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 12, ptr null, ptr @d_final_reduction_code_12_27_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_28_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 12, ptr null, ptr @d_final_reduction_code_12_28_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_29_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_29_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_30_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_30_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_31_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_31_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_32_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_32_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_33_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_33_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_34_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_34_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_35_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_35_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_36_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 13, ptr null, ptr @d_final_reduction_code_13_36_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_37_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 14, ptr null, ptr @d_final_reduction_code_14_37_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_38_dparser_gram = internal global %struct.D_Reduction { i16 4, i16 15, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_40_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 15, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_41_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 16, ptr null, ptr @d_final_reduction_code_16_41_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_42_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 17, ptr null, ptr @d_final_reduction_code_17_42_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_43_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 18, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_45_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 19, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_46_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 20, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_47_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 20, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_48_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 21, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_49_dparser_gram = internal global %struct.D_Reduction { i16 4, i16 22, ptr null, ptr @d_final_reduction_code_22_49_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_50_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 23, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_51_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 23, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_52_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 24, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_53_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 24, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_54_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 25, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_55_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 26, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_56_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 26, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_57_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 27, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_58_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 27, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_59_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 28, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_60_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 29, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_61_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 29, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_62_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 30, ptr null, ptr @d_final_reduction_code_30_62_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_63_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 31, ptr null, ptr @d_final_reduction_code_31_63_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_64_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 31, ptr null, ptr @d_final_reduction_code_31_64_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_65_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 31, ptr null, ptr @d_final_reduction_code_31_65_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_66_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 31, ptr null, ptr @d_final_reduction_code_31_66_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_67_dparser_gram = internal global %struct.D_Reduction { i16 4, i16 31, ptr null, ptr @d_final_reduction_code_31_67_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_68_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 32, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_69_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 32, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_70_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 33, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_71_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 33, ptr null, ptr @d_final_reduction_code_33_71_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_72_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 33, ptr null, ptr @d_final_reduction_code_33_72_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_73_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 34, ptr null, ptr @d_final_reduction_code_34_73_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@.str.326 = private unnamed_addr constant [34 x i8] c"terminal priority on non-terminal\00", align 1
@d_reduction_74_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 35, ptr null, ptr @d_final_reduction_code_35_74_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@.str.1.327 = private unnamed_addr constant [33 x i8] c"ignore-case (/i) on non-terminal\00", align 1
@d_reduction_75_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 35, ptr null, ptr @d_final_reduction_code_35_75_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_76_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 35, ptr null, ptr @d_final_reduction_code_35_76_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_77_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 35, ptr null, ptr @d_final_reduction_code_35_77_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_78_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 35, ptr null, ptr @d_final_reduction_code_35_78_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_79_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 36, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_80_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_80_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_81_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_81_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_82_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_82_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_83_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_83_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_84_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_84_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_85_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_85_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_86_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_86_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_87_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_87_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_88_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_88_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_89_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 37, ptr null, ptr @d_final_reduction_code_37_89_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_90_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 38, ptr null, ptr @d_final_reduction_code_38_90_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_91_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 39, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_92_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 40, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_93_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 40, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_94_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 41, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_95_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 41, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_96_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 42, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_97_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 42, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_98_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 43, ptr null, ptr @d_final_reduction_code_43_98_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_99_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 44, ptr null, ptr @d_final_reduction_code_44_99_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_100_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 45, ptr null, ptr @d_final_reduction_code_45_100_dparser_gram, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_101_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 46, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_102_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 47, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_103_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 47, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_104_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 48, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_105_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 49, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_106_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 49, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_107_dparser_gram = internal global %struct.D_Reduction { i16 3, i16 50, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_110_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 50, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_115_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 51, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_116_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 51, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_117_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 52, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_118_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 52, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_119_dparser_gram = internal global %struct.D_Reduction { i16 2, i16 53, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_120_dparser_gram = internal global %struct.D_Reduction { i16 0, i16 53, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 -1, i32 0, ptr null }, align 8
@d_reduction_121_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 54, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_122_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 55, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_123_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 56, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_124_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 57, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_125_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 58, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_128_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 59, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_129_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 60, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_reduction_130_dparser_gram = internal global %struct.D_Reduction { i16 1, i16 61, ptr null, ptr null, i16 0, i16 0, i32 0, i32 0, i32 0, i32 0, ptr null }, align 8
@d_shift_0_dparser_gram = internal global %struct.D_Shift { i16 62, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_1_dparser_gram = internal global %struct.D_Shift { i16 63, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_2_dparser_gram = internal global %struct.D_Shift { i16 64, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_4_dparser_gram = internal global %struct.D_Shift { i16 66, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_6_dparser_gram = internal global %struct.D_Shift { i16 68, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_7_dparser_gram = internal global %struct.D_Shift { i16 69, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_9_dparser_gram = internal global %struct.D_Shift { i16 71, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_10_dparser_gram = internal global %struct.D_Shift { i16 72, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_11_dparser_gram = internal global %struct.D_Shift { i16 73, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_12_dparser_gram = internal global %struct.D_Shift { i16 74, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_13_dparser_gram = internal global %struct.D_Shift { i16 75, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_14_dparser_gram = internal global %struct.D_Shift { i16 76, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_15_dparser_gram = internal global %struct.D_Shift { i16 77, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_16_dparser_gram = internal global %struct.D_Shift { i16 78, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_17_dparser_gram = internal global %struct.D_Shift { i16 79, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_18_dparser_gram = internal global %struct.D_Shift { i16 80, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_19_dparser_gram = internal global %struct.D_Shift { i16 81, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_20_dparser_gram = internal global %struct.D_Shift { i16 82, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_21_dparser_gram = internal global %struct.D_Shift { i16 83, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_22_dparser_gram = internal global %struct.D_Shift { i16 84, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_23_dparser_gram = internal global %struct.D_Shift { i16 85, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_26_dparser_gram = internal global %struct.D_Shift { i16 88, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_27_dparser_gram = internal global %struct.D_Shift { i16 89, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_28_dparser_gram = internal global %struct.D_Shift { i16 90, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_29_dparser_gram = internal global %struct.D_Shift { i16 91, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_31_dparser_gram = internal global %struct.D_Shift { i16 93, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_32_dparser_gram = internal global %struct.D_Shift { i16 94, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_33_dparser_gram = internal global %struct.D_Shift { i16 95, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_34_dparser_gram = internal global %struct.D_Shift { i16 96, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_35_dparser_gram = internal global %struct.D_Shift { i16 97, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_36_dparser_gram = internal global %struct.D_Shift { i16 98, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_37_dparser_gram = internal global %struct.D_Shift { i16 99, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_38_dparser_gram = internal global %struct.D_Shift { i16 100, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_39_dparser_gram = internal global %struct.D_Shift { i16 101, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_40_dparser_gram = internal global %struct.D_Shift { i16 102, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_41_dparser_gram = internal global %struct.D_Shift { i16 103, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_42_dparser_gram = internal global %struct.D_Shift { i16 104, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_43_dparser_gram = internal global %struct.D_Shift { i16 105, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_44_dparser_gram = internal global %struct.D_Shift { i16 106, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_45_dparser_gram = internal global %struct.D_Shift { i16 107, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_46_dparser_gram = internal global %struct.D_Shift { i16 108, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_47_dparser_gram = internal global %struct.D_Shift { i16 109, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_49_dparser_gram = internal global %struct.D_Shift { i16 111, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_51_dparser_gram = internal global %struct.D_Shift { i16 113, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_52_dparser_gram = internal global %struct.D_Shift { i16 114, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_59_dparser_gram = internal global %struct.D_Shift { i16 121, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_60_dparser_gram = internal global %struct.D_Shift { i16 122, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_61_dparser_gram = internal global %struct.D_Shift { i16 123, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_62_dparser_gram = internal global %struct.D_Shift { i16 124, i8 0, i8 0, i32 0, i32 -1, ptr null }, align 8
@d_shift_63_dparser_gram = internal global %struct.D_Shift { i16 125, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_64_dparser_gram = internal global %struct.D_Shift { i16 126, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shift_65_dparser_gram = internal global %struct.D_Shift { i16 127, i8 0, i8 0, i32 0, i32 0, ptr null }, align 8
@d_shifts_3_dparser_gram = internal global [10 x ptr] [ptr @d_shift_0_dparser_gram, ptr @d_shift_2_dparser_gram, ptr @d_shift_4_dparser_gram, ptr @d_shift_6_dparser_gram, ptr @d_shift_7_dparser_gram, ptr @d_shift_23_dparser_gram, ptr @d_shift_27_dparser_gram, ptr @d_shift_49_dparser_gram, ptr @d_shift_62_dparser_gram, ptr null], align 16
@d_accepts_diff_3_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_3_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_27_dparser_gram, ptr null], align 16
@d_accepts_diff_3_dparser_gram = internal global [2 x ptr] [ptr @d_accepts_diff_3_0_dparser_gram, ptr @d_accepts_diff_3_1_dparser_gram], align 16
@d_scanner_3_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00", align 16
@d_accepts_diff_3_0_0_dparser_gram = internal global [64 x i8] zeroinitializer, align 16
@d_scanner_3_0_1_dparser_gram = internal global [64 x i8] c"\00\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\00\00\00\00\05\00\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\06\00\00\00\00", align 16
@d_scanner_3_0_2_dparser_gram = internal global [64 x i8] zeroinitializer, align 16
@d_scanner_3_1_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\00\00\00", align 16
@d_shift_3_2_dparser_gram = internal global [2 x ptr] [ptr @d_shift_23_dparser_gram, ptr null], align 16
@d_scanner_3_3_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\04\04\04\04\04\04\04\04\04\00\00\00\00\00\00", align 16
@d_scanner_3_3_1_dparser_gram = internal global [64 x i8] c"\00\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\00\00\00\00\04\00\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\00\00\00\00\00", align 16
@d_shift_3_3_dparser_gram = internal global [2 x ptr] [ptr @d_shift_62_dparser_gram, ptr null], align 16
@d_accepts_diff_3_4_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00", align 16
@d_accepts_diff_3_4_1_dparser_gram = internal global [64 x i8] c"\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\00\00\00\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\00\00\00\00", align 16
@d_shift_3_4_dparser_gram = internal global [2 x ptr] [ptr @d_shift_27_dparser_gram, ptr null], align 16
@d_shift_3_5_dparser_gram = internal global [2 x ptr] [ptr @d_shift_49_dparser_gram, ptr null], align 16
@d_scanner_3_6_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08\00\00\09\00\00\00\00\00\00\00\00\00\00\00\0A\00\00\0B\0C", [11 x i8] zeroinitializer }>, align 16
@d_scanner_3_7_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0D", [28 x i8] zeroinitializer }>, align 16
@d_scanner_3_8_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E", [26 x i8] zeroinitializer }>, align 16
@d_scanner_3_9_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0F", [30 x i8] zeroinitializer }>, align 16
@d_scanner_3_10_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10", [28 x i8] zeroinitializer }>, align 16
@d_scanner_3_11_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\11", [16 x i8] zeroinitializer }>, align 16
@d_scanner_3_12_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12", [11 x i8] zeroinitializer }>, align 16
@d_scanner_3_13_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13", [28 x i8] zeroinitializer }>, align 16
@d_scanner_3_14_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14", [12 x i8] zeroinitializer }>, align 16
@d_scanner_3_15_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15", [30 x i8] zeroinitializer }>, align 16
@d_scanner_3_16_1_dparser_gram = internal global <{ [44 x i8], [20 x i8] }> <{ [44 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16", [20 x i8] zeroinitializer }>, align 16
@d_scanner_3_17_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17", [22 x i8] zeroinitializer }>, align 16
@d_scanner_3_18_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\18", [19 x i8] zeroinitializer }>, align 16
@d_scanner_3_19_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19", [12 x i8] zeroinitializer }>, align 16
@d_scanner_3_20_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A", [17 x i8] zeroinitializer }>, align 16
@d_scanner_3_21_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1B", [26 x i8] zeroinitializer }>, align 16
@d_scanner_3_22_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1C", [16 x i8] zeroinitializer }>, align 16
@d_scanner_3_23_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1D", [30 x i8] zeroinitializer }>, align 16
@d_shift_3_24_dparser_gram = internal global [2 x ptr] [ptr @d_shift_7_dparser_gram, ptr null], align 16
@d_scanner_3_25_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1E", [17 x i8] zeroinitializer }>, align 16
@d_scanner_3_26_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1F", [17 x i8] zeroinitializer }>, align 16
@d_scanner_3_27_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 ", [17 x i8] zeroinitializer }>, align 16
@d_scanner_3_28_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00!", [13 x i8] zeroinitializer }>, align 16
@d_scanner_3_29_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\22", [26 x i8] zeroinitializer }>, align 16
@d_shift_3_30_dparser_gram = internal global [2 x ptr] [ptr @d_shift_4_dparser_gram, ptr null], align 16
@d_scanner_3_31_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00#\00\00", align 16
@d_scanner_3_32_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00$", [26 x i8] zeroinitializer }>, align 16
@d_scanner_3_33_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00%", [13 x i8] zeroinitializer }>, align 16
@d_shift_3_34_dparser_gram = internal global [2 x ptr] [ptr @d_shift_6_dparser_gram, ptr null], align 16
@d_shift_3_35_dparser_gram = internal global [2 x ptr] [ptr @d_shift_2_dparser_gram, ptr null], align 16
@d_shift_3_36_dparser_gram = internal global [2 x ptr] [ptr @d_shift_0_dparser_gram, ptr null], align 16
@d_shifts_4_dparser_gram = internal global [11 x ptr] [ptr @d_shift_31_dparser_gram, ptr @d_shift_49_dparser_gram, ptr @d_shift_51_dparser_gram, ptr @d_shift_59_dparser_gram, ptr @d_shift_60_dparser_gram, ptr @d_shift_61_dparser_gram, ptr @d_shift_62_dparser_gram, ptr @d_shift_63_dparser_gram, ptr @d_shift_64_dparser_gram, ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_4_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_4_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_59_dparser_gram, ptr null], align 16
@d_accepts_diff_4_2_dparser_gram = internal global [2 x ptr] [ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_4_dparser_gram = internal global [3 x ptr] [ptr @d_accepts_diff_4_0_dparser_gram, ptr @d_accepts_diff_4_1_dparser_gram, ptr @d_accepts_diff_4_2_dparser_gram], align 16
@d_scanner_4_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03\02\02\02\02\04\05\00\02\02\02\06\02\02\07\08\08\08\08\08\08\08\08\08\02\02\02\02\02\02", align 16
@d_scanner_4_0_1_dparser_gram = internal global [64 x i8] c"\02\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0A\02\00\02\0B\02\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0C\02\00\02\00", align 16
@d_scanner_4_2_0_dparser_gram = internal global [64 x i8] c"\00\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@d_scanner_4_2_1_dparser_gram = internal global [64 x i8] c"\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0F\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@d_scanner_4_2_2_dparser_gram = internal global [64 x i8] c"\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@d_scanner_4_3_0_dparser_gram = internal global [64 x i8] c"\00\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\11\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10", align 16
@d_scanner_4_3_1_dparser_gram = internal global [64 x i8] c"\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\12\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10", align 16
@d_scanner_4_3_2_dparser_gram = internal global [64 x i8] c"\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10", align 16
@d_shift_4_4_dparser_gram = internal global [2 x ptr] [ptr @d_shift_31_dparser_gram, ptr null], align 16
@d_scanner_4_5_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\08\08\08\08\08\08\08\08\08\00\00\00\00\00\00", align 16
@d_scanner_4_6_0_dparser_gram = internal global <{ [56 x i8], [8 x i8] }> <{ [56 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13\13\13\13\13\13\13\13", [8 x i8] zeroinitializer }>, align 16
@d_scanner_4_6_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\14\00\00\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\14\00\00\16\00\00\00\00\00\00\00", align 16
@d_accepts_diff_4_6_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00", align 16
@d_scanner_4_7_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08\08\08\08\08\08\08\08\08\08\00\00\00\00\00\00", align 16
@d_scanner_4_7_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\00\17", [10 x i8] zeroinitializer }>, align 16
@d_scanner_4_8_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\09\09\09\09\09\09\09\09\09\09\00\00\00\00\00\00", align 16
@d_scanner_4_8_1_dparser_gram = internal global [64 x i8] c"\00\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\00\00\00\00\09\00\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\00\00\00\00\00", align 16
@d_shift_4_9_dparser_gram = internal global [2 x ptr] [ptr @d_shift_51_dparser_gram, ptr null], align 16
@d_shift_4_10_dparser_gram = internal global [2 x ptr] [ptr @d_shift_59_dparser_gram, ptr null], align 16
@d_shift_4_13_dparser_gram = internal global [2 x ptr] [ptr @d_shift_61_dparser_gram, ptr null], align 16
@d_scanner_4_14_0_dparser_gram = internal global [64 x i8] c"\00\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18", align 16
@d_scanner_4_14_1_dparser_gram = internal global [64 x i8] c"\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18", align 16
@d_shift_4_16_dparser_gram = internal global [2 x ptr] [ptr @d_shift_60_dparser_gram, ptr null], align 16
@d_scanner_4_17_0_dparser_gram = internal global [64 x i8] c"\00\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19", align 16
@d_scanner_4_17_1_dparser_gram = internal global [64 x i8] c"\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19", align 16
@d_scanner_4_18_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\14", [10 x i8] zeroinitializer }>, align 16
@d_shift_4_19_dparser_gram = internal global [2 x ptr] [ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_scanner_4_20_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\00\00\00\00\00\00", align 16
@d_scanner_4_20_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\1A\1A\1A\1A\1A\1A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A\1A\1A\1A\1A\1A", [25 x i8] zeroinitializer }>, align 16
@d_shift_4_22_dparser_gram = internal global [2 x ptr] [ptr @d_shift_63_dparser_gram, ptr null], align 16
@d_scanner_4_25_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\1A\1A\1A\1A\1A\1A\00\00\00\00\00\1B\00\00\00\00\00\00\00\00\1B\00\00\00\00\00\00\00\00\00\00\00\1A\1A\1A\1A\1A\1A\00\00\00\00\00\1B\00\00\00\00\00\00\00\00\1B", [10 x i8] zeroinitializer }>, align 16
@d_shift_4_26_dparser_gram = internal global [2 x ptr] [ptr @d_shift_64_dparser_gram, ptr null], align 16
@d_shifts_5_dparser_gram = internal global [9 x ptr] [ptr @d_shift_14_dparser_gram, ptr @d_shift_15_dparser_gram, ptr @d_shift_16_dparser_gram, ptr @d_shift_17_dparser_gram, ptr @d_shift_18_dparser_gram, ptr @d_shift_19_dparser_gram, ptr @d_shift_20_dparser_gram, ptr @d_shift_21_dparser_gram, ptr null], align 16
@d_accepts_diff_5_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_5_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_5_0_dparser_gram], align 8
@d_scanner_5_0_1_dparser_gram = internal global <{ [56 x i8], [8 x i8] }> <{ [56 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\04\05\00\00\06", [8 x i8] zeroinitializer }>, align 16
@d_scanner_5_1_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07", [19 x i8] zeroinitializer }>, align 16
@d_scanner_5_2_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08", [16 x i8] zeroinitializer }>, align 16
@d_scanner_5_3_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\09\00\00\00\0A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0B", [10 x i8] zeroinitializer }>, align 16
@d_scanner_5_4_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C", [16 x i8] zeroinitializer }>, align 16
@d_scanner_5_5_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0D", [23 x i8] zeroinitializer }>, align 16
@d_scanner_5_6_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E", [19 x i8] zeroinitializer }>, align 16
@d_scanner_5_7_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0F", [17 x i8] zeroinitializer }>, align 16
@d_scanner_5_8_1_dparser_gram = internal global <{ [55 x i8], [9 x i8] }> <{ [55 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10", [9 x i8] zeroinitializer }>, align 16
@d_scanner_5_9_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\11", [11 x i8] zeroinitializer }>, align 16
@d_scanner_5_10_1_dparser_gram = internal global <{ [35 x i8], [29 x i8] }> <{ [35 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12", [29 x i8] zeroinitializer }>, align 16
@d_scanner_5_11_1_dparser_gram = internal global <{ [44 x i8], [20 x i8] }> <{ [44 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13", [20 x i8] zeroinitializer }>, align 16
@d_scanner_5_12_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14", [22 x i8] zeroinitializer }>, align 16
@d_scanner_5_13_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_14_1_dparser_gram = internal global <{ [40 x i8], [24 x i8] }> <{ [40 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16", [24 x i8] zeroinitializer }>, align 16
@d_scanner_5_15_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_16_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\18", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_17_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19", [15 x i8] zeroinitializer }>, align 16
@d_scanner_5_18_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_19_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1B", [11 x i8] zeroinitializer }>, align 16
@d_scanner_5_20_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1C\00\00\00\00\00\1D", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_21_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1E", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_22_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1F", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_23_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 ", [16 x i8] zeroinitializer }>, align 16
@d_scanner_5_24_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00!", [30 x i8] zeroinitializer }>, align 16
@d_scanner_5_25_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\22", [17 x i8] zeroinitializer }>, align 16
@d_scanner_5_26_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00#", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_27_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00$", [30 x i8] zeroinitializer }>, align 16
@d_scanner_5_28_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00%", [10 x i8] zeroinitializer }>, align 16
@d_scanner_5_29_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_30_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00'", [15 x i8] zeroinitializer }>, align 16
@d_scanner_5_31_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(", [15 x i8] zeroinitializer }>, align 16
@d_scanner_5_32_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00)", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_33_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00*", [22 x i8] zeroinitializer }>, align 16
@d_scanner_5_34_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00+", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_35_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00,", [11 x i8] zeroinitializer }>, align 16
@d_scanner_5_36_1_dparser_gram = internal global <{ [35 x i8], [29 x i8] }> <{ [35 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00-", [29 x i8] zeroinitializer }>, align 16
@d_scanner_5_37_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00.", [11 x i8] zeroinitializer }>, align 16
@d_scanner_5_38_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00/", [30 x i8] zeroinitializer }>, align 16
@d_scanner_5_39_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\000", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_40_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\001", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_41_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\002\00\00\00\00\00", align 16
@d_scanner_5_42_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\003", [15 x i8] zeroinitializer }>, align 16
@d_scanner_5_43_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\004", [28 x i8] zeroinitializer }>, align 16
@d_scanner_5_44_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\005", [15 x i8] zeroinitializer }>, align 16
@d_scanner_5_45_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\006", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_46_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\007", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_47_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\008", [15 x i8] zeroinitializer }>, align 16
@d_scanner_5_48_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\009", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_49_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00:", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_50_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00;", [30 x i8] zeroinitializer }>, align 16
@d_scanner_5_51_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00<", [23 x i8] zeroinitializer }>, align 16
@d_scanner_5_52_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00=", [30 x i8] zeroinitializer }>, align 16
@d_scanner_5_53_1_dparser_gram = internal global <{ [46 x i8], [18 x i8] }> <{ [46 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00>", [18 x i8] zeroinitializer }>, align 16
@d_scanner_5_54_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00?", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_55_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_56_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00A", [13 x i8] zeroinitializer }>, align 16
@d_shift_5_57_dparser_gram = internal global [2 x ptr] [ptr @d_shift_14_dparser_gram, ptr null], align 16
@d_scanner_5_58_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00B", [28 x i8] zeroinitializer }>, align 16
@d_scanner_5_59_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00C", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_60_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00D", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_61_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00E", [30 x i8] zeroinitializer }>, align 16
@d_scanner_5_62_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00F", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_63_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00G", [22 x i8] zeroinitializer }>, align 16
@d_shift_5_64_dparser_gram = internal global [2 x ptr] [ptr @d_shift_20_dparser_gram, ptr null], align 16
@d_scanner_5_65_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00H", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_66_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00I", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_67_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00J", [12 x i8] zeroinitializer }>, align 16
@d_scanner_5_68_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00K", [11 x i8] zeroinitializer }>, align 16
@d_scanner_5_69_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00L", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_70_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00M", [16 x i8] zeroinitializer }>, align 16
@d_shift_5_71_dparser_gram = internal global [2 x ptr] [ptr @d_shift_16_dparser_gram, ptr null], align 16
@d_shift_5_72_dparser_gram = internal global [2 x ptr] [ptr @d_shift_17_dparser_gram, ptr null], align 16
@d_scanner_5_73_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00N", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_74_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00O", [28 x i8] zeroinitializer }>, align 16
@d_scanner_5_75_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P", [11 x i8] zeroinitializer }>, align 16
@d_scanner_5_76_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00Q", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_77_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00R", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_78_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00S", [23 x i8] zeroinitializer }>, align 16
@d_scanner_5_79_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00T", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_80_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00U", [22 x i8] zeroinitializer }>, align 16
@d_scanner_5_81_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00V", [12 x i8] zeroinitializer }>, align 16
@d_shift_5_82_dparser_gram = internal global [2 x ptr] [ptr @d_shift_15_dparser_gram, ptr null], align 16
@d_scanner_5_83_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00W", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_84_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00X", [11 x i8] zeroinitializer }>, align 16
@d_shift_5_85_dparser_gram = internal global [2 x ptr] [ptr @d_shift_19_dparser_gram, ptr null], align 16
@d_scanner_5_86_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00Y", [26 x i8] zeroinitializer }>, align 16
@d_scanner_5_87_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00Z\00\00\00\00\00\00", align 16
@d_shift_5_88_dparser_gram = internal global [2 x ptr] [ptr @d_shift_21_dparser_gram, ptr null], align 16
@d_scanner_5_89_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00[", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_90_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\\", [25 x i8] zeroinitializer }>, align 16
@d_scanner_5_91_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00]", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_92_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00^", [16 x i8] zeroinitializer }>, align 16
@d_scanner_5_93_1_dparser_gram = internal global <{ [46 x i8], [18 x i8] }> <{ [46 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00_", [18 x i8] zeroinitializer }>, align 16
@d_scanner_5_94_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`", [32 x i8] zeroinitializer }>, align 16
@d_scanner_5_95_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00a", [13 x i8] zeroinitializer }>, align 16
@d_scanner_5_96_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00b", [10 x i8] zeroinitializer }>, align 16
@d_scanner_5_97_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00c", [19 x i8] zeroinitializer }>, align 16
@d_scanner_5_98_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00d", [26 x i8] zeroinitializer }>, align 16
@d_shift_5_99_dparser_gram = internal global [2 x ptr] [ptr @d_shift_18_dparser_gram, ptr null], align 16
@d_shifts_6_dparser_gram = internal global [2 x ptr] [ptr @d_shift_62_dparser_gram, ptr null], align 16
@d_accepts_diff_6_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_6_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_6_0_dparser_gram], align 8
@d_scanner_6_0_1_dparser_gram = internal global [64 x i8] c"\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\00\00\00\02\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00", align 16
@d_scanner_6_1_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00", align 16
@d_shifts_13_dparser_gram = internal global [4 x ptr] [ptr @d_shift_23_dparser_gram, ptr @d_shift_27_dparser_gram, ptr @d_shift_62_dparser_gram, ptr null], align 16
@d_accepts_diff_13_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_13_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_27_dparser_gram, ptr null], align 16
@d_accepts_diff_13_dparser_gram = internal global [2 x ptr] [ptr @d_accepts_diff_13_0_dparser_gram, ptr @d_accepts_diff_13_1_dparser_gram], align 16
@d_scanner_13_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00", align 16
@d_scanner_13_0_1_dparser_gram = internal global [64 x i8] c"\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\04\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00", align 16
@d_scanner_13_2_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00", align 16
@d_scanner_13_2_1_dparser_gram = internal global [64 x i8] c"\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\03\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00", align 16
@d_shifts_17_dparser_gram = internal global [3 x ptr] [ptr @d_shift_22_dparser_gram, ptr @d_shift_26_dparser_gram, ptr null], align 16
@d_accepts_diff_17_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_17_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_22_dparser_gram, ptr null], align 16
@d_accepts_diff_17_dparser_gram = internal global [2 x ptr] [ptr @d_accepts_diff_17_0_dparser_gram, ptr @d_accepts_diff_17_1_dparser_gram], align 16
@d_scanner_17_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00", align 16
@d_scanner_17_1_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00", align 16
@d_accepts_diff_17_1_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00", align 16
@d_shift_17_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_22_dparser_gram, ptr null], align 16
@d_scanner_17_2_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00", align 16
@d_shift_17_3_dparser_gram = internal global [2 x ptr] [ptr @d_shift_26_dparser_gram, ptr null], align 16
@d_shifts_30_dparser_gram = internal global [12 x ptr] [ptr @d_shift_1_dparser_gram, ptr @d_shift_31_dparser_gram, ptr @d_shift_49_dparser_gram, ptr @d_shift_51_dparser_gram, ptr @d_shift_59_dparser_gram, ptr @d_shift_60_dparser_gram, ptr @d_shift_61_dparser_gram, ptr @d_shift_62_dparser_gram, ptr @d_shift_63_dparser_gram, ptr @d_shift_64_dparser_gram, ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_30_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_30_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_59_dparser_gram, ptr null], align 16
@d_accepts_diff_30_2_dparser_gram = internal global [2 x ptr] [ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_30_dparser_gram = internal global [3 x ptr] [ptr @d_accepts_diff_30_0_dparser_gram, ptr @d_accepts_diff_30_1_dparser_gram, ptr @d_accepts_diff_30_2_dparser_gram], align 16
@d_scanner_30_0_1_dparser_gram = internal global [64 x i8] c"\02\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0A\02\00\02\0B\02\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0C\02\0D\02\00", align 16
@d_scanner_30_2_0_dparser_gram = internal global [64 x i8] c"\00\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E", align 16
@d_scanner_30_2_1_dparser_gram = internal global [64 x i8] c"\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\10\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E", align 16
@d_scanner_30_2_2_dparser_gram = internal global [64 x i8] c"\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E", align 16
@d_scanner_30_3_0_dparser_gram = internal global [64 x i8] c"\00\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\12\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11", align 16
@d_scanner_30_3_1_dparser_gram = internal global [64 x i8] c"\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\13\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11", align 16
@d_scanner_30_3_2_dparser_gram = internal global [64 x i8] c"\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11", align 16
@d_scanner_30_6_0_dparser_gram = internal global <{ [56 x i8], [8 x i8] }> <{ [56 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\14\14\14\14\14\14\14", [8 x i8] zeroinitializer }>, align 16
@d_scanner_30_6_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\00\00\00\00\15\00\00\16\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\00\00\00\00\15\00\00\17\00\00\00\00\00\00\00", align 16
@d_scanner_30_7_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\18\00\00\00\00\00\00\00\00\18\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\18\00\00\00\00\00\00\00\00\18", [10 x i8] zeroinitializer }>, align 16
@d_shift_30_12_dparser_gram = internal global [2 x ptr] [ptr @d_shift_1_dparser_gram, ptr null], align 16
@d_scanner_30_18_0_dparser_gram = internal global [64 x i8] c"\00\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A", align 16
@d_scanner_30_18_1_dparser_gram = internal global [64 x i8] c"\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A", align 16
@d_scanner_30_19_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\00\00\00\00\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\00\00\00\00\15", [10 x i8] zeroinitializer }>, align 16
@d_scanner_30_21_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\00\00\00\00\00\00", align 16
@d_scanner_30_21_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\1B\1B\1B\1B\1B\1B\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1B\1B\1B\1B\1B\1B", [25 x i8] zeroinitializer }>, align 16
@d_scanner_30_26_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\1B\1B\1B\1B\1B\1B\00\00\00\00\00\1C\00\00\00\00\00\00\00\00\1C\00\00\00\00\00\00\00\00\00\00\00\1B\1B\1B\1B\1B\1B\00\00\00\00\00\1C\00\00\00\00\00\00\00\00\1C", [10 x i8] zeroinitializer }>, align 16
@d_shifts_49_dparser_gram = internal global [3 x ptr] [ptr @d_shift_1_dparser_gram, ptr @d_shift_62_dparser_gram, ptr null], align 16
@d_accepts_diff_49_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_49_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_49_0_dparser_gram], align 8
@d_scanner_49_0_1_dparser_gram = internal global [64 x i8] c"\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\00\00\00\02\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\00\03\00\00", align 16
@d_shifts_52_dparser_gram = internal global [6 x ptr] [ptr @d_shift_9_dparser_gram, ptr @d_shift_10_dparser_gram, ptr @d_shift_11_dparser_gram, ptr @d_shift_12_dparser_gram, ptr @d_shift_13_dparser_gram, ptr null], align 16
@d_accepts_diff_52_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_52_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_52_0_dparser_gram], align 8
@d_scanner_52_0_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\03\00\00\04", [15 x i8] zeroinitializer }>, align 16
@d_scanner_52_1_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05", [16 x i8] zeroinitializer }>, align 16
@d_scanner_52_2_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06", [30 x i8] zeroinitializer }>, align 16
@d_scanner_52_3_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\00\08", [13 x i8] zeroinitializer }>, align 16
@d_scanner_52_4_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\09", [13 x i8] zeroinitializer }>, align 16
@d_scanner_52_5_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A", [17 x i8] zeroinitializer }>, align 16
@d_scanner_52_6_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0B", [12 x i8] zeroinitializer }>, align 16
@d_scanner_52_7_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C", [26 x i8] zeroinitializer }>, align 16
@d_scanner_52_8_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0D", [32 x i8] zeroinitializer }>, align 16
@d_scanner_52_9_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E", [10 x i8] zeroinitializer }>, align 16
@d_scanner_52_10_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0F", [11 x i8] zeroinitializer }>, align 16
@d_scanner_52_11_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10", [16 x i8] zeroinitializer }>, align 16
@d_scanner_52_12_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12", [10 x i8] zeroinitializer }>, align 16
@d_scanner_52_13_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13", [30 x i8] zeroinitializer }>, align 16
@d_scanner_52_14_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14", [16 x i8] zeroinitializer }>, align 16
@d_scanner_52_15_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15", [13 x i8] zeroinitializer }>, align 16
@d_scanner_52_16_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16", [19 x i8] zeroinitializer }>, align 16
@d_scanner_52_17_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17", [17 x i8] zeroinitializer }>, align 16
@d_scanner_52_19_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19", [13 x i8] zeroinitializer }>, align 16
@d_scanner_52_20_1_dparser_gram = internal global <{ [37 x i8], [27 x i8] }> <{ [37 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A", [27 x i8] zeroinitializer }>, align 16
@d_scanner_52_21_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1B", [19 x i8] zeroinitializer }>, align 16
@d_scanner_52_22_1_dparser_gram = internal global <{ [37 x i8], [27 x i8] }> <{ [37 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1C", [27 x i8] zeroinitializer }>, align 16
@d_shift_52_23_dparser_gram = internal global [2 x ptr] [ptr @d_shift_11_dparser_gram, ptr null], align 16
@d_scanner_52_24_1_dparser_gram = internal global <{ [37 x i8], [27 x i8] }> <{ [37 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1D", [27 x i8] zeroinitializer }>, align 16
@d_shift_52_26_dparser_gram = internal global [2 x ptr] [ptr @d_shift_12_dparser_gram, ptr null], align 16
@d_scanner_52_27_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1F", [26 x i8] zeroinitializer }>, align 16
@d_scanner_52_28_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 ", [26 x i8] zeroinitializer }>, align 16
@d_scanner_52_30_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\22", [25 x i8] zeroinitializer }>, align 16
@d_scanner_52_31_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00#", [13 x i8] zeroinitializer }>, align 16
@d_shift_52_32_dparser_gram = internal global [2 x ptr] [ptr @d_shift_9_dparser_gram, ptr null], align 16
@d_scanner_52_33_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00$", [22 x i8] zeroinitializer }>, align 16
@d_shift_52_34_dparser_gram = internal global [2 x ptr] [ptr @d_shift_10_dparser_gram, ptr null], align 16
@d_scanner_52_35_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00%", [17 x i8] zeroinitializer }>, align 16
@d_scanner_52_36_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&", [26 x i8] zeroinitializer }>, align 16
@d_scanner_52_37_1_dparser_gram = internal global <{ [37 x i8], [27 x i8] }> <{ [37 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00'", [27 x i8] zeroinitializer }>, align 16
@d_shift_52_38_dparser_gram = internal global [2 x ptr] [ptr @d_shift_13_dparser_gram, ptr null], align 16
@d_shifts_55_dparser_gram = internal global [7 x ptr] [ptr @d_shift_0_dparser_gram, ptr @d_shift_2_dparser_gram, ptr @d_shift_4_dparser_gram, ptr @d_shift_6_dparser_gram, ptr @d_shift_7_dparser_gram, ptr @d_shift_49_dparser_gram, ptr null], align 16
@d_accepts_diff_55_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_55_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_55_0_dparser_gram], align 8
@d_scanner_55_0_0_dparser_gram = internal global <{ [37 x i8], [27 x i8] }> <{ [37 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02", [27 x i8] zeroinitializer }>, align 16
@d_scanner_55_0_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00", align 16
@d_scanner_55_1_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00", align 16
@d_scanner_55_3_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\06\00\00\00\00\00\00\00\00\00\00\00\07\00\00\08\09", [11 x i8] zeroinitializer }>, align 16
@d_scanner_55_4_1_dparser_gram = internal global <{ [36 x i8], [28 x i8] }> <{ [36 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A", [28 x i8] zeroinitializer }>, align 16
@d_scanner_55_5_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0B", [26 x i8] zeroinitializer }>, align 16
@d_scanner_55_6_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C", [30 x i8] zeroinitializer }>, align 16
@d_scanner_55_8_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E", [16 x i8] zeroinitializer }>, align 16
@d_scanner_55_11_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\11", [12 x i8] zeroinitializer }>, align 16
@d_scanner_55_12_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12", [30 x i8] zeroinitializer }>, align 16
@d_scanner_55_15_1_dparser_gram = internal global <{ [45 x i8], [19 x i8] }> <{ [45 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15", [19 x i8] zeroinitializer }>, align 16
@d_scanner_55_16_1_dparser_gram = internal global <{ [52 x i8], [12 x i8] }> <{ [52 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16", [12 x i8] zeroinitializer }>, align 16
@d_scanner_55_18_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\18", [26 x i8] zeroinitializer }>, align 16
@d_scanner_55_19_1_dparser_gram = internal global <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19", [16 x i8] zeroinitializer }>, align 16
@d_scanner_55_20_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A", [30 x i8] zeroinitializer }>, align 16
@d_scanner_55_22_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1B", [17 x i8] zeroinitializer }>, align 16
@d_scanner_55_23_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1C", [17 x i8] zeroinitializer }>, align 16
@d_scanner_55_24_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1D", [17 x i8] zeroinitializer }>, align 16
@d_scanner_55_25_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1E", [13 x i8] zeroinitializer }>, align 16
@d_scanner_55_28_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00", align 16
@d_scanner_55_29_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00!", [26 x i8] zeroinitializer }>, align 16
@d_scanner_55_30_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\22", [13 x i8] zeroinitializer }>, align 16
@d_shifts_59_dparser_gram = internal global [12 x ptr] [ptr @d_shift_31_dparser_gram, ptr @d_shift_32_dparser_gram, ptr @d_shift_49_dparser_gram, ptr @d_shift_51_dparser_gram, ptr @d_shift_59_dparser_gram, ptr @d_shift_60_dparser_gram, ptr @d_shift_61_dparser_gram, ptr @d_shift_62_dparser_gram, ptr @d_shift_63_dparser_gram, ptr @d_shift_64_dparser_gram, ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_59_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_59_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_59_dparser_gram, ptr null], align 16
@d_accepts_diff_59_2_dparser_gram = internal global [2 x ptr] [ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_59_dparser_gram = internal global [3 x ptr] [ptr @d_accepts_diff_59_0_dparser_gram, ptr @d_accepts_diff_59_1_dparser_gram, ptr @d_accepts_diff_59_2_dparser_gram], align 16
@d_scanner_59_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03\02\02\02\02\04\05\06\02\02\02\07\02\02\08\09\09\09\09\09\09\09\09\09\02\02\02\02\02\02", align 16
@d_scanner_59_0_1_dparser_gram = internal global [64 x i8] c"\02\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0B\02\00\02\0C\02\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0D\02\00\02\00", align 16
@d_shift_59_5_dparser_gram = internal global [2 x ptr] [ptr @d_shift_32_dparser_gram, ptr null], align 16
@d_scanner_59_6_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08\09\09\09\09\09\09\09\09\09\00\00\00\00\00\00", align 16
@d_scanner_59_9_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\00\00\00\00\00\00", align 16
@d_scanner_59_9_1_dparser_gram = internal global [64 x i8] c"\00\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\00\00\00\00\0A\00\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\00\00\00\00\00", align 16
@d_shifts_61_dparser_gram = internal global [12 x ptr] [ptr @d_shift_31_dparser_gram, ptr @d_shift_49_dparser_gram, ptr @d_shift_51_dparser_gram, ptr @d_shift_52_dparser_gram, ptr @d_shift_59_dparser_gram, ptr @d_shift_60_dparser_gram, ptr @d_shift_61_dparser_gram, ptr @d_shift_62_dparser_gram, ptr @d_shift_63_dparser_gram, ptr @d_shift_64_dparser_gram, ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_61_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_61_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_61_2_dparser_gram = internal global [2 x ptr] [ptr @d_shift_59_dparser_gram, ptr null], align 16
@d_accepts_diff_61_dparser_gram = internal global [3 x ptr] [ptr @d_accepts_diff_61_0_dparser_gram, ptr @d_accepts_diff_61_1_dparser_gram, ptr @d_accepts_diff_61_2_dparser_gram], align 16
@d_scanner_61_0_1_dparser_gram = internal global [64 x i8] c"\02\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0A\02\0B\02\0C\02\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0D\02\00\02\00", align 16
@d_accepts_diff_61_5_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00", align 16
@d_accepts_diff_61_6_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00", align 16
@d_shift_61_10_dparser_gram = internal global [2 x ptr] [ptr @d_shift_52_dparser_gram, ptr null], align 16
@d_accepts_diff_61_11_1_dparser_gram = internal global [64 x i8] c"\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\00\00\00\02\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00", align 16
@d_shifts_72_dparser_gram = internal global [2 x ptr] [ptr @d_shift_1_dparser_gram, ptr null], align 16
@d_accepts_diff_72_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_72_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_72_0_dparser_gram], align 8
@d_scanner_72_0_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00", align 16
@d_shifts_77_dparser_gram = internal global [2 x ptr] [ptr @d_shift_23_dparser_gram, ptr null], align 16
@d_accepts_diff_77_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_77_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_77_0_dparser_gram], align 8
@d_shifts_92_dparser_gram = internal global [2 x ptr] [ptr @d_shift_28_dparser_gram, ptr null], align 16
@d_accepts_diff_92_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_92_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_92_0_dparser_gram], align 8
@d_scanner_92_0_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00", align 16
@d_shift_92_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_28_dparser_gram, ptr null], align 16
@d_shifts_95_dparser_gram = internal global [8 x ptr] [ptr @d_shift_29_dparser_gram, ptr @d_shift_31_dparser_gram, ptr @d_shift_49_dparser_gram, ptr @d_shift_51_dparser_gram, ptr @d_shift_60_dparser_gram, ptr @d_shift_61_dparser_gram, ptr @d_shift_62_dparser_gram, ptr null], align 16
@d_accepts_diff_95_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_95_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_95_0_dparser_gram], align 8
@d_scanner_95_0_0_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\03\00\00\04\05", [23 x i8] zeroinitializer }>, align 16
@d_scanner_95_0_1_dparser_gram = internal global [64 x i8] c"\00\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\07\00\00\00\06\00\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\08\00\00\00\00", align 16
@d_scanner_95_1_0_dparser_gram = internal global [64 x i8] c"\00\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0A\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09", align 16
@d_scanner_95_1_1_dparser_gram = internal global [64 x i8] c"\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0B\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09", align 16
@d_scanner_95_1_2_dparser_gram = internal global [64 x i8] c"\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09", align 16
@d_scanner_95_2_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00", align 16
@d_scanner_95_3_0_dparser_gram = internal global [64 x i8] c"\00\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@d_scanner_95_5_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\06\06\06\06\06\06\06\06\06\00\00\00\00\00\00", align 16
@d_scanner_95_5_1_dparser_gram = internal global [64 x i8] c"\00\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\00\00\00\00\06\00\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\00\00\00\00\00", align 16
@d_scanner_95_10_0_dparser_gram = internal global [64 x i8] c"\00\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10", align 16
@d_scanner_95_14_0_dparser_gram = internal global [64 x i8] c"\00\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12", align 16
@d_scanner_95_14_1_dparser_gram = internal global [64 x i8] c"\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12", align 16
@d_scanner_95_18_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14", [30 x i8] zeroinitializer }>, align 16
@d_scanner_95_19_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15", [17 x i8] zeroinitializer }>, align 16
@d_shift_95_20_dparser_gram = internal global [2 x ptr] [ptr @d_shift_29_dparser_gram, ptr null], align 16
@d_shifts_99_dparser_gram = internal global [12 x ptr] [ptr @d_shift_38_dparser_gram, ptr @d_shift_39_dparser_gram, ptr @d_shift_40_dparser_gram, ptr @d_shift_41_dparser_gram, ptr @d_shift_42_dparser_gram, ptr @d_shift_43_dparser_gram, ptr @d_shift_44_dparser_gram, ptr @d_shift_45_dparser_gram, ptr @d_shift_46_dparser_gram, ptr @d_shift_47_dparser_gram, ptr @d_shift_51_dparser_gram, ptr null], align 16
@d_accepts_diff_99_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_99_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_99_0_dparser_gram], align 8
@d_scanner_99_0_1_dparser_gram = internal global <{ [28 x i8], [36 x i8] }> <{ [28 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03", [36 x i8] zeroinitializer }>, align 16
@d_scanner_99_1_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\05\00\00\00\00\00\06\00\00\07", [10 x i8] zeroinitializer }>, align 16
@d_scanner_99_3_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08", [22 x i8] zeroinitializer }>, align 16
@d_scanner_99_4_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\09", [26 x i8] zeroinitializer }>, align 16
@d_scanner_99_5_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A", [22 x i8] zeroinitializer }>, align 16
@d_scanner_99_6_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0B", [17 x i8] zeroinitializer }>, align 16
@d_scanner_99_7_1_dparser_gram = internal global <{ [47 x i8], [17 x i8] }> <{ [47 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0C", [17 x i8] zeroinitializer }>, align 16
@d_scanner_99_8_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0D", [25 x i8] zeroinitializer }>, align 16
@d_scanner_99_9_1_dparser_gram = internal global <{ [40 x i8], [24 x i8] }> <{ [40 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0E", [24 x i8] zeroinitializer }>, align 16
@d_scanner_99_11_1_dparser_gram = internal global <{ [34 x i8], [30 x i8] }> <{ [34 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10", [30 x i8] zeroinitializer }>, align 16
@d_scanner_99_13_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12", [23 x i8] zeroinitializer }>, align 16
@d_scanner_99_14_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13", [13 x i8] zeroinitializer }>, align 16
@d_scanner_99_15_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14", [13 x i8] zeroinitializer }>, align 16
@d_shift_99_16_dparser_gram = internal global [2 x ptr] [ptr @d_shift_47_dparser_gram, ptr null], align 16
@d_scanner_99_17_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15", [11 x i8] zeroinitializer }>, align 16
@d_scanner_99_18_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00", align 16
@d_scanner_99_19_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\00\00", align 16
@d_shift_99_20_dparser_gram = internal global [2 x ptr] [ptr @d_shift_46_dparser_gram, ptr null], align 16
@d_scanner_99_22_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\19", [32 x i8] zeroinitializer }>, align 16
@d_scanner_99_23_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1A\00\00\1B\00\00\1C", [13 x i8] zeroinitializer }>, align 16
@d_scanner_99_24_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1D\00\00\1E\00\00\1F", [13 x i8] zeroinitializer }>, align 16
@d_scanner_99_26_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00!", [15 x i8] zeroinitializer }>, align 16
@d_scanner_99_27_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\22", [22 x i8] zeroinitializer }>, align 16
@d_scanner_99_29_1_dparser_gram = internal global <{ [49 x i8], [15 x i8] }> <{ [49 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00$", [15 x i8] zeroinitializer }>, align 16
@d_scanner_99_30_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00%", [22 x i8] zeroinitializer }>, align 16
@d_scanner_99_31_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&", [25 x i8] zeroinitializer }>, align 16
@d_scanner_99_32_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00'", [32 x i8] zeroinitializer }>, align 16
@d_scanner_99_33_1_dparser_gram = internal global <{ [40 x i8], [24 x i8] }> <{ [40 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(", [24 x i8] zeroinitializer }>, align 16
@d_scanner_99_34_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00)", [25 x i8] zeroinitializer }>, align 16
@d_scanner_99_35_1_dparser_gram = internal global <{ [32 x i8], [32 x i8] }> <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00*", [32 x i8] zeroinitializer }>, align 16
@d_scanner_99_36_1_dparser_gram = internal global <{ [40 x i8], [24 x i8] }> <{ [40 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00+", [24 x i8] zeroinitializer }>, align 16
@d_scanner_99_38_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\00\00.", [13 x i8] zeroinitializer }>, align 16
@d_scanner_99_39_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00/", [23 x i8] zeroinitializer }>, align 16
@d_scanner_99_40_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\000", [11 x i8] zeroinitializer }>, align 16
@d_scanner_99_41_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\001\00\00\00\00\002", [13 x i8] zeroinitializer }>, align 16
@d_scanner_99_42_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\003", [23 x i8] zeroinitializer }>, align 16
@d_shift_99_43_dparser_gram = internal global [2 x ptr] [ptr @d_shift_43_dparser_gram, ptr null], align 16
@d_scanner_99_44_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\004", [26 x i8] zeroinitializer }>, align 16
@d_scanner_99_45_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\005", [22 x i8] zeroinitializer }>, align 16
@d_scanner_99_46_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\006", [11 x i8] zeroinitializer }>, align 16
@d_shift_99_47_dparser_gram = internal global [2 x ptr] [ptr @d_shift_45_dparser_gram, ptr null], align 16
@d_scanner_99_48_1_dparser_gram = internal global <{ [38 x i8], [26 x i8] }> <{ [38 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\007", [26 x i8] zeroinitializer }>, align 16
@d_scanner_99_49_1_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\008", [22 x i8] zeroinitializer }>, align 16
@d_scanner_99_50_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\009", [11 x i8] zeroinitializer }>, align 16
@d_scanner_99_51_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00:", [25 x i8] zeroinitializer }>, align 16
@d_scanner_99_52_1_dparser_gram = internal global <{ [40 x i8], [24 x i8] }> <{ [40 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00;", [24 x i8] zeroinitializer }>, align 16
@d_shift_99_53_dparser_gram = internal global [2 x ptr] [ptr @d_shift_42_dparser_gram, ptr null], align 16
@d_scanner_99_54_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00<", [25 x i8] zeroinitializer }>, align 16
@d_scanner_99_55_1_dparser_gram = internal global <{ [40 x i8], [24 x i8] }> <{ [40 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00=", [24 x i8] zeroinitializer }>, align 16
@d_shift_99_56_dparser_gram = internal global [2 x ptr] [ptr @d_shift_44_dparser_gram, ptr null], align 16
@d_scanner_99_57_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00>", [11 x i8] zeroinitializer }>, align 16
@d_scanner_99_58_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00?", [23 x i8] zeroinitializer }>, align 16
@d_scanner_99_59_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00@", [11 x i8] zeroinitializer }>, align 16
@d_scanner_99_60_1_dparser_gram = internal global <{ [41 x i8], [23 x i8] }> <{ [41 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00A", [23 x i8] zeroinitializer }>, align 16
@d_shift_99_61_dparser_gram = internal global [2 x ptr] [ptr @d_shift_39_dparser_gram, ptr null], align 16
@d_scanner_99_62_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00B", [11 x i8] zeroinitializer }>, align 16
@d_shift_99_63_dparser_gram = internal global [2 x ptr] [ptr @d_shift_41_dparser_gram, ptr null], align 16
@d_scanner_99_64_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00C", [11 x i8] zeroinitializer }>, align 16
@d_shift_99_65_dparser_gram = internal global [2 x ptr] [ptr @d_shift_38_dparser_gram, ptr null], align 16
@d_shift_99_66_dparser_gram = internal global [2 x ptr] [ptr @d_shift_40_dparser_gram, ptr null], align 16
@d_shifts_123_dparser_gram = internal global [4 x ptr] [ptr @d_shift_63_dparser_gram, ptr @d_shift_64_dparser_gram, ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_123_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_123_1_dparser_gram = internal global [2 x ptr] [ptr @d_shift_65_dparser_gram, ptr null], align 16
@d_accepts_diff_123_dparser_gram = internal global [2 x ptr] [ptr @d_accepts_diff_123_0_dparser_gram, ptr @d_accepts_diff_123_1_dparser_gram], align 16
@d_scanner_123_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\03\04\04\04\04\04\04\04\04\04\00\00\00\00\00\00", align 16
@d_scanner_123_1_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\04\04\04\04\04\04\04\04\04\00\00\00\00\00\00", align 16
@d_scanner_123_2_0_dparser_gram = internal global <{ [56 x i8], [8 x i8] }> <{ [56 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\05\05\05\05\05\05", [8 x i8] zeroinitializer }>, align 16
@d_scanner_123_2_1_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\06\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\06\00\00\08\00\00\00\00\00\00\00", align 16
@d_scanner_123_3_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\09", [10 x i8] zeroinitializer }>, align 16
@d_scanner_123_4_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\06", [10 x i8] zeroinitializer }>, align 16
@d_scanner_123_6_1_dparser_gram = internal global <{ [39 x i8], [25 x i8] }> <{ [39 x i8] c"\00\0A\0A\0A\0A\0A\0A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A\0A\0A\0A\0A\0A", [25 x i8] zeroinitializer }>, align 16
@d_scanner_123_9_1_dparser_gram = internal global <{ [54 x i8], [10 x i8] }> <{ [54 x i8] c"\00\0A\0A\0A\0A\0A\0A\00\00\00\00\00\0B\00\00\00\00\00\00\00\00\0B\00\00\00\00\00\00\00\00\00\00\00\0A\0A\0A\0A\0A\0A\00\00\00\00\00\0B\00\00\00\00\00\00\00\00\0B", [10 x i8] zeroinitializer }>, align 16
@d_shifts_125_dparser_gram = internal global [2 x ptr] [ptr @d_shift_49_dparser_gram, ptr null], align 16
@d_accepts_diff_125_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_125_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_125_0_dparser_gram], align 8
@d_shifts_132_dparser_gram = internal global [6 x ptr] [ptr @d_shift_33_dparser_gram, ptr @d_shift_34_dparser_gram, ptr @d_shift_35_dparser_gram, ptr @d_shift_36_dparser_gram, ptr @d_shift_37_dparser_gram, ptr null], align 16
@d_accepts_diff_132_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_132_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_132_0_dparser_gram], align 8
@d_scanner_132_0_0_dparser_gram = internal global [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\03\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06", align 16
@d_scanner_132_1_1_dparser_gram = internal global <{ [53 x i8], [11 x i8] }> <{ [53 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07", [11 x i8] zeroinitializer }>, align 16
@d_shift_132_2_dparser_gram = internal global [2 x ptr] [ptr @d_shift_36_dparser_gram, ptr null], align 16
@d_shift_132_3_dparser_gram = internal global [2 x ptr] [ptr @d_shift_37_dparser_gram, ptr null], align 16
@d_shift_132_5_dparser_gram = internal global [2 x ptr] [ptr @d_shift_35_dparser_gram, ptr null], align 16
@d_shift_132_7_dparser_gram = internal global [2 x ptr] [ptr @d_shift_34_dparser_gram, ptr null], align 16
@d_scanner_132_8_1_dparser_gram = internal global <{ [51 x i8], [13 x i8] }> <{ [51 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A", [13 x i8] zeroinitializer }>, align 16
@d_scanner_132_9_1_dparser_gram = internal global <{ [46 x i8], [18 x i8] }> <{ [46 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0B", [18 x i8] zeroinitializer }>, align 16
@d_shift_132_10_dparser_gram = internal global [2 x ptr] [ptr @d_shift_33_dparser_gram, ptr null], align 16
@d_shifts_141_dparser_gram = internal global [2 x ptr] [ptr @d_shift_32_dparser_gram, ptr null], align 16
@d_accepts_diff_141_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_141_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_141_0_dparser_gram], align 8
@d_scanner_141_0_0_dparser_gram = internal global <{ [42 x i8], [22 x i8] }> <{ [42 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02", [22 x i8] zeroinitializer }>, align 16
@d_shifts_155_dparser_gram = internal global [2 x ptr] [ptr @d_shift_22_dparser_gram, ptr null], align 16
@d_accepts_diff_155_0_dparser_gram = internal global [1 x ptr] zeroinitializer, align 8
@d_accepts_diff_155_dparser_gram = internal global [1 x ptr] [ptr @d_accepts_diff_155_0_dparser_gram], align 8
@d_scanner_3_dparser_gram = internal global [37 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_0_dparser_gram, ptr @d_scanner_3_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_1_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_2_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_3_3_0_dparser_gram, ptr @d_scanner_3_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_4_dparser_gram, [4 x ptr] [ptr @d_scanner_3_3_0_dparser_gram, ptr @d_scanner_3_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_10_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_12_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_13_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_14_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_15_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_16_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_17_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_20_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_22_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_23_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_24_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_25_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_27_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_28_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_29_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_30_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_31_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_32_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_33_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_34_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_35_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_36_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_3_dparser_gram = internal global [37 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_4_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_4_dparser_gram = internal global [27 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_0_0_dparser_gram, ptr @d_scanner_4_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_2_0_dparser_gram, ptr @d_scanner_4_2_1_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_3_0_dparser_gram, ptr @d_scanner_4_3_1_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_4_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_4_5_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_4_6_0_dparser_gram, ptr @d_scanner_4_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_4_7_0_dparser_gram, ptr @d_scanner_4_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_4_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_9_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_4_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_2_0_dparser_gram, ptr @d_scanner_4_2_1_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_13_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_14_0_dparser_gram, ptr @d_scanner_4_14_1_dparser_gram, ptr @d_scanner_4_14_1_dparser_gram, ptr @d_scanner_4_14_1_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_3_0_dparser_gram, ptr @d_scanner_4_3_1_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_16_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_17_0_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_4_6_0_dparser_gram, ptr @d_scanner_4_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_20_0_dparser_gram, ptr @d_scanner_4_20_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_20_0_dparser_gram, ptr @d_scanner_4_20_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_2_0_dparser_gram, ptr @d_scanner_4_2_1_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_3_0_dparser_gram, ptr @d_scanner_4_3_1_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_4_20_0_dparser_gram, ptr @d_scanner_4_25_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_4_dparser_gram = internal global [27 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_4_6_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_4_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_5_dparser_gram = internal global [100 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_1_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_2_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_4_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_5_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_10_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_12_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_13_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_14_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_15_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_16_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_17_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_20_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_22_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_23_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_24_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_25_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_27_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_28_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_29_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_30_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_31_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_32_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_33_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_34_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_35_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_36_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_37_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_38_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_39_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_40_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_41_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_42_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_43_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_44_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_45_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_46_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_47_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_48_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_49_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_50_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_51_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_52_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_53_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_54_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_55_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_56_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_57_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_58_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_59_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_60_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_61_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_62_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_63_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_64_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_65_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_66_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_67_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_68_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_69_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_70_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_71_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_72_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_73_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_74_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_75_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_76_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_77_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_78_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_79_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_80_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_81_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_82_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_83_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_84_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_85_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_86_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_87_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_88_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_89_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_90_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_91_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_92_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_93_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_94_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_95_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_96_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_97_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_98_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_5_99_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_5_dparser_gram = internal global [100 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_6_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_6_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_6_1_0_dparser_gram, ptr @d_scanner_6_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_6_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_13_dparser_gram = internal global [4 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_13_0_0_dparser_gram, ptr @d_scanner_13_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_2_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_13_2_0_dparser_gram, ptr @d_scanner_13_2_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_4_dparser_gram, [4 x ptr] [ptr @d_scanner_13_2_0_dparser_gram, ptr @d_scanner_13_2_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_13_dparser_gram = internal global [4 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_4_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_17_dparser_gram = internal global [4 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_17_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_17_1_dparser_gram, [4 x ptr] [ptr @d_scanner_17_1_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_17_2_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_17_3_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_17_dparser_gram = internal global [4 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_17_1_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_30_dparser_gram = internal global [28 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_0_0_dparser_gram, ptr @d_scanner_30_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_4_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_4_5_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_30_6_0_dparser_gram, ptr @d_scanner_30_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_4_7_0_dparser_gram, ptr @d_scanner_30_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_4_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_9_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_4_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_30_12_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_13_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_17_0_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_16_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_18_0_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_30_6_0_dparser_gram, ptr @d_scanner_30_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_30_dparser_gram = internal global [28 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_4_6_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_4_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_49_dparser_gram = internal global [3 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_49_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_6_1_0_dparser_gram, ptr @d_scanner_6_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_30_12_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_49_dparser_gram = internal global [3 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_52_dparser_gram = internal global [39 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_1_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_2_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_4_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_5_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_10_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_12_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_13_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_14_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_15_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_16_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_17_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_20_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_22_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_52_23_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_24_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_52_26_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_27_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_28_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_28_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_30_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_31_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_52_32_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_33_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_52_34_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_35_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_36_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_37_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_52_38_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_52_dparser_gram = internal global [39 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_55_dparser_gram = internal global [34 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_55_0_0_dparser_gram, ptr @d_scanner_55_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_1_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_4_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_5_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_10_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_10_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_12_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_12_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_15_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_16_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_17_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_20_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_24_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_22_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_23_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_24_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_25_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_27_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_30_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_28_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_29_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_30_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_34_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_35_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_36_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_55_dparser_gram = internal global [34 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_59_dparser_gram = internal global [28 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_59_0_0_dparser_gram, ptr @d_scanner_59_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_4_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_59_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_59_6_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_30_6_0_dparser_gram, ptr @d_scanner_30_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_30_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_59_9_0_dparser_gram, ptr @d_scanner_59_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_9_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_59_9_0_dparser_gram, ptr @d_scanner_59_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_13_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_17_0_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_16_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_18_0_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_30_6_0_dparser_gram, ptr @d_scanner_30_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_59_dparser_gram = internal global [28 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_4_6_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_4_0_dparser_gram, ptr @d_accepts_diff_3_4_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_61_dparser_gram = internal global [28 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_0_0_dparser_gram, ptr @d_scanner_61_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_4_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_4_5_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_30_6_0_dparser_gram, ptr @d_scanner_30_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_4_7_0_dparser_gram, ptr @d_scanner_30_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_4_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_9_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_61_10_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_10_dparser_gram, [4 x ptr] [ptr @d_scanner_4_8_0_dparser_gram, ptr @d_scanner_4_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_13_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_4_17_0_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram, ptr @d_scanner_4_17_1_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_16_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_18_0_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram, ptr @d_scanner_30_18_1_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_30_6_0_dparser_gram, ptr @d_scanner_30_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_21_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_2_0_dparser_gram, ptr @d_scanner_30_2_1_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram, ptr @d_scanner_30_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_30_3_0_dparser_gram, ptr @d_scanner_30_3_1_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram, ptr @d_scanner_30_3_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_30_21_0_dparser_gram, ptr @d_scanner_30_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_61_dparser_gram = internal global [28 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_61_5_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_61_6_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_61_5_0_dparser_gram, ptr @d_accepts_diff_61_11_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_72_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_72_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_30_12_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_72_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_77_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_13_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_2_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_77_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_92_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_92_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_92_1_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_92_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_95_dparser_gram = internal global [21 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_0_0_dparser_gram, ptr @d_scanner_95_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_1_0_dparser_gram, ptr @d_scanner_95_1_1_dparser_gram, ptr @d_scanner_95_1_2_dparser_gram, ptr @d_scanner_95_1_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_95_2_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_3_0_dparser_gram, ptr @d_scanner_4_2_1_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_4_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_3_dparser_gram, [4 x ptr] [ptr @d_scanner_95_5_0_dparser_gram, ptr @d_scanner_95_5_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_9_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_1_0_dparser_gram, ptr @d_scanner_95_1_1_dparser_gram, ptr @d_scanner_95_1_2_dparser_gram, ptr @d_scanner_95_1_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_13_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_10_0_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram, ptr @d_scanner_4_3_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_55_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_3_0_dparser_gram, ptr @d_scanner_4_2_1_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_16_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_14_0_dparser_gram, ptr @d_scanner_95_14_1_dparser_gram, ptr @d_scanner_95_14_1_dparser_gram, ptr @d_scanner_95_14_1_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_1_0_dparser_gram, ptr @d_scanner_95_1_1_dparser_gram, ptr @d_scanner_95_1_2_dparser_gram, ptr @d_scanner_95_1_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_13_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_95_3_0_dparser_gram, ptr @d_scanner_4_2_1_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram, ptr @d_scanner_4_2_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_95_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_95_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_95_20_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_95_dparser_gram = internal global [21 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_99_dparser_gram = internal global [67 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_55_0_0_dparser_gram, ptr @d_scanner_99_0_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_1_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_9_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_4_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_5_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_7_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_11_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_13_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_14_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_15_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_16_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_17_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_18_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_19_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_20_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_16_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_22_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_23_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_24_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_52_28_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_27_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_26_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_29_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_30_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_31_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_32_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_33_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_34_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_35_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_36_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_5_35_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_38_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_39_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_40_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_41_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_42_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_43_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_44_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_45_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_46_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_47_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_48_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_49_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_50_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_51_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_52_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_53_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_54_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_55_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_56_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_57_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_58_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_59_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_60_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_61_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_62_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_63_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_64_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_65_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_99_66_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_99_dparser_gram = internal global [67 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_123_dparser_gram = internal global [11 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_123_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_123_1_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_123_2_0_dparser_gram, ptr @d_scanner_123_2_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_3_3_0_dparser_gram, ptr @d_scanner_123_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_123_2_0_dparser_gram, ptr @d_scanner_123_4_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_19_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_59_9_0_dparser_gram, ptr @d_scanner_123_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_59_9_0_dparser_gram, ptr @d_scanner_123_6_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_22_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_59_9_0_dparser_gram, ptr @d_scanner_123_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_4_26_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_123_dparser_gram = internal global [11 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_61_6_1_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_125_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_13_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_3_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_125_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_132_dparser_gram = internal global [11 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_132_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_132_1_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_132_2_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_132_3_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_3_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_132_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_99_4_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_132_7_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_132_8_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_132_9_1_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_132_10_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_132_dparser_gram = internal global [11 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_141_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_141_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_59_5_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_141_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_scanner_155_dparser_gram = internal global [2 x %struct.SB_uint8] [%struct.SB_uint8 { ptr null, [4 x ptr] [ptr @d_scanner_17_0_0_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }, %struct.SB_uint8 { ptr @d_shift_17_1_dparser_gram, [4 x ptr] [ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram, ptr @d_scanner_3_0_2_dparser_gram] }], align 16
@d_transition_155_dparser_gram = internal global [2 x %struct.SB_trans_uint8] [%struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }, %struct.SB_trans_uint8 { [4 x ptr] [ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram, ptr @d_accepts_diff_3_0_0_dparser_gram] }], align 16
@d_goto_valid_0_dparser_gram = internal global <{ i8, [15 x i8] }> <{ i8 70, [15 x i8] zeroinitializer }>, align 16
@d_reductions_0_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_9_dparser_gram], align 8
@d_reductions_2_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_1_dparser_gram], align 8
@d_goto_valid_3_dparser_gram = internal global [16 x i8] c"\98\80\06\00\00@\00B5\00 \02\00\80\00\10", align 16
@d_goto_valid_4_dparser_gram = internal global [16 x i8] c"\00\04\00\00\00\00\C4?\00\00\00 \00\80\02\FE", align 16
@d_goto_valid_5_dparser_gram = internal global [16 x i8] c"\00 \00\00\00\00\00\00\00\F0\0F\00\00\00\00\00", align 16
@d_goto_valid_6_dparser_gram = internal global [16 x i8] c"\00A\00\00\00\00\00\02\00\00\00\00\00\00\00\10", align 16
@d_reductions_7_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_14_dparser_gram], align 8
@d_goto_valid_8_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\10", align 16
@d_reductions_9_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_40_dparser_gram], align 8
@d_reductions_10_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_43_dparser_gram], align 8
@d_goto_valid_11_dparser_gram = internal global <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 0, i8 -128, [10 x i8] zeroinitializer }>, align 16
@d_reductions_11_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_103_dparser_gram], align 8
@d_reductions_12_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_124_dparser_gram], align 8
@d_goto_valid_13_dparser_gram = internal global [16 x i8] c"\10\80\06\00\00\00\00\02\00\00 \02\00\00\00\10", align 16
@d_reductions_13_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_2_dparser_gram], align 8
@d_reductions_14_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_4_dparser_gram], align 8
@d_reductions_15_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_8_dparser_gram], align 8
@d_goto_valid_16_dparser_gram = internal global <{ i8, [15 x i8] }> <{ i8 32, [15 x i8] zeroinitializer }>, align 16
@d_reductions_16_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_7_dparser_gram], align 8
@d_right_epsilon_hints_16_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 55, ptr @d_reduction_5_dparser_gram }], align 16
@d_goto_valid_17_dparser_gram = internal global [16 x i8] c"\00\00\01\00\00\00\00\00\00\00\10\01\00\00\00\00", align 16
@d_reductions_18_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_42_dparser_gram], align 8
@d_reductions_19_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_10_dparser_gram], align 8
@d_reductions_20_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_43_dparser_gram], align 8
@d_goto_valid_21_dparser_gram = internal global <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 32, [9 x i8] zeroinitializer }>, align 16
@d_reductions_21_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_120_dparser_gram], align 8
@d_goto_valid_22_dparser_gram = internal global <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 8, [9 x i8] zeroinitializer }>, align 16
@d_reductions_22_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_116_dparser_gram], align 8
@d_goto_valid_23_dparser_gram = internal global <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 16, [9 x i8] zeroinitializer }>, align 16
@d_reductions_23_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_118_dparser_gram], align 8
@d_reductions_24_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_121_dparser_gram], align 8
@d_reductions_25_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_122_dparser_gram], align 8
@d_reductions_26_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_123_dparser_gram], align 8
@d_reductions_27_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_128_dparser_gram], align 8
@d_reductions_28_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_129_dparser_gram], align 8
@d_reductions_29_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_130_dparser_gram], align 8
@d_goto_valid_30_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4\BF\00\00\00 \00\80\02\FE", align 16
@d_reductions_31_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_21_dparser_gram], align 8
@d_reductions_32_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_110_dparser_gram], align 8
@d_reductions_33_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_110_dparser_gram], align 8
@d_reductions_34_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_110_dparser_gram], align 8
@d_reductions_35_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_110_dparser_gram], align 8
@d_reductions_36_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_110_dparser_gram], align 8
@d_reductions_37_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_125_dparser_gram], align 8
@d_reductions_38_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_125_dparser_gram], align 8
@d_reductions_39_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_125_dparser_gram], align 8
@d_reductions_40_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_29_dparser_gram], align 8
@d_reductions_41_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_30_dparser_gram], align 8
@d_reductions_42_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_31_dparser_gram], align 8
@d_reductions_43_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_32_dparser_gram], align 8
@d_reductions_44_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_33_dparser_gram], align 8
@d_reductions_45_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_34_dparser_gram], align 8
@d_reductions_46_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_35_dparser_gram], align 8
@d_reductions_47_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_36_dparser_gram], align 8
@d_goto_valid_48_dparser_gram = internal global <{ i8, i8, [14 x i8] }> <{ i8 0, i8 2, [14 x i8] zeroinitializer }>, align 16
@d_reductions_48_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_19_dparser_gram], align 8
@d_goto_valid_49_dparser_gram = internal global [16 x i8] c"\00@\00\00\00\00\00\82\00\00\00\00\00\00\00\10", align 16
@d_reductions_50_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_17_dparser_gram], align 8
@d_reductions_51_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_37_dparser_gram], align 8
@d_goto_valid_52_dparser_gram = internal global [16 x i8] c"\00\18\00\00\00\00\00\00\80\0F\00\00\00\00\00\00", align 16
@d_reductions_52_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_22_dparser_gram], align 8
@d_goto_valid_53_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4\BF\00\00\00 \00\80\02\FE", align 16
@d_reductions_54_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_3_dparser_gram], align 8
@d_goto_valid_55_dparser_gram = internal global [16 x i8] c"\80\00\00\00\00@\00@5\00\00\00\00\80\00\00", align 16
@d_reductions_55_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_5_dparser_gram], align 8
@d_goto_valid_56_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 72, i8 64, [12 x i8] zeroinitializer }>, align 16
@d_reductions_56_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_62_dparser_gram], align 8
@d_right_epsilon_hints_56_dparser_gram = internal global [2 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 92, ptr @d_reduction_45_dparser_gram }, %struct.D_ErrorRecoveryHint { i16 3, i16 124, ptr @d_reduction_49_dparser_gram }], align 16
@d_reductions_57_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_41_dparser_gram], align 8
@d_goto_valid_58_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 72, i8 64, [12 x i8] zeroinitializer }>, align 16
@d_reductions_58_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_62_dparser_gram], align 8
@d_right_epsilon_hints_58_dparser_gram = internal global [2 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 92, ptr @d_reduction_45_dparser_gram }, %struct.D_ErrorRecoveryHint { i16 3, i16 124, ptr @d_reduction_49_dparser_gram }], align 16
@d_goto_valid_59_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4?\00\00\00`\00\80\02\FE", align 16
@d_goto_valid_60_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4\BF\00\00\00 \00\80\02\FE", align 16
@d_goto_valid_61_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4?\00\00\00 \00\80\06\FE", align 16
@d_reductions_62_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_11_dparser_gram], align 8
@d_reductions_63_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_20_dparser_gram], align 8
@d_goto_valid_64_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00\82\00\00\00\00\00\00\00\10", align 16
@d_reductions_65_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_13_dparser_gram], align 8
@d_reductions_66_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_16_dparser_gram], align 8
@d_reductions_67_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_24_dparser_gram], align 8
@d_reductions_68_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_25_dparser_gram], align 8
@d_reductions_69_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_26_dparser_gram], align 8
@d_reductions_70_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_27_dparser_gram], align 8
@d_reductions_71_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_28_dparser_gram], align 8
@d_goto_valid_72_dparser_gram = internal global <{ [8 x i8], [8 x i8] }> <{ [8 x i8] c"\00\00\00\00\00\00\00\80", [8 x i8] zeroinitializer }>, align 16
@d_goto_valid_73_dparser_gram = internal global [16 x i8] c"\00\18\00\00\00\00\00\00\80\0F\00\00\00\00\00\00", align 16
@d_reductions_73_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_22_dparser_gram], align 8
@d_right_epsilon_hints_73_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 90, ptr @d_reduction_23_dparser_gram }], align 16
@d_reductions_74_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_101_dparser_gram], align 8
@d_reductions_75_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_102_dparser_gram], align 8
@d_reductions_76_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_6_dparser_gram], align 8
@d_goto_valid_77_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00", align 16
@d_goto_valid_78_dparser_gram = internal global <{ i8, i8, i8, [13 x i8] }> <{ i8 0, i8 0, i8 16, [13 x i8] zeroinitializer }>, align 16
@d_reductions_78_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_47_dparser_gram], align 8
@d_right_epsilon_hints_78_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 92, ptr @d_reduction_45_dparser_gram }], align 16
@d_goto_valid_79_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 0, i8 11, [12 x i8] zeroinitializer }>, align 16
@d_reductions_79_dparser_gram = internal global [2 x ptr] [ptr @d_reduction_53_dparser_gram, ptr @d_reduction_58_dparser_gram], align 16
@d_right_epsilon_hints_79_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 2, i16 124, ptr @d_reduction_49_dparser_gram }], align 16
@d_goto_valid_80_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00\00\00\00 \00\00\00\00\00", align 16
@d_reductions_81_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_107_dparser_gram], align 8
@d_reductions_82_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_119_dparser_gram], align 8
@d_reductions_83_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_107_dparser_gram], align 8
@d_reductions_84_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_115_dparser_gram], align 8
@d_reductions_85_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_107_dparser_gram], align 8
@d_reductions_86_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_117_dparser_gram], align 8
@d_reductions_87_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_12_dparser_gram], align 8
@d_reductions_88_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_18_dparser_gram], align 8
@d_reductions_89_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_15_dparser_gram], align 8
@d_reductions_90_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_23_dparser_gram], align 8
@d_reductions_91_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_38_dparser_gram], align 8
@d_goto_valid_92_dparser_gram = internal global [16 x i8] c"\00\00 \00\00\00\00\00\00\00\00\04\00\00\00\00", align 16
@d_reductions_92_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_45_dparser_gram], align 8
@d_goto_valid_93_dparser_gram = internal global <{ i8, i8, i8, [13 x i8] }> <{ i8 0, i8 0, i8 -128, [13 x i8] zeroinitializer }>, align 16
@d_reductions_93_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_51_dparser_gram], align 8
@d_right_epsilon_hints_93_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 124, ptr @d_reduction_49_dparser_gram }], align 16
@d_reductions_94_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_52_dparser_gram], align 8
@d_goto_valid_95_dparser_gram = internal global [16 x i8] c"\00\00\00\90\02@\81\03\00\00\00(\00\80\02\1C", align 16
@d_reductions_96_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_38_dparser_gram], align 8
@d_goto_valid_97_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 64, i8 64, [12 x i8] zeroinitializer }>, align 16
@d_reductions_97_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_62_dparser_gram], align 8
@d_right_epsilon_hints_97_dparser_gram = internal global [2 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 111, ptr @d_reduction_48_dparser_gram }, %struct.D_ErrorRecoveryHint { i16 3, i16 124, ptr @d_reduction_49_dparser_gram }], align 16
@d_reductions_98_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_46_dparser_gram], align 8
@d_goto_valid_99_dparser_gram = internal global [16 x i8] c"\00\00\00\00\B0\0C\01\00\00\00\00\00\F0?\02\00", align 16
@d_reductions_99_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_97_dparser_gram], align 8
@d_right_epsilon_hints_99_dparser_gram = internal global [2 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 124, ptr @d_reduction_49_dparser_gram }, %struct.D_ErrorRecoveryHint { i16 2, i16 151, ptr @d_reduction_91_dparser_gram }], align 16
@d_goto_valid_100_dparser_gram = internal global [16 x i8] c"\00\00\00\00\01\00\C4?\00\00\00 \00\80\02\FE", align 16
@d_goto_valid_101_dparser_gram = internal global <{ i8, i8, i8, i8, i8, [11 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 4, [11 x i8] zeroinitializer }>, align 16
@d_reductions_101_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_73_dparser_gram], align 8
@d_goto_valid_102_dparser_gram = internal global <{ i8, i8, i8, i8, i8, i8, i8, [9 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 2, [9 x i8] zeroinitializer }>, align 16
@d_reductions_102_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_106_dparser_gram], align 8
@d_reductions_103_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_57_dparser_gram], align 8
@d_goto_valid_104_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 0, i8 4, [12 x i8] zeroinitializer }>, align 16
@d_reductions_104_dparser_gram = internal global [2 x ptr] [ptr @d_reduction_56_dparser_gram, ptr @d_reduction_70_dparser_gram], align 16
@d_right_epsilon_hints_104_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 132, ptr @d_reduction_54_dparser_gram }], align 16
@d_goto_valid_105_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 0, i8 32, [12 x i8] zeroinitializer }>, align 16
@d_reductions_105_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_61_dparser_gram], align 8
@d_right_epsilon_hints_105_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 133, ptr @d_reduction_59_dparser_gram }], align 16
@d_reductions_106_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_72_dparser_gram], align 8
@d_reductions_107_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_71_dparser_gram], align 8
@d_reductions_108_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_63_dparser_gram], align 8
@d_reductions_109_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_64_dparser_gram], align 8
@d_reductions_110_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_65_dparser_gram], align 8
@d_reductions_111_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_48_dparser_gram], align 8
@d_reductions_112_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_80_dparser_gram], align 8
@d_reductions_113_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_81_dparser_gram], align 8
@d_reductions_114_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_82_dparser_gram], align 8
@d_reductions_115_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_83_dparser_gram], align 8
@d_reductions_116_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_84_dparser_gram], align 8
@d_reductions_117_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_85_dparser_gram], align 8
@d_reductions_118_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_86_dparser_gram], align 8
@d_reductions_119_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_87_dparser_gram], align 8
@d_reductions_120_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_88_dparser_gram], align 8
@d_reductions_121_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_89_dparser_gram], align 8
@d_reductions_122_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_50_dparser_gram], align 8
@d_goto_valid_123_dparser_gram = internal global [16 x i8] c"\00\00\00\00@\00\00<\00\00\00\00\00\00\00\E0", align 16
@d_reductions_124_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_49_dparser_gram], align 8
@d_goto_valid_125_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00R\00\00\00\00\00\00\00\80\00\00", align 16
@d_reductions_125_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_95_dparser_gram], align 8
@d_right_epsilon_hints_125_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 151, ptr @d_reduction_91_dparser_gram }], align 16
@d_reductions_126_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_96_dparser_gram], align 8
@d_reductions_127_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_98_dparser_gram], align 8
@d_goto_valid_128_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4\BF\00\00\00 \00\80\02\FE", align 16
@d_reductions_129_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_69_dparser_gram], align 8
@d_goto_valid_130_dparser_gram = internal global <{ i8, i8, i8, i8, [12 x i8] }> <{ i8 0, i8 0, i8 72, i8 64, [12 x i8] zeroinitializer }>, align 16
@d_reductions_130_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_62_dparser_gram], align 8
@d_right_epsilon_hints_130_dparser_gram = internal global [2 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 92, ptr @d_reduction_45_dparser_gram }, %struct.D_ErrorRecoveryHint { i16 3, i16 124, ptr @d_reduction_49_dparser_gram }], align 16
@d_goto_valid_131_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\C4?\00\00\00 \00\80\06\FE", align 16
@d_goto_valid_132_dparser_gram = internal global [16 x i8] c"\00\00\00\00\08\00\00\00\00\00\00\80\0F\00\00\00", align 16
@d_reductions_132_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_54_dparser_gram], align 8
@d_goto_valid_133_dparser_gram = internal global [16 x i8] c"\00\00\00\00\08\00\00\00\00\00\00\80\0F\00\00\00", align 16
@d_reductions_133_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_59_dparser_gram], align 8
@d_reductions_134_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_79_dparser_gram], align 8
@d_reductions_135_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_90_dparser_gram], align 8
@d_goto_valid_136_dparser_gram = internal global <{ i8, i8, i8, i8, i8, i8, [10 x i8] }> <{ i8 0, i8 0, i8 0, i8 0, i8 0, i8 1, [10 x i8] zeroinitializer }>, align 16
@d_reductions_136_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_93_dparser_gram], align 8
@d_right_epsilon_hints_136_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 151, ptr @d_reduction_91_dparser_gram }], align 16
@d_reductions_137_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_94_dparser_gram], align 8
@d_reductions_138_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_99_dparser_gram], align 8
@d_reductions_139_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_66_dparser_gram], align 8
@d_reductions_140_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_68_dparser_gram], align 8
@d_goto_valid_141_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00", align 16
@d_reductions_142_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_104_dparser_gram], align 8
@d_reductions_143_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_105_dparser_gram], align 8
@d_goto_valid_144_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00<\00\00\00\00\00\00\00\E0", align 16
@d_reductions_145_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_75_dparser_gram], align 8
@d_reductions_146_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_76_dparser_gram], align 8
@d_reductions_147_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_77_dparser_gram], align 8
@d_reductions_148_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_78_dparser_gram], align 8
@d_reductions_149_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_55_dparser_gram], align 8
@d_reductions_150_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_60_dparser_gram], align 8
@d_goto_valid_151_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00 \00\02\00\00\00\00\00\00\00\10", align 16
@d_reductions_151_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_91_dparser_gram], align 8
@d_reductions_152_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_67_dparser_gram], align 8
@d_reductions_153_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_74_dparser_gram], align 8
@d_reductions_154_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_92_dparser_gram], align 8
@d_goto_valid_155_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00", align 16
@d_goto_valid_156_dparser_gram = internal global [16 x i8] c"\00\00\00\00\00@\00\00\00\00\00\00\00\80\00\00", align 16
@d_reductions_157_dparser_gram = internal global [1 x ptr] [ptr @d_reduction_100_dparser_gram], align 8
@d_gotos_dparser_gram = internal global [547 x i16] [i16 2, i16 3, i16 14, i16 15, i16 31, i16 4, i16 16, i16 49, i16 54, i16 50, i16 56, i16 53, i16 60, i16 55, i16 17, i16 51, i16 18, i16 19, i16 59, i16 61, i16 62, i16 65, i16 78, i16 90, i16 17, i16 79, i16 18, i16 19, i16 92, i16 89, i16 93, i16 81, i16 97, i16 80, i16 79, i16 88, i16 67, i16 99, i16 100, i16 73, i16 74, i16 131, i16 80, i16 132, i16 32, i16 20, i16 133, i16 134, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 21, i16 152, i16 52, i16 94, i16 95, i16 5, i16 96, i16 6, i16 153, i16 7, i16 21, i16 8, i16 9, i16 157, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 13, i16 52, i16 142, i16 112, i16 0, i16 79, i16 10, i16 66, i16 57, i16 22, i16 11, i16 80, i16 58, i16 80, i16 137, i16 0, i16 10, i16 138, i16 13, i16 139, i16 11, i16 68, i16 69, i16 70, i16 71, i16 72, i16 158, i16 23, i16 98, i16 24, i16 0, i16 77, i16 12, i16 0, i16 0, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 0, i16 13, i16 150, i16 13, i16 0, i16 0, i16 0, i16 0, i16 64, i16 0, i16 155, i16 13, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 63, i16 156, i16 0, i16 13, i16 76, i16 20, i16 0, i16 0, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 75, i16 0, i16 12, i16 0, i16 5, i16 0, i16 6, i16 151, i16 7, i16 12, i16 8, i16 9, i16 83, i16 22, i16 0, i16 0, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 145, i16 146, i16 147, i16 148, i16 149, i16 0, i16 22, i16 23, i16 0, i16 24, i16 0, i16 0, i16 0, i16 154, i16 38, i16 39, i16 40, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 23, i16 0, i16 24, i16 13, i16 0, i16 12, i16 0, i16 22, i16 82, i16 135, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 91, i16 74, i16 145, i16 146, i16 147, i16 148, i16 149, i16 0, i16 23, i16 0, i16 24, i16 0, i16 136, i16 38, i16 39, i16 40, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 85, i16 0, i16 0, i16 0, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 84, i16 28, i16 29, i16 30, i16 87, i16 0, i16 0, i16 0, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 22, i16 0, i16 123, i16 124, i16 0, i16 125, i16 0, i16 0, i16 126, i16 127, i16 0, i16 28, i16 29, i16 30, i16 128, i16 0, i16 0, i16 22, i16 23, i16 0, i16 24, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 23, i16 104, i16 24, i16 86, i16 105, i16 0, i16 106, i16 0, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 0, i16 0, i16 107, i16 0, i16 108, i16 0, i16 0, i16 129, i16 0, i16 0, i16 0, i16 109, i16 110, i16 111, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 0, i16 130, i16 0, i16 103, i16 0, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 141, i16 101, i16 0, i16 102, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 140, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 22, i16 103, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 26, i16 27, i16 13, i16 0, i16 0, i16 0, i16 0, i16 0, i16 23, i16 0, i16 24, i16 22, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 0, i16 0, i16 0, i16 0, i16 23, i16 0, i16 24, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30, i16 144, i16 0, i16 0, i16 0, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 22, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 23, i16 0, i16 24, i16 143, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 25, i16 26, i16 27, i16 13, i16 28, i16 29, i16 30], align 16
@.str.2.328 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.3.329 = private unnamed_addr constant [2 x i8] c";\00", align 1
@d_error_recovery_hints_3_dparser_gram = internal global [2 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 7, ptr @.str.2.328 }, %struct.D_ErrorRecoveryHint { i16 0, i16 15, ptr @.str.3.329 }], align 16
@.str.4.330 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.5.331 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@d_error_recovery_hints_4_dparser_gram = internal global [3 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 7, ptr @.str.2.328 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.4.330 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_5_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 7, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_11_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 46, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_13_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 15, ptr @.str.3.329 }], align 16
@d_error_recovery_hints_17_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 15, ptr @.str.3.329 }], align 16
@d_error_recovery_hints_21_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 50, ptr @.str.4.330 }], align 16
@d_error_recovery_hints_22_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 50, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_23_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 50, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_48_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 2, i16 7, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_53_dparser_gram = internal global [3 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 46, ptr @.str.2.328 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.4.330 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_55_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 7, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_56_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 2, i16 15, ptr @.str.3.329 }], align 16
@d_error_recovery_hints_59_dparser_gram = internal global [3 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.4.330 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.5.331 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_62_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 7, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_74_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 46, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_77_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 15, ptr @.str.3.329 }], align 16
@d_error_recovery_hints_81_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 50, ptr @.str.4.330 }], align 16
@d_error_recovery_hints_83_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 50, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_85_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 50, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_87_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 4, i16 7, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_91_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 4, i16 15, ptr @.str.3.329 }], align 16
@d_error_recovery_hints_95_dparser_gram = internal global [3 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 31, ptr @.str.2.328 }, %struct.D_ErrorRecoveryHint { i16 0, i16 31, ptr @.str.4.330 }, %struct.D_ErrorRecoveryHint { i16 0, i16 48, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_99_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 48, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_100_dparser_gram = internal global [3 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 31, ptr @.str.2.328 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.4.330 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_101_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 31, ptr @.str.4.330 }], align 16
@d_error_recovery_hints_102_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 1, i16 48, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_125_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 46, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_130_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 2, i16 31, ptr @.str.4.330 }], align 16
@d_error_recovery_hints_131_dparser_gram = internal global [3 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 0, i16 48, ptr @.str.5.331 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.4.330 }, %struct.D_ErrorRecoveryHint { i16 0, i16 50, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_139_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 31, ptr @.str.2.328 }], align 16
@d_error_recovery_hints_141_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 31, ptr @.str.4.330 }], align 16
@d_error_recovery_hints_142_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 3, i16 48, ptr @.str.5.331 }], align 16
@d_error_recovery_hints_152_dparser_gram = internal global [1 x %struct.D_ErrorRecoveryHint] [%struct.D_ErrorRecoveryHint { i16 4, i16 31, ptr @.str.4.330 }], align 16
@d_states_dparser_gram = internal global [158 x %struct.D_State] [%struct.D_State { ptr @d_goto_valid_0_dparser_gram, i32 1, %struct.EnumStr { i32 1, ptr @d_reductions_0_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 1, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_2_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_3_dparser_gram, i32 1, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 2, ptr @d_error_recovery_hints_3_dparser_gram }, ptr @d_shifts_3_dparser_gram, ptr null, ptr @d_scanner_3_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_3_dparser_gram, ptr @d_accepts_diff_3_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_4_dparser_gram, i32 6, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_4_dparser_gram }, ptr @d_shifts_4_dparser_gram, ptr null, ptr @d_scanner_4_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_4_dparser_gram, ptr @d_accepts_diff_4_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_5_dparser_gram, i32 6, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_5_dparser_gram }, ptr @d_shifts_5_dparser_gram, ptr null, ptr @d_scanner_5_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_5_dparser_gram, ptr @d_accepts_diff_5_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_6_dparser_gram, i32 -1, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_5_dparser_gram }, ptr @d_shifts_6_dparser_gram, ptr null, ptr @d_scanner_6_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_6_dparser_gram, ptr @d_accepts_diff_6_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_7_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_8_dparser_gram, i32 46, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_5_dparser_gram }, ptr @d_shifts_6_dparser_gram, ptr null, ptr @d_scanner_6_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_6_dparser_gram, ptr @d_accepts_diff_6_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_9_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_10_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_11_dparser_gram, i32 39, %struct.EnumStr { i32 1, ptr @d_reductions_11_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_11_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_12_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_13_dparser_gram, i32 -9, %struct.EnumStr { i32 1, ptr @d_reductions_13_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_13_dparser_gram }, ptr @d_shifts_13_dparser_gram, ptr null, ptr @d_scanner_13_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_13_dparser_gram, ptr @d_accepts_diff_13_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_14_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_15_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_16_dparser_gram, i32 -5, %struct.EnumStr { i32 1, ptr @d_reductions_16_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_16_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_17_dparser_gram, i32 -2, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_17_dparser_gram }, ptr @d_shifts_17_dparser_gram, ptr null, ptr @d_scanner_17_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_17_dparser_gram, ptr @d_accepts_diff_17_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_18_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_19_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_20_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_21_dparser_gram, i32 41, %struct.EnumStr { i32 1, ptr @d_reductions_21_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_21_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_22_dparser_gram, i32 32, %struct.EnumStr { i32 1, ptr @d_reductions_22_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_22_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_23_dparser_gram, i32 32, %struct.EnumStr { i32 1, ptr @d_reductions_23_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_23_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_24_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_25_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_26_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_27_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_28_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_29_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_30_dparser_gram, i32 -80, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_4_dparser_gram }, ptr @d_shifts_30_dparser_gram, ptr null, ptr @d_scanner_30_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_30_dparser_gram, ptr @d_accepts_diff_30_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_31_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_32_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_33_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_34_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_35_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_36_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_37_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_38_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_39_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_40_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_41_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_42_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_43_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_44_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_45_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_46_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_47_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_48_dparser_gram, i32 -12, %struct.EnumStr { i32 1, ptr @d_reductions_48_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_48_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_49_dparser_gram, i32 -22, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_48_dparser_gram }, ptr @d_shifts_49_dparser_gram, ptr null, ptr @d_scanner_49_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_49_dparser_gram, ptr @d_accepts_diff_49_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_50_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_51_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_52_dparser_gram, i32 -28, %struct.EnumStr { i32 1, ptr @d_reductions_52_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_48_dparser_gram }, ptr @d_shifts_52_dparser_gram, ptr null, ptr @d_scanner_52_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_52_dparser_gram, ptr @d_accepts_diff_52_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_53_dparser_gram, i32 -97, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_53_dparser_gram }, ptr @d_shifts_30_dparser_gram, ptr null, ptr @d_scanner_30_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_30_dparser_gram, ptr @d_accepts_diff_30_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_54_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_55_dparser_gram, i32 -102, %struct.EnumStr { i32 1, ptr @d_reductions_55_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_55_dparser_gram }, ptr @d_shifts_55_dparser_gram, ptr null, ptr @d_scanner_55_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_55_dparser_gram, ptr @d_accepts_diff_55_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_56_dparser_gram, i32 -3, %struct.EnumStr { i32 1, ptr @d_reductions_56_dparser_gram }, %struct.EnumStr { i32 2, ptr @d_right_epsilon_hints_56_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_56_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_57_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_58_dparser_gram, i32 -12, %struct.EnumStr { i32 1, ptr @d_reductions_58_dparser_gram }, %struct.EnumStr { i32 2, ptr @d_right_epsilon_hints_58_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_56_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_59_dparser_gram, i32 -122, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_59_dparser_gram }, ptr @d_shifts_59_dparser_gram, ptr null, ptr @d_scanner_59_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_59_dparser_gram, ptr @d_accepts_diff_59_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_60_dparser_gram, i32 -200, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_59_dparser_gram }, ptr @d_shifts_30_dparser_gram, ptr null, ptr @d_scanner_30_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_30_dparser_gram, ptr @d_accepts_diff_30_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_61_dparser_gram, i32 -217, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_59_dparser_gram }, ptr @d_shifts_61_dparser_gram, ptr null, ptr @d_scanner_61_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_61_dparser_gram, ptr @d_accepts_diff_61_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_62_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_62_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_63_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_64_dparser_gram, i32 28, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_62_dparser_gram }, ptr @d_shifts_49_dparser_gram, ptr null, ptr @d_scanner_49_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_49_dparser_gram, ptr @d_accepts_diff_49_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_65_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_62_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_66_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_67_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_68_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_69_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_70_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_71_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_72_dparser_gram, i32 40, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_62_dparser_gram }, ptr @d_shifts_72_dparser_gram, ptr null, ptr @d_scanner_72_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_72_dparser_gram, ptr @d_accepts_diff_72_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_73_dparser_gram, i32 -214, %struct.EnumStr { i32 1, ptr @d_reductions_73_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_73_dparser_gram }, %struct.EnumStr zeroinitializer, ptr @d_shifts_52_dparser_gram, ptr null, ptr @d_scanner_52_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_52_dparser_gram, ptr @d_accepts_diff_52_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_74_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_74_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_75_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_76_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_77_dparser_gram, i32 57, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_77_dparser_gram }, ptr @d_shifts_77_dparser_gram, ptr null, ptr @d_scanner_77_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_77_dparser_gram, ptr @d_accepts_diff_77_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_78_dparser_gram, i32 -10, %struct.EnumStr { i32 1, ptr @d_reductions_78_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_78_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_79_dparser_gram, i32 -35, %struct.EnumStr { i32 2, ptr @d_reductions_79_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_79_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_80_dparser_gram, i32 53, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_77_dparser_gram }, ptr @d_shifts_77_dparser_gram, ptr null, ptr @d_scanner_77_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_77_dparser_gram, ptr @d_accepts_diff_77_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_81_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_81_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_82_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_83_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_83_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_84_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_85_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_85_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_86_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_87_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_87_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_88_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_89_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_87_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_90_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_91_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_91_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_92_dparser_gram, i32 -16, %struct.EnumStr { i32 1, ptr @d_reductions_92_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_92_dparser_gram, ptr null, ptr @d_scanner_92_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_92_dparser_gram, ptr @d_accepts_diff_92_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_93_dparser_gram, i32 -15, %struct.EnumStr { i32 1, ptr @d_reductions_93_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_93_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_94_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_95_dparser_gram, i32 -301, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_95_dparser_gram }, ptr @d_shifts_95_dparser_gram, ptr null, ptr @d_scanner_95_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_95_dparser_gram, ptr @d_accepts_diff_95_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_96_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_91_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_97_dparser_gram, i32 -59, %struct.EnumStr { i32 1, ptr @d_reductions_97_dparser_gram }, %struct.EnumStr { i32 2, ptr @d_right_epsilon_hints_97_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_98_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_99_dparser_gram, i32 -259, %struct.EnumStr { i32 1, ptr @d_reductions_99_dparser_gram }, %struct.EnumStr { i32 2, ptr @d_right_epsilon_hints_99_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_99_dparser_gram }, ptr @d_shifts_99_dparser_gram, ptr null, ptr @d_scanner_99_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_99_dparser_gram, ptr @d_accepts_diff_99_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_100_dparser_gram, i32 -320, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_100_dparser_gram }, ptr @d_shifts_4_dparser_gram, ptr null, ptr @d_scanner_4_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_4_dparser_gram, ptr @d_accepts_diff_4_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_101_dparser_gram, i32 -7, %struct.EnumStr { i32 1, ptr @d_reductions_101_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_101_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_102_dparser_gram, i32 6, %struct.EnumStr { i32 1, ptr @d_reductions_102_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_102_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_103_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_104_dparser_gram, i32 -20, %struct.EnumStr { i32 2, ptr @d_reductions_104_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_104_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_105_dparser_gram, i32 -18, %struct.EnumStr { i32 1, ptr @d_reductions_105_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_105_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_106_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_107_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_108_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_109_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_110_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_111_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_112_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_113_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_114_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_115_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_116_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_117_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_118_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_119_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_120_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_121_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_122_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_123_dparser_gram, i32 -179, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_123_dparser_gram, ptr null, ptr @d_scanner_123_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_123_dparser_gram, ptr @d_accepts_diff_123_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_124_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_125_dparser_gram, i32 -51, %struct.EnumStr { i32 1, ptr @d_reductions_125_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_125_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_125_dparser_gram }, ptr @d_shifts_125_dparser_gram, ptr null, ptr @d_scanner_125_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_125_dparser_gram, ptr @d_accepts_diff_125_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_126_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_127_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_128_dparser_gram, i32 -341, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_100_dparser_gram }, ptr @d_shifts_30_dparser_gram, ptr null, ptr @d_scanner_30_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_30_dparser_gram, ptr @d_accepts_diff_30_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_129_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_130_dparser_gram, i32 -61, %struct.EnumStr { i32 1, ptr @d_reductions_130_dparser_gram }, %struct.EnumStr { i32 2, ptr @d_right_epsilon_hints_130_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_130_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_131_dparser_gram, i32 -419, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 3, ptr @d_error_recovery_hints_131_dparser_gram }, ptr @d_shifts_61_dparser_gram, ptr null, ptr @d_scanner_61_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_61_dparser_gram, ptr @d_accepts_diff_61_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_132_dparser_gram, i32 -89, %struct.EnumStr { i32 1, ptr @d_reductions_132_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_132_dparser_gram, ptr null, ptr @d_scanner_132_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_132_dparser_gram, ptr @d_accepts_diff_132_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_133_dparser_gram, i32 -132, %struct.EnumStr { i32 1, ptr @d_reductions_133_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_132_dparser_gram, ptr null, ptr @d_scanner_132_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_132_dparser_gram, ptr @d_accepts_diff_132_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_134_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_135_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_136_dparser_gram, i32 -17, %struct.EnumStr { i32 1, ptr @d_reductions_136_dparser_gram }, %struct.EnumStr { i32 1, ptr @d_right_epsilon_hints_136_dparser_gram }, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_137_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_138_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_139_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_139_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_140_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_141_dparser_gram, i32 30, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_141_dparser_gram }, ptr @d_shifts_141_dparser_gram, ptr null, ptr @d_scanner_141_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_141_dparser_gram, ptr @d_accepts_diff_141_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_142_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_142_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_143_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_144_dparser_gram, i32 -139, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_123_dparser_gram, ptr null, ptr @d_scanner_123_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_123_dparser_gram, ptr @d_accepts_diff_123_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_145_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_146_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_147_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_148_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_149_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_150_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_151_dparser_gram, i32 -87, %struct.EnumStr { i32 1, ptr @d_reductions_151_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_6_dparser_gram, ptr null, ptr @d_scanner_6_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_6_dparser_gram, ptr @d_accepts_diff_6_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_152_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_152_dparser_gram }, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_153_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_154_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }, %struct.D_State { ptr @d_goto_valid_155_dparser_gram, i32 15, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr @d_shifts_155_dparser_gram, ptr null, ptr @d_scanner_155_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_155_dparser_gram, ptr @d_accepts_diff_155_dparser_gram, i32 -1 }, %struct.D_State { ptr @d_goto_valid_156_dparser_gram, i32 -58, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, %struct.EnumStr { i32 1, ptr @d_error_recovery_hints_125_dparser_gram }, ptr @d_shifts_125_dparser_gram, ptr null, ptr @d_scanner_125_dparser_gram, i8 1, i8 0, i8 0, ptr @d_transition_125_dparser_gram, ptr @d_accepts_diff_125_dparser_gram, i32 -1 }, %struct.D_State { ptr null, i32 -2147483647, %struct.EnumStr { i32 1, ptr @d_reductions_157_dparser_gram }, %struct.EnumStr zeroinitializer, %struct.EnumStr zeroinitializer, ptr null, ptr null, ptr null, i8 1, i8 0, i8 0, ptr null, ptr null, i32 -1 }], align 16
@.str.6.332 = private unnamed_addr constant [8 x i8] c"0 Start\00", align 1
@.str.7.333 = private unnamed_addr constant [8 x i8] c"1 Start\00", align 1
@.str.8.334 = private unnamed_addr constant [8 x i8] c"grammar\00", align 1
@.str.9.335 = private unnamed_addr constant [10 x i8] c"grammar.6\00", align 1
@.str.10.336 = private unnamed_addr constant [10 x i8] c"grammar.4\00", align 1
@.str.11.337 = private unnamed_addr constant [12 x i8] c"grammar.4.5\00", align 1
@.str.12.338 = private unnamed_addr constant [10 x i8] c"grammar.3\00", align 1
@.str.13.339 = private unnamed_addr constant [12 x i8] c"global_code\00", align 1
@.str.14.340 = private unnamed_addr constant [15 x i8] c"global_code.10\00", align 1
@.str.15.341 = private unnamed_addr constant [14 x i8] c"global_code.9\00", align 1
@.str.16.342 = private unnamed_addr constant [14 x i8] c"global_code.8\00", align 1
@.str.17.343 = private unnamed_addr constant [11 x i8] c"pass_types\00", align 1
@.str.18.344 = private unnamed_addr constant [10 x i8] c"pass_type\00", align 1
@.str.19.345 = private unnamed_addr constant [16 x i8] c"declarationtype\00", align 1
@.str.20.346 = private unnamed_addr constant [17 x i8] c"token_identifier\00", align 1
@.str.21.347 = private unnamed_addr constant [11 x i8] c"production\00", align 1
@.str.22.348 = private unnamed_addr constant [17 x i8] c"regex_production\00", align 1
@.str.23.349 = private unnamed_addr constant [16 x i8] c"production_name\00", align 1
@.str.24.350 = private unnamed_addr constant [19 x i8] c"production_name.18\00", align 1
@.str.25.351 = private unnamed_addr constant [6 x i8] c"rules\00", align 1
@.str.26.352 = private unnamed_addr constant [9 x i8] c"rules.21\00", align 1
@.str.27.353 = private unnamed_addr constant [9 x i8] c"rules.20\00", align 1
@.str.28.354 = private unnamed_addr constant [5 x i8] c"rule\00", align 1
@.str.29.355 = private unnamed_addr constant [8 x i8] c"rule.29\00", align 1
@.str.30.356 = private unnamed_addr constant [8 x i8] c"rule.28\00", align 1
@.str.31.357 = private unnamed_addr constant [8 x i8] c"rule.23\00", align 1
@.str.32.358 = private unnamed_addr constant [11 x i8] c"rule.23.27\00", align 1
@.str.33.359 = private unnamed_addr constant [11 x i8] c"rule.23.26\00", align 1
@.str.34.360 = private unnamed_addr constant [11 x i8] c"rule.23.24\00", align 1
@.str.35.361 = private unnamed_addr constant [14 x i8] c"rule.23.24.25\00", align 1
@.str.36.362 = private unnamed_addr constant [9 x i8] c"new_rule\00", align 1
@.str.37.363 = private unnamed_addr constant [15 x i8] c"simple_element\00", align 1
@.str.38.364 = private unnamed_addr constant [18 x i8] c"simple_element.32\00", align 1
@.str.39.365 = private unnamed_addr constant [8 x i8] c"element\00", align 1
@.str.40.366 = private unnamed_addr constant [12 x i8] c"new_subrule\00", align 1
@.str.41.367 = private unnamed_addr constant [17 x i8] c"element_modifier\00", align 1
@.str.42.368 = private unnamed_addr constant [14 x i8] c"rule_modifier\00", align 1
@.str.43.369 = private unnamed_addr constant [11 x i8] c"rule_assoc\00", align 1
@.str.44.370 = private unnamed_addr constant [14 x i8] c"rule_priority\00", align 1
@.str.45.371 = private unnamed_addr constant [10 x i8] c"rule_code\00", align 1
@.str.46.372 = private unnamed_addr constant [13 x i8] c"rule_code.42\00", align 1
@.str.47.373 = private unnamed_addr constant [13 x i8] c"rule_code.41\00", align 1
@.str.48.374 = private unnamed_addr constant [13 x i8] c"rule_code.40\00", align 1
@.str.49.375 = private unnamed_addr constant [17 x i8] c"speculative_code\00", align 1
@.str.50.376 = private unnamed_addr constant [11 x i8] c"final_code\00", align 1
@.str.51.377 = private unnamed_addr constant [10 x i8] c"pass_code\00", align 1
@.str.52.378 = private unnamed_addr constant [11 x i8] c"curly_code\00", align 1
@.str.53.379 = private unnamed_addr constant [14 x i8] c"curly_code.47\00", align 1
@.str.54.380 = private unnamed_addr constant [13 x i8] c"bracket_code\00", align 1
@.str.55.381 = private unnamed_addr constant [16 x i8] c"bracket_code.49\00", align 1
@.str.56.382 = private unnamed_addr constant [14 x i8] c"balanced_code\00", align 1
@.str.57.383 = private unnamed_addr constant [17 x i8] c"balanced_code.53\00", align 1
@.str.58.384 = private unnamed_addr constant [17 x i8] c"balanced_code.52\00", align 1
@.str.59.385 = private unnamed_addr constant [17 x i8] c"balanced_code.51\00", align 1
@.str.60.386 = private unnamed_addr constant [8 x i8] c"symbols\00", align 1
@.str.61.387 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@.str.62.388 = private unnamed_addr constant [6 x i8] c"regex\00", align 1
@.str.63.389 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@.str.64.390 = private unnamed_addr constant [8 x i8] c"integer\00", align 1
@.str.65.391 = private unnamed_addr constant [11 x i8] c"decimalint\00", align 1
@.str.66.392 = private unnamed_addr constant [7 x i8] c"hexint\00", align 1
@.str.67.393 = private unnamed_addr constant [9 x i8] c"octalint\00", align 1
@.str.68.394 = private unnamed_addr constant [10 x i8] c"${scanner\00", align 1
@.str.69.395 = private unnamed_addr constant [10 x i8] c"${declare\00", align 1
@.str.70.396 = private unnamed_addr constant [8 x i8] c"${token\00", align 1
@.str.71.397 = private unnamed_addr constant [10 x i8] c"${action}\00", align 1
@.str.72.398 = private unnamed_addr constant [7 x i8] c"${pass\00", align 1
@.str.73.399 = private unnamed_addr constant [9 x i8] c"preorder\00", align 1
@.str.74.400 = private unnamed_addr constant [10 x i8] c"postorder\00", align 1
@.str.75.401 = private unnamed_addr constant [7 x i8] c"manual\00", align 1
@.str.76.402 = private unnamed_addr constant [8 x i8] c"for_all\00", align 1
@.str.77.403 = private unnamed_addr constant [14 x i8] c"for_undefined\00", align 1
@.str.78.404 = private unnamed_addr constant [9 x i8] c"tokenize\00", align 1
@.str.79.405 = private unnamed_addr constant [14 x i8] c"longest_match\00", align 1
@.str.80.406 = private unnamed_addr constant [11 x i8] c"whitespace\00", align 1
@.str.81.407 = private unnamed_addr constant [12 x i8] c"all_matches\00", align 1
@.str.82.408 = private unnamed_addr constant [26 x i8] c"set_op_priority_from_rule\00", align 1
@.str.83.409 = private unnamed_addr constant [15 x i8] c"all_subparsers\00", align 1
@.str.84.410 = private unnamed_addr constant [10 x i8] c"subparser\00", align 1
@.str.85.411 = private unnamed_addr constant [16 x i8] c"save_parse_tree\00", align 1
@.str.86.412 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.87.413 = private unnamed_addr constant [4 x i8] c"::=\00", align 1
@.str.88.414 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.89.415 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.90.416 = private unnamed_addr constant [7 x i8] c"${scan\00", align 1
@.str.91.417 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.92.418 = private unnamed_addr constant [6 x i8] c"$term\00", align 1
@.str.93.419 = private unnamed_addr constant [3 x i8] c"/i\00", align 1
@.str.94.420 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.95.421 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.96.422 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.97.423 = private unnamed_addr constant [16 x i8] c"$unary_op_right\00", align 1
@.str.98.424 = private unnamed_addr constant [15 x i8] c"$unary_op_left\00", align 1
@.str.99.425 = private unnamed_addr constant [17 x i8] c"$binary_op_right\00", align 1
@.str.100.426 = private unnamed_addr constant [16 x i8] c"$binary_op_left\00", align 1
@.str.101.427 = private unnamed_addr constant [13 x i8] c"$unary_right\00", align 1
@.str.102.428 = private unnamed_addr constant [12 x i8] c"$unary_left\00", align 1
@.str.103 = private unnamed_addr constant [14 x i8] c"$binary_right\00", align 1
@.str.104.429 = private unnamed_addr constant [13 x i8] c"$binary_left\00", align 1
@.str.105.430 = private unnamed_addr constant [7 x i8] c"$right\00", align 1
@.str.106.431 = private unnamed_addr constant [6 x i8] c"$left\00", align 1
@.str.107.432 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.108.433 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.109.434 = private unnamed_addr constant [32 x i8] c"[!~`@#$%^&*\\\\-_+=|:;\\\\\\\\<,>.?/]\00", align 1
@.str.110.435 = private unnamed_addr constant [22 x i8] c"'([^'\\\\\\\\]|\\\\\\\\[^])*'\00", align 1
@.str.111.436 = private unnamed_addr constant [25 x i8] c"\\\22([^\\\22\\\\\\\\]|\\\\\\\\[^])*\\\22\00", align 1
@.str.112.437 = private unnamed_addr constant [23 x i8] c"[a-zA-Z_][a-zA-Z_0-9]*\00", align 1
@.str.113.438 = private unnamed_addr constant [21 x i8] c"-?[1-9][0-9]*[uUlL]?\00", align 1
@.str.114.439 = private unnamed_addr constant [29 x i8] c"-?(0x|0X)[0-9a-fA-F]+[uUlL]?\00", align 1
@.str.115.440 = private unnamed_addr constant [17 x i8] c"-?0[0-7]*[uUlL]?\00", align 1
@d_symbols_dparser_gram = internal global [128 x %struct.D_Symbol] [%struct.D_Symbol { i32 2, ptr @.str.6.332, i32 7 }, %struct.D_Symbol { i32 2, ptr @.str.7.333, i32 7 }, %struct.D_Symbol { i32 1, ptr @.str.8.334, i32 7 }, %struct.D_Symbol { i32 2, ptr @.str.9.335, i32 9 }, %struct.D_Symbol { i32 2, ptr @.str.10.336, i32 9 }, %struct.D_Symbol { i32 2, ptr @.str.11.337, i32 11 }, %struct.D_Symbol { i32 2, ptr @.str.12.338, i32 9 }, %struct.D_Symbol { i32 1, ptr @.str.13.339, i32 11 }, %struct.D_Symbol { i32 2, ptr @.str.14.340, i32 14 }, %struct.D_Symbol { i32 2, ptr @.str.15.341, i32 13 }, %struct.D_Symbol { i32 2, ptr @.str.16.342, i32 13 }, %struct.D_Symbol { i32 1, ptr @.str.17.343, i32 10 }, %struct.D_Symbol { i32 1, ptr @.str.18.344, i32 9 }, %struct.D_Symbol { i32 1, ptr @.str.19.345, i32 15 }, %struct.D_Symbol { i32 1, ptr @.str.20.346, i32 16 }, %struct.D_Symbol { i32 1, ptr @.str.21.347, i32 10 }, %struct.D_Symbol { i32 1, ptr @.str.22.348, i32 16 }, %struct.D_Symbol { i32 1, ptr @.str.23.349, i32 15 }, %struct.D_Symbol { i32 2, ptr @.str.24.350, i32 18 }, %struct.D_Symbol { i32 1, ptr @.str.25.351, i32 5 }, %struct.D_Symbol { i32 2, ptr @.str.26.352, i32 8 }, %struct.D_Symbol { i32 2, ptr @.str.27.353, i32 8 }, %struct.D_Symbol { i32 1, ptr @.str.28.354, i32 4 }, %struct.D_Symbol { i32 2, ptr @.str.29.355, i32 7 }, %struct.D_Symbol { i32 2, ptr @.str.30.356, i32 7 }, %struct.D_Symbol { i32 2, ptr @.str.31.357, i32 7 }, %struct.D_Symbol { i32 2, ptr @.str.32.358, i32 10 }, %struct.D_Symbol { i32 2, ptr @.str.33.359, i32 10 }, %struct.D_Symbol { i32 2, ptr @.str.34.360, i32 10 }, %struct.D_Symbol { i32 2, ptr @.str.35.361, i32 13 }, %struct.D_Symbol { i32 1, ptr @.str.36.362, i32 8 }, %struct.D_Symbol { i32 1, ptr @.str.37.363, i32 14 }, %struct.D_Symbol { i32 2, ptr @.str.38.364, i32 17 }, %struct.D_Symbol { i32 1, ptr @.str.39.365, i32 7 }, %struct.D_Symbol { i32 1, ptr @.str.40.366, i32 11 }, %struct.D_Symbol { i32 1, ptr @.str.41.367, i32 16 }, %struct.D_Symbol { i32 1, ptr @.str.42.368, i32 13 }, %struct.D_Symbol { i32 1, ptr @.str.43.369, i32 10 }, %struct.D_Symbol { i32 1, ptr @.str.44.370, i32 13 }, %struct.D_Symbol { i32 1, ptr @.str.45.371, i32 9 }, %struct.D_Symbol { i32 2, ptr @.str.46.372, i32 12 }, %struct.D_Symbol { i32 2, ptr @.str.47.373, i32 12 }, %struct.D_Symbol { i32 2, ptr @.str.48.374, i32 12 }, %struct.D_Symbol { i32 1, ptr @.str.49.375, i32 16 }, %struct.D_Symbol { i32 1, ptr @.str.50.376, i32 10 }, %struct.D_Symbol { i32 1, ptr @.str.51.377, i32 9 }, %struct.D_Symbol { i32 1, ptr @.str.52.378, i32 10 }, %struct.D_Symbol { i32 2, ptr @.str.53.379, i32 13 }, %struct.D_Symbol { i32 1, ptr @.str.54.380, i32 12 }, %struct.D_Symbol { i32 2, ptr @.str.55.381, i32 15 }, %struct.D_Symbol { i32 1, ptr @.str.56.382, i32 13 }, %struct.D_Symbol { i32 2, ptr @.str.57.383, i32 16 }, %struct.D_Symbol { i32 2, ptr @.str.58.384, i32 16 }, %struct.D_Symbol { i32 2, ptr @.str.59.385, i32 16 }, %struct.D_Symbol { i32 1, ptr @.str.60.386, i32 7 }, %struct.D_Symbol { i32 1, ptr @.str.61.387, i32 6 }, %struct.D_Symbol { i32 1, ptr @.str.62.388, i32 5 }, %struct.D_Symbol { i32 1, ptr @.str.63.389, i32 10 }, %struct.D_Symbol { i32 1, ptr @.str.64.390, i32 7 }, %struct.D_Symbol { i32 1, ptr @.str.65.391, i32 10 }, %struct.D_Symbol { i32 1, ptr @.str.66.392, i32 6 }, %struct.D_Symbol { i32 1, ptr @.str.67.393, i32 8 }, %struct.D_Symbol { i32 3, ptr @.str.68.394, i32 9 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.69.395, i32 9 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.70.396, i32 7 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.71.397, i32 9 }, %struct.D_Symbol { i32 3, ptr @.str.72.398, i32 6 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.73.399, i32 8 }, %struct.D_Symbol { i32 3, ptr @.str.74.400, i32 9 }, %struct.D_Symbol { i32 3, ptr @.str.75.401, i32 6 }, %struct.D_Symbol { i32 3, ptr @.str.76.402, i32 7 }, %struct.D_Symbol { i32 3, ptr @.str.77.403, i32 13 }, %struct.D_Symbol { i32 3, ptr @.str.78.404, i32 8 }, %struct.D_Symbol { i32 3, ptr @.str.79.405, i32 13 }, %struct.D_Symbol { i32 3, ptr @.str.80.406, i32 10 }, %struct.D_Symbol { i32 3, ptr @.str.81.407, i32 11 }, %struct.D_Symbol { i32 3, ptr @.str.82.408, i32 25 }, %struct.D_Symbol { i32 3, ptr @.str.83.409, i32 14 }, %struct.D_Symbol { i32 3, ptr @.str.84.410, i32 9 }, %struct.D_Symbol { i32 3, ptr @.str.85.411, i32 15 }, %struct.D_Symbol { i32 3, ptr @.str.86.412, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.3.329, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.3.329, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.3.329, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.87.413, i32 3 }, %struct.D_Symbol { i32 3, ptr @.str.88.414, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.89.415, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.90.416, i32 6 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.91.417, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.4.330, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.92.418, i32 5 }, %struct.D_Symbol { i32 3, ptr @.str.93.419, i32 2 }, %struct.D_Symbol { i32 3, ptr @.str.94.420, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.95.421, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.96.422, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.97.423, i32 15 }, %struct.D_Symbol { i32 3, ptr @.str.98.424, i32 14 }, %struct.D_Symbol { i32 3, ptr @.str.99.425, i32 16 }, %struct.D_Symbol { i32 3, ptr @.str.100.426, i32 15 }, %struct.D_Symbol { i32 3, ptr @.str.101.427, i32 12 }, %struct.D_Symbol { i32 3, ptr @.str.102.428, i32 11 }, %struct.D_Symbol { i32 3, ptr @.str.103, i32 13 }, %struct.D_Symbol { i32 3, ptr @.str.104.429, i32 12 }, %struct.D_Symbol { i32 3, ptr @.str.105.430, i32 6 }, %struct.D_Symbol { i32 3, ptr @.str.106.431, i32 5 }, %struct.D_Symbol { i32 3, ptr @.str.86.412, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.107.432, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.108.433, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.5.331, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.91.417, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.4.330, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.108.433, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.5.331, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.107.432, i32 1 }, %struct.D_Symbol { i32 3, ptr @.str.2.328, i32 1 }, %struct.D_Symbol { i32 4, ptr @.str.109.434, i32 37 }, %struct.D_Symbol { i32 4, ptr @.str.110.435, i32 29 }, %struct.D_Symbol { i32 4, ptr @.str.111.436, i32 38 }, %struct.D_Symbol { i32 4, ptr @.str.112.437, i32 22 }, %struct.D_Symbol { i32 4, ptr @.str.113.438, i32 20 }, %struct.D_Symbol { i32 4, ptr @.str.114.439, i32 28 }, %struct.D_Symbol { i32 4, ptr @.str.115.440, i32 16 }], align 16
@parser_tables_dparser_gram = internal global %struct.D_ParserTables { i32 158, ptr @d_states_dparser_gram, ptr @d_gotos_dparser_gram, i32 0, i32 128, ptr @d_symbols_dparser_gram, ptr null, i32 0, ptr null, i32 0 }, align 8

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #0 {
  tail call void @process_args(ptr noundef nonnull @arg_state, ptr noundef %1) #43
  %3 = load i32, ptr getelementptr inbounds (%struct.ArgumentState, ptr @arg_state, i64 0, i32 1), align 8, !tbaa !7
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  tail call void @help(ptr noundef nonnull @arg_state, ptr noundef null) #44
  br label %6

6:                                                ; preds = %5, %2
  %7 = load ptr, ptr @arg_state, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = tail call ptr @new_D_Grammar(ptr noundef %8) #43
  %10 = load i32, ptr @set_op_priority_from_rule, align 4, !tbaa !15
  %11 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 10
  store i32 %10, ptr %11, align 8, !tbaa !16
  %12 = load i32, ptr @right_recursive_BNF, align 4, !tbaa !15
  %13 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 11
  store i32 %12, ptr %13, align 4, !tbaa !20
  %14 = load i32, ptr @states_for_whitespace, align 4, !tbaa !15
  %15 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 12
  store i32 %14, ptr %15, align 8, !tbaa !21
  %16 = load i32, ptr @states_for_all_nterms, align 4, !tbaa !15
  %17 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 13
  store i32 %16, ptr %17, align 4, !tbaa !22
  %18 = load i32, ptr @tokenizer, align 4, !tbaa !15
  %19 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 14
  store i32 %18, ptr %19, align 8, !tbaa !23
  %20 = load i32, ptr @longest_match, align 4, !tbaa !15
  %21 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 15
  store i32 %20, ptr %21, align 4, !tbaa !24
  %22 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 17
  %23 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %22, ptr noundef nonnull dereferenceable(1) @grammar_ident) #43
  %24 = load i32, ptr @scanner_blocks, align 4, !tbaa !15
  %25 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 18
  store i32 %24, ptr %25, align 4, !tbaa !25
  %26 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 19
  store i32 0, ptr %26, align 8, !tbaa !26
  %27 = load i32, ptr @write_line_directives, align 4, !tbaa !15
  %28 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 20
  store i32 %27, ptr %28, align 4, !tbaa !27
  %29 = load i32, ptr @write_header, align 4, !tbaa !15
  %30 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 21
  store i32 %29, ptr %30, align 8, !tbaa !28
  %31 = load i32, ptr @token_type, align 4, !tbaa !15
  %32 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 22
  store i32 %31, ptr %32, align 4, !tbaa !29
  %33 = tail call i32 @parse_grammar(ptr noundef %9, ptr noundef nonnull @parser_tables_dparser_gram, i32 noundef 32) #43
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %6
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str, ptr noundef %8) #43
  br label %36

36:                                               ; preds = %35, %6
  %37 = tail call i32 @build_grammar(ptr noundef nonnull %9) #43
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.1, ptr noundef %8) #43
  br label %40

40:                                               ; preds = %39, %36
  %41 = tail call i32 @write_ctables(ptr noundef nonnull %9) #43
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.2, ptr noundef %8) #43
  br label %44

44:                                               ; preds = %43, %40
  tail call void @free_D_Grammar(ptr noundef nonnull %9) #43
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal void @help(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca [30 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 30, ptr nonnull %3) #45
  call void @d_version(ptr noundef nonnull %3) #43
  %4 = load ptr, ptr @stderr, align 8, !tbaa !14
  %5 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %4, ptr noundef nonnull @.str.49, ptr noundef nonnull %3) #46
  %6 = load ptr, ptr @stderr, align 8, !tbaa !14
  %7 = call i64 @fwrite(ptr nonnull @.str.50, i64 37, i64 1, ptr %6) #47
  call void @usage(ptr noundef %0, ptr noundef %1) #43
  call void @llvm.lifetime.end.p0(i64 30, ptr nonnull %3) #45
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #4

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nounwind optsize uwtable
define internal void @write_parser_tables_as_C(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca %struct.anon.9, align 8
  %5 = alloca [4 x %struct.anon], align 16
  %6 = alloca [4 x %struct.anon], align 16
  %7 = alloca %struct.anon, align 8
  %8 = alloca [256 x i8], align 16
  %9 = alloca [256 x i8], align 16
  %10 = alloca %struct.ScannerBlock, align 8
  %11 = alloca %struct.ScannerBlock, align 8
  %12 = alloca [256 x i8], align 16
  %13 = alloca [256 x i8], align 16
  %14 = alloca [256 x i8], align 16
  %15 = alloca [4096 x i8], align 16
  %16 = alloca [4096 x i8], align 16
  %17 = alloca %struct.anon, align 8
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %16) #45
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %17) #45
  store i32 0, ptr %17, align 8, !tbaa !30
  %18 = getelementptr inbounds %struct.anon, ptr %17, i64 0, i32 2
  store ptr null, ptr %18, align 8, !tbaa !31
  %19 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %16, ptr noundef nonnull dereferenceable(1) %1) #43
  %20 = call i64 @strlen(ptr nonnull dereferenceable(1) %16)
  %21 = getelementptr inbounds i8, ptr %16, i64 %20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(12) %21, ptr noundef nonnull align 1 dereferenceable(12) @.str.51, i64 12, i1 false)
  %22 = load ptr, ptr @stdout, align 8, !tbaa !14
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %3
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.1.52, ptr noundef nonnull %16) #43
  br label %25

25:                                               ; preds = %24, %3
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %15) #45
  %26 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %27 = load i32, ptr %26, align 8, !tbaa !32
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %43, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !33
  %32 = zext i32 %27 to i64
  br label %33

33:                                               ; preds = %33, %29
  %34 = phi i64 [ 0, %29 ], [ %41, %33 ]
  %35 = phi i32 [ 0, %29 ], [ %40, %33 ]
  %36 = getelementptr inbounds ptr, ptr %31, i64 %34
  %37 = load ptr, ptr %36, align 8, !tbaa !14
  %38 = load i32, ptr %37, align 8, !tbaa !34
  %39 = icmp eq i32 %38, 3
  %40 = select i1 %39, i32 1, i32 %35
  %41 = add nuw nsw i64 %34, 1
  %42 = icmp eq i64 %41, %32
  br i1 %42, label %43, label %33, !llvm.loop !36

43:                                               ; preds = %33, %25
  %44 = phi i32 [ 0, %25 ], [ %40, %33 ]
  %45 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 13
  %46 = load i32, ptr %45, align 4, !tbaa !22
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %61

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %50 = load i32, ptr %49, align 8, !tbaa !38
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %61, label %52

52:                                               ; preds = %52, %48
  %53 = phi i32 [ %57, %52 ], [ 0, %48 ]
  %54 = phi i32 [ %58, %52 ], [ 0, %48 ]
  %55 = call i32 @state_for_declaration(ptr noundef nonnull %0, i32 noundef %54) #43
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, i32 %53, i32 1
  %58 = add nuw nsw i32 %54, 1
  %59 = load i32, ptr %49, align 8, !tbaa !38
  %60 = icmp ult i32 %58, %59
  br i1 %60, label %52, label %61, !llvm.loop !39

61:                                               ; preds = %52, %48, %43
  %62 = phi i32 [ 1, %43 ], [ 0, %48 ], [ %57, %52 ]
  %63 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 21
  %64 = load i32, ptr %63, align 8, !tbaa !28
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %72, label %66

66:                                               ; preds = %61
  %67 = icmp slt i32 %64, 0
  br i1 %67, label %68, label %203

68:                                               ; preds = %66
  %69 = icmp ne i32 %44, 0
  %70 = icmp ne i32 %62, 0
  %71 = select i1 %69, i1 true, i1 %70
  br i1 %71, label %72, label %203

72:                                               ; preds = %68, %61
  %73 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %15, ptr noundef nonnull dereferenceable(1) %1) #43
  %74 = call i64 @strlen(ptr nonnull dereferenceable(1) %15)
  %75 = getelementptr inbounds i8, ptr %15, i64 %74
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(12) %75, ptr noundef nonnull align 1 dereferenceable(12) @.str.17.53, i64 12, i1 false)
  %76 = load ptr, ptr @stdout, align 8, !tbaa !14
  %77 = icmp eq ptr %76, null
  br i1 %77, label %78, label %79

78:                                               ; preds = %72
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.1.52, ptr noundef nonnull %15) #43
  br label %79

79:                                               ; preds = %78, %72
  %80 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.18.54, ptr noundef %2) #44
  %81 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.19.55, ptr noundef %2) #44
  %82 = icmp eq i32 %44, 0
  br i1 %82, label %167, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 22
  %85 = load i32, ptr %84, align 4, !tbaa !29
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %115

87:                                               ; preds = %83
  %88 = load i32, ptr %26, align 8, !tbaa !32
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %167, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %92 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  br label %93

93:                                               ; preds = %110, %90
  %94 = phi i32 [ %88, %90 ], [ %111, %110 ]
  %95 = phi i64 [ 0, %90 ], [ %112, %110 ]
  %96 = load ptr, ptr %91, align 8, !tbaa !33
  %97 = getelementptr inbounds ptr, ptr %96, i64 %95
  %98 = load ptr, ptr %97, align 8, !tbaa !14
  %99 = load i32, ptr %98, align 8, !tbaa !34
  %100 = icmp eq i32 %99, 3
  br i1 %100, label %101, label %110

101:                                              ; preds = %93
  %102 = getelementptr inbounds %struct.Term, ptr %98, i64 0, i32 5
  %103 = load ptr, ptr %102, align 8, !tbaa !40
  %104 = getelementptr inbounds %struct.Term, ptr %98, i64 0, i32 1
  %105 = load i32, ptr %104, align 4, !tbaa !41
  %106 = load i32, ptr %92, align 8, !tbaa !38
  %107 = add i32 %106, %105
  %108 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.20.56, ptr noundef %103, i32 noundef %107) #44
  %109 = load i32, ptr %26, align 8, !tbaa !32
  br label %110

110:                                              ; preds = %101, %93
  %111 = phi i32 [ %94, %93 ], [ %109, %101 ]
  %112 = add nuw nsw i64 %95, 1
  %113 = zext i32 %111 to i64
  %114 = icmp ult i64 %112, %113
  br i1 %114, label %93, label %167, !llvm.loop !42

115:                                              ; preds = %83
  %116 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.21.57, ptr noundef %2) #44
  %117 = load i32, ptr %26, align 8, !tbaa !32
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %165, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %121 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  br label %122

122:                                              ; preds = %159, %119
  %123 = phi i32 [ %117, %119 ], [ %160, %159 ]
  %124 = phi i64 [ 0, %119 ], [ %162, %159 ]
  %125 = phi i32 [ 0, %119 ], [ %161, %159 ]
  %126 = load ptr, ptr %120, align 8, !tbaa !33
  %127 = getelementptr inbounds ptr, ptr %126, i64 %124
  %128 = load ptr, ptr %127, align 8, !tbaa !14
  %129 = load i32, ptr %128, align 8, !tbaa !34
  %130 = icmp eq i32 %129, 3
  br i1 %130, label %131, label %159

131:                                              ; preds = %122
  %132 = getelementptr inbounds %struct.Term, ptr %128, i64 0, i32 6
  %133 = load i32, ptr %132, align 8, !tbaa !43
  %134 = add i32 %125, 7
  %135 = add i32 %134, %133
  %136 = icmp sgt i32 %135, 70
  br i1 %136, label %137, label %143

137:                                              ; preds = %131
  %138 = call i32 @putchar(i32 10)
  %139 = load ptr, ptr %120, align 8, !tbaa !33
  %140 = getelementptr inbounds ptr, ptr %139, i64 %124
  %141 = load ptr, ptr %140, align 8, !tbaa !14
  %142 = load i32, ptr %26, align 8, !tbaa !32
  br label %143

143:                                              ; preds = %137, %131
  %144 = phi i32 [ %142, %137 ], [ %123, %131 ]
  %145 = phi ptr [ %141, %137 ], [ %128, %131 ]
  %146 = phi i32 [ 0, %137 ], [ %135, %131 ]
  %147 = getelementptr inbounds %struct.Term, ptr %145, i64 0, i32 5
  %148 = load ptr, ptr %147, align 8, !tbaa !40
  %149 = getelementptr inbounds %struct.Term, ptr %145, i64 0, i32 1
  %150 = load i32, ptr %149, align 4, !tbaa !41
  %151 = load i32, ptr %121, align 8, !tbaa !38
  %152 = add i32 %151, %150
  %153 = add i32 %144, -1
  %154 = zext i32 %153 to i64
  %155 = icmp eq i64 %124, %154
  %156 = select i1 %155, ptr @.str.23.58, ptr @.str.24.59
  %157 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.22.60, ptr noundef %148, i32 noundef %152, ptr noundef nonnull %156) #44
  %158 = load i32, ptr %26, align 8, !tbaa !32
  br label %159

159:                                              ; preds = %143, %122
  %160 = phi i32 [ %158, %143 ], [ %123, %122 ]
  %161 = phi i32 [ %146, %143 ], [ %125, %122 ]
  %162 = add nuw nsw i64 %124, 1
  %163 = zext i32 %160 to i64
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %122, label %165, !llvm.loop !44

165:                                              ; preds = %159, %115
  %166 = call i64 @fwrite(ptr nonnull @.str.25.61, i64 4, i64 1, ptr %76)
  br label %167

167:                                              ; preds = %165, %110, %87, %79
  %168 = icmp eq i32 %62, 0
  br i1 %168, label %201, label %169

169:                                              ; preds = %167
  %170 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %171 = load i32, ptr %170, align 8, !tbaa !38
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %201, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  br label %175

175:                                              ; preds = %196, %173
  %176 = phi i32 [ %171, %173 ], [ %197, %196 ]
  %177 = phi i64 [ 0, %173 ], [ %198, %196 ]
  %178 = load ptr, ptr %174, align 8, !tbaa !45
  %179 = getelementptr inbounds ptr, ptr %178, i64 %177
  %180 = load ptr, ptr %179, align 8, !tbaa !14
  %181 = getelementptr inbounds %struct.Production, ptr %180, i64 0, i32 4
  %182 = load i8, ptr %181, align 4
  %183 = and i8 %182, 28
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %196

185:                                              ; preds = %175
  %186 = getelementptr inbounds %struct.Production, ptr %180, i64 0, i32 9
  %187 = load ptr, ptr %186, align 8, !tbaa !46
  %188 = icmp eq ptr %187, null
  br i1 %188, label %196, label %189

189:                                              ; preds = %185
  %190 = load ptr, ptr %180, align 8, !tbaa !48
  %191 = getelementptr inbounds %struct.Production, ptr %180, i64 0, i32 8
  %192 = load ptr, ptr %191, align 8, !tbaa !49
  %193 = load i32, ptr %192, align 8, !tbaa !50
  %194 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.26.62, ptr noundef %190, i32 noundef %193) #44
  %195 = load i32, ptr %170, align 8, !tbaa !38
  br label %196

196:                                              ; preds = %189, %185, %175
  %197 = phi i32 [ %176, %175 ], [ %176, %185 ], [ %195, %189 ]
  %198 = add nuw nsw i64 %177, 1
  %199 = zext i32 %197 to i64
  %200 = icmp ult i64 %198, %199
  br i1 %200, label %175, label %201, !llvm.loop !54

201:                                              ; preds = %196, %169, %167
  %202 = call i64 @fwrite(ptr nonnull @.str.27.63, i64 7, i64 1, ptr %76)
  br label %203

203:                                              ; preds = %201, %68, %66
  %204 = phi i1 [ false, %201 ], [ true, %68 ], [ true, %66 ]
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %15) #45
  %205 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 6
  %206 = load i32, ptr %205, align 8, !tbaa !55
  %207 = icmp sgt i32 %206, 0
  br i1 %207, label %208, label %307

208:                                              ; preds = %203
  %209 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 20
  %210 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 5
  br label %211

211:                                              ; preds = %301, %208
  %212 = phi i64 [ 0, %208 ], [ %303, %301 ]
  %213 = load i32, ptr %209, align 4, !tbaa !27
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %225, label %215

215:                                              ; preds = %211
  %216 = load ptr, ptr %210, align 8, !tbaa !56
  %217 = getelementptr inbounds %struct.Code, ptr %216, i64 %212, i32 1
  %218 = load i32, ptr %217, align 8, !tbaa !57
  %219 = load ptr, ptr %0, align 8, !tbaa !58
  %220 = call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %219, i32 noundef 47) #48
  %221 = icmp eq ptr %220, null
  %222 = getelementptr inbounds i8, ptr %220, i64 1
  %223 = select i1 %221, ptr %219, ptr %222
  %224 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.28.64, i32 noundef %218, ptr noundef %223) #44
  br label %225

225:                                              ; preds = %215, %211
  %226 = load ptr, ptr %210, align 8, !tbaa !56
  %227 = getelementptr inbounds %struct.Code, ptr %226, i64 %212
  %228 = load ptr, ptr %227, align 8, !tbaa !59
  %229 = trunc i64 %212 to i32
  br label %230

230:                                              ; preds = %299, %225
  %231 = phi ptr [ %228, %225 ], [ %300, %299 ]
  %232 = load i8, ptr %231, align 1, !tbaa !60
  switch i8 %232, label %295 [
    i8 0, label %301
    i8 36, label %233
  ]

233:                                              ; preds = %230
  %234 = getelementptr inbounds i8, ptr %231, i64 1
  %235 = load i8, ptr %234, align 1, !tbaa !60
  %236 = icmp eq i8 %235, 123
  br i1 %236, label %237, label %290

237:                                              ; preds = %233
  %238 = getelementptr inbounds i8, ptr %231, i64 2
  br label %239

239:                                              ; preds = %250, %237
  %240 = phi ptr [ %238, %237 ], [ %251, %250 ]
  %241 = load i8, ptr %240, align 1, !tbaa !60
  switch i8 %241, label %242 [
    i8 0, label %252
    i8 125, label %252
  ]

242:                                              ; preds = %239
  %243 = tail call ptr @__ctype_b_loc() #49
  %244 = load ptr, ptr %243, align 8, !tbaa !14
  %245 = sext i8 %241 to i64
  %246 = getelementptr inbounds i16, ptr %244, i64 %245
  %247 = load i16, ptr %246, align 2, !tbaa !61
  %248 = and i16 %247, 8192
  %249 = icmp eq i16 %248, 0
  br i1 %249, label %250, label %252

250:                                              ; preds = %242
  %251 = getelementptr inbounds i8, ptr %240, i64 1
  br label %239, !llvm.loop !63

252:                                              ; preds = %242, %239, %239
  %.lcssa7 = phi ptr [ %240, %242 ], [ %240, %239 ], [ %240, %239 ]
  %.lcssa6 = phi i8 [ %241, %242 ], [ %241, %239 ], [ %241, %239 ]
  %253 = tail call ptr @__ctype_b_loc() #49
  %254 = load ptr, ptr %253, align 8, !tbaa !14
  %255 = sext i8 %.lcssa6 to i64
  %256 = getelementptr inbounds i16, ptr %254, i64 %255
  %257 = load i16, ptr %256, align 2, !tbaa !61
  %258 = lshr i16 %257, 13
  %259 = and i16 %258, 1
  %260 = zext i16 %259 to i64
  %261 = getelementptr inbounds i8, ptr %.lcssa7, i64 %260
  br label %262

262:                                              ; preds = %265, %252
  %263 = phi ptr [ %261, %252 ], [ %266, %265 ]
  %264 = load i8, ptr %263, align 1, !tbaa !60
  switch i8 %264, label %265 [
    i8 0, label %267
    i8 125, label %267
  ]

265:                                              ; preds = %262
  %266 = getelementptr inbounds i8, ptr %263, i64 1
  br label %262, !llvm.loop !64

267:                                              ; preds = %262, %262
  %.lcssa8 = phi ptr [ %263, %262 ], [ %263, %262 ]
  %268 = ptrtoint ptr %.lcssa7 to i64
  %269 = ptrtoint ptr %238 to i64
  %270 = sub i64 %268, %269
  switch i64 %270, label %283 [
    i64 5, label %271
    i64 6, label %277
  ]

271:                                              ; preds = %267
  %272 = call i32 @strncasecmp(ptr noundef nonnull %238, ptr noundef nonnull @.str.29.65, i64 noundef 5) #48
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %283

274:                                              ; preds = %271
  %275 = call fastcc i32 @find_symbol(ptr noundef %0, ptr noundef nonnull %.lcssa7, ptr noundef nonnull %.lcssa8, i32 noundef 1) #44
  %276 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.30.66, i32 noundef %275) #44
  br label %288

277:                                              ; preds = %267
  %278 = call i32 @strncasecmp(ptr noundef nonnull %238, ptr noundef nonnull @.str.31.67, i64 noundef 6) #48
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %283

280:                                              ; preds = %277
  %281 = call fastcc i32 @find_symbol(ptr noundef %0, ptr noundef nonnull %.lcssa7, ptr noundef nonnull %.lcssa8, i32 noundef 3) #44
  %282 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.30.66, i32 noundef %281) #44
  br label %288

283:                                              ; preds = %277, %271, %267
  %284 = load ptr, ptr %210, align 8, !tbaa !56
  %285 = getelementptr inbounds %struct.Code, ptr %284, i64 %212, i32 1
  %286 = load i32, ptr %285, align 8, !tbaa !57
  %287 = add nsw i32 %286, %229
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.32.68, i32 noundef %287) #43
  br label %288

288:                                              ; preds = %283, %280, %274
  %289 = getelementptr inbounds i8, ptr %.lcssa8, i64 1
  br label %299

290:                                              ; preds = %233
  %291 = load ptr, ptr %210, align 8, !tbaa !56
  %292 = getelementptr inbounds %struct.Code, ptr %291, i64 %212, i32 1
  %293 = load i32, ptr %292, align 8, !tbaa !57
  %294 = add nsw i32 %293, %229
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.32.68, i32 noundef %294) #43
  br label %299

295:                                              ; preds = %230
  %296 = sext i8 %232 to i32
  %297 = call i32 @fputc(i32 noundef %296, ptr noundef %22) #44
  %298 = getelementptr inbounds i8, ptr %231, i64 1
  br label %299

299:                                              ; preds = %295, %290, %288
  %300 = phi ptr [ %289, %288 ], [ %234, %290 ], [ %298, %295 ]
  br label %230, !llvm.loop !65

301:                                              ; preds = %230
  %302 = call i32 @fputc(i32 10, ptr %22)
  %303 = add nuw nsw i64 %212, 1
  %304 = load i32, ptr %205, align 8, !tbaa !55
  %305 = sext i32 %304 to i64
  %306 = icmp slt i64 %303, %305
  br i1 %306, label %211, label %307, !llvm.loop !66

307:                                              ; preds = %301, %203
  %308 = call i64 @fwrite(ptr nonnull @.str.2.69, i64 20, i64 1, ptr %22)
  br i1 %204, label %311, label %309

309:                                              ; preds = %307
  %310 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.3.70, ptr noundef %1) #44
  br label %311

311:                                              ; preds = %309, %307
  %312 = call i32 @fputc(i32 10, ptr %22)
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %12) #45
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %13) #45
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %14) #45
  %313 = call ptr @lookup_production(ptr noundef nonnull %0, ptr noundef nonnull @.str.34.71, i32 noundef 1) #43
  %314 = icmp eq ptr %313, null
  br i1 %314, label %348, label %315

315:                                              ; preds = %311
  %316 = getelementptr inbounds %struct.Production, ptr %313, i64 0, i32 2, i32 2
  %317 = load ptr, ptr %316, align 8, !tbaa !67
  %318 = load ptr, ptr %317, align 8, !tbaa !14
  %319 = getelementptr inbounds %struct.Rule, ptr %318, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !68
  %321 = getelementptr inbounds %struct.Production, ptr %320, i64 0, i32 3
  %322 = load i32, ptr %321, align 8, !tbaa !70
  %323 = load i32, ptr %318, align 8, !tbaa !71
  %324 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.35.72, i32 noundef %322, i32 noundef %323, ptr noundef %2, ptr noundef nonnull @.str.52) #44
  %325 = load ptr, ptr %319, align 8, !tbaa !68
  %326 = getelementptr inbounds %struct.Production, ptr %325, i64 0, i32 3
  %327 = load i32, ptr %326, align 8, !tbaa !70
  %328 = load i32, ptr %318, align 8, !tbaa !71
  %329 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.36.73, i32 noundef %327, i32 noundef %328, ptr noundef %2, ptr noundef nonnull @.str.52) #44
  %330 = load ptr, ptr %319, align 8, !tbaa !68
  %331 = getelementptr inbounds %struct.Production, ptr %330, i64 0, i32 3
  %332 = load i32, ptr %331, align 8, !tbaa !70
  %333 = load i32, ptr %318, align 8, !tbaa !71
  %334 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.37.74, i32 noundef %332, i32 noundef %333, ptr noundef %2) #44
  %335 = getelementptr inbounds %struct.Rule, ptr %318, i64 0, i32 10
  %336 = load i32, ptr %335, align 8, !tbaa !72
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %348, label %338

338:                                              ; preds = %338, %315
  %339 = phi i32 [ %345, %338 ], [ 0, %315 ]
  %340 = load ptr, ptr %319, align 8, !tbaa !68
  %341 = getelementptr inbounds %struct.Production, ptr %340, i64 0, i32 3
  %342 = load i32, ptr %341, align 8, !tbaa !70
  %343 = load i32, ptr %318, align 8, !tbaa !71
  %344 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.38.75, i32 noundef %339, i32 noundef %342, i32 noundef %343, ptr noundef %2, ptr noundef nonnull @.str.52) #44
  %345 = add nuw nsw i32 %339, 1
  %346 = load i32, ptr %335, align 8, !tbaa !72
  %347 = icmp ult i32 %345, %346
  br i1 %347, label %338, label %348, !llvm.loop !73

348:                                              ; preds = %338, %315, %311
  %349 = phi ptr [ null, %311 ], [ %318, %315 ], [ %318, %338 ]
  %350 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %351 = load i32, ptr %350, align 8, !tbaa !38
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %716, label %353

353:                                              ; preds = %348
  %354 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %355 = icmp eq ptr %349, null
  %356 = getelementptr inbounds %struct.Rule, ptr %349, i64 0, i32 8
  %357 = getelementptr inbounds %struct.Rule, ptr %349, i64 0, i32 1
  %358 = getelementptr inbounds %struct.Rule, ptr %349, i64 0, i32 9
  %359 = getelementptr inbounds %struct.Rule, ptr %349, i64 0, i32 10
  %360 = getelementptr inbounds %struct.Rule, ptr %349, i64 0, i32 10, i32 2
  br label %361

361:                                              ; preds = %711, %353
  %362 = phi i32 [ %351, %353 ], [ %712, %711 ]
  %363 = phi i64 [ 0, %353 ], [ %713, %711 ]
  %364 = load ptr, ptr %354, align 8, !tbaa !45
  %365 = getelementptr inbounds ptr, ptr %364, i64 %363
  %366 = load ptr, ptr %365, align 8, !tbaa !14
  %367 = getelementptr inbounds %struct.Production, ptr %366, i64 0, i32 2
  %368 = load i32, ptr %367, align 8, !tbaa !74
  %369 = add i32 %368, -1
  %370 = icmp sgt i32 %369, -1
  br i1 %370, label %371, label %377

371:                                              ; preds = %361
  %372 = getelementptr inbounds %struct.Production, ptr %366, i64 0, i32 2, i32 2
  %373 = load ptr, ptr %372, align 8, !tbaa !67
  %374 = icmp eq i32 %369, 0
  br i1 %374, label %377, label %375

375:                                              ; preds = %371
  %376 = zext i32 %369 to i64
  br label %381

377:                                              ; preds = %472, %371, %361
  %378 = icmp eq i32 %368, 0
  br i1 %378, label %711, label %379

379:                                              ; preds = %377
  %380 = getelementptr inbounds %struct.Production, ptr %366, i64 0, i32 2, i32 2
  br label %475

381:                                              ; preds = %472, %375
  %382 = phi i64 [ %376, %375 ], [ %473, %472 ]
  %383 = getelementptr inbounds ptr, ptr %373, i64 %382
  %384 = load ptr, ptr %383, align 8, !tbaa !14
  %385 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 6
  %386 = load i32, ptr %385, align 8, !tbaa !75
  %387 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 8
  %388 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 9
  %389 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 2
  %390 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 3
  %391 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 4
  %392 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 5
  %393 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 11
  %394 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 10
  %395 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 10, i32 2
  br label %396

396:                                              ; preds = %469, %381
  %397 = phi i64 [ 0, %381 ], [ %470, %469 ]
  %398 = getelementptr inbounds ptr, ptr %373, i64 %397
  %399 = load ptr, ptr %398, align 8, !tbaa !14
  %400 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 6
  %401 = load i32, ptr %400, align 8, !tbaa !75
  %402 = icmp eq i32 %386, %401
  br i1 %402, label %403, label %469

403:                                              ; preds = %396
  %404 = load ptr, ptr %387, align 8, !tbaa !76
  %405 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 8
  %406 = load ptr, ptr %405, align 8, !tbaa !76
  %407 = icmp eq ptr %404, %406
  br i1 %407, label %408, label %469

408:                                              ; preds = %403
  %409 = load ptr, ptr %388, align 8, !tbaa !77
  %410 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 9
  %411 = load ptr, ptr %410, align 8, !tbaa !77
  %412 = icmp eq ptr %409, %411
  br i1 %412, label %413, label %469

413:                                              ; preds = %408
  %414 = load i32, ptr %389, align 8, !tbaa !78
  %415 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 2
  %416 = load i32, ptr %415, align 8, !tbaa !78
  %417 = icmp eq i32 %414, %416
  br i1 %417, label %418, label %469

418:                                              ; preds = %413
  %419 = load i32, ptr %390, align 4, !tbaa !79
  %420 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 3
  %421 = load i32, ptr %420, align 4, !tbaa !79
  %422 = icmp eq i32 %419, %421
  br i1 %422, label %423, label %469

423:                                              ; preds = %418
  %424 = load i32, ptr %391, align 8, !tbaa !80
  %425 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 4
  %426 = load i32, ptr %425, align 8, !tbaa !80
  %427 = icmp eq i32 %424, %426
  br i1 %427, label %428, label %469

428:                                              ; preds = %423
  %429 = load i32, ptr %392, align 4, !tbaa !81
  %430 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 5
  %431 = load i32, ptr %430, align 4, !tbaa !81
  %432 = icmp eq i32 %429, %431
  br i1 %432, label %433, label %469

433:                                              ; preds = %428
  %434 = load i32, ptr %393, align 8, !tbaa !82
  %435 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 11
  %436 = load i32, ptr %435, align 8, !tbaa !82
  %437 = icmp eq i32 %434, %436
  br i1 %437, label %438, label %469

438:                                              ; preds = %433
  %439 = load i32, ptr %394, align 8, !tbaa !72
  %440 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 10
  %441 = load i32, ptr %440, align 8, !tbaa !72
  %442 = icmp eq i32 %439, %441
  br i1 %442, label %443, label %469

443:                                              ; preds = %438
  %444 = icmp eq i32 %439, 0
  br i1 %444, label %467, label %445

445:                                              ; preds = %443
  %446 = load ptr, ptr %395, align 8, !tbaa !83
  %447 = getelementptr inbounds %struct.Rule, ptr %399, i64 0, i32 10, i32 2
  %448 = zext i32 %439 to i64
  %449 = load ptr, ptr %447, align 8, !tbaa !83
  br label %450

450:                                              ; preds = %464, %445
  %451 = phi i64 [ 0, %445 ], [ %465, %464 ]
  %452 = getelementptr inbounds ptr, ptr %446, i64 %451
  %453 = load ptr, ptr %452, align 8, !tbaa !14
  %454 = icmp eq ptr %453, null
  %455 = getelementptr inbounds ptr, ptr %449, i64 %451
  %456 = load ptr, ptr %455, align 8, !tbaa !14
  %457 = icmp eq ptr %456, null
  br i1 %454, label %458, label %459

458:                                              ; preds = %450
  br i1 %457, label %464, label %469

459:                                              ; preds = %450
  br i1 %457, label %469, label %460

460:                                              ; preds = %459
  %461 = load ptr, ptr %453, align 8, !tbaa !59
  %462 = load ptr, ptr %456, align 8, !tbaa !59
  %463 = icmp eq ptr %461, %462
  br i1 %463, label %464, label %469

464:                                              ; preds = %460, %458
  %465 = add nuw nsw i64 %451, 1
  %466 = icmp eq i64 %465, %448
  br i1 %466, label %467, label %450, !llvm.loop !84

467:                                              ; preds = %464, %443
  %.lcssa4 = phi ptr [ %399, %464 ], [ %399, %443 ]
  %468 = getelementptr inbounds %struct.Rule, ptr %384, i64 0, i32 12
  store ptr %.lcssa4, ptr %468, align 8, !tbaa !85
  br label %472

469:                                              ; preds = %460, %459, %458, %438, %433, %428, %423, %418, %413, %408, %403, %396
  %470 = add nuw nsw i64 %397, 1
  %471 = icmp eq i64 %470, %382
  br i1 %471, label %472, label %396, !llvm.loop !86

472:                                              ; preds = %469, %467
  %473 = add nsw i64 %382, -1
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %377, label %381

475:                                              ; preds = %704, %379
  %476 = phi i32 [ %368, %379 ], [ %705, %704 ]
  %477 = phi i64 [ 0, %379 ], [ %706, %704 ]
  %478 = load ptr, ptr %380, align 8, !tbaa !67
  %479 = getelementptr inbounds ptr, ptr %478, i64 %477
  %480 = load ptr, ptr %479, align 8, !tbaa !14
  %481 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 12
  %482 = load ptr, ptr %481, align 8, !tbaa !85
  %483 = icmp eq ptr %482, null
  br i1 %483, label %484, label %704

484:                                              ; preds = %475
  %485 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 8
  %486 = load ptr, ptr %485, align 8, !tbaa !76
  %487 = icmp eq ptr %486, null
  br i1 %487, label %499, label %488

488:                                              ; preds = %484
  %489 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  %490 = load ptr, ptr %489, align 8, !tbaa !68
  %491 = getelementptr inbounds %struct.Production, ptr %490, i64 0, i32 3
  %492 = load i32, ptr %491, align 8, !tbaa !70
  %493 = load i32, ptr %480, align 8, !tbaa !71
  %494 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.39.76, i32 noundef %492, i32 noundef %493, ptr noundef %2, ptr noundef nonnull @.str.52) #44
  %495 = load ptr, ptr %485, align 8, !tbaa !76
  %496 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 8, i32 1
  %497 = load i32, ptr %496, align 8, !tbaa !87
  %498 = load ptr, ptr %0, align 8, !tbaa !58
  call fastcc void @write_code_as_C(ptr noundef %22, ptr noundef nonnull %0, ptr noundef nonnull %480, ptr noundef %495, i32 noundef %497, ptr noundef %498) #44
  br label %499

499:                                              ; preds = %488, %484
  %500 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 9
  %501 = load ptr, ptr %500, align 8, !tbaa !77
  %502 = icmp eq ptr %501, null
  br i1 %502, label %514, label %503

503:                                              ; preds = %499
  %504 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  %505 = load ptr, ptr %504, align 8, !tbaa !68
  %506 = getelementptr inbounds %struct.Production, ptr %505, i64 0, i32 3
  %507 = load i32, ptr %506, align 8, !tbaa !70
  %508 = load i32, ptr %480, align 8, !tbaa !71
  %509 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.40.77, i32 noundef %507, i32 noundef %508, ptr noundef %2, ptr noundef nonnull @.str.52) #44
  %510 = load ptr, ptr %500, align 8, !tbaa !77
  %511 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 9, i32 1
  %512 = load i32, ptr %511, align 8, !tbaa !88
  %513 = load ptr, ptr %0, align 8, !tbaa !58
  call fastcc void @write_code_as_C(ptr noundef %22, ptr noundef nonnull %0, ptr noundef nonnull %480, ptr noundef %510, i32 noundef %512, ptr noundef %513) #44
  br label %514

514:                                              ; preds = %503, %499
  %515 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 10
  %516 = load i32, ptr %515, align 8, !tbaa !72
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %548, label %518

518:                                              ; preds = %514
  %519 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 10, i32 2
  %520 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  br label %521

521:                                              ; preds = %543, %518
  %522 = phi i32 [ %516, %518 ], [ %544, %543 ]
  %523 = phi i64 [ 0, %518 ], [ %545, %543 ]
  %524 = load ptr, ptr %519, align 8, !tbaa !83
  %525 = getelementptr inbounds ptr, ptr %524, i64 %523
  %526 = load ptr, ptr %525, align 8, !tbaa !14
  %527 = icmp eq ptr %526, null
  br i1 %527, label %543, label %528

528:                                              ; preds = %521
  %529 = load ptr, ptr %520, align 8, !tbaa !68
  %530 = getelementptr inbounds %struct.Production, ptr %529, i64 0, i32 3
  %531 = load i32, ptr %530, align 8, !tbaa !70
  %532 = load i32, ptr %480, align 8, !tbaa !71
  %533 = trunc i64 %523 to i32
  %534 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.41.78, i32 noundef %533, i32 noundef %531, i32 noundef %532, ptr noundef %2, ptr noundef nonnull @.str.52) #44
  %535 = load ptr, ptr %519, align 8, !tbaa !83
  %536 = getelementptr inbounds ptr, ptr %535, i64 %523
  %537 = load ptr, ptr %536, align 8, !tbaa !14
  %538 = load ptr, ptr %537, align 8, !tbaa !59
  %539 = getelementptr inbounds %struct.Code, ptr %537, i64 0, i32 1
  %540 = load i32, ptr %539, align 8, !tbaa !57
  %541 = load ptr, ptr %0, align 8, !tbaa !58
  call fastcc void @write_code_as_C(ptr noundef %22, ptr noundef nonnull %0, ptr noundef nonnull %480, ptr noundef %538, i32 noundef %540, ptr noundef %541) #44
  %542 = load i32, ptr %515, align 8, !tbaa !72
  br label %543

543:                                              ; preds = %528, %521
  %544 = phi i32 [ %522, %521 ], [ %542, %528 ]
  %545 = add nuw nsw i64 %523, 1
  %546 = zext i32 %544 to i64
  %547 = icmp ult i64 %545, %546
  br i1 %547, label %521, label %548, !llvm.loop !89

548:                                              ; preds = %543, %514
  %549 = load ptr, ptr %485, align 8, !tbaa !76
  %550 = icmp eq ptr %549, null
  br i1 %550, label %558, label %551

551:                                              ; preds = %548
  %552 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  %553 = load ptr, ptr %552, align 8, !tbaa !68
  %554 = getelementptr inbounds %struct.Production, ptr %553, i64 0, i32 3
  %555 = load i32, ptr %554, align 8, !tbaa !70
  %556 = load i32, ptr %480, align 8, !tbaa !71
  %557 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %13, ptr noundef nonnull dereferenceable(1) @.str.42.79, i32 noundef %555, i32 noundef %556, ptr noundef %2) #43
  br label %563

558:                                              ; preds = %548
  br i1 %355, label %562, label %559

559:                                              ; preds = %558
  %560 = load ptr, ptr %356, align 8, !tbaa !76
  %561 = icmp eq ptr %560, null
  br i1 %561, label %562, label %566

562:                                              ; preds = %559, %558
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(5) %13, ptr noundef nonnull align 1 dereferenceable(5) @.str.43.80, i64 5, i1 false) #43
  br label %563

563:                                              ; preds = %562, %551
  %564 = load ptr, ptr %500, align 8, !tbaa !77
  %565 = icmp eq ptr %564, null
  br i1 %565, label %581, label %574

566:                                              ; preds = %559
  %567 = load ptr, ptr %357, align 8, !tbaa !68
  %568 = getelementptr inbounds %struct.Production, ptr %567, i64 0, i32 3
  %569 = load i32, ptr %568, align 8, !tbaa !70
  %570 = load i32, ptr %349, align 8, !tbaa !71
  %571 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %13, ptr noundef nonnull dereferenceable(1) @.str.42.79, i32 noundef %569, i32 noundef %570, ptr noundef %2) #43
  %572 = load ptr, ptr %500, align 8, !tbaa !77
  %573 = icmp eq ptr %572, null
  br i1 %573, label %582, label %574

574:                                              ; preds = %566, %563
  %575 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  %576 = load ptr, ptr %575, align 8, !tbaa !68
  %577 = getelementptr inbounds %struct.Production, ptr %576, i64 0, i32 3
  %578 = load i32, ptr %577, align 8, !tbaa !70
  %579 = load i32, ptr %480, align 8, !tbaa !71
  %580 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %12, ptr noundef nonnull dereferenceable(1) @.str.44.81, i32 noundef %578, i32 noundef %579, ptr noundef %2) #43
  br label %586

581:                                              ; preds = %563
  br i1 %355, label %585, label %582

582:                                              ; preds = %581, %566
  %583 = load ptr, ptr %358, align 8, !tbaa !77
  %584 = icmp eq ptr %583, null
  br i1 %584, label %585, label %589

585:                                              ; preds = %582, %581
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(5) %12, ptr noundef nonnull align 1 dereferenceable(5) @.str.43.80, i64 5, i1 false) #43
  br label %586

586:                                              ; preds = %585, %574
  %587 = load i32, ptr %515, align 8, !tbaa !72
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %597, label %601

589:                                              ; preds = %582
  %590 = load ptr, ptr %357, align 8, !tbaa !68
  %591 = getelementptr inbounds %struct.Production, ptr %590, i64 0, i32 3
  %592 = load i32, ptr %591, align 8, !tbaa !70
  %593 = load i32, ptr %349, align 8, !tbaa !71
  %594 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %12, ptr noundef nonnull dereferenceable(1) @.str.44.81, i32 noundef %592, i32 noundef %593, ptr noundef %2) #43
  %595 = load i32, ptr %515, align 8, !tbaa !72
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %598, label %602

597:                                              ; preds = %586
  br i1 %355, label %674, label %598

598:                                              ; preds = %597, %589
  %599 = load i32, ptr %359, align 8, !tbaa !72
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %674, label %606

601:                                              ; preds = %586
  br i1 %355, label %612, label %602

602:                                              ; preds = %601, %589
  %603 = phi i32 [ %587, %601 ], [ %595, %589 ]
  %604 = load i32, ptr %359, align 8, !tbaa !72
  %605 = call i32 @llvm.umax.i32(i32 %604, i32 %603)
  br label %612

606:                                              ; preds = %598
  %607 = load ptr, ptr %357, align 8, !tbaa !68
  %608 = getelementptr inbounds %struct.Production, ptr %607, i64 0, i32 3
  %609 = load i32, ptr %608, align 8, !tbaa !70
  %610 = load i32, ptr %349, align 8, !tbaa !71
  %611 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %14, ptr noundef nonnull dereferenceable(1) @.str.45.82, i32 noundef %609, i32 noundef %610, ptr noundef %2) #43
  br label %675

612:                                              ; preds = %602, %601
  %613 = phi i32 [ %605, %602 ], [ %587, %601 ]
  %614 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  %615 = load ptr, ptr %614, align 8, !tbaa !68
  %616 = getelementptr inbounds %struct.Production, ptr %615, i64 0, i32 3
  %617 = load i32, ptr %616, align 8, !tbaa !70
  %618 = load i32, ptr %480, align 8, !tbaa !71
  %619 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %14, ptr noundef nonnull dereferenceable(1) @.str.45.82, i32 noundef %617, i32 noundef %618, ptr noundef %2) #43
  %620 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.46.83, ptr noundef nonnull %14) #44
  %621 = icmp sgt i32 %613, 0
  br i1 %621, label %622, label %672

622:                                              ; preds = %612
  %623 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 10, i32 2
  %624 = add nsw i32 %613, -1
  %625 = zext i32 %624 to i64
  %626 = zext i32 %613 to i64
  br label %627

627:                                              ; preds = %669, %622
  %628 = phi i64 [ 0, %622 ], [ %670, %669 ]
  %629 = load i32, ptr %515, align 8, !tbaa !72
  %630 = zext i32 %629 to i64
  %631 = icmp ult i64 %628, %630
  br i1 %631, label %632, label %646

632:                                              ; preds = %627
  %633 = load ptr, ptr %623, align 8, !tbaa !83
  %634 = getelementptr inbounds ptr, ptr %633, i64 %628
  %635 = load ptr, ptr %634, align 8, !tbaa !14
  %636 = icmp eq ptr %635, null
  br i1 %636, label %646, label %637

637:                                              ; preds = %632
  %638 = load ptr, ptr %614, align 8, !tbaa !68
  %639 = getelementptr inbounds %struct.Production, ptr %638, i64 0, i32 3
  %640 = load i32, ptr %639, align 8, !tbaa !70
  %641 = load i32, ptr %480, align 8, !tbaa !71
  %642 = icmp ult i64 %628, %625
  %643 = select i1 %642, ptr @.str.24.59, ptr @.str.23.58
  %644 = trunc i64 %628 to i32
  %645 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.47.84, i32 noundef %644, i32 noundef %640, i32 noundef %641, ptr noundef %2, ptr noundef nonnull %643) #44
  br label %669

646:                                              ; preds = %632, %627
  br i1 %355, label %665, label %647

647:                                              ; preds = %646
  %648 = load i32, ptr %359, align 8, !tbaa !72
  %649 = zext i32 %648 to i64
  %650 = icmp ult i64 %628, %649
  br i1 %650, label %651, label %665

651:                                              ; preds = %647
  %652 = load ptr, ptr %360, align 8, !tbaa !83
  %653 = getelementptr inbounds ptr, ptr %652, i64 %628
  %654 = load ptr, ptr %653, align 8, !tbaa !14
  %655 = icmp eq ptr %654, null
  br i1 %655, label %665, label %656

656:                                              ; preds = %651
  %657 = load ptr, ptr %357, align 8, !tbaa !68
  %658 = getelementptr inbounds %struct.Production, ptr %657, i64 0, i32 3
  %659 = load i32, ptr %658, align 8, !tbaa !70
  %660 = load i32, ptr %349, align 8, !tbaa !71
  %661 = icmp ult i64 %628, %625
  %662 = select i1 %661, ptr @.str.24.59, ptr @.str.23.58
  %663 = trunc i64 %628 to i32
  %664 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.47.84, i32 noundef %663, i32 noundef %659, i32 noundef %660, ptr noundef %2, ptr noundef nonnull %662) #44
  br label %669

665:                                              ; preds = %651, %647, %646
  %666 = icmp ult i64 %628, %625
  %667 = select i1 %666, ptr @.str.24.59, ptr @.str.23.58
  %668 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.48.85, ptr noundef nonnull %667) #44
  br label %669

669:                                              ; preds = %665, %656, %637
  %670 = add nuw nsw i64 %628, 1
  %671 = icmp eq i64 %670, %626
  br i1 %671, label %672, label %627, !llvm.loop !90

672:                                              ; preds = %669, %612
  %673 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %675

674:                                              ; preds = %598, %597
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(5) %14, ptr noundef nonnull align 1 dereferenceable(5) @.str.43.80, i64 5, i1 false) #43
  br label %675

675:                                              ; preds = %674, %672, %606
  %676 = phi i32 [ %613, %672 ], [ %599, %606 ], [ 0, %674 ]
  %677 = load i32, ptr %480, align 8, !tbaa !71
  %678 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.50.87, i32 noundef %677, ptr noundef %2) #44
  %679 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 6
  %680 = load i32, ptr %679, align 8, !tbaa !75
  %681 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 1
  %682 = load ptr, ptr %681, align 8, !tbaa !68
  %683 = getelementptr inbounds %struct.Production, ptr %682, i64 0, i32 3
  %684 = load i32, ptr %683, align 8, !tbaa !70
  %685 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 3
  %686 = load i32, ptr %685, align 4, !tbaa !79
  %687 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 5
  %688 = load i32, ptr %687, align 4, !tbaa !81
  %689 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 2
  %690 = load i32, ptr %689, align 8, !tbaa !78
  %691 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 4
  %692 = load i32, ptr %691, align 8, !tbaa !80
  %693 = getelementptr inbounds %struct.Production, ptr %682, i64 0, i32 4
  %694 = load i8, ptr %693, align 4
  %695 = and i8 %694, 28
  %696 = icmp eq i8 %695, 0
  br i1 %696, label %697, label %700

697:                                              ; preds = %675
  %698 = getelementptr inbounds %struct.Rule, ptr %480, i64 0, i32 11
  %699 = load i32, ptr %698, align 8, !tbaa !82
  br label %700

700:                                              ; preds = %697, %675
  %701 = phi i32 [ %699, %697 ], [ -1, %675 ]
  %702 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.51.88, i32 noundef %680, i32 noundef %684, ptr noundef nonnull %13, ptr noundef nonnull %12, i32 noundef %686, i32 noundef %688, i32 noundef %690, i32 noundef %692, i32 noundef %701, i32 noundef %676, ptr noundef nonnull %14) #44
  %703 = load i32, ptr %367, align 8, !tbaa !74
  br label %704

704:                                              ; preds = %700, %475
  %705 = phi i32 [ %476, %475 ], [ %703, %700 ]
  %706 = add nuw nsw i64 %477, 1
  %707 = zext i32 %705 to i64
  %708 = icmp ult i64 %706, %707
  br i1 %708, label %475, label %709, !llvm.loop !91

709:                                              ; preds = %704
  %710 = load i32, ptr %350, align 8, !tbaa !38
  br label %711

711:                                              ; preds = %709, %377
  %712 = phi i32 [ %710, %709 ], [ %362, %377 ]
  %713 = add nuw nsw i64 %363, 1
  %714 = zext i32 %712 to i64
  %715 = icmp ult i64 %713, %714
  br i1 %715, label %361, label %716, !llvm.loop !92

716:                                              ; preds = %711, %348
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %14) #45
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %13) #45
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %12) #45
  call void @llvm.lifetime.start.p0(i64 160, ptr nonnull %5) #45
  call void @llvm.lifetime.start.p0(i64 160, ptr nonnull %6) #45
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %7) #45
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %8) #45
  %717 = load i32, ptr %26, align 8, !tbaa !32
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %767, label %719

719:                                              ; preds = %716
  %720 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  br label %721

721:                                              ; preds = %743, %719
  %722 = phi i64 [ 0, %719 ], [ %763, %743 ]
  %723 = load ptr, ptr %720, align 8, !tbaa !33
  %724 = getelementptr inbounds ptr, ptr %723, i64 %722
  %725 = load ptr, ptr %724, align 8, !tbaa !14
  %726 = getelementptr inbounds %struct.Term, ptr %725, i64 0, i32 8
  %727 = load ptr, ptr %726, align 8, !tbaa !93
  %728 = icmp eq ptr %727, null
  br i1 %728, label %742, label %729

729:                                              ; preds = %721
  %730 = getelementptr inbounds %struct.Production, ptr %727, i64 0, i32 2, i32 2
  %731 = load ptr, ptr %730, align 8, !tbaa !67
  %732 = load ptr, ptr %731, align 8, !tbaa !14
  %733 = getelementptr inbounds %struct.Rule, ptr %732, i64 0, i32 8
  %734 = load ptr, ptr %733, align 8, !tbaa !76
  %735 = icmp eq ptr %734, null
  br i1 %735, label %742, label %736

736:                                              ; preds = %729
  %737 = getelementptr inbounds %struct.Production, ptr %727, i64 0, i32 3
  %738 = load i32, ptr %737, align 8, !tbaa !70
  %739 = load i32, ptr %732, align 8, !tbaa !71
  %740 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %8, ptr noundef nonnull dereferenceable(1) @.str.42.79, i32 noundef %738, i32 noundef %739, ptr noundef %2) #43
  %741 = load ptr, ptr %720, align 8, !tbaa !33
  br label %743

742:                                              ; preds = %729, %721
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(5) %8, ptr noundef nonnull align 1 dereferenceable(5) @.str.43.80, i64 5, i1 false) #43
  br label %743

743:                                              ; preds = %742, %736
  %744 = phi ptr [ %723, %742 ], [ %741, %736 ]
  %745 = getelementptr inbounds ptr, ptr %744, i64 %722
  %746 = load ptr, ptr %745, align 8, !tbaa !14
  %747 = getelementptr inbounds %struct.Term, ptr %746, i64 0, i32 1
  %748 = load i32, ptr %747, align 4, !tbaa !41
  %749 = load i32, ptr %350, align 8, !tbaa !38
  %750 = add i32 %749, %748
  %751 = getelementptr inbounds %struct.Term, ptr %746, i64 0, i32 7
  %752 = load i8, ptr %751, align 4
  %753 = and i8 %752, 7
  %754 = zext i8 %753 to i32
  %755 = getelementptr inbounds %struct.Term, ptr %746, i64 0, i32 3
  %756 = load i32, ptr %755, align 4, !tbaa !94
  %757 = getelementptr inbounds %struct.Term, ptr %746, i64 0, i32 4
  %758 = load i32, ptr %757, align 8, !tbaa !95
  %759 = getelementptr inbounds %struct.Term, ptr %746, i64 0, i32 2
  %760 = load i32, ptr %759, align 8, !tbaa !96
  %761 = trunc i64 %722 to i32
  %762 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.73, i32 noundef %761, ptr noundef %2, i32 noundef %750, i32 noundef %754, i32 noundef %756, i32 noundef %758, i32 noundef %760, ptr noundef nonnull %8) #44
  %763 = add nuw nsw i64 %722, 1
  %764 = load i32, ptr %26, align 8, !tbaa !32
  %765 = zext i32 %764 to i64
  %766 = icmp ult i64 %763, %765
  br i1 %766, label %721, label %767, !llvm.loop !97

767:                                              ; preds = %743, %716
  %768 = call i32 @fputc(i32 10, ptr %22)
  %769 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %770 = load i32, ptr %769, align 8, !tbaa !98
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %789, label %772

772:                                              ; preds = %767
  %773 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %774 = load ptr, ptr %773, align 8, !tbaa !99
  %775 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 18
  %776 = load i32, ptr %775, align 4, !tbaa !25
  %777 = zext i32 %770 to i64
  br label %778

778:                                              ; preds = %778, %772
  %779 = phi i64 [ 0, %772 ], [ %787, %778 ]
  %780 = phi i32 [ 0, %772 ], [ %786, %778 ]
  %781 = getelementptr inbounds ptr, ptr %774, i64 %779
  %782 = load ptr, ptr %781, align 8, !tbaa !14
  %783 = getelementptr inbounds %struct.State, ptr %782, i64 0, i32 9
  %784 = load i32, ptr %783, align 8, !tbaa !100
  %785 = mul i32 %784, %776
  %786 = add i32 %785, %780
  %787 = add nuw nsw i64 %779, 1
  %788 = icmp eq i64 %787, %777
  br i1 %788, label %789, label %778, !llvm.loop !101

789:                                              ; preds = %778, %767
  %790 = phi i32 [ 0, %767 ], [ %786, %778 ]
  %791 = call i32 @llvm.umax.i32(i32 %790, i32 1)
  %792 = sext i32 %791 to i64
  %793 = shl nsw i64 %792, 5
  %794 = call noalias ptr @malloc(i64 noundef %793) #50
  br label %795

795:                                              ; preds = %795, %789
  %796 = phi i64 [ 0, %789 ], [ %801, %795 ]
  %797 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %796
  store i32 0, ptr %797, align 8, !tbaa !30
  %798 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %796, i32 2
  store ptr null, ptr %798, align 8, !tbaa !31
  %799 = getelementptr inbounds [4 x %struct.anon], ptr %6, i64 0, i64 %796
  store i32 0, ptr %799, align 8, !tbaa !30
  %800 = getelementptr inbounds [4 x %struct.anon], ptr %6, i64 0, i64 %796, i32 2
  store ptr null, ptr %800, align 8, !tbaa !31
  %801 = add nuw nsw i64 %796, 1
  %802 = icmp eq i64 %801, 4
  br i1 %802, label %803, label %795, !llvm.loop !102

803:                                              ; preds = %795
  %804 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 19
  %805 = load i32, ptr %804, align 8, !tbaa !26
  %806 = sext i32 %805 to i64
  %807 = inttoptr i64 %806 to ptr
  store ptr %807, ptr getelementptr inbounds (%struct.hash_fns_t, ptr @scanner_block_fns, i64 0, i32 2), align 8, !tbaa !14
  store ptr %0, ptr getelementptr inbounds (%struct.hash_fns_t, ptr @scanner_block_fns, i64 0, i32 2, i64 1), align 8, !tbaa !14
  store ptr %807, ptr getelementptr inbounds (%struct.hash_fns_t, ptr @trans_scanner_block_fns, i64 0, i32 2), align 8, !tbaa !14
  store ptr %0, ptr getelementptr inbounds (%struct.hash_fns_t, ptr @trans_scanner_block_fns, i64 0, i32 2, i64 1), align 8, !tbaa !14
  store i32 0, ptr %7, align 8, !tbaa !30
  %808 = getelementptr inbounds %struct.anon, ptr %7, i64 0, i32 2
  store ptr null, ptr %808, align 8, !tbaa !31
  br i1 %771, label %1402, label %809

809:                                              ; preds = %803
  %810 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %811 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 18
  br label %823

812:                                              ; preds = %1167
  %.lcssa3 = phi i32 [ %1170, %1167 ]
  %813 = icmp eq i32 %.lcssa3, 0
  br i1 %813, label %1402, label %814

814:                                              ; preds = %812
  %815 = getelementptr inbounds %struct.ScannerBlock, ptr %10, i64 0, i32 1
  %816 = getelementptr inbounds %struct.ScannerBlock, ptr %10, i64 0, i32 2
  %817 = getelementptr inbounds %struct.ScannerBlock, ptr %10, i64 0, i32 3
  %818 = getelementptr inbounds %struct.ScannerBlock, ptr %10, i64 0, i32 4
  %819 = getelementptr inbounds %struct.ScannerBlock, ptr %11, i64 0, i32 1
  %820 = getelementptr inbounds %struct.ScannerBlock, ptr %11, i64 0, i32 2
  %821 = getelementptr inbounds %struct.ScannerBlock, ptr %11, i64 0, i32 3
  %822 = getelementptr inbounds %struct.ScannerBlock, ptr %11, i64 0, i32 4
  br label %1173

823:                                              ; preds = %1167, %809
  %824 = phi i64 [ 0, %809 ], [ %1169, %1167 ]
  %825 = phi i32 [ 0, %809 ], [ %1168, %1167 ]
  %826 = load ptr, ptr %810, align 8, !tbaa !99
  %827 = getelementptr inbounds ptr, ptr %826, i64 %824
  %828 = load ptr, ptr %827, align 8, !tbaa !14
  %829 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 9
  %830 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 5
  %831 = load i32, ptr %830, align 8, !tbaa !103
  %832 = icmp eq i32 %831, 0
  br i1 %832, label %865, label %833

833:                                              ; preds = %823
  %834 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 13
  %835 = load ptr, ptr %834, align 8, !tbaa !104
  %836 = icmp eq ptr %835, null
  br i1 %836, label %837, label %865

837:                                              ; preds = %833
  %838 = trunc i64 %824 to i32
  %839 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.74, i32 noundef %838, ptr noundef %2) #44
  %840 = load i32, ptr %830, align 8, !tbaa !103
  %841 = icmp eq i32 %840, 0
  br i1 %841, label %863, label %842

842:                                              ; preds = %837
  %843 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 5, i32 2
  br label %844

844:                                              ; preds = %844, %842
  %845 = phi i64 [ 0, %842 ], [ %859, %844 ]
  %846 = phi i32 [ %840, %842 ], [ %860, %844 ]
  %847 = load ptr, ptr %843, align 8, !tbaa !105
  %848 = getelementptr inbounds ptr, ptr %847, i64 %845
  %849 = load ptr, ptr %848, align 8, !tbaa !14
  %850 = getelementptr inbounds %struct.Action, ptr %849, i64 0, i32 1
  %851 = load ptr, ptr %850, align 8, !tbaa !106
  %852 = getelementptr inbounds %struct.Term, ptr %851, i64 0, i32 1
  %853 = load i32, ptr %852, align 4, !tbaa !41
  %854 = add i32 %846, -1
  %855 = zext i32 %854 to i64
  %856 = icmp eq i64 %845, %855
  %857 = select i1 %856, ptr @.str.76, ptr @.str.24.59
  %858 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.75, i32 noundef %853, ptr noundef %2, ptr noundef nonnull %857) #44
  %859 = add nuw nsw i64 %845, 1
  %860 = load i32, ptr %830, align 8, !tbaa !103
  %861 = zext i32 %860 to i64
  %862 = icmp ult i64 %859, %861
  br i1 %862, label %844, label %863, !llvm.loop !108

863:                                              ; preds = %844, %837
  %864 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %865

865:                                              ; preds = %863, %833, %823
  %866 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 9, i32 1
  %867 = load i32, ptr %866, align 8, !tbaa !109
  %868 = icmp eq i32 %867, 0
  br i1 %868, label %922, label %869

869:                                              ; preds = %865
  %870 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 9, i32 1, i32 2
  %871 = trunc i64 %824 to i32
  br label %872

872:                                              ; preds = %898, %869
  %873 = phi i64 [ 0, %869 ], [ %900, %898 ]
  %874 = load ptr, ptr %870, align 8, !tbaa !110
  %875 = getelementptr inbounds ptr, ptr %874, i64 %873
  %876 = load ptr, ptr %875, align 8, !tbaa !14
  %877 = getelementptr inbounds %struct.ScanStateTransition, ptr %876, i64 0, i32 2
  %878 = trunc i64 %873 to i32
  %879 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.77, i32 noundef %871, i32 noundef %878, ptr noundef %2) #44
  %880 = load i32, ptr %877, align 8, !tbaa !30
  %881 = icmp eq i32 %880, 0
  br i1 %881, label %898, label %882

882:                                              ; preds = %872
  %883 = getelementptr inbounds %struct.ScanStateTransition, ptr %876, i64 0, i32 2, i32 2
  br label %884

884:                                              ; preds = %884, %882
  %885 = phi i64 [ 0, %882 ], [ %894, %884 ]
  %886 = load ptr, ptr %883, align 8, !tbaa !31
  %887 = getelementptr inbounds ptr, ptr %886, i64 %885
  %888 = load ptr, ptr %887, align 8, !tbaa !14
  %889 = getelementptr inbounds %struct.Action, ptr %888, i64 0, i32 1
  %890 = load ptr, ptr %889, align 8, !tbaa !106
  %891 = getelementptr inbounds %struct.Term, ptr %890, i64 0, i32 1
  %892 = load i32, ptr %891, align 4, !tbaa !41
  %893 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.78, i32 noundef %892, ptr noundef %2) #44
  %894 = add nuw nsw i64 %885, 1
  %895 = load i32, ptr %877, align 8, !tbaa !30
  %896 = zext i32 %895 to i64
  %897 = icmp ult i64 %894, %896
  br i1 %897, label %884, label %898, !llvm.loop !111

898:                                              ; preds = %884, %872
  %899 = call i64 @fwrite(ptr nonnull @.str.79, i64 4, i64 1, ptr %22)
  %900 = add nuw nsw i64 %873, 1
  %901 = load i32, ptr %866, align 8, !tbaa !109
  %902 = zext i32 %901 to i64
  %903 = icmp ult i64 %900, %902
  br i1 %903, label %872, label %904, !llvm.loop !112

904:                                              ; preds = %898
  %.lcssa1 = phi i32 [ %901, %898 ]
  %905 = icmp eq i32 %.lcssa1, 0
  br i1 %905, label %922, label %906

906:                                              ; preds = %904
  %907 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.80, i32 noundef %871, ptr noundef %2) #44
  %908 = load i32, ptr %866, align 8, !tbaa !109
  %909 = icmp eq i32 %908, 0
  br i1 %909, label %920, label %910

910:                                              ; preds = %910, %906
  %911 = phi i32 [ %918, %910 ], [ %908, %906 ]
  %912 = phi i32 [ %917, %910 ], [ 0, %906 ]
  %913 = add i32 %911, -1
  %914 = icmp eq i32 %912, %913
  %915 = select i1 %914, ptr @.str.4.89, ptr @.str.82
  %916 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.81, i32 noundef %871, i32 noundef %912, ptr noundef %2, ptr noundef nonnull %915) #44
  %917 = add nuw nsw i32 %912, 1
  %918 = load i32, ptr %866, align 8, !tbaa !109
  %919 = icmp ult i32 %917, %918
  br i1 %919, label %910, label %920, !llvm.loop !113

920:                                              ; preds = %910, %906
  %921 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %922

922:                                              ; preds = %920, %904, %865
  %923 = load i32, ptr %829, align 8, !tbaa !30
  %924 = icmp ult i32 %923, 255
  br i1 %924, label %925, label %928

925:                                              ; preds = %922
  %926 = load i32, ptr %866, align 8, !tbaa !109
  %927 = icmp ult i32 %926, 255
  br i1 %927, label %950, label %932

928:                                              ; preds = %922
  %929 = icmp ult i32 %923, 32384
  br i1 %929, label %930, label %935

930:                                              ; preds = %928
  %931 = load i32, ptr %866, align 8, !tbaa !109
  br label %932

932:                                              ; preds = %930, %925
  %933 = phi i32 [ %931, %930 ], [ %926, %925 ]
  %934 = icmp ult i32 %933, 32384
  br i1 %934, label %936, label %935

935:                                              ; preds = %932, %928
  br label %936

936:                                              ; preds = %935, %932
  %937 = phi i64 [ 3, %935 ], [ 1, %932 ]
  %938 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %937
  br i1 %924, label %939, label %942

939:                                              ; preds = %936
  %940 = load i32, ptr %866, align 8, !tbaa !109
  %941 = icmp ult i32 %940, 255
  br i1 %941, label %950, label %946

942:                                              ; preds = %936
  %943 = icmp ult i32 %923, 32384
  br i1 %943, label %944, label %949

944:                                              ; preds = %942
  %945 = load i32, ptr %866, align 8, !tbaa !109
  br label %946

946:                                              ; preds = %944, %939
  %947 = phi i32 [ %945, %944 ], [ %940, %939 ]
  %948 = icmp ult i32 %947, 32384
  br i1 %948, label %950, label %949

949:                                              ; preds = %946, %942
  br label %950

950:                                              ; preds = %949, %946, %939, %925
  %951 = phi ptr [ %938, %949 ], [ %938, %939 ], [ %938, %946 ], [ %5, %925 ]
  %952 = phi i64 [ 3, %949 ], [ 0, %939 ], [ 1, %946 ], [ 0, %925 ]
  %953 = getelementptr inbounds [4 x %struct.anon], ptr %6, i64 0, i64 %952
  %954 = icmp eq i32 %923, 0
  br i1 %954, label %1167, label %955

955:                                              ; preds = %950
  %956 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 13
  %957 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 9, i32 0, i32 2
  %958 = getelementptr inbounds %struct.State, ptr %828, i64 0, i32 10
  %959 = trunc i64 %824 to i32
  br label %960

960:                                              ; preds = %1161, %955
  %961 = phi i64 [ 0, %955 ], [ %1163, %1161 ]
  %962 = phi i32 [ %825, %955 ], [ %1162, %1161 ]
  %963 = load ptr, ptr %956, align 8, !tbaa !104
  %964 = icmp eq ptr %963, null
  br i1 %964, label %965, label %1161

965:                                              ; preds = %960
  %966 = load i32, ptr %811, align 4, !tbaa !25
  %967 = icmp sgt i32 %966, 0
  br i1 %967, label %968, label %1104

968:                                              ; preds = %965
  %969 = sext i32 %962 to i64
  %970 = trunc i64 %961 to i32
  br label %971

971:                                              ; preds = %1098, %968
  %972 = phi i64 [ %969, %968 ], [ %989, %1098 ]
  %973 = phi i32 [ 0, %968 ], [ %1099, %1098 ]
  %974 = load i32, ptr %828, align 8, !tbaa !50
  %975 = getelementptr inbounds %struct.ScannerBlock, ptr %794, i64 %972
  store i32 %974, ptr %975, align 8, !tbaa !114
  %976 = getelementptr inbounds %struct.ScannerBlock, ptr %794, i64 %972, i32 1
  store i32 %970, ptr %976, align 4, !tbaa !116
  %977 = getelementptr inbounds %struct.ScannerBlock, ptr %794, i64 %972, i32 2
  store i32 %973, ptr %977, align 8, !tbaa !117
  %978 = load ptr, ptr %957, align 8, !tbaa !31
  %979 = getelementptr inbounds ptr, ptr %978, i64 %961
  %980 = load ptr, ptr %979, align 8, !tbaa !14
  %981 = load i32, ptr %804, align 8, !tbaa !26
  %982 = mul nsw i32 %981, %973
  %983 = sext i32 %982 to i64
  %984 = getelementptr inbounds %struct.ScanState, ptr %980, i64 0, i32 1, i64 %983
  %985 = getelementptr inbounds %struct.ScannerBlock, ptr %794, i64 %972, i32 3
  store ptr %984, ptr %985, align 8, !tbaa !118
  %986 = load ptr, ptr %979, align 8, !tbaa !14
  %987 = getelementptr inbounds %struct.ScanState, ptr %986, i64 0, i32 4, i64 %983
  %988 = getelementptr inbounds %struct.ScannerBlock, ptr %794, i64 %972, i32 4
  store ptr %987, ptr %988, align 8, !tbaa !119
  %989 = add nsw i64 %972, 1
  %990 = call ptr @set_add_fn(ptr noundef nonnull %951, ptr noundef nonnull %975, ptr noundef nonnull @scanner_block_fns) #43
  %991 = icmp eq ptr %975, %990
  br i1 %991, label %992, label %1044

992:                                              ; preds = %971
  %993 = load i32, ptr %829, align 8, !tbaa !100
  %994 = icmp ult i32 %993, 255
  br i1 %994, label %995, label %998

995:                                              ; preds = %992
  %996 = load i32, ptr %866, align 8, !tbaa !109
  %997 = icmp ult i32 %996, 255
  br i1 %997, label %1006, label %1002

998:                                              ; preds = %992
  %999 = icmp ult i32 %993, 32384
  br i1 %999, label %1000, label %1005

1000:                                             ; preds = %998
  %1001 = load i32, ptr %866, align 8, !tbaa !109
  br label %1002

1002:                                             ; preds = %1000, %995
  %1003 = phi i32 [ %1001, %1000 ], [ %996, %995 ]
  %1004 = icmp ult i32 %1003, 32384
  br i1 %1004, label %1006, label %1005

1005:                                             ; preds = %1002, %998
  br label %1006

1006:                                             ; preds = %1005, %1002, %995
  %1007 = phi ptr [ @.str.102, %1005 ], [ @.str.101, %1002 ], [ @.str.100, %995 ]
  %1008 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.83, ptr noundef nonnull %1007, i32 noundef %959, i32 noundef %970, i32 noundef %973, ptr noundef %2) #44
  %1009 = load i32, ptr %804, align 8, !tbaa !26
  %1010 = icmp sgt i32 %1009, 0
  br i1 %1010, label %1011, label %1042

1011:                                             ; preds = %1038, %1006
  %1012 = phi i32 [ %1040, %1038 ], [ %1009, %1006 ]
  %1013 = phi i32 [ %1039, %1038 ], [ 0, %1006 ]
  %1014 = mul nsw i32 %1012, %973
  %1015 = add nsw i32 %1014, %1013
  %1016 = load ptr, ptr %957, align 8, !tbaa !31
  %1017 = getelementptr inbounds ptr, ptr %1016, i64 %961
  %1018 = load ptr, ptr %1017, align 8, !tbaa !14
  %1019 = sext i32 %1015 to i64
  %1020 = getelementptr inbounds %struct.ScanState, ptr %1018, i64 0, i32 1, i64 %1019
  %1021 = load ptr, ptr %1020, align 8, !tbaa !14
  %1022 = icmp eq ptr %1021, null
  br i1 %1022, label %1026, label %1023

1023:                                             ; preds = %1011
  %1024 = load i32, ptr %1021, align 8, !tbaa !120
  %1025 = add i32 %1024, 1
  br label %1026

1026:                                             ; preds = %1023, %1011
  %1027 = phi i32 [ %1025, %1023 ], [ 0, %1011 ]
  %1028 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.30.66, i32 noundef %1027) #44
  %1029 = load i32, ptr %804, align 8, !tbaa !26
  %1030 = icmp eq i32 %1013, %1029
  br i1 %1030, label %1033, label %1031

1031:                                             ; preds = %1026
  %1032 = call i32 @fputc(i32 44, ptr %22)
  br label %1033

1033:                                             ; preds = %1031, %1026
  %1034 = and i32 %1013, 15
  %1035 = icmp eq i32 %1034, 15
  br i1 %1035, label %1036, label %1038

1036:                                             ; preds = %1033
  %1037 = call i32 @fputc(i32 10, ptr %22)
  br label %1038

1038:                                             ; preds = %1036, %1033
  %1039 = add nuw nsw i32 %1013, 1
  %1040 = load i32, ptr %804, align 8, !tbaa !26
  %1041 = icmp slt i32 %1039, %1040
  br i1 %1041, label %1011, label %1042, !llvm.loop !122

1042:                                             ; preds = %1038, %1006
  %1043 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %1044

1044:                                             ; preds = %1042, %971
  %1045 = load i8, ptr %958, align 8
  %1046 = and i8 %1045, 24
  %1047 = icmp eq i8 %1046, 8
  br i1 %1047, label %1098, label %1048

1048:                                             ; preds = %1044
  %1049 = call ptr @set_add_fn(ptr noundef nonnull %953, ptr noundef nonnull %975, ptr noundef nonnull @trans_scanner_block_fns) #43
  %1050 = icmp eq ptr %975, %1049
  br i1 %1050, label %1051, label %1098

1051:                                             ; preds = %1048
  %1052 = load i32, ptr %829, align 8, !tbaa !100
  %1053 = icmp ult i32 %1052, 255
  br i1 %1053, label %1054, label %1057

1054:                                             ; preds = %1051
  %1055 = load i32, ptr %866, align 8, !tbaa !109
  %1056 = icmp ult i32 %1055, 255
  br i1 %1056, label %1065, label %1061

1057:                                             ; preds = %1051
  %1058 = icmp ult i32 %1052, 32384
  br i1 %1058, label %1059, label %1064

1059:                                             ; preds = %1057
  %1060 = load i32, ptr %866, align 8, !tbaa !109
  br label %1061

1061:                                             ; preds = %1059, %1054
  %1062 = phi i32 [ %1060, %1059 ], [ %1055, %1054 ]
  %1063 = icmp ult i32 %1062, 32384
  br i1 %1063, label %1065, label %1064

1064:                                             ; preds = %1061, %1057
  br label %1065

1065:                                             ; preds = %1064, %1061, %1054
  %1066 = phi ptr [ @.str.102, %1064 ], [ @.str.101, %1061 ], [ @.str.100, %1054 ]
  %1067 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.85, ptr noundef nonnull %1066, i32 noundef %959, i32 noundef %970, i32 noundef %973, ptr noundef %2) #44
  %1068 = load i32, ptr %804, align 8, !tbaa !26
  %1069 = icmp sgt i32 %1068, 0
  br i1 %1069, label %1070, label %1096

1070:                                             ; preds = %1092, %1065
  %1071 = phi i32 [ %1094, %1092 ], [ %1068, %1065 ]
  %1072 = phi i32 [ %1093, %1092 ], [ 0, %1065 ]
  %1073 = mul nsw i32 %1071, %973
  %1074 = add nsw i32 %1073, %1072
  %1075 = load ptr, ptr %957, align 8, !tbaa !31
  %1076 = getelementptr inbounds ptr, ptr %1075, i64 %961
  %1077 = load ptr, ptr %1076, align 8, !tbaa !14
  %1078 = sext i32 %1074 to i64
  %1079 = getelementptr inbounds %struct.ScanState, ptr %1077, i64 0, i32 4, i64 %1078
  %1080 = load ptr, ptr %1079, align 8, !tbaa !14
  %1081 = load i32, ptr %1080, align 8, !tbaa !123
  %1082 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.30.66, i32 noundef %1081) #44
  %1083 = load i32, ptr %804, align 8, !tbaa !26
  %1084 = icmp eq i32 %1072, %1083
  br i1 %1084, label %1087, label %1085

1085:                                             ; preds = %1070
  %1086 = call i32 @fputc(i32 44, ptr %22)
  br label %1087

1087:                                             ; preds = %1085, %1070
  %1088 = and i32 %1072, 15
  %1089 = icmp eq i32 %1088, 15
  br i1 %1089, label %1090, label %1092

1090:                                             ; preds = %1087
  %1091 = call i32 @fputc(i32 10, ptr %22)
  br label %1092

1092:                                             ; preds = %1090, %1087
  %1093 = add nuw nsw i32 %1072, 1
  %1094 = load i32, ptr %804, align 8, !tbaa !26
  %1095 = icmp slt i32 %1093, %1094
  br i1 %1095, label %1070, label %1096, !llvm.loop !125

1096:                                             ; preds = %1092, %1065
  %1097 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %1098

1098:                                             ; preds = %1096, %1048, %1044
  %1099 = add nuw nsw i32 %973, 1
  %1100 = load i32, ptr %811, align 4, !tbaa !25
  %1101 = icmp slt i32 %1099, %1100
  br i1 %1101, label %971, label %1102, !llvm.loop !126

1102:                                             ; preds = %1098
  %.lcssa2 = phi i64 [ %989, %1098 ]
  %1103 = trunc i64 %.lcssa2 to i32
  br label %1104

1104:                                             ; preds = %1102, %965
  %1105 = phi i32 [ %962, %965 ], [ %1103, %1102 ]
  %1106 = load ptr, ptr %957, align 8, !tbaa !31
  %1107 = getelementptr inbounds ptr, ptr %1106, i64 %961
  %1108 = load ptr, ptr %1107, align 8, !tbaa !14
  %1109 = getelementptr inbounds %struct.ScanState, ptr %1108, i64 0, i32 2
  %1110 = load i32, ptr %1109, align 8, !tbaa !127
  %1111 = icmp eq i32 %1110, 0
  br i1 %1111, label %1161, label %1112

1112:                                             ; preds = %1104
  %1113 = trunc i64 %961 to i32
  br label %1114

1114:                                             ; preds = %1152, %1112
  %1115 = phi i64 [ 0, %1112 ], [ %1153, %1152 ]
  %1116 = phi ptr [ %1108, %1112 ], [ %1156, %1152 ]
  %1117 = getelementptr inbounds %struct.ScanState, ptr %1116, i64 0, i32 2, i32 2
  %1118 = load ptr, ptr %1117, align 8, !tbaa !128
  %1119 = getelementptr inbounds ptr, ptr %1118, i64 %1115
  %1120 = load ptr, ptr %1119, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %9) #45
  %1121 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %9, ptr noundef nonnull dereferenceable(1) @.str.86, i32 noundef %959, i32 noundef %1113, ptr noundef %2) #43
  %1122 = load ptr, ptr %957, align 8, !tbaa !31
  %1123 = getelementptr inbounds ptr, ptr %1122, i64 %961
  %1124 = load ptr, ptr %1123, align 8, !tbaa !14
  %1125 = getelementptr inbounds %struct.ScanState, ptr %1124, i64 0, i32 2
  %1126 = load i32, ptr %1125, align 8, !tbaa !127
  %1127 = icmp eq i32 %1126, 1
  br i1 %1127, label %1128, label %1133

1128:                                             ; preds = %1114
  %1129 = call noalias ptr @strdup(ptr noundef nonnull %9) #43
  %1130 = getelementptr inbounds %struct.Action, ptr %1120, i64 0, i32 5
  store ptr %1129, ptr %1130, align 8, !tbaa !129
  %1131 = call ptr @set_add_fn(ptr noundef nonnull %7, ptr noundef %1120, ptr noundef nonnull @shift_fns) #43
  %1132 = icmp eq ptr %1131, %1120
  br i1 %1132, label %1133, label %1152

1133:                                             ; preds = %1128, %1114
  %1134 = icmp eq i64 %1115, 0
  br i1 %1134, label %1135, label %1137

1135:                                             ; preds = %1133
  %1136 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.87, ptr noundef nonnull %9) #44
  br label %1137

1137:                                             ; preds = %1135, %1133
  %1138 = getelementptr inbounds %struct.Action, ptr %1120, i64 0, i32 1
  %1139 = load ptr, ptr %1138, align 8, !tbaa !106
  %1140 = getelementptr inbounds %struct.Term, ptr %1139, i64 0, i32 1
  %1141 = load i32, ptr %1140, align 4, !tbaa !41
  %1142 = load ptr, ptr %957, align 8, !tbaa !31
  %1143 = getelementptr inbounds ptr, ptr %1142, i64 %961
  %1144 = load ptr, ptr %1143, align 8, !tbaa !14
  %1145 = getelementptr inbounds %struct.ScanState, ptr %1144, i64 0, i32 2
  %1146 = load i32, ptr %1145, align 8, !tbaa !127
  %1147 = add i32 %1146, -1
  %1148 = zext i32 %1147 to i64
  %1149 = icmp eq i64 %1115, %1148
  %1150 = select i1 %1149, ptr @.str.88, ptr @.str.24.59
  %1151 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.75, i32 noundef %1141, ptr noundef %2, ptr noundef nonnull %1150) #44
  br label %1152

1152:                                             ; preds = %1137, %1128
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %9) #45
  %1153 = add nuw nsw i64 %1115, 1
  %1154 = load ptr, ptr %957, align 8, !tbaa !31
  %1155 = getelementptr inbounds ptr, ptr %1154, i64 %961
  %1156 = load ptr, ptr %1155, align 8, !tbaa !14
  %1157 = getelementptr inbounds %struct.ScanState, ptr %1156, i64 0, i32 2
  %1158 = load i32, ptr %1157, align 8, !tbaa !127
  %1159 = zext i32 %1158 to i64
  %1160 = icmp ult i64 %1153, %1159
  br i1 %1160, label %1114, label %1161, !llvm.loop !130

1161:                                             ; preds = %1152, %1104, %960
  %1162 = phi i32 [ %962, %960 ], [ %1105, %1104 ], [ %1105, %1152 ]
  %1163 = add nuw nsw i64 %961, 1
  %1164 = load i32, ptr %829, align 8, !tbaa !30
  %1165 = zext i32 %1164 to i64
  %1166 = icmp ult i64 %1163, %1165
  br i1 %1166, label %960, label %1167, !llvm.loop !131

1167:                                             ; preds = %1161, %950
  %1168 = phi i32 [ %825, %950 ], [ %1162, %1161 ]
  %1169 = add nuw nsw i64 %824, 1
  %1170 = load i32, ptr %769, align 8, !tbaa !98
  %1171 = zext i32 %1170 to i64
  %1172 = icmp ult i64 %1169, %1171
  br i1 %1172, label %823, label %812, !llvm.loop !132

1173:                                             ; preds = %1397, %814
  %1174 = phi i64 [ 0, %814 ], [ %1398, %1397 ]
  %1175 = load ptr, ptr %810, align 8, !tbaa !99
  %1176 = getelementptr inbounds ptr, ptr %1175, i64 %1174
  %1177 = load ptr, ptr %1176, align 8, !tbaa !14
  %1178 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9
  %1179 = load i32, ptr %1178, align 8, !tbaa !30
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1397, label %1181

1181:                                             ; preds = %1173
  %1182 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 13
  %1183 = load ptr, ptr %1182, align 8, !tbaa !104
  %1184 = icmp eq ptr %1183, null
  br i1 %1184, label %1185, label %1397

1185:                                             ; preds = %1181
  %1186 = icmp ult i32 %1179, 255
  br i1 %1186, label %1187, label %1191

1187:                                             ; preds = %1185
  %1188 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1189 = load i32, ptr %1188, align 8, !tbaa !109
  %1190 = icmp ult i32 %1189, 255
  br i1 %1190, label %1200, label %1196

1191:                                             ; preds = %1185
  %1192 = icmp ult i32 %1179, 32384
  br i1 %1192, label %1193, label %1199

1193:                                             ; preds = %1191
  %1194 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1195 = load i32, ptr %1194, align 8, !tbaa !109
  br label %1196

1196:                                             ; preds = %1193, %1187
  %1197 = phi i32 [ %1195, %1193 ], [ %1189, %1187 ]
  %1198 = icmp ult i32 %1197, 32384
  br i1 %1198, label %1200, label %1199

1199:                                             ; preds = %1196, %1191
  br label %1200

1200:                                             ; preds = %1199, %1196, %1187
  %1201 = phi ptr [ @.str.106, %1199 ], [ @.str.105, %1196 ], [ @.str.104, %1187 ]
  %1202 = trunc i64 %1174 to i32
  %1203 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.89, ptr noundef nonnull %1201, i32 noundef %1202, ptr noundef %2, i32 noundef %1179) #44
  %1204 = load i32, ptr %1178, align 8, !tbaa !30
  %1205 = icmp ult i32 %1204, 255
  br i1 %1205, label %1206, label %1210

1206:                                             ; preds = %1200
  %1207 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1208 = load i32, ptr %1207, align 8, !tbaa !109
  %1209 = icmp ult i32 %1208, 255
  br i1 %1209, label %1219, label %1215

1210:                                             ; preds = %1200
  %1211 = icmp ult i32 %1204, 32384
  br i1 %1211, label %1212, label %1218

1212:                                             ; preds = %1210
  %1213 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1214 = load i32, ptr %1213, align 8, !tbaa !109
  br label %1215

1215:                                             ; preds = %1212, %1206
  %1216 = phi i32 [ %1214, %1212 ], [ %1208, %1206 ]
  %1217 = icmp ult i32 %1216, 32384
  br i1 %1217, label %1219, label %1218

1218:                                             ; preds = %1215, %1210
  br label %1219

1219:                                             ; preds = %1218, %1215, %1206
  %1220 = phi i64 [ 3, %1218 ], [ 0, %1206 ], [ 1, %1215 ]
  %1221 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %1220
  %1222 = icmp eq i32 %1204, 0
  br i1 %1222, label %1296, label %1223

1223:                                             ; preds = %1219
  %1224 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 0, i32 2
  br label %1225

1225:                                             ; preds = %1291, %1223
  %1226 = phi i64 [ 0, %1223 ], [ %1292, %1291 ]
  %1227 = load ptr, ptr %1224, align 8, !tbaa !31
  %1228 = getelementptr inbounds ptr, ptr %1227, i64 %1226
  %1229 = load ptr, ptr %1228, align 8, !tbaa !14
  %1230 = getelementptr inbounds %struct.ScanState, ptr %1229, i64 0, i32 2
  %1231 = load i32, ptr %1230, align 8, !tbaa !127
  switch i32 %1231, label %1240 [
    i32 0, label %1243
    i32 1, label %1232
  ]

1232:                                             ; preds = %1225
  %1233 = getelementptr inbounds %struct.ScanState, ptr %1229, i64 0, i32 2, i32 2
  %1234 = load ptr, ptr %1233, align 8, !tbaa !128
  %1235 = load ptr, ptr %1234, align 8, !tbaa !14
  %1236 = call ptr @set_add_fn(ptr noundef nonnull %7, ptr noundef %1235, ptr noundef nonnull @shift_fns) #43
  %1237 = getelementptr inbounds %struct.Action, ptr %1236, i64 0, i32 5
  %1238 = load ptr, ptr %1237, align 8, !tbaa !129
  %1239 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.90, ptr noundef %1238) #44
  br label %1245

1240:                                             ; preds = %1225
  %1241 = trunc i64 %1226 to i32
  %1242 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.91, i32 noundef %1202, i32 noundef %1241, ptr noundef %2) #44
  br label %1245

1243:                                             ; preds = %1225
  %1244 = call i64 @fwrite(ptr nonnull @.str.92, i64 9, i64 1, ptr %22)
  br label %1245

1245:                                             ; preds = %1243, %1240, %1232
  %1246 = load i32, ptr %811, align 4, !tbaa !25
  %1247 = icmp sgt i32 %1246, 0
  br i1 %1247, label %1248, label %1282

1248:                                             ; preds = %1245
  %1249 = trunc i64 %1226 to i32
  br label %1250

1250:                                             ; preds = %1278, %1248
  %1251 = phi i32 [ %1279, %1278 ], [ 0, %1248 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %10) #45
  %1252 = load i32, ptr %1177, align 8, !tbaa !50
  store i32 %1252, ptr %10, align 8, !tbaa !114
  store i32 %1249, ptr %815, align 4, !tbaa !116
  store i32 %1251, ptr %816, align 8, !tbaa !117
  %1253 = load ptr, ptr %1224, align 8, !tbaa !31
  %1254 = getelementptr inbounds ptr, ptr %1253, i64 %1226
  %1255 = load ptr, ptr %1254, align 8, !tbaa !14
  %1256 = load i32, ptr %804, align 8, !tbaa !26
  %1257 = mul nsw i32 %1256, %1251
  %1258 = sext i32 %1257 to i64
  %1259 = getelementptr inbounds %struct.ScanState, ptr %1255, i64 0, i32 1, i64 %1258
  store ptr %1259, ptr %817, align 8, !tbaa !118
  %1260 = load ptr, ptr %1254, align 8, !tbaa !14
  %1261 = getelementptr inbounds %struct.ScanState, ptr %1260, i64 0, i32 4, i64 %1258
  store ptr %1261, ptr %818, align 8, !tbaa !119
  %1262 = call ptr @set_add_fn(ptr noundef nonnull %1221, ptr noundef nonnull %10, ptr noundef nonnull @scanner_block_fns) #43
  %1263 = load i32, ptr %1262, align 8, !tbaa !114
  %1264 = getelementptr inbounds %struct.ScannerBlock, ptr %1262, i64 0, i32 1
  %1265 = load i32, ptr %1264, align 4, !tbaa !116
  %1266 = getelementptr inbounds %struct.ScannerBlock, ptr %1262, i64 0, i32 2
  %1267 = load i32, ptr %1266, align 8, !tbaa !117
  %1268 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.93, i32 noundef %1263, i32 noundef %1265, i32 noundef %1267, ptr noundef %2) #44
  %1269 = load i32, ptr %811, align 4, !tbaa !25
  %1270 = add nsw i32 %1269, -1
  %1271 = icmp eq i32 %1251, %1270
  br i1 %1271, label %1278, label %1272

1272:                                             ; preds = %1250
  %1273 = call i64 @fwrite(ptr nonnull @.str.24.59, i64 2, i64 1, ptr %22)
  %1274 = and i32 %1251, 1
  %1275 = icmp eq i32 %1274, 0
  br i1 %1275, label %1278, label %1276

1276:                                             ; preds = %1272
  %1277 = call i64 @fwrite(ptr nonnull @.str.94, i64 3, i64 1, ptr %22)
  br label %1278

1278:                                             ; preds = %1276, %1272, %1250
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %10) #45
  %1279 = add nuw nsw i32 %1251, 1
  %1280 = load i32, ptr %811, align 4, !tbaa !25
  %1281 = icmp slt i32 %1279, %1280
  br i1 %1281, label %1250, label %1282, !llvm.loop !133

1282:                                             ; preds = %1278, %1245
  %1283 = load i32, ptr %1178, align 8, !tbaa !30
  %1284 = add i32 %1283, -1
  %1285 = zext i32 %1284 to i64
  %1286 = icmp eq i64 %1226, %1285
  br i1 %1286, label %1289, label %1287

1287:                                             ; preds = %1282
  %1288 = call i64 @fwrite(ptr nonnull @.str.95, i64 4, i64 1, ptr %22)
  br label %1291

1289:                                             ; preds = %1282
  %1290 = call i64 @fwrite(ptr nonnull @.str.96, i64 3, i64 1, ptr %22)
  br label %1291

1291:                                             ; preds = %1289, %1287
  %1292 = add nuw nsw i64 %1226, 1
  %1293 = load i32, ptr %1178, align 8, !tbaa !30
  %1294 = zext i32 %1293 to i64
  %1295 = icmp ult i64 %1292, %1294
  br i1 %1295, label %1225, label %1296, !llvm.loop !134

1296:                                             ; preds = %1291, %1219
  %1297 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  %1298 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 10
  %1299 = load i8, ptr %1298, align 8
  %1300 = and i8 %1299, 24
  %1301 = icmp eq i8 %1300, 8
  br i1 %1301, label %1397, label %1302

1302:                                             ; preds = %1296
  %1303 = load i32, ptr %1178, align 8, !tbaa !30
  %1304 = icmp ult i32 %1303, 255
  br i1 %1304, label %1305, label %1309

1305:                                             ; preds = %1302
  %1306 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1307 = load i32, ptr %1306, align 8, !tbaa !109
  %1308 = icmp ult i32 %1307, 255
  br i1 %1308, label %1318, label %1314

1309:                                             ; preds = %1302
  %1310 = icmp ult i32 %1303, 32384
  br i1 %1310, label %1311, label %1317

1311:                                             ; preds = %1309
  %1312 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1313 = load i32, ptr %1312, align 8, !tbaa !109
  br label %1314

1314:                                             ; preds = %1311, %1305
  %1315 = phi i32 [ %1313, %1311 ], [ %1307, %1305 ]
  %1316 = icmp ult i32 %1315, 32384
  br i1 %1316, label %1318, label %1317

1317:                                             ; preds = %1314, %1309
  br label %1318

1318:                                             ; preds = %1317, %1314, %1305
  %1319 = phi ptr [ @.str.106, %1317 ], [ @.str.105, %1314 ], [ @.str.104, %1305 ]
  %1320 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.97, ptr noundef nonnull %1319, i32 noundef %1202, ptr noundef %2, i32 noundef %1303) #44
  %1321 = load i32, ptr %1178, align 8, !tbaa !30
  %1322 = icmp ult i32 %1321, 255
  br i1 %1322, label %1323, label %1327

1323:                                             ; preds = %1318
  %1324 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1325 = load i32, ptr %1324, align 8, !tbaa !109
  %1326 = icmp ult i32 %1325, 255
  br i1 %1326, label %1336, label %1332

1327:                                             ; preds = %1318
  %1328 = icmp ult i32 %1321, 32384
  br i1 %1328, label %1329, label %1335

1329:                                             ; preds = %1327
  %1330 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 1
  %1331 = load i32, ptr %1330, align 8, !tbaa !109
  br label %1332

1332:                                             ; preds = %1329, %1323
  %1333 = phi i32 [ %1331, %1329 ], [ %1325, %1323 ]
  %1334 = icmp ult i32 %1333, 32384
  br i1 %1334, label %1336, label %1335

1335:                                             ; preds = %1332, %1327
  br label %1336

1336:                                             ; preds = %1335, %1332, %1323
  %1337 = phi i64 [ 3, %1335 ], [ 0, %1323 ], [ 1, %1332 ]
  %1338 = getelementptr inbounds [4 x %struct.anon], ptr %6, i64 0, i64 %1337
  %1339 = icmp eq i32 %1321, 0
  br i1 %1339, label %1395, label %1340

1340:                                             ; preds = %1336
  %1341 = getelementptr inbounds %struct.State, ptr %1177, i64 0, i32 9, i32 0, i32 2
  br label %1342

1342:                                             ; preds = %1390, %1340
  %1343 = phi i64 [ 0, %1340 ], [ %1391, %1390 ]
  %1344 = call i64 @fwrite(ptr nonnull @.str.98, i64 3, i64 1, ptr %22)
  %1345 = load i32, ptr %811, align 4, !tbaa !25
  %1346 = icmp sgt i32 %1345, 0
  br i1 %1346, label %1347, label %1381

1347:                                             ; preds = %1342
  %1348 = trunc i64 %1343 to i32
  br label %1349

1349:                                             ; preds = %1377, %1347
  %1350 = phi i32 [ 0, %1347 ], [ %1378, %1377 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %11) #45
  %1351 = load i32, ptr %1177, align 8, !tbaa !50
  store i32 %1351, ptr %11, align 8, !tbaa !114
  store i32 %1348, ptr %819, align 4, !tbaa !116
  store i32 %1350, ptr %820, align 8, !tbaa !117
  %1352 = load ptr, ptr %1341, align 8, !tbaa !31
  %1353 = getelementptr inbounds ptr, ptr %1352, i64 %1343
  %1354 = load ptr, ptr %1353, align 8, !tbaa !14
  %1355 = load i32, ptr %804, align 8, !tbaa !26
  %1356 = mul nsw i32 %1355, %1350
  %1357 = sext i32 %1356 to i64
  %1358 = getelementptr inbounds %struct.ScanState, ptr %1354, i64 0, i32 1, i64 %1357
  store ptr %1358, ptr %821, align 8, !tbaa !118
  %1359 = load ptr, ptr %1353, align 8, !tbaa !14
  %1360 = getelementptr inbounds %struct.ScanState, ptr %1359, i64 0, i32 4, i64 %1357
  store ptr %1360, ptr %822, align 8, !tbaa !119
  %1361 = call ptr @set_add_fn(ptr noundef nonnull %1338, ptr noundef nonnull %11, ptr noundef nonnull @trans_scanner_block_fns) #43
  %1362 = load i32, ptr %1361, align 8, !tbaa !114
  %1363 = getelementptr inbounds %struct.ScannerBlock, ptr %1361, i64 0, i32 1
  %1364 = load i32, ptr %1363, align 4, !tbaa !116
  %1365 = getelementptr inbounds %struct.ScannerBlock, ptr %1361, i64 0, i32 2
  %1366 = load i32, ptr %1365, align 8, !tbaa !117
  %1367 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.99, i32 noundef %1362, i32 noundef %1364, i32 noundef %1366, ptr noundef %2) #44
  %1368 = load i32, ptr %811, align 4, !tbaa !25
  %1369 = add nsw i32 %1368, -1
  %1370 = icmp eq i32 %1350, %1369
  br i1 %1370, label %1377, label %1371

1371:                                             ; preds = %1349
  %1372 = call i64 @fwrite(ptr nonnull @.str.24.59, i64 2, i64 1, ptr %22)
  %1373 = and i32 %1350, 1
  %1374 = icmp eq i32 %1373, 0
  br i1 %1374, label %1377, label %1375

1375:                                             ; preds = %1371
  %1376 = call i64 @fwrite(ptr nonnull @.str.94, i64 3, i64 1, ptr %22)
  br label %1377

1377:                                             ; preds = %1375, %1371, %1349
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %11) #45
  %1378 = add nuw nsw i32 %1350, 1
  %1379 = load i32, ptr %811, align 4, !tbaa !25
  %1380 = icmp slt i32 %1378, %1379
  br i1 %1380, label %1349, label %1381, !llvm.loop !135

1381:                                             ; preds = %1377, %1342
  %1382 = load i32, ptr %1178, align 8, !tbaa !30
  %1383 = add i32 %1382, -1
  %1384 = zext i32 %1383 to i64
  %1385 = icmp eq i64 %1343, %1384
  br i1 %1385, label %1388, label %1386

1386:                                             ; preds = %1381
  %1387 = call i64 @fwrite(ptr nonnull @.str.95, i64 4, i64 1, ptr %22)
  br label %1390

1388:                                             ; preds = %1381
  %1389 = call i64 @fwrite(ptr nonnull @.str.96, i64 3, i64 1, ptr %22)
  br label %1390

1390:                                             ; preds = %1388, %1386
  %1391 = add nuw nsw i64 %1343, 1
  %1392 = load i32, ptr %1178, align 8, !tbaa !30
  %1393 = zext i32 %1392 to i64
  %1394 = icmp ult i64 %1391, %1393
  br i1 %1394, label %1342, label %1395, !llvm.loop !136

1395:                                             ; preds = %1390, %1336
  %1396 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %1397

1397:                                             ; preds = %1395, %1296, %1181, %1173
  %1398 = add nuw nsw i64 %1174, 1
  %1399 = load i32, ptr %769, align 8, !tbaa !98
  %1400 = zext i32 %1399 to i64
  %1401 = icmp ult i64 %1398, %1400
  br i1 %1401, label %1173, label %1402, !llvm.loop !137

1402:                                             ; preds = %1397, %812, %803
  br label %1403

1403:                                             ; preds = %1413, %1402
  %1404 = phi i64 [ %1414, %1413 ], [ 0, %1402 ]
  %1405 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %1404
  %1406 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %1404, i32 2
  %1407 = load ptr, ptr %1406, align 8, !tbaa !31
  %1408 = icmp eq ptr %1407, null
  %1409 = getelementptr inbounds [4 x %struct.anon], ptr %5, i64 0, i64 %1404, i32 3
  %1410 = icmp eq ptr %1407, %1409
  %1411 = select i1 %1408, i1 true, i1 %1410
  br i1 %1411, label %1413, label %1412

1412:                                             ; preds = %1403
  call void @free(ptr noundef nonnull %1407) #43
  br label %1413

1413:                                             ; preds = %1412, %1403
  store i32 0, ptr %1405, align 8, !tbaa !30
  store ptr null, ptr %1406, align 8, !tbaa !31
  %1414 = add nuw nsw i64 %1404, 1
  %1415 = icmp eq i64 %1414, 4
  br i1 %1415, label %1416, label %1403, !llvm.loop !138

1416:                                             ; preds = %1413
  call void @free(ptr noundef %794) #43
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %8) #45
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %7) #45
  call void @llvm.lifetime.end.p0(i64 160, ptr nonnull %6) #45
  call void @llvm.lifetime.end.p0(i64 160, ptr nonnull %5) #45
  %1417 = load i32, ptr %769, align 8, !tbaa !98
  %1418 = icmp eq i32 %1417, 0
  br i1 %1418, label %1497, label %1419

1419:                                             ; preds = %1416
  %1420 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %1421

1421:                                             ; preds = %1492, %1419
  %1422 = phi i64 [ 0, %1419 ], [ %1493, %1492 ]
  %1423 = load ptr, ptr %1420, align 8, !tbaa !99
  %1424 = getelementptr inbounds ptr, ptr %1423, i64 %1422
  %1425 = load ptr, ptr %1424, align 8, !tbaa !14
  %1426 = getelementptr inbounds %struct.State, ptr %1425, i64 0, i32 5
  %1427 = load i32, ptr %1426, align 8, !tbaa !103
  %1428 = icmp eq i32 %1427, 0
  br i1 %1428, label %1485, label %1429

1429:                                             ; preds = %1421
  %1430 = getelementptr inbounds %struct.State, ptr %1425, i64 0, i32 5, i32 2
  %1431 = getelementptr inbounds %struct.State, ptr %1425, i64 0, i32 10
  %1432 = trunc i64 %1422 to i32
  br label %1433

1433:                                             ; preds = %1480, %1429
  %1434 = phi i32 [ %1427, %1429 ], [ %1481, %1480 ]
  %1435 = phi i64 [ 0, %1429 ], [ %1482, %1480 ]
  %1436 = load ptr, ptr %1430, align 8, !tbaa !105
  %1437 = getelementptr inbounds ptr, ptr %1436, i64 %1435
  %1438 = load ptr, ptr %1437, align 8, !tbaa !14
  %1439 = load i32, ptr %1438, align 8, !tbaa !139
  %1440 = icmp eq i32 %1439, 1
  br i1 %1440, label %1441, label %1480

1441:                                             ; preds = %1433
  %1442 = getelementptr inbounds %struct.Action, ptr %1438, i64 0, i32 1
  %1443 = load ptr, ptr %1442, align 8, !tbaa !106
  %1444 = load i32, ptr %1443, align 8, !tbaa !34
  %1445 = icmp eq i32 %1444, 2
  br i1 %1445, label %1446, label %1480

1446:                                             ; preds = %1441
  %1447 = load i8, ptr %1431, align 8
  %1448 = and i8 %1447, 2
  %1449 = icmp eq i8 %1448, 0
  br i1 %1449, label %1450, label %1453

1450:                                             ; preds = %1446
  %1451 = or i8 %1447, 2
  store i8 %1451, ptr %1431, align 8
  %1452 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.107, i32 noundef %1432, ptr noundef %2) #44
  br label %1453

1453:                                             ; preds = %1450, %1446
  %1454 = call i64 @fwrite(ptr nonnull @.str.108, i64 13, i64 1, ptr %22)
  %1455 = load ptr, ptr %1442, align 8, !tbaa !106
  %1456 = getelementptr inbounds %struct.Term, ptr %1455, i64 0, i32 5
  %1457 = load ptr, ptr %1456, align 8, !tbaa !40
  %1458 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1457) #48
  %1459 = shl i64 %1458, 32
  %1460 = add i64 %1459, -4294967296
  %1461 = ashr exact i64 %1460, 32
  %1462 = getelementptr inbounds i8, ptr %1457, i64 %1461
  %1463 = load i8, ptr %1462, align 1, !tbaa !60
  %1464 = icmp eq i8 %1463, 41
  br i1 %1464, label %1465, label %1468

1465:                                             ; preds = %1453
  %1466 = call i64 @fwrite(ptr noundef nonnull %1457, i64 noundef %1461, i64 noundef 1, ptr noundef %22) #44
  %1467 = call i64 @fwrite(ptr nonnull @.str.24.59, i64 2, i64 1, ptr %22)
  br label %1470

1468:                                             ; preds = %1453
  %1469 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.109, ptr noundef nonnull %1457) #44
  br label %1470

1470:                                             ; preds = %1468, %1465
  %1471 = load ptr, ptr %1442, align 8, !tbaa !106
  %1472 = getelementptr inbounds %struct.Term, ptr %1471, i64 0, i32 1
  %1473 = load i32, ptr %1472, align 4, !tbaa !41
  %1474 = load i32, ptr %350, align 8, !tbaa !38
  %1475 = add i32 %1474, %1473
  %1476 = getelementptr inbounds %struct.Term, ptr %1471, i64 0, i32 2
  %1477 = load i32, ptr %1476, align 8, !tbaa !96
  %1478 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.110, i32 noundef %1475, i32 noundef %1477) #44
  %1479 = load i32, ptr %1426, align 8, !tbaa !103
  br label %1480

1480:                                             ; preds = %1470, %1441, %1433
  %1481 = phi i32 [ %1434, %1433 ], [ %1434, %1441 ], [ %1479, %1470 ]
  %1482 = add nuw nsw i64 %1435, 1
  %1483 = zext i32 %1481 to i64
  %1484 = icmp ult i64 %1482, %1483
  br i1 %1484, label %1433, label %1485, !llvm.loop !140

1485:                                             ; preds = %1480, %1421
  %1486 = getelementptr inbounds %struct.State, ptr %1425, i64 0, i32 10
  %1487 = load i8, ptr %1486, align 8
  %1488 = and i8 %1487, 2
  %1489 = icmp eq i8 %1488, 0
  br i1 %1489, label %1492, label %1490

1490:                                             ; preds = %1485
  %1491 = call i64 @fwrite(ptr nonnull @.str.111, i64 15, i64 1, ptr %22)
  br label %1492

1492:                                             ; preds = %1490, %1485
  %1493 = add nuw nsw i64 %1422, 1
  %1494 = load i32, ptr %769, align 8, !tbaa !98
  %1495 = zext i32 %1494 to i64
  %1496 = icmp ult i64 %1493, %1495
  br i1 %1496, label %1421, label %1497, !llvm.loop !141

1497:                                             ; preds = %1492, %1416
  %1498 = phi i32 [ 0, %1416 ], [ %1494, %1492 ]
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %4) #45
  %1499 = load i32, ptr %350, align 8, !tbaa !38
  %1500 = load i32, ptr %26, align 8, !tbaa !32
  %1501 = add i32 %1499, 7
  %1502 = add i32 %1501, %1500
  %1503 = lshr i32 %1502, 3
  %1504 = zext i32 %1503 to i64
  %1505 = call noalias ptr @malloc(i64 noundef %1504) #50
  store i32 0, ptr %4, align 8, !tbaa !30
  %1506 = getelementptr inbounds %struct.anon.9, ptr %4, i64 0, i32 2
  store ptr null, ptr %1506, align 8, !tbaa !31
  %1507 = icmp eq i32 %1498, 0
  br i1 %1507, label %1796, label %1508

1508:                                             ; preds = %1497
  %1509 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %1510 = getelementptr inbounds %struct.anon.9, ptr %4, i64 0, i32 3
  %1511 = icmp ult i32 %1502, 8
  %1512 = add nsw i32 %1503, -1
  %1513 = zext i32 %1512 to i64
  %1514 = call i32 @llvm.umax.i32(i32 %1503, i32 1)
  %1515 = zext i32 %1514 to i64
  br label %1516

1516:                                             ; preds = %1760, %1508
  %1517 = phi i64 [ 0, %1508 ], [ %1761, %1760 ]
  %1518 = load ptr, ptr %1509, align 8, !tbaa !99
  %1519 = getelementptr inbounds ptr, ptr %1518, i64 %1517
  %1520 = load ptr, ptr %1519, align 8, !tbaa !14
  %1521 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 4
  %1522 = load i32, ptr %1521, align 8, !tbaa !142
  %1523 = icmp eq i32 %1522, 0
  br i1 %1523, label %1684, label %1524

1524:                                             ; preds = %1516
  %1525 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 4, i32 2
  %1526 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 10
  %1527 = load ptr, ptr %1525, align 8, !tbaa !143
  %1528 = zext i32 %1522 to i64
  br label %1529

1529:                                             ; preds = %1544, %1524
  %1530 = phi i64 [ 0, %1524 ], [ %1545, %1544 ]
  %1531 = getelementptr inbounds ptr, ptr %1527, i64 %1530
  %1532 = load ptr, ptr %1531, align 8, !tbaa !14
  %1533 = load ptr, ptr %1532, align 8, !tbaa !144
  %1534 = load i32, ptr %1533, align 8, !tbaa !146
  %1535 = icmp eq i32 %1534, 1
  br i1 %1535, label %1536, label %1544

1536:                                             ; preds = %1529
  %1537 = getelementptr inbounds %struct.Elem, ptr %1533, i64 0, i32 3
  %1538 = load ptr, ptr %1537, align 8, !tbaa !60
  %1539 = load i32, ptr %1538, align 8, !tbaa !34
  %1540 = icmp eq i32 %1539, 3
  br i1 %1540, label %1541, label %1544

1541:                                             ; preds = %1536
  %1542 = load i8, ptr %1526, align 8
  %1543 = or i8 %1542, 4
  store i8 %1543, ptr %1526, align 8
  br label %1544

1544:                                             ; preds = %1541, %1536, %1529
  %1545 = add nuw nsw i64 %1530, 1
  %1546 = icmp eq i64 %1545, %1528
  br i1 %1546, label %1547, label %1529, !llvm.loop !148

1547:                                             ; preds = %1544
  %1548 = load ptr, ptr %1527, align 8, !tbaa !14
  call void @llvm.memset.p0.i64(ptr align 1 %1505, i8 0, i64 %1504, i1 false)
  %1549 = load ptr, ptr %1548, align 8, !tbaa !144
  %1550 = call i32 @elem_symbol(ptr noundef %0, ptr noundef %1549) #43
  %1551 = and i32 %1550, 7
  %1552 = shl nuw nsw i32 1, %1551
  %1553 = sdiv i32 %1550, 8
  %1554 = sext i32 %1553 to i64
  %1555 = getelementptr inbounds i8, ptr %1505, i64 %1554
  %1556 = load i8, ptr %1555, align 1, !tbaa !60
  %1557 = trunc i32 %1552 to i8
  %1558 = or i8 %1556, %1557
  store i8 %1558, ptr %1555, align 1, !tbaa !60
  %1559 = load i32, ptr %1521, align 8, !tbaa !142
  %1560 = icmp ugt i32 %1559, 1
  br i1 %1560, label %1565, label %1561

1561:                                             ; preds = %1565, %1547
  %1562 = phi i32 [ %1559, %1547 ], [ %1583, %1565 ]
  %1563 = phi i32 [ %1550, %1547 ], [ %1581, %1565 ]
  %1564 = icmp eq i32 %1562, 0
  br i1 %1564, label %1667, label %1586

1565:                                             ; preds = %1565, %1547
  %1566 = phi i64 [ %1582, %1565 ], [ 1, %1547 ]
  %1567 = phi i32 [ %1581, %1565 ], [ %1550, %1547 ]
  %1568 = load ptr, ptr %1525, align 8, !tbaa !143
  %1569 = getelementptr inbounds ptr, ptr %1568, i64 %1566
  %1570 = load ptr, ptr %1569, align 8, !tbaa !14
  %1571 = load ptr, ptr %1570, align 8, !tbaa !144
  %1572 = call i32 @elem_symbol(ptr noundef %0, ptr noundef %1571) #43
  %1573 = and i32 %1572, 7
  %1574 = shl nuw nsw i32 1, %1573
  %1575 = sdiv i32 %1572, 8
  %1576 = sext i32 %1575 to i64
  %1577 = getelementptr inbounds i8, ptr %1505, i64 %1576
  %1578 = load i8, ptr %1577, align 1, !tbaa !60
  %1579 = trunc i32 %1574 to i8
  %1580 = or i8 %1578, %1579
  store i8 %1580, ptr %1577, align 1, !tbaa !60
  %1581 = call i32 @llvm.smin.i32(i32 %1572, i32 %1567)
  %1582 = add nuw nsw i64 %1566, 1
  %1583 = load i32, ptr %1521, align 8, !tbaa !142
  %1584 = zext i32 %1583 to i64
  %1585 = icmp ult i64 %1582, %1584
  br i1 %1585, label %1565, label %1561, !llvm.loop !149

1586:                                             ; preds = %1663, %1561
  %1587 = phi i32 [ %1664, %1663 ], [ %1563, %1561 ]
  %1588 = load ptr, ptr %1525, align 8, !tbaa !143
  br label %1589

1589:                                             ; preds = %1650, %1586
  %1590 = phi ptr [ %1588, %1586 ], [ %1651, %1650 ]
  %1591 = phi i64 [ 0, %1586 ], [ %1659, %1650 ]
  %1592 = getelementptr inbounds ptr, ptr %1590, i64 %1591
  %1593 = load ptr, ptr %1592, align 8, !tbaa !14
  %1594 = load ptr, ptr %1593, align 8, !tbaa !144
  %1595 = call i32 @elem_symbol(ptr noundef %0, ptr noundef %1594) #43
  %1596 = sub nsw i32 %1595, %1587
  %1597 = load i32, ptr %4, align 8, !tbaa !30
  %1598 = icmp ugt i32 %1597, %1596
  br i1 %1598, label %1627, label %1599

1599:                                             ; preds = %1624, %1589
  %1600 = phi i32 [ %1625, %1624 ], [ %1597, %1589 ]
  %1601 = load ptr, ptr %1506, align 8, !tbaa !31
  %1602 = icmp eq ptr %1601, null
  br i1 %1602, label %1603, label %1607

1603:                                             ; preds = %1599
  store ptr %1510, ptr %1506, align 8, !tbaa !31
  %1604 = add i32 %1600, 1
  store i32 %1604, ptr %4, align 8, !tbaa !30
  %1605 = zext i32 %1600 to i64
  %1606 = getelementptr inbounds i64, ptr %1510, i64 %1605
  store i64 0, ptr %1606, align 8, !tbaa !150
  br label %1624

1607:                                             ; preds = %1599
  %1608 = icmp eq ptr %1601, %1510
  br i1 %1608, label %1609, label %1615

1609:                                             ; preds = %1607
  %1610 = icmp ult i32 %1600, 3
  br i1 %1610, label %1611, label %1622

1611:                                             ; preds = %1609
  %1612 = add nuw nsw i32 %1600, 1
  store i32 %1612, ptr %4, align 8, !tbaa !30
  %1613 = zext i32 %1600 to i64
  %1614 = getelementptr inbounds i64, ptr %1510, i64 %1613
  store i64 0, ptr %1614, align 8, !tbaa !150
  br label %1624

1615:                                             ; preds = %1607
  %1616 = and i32 %1600, 7
  %1617 = icmp eq i32 %1616, 0
  br i1 %1617, label %1622, label %1618

1618:                                             ; preds = %1615
  %1619 = add i32 %1600, 1
  store i32 %1619, ptr %4, align 8, !tbaa !30
  %1620 = zext i32 %1600 to i64
  %1621 = getelementptr inbounds i64, ptr %1601, i64 %1620
  store i64 0, ptr %1621, align 8, !tbaa !150
  br label %1624

1622:                                             ; preds = %1615, %1609
  call void @vec_add_internal(ptr noundef nonnull %4, ptr noundef null) #43
  %1623 = load i32, ptr %4, align 8, !tbaa !30
  br label %1624

1624:                                             ; preds = %1622, %1618, %1611, %1603
  %1625 = phi i32 [ %1623, %1622 ], [ %1619, %1618 ], [ %1612, %1611 ], [ %1604, %1603 ]
  %1626 = icmp ugt i32 %1625, %1596
  br i1 %1626, label %1627, label %1599, !llvm.loop !152

1627:                                             ; preds = %1624, %1589
  %1628 = load ptr, ptr %1506, align 8, !tbaa !31
  %1629 = sext i32 %1596 to i64
  %1630 = getelementptr inbounds i64, ptr %1628, i64 %1629
  %1631 = load i64, ptr %1630, align 8, !tbaa !150
  %1632 = icmp eq i64 %1631, 0
  br i1 %1632, label %1650, label %1633

1633:                                             ; preds = %1627
  %.lcssa = phi i64 [ %1591, %1627 ]
  %1634 = and i64 %.lcssa, 4294967295
  %1635 = icmp eq i64 %1634, 0
  br i1 %1635, label %1663, label %1636

1636:                                             ; preds = %1636, %1633
  %1637 = phi i64 [ %1638, %1636 ], [ %.lcssa, %1633 ]
  %1638 = add nsw i64 %1637, -1
  %1639 = load ptr, ptr %1525, align 8, !tbaa !143
  %1640 = and i64 %1638, 4294967295
  %1641 = getelementptr inbounds ptr, ptr %1639, i64 %1640
  %1642 = load ptr, ptr %1641, align 8, !tbaa !14
  %1643 = load ptr, ptr %1642, align 8, !tbaa !144
  %1644 = call i32 @elem_symbol(ptr noundef %0, ptr noundef %1643) #43
  %1645 = sub nsw i32 %1644, %1587
  %1646 = load ptr, ptr %1506, align 8, !tbaa !31
  %1647 = sext i32 %1645 to i64
  %1648 = getelementptr inbounds i64, ptr %1646, i64 %1647
  store i64 0, ptr %1648, align 8, !tbaa !150
  %1649 = icmp sgt i64 %1637, 1
  br i1 %1649, label %1636, label %1663, !llvm.loop !153

1650:                                             ; preds = %1627
  %1651 = load ptr, ptr %1525, align 8, !tbaa !143
  %1652 = getelementptr inbounds ptr, ptr %1651, i64 %1591
  %1653 = load ptr, ptr %1652, align 8, !tbaa !14
  %1654 = getelementptr inbounds %struct.Goto, ptr %1653, i64 0, i32 1
  %1655 = load ptr, ptr %1654, align 8, !tbaa !154
  %1656 = load i32, ptr %1655, align 8, !tbaa !50
  %1657 = add i32 %1656, 1
  %1658 = zext i32 %1657 to i64
  store i64 %1658, ptr %1630, align 8, !tbaa !150
  %1659 = add nuw nsw i64 %1591, 1
  %1660 = load i32, ptr %1521, align 8, !tbaa !142
  %1661 = zext i32 %1660 to i64
  %1662 = icmp ult i64 %1659, %1661
  br i1 %1662, label %1589, label %1667, !llvm.loop !155

1663:                                             ; preds = %1636, %1633
  %1664 = add nsw i32 %1587, -1
  %1665 = load i32, ptr %1521, align 8, !tbaa !142
  %1666 = icmp eq i32 %1665, 0
  br i1 %1666, label %1667, label %1586, !llvm.loop !156

1667:                                             ; preds = %1663, %1650, %1561
  %1668 = phi i32 [ %1563, %1561 ], [ %1587, %1650 ], [ %1664, %1663 ]
  %1669 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 12
  store i32 %1668, ptr %1669, align 8, !tbaa !157
  %1670 = trunc i64 %1517 to i32
  %1671 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.112, i32 noundef %1670, ptr noundef %2) #44
  br i1 %1511, label %1682, label %1672

1672:                                             ; preds = %1672, %1667
  %1673 = phi i64 [ %1680, %1672 ], [ 0, %1667 ]
  %1674 = getelementptr inbounds i8, ptr %1505, i64 %1673
  %1675 = load i8, ptr %1674, align 1, !tbaa !60
  %1676 = zext i8 %1675 to i32
  %1677 = icmp eq i64 %1673, %1513
  %1678 = select i1 %1677, ptr @.str.23.58, ptr @.str.24.59
  %1679 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.113, i32 noundef %1676, ptr noundef nonnull %1678) #44
  %1680 = add nuw nsw i64 %1673, 1
  %1681 = icmp eq i64 %1680, %1515
  br i1 %1681, label %1682, label %1672, !llvm.loop !158

1682:                                             ; preds = %1672, %1667
  %1683 = call i64 @fwrite(ptr nonnull @.str.16.90, i64 3, i64 1, ptr %22)
  br label %1686

1684:                                             ; preds = %1516
  %1685 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 12
  store i32 -2147483647, ptr %1685, align 8, !tbaa !157
  br label %1686

1686:                                             ; preds = %1684, %1682
  %1687 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 6
  %1688 = load i32, ptr %1687, align 8, !tbaa !159
  %1689 = icmp eq i32 %1688, 0
  br i1 %1689, label %1721, label %1690

1690:                                             ; preds = %1686
  %1691 = trunc i64 %1517 to i32
  %1692 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.114, i32 noundef %1691, ptr noundef %2) #44
  %1693 = load i32, ptr %1687, align 8, !tbaa !159
  %1694 = icmp eq i32 %1693, 0
  br i1 %1694, label %1719, label %1695

1695:                                             ; preds = %1690
  %1696 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 6, i32 2
  br label %1697

1697:                                             ; preds = %1697, %1695
  %1698 = phi i64 [ 0, %1695 ], [ %1715, %1697 ]
  %1699 = phi i32 [ %1693, %1695 ], [ %1716, %1697 ]
  %1700 = load ptr, ptr %1696, align 8, !tbaa !160
  %1701 = getelementptr inbounds ptr, ptr %1700, i64 %1698
  %1702 = load ptr, ptr %1701, align 8, !tbaa !14
  %1703 = getelementptr inbounds %struct.Action, ptr %1702, i64 0, i32 2
  %1704 = load ptr, ptr %1703, align 8, !tbaa !161
  %1705 = getelementptr inbounds %struct.Rule, ptr %1704, i64 0, i32 12
  %1706 = load ptr, ptr %1705, align 8, !tbaa !85
  %1707 = icmp eq ptr %1706, null
  %1708 = select i1 %1707, ptr %1704, ptr %1706
  %1709 = load i32, ptr %1708, align 8, !tbaa !71
  %1710 = add i32 %1699, -1
  %1711 = zext i32 %1710 to i64
  %1712 = icmp eq i64 %1698, %1711
  %1713 = select i1 %1712, ptr @.str.23.58, ptr @.str.24.59
  %1714 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.115, i32 noundef %1709, ptr noundef %2, ptr noundef nonnull %1713) #44
  %1715 = add nuw nsw i64 %1698, 1
  %1716 = load i32, ptr %1687, align 8, !tbaa !159
  %1717 = zext i32 %1716 to i64
  %1718 = icmp ult i64 %1715, %1717
  br i1 %1718, label %1697, label %1719, !llvm.loop !162

1719:                                             ; preds = %1697, %1690
  %1720 = call i64 @fwrite(ptr nonnull @.str.16.90, i64 3, i64 1, ptr %22)
  br label %1721

1721:                                             ; preds = %1719, %1686
  %1722 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 7
  %1723 = load i32, ptr %1722, align 8, !tbaa !163
  %1724 = icmp eq i32 %1723, 0
  br i1 %1724, label %1760, label %1725

1725:                                             ; preds = %1721
  %1726 = trunc i64 %1517 to i32
  %1727 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.116, i32 noundef %1726, ptr noundef %2) #44
  %1728 = load i32, ptr %1722, align 8, !tbaa !163
  %1729 = icmp eq i32 %1728, 0
  br i1 %1729, label %1758, label %1730

1730:                                             ; preds = %1725
  %1731 = getelementptr inbounds %struct.State, ptr %1520, i64 0, i32 7, i32 2
  br label %1732

1732:                                             ; preds = %1732, %1730
  %1733 = phi i64 [ 0, %1730 ], [ %1754, %1732 ]
  %1734 = phi i32 [ %1728, %1730 ], [ %1755, %1732 ]
  %1735 = load ptr, ptr %1731, align 8, !tbaa !164
  %1736 = getelementptr inbounds ptr, ptr %1735, i64 %1733
  %1737 = load ptr, ptr %1736, align 8, !tbaa !14
  %1738 = load i32, ptr %1737, align 8, !tbaa !165
  %1739 = getelementptr inbounds %struct.Hint, ptr %1737, i64 0, i32 1
  %1740 = load ptr, ptr %1739, align 8, !tbaa !167
  %1741 = load i32, ptr %1740, align 8, !tbaa !50
  %1742 = getelementptr inbounds %struct.Hint, ptr %1737, i64 0, i32 2
  %1743 = load ptr, ptr %1742, align 8, !tbaa !168
  %1744 = getelementptr inbounds %struct.Rule, ptr %1743, i64 0, i32 12
  %1745 = load ptr, ptr %1744, align 8, !tbaa !85
  %1746 = icmp eq ptr %1745, null
  %1747 = select i1 %1746, ptr %1743, ptr %1745
  %1748 = load i32, ptr %1747, align 8, !tbaa !71
  %1749 = add i32 %1734, -1
  %1750 = zext i32 %1749 to i64
  %1751 = icmp eq i64 %1733, %1750
  %1752 = select i1 %1751, ptr @.str.23.58, ptr @.str.24.59
  %1753 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.117, i32 noundef %1738, i32 noundef %1741, i32 noundef %1748, ptr noundef %2, ptr noundef nonnull %1752) #44
  %1754 = add nuw nsw i64 %1733, 1
  %1755 = load i32, ptr %1722, align 8, !tbaa !163
  %1756 = zext i32 %1755 to i64
  %1757 = icmp ult i64 %1754, %1756
  br i1 %1757, label %1732, label %1758, !llvm.loop !169

1758:                                             ; preds = %1732, %1725
  %1759 = call i64 @fwrite(ptr nonnull @.str.16.90, i64 3, i64 1, ptr %22)
  br label %1760

1760:                                             ; preds = %1758, %1721
  %1761 = add nuw nsw i64 %1517, 1
  %1762 = load i32, ptr %769, align 8, !tbaa !98
  %1763 = zext i32 %1762 to i64
  %1764 = icmp ult i64 %1761, %1763
  br i1 %1764, label %1516, label %1765, !llvm.loop !170

1765:                                             ; preds = %1760
  %1766 = load i32, ptr %4, align 8, !tbaa !30
  %1767 = icmp eq i32 %1766, 0
  br i1 %1767, label %1796, label %1768

1768:                                             ; preds = %1765
  %1769 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.118, ptr noundef %2, i32 noundef %1766) #44
  %1770 = load i32, ptr %4, align 8, !tbaa !30
  %1771 = icmp eq i32 %1770, 0
  br i1 %1771, label %1794, label %1772

1772:                                             ; preds = %1789, %1768
  %1773 = phi i64 [ %1790, %1789 ], [ 0, %1768 ]
  %1774 = load ptr, ptr %1506, align 8, !tbaa !31
  %1775 = getelementptr inbounds i64, ptr %1774, i64 %1773
  %1776 = load i64, ptr %1775, align 8, !tbaa !150
  %1777 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.30.66, i64 noundef %1776) #44
  %1778 = load i32, ptr %4, align 8, !tbaa !30
  %1779 = add i32 %1778, -1
  %1780 = zext i32 %1779 to i64
  %1781 = icmp eq i64 %1773, %1780
  br i1 %1781, label %1784, label %1782

1782:                                             ; preds = %1772
  %1783 = call i32 @fputc(i32 44, ptr %22)
  br label %1784

1784:                                             ; preds = %1782, %1772
  %1785 = and i64 %1773, 15
  %1786 = icmp eq i64 %1785, 15
  br i1 %1786, label %1787, label %1789

1787:                                             ; preds = %1784
  %1788 = call i32 @fputc(i32 10, ptr %22)
  br label %1789

1789:                                             ; preds = %1787, %1784
  %1790 = add nuw nsw i64 %1773, 1
  %1791 = load i32, ptr %4, align 8, !tbaa !30
  %1792 = zext i32 %1791 to i64
  %1793 = icmp ult i64 %1790, %1792
  br i1 %1793, label %1772, label %1794, !llvm.loop !171

1794:                                             ; preds = %1789, %1768
  %1795 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %1798

1796:                                             ; preds = %1765, %1497
  %1797 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.119, ptr noundef %2) #44
  br label %1798

1798:                                             ; preds = %1796, %1794
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %4) #45
  %1799 = load i32, ptr %769, align 8, !tbaa !98
  %1800 = icmp eq i32 %1799, 0
  br i1 %1800, label %1871, label %1801

1801:                                             ; preds = %1798
  %1802 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %1803

1803:                                             ; preds = %1866, %1801
  %1804 = phi i64 [ 0, %1801 ], [ %1867, %1866 ]
  %1805 = load ptr, ptr %1802, align 8, !tbaa !99
  %1806 = getelementptr inbounds ptr, ptr %1805, i64 %1804
  %1807 = load ptr, ptr %1806, align 8, !tbaa !14
  %1808 = getelementptr inbounds %struct.State, ptr %1807, i64 0, i32 8
  %1809 = load i32, ptr %1808, align 8, !tbaa !172
  %1810 = icmp eq i32 %1809, 0
  br i1 %1810, label %1866, label %1811

1811:                                             ; preds = %1803
  %1812 = call ptr @set_add_fn(ptr noundef nonnull %17, ptr noundef nonnull %1807, ptr noundef nonnull @er_hint_hash_fns) #43
  %1813 = icmp eq ptr %1812, %1807
  br i1 %1813, label %1814, label %1866

1814:                                             ; preds = %1811
  %1815 = load i32, ptr %1808, align 8, !tbaa !172
  %1816 = icmp ugt i32 %1815, 1
  %1817 = select i1 %1816, ptr @.str.4.89, ptr @.str.23.58
  %1818 = trunc i64 %1804 to i32
  %1819 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.120, i32 noundef %1818, ptr noundef %2, ptr noundef nonnull %1817) #44
  %1820 = load i32, ptr %1808, align 8, !tbaa !172
  %1821 = icmp eq i32 %1820, 0
  br i1 %1821, label %1864, label %1822

1822:                                             ; preds = %1814
  %1823 = getelementptr inbounds %struct.State, ptr %1807, i64 0, i32 8, i32 2
  br label %1824

1824:                                             ; preds = %1824, %1822
  %1825 = phi i64 [ 0, %1822 ], [ %1860, %1824 ]
  %1826 = load ptr, ptr %1823, align 8, !tbaa !173
  %1827 = getelementptr inbounds ptr, ptr %1826, i64 %1825
  %1828 = load ptr, ptr %1827, align 8, !tbaa !14
  %1829 = getelementptr inbounds %struct.Hint, ptr %1828, i64 0, i32 2
  %1830 = load ptr, ptr %1829, align 8, !tbaa !168
  %1831 = getelementptr inbounds %struct.Rule, ptr %1830, i64 0, i32 6
  %1832 = getelementptr inbounds %struct.Rule, ptr %1830, i64 0, i32 6, i32 2
  %1833 = load ptr, ptr %1832, align 8, !tbaa !174
  %1834 = load i32, ptr %1831, align 8, !tbaa !75
  %1835 = add i32 %1834, -1
  %1836 = zext i32 %1835 to i64
  %1837 = getelementptr inbounds ptr, ptr %1833, i64 %1836
  %1838 = load ptr, ptr %1837, align 8, !tbaa !14
  %1839 = getelementptr inbounds %struct.Elem, ptr %1838, i64 0, i32 3
  %1840 = load ptr, ptr %1839, align 8, !tbaa !60
  %1841 = getelementptr inbounds %struct.Term, ptr %1840, i64 0, i32 5
  %1842 = load ptr, ptr %1841, align 8, !tbaa !40
  %1843 = call ptr @escape_string(ptr noundef %1842) #43
  %1844 = load ptr, ptr %1823, align 8, !tbaa !173
  %1845 = getelementptr inbounds ptr, ptr %1844, i64 %1825
  %1846 = load ptr, ptr %1845, align 8, !tbaa !14
  %1847 = load i32, ptr %1846, align 8, !tbaa !165
  %1848 = getelementptr inbounds %struct.Hint, ptr %1846, i64 0, i32 2
  %1849 = load ptr, ptr %1848, align 8, !tbaa !168
  %1850 = getelementptr inbounds %struct.Rule, ptr %1849, i64 0, i32 1
  %1851 = load ptr, ptr %1850, align 8, !tbaa !68
  %1852 = getelementptr inbounds %struct.Production, ptr %1851, i64 0, i32 3
  %1853 = load i32, ptr %1852, align 8, !tbaa !70
  %1854 = load i32, ptr %1808, align 8, !tbaa !172
  %1855 = add i32 %1854, -1
  %1856 = zext i32 %1855 to i64
  %1857 = icmp eq i64 %1825, %1856
  %1858 = select i1 %1857, ptr @.str.23.58, ptr @.str.82
  %1859 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.121, i32 noundef %1847, i32 noundef %1853, ptr noundef %1843, ptr noundef nonnull %1858) #44
  call void @free(ptr noundef %1843) #43
  %1860 = add nuw nsw i64 %1825, 1
  %1861 = load i32, ptr %1808, align 8, !tbaa !172
  %1862 = zext i32 %1861 to i64
  %1863 = icmp ult i64 %1860, %1862
  br i1 %1863, label %1824, label %1864, !llvm.loop !175

1864:                                             ; preds = %1824, %1814
  %1865 = call i64 @fwrite(ptr nonnull @.str.16.90, i64 3, i64 1, ptr %22)
  br label %1866

1866:                                             ; preds = %1864, %1811, %1803
  %1867 = add nuw nsw i64 %1804, 1
  %1868 = load i32, ptr %769, align 8, !tbaa !98
  %1869 = zext i32 %1868 to i64
  %1870 = icmp ult i64 %1867, %1869
  br i1 %1870, label %1803, label %1871, !llvm.loop !176

1871:                                             ; preds = %1866, %1798
  %1872 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.122, ptr noundef %2) #44
  %1873 = load i32, ptr %769, align 8, !tbaa !98
  %1874 = icmp eq i32 %1873, 0
  br i1 %1874, label %2083, label %1875

1875:                                             ; preds = %1871
  %1876 = call i64 @fwrite(ptr nonnull @.str.53, i64 2, i64 1, ptr %22)
  %1877 = load i32, ptr %769, align 8, !tbaa !98
  %1878 = icmp eq i32 %1877, 0
  br i1 %1878, label %2081, label %1879

1879:                                             ; preds = %1875
  %1880 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %1881 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 4
  br label %1882

1882:                                             ; preds = %2070, %1879
  %1883 = phi i64 [ 0, %1879 ], [ %2077, %2070 ]
  %1884 = load ptr, ptr %1880, align 8, !tbaa !99
  %1885 = getelementptr inbounds ptr, ptr %1884, i64 %1883
  %1886 = load ptr, ptr %1885, align 8, !tbaa !14
  %1887 = call i64 @fwrite(ptr nonnull @.str.123, i64 2, i64 1, ptr %22)
  %1888 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 4
  %1889 = load i32, ptr %1888, align 8, !tbaa !142
  %1890 = icmp eq i32 %1889, 0
  br i1 %1890, label %1894, label %1891

1891:                                             ; preds = %1882
  %1892 = trunc i64 %1883 to i32
  %1893 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.124, i32 noundef %1892, ptr noundef %2) #44
  br label %1896

1894:                                             ; preds = %1882
  %1895 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %1896

1896:                                             ; preds = %1894, %1891
  %1897 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 12
  %1898 = load i32, ptr %1897, align 8, !tbaa !157
  %1899 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.7.92, i32 noundef %1898) #44
  %1900 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 6
  %1901 = load i32, ptr %1900, align 8, !tbaa !159
  %1902 = icmp eq i32 %1901, 0
  br i1 %1902, label %1906, label %1903

1903:                                             ; preds = %1896
  %1904 = trunc i64 %1883 to i32
  %1905 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.125, i32 noundef %1901, i32 noundef %1904, ptr noundef %2) #44
  br label %1908

1906:                                             ; preds = %1896
  %1907 = call i64 @fwrite(ptr nonnull @.str.126, i64 12, i64 1, ptr %22)
  br label %1908

1908:                                             ; preds = %1906, %1903
  %1909 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 7
  %1910 = load i32, ptr %1909, align 8, !tbaa !163
  %1911 = icmp eq i32 %1910, 0
  br i1 %1911, label %1915, label %1912

1912:                                             ; preds = %1908
  %1913 = trunc i64 %1883 to i32
  %1914 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.127, i32 noundef %1910, i32 noundef %1913, ptr noundef %2) #44
  br label %1917

1915:                                             ; preds = %1908
  %1916 = call i64 @fwrite(ptr nonnull @.str.126, i64 12, i64 1, ptr %22)
  br label %1917

1917:                                             ; preds = %1915, %1912
  %1918 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 8
  %1919 = load i32, ptr %1918, align 8, !tbaa !172
  %1920 = icmp eq i32 %1919, 0
  br i1 %1920, label %1926, label %1921

1921:                                             ; preds = %1917
  %1922 = call ptr @set_add_fn(ptr noundef nonnull %17, ptr noundef nonnull %1886, ptr noundef nonnull @er_hint_hash_fns) #43
  %1923 = load i32, ptr %1918, align 8, !tbaa !172
  %1924 = load i32, ptr %1922, align 8, !tbaa !50
  %1925 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.128, i32 noundef %1923, i32 noundef %1924, ptr noundef %2) #44
  br label %1928

1926:                                             ; preds = %1917
  %1927 = call i64 @fwrite(ptr nonnull @.str.126, i64 12, i64 1, ptr %22)
  br label %1928

1928:                                             ; preds = %1926, %1921
  %1929 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 5
  %1930 = load i32, ptr %1929, align 8, !tbaa !103
  %1931 = icmp eq i32 %1930, 0
  br i1 %1931, label %1942, label %1932

1932:                                             ; preds = %1928
  %1933 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 13
  %1934 = load ptr, ptr %1933, align 8, !tbaa !104
  %1935 = icmp eq ptr %1934, null
  %1936 = trunc i64 %1883 to i32
  br i1 %1935, label %1939, label %1937

1937:                                             ; preds = %1932
  %1938 = load i32, ptr %1934, align 8, !tbaa !50
  br label %1939

1939:                                             ; preds = %1937, %1932
  %1940 = phi i32 [ %1938, %1937 ], [ %1936, %1932 ]
  %1941 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.129, i32 noundef %1940, ptr noundef %2) #44
  br label %1957

1942:                                             ; preds = %1928
  %1943 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 10
  %1944 = load i8, ptr %1943, align 8
  %1945 = and i8 %1944, 2
  %1946 = icmp eq i8 %1945, 0
  br i1 %1946, label %1947, label %1953

1947:                                             ; preds = %1942
  %1948 = load ptr, ptr %1881, align 8, !tbaa !177
  %1949 = icmp eq ptr %1948, null
  %1950 = and i8 %1944, 4
  %1951 = icmp eq i8 %1950, 0
  %1952 = or i1 %1951, %1949
  br i1 %1952, label %1955, label %1953

1953:                                             ; preds = %1947, %1942
  %1954 = call i64 @fwrite(ptr nonnull @.str.130, i64 15, i64 1, ptr %22)
  br label %1957

1955:                                             ; preds = %1947
  %1956 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %1957

1957:                                             ; preds = %1955, %1953, %1939
  %1958 = load ptr, ptr %1881, align 8, !tbaa !177
  %1959 = icmp eq ptr %1958, null
  %1960 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 10
  %1961 = load i8, ptr %1960, align 8
  br i1 %1959, label %1969, label %1962

1962:                                             ; preds = %1957
  %1963 = and i8 %1961, 4
  %1964 = icmp eq i8 %1963, 0
  br i1 %1964, label %1967, label %1965

1965:                                             ; preds = %1962
  %1966 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.11.93, ptr noundef nonnull %1958) #44
  br label %1977

1967:                                             ; preds = %1962
  %1968 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %1977

1969:                                             ; preds = %1957
  %1970 = and i8 %1961, 2
  %1971 = icmp eq i8 %1970, 0
  br i1 %1971, label %1975, label %1972

1972:                                             ; preds = %1969
  %1973 = trunc i64 %1883 to i32
  %1974 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.131, i32 noundef %1973, ptr noundef %2) #44
  br label %1977

1975:                                             ; preds = %1969
  %1976 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %1977

1977:                                             ; preds = %1975, %1972, %1967, %1965
  %1978 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 9
  %1979 = load i32, ptr %1978, align 8, !tbaa !100
  %1980 = icmp eq i32 %1979, 0
  br i1 %1980, label %1991, label %1981

1981:                                             ; preds = %1977
  %1982 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 13
  %1983 = load ptr, ptr %1982, align 8, !tbaa !104
  %1984 = icmp eq ptr %1983, null
  %1985 = trunc i64 %1883 to i32
  br i1 %1984, label %1988, label %1986

1986:                                             ; preds = %1981
  %1987 = load i32, ptr %1983, align 8, !tbaa !50
  br label %1988

1988:                                             ; preds = %1986, %1981
  %1989 = phi i32 [ %1987, %1986 ], [ %1985, %1981 ]
  %1990 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.132, i32 noundef %1989, ptr noundef %2) #44
  br label %1993

1991:                                             ; preds = %1977
  %1992 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %1993

1993:                                             ; preds = %1991, %1988
  %1994 = load i32, ptr %1978, align 8, !tbaa !100
  %1995 = icmp ult i32 %1994, 255
  br i1 %1995, label %1996, label %2000

1996:                                             ; preds = %1993
  %1997 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 9, i32 1
  %1998 = load i32, ptr %1997, align 8, !tbaa !109
  %1999 = icmp ult i32 %1998, 255
  br i1 %1999, label %2009, label %2005

2000:                                             ; preds = %1993
  %2001 = icmp ult i32 %1994, 32384
  br i1 %2001, label %2002, label %2008

2002:                                             ; preds = %2000
  %2003 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 9, i32 1
  %2004 = load i32, ptr %2003, align 8, !tbaa !109
  br label %2005

2005:                                             ; preds = %2002, %1996
  %2006 = phi i32 [ %2004, %2002 ], [ %1998, %1996 ]
  %2007 = icmp ult i32 %2006, 32384
  br i1 %2007, label %2009, label %2008

2008:                                             ; preds = %2005, %2000
  br label %2009

2009:                                             ; preds = %2008, %2005, %1996
  %2010 = phi ptr [ @.str.102, %2008 ], [ @.str.101, %2005 ], [ @.str.100, %1996 ]
  %2011 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.133, ptr noundef nonnull %2010) #44
  %2012 = load i8, ptr %1960, align 8
  %2013 = and i8 %2012, 1
  %2014 = icmp eq i8 %2013, 0
  %2015 = select i1 %2014, ptr @.str.135, ptr @.str.134
  %2016 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull %2015) #44
  %2017 = load i8, ptr %1960, align 8
  %2018 = lshr i8 %2017, 3
  %2019 = and i8 %2018, 3
  %2020 = zext i8 %2019 to i64
  %2021 = getelementptr inbounds [4 x ptr], ptr @scan_kind_strings, i64 0, i64 %2020
  %2022 = load ptr, ptr %2021, align 8, !tbaa !14
  %2023 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.11.93, ptr noundef %2022) #44
  %2024 = load i8, ptr %1960, align 8
  %2025 = and i8 %2024, 24
  %2026 = icmp eq i8 %2025, 8
  br i1 %2026, label %2040, label %2027

2027:                                             ; preds = %2009
  %2028 = load i32, ptr %1978, align 8, !tbaa !100
  %2029 = icmp eq i32 %2028, 0
  br i1 %2029, label %2040, label %2030

2030:                                             ; preds = %2027
  %2031 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 13
  %2032 = load ptr, ptr %2031, align 8, !tbaa !104
  %2033 = icmp eq ptr %2032, null
  %2034 = trunc i64 %1883 to i32
  br i1 %2033, label %2037, label %2035

2035:                                             ; preds = %2030
  %2036 = load i32, ptr %2032, align 8, !tbaa !50
  br label %2037

2037:                                             ; preds = %2035, %2030
  %2038 = phi i32 [ %2036, %2035 ], [ %2034, %2030 ]
  %2039 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.136, i32 noundef %2038, ptr noundef %2) #44
  br label %2042

2040:                                             ; preds = %2027, %2009
  %2041 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %2042

2042:                                             ; preds = %2040, %2037
  %2043 = load i8, ptr %1960, align 8
  %2044 = and i8 %2043, 24
  %2045 = icmp eq i8 %2044, 8
  br i1 %2045, label %2059, label %2046

2046:                                             ; preds = %2042
  %2047 = load i32, ptr %1978, align 8, !tbaa !100
  %2048 = icmp eq i32 %2047, 0
  br i1 %2048, label %2059, label %2049

2049:                                             ; preds = %2046
  %2050 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 13
  %2051 = load ptr, ptr %2050, align 8, !tbaa !104
  %2052 = icmp eq ptr %2051, null
  %2053 = trunc i64 %1883 to i32
  br i1 %2052, label %2056, label %2054

2054:                                             ; preds = %2049
  %2055 = load i32, ptr %2051, align 8, !tbaa !50
  br label %2056

2056:                                             ; preds = %2054, %2049
  %2057 = phi i32 [ %2055, %2054 ], [ %2053, %2049 ]
  %2058 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.137, i32 noundef %2057, ptr noundef %2) #44
  br label %2061

2059:                                             ; preds = %2046, %2042
  %2060 = call i64 @fwrite(ptr nonnull @.str.138, i64 18, i64 1, ptr %22)
  br label %2061

2061:                                             ; preds = %2059, %2056
  %2062 = getelementptr inbounds %struct.State, ptr %1886, i64 0, i32 14
  %2063 = load ptr, ptr %2062, align 8, !tbaa !178
  %2064 = icmp eq ptr %2063, null
  br i1 %2064, label %2068, label %2065

2065:                                             ; preds = %2061
  %2066 = load i32, ptr %2063, align 8, !tbaa !50
  %2067 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.30.66, i32 noundef %2066) #44
  br label %2070

2068:                                             ; preds = %2061
  %2069 = call i64 @fwrite(ptr nonnull @.str.139, i64 2, i64 1, ptr %22)
  br label %2070

2070:                                             ; preds = %2068, %2065
  %2071 = load i32, ptr %769, align 8, !tbaa !98
  %2072 = add i32 %2071, -1
  %2073 = zext i32 %2072 to i64
  %2074 = icmp eq i64 %1883, %2073
  %2075 = select i1 %2074, ptr @.str.23.58, ptr @.str.84
  %2076 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.140, ptr noundef nonnull %2075) #44
  %2077 = add nuw nsw i64 %1883, 1
  %2078 = load i32, ptr %769, align 8, !tbaa !98
  %2079 = zext i32 %2078 to i64
  %2080 = icmp ult i64 %2077, %2079
  br i1 %2080, label %1882, label %2081, !llvm.loop !179

2081:                                             ; preds = %2070, %1875
  %2082 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %2085

2083:                                             ; preds = %1871
  %2084 = call i64 @fwrite(ptr nonnull @.str.141, i64 28, i64 1, ptr %22)
  br label %2085

2085:                                             ; preds = %2083, %2081
  %2086 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.145, ptr noundef %2) #44
  %2087 = load i32, ptr %350, align 8, !tbaa !38
  %2088 = icmp eq i32 %2087, 0
  br i1 %2088, label %2091, label %2089

2089:                                             ; preds = %2085
  %2090 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  br label %2096

2091:                                             ; preds = %2096, %2085
  %2092 = load i32, ptr %26, align 8, !tbaa !32
  %2093 = icmp eq i32 %2092, 0
  br i1 %2093, label %2139, label %2094

2094:                                             ; preds = %2091
  %2095 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  br label %2116

2096:                                             ; preds = %2096, %2089
  %2097 = phi i64 [ 0, %2089 ], [ %2112, %2096 ]
  %2098 = load ptr, ptr %2090, align 8, !tbaa !45
  %2099 = getelementptr inbounds ptr, ptr %2098, i64 %2097
  %2100 = load ptr, ptr %2099, align 8, !tbaa !14
  %2101 = getelementptr inbounds %struct.Production, ptr %2100, i64 0, i32 4
  %2102 = load i8, ptr %2101, align 4
  %2103 = and i8 %2102, 28
  %2104 = icmp ne i8 %2103, 0
  %2105 = zext i1 %2104 to i64
  %2106 = getelementptr inbounds [2 x ptr], ptr @d_internal, i64 0, i64 %2105
  %2107 = load ptr, ptr %2106, align 8, !tbaa !14
  %2108 = load ptr, ptr %2100, align 8, !tbaa !48
  %2109 = getelementptr inbounds %struct.Production, ptr %2100, i64 0, i32 1
  %2110 = load i32, ptr %2109, align 8, !tbaa !180
  %2111 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.146, ptr noundef %2107, ptr noundef %2108, i32 noundef %2110) #44
  %2112 = add nuw nsw i64 %2097, 1
  %2113 = load i32, ptr %350, align 8, !tbaa !38
  %2114 = zext i32 %2113 to i64
  %2115 = icmp ult i64 %2112, %2114
  br i1 %2115, label %2096, label %2091, !llvm.loop !181

2116:                                             ; preds = %2116, %2094
  %2117 = phi i64 [ 0, %2094 ], [ %2135, %2116 ]
  %2118 = load ptr, ptr %2095, align 8, !tbaa !33
  %2119 = getelementptr inbounds ptr, ptr %2118, i64 %2117
  %2120 = load ptr, ptr %2119, align 8, !tbaa !14
  %2121 = getelementptr inbounds %struct.Term, ptr %2120, i64 0, i32 5
  %2122 = load ptr, ptr %2121, align 8, !tbaa !40
  %2123 = call ptr @escape_string(ptr noundef %2122) #43
  %2124 = call ptr @escape_string(ptr noundef %2123) #43
  %2125 = load ptr, ptr %2095, align 8, !tbaa !33
  %2126 = getelementptr inbounds ptr, ptr %2125, i64 %2117
  %2127 = load ptr, ptr %2126, align 8, !tbaa !14
  %2128 = load i32, ptr %2127, align 8, !tbaa !34
  %2129 = zext i32 %2128 to i64
  %2130 = getelementptr inbounds [4 x ptr], ptr @d_symbol, i64 0, i64 %2129
  %2131 = load ptr, ptr %2130, align 8, !tbaa !14
  %2132 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2124) #48
  %2133 = trunc i64 %2132 to i32
  %2134 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.146, ptr noundef %2131, ptr noundef %2124, i32 noundef %2133) #44
  call void @free(ptr noundef %2123) #43
  call void @free(ptr noundef %2124) #43
  %2135 = add nuw nsw i64 %2117, 1
  %2136 = load i32, ptr %26, align 8, !tbaa !32
  %2137 = zext i32 %2136 to i64
  %2138 = icmp ult i64 %2135, %2137
  br i1 %2138, label %2116, label %2139, !llvm.loop !182

2139:                                             ; preds = %2116, %2091
  %2140 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  %2141 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8
  %2142 = load i32, ptr %2141, align 8, !tbaa !183
  %2143 = icmp eq i32 %2142, 0
  br i1 %2143, label %2174, label %2144

2144:                                             ; preds = %2139
  %2145 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.153, ptr noundef %2) #44
  %2146 = load i32, ptr %2141, align 8, !tbaa !183
  %2147 = icmp eq i32 %2146, 0
  br i1 %2147, label %2172, label %2148

2148:                                             ; preds = %2144
  %2149 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8, i32 2
  br label %2150

2150:                                             ; preds = %2150, %2148
  %2151 = phi i64 [ 0, %2148 ], [ %2168, %2150 ]
  %2152 = phi i32 [ %2146, %2148 ], [ %2169, %2150 ]
  %2153 = load ptr, ptr %2149, align 8, !tbaa !184
  %2154 = getelementptr inbounds ptr, ptr %2153, i64 %2151
  %2155 = load ptr, ptr %2154, align 8, !tbaa !14
  %2156 = load ptr, ptr %2155, align 8, !tbaa !185
  %2157 = getelementptr inbounds %struct.D_Pass, ptr %2155, i64 0, i32 1
  %2158 = load i32, ptr %2157, align 8, !tbaa !187
  %2159 = getelementptr inbounds %struct.D_Pass, ptr %2155, i64 0, i32 2
  %2160 = load i32, ptr %2159, align 4, !tbaa !188
  %2161 = getelementptr inbounds %struct.D_Pass, ptr %2155, i64 0, i32 3
  %2162 = load i32, ptr %2161, align 8, !tbaa !189
  %2163 = add i32 %2152, -1
  %2164 = zext i32 %2163 to i64
  %2165 = icmp ult i64 %2151, %2164
  %2166 = select i1 %2165, ptr @.str.24.59, ptr @.str.23.58
  %2167 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.154, ptr noundef %2156, i32 noundef %2158, i32 noundef %2160, i32 noundef %2162, ptr noundef nonnull %2166) #44
  %2168 = add nuw nsw i64 %2151, 1
  %2169 = load i32, ptr %2141, align 8, !tbaa !183
  %2170 = zext i32 %2169 to i64
  %2171 = icmp ult i64 %2168, %2170
  br i1 %2171, label %2150, label %2172, !llvm.loop !190

2172:                                             ; preds = %2150, %2144
  %2173 = call i64 @fwrite(ptr nonnull @.str.49.86, i64 4, i64 1, ptr %22)
  br label %2174

2174:                                             ; preds = %2172, %2139
  %2175 = call ptr @lookup_production(ptr noundef nonnull %0, ptr noundef nonnull @.str.5.94, i32 noundef 10) #43
  %2176 = icmp eq ptr %2175, null
  br i1 %2176, label %2181, label %2177

2177:                                             ; preds = %2174
  %2178 = getelementptr inbounds %struct.Production, ptr %2175, i64 0, i32 8
  %2179 = load ptr, ptr %2178, align 8, !tbaa !49
  %2180 = load i32, ptr %2179, align 8, !tbaa !50
  br label %2181

2181:                                             ; preds = %2177, %2174
  %2182 = phi i32 [ %2180, %2177 ], [ 0, %2174 ]
  %2183 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.6.95, ptr noundef %2) #44
  %2184 = load i32, ptr %769, align 8, !tbaa !98
  %2185 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.7.92, i32 noundef %2184) #44
  %2186 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.8.96, ptr noundef %2) #44
  %2187 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.9.97, ptr noundef %2) #44
  %2188 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.7.92, i32 noundef %2182) #44
  %2189 = load i32, ptr %350, align 8, !tbaa !38
  %2190 = load i32, ptr %26, align 8, !tbaa !32
  %2191 = add i32 %2190, %2189
  %2192 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.7.92, i32 noundef %2191) #44
  %2193 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.10.98, ptr noundef %2) #44
  %2194 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 9
  %2195 = load ptr, ptr %2194, align 8, !tbaa !191
  %2196 = icmp eq ptr %2195, null
  br i1 %2196, label %2199, label %2197

2197:                                             ; preds = %2181
  %2198 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.11.93, ptr noundef nonnull %2195) #44
  br label %2201

2199:                                             ; preds = %2181
  %2200 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %2201

2201:                                             ; preds = %2199, %2197
  %2202 = load i32, ptr %2141, align 8, !tbaa !183
  %2203 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.7.92, i32 noundef %2202) #44
  %2204 = load i32, ptr %2141, align 8, !tbaa !183
  %2205 = icmp eq i32 %2204, 0
  br i1 %2205, label %2208, label %2206

2206:                                             ; preds = %2201
  %2207 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %22, ptr noundef nonnull @.str.13.99, ptr noundef %2) #44
  br label %2210

2208:                                             ; preds = %2201
  %2209 = call i64 @fwrite(ptr nonnull @.str.12.91, i64 6, i64 1, ptr %22)
  br label %2210

2210:                                             ; preds = %2208, %2206
  %2211 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 16
  %2212 = load i32, ptr %2211, align 8, !tbaa !192
  %2213 = icmp eq i32 %2212, 0
  %2214 = select i1 %2213, i32 48, i32 49
  %2215 = call i32 @fputc(i32 %2214, ptr %22)
  %2216 = call i64 @fwrite(ptr nonnull @.str.16.90, i64 3, i64 1, ptr %22)
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %17) #45
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %16) #45
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #4

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strrchr(ptr noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #7

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @strncasecmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #8

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @find_symbol(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) unnamed_addr #0 {
  %5 = load i8, ptr %1, align 1, !tbaa !60
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %22, label %7

7:                                                ; preds = %4
  %8 = tail call ptr @__ctype_b_loc() #49
  %9 = load ptr, ptr %8, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %18, %7
  %11 = phi i8 [ %5, %7 ], [ %20, %18 ]
  %12 = phi ptr [ %1, %7 ], [ %19, %18 ]
  %13 = sext i8 %11 to i64
  %14 = getelementptr inbounds i16, ptr %9, i64 %13
  %15 = load i16, ptr %14, align 2, !tbaa !61
  %16 = and i16 %15, 8192
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds i8, ptr %12, i64 1
  %20 = load i8, ptr %19, align 1, !tbaa !60
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %10, !llvm.loop !193

22:                                               ; preds = %18, %10, %4
  %23 = phi ptr [ %1, %4 ], [ %19, %18 ], [ %12, %10 ]
  %24 = icmp ult ptr %23, %2
  br i1 %24, label %25, label %81

25:                                               ; preds = %22
  switch i32 %3, label %81 [
    i32 1, label %35
    i32 3, label %26
  ]

26:                                               ; preds = %25
  %27 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %28 = load i32, ptr %27, align 8, !tbaa !32
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %81, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %32 = ptrtoint ptr %2 to i64
  %33 = ptrtoint ptr %23 to i64
  %34 = sub i64 %32, %33
  br label %45

35:                                               ; preds = %25
  %36 = ptrtoint ptr %2 to i64
  %37 = ptrtoint ptr %23 to i64
  %38 = sub i64 %36, %37
  %39 = trunc i64 %38 to i32
  %40 = tail call ptr @lookup_production(ptr noundef %0, ptr noundef nonnull %23, i32 noundef %39) #43
  %41 = icmp eq ptr %40, null
  br i1 %41, label %81, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.Production, ptr %40, i64 0, i32 3
  %44 = load i32, ptr %43, align 8, !tbaa !70
  br label %81

45:                                               ; preds = %69, %30
  %46 = phi i32 [ %28, %30 ], [ %70, %69 ]
  %47 = phi i64 [ 0, %30 ], [ %72, %69 ]
  %48 = phi i32 [ -1, %30 ], [ %71, %69 ]
  %49 = load ptr, ptr %31, align 8, !tbaa !33
  %50 = getelementptr inbounds ptr, ptr %49, i64 %47
  %51 = load ptr, ptr %50, align 8, !tbaa !14
  %52 = load i32, ptr %51, align 8, !tbaa !34
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %69

54:                                               ; preds = %45
  %55 = getelementptr inbounds %struct.Term, ptr %51, i64 0, i32 6
  %56 = load i32, ptr %55, align 8, !tbaa !43
  %57 = sext i32 %56 to i64
  %58 = icmp eq i64 %34, %57
  br i1 %58, label %59, label %69

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.Term, ptr %51, i64 0, i32 5
  %61 = load ptr, ptr %60, align 8, !tbaa !40
  %62 = tail call i32 @strncmp(ptr noundef nonnull %23, ptr noundef %61, i64 noundef %34) #48
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %59
  %65 = icmp sgt i32 %48, 0
  %66 = trunc i64 %47 to i32
  br i1 %65, label %67, label %69

67:                                               ; preds = %64
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.33.100, ptr noundef %61) #43
  %68 = load i32, ptr %27, align 8, !tbaa !32
  br label %69

69:                                               ; preds = %67, %64, %59, %54, %45
  %70 = phi i32 [ %46, %59 ], [ %68, %67 ], [ %46, %54 ], [ %46, %45 ], [ %46, %64 ]
  %71 = phi i32 [ %48, %59 ], [ %48, %67 ], [ %48, %54 ], [ %48, %45 ], [ %66, %64 ]
  %72 = add nuw nsw i64 %47, 1
  %73 = zext i32 %70 to i64
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %45, label %75, !llvm.loop !194

75:                                               ; preds = %69
  %.lcssa = phi i32 [ %71, %69 ]
  %76 = icmp sgt i32 %.lcssa, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %75
  %78 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %79 = load i32, ptr %78, align 8, !tbaa !38
  %80 = add i32 %79, %.lcssa
  br label %81

81:                                               ; preds = %77, %75, %42, %35, %26, %25, %22
  %82 = phi i32 [ %44, %42 ], [ %80, %77 ], [ -1, %25 ], [ -1, %22 ], [ -1, %35 ], [ -1, %75 ], [ -1, %26 ]
  ret i32 %82
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @write_code_as_C(ptr nocapture noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, i32 noundef %4, ptr noundef %5) unnamed_addr #0 {
  %7 = tail call i64 @fwrite(ptr nonnull @.str.53, i64 2, i64 1, ptr %0)
  %8 = getelementptr inbounds %struct.Grammar, ptr %1, i64 0, i32 20
  %9 = load i32, ptr %8, align 4, !tbaa !27
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %6
  %12 = tail call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %5, i32 noundef 47) #48
  %13 = icmp eq ptr %12, null
  %14 = getelementptr inbounds i8, ptr %12, i64 1
  %15 = select i1 %13, ptr %5, ptr %14
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.28.64, i32 noundef %4, ptr noundef %15) #44
  br label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.Rule, ptr %2, i64 0, i32 6
  br label %19

19:                                               ; preds = %169, %17
  %20 = phi ptr [ %3, %17 ], [ %170, %169 ]
  %21 = load i8, ptr %20, align 1, !tbaa !60
  switch i8 %21, label %165 [
    i8 0, label %171
    i8 36, label %22
  ]

22:                                               ; preds = %19
  %23 = getelementptr inbounds i8, ptr %20, i64 1
  %24 = load i8, ptr %23, align 1, !tbaa !60
  switch i8 %24, label %64 [
    i8 35, label %25
    i8 103, label %28
    i8 110, label %31
    i8 36, label %61
  ]

25:                                               ; preds = %22
  %26 = tail call i64 @fwrite(ptr nonnull @.str.54, i64 13, i64 1, ptr %0)
  %27 = getelementptr inbounds i8, ptr %20, i64 2
  br label %169

28:                                               ; preds = %22
  %29 = tail call i64 @fwrite(ptr nonnull @.str.55, i64 29, i64 1, ptr %0)
  %30 = getelementptr inbounds i8, ptr %20, i64 2
  br label %169

31:                                               ; preds = %22
  %32 = getelementptr inbounds i8, ptr %20, i64 2
  %33 = tail call ptr @__ctype_b_loc() #49
  %34 = load ptr, ptr %33, align 8, !tbaa !14
  %35 = load i8, ptr %32, align 1, !tbaa !60
  %36 = sext i8 %35 to i64
  %37 = getelementptr inbounds i16, ptr %34, i64 %36
  %38 = load i16, ptr %37, align 2, !tbaa !61
  %39 = and i16 %38, 2048
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %59, label %41

41:                                               ; preds = %31
  %42 = tail call i32 @atoi(ptr nocapture noundef nonnull %32) #48
  %43 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.56, i32 noundef %42) #44
  %44 = load i32, ptr %18, align 8, !tbaa !75
  %45 = add i32 %44, -1
  %46 = icmp ugt i32 %42, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %41
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.57, i32 noundef %4) #43
  br label %48

48:                                               ; preds = %47, %41
  %49 = load ptr, ptr %33, align 8, !tbaa !14
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi ptr [ %32, %48 ], [ %58, %50 ]
  %52 = load i8, ptr %51, align 1, !tbaa !60
  %53 = sext i8 %52 to i64
  %54 = getelementptr inbounds i16, ptr %49, i64 %53
  %55 = load i16, ptr %54, align 2, !tbaa !61
  %56 = and i16 %55, 2048
  %57 = icmp eq i16 %56, 0
  %58 = getelementptr inbounds i8, ptr %51, i64 1
  br i1 %57, label %169, label %50, !llvm.loop !195

59:                                               ; preds = %31
  %60 = tail call i64 @fwrite(ptr nonnull @.str.58, i64 23, i64 1, ptr %0)
  br label %169

61:                                               ; preds = %22
  %62 = tail call i64 @fwrite(ptr nonnull @.str.59, i64 26, i64 1, ptr %0)
  %63 = getelementptr inbounds i8, ptr %20, i64 2
  br label %169

64:                                               ; preds = %22
  %65 = tail call ptr @__ctype_b_loc() #49
  %66 = load ptr, ptr %65, align 8, !tbaa !14
  %67 = sext i8 %24 to i64
  %68 = getelementptr inbounds i16, ptr %66, i64 %67
  %69 = load i16, ptr %68, align 2, !tbaa !61
  %70 = and i16 %69, 2048
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %85, label %72

72:                                               ; preds = %64
  %73 = tail call i32 @atoi(ptr nocapture noundef nonnull %23) #48
  %74 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.60, i32 noundef %73) #44
  %75 = load ptr, ptr %65, align 8, !tbaa !14
  br label %76

76:                                               ; preds = %76, %72
  %77 = phi ptr [ %23, %72 ], [ %84, %76 ]
  %78 = load i8, ptr %77, align 1, !tbaa !60
  %79 = sext i8 %78 to i64
  %80 = getelementptr inbounds i16, ptr %75, i64 %79
  %81 = load i16, ptr %80, align 2, !tbaa !61
  %82 = and i16 %81, 2048
  %83 = icmp eq i16 %82, 0
  %84 = getelementptr inbounds i8, ptr %77, i64 1
  br i1 %83, label %169, label %76, !llvm.loop !196

85:                                               ; preds = %64
  %86 = icmp eq i8 %24, 123
  br i1 %86, label %87, label %164

87:                                               ; preds = %85
  %88 = getelementptr inbounds i8, ptr %20, i64 2
  br label %89

89:                                               ; preds = %98, %87
  %90 = phi ptr [ %88, %87 ], [ %99, %98 ]
  %91 = load i8, ptr %90, align 1, !tbaa !60
  switch i8 %91, label %92 [
    i8 0, label %100
    i8 125, label %100
  ]

92:                                               ; preds = %89
  %93 = sext i8 %91 to i64
  %94 = getelementptr inbounds i16, ptr %66, i64 %93
  %95 = load i16, ptr %94, align 2, !tbaa !61
  %96 = and i16 %95, 8192
  %97 = icmp eq i16 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %92
  %99 = getelementptr inbounds i8, ptr %90, i64 1
  br label %89, !llvm.loop !197

100:                                              ; preds = %92, %89, %89
  %.lcssa1 = phi ptr [ %90, %92 ], [ %90, %89 ], [ %90, %89 ]
  %.lcssa = phi i8 [ %91, %92 ], [ %91, %89 ], [ %91, %89 ]
  %101 = sext i8 %.lcssa to i64
  %102 = getelementptr inbounds i16, ptr %66, i64 %101
  %103 = load i16, ptr %102, align 2, !tbaa !61
  %104 = lshr i16 %103, 13
  %105 = and i16 %104, 1
  %106 = zext i16 %105 to i64
  %107 = getelementptr inbounds i8, ptr %.lcssa1, i64 %106
  br label %108

108:                                              ; preds = %111, %100
  %109 = phi ptr [ %107, %100 ], [ %112, %111 ]
  %110 = load i8, ptr %109, align 1, !tbaa !60
  switch i8 %110, label %111 [
    i8 0, label %113
    i8 125, label %113
  ]

111:                                              ; preds = %108
  %112 = getelementptr inbounds i8, ptr %109, i64 1
  br label %108, !llvm.loop !198

113:                                              ; preds = %108, %108
  %.lcssa2 = phi ptr [ %109, %108 ], [ %109, %108 ]
  %114 = ptrtoint ptr %.lcssa1 to i64
  %115 = ptrtoint ptr %88 to i64
  %116 = sub i64 %114, %115
  switch i64 %116, label %161 [
    i64 6, label %117
    i64 10, label %122
    i64 5, label %127
    i64 4, label %149
  ]

117:                                              ; preds = %113
  %118 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.61, i64 noundef 6) #48
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %132

120:                                              ; preds = %117
  %121 = tail call i64 @fwrite(ptr nonnull @.str.62, i64 11, i64 1, ptr %0)
  br label %162

122:                                              ; preds = %113
  %123 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.63, i64 noundef 10) #48
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %161

125:                                              ; preds = %122
  %126 = tail call i64 @fwrite(ptr nonnull @.str.64, i64 53, i64 1, ptr %0)
  br label %162

127:                                              ; preds = %113
  %128 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.65, i64 noundef 5) #48
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %137

130:                                              ; preds = %127
  %131 = tail call i64 @fwrite(ptr nonnull @.str.66, i64 27, i64 1, ptr %0)
  br label %162

132:                                              ; preds = %117
  %133 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.67, i64 noundef 6) #48
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %143

135:                                              ; preds = %132
  %136 = tail call i64 @fwrite(ptr nonnull @.str.68, i64 7, i64 1, ptr %0)
  br label %162

137:                                              ; preds = %127
  %138 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.29.65, i64 noundef 5) #48
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %161

140:                                              ; preds = %137
  %141 = tail call fastcc i32 @find_symbol(ptr noundef %1, ptr noundef nonnull %.lcssa1, ptr noundef nonnull %.lcssa2, i32 noundef 1) #44
  %142 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.30.66, i32 noundef %141) #44
  br label %162

143:                                              ; preds = %132
  %144 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.31.67, i64 noundef 6) #48
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %161

146:                                              ; preds = %143
  %147 = tail call fastcc i32 @find_symbol(ptr noundef %1, ptr noundef nonnull %.lcssa1, ptr noundef nonnull %.lcssa2, i32 noundef 3) #44
  %148 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.30.66, i32 noundef %147) #44
  br label %162

149:                                              ; preds = %113
  %150 = tail call i32 @strncasecmp(ptr noundef nonnull %88, ptr noundef nonnull @.str.69, i64 noundef 4) #48
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %161

152:                                              ; preds = %149
  %153 = tail call ptr @find_pass(ptr noundef %1, ptr noundef nonnull %.lcssa1, ptr noundef nonnull %.lcssa2) #43
  %154 = icmp eq ptr %153, null
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  %156 = tail call ptr @dup_str(ptr noundef nonnull %.lcssa1, ptr noundef nonnull %.lcssa2) #43
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.70, ptr noundef %156, i32 noundef %4) #43
  br label %157

157:                                              ; preds = %155, %152
  %158 = getelementptr inbounds %struct.D_Pass, ptr %153, i64 0, i32 3
  %159 = load i32, ptr %158, align 8, !tbaa !189
  %160 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.30.66, i32 noundef %159) #44
  br label %162

161:                                              ; preds = %149, %143, %137, %122, %113
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.32.68, i32 noundef %4) #43
  br label %162

162:                                              ; preds = %161, %157, %146, %140, %135, %130, %125, %120
  %163 = getelementptr inbounds i8, ptr %.lcssa2, i64 1
  br label %169

164:                                              ; preds = %85
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.32.68, i32 noundef %4) #43
  br label %169

165:                                              ; preds = %19
  %166 = sext i8 %21 to i32
  %167 = tail call i32 @fputc(i32 noundef %166, ptr noundef %0) #44
  %168 = getelementptr inbounds i8, ptr %20, i64 1
  br label %169

169:                                              ; preds = %165, %164, %162, %76, %61, %59, %50, %28, %25
  %170 = phi ptr [ %27, %25 ], [ %30, %28 ], [ %32, %59 ], [ %63, %61 ], [ %163, %162 ], [ %23, %164 ], [ %168, %165 ], [ %77, %76 ], [ %51, %50 ]
  br label %19, !llvm.loop !199

171:                                              ; preds = %19
  %172 = tail call i64 @fwrite(ptr nonnull @.str.71, i64 11, i64 1, ptr %0)
  %173 = tail call i64 @fwrite(ptr nonnull @.str.72, i64 3, i64 1, ptr %0)
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #9

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #10

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias ptr @strdup(ptr nocapture noundef readonly) local_unnamed_addr #11

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #12

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #9

; Function Attrs: nounwind optsize uwtable
define internal i32 @er_hint_hash_fn(ptr nocapture noundef readonly %0, ptr nocapture readnone %1) #0 {
  %3 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 8
  %4 = load i32, ptr %3, align 8, !tbaa !30
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %56, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 8, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !31
  br label %9

9:                                                ; preds = %50, %6
  %10 = phi ptr [ %8, %6 ], [ %37, %50 ]
  %11 = phi i64 [ 0, %6 ], [ %52, %50 ]
  %12 = phi i32 [ 0, %6 ], [ %51, %50 ]
  %13 = getelementptr inbounds ptr, ptr %10, i64 %11
  %14 = load ptr, ptr %13, align 8, !tbaa !14
  %15 = getelementptr inbounds %struct.Hint, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !168
  %17 = getelementptr inbounds %struct.Rule, ptr %16, i64 0, i32 6
  %18 = getelementptr inbounds %struct.Rule, ptr %16, i64 0, i32 6, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !174
  %20 = load i32, ptr %17, align 8, !tbaa !75
  %21 = add i32 %20, -1
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds ptr, ptr %19, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !14
  %25 = getelementptr inbounds %struct.Elem, ptr %24, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !60
  %27 = load i32, ptr %14, align 8, !tbaa !165
  %28 = mul i32 %27, 13
  %29 = getelementptr inbounds %struct.Term, ptr %26, i64 0, i32 5
  %30 = load ptr, ptr %29, align 8, !tbaa !40
  %31 = getelementptr inbounds %struct.Term, ptr %26, i64 0, i32 6
  %32 = load i32, ptr %31, align 8, !tbaa !43
  %33 = tail call i32 @strhashl(ptr noundef %30, i32 noundef %32) #43
  %34 = add i32 %12, 13
  %35 = add i32 %34, %28
  %36 = add i32 %35, %33
  %37 = load ptr, ptr %7, align 8, !tbaa !31
  %38 = getelementptr inbounds ptr, ptr %37, i64 %11
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = getelementptr inbounds %struct.Hint, ptr %39, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !168
  %42 = icmp eq ptr %41, null
  br i1 %42, label %50, label %43

43:                                               ; preds = %9
  %44 = getelementptr inbounds %struct.Rule, ptr %41, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !68
  %46 = getelementptr inbounds %struct.Production, ptr %45, i64 0, i32 3
  %47 = load i32, ptr %46, align 8, !tbaa !70
  %48 = mul i32 %47, 10007
  %49 = add i32 %48, %36
  br label %50

50:                                               ; preds = %43, %9
  %51 = phi i32 [ %49, %43 ], [ %36, %9 ]
  %52 = add nuw nsw i64 %11, 1
  %53 = load i32, ptr %3, align 8, !tbaa !30
  %54 = zext i32 %53 to i64
  %55 = icmp ult i64 %52, %54
  br i1 %55, label %9, label %56, !llvm.loop !200

56:                                               ; preds = %50, %2
  %57 = phi i32 [ 0, %2 ], [ %51, %50 ]
  ret i32 %57
}

; Function Attrs: nofree nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @er_hint_cmp_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2) #14 {
  %4 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 8
  %5 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 8
  %6 = load i32, ptr %4, align 8, !tbaa !30
  %7 = load i32, ptr %5, align 8, !tbaa !30
  %8 = icmp eq i32 %6, %7
  br i1 %8, label %9, label %70

9:                                                ; preds = %3
  %10 = icmp eq i32 %6, 0
  br i1 %10, label %70, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 8, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !31
  %14 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 8, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !31
  %16 = zext i32 %6 to i64
  br label %20

17:                                               ; preds = %60
  %18 = add nuw nsw i64 %21, 1
  %19 = icmp eq i64 %18, %16
  br i1 %19, label %70, label %20, !llvm.loop !201

20:                                               ; preds = %17, %11
  %21 = phi i64 [ 0, %11 ], [ %18, %17 ]
  %22 = getelementptr inbounds ptr, ptr %13, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !14
  %24 = getelementptr inbounds %struct.Hint, ptr %23, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !168
  %26 = getelementptr inbounds ptr, ptr %15, i64 %21
  %27 = load ptr, ptr %26, align 8, !tbaa !14
  %28 = getelementptr inbounds %struct.Hint, ptr %27, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !168
  %30 = load i32, ptr %23, align 8, !tbaa !165
  %31 = load i32, ptr %27, align 8, !tbaa !165
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %33, label %70

33:                                               ; preds = %20
  %34 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 6, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !174
  %36 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 6
  %37 = load i32, ptr %36, align 8, !tbaa !75
  %38 = add i32 %37, -1
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds ptr, ptr %35, i64 %39
  %41 = load ptr, ptr %40, align 8, !tbaa !14
  %42 = getelementptr inbounds %struct.Elem, ptr %41, i64 0, i32 3
  %43 = load ptr, ptr %42, align 8, !tbaa !60
  %44 = getelementptr inbounds %struct.Rule, ptr %25, i64 0, i32 6, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !174
  %46 = getelementptr inbounds %struct.Rule, ptr %25, i64 0, i32 6
  %47 = load i32, ptr %46, align 8, !tbaa !75
  %48 = add i32 %47, -1
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds ptr, ptr %45, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !14
  %52 = getelementptr inbounds %struct.Elem, ptr %51, i64 0, i32 3
  %53 = load ptr, ptr %52, align 8, !tbaa !60
  %54 = getelementptr inbounds %struct.Term, ptr %53, i64 0, i32 5
  %55 = load ptr, ptr %54, align 8, !tbaa !40
  %56 = getelementptr inbounds %struct.Term, ptr %43, i64 0, i32 5
  %57 = load ptr, ptr %56, align 8, !tbaa !40
  %58 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %55, ptr noundef nonnull dereferenceable(1) %57) #48
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %70

60:                                               ; preds = %33
  %61 = getelementptr inbounds %struct.Rule, ptr %25, i64 0, i32 1
  %62 = load ptr, ptr %61, align 8, !tbaa !68
  %63 = getelementptr inbounds %struct.Production, ptr %62, i64 0, i32 3
  %64 = load i32, ptr %63, align 8, !tbaa !70
  %65 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !68
  %67 = getelementptr inbounds %struct.Production, ptr %66, i64 0, i32 3
  %68 = load i32, ptr %67, align 8, !tbaa !70
  %69 = icmp eq i32 %64, %68
  br i1 %69, label %17, label %70

70:                                               ; preds = %60, %33, %20, %17, %9, %3
  %71 = phi i32 [ 1, %3 ], [ 0, %9 ], [ 1, %60 ], [ 1, %33 ], [ 1, %20 ], [ 0, %17 ]
  ret i32 %71
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @shift_hash_fn(ptr nocapture noundef readonly %0, ptr nocapture readnone %1) #15 {
  %3 = getelementptr inbounds %struct.Action, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !106
  %5 = getelementptr inbounds %struct.Term, ptr %4, i64 0, i32 1
  %6 = load i32, ptr %5, align 4, !tbaa !41
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @shift_cmp_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2) #15 {
  %4 = getelementptr inbounds %struct.Action, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !106
  %6 = getelementptr inbounds %struct.Term, ptr %5, i64 0, i32 1
  %7 = load i32, ptr %6, align 4, !tbaa !41
  %8 = getelementptr inbounds %struct.Action, ptr %1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !106
  %10 = getelementptr inbounds %struct.Term, ptr %9, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !41
  %12 = icmp ne i32 %7, %11
  %13 = zext i1 %12 to i32
  ret i32 %13
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @trans_scanner_block_hash_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #16 {
  %3 = getelementptr inbounds %struct.hash_fns_t, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !14
  %5 = ptrtoint ptr %4 to i64
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.ScannerBlock, ptr %0, i64 0, i32 4
  %8 = load ptr, ptr %7, align 8, !tbaa !119
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %27

10:                                               ; preds = %2
  %11 = and i64 %5, 4294967295
  br label %12

12:                                               ; preds = %22, %10
  %13 = phi i64 [ 0, %10 ], [ %25, %22 ]
  %14 = phi i32 [ 0, %10 ], [ %24, %22 ]
  %15 = mul i32 %14, 3
  %16 = getelementptr inbounds ptr, ptr %8, i64 %13
  %17 = load ptr, ptr %16, align 8, !tbaa !14
  %18 = icmp eq ptr %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = load i32, ptr %17, align 8, !tbaa !123
  %21 = add i32 %20, 1
  br label %22

22:                                               ; preds = %19, %12
  %23 = phi i32 [ %21, %19 ], [ 0, %12 ]
  %24 = add i32 %23, %15
  %25 = add nuw nsw i64 %13, 1
  %26 = icmp eq i64 %25, %11
  br i1 %26, label %27, label %12, !llvm.loop !202

27:                                               ; preds = %22, %2
  %28 = phi i32 [ 0, %2 ], [ %24, %22 ]
  ret i32 %28
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @trans_scanner_block_cmp_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #16 {
  %4 = getelementptr inbounds %struct.hash_fns_t, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = ptrtoint ptr %5 to i64
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %struct.ScannerBlock, ptr %0, i64 0, i32 4
  %9 = load ptr, ptr %8, align 8, !tbaa !119
  %10 = getelementptr inbounds %struct.ScannerBlock, ptr %1, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !119
  %12 = icmp sgt i32 %7, 0
  br i1 %12, label %13, label %33

13:                                               ; preds = %3
  %14 = and i64 %6, 4294967295
  br label %15

15:                                               ; preds = %30, %13
  %16 = phi i64 [ 0, %13 ], [ %31, %30 ]
  %17 = getelementptr inbounds ptr, ptr %9, i64 %16
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  %19 = getelementptr inbounds ptr, ptr %11, i64 %16
  %20 = load ptr, ptr %19, align 8, !tbaa !14
  %21 = icmp eq ptr %18, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %15
  %23 = icmp eq ptr %18, null
  %24 = icmp eq ptr %20, null
  %25 = or i1 %23, %24
  br i1 %25, label %33, label %26

26:                                               ; preds = %22
  %27 = load i32, ptr %18, align 8, !tbaa !123
  %28 = load i32, ptr %20, align 8, !tbaa !123
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %26, %15
  %31 = add nuw nsw i64 %16, 1
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %15, !llvm.loop !203

33:                                               ; preds = %30, %26, %22, %3
  %34 = phi i32 [ 0, %3 ], [ 0, %30 ], [ 1, %26 ], [ 1, %22 ]
  ret i32 %34
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @scanner_block_hash_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #16 {
  %3 = getelementptr inbounds %struct.hash_fns_t, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !14
  %5 = ptrtoint ptr %4 to i64
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %struct.ScannerBlock, ptr %0, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !118
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %27

10:                                               ; preds = %2
  %11 = and i64 %5, 4294967295
  br label %12

12:                                               ; preds = %22, %10
  %13 = phi i64 [ 0, %10 ], [ %25, %22 ]
  %14 = phi i32 [ 0, %10 ], [ %24, %22 ]
  %15 = mul i32 %14, 17
  %16 = getelementptr inbounds ptr, ptr %8, i64 %13
  %17 = load ptr, ptr %16, align 8, !tbaa !14
  %18 = icmp eq ptr %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = load i32, ptr %17, align 8, !tbaa !120
  %21 = add i32 %20, 2
  br label %22

22:                                               ; preds = %19, %12
  %23 = phi i32 [ %21, %19 ], [ 1, %12 ]
  %24 = add i32 %23, %15
  %25 = add nuw nsw i64 %13, 1
  %26 = icmp eq i64 %25, %11
  br i1 %26, label %27, label %12, !llvm.loop !204

27:                                               ; preds = %22, %2
  %28 = phi i32 [ 0, %2 ], [ %24, %22 ]
  ret i32 %28
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @scanner_block_cmp_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #16 {
  %4 = getelementptr inbounds %struct.hash_fns_t, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = ptrtoint ptr %5 to i64
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %struct.ScannerBlock, ptr %0, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !118
  %10 = getelementptr inbounds %struct.ScannerBlock, ptr %1, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !118
  %12 = icmp sgt i32 %7, 0
  br i1 %12, label %13, label %33

13:                                               ; preds = %3
  %14 = and i64 %6, 4294967295
  br label %15

15:                                               ; preds = %30, %13
  %16 = phi i64 [ 0, %13 ], [ %31, %30 ]
  %17 = getelementptr inbounds ptr, ptr %9, i64 %16
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  %19 = getelementptr inbounds ptr, ptr %11, i64 %16
  %20 = load ptr, ptr %19, align 8, !tbaa !14
  %21 = icmp eq ptr %18, %20
  br i1 %21, label %30, label %22

22:                                               ; preds = %15
  %23 = icmp eq ptr %18, null
  %24 = icmp eq ptr %20, null
  %25 = or i1 %23, %24
  br i1 %25, label %33, label %26

26:                                               ; preds = %22
  %27 = load i32, ptr %18, align 8, !tbaa !120
  %28 = load i32, ptr %20, align 8, !tbaa !120
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %26, %15
  %31 = add nuw nsw i64 %16, 1
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %15, !llvm.loop !205

33:                                               ; preds = %30, %26, %22, %3
  %34 = phi i32 [ 0, %3 ], [ 0, %30 ], [ 1, %26 ], [ 1, %22 ]
  ret i32 %34
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @atoi(ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @write_ctables(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 18
  %3 = load i32, ptr %2, align 4, !tbaa !25
  %4 = sdiv i32 256, %3
  %5 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 19
  store i32 %4, ptr %5, align 8, !tbaa !26
  %6 = load ptr, ptr %0, align 8, !tbaa !58
  %7 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 17
  %8 = load i8, ptr %7, align 4, !tbaa !60
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, ptr null, ptr %7
  tail call void @write_parser_tables_as_C(ptr noundef nonnull %0, ptr noundef %6, ptr noundef %10) #44
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @new_production(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #48
  %4 = trunc i64 %3 to i32
  %5 = tail call ptr @lookup_production(ptr noundef %0, ptr noundef %1, i32 noundef %4) #44
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %40

7:                                                ; preds = %2
  %8 = tail call dereferenceable_or_null(232) ptr @calloc(i64 1, i64 232)
  %9 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !45
  %12 = icmp eq ptr %11, null
  %13 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 3
  br i1 %12, label %14, label %19

14:                                               ; preds = %7
  store ptr %13, ptr %10, align 8, !tbaa !45
  %15 = load i32, ptr %9, align 8, !tbaa !38
  %16 = add i32 %15, 1
  store i32 %16, ptr %9, align 8, !tbaa !38
  %17 = zext i32 %15 to i64
  %18 = getelementptr inbounds ptr, ptr %13, i64 %17
  store ptr %8, ptr %18, align 8, !tbaa !14
  br label %36

19:                                               ; preds = %7
  %20 = icmp eq ptr %11, %13
  %21 = load i32, ptr %9, align 8, !tbaa !38
  br i1 %20, label %22, label %28

22:                                               ; preds = %19
  %23 = icmp ult i32 %21, 3
  br i1 %23, label %24, label %35

24:                                               ; preds = %22
  %25 = add nuw nsw i32 %21, 1
  store i32 %25, ptr %9, align 8, !tbaa !38
  %26 = zext i32 %21 to i64
  %27 = getelementptr inbounds ptr, ptr %11, i64 %26
  store ptr %8, ptr %27, align 8, !tbaa !14
  br label %36

28:                                               ; preds = %19
  %29 = and i32 %21, 7
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = add i32 %21, 1
  store i32 %32, ptr %9, align 8, !tbaa !38
  %33 = zext i32 %21 to i64
  %34 = getelementptr inbounds ptr, ptr %11, i64 %33
  store ptr %8, ptr %34, align 8, !tbaa !14
  br label %36

35:                                               ; preds = %28, %22
  tail call void @vec_add_internal(ptr noundef nonnull %9, ptr noundef nonnull %8) #43
  br label %36

36:                                               ; preds = %35, %31, %24, %14
  store ptr %1, ptr %8, align 8, !tbaa !48
  %37 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #48
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds %struct.Production, ptr %8, i64 0, i32 1
  store i32 %38, ptr %39, align 8, !tbaa !180
  br label %40

40:                                               ; preds = %36, %2
  %41 = phi ptr [ %8, %36 ], [ %5, %2 ]
  ret ptr %41
}

; Function Attrs: nofree nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal ptr @lookup_production(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #14 {
  %4 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !38
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !45
  %10 = sext i32 %2 to i64
  %11 = zext i32 %5 to i64
  br label %12

12:                                               ; preds = %23, %7
  %13 = phi i64 [ 0, %7 ], [ %24, %23 ]
  %14 = getelementptr inbounds ptr, ptr %9, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  %16 = getelementptr inbounds %struct.Production, ptr %15, i64 0, i32 1
  %17 = load i32, ptr %16, align 8, !tbaa !180
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %23

19:                                               ; preds = %12
  %20 = load ptr, ptr %15, align 8, !tbaa !48
  %21 = tail call i32 @strncmp(ptr noundef %20, ptr noundef %1, i64 noundef %10) #48
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %19, %12
  %24 = add nuw nsw i64 %13, 1
  %25 = icmp eq i64 %24, %11
  br i1 %25, label %26, label %12, !llvm.loop !206

26:                                               ; preds = %23, %19, %3
  %27 = phi ptr [ null, %3 ], [ null, %23 ], [ %15, %19 ]
  ret ptr %27
}

; Function Attrs: nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #17

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: read, inaccessiblemem: readwrite) uwtable
define internal ptr @new_rule(ptr nocapture noundef readonly %0, ptr noundef %1) #18 {
  %3 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %4 = getelementptr inbounds %struct.Rule, ptr %3, i64 0, i32 1
  store ptr %1, ptr %4, align 8, !tbaa !68
  %5 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %6 = getelementptr inbounds %struct.Rule, ptr %3, i64 0, i32 7
  store ptr %5, ptr %6, align 8, !tbaa !207
  store i32 3, ptr %5, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.Elem, ptr %5, i64 0, i32 2
  store ptr %3, ptr %7, align 8, !tbaa !208
  %8 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %9 = load i32, ptr %8, align 8, !tbaa !209
  %10 = getelementptr inbounds %struct.Rule, ptr %3, i64 0, i32 11
  store i32 %9, ptr %10, align 8, !tbaa !82
  ret ptr %3
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @new_elem_nterm(ptr noundef %0, ptr noundef %1) #19 {
  %3 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %4 = getelementptr inbounds %struct.Elem, ptr %3, i64 0, i32 3
  store ptr %0, ptr %4, align 8, !tbaa !60
  %5 = getelementptr inbounds %struct.Elem, ptr %3, i64 0, i32 2
  store ptr %1, ptr %5, align 8, !tbaa !208
  ret ptr %3
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @escape_string_for_regex(ptr nocapture noundef readonly %0) #20 {
  %2 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #48
  %3 = shl i64 %2, 1
  %4 = add i64 %3, 2
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #50
  %6 = load i8, ptr %0, align 1, !tbaa !60
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %23, label %8

8:                                                ; preds = %16, %1
  %9 = phi i8 [ %21, %16 ], [ %6, %1 ]
  %10 = phi ptr [ %20, %16 ], [ %0, %1 ]
  %11 = phi ptr [ %19, %16 ], [ %5, %1 ]
  %12 = sext i8 %9 to i32
  switch i32 %12, label %16 [
    i32 40, label %13
    i32 41, label %13
    i32 91, label %13
    i32 93, label %13
    i32 45, label %13
    i32 94, label %13
    i32 42, label %13
    i32 63, label %13
    i32 43, label %13
  ]

13:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8
  %14 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %15 = load i8, ptr %10, align 1, !tbaa !60
  br label %16

16:                                               ; preds = %13, %8
  %17 = phi i8 [ %9, %8 ], [ %15, %13 ]
  %18 = phi ptr [ %11, %8 ], [ %14, %13 ]
  %19 = getelementptr inbounds i8, ptr %18, i64 1
  store i8 %17, ptr %18, align 1, !tbaa !60
  %20 = getelementptr inbounds i8, ptr %10, i64 1
  %21 = load i8, ptr %20, align 1, !tbaa !60
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %8, !llvm.loop !210

23:                                               ; preds = %16, %1
  %24 = phi ptr [ %5, %1 ], [ %19, %16 ]
  store i8 0, ptr %24, align 1, !tbaa !60
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @new_string(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds i8, ptr %1, i64 1
  %6 = getelementptr inbounds i8, ptr %2, i64 -1
  %7 = tail call fastcc ptr @new_term_string(ptr noundef %0, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef %3) #44
  %8 = load i8, ptr %1, align 1, !tbaa !60
  %9 = icmp eq i8 %8, 34
  %10 = zext i1 %9 to i32
  %11 = getelementptr inbounds %struct.Elem, ptr %7, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !60
  store i32 %10, ptr %12, align 8, !tbaa !34
  %13 = load ptr, ptr %11, align 8, !tbaa !60
  %14 = getelementptr inbounds %struct.Term, ptr %13, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !40
  br label %16

16:                                               ; preds = %154, %4
  %17 = phi ptr [ %15, %4 ], [ %155, %154 ]
  %18 = phi ptr [ %15, %4 ], [ %157, %154 ]
  %19 = load i8, ptr %18, align 1, !tbaa !60
  switch i8 %19, label %149 [
    i8 0, label %158
    i8 92, label %20
  ]

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, ptr %18, i64 1
  %22 = load i8, ptr %21, align 1, !tbaa !60
  %23 = sext i8 %22 to i32
  switch i32 %23, label %143 [
    i32 98, label %24
    i32 102, label %25
    i32 110, label %26
    i32 114, label %27
    i32 116, label %28
    i32 118, label %29
    i32 97, label %30
    i32 99, label %31
    i32 34, label %32
    i32 39, label %36
    i32 120, label %40
    i32 100, label %59
    i32 48, label %96
    i32 49, label %96
    i32 50, label %96
    i32 51, label %96
    i32 52, label %96
    i32 53, label %96
    i32 54, label %96
    i32 55, label %96
  ]

24:                                               ; preds = %20
  store i8 8, ptr %17, align 1, !tbaa !60
  br label %150

25:                                               ; preds = %20
  store i8 12, ptr %17, align 1, !tbaa !60
  br label %150

26:                                               ; preds = %20
  store i8 10, ptr %17, align 1, !tbaa !60
  br label %150

27:                                               ; preds = %20
  store i8 13, ptr %17, align 1, !tbaa !60
  br label %150

28:                                               ; preds = %20
  store i8 9, ptr %17, align 1, !tbaa !60
  br label %150

29:                                               ; preds = %20
  store i8 11, ptr %17, align 1, !tbaa !60
  br label %150

30:                                               ; preds = %20
  store i8 7, ptr %17, align 1, !tbaa !60
  br label %150

31:                                               ; preds = %20
  %.lcssa1 = phi ptr [ %17, %20 ]
  store i8 0, ptr %.lcssa1, align 1, !tbaa !60
  br label %165

32:                                               ; preds = %20
  %33 = load i32, ptr %13, align 8, !tbaa !34
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %143

35:                                               ; preds = %32
  store i8 34, ptr %17, align 1, !tbaa !60
  br label %150

36:                                               ; preds = %20
  %37 = load i32, ptr %13, align 8, !tbaa !34
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %143

39:                                               ; preds = %36
  store i8 39, ptr %17, align 1, !tbaa !60
  br label %150

40:                                               ; preds = %20
  %41 = tail call ptr @__ctype_b_loc() #49
  %42 = load ptr, ptr %41, align 8, !tbaa !14
  %43 = getelementptr inbounds i8, ptr %18, i64 2
  %44 = load i8, ptr %43, align 1, !tbaa !60
  %45 = sext i8 %44 to i64
  %46 = getelementptr inbounds i16, ptr %42, i64 %45
  %47 = load i16, ptr %46, align 2, !tbaa !61
  %48 = and i16 %47, 4096
  %49 = icmp eq i16 %48, 0
  br i1 %49, label %154, label %50

50:                                               ; preds = %40
  %51 = getelementptr inbounds i8, ptr %18, i64 3
  %52 = load i8, ptr %51, align 1, !tbaa !60
  %53 = sext i8 %52 to i64
  %54 = getelementptr inbounds i16, ptr %42, i64 %53
  %55 = load i16, ptr %54, align 2, !tbaa !61
  %56 = and i16 %55, 4096
  %57 = icmp eq i16 %56, 0
  %58 = select i1 %57, i32 1, i32 2
  br label %121

59:                                               ; preds = %20
  %60 = tail call ptr @__ctype_b_loc() #49
  %61 = load ptr, ptr %60, align 8, !tbaa !14
  %62 = getelementptr inbounds i8, ptr %18, i64 2
  %63 = load i8, ptr %62, align 1, !tbaa !60
  %64 = sext i8 %63 to i64
  %65 = getelementptr inbounds i16, ptr %61, i64 %64
  %66 = load i16, ptr %65, align 2, !tbaa !61
  %67 = and i16 %66, 2048
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %154, label %69

69:                                               ; preds = %59
  %70 = getelementptr inbounds i8, ptr %18, i64 3
  %71 = load i8, ptr %70, align 1, !tbaa !60
  %72 = sext i8 %71 to i64
  %73 = getelementptr inbounds i16, ptr %61, i64 %72
  %74 = load i16, ptr %73, align 2, !tbaa !61
  %75 = and i16 %74, 2048
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %121, label %77

77:                                               ; preds = %69
  %78 = getelementptr inbounds i8, ptr %18, i64 4
  %79 = load i8, ptr %78, align 1, !tbaa !60
  %80 = sext i8 %79 to i64
  %81 = getelementptr inbounds i16, ptr %61, i64 %80
  %82 = load i16, ptr %81, align 2, !tbaa !61
  %83 = and i16 %82, 2048
  %84 = icmp eq i16 %83, 0
  br i1 %84, label %121, label %85

85:                                               ; preds = %77
  %86 = icmp slt i8 %63, 50
  br i1 %86, label %95, label %87

87:                                               ; preds = %85
  %88 = icmp eq i8 %63, 50
  br i1 %88, label %89, label %121

89:                                               ; preds = %87
  %90 = icmp slt i8 %71, 53
  br i1 %90, label %95, label %91

91:                                               ; preds = %89
  %92 = icmp eq i8 %71, 53
  %93 = icmp slt i8 %79, 54
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %121

95:                                               ; preds = %91, %89, %85
  br label %121

96:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20
  %97 = tail call ptr @__ctype_b_loc() #49
  %98 = load ptr, ptr %97, align 8, !tbaa !14
  %99 = getelementptr inbounds i8, ptr %18, i64 2
  %100 = load i8, ptr %99, align 1, !tbaa !60
  %101 = sext i8 %100 to i64
  %102 = getelementptr inbounds i16, ptr %98, i64 %101
  %103 = load i16, ptr %102, align 2, !tbaa !61
  %104 = and i16 %103, 2048
  %105 = icmp eq i16 %104, 0
  %106 = and i8 %100, -2
  %107 = icmp eq i8 %106, 56
  %108 = or i1 %107, %105
  br i1 %108, label %128, label %109

109:                                              ; preds = %96
  %110 = getelementptr inbounds i8, ptr %18, i64 3
  %111 = load i8, ptr %110, align 1, !tbaa !60
  %112 = sext i8 %111 to i64
  %113 = getelementptr inbounds i16, ptr %98, i64 %112
  %114 = load i16, ptr %113, align 2, !tbaa !61
  %115 = and i16 %114, 2048
  %116 = icmp eq i16 %115, 0
  %117 = and i8 %111, -2
  %118 = icmp eq i8 %117, 56
  %119 = or i1 %118, %116
  %120 = select i1 %119, i64 2, i64 3
  br label %128

121:                                              ; preds = %95, %91, %87, %77, %69, %50
  %122 = phi ptr [ %62, %69 ], [ %62, %77 ], [ %62, %87 ], [ %62, %91 ], [ %62, %95 ], [ %43, %50 ]
  %123 = phi i32 [ 1, %69 ], [ 2, %77 ], [ 2, %87 ], [ 2, %91 ], [ 3, %95 ], [ %58, %50 ]
  %124 = phi i32 [ 10, %69 ], [ 10, %77 ], [ 10, %87 ], [ 10, %91 ], [ 10, %95 ], [ 16, %50 ]
  %125 = add nuw nsw i32 %123, 1
  %126 = zext i32 %125 to i64
  %127 = zext i32 %123 to i64
  br label %128

128:                                              ; preds = %121, %109, %96
  %129 = phi i64 [ %127, %121 ], [ 1, %96 ], [ %120, %109 ]
  %130 = phi i64 [ %126, %121 ], [ 1, %96 ], [ %120, %109 ]
  %131 = phi i32 [ %124, %121 ], [ 8, %96 ], [ 8, %109 ]
  %132 = phi ptr [ %122, %121 ], [ %21, %96 ], [ %21, %109 ]
  %133 = getelementptr inbounds i8, ptr %18, i64 %130
  %134 = getelementptr inbounds i8, ptr %132, i64 %129
  %135 = load i8, ptr %134, align 1, !tbaa !60
  store i8 0, ptr %134, align 1, !tbaa !60
  %136 = tail call i64 @strtol(ptr nocapture noundef nonnull %132, ptr noundef null, i32 noundef %131) #43
  %137 = trunc i64 %136 to i8
  store i8 %137, ptr %17, align 1, !tbaa !60
  store i8 %135, ptr %134, align 1, !tbaa !60
  %138 = load i8, ptr %133, align 1, !tbaa !60
  %139 = icmp sgt i8 %138, 0
  br i1 %139, label %150, label %140

140:                                              ; preds = %128
  %141 = load ptr, ptr %14, align 8, !tbaa !40
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.46.105, ptr noundef %141) #43
  %142 = load i8, ptr %133, align 1, !tbaa !60
  br label %143

143:                                              ; preds = %140, %36, %32, %20
  %144 = phi i8 [ 92, %20 ], [ 92, %36 ], [ 92, %32 ], [ %142, %140 ]
  %145 = phi ptr [ %18, %20 ], [ %18, %36 ], [ %18, %32 ], [ %133, %140 ]
  %146 = getelementptr inbounds i8, ptr %17, i64 1
  store i8 %144, ptr %17, align 1, !tbaa !60
  %147 = getelementptr inbounds i8, ptr %145, i64 1
  %148 = load i8, ptr %147, align 1, !tbaa !60
  store i8 %148, ptr %146, align 1, !tbaa !60
  br label %150

149:                                              ; preds = %16
  store i8 %19, ptr %17, align 1, !tbaa !60
  br label %150

150:                                              ; preds = %149, %143, %128, %39, %35, %30, %29, %28, %27, %26, %25, %24
  %151 = phi ptr [ %146, %143 ], [ %17, %39 ], [ %17, %35 ], [ %17, %30 ], [ %17, %29 ], [ %17, %28 ], [ %17, %27 ], [ %17, %26 ], [ %17, %25 ], [ %17, %24 ], [ %17, %149 ], [ %17, %128 ]
  %152 = phi ptr [ %147, %143 ], [ %21, %39 ], [ %21, %35 ], [ %21, %30 ], [ %21, %29 ], [ %21, %28 ], [ %21, %27 ], [ %21, %26 ], [ %21, %25 ], [ %21, %24 ], [ %18, %149 ], [ %133, %128 ]
  %153 = getelementptr inbounds i8, ptr %151, i64 1
  br label %154

154:                                              ; preds = %150, %59, %40
  %155 = phi ptr [ %153, %150 ], [ %17, %59 ], [ %17, %40 ]
  %156 = phi ptr [ %152, %150 ], [ %21, %59 ], [ %21, %40 ]
  %157 = getelementptr inbounds i8, ptr %156, i64 1
  br label %16, !llvm.loop !211

158:                                              ; preds = %16
  %.lcssa = phi ptr [ %17, %16 ]
  store i8 0, ptr %.lcssa, align 1, !tbaa !60
  %159 = load ptr, ptr %14, align 8, !tbaa !40
  %160 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %159) #48
  %161 = trunc i64 %160 to i32
  %162 = getelementptr inbounds %struct.Term, ptr %13, i64 0, i32 6
  store i32 %161, ptr %162, align 8, !tbaa !43
  %163 = icmp eq i32 %161, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %158
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.47.106, ptr noundef %159) #43
  br label %165

165:                                              ; preds = %164, %158, %31
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @new_term_string(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #0 {
  %5 = tail call dereferenceable_or_null(48) ptr @calloc(i64 1, i64 48)
  %6 = ptrtoint ptr %2 to i64
  %7 = ptrtoint ptr %1 to i64
  %8 = sub i64 %6, %7
  %9 = add nsw i64 %8, 1
  %10 = tail call noalias ptr @malloc(i64 noundef %9) #50
  %11 = getelementptr inbounds %struct.Term, ptr %5, i64 0, i32 5
  store ptr %10, ptr %11, align 8, !tbaa !40
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %10, ptr align 1 %1, i64 %8, i1 false)
  %12 = getelementptr inbounds i8, ptr %10, i64 %8
  store i8 0, ptr %12, align 1, !tbaa !60
  %13 = trunc i64 %8 to i32
  %14 = getelementptr inbounds %struct.Term, ptr %5, i64 0, i32 6
  store i32 %13, ptr %14, align 8, !tbaa !43
  %15 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %16 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !33
  %18 = icmp eq ptr %17, null
  %19 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 3
  br i1 %18, label %20, label %25

20:                                               ; preds = %4
  store ptr %19, ptr %16, align 8, !tbaa !33
  %21 = load i32, ptr %15, align 8, !tbaa !32
  %22 = add i32 %21, 1
  store i32 %22, ptr %15, align 8, !tbaa !32
  %23 = zext i32 %21 to i64
  %24 = getelementptr inbounds ptr, ptr %19, i64 %23
  store ptr %5, ptr %24, align 8, !tbaa !14
  br label %42

25:                                               ; preds = %4
  %26 = icmp eq ptr %17, %19
  %27 = load i32, ptr %15, align 8, !tbaa !32
  br i1 %26, label %28, label %34

28:                                               ; preds = %25
  %29 = icmp ult i32 %27, 3
  br i1 %29, label %30, label %41

30:                                               ; preds = %28
  %31 = add nuw nsw i32 %27, 1
  store i32 %31, ptr %15, align 8, !tbaa !32
  %32 = zext i32 %27 to i64
  %33 = getelementptr inbounds ptr, ptr %17, i64 %32
  store ptr %5, ptr %33, align 8, !tbaa !14
  br label %42

34:                                               ; preds = %25
  %35 = and i32 %27, 7
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %34
  %38 = add i32 %27, 1
  store i32 %38, ptr %15, align 8, !tbaa !32
  %39 = zext i32 %27 to i64
  %40 = getelementptr inbounds ptr, ptr %17, i64 %39
  store ptr %5, ptr %40, align 8, !tbaa !14
  br label %42

41:                                               ; preds = %34, %28
  tail call void @vec_add_internal(ptr noundef nonnull %15, ptr noundef nonnull %5) #43
  br label %42

42:                                               ; preds = %41, %37, %30, %20
  %43 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  store i32 1, ptr %43, align 8, !tbaa !146
  %44 = getelementptr inbounds %struct.Elem, ptr %43, i64 0, i32 3
  store ptr %5, ptr %44, align 8, !tbaa !60
  %45 = getelementptr inbounds %struct.Elem, ptr %43, i64 0, i32 2
  store ptr %3, ptr %45, align 8, !tbaa !208
  %46 = getelementptr inbounds %struct.Rule, ptr %3, i64 0, i32 6
  %47 = getelementptr inbounds %struct.Rule, ptr %3, i64 0, i32 6, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !174
  %49 = icmp eq ptr %48, null
  %50 = getelementptr inbounds %struct.Rule, ptr %3, i64 0, i32 6, i32 3
  br i1 %49, label %51, label %56

51:                                               ; preds = %42
  store ptr %50, ptr %47, align 8, !tbaa !174
  %52 = load i32, ptr %46, align 8, !tbaa !75
  %53 = add i32 %52, 1
  store i32 %53, ptr %46, align 8, !tbaa !75
  %54 = zext i32 %52 to i64
  %55 = getelementptr inbounds ptr, ptr %50, i64 %54
  store ptr %43, ptr %55, align 8, !tbaa !14
  br label %73

56:                                               ; preds = %42
  %57 = icmp eq ptr %48, %50
  %58 = load i32, ptr %46, align 8, !tbaa !75
  br i1 %57, label %59, label %65

59:                                               ; preds = %56
  %60 = icmp ult i32 %58, 3
  br i1 %60, label %61, label %72

61:                                               ; preds = %59
  %62 = add nuw nsw i32 %58, 1
  store i32 %62, ptr %46, align 8, !tbaa !75
  %63 = zext i32 %58 to i64
  %64 = getelementptr inbounds ptr, ptr %48, i64 %63
  store ptr %43, ptr %64, align 8, !tbaa !14
  br label %73

65:                                               ; preds = %56
  %66 = and i32 %58, 7
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  %69 = add i32 %58, 1
  store i32 %69, ptr %46, align 8, !tbaa !75
  %70 = zext i32 %58 to i64
  %71 = getelementptr inbounds ptr, ptr %48, i64 %70
  store ptr %43, ptr %71, align 8, !tbaa !14
  br label %73

72:                                               ; preds = %65, %59
  tail call void @vec_add_internal(ptr noundef nonnull %46, ptr noundef nonnull %43) #43
  br label %73

73:                                               ; preds = %72, %68, %61, %51
  ret ptr %43
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare i64 @strtol(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #21

; Function Attrs: nounwind optsize uwtable
define internal ptr @new_ident(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  store i32 2, ptr %4, align 8, !tbaa !146
  %5 = tail call ptr @dup_str(ptr noundef %0, ptr noundef %1) #43
  %6 = getelementptr inbounds %struct.Elem, ptr %4, i64 0, i32 3
  store ptr %5, ptr %6, align 8, !tbaa !60
  %7 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %5) #48
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %struct.Elem, ptr %4, i64 0, i32 3, i32 0, i32 1
  store i32 %8, ptr %9, align 8, !tbaa !60
  %10 = getelementptr inbounds %struct.Elem, ptr %4, i64 0, i32 2
  store ptr %2, ptr %10, align 8, !tbaa !208
  %11 = icmp eq ptr %2, null
  br i1 %11, label %40, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.Rule, ptr %2, i64 0, i32 6
  %14 = getelementptr inbounds %struct.Rule, ptr %2, i64 0, i32 6, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !174
  %16 = icmp eq ptr %15, null
  %17 = getelementptr inbounds %struct.Rule, ptr %2, i64 0, i32 6, i32 3
  br i1 %16, label %18, label %23

18:                                               ; preds = %12
  store ptr %17, ptr %14, align 8, !tbaa !174
  %19 = load i32, ptr %13, align 8, !tbaa !75
  %20 = add i32 %19, 1
  store i32 %20, ptr %13, align 8, !tbaa !75
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds ptr, ptr %17, i64 %21
  store ptr %4, ptr %22, align 8, !tbaa !14
  br label %40

23:                                               ; preds = %12
  %24 = icmp eq ptr %15, %17
  %25 = load i32, ptr %13, align 8, !tbaa !75
  br i1 %24, label %26, label %32

26:                                               ; preds = %23
  %27 = icmp ult i32 %25, 3
  br i1 %27, label %28, label %39

28:                                               ; preds = %26
  %29 = add nuw nsw i32 %25, 1
  store i32 %29, ptr %13, align 8, !tbaa !75
  %30 = zext i32 %25 to i64
  %31 = getelementptr inbounds ptr, ptr %15, i64 %30
  store ptr %4, ptr %31, align 8, !tbaa !14
  br label %40

32:                                               ; preds = %23
  %33 = and i32 %25, 7
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = add i32 %25, 1
  store i32 %36, ptr %13, align 8, !tbaa !75
  %37 = zext i32 %25 to i64
  %38 = getelementptr inbounds ptr, ptr %15, i64 %37
  store ptr %4, ptr %38, align 8, !tbaa !14
  br label %40

39:                                               ; preds = %32, %26
  tail call void @vec_add_internal(ptr noundef nonnull %13, ptr noundef nonnull %4) #43
  br label %40

40:                                               ; preds = %39, %35, %28, %18, %3
  ret ptr %4
}

; Function Attrs: nounwind optsize uwtable
define internal void @new_token(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call dereferenceable_or_null(48) ptr @calloc(i64 1, i64 48)
  %5 = ptrtoint ptr %2 to i64
  %6 = ptrtoint ptr %1 to i64
  %7 = sub i64 %5, %6
  %8 = add nsw i64 %7, 1
  %9 = tail call noalias ptr @malloc(i64 noundef %8) #50
  %10 = getelementptr inbounds %struct.Term, ptr %4, i64 0, i32 5
  store ptr %9, ptr %10, align 8, !tbaa !40
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %9, ptr align 1 %1, i64 %7, i1 false)
  %11 = getelementptr inbounds i8, ptr %9, i64 %7
  store i8 0, ptr %11, align 1, !tbaa !60
  %12 = trunc i64 %7 to i32
  %13 = getelementptr inbounds %struct.Term, ptr %4, i64 0, i32 6
  store i32 %12, ptr %13, align 8, !tbaa !43
  %14 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %15 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !33
  %17 = icmp eq ptr %16, null
  %18 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 3
  br i1 %17, label %19, label %24

19:                                               ; preds = %3
  store ptr %18, ptr %15, align 8, !tbaa !33
  %20 = load i32, ptr %14, align 8, !tbaa !32
  %21 = add i32 %20, 1
  store i32 %21, ptr %14, align 8, !tbaa !32
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds ptr, ptr %18, i64 %22
  store ptr %4, ptr %23, align 8, !tbaa !14
  br label %41

24:                                               ; preds = %3
  %25 = icmp eq ptr %16, %18
  %26 = load i32, ptr %14, align 8, !tbaa !32
  br i1 %25, label %27, label %33

27:                                               ; preds = %24
  %28 = icmp ult i32 %26, 3
  br i1 %28, label %29, label %40

29:                                               ; preds = %27
  %30 = add nuw nsw i32 %26, 1
  store i32 %30, ptr %14, align 8, !tbaa !32
  %31 = zext i32 %26 to i64
  %32 = getelementptr inbounds ptr, ptr %16, i64 %31
  store ptr %4, ptr %32, align 8, !tbaa !14
  br label %41

33:                                               ; preds = %24
  %34 = and i32 %26, 7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %33
  %37 = add i32 %26, 1
  store i32 %37, ptr %14, align 8, !tbaa !32
  %38 = zext i32 %26 to i64
  %39 = getelementptr inbounds ptr, ptr %16, i64 %38
  store ptr %4, ptr %39, align 8, !tbaa !14
  br label %41

40:                                               ; preds = %33, %27
  tail call void @vec_add_internal(ptr noundef nonnull %14, ptr noundef nonnull %4) #43
  br label %41

41:                                               ; preds = %40, %36, %29, %19
  store i32 3, ptr %4, align 8, !tbaa !34
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @new_code(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call fastcc ptr @new_term_string(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #44
  %6 = getelementptr inbounds %struct.Elem, ptr %5, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !60
  store i32 2, ptr %7, align 8, !tbaa !34
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @add_global_code(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !56
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #50
  br label %21

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 6
  %12 = load i32, ptr %11, align 8, !tbaa !55
  %13 = add nsw i32 %12, 1
  %14 = and i32 %13, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %10
  %17 = add nsw i32 %12, 4
  %18 = sext i32 %17 to i64
  %19 = shl nsw i64 %18, 4
  %20 = tail call ptr @realloc(ptr noundef nonnull %6, i64 noundef %19) #51
  br label %21

21:                                               ; preds = %16, %8
  %22 = phi ptr [ %20, %16 ], [ %9, %8 ]
  store ptr %22, ptr %5, align 8, !tbaa !56
  br label %23

23:                                               ; preds = %21, %10
  %24 = tail call ptr @dup_str(ptr noundef %1, ptr noundef %2) #43
  %25 = load ptr, ptr %5, align 8, !tbaa !56
  %26 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 6
  %27 = load i32, ptr %26, align 8, !tbaa !55
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.Code, ptr %25, i64 %28
  store ptr %24, ptr %29, align 8, !tbaa !59
  %30 = getelementptr inbounds %struct.Code, ptr %25, i64 %28, i32 1
  store i32 %3, ptr %30, align 8, !tbaa !57
  %31 = add nsw i32 %27, 1
  store i32 %31, ptr %26, align 8, !tbaa !55
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #22

; Function Attrs: nounwind optsize uwtable
define internal void @new_declaration(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #50
  store ptr %1, ptr %4, align 8, !tbaa !212
  %5 = getelementptr inbounds %struct.Declaration, ptr %4, i64 0, i32 1
  store i32 %2, ptr %5, align 8, !tbaa !214
  %6 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7
  %7 = load i32, ptr %6, align 8, !tbaa !215
  %8 = getelementptr inbounds %struct.Declaration, ptr %4, i64 0, i32 2
  store i32 %7, ptr %8, align 4, !tbaa !216
  %9 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !217
  %11 = icmp eq ptr %10, null
  %12 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7, i32 3
  br i1 %11, label %13, label %17

13:                                               ; preds = %3
  store ptr %12, ptr %9, align 8, !tbaa !217
  %14 = add i32 %7, 1
  store i32 %14, ptr %6, align 8, !tbaa !215
  %15 = zext i32 %7 to i64
  %16 = getelementptr inbounds ptr, ptr %12, i64 %15
  store ptr %4, ptr %16, align 8, !tbaa !14
  br label %33

17:                                               ; preds = %3
  %18 = icmp eq ptr %10, %12
  br i1 %18, label %19, label %25

19:                                               ; preds = %17
  %20 = icmp ult i32 %7, 3
  br i1 %20, label %21, label %32

21:                                               ; preds = %19
  %22 = add nuw nsw i32 %7, 1
  store i32 %22, ptr %6, align 8, !tbaa !215
  %23 = zext i32 %7 to i64
  %24 = getelementptr inbounds ptr, ptr %10, i64 %23
  store ptr %4, ptr %24, align 8, !tbaa !14
  br label %33

25:                                               ; preds = %17
  %26 = and i32 %7, 7
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %25
  %29 = add i32 %7, 1
  store i32 %29, ptr %6, align 8, !tbaa !215
  %30 = zext i32 %7 to i64
  %31 = getelementptr inbounds ptr, ptr %10, i64 %30
  store ptr %4, ptr %31, align 8, !tbaa !14
  br label %33

32:                                               ; preds = %25, %19
  tail call void @vec_add_internal(ptr noundef nonnull %6, ptr noundef nonnull %4) #43
  br label %33

33:                                               ; preds = %32, %28, %21, %13
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @add_declaration(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = icmp eq ptr %1, %2
  br i1 %6, label %7, label %21

7:                                                ; preds = %5
  switch i32 %3, label %20 [
    i32 3, label %8
    i32 4, label %10
    i32 1, label %12
    i32 2, label %14
    i32 0, label %16
    i32 7, label %18
  ]

8:                                                ; preds = %7
  %9 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 10
  store i32 1, ptr %9, align 8, !tbaa !16
  br label %28

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 13
  store i32 1, ptr %11, align 4, !tbaa !22
  br label %28

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 15
  store i32 1, ptr %13, align 4, !tbaa !24
  br label %28

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 15
  store i32 0, ptr %15, align 4, !tbaa !24
  br label %28

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 14
  store i32 1, ptr %17, align 8, !tbaa !23
  br label %28

18:                                               ; preds = %7
  %19 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 16
  store i32 1, ptr %19, align 8, !tbaa !192
  br label %28

20:                                               ; preds = %7
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.155, i32 noundef %4) #43
  br label %21

21:                                               ; preds = %20, %5
  switch i32 %3, label %26 [
    i32 6, label %22
    i32 3, label %25
  ]

22:                                               ; preds = %21
  %23 = tail call ptr @dup_str(ptr noundef %1, ptr noundef %2) #43
  %24 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 9
  store ptr %23, ptr %24, align 8, !tbaa !191
  br label %28

25:                                               ; preds = %21
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.1.156, i32 noundef %4) #43
  br label %26

26:                                               ; preds = %25, %21
  %27 = tail call ptr @new_ident(ptr noundef %1, ptr noundef %2, ptr noundef null) #44
  tail call void @new_declaration(ptr noundef %0, ptr noundef %27, i32 noundef %3) #44
  br label %28

28:                                               ; preds = %26, %22, %18, %16, %14, %12, %10, %8
  ret void
}

; Function Attrs: nofree nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal ptr @find_pass(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) #14 {
  %4 = load i8, ptr %1, align 1, !tbaa !60
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %3
  %7 = tail call ptr @__ctype_b_loc() #49
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  br label %9

9:                                                ; preds = %17, %6
  %10 = phi i8 [ %4, %6 ], [ %19, %17 ]
  %11 = phi ptr [ %1, %6 ], [ %18, %17 ]
  %12 = sext i8 %10 to i64
  %13 = getelementptr inbounds i16, ptr %8, i64 %12
  %14 = load i16, ptr %13, align 2, !tbaa !61
  %15 = and i16 %14, 8192
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %9
  %18 = getelementptr inbounds i8, ptr %11, i64 1
  %19 = load i8, ptr %18, align 1, !tbaa !60
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %9, !llvm.loop !218

21:                                               ; preds = %17, %9, %3
  %22 = phi ptr [ %1, %3 ], [ %18, %17 ], [ %11, %9 ]
  %23 = ptrtoint ptr %2 to i64
  %24 = ptrtoint ptr %22 to i64
  %25 = sub i64 %23, %24
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8
  %28 = load i32, ptr %27, align 8, !tbaa !183
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %50, label %30

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !184
  %33 = shl i64 %25, 32
  %34 = ashr exact i64 %33, 32
  %35 = zext i32 %28 to i64
  br label %36

36:                                               ; preds = %47, %30
  %37 = phi i64 [ 0, %30 ], [ %48, %47 ]
  %38 = getelementptr inbounds ptr, ptr %32, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = getelementptr inbounds %struct.D_Pass, ptr %39, i64 0, i32 1
  %41 = load i32, ptr %40, align 8, !tbaa !187
  %42 = icmp eq i32 %41, %26
  br i1 %42, label %43, label %47

43:                                               ; preds = %36
  %44 = load ptr, ptr %39, align 8, !tbaa !185
  %45 = tail call i32 @strncmp(ptr noundef %44, ptr noundef nonnull %22, i64 noundef %34) #48
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %43, %36
  %48 = add nuw nsw i64 %37, 1
  %49 = icmp eq i64 %48, %35
  br i1 %49, label %50, label %36, !llvm.loop !219

50:                                               ; preds = %47, %43, %21
  %51 = phi ptr [ null, %21 ], [ null, %47 ], [ %39, %43 ]
  ret ptr %51
}

; Function Attrs: nounwind optsize uwtable
define internal void @add_pass(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = tail call ptr @find_pass(ptr noundef %0, ptr noundef %1, ptr noundef %2) #44
  %7 = icmp eq ptr %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  %9 = tail call ptr @dup_str(ptr noundef %1, ptr noundef %2) #43
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.2.159, ptr noundef %9, i32 noundef %4) #43
  br label %50

10:                                               ; preds = %5
  %11 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  %12 = tail call ptr @dup_str(ptr noundef %1, ptr noundef %2) #43
  store ptr %12, ptr %11, align 8, !tbaa !185
  %13 = ptrtoint ptr %2 to i64
  %14 = ptrtoint ptr %1 to i64
  %15 = sub i64 %13, %14
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %struct.D_Pass, ptr %11, i64 0, i32 1
  store i32 %16, ptr %17, align 8, !tbaa !187
  %18 = getelementptr inbounds %struct.D_Pass, ptr %11, i64 0, i32 2
  store i32 %3, ptr %18, align 4, !tbaa !188
  %19 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 28
  %20 = load i32, ptr %19, align 8, !tbaa !220
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %19, align 8, !tbaa !220
  %22 = getelementptr inbounds %struct.D_Pass, ptr %11, i64 0, i32 3
  store i32 %20, ptr %22, align 8, !tbaa !189
  %23 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8
  %24 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !184
  %26 = icmp eq ptr %25, null
  %27 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 8, i32 3
  br i1 %26, label %28, label %33

28:                                               ; preds = %10
  store ptr %27, ptr %24, align 8, !tbaa !184
  %29 = load i32, ptr %23, align 8, !tbaa !183
  %30 = add i32 %29, 1
  store i32 %30, ptr %23, align 8, !tbaa !183
  %31 = zext i32 %29 to i64
  %32 = getelementptr inbounds ptr, ptr %27, i64 %31
  store ptr %11, ptr %32, align 8, !tbaa !14
  br label %50

33:                                               ; preds = %10
  %34 = icmp eq ptr %25, %27
  %35 = load i32, ptr %23, align 8, !tbaa !183
  br i1 %34, label %36, label %42

36:                                               ; preds = %33
  %37 = icmp ult i32 %35, 3
  br i1 %37, label %38, label %49

38:                                               ; preds = %36
  %39 = add nuw nsw i32 %35, 1
  store i32 %39, ptr %23, align 8, !tbaa !183
  %40 = zext i32 %35 to i64
  %41 = getelementptr inbounds ptr, ptr %25, i64 %40
  store ptr %11, ptr %41, align 8, !tbaa !14
  br label %50

42:                                               ; preds = %33
  %43 = and i32 %35, 7
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = add i32 %35, 1
  store i32 %46, ptr %23, align 8, !tbaa !183
  %47 = zext i32 %35 to i64
  %48 = getelementptr inbounds ptr, ptr %25, i64 %47
  store ptr %11, ptr %48, align 8, !tbaa !14
  br label %50

49:                                               ; preds = %42, %36
  tail call void @vec_add_internal(ptr noundef nonnull %23, ptr noundef nonnull %11) #43
  br label %50

50:                                               ; preds = %49, %45, %38, %28, %8
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @add_pass_code(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, i32 noundef %7) #0 {
  %9 = tail call ptr @find_pass(ptr noundef %0, ptr noundef %2, ptr noundef %3) #44
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call ptr @dup_str(ptr noundef %2, ptr noundef %3) #43
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.3.160, ptr noundef %12, i32 noundef %6) #43
  br label %13

13:                                               ; preds = %11, %8
  %14 = getelementptr inbounds %struct.Rule, ptr %1, i64 0, i32 10
  %15 = getelementptr inbounds %struct.D_Pass, ptr %9, i64 0, i32 3
  %16 = load i32, ptr %14, align 8, !tbaa !72
  %17 = load i32, ptr %15, align 8, !tbaa !189
  %18 = icmp ugt i32 %16, %17
  br i1 %18, label %53, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.Rule, ptr %1, i64 0, i32 10, i32 2
  %21 = getelementptr inbounds %struct.Rule, ptr %1, i64 0, i32 10, i32 3
  br label %22

22:                                               ; preds = %49, %19
  %23 = phi i32 [ %17, %19 ], [ %50, %49 ]
  %24 = phi i32 [ %16, %19 ], [ %51, %49 ]
  %25 = load ptr, ptr %20, align 8, !tbaa !83
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  store ptr %21, ptr %20, align 8, !tbaa !83
  %28 = add i32 %24, 1
  store i32 %28, ptr %14, align 8, !tbaa !72
  %29 = zext i32 %24 to i64
  %30 = getelementptr inbounds ptr, ptr %21, i64 %29
  store ptr null, ptr %30, align 8, !tbaa !14
  br label %49

31:                                               ; preds = %22
  %32 = icmp eq ptr %25, %21
  br i1 %32, label %33, label %39

33:                                               ; preds = %31
  %34 = icmp ult i32 %24, 3
  br i1 %34, label %35, label %46

35:                                               ; preds = %33
  %36 = add nuw nsw i32 %24, 1
  store i32 %36, ptr %14, align 8, !tbaa !72
  %37 = zext i32 %24 to i64
  %38 = getelementptr inbounds ptr, ptr %21, i64 %37
  store ptr null, ptr %38, align 8, !tbaa !14
  br label %49

39:                                               ; preds = %31
  %40 = and i32 %24, 7
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = add i32 %24, 1
  store i32 %43, ptr %14, align 8, !tbaa !72
  %44 = zext i32 %24 to i64
  %45 = getelementptr inbounds ptr, ptr %25, i64 %44
  store ptr null, ptr %45, align 8, !tbaa !14
  br label %49

46:                                               ; preds = %39, %33
  tail call void @vec_add_internal(ptr noundef nonnull %14, ptr noundef null) #43
  %47 = load i32, ptr %14, align 8, !tbaa !72
  %48 = load i32, ptr %15, align 8, !tbaa !189
  br label %49

49:                                               ; preds = %46, %42, %35, %27
  %50 = phi i32 [ %48, %46 ], [ %23, %42 ], [ %23, %35 ], [ %23, %27 ]
  %51 = phi i32 [ %47, %46 ], [ %43, %42 ], [ %36, %35 ], [ %28, %27 ]
  %52 = icmp ugt i32 %51, %50
  br i1 %52, label %53, label %22, !llvm.loop !221

53:                                               ; preds = %49, %13
  %54 = phi i32 [ %17, %13 ], [ %50, %49 ]
  %55 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #50
  %56 = getelementptr inbounds %struct.Rule, ptr %1, i64 0, i32 10, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !83
  %58 = zext i32 %54 to i64
  %59 = getelementptr inbounds ptr, ptr %57, i64 %58
  store ptr %55, ptr %59, align 8, !tbaa !14
  %60 = tail call ptr @dup_str(ptr noundef %4, ptr noundef %5) #43
  %61 = load ptr, ptr %56, align 8, !tbaa !83
  %62 = load i32, ptr %15, align 8, !tbaa !189
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds ptr, ptr %61, i64 %63
  %65 = load ptr, ptr %64, align 8, !tbaa !14
  store ptr %60, ptr %65, align 8, !tbaa !59
  %66 = load ptr, ptr %64, align 8, !tbaa !14
  %67 = getelementptr inbounds %struct.Code, ptr %66, i64 0, i32 1
  store i32 %7, ptr %67, align 8, !tbaa !57
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @new_internal_production(ptr noundef %0, ptr noundef readonly %1) #0 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = load ptr, ptr %1, align 8, !tbaa !48
  br label %6

6:                                                ; preds = %4, %2
  %7 = phi ptr [ %5, %4 ], [ @.str.4.161, %2 ]
  %8 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #48
  %9 = add i64 %8, 20
  %10 = tail call noalias ptr @malloc(i64 noundef %9) #50
  %11 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !38
  %13 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %10, ptr noundef nonnull dereferenceable(1) @.str.5.162, ptr noundef %7, i32 noundef %12) #43
  %14 = tail call ptr @new_production(ptr noundef %0, ptr noundef %10) #44
  %15 = getelementptr inbounds %struct.Production, ptr %14, i64 0, i32 4
  %16 = load i8, ptr %15, align 4
  %17 = and i8 %16, -29
  %18 = or i8 %17, 4
  store i8 %18, ptr %15, align 4
  br i1 %3, label %52, label %19

19:                                               ; preds = %6
  %20 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 4
  %21 = load i8, ptr %20, align 4
  %22 = and i8 %21, 1
  %23 = and i8 %18, -26
  %24 = or i8 %22, %23
  store i8 %24, ptr %15, align 4
  %25 = load i32, ptr %11, align 8, !tbaa !38
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %54, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  br label %29

29:                                               ; preds = %46, %27
  %30 = phi i32 [ 0, %27 ], [ %49, %46 ]
  %31 = phi i32 [ 0, %27 ], [ %50, %46 ]
  %32 = phi ptr [ null, %27 ], [ %47, %46 ]
  %33 = icmp eq i32 %30, 0
  %34 = load ptr, ptr %28, align 8, !tbaa !45
  %35 = sext i32 %31 to i64
  %36 = getelementptr inbounds ptr, ptr %34, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !14
  br i1 %33, label %39, label %38

38:                                               ; preds = %29
  store ptr %32, ptr %36, align 8, !tbaa !14
  br label %46

39:                                               ; preds = %29
  %40 = icmp eq ptr %37, %1
  br i1 %40, label %41, label %46

41:                                               ; preds = %39
  %42 = add nuw nsw i32 %31, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds ptr, ptr %34, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !14
  store ptr %14, ptr %44, align 8, !tbaa !14
  br label %46

46:                                               ; preds = %41, %39, %38
  %47 = phi ptr [ %37, %38 ], [ %45, %41 ], [ %32, %39 ]
  %48 = phi i32 [ %31, %38 ], [ %42, %41 ], [ %31, %39 ]
  %49 = phi i32 [ 1, %38 ], [ 1, %41 ], [ 0, %39 ]
  %50 = add nsw i32 %48, 1
  %51 = icmp ult i32 %50, %25
  br i1 %51, label %29, label %54, !llvm.loop !222

52:                                               ; preds = %6
  %53 = and i8 %18, -26
  store i8 %53, ptr %15, align 4
  br label %54

54:                                               ; preds = %52, %46, %19
  ret ptr %14
}

; Function Attrs: nounwind optsize uwtable
define internal void @conditional_EBNF(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 23
  %3 = load ptr, ptr %2, align 8, !tbaa !223
  %4 = tail call ptr @new_internal_production(ptr noundef %0, ptr noundef %3) #44
  %5 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 4
  %6 = load i8, ptr %5, align 4
  %7 = and i8 %6, -29
  %8 = or i8 %7, 8
  store i8 %8, ptr %5, align 4
  %9 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %10 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 1
  store ptr %4, ptr %10, align 8, !tbaa !68
  %11 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %12 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 7
  store ptr %11, ptr %12, align 8, !tbaa !207
  store i32 3, ptr %11, align 8, !tbaa !146
  %13 = getelementptr inbounds %struct.Elem, ptr %11, i64 0, i32 2
  store ptr %9, ptr %13, align 8, !tbaa !208
  %14 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %15 = load i32, ptr %14, align 8, !tbaa !209
  %16 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 11
  store i32 %15, ptr %16, align 8, !tbaa !82
  %17 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 2
  %18 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6
  %19 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 24
  %20 = load ptr, ptr %19, align 8, !tbaa !224
  %21 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 6
  %22 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 6, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !174
  %24 = load i32, ptr %21, align 8, !tbaa !75
  %25 = add i32 %24, -1
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !14
  %29 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  store ptr %29, ptr %17, align 8, !tbaa !174
  store i32 1, ptr %18, align 8, !tbaa !75
  store ptr %28, ptr %29, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 6
  %31 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 6, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !174
  %33 = load i32, ptr %30, align 8, !tbaa !75
  %34 = add i32 %33, -1
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds ptr, ptr %32, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !14
  %38 = getelementptr inbounds %struct.Elem, ptr %37, i64 0, i32 2
  store ptr %9, ptr %38, align 8, !tbaa !208
  %39 = load ptr, ptr %29, align 8, !tbaa !14
  %40 = getelementptr inbounds %struct.Elem, ptr %39, i64 0, i32 2
  store ptr %9, ptr %40, align 8, !tbaa !208
  %41 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2
  %42 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !67
  %44 = icmp eq ptr %43, null
  %45 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  br i1 %44, label %46, label %51

46:                                               ; preds = %1
  store ptr %45, ptr %42, align 8, !tbaa !67
  %47 = load i32, ptr %41, align 8, !tbaa !74
  %48 = add i32 %47, 1
  store i32 %48, ptr %41, align 8, !tbaa !74
  %49 = zext i32 %47 to i64
  %50 = getelementptr inbounds ptr, ptr %45, i64 %49
  store ptr %9, ptr %50, align 8, !tbaa !14
  br label %68

51:                                               ; preds = %1
  %52 = icmp eq ptr %43, %45
  %53 = load i32, ptr %41, align 8, !tbaa !74
  br i1 %52, label %54, label %60

54:                                               ; preds = %51
  %55 = icmp ult i32 %53, 3
  br i1 %55, label %56, label %67

56:                                               ; preds = %54
  %57 = add nuw nsw i32 %53, 1
  store i32 %57, ptr %41, align 8, !tbaa !74
  %58 = zext i32 %53 to i64
  %59 = getelementptr inbounds ptr, ptr %43, i64 %58
  store ptr %9, ptr %59, align 8, !tbaa !14
  br label %68

60:                                               ; preds = %51
  %61 = and i32 %53, 7
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %60
  %64 = add i32 %53, 1
  store i32 %64, ptr %41, align 8, !tbaa !74
  %65 = zext i32 %53 to i64
  %66 = getelementptr inbounds ptr, ptr %43, i64 %65
  store ptr %9, ptr %66, align 8, !tbaa !14
  br label %68

67:                                               ; preds = %60, %54
  tail call void @vec_add_internal(ptr noundef nonnull %41, ptr noundef nonnull %9) #43
  br label %68

68:                                               ; preds = %67, %63, %56, %46
  %69 = load ptr, ptr %42, align 8, !tbaa !67
  %70 = icmp eq ptr %69, null
  br i1 %70, label %71, label %84

71:                                               ; preds = %68
  %72 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %73 = getelementptr inbounds %struct.Rule, ptr %72, i64 0, i32 1
  store ptr %4, ptr %73, align 8, !tbaa !68
  %74 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %75 = getelementptr inbounds %struct.Rule, ptr %72, i64 0, i32 7
  store ptr %74, ptr %75, align 8, !tbaa !207
  store i32 3, ptr %74, align 8, !tbaa !146
  %76 = getelementptr inbounds %struct.Elem, ptr %74, i64 0, i32 2
  store ptr %72, ptr %76, align 8, !tbaa !208
  %77 = load i32, ptr %14, align 8, !tbaa !209
  %78 = getelementptr inbounds %struct.Rule, ptr %72, i64 0, i32 11
  store i32 %77, ptr %78, align 8, !tbaa !82
  %79 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  store ptr %79, ptr %42, align 8, !tbaa !67
  %80 = load i32, ptr %41, align 8, !tbaa !74
  %81 = add i32 %80, 1
  store i32 %81, ptr %41, align 8, !tbaa !74
  %82 = zext i32 %80 to i64
  %83 = getelementptr inbounds ptr, ptr %79, i64 %82
  store ptr %72, ptr %83, align 8, !tbaa !14
  br label %123

84:                                               ; preds = %68
  %85 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  %86 = icmp eq ptr %69, %85
  %87 = load i32, ptr %41, align 8, !tbaa !74
  br i1 %86, label %88, label %101

88:                                               ; preds = %84
  %89 = icmp ult i32 %87, 3
  %90 = load i32, ptr %14, align 8, !tbaa !209
  br i1 %89, label %91, label %115

91:                                               ; preds = %88
  %92 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %93 = getelementptr inbounds %struct.Rule, ptr %92, i64 0, i32 1
  store ptr %4, ptr %93, align 8, !tbaa !68
  %94 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %95 = getelementptr inbounds %struct.Rule, ptr %92, i64 0, i32 7
  store ptr %94, ptr %95, align 8, !tbaa !207
  store i32 3, ptr %94, align 8, !tbaa !146
  %96 = getelementptr inbounds %struct.Elem, ptr %94, i64 0, i32 2
  store ptr %92, ptr %96, align 8, !tbaa !208
  %97 = getelementptr inbounds %struct.Rule, ptr %92, i64 0, i32 11
  store i32 %90, ptr %97, align 8, !tbaa !82
  %98 = add nuw nsw i32 %87, 1
  store i32 %98, ptr %41, align 8, !tbaa !74
  %99 = zext i32 %87 to i64
  %100 = getelementptr inbounds ptr, ptr %85, i64 %99
  store ptr %92, ptr %100, align 8, !tbaa !14
  br label %123

101:                                              ; preds = %84
  %102 = and i32 %87, 7
  %103 = icmp eq i32 %102, 0
  %104 = load i32, ptr %14, align 8, !tbaa !209
  br i1 %103, label %115, label %105

105:                                              ; preds = %101
  %106 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %107 = getelementptr inbounds %struct.Rule, ptr %106, i64 0, i32 1
  store ptr %4, ptr %107, align 8, !tbaa !68
  %108 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %109 = getelementptr inbounds %struct.Rule, ptr %106, i64 0, i32 7
  store ptr %108, ptr %109, align 8, !tbaa !207
  store i32 3, ptr %108, align 8, !tbaa !146
  %110 = getelementptr inbounds %struct.Elem, ptr %108, i64 0, i32 2
  store ptr %106, ptr %110, align 8, !tbaa !208
  %111 = getelementptr inbounds %struct.Rule, ptr %106, i64 0, i32 11
  store i32 %104, ptr %111, align 8, !tbaa !82
  %112 = add i32 %87, 1
  store i32 %112, ptr %41, align 8, !tbaa !74
  %113 = zext i32 %87 to i64
  %114 = getelementptr inbounds ptr, ptr %69, i64 %113
  store ptr %106, ptr %114, align 8, !tbaa !14
  br label %123

115:                                              ; preds = %101, %88
  %116 = phi i32 [ %90, %88 ], [ %104, %101 ]
  %117 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %118 = getelementptr inbounds %struct.Rule, ptr %117, i64 0, i32 1
  store ptr %4, ptr %118, align 8, !tbaa !68
  %119 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %120 = getelementptr inbounds %struct.Rule, ptr %117, i64 0, i32 7
  store ptr %119, ptr %120, align 8, !tbaa !207
  store i32 3, ptr %119, align 8, !tbaa !146
  %121 = getelementptr inbounds %struct.Elem, ptr %119, i64 0, i32 2
  store ptr %117, ptr %121, align 8, !tbaa !208
  %122 = getelementptr inbounds %struct.Rule, ptr %117, i64 0, i32 11
  store i32 %116, ptr %122, align 8, !tbaa !82
  tail call void @vec_add_internal(ptr noundef nonnull %41, ptr noundef %117) #43
  br label %123

123:                                              ; preds = %115, %105, %91, %71
  %124 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 24
  %125 = load ptr, ptr %124, align 8, !tbaa !224
  %126 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %127 = getelementptr inbounds %struct.Elem, ptr %126, i64 0, i32 3
  store ptr %4, ptr %127, align 8, !tbaa !60
  %128 = getelementptr inbounds %struct.Elem, ptr %126, i64 0, i32 2
  store ptr %125, ptr %128, align 8, !tbaa !208
  %129 = getelementptr inbounds %struct.Rule, ptr %125, i64 0, i32 6
  %130 = getelementptr inbounds %struct.Rule, ptr %125, i64 0, i32 6, i32 2
  %131 = load ptr, ptr %130, align 8, !tbaa !174
  %132 = load i32, ptr %129, align 8, !tbaa !75
  %133 = add i32 %132, -1
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds ptr, ptr %131, i64 %134
  store ptr %126, ptr %135, align 8, !tbaa !14
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @star_EBNF(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 23
  %3 = load ptr, ptr %2, align 8, !tbaa !223
  %4 = tail call ptr @new_internal_production(ptr noundef %0, ptr noundef %3) #44
  %5 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 4
  %6 = load i8, ptr %5, align 4
  %7 = and i8 %6, -29
  %8 = or i8 %7, 12
  store i8 %8, ptr %5, align 4
  %9 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %10 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 1
  store ptr %4, ptr %10, align 8, !tbaa !68
  %11 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %12 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 7
  store ptr %11, ptr %12, align 8, !tbaa !207
  store i32 3, ptr %11, align 8, !tbaa !146
  %13 = getelementptr inbounds %struct.Elem, ptr %11, i64 0, i32 2
  store ptr %9, ptr %13, align 8, !tbaa !208
  %14 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %15 = load i32, ptr %14, align 8, !tbaa !209
  %16 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 11
  store i32 %15, ptr %16, align 8, !tbaa !82
  %17 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 11
  %18 = load i32, ptr %17, align 4, !tbaa !20
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6
  %21 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 2
  br i1 %19, label %22, label %52

22:                                               ; preds = %1
  %23 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %24 = getelementptr inbounds %struct.Elem, ptr %23, i64 0, i32 3
  store ptr %4, ptr %24, align 8, !tbaa !60
  %25 = getelementptr inbounds %struct.Elem, ptr %23, i64 0, i32 2
  store ptr %9, ptr %25, align 8, !tbaa !208
  %26 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  store ptr %26, ptr %21, align 8, !tbaa !174
  store i32 1, ptr %20, align 8, !tbaa !75
  store ptr %23, ptr %26, align 8, !tbaa !14
  %27 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 24
  %28 = load ptr, ptr %27, align 8, !tbaa !224
  %29 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6
  %30 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !174
  %32 = load i32, ptr %29, align 8, !tbaa !75
  %33 = add i32 %32, -1
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds ptr, ptr %31, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !14
  store i32 2, ptr %20, align 8, !tbaa !75
  %37 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3, i64 1
  store ptr %36, ptr %37, align 8, !tbaa !14
  %38 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %39 = getelementptr inbounds %struct.Elem, ptr %38, i64 0, i32 3
  store ptr %4, ptr %39, align 8, !tbaa !60
  %40 = getelementptr inbounds %struct.Elem, ptr %38, i64 0, i32 2
  store ptr %28, ptr %40, align 8, !tbaa !208
  %41 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6
  %42 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !174
  %44 = load i32, ptr %41, align 8, !tbaa !75
  %45 = add i32 %44, -1
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds ptr, ptr %43, i64 %46
  store ptr %38, ptr %47, align 8, !tbaa !14
  %48 = load ptr, ptr %21, align 8, !tbaa !174
  %49 = getelementptr inbounds ptr, ptr %48, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !14
  %51 = getelementptr inbounds %struct.Elem, ptr %50, i64 0, i32 2
  store ptr %9, ptr %51, align 8, !tbaa !208
  br label %86

52:                                               ; preds = %1
  %53 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 24
  %54 = load ptr, ptr %53, align 8, !tbaa !224
  %55 = getelementptr inbounds %struct.Rule, ptr %54, i64 0, i32 6
  %56 = getelementptr inbounds %struct.Rule, ptr %54, i64 0, i32 6, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !174
  %58 = load i32, ptr %55, align 8, !tbaa !75
  %59 = add i32 %58, -1
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds ptr, ptr %57, i64 %60
  %62 = load ptr, ptr %61, align 8, !tbaa !14
  %63 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  store ptr %63, ptr %21, align 8, !tbaa !174
  store i32 1, ptr %20, align 8, !tbaa !75
  store ptr %62, ptr %63, align 8, !tbaa !14
  %64 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %65 = getelementptr inbounds %struct.Elem, ptr %64, i64 0, i32 3
  store ptr %4, ptr %65, align 8, !tbaa !60
  %66 = getelementptr inbounds %struct.Elem, ptr %64, i64 0, i32 2
  store ptr %54, ptr %66, align 8, !tbaa !208
  %67 = getelementptr inbounds %struct.Rule, ptr %54, i64 0, i32 6
  %68 = getelementptr inbounds %struct.Rule, ptr %54, i64 0, i32 6, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !174
  %70 = load i32, ptr %67, align 8, !tbaa !75
  %71 = add i32 %70, -1
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds ptr, ptr %69, i64 %72
  store ptr %64, ptr %73, align 8, !tbaa !14
  %74 = load ptr, ptr %21, align 8, !tbaa !174
  %75 = load ptr, ptr %74, align 8, !tbaa !14
  %76 = getelementptr inbounds %struct.Elem, ptr %75, i64 0, i32 2
  store ptr %9, ptr %76, align 8, !tbaa !208
  %77 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  %78 = icmp eq ptr %74, %77
  %79 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %80 = getelementptr inbounds %struct.Elem, ptr %79, i64 0, i32 3
  store ptr %4, ptr %80, align 8, !tbaa !60
  %81 = getelementptr inbounds %struct.Elem, ptr %79, i64 0, i32 2
  store ptr %9, ptr %81, align 8, !tbaa !208
  store i32 2, ptr %20, align 8, !tbaa !75
  br i1 %78, label %82, label %84

82:                                               ; preds = %52
  %83 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3, i64 1
  store ptr %79, ptr %83, align 8, !tbaa !14
  br label %86

84:                                               ; preds = %52
  %85 = getelementptr inbounds ptr, ptr %74, i64 1
  store ptr %79, ptr %85, align 8, !tbaa !14
  br label %86

86:                                               ; preds = %84, %82, %22
  %87 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2
  %88 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 2
  %89 = load ptr, ptr %88, align 8, !tbaa !67
  %90 = icmp eq ptr %89, null
  %91 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  br i1 %90, label %92, label %97

92:                                               ; preds = %86
  store ptr %91, ptr %88, align 8, !tbaa !67
  %93 = load i32, ptr %87, align 8, !tbaa !74
  %94 = add i32 %93, 1
  store i32 %94, ptr %87, align 8, !tbaa !74
  %95 = zext i32 %93 to i64
  %96 = getelementptr inbounds ptr, ptr %91, i64 %95
  store ptr %9, ptr %96, align 8, !tbaa !14
  br label %114

97:                                               ; preds = %86
  %98 = icmp eq ptr %89, %91
  %99 = load i32, ptr %87, align 8, !tbaa !74
  br i1 %98, label %100, label %106

100:                                              ; preds = %97
  %101 = icmp ult i32 %99, 3
  br i1 %101, label %102, label %113

102:                                              ; preds = %100
  %103 = add nuw nsw i32 %99, 1
  store i32 %103, ptr %87, align 8, !tbaa !74
  %104 = zext i32 %99 to i64
  %105 = getelementptr inbounds ptr, ptr %89, i64 %104
  store ptr %9, ptr %105, align 8, !tbaa !14
  br label %114

106:                                              ; preds = %97
  %107 = and i32 %99, 7
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %113, label %109

109:                                              ; preds = %106
  %110 = add i32 %99, 1
  store i32 %110, ptr %87, align 8, !tbaa !74
  %111 = zext i32 %99 to i64
  %112 = getelementptr inbounds ptr, ptr %89, i64 %111
  store ptr %9, ptr %112, align 8, !tbaa !14
  br label %114

113:                                              ; preds = %106, %100
  tail call void @vec_add_internal(ptr noundef nonnull %87, ptr noundef nonnull %9) #43
  br label %114

114:                                              ; preds = %113, %109, %102, %92
  %115 = load ptr, ptr %88, align 8, !tbaa !67
  %116 = icmp eq ptr %115, null
  br i1 %116, label %117, label %130

117:                                              ; preds = %114
  %118 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %119 = getelementptr inbounds %struct.Rule, ptr %118, i64 0, i32 1
  store ptr %4, ptr %119, align 8, !tbaa !68
  %120 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %121 = getelementptr inbounds %struct.Rule, ptr %118, i64 0, i32 7
  store ptr %120, ptr %121, align 8, !tbaa !207
  store i32 3, ptr %120, align 8, !tbaa !146
  %122 = getelementptr inbounds %struct.Elem, ptr %120, i64 0, i32 2
  store ptr %118, ptr %122, align 8, !tbaa !208
  %123 = load i32, ptr %14, align 8, !tbaa !209
  %124 = getelementptr inbounds %struct.Rule, ptr %118, i64 0, i32 11
  store i32 %123, ptr %124, align 8, !tbaa !82
  %125 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  store ptr %125, ptr %88, align 8, !tbaa !67
  %126 = load i32, ptr %87, align 8, !tbaa !74
  %127 = add i32 %126, 1
  store i32 %127, ptr %87, align 8, !tbaa !74
  %128 = zext i32 %126 to i64
  %129 = getelementptr inbounds ptr, ptr %125, i64 %128
  store ptr %118, ptr %129, align 8, !tbaa !14
  br label %169

130:                                              ; preds = %114
  %131 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  %132 = icmp eq ptr %115, %131
  %133 = load i32, ptr %87, align 8, !tbaa !74
  br i1 %132, label %134, label %147

134:                                              ; preds = %130
  %135 = icmp ult i32 %133, 3
  %136 = load i32, ptr %14, align 8, !tbaa !209
  br i1 %135, label %137, label %161

137:                                              ; preds = %134
  %138 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %139 = getelementptr inbounds %struct.Rule, ptr %138, i64 0, i32 1
  store ptr %4, ptr %139, align 8, !tbaa !68
  %140 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %141 = getelementptr inbounds %struct.Rule, ptr %138, i64 0, i32 7
  store ptr %140, ptr %141, align 8, !tbaa !207
  store i32 3, ptr %140, align 8, !tbaa !146
  %142 = getelementptr inbounds %struct.Elem, ptr %140, i64 0, i32 2
  store ptr %138, ptr %142, align 8, !tbaa !208
  %143 = getelementptr inbounds %struct.Rule, ptr %138, i64 0, i32 11
  store i32 %136, ptr %143, align 8, !tbaa !82
  %144 = add nuw nsw i32 %133, 1
  store i32 %144, ptr %87, align 8, !tbaa !74
  %145 = zext i32 %133 to i64
  %146 = getelementptr inbounds ptr, ptr %131, i64 %145
  store ptr %138, ptr %146, align 8, !tbaa !14
  br label %169

147:                                              ; preds = %130
  %148 = and i32 %133, 7
  %149 = icmp eq i32 %148, 0
  %150 = load i32, ptr %14, align 8, !tbaa !209
  br i1 %149, label %161, label %151

151:                                              ; preds = %147
  %152 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %153 = getelementptr inbounds %struct.Rule, ptr %152, i64 0, i32 1
  store ptr %4, ptr %153, align 8, !tbaa !68
  %154 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %155 = getelementptr inbounds %struct.Rule, ptr %152, i64 0, i32 7
  store ptr %154, ptr %155, align 8, !tbaa !207
  store i32 3, ptr %154, align 8, !tbaa !146
  %156 = getelementptr inbounds %struct.Elem, ptr %154, i64 0, i32 2
  store ptr %152, ptr %156, align 8, !tbaa !208
  %157 = getelementptr inbounds %struct.Rule, ptr %152, i64 0, i32 11
  store i32 %150, ptr %157, align 8, !tbaa !82
  %158 = add i32 %133, 1
  store i32 %158, ptr %87, align 8, !tbaa !74
  %159 = zext i32 %133 to i64
  %160 = getelementptr inbounds ptr, ptr %115, i64 %159
  store ptr %152, ptr %160, align 8, !tbaa !14
  br label %169

161:                                              ; preds = %147, %134
  %162 = phi i32 [ %136, %134 ], [ %150, %147 ]
  %163 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %164 = getelementptr inbounds %struct.Rule, ptr %163, i64 0, i32 1
  store ptr %4, ptr %164, align 8, !tbaa !68
  %165 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %166 = getelementptr inbounds %struct.Rule, ptr %163, i64 0, i32 7
  store ptr %165, ptr %166, align 8, !tbaa !207
  store i32 3, ptr %165, align 8, !tbaa !146
  %167 = getelementptr inbounds %struct.Elem, ptr %165, i64 0, i32 2
  store ptr %163, ptr %167, align 8, !tbaa !208
  %168 = getelementptr inbounds %struct.Rule, ptr %163, i64 0, i32 11
  store i32 %162, ptr %168, align 8, !tbaa !82
  tail call void @vec_add_internal(ptr noundef nonnull %87, ptr noundef %163) #43
  br label %169

169:                                              ; preds = %161, %151, %137, %117
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @plus_EBNF(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 23
  %3 = load ptr, ptr %2, align 8, !tbaa !223
  %4 = tail call ptr @new_internal_production(ptr noundef %0, ptr noundef %3) #44
  %5 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 4
  %6 = load i8, ptr %5, align 4
  %7 = and i8 %6, -29
  %8 = or i8 %7, 16
  store i8 %8, ptr %5, align 4
  %9 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %10 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 1
  store ptr %4, ptr %10, align 8, !tbaa !68
  %11 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %12 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 7
  store ptr %11, ptr %12, align 8, !tbaa !207
  store i32 3, ptr %11, align 8, !tbaa !146
  %13 = getelementptr inbounds %struct.Elem, ptr %11, i64 0, i32 2
  store ptr %9, ptr %13, align 8, !tbaa !208
  %14 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %15 = load i32, ptr %14, align 8, !tbaa !209
  %16 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 11
  store i32 %15, ptr %16, align 8, !tbaa !82
  %17 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 11
  %18 = load i32, ptr %17, align 4, !tbaa !20
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 24
  %21 = load ptr, ptr %20, align 8, !tbaa !224
  %22 = getelementptr inbounds %struct.Rule, ptr %21, i64 0, i32 6
  %23 = getelementptr inbounds %struct.Rule, ptr %21, i64 0, i32 6, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !174
  %25 = load i32, ptr %22, align 8, !tbaa !75
  %26 = add i32 %25, -1
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds ptr, ptr %24, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6
  %31 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 2
  br i1 %19, label %32, label %48

32:                                               ; preds = %1
  %33 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %34 = getelementptr inbounds %struct.Elem, ptr %33, i64 0, i32 3
  store ptr %4, ptr %34, align 8, !tbaa !60
  %35 = getelementptr inbounds %struct.Elem, ptr %33, i64 0, i32 2
  store ptr %9, ptr %35, align 8, !tbaa !208
  %36 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  store ptr %36, ptr %31, align 8, !tbaa !174
  store i32 1, ptr %30, align 8, !tbaa !75
  store ptr %33, ptr %36, align 8, !tbaa !14
  %37 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #50
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %37, ptr noundef nonnull align 8 dereferenceable(32) %29, i64 32, i1 false)
  %38 = getelementptr inbounds %struct.Elem, ptr %37, i64 0, i32 2
  store ptr %9, ptr %38, align 8, !tbaa !208
  store i32 2, ptr %30, align 8, !tbaa !75
  %39 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3, i64 1
  store ptr %37, ptr %39, align 8, !tbaa !14
  %40 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %41 = getelementptr inbounds %struct.Elem, ptr %40, i64 0, i32 3
  store ptr %4, ptr %41, align 8, !tbaa !60
  %42 = getelementptr inbounds %struct.Elem, ptr %40, i64 0, i32 2
  store ptr %21, ptr %42, align 8, !tbaa !208
  %43 = load ptr, ptr %23, align 8, !tbaa !174
  %44 = load i32, ptr %22, align 8, !tbaa !75
  %45 = add i32 %44, -1
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds ptr, ptr %43, i64 %46
  store ptr %40, ptr %47, align 8, !tbaa !14
  br label %78

48:                                               ; preds = %1
  %49 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #50
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %49, ptr noundef nonnull align 8 dereferenceable(32) %29, i64 32, i1 false)
  %50 = getelementptr inbounds %struct.Elem, ptr %49, i64 0, i32 2
  store ptr %9, ptr %50, align 8, !tbaa !208
  %51 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  store ptr %51, ptr %31, align 8, !tbaa !174
  store i32 1, ptr %30, align 8, !tbaa !75
  store ptr %49, ptr %51, align 8, !tbaa !14
  %52 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %53 = getelementptr inbounds %struct.Elem, ptr %52, i64 0, i32 3
  store ptr %4, ptr %53, align 8, !tbaa !60
  %54 = getelementptr inbounds %struct.Elem, ptr %52, i64 0, i32 2
  store ptr %21, ptr %54, align 8, !tbaa !208
  %55 = load ptr, ptr %23, align 8, !tbaa !174
  %56 = load i32, ptr %22, align 8, !tbaa !75
  %57 = add i32 %56, -1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds ptr, ptr %55, i64 %58
  store ptr %52, ptr %59, align 8, !tbaa !14
  %60 = load ptr, ptr %31, align 8, !tbaa !174
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %68

62:                                               ; preds = %48
  %63 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %64 = getelementptr inbounds %struct.Elem, ptr %63, i64 0, i32 3
  store ptr %4, ptr %64, align 8, !tbaa !60
  %65 = getelementptr inbounds %struct.Elem, ptr %63, i64 0, i32 2
  store ptr %9, ptr %65, align 8, !tbaa !208
  %66 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  store ptr %66, ptr %31, align 8, !tbaa !174
  store i32 2, ptr %30, align 8, !tbaa !75
  %67 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3, i64 1
  store ptr %63, ptr %67, align 8, !tbaa !14
  br label %78

68:                                               ; preds = %48
  %69 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3
  %70 = icmp eq ptr %60, %69
  %71 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %72 = getelementptr inbounds %struct.Elem, ptr %71, i64 0, i32 3
  store ptr %4, ptr %72, align 8, !tbaa !60
  %73 = getelementptr inbounds %struct.Elem, ptr %71, i64 0, i32 2
  store ptr %9, ptr %73, align 8, !tbaa !208
  store i32 2, ptr %30, align 8, !tbaa !75
  br i1 %70, label %74, label %76

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.Rule, ptr %9, i64 0, i32 6, i32 3, i64 1
  store ptr %71, ptr %75, align 8, !tbaa !14
  br label %78

76:                                               ; preds = %68
  %77 = getelementptr inbounds ptr, ptr %60, i64 1
  store ptr %71, ptr %77, align 8, !tbaa !14
  br label %78

78:                                               ; preds = %76, %74, %62, %32
  %79 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2
  %80 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !67
  %82 = icmp eq ptr %81, null
  %83 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  br i1 %82, label %84, label %89

84:                                               ; preds = %78
  store ptr %83, ptr %80, align 8, !tbaa !67
  %85 = load i32, ptr %79, align 8, !tbaa !74
  %86 = add i32 %85, 1
  store i32 %86, ptr %79, align 8, !tbaa !74
  %87 = zext i32 %85 to i64
  %88 = getelementptr inbounds ptr, ptr %83, i64 %87
  store ptr %9, ptr %88, align 8, !tbaa !14
  br label %107

89:                                               ; preds = %78
  %90 = icmp eq ptr %81, %83
  %91 = load i32, ptr %79, align 8, !tbaa !74
  br i1 %90, label %92, label %98

92:                                               ; preds = %89
  %93 = icmp ult i32 %91, 3
  br i1 %93, label %94, label %105

94:                                               ; preds = %92
  %95 = add nuw nsw i32 %91, 1
  store i32 %95, ptr %79, align 8, !tbaa !74
  %96 = zext i32 %91 to i64
  %97 = getelementptr inbounds ptr, ptr %81, i64 %96
  store ptr %9, ptr %97, align 8, !tbaa !14
  br label %107

98:                                               ; preds = %89
  %99 = and i32 %91, 7
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %98
  %102 = add i32 %91, 1
  store i32 %102, ptr %79, align 8, !tbaa !74
  %103 = zext i32 %91 to i64
  %104 = getelementptr inbounds ptr, ptr %81, i64 %103
  store ptr %9, ptr %104, align 8, !tbaa !14
  br label %107

105:                                              ; preds = %98, %92
  tail call void @vec_add_internal(ptr noundef nonnull %79, ptr noundef nonnull %9) #43
  %106 = load i32, ptr %14, align 8, !tbaa !209
  br label %107

107:                                              ; preds = %105, %101, %94, %84
  %108 = phi i32 [ %106, %105 ], [ %15, %101 ], [ %15, %94 ], [ %15, %84 ]
  %109 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %110 = getelementptr inbounds %struct.Rule, ptr %109, i64 0, i32 1
  store ptr %4, ptr %110, align 8, !tbaa !68
  %111 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %112 = getelementptr inbounds %struct.Rule, ptr %109, i64 0, i32 7
  store ptr %111, ptr %112, align 8, !tbaa !207
  store i32 3, ptr %111, align 8, !tbaa !146
  %113 = getelementptr inbounds %struct.Elem, ptr %111, i64 0, i32 2
  store ptr %109, ptr %113, align 8, !tbaa !208
  %114 = getelementptr inbounds %struct.Rule, ptr %109, i64 0, i32 11
  store i32 %108, ptr %114, align 8, !tbaa !82
  %115 = getelementptr inbounds %struct.Rule, ptr %109, i64 0, i32 6, i32 2
  %116 = getelementptr inbounds %struct.Rule, ptr %109, i64 0, i32 6
  %117 = getelementptr inbounds %struct.Rule, ptr %109, i64 0, i32 6, i32 3
  store ptr %117, ptr %115, align 8, !tbaa !174
  store i32 1, ptr %116, align 8, !tbaa !75
  store ptr %29, ptr %117, align 8, !tbaa !14
  %118 = getelementptr inbounds %struct.Elem, ptr %29, i64 0, i32 2
  store ptr %109, ptr %118, align 8, !tbaa !208
  %119 = load ptr, ptr %80, align 8, !tbaa !67
  %120 = icmp eq ptr %119, null
  %121 = getelementptr inbounds %struct.Production, ptr %4, i64 0, i32 2, i32 3
  br i1 %120, label %122, label %127

122:                                              ; preds = %107
  store ptr %121, ptr %80, align 8, !tbaa !67
  %123 = load i32, ptr %79, align 8, !tbaa !74
  %124 = add i32 %123, 1
  store i32 %124, ptr %79, align 8, !tbaa !74
  %125 = zext i32 %123 to i64
  %126 = getelementptr inbounds ptr, ptr %121, i64 %125
  store ptr %109, ptr %126, align 8, !tbaa !14
  br label %144

127:                                              ; preds = %107
  %128 = icmp eq ptr %119, %121
  %129 = load i32, ptr %79, align 8, !tbaa !74
  br i1 %128, label %130, label %136

130:                                              ; preds = %127
  %131 = icmp ult i32 %129, 3
  br i1 %131, label %132, label %143

132:                                              ; preds = %130
  %133 = add nuw nsw i32 %129, 1
  store i32 %133, ptr %79, align 8, !tbaa !74
  %134 = zext i32 %129 to i64
  %135 = getelementptr inbounds ptr, ptr %121, i64 %134
  store ptr %109, ptr %135, align 8, !tbaa !14
  br label %144

136:                                              ; preds = %127
  %137 = and i32 %129, 7
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %143, label %139

139:                                              ; preds = %136
  %140 = add i32 %129, 1
  store i32 %140, ptr %79, align 8, !tbaa !74
  %141 = zext i32 %129 to i64
  %142 = getelementptr inbounds ptr, ptr %119, i64 %141
  store ptr %109, ptr %142, align 8, !tbaa !14
  br label %144

143:                                              ; preds = %136, %130
  tail call void @vec_add_internal(ptr noundef nonnull %79, ptr noundef nonnull %109) #43
  br label %144

144:                                              ; preds = %143, %139, %132, %122
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @initialize_productions(ptr noundef %0) #0 {
  %2 = tail call noalias dereferenceable_or_null(8) ptr @strdup(ptr noundef nonnull @.str.6.163) #43
  %3 = tail call ptr @new_production(ptr noundef %0, ptr noundef %2) #44
  %4 = getelementptr inbounds %struct.Production, ptr %3, i64 0, i32 4
  %5 = load i8, ptr %4, align 4
  %6 = and i8 %5, -29
  %7 = or i8 %6, 4
  store i8 %7, ptr %4, align 4
  %8 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %9 = getelementptr inbounds %struct.Rule, ptr %8, i64 0, i32 1
  store ptr %3, ptr %9, align 8, !tbaa !68
  %10 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %11 = getelementptr inbounds %struct.Rule, ptr %8, i64 0, i32 7
  store ptr %10, ptr %11, align 8, !tbaa !207
  store i32 3, ptr %10, align 8, !tbaa !146
  %12 = getelementptr inbounds %struct.Elem, ptr %10, i64 0, i32 2
  store ptr %8, ptr %12, align 8, !tbaa !208
  %13 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %14 = load i32, ptr %13, align 8, !tbaa !209
  %15 = getelementptr inbounds %struct.Rule, ptr %8, i64 0, i32 11
  store i32 %14, ptr %15, align 8, !tbaa !82
  %16 = getelementptr inbounds %struct.Rule, ptr %8, i64 0, i32 6, i32 2
  %17 = getelementptr inbounds %struct.Rule, ptr %8, i64 0, i32 6
  %18 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %19 = getelementptr inbounds %struct.Elem, ptr %18, i64 0, i32 2
  store ptr %8, ptr %19, align 8, !tbaa !208
  %20 = getelementptr inbounds %struct.Rule, ptr %8, i64 0, i32 6, i32 3
  store ptr %20, ptr %16, align 8, !tbaa !174
  store i32 1, ptr %17, align 8, !tbaa !75
  store ptr %18, ptr %20, align 8, !tbaa !14
  %21 = getelementptr inbounds %struct.Production, ptr %3, i64 0, i32 2, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !67
  %23 = getelementptr inbounds %struct.Production, ptr %3, i64 0, i32 2
  %24 = icmp eq ptr %22, null
  br i1 %24, label %25, label %32

25:                                               ; preds = %1
  %26 = getelementptr inbounds %struct.Production, ptr %3, i64 0, i32 2, i32 2
  %27 = getelementptr inbounds %struct.Production, ptr %3, i64 0, i32 2, i32 3
  store ptr %27, ptr %26, align 8, !tbaa !67
  %28 = load i32, ptr %23, align 8, !tbaa !74
  %29 = add i32 %28, 1
  store i32 %29, ptr %23, align 8, !tbaa !74
  %30 = zext i32 %28 to i64
  %31 = getelementptr inbounds ptr, ptr %27, i64 %30
  store ptr %8, ptr %31, align 8, !tbaa !14
  br label %50

32:                                               ; preds = %1
  %33 = getelementptr inbounds %struct.Production, ptr %3, i64 0, i32 2, i32 3
  %34 = icmp eq ptr %22, %33
  %35 = load i32, ptr %23, align 8, !tbaa !74
  br i1 %34, label %36, label %42

36:                                               ; preds = %32
  %37 = icmp ult i32 %35, 3
  br i1 %37, label %38, label %49

38:                                               ; preds = %36
  %39 = add nuw nsw i32 %35, 1
  store i32 %39, ptr %23, align 8, !tbaa !74
  %40 = zext i32 %35 to i64
  %41 = getelementptr inbounds ptr, ptr %22, i64 %40
  store ptr %8, ptr %41, align 8, !tbaa !14
  br label %50

42:                                               ; preds = %32
  %43 = and i32 %35, 7
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = add i32 %35, 1
  store i32 %46, ptr %23, align 8, !tbaa !74
  %47 = zext i32 %35 to i64
  %48 = getelementptr inbounds ptr, ptr %22, i64 %47
  store ptr %8, ptr %48, align 8, !tbaa !14
  br label %50

49:                                               ; preds = %42, %36
  tail call void @vec_add_internal(ptr noundef nonnull %23, ptr noundef nonnull %8) #43
  br label %50

50:                                               ; preds = %49, %45, %38, %25
  %51 = tail call noalias dereferenceable_or_null(8) ptr @strdup(ptr noundef nonnull @.str.7.164) #43
  %52 = tail call ptr @new_production(ptr noundef nonnull %0, ptr noundef %51) #44
  %53 = getelementptr inbounds %struct.Production, ptr %52, i64 0, i32 4
  %54 = load i8, ptr %53, align 4
  %55 = and i8 %54, -29
  %56 = or i8 %55, 4
  store i8 %56, ptr %53, align 4
  %57 = load ptr, ptr %16, align 8, !tbaa !174
  %58 = load ptr, ptr %57, align 8, !tbaa !14
  %59 = getelementptr inbounds %struct.Elem, ptr %58, i64 0, i32 3
  store ptr %52, ptr %59, align 8, !tbaa !60
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @finish_productions(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !45
  %4 = getelementptr inbounds ptr, ptr %3, i64 1
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = tail call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %7 = getelementptr inbounds %struct.Rule, ptr %6, i64 0, i32 1
  store ptr %5, ptr %7, align 8, !tbaa !68
  %8 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %9 = getelementptr inbounds %struct.Rule, ptr %6, i64 0, i32 7
  store ptr %8, ptr %9, align 8, !tbaa !207
  store i32 3, ptr %8, align 8, !tbaa !146
  %10 = getelementptr inbounds %struct.Elem, ptr %8, i64 0, i32 2
  store ptr %6, ptr %10, align 8, !tbaa !208
  %11 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %12 = load i32, ptr %11, align 8, !tbaa !209
  %13 = getelementptr inbounds %struct.Rule, ptr %6, i64 0, i32 11
  store i32 %12, ptr %13, align 8, !tbaa !82
  %14 = getelementptr inbounds %struct.Rule, ptr %6, i64 0, i32 6, i32 2
  %15 = getelementptr inbounds %struct.Rule, ptr %6, i64 0, i32 6
  %16 = tail call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %17 = getelementptr inbounds %struct.Elem, ptr %16, i64 0, i32 2
  store ptr %6, ptr %17, align 8, !tbaa !208
  %18 = getelementptr inbounds %struct.Rule, ptr %6, i64 0, i32 6, i32 3
  store ptr %18, ptr %14, align 8, !tbaa !174
  store i32 1, ptr %15, align 8, !tbaa !75
  store ptr %16, ptr %18, align 8, !tbaa !14
  %19 = getelementptr inbounds %struct.Production, ptr %5, i64 0, i32 2, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !67
  %21 = getelementptr inbounds %struct.Production, ptr %5, i64 0, i32 2
  %22 = icmp eq ptr %20, null
  br i1 %22, label %23, label %30

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.Production, ptr %5, i64 0, i32 2, i32 2
  %25 = getelementptr inbounds %struct.Production, ptr %5, i64 0, i32 2, i32 3
  store ptr %25, ptr %24, align 8, !tbaa !67
  %26 = load i32, ptr %21, align 8, !tbaa !74
  %27 = add i32 %26, 1
  store i32 %27, ptr %21, align 8, !tbaa !74
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds ptr, ptr %25, i64 %28
  store ptr %6, ptr %29, align 8, !tbaa !14
  br label %48

30:                                               ; preds = %1
  %31 = getelementptr inbounds %struct.Production, ptr %5, i64 0, i32 2, i32 3
  %32 = icmp eq ptr %20, %31
  %33 = load i32, ptr %21, align 8, !tbaa !74
  br i1 %32, label %34, label %40

34:                                               ; preds = %30
  %35 = icmp ult i32 %33, 3
  br i1 %35, label %36, label %47

36:                                               ; preds = %34
  %37 = add nuw nsw i32 %33, 1
  store i32 %37, ptr %21, align 8, !tbaa !74
  %38 = zext i32 %33 to i64
  %39 = getelementptr inbounds ptr, ptr %20, i64 %38
  store ptr %6, ptr %39, align 8, !tbaa !14
  br label %48

40:                                               ; preds = %30
  %41 = and i32 %33, 7
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = add i32 %33, 1
  store i32 %44, ptr %21, align 8, !tbaa !74
  %45 = zext i32 %33 to i64
  %46 = getelementptr inbounds ptr, ptr %20, i64 %45
  store ptr %6, ptr %46, align 8, !tbaa !14
  br label %48

47:                                               ; preds = %40, %34
  tail call void @vec_add_internal(ptr noundef nonnull %21, ptr noundef nonnull %6) #43
  br label %48

48:                                               ; preds = %47, %43, %36, %23
  %49 = load ptr, ptr %2, align 8, !tbaa !45
  %50 = getelementptr inbounds ptr, ptr %49, i64 2
  %51 = load ptr, ptr %50, align 8, !tbaa !14
  %52 = load ptr, ptr %14, align 8, !tbaa !174
  %53 = load ptr, ptr %52, align 8, !tbaa !14
  %54 = getelementptr inbounds %struct.Elem, ptr %53, i64 0, i32 3
  store ptr %51, ptr %54, align 8, !tbaa !60
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @print_term(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.Term, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !40
  %4 = icmp eq ptr %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call ptr @escape_string(ptr noundef nonnull %3) #43
  br label %7

7:                                                ; preds = %5, %1
  %8 = phi ptr [ %6, %5 ], [ null, %1 ]
  %9 = load i32, ptr %0, align 8, !tbaa !34
  switch i32 %9, label %26 [
    i32 0, label %10
    i32 1, label %20
    i32 2, label %22
    i32 3, label %24
  ]

10:                                               ; preds = %7
  %11 = load ptr, ptr %2, align 8, !tbaa !40
  %12 = icmp eq ptr %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %10
  %14 = load i8, ptr %11, align 1, !tbaa !60
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13, %10
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8.165) #44
  br label %27

18:                                               ; preds = %13
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9.166, ptr noundef %8) #44
  br label %27

20:                                               ; preds = %7
  %21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.10.167, ptr noundef %8) #44
  br label %27

22:                                               ; preds = %7
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.11.168, ptr noundef %8) #44
  br label %27

24:                                               ; preds = %7
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.12.169, ptr noundef %8) #44
  br label %27

26:                                               ; preds = %7
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.13.170) #43
  br label %27

27:                                               ; preds = %26, %24, %22, %20, %18, %16
  %28 = icmp eq ptr %8, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %27
  tail call void @free(ptr noundef nonnull %8) #43
  br label %30

30:                                               ; preds = %29, %27
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nounwind optsize uwtable
define internal void @print_elem(ptr nocapture noundef readonly %0) #0 {
  %2 = load i32, ptr %0, align 8, !tbaa !146
  switch i32 %2, label %10 [
    i32 1, label %3
    i32 2, label %6
  ]

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Elem, ptr %0, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !60
  tail call void @print_term(ptr noundef %5) #44
  br label %15

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.Elem, ptr %0, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !60
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.171, ptr noundef %8) #44
  br label %15

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.Elem, ptr %0, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !60
  %13 = load ptr, ptr %12, align 8, !tbaa !48
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.171, ptr noundef %13) #44
  br label %15

15:                                               ; preds = %10, %6, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @print_rule(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.Rule, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !68
  %4 = load ptr, ptr %3, align 8, !tbaa !48
  %5 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.23.172, ptr noundef %4) #44
  %6 = getelementptr inbounds %struct.Rule, ptr %0, i64 0, i32 6
  %7 = load i32, ptr %6, align 8, !tbaa !75
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %20, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.Rule, ptr %0, i64 0, i32 6, i32 2
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %16, %11 ]
  %13 = load ptr, ptr %10, align 8, !tbaa !174
  %14 = getelementptr inbounds ptr, ptr %13, i64 %12
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  tail call void @print_elem(ptr noundef %15) #44
  %16 = add nuw nsw i64 %12, 1
  %17 = load i32, ptr %6, align 8, !tbaa !75
  %18 = zext i32 %17 to i64
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %11, label %20, !llvm.loop !225

20:                                               ; preds = %11, %1
  %21 = getelementptr inbounds %struct.Rule, ptr %0, i64 0, i32 8
  %22 = load ptr, ptr %21, align 8, !tbaa !76
  %23 = icmp eq ptr %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.24.173, ptr noundef nonnull %22) #44
  br label %26

26:                                               ; preds = %24, %20
  %27 = getelementptr inbounds %struct.Rule, ptr %0, i64 0, i32 9
  %28 = load ptr, ptr %27, align 8, !tbaa !77
  %29 = icmp eq ptr %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.25.174, ptr noundef nonnull %28) #44
  br label %32

32:                                               ; preds = %30, %26
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @print_grammar(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %3 = load i32, ptr %2, align 8, !tbaa !38
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %142, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str)
  %7 = load i32, ptr %2, align 8, !tbaa !38
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %119, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  br label %11

11:                                               ; preds = %112, %9
  %12 = phi i64 [ 0, %9 ], [ %115, %112 ]
  %13 = load ptr, ptr %10, align 8, !tbaa !45
  %14 = getelementptr inbounds ptr, ptr %13, i64 %12
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  %16 = load ptr, ptr %15, align 8, !tbaa !48
  %17 = trunc i64 %12 to i32
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.27.175, ptr noundef %16, i32 noundef %17) #44
  %19 = getelementptr inbounds %struct.Production, ptr %15, i64 0, i32 2
  %20 = load i32, ptr %19, align 8, !tbaa !74
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %112, label %22

22:                                               ; preds = %11
  %23 = getelementptr inbounds %struct.Production, ptr %15, i64 0, i32 2, i32 2
  br label %24

24:                                               ; preds = %106, %22
  %25 = phi i64 [ 0, %22 ], [ %108, %106 ]
  %26 = load ptr, ptr %23, align 8, !tbaa !67
  %27 = getelementptr inbounds ptr, ptr %26, i64 %25
  %28 = load ptr, ptr %27, align 8, !tbaa !14
  %29 = icmp eq i64 %25, 0
  %30 = select i1 %29, ptr @.str.28.176, ptr @.str.29.177
  %31 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) %30) #44
  %32 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6
  %33 = load i32, ptr %32, align 8, !tbaa !75
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %46, label %35

35:                                               ; preds = %24
  %36 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6, i32 2
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %42, %37 ]
  %39 = load ptr, ptr %36, align 8, !tbaa !174
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8, !tbaa !14
  tail call void @print_elem(ptr noundef %41) #44
  %42 = add nuw nsw i64 %38, 1
  %43 = load i32, ptr %32, align 8, !tbaa !75
  %44 = zext i32 %43 to i64
  %45 = icmp ult i64 %42, %44
  br i1 %45, label %37, label %46, !llvm.loop !226

46:                                               ; preds = %37, %24
  %47 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 2
  %48 = load i32, ptr %47, align 8, !tbaa !78
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %46
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.30.178, i32 noundef %48) #44
  br label %52

52:                                               ; preds = %50, %46
  %53 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 3
  %54 = load i32, ptr %53, align 4, !tbaa !79
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %70, label %59

56:                                               ; preds = %59
  %57 = add nuw nsw i64 %60, 1
  %58 = icmp eq i64 %57, 8
  br i1 %58, label %66, label %59, !llvm.loop !227

59:                                               ; preds = %56, %52
  %60 = phi i64 [ %57, %56 ], [ 0, %52 ]
  %61 = getelementptr inbounds [8 x %struct.EnumStr], ptr @assoc_strings, i64 0, i64 %60
  %62 = load i32, ptr %61, align 16, !tbaa !228
  %63 = icmp eq i32 %62, %54
  br i1 %63, label %64, label %56

64:                                               ; preds = %59
  %.lcssa = phi i64 [ %60, %59 ]
  %65 = getelementptr inbounds [8 x %struct.EnumStr], ptr @assoc_strings, i64 0, i64 %.lcssa, i32 1
  br label %66

66:                                               ; preds = %64, %56
  %67 = phi ptr [ %65, %64 ], [ getelementptr inbounds ([8 x %struct.EnumStr], ptr @assoc_strings, i64 0, i64 0, i32 1), %56 ]
  %68 = load ptr, ptr %67, align 8, !tbaa !230
  %69 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.171, ptr noundef %68) #44
  br label %70

70:                                               ; preds = %66, %52
  %71 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 4
  %72 = load i32, ptr %71, align 8, !tbaa !80
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.31.179, i32 noundef %72) #44
  br label %76

76:                                               ; preds = %74, %70
  %77 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 5
  %78 = load i32, ptr %77, align 4, !tbaa !81
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %94, label %83

80:                                               ; preds = %83
  %81 = add nuw nsw i64 %84, 1
  %82 = icmp eq i64 %81, 8
  br i1 %82, label %90, label %83, !llvm.loop !227

83:                                               ; preds = %80, %76
  %84 = phi i64 [ %81, %80 ], [ 0, %76 ]
  %85 = getelementptr inbounds [8 x %struct.EnumStr], ptr @assoc_strings, i64 0, i64 %84
  %86 = load i32, ptr %85, align 16, !tbaa !228
  %87 = icmp eq i32 %86, %78
  br i1 %87, label %88, label %80

88:                                               ; preds = %83
  %.lcssa2 = phi i64 [ %84, %83 ]
  %89 = getelementptr inbounds [8 x %struct.EnumStr], ptr @assoc_strings, i64 0, i64 %.lcssa2, i32 1
  br label %90

90:                                               ; preds = %88, %80
  %91 = phi ptr [ %89, %88 ], [ getelementptr inbounds ([8 x %struct.EnumStr], ptr @assoc_strings, i64 0, i64 0, i32 1), %80 ]
  %92 = load ptr, ptr %91, align 8, !tbaa !230
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.171, ptr noundef %92) #44
  br label %94

94:                                               ; preds = %90, %76
  %95 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 8
  %96 = load ptr, ptr %95, align 8, !tbaa !76
  %97 = icmp eq ptr %96, null
  br i1 %97, label %100, label %98

98:                                               ; preds = %94
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.171, ptr noundef nonnull %96) #44
  br label %100

100:                                              ; preds = %98, %94
  %101 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 9
  %102 = load ptr, ptr %101, align 8, !tbaa !77
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %100
  %105 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14.171, ptr noundef nonnull %102) #44
  br label %106

106:                                              ; preds = %104, %100
  %107 = tail call i32 @putchar(i32 10)
  %108 = add nuw nsw i64 %25, 1
  %109 = load i32, ptr %19, align 8, !tbaa !74
  %110 = zext i32 %109 to i64
  %111 = icmp ult i64 %108, %110
  br i1 %111, label %24, label %112, !llvm.loop !231

112:                                              ; preds = %106, %11
  %113 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.79)
  %114 = tail call i32 @putchar(i32 10)
  %115 = add nuw nsw i64 %12, 1
  %116 = load i32, ptr %2, align 8, !tbaa !38
  %117 = zext i32 %116 to i64
  %118 = icmp ult i64 %115, %117
  br i1 %118, label %11, label %119, !llvm.loop !232

119:                                              ; preds = %112, %5
  %120 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.78)
  %121 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %122 = load i32, ptr %121, align 8, !tbaa !32
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %119
  %125 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ 0, %124 ], [ %136, %126 ]
  %128 = tail call i32 @putchar(i32 9)
  %129 = load ptr, ptr %125, align 8, !tbaa !33
  %130 = getelementptr inbounds ptr, ptr %129, i64 %127
  %131 = load ptr, ptr %130, align 8, !tbaa !14
  tail call void @print_term(ptr noundef %131) #44
  %132 = load i32, ptr %2, align 8, !tbaa !38
  %133 = trunc i64 %127 to i32
  %134 = add i32 %132, %133
  %135 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.36.180, i32 noundef %134) #44
  %136 = add nuw nsw i64 %127, 1
  %137 = load i32, ptr %121, align 8, !tbaa !32
  %138 = zext i32 %137 to i64
  %139 = icmp ult i64 %136, %138
  br i1 %139, label %126, label %140, !llvm.loop !233

140:                                              ; preds = %126, %119
  %141 = tail call i32 @putchar(i32 10)
  br label %142

142:                                              ; preds = %140, %1
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #4

; Function Attrs: nounwind optsize uwtable
define internal void @print_states(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 8, !tbaa !98
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %174, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %8

8:                                                ; preds = %168, %6
  %9 = phi i64 [ 0, %6 ], [ %170, %168 ]
  %10 = load ptr, ptr %7, align 8, !tbaa !99
  %11 = getelementptr inbounds ptr, ptr %10, i64 %9
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #45
  store i32 0, ptr %2, align 4, !tbaa !15
  %13 = load i32, ptr %12, align 8, !tbaa !50
  %14 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !234
  %16 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 10
  %17 = load i8, ptr %16, align 8
  %18 = and i8 %17, 1
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %19, ptr @.str.50.189, ptr @.str.49.190
  %21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.48.191, i32 noundef %13, i32 noundef %15, ptr noundef nonnull %20) #44
  %22 = load i32, ptr %14, align 8, !tbaa !234
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %70, label %24

24:                                               ; preds = %8
  %25 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 2, i32 2
  br label %26

26:                                               ; preds = %64, %24
  %27 = phi i64 [ 0, %24 ], [ %66, %64 ]
  %28 = load ptr, ptr %25, align 8, !tbaa !235
  %29 = getelementptr inbounds ptr, ptr %28, i64 %27
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  %31 = getelementptr inbounds %struct.Elem, ptr %30, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !208
  %33 = getelementptr inbounds %struct.Rule, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !68
  %35 = load ptr, ptr %34, align 8, !tbaa !48
  %36 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.58.192, ptr noundef %35) #44
  %37 = load ptr, ptr %31, align 8, !tbaa !208
  %38 = getelementptr inbounds %struct.Rule, ptr %37, i64 0, i32 6
  %39 = load i32, ptr %38, align 8, !tbaa !75
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %62, label %41

41:                                               ; preds = %52, %26
  %42 = phi i64 [ %54, %52 ], [ 0, %26 ]
  %43 = phi ptr [ %55, %52 ], [ %37, %26 ]
  %44 = phi i32 [ %53, %52 ], [ 1, %26 ]
  %45 = getelementptr inbounds %struct.Rule, ptr %43, i64 0, i32 6, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !174
  %47 = getelementptr inbounds ptr, ptr %46, i64 %42
  %48 = load ptr, ptr %47, align 8, !tbaa !14
  %49 = icmp eq ptr %48, %30
  br i1 %49, label %50, label %52

50:                                               ; preds = %41
  %51 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.59.193) #44
  br label %52

52:                                               ; preds = %50, %41
  %53 = phi i32 [ 0, %50 ], [ %44, %41 ]
  tail call void @print_elem(ptr noundef %48) #44
  %54 = add nuw nsw i64 %42, 1
  %55 = load ptr, ptr %31, align 8, !tbaa !208
  %56 = getelementptr inbounds %struct.Rule, ptr %55, i64 0, i32 6
  %57 = load i32, ptr %56, align 8, !tbaa !75
  %58 = zext i32 %57 to i64
  %59 = icmp ult i64 %54, %58
  br i1 %59, label %41, label %60, !llvm.loop !236

60:                                               ; preds = %52
  %.lcssa = phi i32 [ %53, %52 ]
  %61 = icmp eq i32 %.lcssa, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %60, %26
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.59.193) #44
  br label %64

64:                                               ; preds = %62, %60
  %65 = tail call i32 @putchar(i32 10)
  %66 = add nuw nsw i64 %27, 1
  %67 = load i32, ptr %14, align 8, !tbaa !234
  %68 = zext i32 %67 to i64
  %69 = icmp ult i64 %66, %68
  br i1 %69, label %26, label %70, !llvm.loop !237

70:                                               ; preds = %64, %8
  %71 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 4
  %72 = load i32, ptr %71, align 8, !tbaa !142
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %98, label %74

74:                                               ; preds = %70
  %75 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.81)
  %76 = load i32, ptr %71, align 8, !tbaa !142
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %98, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 4, i32 2
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi i64 [ 0, %78 ], [ %94, %80 ]
  %82 = tail call i32 @putchar(i32 9)
  %83 = load ptr, ptr %79, align 8, !tbaa !143
  %84 = getelementptr inbounds ptr, ptr %83, i64 %81
  %85 = load ptr, ptr %84, align 8, !tbaa !14
  %86 = load ptr, ptr %85, align 8, !tbaa !144
  tail call void @print_elem(ptr noundef %86) #44
  %87 = load ptr, ptr %79, align 8, !tbaa !143
  %88 = getelementptr inbounds ptr, ptr %87, i64 %81
  %89 = load ptr, ptr %88, align 8, !tbaa !14
  %90 = getelementptr inbounds %struct.Goto, ptr %89, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !154
  %92 = load i32, ptr %91, align 8, !tbaa !50
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.52.194, i32 noundef %92) #44
  %94 = add nuw nsw i64 %81, 1
  %95 = load i32, ptr %71, align 8, !tbaa !142
  %96 = zext i32 %95 to i64
  %97 = icmp ult i64 %94, %96
  br i1 %97, label %80, label %98, !llvm.loop !238

98:                                               ; preds = %80, %74, %70
  %99 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.80)
  %100 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 6
  %101 = load i32, ptr %100, align 8, !tbaa !159
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %105, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 6, i32 2
  br label %112

105:                                              ; preds = %112, %98
  %106 = phi i32 [ 0, %98 ], [ %126, %112 ]
  %107 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 5
  %108 = load i32, ptr %107, align 8, !tbaa !103
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %156, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.State, ptr %12, i64 0, i32 5, i32 2
  br label %129

112:                                              ; preds = %112, %103
  %113 = phi i64 [ 0, %103 ], [ %125, %112 ]
  %114 = load ptr, ptr %104, align 8, !tbaa !160
  %115 = getelementptr inbounds ptr, ptr %114, i64 %113
  %116 = load ptr, ptr %115, align 8, !tbaa !14
  %117 = load i32, ptr %116, align 8, !tbaa !139
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [3 x ptr], ptr @action_types, i64 0, i64 %118
  %120 = load ptr, ptr %119, align 8, !tbaa !14
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.54.195, ptr noundef %120) #44
  %122 = getelementptr inbounds %struct.Action, ptr %116, i64 0, i32 2
  %123 = load ptr, ptr %122, align 8, !tbaa !161
  tail call void @print_rule(ptr noundef %123) #44
  %124 = tail call i32 @putchar(i32 10)
  %125 = add nuw nsw i64 %113, 1
  %126 = load i32, ptr %100, align 8, !tbaa !159
  %127 = zext i32 %126 to i64
  %128 = icmp ult i64 %125, %127
  br i1 %128, label %112, label %105, !llvm.loop !239

129:                                              ; preds = %148, %110
  %130 = phi i64 [ 0, %110 ], [ %150, %148 ]
  %131 = load ptr, ptr %111, align 8, !tbaa !105
  %132 = getelementptr inbounds ptr, ptr %131, i64 %130
  %133 = load ptr, ptr %132, align 8, !tbaa !14
  %134 = load i32, ptr %133, align 8, !tbaa !139
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [3 x ptr], ptr @action_types, i64 0, i64 %135
  %137 = load ptr, ptr %136, align 8, !tbaa !14
  %138 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.54.195, ptr noundef %137) #44
  %139 = load i32, ptr %133, align 8, !tbaa !139
  %140 = icmp eq i32 %139, 1
  br i1 %140, label %141, label %148

141:                                              ; preds = %129
  %142 = getelementptr inbounds %struct.Action, ptr %133, i64 0, i32 1
  %143 = load ptr, ptr %142, align 8, !tbaa !106
  tail call void @print_term(ptr noundef %143) #44
  %144 = getelementptr inbounds %struct.Action, ptr %133, i64 0, i32 3
  %145 = load ptr, ptr %144, align 8, !tbaa !240
  %146 = load i32, ptr %145, align 8, !tbaa !50
  %147 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.55.196, i32 noundef %146) #44
  br label %148

148:                                              ; preds = %141, %129
  %149 = tail call i32 @putchar(i32 10)
  %150 = add nuw nsw i64 %130, 1
  %151 = load i32, ptr %107, align 8, !tbaa !103
  %152 = zext i32 %151 to i64
  %153 = icmp ult i64 %150, %152
  br i1 %153, label %129, label %154, !llvm.loop !241

154:                                              ; preds = %148
  %155 = load i32, ptr %100, align 8, !tbaa !159
  br label %156

156:                                              ; preds = %154, %105
  %157 = phi i32 [ %155, %154 ], [ %106, %105 ]
  %158 = icmp ugt i32 %157, 1
  br i1 %158, label %159, label %161

159:                                              ; preds = %156
  call fastcc void @print_conflict(ptr noundef nonnull @.str.56.197, ptr noundef nonnull %2) #44
  %160 = load i32, ptr %100, align 8, !tbaa !159
  br label %161

161:                                              ; preds = %159, %156
  %162 = phi i32 [ %160, %159 ], [ %157, %156 ]
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %168, label %164

164:                                              ; preds = %161
  %165 = load i32, ptr %107, align 8, !tbaa !103
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %168, label %167

167:                                              ; preds = %164
  call fastcc void @print_conflict(ptr noundef nonnull @.str.57.198, ptr noundef nonnull %2) #44
  br label %168

168:                                              ; preds = %167, %164, %161
  %169 = tail call i32 @putchar(i32 10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #45
  %170 = add nuw nsw i64 %9, 1
  %171 = load i32, ptr %3, align 8, !tbaa !98
  %172 = zext i32 %171 to i64
  %173 = icmp ult i64 %170, %172
  br i1 %173, label %8, label %174, !llvm.loop !242

174:                                              ; preds = %168, %1
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @print_conflict(ptr noundef %0, ptr nocapture noundef %1) unnamed_addr #20 {
  %3 = load i32, ptr %1, align 4, !tbaa !15
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.82)
  store i32 1, ptr %1, align 4, !tbaa !15
  br label %7

7:                                                ; preds = %5, %2
  %8 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.64.199, ptr noundef %0) #44
  %9 = tail call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @state_for_declaration(ptr nocapture noundef readonly %0, i32 noundef %1) #16 {
  %3 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7
  %4 = load i32, ptr %3, align 8, !tbaa !215
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !217
  %9 = zext i32 %4 to i64
  br label %10

10:                                               ; preds = %24, %6
  %11 = phi i64 [ 0, %6 ], [ %25, %24 ]
  %12 = getelementptr inbounds ptr, ptr %8, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = getelementptr inbounds %struct.Declaration, ptr %13, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !214
  %16 = icmp eq i32 %15, 5
  br i1 %16, label %17, label %24

17:                                               ; preds = %10
  %18 = load ptr, ptr %13, align 8, !tbaa !212
  %19 = getelementptr inbounds %struct.Elem, ptr %18, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !60
  %21 = getelementptr inbounds %struct.Production, ptr %20, i64 0, i32 3
  %22 = load i32, ptr %21, align 8, !tbaa !70
  %23 = icmp eq i32 %22, %1
  br i1 %23, label %27, label %24

24:                                               ; preds = %17, %10
  %25 = add nuw nsw i64 %11, 1
  %26 = icmp eq i64 %25, %9
  br i1 %26, label %27, label %10, !llvm.loop !243

27:                                               ; preds = %24, %17, %2
  %28 = phi i32 [ 0, %2 ], [ 0, %24 ], [ 1, %17 ]
  ret i32 %28
}

; Function Attrs: nounwind optsize uwtable
define internal void @build_eq(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 8, !tbaa !98
  %4 = zext i32 %3 to i64
  %5 = mul nuw nsw i64 %4, 24
  %6 = tail call ptr @calloc(i64 1, i64 %5)
  %7 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %10

8:                                                ; preds = %18
  %.lcssa2 = phi i32 [ %20, %18 ]
  %.lcssa1 = phi i32 [ %21, %18 ]
  %9 = icmp eq i32 %.lcssa1, 0
  br i1 %9, label %13, label %10, !llvm.loop !244

10:                                               ; preds = %8, %1
  %11 = phi i32 [ %3, %1 ], [ %.lcssa2, %8 ]
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %10, %8
  %14 = phi i32 [ %.lcssa2, %8 ], [ %11, %10 ]
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %332, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @verbose_level, align 4
  br label %199

18:                                               ; preds = %188, %38
  %19 = phi i64 [ %39, %38 ], [ %192, %188 ]
  %20 = phi i32 [ %25, %38 ], [ %191, %188 ]
  %21 = phi i32 [ %28, %38 ], [ %189, %188 ]
  %22 = icmp ult i64 %35, %19
  %23 = add nuw nsw i64 %27, 1
  br i1 %22, label %24, label %8, !llvm.loop !245

24:                                               ; preds = %18, %10
  %25 = phi i32 [ %20, %18 ], [ %11, %10 ]
  %26 = phi i64 [ %35, %18 ], [ 0, %10 ]
  %27 = phi i64 [ %23, %18 ], [ 1, %10 ]
  %28 = phi i32 [ %21, %18 ], [ 0, %10 ]
  %29 = load ptr, ptr %7, align 8, !tbaa !99
  %30 = getelementptr inbounds ptr, ptr %29, i64 %26
  %31 = load ptr, ptr %30, align 8, !tbaa !14
  %32 = load i32, ptr %31, align 8, !tbaa !50
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %struct.EqState, ptr %6, i64 %33
  %35 = add nuw nsw i64 %26, 1
  %36 = zext i32 %25 to i64
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %40, label %38

38:                                               ; preds = %24
  %39 = zext i32 %25 to i64
  br label %18

40:                                               ; preds = %24
  %41 = getelementptr inbounds %struct.State, ptr %31, i64 0, i32 13
  %42 = getelementptr inbounds %struct.State, ptr %31, i64 0, i32 4
  %43 = getelementptr inbounds %struct.State, ptr %31, i64 0, i32 4, i32 2
  %44 = getelementptr inbounds %struct.EqState, ptr %6, i64 %33, i32 2
  %45 = getelementptr inbounds %struct.State, ptr %31, i64 0, i32 6
  %46 = getelementptr inbounds %struct.State, ptr %31, i64 0, i32 6, i32 2
  %47 = getelementptr inbounds %struct.EqState, ptr %6, i64 %33, i32 1
  br label %48

48:                                               ; preds = %188, %40
  %49 = phi i64 [ %27, %40 ], [ %190, %188 ]
  %50 = phi i32 [ %28, %40 ], [ %189, %188 ]
  %51 = load ptr, ptr %7, align 8, !tbaa !99
  %52 = getelementptr inbounds ptr, ptr %51, i64 %49
  %53 = load ptr, ptr %52, align 8, !tbaa !14
  %54 = load i32, ptr %53, align 8, !tbaa !50
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %struct.EqState, ptr %6, i64 %55
  %57 = load ptr, ptr %34, align 8, !tbaa !246
  %58 = icmp eq ptr %57, null
  br i1 %58, label %59, label %188

59:                                               ; preds = %48
  %60 = load ptr, ptr %56, align 8, !tbaa !246
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %188

62:                                               ; preds = %59
  %63 = load ptr, ptr %41, align 8, !tbaa !104
  %64 = getelementptr inbounds %struct.State, ptr %53, i64 0, i32 13
  %65 = load ptr, ptr %64, align 8, !tbaa !104
  %66 = icmp eq ptr %63, %65
  %67 = icmp eq ptr %65, %31
  %68 = or i1 %66, %67
  br i1 %68, label %69, label %188

69:                                               ; preds = %62
  %70 = load i32, ptr %42, align 8, !tbaa !142
  %71 = getelementptr inbounds %struct.State, ptr %53, i64 0, i32 4
  %72 = load i32, ptr %71, align 8, !tbaa !142
  %73 = icmp eq i32 %70, %72
  br i1 %73, label %74, label %188

74:                                               ; preds = %69
  %75 = icmp eq i32 %70, 0
  br i1 %75, label %137, label %76

76:                                               ; preds = %74
  %77 = getelementptr inbounds %struct.State, ptr %53, i64 0, i32 4, i32 2
  %78 = getelementptr inbounds %struct.EqState, ptr %6, i64 %55, i32 2
  %79 = load ptr, ptr %43, align 8, !tbaa !143
  br label %80

80:                                               ; preds = %132, %76
  %81 = phi ptr [ %79, %76 ], [ %94, %132 ]
  %82 = phi i64 [ 0, %76 ], [ %133, %132 ]
  %83 = getelementptr inbounds ptr, ptr %81, i64 %82
  %84 = load ptr, ptr %83, align 8, !tbaa !14
  %85 = load ptr, ptr %84, align 8, !tbaa !144
  %86 = tail call i32 @elem_symbol(ptr noundef %0, ptr noundef %85) #43
  %87 = load ptr, ptr %77, align 8, !tbaa !143
  %88 = getelementptr inbounds ptr, ptr %87, i64 %82
  %89 = load ptr, ptr %88, align 8, !tbaa !14
  %90 = load ptr, ptr %89, align 8, !tbaa !144
  %91 = tail call i32 @elem_symbol(ptr noundef %0, ptr noundef %90) #43
  %92 = icmp eq i32 %86, %91
  br i1 %92, label %93, label %188

93:                                               ; preds = %80
  %94 = load ptr, ptr %43, align 8, !tbaa !143
  %95 = getelementptr inbounds ptr, ptr %94, i64 %82
  %96 = load ptr, ptr %95, align 8, !tbaa !14
  %97 = getelementptr inbounds %struct.Goto, ptr %96, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !154
  %99 = load ptr, ptr %77, align 8, !tbaa !143
  %100 = getelementptr inbounds ptr, ptr %99, i64 %82
  %101 = load ptr, ptr %100, align 8, !tbaa !14
  %102 = getelementptr inbounds %struct.Goto, ptr %101, i64 0, i32 1
  %103 = load ptr, ptr %102, align 8, !tbaa !154
  %104 = icmp eq ptr %98, %103
  br i1 %104, label %132, label %105

105:                                              ; preds = %93
  %106 = load i32, ptr %98, align 8, !tbaa !50
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds %struct.EqState, ptr %6, i64 %107
  %109 = load ptr, ptr %108, align 8, !tbaa !246
  %110 = icmp eq ptr %109, %103
  br i1 %110, label %117, label %111

111:                                              ; preds = %105
  %112 = load i32, ptr %103, align 8, !tbaa !50
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %struct.EqState, ptr %6, i64 %113
  %115 = load ptr, ptr %114, align 8, !tbaa !246
  %116 = icmp eq ptr %115, %98
  br i1 %116, label %117, label %188

117:                                              ; preds = %111, %105
  %118 = load ptr, ptr %78, align 8, !tbaa !248
  %119 = icmp eq ptr %118, null
  br i1 %119, label %126, label %120

120:                                              ; preds = %117
  %121 = load i32, ptr %103, align 8, !tbaa !50
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %struct.EqState, ptr %6, i64 %122
  %124 = load ptr, ptr %123, align 8, !tbaa !246
  %125 = icmp eq ptr %118, %124
  br i1 %125, label %126, label %188

126:                                              ; preds = %120, %117
  %127 = load ptr, ptr %44, align 8, !tbaa !248
  %128 = icmp eq ptr %127, null
  %129 = icmp eq ptr %127, %109
  %130 = or i1 %128, %129
  br i1 %130, label %131, label %188

131:                                              ; preds = %126
  store ptr %103, ptr %78, align 8, !tbaa !248
  store ptr %98, ptr %44, align 8, !tbaa !248
  br label %132

132:                                              ; preds = %131, %93
  %133 = add nuw nsw i64 %82, 1
  %134 = load i32, ptr %42, align 8, !tbaa !142
  %135 = zext i32 %134 to i64
  %136 = icmp ult i64 %133, %135
  br i1 %136, label %80, label %137, !llvm.loop !249

137:                                              ; preds = %132, %74
  %138 = load i32, ptr %45, align 8, !tbaa !159
  %139 = getelementptr inbounds %struct.State, ptr %53, i64 0, i32 6
  %140 = load i32, ptr %139, align 8, !tbaa !159
  %141 = icmp eq i32 %138, %140
  br i1 %141, label %142, label %188

142:                                              ; preds = %137
  %143 = icmp eq i32 %138, 0
  br i1 %143, label %187, label %144

144:                                              ; preds = %142
  %145 = load ptr, ptr %46, align 8, !tbaa !160
  %146 = getelementptr inbounds %struct.State, ptr %53, i64 0, i32 6, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !160
  %148 = getelementptr inbounds %struct.EqState, ptr %6, i64 %55, i32 1
  %149 = zext i32 %138 to i64
  br label %150

150:                                              ; preds = %184, %144
  %151 = phi i64 [ 0, %144 ], [ %185, %184 ]
  %152 = getelementptr inbounds ptr, ptr %145, i64 %151
  %153 = load ptr, ptr %152, align 8, !tbaa !14
  %154 = getelementptr inbounds %struct.Action, ptr %153, i64 0, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !161
  %156 = getelementptr inbounds ptr, ptr %147, i64 %151
  %157 = load ptr, ptr %156, align 8, !tbaa !14
  %158 = getelementptr inbounds %struct.Action, ptr %157, i64 0, i32 2
  %159 = load ptr, ptr %158, align 8, !tbaa !161
  %160 = icmp eq ptr %155, %159
  br i1 %160, label %184, label %161

161:                                              ; preds = %150
  %162 = getelementptr inbounds %struct.Rule, ptr %155, i64 0, i32 1
  %163 = load ptr, ptr %162, align 8, !tbaa !68
  %164 = getelementptr inbounds %struct.Rule, ptr %159, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !68
  %166 = icmp eq ptr %163, %165
  br i1 %166, label %167, label %188

167:                                              ; preds = %161
  %168 = getelementptr inbounds %struct.Rule, ptr %155, i64 0, i32 6
  %169 = load i32, ptr %168, align 8, !tbaa !75
  %170 = getelementptr inbounds %struct.Rule, ptr %159, i64 0, i32 6
  %171 = load i32, ptr %170, align 8, !tbaa !75
  %172 = icmp eq i32 %169, %171
  br i1 %172, label %184, label %173

173:                                              ; preds = %167
  %174 = load ptr, ptr %148, align 8, !tbaa !250
  %175 = icmp eq ptr %174, null
  %176 = icmp eq ptr %174, %159
  %177 = or i1 %175, %176
  br i1 %177, label %178, label %188

178:                                              ; preds = %173
  %179 = load ptr, ptr %47, align 8, !tbaa !250
  %180 = icmp eq ptr %179, null
  %181 = icmp eq ptr %179, %155
  %182 = or i1 %180, %181
  br i1 %182, label %183, label %188

183:                                              ; preds = %178
  store ptr %159, ptr %148, align 8, !tbaa !250
  store ptr %155, ptr %47, align 8, !tbaa !250
  br label %184

184:                                              ; preds = %183, %167, %150
  %185 = add nuw nsw i64 %151, 1
  %186 = icmp eq i64 %185, %149
  br i1 %186, label %187, label %150, !llvm.loop !251

187:                                              ; preds = %184, %142
  store ptr %31, ptr %56, align 8, !tbaa !246
  br label %188

188:                                              ; preds = %187, %178, %173, %161, %137, %126, %120, %111, %80, %69, %62, %59, %48
  %189 = phi i32 [ %50, %48 ], [ %50, %59 ], [ %50, %69 ], [ %50, %137 ], [ 1, %187 ], [ %50, %62 ], [ %50, %161 ], [ %50, %173 ], [ %50, %178 ], [ %50, %80 ], [ %50, %111 ], [ %50, %120 ], [ %50, %126 ]
  %190 = add nuw nsw i64 %49, 1
  %191 = load i32, ptr %2, align 8, !tbaa !98
  %192 = zext i32 %191 to i64
  %193 = icmp ult i64 %190, %192
  br i1 %193, label %48, label %18, !llvm.loop !252

194:                                              ; preds = %244
  %.lcssa = phi i32 [ %245, %244 ]
  %195 = icmp eq i32 %.lcssa, 0
  br i1 %195, label %332, label %196

196:                                              ; preds = %194
  %197 = load ptr, ptr %7, align 8, !tbaa !99
  %198 = zext i32 %.lcssa to i64
  br label %253

199:                                              ; preds = %244, %16
  %200 = phi i32 [ %14, %16 ], [ %245, %244 ]
  %201 = phi i32 [ %17, %16 ], [ %246, %244 ]
  %202 = phi i64 [ 0, %16 ], [ %247, %244 ]
  %203 = load ptr, ptr %7, align 8, !tbaa !99
  %204 = getelementptr inbounds ptr, ptr %203, i64 %202
  %205 = load ptr, ptr %204, align 8, !tbaa !14
  %206 = load i32, ptr %205, align 8, !tbaa !50
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds %struct.EqState, ptr %6, i64 %207
  %209 = load ptr, ptr %208, align 8, !tbaa !246
  %210 = icmp ne ptr %209, null
  %211 = icmp sgt i32 %201, 2
  %212 = select i1 %210, i1 %211, i1 false
  br i1 %212, label %213, label %244

213:                                              ; preds = %199
  %214 = load i32, ptr %209, align 8, !tbaa !50
  %215 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.37.205, i32 noundef %206, i32 noundef %214) #44
  %216 = getelementptr inbounds %struct.EqState, ptr %6, i64 %207, i32 2
  %217 = load ptr, ptr %216, align 8, !tbaa !248
  %218 = icmp eq ptr %217, null
  br i1 %218, label %227, label %219

219:                                              ; preds = %213
  %220 = load i32, ptr %217, align 8, !tbaa !50
  %221 = load i32, ptr %209, align 8, !tbaa !50
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds %struct.EqState, ptr %6, i64 %222, i32 2
  %224 = load ptr, ptr %223, align 8, !tbaa !248
  %225 = load i32, ptr %224, align 8, !tbaa !50
  %226 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.38.206, i32 noundef %220, i32 noundef %225) #44
  br label %227

227:                                              ; preds = %219, %213
  %228 = getelementptr inbounds %struct.EqState, ptr %6, i64 %207, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !250
  %230 = icmp eq ptr %229, null
  br i1 %230, label %240, label %231

231:                                              ; preds = %227
  %232 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.39.207) #44
  %233 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.40.208) #44
  tail call void @print_rule(ptr noundef nonnull %229) #44
  %234 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.41.209) #44
  %235 = load i32, ptr %209, align 8, !tbaa !50
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds %struct.EqState, ptr %6, i64 %236, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !250
  tail call void @print_rule(ptr noundef %238) #44
  %239 = tail call i32 @putchar(i32 93)
  br label %240

240:                                              ; preds = %231, %227
  %241 = tail call i32 @putchar(i32 10)
  %242 = load i32, ptr @verbose_level, align 4
  %243 = load i32, ptr %2, align 8, !tbaa !98
  br label %244

244:                                              ; preds = %240, %199
  %245 = phi i32 [ %200, %199 ], [ %243, %240 ]
  %246 = phi i32 [ %201, %199 ], [ %242, %240 ]
  %247 = add nuw nsw i64 %202, 1
  %248 = zext i32 %245 to i64
  %249 = icmp ult i64 %247, %248
  br i1 %249, label %199, label %194, !llvm.loop !253

250:                                              ; preds = %305
  br i1 %195, label %332, label %251

251:                                              ; preds = %250
  %252 = load i32, ptr @verbose_level, align 4
  br label %308

253:                                              ; preds = %305, %196
  %254 = phi i64 [ 0, %196 ], [ %306, %305 ]
  %255 = getelementptr inbounds ptr, ptr %197, i64 %254
  %256 = load ptr, ptr %255, align 8, !tbaa !14
  %257 = load i32, ptr %256, align 8, !tbaa !50
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds %struct.EqState, ptr %6, i64 %258
  %260 = load ptr, ptr %259, align 8, !tbaa !246
  %261 = icmp eq ptr %260, null
  br i1 %261, label %305, label %262

262:                                              ; preds = %253
  %263 = getelementptr inbounds %struct.EqState, ptr %6, i64 %258, i32 2
  %264 = load ptr, ptr %263, align 8, !tbaa !248
  %265 = icmp eq ptr %264, null
  br i1 %265, label %305, label %266

266:                                              ; preds = %262
  %267 = load i32, ptr %264, align 8, !tbaa !50
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds %struct.EqState, ptr %6, i64 %268, i32 1
  %270 = load ptr, ptr %269, align 8, !tbaa !250
  %271 = icmp eq ptr %270, null
  br i1 %271, label %280, label %272

272:                                              ; preds = %266
  %273 = getelementptr inbounds %struct.Rule, ptr %270, i64 0, i32 6
  %274 = load i32, ptr %273, align 8, !tbaa !75
  %275 = icmp eq i32 %274, 2
  br i1 %275, label %276, label %280

276:                                              ; preds = %272
  %277 = getelementptr inbounds %struct.State, ptr %256, i64 0, i32 14
  store ptr %260, ptr %277, align 8, !tbaa !178
  %278 = load i32, ptr %260, align 8, !tbaa !50
  %279 = zext i32 %278 to i64
  br label %296

280:                                              ; preds = %272, %266
  %281 = load i32, ptr %260, align 8, !tbaa !50
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds %struct.EqState, ptr %6, i64 %282, i32 2
  %284 = load ptr, ptr %283, align 8, !tbaa !248
  %285 = load i32, ptr %284, align 8, !tbaa !50
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds %struct.EqState, ptr %6, i64 %286, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !250
  %289 = icmp eq ptr %288, null
  br i1 %289, label %305, label %290

290:                                              ; preds = %280
  %291 = getelementptr inbounds %struct.Rule, ptr %288, i64 0, i32 6
  %292 = load i32, ptr %291, align 8, !tbaa !75
  %293 = icmp eq i32 %292, 2
  br i1 %293, label %294, label %305

294:                                              ; preds = %290
  %295 = getelementptr inbounds %struct.State, ptr %260, i64 0, i32 14
  store ptr %256, ptr %295, align 8, !tbaa !178
  br label %296

296:                                              ; preds = %294, %276
  %297 = phi i64 [ %258, %294 ], [ %279, %276 ]
  %298 = phi i64 [ %282, %294 ], [ %258, %276 ]
  %299 = getelementptr inbounds %struct.EqState, ptr %6, i64 %297, i32 1
  %300 = load ptr, ptr %299, align 8, !tbaa !250
  %301 = getelementptr inbounds %struct.State, ptr %256, i64 0, i32 15
  store ptr %300, ptr %301, align 8, !tbaa !254
  %302 = getelementptr inbounds %struct.EqState, ptr %6, i64 %298, i32 1
  %303 = load ptr, ptr %302, align 8, !tbaa !250
  %304 = getelementptr inbounds %struct.State, ptr %256, i64 0, i32 16
  store ptr %303, ptr %304, align 8, !tbaa !255
  br label %305

305:                                              ; preds = %296, %290, %280, %262, %253
  %306 = add nuw nsw i64 %254, 1
  %307 = icmp eq i64 %306, %198
  br i1 %307, label %250, label %253, !llvm.loop !256

308:                                              ; preds = %326, %251
  %309 = phi i32 [ %.lcssa, %251 ], [ %327, %326 ]
  %310 = phi i32 [ %252, %251 ], [ %328, %326 ]
  %311 = phi i64 [ 0, %251 ], [ %329, %326 ]
  %312 = load ptr, ptr %7, align 8, !tbaa !99
  %313 = getelementptr inbounds ptr, ptr %312, i64 %311
  %314 = load ptr, ptr %313, align 8, !tbaa !14
  %315 = getelementptr inbounds %struct.State, ptr %314, i64 0, i32 14
  %316 = load ptr, ptr %315, align 8, !tbaa !178
  %317 = icmp ne ptr %316, null
  %318 = icmp ne i32 %310, 0
  %319 = select i1 %317, i1 %318, i1 false
  br i1 %319, label %320, label %326

320:                                              ; preds = %308
  %321 = load i32, ptr %314, align 8, !tbaa !50
  %322 = load i32, ptr %316, align 8, !tbaa !50
  %323 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.43.210, i32 noundef %321, i32 noundef %322) #44
  %324 = load i32, ptr @verbose_level, align 4
  %325 = load i32, ptr %2, align 8, !tbaa !98
  br label %326

326:                                              ; preds = %320, %308
  %327 = phi i32 [ %309, %308 ], [ %325, %320 ]
  %328 = phi i32 [ %310, %308 ], [ %324, %320 ]
  %329 = add nuw nsw i64 %311, 1
  %330 = zext i32 %327 to i64
  %331 = icmp ult i64 %329, %330
  br i1 %331, label %308, label %332, !llvm.loop !257

332:                                              ; preds = %326, %250, %194, %13
  tail call void @free(ptr noundef %6) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @new_D_Grammar(ptr noundef %0) #0 {
  %2 = tail call dereferenceable_or_null(592) ptr @calloc(i64 1, i64 592)
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #48
  %4 = getelementptr inbounds i8, ptr %0, i64 %3
  %5 = tail call ptr @dup_str(ptr noundef %0, ptr noundef %4) #43
  store ptr %5, ptr %2, align 8, !tbaa !58
  ret ptr %2
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal void @free_D_Grammar(ptr nocapture noundef readonly %0) #23 {
  %2 = load ptr, ptr %0, align 8, !tbaa !58
  tail call void @free(ptr noundef %2) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @parse_grammar(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !58
  %5 = tail call noalias ptr @fopen(ptr noundef %4, ptr noundef nonnull @.str.44.217) #44
  %6 = icmp eq ptr %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = load ptr, ptr %0, align 8, !tbaa !58
  %9 = tail call ptr @sbuf_read(ptr noundef %8) #43
  %10 = icmp eq ptr %9, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %7
  tail call void @initialize_productions(ptr noundef nonnull %0) #44
  %12 = tail call ptr @new_D_Parser(ptr noundef %1, i32 noundef %2) #43
  store ptr %0, ptr %12, align 8, !tbaa !258
  %13 = load ptr, ptr %0, align 8, !tbaa !58
  %14 = getelementptr inbounds %struct.D_Parser, ptr %12, i64 0, i32 6, i32 1
  store ptr %13, ptr %14, align 8, !tbaa !261
  %15 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9) #48
  %16 = trunc i64 %15 to i32
  %17 = tail call ptr @dparse(ptr noundef nonnull %12, ptr noundef nonnull %9, i32 noundef %16) #43
  %18 = icmp eq ptr %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %11
  %20 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %21 = load i32, ptr %20, align 8, !tbaa !38
  %22 = icmp ugt i32 %21, 2
  br i1 %22, label %23, label %24

23:                                               ; preds = %19
  tail call void @finish_productions(ptr noundef nonnull %0) #44
  br label %24

24:                                               ; preds = %23, %19, %11, %7, %3
  %25 = phi i32 [ -1, %3 ], [ -1, %7 ], [ 0, %23 ], [ 0, %19 ], [ -1, %11 ]
  ret i32 %25
}

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: nounwind optsize uwtable
define internal i32 @build_grammar(ptr noundef %0) #0 {
  %2 = alloca [256 x i8], align 16
  %3 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 29
  store i32 0, ptr %3, align 4, !tbaa !262
  %4 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !38
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %9 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %11 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 10
  br label %21

12:                                               ; preds = %143, %1
  %13 = phi i32 [ 0, %1 ], [ %145, %143 ]
  %14 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %156, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !33
  %20 = zext i32 %15 to i64
  br label %148

21:                                               ; preds = %143, %7
  %22 = phi i64 [ 0, %7 ], [ %144, %143 ]
  %23 = load ptr, ptr %8, align 8, !tbaa !45
  %24 = getelementptr inbounds ptr, ptr %23, i64 %22
  %25 = load ptr, ptr %24, align 8, !tbaa !14
  %26 = load ptr, ptr %25, align 8, !tbaa !48
  %27 = getelementptr inbounds %struct.Production, ptr %25, i64 0, i32 1
  %28 = load i32, ptr %27, align 8, !tbaa !180
  %29 = call ptr @lookup_production(ptr noundef nonnull %0, ptr noundef %26, i32 noundef %28) #44
  %30 = icmp eq ptr %25, %29
  br i1 %30, label %32, label %31

31:                                               ; preds = %21
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.65.220, ptr noundef %26) #43
  br label %32

32:                                               ; preds = %31, %21
  %33 = getelementptr inbounds %struct.Production, ptr %25, i64 0, i32 3
  %34 = trunc i64 %22 to i32
  store i32 %34, ptr %33, align 8, !tbaa !70
  %35 = getelementptr inbounds %struct.Production, ptr %25, i64 0, i32 2
  %36 = load i32, ptr %35, align 8, !tbaa !74
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %143, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.Production, ptr %25, i64 0, i32 2, i32 2
  br label %40

40:                                               ; preds = %138, %38
  %41 = phi i64 [ 0, %38 ], [ %139, %138 ]
  %42 = load ptr, ptr %39, align 8, !tbaa !67
  %43 = getelementptr inbounds ptr, ptr %42, i64 %41
  %44 = load ptr, ptr %43, align 8, !tbaa !14
  %45 = load i32, ptr %3, align 4, !tbaa !262
  %46 = add nsw i32 %45, 1
  store i32 %46, ptr %3, align 4, !tbaa !262
  store i32 %45, ptr %44, align 8, !tbaa !71
  %47 = getelementptr inbounds %struct.Rule, ptr %44, i64 0, i32 6
  %48 = load i32, ptr %47, align 8, !tbaa !75
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %40
  %51 = getelementptr inbounds %struct.Rule, ptr %44, i64 0, i32 7
  %52 = load ptr, ptr %51, align 8, !tbaa !207
  %53 = getelementptr inbounds %struct.Elem, ptr %52, i64 0, i32 1
  store i32 0, ptr %53, align 4, !tbaa !263
  br label %138

54:                                               ; preds = %40
  %55 = getelementptr inbounds %struct.Rule, ptr %44, i64 0, i32 6, i32 2
  br label %56

56:                                               ; preds = %115, %54
  %57 = phi i64 [ 0, %54 ], [ %117, %115 ]
  %58 = phi ptr [ null, %54 ], [ %116, %115 ]
  %59 = load ptr, ptr %55, align 8, !tbaa !174
  %60 = getelementptr inbounds ptr, ptr %59, i64 %57
  %61 = load ptr, ptr %60, align 8, !tbaa !14
  %62 = getelementptr inbounds %struct.Elem, ptr %61, i64 0, i32 1
  %63 = trunc i64 %57 to i32
  store i32 %63, ptr %62, align 4, !tbaa !263
  %64 = load i32, ptr %61, align 8, !tbaa !146
  %65 = icmp eq i32 %64, 2
  br i1 %65, label %66, label %109

66:                                               ; preds = %56
  %67 = getelementptr inbounds %struct.Elem, ptr %61, i64 0, i32 3
  %68 = getelementptr inbounds %struct.Elem, ptr %61, i64 0, i32 3, i32 0, i32 1
  %69 = load i32, ptr %68, align 8, !tbaa !60
  %70 = load ptr, ptr %67, align 8, !tbaa !60
  %71 = call ptr @lookup_production(ptr noundef %0, ptr noundef %70, i32 noundef %69) #44
  %72 = icmp eq ptr %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %66
  store i32 0, ptr %61, align 8, !tbaa !146
  store ptr %71, ptr %67, align 8, !tbaa !60
  br label %115

74:                                               ; preds = %66
  %75 = load i32, ptr %9, align 8, !tbaa !32
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %74
  %78 = sext i32 %69 to i64
  br label %102

79:                                               ; preds = %74
  %80 = load ptr, ptr %10, align 8, !tbaa !33
  %81 = sext i32 %69 to i64
  %82 = zext i32 %75 to i64
  br label %83

83:                                               ; preds = %98, %79
  %84 = phi i64 [ 0, %79 ], [ %99, %98 ]
  %85 = getelementptr inbounds ptr, ptr %80, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !14
  %87 = load i32, ptr %86, align 8, !tbaa !34
  %88 = icmp eq i32 %87, 3
  br i1 %88, label %89, label %98

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.Term, ptr %86, i64 0, i32 6
  %91 = load i32, ptr %90, align 8, !tbaa !43
  %92 = icmp eq i32 %91, %69
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.Term, ptr %86, i64 0, i32 5
  %95 = load ptr, ptr %94, align 8, !tbaa !40
  %96 = call i32 @strncmp(ptr noundef %95, ptr noundef %70, i64 noundef %81) #48
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %101, label %98

98:                                               ; preds = %93, %89, %83
  %99 = add nuw nsw i64 %84, 1
  %100 = icmp eq i64 %99, %82
  br i1 %100, label %102, label %83, !llvm.loop !264

101:                                              ; preds = %93
  %.lcssa8 = phi ptr [ %86, %93 ]
  store i32 1, ptr %61, align 8, !tbaa !146
  store ptr %.lcssa8, ptr %67, align 8, !tbaa !60
  br label %115

102:                                              ; preds = %98, %77
  %103 = phi i64 [ %78, %77 ], [ %81, %98 ]
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %2) #45
  %104 = call ptr @strncpy(ptr noundef nonnull %2, ptr noundef %70, i64 noundef %103) #43
  %105 = call i32 @llvm.smin.i32(i32 %69, i32 255)
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [256 x i8], ptr %2, i64 0, i64 %106
  store i8 0, ptr %107, align 1, !tbaa !60
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.66.221, ptr noundef nonnull %2) #43
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %2) #45
  %108 = load i32, ptr %61, align 8, !tbaa !146
  br label %109

109:                                              ; preds = %102, %56
  %110 = phi i32 [ %108, %102 ], [ %64, %56 ]
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %115

112:                                              ; preds = %109
  %113 = getelementptr inbounds %struct.Elem, ptr %61, i64 0, i32 3
  %114 = load ptr, ptr %113, align 8, !tbaa !60
  br label %115

115:                                              ; preds = %112, %109, %101, %73
  %116 = phi ptr [ %58, %109 ], [ %58, %73 ], [ %114, %112 ], [ %.lcssa8, %101 ]
  %117 = add nuw nsw i64 %57, 1
  %118 = load i32, ptr %47, align 8, !tbaa !75
  %119 = zext i32 %118 to i64
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %56, label %121, !llvm.loop !265

121:                                              ; preds = %115
  %.lcssa10 = phi ptr [ %116, %115 ]
  %.lcssa9 = phi i32 [ %118, %115 ]
  %122 = getelementptr inbounds %struct.Rule, ptr %44, i64 0, i32 7
  %123 = load ptr, ptr %122, align 8, !tbaa !207
  %124 = getelementptr inbounds %struct.Elem, ptr %123, i64 0, i32 1
  store i32 %.lcssa9, ptr %124, align 4, !tbaa !263
  %125 = load i32, ptr %11, align 8, !tbaa !16
  %126 = icmp ne i32 %125, 0
  %127 = icmp ne ptr %.lcssa10, null
  %128 = select i1 %126, i1 %127, i1 false
  br i1 %128, label %129, label %138

129:                                              ; preds = %121
  %130 = getelementptr inbounds %struct.Rule, ptr %44, i64 0, i32 5
  %131 = load i32, ptr %130, align 4, !tbaa !81
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %138, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.Term, ptr %.lcssa10, i64 0, i32 3
  store i32 %131, ptr %134, align 4, !tbaa !94
  %135 = getelementptr inbounds %struct.Rule, ptr %44, i64 0, i32 4
  %136 = load i32, ptr %135, align 8, !tbaa !80
  %137 = getelementptr inbounds %struct.Term, ptr %.lcssa10, i64 0, i32 4
  store i32 %136, ptr %137, align 8, !tbaa !95
  br label %138

138:                                              ; preds = %133, %129, %121, %50
  %139 = add nuw nsw i64 %41, 1
  %140 = load i32, ptr %35, align 8, !tbaa !74
  %141 = zext i32 %140 to i64
  %142 = icmp ult i64 %139, %141
  br i1 %142, label %40, label %143, !llvm.loop !266

143:                                              ; preds = %138, %32
  %144 = add nuw nsw i64 %22, 1
  %145 = load i32, ptr %4, align 8, !tbaa !38
  %146 = zext i32 %145 to i64
  %147 = icmp ult i64 %144, %146
  br i1 %147, label %21, label %12, !llvm.loop !267

148:                                              ; preds = %148, %17
  %149 = phi i64 [ 0, %17 ], [ %154, %148 ]
  %150 = getelementptr inbounds ptr, ptr %19, i64 %149
  %151 = load ptr, ptr %150, align 8, !tbaa !14
  %152 = getelementptr inbounds %struct.Term, ptr %151, i64 0, i32 1
  %153 = trunc i64 %149 to i32
  store i32 %153, ptr %152, align 4, !tbaa !41
  %154 = add nuw nsw i64 %149, 1
  %155 = icmp eq i64 %154, %20
  br i1 %155, label %156, label %148, !llvm.loop !268

156:                                              ; preds = %148, %12
  %157 = icmp eq i32 %13, 0
  br i1 %157, label %320, label %158

158:                                              ; preds = %156
  %159 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %160 = load ptr, ptr %159, align 8, !tbaa !45
  %161 = zext i32 %13 to i64
  br label %162

162:                                              ; preds = %185, %158
  %163 = phi i64 [ 0, %158 ], [ %186, %185 ]
  %164 = getelementptr inbounds ptr, ptr %160, i64 %163
  %165 = load ptr, ptr %164, align 8, !tbaa !14
  %166 = getelementptr inbounds %struct.Production, ptr %165, i64 0, i32 2
  %167 = load i32, ptr %166, align 8, !tbaa !74
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %185, label %169

169:                                              ; preds = %162
  %170 = getelementptr inbounds %struct.Production, ptr %165, i64 0, i32 2, i32 2
  %171 = load ptr, ptr %170, align 8, !tbaa !67
  %172 = zext i32 %167 to i64
  br label %176

173:                                              ; preds = %176
  %174 = add nuw nsw i64 %177, 1
  %175 = icmp eq i64 %174, %172
  br i1 %175, label %185, label %176, !llvm.loop !269

176:                                              ; preds = %173, %169
  %177 = phi i64 [ 0, %169 ], [ %174, %173 ]
  %178 = getelementptr inbounds ptr, ptr %171, i64 %177
  %179 = load ptr, ptr %178, align 8, !tbaa !14
  %180 = getelementptr inbounds %struct.Rule, ptr %179, i64 0, i32 6
  %181 = load i32, ptr %180, align 8, !tbaa !75
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %173

183:                                              ; preds = %176
  %.lcssa7 = phi ptr [ %179, %176 ]
  %184 = getelementptr inbounds %struct.Production, ptr %165, i64 0, i32 5
  store ptr %.lcssa7, ptr %184, align 8, !tbaa !270
  br label %185

185:                                              ; preds = %183, %173, %162
  %186 = add nuw nsw i64 %163, 1
  %187 = icmp eq i64 %186, %161
  br i1 %187, label %190, label %162, !llvm.loop !271

188:                                              ; preds = %229
  %189 = icmp eq i32 %230, 0
  br i1 %189, label %236, label %233

190:                                              ; preds = %233, %185
  %191 = phi i64 [ %234, %233 ], [ 0, %185 ]
  %192 = phi i32 [ %235, %233 ], [ 0, %185 ]
  %193 = getelementptr inbounds ptr, ptr %160, i64 %191
  %194 = load ptr, ptr %193, align 8, !tbaa !14
  %195 = getelementptr inbounds %struct.Production, ptr %194, i64 0, i32 5
  %196 = load ptr, ptr %195, align 8, !tbaa !270
  %197 = icmp eq ptr %196, null
  br i1 %197, label %198, label %229

198:                                              ; preds = %190
  %199 = getelementptr inbounds %struct.Production, ptr %194, i64 0, i32 2
  %200 = load i32, ptr %199, align 8, !tbaa !74
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %229, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.Production, ptr %194, i64 0, i32 2, i32 2
  %204 = load ptr, ptr %203, align 8, !tbaa !67
  %205 = load ptr, ptr %204, align 8, !tbaa !14
  %206 = getelementptr inbounds %struct.Rule, ptr %205, i64 0, i32 6
  %207 = load i32, ptr %206, align 8, !tbaa !75
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %228, label %209

209:                                              ; preds = %202
  %210 = getelementptr inbounds %struct.Rule, ptr %205, i64 0, i32 6, i32 2
  %211 = load ptr, ptr %210, align 8, !tbaa !174
  %212 = zext i32 %207 to i64
  br label %216

213:                                              ; preds = %222
  %214 = add nuw nsw i64 %217, 1
  %215 = icmp eq i64 %214, %212
  br i1 %215, label %228, label %216, !llvm.loop !272

216:                                              ; preds = %213, %209
  %217 = phi i64 [ 0, %209 ], [ %214, %213 ]
  %218 = getelementptr inbounds ptr, ptr %211, i64 %217
  %219 = load ptr, ptr %218, align 8, !tbaa !14
  %220 = load i32, ptr %219, align 8, !tbaa !146
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %229

222:                                              ; preds = %216
  %223 = getelementptr inbounds %struct.Elem, ptr %219, i64 0, i32 3
  %224 = load ptr, ptr %223, align 8, !tbaa !60
  %225 = getelementptr inbounds %struct.Production, ptr %224, i64 0, i32 5
  %226 = load ptr, ptr %225, align 8, !tbaa !270
  %227 = icmp eq ptr %226, null
  br i1 %227, label %229, label %213

228:                                              ; preds = %213, %202
  store ptr %205, ptr %195, align 8, !tbaa !270
  br label %229

229:                                              ; preds = %228, %222, %216, %198, %190
  %230 = phi i32 [ %192, %190 ], [ 1, %228 ], [ %192, %198 ], [ %192, %216 ], [ %192, %222 ]
  %231 = add nuw nsw i64 %191, 1
  %232 = icmp eq i64 %231, %161
  br i1 %232, label %188, label %233

233:                                              ; preds = %229, %188
  %234 = phi i64 [ %231, %229 ], [ 0, %188 ]
  %235 = phi i32 [ %230, %229 ], [ 0, %188 ]
  br label %190, !llvm.loop !273

236:                                              ; preds = %188
  br i1 %157, label %320, label %237

237:                                              ; preds = %236
  %238 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  br label %241

239:                                              ; preds = %253
  %.lcssa6 = phi i32 [ %254, %253 ]
  %240 = icmp eq i32 %.lcssa6, 0
  br i1 %240, label %320, label %258

241:                                              ; preds = %253, %237
  %242 = phi i32 [ %13, %237 ], [ %254, %253 ]
  %243 = phi i64 [ 0, %237 ], [ %255, %253 ]
  %244 = load ptr, ptr %238, align 8, !tbaa !45
  %245 = getelementptr inbounds ptr, ptr %244, i64 %243
  %246 = load ptr, ptr %245, align 8, !tbaa !14
  %247 = getelementptr inbounds %struct.Production, ptr %246, i64 0, i32 4
  %248 = load i8, ptr %247, align 4
  %249 = and i8 %248, 1
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %253, label %251

251:                                              ; preds = %241
  call fastcc void @convert_regex_production_one(ptr noundef nonnull %0, ptr noundef nonnull %246) #44
  %252 = load i32, ptr %4, align 8, !tbaa !38
  br label %253

253:                                              ; preds = %251, %241
  %254 = phi i32 [ %242, %241 ], [ %252, %251 ]
  %255 = add nuw nsw i64 %243, 1
  %256 = zext i32 %254 to i64
  %257 = icmp ult i64 %255, %256
  br i1 %257, label %241, label %239, !llvm.loop !274

258:                                              ; preds = %315, %239
  %259 = phi i32 [ %316, %315 ], [ %.lcssa6, %239 ]
  %260 = phi i64 [ %317, %315 ], [ 0, %239 ]
  %261 = load ptr, ptr %238, align 8, !tbaa !45
  %262 = getelementptr inbounds ptr, ptr %261, i64 %260
  %263 = load ptr, ptr %262, align 8, !tbaa !14
  %264 = getelementptr inbounds %struct.Production, ptr %263, i64 0, i32 2
  %265 = load i32, ptr %264, align 8, !tbaa !74
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %315, label %267

267:                                              ; preds = %258
  %268 = getelementptr inbounds %struct.Production, ptr %263, i64 0, i32 2, i32 2
  br label %269

269:                                              ; preds = %308, %267
  %270 = phi i32 [ %265, %267 ], [ %309, %308 ]
  %271 = phi i64 [ 0, %267 ], [ %310, %308 ]
  %272 = load ptr, ptr %268, align 8, !tbaa !67
  %273 = getelementptr inbounds ptr, ptr %272, i64 %271
  %274 = load ptr, ptr %273, align 8, !tbaa !14
  %275 = getelementptr inbounds %struct.Rule, ptr %274, i64 0, i32 6
  %276 = load i32, ptr %275, align 8, !tbaa !75
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %308, label %278

278:                                              ; preds = %269
  %279 = getelementptr inbounds %struct.Rule, ptr %274, i64 0, i32 6, i32 2
  %280 = load ptr, ptr %279, align 8, !tbaa !174
  br label %281

281:                                              ; preds = %300, %278
  %282 = phi i32 [ %276, %278 ], [ %301, %300 ]
  %283 = phi ptr [ %280, %278 ], [ %302, %300 ]
  %284 = phi i64 [ 0, %278 ], [ %303, %300 ]
  %285 = getelementptr inbounds ptr, ptr %283, i64 %284
  %286 = load ptr, ptr %285, align 8, !tbaa !14
  %287 = load i32, ptr %286, align 8, !tbaa !146
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %300

289:                                              ; preds = %281
  %290 = getelementptr inbounds %struct.Elem, ptr %286, i64 0, i32 3
  %291 = load ptr, ptr %290, align 8, !tbaa !60
  %292 = getelementptr inbounds %struct.Production, ptr %291, i64 0, i32 10
  %293 = load ptr, ptr %292, align 8, !tbaa !275
  %294 = icmp eq ptr %293, null
  br i1 %294, label %300, label %295

295:                                              ; preds = %289
  store ptr %293, ptr %290, align 8, !tbaa !60
  %296 = load ptr, ptr %279, align 8, !tbaa !174
  %297 = getelementptr inbounds ptr, ptr %296, i64 %284
  %298 = load ptr, ptr %297, align 8, !tbaa !14
  store i32 1, ptr %298, align 8, !tbaa !146
  %299 = load i32, ptr %275, align 8, !tbaa !75
  br label %300

300:                                              ; preds = %295, %289, %281
  %301 = phi i32 [ %282, %281 ], [ %282, %289 ], [ %299, %295 ]
  %302 = phi ptr [ %283, %281 ], [ %283, %289 ], [ %296, %295 ]
  %303 = add nuw nsw i64 %284, 1
  %304 = zext i32 %301 to i64
  %305 = icmp ult i64 %303, %304
  br i1 %305, label %281, label %306, !llvm.loop !276

306:                                              ; preds = %300
  %307 = load i32, ptr %264, align 8, !tbaa !74
  br label %308

308:                                              ; preds = %306, %269
  %309 = phi i32 [ %307, %306 ], [ %270, %269 ]
  %310 = add nuw nsw i64 %271, 1
  %311 = zext i32 %309 to i64
  %312 = icmp ult i64 %310, %311
  br i1 %312, label %269, label %313, !llvm.loop !277

313:                                              ; preds = %308
  %314 = load i32, ptr %4, align 8, !tbaa !38
  br label %315

315:                                              ; preds = %313, %258
  %316 = phi i32 [ %314, %313 ], [ %259, %258 ]
  %317 = add nuw nsw i64 %260, 1
  %318 = zext i32 %316 to i64
  %319 = icmp ult i64 %317, %318
  br i1 %319, label %258, label %320, !llvm.loop !278

320:                                              ; preds = %315, %239, %236, %156
  %321 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 14
  %322 = load i32, ptr %321, align 8, !tbaa !23
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %330, label %324

324:                                              ; preds = %320
  %325 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %326 = load ptr, ptr %325, align 8, !tbaa !45
  %327 = load ptr, ptr %326, align 8, !tbaa !14
  %328 = call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %329 = getelementptr inbounds %struct.Elem, ptr %328, i64 0, i32 3
  store ptr %327, ptr %329, align 8, !tbaa !60
  call void @new_declaration(ptr noundef nonnull %0, ptr noundef %328, i32 noundef 0) #44
  br label %330

330:                                              ; preds = %324, %320
  %331 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 15
  %332 = load i32, ptr %331, align 4, !tbaa !24
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %340, label %334

334:                                              ; preds = %330
  %335 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %336 = load ptr, ptr %335, align 8, !tbaa !45
  %337 = load ptr, ptr %336, align 8, !tbaa !14
  %338 = call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %339 = getelementptr inbounds %struct.Elem, ptr %338, i64 0, i32 3
  store ptr %337, ptr %339, align 8, !tbaa !60
  call void @new_declaration(ptr noundef nonnull %0, ptr noundef %338, i32 noundef 1) #44
  br label %340

340:                                              ; preds = %334, %330
  %341 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7
  %342 = load i32, ptr %341, align 8, !tbaa !215
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %372, label %344

344:                                              ; preds = %340
  %345 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7, i32 2
  br label %348

346:                                              ; preds = %367
  %.lcssa5 = phi i32 [ %368, %367 ]
  %347 = icmp eq i32 %.lcssa5, 0
  br i1 %347, label %372, label %377

348:                                              ; preds = %367, %344
  %349 = phi i32 [ %342, %344 ], [ %368, %367 ]
  %350 = phi i64 [ 0, %344 ], [ %369, %367 ]
  %351 = load ptr, ptr %345, align 8, !tbaa !217
  %352 = getelementptr inbounds ptr, ptr %351, i64 %350
  %353 = load ptr, ptr %352, align 8, !tbaa !14
  %354 = load ptr, ptr %353, align 8, !tbaa !212
  %355 = load i32, ptr %354, align 8, !tbaa !146
  %356 = icmp eq i32 %355, 2
  br i1 %356, label %357, label %367

357:                                              ; preds = %348
  %358 = getelementptr inbounds %struct.Elem, ptr %354, i64 0, i32 3
  %359 = load ptr, ptr %358, align 8, !tbaa !60
  %360 = getelementptr inbounds %struct.Elem, ptr %354, i64 0, i32 3, i32 0, i32 1
  %361 = load i32, ptr %360, align 8, !tbaa !60
  %362 = call ptr @lookup_production(ptr noundef nonnull %0, ptr noundef %359, i32 noundef %361) #44
  %363 = icmp eq ptr %362, null
  br i1 %363, label %364, label %365

364:                                              ; preds = %357
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.73.222, ptr noundef %359) #43
  br label %365

365:                                              ; preds = %364, %357
  store i32 0, ptr %354, align 8, !tbaa !146
  store ptr %362, ptr %358, align 8, !tbaa !60
  %366 = load i32, ptr %341, align 8, !tbaa !215
  br label %367

367:                                              ; preds = %365, %348
  %368 = phi i32 [ %349, %348 ], [ %366, %365 ]
  %369 = add nuw nsw i64 %350, 1
  %370 = zext i32 %368 to i64
  %371 = icmp ult i64 %369, %370
  br i1 %371, label %348, label %346, !llvm.loop !279

372:                                              ; preds = %391, %346, %340
  %373 = load i32, ptr %4, align 8, !tbaa !38
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %593, label %375

375:                                              ; preds = %372
  %376 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  br label %396

377:                                              ; preds = %391, %346
  %378 = phi i32 [ %392, %391 ], [ %.lcssa5, %346 ]
  %379 = phi i64 [ %393, %391 ], [ 0, %346 ]
  %380 = load ptr, ptr %345, align 8, !tbaa !217
  %381 = getelementptr inbounds ptr, ptr %380, i64 %379
  %382 = load ptr, ptr %381, align 8, !tbaa !14
  %383 = getelementptr inbounds %struct.Declaration, ptr %382, i64 0, i32 1
  %384 = load i32, ptr %383, align 8, !tbaa !214
  %385 = icmp ugt i32 %384, 2
  br i1 %385, label %391, label %386

386:                                              ; preds = %377
  %387 = load ptr, ptr %382, align 8, !tbaa !212
  %388 = getelementptr inbounds %struct.Elem, ptr %387, i64 0, i32 3
  %389 = load ptr, ptr %388, align 8, !tbaa !60
  call fastcc void @set_declaration_group(ptr noundef %389, ptr noundef %389, ptr noundef nonnull %382) #44
  %390 = load i32, ptr %341, align 8, !tbaa !215
  br label %391

391:                                              ; preds = %386, %377
  %392 = phi i32 [ %378, %377 ], [ %390, %386 ]
  %393 = add nuw nsw i64 %379, 1
  %394 = zext i32 %392 to i64
  %395 = icmp ult i64 %393, %394
  br i1 %395, label %377, label %372, !llvm.loop !280

396:                                              ; preds = %478, %375
  %397 = phi i32 [ %373, %375 ], [ %479, %478 ]
  %398 = phi i64 [ 0, %375 ], [ %480, %478 ]
  %399 = load ptr, ptr %376, align 8, !tbaa !45
  %400 = getelementptr inbounds ptr, ptr %399, i64 %398
  %401 = load ptr, ptr %400, align 8, !tbaa !14
  %402 = getelementptr inbounds %struct.Production, ptr %401, i64 0, i32 2
  %403 = load i32, ptr %402, align 8, !tbaa !74
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %478, label %405

405:                                              ; preds = %396
  %406 = getelementptr inbounds %struct.Production, ptr %401, i64 0, i32 2, i32 2
  %407 = getelementptr inbounds %struct.Production, ptr %401, i64 0, i32 6, i64 1
  %408 = getelementptr inbounds %struct.Production, ptr %401, i64 0, i32 6, i64 2
  %409 = getelementptr inbounds %struct.Production, ptr %401, i64 0, i32 7, i64 1
  %410 = getelementptr inbounds %struct.Production, ptr %401, i64 0, i32 7, i64 2
  br label %411

411:                                              ; preds = %471, %405
  %412 = phi i32 [ %403, %405 ], [ %472, %471 ]
  %413 = phi i64 [ 0, %405 ], [ %473, %471 ]
  %414 = load ptr, ptr %406, align 8, !tbaa !67
  %415 = getelementptr inbounds ptr, ptr %414, i64 %413
  %416 = load ptr, ptr %415, align 8, !tbaa !14
  %417 = getelementptr inbounds %struct.Rule, ptr %416, i64 0, i32 6
  %418 = load i32, ptr %417, align 8, !tbaa !75
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %471, label %420

420:                                              ; preds = %411
  %421 = getelementptr inbounds %struct.Rule, ptr %416, i64 0, i32 6, i32 2
  br label %422

422:                                              ; preds = %464, %420
  %423 = phi i64 [ 0, %420 ], [ %465, %464 ]
  %424 = load ptr, ptr %421, align 8, !tbaa !174
  %425 = getelementptr inbounds ptr, ptr %424, i64 %423
  %426 = load ptr, ptr %425, align 8, !tbaa !14
  %427 = load i32, ptr %426, align 8, !tbaa !146
  %428 = icmp eq i32 %427, 1
  br i1 %428, label %429, label %464

429:                                              ; preds = %422
  %430 = load ptr, ptr %407, align 8, !tbaa !14
  %431 = icmp eq ptr %430, null
  br i1 %431, label %432, label %438

432:                                              ; preds = %429
  %433 = getelementptr inbounds %struct.Elem, ptr %426, i64 0, i32 3
  %434 = load ptr, ptr %433, align 8, !tbaa !60
  %435 = getelementptr inbounds %struct.Term, ptr %434, i64 0, i32 7
  %436 = load i8, ptr %435, align 4
  %437 = and i8 %436, -8
  store i8 %437, ptr %435, align 4
  br label %464

438:                                              ; preds = %429
  %439 = load ptr, ptr %408, align 8, !tbaa !14
  %440 = icmp eq ptr %439, null
  br i1 %440, label %441, label %448

441:                                              ; preds = %438
  %442 = getelementptr inbounds %struct.Elem, ptr %426, i64 0, i32 3
  %443 = load ptr, ptr %442, align 8, !tbaa !60
  %444 = getelementptr inbounds %struct.Term, ptr %443, i64 0, i32 7
  %445 = load i8, ptr %444, align 4
  %446 = and i8 %445, -8
  %447 = or i8 %446, 1
  store i8 %447, ptr %444, align 4
  br label %464

448:                                              ; preds = %438
  %449 = load ptr, ptr %409, align 8, !tbaa !14
  %450 = getelementptr inbounds %struct.Declaration, ptr %449, i64 0, i32 2
  %451 = load i32, ptr %450, align 4, !tbaa !216
  %452 = load ptr, ptr %410, align 8, !tbaa !14
  %453 = getelementptr inbounds %struct.Declaration, ptr %452, i64 0, i32 2
  %454 = load i32, ptr %453, align 4, !tbaa !216
  %455 = icmp ugt i32 %451, %454
  %456 = getelementptr inbounds %struct.Elem, ptr %426, i64 0, i32 3
  %457 = load ptr, ptr %456, align 8, !tbaa !60
  %458 = getelementptr inbounds %struct.Term, ptr %457, i64 0, i32 7
  %459 = load i8, ptr %458, align 4
  %460 = and i8 %459, -8
  br i1 %455, label %461, label %463

461:                                              ; preds = %448
  %462 = or i8 %460, 1
  store i8 %462, ptr %458, align 4
  br label %464

463:                                              ; preds = %448
  store i8 %460, ptr %458, align 4
  br label %464

464:                                              ; preds = %463, %461, %441, %432, %422
  %465 = add nuw nsw i64 %423, 1
  %466 = load i32, ptr %417, align 8, !tbaa !75
  %467 = zext i32 %466 to i64
  %468 = icmp ult i64 %465, %467
  br i1 %468, label %422, label %469, !llvm.loop !281

469:                                              ; preds = %464
  %470 = load i32, ptr %402, align 8, !tbaa !74
  br label %471

471:                                              ; preds = %469, %411
  %472 = phi i32 [ %470, %469 ], [ %412, %411 ]
  %473 = add nuw nsw i64 %413, 1
  %474 = zext i32 %472 to i64
  %475 = icmp ult i64 %473, %474
  br i1 %475, label %411, label %476, !llvm.loop !282

476:                                              ; preds = %471
  %477 = load i32, ptr %4, align 8, !tbaa !38
  br label %478

478:                                              ; preds = %476, %396
  %479 = phi i32 [ %477, %476 ], [ %397, %396 ]
  %480 = add nuw nsw i64 %398, 1
  %481 = zext i32 %479 to i64
  %482 = icmp ult i64 %480, %481
  br i1 %482, label %396, label %483, !llvm.loop !283

483:                                              ; preds = %478
  %.lcssa4 = phi i32 [ %479, %478 ]
  %484 = icmp eq i32 %.lcssa4, 0
  br i1 %484, label %593, label %485

485:                                              ; preds = %483
  %486 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %487 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 10
  br label %488

488:                                              ; preds = %588, %485
  %489 = phi i32 [ %.lcssa4, %485 ], [ %589, %588 ]
  %490 = phi i64 [ 0, %485 ], [ %590, %588 ]
  %491 = load ptr, ptr %376, align 8, !tbaa !45
  %492 = getelementptr inbounds ptr, ptr %491, i64 %490
  %493 = load ptr, ptr %492, align 8, !tbaa !14
  %494 = getelementptr inbounds %struct.Production, ptr %493, i64 0, i32 2
  %495 = load i32, ptr %494, align 8, !tbaa !74
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %588, label %497

497:                                              ; preds = %488
  %498 = getelementptr inbounds %struct.Production, ptr %493, i64 0, i32 2, i32 2
  br label %499

499:                                              ; preds = %581, %497
  %500 = phi i32 [ %495, %497 ], [ %582, %581 ]
  %501 = phi i64 [ 0, %497 ], [ %583, %581 ]
  %502 = load ptr, ptr %498, align 8, !tbaa !67
  %503 = getelementptr inbounds ptr, ptr %502, i64 %501
  %504 = load ptr, ptr %503, align 8, !tbaa !14
  %505 = getelementptr inbounds %struct.Rule, ptr %504, i64 0, i32 6
  %506 = load i32, ptr %505, align 8, !tbaa !75
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %581, label %508

508:                                              ; preds = %499
  %509 = getelementptr inbounds %struct.Rule, ptr %504, i64 0, i32 6, i32 2
  br label %510

510:                                              ; preds = %574, %508
  %511 = phi i32 [ %506, %508 ], [ %575, %574 ]
  %512 = phi i64 [ 0, %508 ], [ %576, %574 ]
  %513 = load ptr, ptr %509, align 8, !tbaa !174
  %514 = getelementptr inbounds ptr, ptr %513, i64 %512
  %515 = load ptr, ptr %514, align 8, !tbaa !14
  %516 = load i32, ptr %515, align 8, !tbaa !146
  %517 = icmp eq i32 %516, 1
  br i1 %517, label %518, label %574

518:                                              ; preds = %510
  %519 = getelementptr inbounds %struct.Elem, ptr %515, i64 0, i32 3
  %520 = load ptr, ptr %519, align 8, !tbaa !60
  %521 = load i32, ptr %14, align 8, !tbaa !32
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %571, label %523

523:                                              ; preds = %518
  %524 = load i32, ptr %520, align 8, !tbaa !34
  %525 = load ptr, ptr %486, align 8, !tbaa !33
  %526 = getelementptr inbounds %struct.Term, ptr %520, i64 0, i32 6
  %527 = getelementptr inbounds %struct.Term, ptr %520, i64 0, i32 2
  %528 = getelementptr inbounds %struct.Term, ptr %520, i64 0, i32 3
  %529 = getelementptr inbounds %struct.Term, ptr %520, i64 0, i32 4
  %530 = getelementptr inbounds %struct.Term, ptr %520, i64 0, i32 5
  %531 = zext i32 %521 to i64
  br label %532

532:                                              ; preds = %568, %523
  %533 = phi i64 [ 0, %523 ], [ %569, %568 ]
  %534 = getelementptr inbounds ptr, ptr %525, i64 %533
  %535 = load ptr, ptr %534, align 8, !tbaa !14
  %536 = load i32, ptr %535, align 8, !tbaa !34
  %537 = icmp eq i32 %524, %536
  br i1 %537, label %538, label %568

538:                                              ; preds = %532
  %539 = load i32, ptr %526, align 8, !tbaa !43
  %540 = getelementptr inbounds %struct.Term, ptr %535, i64 0, i32 6
  %541 = load i32, ptr %540, align 8, !tbaa !43
  %542 = icmp eq i32 %539, %541
  br i1 %542, label %543, label %568

543:                                              ; preds = %538
  %544 = load i32, ptr %527, align 8, !tbaa !96
  %545 = getelementptr inbounds %struct.Term, ptr %535, i64 0, i32 2
  %546 = load i32, ptr %545, align 8, !tbaa !96
  %547 = icmp eq i32 %544, %546
  br i1 %547, label %548, label %568

548:                                              ; preds = %543
  %549 = load i32, ptr %487, align 8, !tbaa !16
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %561, label %551

551:                                              ; preds = %548
  %552 = load i32, ptr %528, align 4, !tbaa !94
  %553 = getelementptr inbounds %struct.Term, ptr %535, i64 0, i32 3
  %554 = load i32, ptr %553, align 4, !tbaa !94
  %555 = icmp eq i32 %552, %554
  br i1 %555, label %556, label %568

556:                                              ; preds = %551
  %557 = load i32, ptr %529, align 8, !tbaa !95
  %558 = getelementptr inbounds %struct.Term, ptr %535, i64 0, i32 4
  %559 = load i32, ptr %558, align 8, !tbaa !95
  %560 = icmp eq i32 %557, %559
  br i1 %560, label %561, label %568

561:                                              ; preds = %556, %548
  %562 = load ptr, ptr %530, align 8, !tbaa !40
  %563 = getelementptr inbounds %struct.Term, ptr %535, i64 0, i32 5
  %564 = load ptr, ptr %563, align 8, !tbaa !40
  %565 = sext i32 %539 to i64
  %566 = call i32 @strncmp(ptr noundef %562, ptr noundef %564, i64 noundef %565) #48
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %571, label %568

568:                                              ; preds = %561, %556, %551, %543, %538, %532
  %569 = add nuw nsw i64 %533, 1
  %570 = icmp eq i64 %569, %531
  br i1 %570, label %571, label %532, !llvm.loop !284

571:                                              ; preds = %568, %561, %518
  %572 = phi ptr [ %520, %518 ], [ %520, %568 ], [ %535, %561 ]
  store ptr %572, ptr %519, align 8, !tbaa !60
  %573 = load i32, ptr %505, align 8, !tbaa !75
  br label %574

574:                                              ; preds = %571, %510
  %575 = phi i32 [ %511, %510 ], [ %573, %571 ]
  %576 = add nuw nsw i64 %512, 1
  %577 = zext i32 %575 to i64
  %578 = icmp ult i64 %576, %577
  br i1 %578, label %510, label %579, !llvm.loop !285

579:                                              ; preds = %574
  %580 = load i32, ptr %494, align 8, !tbaa !74
  br label %581

581:                                              ; preds = %579, %499
  %582 = phi i32 [ %580, %579 ], [ %500, %499 ]
  %583 = add nuw nsw i64 %501, 1
  %584 = zext i32 %582 to i64
  %585 = icmp ult i64 %583, %584
  br i1 %585, label %499, label %586, !llvm.loop !286

586:                                              ; preds = %581
  %587 = load i32, ptr %4, align 8, !tbaa !38
  br label %588

588:                                              ; preds = %586, %488
  %589 = phi i32 [ %587, %586 ], [ %489, %488 ]
  %590 = add nuw nsw i64 %490, 1
  %591 = zext i32 %589 to i64
  %592 = icmp ult i64 %590, %591
  br i1 %592, label %488, label %597, !llvm.loop !287

593:                                              ; preds = %483, %372
  %594 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %595 = load ptr, ptr %594, align 8, !tbaa !45
  %596 = load ptr, ptr %595, align 8, !tbaa !14
  br label %710

597:                                              ; preds = %588
  %.lcssa3 = phi i32 [ %589, %588 ]
  %.lcssa2 = phi i64 [ %591, %588 ]
  %598 = load ptr, ptr %376, align 8, !tbaa !45
  %599 = load ptr, ptr %598, align 8, !tbaa !14
  %600 = icmp eq i32 %.lcssa3, 0
  br i1 %600, label %710, label %601

601:                                              ; preds = %597
  %602 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 13
  %603 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7, i32 2
  %604 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  br label %605

605:                                              ; preds = %707, %601
  %606 = phi i64 [ 0, %601 ], [ %708, %707 ]
  %607 = getelementptr inbounds ptr, ptr %598, i64 %606
  %608 = load ptr, ptr %607, align 8, !tbaa !14
  %609 = getelementptr inbounds %struct.Production, ptr %608, i64 0, i32 4
  %610 = load i8, ptr %609, align 4
  %611 = and i8 %610, 28
  %612 = icmp eq i8 %611, 0
  br i1 %612, label %613, label %707

613:                                              ; preds = %605
  %614 = load i32, ptr %602, align 4, !tbaa !22
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %617, label %616

616:                                              ; preds = %630, %613
  br label %641

617:                                              ; preds = %613
  %618 = load i32, ptr %341, align 8, !tbaa !215
  %619 = icmp eq i32 %618, 0
  br i1 %619, label %707, label %620

620:                                              ; preds = %617
  %621 = load ptr, ptr %603, align 8, !tbaa !217
  %622 = zext i32 %618 to i64
  br label %623

623:                                              ; preds = %638, %620
  %624 = phi i64 [ 0, %620 ], [ %639, %638 ]
  %625 = getelementptr inbounds ptr, ptr %621, i64 %624
  %626 = load ptr, ptr %625, align 8, !tbaa !14
  %627 = getelementptr inbounds %struct.Declaration, ptr %626, i64 0, i32 1
  %628 = load i32, ptr %627, align 8, !tbaa !214
  %629 = icmp eq i32 %628, 5
  br i1 %629, label %630, label %638

630:                                              ; preds = %623
  %631 = load ptr, ptr %626, align 8, !tbaa !212
  %632 = getelementptr inbounds %struct.Elem, ptr %631, i64 0, i32 3
  %633 = load ptr, ptr %632, align 8, !tbaa !60
  %634 = getelementptr inbounds %struct.Production, ptr %633, i64 0, i32 3
  %635 = load i32, ptr %634, align 8, !tbaa !70
  %636 = zext i32 %635 to i64
  %637 = icmp eq i64 %606, %636
  br i1 %637, label %616, label %638

638:                                              ; preds = %630, %623
  %639 = add nuw nsw i64 %624, 1
  %640 = icmp eq i64 %639, %622
  br i1 %640, label %707, label %623, !llvm.loop !243

641:                                              ; preds = %683, %616
  %642 = phi i64 [ %684, %683 ], [ 0, %616 ]
  %643 = getelementptr inbounds ptr, ptr %598, i64 %642
  %644 = load ptr, ptr %643, align 8, !tbaa !14
  %645 = getelementptr inbounds %struct.Production, ptr %644, i64 0, i32 2
  %646 = load i32, ptr %645, align 8, !tbaa !74
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %683, label %648

648:                                              ; preds = %676, %641
  %649 = phi ptr [ %677, %676 ], [ %644, %641 ]
  %650 = phi i64 [ %678, %676 ], [ 0, %641 ]
  %651 = getelementptr inbounds %struct.Production, ptr %649, i64 0, i32 2, i32 2
  %652 = load ptr, ptr %651, align 8, !tbaa !67
  %653 = getelementptr inbounds ptr, ptr %652, i64 %650
  %654 = load ptr, ptr %653, align 8, !tbaa !14
  %655 = getelementptr inbounds %struct.Rule, ptr %654, i64 0, i32 6
  %656 = load i32, ptr %655, align 8, !tbaa !75
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %676, label %658

658:                                              ; preds = %648
  %659 = getelementptr inbounds %struct.Rule, ptr %654, i64 0, i32 6, i32 2
  %660 = load ptr, ptr %659, align 8, !tbaa !174
  %661 = load ptr, ptr %607, align 8, !tbaa !14
  %662 = zext i32 %656 to i64
  br label %666

663:                                              ; preds = %666
  %664 = add nuw nsw i64 %667, 1
  %665 = icmp eq i64 %664, %662
  br i1 %665, label %676, label %666, !llvm.loop !288

666:                                              ; preds = %663, %658
  %667 = phi i64 [ 0, %658 ], [ %664, %663 ]
  %668 = getelementptr inbounds ptr, ptr %660, i64 %667
  %669 = load ptr, ptr %668, align 8, !tbaa !14
  %670 = getelementptr inbounds %struct.Elem, ptr %669, i64 0, i32 3
  %671 = load ptr, ptr %670, align 8, !tbaa !60
  %672 = icmp eq ptr %671, %661
  br i1 %672, label %673, label %663

673:                                              ; preds = %666
  %.lcssa1 = phi ptr [ %669, %666 ]
  %674 = getelementptr inbounds %struct.Production, ptr %661, i64 0, i32 9
  store ptr %.lcssa1, ptr %674, align 8, !tbaa !46
  %675 = load ptr, ptr %643, align 8, !tbaa !14
  br label %676

676:                                              ; preds = %673, %663, %648
  %677 = phi ptr [ %649, %648 ], [ %675, %673 ], [ %649, %663 ]
  %678 = add nuw nsw i64 %650, 1
  %679 = getelementptr inbounds %struct.Production, ptr %677, i64 0, i32 2
  %680 = load i32, ptr %679, align 8, !tbaa !74
  %681 = zext i32 %680 to i64
  %682 = icmp ult i64 %678, %681
  br i1 %682, label %648, label %683, !llvm.loop !289

683:                                              ; preds = %676, %641
  %684 = add nuw nsw i64 %642, 1
  %685 = icmp eq i64 %684, %.lcssa2
  br i1 %685, label %686, label %641, !llvm.loop !290

686:                                              ; preds = %683
  %687 = load ptr, ptr %607, align 8, !tbaa !14
  %688 = call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %689 = getelementptr inbounds %struct.Rule, ptr %688, i64 0, i32 1
  store ptr %599, ptr %689, align 8, !tbaa !68
  %690 = call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %691 = getelementptr inbounds %struct.Rule, ptr %688, i64 0, i32 7
  store ptr %690, ptr %691, align 8, !tbaa !207
  store i32 3, ptr %690, align 8, !tbaa !146
  %692 = getelementptr inbounds %struct.Elem, ptr %690, i64 0, i32 2
  store ptr %688, ptr %692, align 8, !tbaa !208
  %693 = load i32, ptr %604, align 8, !tbaa !209
  %694 = getelementptr inbounds %struct.Rule, ptr %688, i64 0, i32 11
  store i32 %693, ptr %694, align 8, !tbaa !82
  %695 = call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %696 = getelementptr inbounds %struct.Elem, ptr %695, i64 0, i32 3
  store ptr %687, ptr %696, align 8, !tbaa !60
  %697 = getelementptr inbounds %struct.Elem, ptr %695, i64 0, i32 2
  store ptr %688, ptr %697, align 8, !tbaa !208
  %698 = load ptr, ptr %607, align 8, !tbaa !14
  %699 = getelementptr inbounds %struct.Production, ptr %698, i64 0, i32 9
  store ptr %695, ptr %699, align 8, !tbaa !46
  %700 = load i32, ptr %3, align 4, !tbaa !262
  %701 = add nsw i32 %700, 1
  store i32 %701, ptr %3, align 4, !tbaa !262
  %702 = load ptr, ptr %607, align 8, !tbaa !14
  %703 = getelementptr inbounds %struct.Production, ptr %702, i64 0, i32 9
  %704 = load ptr, ptr %703, align 8, !tbaa !46
  %705 = getelementptr inbounds %struct.Elem, ptr %704, i64 0, i32 2
  %706 = load ptr, ptr %705, align 8, !tbaa !208
  store i32 %700, ptr %706, align 8, !tbaa !71
  br label %707

707:                                              ; preds = %686, %638, %617, %605
  %708 = add nuw nsw i64 %606, 1
  %709 = icmp eq i64 %708, %.lcssa2
  br i1 %709, label %710, label %605, !llvm.loop !291

710:                                              ; preds = %707, %597, %593
  %711 = phi ptr [ %596, %593 ], [ %599, %597 ], [ %599, %707 ]
  %712 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 13
  %713 = load i32, ptr %712, align 4, !tbaa !22
  %714 = icmp eq i32 %713, 0
  br i1 %714, label %715, label %737

715:                                              ; preds = %710
  %716 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 12
  %717 = load i32, ptr %716, align 8, !tbaa !21
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %737, label %719

719:                                              ; preds = %715
  %720 = call ptr @lookup_production(ptr noundef nonnull %0, ptr noundef nonnull @.str.75.223, i32 noundef 10) #44
  %721 = icmp eq ptr %720, null
  br i1 %721, label %737, label %722

722:                                              ; preds = %719
  %723 = call dereferenceable_or_null(168) ptr @calloc(i64 1, i64 168)
  %724 = getelementptr inbounds %struct.Rule, ptr %723, i64 0, i32 1
  store ptr %711, ptr %724, align 8, !tbaa !68
  %725 = call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %726 = getelementptr inbounds %struct.Rule, ptr %723, i64 0, i32 7
  store ptr %725, ptr %726, align 8, !tbaa !207
  store i32 3, ptr %725, align 8, !tbaa !146
  %727 = getelementptr inbounds %struct.Elem, ptr %725, i64 0, i32 2
  store ptr %723, ptr %727, align 8, !tbaa !208
  %728 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 26
  %729 = load i32, ptr %728, align 8, !tbaa !209
  %730 = getelementptr inbounds %struct.Rule, ptr %723, i64 0, i32 11
  store i32 %729, ptr %730, align 8, !tbaa !82
  %731 = call dereferenceable_or_null(32) ptr @calloc(i64 1, i64 32)
  %732 = getelementptr inbounds %struct.Elem, ptr %731, i64 0, i32 3
  store ptr %720, ptr %732, align 8, !tbaa !60
  %733 = getelementptr inbounds %struct.Elem, ptr %731, i64 0, i32 2
  store ptr %723, ptr %733, align 8, !tbaa !208
  %734 = getelementptr inbounds %struct.Production, ptr %720, i64 0, i32 9
  store ptr %731, ptr %734, align 8, !tbaa !46
  %735 = load i32, ptr %3, align 4, !tbaa !262
  %736 = add nsw i32 %735, 1
  store i32 %736, ptr %3, align 4, !tbaa !262
  store i32 %735, ptr %723, align 8, !tbaa !71
  br label %737

737:                                              ; preds = %722, %719, %715, %710
  %738 = call ptr @lookup_production(ptr noundef nonnull %0, ptr noundef nonnull @.str.76.224, i32 noundef 1) #44
  %739 = icmp eq ptr %738, null
  br i1 %739, label %745, label %740

740:                                              ; preds = %737
  %741 = getelementptr inbounds %struct.Production, ptr %738, i64 0, i32 2
  %742 = load i32, ptr %741, align 8, !tbaa !74
  %743 = icmp ugt i32 %742, 1
  br i1 %743, label %744, label %745

744:                                              ; preds = %740
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.77.225) #43
  br label %745

745:                                              ; preds = %744, %740, %737
  call void @build_LR_tables(ptr noundef nonnull %0) #43
  %746 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %747 = load i32, ptr %746, align 8, !tbaa !98
  %748 = icmp eq i32 %747, 0
  br i1 %748, label %751, label %749

749:                                              ; preds = %745
  %750 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %758

751:                                              ; preds = %758, %745
  %752 = phi i32 [ 0, %745 ], [ %767, %758 ]
  %753 = load i32, ptr %341, align 8, !tbaa !215
  %754 = icmp eq i32 %753, 0
  br i1 %754, label %770, label %755

755:                                              ; preds = %751
  %756 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 7, i32 2
  %757 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %776

758:                                              ; preds = %758, %749
  %759 = phi i64 [ 0, %749 ], [ %766, %758 ]
  %760 = load ptr, ptr %750, align 8, !tbaa !99
  %761 = getelementptr inbounds ptr, ptr %760, i64 %759
  %762 = load ptr, ptr %761, align 8, !tbaa !14
  %763 = getelementptr inbounds %struct.State, ptr %762, i64 0, i32 10
  %764 = load i8, ptr %763, align 8
  %765 = or i8 %764, 24
  store i8 %765, ptr %763, align 8
  %766 = add nuw nsw i64 %759, 1
  %767 = load i32, ptr %746, align 8, !tbaa !98
  %768 = zext i32 %767 to i64
  %769 = icmp ult i64 %766, %768
  br i1 %769, label %758, label %751, !llvm.loop !292

770:                                              ; preds = %921, %751
  %771 = phi i32 [ %752, %751 ], [ %922, %921 ]
  %772 = phi i32 [ %752, %751 ], [ %923, %921 ]
  %773 = icmp eq i32 %772, 0
  br i1 %773, label %949, label %774

774:                                              ; preds = %770
  %775 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %929

776:                                              ; preds = %921, %755
  %777 = phi i32 [ %752, %755 ], [ %922, %921 ]
  %778 = phi i32 [ %752, %755 ], [ %923, %921 ]
  %779 = phi i32 [ %753, %755 ], [ %924, %921 ]
  %780 = phi i32 [ %752, %755 ], [ %925, %921 ]
  %781 = phi i64 [ 0, %755 ], [ %926, %921 ]
  %782 = load ptr, ptr %756, align 8, !tbaa !217
  %783 = getelementptr inbounds ptr, ptr %782, i64 %781
  %784 = load ptr, ptr %783, align 8, !tbaa !14
  %785 = getelementptr inbounds %struct.Declaration, ptr %784, i64 0, i32 1
  %786 = load i32, ptr %785, align 8, !tbaa !214
  %787 = icmp ugt i32 %786, 2
  br i1 %787, label %921, label %788

788:                                              ; preds = %776
  %789 = icmp eq i32 %780, 0
  br i1 %789, label %921, label %792

790:                                              ; preds = %914
  %791 = load i32, ptr %785, align 8, !tbaa !214
  br label %792

792:                                              ; preds = %790, %788
  %793 = phi i32 [ %791, %790 ], [ %786, %788 ]
  %794 = phi i64 [ %915, %790 ], [ 0, %788 ]
  %795 = phi ptr [ %868, %790 ], [ null, %788 ]
  %796 = load ptr, ptr %757, align 8, !tbaa !99
  %797 = getelementptr inbounds ptr, ptr %796, i64 %794
  %798 = load ptr, ptr %797, align 8, !tbaa !14
  %799 = icmp eq i32 %793, 0
  br i1 %799, label %800, label %867

800:                                              ; preds = %792
  %801 = icmp eq ptr %795, null
  br i1 %801, label %867, label %802

802:                                              ; preds = %800
  %803 = getelementptr inbounds %struct.State, ptr %798, i64 0, i32 13
  store ptr %795, ptr %803, align 8, !tbaa !104
  %804 = getelementptr inbounds %struct.State, ptr %798, i64 0, i32 5
  %805 = load i32, ptr %804, align 8, !tbaa !103
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %867, label %807

807:                                              ; preds = %802
  %808 = getelementptr inbounds %struct.State, ptr %795, i64 0, i32 5
  %809 = getelementptr inbounds %struct.State, ptr %798, i64 0, i32 5, i32 2
  %810 = getelementptr inbounds %struct.State, ptr %795, i64 0, i32 5, i32 2
  %811 = getelementptr inbounds %struct.State, ptr %795, i64 0, i32 5, i32 3
  br label %812

812:                                              ; preds = %862, %807
  %813 = phi i64 [ 0, %807 ], [ %863, %862 ]
  %814 = load i32, ptr %808, align 8, !tbaa !103
  %815 = icmp eq i32 %814, 0
  %816 = load ptr, ptr %810, align 8, !tbaa !105
  br i1 %815, label %834, label %817

817:                                              ; preds = %812
  %818 = load ptr, ptr %809, align 8, !tbaa !105
  %819 = getelementptr inbounds ptr, ptr %818, i64 %813
  %820 = load ptr, ptr %819, align 8, !tbaa !14
  %821 = getelementptr inbounds %struct.Action, ptr %820, i64 0, i32 1
  %822 = load ptr, ptr %821, align 8, !tbaa !106
  %823 = zext i32 %814 to i64
  br label %827

824:                                              ; preds = %827
  %825 = add nuw nsw i64 %828, 1
  %826 = icmp eq i64 %825, %823
  br i1 %826, label %840, label %827, !llvm.loop !293

827:                                              ; preds = %824, %817
  %828 = phi i64 [ 0, %817 ], [ %825, %824 ]
  %829 = getelementptr inbounds ptr, ptr %816, i64 %828
  %830 = load ptr, ptr %829, align 8, !tbaa !14
  %831 = getelementptr inbounds %struct.Action, ptr %830, i64 0, i32 1
  %832 = load ptr, ptr %831, align 8, !tbaa !106
  %833 = icmp eq ptr %822, %832
  br i1 %833, label %862, label %824

834:                                              ; preds = %812
  %835 = icmp eq ptr %816, null
  br i1 %835, label %836, label %842

836:                                              ; preds = %834
  %837 = load ptr, ptr %809, align 8, !tbaa !105
  %838 = getelementptr inbounds ptr, ptr %837, i64 %813
  %839 = load ptr, ptr %838, align 8, !tbaa !14
  store ptr %811, ptr %810, align 8, !tbaa !105
  store i32 1, ptr %808, align 8, !tbaa !103
  store ptr %839, ptr %811, align 8, !tbaa !14
  br label %862

840:                                              ; preds = %824
  %841 = icmp eq ptr %816, %811
  br i1 %841, label %847, label %854

842:                                              ; preds = %834
  %843 = icmp eq ptr %816, %811
  %844 = load ptr, ptr %809, align 8, !tbaa !105
  %845 = getelementptr inbounds ptr, ptr %844, i64 %813
  %846 = load ptr, ptr %845, align 8, !tbaa !14
  br i1 %843, label %849, label %860

847:                                              ; preds = %840
  %848 = icmp ult i32 %814, 3
  br i1 %848, label %849, label %860

849:                                              ; preds = %847, %842
  %850 = phi i64 [ %823, %847 ], [ 0, %842 ]
  %851 = phi ptr [ %820, %847 ], [ %846, %842 ]
  %852 = add nuw nsw i32 %814, 1
  store i32 %852, ptr %808, align 8, !tbaa !103
  %853 = getelementptr inbounds ptr, ptr %811, i64 %850
  store ptr %851, ptr %853, align 8, !tbaa !14
  br label %862

854:                                              ; preds = %840
  %855 = and i32 %814, 7
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %860, label %857

857:                                              ; preds = %854
  %858 = add i32 %814, 1
  store i32 %858, ptr %808, align 8, !tbaa !103
  %859 = getelementptr inbounds ptr, ptr %816, i64 %823
  store ptr %820, ptr %859, align 8, !tbaa !14
  br label %862

860:                                              ; preds = %854, %847, %842
  %861 = phi ptr [ %820, %847 ], [ %820, %854 ], [ %846, %842 ]
  call void @vec_add_internal(ptr noundef nonnull %808, ptr noundef %861) #43
  br label %862

862:                                              ; preds = %860, %857, %849, %836, %827
  %863 = add nuw nsw i64 %813, 1
  %864 = load i32, ptr %804, align 8, !tbaa !103
  %865 = zext i32 %864 to i64
  %866 = icmp ult i64 %863, %865
  br i1 %866, label %812, label %867, !llvm.loop !294

867:                                              ; preds = %862, %802, %800, %792
  %868 = phi ptr [ %795, %792 ], [ %798, %800 ], [ %795, %802 ], [ %795, %862 ]
  %869 = getelementptr inbounds %struct.State, ptr %798, i64 0, i32 2
  %870 = load i32, ptr %869, align 8, !tbaa !234
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %914, label %872

872:                                              ; preds = %867
  %873 = getelementptr inbounds %struct.State, ptr %798, i64 0, i32 2, i32 2
  %874 = getelementptr inbounds %struct.State, ptr %798, i64 0, i32 10
  %875 = load ptr, ptr %873, align 8, !tbaa !235
  %876 = zext i32 %870 to i64
  br label %877

877:                                              ; preds = %911, %872
  %878 = phi i64 [ 0, %872 ], [ %912, %911 ]
  %879 = getelementptr inbounds ptr, ptr %875, i64 %878
  %880 = load ptr, ptr %879, align 8, !tbaa !14
  %881 = load i32, ptr %880, align 8, !tbaa !146
  %882 = icmp eq i32 %881, 1
  br i1 %882, label %883, label %911

883:                                              ; preds = %877
  %884 = getelementptr inbounds %struct.Elem, ptr %880, i64 0, i32 3
  %885 = load ptr, ptr %884, align 8, !tbaa !60
  %886 = getelementptr inbounds %struct.Term, ptr %885, i64 0, i32 7
  %887 = load i8, ptr %886, align 4
  %888 = and i8 %887, 7
  %889 = zext i8 %888 to i32
  switch i32 %889, label %911 [
    i32 1, label %890
    i32 0, label %900
  ]

890:                                              ; preds = %883
  %891 = load i8, ptr %874, align 8
  %892 = lshr i8 %891, 3
  %893 = and i8 %892, 3
  switch i8 %893, label %897 [
    i8 3, label %894
    i8 1, label %894
  ]

894:                                              ; preds = %890, %890
  %895 = and i8 %891, -25
  %896 = or i8 %895, 8
  br label %909

897:                                              ; preds = %890
  %898 = and i8 %891, -25
  %899 = or i8 %898, 16
  br label %909

900:                                              ; preds = %883
  %901 = load i8, ptr %874, align 8
  %902 = lshr i8 %901, 3
  %903 = and i8 %902, 3
  switch i8 %903, label %906 [
    i8 3, label %904
    i8 0, label %904
  ]

904:                                              ; preds = %900, %900
  %905 = and i8 %901, -25
  br label %909

906:                                              ; preds = %900
  %907 = and i8 %901, -25
  %908 = or i8 %907, 16
  br label %909

909:                                              ; preds = %906, %904, %897, %894
  %910 = phi i8 [ %905, %904 ], [ %908, %906 ], [ %896, %894 ], [ %899, %897 ]
  store i8 %910, ptr %874, align 8
  br label %911

911:                                              ; preds = %909, %883, %877
  %912 = add nuw nsw i64 %878, 1
  %913 = icmp eq i64 %912, %876
  br i1 %913, label %914, label %877, !llvm.loop !295

914:                                              ; preds = %911, %867
  %915 = add nuw nsw i64 %794, 1
  %916 = load i32, ptr %746, align 8, !tbaa !98
  %917 = zext i32 %916 to i64
  %918 = icmp ult i64 %915, %917
  br i1 %918, label %790, label %919, !llvm.loop !296

919:                                              ; preds = %914
  %.lcssa = phi i32 [ %916, %914 ]
  %920 = load i32, ptr %341, align 8, !tbaa !215
  br label %921

921:                                              ; preds = %919, %788, %776
  %922 = phi i32 [ %.lcssa, %919 ], [ %777, %788 ], [ %777, %776 ]
  %923 = phi i32 [ %.lcssa, %919 ], [ %778, %788 ], [ %778, %776 ]
  %924 = phi i32 [ %920, %919 ], [ %779, %788 ], [ %779, %776 ]
  %925 = phi i32 [ %.lcssa, %919 ], [ 0, %788 ], [ %780, %776 ]
  %926 = add nuw nsw i64 %781, 1
  %927 = zext i32 %924 to i64
  %928 = icmp ult i64 %926, %927
  br i1 %928, label %776, label %770, !llvm.loop !297

929:                                              ; preds = %943, %774
  %930 = phi i32 [ %771, %774 ], [ %944, %943 ]
  %931 = phi i32 [ %772, %774 ], [ %945, %943 ]
  %932 = phi i64 [ 0, %774 ], [ %946, %943 ]
  %933 = load ptr, ptr %775, align 8, !tbaa !99
  %934 = getelementptr inbounds ptr, ptr %933, i64 %932
  %935 = load ptr, ptr %934, align 8, !tbaa !14
  %936 = getelementptr inbounds %struct.State, ptr %935, i64 0, i32 10
  %937 = load i8, ptr %936, align 8
  %938 = and i8 %937, 24
  %939 = icmp eq i8 %938, 24
  br i1 %939, label %940, label %943

940:                                              ; preds = %929
  %941 = and i8 %937, -25
  store i8 %941, ptr %936, align 8
  %942 = load i32, ptr %746, align 8, !tbaa !98
  br label %943

943:                                              ; preds = %940, %929
  %944 = phi i32 [ %930, %929 ], [ %942, %940 ]
  %945 = phi i32 [ %931, %929 ], [ %942, %940 ]
  %946 = add nuw nsw i64 %932, 1
  %947 = zext i32 %945 to i64
  %948 = icmp ult i64 %946, %947
  br i1 %948, label %929, label %949, !llvm.loop !298

949:                                              ; preds = %943, %770
  %950 = phi i32 [ %771, %770 ], [ %944, %943 ]
  %951 = load i32, ptr @verbose_level, align 4, !tbaa !15
  %952 = icmp eq i32 %951, 0
  br i1 %952, label %961, label %953

953:                                              ; preds = %949
  %954 = load i32, ptr %4, align 8, !tbaa !38
  %955 = load i32, ptr %14, align 8, !tbaa !32
  %956 = load i32, ptr %341, align 8, !tbaa !215
  %957 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.45.226, i32 noundef %954, i32 noundef %955, i32 noundef %950, i32 noundef %956) #44
  %958 = load i32, ptr @verbose_level, align 4, !tbaa !15
  %959 = icmp sgt i32 %958, 1
  br i1 %959, label %960, label %961

960:                                              ; preds = %953
  call void @print_grammar(ptr noundef nonnull %0) #44
  call void @print_states(ptr noundef nonnull %0) #44
  br label %961

961:                                              ; preds = %960, %953, %949
  call void @build_scanners(ptr noundef nonnull %0) #43
  call void @build_eq(ptr noundef nonnull %0) #44
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #1

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @convert_regex_production_one(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 10
  %4 = load ptr, ptr %3, align 8, !tbaa !275
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %342

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 4
  %8 = load i8, ptr %7, align 4
  %9 = and i8 %8, 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = load ptr, ptr %1, align 8, !tbaa !48
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.67.228, ptr noundef %12) #43
  %13 = load i8, ptr %7, align 4
  br label %14

14:                                               ; preds = %11, %6
  %15 = phi i8 [ %13, %11 ], [ %8, %6 ]
  %16 = or i8 %15, 2
  store i8 %16, ptr %7, align 4
  %17 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 2
  %18 = load i32, ptr %17, align 8, !tbaa !74
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 2, i32 2
  br label %22

22:                                               ; preds = %121, %20
  %23 = phi i64 [ 0, %20 ], [ %124, %121 ]
  %24 = phi i32 [ %18, %20 ], [ %125, %121 ]
  %25 = phi i32 [ 0, %20 ], [ %123, %121 ]
  %26 = phi i32 [ 0, %20 ], [ %122, %121 ]
  %27 = load ptr, ptr %21, align 8, !tbaa !67
  %28 = getelementptr inbounds ptr, ptr %27, i64 %23
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 9
  %31 = load ptr, ptr %30, align 8, !tbaa !77
  %32 = icmp eq ptr %31, null
  br i1 %32, label %33, label %39

33:                                               ; preds = %22
  %34 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 8
  %35 = load ptr, ptr %34, align 8, !tbaa !76
  %36 = icmp ne ptr %35, null
  %37 = icmp ugt i32 %24, 1
  %38 = and i1 %37, %36
  br i1 %38, label %39, label %41

39:                                               ; preds = %33, %22
  %40 = load ptr, ptr %1, align 8, !tbaa !48
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.68.229, ptr noundef %40) #43
  br label %41

41:                                               ; preds = %39, %33
  %42 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 6
  %43 = load i32, ptr %42, align 8, !tbaa !75
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %121, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 6, i32 2
  br label %47

47:                                               ; preds = %113, %45
  %48 = phi i64 [ 0, %45 ], [ %117, %113 ]
  %49 = phi i32 [ %25, %45 ], [ %116, %113 ]
  %50 = phi i32 [ %26, %45 ], [ %114, %113 ]
  %51 = load ptr, ptr %46, align 8, !tbaa !174
  %52 = getelementptr inbounds ptr, ptr %51, i64 %48
  %53 = load ptr, ptr %52, align 8, !tbaa !14
  %54 = load i32, ptr %53, align 8, !tbaa !146
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %struct.Elem, ptr %53, i64 0, i32 3
  %57 = load ptr, ptr %56, align 8, !tbaa !60
  br i1 %55, label %58, label %100

58:                                               ; preds = %47
  %59 = getelementptr inbounds %struct.Production, ptr %57, i64 0, i32 4
  %60 = load i8, ptr %59, align 4
  %61 = and i8 %60, 1
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %58
  %64 = load ptr, ptr %1, align 8, !tbaa !48
  %65 = load ptr, ptr %57, align 8, !tbaa !48
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.69.230, ptr noundef %64, ptr noundef %65) #43
  %66 = load ptr, ptr %56, align 8, !tbaa !60
  br label %67

67:                                               ; preds = %63, %58
  %68 = phi ptr [ %66, %63 ], [ %57, %58 ]
  %69 = getelementptr inbounds %struct.Production, ptr %68, i64 0, i32 2
  %70 = load i32, ptr %69, align 8, !tbaa !74
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %96, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.Production, ptr %68, i64 0, i32 2, i32 2
  br label %74

74:                                               ; preds = %91, %72
  %75 = phi i32 [ %70, %72 ], [ %92, %91 ]
  %76 = phi i64 [ 0, %72 ], [ %93, %91 ]
  %77 = load ptr, ptr %73, align 8, !tbaa !67
  %78 = getelementptr inbounds ptr, ptr %77, i64 %76
  %79 = load ptr, ptr %78, align 8, !tbaa !14
  %80 = getelementptr inbounds %struct.Rule, ptr %79, i64 0, i32 8
  %81 = load ptr, ptr %80, align 8, !tbaa !76
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %87

83:                                               ; preds = %74
  %84 = getelementptr inbounds %struct.Rule, ptr %79, i64 0, i32 9
  %85 = load ptr, ptr %84, align 8, !tbaa !77
  %86 = icmp eq ptr %85, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %83, %74
  %88 = load ptr, ptr %1, align 8, !tbaa !48
  %89 = trunc i64 %76 to i32
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.70.231, i32 noundef %89, ptr noundef %88) #43
  %90 = load i32, ptr %69, align 8, !tbaa !74
  br label %91

91:                                               ; preds = %87, %83
  %92 = phi i32 [ %75, %83 ], [ %90, %87 ]
  %93 = add nuw nsw i64 %76, 1
  %94 = zext i32 %92 to i64
  %95 = icmp ult i64 %93, %94
  br i1 %95, label %74, label %96, !llvm.loop !299

96:                                               ; preds = %91, %67
  %97 = icmp eq ptr %68, %1
  br i1 %97, label %113, label %98

98:                                               ; preds = %96
  tail call fastcc void @convert_regex_production_one(ptr noundef %0, ptr noundef nonnull %68) #44
  %99 = getelementptr inbounds %struct.Production, ptr %68, i64 0, i32 10
  br label %105

100:                                              ; preds = %47
  %101 = load i32, ptr %57, align 8, !tbaa !34
  %102 = and i32 %101, -2
  %103 = icmp eq i32 %102, 2
  br i1 %103, label %104, label %108

104:                                              ; preds = %100
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.71.232) #43
  br label %105

105:                                              ; preds = %104, %98
  %106 = phi ptr [ %56, %104 ], [ %99, %98 ]
  %107 = load ptr, ptr %106, align 8, !tbaa !60
  br label %108

108:                                              ; preds = %105, %100
  %109 = phi ptr [ %57, %100 ], [ %107, %105 ]
  %110 = getelementptr inbounds %struct.Term, ptr %109, i64 0, i32 6
  %111 = load i32, ptr %110, align 8, !tbaa !43
  %112 = add nsw i32 %111, 5
  br label %113

113:                                              ; preds = %108, %96
  %114 = phi i32 [ 1, %96 ], [ %50, %108 ]
  %115 = phi i32 [ 5, %96 ], [ %112, %108 ]
  %116 = add nsw i32 %115, %49
  %117 = add nuw nsw i64 %48, 1
  %118 = load i32, ptr %42, align 8, !tbaa !75
  %119 = zext i32 %118 to i64
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %47, label %121, !llvm.loop !300

121:                                              ; preds = %113, %41
  %122 = phi i32 [ %26, %41 ], [ %114, %113 ]
  %123 = phi i32 [ %25, %41 ], [ %116, %113 ]
  %124 = add nuw nsw i64 %23, 1
  %125 = load i32, ptr %17, align 8, !tbaa !74
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %22, label %128, !llvm.loop !301

128:                                              ; preds = %121, %14
  %129 = phi i32 [ 0, %14 ], [ %122, %121 ]
  %130 = phi i32 [ 0, %14 ], [ %123, %121 ]
  %131 = add nsw i32 %130, 1
  %132 = sext i32 %131 to i64
  %133 = tail call noalias ptr @malloc(i64 noundef %132) #50
  %134 = tail call dereferenceable_or_null(48) ptr @calloc(i64 1, i64 48)
  store i32 1, ptr %134, align 8, !tbaa !34
  %135 = getelementptr inbounds %struct.Term, ptr %134, i64 0, i32 5
  store ptr %133, ptr %135, align 8, !tbaa !40
  %136 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %137 = load i32, ptr %136, align 8, !tbaa !32
  %138 = getelementptr inbounds %struct.Term, ptr %134, i64 0, i32 1
  store i32 %137, ptr %138, align 4, !tbaa !41
  %139 = getelementptr inbounds %struct.Term, ptr %134, i64 0, i32 8
  store ptr %1, ptr %139, align 8, !tbaa !93
  %140 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %141 = load ptr, ptr %140, align 8, !tbaa !33
  %142 = icmp eq ptr %141, null
  %143 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 3
  br i1 %142, label %144, label %148

144:                                              ; preds = %128
  store ptr %143, ptr %140, align 8, !tbaa !33
  %145 = add i32 %137, 1
  store i32 %145, ptr %136, align 8, !tbaa !32
  %146 = zext i32 %137 to i64
  %147 = getelementptr inbounds ptr, ptr %143, i64 %146
  store ptr %134, ptr %147, align 8, !tbaa !14
  br label %164

148:                                              ; preds = %128
  %149 = icmp eq ptr %141, %143
  br i1 %149, label %150, label %156

150:                                              ; preds = %148
  %151 = icmp ult i32 %137, 3
  br i1 %151, label %152, label %163

152:                                              ; preds = %150
  %153 = add nuw nsw i32 %137, 1
  store i32 %153, ptr %136, align 8, !tbaa !32
  %154 = zext i32 %137 to i64
  %155 = getelementptr inbounds ptr, ptr %141, i64 %154
  store ptr %134, ptr %155, align 8, !tbaa !14
  br label %164

156:                                              ; preds = %148
  %157 = and i32 %137, 7
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %163, label %159

159:                                              ; preds = %156
  %160 = add i32 %137, 1
  store i32 %160, ptr %136, align 8, !tbaa !32
  %161 = zext i32 %137 to i64
  %162 = getelementptr inbounds ptr, ptr %141, i64 %161
  store ptr %134, ptr %162, align 8, !tbaa !14
  br label %164

163:                                              ; preds = %156, %150
  tail call void @vec_add_internal(ptr noundef nonnull %136, ptr noundef nonnull %134) #43
  br label %164

164:                                              ; preds = %163, %159, %152, %144
  store ptr %134, ptr %3, align 8, !tbaa !275
  %165 = icmp eq i32 %129, 0
  %166 = load i32, ptr %17, align 8, !tbaa !74
  br i1 %165, label %248, label %167

167:                                              ; preds = %164
  %168 = icmp eq i32 %166, 2
  br i1 %168, label %171, label %169

169:                                              ; preds = %210, %202, %185, %171, %167
  %170 = load ptr, ptr %1, align 8, !tbaa !48
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.72.233, ptr noundef %170) #43
  br label %171

171:                                              ; preds = %169, %167
  %172 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 2, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !67
  %174 = load ptr, ptr %173, align 8, !tbaa !14
  %175 = getelementptr inbounds %struct.Rule, ptr %174, i64 0, i32 6
  %176 = load i32, ptr %175, align 8, !tbaa !75
  %177 = getelementptr inbounds ptr, ptr %173, i64 1
  %178 = load ptr, ptr %177, align 8, !tbaa !14
  %179 = getelementptr inbounds %struct.Rule, ptr %178, i64 0, i32 6
  %180 = load i32, ptr %179, align 8, !tbaa !75
  %181 = add i32 %180, %176
  %182 = icmp eq i32 %181, 2
  %183 = and i32 %181, -2
  %184 = icmp eq i32 %183, 2
  br i1 %184, label %185, label %169

185:                                              ; preds = %171
  %186 = icmp eq i32 %176, 2
  %187 = icmp eq i32 %180, 2
  %188 = or i1 %186, %187
  br i1 %188, label %189, label %169

189:                                              ; preds = %185
  %190 = icmp eq ptr %174, %178
  %191 = or i1 %186, %190
  %192 = select i1 %191, ptr %174, ptr %178
  %193 = select i1 %191, ptr %178, ptr %174
  %194 = getelementptr inbounds %struct.Rule, ptr %192, i64 0, i32 6, i32 2
  %195 = load ptr, ptr %194, align 8, !tbaa !174
  %196 = load ptr, ptr %195, align 8, !tbaa !14
  %197 = getelementptr inbounds %struct.Elem, ptr %196, i64 0, i32 3
  %198 = load ptr, ptr %197, align 8, !tbaa !60
  %199 = icmp eq ptr %198, %1
  %200 = getelementptr inbounds ptr, ptr %195, i64 1
  %201 = load ptr, ptr %200, align 8, !tbaa !14
  br i1 %199, label %206, label %202

202:                                              ; preds = %189
  %203 = getelementptr inbounds %struct.Elem, ptr %201, i64 0, i32 3
  %204 = load ptr, ptr %203, align 8, !tbaa !60
  %205 = icmp eq ptr %204, %1
  br i1 %205, label %206, label %169

206:                                              ; preds = %202, %189
  %207 = getelementptr inbounds %struct.Rule, ptr %193, i64 0, i32 6
  %208 = load i32, ptr %207, align 8, !tbaa !75
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %219, label %210

210:                                              ; preds = %206
  %211 = getelementptr inbounds %struct.Elem, ptr %201, i64 0, i32 3
  %212 = load ptr, ptr %211, align 8, !tbaa !60
  %213 = getelementptr inbounds %struct.Rule, ptr %193, i64 0, i32 6, i32 2
  %214 = load ptr, ptr %213, align 8, !tbaa !174
  %215 = load ptr, ptr %214, align 8, !tbaa !14
  %216 = getelementptr inbounds %struct.Elem, ptr %215, i64 0, i32 3
  %217 = load ptr, ptr %216, align 8, !tbaa !60
  %218 = icmp eq ptr %212, %217
  br i1 %218, label %219, label %169

219:                                              ; preds = %210, %206
  %220 = load i32, ptr %201, align 8, !tbaa !146
  %221 = icmp eq i32 %220, 1
  %222 = getelementptr inbounds %struct.Elem, ptr %201, i64 0, i32 3
  br i1 %221, label %226, label %223

223:                                              ; preds = %219
  %224 = load ptr, ptr %222, align 8, !tbaa !60
  %225 = getelementptr inbounds %struct.Production, ptr %224, i64 0, i32 10
  br label %226

226:                                              ; preds = %223, %219
  %227 = phi ptr [ %225, %223 ], [ %222, %219 ]
  %228 = load ptr, ptr %227, align 8, !tbaa !60
  %229 = getelementptr inbounds i8, ptr %133, i64 1
  store i8 40, ptr %133, align 1, !tbaa !60
  %230 = load i32, ptr %228, align 8, !tbaa !34
  %231 = icmp eq i32 %230, 0
  %232 = getelementptr inbounds %struct.Term, ptr %228, i64 0, i32 5
  %233 = load ptr, ptr %232, align 8, !tbaa !40
  br i1 %231, label %234, label %236

234:                                              ; preds = %226
  %235 = tail call ptr @escape_string_for_regex(ptr noundef %233) #44
  br label %236

236:                                              ; preds = %234, %226
  %237 = phi ptr [ %235, %234 ], [ %233, %226 ]
  %238 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %237) #48
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %229, ptr align 1 %237, i64 %238, i1 false)
  %239 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %237) #48
  %240 = getelementptr inbounds i8, ptr %229, i64 %239
  %241 = load i32, ptr %228, align 8, !tbaa !34
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %244

243:                                              ; preds = %236
  tail call void @free(ptr noundef %237) #43
  br label %244

244:                                              ; preds = %243, %236
  %245 = getelementptr inbounds i8, ptr %240, i64 1
  store i8 41, ptr %240, align 1, !tbaa !60
  %246 = select i1 %182, i8 42, i8 43
  %247 = getelementptr inbounds i8, ptr %240, i64 2
  store i8 %246, ptr %245, align 1, !tbaa !60
  br label %332

248:                                              ; preds = %164
  %249 = icmp ugt i32 %166, 1
  br i1 %249, label %250, label %252

250:                                              ; preds = %248
  %251 = getelementptr inbounds i8, ptr %133, i64 1
  store i8 40, ptr %133, align 1, !tbaa !60
  br label %254

252:                                              ; preds = %248
  %253 = icmp eq i32 %166, 0
  br i1 %253, label %332, label %254

254:                                              ; preds = %252, %250
  %255 = phi ptr [ %251, %250 ], [ %133, %252 ]
  %256 = getelementptr inbounds %struct.Production, ptr %1, i64 0, i32 2, i32 2
  br label %257

257:                                              ; preds = %322, %254
  %258 = phi i64 [ 0, %254 ], [ %325, %322 ]
  %259 = phi ptr [ %255, %254 ], [ %324, %322 ]
  %260 = load ptr, ptr %256, align 8, !tbaa !67
  %261 = getelementptr inbounds ptr, ptr %260, i64 %258
  %262 = load ptr, ptr %261, align 8, !tbaa !14
  %263 = getelementptr inbounds %struct.Rule, ptr %262, i64 0, i32 6
  %264 = load i32, ptr %263, align 8, !tbaa !75
  %265 = icmp ugt i32 %264, 1
  br i1 %265, label %266, label %269

266:                                              ; preds = %257
  %267 = getelementptr inbounds i8, ptr %259, i64 1
  store i8 40, ptr %259, align 1, !tbaa !60
  %268 = load i32, ptr %263, align 8, !tbaa !75
  br label %269

269:                                              ; preds = %266, %257
  %270 = phi i32 [ %268, %266 ], [ %264, %257 ]
  %271 = phi ptr [ %267, %266 ], [ %259, %257 ]
  %272 = icmp eq i32 %270, 0
  br i1 %272, label %313, label %273

273:                                              ; preds = %269
  %274 = getelementptr inbounds %struct.Rule, ptr %262, i64 0, i32 6, i32 2
  br label %275

275:                                              ; preds = %304, %273
  %276 = phi i64 [ 0, %273 ], [ %305, %304 ]
  %277 = phi ptr [ %271, %273 ], [ %300, %304 ]
  %278 = load ptr, ptr %274, align 8, !tbaa !174
  %279 = getelementptr inbounds ptr, ptr %278, i64 %276
  %280 = load ptr, ptr %279, align 8, !tbaa !14
  %281 = load i32, ptr %280, align 8, !tbaa !146
  %282 = icmp eq i32 %281, 1
  %283 = getelementptr inbounds %struct.Elem, ptr %280, i64 0, i32 3
  br i1 %282, label %287, label %284

284:                                              ; preds = %275
  %285 = load ptr, ptr %283, align 8, !tbaa !60
  %286 = getelementptr inbounds %struct.Production, ptr %285, i64 0, i32 10
  br label %287

287:                                              ; preds = %284, %275
  %288 = phi ptr [ %286, %284 ], [ %283, %275 ]
  %289 = load ptr, ptr %288, align 8, !tbaa !60
  %290 = load i32, ptr %289, align 8, !tbaa !34
  %291 = icmp eq i32 %290, 0
  %292 = getelementptr inbounds %struct.Term, ptr %289, i64 0, i32 5
  %293 = load ptr, ptr %292, align 8, !tbaa !40
  br i1 %291, label %294, label %296

294:                                              ; preds = %287
  %295 = tail call ptr @escape_string_for_regex(ptr noundef %293) #44
  br label %296

296:                                              ; preds = %294, %287
  %297 = phi ptr [ %295, %294 ], [ %293, %287 ]
  %298 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %297) #48
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %277, ptr align 1 %297, i64 %298, i1 false)
  %299 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %297) #48
  %300 = getelementptr inbounds i8, ptr %277, i64 %299
  %301 = load i32, ptr %289, align 8, !tbaa !34
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %304

303:                                              ; preds = %296
  tail call void @free(ptr noundef %297) #43
  br label %304

304:                                              ; preds = %303, %296
  %305 = add nuw nsw i64 %276, 1
  %306 = load i32, ptr %263, align 8, !tbaa !75
  %307 = zext i32 %306 to i64
  %308 = icmp ult i64 %305, %307
  br i1 %308, label %275, label %309, !llvm.loop !302

309:                                              ; preds = %304
  %.lcssa1 = phi i32 [ %306, %304 ]
  %.lcssa = phi ptr [ %300, %304 ]
  %310 = icmp ugt i32 %.lcssa1, 1
  br i1 %310, label %311, label %313

311:                                              ; preds = %309
  %312 = getelementptr inbounds i8, ptr %.lcssa, i64 1
  store i8 41, ptr %.lcssa, align 1, !tbaa !60
  br label %313

313:                                              ; preds = %311, %309, %269
  %314 = phi ptr [ %312, %311 ], [ %.lcssa, %309 ], [ %271, %269 ]
  %315 = load i32, ptr %17, align 8, !tbaa !74
  %316 = add i32 %315, -1
  %317 = zext i32 %316 to i64
  %318 = icmp eq i64 %258, %317
  br i1 %318, label %322, label %319

319:                                              ; preds = %313
  %320 = getelementptr inbounds i8, ptr %314, i64 1
  store i8 124, ptr %314, align 1, !tbaa !60
  %321 = load i32, ptr %17, align 8, !tbaa !74
  br label %322

322:                                              ; preds = %319, %313
  %323 = phi i32 [ %321, %319 ], [ %315, %313 ]
  %324 = phi ptr [ %320, %319 ], [ %314, %313 ]
  %325 = add nuw nsw i64 %258, 1
  %326 = zext i32 %323 to i64
  %327 = icmp ult i64 %325, %326
  br i1 %327, label %257, label %328, !llvm.loop !303

328:                                              ; preds = %322
  %.lcssa3 = phi i32 [ %323, %322 ]
  %.lcssa2 = phi ptr [ %324, %322 ]
  %329 = icmp ugt i32 %.lcssa3, 1
  br i1 %329, label %330, label %332

330:                                              ; preds = %328
  %331 = getelementptr inbounds i8, ptr %.lcssa2, i64 1
  store i8 41, ptr %.lcssa2, align 1, !tbaa !60
  br label %332

332:                                              ; preds = %330, %328, %252, %244
  %333 = phi ptr [ %247, %244 ], [ %331, %330 ], [ %.lcssa2, %328 ], [ %133, %252 ]
  store i8 0, ptr %333, align 1, !tbaa !60
  %334 = load ptr, ptr %3, align 8, !tbaa !275
  %335 = getelementptr inbounds %struct.Term, ptr %334, i64 0, i32 5
  %336 = load ptr, ptr %335, align 8, !tbaa !40
  %337 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %336) #48
  %338 = trunc i64 %337 to i32
  %339 = getelementptr inbounds %struct.Term, ptr %334, i64 0, i32 6
  store i32 %338, ptr %339, align 8, !tbaa !43
  %340 = load i8, ptr %7, align 4
  %341 = and i8 %340, -3
  store i8 %341, ptr %7, align 4
  br label %342

342:                                              ; preds = %332, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @set_declaration_group(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.Declaration, ptr %2, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !214
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.Production, ptr %0, i64 0, i32 6, i64 %6
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = icmp eq ptr %8, %1
  br i1 %9, label %65, label %10

10:                                               ; preds = %3
  %11 = icmp ne i32 %5, 0
  %12 = icmp eq ptr %8, null
  %13 = or i1 %11, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.74.227) #43
  br label %65

15:                                               ; preds = %10
  store ptr %1, ptr %7, align 8, !tbaa !14
  %16 = getelementptr inbounds %struct.Production, ptr %0, i64 0, i32 7, i64 %6
  store ptr %2, ptr %16, align 8, !tbaa !14
  %17 = getelementptr inbounds %struct.Production, ptr %0, i64 0, i32 2
  %18 = load i32, ptr %17, align 8, !tbaa !74
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %65, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.Production, ptr %0, i64 0, i32 2, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !67
  br label %23

23:                                               ; preds = %58, %20
  %24 = phi i32 [ %18, %20 ], [ %59, %58 ]
  %25 = phi ptr [ %22, %20 ], [ %60, %58 ]
  %26 = phi ptr [ %22, %20 ], [ %61, %58 ]
  %27 = phi i64 [ 0, %20 ], [ %62, %58 ]
  %28 = getelementptr inbounds ptr, ptr %26, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.Rule, ptr %29, i64 0, i32 6
  %31 = load i32, ptr %30, align 8, !tbaa !75
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %58, label %33

33:                                               ; preds = %47, %23
  %34 = phi ptr [ %48, %47 ], [ %25, %23 ]
  %35 = phi i64 [ %49, %47 ], [ 0, %23 ]
  %36 = phi ptr [ %51, %47 ], [ %29, %23 ]
  %37 = getelementptr inbounds %struct.Rule, ptr %36, i64 0, i32 6, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !174
  %39 = getelementptr inbounds ptr, ptr %38, i64 %35
  %40 = load ptr, ptr %39, align 8, !tbaa !14
  %41 = load i32, ptr %40, align 8, !tbaa !146
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %33
  %44 = getelementptr inbounds %struct.Elem, ptr %40, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !60
  tail call fastcc void @set_declaration_group(ptr noundef %45, ptr noundef %1, ptr noundef %2) #44
  %46 = load ptr, ptr %21, align 8, !tbaa !67
  br label %47

47:                                               ; preds = %43, %33
  %48 = phi ptr [ %34, %33 ], [ %46, %43 ]
  %49 = add nuw nsw i64 %35, 1
  %50 = getelementptr inbounds ptr, ptr %48, i64 %27
  %51 = load ptr, ptr %50, align 8, !tbaa !14
  %52 = getelementptr inbounds %struct.Rule, ptr %51, i64 0, i32 6
  %53 = load i32, ptr %52, align 8, !tbaa !75
  %54 = zext i32 %53 to i64
  %55 = icmp ult i64 %49, %54
  br i1 %55, label %33, label %56, !llvm.loop !304

56:                                               ; preds = %47
  %.lcssa = phi ptr [ %48, %47 ]
  %57 = load i32, ptr %17, align 8, !tbaa !74
  br label %58

58:                                               ; preds = %56, %23
  %59 = phi i32 [ %57, %56 ], [ %24, %23 ]
  %60 = phi ptr [ %.lcssa, %56 ], [ %25, %23 ]
  %61 = phi ptr [ %.lcssa, %56 ], [ %26, %23 ]
  %62 = add nuw nsw i64 %27, 1
  %63 = zext i32 %59 to i64
  %64 = icmp ult i64 %62, %63
  br i1 %64, label %23, label %65, !llvm.loop !305

65:                                               ; preds = %58, %15, %14, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @build_scanners(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca %struct.anon, align 8
  %3 = alloca ptr, align 8
  %4 = tail call dereferenceable_or_null(64) ptr @calloc(i64 1, i64 64)
  %5 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !98
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %1289, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !99
  %11 = zext i32 %6 to i64
  br label %23

12:                                               ; preds = %72
  br i1 %7, label %1289, label %13

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %15 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 4
  %16 = getelementptr inbounds %struct.anon, ptr %2, i64 0, i32 2
  %17 = getelementptr inbounds %struct.anon, ptr %2, i64 0, i32 3
  %18 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 2
  %19 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 1
  %20 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 1, i32 2
  %21 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 1, i32 3
  %22 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 3
  br label %75

23:                                               ; preds = %72, %8
  %24 = phi i64 [ 0, %8 ], [ %73, %72 ]
  %25 = getelementptr inbounds ptr, ptr %10, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !14
  %27 = getelementptr inbounds %struct.State, ptr %26, i64 0, i32 13
  %28 = load ptr, ptr %27, align 8, !tbaa !104
  %29 = icmp eq ptr %28, null
  %30 = icmp ne i64 %24, 0
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %72

32:                                               ; preds = %23
  %33 = getelementptr inbounds %struct.State, ptr %26, i64 0, i32 5
  %34 = getelementptr inbounds %struct.State, ptr %26, i64 0, i32 5, i32 2
  br label %35

35:                                               ; preds = %69, %32
  %36 = phi i64 [ 0, %32 ], [ %70, %69 ]
  %37 = getelementptr inbounds ptr, ptr %10, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !14
  %39 = getelementptr inbounds %struct.State, ptr %38, i64 0, i32 13
  %40 = load ptr, ptr %39, align 8, !tbaa !104
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %69

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.State, ptr %38, i64 0, i32 5
  %44 = load i32, ptr %43, align 8, !tbaa !103
  %45 = load i32, ptr %33, align 8, !tbaa !103
  %46 = icmp eq i32 %44, %45
  br i1 %46, label %47, label %69

47:                                               ; preds = %42
  %48 = icmp eq i32 %44, 0
  br i1 %48, label %68, label %49

49:                                               ; preds = %47
  %50 = load ptr, ptr %34, align 8, !tbaa !105
  %51 = getelementptr inbounds %struct.State, ptr %38, i64 0, i32 5, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !105
  %53 = zext i32 %44 to i64
  br label %57

54:                                               ; preds = %57
  %55 = add nuw nsw i64 %58, 1
  %56 = icmp eq i64 %55, %53
  br i1 %56, label %68, label %57, !llvm.loop !306

57:                                               ; preds = %54, %49
  %58 = phi i64 [ 0, %49 ], [ %55, %54 ]
  %59 = getelementptr inbounds ptr, ptr %50, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !14
  %61 = getelementptr inbounds %struct.Action, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %61, align 8, !tbaa !106
  %63 = getelementptr inbounds ptr, ptr %52, i64 %58
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = getelementptr inbounds %struct.Action, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !106
  %67 = icmp eq ptr %62, %66
  br i1 %67, label %54, label %69

68:                                               ; preds = %54, %47
  %.lcssa28 = phi ptr [ %38, %54 ], [ %38, %47 ]
  store ptr %.lcssa28, ptr %27, align 8, !tbaa !104
  br label %72

69:                                               ; preds = %57, %42, %35
  %70 = add nuw nsw i64 %36, 1
  %71 = icmp eq i64 %70, %24
  br i1 %71, label %72, label %35, !llvm.loop !307

72:                                               ; preds = %69, %68, %23
  %73 = add nuw nsw i64 %24, 1
  %74 = icmp eq i64 %73, %11
  br i1 %74, label %12, label %23, !llvm.loop !308

75:                                               ; preds = %1283, %13
  %76 = phi i32 [ 0, %13 ], [ %1284, %1283 ]
  %77 = phi i64 [ 0, %13 ], [ %1285, %1283 ]
  %78 = load ptr, ptr %14, align 8, !tbaa !99
  %79 = getelementptr inbounds ptr, ptr %78, i64 %77
  %80 = load ptr, ptr %79, align 8, !tbaa !14
  %81 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 5
  %82 = load i32, ptr %81, align 8, !tbaa !103
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %1283, label %84

84:                                               ; preds = %75
  %85 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 13
  %86 = load ptr, ptr %85, align 8, !tbaa !104
  %87 = icmp eq ptr %86, null
  br i1 %87, label %91, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9
  %90 = getelementptr inbounds %struct.State, ptr %86, i64 0, i32 9
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %89, ptr noundef nonnull align 8 dereferenceable(80) %90, i64 80, i1 false), !tbaa.struct !309
  br label %1283

91:                                               ; preds = %84
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #45
  %92 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %93 = load i32, ptr %81, align 8, !tbaa !103
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %1231, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 5, i32 2
  %97 = getelementptr inbounds %struct.NFAState, ptr %92, i64 0, i32 1
  %98 = getelementptr inbounds %struct.NFAState, ptr %92, i64 0, i32 1, i64 0, i32 2
  %99 = getelementptr inbounds %struct.NFAState, ptr %92, i64 0, i32 1, i64 0, i32 3
  br label %106

100:                                              ; preds = %441
  %.lcssa1 = phi i32 [ %442, %441 ]
  %.lcssa = phi i32 [ %444, %441 ]
  %101 = icmp eq i32 %.lcssa, 0
  br i1 %101, label %537, label %102

102:                                              ; preds = %100
  %103 = getelementptr inbounds %struct.NFAState, ptr %92, i64 0, i32 2
  %104 = getelementptr inbounds %struct.NFAState, ptr %92, i64 0, i32 2, i32 2
  %105 = getelementptr inbounds %struct.NFAState, ptr %92, i64 0, i32 2, i32 3
  br label %447

106:                                              ; preds = %441, %95
  %107 = phi i64 [ 0, %95 ], [ %443, %441 ]
  %108 = phi i32 [ 0, %95 ], [ %442, %441 ]
  %109 = load ptr, ptr %96, align 8, !tbaa !105
  %110 = getelementptr inbounds ptr, ptr %109, i64 %107
  %111 = load ptr, ptr %110, align 8, !tbaa !14
  %112 = load i32, ptr %111, align 8, !tbaa !139
  switch i32 %112, label %441 [
    i32 0, label %113
    i32 1, label %166
  ]

113:                                              ; preds = %106
  %114 = load i32, ptr %97, align 8, !tbaa !30
  %115 = icmp eq i32 %114, 0
  %116 = load ptr, ptr %98, align 8, !tbaa !31
  br i1 %115, label %117, label %135

117:                                              ; preds = %113
  %118 = icmp eq ptr %116, null
  br i1 %118, label %119, label %125

119:                                              ; preds = %117
  %120 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  store ptr %99, ptr %98, align 8, !tbaa !31
  %121 = load i32, ptr %97, align 8, !tbaa !30
  %122 = add i32 %121, 1
  store i32 %122, ptr %97, align 8, !tbaa !30
  %123 = zext i32 %121 to i64
  %124 = getelementptr inbounds ptr, ptr %99, i64 %123
  store ptr %120, ptr %124, align 8, !tbaa !14
  br label %137

125:                                              ; preds = %117
  %126 = icmp eq ptr %116, %99
  %127 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  br i1 %126, label %128, label %134

128:                                              ; preds = %125
  %129 = load ptr, ptr %98, align 8, !tbaa !31
  %130 = load i32, ptr %97, align 8, !tbaa !30
  %131 = add i32 %130, 1
  store i32 %131, ptr %97, align 8, !tbaa !30
  %132 = zext i32 %130 to i64
  %133 = getelementptr inbounds ptr, ptr %129, i64 %132
  store ptr %127, ptr %133, align 8, !tbaa !14
  br label %137

134:                                              ; preds = %125
  call void @vec_add_internal(ptr noundef nonnull %97, ptr noundef %127) #43
  br label %137

135:                                              ; preds = %113
  %136 = load ptr, ptr %116, align 8, !tbaa !14
  br label %137

137:                                              ; preds = %135, %134, %128, %119
  %138 = phi ptr [ %136, %135 ], [ %127, %128 ], [ %127, %134 ], [ %120, %119 ]
  %139 = getelementptr inbounds %struct.NFAState, ptr %138, i64 0, i32 3
  %140 = getelementptr inbounds %struct.NFAState, ptr %138, i64 0, i32 3, i32 2
  %141 = load ptr, ptr %140, align 8, !tbaa !310
  %142 = icmp eq ptr %141, null
  %143 = getelementptr inbounds %struct.NFAState, ptr %138, i64 0, i32 3, i32 3
  br i1 %142, label %144, label %149

144:                                              ; preds = %137
  store ptr %143, ptr %140, align 8, !tbaa !310
  %145 = load i32, ptr %139, align 8, !tbaa !312
  %146 = add i32 %145, 1
  store i32 %146, ptr %139, align 8, !tbaa !312
  %147 = zext i32 %145 to i64
  %148 = getelementptr inbounds ptr, ptr %143, i64 %147
  store ptr %111, ptr %148, align 8, !tbaa !14
  br label %441

149:                                              ; preds = %137
  %150 = icmp eq ptr %141, %143
  %151 = load i32, ptr %139, align 8, !tbaa !312
  br i1 %150, label %152, label %158

152:                                              ; preds = %149
  %153 = icmp ult i32 %151, 3
  br i1 %153, label %154, label %165

154:                                              ; preds = %152
  %155 = add nuw nsw i32 %151, 1
  store i32 %155, ptr %139, align 8, !tbaa !312
  %156 = zext i32 %151 to i64
  %157 = getelementptr inbounds ptr, ptr %141, i64 %156
  store ptr %111, ptr %157, align 8, !tbaa !14
  br label %441

158:                                              ; preds = %149
  %159 = and i32 %151, 7
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %165, label %161

161:                                              ; preds = %158
  %162 = add i32 %151, 1
  store i32 %162, ptr %139, align 8, !tbaa !312
  %163 = zext i32 %151 to i64
  %164 = getelementptr inbounds ptr, ptr %141, i64 %163
  store ptr %111, ptr %164, align 8, !tbaa !14
  br label %441

165:                                              ; preds = %158, %152
  call void @vec_add_internal(ptr noundef nonnull %139, ptr noundef nonnull %111) #43
  br label %441

166:                                              ; preds = %106
  %167 = getelementptr inbounds %struct.Action, ptr %111, i64 0, i32 1
  %168 = load ptr, ptr %167, align 8, !tbaa !106
  %169 = load i32, ptr %168, align 8, !tbaa !34
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %441

171:                                              ; preds = %166
  %172 = getelementptr inbounds %struct.Term, ptr %168, i64 0, i32 7
  %173 = load i8, ptr %172, align 4
  %174 = and i8 %173, 8
  %175 = icmp eq i8 %174, 0
  %176 = getelementptr inbounds %struct.Term, ptr %168, i64 0, i32 5
  %177 = load ptr, ptr %176, align 8, !tbaa !40
  %178 = load i8, ptr %177, align 1, !tbaa !60
  %179 = icmp eq i8 %178, 0
  br i1 %175, label %180, label %228

180:                                              ; preds = %171
  br i1 %179, label %412, label %181

181:                                              ; preds = %223, %180
  %182 = phi i8 [ %226, %223 ], [ %178, %180 ]
  %183 = phi ptr [ %224, %223 ], [ %92, %180 ]
  %184 = phi ptr [ %225, %223 ], [ %177, %180 ]
  %185 = zext i8 %182 to i64
  %186 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %185
  %187 = load i32, ptr %186, align 8, !tbaa !30
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %185, i32 2
  %190 = load ptr, ptr %189, align 8, !tbaa !31
  br i1 %188, label %191, label %221

191:                                              ; preds = %181
  %192 = icmp eq ptr %190, null
  br i1 %192, label %193, label %206

193:                                              ; preds = %191
  %194 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %195 = load i8, ptr %184, align 1, !tbaa !60
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %196, i32 3
  %198 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %196, i32 2
  store ptr %197, ptr %198, align 8, !tbaa !31
  %199 = load i8, ptr %184, align 1, !tbaa !60
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %200
  %202 = load i32, ptr %201, align 8, !tbaa !30
  %203 = add i32 %202, 1
  store i32 %203, ptr %201, align 8, !tbaa !30
  %204 = zext i32 %202 to i64
  %205 = getelementptr inbounds ptr, ptr %197, i64 %204
  store ptr %194, ptr %205, align 8, !tbaa !14
  br label %223

206:                                              ; preds = %191
  %207 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %185, i32 3
  %208 = icmp eq ptr %190, %207
  %209 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  br i1 %208, label %210, label %220

210:                                              ; preds = %206
  %211 = load i8, ptr %184, align 1, !tbaa !60
  %212 = zext i8 %211 to i64
  %213 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %212
  %214 = getelementptr inbounds %struct.NFAState, ptr %183, i64 0, i32 1, i64 %212, i32 2
  %215 = load ptr, ptr %214, align 8, !tbaa !31
  %216 = load i32, ptr %213, align 8, !tbaa !30
  %217 = add i32 %216, 1
  store i32 %217, ptr %213, align 8, !tbaa !30
  %218 = zext i32 %216 to i64
  %219 = getelementptr inbounds ptr, ptr %215, i64 %218
  store ptr %209, ptr %219, align 8, !tbaa !14
  br label %223

220:                                              ; preds = %206
  call void @vec_add_internal(ptr noundef nonnull %186, ptr noundef %209) #43
  br label %223

221:                                              ; preds = %181
  %222 = load ptr, ptr %190, align 8, !tbaa !14
  br label %223

223:                                              ; preds = %221, %220, %210, %193
  %224 = phi ptr [ %222, %221 ], [ %209, %210 ], [ %209, %220 ], [ %194, %193 ]
  %225 = getelementptr inbounds i8, ptr %184, i64 1
  %226 = load i8, ptr %225, align 1, !tbaa !60
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %412, label %181, !llvm.loop !313

228:                                              ; preds = %171
  br i1 %179, label %412, label %229

229:                                              ; preds = %228
  %230 = tail call ptr @__ctype_b_loc() #49
  br label %231

231:                                              ; preds = %407, %229
  %232 = phi i8 [ %178, %229 ], [ %410, %407 ]
  %233 = phi ptr [ %92, %229 ], [ %408, %407 ]
  %234 = phi ptr [ %177, %229 ], [ %409, %407 ]
  %235 = load ptr, ptr %230, align 8, !tbaa !14
  %236 = zext i8 %232 to i64
  %237 = getelementptr inbounds i16, ptr %235, i64 %236
  %238 = load i16, ptr %237, align 2, !tbaa !61
  %239 = and i16 %238, 1024
  %240 = icmp eq i16 %239, 0
  br i1 %240, label %356, label %241

241:                                              ; preds = %231
  %242 = tail call ptr @__ctype_toupper_loc() #49
  %243 = load ptr, ptr %242, align 8, !tbaa !14
  %244 = getelementptr inbounds i32, ptr %243, i64 %236
  %245 = load i32, ptr %244, align 4, !tbaa !15
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %246
  %248 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %246, i32 2
  %249 = load ptr, ptr %248, align 8, !tbaa !31
  %250 = icmp eq ptr %249, null
  br i1 %250, label %251, label %272

251:                                              ; preds = %241
  %252 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %253 = load ptr, ptr %242, align 8, !tbaa !14
  %254 = load i8, ptr %234, align 1, !tbaa !60
  %255 = zext i8 %254 to i64
  %256 = getelementptr inbounds i32, ptr %253, i64 %255
  %257 = load i32, ptr %256, align 4, !tbaa !15
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %258, i32 3
  %260 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %258, i32 2
  store ptr %259, ptr %260, align 8, !tbaa !31
  %261 = load ptr, ptr %242, align 8, !tbaa !14
  %262 = load i8, ptr %234, align 1, !tbaa !60
  %263 = zext i8 %262 to i64
  %264 = getelementptr inbounds i32, ptr %261, i64 %263
  %265 = load i32, ptr %264, align 4, !tbaa !15
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %266
  %268 = load i32, ptr %267, align 8, !tbaa !30
  %269 = add i32 %268, 1
  store i32 %269, ptr %267, align 8, !tbaa !30
  %270 = zext i32 %268 to i64
  %271 = getelementptr inbounds ptr, ptr %259, i64 %270
  store ptr %252, ptr %271, align 8, !tbaa !14
  br label %313

272:                                              ; preds = %241
  %273 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %246, i32 3
  %274 = icmp eq ptr %249, %273
  %275 = load i32, ptr %247, align 8, !tbaa !30
  br i1 %274, label %276, label %293

276:                                              ; preds = %272
  %277 = icmp ult i32 %275, 3
  br i1 %277, label %278, label %311

278:                                              ; preds = %276
  %279 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %280 = load ptr, ptr %242, align 8, !tbaa !14
  %281 = load i8, ptr %234, align 1, !tbaa !60
  %282 = zext i8 %281 to i64
  %283 = getelementptr inbounds i32, ptr %280, i64 %282
  %284 = load i32, ptr %283, align 4, !tbaa !15
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %285
  %287 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %285, i32 2
  %288 = load ptr, ptr %287, align 8, !tbaa !31
  %289 = load i32, ptr %286, align 8, !tbaa !30
  %290 = add i32 %289, 1
  store i32 %290, ptr %286, align 8, !tbaa !30
  %291 = zext i32 %289 to i64
  %292 = getelementptr inbounds ptr, ptr %288, i64 %291
  store ptr %279, ptr %292, align 8, !tbaa !14
  br label %313

293:                                              ; preds = %272
  %294 = and i32 %275, 7
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %311, label %296

296:                                              ; preds = %293
  %297 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %298 = load ptr, ptr %242, align 8, !tbaa !14
  %299 = load i8, ptr %234, align 1, !tbaa !60
  %300 = zext i8 %299 to i64
  %301 = getelementptr inbounds i32, ptr %298, i64 %300
  %302 = load i32, ptr %301, align 4, !tbaa !15
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %303
  %305 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %303, i32 2
  %306 = load ptr, ptr %305, align 8, !tbaa !31
  %307 = load i32, ptr %304, align 8, !tbaa !30
  %308 = add i32 %307, 1
  store i32 %308, ptr %304, align 8, !tbaa !30
  %309 = zext i32 %307 to i64
  %310 = getelementptr inbounds ptr, ptr %306, i64 %309
  store ptr %297, ptr %310, align 8, !tbaa !14
  br label %313

311:                                              ; preds = %293, %276
  %312 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  call void @vec_add_internal(ptr noundef nonnull %247, ptr noundef %312) #43
  br label %313

313:                                              ; preds = %311, %296, %278, %251
  %314 = phi ptr [ %279, %278 ], [ %312, %311 ], [ %297, %296 ], [ %252, %251 ]
  %315 = tail call ptr @__ctype_tolower_loc() #49
  %316 = load ptr, ptr %315, align 8, !tbaa !14
  %317 = load i8, ptr %234, align 1, !tbaa !60
  %318 = zext i8 %317 to i64
  %319 = getelementptr inbounds i32, ptr %316, i64 %318
  %320 = load i32, ptr %319, align 4, !tbaa !15
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %321
  %323 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %321, i32 2
  %324 = load ptr, ptr %323, align 8, !tbaa !31
  %325 = icmp eq ptr %324, null
  %326 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %321, i32 3
  br i1 %325, label %327, label %339

327:                                              ; preds = %313
  store ptr %326, ptr %323, align 8, !tbaa !31
  %328 = load ptr, ptr %315, align 8, !tbaa !14
  %329 = load i8, ptr %234, align 1, !tbaa !60
  %330 = zext i8 %329 to i64
  %331 = getelementptr inbounds i32, ptr %328, i64 %330
  %332 = load i32, ptr %331, align 4, !tbaa !15
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %333
  %335 = load i32, ptr %334, align 8, !tbaa !30
  %336 = add i32 %335, 1
  store i32 %336, ptr %334, align 8, !tbaa !30
  %337 = zext i32 %335 to i64
  %338 = getelementptr inbounds ptr, ptr %326, i64 %337
  store ptr %314, ptr %338, align 8, !tbaa !14
  br label %407

339:                                              ; preds = %313
  %340 = icmp eq ptr %324, %326
  %341 = load i32, ptr %322, align 8, !tbaa !30
  br i1 %340, label %342, label %348

342:                                              ; preds = %339
  %343 = icmp ult i32 %341, 3
  br i1 %343, label %344, label %355

344:                                              ; preds = %342
  %345 = add nuw nsw i32 %341, 1
  store i32 %345, ptr %322, align 8, !tbaa !30
  %346 = zext i32 %341 to i64
  %347 = getelementptr inbounds ptr, ptr %324, i64 %346
  store ptr %314, ptr %347, align 8, !tbaa !14
  br label %407

348:                                              ; preds = %339
  %349 = and i32 %341, 7
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %355, label %351

351:                                              ; preds = %348
  %352 = add i32 %341, 1
  store i32 %352, ptr %322, align 8, !tbaa !30
  %353 = zext i32 %341 to i64
  %354 = getelementptr inbounds ptr, ptr %324, i64 %353
  store ptr %314, ptr %354, align 8, !tbaa !14
  br label %407

355:                                              ; preds = %348, %342
  call void @vec_add_internal(ptr noundef nonnull %322, ptr noundef %314) #43
  br label %407

356:                                              ; preds = %231
  %357 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %236
  %358 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %236, i32 2
  %359 = load ptr, ptr %358, align 8, !tbaa !31
  %360 = icmp eq ptr %359, null
  br i1 %360, label %361, label %374

361:                                              ; preds = %356
  %362 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %363 = load i8, ptr %234, align 1, !tbaa !60
  %364 = zext i8 %363 to i64
  %365 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %364, i32 3
  %366 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %364, i32 2
  store ptr %365, ptr %366, align 8, !tbaa !31
  %367 = load i8, ptr %234, align 1, !tbaa !60
  %368 = zext i8 %367 to i64
  %369 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %368
  %370 = load i32, ptr %369, align 8, !tbaa !30
  %371 = add i32 %370, 1
  store i32 %371, ptr %369, align 8, !tbaa !30
  %372 = zext i32 %370 to i64
  %373 = getelementptr inbounds ptr, ptr %365, i64 %372
  store ptr %362, ptr %373, align 8, !tbaa !14
  br label %407

374:                                              ; preds = %356
  %375 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %236, i32 3
  %376 = icmp eq ptr %359, %375
  %377 = load i32, ptr %357, align 8, !tbaa !30
  br i1 %376, label %378, label %391

378:                                              ; preds = %374
  %379 = icmp ult i32 %377, 3
  br i1 %379, label %380, label %405

380:                                              ; preds = %378
  %381 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %382 = load i8, ptr %234, align 1, !tbaa !60
  %383 = zext i8 %382 to i64
  %384 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %383
  %385 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %383, i32 2
  %386 = load ptr, ptr %385, align 8, !tbaa !31
  %387 = load i32, ptr %384, align 8, !tbaa !30
  %388 = add i32 %387, 1
  store i32 %388, ptr %384, align 8, !tbaa !30
  %389 = zext i32 %387 to i64
  %390 = getelementptr inbounds ptr, ptr %386, i64 %389
  store ptr %381, ptr %390, align 8, !tbaa !14
  br label %407

391:                                              ; preds = %374
  %392 = and i32 %377, 7
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %405, label %394

394:                                              ; preds = %391
  %395 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %396 = load i8, ptr %234, align 1, !tbaa !60
  %397 = zext i8 %396 to i64
  %398 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %397
  %399 = getelementptr inbounds %struct.NFAState, ptr %233, i64 0, i32 1, i64 %397, i32 2
  %400 = load ptr, ptr %399, align 8, !tbaa !31
  %401 = load i32, ptr %398, align 8, !tbaa !30
  %402 = add i32 %401, 1
  store i32 %402, ptr %398, align 8, !tbaa !30
  %403 = zext i32 %401 to i64
  %404 = getelementptr inbounds ptr, ptr %400, i64 %403
  store ptr %395, ptr %404, align 8, !tbaa !14
  br label %407

405:                                              ; preds = %391, %378
  %406 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  call void @vec_add_internal(ptr noundef nonnull %357, ptr noundef %406) #43
  br label %407

407:                                              ; preds = %405, %394, %380, %361, %355, %351, %344, %327
  %408 = phi ptr [ %314, %344 ], [ %314, %355 ], [ %314, %351 ], [ %314, %327 ], [ %381, %380 ], [ %406, %405 ], [ %395, %394 ], [ %362, %361 ]
  %409 = getelementptr inbounds i8, ptr %234, i64 1
  %410 = load i8, ptr %409, align 1, !tbaa !60
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %412, label %231, !llvm.loop !314

412:                                              ; preds = %407, %228, %223, %180
  %413 = phi ptr [ %92, %180 ], [ %92, %228 ], [ %224, %223 ], [ %408, %407 ]
  %414 = getelementptr inbounds %struct.NFAState, ptr %413, i64 0, i32 3
  %415 = getelementptr inbounds %struct.NFAState, ptr %413, i64 0, i32 3, i32 2
  %416 = load ptr, ptr %415, align 8, !tbaa !310
  %417 = icmp eq ptr %416, null
  %418 = getelementptr inbounds %struct.NFAState, ptr %413, i64 0, i32 3, i32 3
  br i1 %417, label %419, label %424

419:                                              ; preds = %412
  store ptr %418, ptr %415, align 8, !tbaa !310
  %420 = load i32, ptr %414, align 8, !tbaa !312
  %421 = add i32 %420, 1
  store i32 %421, ptr %414, align 8, !tbaa !312
  %422 = zext i32 %420 to i64
  %423 = getelementptr inbounds ptr, ptr %418, i64 %422
  store ptr %111, ptr %423, align 8, !tbaa !14
  br label %441

424:                                              ; preds = %412
  %425 = icmp eq ptr %416, %418
  %426 = load i32, ptr %414, align 8, !tbaa !312
  br i1 %425, label %427, label %433

427:                                              ; preds = %424
  %428 = icmp ult i32 %426, 3
  br i1 %428, label %429, label %440

429:                                              ; preds = %427
  %430 = add nuw nsw i32 %426, 1
  store i32 %430, ptr %414, align 8, !tbaa !312
  %431 = zext i32 %426 to i64
  %432 = getelementptr inbounds ptr, ptr %416, i64 %431
  store ptr %111, ptr %432, align 8, !tbaa !14
  br label %441

433:                                              ; preds = %424
  %434 = and i32 %426, 7
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %440, label %436

436:                                              ; preds = %433
  %437 = add i32 %426, 1
  store i32 %437, ptr %414, align 8, !tbaa !312
  %438 = zext i32 %426 to i64
  %439 = getelementptr inbounds ptr, ptr %416, i64 %438
  store ptr %111, ptr %439, align 8, !tbaa !14
  br label %441

440:                                              ; preds = %433, %427
  call void @vec_add_internal(ptr noundef nonnull %414, ptr noundef nonnull %111) #43
  br label %441

441:                                              ; preds = %440, %436, %429, %419, %166, %165, %161, %154, %144, %106
  %442 = phi i32 [ 1, %154 ], [ 1, %165 ], [ 1, %161 ], [ 1, %144 ], [ 1, %429 ], [ 1, %440 ], [ 1, %436 ], [ 1, %419 ], [ %108, %166 ], [ %108, %106 ]
  %443 = add nuw nsw i64 %107, 1
  %444 = load i32, ptr %81, align 8, !tbaa !103
  %445 = zext i32 %444 to i64
  %446 = icmp ult i64 %443, %445
  br i1 %446, label %106, label %100, !llvm.loop !315

447:                                              ; preds = %531, %102
  %448 = phi i64 [ 0, %102 ], [ %533, %531 ]
  %449 = phi i32 [ %.lcssa1, %102 ], [ %532, %531 ]
  %450 = load ptr, ptr %96, align 8, !tbaa !105
  %451 = getelementptr inbounds ptr, ptr %450, i64 %448
  %452 = load ptr, ptr %451, align 8, !tbaa !14
  %453 = load i32, ptr %452, align 8, !tbaa !139
  %454 = icmp eq i32 %453, 1
  br i1 %454, label %455, label %531

455:                                              ; preds = %447
  %456 = getelementptr inbounds %struct.Action, ptr %452, i64 0, i32 1
  %457 = load ptr, ptr %456, align 8, !tbaa !106
  %458 = load i32, ptr %457, align 8, !tbaa !34
  %459 = icmp eq i32 %458, 1
  br i1 %459, label %460, label %531

460:                                              ; preds = %455
  %461 = getelementptr inbounds %struct.Term, ptr %457, i64 0, i32 5
  %462 = load ptr, ptr %461, align 8, !tbaa !40
  store ptr %462, ptr %3, align 8, !tbaa !14
  %463 = load ptr, ptr %104, align 8, !tbaa !316
  %464 = icmp eq ptr %463, null
  br i1 %464, label %465, label %471

465:                                              ; preds = %460
  %466 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  store ptr %105, ptr %104, align 8, !tbaa !316
  %467 = load i32, ptr %103, align 8, !tbaa !317
  %468 = add i32 %467, 1
  store i32 %468, ptr %103, align 8, !tbaa !317
  %469 = zext i32 %467 to i64
  %470 = getelementptr inbounds ptr, ptr %105, i64 %469
  store ptr %466, ptr %470, align 8, !tbaa !14
  br label %495

471:                                              ; preds = %460
  %472 = icmp eq ptr %463, %105
  %473 = load i32, ptr %103, align 8, !tbaa !317
  br i1 %472, label %474, label %483

474:                                              ; preds = %471
  %475 = icmp ult i32 %473, 3
  br i1 %475, label %476, label %493

476:                                              ; preds = %474
  %477 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %478 = load ptr, ptr %104, align 8, !tbaa !316
  %479 = load i32, ptr %103, align 8, !tbaa !317
  %480 = add i32 %479, 1
  store i32 %480, ptr %103, align 8, !tbaa !317
  %481 = zext i32 %479 to i64
  %482 = getelementptr inbounds ptr, ptr %478, i64 %481
  store ptr %477, ptr %482, align 8, !tbaa !14
  br label %495

483:                                              ; preds = %471
  %484 = and i32 %473, 7
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %493, label %486

486:                                              ; preds = %483
  %487 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %488 = load ptr, ptr %104, align 8, !tbaa !316
  %489 = load i32, ptr %103, align 8, !tbaa !317
  %490 = add i32 %489, 1
  store i32 %490, ptr %103, align 8, !tbaa !317
  %491 = zext i32 %489 to i64
  %492 = getelementptr inbounds ptr, ptr %488, i64 %491
  store ptr %487, ptr %492, align 8, !tbaa !14
  br label %495

493:                                              ; preds = %483, %474
  %494 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  call void @vec_add_internal(ptr noundef nonnull %103, ptr noundef %494) #43
  br label %495

495:                                              ; preds = %493, %486, %476, %465
  %496 = phi ptr [ %477, %476 ], [ %494, %493 ], [ %487, %486 ], [ %466, %465 ]
  %497 = call fastcc ptr @new_NFAState(ptr noundef %4) #44
  %498 = load ptr, ptr %456, align 8, !tbaa !106
  %499 = getelementptr inbounds %struct.Term, ptr %498, i64 0, i32 7
  %500 = load i8, ptr %499, align 4
  %501 = lshr i8 %500, 3
  %502 = and i8 %501, 1
  %503 = zext i8 %502 to i32
  store i32 %503, ptr %15, align 8, !tbaa !318
  call fastcc void @build_regex_nfa(ptr noundef %4, ptr noundef nonnull %3, ptr noundef %496, ptr noundef %497) #44
  %504 = getelementptr inbounds %struct.NFAState, ptr %497, i64 0, i32 3
  %505 = getelementptr inbounds %struct.NFAState, ptr %497, i64 0, i32 3, i32 2
  %506 = load ptr, ptr %505, align 8, !tbaa !310
  %507 = icmp eq ptr %506, null
  %508 = getelementptr inbounds %struct.NFAState, ptr %497, i64 0, i32 3, i32 3
  br i1 %507, label %509, label %514

509:                                              ; preds = %495
  store ptr %508, ptr %505, align 8, !tbaa !310
  %510 = load i32, ptr %504, align 8, !tbaa !312
  %511 = add i32 %510, 1
  store i32 %511, ptr %504, align 8, !tbaa !312
  %512 = zext i32 %510 to i64
  %513 = getelementptr inbounds ptr, ptr %508, i64 %512
  store ptr %452, ptr %513, align 8, !tbaa !14
  br label %531

514:                                              ; preds = %495
  %515 = icmp eq ptr %506, %508
  %516 = load i32, ptr %504, align 8, !tbaa !312
  br i1 %515, label %517, label %523

517:                                              ; preds = %514
  %518 = icmp ult i32 %516, 3
  br i1 %518, label %519, label %530

519:                                              ; preds = %517
  %520 = add nuw nsw i32 %516, 1
  store i32 %520, ptr %504, align 8, !tbaa !312
  %521 = zext i32 %516 to i64
  %522 = getelementptr inbounds ptr, ptr %506, i64 %521
  store ptr %452, ptr %522, align 8, !tbaa !14
  br label %531

523:                                              ; preds = %514
  %524 = and i32 %516, 7
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %530, label %526

526:                                              ; preds = %523
  %527 = add i32 %516, 1
  store i32 %527, ptr %504, align 8, !tbaa !312
  %528 = zext i32 %516 to i64
  %529 = getelementptr inbounds ptr, ptr %506, i64 %528
  store ptr %452, ptr %529, align 8, !tbaa !14
  br label %531

530:                                              ; preds = %523, %517
  call void @vec_add_internal(ptr noundef nonnull %504, ptr noundef nonnull %452) #43
  br label %531

531:                                              ; preds = %530, %526, %519, %509, %455, %447
  %532 = phi i32 [ 1, %519 ], [ 1, %530 ], [ 1, %526 ], [ 1, %509 ], [ %449, %455 ], [ %449, %447 ]
  %533 = add nuw nsw i64 %448, 1
  %534 = load i32, ptr %81, align 8, !tbaa !103
  %535 = zext i32 %534 to i64
  %536 = icmp ult i64 %533, %535
  br i1 %536, label %447, label %537, !llvm.loop !320

537:                                              ; preds = %531, %100
  %538 = phi i32 [ %.lcssa1, %100 ], [ %532, %531 ]
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %1231, label %540

540:                                              ; preds = %537
  %541 = call dereferenceable_or_null(2096) ptr @calloc(i64 1, i64 2096)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2) #45
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %2, i8 0, i64 40, i1 false)
  %542 = getelementptr inbounds %struct.anon, ptr %541, i64 0, i32 2
  %543 = getelementptr inbounds %struct.anon, ptr %541, i64 0, i32 3
  store ptr %543, ptr %542, align 8, !tbaa !321
  store i32 1, ptr %541, align 8, !tbaa !323
  store ptr %92, ptr %543, align 8, !tbaa !14
  call fastcc void @nfa_closure(ptr noundef nonnull %541) #44
  store ptr %17, ptr %16, align 8, !tbaa !31
  store i32 1, ptr %2, align 8, !tbaa !30
  store ptr %541, ptr %17, align 8, !tbaa !14
  br label %544

544:                                              ; preds = %665, %540
  %545 = phi i64 [ 0, %540 ], [ %666, %665 ]
  %546 = load ptr, ptr %16, align 8, !tbaa !31
  %547 = getelementptr inbounds ptr, ptr %546, i64 %545
  %548 = load ptr, ptr %547, align 8, !tbaa !14
  %549 = getelementptr inbounds %struct.anon, ptr %548, i64 0, i32 2
  br label %550

550:                                              ; preds = %662, %544
  %551 = phi i64 [ 0, %544 ], [ %663, %662 ]
  %552 = load i32, ptr %548, align 8, !tbaa !323
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %662, label %554

554:                                              ; preds = %550
  %555 = load ptr, ptr %549, align 8, !tbaa !321
  br label %556

556:                                              ; preds = %590, %554
  %557 = phi i32 [ %552, %554 ], [ %591, %590 ]
  %558 = phi ptr [ %555, %554 ], [ %592, %590 ]
  %559 = phi i64 [ 0, %554 ], [ %594, %590 ]
  %560 = phi ptr [ null, %554 ], [ %593, %590 ]
  %561 = getelementptr inbounds ptr, ptr %558, i64 %559
  %562 = load ptr, ptr %561, align 8, !tbaa !14
  %563 = getelementptr inbounds %struct.NFAState, ptr %562, i64 0, i32 1, i64 %551
  %564 = load i32, ptr %563, align 8, !tbaa !30
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %590, label %566

566:                                              ; preds = %573, %556
  %567 = phi i64 [ %580, %573 ], [ 0, %556 ]
  %568 = phi ptr [ %583, %573 ], [ %562, %556 ]
  %569 = phi ptr [ %574, %573 ], [ %560, %556 ]
  %570 = icmp eq ptr %569, null
  br i1 %570, label %571, label %573

571:                                              ; preds = %566
  %572 = call dereferenceable_or_null(2096) ptr @calloc(i64 1, i64 2096)
  br label %573

573:                                              ; preds = %571, %566
  %574 = phi ptr [ %569, %566 ], [ %572, %571 ]
  %575 = getelementptr inbounds %struct.NFAState, ptr %568, i64 0, i32 1, i64 %551, i32 2
  %576 = load ptr, ptr %575, align 8, !tbaa !31
  %577 = getelementptr inbounds ptr, ptr %576, i64 %567
  %578 = load ptr, ptr %577, align 8, !tbaa !14
  %579 = call i32 @set_add(ptr noundef %574, ptr noundef %578) #43
  %580 = add nuw nsw i64 %567, 1
  %581 = load ptr, ptr %549, align 8, !tbaa !321
  %582 = getelementptr inbounds ptr, ptr %581, i64 %559
  %583 = load ptr, ptr %582, align 8, !tbaa !14
  %584 = getelementptr inbounds %struct.NFAState, ptr %583, i64 0, i32 1, i64 %551
  %585 = load i32, ptr %584, align 8, !tbaa !30
  %586 = zext i32 %585 to i64
  %587 = icmp ult i64 %580, %586
  br i1 %587, label %566, label %588, !llvm.loop !324

588:                                              ; preds = %573
  %.lcssa3 = phi ptr [ %574, %573 ]
  %.lcssa2 = phi ptr [ %581, %573 ]
  %589 = load i32, ptr %548, align 8, !tbaa !323
  br label %590

590:                                              ; preds = %588, %556
  %591 = phi i32 [ %557, %556 ], [ %589, %588 ]
  %592 = phi ptr [ %558, %556 ], [ %.lcssa2, %588 ]
  %593 = phi ptr [ %560, %556 ], [ %.lcssa3, %588 ]
  %594 = add nuw nsw i64 %559, 1
  %595 = zext i32 %591 to i64
  %596 = icmp ult i64 %594, %595
  br i1 %596, label %556, label %597, !llvm.loop !325

597:                                              ; preds = %590
  %.lcssa4 = phi ptr [ %593, %590 ]
  %598 = icmp eq ptr %.lcssa4, null
  br i1 %598, label %662, label %599

599:                                              ; preds = %597
  call void @set_to_vec(ptr noundef nonnull %.lcssa4) #43
  call fastcc void @nfa_closure(ptr noundef nonnull %.lcssa4) #44
  %600 = load i32, ptr %2, align 8, !tbaa !30
  %601 = icmp eq i32 %600, 0
  %602 = load ptr, ptr %16, align 8, !tbaa !31
  br i1 %601, label %637, label %603

603:                                              ; preds = %599
  %604 = load i32, ptr %.lcssa4, align 8, !tbaa !323
  %605 = icmp eq i32 %604, 0
  %606 = getelementptr inbounds %struct.anon, ptr %.lcssa4, i64 0, i32 2
  %607 = zext i32 %604 to i64
  %608 = zext i32 %600 to i64
  br label %609

609:                                              ; preds = %634, %603
  %610 = phi i64 [ 0, %603 ], [ %635, %634 ]
  %611 = getelementptr inbounds ptr, ptr %602, i64 %610
  %612 = load ptr, ptr %611, align 8, !tbaa !14
  %613 = load i32, ptr %612, align 8, !tbaa !323
  %614 = icmp eq i32 %604, %613
  br i1 %614, label %615, label %634

615:                                              ; preds = %609
  br i1 %605, label %630, label %616

616:                                              ; preds = %615
  %617 = load ptr, ptr %606, align 8, !tbaa !321
  %618 = getelementptr inbounds %struct.anon, ptr %612, i64 0, i32 2
  %619 = load ptr, ptr %618, align 8, !tbaa !321
  br label %623

620:                                              ; preds = %623
  %621 = add nuw nsw i64 %624, 1
  %622 = icmp eq i64 %621, %607
  br i1 %622, label %630, label %623, !llvm.loop !326

623:                                              ; preds = %620, %616
  %624 = phi i64 [ 0, %616 ], [ %621, %620 ]
  %625 = getelementptr inbounds ptr, ptr %617, i64 %624
  %626 = load ptr, ptr %625, align 8, !tbaa !14
  %627 = getelementptr inbounds ptr, ptr %619, i64 %624
  %628 = load ptr, ptr %627, align 8, !tbaa !14
  %629 = icmp eq ptr %626, %628
  br i1 %629, label %620, label %634

630:                                              ; preds = %620, %615
  %.lcssa5 = phi i64 [ %610, %620 ], [ %610, %615 ]
  call fastcc void @free_DFAState(ptr noundef nonnull %.lcssa4) #44
  %631 = load ptr, ptr %16, align 8, !tbaa !31
  %632 = getelementptr inbounds ptr, ptr %631, i64 %.lcssa5
  %633 = load ptr, ptr %632, align 8, !tbaa !14
  br label %659

634:                                              ; preds = %623, %609
  %635 = add nuw nsw i64 %610, 1
  %636 = icmp eq i64 %635, %608
  br i1 %636, label %637, label %609, !llvm.loop !327

637:                                              ; preds = %634, %599
  %638 = icmp eq ptr %602, null
  br i1 %638, label %639, label %643

639:                                              ; preds = %637
  store ptr %17, ptr %16, align 8, !tbaa !31
  %640 = add i32 %600, 1
  store i32 %640, ptr %2, align 8, !tbaa !30
  %641 = zext i32 %600 to i64
  %642 = getelementptr inbounds ptr, ptr %17, i64 %641
  store ptr %.lcssa4, ptr %642, align 8, !tbaa !14
  br label %659

643:                                              ; preds = %637
  %644 = icmp eq ptr %602, %17
  br i1 %644, label %645, label %651

645:                                              ; preds = %643
  %646 = icmp ult i32 %600, 3
  br i1 %646, label %647, label %658

647:                                              ; preds = %645
  %648 = add nuw nsw i32 %600, 1
  store i32 %648, ptr %2, align 8, !tbaa !30
  %649 = zext i32 %600 to i64
  %650 = getelementptr inbounds ptr, ptr %17, i64 %649
  store ptr %.lcssa4, ptr %650, align 8, !tbaa !14
  br label %659

651:                                              ; preds = %643
  %652 = and i32 %600, 7
  %653 = icmp eq i32 %652, 0
  br i1 %653, label %658, label %654

654:                                              ; preds = %651
  %655 = add i32 %600, 1
  store i32 %655, ptr %2, align 8, !tbaa !30
  %656 = zext i32 %600 to i64
  %657 = getelementptr inbounds ptr, ptr %602, i64 %656
  store ptr %.lcssa4, ptr %657, align 8, !tbaa !14
  br label %659

658:                                              ; preds = %651, %645
  call void @vec_add_internal(ptr noundef nonnull %2, ptr noundef nonnull %.lcssa4) #43
  br label %659

659:                                              ; preds = %658, %654, %647, %639, %630
  %660 = phi ptr [ %633, %630 ], [ %.lcssa4, %647 ], [ %.lcssa4, %658 ], [ %.lcssa4, %654 ], [ %.lcssa4, %639 ]
  %661 = getelementptr inbounds %struct.DFAState, ptr %548, i64 0, i32 1, i64 %551
  store ptr %660, ptr %661, align 8, !tbaa !14
  br label %662

662:                                              ; preds = %659, %597, %550
  %663 = add nuw nsw i64 %551, 1
  %664 = icmp eq i64 %663, 256
  br i1 %664, label %665, label %550, !llvm.loop !328

665:                                              ; preds = %662
  %666 = add nuw nsw i64 %545, 1
  %667 = load i32, ptr %2, align 8, !tbaa !30
  %668 = zext i32 %667 to i64
  %669 = icmp ult i64 %666, %668
  br i1 %669, label %544, label %670, !llvm.loop !329

670:                                              ; preds = %665
  %.lcssa6 = phi i32 [ %667, %665 ]
  %671 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9
  store i32 0, ptr %671, align 8, !tbaa !30
  %672 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9, i32 0, i32 2
  store ptr null, ptr %672, align 8, !tbaa !31
  %673 = icmp eq i32 %.lcssa6, 0
  br i1 %673, label %879, label %674

674:                                              ; preds = %670
  %675 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9, i32 0, i32 3
  br label %678

676:                                              ; preds = %715
  %.lcssa7 = phi i32 [ %716, %715 ]
  %677 = icmp eq i32 %.lcssa7, 0
  br i1 %677, label %879, label %720

678:                                              ; preds = %715, %674
  %679 = phi i32 [ %.lcssa6, %674 ], [ %716, %715 ]
  %680 = phi i64 [ 0, %674 ], [ %717, %715 ]
  %681 = call dereferenceable_or_null(4184) ptr @calloc(i64 1, i64 4184)
  %682 = load ptr, ptr %16, align 8, !tbaa !31
  %683 = getelementptr inbounds ptr, ptr %682, i64 %680
  %684 = load ptr, ptr %683, align 8, !tbaa !14
  %685 = getelementptr inbounds %struct.DFAState, ptr %684, i64 0, i32 2
  store ptr %681, ptr %685, align 8, !tbaa !330
  %686 = load ptr, ptr %683, align 8, !tbaa !14
  %687 = getelementptr inbounds %struct.DFAState, ptr %686, i64 0, i32 2
  %688 = load ptr, ptr %687, align 8, !tbaa !330
  %689 = trunc i64 %680 to i32
  store i32 %689, ptr %688, align 8, !tbaa !120
  %690 = load ptr, ptr %672, align 8, !tbaa !31
  %691 = icmp eq ptr %690, null
  br i1 %691, label %692, label %697

692:                                              ; preds = %678
  store ptr %675, ptr %672, align 8, !tbaa !31
  %693 = load i32, ptr %671, align 8, !tbaa !30
  %694 = add i32 %693, 1
  store i32 %694, ptr %671, align 8, !tbaa !30
  %695 = zext i32 %693 to i64
  %696 = getelementptr inbounds ptr, ptr %675, i64 %695
  store ptr %688, ptr %696, align 8, !tbaa !14
  br label %715

697:                                              ; preds = %678
  %698 = icmp eq ptr %690, %675
  %699 = load i32, ptr %671, align 8, !tbaa !30
  br i1 %698, label %700, label %706

700:                                              ; preds = %697
  %701 = icmp ult i32 %699, 3
  br i1 %701, label %702, label %713

702:                                              ; preds = %700
  %703 = add nuw nsw i32 %699, 1
  store i32 %703, ptr %671, align 8, !tbaa !30
  %704 = zext i32 %699 to i64
  %705 = getelementptr inbounds ptr, ptr %675, i64 %704
  store ptr %688, ptr %705, align 8, !tbaa !14
  br label %715

706:                                              ; preds = %697
  %707 = and i32 %699, 7
  %708 = icmp eq i32 %707, 0
  br i1 %708, label %713, label %709

709:                                              ; preds = %706
  %710 = add i32 %699, 1
  store i32 %710, ptr %671, align 8, !tbaa !30
  %711 = zext i32 %699 to i64
  %712 = getelementptr inbounds ptr, ptr %690, i64 %711
  store ptr %688, ptr %712, align 8, !tbaa !14
  br label %715

713:                                              ; preds = %706, %700
  call void @vec_add_internal(ptr noundef nonnull %671, ptr noundef nonnull %688) #43
  %714 = load i32, ptr %2, align 8, !tbaa !30
  br label %715

715:                                              ; preds = %713, %709, %702, %692
  %716 = phi i32 [ %714, %713 ], [ %679, %709 ], [ %679, %702 ], [ %679, %692 ]
  %717 = add nuw nsw i64 %680, 1
  %718 = zext i32 %716 to i64
  %719 = icmp ult i64 %717, %718
  br i1 %719, label %678, label %676, !llvm.loop !331

720:                                              ; preds = %863, %676
  %721 = phi i32 [ %864, %863 ], [ %.lcssa7, %676 ]
  %722 = phi i64 [ %865, %863 ], [ 0, %676 ]
  br label %733

723:                                              ; preds = %747
  %724 = load ptr, ptr %16, align 8, !tbaa !31
  %725 = getelementptr inbounds ptr, ptr %724, i64 %722
  %726 = load ptr, ptr %725, align 8, !tbaa !14
  %727 = load i32, ptr %726, align 8, !tbaa !323
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %863, label %729

729:                                              ; preds = %723
  %730 = getelementptr inbounds %struct.anon, ptr %726, i64 0, i32 2
  %731 = load ptr, ptr %730, align 8, !tbaa !321
  %732 = zext i32 %727 to i64
  br label %750

733:                                              ; preds = %747, %720
  %734 = phi i64 [ 0, %720 ], [ %748, %747 ]
  %735 = load ptr, ptr %16, align 8, !tbaa !31
  %736 = getelementptr inbounds ptr, ptr %735, i64 %722
  %737 = load ptr, ptr %736, align 8, !tbaa !14
  %738 = getelementptr inbounds %struct.DFAState, ptr %737, i64 0, i32 1, i64 %734
  %739 = load ptr, ptr %738, align 8, !tbaa !14
  %740 = icmp eq ptr %739, null
  br i1 %740, label %747, label %741

741:                                              ; preds = %733
  %742 = getelementptr inbounds %struct.DFAState, ptr %739, i64 0, i32 2
  %743 = load ptr, ptr %742, align 8, !tbaa !330
  %744 = getelementptr inbounds %struct.DFAState, ptr %737, i64 0, i32 2
  %745 = load ptr, ptr %744, align 8, !tbaa !330
  %746 = getelementptr inbounds %struct.ScanState, ptr %745, i64 0, i32 1, i64 %734
  store ptr %743, ptr %746, align 8, !tbaa !14
  br label %747

747:                                              ; preds = %741, %733
  %748 = add nuw nsw i64 %734, 1
  %749 = icmp eq i64 %748, 256
  br i1 %749, label %723, label %733, !llvm.loop !332

750:                                              ; preds = %774, %729
  %751 = phi i64 [ 0, %729 ], [ %776, %774 ]
  %752 = phi i32 [ -2147483648, %729 ], [ %775, %774 ]
  %753 = getelementptr inbounds ptr, ptr %731, i64 %751
  %754 = load ptr, ptr %753, align 8, !tbaa !14
  %755 = getelementptr inbounds %struct.NFAState, ptr %754, i64 0, i32 3
  %756 = load i32, ptr %755, align 8, !tbaa !312
  %757 = icmp eq i32 %756, 0
  br i1 %757, label %774, label %758

758:                                              ; preds = %750
  %759 = getelementptr inbounds %struct.NFAState, ptr %754, i64 0, i32 3, i32 2
  %760 = load ptr, ptr %759, align 8, !tbaa !310
  %761 = zext i32 %756 to i64
  br label %762

762:                                              ; preds = %762, %758
  %763 = phi i64 [ 0, %758 ], [ %772, %762 ]
  %764 = phi i32 [ %752, %758 ], [ %771, %762 ]
  %765 = getelementptr inbounds ptr, ptr %760, i64 %763
  %766 = load ptr, ptr %765, align 8, !tbaa !14
  %767 = getelementptr inbounds %struct.Action, ptr %766, i64 0, i32 1
  %768 = load ptr, ptr %767, align 8, !tbaa !106
  %769 = getelementptr inbounds %struct.Term, ptr %768, i64 0, i32 2
  %770 = load i32, ptr %769, align 8, !tbaa !96
  %771 = call i32 @llvm.smax.i32(i32 %764, i32 %770)
  %772 = add nuw nsw i64 %763, 1
  %773 = icmp eq i64 %772, %761
  br i1 %773, label %774, label %762, !llvm.loop !333

774:                                              ; preds = %762, %750
  %775 = phi i32 [ %752, %750 ], [ %771, %762 ]
  %776 = add nuw nsw i64 %751, 1
  %777 = icmp eq i64 %776, %732
  br i1 %777, label %778, label %750, !llvm.loop !334

778:                                              ; preds = %854, %774
  %.lcssa8 = phi i32 [ %.lcssa8, %854 ], [ %775, %774 ]
  %779 = phi ptr [ %855, %854 ], [ %724, %774 ]
  %780 = phi i32 [ %856, %854 ], [ %727, %774 ]
  %781 = phi ptr [ %857, %854 ], [ %726, %774 ]
  %782 = phi i64 [ %858, %854 ], [ 0, %774 ]
  %783 = getelementptr inbounds %struct.anon, ptr %781, i64 0, i32 2
  %784 = load ptr, ptr %783, align 8, !tbaa !321
  %785 = getelementptr inbounds ptr, ptr %784, i64 %782
  %786 = load ptr, ptr %785, align 8, !tbaa !14
  %787 = getelementptr inbounds %struct.NFAState, ptr %786, i64 0, i32 3
  %788 = load i32, ptr %787, align 8, !tbaa !312
  %789 = icmp eq i32 %788, 0
  br i1 %789, label %854, label %790

790:                                              ; preds = %839, %778
  %791 = phi ptr [ %841, %839 ], [ %779, %778 ]
  %792 = phi i64 [ %840, %839 ], [ 0, %778 ]
  %793 = phi ptr [ %847, %839 ], [ %786, %778 ]
  %794 = phi ptr [ %843, %839 ], [ %781, %778 ]
  %795 = getelementptr inbounds %struct.NFAState, ptr %793, i64 0, i32 3, i32 2
  %796 = load ptr, ptr %795, align 8, !tbaa !310
  %797 = getelementptr inbounds ptr, ptr %796, i64 %792
  %798 = load ptr, ptr %797, align 8, !tbaa !14
  %799 = getelementptr inbounds %struct.Action, ptr %798, i64 0, i32 1
  %800 = load ptr, ptr %799, align 8, !tbaa !106
  %801 = getelementptr inbounds %struct.Term, ptr %800, i64 0, i32 2
  %802 = load i32, ptr %801, align 8, !tbaa !96
  %803 = icmp eq i32 %802, %.lcssa8
  br i1 %803, label %804, label %839

804:                                              ; preds = %790
  %805 = getelementptr inbounds %struct.DFAState, ptr %794, i64 0, i32 2
  %806 = load ptr, ptr %805, align 8, !tbaa !330
  %807 = getelementptr inbounds %struct.ScanState, ptr %806, i64 0, i32 2
  %808 = getelementptr inbounds %struct.ScanState, ptr %806, i64 0, i32 2, i32 2
  %809 = load ptr, ptr %808, align 8, !tbaa !128
  %810 = icmp eq ptr %809, null
  %811 = getelementptr inbounds %struct.ScanState, ptr %806, i64 0, i32 2, i32 3
  br i1 %810, label %812, label %822

812:                                              ; preds = %804
  store ptr %811, ptr %808, align 8, !tbaa !128
  %813 = getelementptr inbounds ptr, ptr %791, i64 %722
  %814 = load ptr, ptr %813, align 8, !tbaa !14
  %815 = getelementptr inbounds %struct.DFAState, ptr %814, i64 0, i32 2
  %816 = load ptr, ptr %815, align 8, !tbaa !330
  %817 = getelementptr inbounds %struct.ScanState, ptr %816, i64 0, i32 2
  %818 = load i32, ptr %817, align 8, !tbaa !127
  %819 = add i32 %818, 1
  store i32 %819, ptr %817, align 8, !tbaa !127
  %820 = zext i32 %818 to i64
  %821 = getelementptr inbounds ptr, ptr %811, i64 %820
  store ptr %798, ptr %821, align 8, !tbaa !14
  br label %839

822:                                              ; preds = %804
  %823 = icmp eq ptr %809, %811
  %824 = load i32, ptr %807, align 8, !tbaa !127
  br i1 %823, label %825, label %831

825:                                              ; preds = %822
  %826 = icmp ult i32 %824, 3
  br i1 %826, label %827, label %838

827:                                              ; preds = %825
  %828 = add nuw nsw i32 %824, 1
  store i32 %828, ptr %807, align 8, !tbaa !127
  %829 = zext i32 %824 to i64
  %830 = getelementptr inbounds ptr, ptr %809, i64 %829
  store ptr %798, ptr %830, align 8, !tbaa !14
  br label %839

831:                                              ; preds = %822
  %832 = and i32 %824, 7
  %833 = icmp eq i32 %832, 0
  br i1 %833, label %838, label %834

834:                                              ; preds = %831
  %835 = add i32 %824, 1
  store i32 %835, ptr %807, align 8, !tbaa !127
  %836 = zext i32 %824 to i64
  %837 = getelementptr inbounds ptr, ptr %809, i64 %836
  store ptr %798, ptr %837, align 8, !tbaa !14
  br label %839

838:                                              ; preds = %831, %825
  call void @vec_add_internal(ptr noundef nonnull %807, ptr noundef nonnull %798) #43
  br label %839

839:                                              ; preds = %838, %834, %827, %812, %790
  %840 = add nuw nsw i64 %792, 1
  %841 = load ptr, ptr %16, align 8, !tbaa !31
  %842 = getelementptr inbounds ptr, ptr %841, i64 %722
  %843 = load ptr, ptr %842, align 8, !tbaa !14
  %844 = getelementptr inbounds %struct.anon, ptr %843, i64 0, i32 2
  %845 = load ptr, ptr %844, align 8, !tbaa !321
  %846 = getelementptr inbounds ptr, ptr %845, i64 %782
  %847 = load ptr, ptr %846, align 8, !tbaa !14
  %848 = getelementptr inbounds %struct.NFAState, ptr %847, i64 0, i32 3
  %849 = load i32, ptr %848, align 8, !tbaa !312
  %850 = zext i32 %849 to i64
  %851 = icmp ult i64 %840, %850
  br i1 %851, label %790, label %852, !llvm.loop !335

852:                                              ; preds = %839
  %.lcssa10 = phi ptr [ %841, %839 ]
  %.lcssa9 = phi ptr [ %843, %839 ]
  %853 = load i32, ptr %.lcssa9, align 8, !tbaa !323
  br label %854

854:                                              ; preds = %852, %778
  %855 = phi ptr [ %.lcssa10, %852 ], [ %779, %778 ]
  %856 = phi i32 [ %853, %852 ], [ %780, %778 ]
  %857 = phi ptr [ %.lcssa9, %852 ], [ %781, %778 ]
  %858 = add nuw nsw i64 %782, 1
  %859 = zext i32 %856 to i64
  %860 = icmp ult i64 %858, %859
  br i1 %860, label %778, label %861, !llvm.loop !336

861:                                              ; preds = %854
  %862 = load i32, ptr %2, align 8, !tbaa !30
  br label %863

863:                                              ; preds = %861, %723
  %864 = phi i32 [ %862, %861 ], [ %721, %723 ]
  %865 = add nuw nsw i64 %722, 1
  %866 = zext i32 %864 to i64
  %867 = icmp ult i64 %865, %866
  br i1 %867, label %720, label %868, !llvm.loop !337

868:                                              ; preds = %863
  %.lcssa11 = phi i32 [ %864, %863 ]
  %869 = icmp eq i32 %.lcssa11, 0
  br i1 %869, label %879, label %870

870:                                              ; preds = %870, %868
  %871 = phi i64 [ %875, %870 ], [ 0, %868 ]
  %872 = load ptr, ptr %16, align 8, !tbaa !31
  %873 = getelementptr inbounds ptr, ptr %872, i64 %871
  %874 = load ptr, ptr %873, align 8, !tbaa !14
  call fastcc void @free_DFAState(ptr noundef %874) #44
  %875 = add nuw nsw i64 %871, 1
  %876 = load i32, ptr %2, align 8, !tbaa !30
  %877 = zext i32 %876 to i64
  %878 = icmp ult i64 %875, %877
  br i1 %878, label %870, label %879, !llvm.loop !338

879:                                              ; preds = %870, %868, %676, %670
  %880 = load ptr, ptr %16, align 8, !tbaa !31
  %881 = icmp eq ptr %880, null
  %882 = icmp eq ptr %880, %17
  %883 = or i1 %881, %882
  br i1 %883, label %885, label %884

884:                                              ; preds = %879
  call void @free(ptr noundef nonnull %880) #43
  br label %885

885:                                              ; preds = %884, %879
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2) #45
  %886 = load i32, ptr %671, align 8, !tbaa !30
  %887 = icmp eq i32 %886, 0
  br i1 %887, label %900, label %888

888:                                              ; preds = %888, %885
  %889 = phi i64 [ %896, %888 ], [ 0, %885 ]
  %890 = load ptr, ptr %672, align 8, !tbaa !31
  %891 = getelementptr inbounds ptr, ptr %890, i64 %889
  %892 = load ptr, ptr %891, align 8, !tbaa !14
  %893 = getelementptr inbounds %struct.ScanState, ptr %892, i64 0, i32 3
  %894 = getelementptr inbounds %struct.ScanState, ptr %892, i64 0, i32 2
  %895 = call i32 @set_union(ptr noundef nonnull %893, ptr noundef nonnull %894) #43
  %896 = add nuw nsw i64 %889, 1
  %897 = load i32, ptr %671, align 8, !tbaa !30
  %898 = zext i32 %897 to i64
  %899 = icmp ult i64 %896, %898
  br i1 %899, label %888, label %900, !llvm.loop !339

900:                                              ; preds = %888, %885
  %901 = phi i32 [ 0, %885 ], [ %897, %888 ]
  br label %904

902:                                              ; preds = %933
  %.lcssa13 = phi i32 [ %935, %933 ]
  %.lcssa12.lcssa = phi i32 [ %.lcssa12, %933 ]
  %903 = icmp eq i32 %.lcssa12.lcssa, 0
  br i1 %903, label %907, label %904, !llvm.loop !340

904:                                              ; preds = %902, %900
  %905 = phi i32 [ %.lcssa13, %902 ], [ %901, %900 ]
  %906 = icmp eq i32 %905, 0
  br i1 %906, label %948, label %909

907:                                              ; preds = %902
  %.lcssa13.lcssa = phi i32 [ %.lcssa13, %902 ]
  %908 = icmp eq i32 %.lcssa13.lcssa, 0
  br i1 %908, label %948, label %938

909:                                              ; preds = %933, %904
  %910 = phi i64 [ %934, %933 ], [ 0, %904 ]
  %911 = phi i32 [ %.lcssa12, %933 ], [ 0, %904 ]
  %912 = load ptr, ptr %672, align 8, !tbaa !31
  %913 = getelementptr inbounds ptr, ptr %912, i64 %910
  %914 = load ptr, ptr %913, align 8, !tbaa !14
  %915 = getelementptr inbounds %struct.ScanState, ptr %914, i64 0, i32 3
  br label %916

916:                                              ; preds = %929, %909
  %917 = phi i64 [ 0, %909 ], [ %931, %929 ]
  %918 = phi i32 [ %911, %909 ], [ %930, %929 ]
  %919 = getelementptr inbounds %struct.ScanState, ptr %914, i64 0, i32 1, i64 %917
  %920 = load ptr, ptr %919, align 8, !tbaa !14
  %921 = icmp eq ptr %920, null
  %922 = icmp eq ptr %914, %920
  %923 = or i1 %921, %922
  br i1 %923, label %929, label %924

924:                                              ; preds = %916
  %925 = getelementptr inbounds %struct.ScanState, ptr %920, i64 0, i32 3
  %926 = call i32 @set_union(ptr noundef nonnull %915, ptr noundef nonnull %925) #43
  %927 = icmp eq i32 %926, 0
  %928 = select i1 %927, i32 %918, i32 1
  br label %929

929:                                              ; preds = %924, %916
  %930 = phi i32 [ %918, %916 ], [ %928, %924 ]
  %931 = add nuw nsw i64 %917, 1
  %932 = icmp eq i64 %931, 256
  br i1 %932, label %933, label %916, !llvm.loop !341

933:                                              ; preds = %929
  %.lcssa12 = phi i32 [ %930, %929 ]
  %934 = add nuw nsw i64 %910, 1
  %935 = load i32, ptr %671, align 8, !tbaa !30
  %936 = zext i32 %935 to i64
  %937 = icmp ult i64 %934, %936
  br i1 %937, label %909, label %902, !llvm.loop !342

938:                                              ; preds = %938, %907
  %939 = phi i64 [ %944, %938 ], [ 0, %907 ]
  %940 = load ptr, ptr %672, align 8, !tbaa !31
  %941 = getelementptr inbounds ptr, ptr %940, i64 %939
  %942 = load ptr, ptr %941, align 8, !tbaa !14
  %943 = getelementptr inbounds %struct.ScanState, ptr %942, i64 0, i32 3
  call void @set_to_vec(ptr noundef nonnull %943) #43
  call void @sort_VecAction(ptr noundef nonnull %943) #43
  %944 = add nuw nsw i64 %939, 1
  %945 = load i32, ptr %671, align 8, !tbaa !30
  %946 = zext i32 %945 to i64
  %947 = icmp ult i64 %944, %946
  br i1 %947, label %938, label %949, !llvm.loop !343

948:                                              ; preds = %907, %904
  store ptr inttoptr (i64 1 to ptr), ptr getelementptr inbounds (%struct.hash_fns_t, ptr @trans_hash_fns, i64 0, i32 2), align 8, !tbaa !14
  br label %1213

949:                                              ; preds = %938
  %.lcssa14 = phi i32 [ %945, %938 ]
  %950 = icmp eq i32 %.lcssa14, 0
  store ptr inttoptr (i64 1 to ptr), ptr getelementptr inbounds (%struct.hash_fns_t, ptr @trans_hash_fns, i64 0, i32 2), align 8, !tbaa !14
  br i1 %950, label %1213, label %951

951:                                              ; preds = %949
  %952 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9, i32 1
  br label %953

953:                                              ; preds = %1208, %951
  %954 = phi i64 [ 0, %951 ], [ %1209, %1208 ]
  %955 = phi ptr [ null, %951 ], [ %.lcssa27, %1208 ]
  %956 = load ptr, ptr %672, align 8, !tbaa !31
  %957 = getelementptr inbounds ptr, ptr %956, i64 %954
  %958 = load ptr, ptr %957, align 8, !tbaa !14
  %959 = getelementptr inbounds %struct.ScanState, ptr %958, i64 0, i32 3
  %960 = getelementptr inbounds %struct.ScanState, ptr %958, i64 0, i32 3, i32 2
  %961 = getelementptr inbounds %struct.ScanState, ptr %958, i64 0, i32 2
  %962 = getelementptr inbounds %struct.ScanState, ptr %958, i64 0, i32 2, i32 2
  br label %963

963:                                              ; preds = %1203, %953
  %964 = phi i64 [ 0, %953 ], [ %1206, %1203 ]
  %965 = phi ptr [ %955, %953 ], [ %1204, %1203 ]
  %966 = icmp eq ptr %965, null
  br i1 %966, label %967, label %969

967:                                              ; preds = %963
  %968 = call dereferenceable_or_null(88) ptr @calloc(i64 1, i64 88)
  br label %969

969:                                              ; preds = %967, %963
  %970 = phi ptr [ %965, %963 ], [ %968, %967 ]
  %971 = getelementptr inbounds %struct.ScanState, ptr %958, i64 0, i32 1, i64 %964
  %972 = load ptr, ptr %971, align 8, !tbaa !14
  %973 = icmp eq ptr %972, null
  br i1 %973, label %1181, label %974

974:                                              ; preds = %969
  %975 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1
  %976 = getelementptr inbounds %struct.ScanState, ptr %972, i64 0, i32 3
  %977 = load i32, ptr %959, align 8, !tbaa !30
  %978 = icmp eq i32 %977, 0
  br i1 %978, label %1105, label %979

979:                                              ; preds = %974
  %980 = getelementptr inbounds %struct.ScanState, ptr %972, i64 0, i32 3, i32 2
  %981 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1, i32 2
  %982 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1, i32 3
  br label %983

983:                                              ; preds = %1061, %979
  %984 = phi i32 [ %977, %979 ], [ %.lcssa19, %1061 ]
  %985 = phi i32 [ 0, %979 ], [ %1065, %1061 ]
  %986 = phi i32 [ 0, %979 ], [ %1064, %1061 ]
  %987 = load i32, ptr %976, align 8, !tbaa !30
  %988 = icmp ult i32 %985, %987
  br i1 %988, label %989, label %997

989:                                              ; preds = %983
  %990 = sext i32 %985 to i64
  br label %991

991:                                              ; preds = %1099, %989
  %992 = phi i32 [ %984, %989 ], [ %.lcssa20, %1099 ]
  %993 = phi i32 [ %984, %989 ], [ %.lcssa18, %1099 ]
  %994 = phi i64 [ %990, %989 ], [ %1101, %1099 ]
  %995 = phi i32 [ %986, %989 ], [ %1100, %1099 ]
  %996 = sext i32 %995 to i64
  br label %1046

997:                                              ; preds = %1099, %983
  %998 = phi i32 [ %.lcssa18, %1099 ], [ %984, %983 ]
  %999 = phi i32 [ %1100, %1099 ], [ %986, %983 ]
  %1000 = icmp ult i32 %999, %998
  br i1 %1000, label %1001, label %1105

1001:                                             ; preds = %997
  %1002 = sext i32 %999 to i64
  br label %1003

1003:                                             ; preds = %1041, %1001
  %1004 = phi i64 [ %1002, %1001 ], [ %1042, %1041 ]
  %1005 = load ptr, ptr %981, align 8, !tbaa !31
  %1006 = icmp eq ptr %1005, null
  br i1 %1006, label %1007, label %1015

1007:                                             ; preds = %1003
  %1008 = load ptr, ptr %960, align 8, !tbaa !31
  %1009 = getelementptr inbounds ptr, ptr %1008, i64 %1004
  %1010 = load ptr, ptr %1009, align 8, !tbaa !14
  store ptr %982, ptr %981, align 8, !tbaa !31
  %1011 = load i32, ptr %975, align 8, !tbaa !30
  %1012 = add i32 %1011, 1
  store i32 %1012, ptr %975, align 8, !tbaa !30
  %1013 = zext i32 %1011 to i64
  %1014 = getelementptr inbounds ptr, ptr %982, i64 %1013
  store ptr %1010, ptr %1014, align 8, !tbaa !14
  br label %1041

1015:                                             ; preds = %1003
  %1016 = icmp eq ptr %1005, %982
  %1017 = load i32, ptr %975, align 8, !tbaa !30
  br i1 %1016, label %1018, label %1027

1018:                                             ; preds = %1015
  %1019 = icmp ult i32 %1017, 3
  %1020 = load ptr, ptr %960, align 8, !tbaa !31
  br i1 %1019, label %1021, label %1037

1021:                                             ; preds = %1018
  %1022 = getelementptr inbounds ptr, ptr %1020, i64 %1004
  %1023 = load ptr, ptr %1022, align 8, !tbaa !14
  %1024 = add nuw nsw i32 %1017, 1
  store i32 %1024, ptr %975, align 8, !tbaa !30
  %1025 = zext i32 %1017 to i64
  %1026 = getelementptr inbounds ptr, ptr %982, i64 %1025
  store ptr %1023, ptr %1026, align 8, !tbaa !14
  br label %1041

1027:                                             ; preds = %1015
  %1028 = and i32 %1017, 7
  %1029 = icmp eq i32 %1028, 0
  %1030 = load ptr, ptr %960, align 8, !tbaa !31
  br i1 %1029, label %1037, label %1031

1031:                                             ; preds = %1027
  %1032 = getelementptr inbounds ptr, ptr %1030, i64 %1004
  %1033 = load ptr, ptr %1032, align 8, !tbaa !14
  %1034 = add i32 %1017, 1
  store i32 %1034, ptr %975, align 8, !tbaa !30
  %1035 = zext i32 %1017 to i64
  %1036 = getelementptr inbounds ptr, ptr %1005, i64 %1035
  store ptr %1033, ptr %1036, align 8, !tbaa !14
  br label %1041

1037:                                             ; preds = %1027, %1018
  %1038 = phi ptr [ %1020, %1018 ], [ %1030, %1027 ]
  %1039 = getelementptr inbounds ptr, ptr %1038, i64 %1004
  %1040 = load ptr, ptr %1039, align 8, !tbaa !14
  call void @vec_add_internal(ptr noundef nonnull %975, ptr noundef %1040) #43
  br label %1041

1041:                                             ; preds = %1037, %1031, %1021, %1007
  %1042 = add nsw i64 %1004, 1
  %1043 = load i32, ptr %959, align 8, !tbaa !30
  %1044 = trunc i64 %1042 to i32
  %1045 = icmp ugt i32 %1043, %1044
  br i1 %1045, label %1003, label %1105, !llvm.loop !344

1046:                                             ; preds = %1094, %991
  %1047 = phi i32 [ %992, %991 ], [ %1096, %1094 ]
  %1048 = phi i32 [ %993, %991 ], [ %1096, %1094 ]
  %1049 = phi i64 [ %996, %991 ], [ %1095, %1094 ]
  %1050 = load ptr, ptr %960, align 8, !tbaa !31
  %1051 = getelementptr inbounds ptr, ptr %1050, i64 %1049
  %1052 = load ptr, ptr %1051, align 8, !tbaa !14
  %1053 = getelementptr inbounds %struct.Action, ptr %1052, i64 0, i32 4
  %1054 = load i32, ptr %1053, align 8, !tbaa !345
  %1055 = load ptr, ptr %980, align 8, !tbaa !31
  %1056 = getelementptr inbounds ptr, ptr %1055, i64 %994
  %1057 = load ptr, ptr %1056, align 8, !tbaa !14
  %1058 = getelementptr inbounds %struct.Action, ptr %1057, i64 0, i32 4
  %1059 = load i32, ptr %1058, align 8, !tbaa !345
  %1060 = icmp eq i32 %1054, %1059
  br i1 %1060, label %1061, label %1067

1061:                                             ; preds = %1046
  %.lcssa21 = phi i64 [ %994, %1046 ]
  %.lcssa19 = phi i32 [ %1047, %1046 ]
  %.lcssa15 = phi i64 [ %1049, %1046 ]
  %1062 = trunc i64 %.lcssa21 to i32
  %1063 = trunc i64 %.lcssa15 to i32
  %1064 = add nsw i32 %1063, 1
  %1065 = add nsw i32 %1062, 1
  %1066 = icmp ult i32 %1064, %.lcssa19
  br i1 %1066, label %983, label %1105

1067:                                             ; preds = %1046
  %1068 = icmp ult i32 %1054, %1059
  br i1 %1068, label %1069, label %1099

1069:                                             ; preds = %1067
  %1070 = load ptr, ptr %981, align 8, !tbaa !31
  %1071 = icmp eq ptr %1070, null
  br i1 %1071, label %1072, label %1077

1072:                                             ; preds = %1069
  store ptr %982, ptr %981, align 8, !tbaa !31
  %1073 = load i32, ptr %975, align 8, !tbaa !30
  %1074 = add i32 %1073, 1
  store i32 %1074, ptr %975, align 8, !tbaa !30
  %1075 = zext i32 %1073 to i64
  %1076 = getelementptr inbounds ptr, ptr %982, i64 %1075
  store ptr %1052, ptr %1076, align 8, !tbaa !14
  br label %1094

1077:                                             ; preds = %1069
  %1078 = icmp eq ptr %1070, %982
  %1079 = load i32, ptr %975, align 8, !tbaa !30
  br i1 %1078, label %1080, label %1086

1080:                                             ; preds = %1077
  %1081 = icmp ult i32 %1079, 3
  br i1 %1081, label %1082, label %1093

1082:                                             ; preds = %1080
  %1083 = add nuw nsw i32 %1079, 1
  store i32 %1083, ptr %975, align 8, !tbaa !30
  %1084 = zext i32 %1079 to i64
  %1085 = getelementptr inbounds ptr, ptr %982, i64 %1084
  store ptr %1052, ptr %1085, align 8, !tbaa !14
  br label %1094

1086:                                             ; preds = %1077
  %1087 = and i32 %1079, 7
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1093, label %1089

1089:                                             ; preds = %1086
  %1090 = add i32 %1079, 1
  store i32 %1090, ptr %975, align 8, !tbaa !30
  %1091 = zext i32 %1079 to i64
  %1092 = getelementptr inbounds ptr, ptr %1070, i64 %1091
  store ptr %1052, ptr %1092, align 8, !tbaa !14
  br label %1094

1093:                                             ; preds = %1086, %1080
  call void @vec_add_internal(ptr noundef nonnull %975, ptr noundef nonnull %1052) #43
  br label %1094

1094:                                             ; preds = %1093, %1089, %1082, %1072
  %1095 = add nsw i64 %1049, 1
  %1096 = load i32, ptr %959, align 8, !tbaa !30
  %1097 = trunc i64 %1095 to i32
  %1098 = icmp ugt i32 %1096, %1097
  br i1 %1098, label %1046, label %1105

1099:                                             ; preds = %1067
  %.lcssa20 = phi i32 [ %1047, %1067 ]
  %.lcssa18 = phi i32 [ %1048, %1067 ]
  %.lcssa16 = phi i64 [ %1049, %1067 ]
  %1100 = trunc i64 %.lcssa16 to i32
  %1101 = add nsw i64 %994, 1
  %1102 = load i32, ptr %976, align 8, !tbaa !30
  %1103 = trunc i64 %1101 to i32
  %1104 = icmp ugt i32 %1102, %1103
  br i1 %1104, label %991, label %997

1105:                                             ; preds = %1094, %1061, %1041, %997, %974
  %1106 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 2
  %1107 = load i32, ptr %961, align 8, !tbaa !30
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1181, label %1109

1109:                                             ; preds = %1105
  %1110 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1, i32 2
  %1111 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 2, i32 2
  %1112 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 2, i32 3
  br label %1113

1113:                                             ; preds = %1165, %1109
  %1114 = phi i32 [ %1107, %1109 ], [ %1168, %1165 ]
  %1115 = phi i32 [ 0, %1109 ], [ %1167, %1165 ]
  %1116 = phi i32 [ 0, %1109 ], [ %1166, %1165 ]
  %1117 = load i32, ptr %975, align 8, !tbaa !30
  %1118 = icmp ult i32 %1115, %1117
  br i1 %1118, label %1119, label %1181

1119:                                             ; preds = %1113
  %1120 = load ptr, ptr %962, align 8, !tbaa !31
  %1121 = load ptr, ptr %1110, align 8, !tbaa !31
  %1122 = sext i32 %1115 to i64
  br label %1123

1123:                                             ; preds = %1176, %1119
  %1124 = phi i64 [ %1122, %1119 ], [ %1178, %1176 ]
  %1125 = phi i32 [ %1116, %1119 ], [ %1177, %1176 ]
  %1126 = getelementptr inbounds ptr, ptr %1121, i64 %1124
  %1127 = load ptr, ptr %1126, align 8, !tbaa !14
  %1128 = getelementptr inbounds %struct.Action, ptr %1127, i64 0, i32 4
  %1129 = load i32, ptr %1128, align 8, !tbaa !345
  %1130 = sext i32 %1125 to i64
  br label %1131

1131:                                             ; preds = %1172, %1123
  %1132 = phi i64 [ %1130, %1123 ], [ %1173, %1172 ]
  %1133 = getelementptr inbounds ptr, ptr %1120, i64 %1132
  %1134 = load ptr, ptr %1133, align 8, !tbaa !14
  %1135 = getelementptr inbounds %struct.Action, ptr %1134, i64 0, i32 4
  %1136 = load i32, ptr %1135, align 8, !tbaa !345
  %1137 = icmp eq i32 %1136, %1129
  br i1 %1137, label %1138, label %1170

1138:                                             ; preds = %1131
  %.lcssa26 = phi i64 [ %1124, %1131 ]
  %.lcssa24 = phi i64 [ %1132, %1131 ]
  %.lcssa22 = phi ptr [ %1134, %1131 ]
  %1139 = trunc i64 %.lcssa26 to i32
  %1140 = trunc i64 %.lcssa24 to i32
  %1141 = load ptr, ptr %1111, align 8, !tbaa !31
  %1142 = icmp eq ptr %1141, null
  br i1 %1142, label %1143, label %1148

1143:                                             ; preds = %1138
  store ptr %1112, ptr %1111, align 8, !tbaa !31
  %1144 = load i32, ptr %1106, align 8, !tbaa !30
  %1145 = add i32 %1144, 1
  store i32 %1145, ptr %1106, align 8, !tbaa !30
  %1146 = zext i32 %1144 to i64
  %1147 = getelementptr inbounds ptr, ptr %1112, i64 %1146
  store ptr %.lcssa22, ptr %1147, align 8, !tbaa !14
  br label %1165

1148:                                             ; preds = %1138
  %1149 = icmp eq ptr %1141, %1112
  %1150 = load i32, ptr %1106, align 8, !tbaa !30
  br i1 %1149, label %1151, label %1157

1151:                                             ; preds = %1148
  %1152 = icmp ult i32 %1150, 3
  br i1 %1152, label %1153, label %1164

1153:                                             ; preds = %1151
  %1154 = add nuw nsw i32 %1150, 1
  store i32 %1154, ptr %1106, align 8, !tbaa !30
  %1155 = zext i32 %1150 to i64
  %1156 = getelementptr inbounds ptr, ptr %1112, i64 %1155
  store ptr %.lcssa22, ptr %1156, align 8, !tbaa !14
  br label %1165

1157:                                             ; preds = %1148
  %1158 = and i32 %1150, 7
  %1159 = icmp eq i32 %1158, 0
  br i1 %1159, label %1164, label %1160

1160:                                             ; preds = %1157
  %1161 = add i32 %1150, 1
  store i32 %1161, ptr %1106, align 8, !tbaa !30
  %1162 = zext i32 %1150 to i64
  %1163 = getelementptr inbounds ptr, ptr %1141, i64 %1162
  store ptr %.lcssa22, ptr %1163, align 8, !tbaa !14
  br label %1165

1164:                                             ; preds = %1157, %1151
  call void @vec_add_internal(ptr noundef nonnull %1106, ptr noundef nonnull %.lcssa22) #43
  br label %1165

1165:                                             ; preds = %1164, %1160, %1153, %1143
  %1166 = add nsw i32 %1140, 1
  %1167 = add nsw i32 %1139, 1
  %1168 = load i32, ptr %961, align 8, !tbaa !30
  %1169 = icmp ult i32 %1166, %1168
  br i1 %1169, label %1113, label %1181

1170:                                             ; preds = %1131
  %1171 = icmp ult i32 %1136, %1129
  br i1 %1171, label %1172, label %1176

1172:                                             ; preds = %1170
  %1173 = add nsw i64 %1132, 1
  %1174 = trunc i64 %1173 to i32
  %1175 = icmp ugt i32 %1114, %1174
  br i1 %1175, label %1131, label %1181

1176:                                             ; preds = %1170
  %.lcssa25 = phi i64 [ %1132, %1170 ]
  %1177 = trunc i64 %.lcssa25 to i32
  %1178 = add nsw i64 %1124, 1
  %1179 = trunc i64 %1178 to i32
  %1180 = icmp eq i32 %1117, %1179
  br i1 %1180, label %1181, label %1123

1181:                                             ; preds = %1176, %1172, %1165, %1113, %1105, %969
  %1182 = call ptr @set_add_fn(ptr noundef nonnull %952, ptr noundef %970, ptr noundef nonnull @trans_hash_fns) #43
  %1183 = icmp eq ptr %1182, %970
  br i1 %1183, label %1203, label %1184

1184:                                             ; preds = %1181
  %1185 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1
  %1186 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1, i32 2
  %1187 = load ptr, ptr %1186, align 8, !tbaa !346
  %1188 = icmp eq ptr %1187, null
  %1189 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 1, i32 3
  %1190 = icmp eq ptr %1187, %1189
  %1191 = select i1 %1188, i1 true, i1 %1190
  br i1 %1191, label %1193, label %1192

1192:                                             ; preds = %1184
  call void @free(ptr noundef nonnull %1187) #43
  br label %1193

1193:                                             ; preds = %1192, %1184
  store i32 0, ptr %1185, align 8, !tbaa !347
  store ptr null, ptr %1186, align 8, !tbaa !346
  %1194 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 2
  %1195 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 2, i32 2
  %1196 = load ptr, ptr %1195, align 8, !tbaa !348
  %1197 = icmp eq ptr %1196, null
  %1198 = getelementptr inbounds %struct.ScanStateTransition, ptr %970, i64 0, i32 2, i32 3
  %1199 = icmp eq ptr %1196, %1198
  %1200 = select i1 %1197, i1 true, i1 %1199
  br i1 %1200, label %1202, label %1201

1201:                                             ; preds = %1193
  call void @free(ptr noundef nonnull %1196) #43
  br label %1202

1202:                                             ; preds = %1201, %1193
  store i32 0, ptr %1194, align 8, !tbaa !349
  store ptr null, ptr %1195, align 8, !tbaa !348
  br label %1203

1203:                                             ; preds = %1202, %1181
  %1204 = phi ptr [ %970, %1202 ], [ null, %1181 ]
  %1205 = getelementptr inbounds %struct.ScanState, ptr %958, i64 0, i32 4, i64 %964
  store ptr %1182, ptr %1205, align 8, !tbaa !14
  %1206 = add nuw nsw i64 %964, 1
  %1207 = icmp eq i64 %1206, 256
  br i1 %1207, label %1208, label %963, !llvm.loop !350

1208:                                             ; preds = %1203
  %.lcssa27 = phi ptr [ %1204, %1203 ]
  %1209 = add nuw nsw i64 %954, 1
  %1210 = load i32, ptr %671, align 8, !tbaa !30
  %1211 = zext i32 %1210 to i64
  %1212 = icmp ult i64 %1209, %1211
  br i1 %1212, label %953, label %1213, !llvm.loop !351

1213:                                             ; preds = %1208, %949, %948
  %1214 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9, i32 1
  call void @set_to_vec(ptr noundef nonnull %1214) #43
  %1215 = load i32, ptr %1214, align 8, !tbaa !352
  %1216 = icmp eq i32 %1215, 0
  br i1 %1216, label %1228, label %1217

1217:                                             ; preds = %1213
  %1218 = getelementptr inbounds %struct.State, ptr %80, i64 0, i32 9, i32 1, i32 2
  %1219 = load ptr, ptr %1218, align 8, !tbaa !353
  %1220 = zext i32 %1215 to i64
  br label %1221

1221:                                             ; preds = %1221, %1217
  %1222 = phi i64 [ 0, %1217 ], [ %1226, %1221 ]
  %1223 = getelementptr inbounds ptr, ptr %1219, i64 %1222
  %1224 = load ptr, ptr %1223, align 8, !tbaa !14
  %1225 = trunc i64 %1222 to i32
  store i32 %1225, ptr %1224, align 8, !tbaa !123
  %1226 = add nuw nsw i64 %1222, 1
  %1227 = icmp eq i64 %1226, %1220
  br i1 %1227, label %1228, label %1221, !llvm.loop !354

1228:                                             ; preds = %1221, %1213
  %1229 = load i32, ptr %18, align 8, !tbaa !355
  %1230 = add i32 %1229, %1215
  store i32 %1230, ptr %18, align 8, !tbaa !355
  br label %1231

1231:                                             ; preds = %1228, %537, %91
  %1232 = load i32, ptr %19, align 8, !tbaa !30
  %1233 = icmp eq i32 %1232, 0
  br i1 %1233, label %1274, label %1234

1234:                                             ; preds = %1269, %1231
  %1235 = phi i64 [ %1270, %1269 ], [ 0, %1231 ]
  %1236 = load ptr, ptr %20, align 8, !tbaa !31
  %1237 = getelementptr inbounds ptr, ptr %1236, i64 %1235
  %1238 = load ptr, ptr %1237, align 8, !tbaa !14
  br label %1239

1239:                                             ; preds = %1249, %1234
  %1240 = phi i64 [ 0, %1234 ], [ %1250, %1249 ]
  %1241 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 1, i64 %1240
  %1242 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 1, i64 %1240, i32 2
  %1243 = load ptr, ptr %1242, align 8, !tbaa !31
  %1244 = icmp eq ptr %1243, null
  %1245 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 1, i64 %1240, i32 3
  %1246 = icmp eq ptr %1243, %1245
  %1247 = select i1 %1244, i1 true, i1 %1246
  br i1 %1247, label %1249, label %1248

1248:                                             ; preds = %1239
  call void @free(ptr noundef nonnull %1243) #43
  br label %1249

1249:                                             ; preds = %1248, %1239
  store i32 0, ptr %1241, align 8, !tbaa !30
  store ptr null, ptr %1242, align 8, !tbaa !31
  %1250 = add nuw nsw i64 %1240, 1
  %1251 = icmp eq i64 %1250, 256
  br i1 %1251, label %1252, label %1239, !llvm.loop !356

1252:                                             ; preds = %1249
  %1253 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 2
  %1254 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 2, i32 2
  %1255 = load ptr, ptr %1254, align 8, !tbaa !316
  %1256 = icmp eq ptr %1255, null
  %1257 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 2, i32 3
  %1258 = icmp eq ptr %1255, %1257
  %1259 = select i1 %1256, i1 true, i1 %1258
  br i1 %1259, label %1261, label %1260

1260:                                             ; preds = %1252
  call void @free(ptr noundef nonnull %1255) #43
  br label %1261

1261:                                             ; preds = %1260, %1252
  store i32 0, ptr %1253, align 8, !tbaa !317
  store ptr null, ptr %1254, align 8, !tbaa !316
  %1262 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 3, i32 2
  %1263 = load ptr, ptr %1262, align 8, !tbaa !310
  %1264 = icmp eq ptr %1263, null
  %1265 = getelementptr inbounds %struct.NFAState, ptr %1238, i64 0, i32 3, i32 3
  %1266 = icmp eq ptr %1263, %1265
  %1267 = select i1 %1264, i1 true, i1 %1266
  br i1 %1267, label %1269, label %1268

1268:                                             ; preds = %1261
  call void @free(ptr noundef nonnull %1263) #43
  br label %1269

1269:                                             ; preds = %1268, %1261
  call void @free(ptr noundef nonnull %1238) #43
  %1270 = add nuw nsw i64 %1235, 1
  %1271 = load i32, ptr %19, align 8, !tbaa !30
  %1272 = zext i32 %1271 to i64
  %1273 = icmp ult i64 %1270, %1272
  br i1 %1273, label %1234, label %1274, !llvm.loop !357

1274:                                             ; preds = %1269, %1231
  %1275 = load ptr, ptr %20, align 8, !tbaa !31
  %1276 = icmp eq ptr %1275, null
  %1277 = icmp eq ptr %1275, %21
  %1278 = select i1 %1276, i1 true, i1 %1277
  br i1 %1278, label %1280, label %1279

1279:                                             ; preds = %1274
  call void @free(ptr noundef nonnull %1275) #43
  br label %1280

1280:                                             ; preds = %1279, %1274
  store i32 0, ptr %19, align 8, !tbaa !30
  store ptr null, ptr %20, align 8, !tbaa !31
  %1281 = load i32, ptr %22, align 4, !tbaa !358
  %1282 = add i32 %1281, 1
  store i32 %1282, ptr %22, align 4, !tbaa !358
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #45
  br label %1283

1283:                                             ; preds = %1280, %88, %75
  %1284 = phi i32 [ %76, %75 ], [ %1282, %1280 ], [ %76, %88 ]
  %1285 = add nuw nsw i64 %77, 1
  %1286 = load i32, ptr %5, align 8, !tbaa !98
  %1287 = zext i32 %1286 to i64
  %1288 = icmp ult i64 %1285, %1287
  br i1 %1288, label %75, label %1289, !llvm.loop !359

1289:                                             ; preds = %1283, %12, %1
  %1290 = phi i32 [ 0, %12 ], [ 0, %1 ], [ %1284, %1283 ]
  %1291 = load i32, ptr @verbose_level, align 4, !tbaa !15
  %1292 = icmp eq i32 %1291, 0
  br i1 %1292, label %1297, label %1293

1293:                                             ; preds = %1289
  %1294 = getelementptr inbounds %struct.LexState, ptr %4, i64 0, i32 2
  %1295 = load i32, ptr %1294, align 8, !tbaa !355
  %1296 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.236, i32 noundef %1290, i32 noundef %1295) #44
  br label %1297

1297:                                             ; preds = %1293, %1289
  call void @free(ptr noundef %4) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @new_NFAState(ptr noundef %0) unnamed_addr #0 {
  %2 = tail call dereferenceable_or_null(10368) ptr @calloc(i64 1, i64 10368)
  %3 = load i32, ptr %0, align 8, !tbaa !360
  %4 = add i32 %3, 1
  store i32 %4, ptr %0, align 8, !tbaa !360
  store i32 %3, ptr %2, align 8, !tbaa !361
  %5 = getelementptr inbounds %struct.LexState, ptr %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.LexState, ptr %0, i64 0, i32 1, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !362
  %8 = icmp eq ptr %7, null
  %9 = getelementptr inbounds %struct.LexState, ptr %0, i64 0, i32 1, i32 3
  br i1 %8, label %10, label %15

10:                                               ; preds = %1
  store ptr %9, ptr %6, align 8, !tbaa !362
  %11 = load i32, ptr %5, align 8, !tbaa !363
  %12 = add i32 %11, 1
  store i32 %12, ptr %5, align 8, !tbaa !363
  %13 = zext i32 %11 to i64
  %14 = getelementptr inbounds ptr, ptr %9, i64 %13
  store ptr %2, ptr %14, align 8, !tbaa !14
  br label %32

15:                                               ; preds = %1
  %16 = icmp eq ptr %7, %9
  %17 = load i32, ptr %5, align 8, !tbaa !363
  br i1 %16, label %18, label %24

18:                                               ; preds = %15
  %19 = icmp ult i32 %17, 3
  br i1 %19, label %20, label %31

20:                                               ; preds = %18
  %21 = add nuw nsw i32 %17, 1
  store i32 %21, ptr %5, align 8, !tbaa !363
  %22 = zext i32 %17 to i64
  %23 = getelementptr inbounds ptr, ptr %7, i64 %22
  store ptr %2, ptr %23, align 8, !tbaa !14
  br label %32

24:                                               ; preds = %15
  %25 = and i32 %17, 7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %24
  %28 = add i32 %17, 1
  store i32 %28, ptr %5, align 8, !tbaa !363
  %29 = zext i32 %17 to i64
  %30 = getelementptr inbounds ptr, ptr %7, i64 %29
  store ptr %2, ptr %30, align 8, !tbaa !14
  br label %32

31:                                               ; preds = %24, %18
  tail call void @vec_add_internal(ptr noundef nonnull %5, ptr noundef nonnull %2) #43
  br label %32

32:                                               ; preds = %31, %27, %20, %10
  ret ptr %2
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_toupper_loc() local_unnamed_addr #7

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_tolower_loc() local_unnamed_addr #7

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @build_regex_nfa(ptr noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #0 {
  %5 = alloca ptr, align 8
  %6 = alloca [256 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #45
  %7 = load ptr, ptr %1, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %6) #45
  %8 = getelementptr inbounds %struct.NFAState, ptr %2, i64 0, i32 2
  %9 = getelementptr inbounds %struct.NFAState, ptr %2, i64 0, i32 2, i32 2
  %10 = getelementptr inbounds %struct.NFAState, ptr %2, i64 0, i32 2, i32 3
  %11 = getelementptr inbounds %struct.LexState, ptr %0, i64 0, i32 4
  br label %12

12:                                               ; preds = %433, %4
  %13 = phi ptr [ %7, %4 ], [ %436, %433 ]
  %14 = phi ptr [ %2, %4 ], [ %434, %433 ]
  %15 = phi ptr [ %2, %4 ], [ %435, %433 ]
  %16 = getelementptr inbounds i8, ptr %13, i64 1
  store ptr %16, ptr %5, align 8, !tbaa !14
  %17 = load i8, ptr %13, align 1, !tbaa !60
  switch i8 %17, label %278 [
    i8 0, label %437
    i8 40, label %18
    i8 41, label %437
    i8 124, label %20
    i8 91, label %81
    i8 63, label %162
    i8 42, label %190
    i8 43, label %246
    i8 92, label %274
  ]

18:                                               ; preds = %12
  %19 = tail call fastcc ptr @new_NFAState(ptr noundef %0) #44
  call fastcc void @build_regex_nfa(ptr noundef %0, ptr noundef nonnull %5, ptr noundef %14, ptr noundef %19) #44
  br label %433

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2
  %22 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !316
  %24 = icmp eq ptr %23, null
  %25 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2, i32 3
  br i1 %24, label %26, label %31

26:                                               ; preds = %20
  store ptr %25, ptr %22, align 8, !tbaa !316
  %27 = load i32, ptr %21, align 8, !tbaa !317
  %28 = add i32 %27, 1
  store i32 %28, ptr %21, align 8, !tbaa !317
  %29 = zext i32 %27 to i64
  %30 = getelementptr inbounds ptr, ptr %25, i64 %29
  store ptr %3, ptr %30, align 8, !tbaa !14
  br label %48

31:                                               ; preds = %20
  %32 = icmp eq ptr %23, %25
  %33 = load i32, ptr %21, align 8, !tbaa !317
  br i1 %32, label %34, label %40

34:                                               ; preds = %31
  %35 = icmp ult i32 %33, 3
  br i1 %35, label %36, label %47

36:                                               ; preds = %34
  %37 = add nuw nsw i32 %33, 1
  store i32 %37, ptr %21, align 8, !tbaa !317
  %38 = zext i32 %33 to i64
  %39 = getelementptr inbounds ptr, ptr %25, i64 %38
  store ptr %3, ptr %39, align 8, !tbaa !14
  br label %48

40:                                               ; preds = %31
  %41 = and i32 %33, 7
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = add i32 %33, 1
  store i32 %44, ptr %21, align 8, !tbaa !317
  %45 = zext i32 %33 to i64
  %46 = getelementptr inbounds ptr, ptr %23, i64 %45
  store ptr %3, ptr %46, align 8, !tbaa !14
  br label %48

47:                                               ; preds = %40, %34
  tail call void @vec_add_internal(ptr noundef nonnull %21, ptr noundef %3) #43
  br label %48

48:                                               ; preds = %47, %43, %36, %26
  %49 = load ptr, ptr %9, align 8, !tbaa !316
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %57

51:                                               ; preds = %48
  %52 = tail call fastcc ptr @new_NFAState(ptr noundef %0) #44
  store ptr %10, ptr %9, align 8, !tbaa !316
  %53 = load i32, ptr %8, align 8, !tbaa !317
  %54 = add i32 %53, 1
  store i32 %54, ptr %8, align 8, !tbaa !317
  %55 = zext i32 %53 to i64
  %56 = getelementptr inbounds ptr, ptr %10, i64 %55
  store ptr %52, ptr %56, align 8, !tbaa !14
  br label %433

57:                                               ; preds = %48
  %58 = icmp eq ptr %49, %10
  %59 = load i32, ptr %8, align 8, !tbaa !317
  br i1 %58, label %60, label %69

60:                                               ; preds = %57
  %61 = icmp ult i32 %59, 3
  br i1 %61, label %62, label %79

62:                                               ; preds = %60
  %63 = tail call fastcc ptr @new_NFAState(ptr noundef %0) #44
  %64 = load ptr, ptr %9, align 8, !tbaa !316
  %65 = load i32, ptr %8, align 8, !tbaa !317
  %66 = add i32 %65, 1
  store i32 %66, ptr %8, align 8, !tbaa !317
  %67 = zext i32 %65 to i64
  %68 = getelementptr inbounds ptr, ptr %64, i64 %67
  store ptr %63, ptr %68, align 8, !tbaa !14
  br label %433

69:                                               ; preds = %57
  %70 = and i32 %59, 7
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %79, label %72

72:                                               ; preds = %69
  %73 = tail call fastcc ptr @new_NFAState(ptr noundef %0) #44
  %74 = load ptr, ptr %9, align 8, !tbaa !316
  %75 = load i32, ptr %8, align 8, !tbaa !317
  %76 = add i32 %75, 1
  store i32 %76, ptr %8, align 8, !tbaa !317
  %77 = zext i32 %75 to i64
  %78 = getelementptr inbounds ptr, ptr %74, i64 %77
  store ptr %73, ptr %78, align 8, !tbaa !14
  br label %433

79:                                               ; preds = %69, %60
  %80 = tail call fastcc ptr @new_NFAState(ptr noundef %0) #44
  tail call void @vec_add_internal(ptr noundef nonnull %8, ptr noundef %80) #43
  br label %433

81:                                               ; preds = %12
  %82 = load i8, ptr %16, align 1, !tbaa !60
  %83 = icmp eq i8 %82, 94
  br i1 %83, label %84, label %86

84:                                               ; preds = %81
  %85 = getelementptr inbounds i8, ptr %13, i64 2
  store ptr %85, ptr %5, align 8, !tbaa !14
  br label %86

86:                                               ; preds = %84, %81
  %87 = phi ptr [ %16, %81 ], [ %85, %84 ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(256) %6, i8 0, i64 256, i1 false)
  br label %88

88:                                               ; preds = %119, %86
  %89 = phi ptr [ %87, %86 ], [ %120, %119 ]
  %90 = phi i8 [ -1, %86 ], [ %121, %119 ]
  %91 = getelementptr inbounds i8, ptr %89, i64 1
  %92 = load i8, ptr %89, align 1, !tbaa !60
  switch i8 %92, label %114 [
    i8 0, label %122
    i8 93, label %122
    i8 45, label %93
    i8 92, label %111
  ]

93:                                               ; preds = %88
  %94 = getelementptr inbounds i8, ptr %89, i64 2
  %95 = load i8, ptr %91, align 1, !tbaa !60
  switch i8 %95, label %99 [
    i8 0, label %467
    i8 92, label %96
  ]

96:                                               ; preds = %93
  %97 = getelementptr inbounds i8, ptr %89, i64 3
  %98 = load i8, ptr %94, align 1, !tbaa !60
  br label %99

99:                                               ; preds = %96, %93
  %100 = phi ptr [ %97, %96 ], [ %94, %93 ]
  %101 = phi i8 [ %98, %96 ], [ %95, %93 ]
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %467, label %103

103:                                              ; preds = %99
  %104 = icmp ugt i8 %90, %101
  br i1 %104, label %119, label %105

105:                                              ; preds = %105, %103
  %106 = phi i8 [ %109, %105 ], [ %90, %103 ]
  %107 = zext i8 %106 to i64
  %108 = getelementptr inbounds [256 x i8], ptr %6, i64 0, i64 %107
  store i8 1, ptr %108, align 1, !tbaa !60
  %109 = add i8 %106, 1
  %110 = icmp ugt i8 %109, %101
  br i1 %110, label %119, label %105, !llvm.loop !364

111:                                              ; preds = %88
  %112 = getelementptr inbounds i8, ptr %89, i64 2
  %113 = load i8, ptr %91, align 1, !tbaa !60
  br label %114

114:                                              ; preds = %111, %88
  %115 = phi ptr [ %112, %111 ], [ %91, %88 ]
  %116 = phi i8 [ %113, %111 ], [ %92, %88 ]
  %117 = zext i8 %116 to i64
  %118 = getelementptr inbounds [256 x i8], ptr %6, i64 0, i64 %117
  store i8 1, ptr %118, align 1, !tbaa !60
  br label %119

119:                                              ; preds = %114, %105, %103
  %120 = phi ptr [ %115, %114 ], [ %100, %103 ], [ %100, %105 ]
  %121 = phi i8 [ %116, %114 ], [ %90, %103 ], [ %109, %105 ]
  br label %88, !llvm.loop !365

122:                                              ; preds = %88, %88
  %.lcssa = phi ptr [ %91, %88 ], [ %91, %88 ]
  store ptr %.lcssa, ptr %5, align 8, !tbaa !14
  %123 = tail call fastcc ptr @new_NFAState(ptr noundef %0) #44
  br label %124

124:                                              ; preds = %159, %122
  %125 = phi i64 [ 1, %122 ], [ %160, %159 ]
  %126 = getelementptr inbounds [256 x i8], ptr %6, i64 0, i64 %125
  %127 = load i8, ptr %126, align 1, !tbaa !60
  %128 = icmp eq i8 %127, 0
  br i1 %83, label %130, label %129

129:                                              ; preds = %124
  br i1 %128, label %159, label %131

130:                                              ; preds = %124
  br i1 %128, label %131, label %159

131:                                              ; preds = %130, %129
  %132 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %125
  %133 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %125, i32 2
  %134 = load ptr, ptr %133, align 8, !tbaa !31
  %135 = icmp eq ptr %134, null
  %136 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %125, i32 3
  br i1 %135, label %137, label %142

137:                                              ; preds = %131
  store ptr %136, ptr %133, align 8, !tbaa !31
  %138 = load i32, ptr %132, align 8, !tbaa !30
  %139 = add i32 %138, 1
  store i32 %139, ptr %132, align 8, !tbaa !30
  %140 = zext i32 %138 to i64
  %141 = getelementptr inbounds ptr, ptr %136, i64 %140
  store ptr %123, ptr %141, align 8, !tbaa !14
  br label %159

142:                                              ; preds = %131
  %143 = icmp eq ptr %134, %136
  %144 = load i32, ptr %132, align 8, !tbaa !30
  br i1 %143, label %145, label %151

145:                                              ; preds = %142
  %146 = icmp ult i32 %144, 3
  br i1 %146, label %147, label %158

147:                                              ; preds = %145
  %148 = add nuw nsw i32 %144, 1
  store i32 %148, ptr %132, align 8, !tbaa !30
  %149 = zext i32 %144 to i64
  %150 = getelementptr inbounds ptr, ptr %134, i64 %149
  store ptr %123, ptr %150, align 8, !tbaa !14
  br label %159

151:                                              ; preds = %142
  %152 = and i32 %144, 7
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %151
  %155 = add i32 %144, 1
  store i32 %155, ptr %132, align 8, !tbaa !30
  %156 = zext i32 %144 to i64
  %157 = getelementptr inbounds ptr, ptr %134, i64 %156
  store ptr %123, ptr %157, align 8, !tbaa !14
  br label %159

158:                                              ; preds = %151, %145
  tail call void @vec_add_internal(ptr noundef nonnull %132, ptr noundef %123) #43
  br label %159

159:                                              ; preds = %158, %154, %147, %137, %130, %129
  %160 = add nuw nsw i64 %125, 1
  %161 = icmp eq i64 %160, 256
  br i1 %161, label %433, label %124, !llvm.loop !366

162:                                              ; preds = %12
  %163 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2
  %164 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2, i32 2
  %165 = load ptr, ptr %164, align 8, !tbaa !316
  %166 = icmp eq ptr %165, null
  %167 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2, i32 3
  br i1 %166, label %168, label %173

168:                                              ; preds = %162
  store ptr %167, ptr %164, align 8, !tbaa !316
  %169 = load i32, ptr %163, align 8, !tbaa !317
  %170 = add i32 %169, 1
  store i32 %170, ptr %163, align 8, !tbaa !317
  %171 = zext i32 %169 to i64
  %172 = getelementptr inbounds ptr, ptr %167, i64 %171
  store ptr %14, ptr %172, align 8, !tbaa !14
  br label %433

173:                                              ; preds = %162
  %174 = icmp eq ptr %165, %167
  %175 = load i32, ptr %163, align 8, !tbaa !317
  br i1 %174, label %176, label %182

176:                                              ; preds = %173
  %177 = icmp ult i32 %175, 3
  br i1 %177, label %178, label %189

178:                                              ; preds = %176
  %179 = add nuw nsw i32 %175, 1
  store i32 %179, ptr %163, align 8, !tbaa !317
  %180 = zext i32 %175 to i64
  %181 = getelementptr inbounds ptr, ptr %167, i64 %180
  store ptr %14, ptr %181, align 8, !tbaa !14
  br label %433

182:                                              ; preds = %173
  %183 = and i32 %175, 7
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %189, label %185

185:                                              ; preds = %182
  %186 = add i32 %175, 1
  store i32 %186, ptr %163, align 8, !tbaa !317
  %187 = zext i32 %175 to i64
  %188 = getelementptr inbounds ptr, ptr %165, i64 %187
  store ptr %14, ptr %188, align 8, !tbaa !14
  br label %433

189:                                              ; preds = %182, %176
  tail call void @vec_add_internal(ptr noundef nonnull %163, ptr noundef %14) #43
  br label %433

190:                                              ; preds = %12
  %191 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2
  %192 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !316
  %194 = icmp eq ptr %193, null
  %195 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2, i32 3
  br i1 %194, label %196, label %201

196:                                              ; preds = %190
  store ptr %195, ptr %192, align 8, !tbaa !316
  %197 = load i32, ptr %191, align 8, !tbaa !317
  %198 = add i32 %197, 1
  store i32 %198, ptr %191, align 8, !tbaa !317
  %199 = zext i32 %197 to i64
  %200 = getelementptr inbounds ptr, ptr %195, i64 %199
  store ptr %14, ptr %200, align 8, !tbaa !14
  br label %218

201:                                              ; preds = %190
  %202 = icmp eq ptr %193, %195
  %203 = load i32, ptr %191, align 8, !tbaa !317
  br i1 %202, label %204, label %210

204:                                              ; preds = %201
  %205 = icmp ult i32 %203, 3
  br i1 %205, label %206, label %217

206:                                              ; preds = %204
  %207 = add nuw nsw i32 %203, 1
  store i32 %207, ptr %191, align 8, !tbaa !317
  %208 = zext i32 %203 to i64
  %209 = getelementptr inbounds ptr, ptr %193, i64 %208
  store ptr %14, ptr %209, align 8, !tbaa !14
  br label %218

210:                                              ; preds = %201
  %211 = and i32 %203, 7
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %217, label %213

213:                                              ; preds = %210
  %214 = add i32 %203, 1
  store i32 %214, ptr %191, align 8, !tbaa !317
  %215 = zext i32 %203 to i64
  %216 = getelementptr inbounds ptr, ptr %193, i64 %215
  store ptr %14, ptr %216, align 8, !tbaa !14
  br label %218

217:                                              ; preds = %210, %204
  tail call void @vec_add_internal(ptr noundef nonnull %191, ptr noundef %14) #43
  br label %218

218:                                              ; preds = %217, %213, %206, %196
  %219 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2
  %220 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2, i32 2
  %221 = load ptr, ptr %220, align 8, !tbaa !316
  %222 = icmp eq ptr %221, null
  %223 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2, i32 3
  br i1 %222, label %224, label %229

224:                                              ; preds = %218
  store ptr %223, ptr %220, align 8, !tbaa !316
  %225 = load i32, ptr %219, align 8, !tbaa !317
  %226 = add i32 %225, 1
  store i32 %226, ptr %219, align 8, !tbaa !317
  %227 = zext i32 %225 to i64
  %228 = getelementptr inbounds ptr, ptr %223, i64 %227
  store ptr %15, ptr %228, align 8, !tbaa !14
  br label %433

229:                                              ; preds = %218
  %230 = icmp eq ptr %221, %223
  %231 = load i32, ptr %219, align 8, !tbaa !317
  br i1 %230, label %232, label %238

232:                                              ; preds = %229
  %233 = icmp ult i32 %231, 3
  br i1 %233, label %234, label %245

234:                                              ; preds = %232
  %235 = add nuw nsw i32 %231, 1
  store i32 %235, ptr %219, align 8, !tbaa !317
  %236 = zext i32 %231 to i64
  %237 = getelementptr inbounds ptr, ptr %223, i64 %236
  store ptr %15, ptr %237, align 8, !tbaa !14
  br label %433

238:                                              ; preds = %229
  %239 = and i32 %231, 7
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %245, label %241

241:                                              ; preds = %238
  %242 = add i32 %231, 1
  store i32 %242, ptr %219, align 8, !tbaa !317
  %243 = zext i32 %231 to i64
  %244 = getelementptr inbounds ptr, ptr %221, i64 %243
  store ptr %15, ptr %244, align 8, !tbaa !14
  br label %433

245:                                              ; preds = %238, %232
  tail call void @vec_add_internal(ptr noundef nonnull %219, ptr noundef nonnull %15) #43
  br label %433

246:                                              ; preds = %12
  %247 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2
  %248 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2, i32 2
  %249 = load ptr, ptr %248, align 8, !tbaa !316
  %250 = icmp eq ptr %249, null
  %251 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 2, i32 3
  br i1 %250, label %252, label %257

252:                                              ; preds = %246
  store ptr %251, ptr %248, align 8, !tbaa !316
  %253 = load i32, ptr %247, align 8, !tbaa !317
  %254 = add i32 %253, 1
  store i32 %254, ptr %247, align 8, !tbaa !317
  %255 = zext i32 %253 to i64
  %256 = getelementptr inbounds ptr, ptr %251, i64 %255
  store ptr %15, ptr %256, align 8, !tbaa !14
  br label %433

257:                                              ; preds = %246
  %258 = icmp eq ptr %249, %251
  %259 = load i32, ptr %247, align 8, !tbaa !317
  br i1 %258, label %260, label %266

260:                                              ; preds = %257
  %261 = icmp ult i32 %259, 3
  br i1 %261, label %262, label %273

262:                                              ; preds = %260
  %263 = add nuw nsw i32 %259, 1
  store i32 %263, ptr %247, align 8, !tbaa !317
  %264 = zext i32 %259 to i64
  %265 = getelementptr inbounds ptr, ptr %249, i64 %264
  store ptr %15, ptr %265, align 8, !tbaa !14
  br label %433

266:                                              ; preds = %257
  %267 = and i32 %259, 7
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %273, label %269

269:                                              ; preds = %266
  %270 = add i32 %259, 1
  store i32 %270, ptr %247, align 8, !tbaa !317
  %271 = zext i32 %259 to i64
  %272 = getelementptr inbounds ptr, ptr %249, i64 %271
  store ptr %15, ptr %272, align 8, !tbaa !14
  br label %433

273:                                              ; preds = %266, %260
  tail call void @vec_add_internal(ptr noundef nonnull %247, ptr noundef %15) #43
  br label %433

274:                                              ; preds = %12
  %275 = getelementptr inbounds i8, ptr %13, i64 2
  store ptr %275, ptr %5, align 8, !tbaa !14
  %276 = load i8, ptr %16, align 1, !tbaa !60
  %277 = icmp eq i8 %276, 0
  br i1 %277, label %467, label %278

278:                                              ; preds = %274, %12
  %279 = phi i8 [ %276, %274 ], [ %17, %12 ]
  %280 = load i32, ptr %11, align 8, !tbaa !318
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %284

282:                                              ; preds = %278
  %283 = zext i8 %279 to i64
  br label %292

284:                                              ; preds = %278
  %285 = tail call ptr @__ctype_b_loc() #49
  %286 = load ptr, ptr %285, align 8, !tbaa !14
  %287 = zext i8 %279 to i64
  %288 = getelementptr inbounds i16, ptr %286, i64 %287
  %289 = load i16, ptr %288, align 2, !tbaa !61
  %290 = and i16 %289, 1024
  %291 = icmp eq i16 %290, 0
  br i1 %291, label %292, label %330

292:                                              ; preds = %284, %282
  %293 = phi i64 [ %283, %282 ], [ %287, %284 ]
  %294 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %293
  %295 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %293, i32 2
  %296 = load ptr, ptr %295, align 8, !tbaa !31
  %297 = icmp eq ptr %296, null
  br i1 %297, label %298, label %305

298:                                              ; preds = %292
  %299 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  %300 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %293, i32 3
  store ptr %300, ptr %295, align 8, !tbaa !31
  %301 = load i32, ptr %294, align 8, !tbaa !30
  %302 = add i32 %301, 1
  store i32 %302, ptr %294, align 8, !tbaa !30
  %303 = zext i32 %301 to i64
  %304 = getelementptr inbounds ptr, ptr %300, i64 %303
  store ptr %299, ptr %304, align 8, !tbaa !14
  br label %433

305:                                              ; preds = %292
  %306 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %293, i32 3
  %307 = icmp eq ptr %296, %306
  %308 = load i32, ptr %294, align 8, !tbaa !30
  br i1 %307, label %309, label %318

309:                                              ; preds = %305
  %310 = icmp ult i32 %308, 3
  br i1 %310, label %311, label %328

311:                                              ; preds = %309
  %312 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  %313 = load ptr, ptr %295, align 8, !tbaa !31
  %314 = load i32, ptr %294, align 8, !tbaa !30
  %315 = add i32 %314, 1
  store i32 %315, ptr %294, align 8, !tbaa !30
  %316 = zext i32 %314 to i64
  %317 = getelementptr inbounds ptr, ptr %313, i64 %316
  store ptr %312, ptr %317, align 8, !tbaa !14
  br label %433

318:                                              ; preds = %305
  %319 = and i32 %308, 7
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %328, label %321

321:                                              ; preds = %318
  %322 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  %323 = load ptr, ptr %295, align 8, !tbaa !31
  %324 = load i32, ptr %294, align 8, !tbaa !30
  %325 = add i32 %324, 1
  store i32 %325, ptr %294, align 8, !tbaa !30
  %326 = zext i32 %324 to i64
  %327 = getelementptr inbounds ptr, ptr %323, i64 %326
  store ptr %322, ptr %327, align 8, !tbaa !14
  br label %433

328:                                              ; preds = %318, %309
  %329 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  tail call void @vec_add_internal(ptr noundef nonnull %294, ptr noundef %329) #43
  br label %433

330:                                              ; preds = %284
  %331 = tail call ptr @__ctype_tolower_loc() #49
  %332 = load ptr, ptr %331, align 8, !tbaa !14
  %333 = getelementptr inbounds i32, ptr %332, i64 %287
  %334 = load i32, ptr %333, align 4, !tbaa !15
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %335
  %337 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %335, i32 2
  %338 = load ptr, ptr %337, align 8, !tbaa !31
  %339 = icmp eq ptr %338, null
  br i1 %339, label %340, label %357

340:                                              ; preds = %330
  %341 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  %342 = load ptr, ptr %331, align 8, !tbaa !14
  %343 = getelementptr inbounds i32, ptr %342, i64 %287
  %344 = load i32, ptr %343, align 4, !tbaa !15
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %345, i32 3
  %347 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %345, i32 2
  store ptr %346, ptr %347, align 8, !tbaa !31
  %348 = load ptr, ptr %331, align 8, !tbaa !14
  %349 = getelementptr inbounds i32, ptr %348, i64 %287
  %350 = load i32, ptr %349, align 4, !tbaa !15
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %351
  %353 = load i32, ptr %352, align 8, !tbaa !30
  %354 = add i32 %353, 1
  store i32 %354, ptr %352, align 8, !tbaa !30
  %355 = zext i32 %353 to i64
  %356 = getelementptr inbounds ptr, ptr %346, i64 %355
  store ptr %341, ptr %356, align 8, !tbaa !14
  br label %394

357:                                              ; preds = %330
  %358 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %335, i32 3
  %359 = icmp eq ptr %338, %358
  %360 = load i32, ptr %336, align 8, !tbaa !30
  br i1 %359, label %361, label %376

361:                                              ; preds = %357
  %362 = icmp ult i32 %360, 3
  br i1 %362, label %363, label %392

363:                                              ; preds = %361
  %364 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  %365 = load ptr, ptr %331, align 8, !tbaa !14
  %366 = getelementptr inbounds i32, ptr %365, i64 %287
  %367 = load i32, ptr %366, align 4, !tbaa !15
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %368
  %370 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %368, i32 2
  %371 = load ptr, ptr %370, align 8, !tbaa !31
  %372 = load i32, ptr %369, align 8, !tbaa !30
  %373 = add i32 %372, 1
  store i32 %373, ptr %369, align 8, !tbaa !30
  %374 = zext i32 %372 to i64
  %375 = getelementptr inbounds ptr, ptr %371, i64 %374
  store ptr %364, ptr %375, align 8, !tbaa !14
  br label %394

376:                                              ; preds = %357
  %377 = and i32 %360, 7
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %392, label %379

379:                                              ; preds = %376
  %380 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  %381 = load ptr, ptr %331, align 8, !tbaa !14
  %382 = getelementptr inbounds i32, ptr %381, i64 %287
  %383 = load i32, ptr %382, align 4, !tbaa !15
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %384
  %386 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %384, i32 2
  %387 = load ptr, ptr %386, align 8, !tbaa !31
  %388 = load i32, ptr %385, align 8, !tbaa !30
  %389 = add i32 %388, 1
  store i32 %389, ptr %385, align 8, !tbaa !30
  %390 = zext i32 %388 to i64
  %391 = getelementptr inbounds ptr, ptr %387, i64 %390
  store ptr %380, ptr %391, align 8, !tbaa !14
  br label %394

392:                                              ; preds = %376, %361
  %393 = tail call fastcc ptr @new_NFAState(ptr noundef nonnull %0) #44
  tail call void @vec_add_internal(ptr noundef nonnull %336, ptr noundef %393) #43
  br label %394

394:                                              ; preds = %392, %379, %363, %340
  %395 = phi ptr [ %364, %363 ], [ %393, %392 ], [ %380, %379 ], [ %341, %340 ]
  %396 = tail call ptr @__ctype_toupper_loc() #49
  %397 = load ptr, ptr %396, align 8, !tbaa !14
  %398 = getelementptr inbounds i32, ptr %397, i64 %287
  %399 = load i32, ptr %398, align 4, !tbaa !15
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %400
  %402 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %400, i32 2
  %403 = load ptr, ptr %402, align 8, !tbaa !31
  %404 = icmp eq ptr %403, null
  %405 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %400, i32 3
  br i1 %404, label %406, label %416

406:                                              ; preds = %394
  store ptr %405, ptr %402, align 8, !tbaa !31
  %407 = load ptr, ptr %396, align 8, !tbaa !14
  %408 = getelementptr inbounds i32, ptr %407, i64 %287
  %409 = load i32, ptr %408, align 4, !tbaa !15
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.NFAState, ptr %14, i64 0, i32 1, i64 %410
  %412 = load i32, ptr %411, align 8, !tbaa !30
  %413 = add i32 %412, 1
  store i32 %413, ptr %411, align 8, !tbaa !30
  %414 = zext i32 %412 to i64
  %415 = getelementptr inbounds ptr, ptr %405, i64 %414
  store ptr %395, ptr %415, align 8, !tbaa !14
  br label %433

416:                                              ; preds = %394
  %417 = icmp eq ptr %403, %405
  %418 = load i32, ptr %401, align 8, !tbaa !30
  br i1 %417, label %419, label %425

419:                                              ; preds = %416
  %420 = icmp ult i32 %418, 3
  br i1 %420, label %421, label %432

421:                                              ; preds = %419
  %422 = add nuw nsw i32 %418, 1
  store i32 %422, ptr %401, align 8, !tbaa !30
  %423 = zext i32 %418 to i64
  %424 = getelementptr inbounds ptr, ptr %403, i64 %423
  store ptr %395, ptr %424, align 8, !tbaa !14
  br label %433

425:                                              ; preds = %416
  %426 = and i32 %418, 7
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %432, label %428

428:                                              ; preds = %425
  %429 = add i32 %418, 1
  store i32 %429, ptr %401, align 8, !tbaa !30
  %430 = zext i32 %418 to i64
  %431 = getelementptr inbounds ptr, ptr %403, i64 %430
  store ptr %395, ptr %431, align 8, !tbaa !14
  br label %433

432:                                              ; preds = %425, %419
  tail call void @vec_add_internal(ptr noundef nonnull %401, ptr noundef %395) #43
  br label %433

433:                                              ; preds = %432, %428, %421, %406, %328, %321, %311, %298, %273, %269, %262, %252, %245, %241, %234, %224, %189, %185, %178, %168, %159, %79, %72, %62, %51, %18
  %434 = phi ptr [ %14, %262 ], [ %14, %273 ], [ %14, %269 ], [ %14, %252 ], [ %14, %234 ], [ %14, %245 ], [ %14, %241 ], [ %14, %224 ], [ %14, %178 ], [ %14, %189 ], [ %14, %185 ], [ %14, %168 ], [ %63, %62 ], [ %80, %79 ], [ %73, %72 ], [ %52, %51 ], [ %19, %18 ], [ %395, %421 ], [ %395, %432 ], [ %395, %428 ], [ %395, %406 ], [ %312, %311 ], [ %329, %328 ], [ %322, %321 ], [ %299, %298 ], [ %123, %159 ]
  %435 = phi ptr [ %15, %262 ], [ %15, %273 ], [ %15, %269 ], [ %15, %252 ], [ %15, %234 ], [ %15, %245 ], [ %15, %241 ], [ %15, %224 ], [ %15, %178 ], [ %15, %189 ], [ %15, %185 ], [ %15, %168 ], [ %15, %62 ], [ %15, %79 ], [ %15, %72 ], [ %15, %51 ], [ %14, %18 ], [ %14, %421 ], [ %14, %432 ], [ %14, %428 ], [ %14, %406 ], [ %14, %311 ], [ %14, %328 ], [ %14, %321 ], [ %14, %298 ], [ %14, %159 ]
  %436 = load ptr, ptr %5, align 8, !tbaa !14
  br label %12, !llvm.loop !367

437:                                              ; preds = %12, %12
  %.lcssa1 = phi ptr [ %14, %12 ], [ %14, %12 ]
  %438 = getelementptr inbounds %struct.NFAState, ptr %.lcssa1, i64 0, i32 2
  %439 = getelementptr inbounds %struct.NFAState, ptr %.lcssa1, i64 0, i32 2, i32 2
  %440 = load ptr, ptr %439, align 8, !tbaa !316
  %441 = icmp eq ptr %440, null
  %442 = getelementptr inbounds %struct.NFAState, ptr %.lcssa1, i64 0, i32 2, i32 3
  br i1 %441, label %443, label %448

443:                                              ; preds = %437
  store ptr %442, ptr %439, align 8, !tbaa !316
  %444 = load i32, ptr %438, align 8, !tbaa !317
  %445 = add i32 %444, 1
  store i32 %445, ptr %438, align 8, !tbaa !317
  %446 = zext i32 %444 to i64
  %447 = getelementptr inbounds ptr, ptr %442, i64 %446
  store ptr %3, ptr %447, align 8, !tbaa !14
  br label %465

448:                                              ; preds = %437
  %449 = icmp eq ptr %440, %442
  %450 = load i32, ptr %438, align 8, !tbaa !317
  br i1 %449, label %451, label %457

451:                                              ; preds = %448
  %452 = icmp ult i32 %450, 3
  br i1 %452, label %453, label %464

453:                                              ; preds = %451
  %454 = add nuw nsw i32 %450, 1
  store i32 %454, ptr %438, align 8, !tbaa !317
  %455 = zext i32 %450 to i64
  %456 = getelementptr inbounds ptr, ptr %442, i64 %455
  store ptr %3, ptr %456, align 8, !tbaa !14
  br label %465

457:                                              ; preds = %448
  %458 = and i32 %450, 7
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %464, label %460

460:                                              ; preds = %457
  %461 = add i32 %450, 1
  store i32 %461, ptr %438, align 8, !tbaa !317
  %462 = zext i32 %450 to i64
  %463 = getelementptr inbounds ptr, ptr %440, i64 %462
  store ptr %3, ptr %463, align 8, !tbaa !14
  br label %465

464:                                              ; preds = %457, %451
  tail call void @vec_add_internal(ptr noundef nonnull %438, ptr noundef %3) #43
  br label %465

465:                                              ; preds = %464, %460, %453, %443
  %466 = load ptr, ptr %5, align 8, !tbaa !14
  store ptr %466, ptr %1, align 8, !tbaa !14
  br label %469

467:                                              ; preds = %274, %99, %93
  %468 = load ptr, ptr %1, align 8, !tbaa !14
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.1.237, ptr noundef %468) #43
  br label %469

469:                                              ; preds = %467, %465
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %6) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #45
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @nfa_closure(ptr noundef %0) unnamed_addr #0 {
  %2 = load i32, ptr %0, align 8, !tbaa !323
  %3 = icmp eq i32 %2, 0
  %4 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  br i1 %3, label %5, label %7

5:                                                ; preds = %1
  %6 = load ptr, ptr %4, align 8, !tbaa !321
  br label %86

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 3
  %9 = load ptr, ptr %4, align 8, !tbaa !321
  br label %10

10:                                               ; preds = %80, %7
  %11 = phi i32 [ %2, %7 ], [ %81, %80 ]
  %12 = phi ptr [ %9, %7 ], [ %82, %80 ]
  %13 = phi i64 [ 0, %7 ], [ %83, %80 ]
  %14 = getelementptr inbounds ptr, ptr %12, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  %16 = getelementptr inbounds %struct.NFAState, ptr %15, i64 0, i32 2
  %17 = load i32, ptr %16, align 8, !tbaa !317
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %80, label %19

19:                                               ; preds = %69, %10
  %20 = phi i64 [ %70, %69 ], [ 0, %10 ]
  %21 = phi ptr [ %73, %69 ], [ %15, %10 ]
  %22 = phi ptr [ %71, %69 ], [ %12, %10 ]
  %23 = load i32, ptr %0, align 8, !tbaa !323
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.NFAState, ptr %21, i64 0, i32 2, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !316
  %28 = getelementptr inbounds ptr, ptr %27, i64 %20
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = zext i32 %23 to i64
  br label %34

31:                                               ; preds = %34
  %32 = add nuw nsw i64 %35, 1
  %33 = icmp eq i64 %32, %30
  br i1 %33, label %39, label %34, !llvm.loop !368

34:                                               ; preds = %31, %25
  %35 = phi i64 [ 0, %25 ], [ %32, %31 ]
  %36 = getelementptr inbounds ptr, ptr %22, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !14
  %38 = icmp eq ptr %29, %37
  br i1 %38, label %69, label %31

39:                                               ; preds = %31
  %40 = icmp eq ptr %22, %8
  br i1 %40, label %43, label %53

41:                                               ; preds = %19
  %42 = icmp eq ptr %22, %8
  br i1 %42, label %45, label %64

43:                                               ; preds = %39
  %44 = icmp ult i32 %23, 3
  br i1 %44, label %45, label %64

45:                                               ; preds = %43, %41
  %46 = getelementptr inbounds %struct.NFAState, ptr %21, i64 0, i32 2, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !316
  %48 = getelementptr inbounds ptr, ptr %47, i64 %20
  %49 = load ptr, ptr %48, align 8, !tbaa !14
  %50 = add nuw nsw i32 %23, 1
  store i32 %50, ptr %0, align 8, !tbaa !323
  %51 = zext i32 %23 to i64
  %52 = getelementptr inbounds ptr, ptr %8, i64 %51
  store ptr %49, ptr %52, align 8, !tbaa !14
  br label %69

53:                                               ; preds = %39
  %54 = and i32 %23, 7
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.NFAState, ptr %21, i64 0, i32 2, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !316
  %59 = getelementptr inbounds ptr, ptr %58, i64 %20
  %60 = load ptr, ptr %59, align 8, !tbaa !14
  %61 = add i32 %23, 1
  store i32 %61, ptr %0, align 8, !tbaa !323
  %62 = zext i32 %23 to i64
  %63 = getelementptr inbounds ptr, ptr %22, i64 %62
  store ptr %60, ptr %63, align 8, !tbaa !14
  br label %69

64:                                               ; preds = %53, %43, %41
  %65 = getelementptr inbounds %struct.NFAState, ptr %21, i64 0, i32 2, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !316
  %67 = getelementptr inbounds ptr, ptr %66, i64 %20
  %68 = load ptr, ptr %67, align 8, !tbaa !14
  tail call void @vec_add_internal(ptr noundef nonnull %0, ptr noundef %68) #43
  br label %69

69:                                               ; preds = %64, %56, %45, %34
  %70 = add nuw nsw i64 %20, 1
  %71 = load ptr, ptr %4, align 8, !tbaa !321
  %72 = getelementptr inbounds ptr, ptr %71, i64 %13
  %73 = load ptr, ptr %72, align 8, !tbaa !14
  %74 = getelementptr inbounds %struct.NFAState, ptr %73, i64 0, i32 2
  %75 = load i32, ptr %74, align 8, !tbaa !317
  %76 = zext i32 %75 to i64
  %77 = icmp ult i64 %70, %76
  br i1 %77, label %19, label %78, !llvm.loop !369

78:                                               ; preds = %69
  %.lcssa = phi ptr [ %71, %69 ]
  %79 = load i32, ptr %0, align 8, !tbaa !323
  br label %80

80:                                               ; preds = %78, %10
  %81 = phi i32 [ %79, %78 ], [ %11, %10 ]
  %82 = phi ptr [ %.lcssa, %78 ], [ %12, %10 ]
  %83 = add nuw nsw i64 %13, 1
  %84 = zext i32 %81 to i64
  %85 = icmp ult i64 %83, %84
  br i1 %85, label %10, label %86, !llvm.loop !370

86:                                               ; preds = %80, %5
  %87 = phi ptr [ %6, %5 ], [ %82, %80 ]
  %88 = phi i32 [ 0, %5 ], [ %81, %80 ]
  %89 = zext i32 %88 to i64
  tail call void @qsort(ptr noundef %87, i64 noundef %89, i64 noundef 8, ptr noundef nonnull @nfacmp) #43
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal fastcc void @free_DFAState(ptr noundef %0) unnamed_addr #23 {
  %2 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !321
  %4 = icmp eq ptr %3, null
  %5 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 3
  %6 = icmp eq ptr %3, %5
  %7 = select i1 %4, i1 true, i1 %6
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %3) #43
  br label %9

9:                                                ; preds = %8, %1
  tail call void @free(ptr noundef nonnull %0) #43
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #9

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @trans_hash_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #16 {
  %3 = getelementptr inbounds %struct.hash_fns_t, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !14
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %25

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !347
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %25, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 1, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !346
  %13 = zext i32 %8 to i64
  br label %14

14:                                               ; preds = %14, %10
  %15 = phi i64 [ 0, %10 ], [ %23, %14 ]
  %16 = phi i32 [ 0, %10 ], [ %22, %14 ]
  %17 = getelementptr inbounds ptr, ptr %12, i64 %15
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  %19 = getelementptr inbounds %struct.Action, ptr %18, i64 0, i32 4
  %20 = load i32, ptr %19, align 8, !tbaa !345
  %21 = mul i32 %20, 3
  %22 = add i32 %21, %16
  %23 = add nuw nsw i64 %15, 1
  %24 = icmp eq i64 %23, %13
  br i1 %24, label %25, label %14, !llvm.loop !371

25:                                               ; preds = %14, %6, %2
  %26 = phi i32 [ 0, %2 ], [ 0, %6 ], [ %22, %14 ]
  %27 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 2
  %28 = load i32, ptr %27, align 8, !tbaa !349
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %45, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 2, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !348
  %33 = zext i32 %28 to i64
  br label %34

34:                                               ; preds = %34, %30
  %35 = phi i64 [ 0, %30 ], [ %43, %34 ]
  %36 = phi i32 [ %26, %30 ], [ %42, %34 ]
  %37 = getelementptr inbounds ptr, ptr %32, i64 %35
  %38 = load ptr, ptr %37, align 8, !tbaa !14
  %39 = getelementptr inbounds %struct.Action, ptr %38, i64 0, i32 4
  %40 = load i32, ptr %39, align 8, !tbaa !345
  %41 = mul i32 %40, 3
  %42 = add i32 %41, %36
  %43 = add nuw nsw i64 %35, 1
  %44 = icmp eq i64 %43, %33
  br i1 %44, label %45, label %34, !llvm.loop !372

45:                                               ; preds = %34, %25
  %46 = phi i32 [ %26, %25 ], [ %42, %34 ]
  ret i32 %46
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @trans_cmp_fn(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #16 {
  %4 = getelementptr inbounds %struct.hash_fns_t, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %27

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !347
  %10 = getelementptr inbounds %struct.ScanStateTransition, ptr %1, i64 0, i32 1
  %11 = load i32, ptr %10, align 8, !tbaa !347
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %62

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !349
  %16 = getelementptr inbounds %struct.ScanStateTransition, ptr %1, i64 0, i32 2
  %17 = load i32, ptr %16, align 8, !tbaa !349
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %62

19:                                               ; preds = %13
  %20 = icmp eq i32 %9, 0
  br i1 %20, label %43, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 1, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !346
  %24 = getelementptr inbounds %struct.ScanStateTransition, ptr %1, i64 0, i32 1, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !346
  %26 = zext i32 %9 to i64
  br label %36

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 2
  %29 = load i32, ptr %28, align 8, !tbaa !349
  %30 = getelementptr inbounds %struct.ScanStateTransition, ptr %1, i64 0, i32 2
  %31 = load i32, ptr %30, align 8, !tbaa !349
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %43, label %62

33:                                               ; preds = %36
  %34 = add nuw nsw i64 %37, 1
  %35 = icmp eq i64 %34, %26
  br i1 %35, label %43, label %36, !llvm.loop !373

36:                                               ; preds = %33, %21
  %37 = phi i64 [ 0, %21 ], [ %34, %33 ]
  %38 = getelementptr inbounds ptr, ptr %23, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = getelementptr inbounds ptr, ptr %25, i64 %37
  %41 = load ptr, ptr %40, align 8, !tbaa !14
  %42 = icmp eq ptr %39, %41
  br i1 %42, label %33, label %62

43:                                               ; preds = %33, %27, %19
  %44 = phi i32 [ %29, %27 ], [ %15, %19 ], [ %15, %33 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %62, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.ScanStateTransition, ptr %0, i64 0, i32 2, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !348
  %49 = getelementptr inbounds %struct.ScanStateTransition, ptr %1, i64 0, i32 2, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !348
  %51 = zext i32 %44 to i64
  br label %55

52:                                               ; preds = %55
  %53 = add nuw nsw i64 %56, 1
  %54 = icmp eq i64 %53, %51
  br i1 %54, label %62, label %55, !llvm.loop !374

55:                                               ; preds = %52, %46
  %56 = phi i64 [ 0, %46 ], [ %53, %52 ]
  %57 = getelementptr inbounds ptr, ptr %48, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !14
  %59 = getelementptr inbounds ptr, ptr %50, i64 %56
  %60 = load ptr, ptr %59, align 8, !tbaa !14
  %61 = icmp eq ptr %58, %60
  br i1 %61, label %52, label %62

62:                                               ; preds = %55, %52, %43, %36, %27, %13, %7
  %63 = phi i32 [ 1, %7 ], [ 1, %13 ], [ 1, %27 ], [ 0, %43 ], [ 1, %55 ], [ 0, %52 ], [ 1, %36 ]
  ret i32 %63
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @nfacmp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #15 {
  %3 = load ptr, ptr %0, align 8, !tbaa !14
  %4 = load i32, ptr %3, align 8, !tbaa !361
  %5 = load ptr, ptr %1, align 8, !tbaa !14
  %6 = load i32, ptr %5, align 8, !tbaa !361
  %7 = icmp ugt i32 %4, %6
  %8 = icmp ult i32 %4, %6
  %9 = sext i1 %8 to i32
  %10 = select i1 %7, i32 1, i32 %9
  ret i32 %10
}

; Function Attrs: nofree optsize
declare void @qsort(ptr noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #24

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @elem_symbol(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #15 {
  %3 = load i32, ptr %1, align 8, !tbaa !146
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Elem, ptr %1, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !60
  %8 = getelementptr inbounds %struct.Production, ptr %7, i64 0, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !70
  br label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !38
  %13 = getelementptr inbounds %struct.Elem, ptr %1, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !60
  %15 = getelementptr inbounds %struct.Term, ptr %14, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !41
  %17 = add i32 %16, %12
  br label %18

18:                                               ; preds = %10, %5
  %19 = phi i32 [ %9, %5 ], [ %17, %10 ]
  ret i32 %19
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @sort_VecAction(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !31
  %4 = load i32, ptr %0, align 8, !tbaa !30
  %5 = zext i32 %4 to i64
  tail call void @qsort(ptr noundef %3, i64 noundef %5, i64 noundef 8, ptr noundef nonnull @actioncmp) #43
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @actioncmp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #15 {
  %3 = load ptr, ptr %0, align 8, !tbaa !14
  %4 = load ptr, ptr %1, align 8, !tbaa !14
  %5 = load i32, ptr %3, align 8, !tbaa !139
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.Action, ptr %3, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !106
  %10 = getelementptr inbounds %struct.Term, ptr %9, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !41
  %12 = add i32 %11, 1000000
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.Action, ptr %3, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !161
  %16 = load i32, ptr %15, align 8, !tbaa !71
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i32 [ %12, %7 ], [ %16, %13 ]
  %19 = load i32, ptr %4, align 8, !tbaa !139
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.Action, ptr %4, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !106
  %24 = getelementptr inbounds %struct.Term, ptr %23, i64 0, i32 1
  %25 = load i32, ptr %24, align 4, !tbaa !41
  %26 = add i32 %25, 1000000
  br label %31

27:                                               ; preds = %17
  %28 = getelementptr inbounds %struct.Action, ptr %4, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !161
  %30 = load i32, ptr %29, align 8, !tbaa !71
  br label %31

31:                                               ; preds = %27, %21
  %32 = phi i32 [ %26, %21 ], [ %30, %27 ]
  %33 = icmp sgt i32 %18, %32
  %34 = icmp slt i32 %18, %32
  %35 = sext i1 %34 to i32
  %36 = select i1 %33, i32 1, i32 %35
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal void @build_LR_tables(ptr noundef %0) #0 {
  %2 = alloca %struct.Elem, align 8
  %3 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 27
  store i32 0, ptr %3, align 4, !tbaa !375
  %4 = tail call dereferenceable_or_null(432) ptr @calloc(i64 1, i64 432)
  %5 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !45
  %7 = load ptr, ptr %6, align 8, !tbaa !14
  %8 = getelementptr inbounds %struct.Production, ptr %7, i64 0, i32 2, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !67
  %10 = load ptr, ptr %9, align 8, !tbaa !14
  %11 = getelementptr inbounds %struct.Rule, ptr %10, i64 0, i32 6, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !174
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  tail call fastcc void @insert_item(ptr noundef %4, ptr noundef %13) #44
  %14 = tail call fastcc ptr @build_closure(ptr noundef %0, ptr noundef %4) #44
  %15 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 1
  %16 = load i32, ptr %15, align 8, !tbaa !38
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %48, label %18

18:                                               ; preds = %1
  %19 = load ptr, ptr %5, align 8, !tbaa !45
  br label %20

20:                                               ; preds = %42, %18
  %21 = phi i32 [ %16, %18 ], [ %43, %42 ]
  %22 = phi ptr [ %19, %18 ], [ %44, %42 ]
  %23 = phi i64 [ 0, %18 ], [ %45, %42 ]
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.Production, ptr %25, i64 0, i32 4
  %27 = load i8, ptr %26, align 4
  %28 = and i8 %27, 28
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %20
  %31 = getelementptr inbounds %struct.Production, ptr %25, i64 0, i32 9
  %32 = load ptr, ptr %31, align 8, !tbaa !46
  %33 = icmp eq ptr %32, null
  br i1 %33, label %42, label %34

34:                                               ; preds = %30
  %35 = tail call dereferenceable_or_null(432) ptr @calloc(i64 1, i64 432)
  tail call fastcc void @insert_item(ptr noundef %35, ptr noundef nonnull %32) #44
  %36 = tail call fastcc ptr @build_closure(ptr noundef nonnull %0, ptr noundef %35) #44
  %37 = load ptr, ptr %5, align 8, !tbaa !45
  %38 = getelementptr inbounds ptr, ptr %37, i64 %23
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = getelementptr inbounds %struct.Production, ptr %39, i64 0, i32 8
  store ptr %36, ptr %40, align 8, !tbaa !49
  %41 = load i32, ptr %15, align 8, !tbaa !38
  br label %42

42:                                               ; preds = %34, %30, %20
  %43 = phi i32 [ %21, %20 ], [ %21, %30 ], [ %41, %34 ]
  %44 = phi ptr [ %22, %20 ], [ %22, %30 ], [ %37, %34 ]
  %45 = add nuw nsw i64 %23, 1
  %46 = zext i32 %43 to i64
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %20, label %48, !llvm.loop !376

48:                                               ; preds = %42, %1
  %49 = phi i32 [ 0, %1 ], [ %43, %42 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2) #45
  %50 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %51 = load i32, ptr %50, align 8, !tbaa !98
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %48
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #45
  br label %476

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %56 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2
  %57 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 2, i32 2
  %58 = getelementptr inbounds %struct.Elem, ptr %2, i64 0, i32 3
  br label %59

59:                                               ; preds = %90, %54
  %60 = phi i32 [ %49, %54 ], [ %91, %90 ]
  %61 = phi i64 [ 0, %54 ], [ %92, %90 ]
  %62 = load ptr, ptr %55, align 8, !tbaa !99
  %63 = getelementptr inbounds ptr, ptr %62, i64 %61
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = load i32, ptr %56, align 8, !tbaa !32
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %72

67:                                               ; preds = %72
  %68 = load i32, ptr %15, align 8, !tbaa !38
  br label %69

69:                                               ; preds = %67, %59
  %70 = phi i32 [ %68, %67 ], [ %60, %59 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %90, label %81

72:                                               ; preds = %72, %59
  %73 = phi i64 [ %77, %72 ], [ 0, %59 ]
  store i32 1, ptr %2, align 8, !tbaa !146
  %74 = load ptr, ptr %57, align 8, !tbaa !33
  %75 = getelementptr inbounds ptr, ptr %74, i64 %73
  %76 = load ptr, ptr %75, align 8, !tbaa !14
  store ptr %76, ptr %58, align 8, !tbaa !60
  call fastcc void @build_state_for(ptr noundef nonnull %0, ptr noundef %64, ptr noundef nonnull %2) #44
  %77 = add nuw nsw i64 %73, 1
  %78 = load i32, ptr %56, align 8, !tbaa !32
  %79 = zext i32 %78 to i64
  %80 = icmp ult i64 %77, %79
  br i1 %80, label %72, label %67, !llvm.loop !377

81:                                               ; preds = %81, %69
  %82 = phi i64 [ %86, %81 ], [ 0, %69 ]
  store i32 0, ptr %2, align 8, !tbaa !146
  %83 = load ptr, ptr %5, align 8, !tbaa !45
  %84 = getelementptr inbounds ptr, ptr %83, i64 %82
  %85 = load ptr, ptr %84, align 8, !tbaa !14
  store ptr %85, ptr %58, align 8, !tbaa !60
  call fastcc void @build_state_for(ptr noundef nonnull %0, ptr noundef %64, ptr noundef nonnull %2) #44
  %86 = add nuw nsw i64 %82, 1
  %87 = load i32, ptr %15, align 8, !tbaa !38
  %88 = zext i32 %87 to i64
  %89 = icmp ult i64 %86, %88
  br i1 %89, label %81, label %90, !llvm.loop !378

90:                                               ; preds = %81, %69
  %91 = phi i32 [ 0, %69 ], [ %87, %81 ]
  %92 = add nuw nsw i64 %61, 1
  %93 = load i32, ptr %50, align 8, !tbaa !98
  %94 = zext i32 %93 to i64
  %95 = icmp ult i64 %92, %94
  br i1 %95, label %59, label %96, !llvm.loop !379

96:                                               ; preds = %90
  %.lcssa6 = phi i32 [ %93, %90 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2) #45
  %97 = icmp eq i32 %.lcssa6, 0
  br i1 %97, label %476, label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ %108, %98 ], [ 0, %96 ]
  %100 = load ptr, ptr %55, align 8, !tbaa !99
  %101 = getelementptr inbounds ptr, ptr %100, i64 %99
  %102 = load ptr, ptr %101, align 8, !tbaa !14
  %103 = getelementptr inbounds %struct.State, ptr %102, i64 0, i32 4
  %104 = getelementptr inbounds %struct.State, ptr %102, i64 0, i32 4, i32 2
  %105 = load ptr, ptr %104, align 8, !tbaa !31
  %106 = load i32, ptr %103, align 8, !tbaa !30
  %107 = zext i32 %106 to i64
  tail call void @qsort(ptr noundef %105, i64 noundef %107, i64 noundef 8, ptr noundef nonnull @gotocmp) #43
  %108 = add nuw nsw i64 %99, 1
  %109 = load i32, ptr %50, align 8, !tbaa !98
  %110 = zext i32 %109 to i64
  %111 = icmp ult i64 %108, %110
  br i1 %111, label %98, label %112, !llvm.loop !380

112:                                              ; preds = %98
  %.lcssa5 = phi i32 [ %109, %98 ]
  %113 = icmp eq i32 %.lcssa5, 0
  br i1 %113, label %476, label %114

114:                                              ; preds = %175, %112
  %115 = phi i64 [ %186, %175 ], [ 0, %112 ]
  %116 = load ptr, ptr %55, align 8, !tbaa !99
  %117 = getelementptr inbounds ptr, ptr %116, i64 %115
  %118 = load ptr, ptr %117, align 8, !tbaa !14
  %119 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 2
  %120 = load i32, ptr %119, align 8, !tbaa !234
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %175, label %122

122:                                              ; preds = %114
  %123 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 2, i32 2
  %124 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 4
  %125 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 4, i32 2
  %126 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 10
  br label %127

127:                                              ; preds = %170, %122
  %128 = phi i64 [ 0, %122 ], [ %171, %170 ]
  %129 = load ptr, ptr %123, align 8, !tbaa !235
  %130 = getelementptr inbounds ptr, ptr %129, i64 %128
  %131 = load ptr, ptr %130, align 8, !tbaa !14
  %132 = load i32, ptr %131, align 8, !tbaa !146
  switch i32 %132, label %170 [
    i32 3, label %158
    i32 1, label %133
  ]

133:                                              ; preds = %127
  %134 = load i32, ptr %124, align 8, !tbaa !142
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %170, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds %struct.Elem, ptr %131, i64 0, i32 3
  br label %138

138:                                              ; preds = %153, %136
  %139 = phi i32 [ %134, %136 ], [ %154, %153 ]
  %140 = phi i64 [ 0, %136 ], [ %155, %153 ]
  %141 = load ptr, ptr %125, align 8, !tbaa !143
  %142 = getelementptr inbounds ptr, ptr %141, i64 %140
  %143 = load ptr, ptr %142, align 8, !tbaa !14
  %144 = load ptr, ptr %143, align 8, !tbaa !144
  %145 = getelementptr inbounds %struct.Elem, ptr %144, i64 0, i32 3
  %146 = load ptr, ptr %145, align 8, !tbaa !60
  %147 = load ptr, ptr %137, align 8, !tbaa !60
  %148 = icmp eq ptr %146, %147
  br i1 %148, label %149, label %153

149:                                              ; preds = %138
  %150 = getelementptr inbounds %struct.Goto, ptr %143, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !154
  tail call fastcc void @add_action(ptr noundef %0, ptr noundef nonnull %118, i32 noundef 1, ptr noundef %146, ptr noundef null, ptr noundef %151) #44
  %152 = load i32, ptr %124, align 8, !tbaa !142
  br label %153

153:                                              ; preds = %149, %138
  %154 = phi i32 [ %139, %138 ], [ %152, %149 ]
  %155 = add nuw nsw i64 %140, 1
  %156 = zext i32 %154 to i64
  %157 = icmp ult i64 %155, %156
  br i1 %157, label %138, label %170, !llvm.loop !381

158:                                              ; preds = %127
  %159 = getelementptr inbounds %struct.Elem, ptr %131, i64 0, i32 2
  %160 = load ptr, ptr %159, align 8, !tbaa !208
  %161 = getelementptr inbounds %struct.Rule, ptr %160, i64 0, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !68
  %163 = getelementptr inbounds %struct.Production, ptr %162, i64 0, i32 3
  %164 = load i32, ptr %163, align 8, !tbaa !70
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %167, label %166

166:                                              ; preds = %158
  tail call fastcc void @add_action(ptr noundef %0, ptr noundef nonnull %118, i32 noundef 2, ptr noundef null, ptr noundef nonnull %160, ptr noundef null) #44
  br label %170

167:                                              ; preds = %158
  %168 = load i8, ptr %126, align 8
  %169 = or i8 %168, 1
  store i8 %169, ptr %126, align 8
  br label %170

170:                                              ; preds = %167, %166, %153, %133, %127
  %171 = add nuw nsw i64 %128, 1
  %172 = load i32, ptr %119, align 8, !tbaa !234
  %173 = zext i32 %172 to i64
  %174 = icmp ult i64 %171, %173
  br i1 %174, label %127, label %175, !llvm.loop !382

175:                                              ; preds = %170, %114
  %176 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 5
  %177 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 5, i32 2
  %178 = load ptr, ptr %177, align 8, !tbaa !31
  %179 = load i32, ptr %176, align 8, !tbaa !30
  %180 = zext i32 %179 to i64
  tail call void @qsort(ptr noundef %178, i64 noundef %180, i64 noundef 8, ptr noundef nonnull @actioncmp) #43
  %181 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 6
  %182 = getelementptr inbounds %struct.State, ptr %118, i64 0, i32 6, i32 2
  %183 = load ptr, ptr %182, align 8, !tbaa !31
  %184 = load i32, ptr %181, align 8, !tbaa !30
  %185 = zext i32 %184 to i64
  tail call void @qsort(ptr noundef %183, i64 noundef %185, i64 noundef 8, ptr noundef nonnull @actioncmp) #43
  %186 = add nuw nsw i64 %115, 1
  %187 = load i32, ptr %50, align 8, !tbaa !98
  %188 = zext i32 %187 to i64
  %189 = icmp ult i64 %186, %188
  br i1 %189, label %114, label %190, !llvm.loop !383

190:                                              ; preds = %175
  %.lcssa4 = phi i32 [ %187, %175 ]
  %191 = icmp eq i32 %.lcssa4, 0
  br i1 %191, label %476, label %192

192:                                              ; preds = %338, %190
  %193 = phi i64 [ %339, %338 ], [ 0, %190 ]
  %194 = load ptr, ptr %55, align 8, !tbaa !99
  %195 = getelementptr inbounds ptr, ptr %194, i64 %193
  %196 = load ptr, ptr %195, align 8, !tbaa !14
  %197 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 2
  %198 = load i32, ptr %197, align 8, !tbaa !234
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %330, label %200

200:                                              ; preds = %192
  %201 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 2, i32 2
  %202 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 7
  %203 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 7, i32 2
  %204 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 7, i32 3
  br label %205

205:                                              ; preds = %325, %200
  %206 = phi i32 [ %198, %200 ], [ %326, %325 ]
  %207 = phi i64 [ 0, %200 ], [ %327, %325 ]
  %208 = load ptr, ptr %201, align 8, !tbaa !235
  %209 = getelementptr inbounds ptr, ptr %208, i64 %207
  %210 = load ptr, ptr %209, align 8, !tbaa !14
  %211 = getelementptr inbounds %struct.Elem, ptr %210, i64 0, i32 2
  %212 = load ptr, ptr %211, align 8, !tbaa !208
  %213 = load i32, ptr %210, align 8, !tbaa !146
  %214 = icmp eq i32 %213, 3
  br i1 %214, label %325, label %215

215:                                              ; preds = %205
  %216 = getelementptr inbounds %struct.Elem, ptr %210, i64 0, i32 1
  %217 = load i32, ptr %216, align 4, !tbaa !263
  %218 = getelementptr inbounds %struct.Rule, ptr %212, i64 0, i32 6
  %219 = load i32, ptr %218, align 8, !tbaa !75
  %220 = icmp ult i32 %217, %219
  br i1 %220, label %221, label %274

221:                                              ; preds = %215
  %222 = getelementptr inbounds %struct.Rule, ptr %212, i64 0, i32 6, i32 2
  %223 = load ptr, ptr %222, align 8, !tbaa !174
  %224 = sext i32 %217 to i64
  br label %229

225:                                              ; preds = %235
  %226 = add nsw i64 %230, 1
  %227 = trunc i64 %226 to i32
  %228 = icmp ugt i32 %219, %227
  br i1 %228, label %229, label %241, !llvm.loop !384

229:                                              ; preds = %225, %221
  %230 = phi i64 [ %224, %221 ], [ %226, %225 ]
  %231 = getelementptr inbounds ptr, ptr %223, i64 %230
  %232 = load ptr, ptr %231, align 8, !tbaa !14
  %233 = load i32, ptr %232, align 8, !tbaa !146
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %235, label %325

235:                                              ; preds = %229
  %236 = getelementptr inbounds %struct.Elem, ptr %232, i64 0, i32 3
  %237 = load ptr, ptr %236, align 8, !tbaa !60
  %238 = getelementptr inbounds %struct.Production, ptr %237, i64 0, i32 5
  %239 = load ptr, ptr %238, align 8, !tbaa !270
  %240 = icmp eq ptr %239, null
  br i1 %240, label %325, label %225

241:                                              ; preds = %269, %225
  %242 = phi i64 [ %271, %269 ], [ %224, %225 ]
  %243 = phi ptr [ %270, %269 ], [ %196, %225 ]
  %244 = getelementptr inbounds %struct.State, ptr %243, i64 0, i32 4
  %245 = load i32, ptr %244, align 8, !tbaa !142
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %269, label %247

247:                                              ; preds = %241
  %248 = getelementptr inbounds ptr, ptr %223, i64 %242
  %249 = load ptr, ptr %248, align 8, !tbaa !14
  %250 = getelementptr inbounds %struct.State, ptr %243, i64 0, i32 4, i32 2
  %251 = load ptr, ptr %250, align 8, !tbaa !143
  %252 = getelementptr inbounds %struct.Elem, ptr %249, i64 0, i32 3
  %253 = load ptr, ptr %252, align 8, !tbaa !60
  %254 = zext i32 %245 to i64
  br label %258

255:                                              ; preds = %258
  %256 = add nuw nsw i64 %259, 1
  %257 = icmp eq i64 %256, %254
  br i1 %257, label %269, label %258, !llvm.loop !385

258:                                              ; preds = %255, %247
  %259 = phi i64 [ 0, %247 ], [ %256, %255 ]
  %260 = getelementptr inbounds ptr, ptr %251, i64 %259
  %261 = load ptr, ptr %260, align 8, !tbaa !14
  %262 = load ptr, ptr %261, align 8, !tbaa !144
  %263 = getelementptr inbounds %struct.Elem, ptr %262, i64 0, i32 3
  %264 = load ptr, ptr %263, align 8, !tbaa !60
  %265 = icmp eq ptr %264, %253
  br i1 %265, label %266, label %255

266:                                              ; preds = %258
  %.lcssa2 = phi ptr [ %261, %258 ]
  %267 = getelementptr inbounds %struct.Goto, ptr %.lcssa2, i64 0, i32 1
  %268 = load ptr, ptr %267, align 8, !tbaa !154
  br label %269

269:                                              ; preds = %266, %255, %241
  %270 = phi ptr [ %268, %266 ], [ null, %241 ], [ null, %255 ]
  %271 = add nsw i64 %242, 1
  %272 = trunc i64 %271 to i32
  %273 = icmp ugt i32 %219, %272
  br i1 %273, label %241, label %274, !llvm.loop !386

274:                                              ; preds = %269, %215
  %275 = phi ptr [ %196, %215 ], [ %270, %269 ]
  %276 = icmp eq ptr %275, null
  %277 = icmp eq i32 %219, 0
  %278 = or i1 %277, %276
  br i1 %278, label %325, label %279

279:                                              ; preds = %274
  %280 = load ptr, ptr %203, align 8, !tbaa !164
  %281 = icmp eq ptr %280, null
  br i1 %281, label %282, label %292

282:                                              ; preds = %279
  %283 = xor i32 %217, -1
  %284 = add i32 %219, %283
  %285 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %284, ptr %285, align 8, !tbaa !165
  %286 = getelementptr inbounds %struct.Hint, ptr %285, i64 0, i32 1
  store ptr %275, ptr %286, align 8, !tbaa !167
  %287 = getelementptr inbounds %struct.Hint, ptr %285, i64 0, i32 2
  store ptr %212, ptr %287, align 8, !tbaa !168
  store ptr %204, ptr %203, align 8, !tbaa !164
  %288 = load i32, ptr %202, align 8, !tbaa !163
  %289 = add i32 %288, 1
  store i32 %289, ptr %202, align 8, !tbaa !163
  %290 = zext i32 %288 to i64
  %291 = getelementptr inbounds ptr, ptr %204, i64 %290
  store ptr %285, ptr %291, align 8, !tbaa !14
  br label %325

292:                                              ; preds = %279
  %293 = icmp eq ptr %280, %204
  %294 = load i32, ptr %202, align 8, !tbaa !163
  br i1 %293, label %295, label %306

295:                                              ; preds = %292
  %296 = icmp ult i32 %294, 3
  br i1 %296, label %297, label %318

297:                                              ; preds = %295
  %298 = xor i32 %217, -1
  %299 = add i32 %219, %298
  %300 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %299, ptr %300, align 8, !tbaa !165
  %301 = getelementptr inbounds %struct.Hint, ptr %300, i64 0, i32 1
  store ptr %275, ptr %301, align 8, !tbaa !167
  %302 = getelementptr inbounds %struct.Hint, ptr %300, i64 0, i32 2
  store ptr %212, ptr %302, align 8, !tbaa !168
  %303 = add nuw nsw i32 %294, 1
  store i32 %303, ptr %202, align 8, !tbaa !163
  %304 = zext i32 %294 to i64
  %305 = getelementptr inbounds ptr, ptr %204, i64 %304
  store ptr %300, ptr %305, align 8, !tbaa !14
  br label %325

306:                                              ; preds = %292
  %307 = and i32 %294, 7
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %318, label %309

309:                                              ; preds = %306
  %310 = xor i32 %217, -1
  %311 = add i32 %219, %310
  %312 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %311, ptr %312, align 8, !tbaa !165
  %313 = getelementptr inbounds %struct.Hint, ptr %312, i64 0, i32 1
  store ptr %275, ptr %313, align 8, !tbaa !167
  %314 = getelementptr inbounds %struct.Hint, ptr %312, i64 0, i32 2
  store ptr %212, ptr %314, align 8, !tbaa !168
  %315 = add i32 %294, 1
  store i32 %315, ptr %202, align 8, !tbaa !163
  %316 = zext i32 %294 to i64
  %317 = getelementptr inbounds ptr, ptr %280, i64 %316
  store ptr %312, ptr %317, align 8, !tbaa !14
  br label %325

318:                                              ; preds = %306, %295
  %319 = xor i32 %217, -1
  %320 = add i32 %219, %319
  %321 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %320, ptr %321, align 8, !tbaa !165
  %322 = getelementptr inbounds %struct.Hint, ptr %321, i64 0, i32 1
  store ptr %275, ptr %322, align 8, !tbaa !167
  %323 = getelementptr inbounds %struct.Hint, ptr %321, i64 0, i32 2
  store ptr %212, ptr %323, align 8, !tbaa !168
  tail call void @vec_add_internal(ptr noundef nonnull %202, ptr noundef nonnull %321) #43
  %324 = load i32, ptr %197, align 8, !tbaa !234
  br label %325

325:                                              ; preds = %318, %309, %297, %282, %274, %235, %229, %205
  %326 = phi i32 [ %324, %318 ], [ %206, %309 ], [ %206, %297 ], [ %206, %282 ], [ %206, %274 ], [ %206, %205 ], [ %206, %229 ], [ %206, %235 ]
  %327 = add nuw nsw i64 %207, 1
  %328 = zext i32 %326 to i64
  %329 = icmp ult i64 %327, %328
  br i1 %329, label %205, label %330, !llvm.loop !387

330:                                              ; preds = %325, %192
  %331 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 7
  %332 = load i32, ptr %331, align 8, !tbaa !163
  %333 = icmp ugt i32 %332, 1
  br i1 %333, label %334, label %338

334:                                              ; preds = %330
  %335 = getelementptr inbounds %struct.State, ptr %196, i64 0, i32 7, i32 2
  %336 = load ptr, ptr %335, align 8, !tbaa !164
  %337 = zext i32 %332 to i64
  tail call void @qsort(ptr noundef %336, i64 noundef %337, i64 noundef 8, ptr noundef nonnull @hintcmp) #43
  br label %338

338:                                              ; preds = %334, %330
  %339 = add nuw nsw i64 %193, 1
  %340 = load i32, ptr %50, align 8, !tbaa !98
  %341 = zext i32 %340 to i64
  %342 = icmp ult i64 %339, %341
  br i1 %342, label %192, label %343, !llvm.loop !388

343:                                              ; preds = %338
  %.lcssa3 = phi i32 [ %340, %338 ]
  %344 = icmp eq i32 %.lcssa3, 0
  br i1 %344, label %476, label %345

345:                                              ; preds = %343
  %346 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  br label %347

347:                                              ; preds = %466, %345
  %348 = phi i64 [ 0, %345 ], [ %472, %466 ]
  %349 = load ptr, ptr %346, align 8, !tbaa !99
  %350 = getelementptr inbounds ptr, ptr %349, i64 %348
  %351 = load ptr, ptr %350, align 8, !tbaa !14
  %352 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 2
  %353 = load i32, ptr %352, align 8, !tbaa !234
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %466, label %355

355:                                              ; preds = %347
  %356 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 2, i32 2
  %357 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 8
  %358 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 8, i32 2
  %359 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 8, i32 3
  br label %360

360:                                              ; preds = %461, %355
  %361 = phi i32 [ %353, %355 ], [ %462, %461 ]
  %362 = phi i64 [ 0, %355 ], [ %463, %461 ]
  %363 = load ptr, ptr %356, align 8, !tbaa !235
  %364 = getelementptr inbounds ptr, ptr %363, i64 %362
  %365 = load ptr, ptr %364, align 8, !tbaa !14
  %366 = getelementptr inbounds %struct.Elem, ptr %365, i64 0, i32 2
  %367 = load ptr, ptr %366, align 8, !tbaa !208
  %368 = getelementptr inbounds %struct.Rule, ptr %367, i64 0, i32 6
  %369 = load i32, ptr %368, align 8, !tbaa !75
  %370 = icmp ugt i32 %369, 1
  br i1 %370, label %371, label %461

371:                                              ; preds = %360
  %372 = getelementptr inbounds %struct.Rule, ptr %367, i64 0, i32 6, i32 2
  %373 = load ptr, ptr %372, align 8, !tbaa !174
  %374 = add i32 %369, -1
  %375 = zext i32 %374 to i64
  %376 = getelementptr inbounds ptr, ptr %373, i64 %375
  %377 = load ptr, ptr %376, align 8, !tbaa !14
  %378 = load i32, ptr %377, align 8, !tbaa !146
  %379 = icmp eq i32 %378, 1
  br i1 %379, label %380, label %461

380:                                              ; preds = %371
  %381 = getelementptr inbounds %struct.Elem, ptr %377, i64 0, i32 3
  %382 = load ptr, ptr %381, align 8, !tbaa !60
  %383 = load i32, ptr %382, align 8, !tbaa !34
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %385, label %461

385:                                              ; preds = %380
  %386 = getelementptr inbounds %struct.Elem, ptr %365, i64 0, i32 1
  %387 = load i32, ptr %386, align 4, !tbaa !263
  %388 = load i32, ptr %357, align 8, !tbaa !172
  %389 = icmp eq i32 %388, 0
  %390 = load ptr, ptr %358, align 8, !tbaa !173
  br i1 %389, label %428, label %391

391:                                              ; preds = %385
  %392 = getelementptr inbounds %struct.Term, ptr %382, i64 0, i32 6
  %393 = load i32, ptr %392, align 8, !tbaa !43
  %394 = getelementptr inbounds %struct.Term, ptr %382, i64 0, i32 5
  %395 = zext i32 %388 to i64
  br label %396

396:                                              ; preds = %425, %391
  %397 = phi i64 [ 0, %391 ], [ %426, %425 ]
  %398 = getelementptr inbounds ptr, ptr %390, i64 %397
  %399 = load ptr, ptr %398, align 8, !tbaa !14
  %400 = getelementptr inbounds %struct.Hint, ptr %399, i64 0, i32 2
  %401 = load ptr, ptr %400, align 8, !tbaa !168
  %402 = getelementptr inbounds %struct.Rule, ptr %401, i64 0, i32 6
  %403 = getelementptr inbounds %struct.Rule, ptr %401, i64 0, i32 6, i32 2
  %404 = load ptr, ptr %403, align 8, !tbaa !174
  %405 = load i32, ptr %402, align 8, !tbaa !75
  %406 = add i32 %405, -1
  %407 = zext i32 %406 to i64
  %408 = getelementptr inbounds ptr, ptr %404, i64 %407
  %409 = load ptr, ptr %408, align 8, !tbaa !14
  %410 = getelementptr inbounds %struct.Elem, ptr %409, i64 0, i32 3
  %411 = load ptr, ptr %410, align 8, !tbaa !60
  %412 = getelementptr inbounds %struct.Term, ptr %411, i64 0, i32 6
  %413 = load i32, ptr %412, align 8, !tbaa !43
  %414 = icmp eq i32 %393, %413
  br i1 %414, label %415, label %425

415:                                              ; preds = %396
  %416 = load ptr, ptr %394, align 8, !tbaa !40
  %417 = getelementptr inbounds %struct.Term, ptr %411, i64 0, i32 5
  %418 = load ptr, ptr %417, align 8, !tbaa !40
  %419 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %416, ptr noundef nonnull dereferenceable(1) %418) #48
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %425

421:                                              ; preds = %415
  %.lcssa = phi ptr [ %399, %415 ]
  %422 = load i32, ptr %.lcssa, align 8, !tbaa !165
  %423 = icmp ugt i32 %422, %387
  br i1 %423, label %424, label %461

424:                                              ; preds = %421
  store i32 %387, ptr %.lcssa, align 8, !tbaa !165
  br label %461

425:                                              ; preds = %415, %396
  %426 = add nuw nsw i64 %397, 1
  %427 = icmp eq i64 %426, %395
  br i1 %427, label %434, label %396, !llvm.loop !389

428:                                              ; preds = %385
  %429 = icmp eq ptr %390, null
  br i1 %429, label %430, label %436

430:                                              ; preds = %428
  %431 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %387, ptr %431, align 8, !tbaa !165
  %432 = getelementptr inbounds %struct.Hint, ptr %431, i64 0, i32 1
  store ptr null, ptr %432, align 8, !tbaa !167
  %433 = getelementptr inbounds %struct.Hint, ptr %431, i64 0, i32 2
  store ptr %367, ptr %433, align 8, !tbaa !168
  store ptr %359, ptr %358, align 8, !tbaa !173
  store i32 1, ptr %357, align 8, !tbaa !172
  store ptr %431, ptr %359, align 8, !tbaa !14
  br label %461

434:                                              ; preds = %425
  %435 = icmp eq ptr %390, %359
  br i1 %435, label %438, label %447

436:                                              ; preds = %428
  %437 = icmp eq ptr %390, %359
  br i1 %437, label %440, label %456

438:                                              ; preds = %434
  %439 = icmp ult i32 %388, 3
  br i1 %439, label %440, label %456

440:                                              ; preds = %438, %436
  %441 = phi i64 [ %395, %438 ], [ 0, %436 ]
  %442 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %387, ptr %442, align 8, !tbaa !165
  %443 = getelementptr inbounds %struct.Hint, ptr %442, i64 0, i32 1
  store ptr null, ptr %443, align 8, !tbaa !167
  %444 = getelementptr inbounds %struct.Hint, ptr %442, i64 0, i32 2
  store ptr %367, ptr %444, align 8, !tbaa !168
  %445 = add nuw nsw i32 %388, 1
  store i32 %445, ptr %357, align 8, !tbaa !172
  %446 = getelementptr inbounds ptr, ptr %359, i64 %441
  store ptr %442, ptr %446, align 8, !tbaa !14
  br label %461

447:                                              ; preds = %434
  %448 = and i32 %388, 7
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %456, label %450

450:                                              ; preds = %447
  %451 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %387, ptr %451, align 8, !tbaa !165
  %452 = getelementptr inbounds %struct.Hint, ptr %451, i64 0, i32 1
  store ptr null, ptr %452, align 8, !tbaa !167
  %453 = getelementptr inbounds %struct.Hint, ptr %451, i64 0, i32 2
  store ptr %367, ptr %453, align 8, !tbaa !168
  %454 = add i32 %388, 1
  store i32 %454, ptr %357, align 8, !tbaa !172
  %455 = getelementptr inbounds ptr, ptr %390, i64 %395
  store ptr %451, ptr %455, align 8, !tbaa !14
  br label %461

456:                                              ; preds = %447, %438, %436
  %457 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #50
  store i32 %387, ptr %457, align 8, !tbaa !165
  %458 = getelementptr inbounds %struct.Hint, ptr %457, i64 0, i32 1
  store ptr null, ptr %458, align 8, !tbaa !167
  %459 = getelementptr inbounds %struct.Hint, ptr %457, i64 0, i32 2
  store ptr %367, ptr %459, align 8, !tbaa !168
  tail call void @vec_add_internal(ptr noundef nonnull %357, ptr noundef nonnull %457) #43
  %460 = load i32, ptr %352, align 8, !tbaa !234
  br label %461

461:                                              ; preds = %456, %450, %440, %430, %424, %421, %380, %371, %360
  %462 = phi i32 [ %361, %360 ], [ %361, %371 ], [ %361, %380 ], [ %361, %430 ], [ %361, %440 ], [ %361, %450 ], [ %460, %456 ], [ %361, %421 ], [ %361, %424 ]
  %463 = add nuw nsw i64 %362, 1
  %464 = zext i32 %462 to i64
  %465 = icmp ult i64 %463, %464
  br i1 %465, label %360, label %466, !llvm.loop !390

466:                                              ; preds = %461, %347
  %467 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 8
  %468 = getelementptr inbounds %struct.State, ptr %351, i64 0, i32 8, i32 2
  %469 = load ptr, ptr %468, align 8, !tbaa !173
  %470 = load i32, ptr %467, align 8, !tbaa !172
  %471 = zext i32 %470 to i64
  tail call void @qsort(ptr noundef %469, i64 noundef %471, i64 noundef 8, ptr noundef nonnull @hintcmp) #43
  %472 = add nuw nsw i64 %348, 1
  %473 = load i32, ptr %50, align 8, !tbaa !98
  %474 = zext i32 %473 to i64
  %475 = icmp ult i64 %472, %474
  br i1 %475, label %347, label %476, !llvm.loop !391

476:                                              ; preds = %466, %343, %190, %112, %96, %53
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @insert_item(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 3
  %4 = tail call i32 @set_add(ptr noundef nonnull %3, ptr noundef %1) #43
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %34, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 2, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !235
  %10 = icmp eq ptr %9, null
  %11 = getelementptr inbounds %struct.State, ptr %0, i64 0, i32 2, i32 3
  br i1 %10, label %12, label %17

12:                                               ; preds = %6
  store ptr %11, ptr %8, align 8, !tbaa !235
  %13 = load i32, ptr %7, align 8, !tbaa !234
  %14 = add i32 %13, 1
  store i32 %14, ptr %7, align 8, !tbaa !234
  %15 = zext i32 %13 to i64
  %16 = getelementptr inbounds ptr, ptr %11, i64 %15
  store ptr %1, ptr %16, align 8, !tbaa !14
  br label %34

17:                                               ; preds = %6
  %18 = icmp eq ptr %9, %11
  %19 = load i32, ptr %7, align 8, !tbaa !234
  br i1 %18, label %20, label %26

20:                                               ; preds = %17
  %21 = icmp ult i32 %19, 3
  br i1 %21, label %22, label %33

22:                                               ; preds = %20
  %23 = add nuw nsw i32 %19, 1
  store i32 %23, ptr %7, align 8, !tbaa !234
  %24 = zext i32 %19 to i64
  %25 = getelementptr inbounds ptr, ptr %9, i64 %24
  store ptr %1, ptr %25, align 8, !tbaa !14
  br label %34

26:                                               ; preds = %17
  %27 = and i32 %19, 7
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %26
  %30 = add i32 %19, 1
  store i32 %30, ptr %7, align 8, !tbaa !234
  %31 = zext i32 %19 to i64
  %32 = getelementptr inbounds ptr, ptr %9, i64 %31
  store ptr %1, ptr %32, align 8, !tbaa !14
  br label %34

33:                                               ; preds = %26, %20
  tail call void @vec_add_internal(ptr noundef nonnull %7, ptr noundef %1) #43
  br label %34

34:                                               ; preds = %33, %29, %22, %12, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @build_closure(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 2
  %4 = load i32, ptr %3, align 8, !tbaa !234
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 2, i32 2
  br label %8

8:                                                ; preds = %43, %6
  %9 = phi i32 [ %4, %6 ], [ %44, %43 ]
  %10 = phi i64 [ 0, %6 ], [ %45, %43 ]
  %11 = load ptr, ptr %7, align 8, !tbaa !235
  %12 = getelementptr inbounds ptr, ptr %11, i64 %10
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = load i32, ptr %13, align 8, !tbaa !146
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %43

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.Elem, ptr %13, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !60
  %19 = getelementptr inbounds %struct.Production, ptr %18, i64 0, i32 2
  %20 = load i32, ptr %19, align 8, !tbaa !74
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.Production, ptr %18, i64 0, i32 2, i32 2
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %35, %24 ]
  %26 = load ptr, ptr %23, align 8, !tbaa !67
  %27 = getelementptr inbounds ptr, ptr %26, i64 %25
  %28 = load ptr, ptr %27, align 8, !tbaa !14
  %29 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !174
  %31 = icmp eq ptr %30, null
  %32 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 7
  %33 = select i1 %31, ptr %32, ptr %30
  %34 = load ptr, ptr %33, align 8, !tbaa !14
  tail call fastcc void @insert_item(ptr noundef %1, ptr noundef %34) #44
  %35 = add nuw nsw i64 %25, 1
  %36 = load ptr, ptr %17, align 8, !tbaa !60
  %37 = getelementptr inbounds %struct.Production, ptr %36, i64 0, i32 2
  %38 = load i32, ptr %37, align 8, !tbaa !74
  %39 = zext i32 %38 to i64
  %40 = icmp ult i64 %35, %39
  br i1 %40, label %24, label %41, !llvm.loop !392

41:                                               ; preds = %24
  %42 = load i32, ptr %3, align 8, !tbaa !234
  br label %43

43:                                               ; preds = %41, %16, %8
  %44 = phi i32 [ %42, %41 ], [ %9, %16 ], [ %9, %8 ]
  %45 = add nuw nsw i64 %10, 1
  %46 = zext i32 %44 to i64
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %8, label %48, !llvm.loop !393

48:                                               ; preds = %43, %2
  %49 = phi i32 [ 0, %2 ], [ %44, %43 ]
  %50 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 2, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !235
  %52 = zext i32 %49 to i64
  tail call void @qsort(ptr noundef %51, i64 noundef %52, i64 noundef 8, ptr noundef nonnull @itemcmp) #43
  %53 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 1
  store i64 0, ptr %53, align 8, !tbaa !394
  %54 = load i32, ptr %3, align 8, !tbaa !234
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %80, label %56

56:                                               ; preds = %48
  %57 = load ptr, ptr %50, align 8, !tbaa !235
  %58 = zext i32 %54 to i64
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i64 [ 0, %56 ], [ %77, %59 ]
  %61 = phi i64 [ 0, %56 ], [ %76, %59 ]
  %62 = getelementptr inbounds ptr, ptr %57, i64 %60
  %63 = load ptr, ptr %62, align 8, !tbaa !14
  %64 = getelementptr inbounds %struct.Elem, ptr %63, i64 0, i32 2
  %65 = load ptr, ptr %64, align 8, !tbaa !208
  %66 = load i32, ptr %65, align 8, !tbaa !71
  %67 = shl i32 %66, 8
  %68 = load i32, ptr %63, align 8, !tbaa !146
  %69 = icmp eq i32 %68, 3
  %70 = getelementptr inbounds %struct.Elem, ptr %63, i64 0, i32 1
  %71 = getelementptr inbounds %struct.Rule, ptr %65, i64 0, i32 6
  %72 = select i1 %69, ptr %71, ptr %70
  %73 = load i32, ptr %72, align 4, !tbaa !15
  %74 = add i32 %73, %67
  %75 = zext i32 %74 to i64
  %76 = add i64 %61, %75
  %77 = add nuw nsw i64 %60, 1
  %78 = icmp eq i64 %77, %58
  br i1 %78, label %79, label %59, !llvm.loop !395

79:                                               ; preds = %59
  %.lcssa2 = phi i64 [ %76, %59 ]
  store i64 %.lcssa2, ptr %53, align 8, !tbaa !394
  br label %80

80:                                               ; preds = %79, %48
  %81 = phi i64 [ %.lcssa2, %79 ], [ 0, %48 ]
  %82 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3
  %83 = load i32, ptr %82, align 8, !tbaa !98
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !99
  br i1 %84, label %137, label %87

87:                                               ; preds = %80
  %88 = zext i32 %83 to i64
  %89 = zext i32 %54 to i64
  br label %90

90:                                               ; preds = %134, %87
  %91 = phi i64 [ 0, %87 ], [ %135, %134 ]
  %92 = getelementptr inbounds ptr, ptr %86, i64 %91
  %93 = load ptr, ptr %92, align 8, !tbaa !14
  %94 = getelementptr inbounds %struct.State, ptr %93, i64 0, i32 1
  %95 = load i64, ptr %94, align 8, !tbaa !394
  %96 = icmp eq i64 %81, %95
  br i1 %96, label %97, label %134

97:                                               ; preds = %90
  %98 = getelementptr inbounds %struct.State, ptr %93, i64 0, i32 2
  %99 = load i32, ptr %98, align 8, !tbaa !234
  %100 = icmp eq i32 %54, %99
  br i1 %100, label %101, label %134

101:                                              ; preds = %97
  %102 = load ptr, ptr %50, align 8, !tbaa !235
  br i1 %55, label %116, label %103

103:                                              ; preds = %101
  %104 = getelementptr inbounds %struct.State, ptr %93, i64 0, i32 2, i32 2
  %105 = load ptr, ptr %104, align 8, !tbaa !235
  br label %109

106:                                              ; preds = %109
  %107 = add nuw nsw i64 %110, 1
  %108 = icmp eq i64 %107, %89
  br i1 %108, label %116, label %109, !llvm.loop !396

109:                                              ; preds = %106, %103
  %110 = phi i64 [ 0, %103 ], [ %107, %106 ]
  %111 = getelementptr inbounds ptr, ptr %102, i64 %110
  %112 = load ptr, ptr %111, align 8, !tbaa !14
  %113 = getelementptr inbounds ptr, ptr %105, i64 %110
  %114 = load ptr, ptr %113, align 8, !tbaa !14
  %115 = icmp eq ptr %112, %114
  br i1 %115, label %106, label %134

116:                                              ; preds = %106, %101
  %.lcssa1 = phi ptr [ %102, %106 ], [ %102, %101 ]
  %.lcssa = phi i64 [ %91, %106 ], [ %91, %101 ]
  %117 = icmp eq ptr %.lcssa1, null
  %118 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 2, i32 3
  %119 = icmp eq ptr %.lcssa1, %118
  %120 = select i1 %117, i1 true, i1 %119
  br i1 %120, label %122, label %121

121:                                              ; preds = %116
  tail call void @free(ptr noundef nonnull %.lcssa1) #43
  br label %122

122:                                              ; preds = %121, %116
  store i32 0, ptr %3, align 8, !tbaa !234
  store ptr null, ptr %50, align 8, !tbaa !235
  %123 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 3, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !397
  %125 = icmp eq ptr %124, null
  %126 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 3, i32 3
  %127 = icmp eq ptr %124, %126
  %128 = select i1 %125, i1 true, i1 %127
  br i1 %128, label %130, label %129

129:                                              ; preds = %122
  tail call void @free(ptr noundef nonnull %124) #43
  br label %130

130:                                              ; preds = %129, %122
  tail call void @free(ptr noundef nonnull %1) #43
  %131 = load ptr, ptr %85, align 8, !tbaa !99
  %132 = getelementptr inbounds ptr, ptr %131, i64 %.lcssa
  %133 = load ptr, ptr %132, align 8, !tbaa !14
  br label %162

134:                                              ; preds = %109, %97, %90
  %135 = add nuw nsw i64 %91, 1
  %136 = icmp eq i64 %135, %88
  br i1 %136, label %137, label %90, !llvm.loop !398

137:                                              ; preds = %134, %80
  store i32 %83, ptr %1, align 8, !tbaa !50
  %138 = icmp eq ptr %86, null
  br i1 %138, label %139, label %145

139:                                              ; preds = %137
  %140 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 2
  %141 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 3
  store ptr %141, ptr %140, align 8, !tbaa !99
  %142 = add i32 %83, 1
  store i32 %142, ptr %82, align 8, !tbaa !98
  %143 = zext i32 %83 to i64
  %144 = getelementptr inbounds ptr, ptr %141, i64 %143
  store ptr %1, ptr %144, align 8, !tbaa !14
  br label %162

145:                                              ; preds = %137
  %146 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 3, i32 3
  %147 = icmp eq ptr %86, %146
  br i1 %147, label %148, label %154

148:                                              ; preds = %145
  %149 = icmp ult i32 %83, 3
  br i1 %149, label %150, label %161

150:                                              ; preds = %148
  %151 = add nuw nsw i32 %83, 1
  store i32 %151, ptr %82, align 8, !tbaa !98
  %152 = zext i32 %83 to i64
  %153 = getelementptr inbounds ptr, ptr %86, i64 %152
  store ptr %1, ptr %153, align 8, !tbaa !14
  br label %162

154:                                              ; preds = %145
  %155 = and i32 %83, 7
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %161, label %157

157:                                              ; preds = %154
  %158 = add i32 %83, 1
  store i32 %158, ptr %82, align 8, !tbaa !98
  %159 = zext i32 %83 to i64
  %160 = getelementptr inbounds ptr, ptr %86, i64 %159
  store ptr %1, ptr %160, align 8, !tbaa !14
  br label %162

161:                                              ; preds = %154, %148
  tail call void @vec_add_internal(ptr noundef nonnull %82, ptr noundef nonnull %1) #43
  br label %162

162:                                              ; preds = %161, %157, %150, %139, %130
  %163 = phi ptr [ %133, %130 ], [ %1, %161 ], [ %1, %157 ], [ %1, %150 ], [ %1, %139 ]
  ret ptr %163
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @build_state_for(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 2
  %5 = load i32, ptr %4, align 8, !tbaa !234
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %92, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 2, i32 2
  %9 = getelementptr inbounds %struct.Elem, ptr %2, i64 0, i32 3
  br label %10

10:                                               ; preds = %52, %7
  %11 = phi i32 [ %5, %7 ], [ %53, %52 ]
  %12 = phi i64 [ 0, %7 ], [ %55, %52 ]
  %13 = phi ptr [ null, %7 ], [ %54, %52 ]
  %14 = load ptr, ptr %8, align 8, !tbaa !235
  %15 = getelementptr inbounds ptr, ptr %14, i64 %12
  %16 = load ptr, ptr %15, align 8, !tbaa !14
  %17 = load i32, ptr %16, align 8, !tbaa !146
  %18 = icmp eq i32 %17, 3
  br i1 %18, label %52, label %19

19:                                               ; preds = %10
  %20 = load i32, ptr %2, align 8, !tbaa !146
  %21 = icmp eq i32 %17, %20
  br i1 %21, label %22, label %52

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.Elem, ptr %16, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !60
  %25 = load ptr, ptr %9, align 8, !tbaa !60
  %26 = icmp eq ptr %24, %25
  br i1 %26, label %27, label %52

27:                                               ; preds = %22
  %28 = icmp eq ptr %13, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = tail call dereferenceable_or_null(432) ptr @calloc(i64 1, i64 432)
  br label %31

31:                                               ; preds = %29, %27
  %32 = phi ptr [ %13, %27 ], [ %30, %29 ]
  %33 = getelementptr inbounds %struct.Elem, ptr %16, i64 0, i32 1
  %34 = load i32, ptr %33, align 4, !tbaa !263
  %35 = add i32 %34, 1
  %36 = getelementptr inbounds %struct.Elem, ptr %16, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !208
  %38 = getelementptr inbounds %struct.Rule, ptr %37, i64 0, i32 6
  %39 = load i32, ptr %38, align 8, !tbaa !75
  %40 = icmp ult i32 %35, %39
  br i1 %40, label %43, label %41

41:                                               ; preds = %31
  %42 = getelementptr inbounds %struct.Rule, ptr %37, i64 0, i32 7
  br label %48

43:                                               ; preds = %31
  %44 = getelementptr inbounds %struct.Rule, ptr %37, i64 0, i32 6, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !174
  %46 = zext i32 %35 to i64
  %47 = getelementptr inbounds ptr, ptr %45, i64 %46
  br label %48

48:                                               ; preds = %43, %41
  %49 = phi ptr [ %42, %41 ], [ %47, %43 ]
  %50 = load ptr, ptr %49, align 8, !tbaa !14
  tail call fastcc void @insert_item(ptr noundef %32, ptr noundef %50) #44
  %51 = load i32, ptr %4, align 8, !tbaa !234
  br label %52

52:                                               ; preds = %48, %22, %19, %10
  %53 = phi i32 [ %51, %48 ], [ %11, %22 ], [ %11, %19 ], [ %11, %10 ]
  %54 = phi ptr [ %32, %48 ], [ %13, %22 ], [ %13, %19 ], [ %13, %10 ]
  %55 = add nuw nsw i64 %12, 1
  %56 = zext i32 %53 to i64
  %57 = icmp ult i64 %55, %56
  br i1 %57, label %10, label %58, !llvm.loop !399

58:                                               ; preds = %52
  %.lcssa = phi ptr [ %54, %52 ]
  %59 = icmp eq ptr %.lcssa, null
  br i1 %59, label %92, label %60

60:                                               ; preds = %58
  %61 = tail call fastcc ptr @build_closure(ptr noundef %0, ptr noundef nonnull %.lcssa) #44
  %62 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #50
  %63 = getelementptr inbounds %struct.Goto, ptr %62, i64 0, i32 1
  store ptr %61, ptr %63, align 8, !tbaa !154
  %64 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #50
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %64, ptr noundef nonnull align 8 dereferenceable(32) %2, i64 32, i1 false)
  store ptr %64, ptr %62, align 8, !tbaa !144
  %65 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 4
  %66 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 4, i32 2
  %67 = load ptr, ptr %66, align 8, !tbaa !143
  %68 = icmp eq ptr %67, null
  %69 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 4, i32 3
  br i1 %68, label %70, label %75

70:                                               ; preds = %60
  store ptr %69, ptr %66, align 8, !tbaa !143
  %71 = load i32, ptr %65, align 8, !tbaa !142
  %72 = add i32 %71, 1
  store i32 %72, ptr %65, align 8, !tbaa !142
  %73 = zext i32 %71 to i64
  %74 = getelementptr inbounds ptr, ptr %69, i64 %73
  store ptr %62, ptr %74, align 8, !tbaa !14
  br label %92

75:                                               ; preds = %60
  %76 = icmp eq ptr %67, %69
  %77 = load i32, ptr %65, align 8, !tbaa !142
  br i1 %76, label %78, label %84

78:                                               ; preds = %75
  %79 = icmp ult i32 %77, 3
  br i1 %79, label %80, label %91

80:                                               ; preds = %78
  %81 = add nuw nsw i32 %77, 1
  store i32 %81, ptr %65, align 8, !tbaa !142
  %82 = zext i32 %77 to i64
  %83 = getelementptr inbounds ptr, ptr %67, i64 %82
  store ptr %62, ptr %83, align 8, !tbaa !14
  br label %92

84:                                               ; preds = %75
  %85 = and i32 %77, 7
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %91, label %87

87:                                               ; preds = %84
  %88 = add i32 %77, 1
  store i32 %88, ptr %65, align 8, !tbaa !142
  %89 = zext i32 %77 to i64
  %90 = getelementptr inbounds ptr, ptr %67, i64 %89
  store ptr %62, ptr %90, align 8, !tbaa !14
  br label %92

91:                                               ; preds = %84, %78
  tail call void @vec_add_internal(ptr noundef nonnull %65, ptr noundef nonnull %62) #43
  br label %92

92:                                               ; preds = %91, %87, %80, %70, %58, %3
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @gotocmp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #15 {
  %3 = load ptr, ptr %0, align 8, !tbaa !14
  %4 = load ptr, ptr %1, align 8, !tbaa !14
  %5 = getelementptr inbounds %struct.Goto, ptr %3, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !154
  %7 = load i32, ptr %6, align 8, !tbaa !50
  %8 = getelementptr inbounds %struct.Goto, ptr %4, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !154
  %10 = load i32, ptr %9, align 8, !tbaa !50
  %11 = icmp sgt i32 %7, %10
  %12 = icmp slt i32 %7, %10
  %13 = sext i1 %12 to i32
  %14 = select i1 %11, i32 1, i32 %13
  ret i32 %14
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @add_action(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #0 {
  %7 = icmp eq i32 %2, 2
  br i1 %7, label %16, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 5
  %10 = load i32, ptr %9, align 8, !tbaa !103
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 5, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !105
  br i1 %11, label %84, label %14

14:                                               ; preds = %8
  %15 = zext i32 %10 to i64
  br label %67

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 6
  %18 = load i32, ptr %17, align 8, !tbaa !159
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 6, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !160
  br i1 %19, label %34, label %22

22:                                               ; preds = %16
  %23 = zext i32 %18 to i64
  br label %27

24:                                               ; preds = %27
  %25 = add nuw nsw i64 %28, 1
  %26 = icmp eq i64 %25, %23
  br i1 %26, label %34, label %27, !llvm.loop !400

27:                                               ; preds = %24, %22
  %28 = phi i64 [ 0, %22 ], [ %25, %24 ]
  %29 = getelementptr inbounds ptr, ptr %21, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  %31 = getelementptr inbounds %struct.Action, ptr %30, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !161
  %33 = icmp eq ptr %32, %4
  br i1 %33, label %117, label %24

34:                                               ; preds = %24, %16
  %35 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  store i32 2, ptr %35, align 8, !tbaa !139
  %36 = getelementptr inbounds %struct.Action, ptr %35, i64 0, i32 1
  store ptr %3, ptr %36, align 8, !tbaa !106
  %37 = getelementptr inbounds %struct.Action, ptr %35, i64 0, i32 2
  store ptr %4, ptr %37, align 8, !tbaa !161
  %38 = getelementptr inbounds %struct.Action, ptr %35, i64 0, i32 3
  store ptr %5, ptr %38, align 8, !tbaa !240
  %39 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 27
  %40 = load i32, ptr %39, align 4, !tbaa !375
  %41 = add nsw i32 %40, 1
  store i32 %41, ptr %39, align 4, !tbaa !375
  %42 = getelementptr inbounds %struct.Action, ptr %35, i64 0, i32 4
  store i32 %40, ptr %42, align 8, !tbaa !345
  %43 = icmp eq ptr %21, null
  br i1 %43, label %44, label %50

44:                                               ; preds = %34
  %45 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 6, i32 2
  %46 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 6, i32 3
  store ptr %46, ptr %45, align 8, !tbaa !160
  %47 = add i32 %18, 1
  store i32 %47, ptr %17, align 8, !tbaa !159
  %48 = zext i32 %18 to i64
  %49 = getelementptr inbounds ptr, ptr %46, i64 %48
  store ptr %35, ptr %49, align 8, !tbaa !14
  br label %117

50:                                               ; preds = %34
  %51 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 6, i32 3
  %52 = icmp eq ptr %21, %51
  br i1 %52, label %53, label %59

53:                                               ; preds = %50
  %54 = icmp ult i32 %18, 3
  br i1 %54, label %55, label %66

55:                                               ; preds = %53
  %56 = add nuw nsw i32 %18, 1
  store i32 %56, ptr %17, align 8, !tbaa !159
  %57 = zext i32 %18 to i64
  %58 = getelementptr inbounds ptr, ptr %21, i64 %57
  store ptr %35, ptr %58, align 8, !tbaa !14
  br label %117

59:                                               ; preds = %50
  %60 = and i32 %18, 7
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %59
  %63 = add i32 %18, 1
  store i32 %63, ptr %17, align 8, !tbaa !159
  %64 = zext i32 %18 to i64
  %65 = getelementptr inbounds ptr, ptr %21, i64 %64
  store ptr %35, ptr %65, align 8, !tbaa !14
  br label %117

66:                                               ; preds = %59, %53
  tail call void @vec_add_internal(ptr noundef nonnull %17, ptr noundef nonnull %35) #43
  br label %117

67:                                               ; preds = %81, %14
  %68 = phi i64 [ 0, %14 ], [ %82, %81 ]
  %69 = getelementptr inbounds ptr, ptr %13, i64 %68
  %70 = load ptr, ptr %69, align 8, !tbaa !14
  %71 = getelementptr inbounds %struct.Action, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !106
  %73 = icmp eq ptr %72, %3
  br i1 %73, label %74, label %81

74:                                               ; preds = %67
  %75 = getelementptr inbounds %struct.Action, ptr %70, i64 0, i32 3
  %76 = load ptr, ptr %75, align 8, !tbaa !240
  %77 = icmp eq ptr %76, %5
  br i1 %77, label %78, label %81

78:                                               ; preds = %74
  %79 = load i32, ptr %70, align 8, !tbaa !139
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %117, label %81

81:                                               ; preds = %78, %74, %67
  %82 = add nuw nsw i64 %68, 1
  %83 = icmp eq i64 %82, %15
  br i1 %83, label %84, label %67, !llvm.loop !401

84:                                               ; preds = %81, %8
  %85 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  store i32 1, ptr %85, align 8, !tbaa !139
  %86 = getelementptr inbounds %struct.Action, ptr %85, i64 0, i32 1
  store ptr %3, ptr %86, align 8, !tbaa !106
  %87 = getelementptr inbounds %struct.Action, ptr %85, i64 0, i32 2
  store ptr %4, ptr %87, align 8, !tbaa !161
  %88 = getelementptr inbounds %struct.Action, ptr %85, i64 0, i32 3
  store ptr %5, ptr %88, align 8, !tbaa !240
  %89 = getelementptr inbounds %struct.Grammar, ptr %0, i64 0, i32 27
  %90 = load i32, ptr %89, align 4, !tbaa !375
  %91 = add nsw i32 %90, 1
  store i32 %91, ptr %89, align 4, !tbaa !375
  %92 = getelementptr inbounds %struct.Action, ptr %85, i64 0, i32 4
  store i32 %90, ptr %92, align 8, !tbaa !345
  %93 = icmp eq ptr %13, null
  br i1 %93, label %94, label %100

94:                                               ; preds = %84
  %95 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 5, i32 2
  %96 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 5, i32 3
  store ptr %96, ptr %95, align 8, !tbaa !105
  %97 = add i32 %10, 1
  store i32 %97, ptr %9, align 8, !tbaa !103
  %98 = zext i32 %10 to i64
  %99 = getelementptr inbounds ptr, ptr %96, i64 %98
  store ptr %85, ptr %99, align 8, !tbaa !14
  br label %117

100:                                              ; preds = %84
  %101 = getelementptr inbounds %struct.State, ptr %1, i64 0, i32 5, i32 3
  %102 = icmp eq ptr %13, %101
  br i1 %102, label %103, label %109

103:                                              ; preds = %100
  %104 = icmp ult i32 %10, 3
  br i1 %104, label %105, label %116

105:                                              ; preds = %103
  %106 = add nuw nsw i32 %10, 1
  store i32 %106, ptr %9, align 8, !tbaa !103
  %107 = zext i32 %10 to i64
  %108 = getelementptr inbounds ptr, ptr %13, i64 %107
  store ptr %85, ptr %108, align 8, !tbaa !14
  br label %117

109:                                              ; preds = %100
  %110 = and i32 %10, 7
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %116, label %112

112:                                              ; preds = %109
  %113 = add i32 %10, 1
  store i32 %113, ptr %9, align 8, !tbaa !103
  %114 = zext i32 %10 to i64
  %115 = getelementptr inbounds ptr, ptr %13, i64 %114
  store ptr %85, ptr %115, align 8, !tbaa !14
  br label %117

116:                                              ; preds = %109, %103
  tail call void @vec_add_internal(ptr noundef nonnull %9, ptr noundef nonnull %85) #43
  br label %117

117:                                              ; preds = %116, %112, %105, %94, %78, %66, %62, %55, %44, %27
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @hintcmp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #15 {
  %3 = load ptr, ptr %0, align 8, !tbaa !14
  %4 = load ptr, ptr %1, align 8, !tbaa !14
  %5 = load i32, ptr %3, align 8, !tbaa !165
  %6 = load i32, ptr %4, align 8, !tbaa !165
  %7 = icmp ugt i32 %5, %6
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = icmp ult i32 %5, %6
  br i1 %9, label %21, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.Hint, ptr %3, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !168
  %13 = load i32, ptr %12, align 8, !tbaa !71
  %14 = getelementptr inbounds %struct.Hint, ptr %4, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !168
  %16 = load i32, ptr %15, align 8, !tbaa !71
  %17 = icmp ugt i32 %13, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %10
  %19 = icmp ult i32 %13, %16
  %20 = sext i1 %19 to i32
  br label %21

21:                                               ; preds = %18, %10, %8, %2
  %22 = phi i32 [ 1, %2 ], [ -1, %8 ], [ %20, %18 ], [ 1, %10 ]
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @itemcmp(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #15 {
  %3 = load ptr, ptr %0, align 8, !tbaa !14
  %4 = getelementptr inbounds %struct.Elem, ptr %3, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !208
  %6 = load i32, ptr %5, align 8, !tbaa !71
  %7 = shl i32 %6, 8
  %8 = load i32, ptr %3, align 8, !tbaa !146
  %9 = icmp eq i32 %8, 3
  %10 = getelementptr inbounds %struct.Elem, ptr %3, i64 0, i32 1
  %11 = getelementptr inbounds %struct.Rule, ptr %5, i64 0, i32 6
  %12 = select i1 %9, ptr %11, ptr %10
  %13 = load i32, ptr %12, align 4, !tbaa !15
  %14 = add i32 %13, %7
  %15 = load ptr, ptr %1, align 8, !tbaa !14
  %16 = getelementptr inbounds %struct.Elem, ptr %15, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !208
  %18 = load i32, ptr %17, align 8, !tbaa !71
  %19 = shl i32 %18, 8
  %20 = load i32, ptr %15, align 8, !tbaa !146
  %21 = icmp eq i32 %20, 3
  %22 = getelementptr inbounds %struct.Elem, ptr %15, i64 0, i32 1
  %23 = getelementptr inbounds %struct.Rule, ptr %17, i64 0, i32 6
  %24 = select i1 %21, ptr %23, ptr %22
  %25 = load i32, ptr %24, align 4, !tbaa !15
  %26 = add i32 %25, %19
  %27 = icmp ugt i32 %14, %26
  %28 = icmp ult i32 %14, %26
  %29 = sext i1 %28 to i32
  %30 = select i1 %27, i32 1, i32 %29
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal void @process_arg(ptr noundef %0, i32 noundef %1, ptr nocapture noundef %2) #0 {
  %4 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !402
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !403
  %9 = icmp eq ptr %8, null
  br i1 %9, label %77, label %10

10:                                               ; preds = %3
  %11 = load i8, ptr %8, align 1, !tbaa !60
  %12 = sext i8 %11 to i32
  switch i8 %11, label %29 [
    i8 102, label %13
    i8 70, label %13
    i8 84, label %18
    i8 43, label %24
  ]

13:                                               ; preds = %10, %10
  %14 = icmp eq i8 %11, 70
  %15 = zext i1 %14 to i32
  %16 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !405
  store i32 %15, ptr %17, align 4, !tbaa !15
  br label %77

18:                                               ; preds = %10
  %19 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %20 = load ptr, ptr %19, align 8, !tbaa !405
  %21 = load i32, ptr %20, align 4, !tbaa !15
  %22 = icmp eq i32 %21, 0
  %23 = zext i1 %22 to i32
  store i32 %23, ptr %20, align 4, !tbaa !15
  br label %77

24:                                               ; preds = %10
  %25 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %26 = load ptr, ptr %25, align 8, !tbaa !405
  %27 = load i32, ptr %26, align 4, !tbaa !15
  %28 = add nsw i32 %27, 1
  store i32 %28, ptr %26, align 4, !tbaa !15
  br label %77

29:                                               ; preds = %10
  %30 = load ptr, ptr %2, align 8, !tbaa !14
  %31 = load ptr, ptr %30, align 8, !tbaa !14
  %32 = getelementptr inbounds i8, ptr %31, i64 1
  store ptr %32, ptr %30, align 8, !tbaa !14
  %33 = load i8, ptr %32, align 1, !tbaa !60
  %34 = icmp eq i8 %33, 0
  %35 = load ptr, ptr %2, align 8, !tbaa !14
  br i1 %34, label %36, label %38

36:                                               ; preds = %29
  %37 = getelementptr inbounds ptr, ptr %35, i64 1
  store ptr %37, ptr %2, align 8, !tbaa !14
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi ptr [ %37, %36 ], [ %35, %29 ]
  %40 = load ptr, ptr %39, align 8, !tbaa !14
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  tail call void @usage(ptr noundef nonnull %0, ptr poison) #44
  unreachable

43:                                               ; preds = %38
  switch i32 %12, label %66 [
    i32 73, label %44
    i32 68, label %48
    i32 76, label %52
    i32 83, label %56
  ]

44:                                               ; preds = %43
  %45 = tail call i32 @atoi(ptr nocapture noundef nonnull %40) #48
  %46 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %47 = load ptr, ptr %46, align 8, !tbaa !405
  store i32 %45, ptr %47, align 4, !tbaa !15
  br label %71

48:                                               ; preds = %43
  %49 = tail call double @atof(ptr noundef nonnull %40) #48
  %50 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %51 = load ptr, ptr %50, align 8, !tbaa !405
  store double %49, ptr %51, align 8, !tbaa !406
  br label %71

52:                                               ; preds = %43
  %53 = tail call i64 @atol(ptr nocapture noundef nonnull %40) #48
  %54 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %55 = load ptr, ptr %54, align 8, !tbaa !405
  store i64 %53, ptr %55, align 8, !tbaa !408
  br label %71

56:                                               ; preds = %43
  %57 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 4
  %58 = load ptr, ptr %57, align 8, !tbaa !405
  %59 = load ptr, ptr %7, align 8, !tbaa !403
  %60 = getelementptr inbounds i8, ptr %59, i64 1
  %61 = tail call i32 @atoi(ptr nocapture noundef nonnull %60) #48
  %62 = sext i32 %61 to i64
  %63 = tail call ptr @strncpy(ptr noundef %58, ptr noundef nonnull %40, i64 noundef %62) #43
  %64 = load ptr, ptr %2, align 8, !tbaa !14
  %65 = load ptr, ptr %64, align 8, !tbaa !14
  br label %71

66:                                               ; preds = %43
  %67 = load ptr, ptr @stderr, align 8, !tbaa !14
  %68 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !409
  %70 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.246, ptr noundef %69) #46
  tail call void @exit(i32 noundef 1) #52
  unreachable

71:                                               ; preds = %56, %52, %48, %44
  %72 = phi ptr [ %65, %56 ], [ %40, %52 ], [ %40, %48 ], [ %40, %44 ]
  %73 = phi ptr [ %64, %56 ], [ %39, %52 ], [ %39, %48 ], [ %39, %44 ]
  %74 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %72) #48
  %75 = add i64 %74, -1
  %76 = getelementptr inbounds i8, ptr %72, i64 %75
  store ptr %76, ptr %73, align 8, !tbaa !14
  br label %77

77:                                               ; preds = %71, %24, %18, %13, %3
  %78 = phi ptr [ null, %3 ], [ null, %13 ], [ null, %18 ], [ null, %24 ], [ %40, %71 ]
  %79 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %6, i32 6
  %80 = load ptr, ptr %79, align 8, !tbaa !410
  %81 = icmp eq ptr %80, null
  br i1 %81, label %83, label %82

82:                                               ; preds = %77
  tail call void %80(ptr noundef nonnull %0, ptr noundef %78) #43
  br label %83

83:                                               ; preds = %82, %77
  ret void
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @usage(ptr nocapture noundef readonly %0, ptr nocapture readnone %1) #25 {
  %3 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !402
  %5 = load ptr, ptr @stderr, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !409
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef nonnull @.str.1.247, ptr noundef %7) #46
  %9 = load ptr, ptr %4, align 8, !tbaa !411
  %10 = icmp eq ptr %9, null
  br i1 %10, label %106, label %11

11:                                               ; preds = %101, %2
  %12 = phi i64 [ %102, %101 ], [ 0, %2 ]
  %13 = phi ptr [ %104, %101 ], [ %9, %2 ]
  %14 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !412
  %16 = icmp eq ptr %15, null
  br i1 %16, label %101, label %17

17:                                               ; preds = %11
  %18 = load ptr, ptr @stderr, align 8, !tbaa !14
  %19 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 1
  %20 = load i8, ptr %19, align 8, !tbaa !413
  %21 = sext i8 %20 to i32
  %22 = icmp eq i8 %20, 32
  %23 = select i1 %22, i32 32, i32 45
  %24 = select i1 %22, i32 32, i32 44
  %25 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %13) #48
  %26 = add i64 %25, 61
  %27 = icmp ult i64 %26, 81
  %28 = getelementptr inbounds i8, ptr @.str.14.248, i64 %26
  %29 = select i1 %27, ptr %28, ptr @.str.3.249
  %30 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 3
  %31 = load ptr, ptr %30, align 8, !tbaa !403
  %32 = icmp eq ptr %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %17
  %34 = load i8, ptr %31, align 1, !tbaa !60
  %35 = sext i8 %34 to i32
  %36 = tail call ptr @memchr(ptr noundef nonnull dereferenceable(1) @.str.24.250, i32 %35, i64 9)
  %37 = ptrtoint ptr %36 to i64
  %38 = sub i64 %37, ptrtoint (ptr @.str.24.250 to i64)
  br label %39

39:                                               ; preds = %33, %17
  %40 = phi i64 [ %38, %33 ], [ 8, %17 ]
  %41 = getelementptr inbounds [9 x ptr], ptr @arg_types_desc, i64 0, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !14
  %43 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %18, ptr noundef nonnull @.str.2.251, i32 noundef %23, i32 noundef %21, i32 noundef %24, ptr noundef nonnull %13, ptr noundef nonnull %29, ptr noundef %42) #46
  %44 = load ptr, ptr %30, align 8, !tbaa !403
  %45 = icmp eq ptr %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %39
  %47 = load i8, ptr %44, align 1, !tbaa !60
  %48 = sext i8 %47 to i32
  switch i32 %48, label %97 [
    i32 0, label %49
    i32 76, label %52
    i32 83, label %58
    i32 68, label %77
    i32 43, label %83
    i32 73, label %83
    i32 84, label %89
    i32 102, label %89
    i32 70, label %89
  ]

49:                                               ; preds = %46, %39
  %50 = load ptr, ptr @stderr, align 8, !tbaa !14
  %51 = tail call i64 @fwrite(ptr nonnull @.str.4.252, i64 10, i64 1, ptr %50) #47
  br label %97

52:                                               ; preds = %46
  %53 = load ptr, ptr @stderr, align 8, !tbaa !14
  %54 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 4
  %55 = load ptr, ptr %54, align 8, !tbaa !405
  %56 = load i64, ptr %55, align 8, !tbaa !408
  %57 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %53, ptr noundef nonnull @.str.5.253, i64 noundef %56) #46
  br label %97

58:                                               ; preds = %46
  %59 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 4
  %60 = load ptr, ptr %59, align 8, !tbaa !405
  %61 = load i8, ptr %60, align 1, !tbaa !60
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %74, label %63

63:                                               ; preds = %58
  %64 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %60) #48
  %65 = icmp ult i64 %64, 10
  br i1 %65, label %66, label %69

66:                                               ; preds = %63
  %67 = load ptr, ptr @stderr, align 8, !tbaa !14
  %68 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.6.254, ptr noundef nonnull %60) #46
  br label %97

69:                                               ; preds = %63
  %70 = getelementptr inbounds i8, ptr %60, i64 7
  store i8 0, ptr %70, align 1, !tbaa !60
  %71 = load ptr, ptr @stderr, align 8, !tbaa !14
  %72 = load ptr, ptr %59, align 8, !tbaa !405
  %73 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %71, ptr noundef nonnull @.str.7.255, ptr noundef %72) #46
  br label %97

74:                                               ; preds = %58
  %75 = load ptr, ptr @stderr, align 8, !tbaa !14
  %76 = tail call i64 @fwrite(ptr nonnull @.str.8.256, i64 10, i64 1, ptr %75) #47
  br label %97

77:                                               ; preds = %46
  %78 = load ptr, ptr @stderr, align 8, !tbaa !14
  %79 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 4
  %80 = load ptr, ptr %79, align 8, !tbaa !405
  %81 = load double, ptr %80, align 8, !tbaa !406
  %82 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %78, ptr noundef nonnull @.str.9.257, double noundef %81) #46
  br label %97

83:                                               ; preds = %46, %46
  %84 = load ptr, ptr @stderr, align 8, !tbaa !14
  %85 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 4
  %86 = load ptr, ptr %85, align 8, !tbaa !405
  %87 = load i32, ptr %86, align 4, !tbaa !15
  %88 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %84, ptr noundef nonnull @.str.10.258, i32 noundef %87) #46
  br label %97

89:                                               ; preds = %46, %46, %46
  %90 = load ptr, ptr @stderr, align 8, !tbaa !14
  %91 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %12, i32 4
  %92 = load ptr, ptr %91, align 8, !tbaa !405
  %93 = load i32, ptr %92, align 4, !tbaa !15
  %94 = icmp eq i32 %93, 0
  %95 = select i1 %94, ptr @.str.12.259, ptr @.str.11.260
  %96 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %90, ptr noundef nonnull @.str.6.254, ptr noundef nonnull %95) #46
  br label %97

97:                                               ; preds = %89, %83, %77, %74, %69, %66, %52, %49, %46
  %98 = load ptr, ptr @stderr, align 8, !tbaa !14
  %99 = load ptr, ptr %14, align 8, !tbaa !412
  %100 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %98, ptr noundef nonnull @.str.13.261, ptr noundef %99) #46
  br label %101

101:                                              ; preds = %97, %11
  %102 = add nuw i64 %12, 1
  %103 = getelementptr inbounds %struct.ArgumentDescription, ptr %4, i64 %102
  %104 = load ptr, ptr %103, align 8, !tbaa !411
  %105 = icmp eq ptr %104, null
  br i1 %105, label %106, label %11

106:                                              ; preds = %101, %2
  tail call void @exit(i32 noundef 1) #52
  unreachable
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare double @atof(ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i64 @atol(ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #26

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare ptr @memchr(ptr, i32, i64) local_unnamed_addr #27

; Function Attrs: nounwind optsize uwtable
define internal void @process_args(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !402
  %6 = load ptr, ptr %5, align 8, !tbaa !411
  %7 = icmp eq ptr %6, null
  br i1 %7, label %50, label %8

8:                                                ; preds = %45, %2
  %9 = phi i64 [ %46, %45 ], [ 0, %2 ]
  %10 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !414
  %12 = icmp eq ptr %11, null
  br i1 %12, label %45, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !403
  %16 = tail call ptr @getenv(ptr noundef nonnull %11) #43
  %17 = icmp eq ptr %16, null
  br i1 %17, label %45, label %18

18:                                               ; preds = %13
  %19 = load i8, ptr %15, align 1, !tbaa !60
  %20 = sext i8 %19 to i32
  switch i32 %20, label %40 [
    i32 83, label %34
    i32 76, label %30
    i32 68, label %26
    i32 73, label %21
  ]

21:                                               ; preds = %18
  %22 = tail call i64 @strtol(ptr nocapture noundef nonnull %16, ptr noundef null, i32 noundef 0) #43
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 4
  %25 = load ptr, ptr %24, align 8, !tbaa !405
  store i32 %23, ptr %25, align 4, !tbaa !15
  br label %40

26:                                               ; preds = %18
  %27 = tail call double @strtod(ptr nocapture noundef nonnull %16, ptr noundef null) #43
  %28 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 4
  %29 = load ptr, ptr %28, align 8, !tbaa !405
  store double %27, ptr %29, align 8, !tbaa !406
  br label %40

30:                                               ; preds = %18
  %31 = tail call i64 @strtoll(ptr nocapture noundef nonnull %16, ptr noundef null, i32 noundef 0) #43
  %32 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 4
  %33 = load ptr, ptr %32, align 8, !tbaa !405
  store i64 %31, ptr %33, align 8, !tbaa !408
  br label %40

34:                                               ; preds = %18
  %35 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 4
  %36 = load ptr, ptr %35, align 8, !tbaa !405
  %37 = getelementptr inbounds i8, ptr %15, i64 1
  %38 = tail call i64 @strtol(ptr nocapture noundef nonnull %37, ptr noundef null, i32 noundef 0) #43
  %39 = tail call ptr @strncpy(ptr noundef %36, ptr noundef nonnull %16, i64 noundef %38) #43
  br label %40

40:                                               ; preds = %34, %30, %26, %21, %18
  %41 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %9, i32 6
  %42 = load ptr, ptr %41, align 8, !tbaa !410
  %43 = icmp eq ptr %42, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  tail call void %42(ptr noundef %0, ptr noundef nonnull %16) #43
  br label %45

45:                                               ; preds = %44, %40, %13, %8
  %46 = add nuw i64 %9, 1
  %47 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !411
  %49 = icmp eq ptr %48, null
  br i1 %49, label %50, label %8

50:                                               ; preds = %45, %2
  %51 = load ptr, ptr %1, align 8, !tbaa !14
  %52 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 2
  store ptr %51, ptr %52, align 8, !tbaa !409
  %53 = getelementptr inbounds ptr, ptr %1, i64 1
  store ptr %53, ptr %3, align 8, !tbaa !14
  %54 = load ptr, ptr %53, align 8, !tbaa !14
  %55 = icmp eq ptr %54, null
  br i1 %55, label %150, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %struct.ArgumentState, ptr %0, i64 0, i32 1
  br label %58

58:                                               ; preds = %145, %56
  %59 = phi ptr [ %54, %56 ], [ %148, %145 ]
  %60 = phi ptr [ %53, %56 ], [ %147, %145 ]
  %61 = load i8, ptr %59, align 1, !tbaa !60
  %62 = icmp eq i8 %61, 45
  br i1 %62, label %63, label %131

63:                                               ; preds = %58
  %64 = getelementptr inbounds i8, ptr %59, i64 1
  %65 = load i8, ptr %64, align 1, !tbaa !60
  %66 = icmp eq i8 %65, 45
  br i1 %66, label %70, label %67

67:                                               ; preds = %63
  store ptr %64, ptr %60, align 8, !tbaa !14
  %68 = load i8, ptr %64, align 1, !tbaa !60
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %145, label %109

70:                                               ; preds = %63
  %71 = load ptr, ptr %5, align 8, !tbaa !411
  %72 = icmp eq ptr %71, null
  br i1 %72, label %80, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds i8, ptr %59, i64 2
  %75 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %74, i32 noundef 61) #48
  %76 = icmp eq ptr %75, null
  %77 = ptrtoint ptr %75 to i64
  %78 = ptrtoint ptr %74 to i64
  %79 = sub i64 %77, %78
  br label %81

80:                                               ; preds = %104, %70
  tail call void @usage(ptr noundef %0, ptr poison) #44
  unreachable

81:                                               ; preds = %104, %73
  %82 = phi ptr [ %71, %73 ], [ %107, %104 ]
  %83 = phi i64 [ 0, %73 ], [ %105, %104 ]
  br i1 %76, label %84, label %86

84:                                               ; preds = %81
  %85 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %74) #48
  br label %86

86:                                               ; preds = %84, %81
  %87 = phi i64 [ %85, %84 ], [ %79, %81 ]
  %88 = shl i64 %87, 32
  %89 = ashr exact i64 %88, 32
  %90 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %82) #48
  %91 = icmp eq i64 %89, %90
  br i1 %91, label %92, label %104

92:                                               ; preds = %86
  %93 = tail call i32 @strncmp(ptr noundef nonnull %82, ptr noundef nonnull %74, i64 noundef %89) #48
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %104

95:                                               ; preds = %92
  %.lcssa1 = phi i64 [ %83, %92 ]
  %96 = trunc i64 %.lcssa1 to i32
  br i1 %76, label %97, label %101

97:                                               ; preds = %95
  %98 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %59) #48
  %99 = add i64 %98, -1
  %100 = getelementptr inbounds i8, ptr %59, i64 %99
  br label %101

101:                                              ; preds = %97, %95
  %102 = phi ptr [ %100, %97 ], [ %75, %95 ]
  store ptr %102, ptr %60, align 8, !tbaa !14
  call void @process_arg(ptr noundef %0, i32 noundef %96, ptr noundef nonnull %3) #44
  %103 = load ptr, ptr %3, align 8, !tbaa !14
  br label %145

104:                                              ; preds = %92, %86
  %105 = add nuw i64 %83, 1
  %106 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %105
  %107 = load ptr, ptr %106, align 8, !tbaa !411
  %108 = icmp eq ptr %107, null
  br i1 %108, label %80, label %81

109:                                              ; preds = %119, %67
  %110 = phi i8 [ %124, %119 ], [ %68, %67 ]
  %111 = load ptr, ptr %5, align 8, !tbaa !411
  %112 = icmp eq ptr %111, null
  br i1 %112, label %113, label %114

113:                                              ; preds = %126, %109
  tail call void @usage(ptr noundef %0, ptr poison) #44
  unreachable

114:                                              ; preds = %126, %109
  %115 = phi i64 [ %127, %126 ], [ 0, %109 ]
  %116 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %115, i32 1
  %117 = load i8, ptr %116, align 8, !tbaa !413
  %118 = icmp eq i8 %117, %110
  br i1 %118, label %119, label %126

119:                                              ; preds = %114
  %.lcssa = phi i64 [ %115, %114 ]
  %120 = trunc i64 %.lcssa to i32
  call void @process_arg(ptr noundef %0, i32 noundef %120, ptr noundef nonnull %3) #44
  %121 = load ptr, ptr %3, align 8, !tbaa !14
  %122 = load ptr, ptr %121, align 8, !tbaa !14
  %123 = getelementptr inbounds i8, ptr %122, i64 1
  store ptr %123, ptr %121, align 8, !tbaa !14
  %124 = load i8, ptr %123, align 1, !tbaa !60
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %145, label %109, !llvm.loop !415

126:                                              ; preds = %114
  %127 = add nuw i64 %115, 1
  %128 = getelementptr inbounds %struct.ArgumentDescription, ptr %5, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !411
  %130 = icmp eq ptr %129, null
  br i1 %130, label %113, label %114

131:                                              ; preds = %58
  %132 = load ptr, ptr %0, align 8, !tbaa !13
  %133 = load i32, ptr %57, align 8, !tbaa !7
  %134 = add nsw i32 %133, 2
  %135 = sext i32 %134 to i64
  %136 = shl nsw i64 %135, 3
  %137 = tail call ptr @realloc(ptr noundef %132, i64 noundef %136) #51
  store ptr %137, ptr %0, align 8, !tbaa !13
  %138 = load ptr, ptr %60, align 8, !tbaa !14
  %139 = load i32, ptr %57, align 8, !tbaa !7
  %140 = add nsw i32 %139, 1
  store i32 %140, ptr %57, align 8, !tbaa !7
  %141 = sext i32 %139 to i64
  %142 = getelementptr inbounds ptr, ptr %137, i64 %141
  store ptr %138, ptr %142, align 8, !tbaa !14
  %143 = sext i32 %140 to i64
  %144 = getelementptr inbounds ptr, ptr %137, i64 %143
  store ptr null, ptr %144, align 8, !tbaa !14
  br label %145

145:                                              ; preds = %131, %119, %101, %67
  %146 = phi ptr [ %60, %67 ], [ %103, %101 ], [ %60, %131 ], [ %121, %119 ]
  %147 = getelementptr inbounds ptr, ptr %146, i64 1
  store ptr %147, ptr %3, align 8, !tbaa !14
  %148 = load ptr, ptr %147, align 8, !tbaa !14
  %149 = icmp eq ptr %148, null
  br i1 %149, label %150, label %58, !llvm.loop !416

150:                                              ; preds = %145, %50
  ret void
}

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef ptr @getenv(ptr nocapture noundef) local_unnamed_addr #28

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare i64 @strtoll(ptr noundef readonly, ptr nocapture noundef, i32 noundef) local_unnamed_addr #21

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize uwtable
define internal void @print_paren(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 10
  %3 = load i8, ptr %2, align 1, !tbaa !417
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %47

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7
  %7 = load i32, ptr %6, align 8, !tbaa !420
  switch i32 %7, label %8 [
    i32 0, label %25
    i32 1, label %12
  ]

8:                                                ; preds = %5
  %9 = tail call i32 @putchar(i32 40)
  %10 = load i32, ptr %6, align 8, !tbaa !420
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %47, label %12

12:                                               ; preds = %8, %5
  %13 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7, i32 2
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %19, %14 ]
  %16 = load ptr, ptr %13, align 8, !tbaa !421
  %17 = getelementptr inbounds ptr, ptr %16, i64 %15
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  tail call void @print_paren(ptr noundef %18) #44
  %19 = add nuw nsw i64 %15, 1
  %20 = load i32, ptr %6, align 8, !tbaa !420
  %21 = zext i32 %20 to i64
  %22 = icmp ult i64 %19, %21
  br i1 %22, label %14, label %23, !llvm.loop !422

23:                                               ; preds = %14
  %.lcssa = phi i32 [ %20, %14 ]
  %24 = icmp ugt i32 %.lcssa, 1
  br i1 %24, label %44, label %47

25:                                               ; preds = %5
  %26 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 19, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !423
  %28 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 19, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !424
  %30 = icmp eq ptr %27, %29
  br i1 %30, label %47, label %31

31:                                               ; preds = %25
  %32 = tail call i32 @putchar(i32 32)
  %33 = load ptr, ptr %26, align 8, !tbaa !423
  %34 = load ptr, ptr %28, align 8, !tbaa !424
  %35 = icmp ult ptr %33, %34
  br i1 %35, label %36, label %44

36:                                               ; preds = %36, %31
  %37 = phi ptr [ %41, %36 ], [ %33, %31 ]
  %38 = load i8, ptr %37, align 1, !tbaa !60
  %39 = sext i8 %38 to i32
  %40 = tail call i32 @putchar(i32 %39)
  %41 = getelementptr inbounds i8, ptr %37, i64 1
  %42 = load ptr, ptr %28, align 8, !tbaa !424
  %43 = icmp ult ptr %41, %42
  br i1 %43, label %36, label %44, !llvm.loop !425

44:                                               ; preds = %36, %31, %23
  %45 = phi i32 [ 41, %23 ], [ 32, %31 ], [ 32, %36 ]
  %46 = tail call i32 @putchar(i32 %45)
  br label %47

47:                                               ; preds = %44, %25, %23, %8, %1
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @xprint_paren(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #20 {
  %3 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 10
  %4 = load i8, ptr %3, align 1, !tbaa !417
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %57

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !426
  %9 = getelementptr inbounds %struct.D_ParserTables, ptr %8, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !431
  %11 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19
  %12 = load i32, ptr %11, align 8, !tbaa !433
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.D_Symbol, ptr %10, i64 %13, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !434
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.273, ptr noundef %15) #44
  %17 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7
  %18 = load i32, ptr %17, align 8, !tbaa !420
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %6
  %21 = tail call i32 @putchar(i32 40)
  %22 = load i32, ptr %17, align 8, !tbaa !420
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %54, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 2
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %31, %26 ]
  %28 = load ptr, ptr %25, align 8, !tbaa !421
  %29 = getelementptr inbounds ptr, ptr %28, i64 %27
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  tail call void @xprint_paren(ptr noundef %0, ptr noundef %30) #44
  %31 = add nuw nsw i64 %27, 1
  %32 = load i32, ptr %17, align 8, !tbaa !420
  %33 = zext i32 %32 to i64
  %34 = icmp ult i64 %31, %33
  br i1 %34, label %26, label %54, !llvm.loop !436

35:                                               ; preds = %6
  %36 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !423
  %38 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !424
  %40 = icmp eq ptr %37, %39
  br i1 %40, label %57, label %41

41:                                               ; preds = %35
  %42 = tail call i32 @putchar(i32 32)
  %43 = load ptr, ptr %36, align 8, !tbaa !423
  %44 = load ptr, ptr %38, align 8, !tbaa !424
  %45 = icmp ult ptr %43, %44
  br i1 %45, label %46, label %54

46:                                               ; preds = %46, %41
  %47 = phi ptr [ %51, %46 ], [ %43, %41 ]
  %48 = load i8, ptr %47, align 1, !tbaa !60
  %49 = sext i8 %48 to i32
  %50 = tail call i32 @putchar(i32 %49)
  %51 = getelementptr inbounds i8, ptr %47, i64 1
  %52 = load ptr, ptr %38, align 8, !tbaa !424
  %53 = icmp ult ptr %51, %52
  br i1 %53, label %46, label %54, !llvm.loop !437

54:                                               ; preds = %46, %41, %26, %20
  %55 = phi i32 [ 41, %20 ], [ 32, %41 ], [ 32, %46 ], [ 41, %26 ]
  %56 = tail call i32 @putchar(i32 %55)
  br label %57

57:                                               ; preds = %54, %35, %2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal ptr @d_get_child(ptr nocapture noundef readonly %0, i32 noundef %1) #15 {
  %3 = icmp slt i32 %1, 0
  br i1 %3, label %15, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, ptr %0, i64 -112
  %6 = load i32, ptr %5, align 8, !tbaa !420
  %7 = icmp ugt i32 %6, %1
  br i1 %7, label %8, label %15

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, ptr %0, i64 -104
  %10 = load ptr, ptr %9, align 8, !tbaa !421
  %11 = zext i32 %1 to i64
  %12 = getelementptr inbounds ptr, ptr %10, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = getelementptr inbounds %struct.PNode, ptr %13, i64 0, i32 19
  br label %15

15:                                               ; preds = %8, %4, %2
  %16 = phi ptr [ %14, %8 ], [ null, %4 ], [ null, %2 ]
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @d_get_number_of_children(ptr nocapture noundef readonly %0) #29 {
  %2 = getelementptr inbounds i8, ptr %0, i64 -112
  %3 = load i32, ptr %2, align 8, !tbaa !420
  ret i32 %3
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal ptr @find_SNode(ptr nocapture noundef readonly %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) #16 {
  %5 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12
  %6 = load ptr, ptr %5, align 8, !tbaa !438
  %7 = icmp eq ptr %6, null
  br i1 %7, label %49, label %8

8:                                                ; preds = %4
  %9 = shl i32 %1, 12
  %10 = ptrtoint ptr %2 to i64
  %11 = trunc i64 %10 to i32
  %12 = add i32 %9, %11
  %13 = ptrtoint ptr %3 to i64
  %14 = trunc i64 %13 to i32
  %15 = add i32 %12, %14
  %16 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 2
  %17 = load i32, ptr %16, align 4, !tbaa !439
  %18 = urem i32 %15, %17
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds ptr, ptr %6, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !14
  %22 = icmp eq ptr %21, null
  br i1 %22, label %49, label %23

23:                                               ; preds = %8
  %24 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !426
  %26 = getelementptr inbounds %struct.D_ParserTables, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !440
  %28 = ptrtoint ptr %27 to i64
  %29 = zext i32 %1 to i64
  br label %30

30:                                               ; preds = %45, %23
  %31 = phi ptr [ %21, %23 ], [ %47, %45 ]
  %32 = load ptr, ptr %31, align 8, !tbaa !441
  %33 = ptrtoint ptr %32 to i64
  %34 = sub i64 %33, %28
  %35 = sdiv exact i64 %34, 120
  %36 = icmp eq i64 %35, %29
  br i1 %36, label %37, label %45

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.SNode, ptr %31, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !443
  %40 = icmp eq ptr %39, %2
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.SNode, ptr %31, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !444
  %44 = icmp eq ptr %43, %3
  br i1 %44, label %49, label %45

45:                                               ; preds = %41, %37, %30
  %46 = getelementptr inbounds %struct.SNode, ptr %31, i64 0, i32 8
  %47 = load ptr, ptr %46, align 8, !tbaa !14
  %48 = icmp eq ptr %47, null
  br i1 %48, label %49, label %30, !llvm.loop !445

49:                                               ; preds = %45, %41, %8, %4
  %50 = phi ptr [ null, %4 ], [ null, %8 ], [ %31, %41 ], [ null, %45 ]
  ret ptr %50
}

; Function Attrs: nounwind optsize uwtable
define internal void @insert_SNode_internal(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12
  %4 = load ptr, ptr %1, align 8, !tbaa !441
  %5 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !426
  %7 = getelementptr inbounds %struct.D_ParserTables, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !440
  %9 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !443
  %11 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !444
  %13 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 3
  %14 = load i32, ptr %13, align 8, !tbaa !446
  %15 = add i32 %14, 1
  %16 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 2
  %17 = load i32, ptr %16, align 4, !tbaa !439
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %19, label %51

19:                                               ; preds = %2
  %20 = load ptr, ptr %3, align 8, !tbaa !438
  %21 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 1
  %22 = load i32, ptr %21, align 8, !tbaa !447
  %23 = add i32 %22, 1
  store i32 %23, ptr %21, align 8, !tbaa !447
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [0 x i32], ptr @prime2, i64 0, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !15
  store i32 %26, ptr %16, align 4, !tbaa !439
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = tail call ptr @calloc(i64 1, i64 %28)
  store ptr %29, ptr %3, align 8, !tbaa !438
  %30 = icmp eq i32 %17, 0
  br i1 %30, label %47, label %31

31:                                               ; preds = %19
  %32 = zext i32 %17 to i64
  br label %33

33:                                               ; preds = %44, %31
  %34 = phi i64 [ 0, %31 ], [ %45, %44 ]
  %35 = getelementptr inbounds ptr, ptr %20, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !14
  %37 = icmp eq ptr %36, null
  br i1 %37, label %44, label %38

38:                                               ; preds = %38, %33
  %39 = phi ptr [ %42, %38 ], [ %36, %33 ]
  %40 = getelementptr inbounds %struct.SNode, ptr %39, i64 0, i32 8
  %41 = load ptr, ptr %40, align 8, !tbaa !448
  store ptr %41, ptr %35, align 8, !tbaa !14
  tail call void @insert_SNode_internal(ptr noundef %0, ptr noundef nonnull %39) #44
  %42 = load ptr, ptr %35, align 8, !tbaa !14
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %38, !llvm.loop !449

44:                                               ; preds = %38, %33
  %45 = add nuw nsw i64 %34, 1
  %46 = icmp eq i64 %45, %32
  br i1 %46, label %47, label %33, !llvm.loop !450

47:                                               ; preds = %44, %19
  tail call void @free(ptr noundef %20) #43
  %48 = load i32, ptr %16, align 4, !tbaa !439
  %49 = load i32, ptr %13, align 8, !tbaa !446
  %50 = add i32 %49, 1
  br label %51

51:                                               ; preds = %47, %2
  %52 = phi i32 [ %50, %47 ], [ %15, %2 ]
  %53 = phi i32 [ %48, %47 ], [ %17, %2 ]
  %54 = ptrtoint ptr %4 to i64
  %55 = ptrtoint ptr %8 to i64
  %56 = sub i64 %54, %55
  %57 = sdiv exact i64 %56, 120
  %58 = trunc i64 %57 to i32
  %59 = shl i32 %58, 12
  %60 = ptrtoint ptr %10 to i64
  %61 = trunc i64 %60 to i32
  %62 = ptrtoint ptr %12 to i64
  %63 = trunc i64 %62 to i32
  %64 = add i32 %63, %61
  %65 = add i32 %64, %59
  %66 = load ptr, ptr %3, align 8, !tbaa !438
  %67 = urem i32 %65, %53
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds ptr, ptr %66, i64 %68
  %70 = load ptr, ptr %69, align 8, !tbaa !14
  %71 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 8
  store ptr %70, ptr %71, align 8, !tbaa !448
  store ptr %1, ptr %69, align 8, !tbaa !14
  store i32 %52, ptr %13, align 8, !tbaa !446
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal ptr @find_PNode(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5) #16 {
  %7 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !451
  %9 = icmp eq ptr %8, null
  br i1 %9, label %57, label %10

10:                                               ; preds = %6
  %11 = ptrtoint ptr %1 to i64
  %12 = trunc i64 %11 to i32
  %13 = shl i32 %12, 8
  %14 = ptrtoint ptr %2 to i64
  %15 = trunc i64 %14 to i32
  %16 = shl i32 %15, 16
  %17 = ptrtoint ptr %4 to i64
  %18 = trunc i64 %17 to i32
  %19 = ptrtoint ptr %5 to i64
  %20 = trunc i64 %19 to i32
  %21 = add i32 %13, %3
  %22 = add i32 %21, %16
  %23 = add i32 %22, %18
  %24 = add i32 %23, %20
  %25 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 2
  %26 = load i32, ptr %25, align 4, !tbaa !452
  %27 = urem i32 %24, %26
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds ptr, ptr %8, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  %31 = icmp eq ptr %30, null
  br i1 %31, label %57, label %32

32:                                               ; preds = %53, %10
  %33 = phi ptr [ %55, %53 ], [ %30, %10 ]
  %34 = getelementptr inbounds %struct.PNode, ptr %33, i64 0, i32 19
  %35 = load i32, ptr %34, align 8, !tbaa !433
  %36 = icmp eq i32 %35, %3
  br i1 %36, label %37, label %53

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.PNode, ptr %33, i64 0, i32 19, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !423
  %40 = icmp eq ptr %39, %1
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.PNode, ptr %33, i64 0, i32 19, i32 3
  %43 = load ptr, ptr %42, align 8, !tbaa !424
  %44 = icmp eq ptr %43, %2
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.PNode, ptr %33, i64 0, i32 17
  %47 = load ptr, ptr %46, align 8, !tbaa !453
  %48 = icmp eq ptr %47, %4
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.PNode, ptr %33, i64 0, i32 18
  %51 = load ptr, ptr %50, align 8, !tbaa !454
  %52 = icmp eq ptr %51, %5
  br i1 %52, label %57, label %53

53:                                               ; preds = %49, %45, %41, %37, %32
  %54 = getelementptr inbounds %struct.PNode, ptr %33, i64 0, i32 12
  %55 = load ptr, ptr %54, align 8, !tbaa !14
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %32, !llvm.loop !455

57:                                               ; preds = %53, %49, %10, %6
  %58 = phi ptr [ null, %6 ], [ null, %10 ], [ %33, %49 ], [ null, %53 ]
  ret ptr %58
}

; Function Attrs: nounwind optsize uwtable
define internal void @insert_PNode_internal(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11
  %4 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19
  %5 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !423
  %7 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !424
  %9 = load i32, ptr %4, align 8, !tbaa !433
  %10 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 17
  %11 = load ptr, ptr %10, align 8, !tbaa !453
  %12 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 18
  %13 = load ptr, ptr %12, align 8, !tbaa !454
  %14 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 3
  %15 = load i32, ptr %14, align 8, !tbaa !456
  %16 = add i32 %15, 1
  %17 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !452
  %19 = icmp ugt i32 %16, %18
  br i1 %19, label %20, label %52

20:                                               ; preds = %2
  %21 = load ptr, ptr %3, align 8, !tbaa !451
  %22 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 1
  %23 = load i32, ptr %22, align 8, !tbaa !457
  %24 = add i32 %23, 1
  store i32 %24, ptr %22, align 8, !tbaa !457
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [0 x i32], ptr @prime2, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !15
  store i32 %27, ptr %17, align 4, !tbaa !452
  %28 = zext i32 %27 to i64
  %29 = shl nuw nsw i64 %28, 3
  %30 = tail call ptr @calloc(i64 1, i64 %29)
  store ptr %30, ptr %3, align 8, !tbaa !451
  %31 = icmp eq i32 %18, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %20
  %33 = zext i32 %18 to i64
  br label %34

34:                                               ; preds = %45, %32
  %35 = phi i64 [ 0, %32 ], [ %46, %45 ]
  %36 = getelementptr inbounds ptr, ptr %21, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !14
  %38 = icmp eq ptr %37, null
  br i1 %38, label %45, label %39

39:                                               ; preds = %39, %34
  %40 = phi ptr [ %43, %39 ], [ %37, %34 ]
  %41 = getelementptr inbounds %struct.PNode, ptr %40, i64 0, i32 12
  %42 = load ptr, ptr %41, align 8, !tbaa !458
  store ptr %42, ptr %36, align 8, !tbaa !14
  tail call void @insert_PNode_internal(ptr noundef %0, ptr noundef nonnull %40) #44
  %43 = load ptr, ptr %36, align 8, !tbaa !14
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %39, !llvm.loop !459

45:                                               ; preds = %39, %34
  %46 = add nuw nsw i64 %35, 1
  %47 = icmp eq i64 %46, %33
  br i1 %47, label %48, label %34, !llvm.loop !460

48:                                               ; preds = %45, %20
  tail call void @free(ptr noundef %21) #43
  %49 = load i32, ptr %17, align 4, !tbaa !452
  %50 = load i32, ptr %14, align 8, !tbaa !456
  %51 = add i32 %50, 1
  br label %52

52:                                               ; preds = %48, %2
  %53 = phi i32 [ %51, %48 ], [ %16, %2 ]
  %54 = phi i32 [ %49, %48 ], [ %18, %2 ]
  %55 = ptrtoint ptr %6 to i64
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 8
  %58 = ptrtoint ptr %8 to i64
  %59 = trunc i64 %58 to i32
  %60 = shl i32 %59, 16
  %61 = ptrtoint ptr %11 to i64
  %62 = trunc i64 %61 to i32
  %63 = ptrtoint ptr %13 to i64
  %64 = trunc i64 %63 to i32
  %65 = add i32 %57, %9
  %66 = add i32 %65, %60
  %67 = add i32 %66, %62
  %68 = add i32 %67, %64
  %69 = load ptr, ptr %3, align 8, !tbaa !451
  %70 = urem i32 %68, %54
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds ptr, ptr %69, i64 %71
  %73 = load ptr, ptr %72, align 8, !tbaa !14
  %74 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 12
  store ptr %73, ptr %74, align 8, !tbaa !458
  store ptr %1, ptr %72, align 8, !tbaa !14
  store i32 %53, ptr %14, align 8, !tbaa !456
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @ambiguity_abort_fn(ptr nocapture readnone %0, i32 noundef %1, ptr nocapture noundef readonly %2) #0 {
  %4 = load i32, ptr @verbose_level, align 4, !tbaa !15
  %5 = icmp ne i32 %4, 0
  %6 = icmp sgt i32 %1, 0
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %18

8:                                                ; preds = %3
  %9 = zext i32 %1 to i64
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i64 [ 0, %8 ], [ %16, %10 ]
  %12 = getelementptr inbounds ptr, ptr %2, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = getelementptr inbounds i8, ptr %13, i64 -152
  tail call void @print_paren(ptr noundef nonnull %14) #44
  %15 = tail call i32 @putchar(i32 10)
  %16 = add nuw nsw i64 %11, 1
  %17 = icmp eq i64 %16, %9
  br i1 %17, label %18, label %10, !llvm.loop !461

18:                                               ; preds = %10, %3
  %19 = load ptr, ptr %2, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.D_ParseNode, ptr %19, i64 0, i32 1, i32 4
  %21 = load i32, ptr %20, align 8, !tbaa !462
  %22 = getelementptr inbounds %struct.D_ParseNode, ptr %19, i64 0, i32 1, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !463
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.6.274, i32 noundef %21, ptr noundef %23) #43
  %24 = load ptr, ptr %2, align 8, !tbaa !14
  ret ptr %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @null_white_space(ptr nocapture %0, ptr nocapture %1, ptr nocapture %2) #30 {
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: read, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @new_D_Parser(ptr noundef %0, i32 noundef %1) #18 {
  %3 = tail call dereferenceable_or_null(432) ptr @calloc(i64 1, i64 432)
  %4 = getelementptr inbounds %struct.Parser, ptr %3, i64 0, i32 3
  store ptr %0, ptr %4, align 8, !tbaa !426
  %5 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 6, i32 4
  store i32 1, ptr %5, align 8, !tbaa !464
  %6 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 8
  store i32 %1, ptr %6, align 4, !tbaa !465
  %7 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 15
  store i32 100, ptr %7, align 8, !tbaa !466
  %8 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 3
  store ptr @syntax_error_report_fn, ptr %8, align 8, !tbaa !467
  %9 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 4
  store ptr @ambiguity_abort_fn, ptr %9, align 8, !tbaa !468
  %10 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 16
  store i32 1, ptr %10, align 4, !tbaa !469
  %11 = getelementptr inbounds %struct.D_ParserTables, ptr %0, i64 0, i32 9
  %12 = load i32, ptr %11, align 8, !tbaa !470
  %13 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 9
  store i32 %12, ptr %13, align 8, !tbaa !471
  %14 = getelementptr inbounds %struct.D_ParserTables, ptr %0, i64 0, i32 6
  %15 = load ptr, ptr %14, align 8, !tbaa !472
  %16 = icmp eq ptr %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 1
  store ptr %15, ptr %18, align 8, !tbaa !473
  br label %26

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.D_ParserTables, ptr %0, i64 0, i32 3
  %21 = load i32, ptr %20, align 8, !tbaa !474
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %struct.D_Parser, ptr %3, i64 0, i32 1
  br i1 %22, label %25, label %24

24:                                               ; preds = %19
  store ptr @parse_whitespace, ptr %23, align 8, !tbaa !473
  br label %26

25:                                               ; preds = %19
  store ptr @white_space, ptr %23, align 8, !tbaa !473
  br label %26

26:                                               ; preds = %25, %24, %17
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal void @syntax_error_report_fn(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 6, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !261
  %4 = tail call ptr @d_dup_pathname_str(ptr noundef %3) #43
  %5 = load ptr, ptr @stderr, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 6, i32 4
  %7 = load i32, ptr %6, align 8, !tbaa !475
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef nonnull @.str.10.279, ptr noundef %4, i32 noundef %7) #46
  tail call void @free(ptr noundef %4) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @parse_whitespace(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture readnone %2) #0 {
  %4 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 27
  %5 = load ptr, ptr %4, align 8, !tbaa !476
  %6 = load ptr, ptr %1, align 8, !tbaa !477
  %7 = getelementptr inbounds %struct.Parser, ptr %5, i64 0, i32 1
  store ptr %6, ptr %7, align 8, !tbaa !478
  %8 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !426
  %10 = getelementptr inbounds %struct.D_ParserTables, ptr %9, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !474
  %12 = tail call fastcc i32 @exhaustive_parse(ptr noundef %5, i32 noundef %11) #44, !range !479
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %27

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.Parser, ptr %5, i64 0, i32 16
  %16 = load ptr, ptr %15, align 8, !tbaa !480
  %17 = icmp eq ptr %16, null
  br i1 %17, label %27, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.SNode, ptr %16, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %1, ptr noundef nonnull align 8 dereferenceable(32) %19, i64 32, i1 false), !tbaa.struct !481
  %20 = load ptr, ptr %15, align 8, !tbaa !480
  %21 = getelementptr inbounds %struct.SNode, ptr %20, i64 0, i32 7
  %22 = load i32, ptr %21, align 8, !tbaa !482
  %23 = add i32 %22, -1
  store i32 %23, ptr %21, align 8, !tbaa !482
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %18
  tail call fastcc void @free_SNode(ptr noundef nonnull %5, ptr noundef nonnull %20) #44
  br label %26

26:                                               ; preds = %25, %18
  store ptr null, ptr %15, align 8, !tbaa !480
  br label %27

27:                                               ; preds = %26, %14, %3
  ret void
}

; Function Attrs: nofree nounwind optsize memory(read, argmem: readwrite) uwtable
define internal void @white_space(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture readnone %2) #31 {
  %4 = load ptr, ptr %1, align 8, !tbaa !477
  %5 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !483
  %7 = icmp eq ptr %6, %4
  %8 = select i1 %7, ptr %4, ptr null
  %9 = load i8, ptr %4, align 1, !tbaa !60
  %10 = icmp eq i8 %9, 35
  br i1 %10, label %11, label %87

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.d_loc_t, ptr %1, i64 0, i32 2
  %13 = load i32, ptr %12, align 8, !tbaa !484
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %87

15:                                               ; preds = %105, %11
  %16 = phi ptr [ %4, %11 ], [ %.lcssa1, %105 ]
  %17 = phi ptr [ %8, %11 ], [ %.lcssa1, %105 ]
  br label %18

18:                                               ; preds = %18, %15
  %19 = phi ptr [ %16, %15 ], [ %20, %18 ]
  %20 = getelementptr inbounds i8, ptr %19, i64 1
  %21 = load i8, ptr %20, align 1, !tbaa !60
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [256 x i8], ptr @_wspace, i64 0, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !60
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %18, !llvm.loop !485

26:                                               ; preds = %18
  %.lcssa9 = phi ptr [ %19, %18 ]
  %.lcssa8 = phi ptr [ %20, %18 ]
  %.lcssa7 = phi i8 [ %21, %18 ]
  %27 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(5) @.str.11.277, ptr noundef nonnull dereferenceable(1) %.lcssa8, i64 noundef 4) #48
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %46

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, ptr %.lcssa9, i64 5
  %31 = load i8, ptr %30, align 1, !tbaa !60
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i8], ptr @_wspace, i64 0, i64 %32
  %34 = load i8, ptr %33, align 1, !tbaa !60
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %46, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds i8, ptr %.lcssa9, i64 6
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi ptr [ %37, %36 ], [ %45, %38 ]
  %40 = load i8, ptr %39, align 1, !tbaa !60
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [256 x i8], ptr @_wspace, i64 0, i64 %41
  %43 = load i8, ptr %42, align 1, !tbaa !60
  %44 = icmp eq i8 %43, 0
  %45 = getelementptr inbounds i8, ptr %39, i64 1
  br i1 %44, label %46, label %38, !llvm.loop !486

46:                                               ; preds = %38, %29, %26
  %47 = phi i8 [ %.lcssa7, %26 ], [ %.lcssa7, %29 ], [ %40, %38 ]
  %48 = phi ptr [ %.lcssa8, %26 ], [ %.lcssa8, %29 ], [ %39, %38 ]
  %49 = tail call ptr @__ctype_b_loc() #49
  %50 = load ptr, ptr %49, align 8, !tbaa !14
  %51 = sext i8 %47 to i64
  %52 = getelementptr inbounds i16, ptr %50, i64 %51
  %53 = load i16, ptr %52, align 2, !tbaa !61
  %54 = and i16 %53, 2048
  %55 = icmp eq i16 %54, 0
  br i1 %55, label %158, label %56

56:                                               ; preds = %46
  %57 = tail call i32 @atoi(ptr nocapture noundef nonnull %48) #48
  %58 = add nsw i32 %57, -1
  %59 = getelementptr inbounds %struct.d_loc_t, ptr %1, i64 0, i32 4
  store i32 %58, ptr %59, align 8, !tbaa !487
  br label %60

60:                                               ; preds = %60, %56
  %61 = phi ptr [ %48, %56 ], [ %68, %60 ]
  %62 = load i8, ptr %61, align 1, !tbaa !60
  %63 = sext i8 %62 to i64
  %64 = getelementptr inbounds i16, ptr %50, i64 %63
  %65 = load i16, ptr %64, align 2, !tbaa !61
  %66 = and i16 %65, 2048
  %67 = icmp eq i16 %66, 0
  %68 = getelementptr inbounds i8, ptr %61, i64 1
  br i1 %67, label %69, label %60, !llvm.loop !488

69:                                               ; preds = %69, %60
  %70 = phi ptr [ %76, %69 ], [ %61, %60 ]
  %71 = load i8, ptr %70, align 1, !tbaa !60
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i8], ptr @_wspace, i64 0, i64 %72
  %74 = load i8, ptr %73, align 1, !tbaa !60
  %75 = icmp eq i8 %74, 0
  %76 = getelementptr inbounds i8, ptr %70, i64 1
  br i1 %75, label %77, label %69, !llvm.loop !489

77:                                               ; preds = %69
  %.lcssa6 = phi ptr [ %70, %69 ]
  %.lcssa5 = phi i8 [ %71, %69 ]
  %78 = icmp eq i8 %.lcssa5, 34
  br i1 %78, label %79, label %81

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.d_loc_t, ptr %1, i64 0, i32 1
  store ptr %.lcssa6, ptr %80, align 8, !tbaa !490
  br label %81

81:                                               ; preds = %79, %77
  br label %82

82:                                               ; preds = %85, %81
  %83 = phi ptr [ %86, %85 ], [ %.lcssa6, %81 ]
  %84 = load i8, ptr %83, align 1, !tbaa !60
  switch i8 %84, label %85 [
    i8 0, label %87
    i8 10, label %87
  ]

85:                                               ; preds = %82
  %86 = getelementptr inbounds i8, ptr %83, i64 1
  br label %82, !llvm.loop !491

87:                                               ; preds = %82, %82, %11, %3
  %88 = phi ptr [ %4, %11 ], [ %4, %3 ], [ %83, %82 ], [ %83, %82 ]
  %89 = phi ptr [ %8, %11 ], [ %8, %3 ], [ %17, %82 ], [ %17, %82 ]
  %90 = getelementptr inbounds %struct.d_loc_t, ptr %1, i64 0, i32 4
  br label %91

91:                                               ; preds = %110, %87
  %92 = phi ptr [ %88, %87 ], [ %111, %110 ]
  %93 = phi ptr [ %89, %87 ], [ %112, %110 ]
  br label %94

94:                                               ; preds = %102, %91
  %95 = phi ptr [ %92, %91 ], [ %103, %102 ]
  %96 = load i8, ptr %95, align 1, !tbaa !60
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i8], ptr @_wspace, i64 0, i64 %97
  %99 = load i8, ptr %98, align 1, !tbaa !60
  %100 = icmp eq i8 %99, 0
  %101 = getelementptr inbounds i8, ptr %95, i64 1
  br i1 %100, label %104, label %102

102:                                              ; preds = %121, %94
  %103 = phi ptr [ %101, %94 ], [ %124, %121 ]
  br label %94, !llvm.loop !492

104:                                              ; preds = %94
  switch i8 %96, label %158 [
    i8 10, label %105
    i8 47, label %113
  ]

105:                                              ; preds = %104
  %.lcssa1 = phi ptr [ %101, %104 ]
  %106 = load i32, ptr %90, align 8, !tbaa !487
  %107 = add nsw i32 %106, 1
  store i32 %107, ptr %90, align 8, !tbaa !487
  %108 = load i8, ptr %.lcssa1, align 1, !tbaa !60
  %109 = icmp eq i8 %108, 35
  br i1 %109, label %15, label %110

110:                                              ; preds = %143, %105
  %111 = phi ptr [ %.lcssa1, %105 ], [ %144, %143 ]
  %112 = phi ptr [ %.lcssa1, %105 ], [ %.lcssa3, %143 ]
  br label %91

113:                                              ; preds = %104
  %114 = load i8, ptr %101, align 1, !tbaa !60
  switch i8 %114, label %158 [
    i8 47, label %115
    i8 42, label %125
  ]

115:                                              ; preds = %118, %113
  %116 = phi i8 [ %120, %118 ], [ %114, %113 ]
  %117 = phi ptr [ %119, %118 ], [ %95, %113 ]
  switch i8 %116, label %118 [
    i8 0, label %121
    i8 10, label %121
  ]

118:                                              ; preds = %115
  %119 = getelementptr inbounds i8, ptr %117, i64 1
  %120 = load i8, ptr %119, align 1, !tbaa !60
  br label %115, !llvm.loop !493

121:                                              ; preds = %115, %115
  %.lcssa = phi ptr [ %117, %115 ], [ %117, %115 ]
  %122 = load i32, ptr %90, align 8, !tbaa !487
  %123 = add nsw i32 %122, 1
  store i32 %123, ptr %90, align 8, !tbaa !487
  %124 = getelementptr inbounds i8, ptr %.lcssa, i64 1
  br label %102

125:                                              ; preds = %147, %113
  %.lcssa2 = phi ptr [ %.lcssa2, %147 ], [ %101, %113 ]
  %126 = phi ptr [ %95, %113 ], [ %136, %147 ]
  %127 = phi ptr [ %93, %113 ], [ %137, %147 ]
  %128 = phi i32 [ 0, %113 ], [ %134, %147 ]
  %129 = getelementptr inbounds i8, ptr %126, i64 2
  %130 = add nsw i32 %128, 1
  br label %131

131:                                              ; preds = %143, %125
  %132 = phi ptr [ %129, %125 ], [ %144, %143 ]
  %133 = phi ptr [ %127, %125 ], [ %.lcssa3, %143 ]
  %134 = phi i32 [ %130, %125 ], [ %145, %143 ]
  br label %135

135:                                              ; preds = %155, %131
  %136 = phi ptr [ %132, %131 ], [ %157, %155 ]
  %137 = phi ptr [ %133, %131 ], [ %156, %155 ]
  %138 = load i8, ptr %136, align 1, !tbaa !60
  switch i8 %138, label %155 [
    i8 0, label %158
    i8 42, label %139
    i8 47, label %147
    i8 10, label %151
  ]

139:                                              ; preds = %135
  %140 = getelementptr inbounds i8, ptr %136, i64 1
  %141 = load i8, ptr %140, align 1, !tbaa !60
  %142 = icmp eq i8 %141, 47
  br i1 %142, label %143, label %155

143:                                              ; preds = %139
  %.lcssa4 = phi ptr [ %136, %139 ]
  %.lcssa3 = phi ptr [ %137, %139 ]
  %144 = getelementptr inbounds i8, ptr %.lcssa4, i64 2
  %145 = add nsw i32 %134, -1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %110, label %131

147:                                              ; preds = %135
  %148 = getelementptr inbounds i8, ptr %136, i64 1
  %149 = load i8, ptr %148, align 1, !tbaa !60
  %150 = icmp eq i8 %149, 42
  br i1 %150, label %125, label %155

151:                                              ; preds = %135
  %152 = load i32, ptr %90, align 8, !tbaa !487
  %153 = add nsw i32 %152, 1
  store i32 %153, ptr %90, align 8, !tbaa !487
  %154 = getelementptr inbounds i8, ptr %136, i64 1
  br label %155

155:                                              ; preds = %151, %147, %139, %135
  %156 = phi ptr [ %154, %151 ], [ %137, %147 ], [ %137, %139 ], [ %137, %135 ]
  %157 = getelementptr inbounds i8, ptr %136, i64 1
  br label %135, !llvm.loop !494

158:                                              ; preds = %135, %113, %104, %46
  %159 = phi ptr [ %16, %46 ], [ %136, %135 ], [ %95, %104 ], [ %95, %113 ]
  %160 = phi ptr [ %17, %46 ], [ %137, %135 ], [ %93, %104 ], [ %93, %113 ]
  %161 = icmp eq ptr %160, null
  %162 = ptrtoint ptr %159 to i64
  %163 = ptrtoint ptr %160 to i64
  %164 = sub i64 %162, %163
  %165 = trunc i64 %164 to i32
  %166 = select i1 %161, i32 -1, i32 %165
  %167 = getelementptr inbounds %struct.d_loc_t, ptr %1, i64 0, i32 3
  store i32 %166, ptr %167, align 4
  store ptr %159, ptr %1, align 8, !tbaa !477
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @exhaustive_parse(ptr noundef %0, i32 noundef %1) unnamed_addr #0 {
  %3 = alloca %struct.d_loc_t, align 8
  %4 = alloca %struct.d_loc_t, align 8
  %5 = alloca %struct.d_loc_t, align 8
  %6 = alloca %struct.PNode, align 8
  %7 = alloca %struct.d_loc_t, align 8
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %6) #45
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #45
  %8 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !478
  %10 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 6
  store ptr %9, ptr %10, align 8, !tbaa !495
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 8 dereferenceable(32) %10, i64 32, i1 false), !tbaa.struct !481
  %11 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !473
  call void %12(ptr noundef %0, ptr noundef nonnull %7, ptr noundef %0) #43
  %13 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !426
  %15 = getelementptr inbounds %struct.D_ParserTables, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !440
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds %struct.D_State, ptr %16, i64 %17
  %19 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 15
  %20 = load ptr, ptr %19, align 8, !tbaa !496
  %21 = load ptr, ptr %0, align 8, !tbaa !497
  %22 = call fastcc ptr @add_SNode(ptr noundef nonnull %0, ptr noundef %18, ptr noundef nonnull %7, ptr noundef %20, ptr noundef %21) #44
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(240) %6, i8 0, i64 240, i1 false)
  %23 = getelementptr inbounds %struct.PNode, ptr %6, i64 0, i32 19, i32 5
  %24 = load <2 x ptr>, ptr %0, align 8, !tbaa !14
  %25 = shufflevector <2 x ptr> %24, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %25, ptr %23, align 8, !tbaa !14
  %26 = load ptr, ptr %19, align 8, !tbaa !496
  %27 = getelementptr inbounds %struct.PNode, ptr %6, i64 0, i32 19, i32 4
  store ptr %26, ptr %27, align 8, !tbaa !498
  %28 = getelementptr inbounds %struct.PNode, ptr %6, i64 0, i32 17
  store ptr %26, ptr %28, align 8, !tbaa !453
  %29 = load ptr, ptr %7, align 8, !tbaa !477
  %30 = getelementptr inbounds %struct.PNode, ptr %6, i64 0, i32 19, i32 2
  store ptr %29, ptr %30, align 8, !tbaa !499
  %31 = call fastcc ptr @add_PNode(ptr noundef nonnull %0, i32 noundef 0, ptr noundef nonnull %7, ptr noundef %29, ptr noundef nonnull %6, ptr noundef null, ptr noundef null, ptr noundef null) #44
  %32 = getelementptr inbounds %struct.SNode, ptr %22, i64 0, i32 5
  store ptr %31, ptr %32, align 8, !tbaa !500
  %33 = getelementptr inbounds %struct.SNode, ptr %22, i64 0, i32 6
  %34 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 23
  %35 = load ptr, ptr %34, align 8, !tbaa !501
  %36 = icmp eq ptr %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %2
  %38 = call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  br label %41

39:                                               ; preds = %2
  %40 = load ptr, ptr %35, align 8, !tbaa !14
  store ptr %40, ptr %34, align 8, !tbaa !501
  br label %41

41:                                               ; preds = %39, %37
  %42 = phi ptr [ %35, %39 ], [ %38, %37 ]
  store ptr %31, ptr %42, align 8, !tbaa !502
  %43 = getelementptr inbounds %struct.ZNode, ptr %42, i64 0, i32 1
  store i32 0, ptr %43, align 8, !tbaa !504
  %44 = getelementptr inbounds %struct.ZNode, ptr %42, i64 0, i32 1, i32 2
  store ptr null, ptr %44, align 8, !tbaa !505
  call fastcc void @set_add_znode(ptr noundef nonnull %33, ptr noundef nonnull %42) #44
  %45 = getelementptr inbounds %struct.PNode, ptr %31, i64 0, i32 6
  %46 = load i32, ptr %45, align 8, !tbaa !506
  %47 = add i32 %46, 1
  store i32 %47, ptr %45, align 8, !tbaa !506
  %48 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 13
  %49 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 14
  %50 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 16
  %51 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 2
  %52 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 17
  %53 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12
  %54 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 5
  %55 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 16
  %56 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 6, i32 4
  %57 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 17
  %58 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 18
  %59 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 3
  %60 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24
  %61 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24, i32 2
  %62 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24, i32 3
  %63 = getelementptr inbounds %struct.d_loc_t, ptr %5, i64 0, i32 4
  %64 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 10
  %65 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 15
  %66 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 6
  %67 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 26
  %68 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 26, i32 4
  %69 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 26, i32 2
  %70 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 25
  %71 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 26, i32 3
  %72 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 7
  %73 = getelementptr inbounds %struct.d_loc_t, ptr %4, i64 0, i32 2
  %74 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 19
  br label %75

75:                                               ; preds = %623, %41
  %76 = phi ptr [ null, %41 ], [ %607, %623 ]
  %77 = phi i32 [ 0, %41 ], [ %624, %623 ]
  br label %78

78:                                               ; preds = %469, %75
  %79 = phi ptr [ %117, %469 ], [ %76, %75 ]
  %80 = load ptr, ptr %48, align 8, !tbaa !507
  %81 = icmp eq ptr %80, null
  br i1 %81, label %116, label %82

82:                                               ; preds = %104, %78
  %83 = phi ptr [ %80, %78 ], [ %105, %104 ]
  %84 = phi ptr [ %79, %78 ], [ %102, %104 ]
  %85 = getelementptr inbounds %struct.Reduction, ptr %83, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !508
  %87 = getelementptr inbounds %struct.SNode, ptr %86, i64 0, i32 3
  %88 = load ptr, ptr %87, align 8, !tbaa !510
  %89 = load ptr, ptr %49, align 8, !tbaa !511
  %90 = icmp eq ptr %89, null
  br i1 %90, label %96, label %91

91:                                               ; preds = %82
  %92 = load ptr, ptr %89, align 8, !tbaa !512
  %93 = getelementptr inbounds %struct.SNode, ptr %92, i64 0, i32 3
  %94 = load ptr, ptr %93, align 8, !tbaa !510
  %95 = icmp ult ptr %94, %88
  br i1 %95, label %116, label %96

96:                                               ; preds = %91, %82
  %97 = icmp ugt ptr %88, %84
  br i1 %97, label %98, label %101

98:                                               ; preds = %96
  call fastcc void @free_old_nodes(ptr noundef nonnull %0) #44
  %99 = load ptr, ptr %48, align 8, !tbaa !507
  %100 = icmp eq ptr %99, null
  br i1 %100, label %116, label %101

101:                                              ; preds = %98, %96
  %102 = phi ptr [ %88, %98 ], [ %84, %96 ]
  %103 = phi ptr [ %99, %98 ], [ %83, %96 ]
  br label %104

104:                                              ; preds = %111, %101
  %105 = phi ptr [ %114, %111 ], [ %103, %101 ]
  %106 = getelementptr inbounds %struct.Reduction, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %106, align 8, !tbaa !508
  %108 = getelementptr inbounds %struct.SNode, ptr %107, i64 0, i32 3
  %109 = load ptr, ptr %108, align 8, !tbaa !510
  %110 = icmp eq ptr %109, %88
  br i1 %110, label %111, label %82, !llvm.loop !514

111:                                              ; preds = %104
  %112 = getelementptr inbounds %struct.Reduction, ptr %105, i64 0, i32 5
  %113 = load ptr, ptr %112, align 8, !tbaa !515
  store ptr %113, ptr %48, align 8, !tbaa !507
  call fastcc void @reduce_one(ptr noundef nonnull %0, ptr noundef nonnull %105) #44
  %114 = load ptr, ptr %48, align 8, !tbaa !507
  %115 = icmp eq ptr %114, null
  br i1 %115, label %116, label %104, !llvm.loop !516

116:                                              ; preds = %111, %98, %91, %78
  %117 = phi ptr [ %79, %78 ], [ %102, %111 ], [ %88, %98 ], [ %84, %91 ]
  %118 = load ptr, ptr %49, align 8, !tbaa !14
  %119 = icmp eq ptr %118, null
  br i1 %119, label %120, label %470

120:                                              ; preds = %116
  %121 = load ptr, ptr %50, align 8, !tbaa !480
  %122 = icmp eq ptr %121, null
  br i1 %122, label %131, label %123

123:                                              ; preds = %120
  %124 = getelementptr inbounds %struct.SNode, ptr %121, i64 0, i32 3
  %125 = load ptr, ptr %124, align 8, !tbaa !510
  %126 = load ptr, ptr %51, align 8, !tbaa !517
  %127 = icmp eq ptr %125, %126
  br i1 %127, label %753, label %128

128:                                              ; preds = %123
  %129 = load i32, ptr %52, align 8, !tbaa !518
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %753

131:                                              ; preds = %128, %120
  %132 = call noalias dereferenceable_or_null(80000) ptr @malloc(i64 noundef 80000) #50
  %133 = load ptr, ptr %54, align 8, !tbaa !14
  %134 = icmp eq ptr %133, null
  br i1 %134, label %753, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.SNode, ptr %133, i64 0, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 8 dereferenceable(32) %136, i64 32, i1 false), !tbaa.struct !481
  %137 = load i32, ptr %55, align 4, !tbaa !469
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %753, label %139

139:                                              ; preds = %135
  %140 = load i32, ptr %56, align 8, !tbaa !464
  %141 = load i32, ptr %57, align 8, !tbaa !519
  %142 = icmp sgt i32 %140, %141
  br i1 %142, label %143, label %149

143:                                              ; preds = %139
  store i32 %140, ptr %57, align 8, !tbaa !519
  %144 = load i32, ptr %58, align 4, !tbaa !520
  %145 = add nsw i32 %144, 1
  store i32 %145, ptr %58, align 4, !tbaa !520
  %146 = load ptr, ptr %59, align 8, !tbaa !467
  call void %146(ptr noundef nonnull %0) #43
  %147 = load ptr, ptr %54, align 8, !tbaa !14
  %148 = icmp eq ptr %147, null
  br i1 %148, label %752, label %149

149:                                              ; preds = %143, %139
  %150 = phi ptr [ %147, %143 ], [ %133, %139 ]
  br label %151

151:                                              ; preds = %159, %149
  %152 = phi ptr [ %162, %159 ], [ %150, %149 ]
  %153 = phi i32 [ %160, %159 ], [ 0, %149 ]
  %154 = icmp slt i32 %153, 9999
  br i1 %154, label %155, label %159

155:                                              ; preds = %151
  %156 = add nsw i32 %153, 1
  %157 = sext i32 %153 to i64
  %158 = getelementptr inbounds ptr, ptr %132, i64 %157
  store ptr %152, ptr %158, align 8, !tbaa !14
  br label %159

159:                                              ; preds = %155, %151
  %160 = phi i32 [ %156, %155 ], [ %153, %151 ]
  %161 = getelementptr inbounds %struct.SNode, ptr %152, i64 0, i32 9
  %162 = load ptr, ptr %161, align 8, !tbaa !14
  %163 = icmp eq ptr %162, null
  br i1 %163, label %164, label %151, !llvm.loop !521

164:                                              ; preds = %159
  %.lcssa = phi i32 [ %160, %159 ]
  %165 = getelementptr inbounds %struct.SNode, ptr %150, i64 0, i32 3
  %166 = load ptr, ptr %165, align 8, !tbaa !510
  %167 = icmp sgt i32 %.lcssa, 0
  br i1 %167, label %172, label %752

168:                                              ; preds = %295, %256
  %169 = phi i32 [ %177, %256 ], [ %296, %295 ]
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %178, %170
  br i1 %171, label %172, label %299, !llvm.loop !522

172:                                              ; preds = %168, %164
  %173 = phi i64 [ %178, %168 ], [ 0, %164 ]
  %174 = phi ptr [ %259, %168 ], [ null, %164 ]
  %175 = phi ptr [ %258, %168 ], [ null, %164 ]
  %176 = phi ptr [ %257, %168 ], [ null, %164 ]
  %177 = phi i32 [ %169, %168 ], [ %.lcssa, %164 ]
  %178 = add nuw nsw i64 %173, 1
  %179 = getelementptr inbounds ptr, ptr %132, i64 %173
  %180 = load ptr, ptr %179, align 8, !tbaa !14
  %181 = load ptr, ptr %180, align 8, !tbaa !441
  %182 = getelementptr inbounds %struct.D_State, ptr %181, i64 0, i32 4
  %183 = load i32, ptr %182, align 8, !tbaa !523
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %256, label %185

185:                                              ; preds = %172
  %186 = getelementptr inbounds %struct.D_State, ptr %181, i64 0, i32 4, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !526
  %188 = load i8, ptr %166, align 1, !tbaa !60
  %189 = icmp eq i8 %188, 0
  %190 = getelementptr inbounds %struct.SNode, ptr %180, i64 0, i32 4
  %191 = zext i32 %183 to i64
  br label %192

192:                                              ; preds = %250, %185
  %193 = phi i64 [ 0, %185 ], [ %254, %250 ]
  %194 = phi ptr [ %174, %185 ], [ %253, %250 ]
  %195 = phi ptr [ %175, %185 ], [ %252, %250 ]
  %196 = phi ptr [ %176, %185 ], [ %251, %250 ]
  %197 = getelementptr inbounds %struct.D_ErrorRecoveryHint, ptr %187, i64 %193
  %198 = getelementptr inbounds %struct.D_ErrorRecoveryHint, ptr %187, i64 %193, i32 2
  %199 = load ptr, ptr %198, align 8, !tbaa !527
  %200 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %199) #48
  %201 = and i64 %200, 4294967295
  %202 = icmp eq i64 %201, 1
  br i1 %202, label %207, label %203

203:                                              ; preds = %192
  br i1 %189, label %250, label %204

204:                                              ; preds = %203
  %205 = shl i64 %200, 32
  %206 = ashr exact i64 %205, 32
  br label %221

207:                                              ; preds = %192
  %208 = load i8, ptr %199, align 1, !tbaa !60
  br i1 %189, label %217, label %209

209:                                              ; preds = %214, %207
  %210 = phi i8 [ %215, %214 ], [ %188, %207 ]
  %211 = phi ptr [ %213, %214 ], [ %166, %207 ]
  %212 = icmp eq i8 %210, %208
  %213 = getelementptr inbounds i8, ptr %211, i64 1
  br i1 %212, label %231, label %214

214:                                              ; preds = %209
  %215 = load i8, ptr %213, align 1, !tbaa !60
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %217, label %209, !llvm.loop !529

217:                                              ; preds = %214, %207
  %218 = phi ptr [ %166, %207 ], [ %213, %214 ]
  %219 = icmp eq i8 %208, 0
  %220 = getelementptr inbounds i8, ptr %218, i64 1
  br i1 %219, label %231, label %250

221:                                              ; preds = %225, %204
  %222 = phi ptr [ %166, %204 ], [ %226, %225 ]
  %223 = call i32 @strncmp(ptr noundef %199, ptr noundef nonnull %222, i64 noundef %206) #48
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %229, label %225

225:                                              ; preds = %221
  %226 = getelementptr inbounds i8, ptr %222, i64 1
  %227 = load i8, ptr %226, align 1, !tbaa !60
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %250, label %221, !llvm.loop !530

229:                                              ; preds = %221
  %.lcssa1 = phi ptr [ %222, %221 ]
  %230 = getelementptr inbounds i8, ptr %.lcssa1, i64 %206
  br label %231

231:                                              ; preds = %229, %217, %209
  %232 = phi ptr [ %230, %229 ], [ %220, %217 ], [ %213, %209 ]
  %233 = icmp eq ptr %194, null
  %234 = icmp ult ptr %232, %195
  %235 = select i1 %233, i1 true, i1 %234
  br i1 %235, label %249, label %236

236:                                              ; preds = %231
  %237 = icmp eq ptr %232, %195
  br i1 %237, label %238, label %250

238:                                              ; preds = %236
  %239 = getelementptr inbounds %struct.SNode, ptr %194, i64 0, i32 4
  %240 = load i32, ptr %239, align 8, !tbaa !531
  %241 = load i32, ptr %190, align 8, !tbaa !531
  %242 = icmp ult i32 %240, %241
  br i1 %242, label %249, label %243

243:                                              ; preds = %238
  %244 = icmp eq i32 %240, %241
  br i1 %244, label %245, label %250

245:                                              ; preds = %243
  %246 = load i16, ptr %196, align 8, !tbaa !532
  %247 = load i16, ptr %197, align 8, !tbaa !532
  %248 = icmp ult i16 %246, %247
  br i1 %248, label %249, label %250

249:                                              ; preds = %245, %238, %231
  br label %250

250:                                              ; preds = %249, %245, %243, %236, %225, %217, %203
  %251 = phi ptr [ %197, %249 ], [ %196, %245 ], [ %196, %243 ], [ %196, %236 ], [ %196, %217 ], [ %196, %203 ], [ %196, %225 ]
  %252 = phi ptr [ %232, %249 ], [ %195, %245 ], [ %195, %243 ], [ %195, %236 ], [ %195, %217 ], [ %195, %203 ], [ %195, %225 ]
  %253 = phi ptr [ %180, %249 ], [ %194, %245 ], [ %194, %243 ], [ %194, %236 ], [ %194, %217 ], [ %194, %203 ], [ %194, %225 ]
  %254 = add nuw nsw i64 %193, 1
  %255 = icmp eq i64 %254, %191
  br i1 %255, label %256, label %192, !llvm.loop !533

256:                                              ; preds = %250, %172
  %257 = phi ptr [ %176, %172 ], [ %251, %250 ]
  %258 = phi ptr [ %175, %172 ], [ %252, %250 ]
  %259 = phi ptr [ %174, %172 ], [ %253, %250 ]
  %260 = getelementptr inbounds %struct.SNode, ptr %180, i64 0, i32 6
  %261 = load i32, ptr %260, align 8, !tbaa !534
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %168, label %263

263:                                              ; preds = %256
  %264 = getelementptr inbounds %struct.SNode, ptr %180, i64 0, i32 6, i32 2
  %265 = load ptr, ptr %264, align 8, !tbaa !535
  %266 = zext i32 %261 to i64
  br label %267

267:                                              ; preds = %295, %263
  %268 = phi i64 [ 0, %263 ], [ %297, %295 ]
  %269 = phi i32 [ %177, %263 ], [ %296, %295 ]
  %270 = getelementptr inbounds ptr, ptr %265, i64 %268
  %271 = load ptr, ptr %270, align 8, !tbaa !14
  %272 = icmp eq ptr %271, null
  br i1 %272, label %295, label %273

273:                                              ; preds = %267
  %274 = getelementptr inbounds %struct.ZNode, ptr %271, i64 0, i32 1
  %275 = load i32, ptr %274, align 8, !tbaa !504
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %295, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %struct.ZNode, ptr %271, i64 0, i32 1, i32 2
  %279 = zext i32 %275 to i64
  br label %280

280:                                              ; preds = %291, %277
  %281 = phi i64 [ 0, %277 ], [ %293, %291 ]
  %282 = phi i32 [ %269, %277 ], [ %292, %291 ]
  %283 = icmp slt i32 %282, 9999
  br i1 %283, label %284, label %291

284:                                              ; preds = %280
  %285 = load ptr, ptr %278, align 8, !tbaa !505
  %286 = getelementptr inbounds ptr, ptr %285, i64 %281
  %287 = load ptr, ptr %286, align 8, !tbaa !14
  %288 = add nsw i32 %282, 1
  %289 = sext i32 %282 to i64
  %290 = getelementptr inbounds ptr, ptr %132, i64 %289
  store ptr %287, ptr %290, align 8, !tbaa !14
  br label %291

291:                                              ; preds = %284, %280
  %292 = phi i32 [ %288, %284 ], [ %282, %280 ]
  %293 = add nuw nsw i64 %281, 1
  %294 = icmp eq i64 %293, %279
  br i1 %294, label %295, label %280, !llvm.loop !536

295:                                              ; preds = %291, %273, %267
  %296 = phi i32 [ %269, %267 ], [ %269, %273 ], [ %292, %291 ]
  %297 = add nuw nsw i64 %268, 1
  %298 = icmp eq i64 %297, %266
  br i1 %298, label %168, label %267, !llvm.loop !537

299:                                              ; preds = %168
  %.lcssa4 = phi ptr [ %257, %168 ]
  %.lcssa3 = phi ptr [ %258, %168 ]
  %.lcssa2 = phi ptr [ %259, %168 ]
  %300 = icmp eq ptr %.lcssa2, null
  br i1 %300, label %752, label %301

301:                                              ; preds = %299
  %302 = call dereferenceable_or_null(56) ptr @calloc(i64 1, i64 56)
  %303 = call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #45
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(32) %10, i64 32, i1 false), !tbaa.struct !481
  %304 = load ptr, ptr %61, align 8, !tbaa !538
  %305 = icmp eq ptr %304, null
  br i1 %305, label %306, label %311

306:                                              ; preds = %301
  store ptr %62, ptr %61, align 8, !tbaa !538
  %307 = load i32, ptr %60, align 8, !tbaa !539
  %308 = add i32 %307, 1
  store i32 %308, ptr %60, align 8, !tbaa !539
  %309 = zext i32 %307 to i64
  %310 = getelementptr inbounds ptr, ptr %62, i64 %309
  store ptr %302, ptr %310, align 8, !tbaa !14
  br label %328

311:                                              ; preds = %301
  %312 = icmp eq ptr %304, %62
  %313 = load i32, ptr %60, align 8, !tbaa !539
  br i1 %312, label %314, label %320

314:                                              ; preds = %311
  %315 = icmp ult i32 %313, 3
  br i1 %315, label %316, label %327

316:                                              ; preds = %314
  %317 = add nuw nsw i32 %313, 1
  store i32 %317, ptr %60, align 8, !tbaa !539
  %318 = zext i32 %313 to i64
  %319 = getelementptr inbounds ptr, ptr %62, i64 %318
  store ptr %302, ptr %319, align 8, !tbaa !14
  br label %328

320:                                              ; preds = %311
  %321 = and i32 %313, 7
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %327, label %323

323:                                              ; preds = %320
  %324 = add i32 %313, 1
  store i32 %324, ptr %60, align 8, !tbaa !539
  %325 = zext i32 %313 to i64
  %326 = getelementptr inbounds ptr, ptr %304, i64 %325
  store ptr %302, ptr %326, align 8, !tbaa !14
  br label %328

327:                                              ; preds = %320, %314
  call void @vec_add_internal(ptr noundef nonnull %60, ptr noundef nonnull %302) #43
  br label %328

328:                                              ; preds = %327, %323, %316, %306
  %329 = load i16, ptr %.lcssa4, align 8, !tbaa !532
  %330 = add i16 %329, 1
  store i16 %330, ptr %302, align 8, !tbaa !540
  %331 = getelementptr inbounds %struct.D_ErrorRecoveryHint, ptr %.lcssa4, i64 0, i32 1
  %332 = load i16, ptr %331, align 2, !tbaa !542
  %333 = getelementptr inbounds %struct.D_Reduction, ptr %302, i64 0, i32 1
  store i16 %332, ptr %333, align 2, !tbaa !543
  %334 = load ptr, ptr %5, align 8, !tbaa !477
  %335 = icmp ult ptr %334, %.lcssa3
  br i1 %335, label %336, label %353

336:                                              ; preds = %328
  %337 = ptrtoint ptr %.lcssa3 to i64
  %338 = ptrtoint ptr %334 to i64
  %339 = sub i64 %337, %338
  %340 = getelementptr i8, ptr %334, i64 %339
  %341 = load i32, ptr %63, align 8, !tbaa !15
  br label %342

342:                                              ; preds = %349, %336
  %343 = phi i32 [ %350, %349 ], [ %341, %336 ]
  %344 = phi ptr [ %351, %349 ], [ %334, %336 ]
  %345 = load i8, ptr %344, align 1, !tbaa !60
  %346 = icmp eq i8 %345, 10
  br i1 %346, label %347, label %349

347:                                              ; preds = %342
  %348 = add nsw i32 %343, 1
  store i32 %348, ptr %63, align 8, !tbaa !15
  br label %349

349:                                              ; preds = %347, %342
  %350 = phi i32 [ %348, %347 ], [ %343, %342 ]
  %351 = getelementptr inbounds i8, ptr %344, i64 1
  %352 = icmp eq ptr %351, %340
  br i1 %352, label %353, label %342, !llvm.loop !544

353:                                              ; preds = %349, %328
  store ptr %.lcssa3, ptr %5, align 8, !tbaa !477
  %354 = getelementptr inbounds %struct.SNode, ptr %.lcssa2, i64 0, i32 6, i32 2
  %355 = load ptr, ptr %354, align 8, !tbaa !535
  %356 = load ptr, ptr %355, align 8, !tbaa !14
  %357 = load ptr, ptr %356, align 8, !tbaa !502
  %358 = getelementptr inbounds %struct.PNode, ptr %357, i64 0, i32 19, i32 5
  %359 = load ptr, ptr %358, align 8, !tbaa !545
  %360 = getelementptr inbounds %struct.PNode, ptr %357, i64 0, i32 19, i32 6
  call void %359(ptr noundef nonnull %0, ptr noundef nonnull %5, ptr noundef nonnull %360) #43
  %361 = getelementptr inbounds %struct.SNode, ptr %.lcssa2, i64 0, i32 7
  %362 = load i32, ptr %361, align 8, !tbaa !482
  %363 = add i32 %362, 1
  store i32 %363, ptr %361, align 8, !tbaa !482
  %364 = load ptr, ptr %5, align 8, !tbaa !477
  %365 = call fastcc ptr @add_PNode(ptr noundef nonnull %0, i32 noundef 0, ptr noundef nonnull %10, ptr noundef %364, ptr noundef %357, ptr noundef null, ptr noundef null, ptr noundef null) #44
  %366 = load ptr, ptr %.lcssa2, align 8, !tbaa !441
  %367 = getelementptr inbounds %struct.PNode, ptr %365, i64 0, i32 17
  %368 = load ptr, ptr %367, align 8, !tbaa !453
  %369 = getelementptr inbounds %struct.PNode, ptr %365, i64 0, i32 18
  %370 = load ptr, ptr %369, align 8, !tbaa !454
  %371 = call fastcc ptr @new_SNode(ptr noundef nonnull %0, ptr noundef %366, ptr noundef nonnull %5, ptr noundef %368, ptr noundef %370) #44
  %372 = getelementptr inbounds %struct.SNode, ptr %371, i64 0, i32 5
  store ptr %365, ptr %372, align 8, !tbaa !500
  %373 = getelementptr inbounds %struct.SNode, ptr %371, i64 0, i32 6
  %374 = load ptr, ptr %34, align 8, !tbaa !501
  %375 = icmp eq ptr %374, null
  br i1 %375, label %376, label %378

376:                                              ; preds = %353
  %377 = call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  br label %380

378:                                              ; preds = %353
  %379 = load ptr, ptr %374, align 8, !tbaa !14
  store ptr %379, ptr %34, align 8, !tbaa !501
  br label %380

380:                                              ; preds = %378, %376
  %381 = phi ptr [ %374, %378 ], [ %377, %376 ]
  store ptr %365, ptr %381, align 8, !tbaa !502
  %382 = getelementptr inbounds %struct.ZNode, ptr %381, i64 0, i32 1
  store i32 0, ptr %382, align 8, !tbaa !504
  %383 = getelementptr inbounds %struct.ZNode, ptr %381, i64 0, i32 1, i32 2
  store ptr null, ptr %383, align 8, !tbaa !505
  call fastcc void @set_add_znode(ptr noundef nonnull %373, ptr noundef nonnull %381) #44
  %384 = getelementptr inbounds %struct.PNode, ptr %365, i64 0, i32 6
  %385 = load i32, ptr %384, align 8, !tbaa !506
  %386 = add i32 %385, 1
  store i32 %386, ptr %384, align 8, !tbaa !506
  %387 = load ptr, ptr %383, align 8, !tbaa !505
  %388 = icmp eq ptr %387, null
  %389 = getelementptr inbounds %struct.ZNode, ptr %381, i64 0, i32 1, i32 3
  br i1 %388, label %390, label %395

390:                                              ; preds = %380
  store ptr %389, ptr %383, align 8, !tbaa !505
  %391 = load i32, ptr %382, align 8, !tbaa !504
  %392 = add i32 %391, 1
  store i32 %392, ptr %382, align 8, !tbaa !504
  %393 = zext i32 %391 to i64
  %394 = getelementptr inbounds ptr, ptr %389, i64 %393
  store ptr %.lcssa2, ptr %394, align 8, !tbaa !14
  br label %412

395:                                              ; preds = %380
  %396 = icmp eq ptr %387, %389
  %397 = load i32, ptr %382, align 8, !tbaa !504
  br i1 %396, label %398, label %404

398:                                              ; preds = %395
  %399 = icmp ult i32 %397, 3
  br i1 %399, label %400, label %411

400:                                              ; preds = %398
  %401 = add nuw nsw i32 %397, 1
  store i32 %401, ptr %382, align 8, !tbaa !504
  %402 = zext i32 %397 to i64
  %403 = getelementptr inbounds ptr, ptr %387, i64 %402
  store ptr %.lcssa2, ptr %403, align 8, !tbaa !14
  br label %412

404:                                              ; preds = %395
  %405 = and i32 %397, 7
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %411, label %407

407:                                              ; preds = %404
  %408 = add i32 %397, 1
  store i32 %408, ptr %382, align 8, !tbaa !504
  %409 = zext i32 %397 to i64
  %410 = getelementptr inbounds ptr, ptr %387, i64 %409
  store ptr %.lcssa2, ptr %410, align 8, !tbaa !14
  br label %412

411:                                              ; preds = %404, %398
  call void @vec_add_internal(ptr noundef nonnull %382, ptr noundef nonnull %.lcssa2) #43
  br label %412

412:                                              ; preds = %411, %407, %400, %390
  store ptr %381, ptr %303, align 8, !tbaa !546
  %413 = getelementptr inbounds %struct.Reduction, ptr %303, i64 0, i32 1
  store ptr %371, ptr %413, align 8, !tbaa !508
  %414 = load i32, ptr %361, align 8, !tbaa !482
  %415 = add i32 %414, 1
  store i32 %415, ptr %361, align 8, !tbaa !482
  %416 = getelementptr inbounds %struct.Reduction, ptr %303, i64 0, i32 2
  store ptr %302, ptr %416, align 8, !tbaa !547
  %417 = getelementptr inbounds %struct.Reduction, ptr %303, i64 0, i32 3
  store ptr null, ptr %417, align 8, !tbaa !548
  %418 = getelementptr inbounds %struct.Reduction, ptr %303, i64 0, i32 5
  store ptr null, ptr %418, align 8, !tbaa !515
  call fastcc void @free_old_nodes(ptr noundef nonnull %0) #44
  call fastcc void @reduce_one(ptr noundef nonnull %0, ptr noundef nonnull %303) #44
  %419 = load ptr, ptr %13, align 8, !tbaa !426
  %420 = load i32, ptr %419, align 8, !tbaa !549
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %462, label %422

422:                                              ; preds = %412
  %423 = load ptr, ptr %53, align 8, !tbaa !550
  %424 = zext i32 %420 to i64
  br label %425

425:                                              ; preds = %459, %422
  %426 = phi i64 [ 0, %422 ], [ %460, %459 ]
  %427 = getelementptr inbounds ptr, ptr %423, i64 %426
  %428 = load ptr, ptr %427, align 8, !tbaa !14
  %429 = icmp eq ptr %428, null
  br i1 %429, label %459, label %430

430:                                              ; preds = %455, %425
  %431 = phi ptr [ %457, %455 ], [ %428, %425 ]
  %432 = getelementptr inbounds %struct.SNode, ptr %431, i64 0, i32 6
  %433 = load i32, ptr %432, align 8, !tbaa !534
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %455, label %435

435:                                              ; preds = %430
  %436 = getelementptr inbounds %struct.SNode, ptr %431, i64 0, i32 6, i32 2
  %437 = load ptr, ptr %436, align 8, !tbaa !535
  %438 = zext i32 %433 to i64
  br label %439

439:                                              ; preds = %452, %435
  %440 = phi i64 [ 0, %435 ], [ %453, %452 ]
  %441 = getelementptr inbounds ptr, ptr %437, i64 %440
  %442 = load ptr, ptr %441, align 8, !tbaa !14
  %443 = icmp eq ptr %442, null
  br i1 %443, label %452, label %444

444:                                              ; preds = %439
  %445 = load ptr, ptr %442, align 8, !tbaa !502
  %446 = getelementptr inbounds %struct.PNode, ptr %445, i64 0, i32 4
  %447 = load ptr, ptr %446, align 8, !tbaa !551
  %448 = icmp eq ptr %447, %302
  br i1 %448, label %449, label %452

449:                                              ; preds = %444
  %450 = getelementptr inbounds %struct.PNode, ptr %445, i64 0, i32 9
  store i8 1, ptr %450, align 4, !tbaa !552
  %451 = getelementptr inbounds %struct.PNode, ptr %445, i64 0, i32 10
  store i8 1, ptr %451, align 1, !tbaa !417
  br label %452

452:                                              ; preds = %449, %444, %439
  %453 = add nuw nsw i64 %440, 1
  %454 = icmp eq i64 %453, %438
  br i1 %454, label %455, label %439, !llvm.loop !553

455:                                              ; preds = %452, %430
  %456 = getelementptr inbounds %struct.SNode, ptr %431, i64 0, i32 8
  %457 = load ptr, ptr %456, align 8, !tbaa !14
  %458 = icmp eq ptr %457, null
  br i1 %458, label %459, label %430, !llvm.loop !554

459:                                              ; preds = %455, %425
  %460 = add nuw nsw i64 %426, 1
  %461 = icmp eq i64 %460, %424
  br i1 %461, label %462, label %425, !llvm.loop !555

462:                                              ; preds = %459, %412
  %463 = load ptr, ptr %49, align 8, !tbaa !511
  %464 = icmp eq ptr %463, null
  br i1 %464, label %465, label %469

465:                                              ; preds = %462
  %466 = load ptr, ptr %48, align 8, !tbaa !507
  %467 = icmp eq ptr %466, null
  br i1 %467, label %468, label %469

468:                                              ; preds = %465
  %.lcssa14 = phi ptr [ %132, %465 ]
  %.lcssa12 = phi ptr [ %117, %465 ]
  %.lcssa8 = phi ptr [ %118, %465 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #45
  br label %752

469:                                              ; preds = %465, %462
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #45
  call void @free(ptr noundef %132) #43
  br label %78

470:                                              ; preds = %116
  %.lcssa9 = phi ptr [ %117, %116 ]
  %.lcssa5 = phi ptr [ %118, %116 ]
  %471 = load i32, ptr %64, align 4, !tbaa !556
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %473, label %597

473:                                              ; preds = %470
  %474 = getelementptr inbounds %struct.Goto, ptr %.lcssa5, i64 0, i32 1
  %475 = load ptr, ptr %474, align 8, !tbaa !557
  %476 = icmp eq ptr %475, null
  br i1 %476, label %597, label %477

477:                                              ; preds = %473
  %478 = load ptr, ptr %.lcssa5, align 8, !tbaa !512
  %479 = getelementptr inbounds %struct.SNode, ptr %478, i64 0, i32 3
  %480 = load ptr, ptr %479, align 8, !tbaa !510
  br label %481

481:                                              ; preds = %590, %477
  %482 = phi ptr [ %.lcssa5, %477 ], [ %593, %590 ]
  %483 = phi ptr [ %49, %477 ], [ %592, %590 ]
  %484 = load ptr, ptr %482, align 8, !tbaa !512
  %485 = getelementptr inbounds %struct.SNode, ptr %484, i64 0, i32 3
  %486 = load ptr, ptr %485, align 8, !tbaa !510
  %487 = icmp eq ptr %486, %480
  br i1 %487, label %488, label %595

488:                                              ; preds = %481
  %489 = call fastcc ptr @binary_op_ZNode(ptr noundef nonnull %484) #44
  %490 = icmp eq ptr %489, null
  br i1 %490, label %590, label %491

491:                                              ; preds = %488
  %492 = getelementptr inbounds %struct.Goto, ptr %482, i64 0, i32 1
  %493 = load ptr, ptr %492, align 8, !tbaa !557
  %494 = icmp eq ptr %493, null
  br i1 %494, label %590, label %495

495:                                              ; preds = %491
  %496 = getelementptr inbounds %struct.ZNode, ptr %489, i64 0, i32 1
  %497 = getelementptr inbounds %struct.ZNode, ptr %489, i64 0, i32 1, i32 2
  br label %498

498:                                              ; preds = %586, %495
  %499 = phi ptr [ %493, %495 ], [ %588, %586 ]
  %500 = phi ptr [ %492, %495 ], [ %587, %586 ]
  %501 = load ptr, ptr %499, align 8, !tbaa !512
  %502 = getelementptr inbounds %struct.SNode, ptr %501, i64 0, i32 3
  %503 = load ptr, ptr %502, align 8, !tbaa !510
  %504 = icmp eq ptr %503, %480
  br i1 %504, label %505, label %590

505:                                              ; preds = %498
  %506 = call fastcc ptr @binary_op_ZNode(ptr noundef nonnull %501) #44
  %507 = icmp eq ptr %506, null
  br i1 %507, label %586, label %508

508:                                              ; preds = %505
  %509 = getelementptr inbounds %struct.ZNode, ptr %506, i64 0, i32 1
  %510 = load i32, ptr %496, align 8, !tbaa !30
  %511 = load i32, ptr %509, align 8, !tbaa !30
  %512 = icmp eq i32 %510, %511
  br i1 %512, label %513, label %586

513:                                              ; preds = %508
  %514 = icmp eq i32 %510, 0
  br i1 %514, label %535, label %515

515:                                              ; preds = %513
  %516 = getelementptr inbounds %struct.ZNode, ptr %506, i64 0, i32 1, i32 2
  %517 = load ptr, ptr %497, align 8, !tbaa !31
  %518 = load ptr, ptr %516, align 8, !tbaa !31
  %519 = zext i32 %510 to i64
  br label %520

520:                                              ; preds = %532, %515
  %521 = phi i64 [ 0, %515 ], [ %533, %532 ]
  %522 = getelementptr inbounds ptr, ptr %517, i64 %521
  %523 = load ptr, ptr %522, align 8, !tbaa !14
  br label %527

524:                                              ; preds = %527
  %525 = add nuw nsw i64 %528, 1
  %526 = icmp eq i64 %525, %519
  br i1 %526, label %586, label %527, !llvm.loop !558

527:                                              ; preds = %524, %520
  %528 = phi i64 [ 0, %520 ], [ %525, %524 ]
  %529 = getelementptr inbounds ptr, ptr %518, i64 %528
  %530 = load ptr, ptr %529, align 8, !tbaa !14
  %531 = icmp eq ptr %523, %530
  br i1 %531, label %532, label %524

532:                                              ; preds = %527
  %533 = add nuw nsw i64 %521, 1
  %534 = icmp eq i64 %533, %519
  br i1 %534, label %535, label %520, !llvm.loop !559

535:                                              ; preds = %532, %513
  %536 = load ptr, ptr %484, align 8, !tbaa !441
  %537 = getelementptr inbounds %struct.D_State, ptr %536, i64 0, i32 13
  %538 = load i32, ptr %537, align 8, !tbaa !560
  %539 = sext i32 %538 to i64
  %540 = load ptr, ptr %501, align 8, !tbaa !441
  %541 = load ptr, ptr %13, align 8, !tbaa !426
  %542 = getelementptr inbounds %struct.D_ParserTables, ptr %541, i64 0, i32 1
  %543 = load ptr, ptr %542, align 8, !tbaa !440
  %544 = ptrtoint ptr %540 to i64
  %545 = ptrtoint ptr %543 to i64
  %546 = sub i64 %544, %545
  %547 = sdiv exact i64 %546, 120
  %548 = icmp eq i64 %547, %539
  br i1 %548, label %557, label %549

549:                                              ; preds = %535
  %550 = getelementptr inbounds %struct.D_State, ptr %540, i64 0, i32 13
  %551 = load i32, ptr %550, align 8, !tbaa !560
  %552 = sext i32 %551 to i64
  %553 = ptrtoint ptr %536 to i64
  %554 = sub i64 %553, %545
  %555 = sdiv exact i64 %554, 120
  %556 = icmp eq i64 %555, %552
  br i1 %556, label %557, label %586

557:                                              ; preds = %549, %535
  %558 = load ptr, ptr %489, align 8, !tbaa !502
  %559 = getelementptr inbounds %struct.PNode, ptr %558, i64 0, i32 3
  %560 = load i32, ptr %559, align 4, !tbaa !561
  %561 = load ptr, ptr %506, align 8, !tbaa !502
  %562 = getelementptr inbounds %struct.PNode, ptr %561, i64 0, i32 3
  %563 = load i32, ptr %562, align 4, !tbaa !561
  %564 = icmp sgt i32 %560, %563
  br i1 %564, label %565, label %575

565:                                              ; preds = %557
  %.lcssa17 = phi ptr [ %499, %557 ]
  %.lcssa15 = phi ptr [ %500, %557 ]
  %566 = getelementptr inbounds %struct.Goto, ptr %.lcssa17, i64 0, i32 1
  %567 = load ptr, ptr %566, align 8, !tbaa !557
  store ptr %567, ptr %.lcssa15, align 8, !tbaa !14
  %568 = load ptr, ptr %.lcssa17, align 8, !tbaa !512
  %569 = getelementptr inbounds %struct.SNode, ptr %568, i64 0, i32 7
  %570 = load i32, ptr %569, align 8, !tbaa !482
  %571 = add i32 %570, -1
  store i32 %571, ptr %569, align 8, !tbaa !482
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %573, label %574

573:                                              ; preds = %565
  call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %568) #44
  br label %574

574:                                              ; preds = %573, %565
  call void @free(ptr noundef nonnull %.lcssa17) #43
  br label %590

575:                                              ; preds = %557
  %576 = icmp slt i32 %560, %563
  br i1 %576, label %577, label %586

577:                                              ; preds = %575
  store ptr %493, ptr %483, align 8, !tbaa !14
  %578 = load ptr, ptr %482, align 8, !tbaa !512
  %579 = getelementptr inbounds %struct.SNode, ptr %578, i64 0, i32 7
  %580 = load i32, ptr %579, align 8, !tbaa !482
  %581 = add i32 %580, -1
  store i32 %581, ptr %579, align 8, !tbaa !482
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %584

583:                                              ; preds = %577
  call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %578) #44
  br label %584

584:                                              ; preds = %583, %577
  call void @free(ptr noundef nonnull %482) #43
  %585 = load ptr, ptr %483, align 8, !tbaa !14
  br label %590

586:                                              ; preds = %575, %549, %524, %508, %505
  %587 = getelementptr inbounds %struct.Goto, ptr %499, i64 0, i32 1
  %588 = load ptr, ptr %587, align 8, !tbaa !557
  %589 = icmp eq ptr %588, null
  br i1 %589, label %590, label %498, !llvm.loop !562

590:                                              ; preds = %586, %584, %574, %498, %491, %488
  %591 = phi ptr [ %482, %574 ], [ %585, %584 ], [ %482, %488 ], [ %482, %491 ], [ %482, %498 ], [ %482, %586 ]
  %592 = getelementptr inbounds %struct.Goto, ptr %591, i64 0, i32 1
  %593 = load ptr, ptr %592, align 8, !tbaa !557
  %594 = icmp eq ptr %593, null
  br i1 %594, label %595, label %481, !llvm.loop !563

595:                                              ; preds = %590, %481
  %596 = load ptr, ptr %49, align 8, !tbaa !511
  br label %597

597:                                              ; preds = %595, %473, %470
  %598 = phi ptr [ %596, %595 ], [ %.lcssa5, %470 ], [ %.lcssa5, %473 ]
  %599 = load ptr, ptr %598, align 8, !tbaa !512
  %600 = getelementptr inbounds %struct.SNode, ptr %599, i64 0, i32 3
  %601 = load ptr, ptr %600, align 8, !tbaa !510
  %602 = icmp ugt ptr %601, %.lcssa9
  br i1 %602, label %603, label %605

603:                                              ; preds = %597
  call fastcc void @free_old_nodes(ptr noundef nonnull %0) #44
  %604 = load ptr, ptr %49, align 8, !tbaa !511
  br label %605

605:                                              ; preds = %603, %597
  %606 = phi ptr [ %604, %603 ], [ %598, %597 ]
  %607 = phi ptr [ %601, %603 ], [ %.lcssa9, %597 ]
  %608 = add nsw i32 %77, 1
  %609 = load i32, ptr %65, align 8, !tbaa !466
  %610 = icmp slt i32 %77, %609
  br i1 %610, label %619, label %611

611:                                              ; preds = %605
  %612 = getelementptr inbounds %struct.Goto, ptr %606, i64 0, i32 1
  %613 = load ptr, ptr %612, align 8, !tbaa !557
  %614 = icmp eq ptr %613, null
  br i1 %614, label %615, label %625

615:                                              ; preds = %611
  %616 = load ptr, ptr %606, align 8, !tbaa !512
  %617 = call fastcc i32 @commit_stack(ptr noundef nonnull %0, ptr noundef %616) #44, !range !564
  %618 = load ptr, ptr %49, align 8, !tbaa !511
  br label %619

619:                                              ; preds = %615, %605
  %620 = phi ptr [ %618, %615 ], [ %606, %605 ]
  %621 = phi i32 [ 0, %615 ], [ %608, %605 ]
  %622 = icmp eq ptr %620, null
  br i1 %622, label %623, label %625

623:                                              ; preds = %748, %744, %741, %740, %619
  %624 = phi i32 [ %621, %619 ], [ 0, %748 ], [ %627, %744 ], [ %627, %741 ], [ %627, %740 ]
  br label %75

625:                                              ; preds = %619, %611
  %626 = phi i1 [ false, %619 ], [ true, %611 ]
  %627 = phi i32 [ %621, %619 ], [ %608, %611 ]
  %628 = phi ptr [ %620, %619 ], [ %606, %611 ]
  br label %629

629:                                              ; preds = %736, %625
  %630 = phi ptr [ %738, %736 ], [ %628, %625 ]
  %631 = load ptr, ptr %630, align 8, !tbaa !512
  %632 = getelementptr inbounds %struct.SNode, ptr %631, i64 0, i32 3
  %633 = load ptr, ptr %632, align 8, !tbaa !510
  %634 = icmp eq ptr %633, %601
  br i1 %634, label %635, label %740

635:                                              ; preds = %629
  %636 = getelementptr inbounds %struct.Goto, ptr %630, i64 0, i32 1
  %637 = load ptr, ptr %636, align 8, !tbaa !557
  store ptr %637, ptr %49, align 8, !tbaa !511
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #45
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #45
  %638 = load ptr, ptr %631, align 8, !tbaa !441
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %3, ptr noundef nonnull align 8 dereferenceable(32) %632, i64 32, i1 false), !tbaa.struct !481
  store ptr null, ptr %4, align 8, !tbaa !477
  %639 = load i32, ptr %66, align 8, !tbaa !565
  %640 = add nsw i32 %639, 1
  store i32 %640, ptr %66, align 8, !tbaa !565
  %641 = getelementptr inbounds %struct.D_State, ptr %638, i64 0, i32 6
  %642 = load ptr, ptr %641, align 8, !tbaa !566
  %643 = icmp eq ptr %642, null
  br i1 %643, label %656, label %644

644:                                              ; preds = %635
  store i32 0, ptr %68, align 8, !tbaa !567
  store i8 0, ptr %69, align 1, !tbaa !568
  %645 = load ptr, ptr %70, align 8, !tbaa !569
  %646 = getelementptr inbounds %struct.ShiftResult, ptr %645, i64 0, i32 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %646, ptr noundef nonnull align 8 dereferenceable(32) %3, i64 32, i1 false), !tbaa.struct !481
  %647 = load ptr, ptr %641, align 8, !tbaa !566
  %648 = load ptr, ptr %70, align 8, !tbaa !569
  %649 = getelementptr inbounds %struct.ShiftResult, ptr %648, i64 0, i32 1
  %650 = getelementptr inbounds %struct.ShiftResult, ptr %648, i64 0, i32 1, i32 3
  %651 = getelementptr inbounds %struct.ShiftResult, ptr %648, i64 0, i32 1, i32 4
  %652 = call i32 %647(ptr noundef nonnull %649, ptr noundef nonnull %650, ptr noundef nonnull %651, ptr noundef nonnull %67, ptr noundef nonnull %68, ptr noundef nonnull %69, ptr noundef nonnull %71) #43
  %653 = icmp eq i32 %652, 0
  br i1 %653, label %656, label %654

654:                                              ; preds = %644
  %655 = load ptr, ptr %70, align 8, !tbaa !569
  store ptr %67, ptr %655, align 8, !tbaa !570
  br label %656

656:                                              ; preds = %654, %644, %635
  %657 = phi i32 [ 1, %654 ], [ 0, %644 ], [ 0, %635 ]
  %658 = getelementptr inbounds %struct.D_State, ptr %638, i64 0, i32 7
  %659 = load ptr, ptr %658, align 8, !tbaa !572
  %660 = icmp eq ptr %659, null
  br i1 %660, label %667, label %661

661:                                              ; preds = %656
  %662 = load ptr, ptr %70, align 8, !tbaa !569
  %663 = zext i32 %657 to i64
  %664 = getelementptr inbounds %struct.ShiftResult, ptr %662, i64 %663
  %665 = call i32 @scan_buffer(ptr noundef nonnull %3, ptr noundef nonnull %638, ptr noundef %664) #43
  %666 = add nsw i32 %665, %657
  br label %667

667:                                              ; preds = %661, %656
  %668 = phi i32 [ %666, %661 ], [ %657, %656 ]
  %669 = icmp sgt i32 %668, 0
  br i1 %669, label %670, label %729

670:                                              ; preds = %667
  %671 = zext i32 %668 to i64
  br label %672

672:                                              ; preds = %725, %670
  %673 = phi i64 [ 0, %670 ], [ %727, %725 ]
  %674 = phi ptr [ null, %670 ], [ %726, %725 ]
  %675 = load ptr, ptr %70, align 8, !tbaa !569
  %676 = getelementptr inbounds %struct.ShiftResult, ptr %675, i64 %673
  %677 = load i32, ptr %72, align 4, !tbaa !573
  %678 = add nsw i32 %677, 1
  store i32 %678, ptr %72, align 4, !tbaa !573
  %679 = load ptr, ptr %676, align 8, !tbaa !570
  %680 = load i16, ptr %679, align 8, !tbaa !574
  %681 = zext i16 %680 to i32
  %682 = load ptr, ptr %630, align 8, !tbaa !512
  %683 = getelementptr inbounds %struct.SNode, ptr %682, i64 0, i32 3
  %684 = getelementptr inbounds %struct.ShiftResult, ptr %675, i64 %673, i32 1
  %685 = load ptr, ptr %684, align 8, !tbaa !575
  %686 = getelementptr inbounds %struct.SNode, ptr %682, i64 0, i32 5
  %687 = load ptr, ptr %686, align 8, !tbaa !500
  %688 = call fastcc ptr @add_PNode(ptr noundef nonnull %0, i32 noundef %681, ptr noundef nonnull %683, ptr noundef %685, ptr noundef %687, ptr noundef null, ptr noundef null, ptr noundef nonnull %679) #44
  %689 = icmp eq ptr %688, null
  br i1 %689, label %725, label %690

690:                                              ; preds = %672
  %691 = load ptr, ptr %4, align 8, !tbaa !477
  %692 = icmp eq ptr %691, null
  br i1 %692, label %702, label %693

693:                                              ; preds = %690
  %694 = load ptr, ptr %684, align 8, !tbaa !575
  %695 = icmp eq ptr %691, %694
  br i1 %695, label %696, label %702

696:                                              ; preds = %693
  %697 = getelementptr inbounds %struct.PNode, ptr %688, i64 0, i32 19, i32 5
  %698 = load ptr, ptr %697, align 8, !tbaa !545
  %699 = icmp eq ptr %674, %698
  br i1 %699, label %700, label %702

700:                                              ; preds = %696
  %701 = load ptr, ptr %630, align 8, !tbaa !512
  br label %722

702:                                              ; preds = %696, %693, %690
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(32) %684, i64 32, i1 false), !tbaa.struct !481
  %703 = getelementptr inbounds %struct.PNode, ptr %688, i64 0, i32 19, i32 5
  %704 = load ptr, ptr %703, align 8, !tbaa !545
  %705 = getelementptr inbounds %struct.PNode, ptr %688, i64 0, i32 19, i32 6
  call void %704(ptr noundef nonnull %0, ptr noundef nonnull %4, ptr noundef nonnull %705) #43
  %706 = load ptr, ptr %630, align 8, !tbaa !512
  %707 = getelementptr inbounds %struct.SNode, ptr %706, i64 0, i32 3, i32 3
  %708 = load i32, ptr %707, align 4, !tbaa !576
  %709 = icmp sgt i32 %708, -1
  br i1 %709, label %713, label %710

710:                                              ; preds = %702
  %711 = getelementptr inbounds %struct.SNode, ptr %706, i64 0, i32 3, i32 2
  %712 = load i32, ptr %711, align 8, !tbaa !577
  br label %713

713:                                              ; preds = %710, %702
  %714 = phi i32 [ %712, %710 ], [ %708, %702 ]
  store i32 %714, ptr %73, align 8, !tbaa !484
  %715 = getelementptr inbounds %struct.SNode, ptr %706, i64 0, i32 6, i32 2
  %716 = load ptr, ptr %715, align 8, !tbaa !535
  %717 = load ptr, ptr %716, align 8, !tbaa !14
  %718 = call fastcc ptr @find_ws_before(ptr noundef nonnull %0, ptr noundef %717) #44
  %719 = getelementptr inbounds %struct.PNode, ptr %688, i64 0, i32 15
  store ptr %718, ptr %719, align 8, !tbaa !578
  %720 = load ptr, ptr %4, align 8, !tbaa !477
  %721 = getelementptr inbounds %struct.PNode, ptr %688, i64 0, i32 16
  store ptr %720, ptr %721, align 8, !tbaa !579
  br label %722

722:                                              ; preds = %713, %700
  %723 = phi ptr [ %706, %713 ], [ %701, %700 ]
  %724 = phi ptr [ %704, %713 ], [ %674, %700 ]
  call fastcc void @goto_PNode(ptr noundef nonnull %0, ptr noundef nonnull %4, ptr noundef nonnull %688, ptr noundef %723) #44
  br label %725

725:                                              ; preds = %722, %672
  %726 = phi ptr [ %724, %722 ], [ %674, %672 ]
  %727 = add nuw nsw i64 %673, 1
  %728 = icmp eq i64 %727, %671
  br i1 %728, label %729, label %672, !llvm.loop !580

729:                                              ; preds = %725, %667
  %730 = load ptr, ptr %630, align 8, !tbaa !512
  %731 = getelementptr inbounds %struct.SNode, ptr %730, i64 0, i32 7
  %732 = load i32, ptr %731, align 8, !tbaa !482
  %733 = add i32 %732, -1
  store i32 %733, ptr %731, align 8, !tbaa !482
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %735, label %736

735:                                              ; preds = %729
  call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %730) #44
  br label %736

736:                                              ; preds = %735, %729
  %737 = load ptr, ptr %74, align 8, !tbaa !581
  store ptr %737, ptr %636, align 8, !tbaa !557
  store ptr %630, ptr %74, align 8, !tbaa !581
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #45
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #45
  %738 = load ptr, ptr %49, align 8, !tbaa !511
  %739 = icmp eq ptr %738, null
  br i1 %739, label %740, label %629, !llvm.loop !582

740:                                              ; preds = %736, %629
  br i1 %626, label %741, label %623

741:                                              ; preds = %740
  %742 = load ptr, ptr %48, align 8, !tbaa !507
  %743 = icmp eq ptr %742, null
  br i1 %743, label %623, label %744

744:                                              ; preds = %741
  %745 = getelementptr inbounds %struct.Reduction, ptr %742, i64 0, i32 5
  %746 = load ptr, ptr %745, align 8, !tbaa !515
  %747 = icmp eq ptr %746, null
  br i1 %747, label %748, label %623

748:                                              ; preds = %744
  %749 = getelementptr inbounds %struct.Reduction, ptr %742, i64 0, i32 1
  %750 = load ptr, ptr %749, align 8, !tbaa !508
  %751 = call fastcc i32 @commit_stack(ptr noundef nonnull %0, ptr noundef %750) #44, !range !564
  br label %623

752:                                              ; preds = %468, %299, %164, %143
  %.lcssa13 = phi ptr [ %.lcssa14, %468 ], [ %132, %299 ], [ %132, %164 ], [ %132, %143 ]
  %.lcssa11 = phi ptr [ %.lcssa12, %468 ], [ %117, %299 ], [ %117, %164 ], [ %117, %143 ]
  %.lcssa7 = phi ptr [ %.lcssa8, %468 ], [ %118, %299 ], [ %118, %164 ], [ %118, %143 ]
  call void @free(ptr noundef %.lcssa13) #43
  br label %753

753:                                              ; preds = %752, %135, %131, %128, %123
  %754 = phi i32 [ 1, %752 ], [ 1, %135 ], [ 1, %131 ], [ 0, %123 ], [ 0, %128 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #45
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %6) #45
  ret i32 %754
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free_SNode(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 6
  %4 = load i32, ptr %3, align 8, !tbaa !534
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %64, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 6, i32 2
  %8 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 23
  br label %9

9:                                                ; preds = %59, %6
  %10 = phi i32 [ %4, %6 ], [ %60, %59 ]
  %11 = phi i64 [ 0, %6 ], [ %61, %59 ]
  %12 = load ptr, ptr %7, align 8, !tbaa !535
  %13 = getelementptr inbounds ptr, ptr %12, i64 %11
  %14 = load ptr, ptr %13, align 8, !tbaa !14
  %15 = icmp eq ptr %14, null
  br i1 %15, label %59, label %16

16:                                               ; preds = %9
  %17 = load ptr, ptr %14, align 8, !tbaa !502
  %18 = getelementptr inbounds %struct.PNode, ptr %17, i64 0, i32 6
  %19 = load i32, ptr %18, align 8, !tbaa !506
  %20 = add i32 %19, -1
  store i32 %20, ptr %18, align 8, !tbaa !506
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %16
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %17) #44
  br label %23

23:                                               ; preds = %22, %16
  %24 = getelementptr inbounds %struct.ZNode, ptr %14, i64 0, i32 1
  %25 = load i32, ptr %24, align 8, !tbaa !504
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %48, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.ZNode, ptr %14, i64 0, i32 1, i32 2
  br label %29

29:                                               ; preds = %43, %27
  %30 = phi i32 [ %25, %27 ], [ %44, %43 ]
  %31 = phi i64 [ 0, %27 ], [ %45, %43 ]
  %32 = load ptr, ptr %28, align 8, !tbaa !505
  %33 = getelementptr inbounds ptr, ptr %32, i64 %31
  %34 = load ptr, ptr %33, align 8, !tbaa !14
  %35 = icmp eq ptr %34, %1
  br i1 %35, label %43, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.SNode, ptr %34, i64 0, i32 7
  %38 = load i32, ptr %37, align 8, !tbaa !482
  %39 = add i32 %38, -1
  store i32 %39, ptr %37, align 8, !tbaa !482
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  tail call fastcc void @free_SNode(ptr noundef %0, ptr noundef nonnull %34) #44
  %42 = load i32, ptr %24, align 8, !tbaa !504
  br label %43

43:                                               ; preds = %41, %36, %29
  %44 = phi i32 [ %42, %41 ], [ %30, %36 ], [ %30, %29 ]
  %45 = add nuw nsw i64 %31, 1
  %46 = zext i32 %44 to i64
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %29, label %48, !llvm.loop !583

48:                                               ; preds = %43, %23
  %49 = getelementptr inbounds %struct.ZNode, ptr %14, i64 0, i32 1, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !505
  %51 = icmp eq ptr %50, null
  %52 = getelementptr inbounds %struct.ZNode, ptr %14, i64 0, i32 1, i32 3
  %53 = icmp eq ptr %50, %52
  %54 = select i1 %51, i1 true, i1 %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @free(ptr noundef nonnull %50) #43
  br label %56

56:                                               ; preds = %55, %48
  store i32 0, ptr %24, align 8, !tbaa !504
  store ptr null, ptr %49, align 8, !tbaa !505
  %57 = load ptr, ptr %8, align 8, !tbaa !501
  store ptr %57, ptr %14, align 8, !tbaa !14
  store ptr %14, ptr %8, align 8, !tbaa !501
  %58 = load i32, ptr %3, align 8, !tbaa !534
  br label %59

59:                                               ; preds = %56, %9
  %60 = phi i32 [ %10, %9 ], [ %58, %56 ]
  %61 = add nuw nsw i64 %11, 1
  %62 = zext i32 %60 to i64
  %63 = icmp ult i64 %61, %62
  br i1 %63, label %9, label %64, !llvm.loop !584

64:                                               ; preds = %59, %2
  %65 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 6, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !535
  %67 = icmp eq ptr %66, null
  %68 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 6, i32 3
  %69 = icmp eq ptr %66, %68
  %70 = select i1 %67, i1 true, i1 %69
  br i1 %70, label %72, label %71

71:                                               ; preds = %64
  tail call void @free(ptr noundef nonnull %66) #43
  br label %72

72:                                               ; preds = %71, %64
  store i32 0, ptr %3, align 8, !tbaa !534
  store ptr null, ptr %65, align 8, !tbaa !535
  %73 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 22
  %74 = load ptr, ptr %73, align 8, !tbaa !585
  %75 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 9
  store ptr %74, ptr %75, align 8, !tbaa !586
  store ptr %1, ptr %73, align 8, !tbaa !585
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free_PNode(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !587
  %5 = icmp eq ptr %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19
  tail call void %4(ptr noundef nonnull %7) #43
  br label %8

8:                                                ; preds = %6, %2
  %9 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7
  %10 = load i32, ptr %9, align 8, !tbaa !420
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %31, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 2
  br label %14

14:                                               ; preds = %26, %12
  %15 = phi i32 [ %10, %12 ], [ %27, %26 ]
  %16 = phi i64 [ 0, %12 ], [ %28, %26 ]
  %17 = load ptr, ptr %13, align 8, !tbaa !421
  %18 = getelementptr inbounds ptr, ptr %17, i64 %16
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.PNode, ptr %19, i64 0, i32 6
  %21 = load i32, ptr %20, align 8, !tbaa !506
  %22 = add i32 %21, -1
  store i32 %22, ptr %20, align 8, !tbaa !506
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %14
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %19) #44
  %25 = load i32, ptr %9, align 8, !tbaa !420
  br label %26

26:                                               ; preds = %24, %14
  %27 = phi i32 [ %15, %14 ], [ %25, %24 ]
  %28 = add nuw nsw i64 %16, 1
  %29 = zext i32 %27 to i64
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %14, label %31, !llvm.loop !588

31:                                               ; preds = %26, %8
  %32 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !421
  %34 = icmp eq ptr %33, null
  %35 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 3
  %36 = icmp eq ptr %33, %35
  %37 = select i1 %34, i1 true, i1 %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %31
  tail call void @free(ptr noundef nonnull %33) #43
  br label %39

39:                                               ; preds = %38, %31
  store i32 0, ptr %9, align 8, !tbaa !420
  store ptr null, ptr %32, align 8, !tbaa !421
  %40 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 13
  %41 = load ptr, ptr %40, align 8, !tbaa !589
  %42 = icmp eq ptr %41, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  store ptr null, ptr %40, align 8, !tbaa !589
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %41) #44
  br label %44

44:                                               ; preds = %43, %39
  %45 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 14
  %46 = load ptr, ptr %45, align 8, !tbaa !590
  %47 = icmp eq ptr %46, %1
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.PNode, ptr %46, i64 0, i32 6
  %50 = load i32, ptr %49, align 8, !tbaa !506
  %51 = add i32 %50, -1
  store i32 %51, ptr %49, align 8, !tbaa !506
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %48
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %46) #44
  br label %54

54:                                               ; preds = %53, %48, %44
  %55 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 21
  %56 = load ptr, ptr %55, align 8, !tbaa !591
  %57 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 11
  store ptr %56, ptr %57, align 8, !tbaa !592
  store ptr %1, ptr %55, align 8, !tbaa !591
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @add_SNode(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !426
  %8 = getelementptr inbounds %struct.D_ParserTables, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !440
  %10 = ptrtoint ptr %1 to i64
  %11 = ptrtoint ptr %9 to i64
  %12 = sub i64 %10, %11
  %13 = sdiv exact i64 %12, 120
  %14 = trunc i64 %13 to i32
  %15 = tail call ptr @find_SNode(ptr noundef %0, i32 noundef %14, ptr noundef %3, ptr noundef %4) #44
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %89

17:                                               ; preds = %5
  %18 = tail call fastcc ptr @new_SNode(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #44
  %19 = load ptr, ptr %18, align 8, !tbaa !441
  %20 = getelementptr inbounds %struct.D_State, ptr %19, i64 0, i32 5
  %21 = load ptr, ptr %20, align 8, !tbaa !593
  %22 = icmp eq ptr %21, null
  br i1 %22, label %65, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 14
  %25 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 19
  %26 = load ptr, ptr %25, align 8, !tbaa !581
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = tail call noalias dereferenceable_or_null(16) ptr @malloc(i64 noundef 16) #50
  br label %33

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.Goto, ptr %26, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !557
  store ptr %32, ptr %25, align 8, !tbaa !581
  br label %33

33:                                               ; preds = %30, %28
  %34 = phi ptr [ %26, %30 ], [ %29, %28 ]
  store ptr %18, ptr %34, align 8, !tbaa !512
  %35 = getelementptr inbounds %struct.SNode, ptr %18, i64 0, i32 7
  %36 = load i32, ptr %35, align 8, !tbaa !482
  %37 = add i32 %36, 1
  store i32 %37, ptr %35, align 8, !tbaa !482
  %38 = load ptr, ptr %24, align 8, !tbaa !14
  %39 = icmp eq ptr %38, null
  br i1 %39, label %60, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.SNode, ptr %18, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !510
  %43 = load ptr, ptr %38, align 8, !tbaa !512
  %44 = getelementptr inbounds %struct.SNode, ptr %43, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !510
  %46 = icmp ugt ptr %42, %45
  br i1 %46, label %52, label %60

47:                                               ; preds = %52
  %48 = load ptr, ptr %55, align 8, !tbaa !512
  %49 = getelementptr inbounds %struct.SNode, ptr %48, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !510
  %51 = icmp ugt ptr %42, %50
  br i1 %51, label %52, label %57, !llvm.loop !594

52:                                               ; preds = %47, %40
  %53 = phi ptr [ %55, %47 ], [ %38, %40 ]
  %54 = getelementptr inbounds %struct.Goto, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !14
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %47, !llvm.loop !594

57:                                               ; preds = %52, %47
  %.lcssa = phi ptr [ %53, %52 ], [ %53, %47 ]
  %58 = phi ptr [ null, %52 ], [ %55, %47 ]
  %59 = getelementptr inbounds %struct.Goto, ptr %.lcssa, i64 0, i32 1
  br label %60

60:                                               ; preds = %57, %40, %33
  %61 = phi ptr [ %24, %33 ], [ %24, %40 ], [ %59, %57 ]
  %62 = phi ptr [ null, %33 ], [ %38, %40 ], [ %58, %57 ]
  %63 = getelementptr inbounds %struct.Goto, ptr %34, i64 0, i32 1
  store ptr %62, ptr %63, align 8, !tbaa !557
  store ptr %34, ptr %61, align 8, !tbaa !14
  %64 = load ptr, ptr %18, align 8, !tbaa !441
  br label %65

65:                                               ; preds = %60, %17
  %66 = phi ptr [ %64, %60 ], [ %19, %17 ]
  %67 = getelementptr inbounds %struct.D_State, ptr %66, i64 0, i32 2
  %68 = load i32, ptr %67, align 8, !tbaa !595
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %89, label %70

70:                                               ; preds = %82, %65
  %71 = phi ptr [ %83, %82 ], [ %66, %65 ]
  %72 = phi i64 [ %84, %82 ], [ 0, %65 ]
  %73 = getelementptr inbounds %struct.D_State, ptr %71, i64 0, i32 2, i32 1
  %74 = load ptr, ptr %73, align 8, !tbaa !596
  %75 = getelementptr inbounds ptr, ptr %74, i64 %72
  %76 = load ptr, ptr %75, align 8, !tbaa !14
  %77 = load i16, ptr %76, align 8, !tbaa !540
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %70
  %80 = tail call fastcc ptr @add_Reduction(ptr noundef %0, ptr noundef null, ptr noundef nonnull %18, ptr noundef nonnull %76) #44
  %81 = load ptr, ptr %18, align 8, !tbaa !441
  br label %82

82:                                               ; preds = %79, %70
  %83 = phi ptr [ %71, %70 ], [ %81, %79 ]
  %84 = add nuw nsw i64 %72, 1
  %85 = getelementptr inbounds %struct.D_State, ptr %83, i64 0, i32 2
  %86 = load i32, ptr %85, align 8, !tbaa !595
  %87 = zext i32 %86 to i64
  %88 = icmp ult i64 %84, %87
  br i1 %88, label %70, label %89, !llvm.loop !597

89:                                               ; preds = %82, %65, %5
  %90 = phi ptr [ %15, %5 ], [ %18, %65 ], [ %18, %82 ]
  ret ptr %90
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @add_PNode(ptr noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef readonly %6, ptr noundef %7) unnamed_addr #0 {
  %9 = alloca %struct.StackPNode, align 8
  %10 = alloca %struct.StackPNode, align 8
  %11 = alloca %struct.StackInt, align 8
  %12 = alloca %struct.StackInt, align 8
  %13 = load ptr, ptr %2, align 8, !tbaa !477
  %14 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 17
  %15 = load ptr, ptr %14, align 8, !tbaa !453
  %16 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 18
  %17 = load ptr, ptr %16, align 8, !tbaa !454
  %18 = tail call ptr @find_PNode(ptr noundef %0, ptr noundef %13, ptr noundef %3, i32 noundef %1, ptr noundef %15, ptr noundef %17) #44
  %19 = icmp eq ptr %18, null
  br i1 %19, label %66, label %20

20:                                               ; preds = %8
  %21 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 7
  %22 = load i32, ptr %21, align 8, !tbaa !420
  %23 = icmp eq ptr %7, null
  br i1 %23, label %24, label %62

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 4
  %26 = load ptr, ptr %25, align 8, !tbaa !551
  %27 = icmp eq ptr %26, %5
  br i1 %27, label %28, label %66

28:                                               ; preds = %24
  %29 = icmp ne ptr %6, null
  %30 = icmp ne i32 %22, 0
  %31 = select i1 %29, i1 true, i1 %30
  br i1 %31, label %32, label %555

32:                                               ; preds = %28
  %33 = load i32, ptr %6, align 8, !tbaa !30
  %34 = icmp eq i32 %22, %33
  br i1 %34, label %35, label %66

35:                                               ; preds = %32
  %36 = icmp sgt i32 %22, 0
  br i1 %36, label %37, label %555

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 7, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !421
  %40 = getelementptr inbounds %struct.anon, ptr %6, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !31
  %42 = zext i32 %22 to i64
  br label %46

43:                                               ; preds = %46
  %44 = add nuw nsw i64 %47, 1
  %45 = icmp eq i64 %44, %42
  br i1 %45, label %555, label %46, !llvm.loop !598

46:                                               ; preds = %43, %37
  %47 = phi i64 [ 0, %37 ], [ %44, %43 ]
  %48 = getelementptr inbounds ptr, ptr %39, i64 %47
  %49 = load ptr, ptr %48, align 8, !tbaa !14
  %50 = getelementptr inbounds %struct.PNode, ptr %49, i64 0, i32 14
  %51 = load ptr, ptr %50, align 8, !tbaa !590
  %52 = trunc i64 %47 to i32
  %53 = xor i32 %52, -1
  %54 = add i32 %22, %53
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds ptr, ptr %41, i64 %55
  %57 = load ptr, ptr %56, align 8, !tbaa !14
  %58 = load ptr, ptr %57, align 8, !tbaa !502
  %59 = getelementptr inbounds %struct.PNode, ptr %58, i64 0, i32 14
  %60 = load ptr, ptr %59, align 8, !tbaa !590
  %61 = icmp eq ptr %51, %60
  br i1 %61, label %43, label %66

62:                                               ; preds = %20
  %63 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 5
  %64 = load ptr, ptr %63, align 8, !tbaa !599
  %65 = icmp eq ptr %64, %7
  br i1 %65, label %555, label %66

66:                                               ; preds = %62, %46, %32, %24, %8
  %67 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 8
  %68 = load i32, ptr %67, align 4, !tbaa !465
  %69 = add i32 %68, 232
  %70 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 21
  %71 = load ptr, ptr %70, align 8, !tbaa !591
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %76

73:                                               ; preds = %66
  %74 = sext i32 %69 to i64
  %75 = tail call noalias ptr @malloc(i64 noundef %74) #50
  br label %80

76:                                               ; preds = %66
  %77 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 11
  %78 = load ptr, ptr %77, align 8, !tbaa !592
  store ptr %78, ptr %70, align 8, !tbaa !591
  %79 = sext i32 %69 to i64
  br label %80

80:                                               ; preds = %76, %73
  %81 = phi i64 [ %79, %76 ], [ %74, %73 ]
  %82 = phi ptr [ %71, %76 ], [ %75, %73 ]
  %83 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 5
  %84 = load i32, ptr %83, align 4, !tbaa !600
  %85 = add nsw i32 %84, 1
  store i32 %85, ptr %83, align 4, !tbaa !600
  tail call void @llvm.memset.p0.i64(ptr align 8 %82, i8 0, i64 %81, i1 false)
  %86 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19
  store i32 %1, ptr %86, align 8, !tbaa !433
  %87 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %87, ptr noundef nonnull align 8 dereferenceable(32) %2, i64 32, i1 false), !tbaa.struct !481
  %88 = icmp ne ptr %5, null
  %89 = icmp ne ptr %6, null
  %90 = and i1 %88, %89
  br i1 %90, label %93, label %91

91:                                               ; preds = %80
  %92 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 2
  store ptr %3, ptr %92, align 8, !tbaa !499
  br label %111

93:                                               ; preds = %80
  %94 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 19, i32 2
  %95 = load ptr, ptr %94, align 8, !tbaa !499
  %96 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 2
  store ptr %95, ptr %96, align 8, !tbaa !499
  %97 = getelementptr inbounds %struct.anon, ptr %6, i64 0, i32 2
  %98 = load ptr, ptr %97, align 8, !tbaa !31
  %99 = load i32, ptr %6, align 8, !tbaa !30
  %100 = add i32 %99, -1
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds ptr, ptr %98, i64 %101
  %103 = load ptr, ptr %102, align 8, !tbaa !14
  %104 = getelementptr inbounds %struct.ZNode, ptr %103, i64 0, i32 1, i32 2
  %105 = load ptr, ptr %104, align 8, !tbaa !505
  %106 = load ptr, ptr %105, align 8, !tbaa !14
  %107 = getelementptr inbounds %struct.SNode, ptr %106, i64 0, i32 6, i32 2
  %108 = load ptr, ptr %107, align 8, !tbaa !535
  %109 = load ptr, ptr %108, align 8, !tbaa !14
  %110 = tail call fastcc ptr @find_ws_before(ptr noundef nonnull %0, ptr noundef %109) #44
  br label %111

111:                                              ; preds = %93, %91
  %112 = phi ptr [ %110, %93 ], [ %3, %91 ]
  %113 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 15
  store ptr %112, ptr %113, align 8
  %114 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 3
  store ptr %3, ptr %114, align 8, !tbaa !424
  %115 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 5
  store ptr %7, ptr %115, align 8, !tbaa !599
  %116 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 4
  store ptr %5, ptr %116, align 8, !tbaa !551
  %117 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 19, i32 4
  %118 = load ptr, ptr %117, align 8, !tbaa !498
  %119 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 4
  store ptr %118, ptr %119, align 8, !tbaa !498
  %120 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 17
  store ptr %118, ptr %120, align 8, !tbaa !453
  %121 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 19, i32 6
  %122 = load ptr, ptr %121, align 8, !tbaa !601
  %123 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 6
  store ptr %122, ptr %123, align 8, !tbaa !601
  %124 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 18
  store ptr %122, ptr %124, align 8, !tbaa !454
  %125 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 19, i32 5
  %126 = load ptr, ptr %125, align 8, !tbaa !545
  %127 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 19, i32 5
  store ptr %126, ptr %127, align 8, !tbaa !545
  %128 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 14
  store ptr %82, ptr %128, align 8, !tbaa !590
  %129 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 16
  store ptr %3, ptr %129, align 8, !tbaa !579
  %130 = icmp eq ptr %7, null
  br i1 %130, label %150, label %131

131:                                              ; preds = %111
  %132 = getelementptr inbounds %struct.D_Shift, ptr %7, i64 0, i32 2
  %133 = load i8, ptr %132, align 1, !tbaa !602
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 2
  store i32 %134, ptr %135, align 8, !tbaa !603
  %136 = getelementptr inbounds %struct.D_Shift, ptr %7, i64 0, i32 3
  %137 = load i32, ptr %136, align 4, !tbaa !604
  %138 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 3
  store i32 %137, ptr %138, align 4, !tbaa !561
  %139 = getelementptr inbounds %struct.D_Shift, ptr %7, i64 0, i32 5
  %140 = load ptr, ptr %139, align 8, !tbaa !605
  %141 = icmp eq ptr %140, null
  br i1 %141, label %286, label %142

142:                                              ; preds = %131
  %143 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 7
  %144 = getelementptr inbounds %struct.PNode, ptr %4, i64 0, i32 7, i32 2
  %145 = load ptr, ptr %144, align 8, !tbaa !421
  %146 = load i32, ptr %143, align 8, !tbaa !420
  %147 = tail call i32 %140(ptr noundef nonnull %4, ptr noundef %145, i32 noundef %146, i32 noundef 152, ptr noundef nonnull %0) #43
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %286, label %149

149:                                              ; preds = %142
  tail call fastcc void @free_PNode(ptr noundef nonnull %0, ptr noundef nonnull %82) #44
  br label %286

150:                                              ; preds = %111
  br i1 %88, label %151, label %286

151:                                              ; preds = %150
  br i1 %89, label %152, label %200

152:                                              ; preds = %151
  %153 = load i32, ptr %6, align 8, !tbaa !30
  %154 = add i32 %153, -1
  %155 = icmp sgt i32 %154, -1
  br i1 %155, label %156, label %200

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.anon, ptr %6, i64 0, i32 2
  %158 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7
  %159 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7, i32 2
  %160 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7, i32 3
  %161 = zext i32 %154 to i64
  br label %162

162:                                              ; preds = %194, %156
  %163 = phi i64 [ %198, %194 ], [ %161, %156 ]
  %164 = load ptr, ptr %157, align 8, !tbaa !31
  %165 = getelementptr inbounds ptr, ptr %164, i64 %163
  %166 = load ptr, ptr %165, align 8, !tbaa !14
  %167 = load ptr, ptr %166, align 8, !tbaa !502
  %168 = getelementptr inbounds %struct.PNode, ptr %167, i64 0, i32 14
  %169 = load ptr, ptr %168, align 8, !tbaa !590
  %170 = load ptr, ptr %159, align 8, !tbaa !421
  %171 = icmp eq ptr %170, null
  br i1 %171, label %172, label %177

172:                                              ; preds = %162
  store ptr %160, ptr %159, align 8, !tbaa !421
  %173 = load i32, ptr %158, align 8, !tbaa !420
  %174 = add i32 %173, 1
  store i32 %174, ptr %158, align 8, !tbaa !420
  %175 = zext i32 %173 to i64
  %176 = getelementptr inbounds ptr, ptr %160, i64 %175
  store ptr %169, ptr %176, align 8, !tbaa !14
  br label %194

177:                                              ; preds = %162
  %178 = icmp eq ptr %170, %160
  %179 = load i32, ptr %158, align 8, !tbaa !420
  br i1 %178, label %180, label %186

180:                                              ; preds = %177
  %181 = icmp ult i32 %179, 3
  br i1 %181, label %182, label %193

182:                                              ; preds = %180
  %183 = add nuw nsw i32 %179, 1
  store i32 %183, ptr %158, align 8, !tbaa !420
  %184 = zext i32 %179 to i64
  %185 = getelementptr inbounds ptr, ptr %160, i64 %184
  store ptr %169, ptr %185, align 8, !tbaa !14
  br label %194

186:                                              ; preds = %177
  %187 = and i32 %179, 7
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %193, label %189

189:                                              ; preds = %186
  %190 = add i32 %179, 1
  store i32 %190, ptr %158, align 8, !tbaa !420
  %191 = zext i32 %179 to i64
  %192 = getelementptr inbounds ptr, ptr %170, i64 %191
  store ptr %169, ptr %192, align 8, !tbaa !14
  br label %194

193:                                              ; preds = %186, %180
  tail call void @vec_add_internal(ptr noundef nonnull %158, ptr noundef %169) #43
  br label %194

194:                                              ; preds = %193, %189, %182, %172
  %195 = getelementptr inbounds %struct.PNode, ptr %169, i64 0, i32 6
  %196 = load i32, ptr %195, align 8, !tbaa !506
  %197 = add i32 %196, 1
  store i32 %197, ptr %195, align 8, !tbaa !506
  %198 = add nsw i64 %163, -1
  %199 = icmp sgt i64 %163, 0
  br i1 %199, label %162, label %200, !llvm.loop !606

200:                                              ; preds = %194, %152, %151
  %201 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7
  %202 = load i32, ptr %201, align 8, !tbaa !420
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %228, label %204

204:                                              ; preds = %200
  %205 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7, i32 2
  %206 = load ptr, ptr %205, align 8, !tbaa !421
  %207 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 1
  %208 = zext i32 %202 to i64
  br label %209

209:                                              ; preds = %220, %204
  %210 = phi i64 [ 0, %204 ], [ %226, %220 ]
  %211 = phi i32 [ 0, %204 ], [ %225, %220 ]
  %212 = getelementptr inbounds ptr, ptr %206, i64 %210
  %213 = load ptr, ptr %212, align 8, !tbaa !14
  %214 = getelementptr inbounds %struct.PNode, ptr %213, i64 0, i32 2
  %215 = load i32, ptr %214, align 8, !tbaa !603
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %220, label %217

217:                                              ; preds = %209
  store i32 %215, ptr %82, align 8, !tbaa !607
  %218 = getelementptr inbounds %struct.PNode, ptr %213, i64 0, i32 3
  %219 = load i32, ptr %218, align 4, !tbaa !561
  store i32 %219, ptr %207, align 4, !tbaa !608
  br label %220

220:                                              ; preds = %217, %209
  %221 = getelementptr inbounds %struct.PNode, ptr %213, i64 0, i32 8
  %222 = load i32, ptr %221, align 8, !tbaa !609
  %223 = icmp ult i32 %222, %211
  %224 = add i32 %222, 1
  %225 = select i1 %223, i32 %211, i32 %224
  %226 = add nuw nsw i64 %210, 1
  %227 = icmp eq i64 %226, %208
  br i1 %227, label %228, label %209, !llvm.loop !610

228:                                              ; preds = %220, %200
  %229 = phi i32 [ 0, %200 ], [ %225, %220 ]
  %230 = getelementptr inbounds %struct.D_Reduction, ptr %5, i64 0, i32 4
  %231 = load i16, ptr %230, align 8, !tbaa !611
  %232 = zext i16 %231 to i32
  %233 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 2
  store i32 %232, ptr %233, align 8, !tbaa !603
  %234 = getelementptr inbounds %struct.D_Reduction, ptr %5, i64 0, i32 6
  %235 = load i32, ptr %234, align 4, !tbaa !612
  %236 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 3
  store i32 %235, ptr %236, align 4, !tbaa !561
  %237 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 8
  store i32 %229, ptr %237, align 8, !tbaa !609
  %238 = getelementptr inbounds %struct.D_Reduction, ptr %5, i64 0, i32 5
  %239 = load i16, ptr %238, align 2, !tbaa !613
  %240 = icmp eq i16 %239, 0
  br i1 %240, label %246, label %241

241:                                              ; preds = %228
  %242 = zext i16 %239 to i32
  store i32 %242, ptr %82, align 8, !tbaa !607
  %243 = getelementptr inbounds %struct.D_Reduction, ptr %5, i64 0, i32 7
  %244 = load i32, ptr %243, align 8, !tbaa !614
  %245 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 1
  store i32 %244, ptr %245, align 4, !tbaa !608
  br label %246

246:                                              ; preds = %241, %228
  %247 = getelementptr inbounds %struct.D_Reduction, ptr %5, i64 0, i32 2
  %248 = load ptr, ptr %247, align 8, !tbaa !615
  %249 = icmp eq ptr %248, null
  br i1 %249, label %256, label %250

250:                                              ; preds = %246
  %251 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7, i32 2
  %252 = load ptr, ptr %251, align 8, !tbaa !421
  %253 = tail call i32 %248(ptr noundef nonnull %82, ptr noundef %252, i32 noundef %202, i32 noundef 152, ptr noundef %0) #43
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %256, label %255

255:                                              ; preds = %250
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %82) #44
  br label %286

256:                                              ; preds = %250, %246
  br i1 %89, label %257, label %286

257:                                              ; preds = %256
  %258 = load i32, ptr %6, align 8, !tbaa !30
  %259 = icmp sgt i32 %258, 1
  br i1 %259, label %260, label %286

260:                                              ; preds = %257
  %261 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 7, i32 2
  %262 = load ptr, ptr %261, align 8, !tbaa !421
  %263 = getelementptr inbounds %struct.PNode, ptr %82, i64 0, i32 1
  %264 = add nsw i32 %258, -1
  %265 = zext i32 %264 to i64
  %266 = zext i32 %258 to i64
  br label %267

267:                                              ; preds = %283, %260
  %268 = phi i64 [ 0, %260 ], [ %284, %283 ]
  %269 = getelementptr inbounds ptr, ptr %262, i64 %268
  %270 = load ptr, ptr %269, align 8, !tbaa !14
  %271 = load i32, ptr %270, align 8, !tbaa !607
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %283, label %273

273:                                              ; preds = %267
  %274 = load i32, ptr %263, align 4, !tbaa !608
  %275 = load i32, ptr %82, align 8, !tbaa !607
  %276 = getelementptr inbounds %struct.PNode, ptr %270, i64 0, i32 1
  %277 = load i32, ptr %276, align 4, !tbaa !608
  %278 = icmp eq i64 %268, %265
  %279 = zext i1 %278 to i32
  %280 = tail call fastcc i32 @check_child(i32 noundef %274, i32 noundef %275, i32 noundef %277, i32 noundef %271, i32 noundef %279) #44
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %283

282:                                              ; preds = %273
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %82) #44
  br label %286

283:                                              ; preds = %273, %267
  %284 = add i64 %268, %265
  %285 = icmp slt i64 %284, %266
  br i1 %285, label %267, label %286, !llvm.loop !616

286:                                              ; preds = %283, %282, %257, %256, %255, %150, %149, %142, %131
  %287 = phi ptr [ null, %149 ], [ null, %255 ], [ null, %282 ], [ %82, %150 ], [ %82, %257 ], [ %82, %256 ], [ %82, %131 ], [ %82, %142 ], [ %82, %283 ]
  %288 = icmp eq ptr %287, null
  br i1 %19, label %289, label %297

289:                                              ; preds = %286
  br i1 %288, label %555, label %290

290:                                              ; preds = %289
  tail call void @insert_PNode_internal(ptr noundef %0, ptr noundef nonnull %287) #44
  %291 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 6
  %292 = load i32, ptr %291, align 8, !tbaa !506
  %293 = add i32 %292, 1
  store i32 %293, ptr %291, align 8, !tbaa !506
  %294 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 4
  %295 = load ptr, ptr %294, align 8, !tbaa !617
  %296 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 11
  store ptr %295, ptr %296, align 8, !tbaa !592
  store ptr %287, ptr %294, align 8, !tbaa !617
  br label %555

297:                                              ; preds = %286
  br i1 %288, label %555, label %298

298:                                              ; preds = %297
  %299 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 9
  %300 = load i32, ptr %299, align 4, !tbaa !618
  %301 = add nsw i32 %300, 1
  store i32 %301, ptr %299, align 4, !tbaa !618
  %302 = getelementptr inbounds %struct.StackPNode, ptr %9, i64 0, i32 2
  %303 = getelementptr inbounds %struct.StackPNode, ptr %10, i64 0, i32 2
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %9) #45
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %10) #45
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %11) #45
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %12) #45
  %304 = load i32, ptr %287, align 8, !tbaa !607
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %479, label %306

306:                                              ; preds = %298
  %307 = load i32, ptr %18, align 8, !tbaa !607
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %479, label %309

309:                                              ; preds = %306
  %310 = or i32 %307, %304
  %311 = and i32 %310, 4
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %321

313:                                              ; preds = %309
  %314 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 1
  %315 = load i32, ptr %314, align 4, !tbaa !608
  %316 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 1
  %317 = load i32, ptr %316, align 4, !tbaa !608
  %318 = icmp sgt i32 %315, %317
  br i1 %318, label %539, label %319

319:                                              ; preds = %313
  %320 = icmp slt i32 %315, %317
  br i1 %320, label %540, label %321

321:                                              ; preds = %319, %309
  %322 = getelementptr inbounds %struct.StackPNode, ptr %9, i64 0, i32 3
  %323 = getelementptr inbounds %struct.StackPNode, ptr %9, i64 0, i32 1
  store ptr %322, ptr %302, align 8, !tbaa !619
  store ptr %322, ptr %9, align 8, !tbaa !621
  %324 = getelementptr inbounds %struct.StackPNode, ptr %9, i64 1
  store ptr %324, ptr %323, align 8, !tbaa !622
  %325 = getelementptr inbounds %struct.StackPNode, ptr %10, i64 0, i32 3
  %326 = getelementptr inbounds %struct.StackPNode, ptr %10, i64 0, i32 1
  store ptr %325, ptr %303, align 8, !tbaa !619
  store ptr %325, ptr %10, align 8, !tbaa !621
  %327 = getelementptr inbounds %struct.StackPNode, ptr %10, i64 1
  store ptr %327, ptr %326, align 8, !tbaa !622
  %328 = getelementptr inbounds %struct.StackInt, ptr %11, i64 0, i32 3
  %329 = getelementptr inbounds %struct.StackInt, ptr %11, i64 0, i32 1
  %330 = getelementptr inbounds %struct.StackInt, ptr %11, i64 0, i32 2
  store ptr %328, ptr %330, align 8, !tbaa !619
  store ptr %328, ptr %11, align 8, !tbaa !621
  %331 = getelementptr inbounds %struct.StackInt, ptr %11, i64 1
  store ptr %331, ptr %329, align 8, !tbaa !622
  %332 = getelementptr inbounds %struct.StackInt, ptr %12, i64 0, i32 3
  %333 = getelementptr inbounds %struct.StackInt, ptr %12, i64 0, i32 1
  %334 = getelementptr inbounds %struct.StackInt, ptr %12, i64 0, i32 2
  store ptr %332, ptr %334, align 8, !tbaa !619
  store ptr %332, ptr %12, align 8, !tbaa !621
  %335 = getelementptr inbounds %struct.StackInt, ptr %12, i64 1
  store ptr %335, ptr %333, align 8, !tbaa !622
  call fastcc void @get_exp_one(ptr noundef nonnull %287, ptr noundef nonnull %9, ptr noundef nonnull %11) #44
  call fastcc void @get_exp_one(ptr noundef nonnull %18, ptr noundef nonnull %10, ptr noundef nonnull %12) #44
  %336 = load ptr, ptr %302, align 8, !tbaa !619
  %337 = load ptr, ptr %9, align 8, !tbaa !621
  %338 = icmp eq ptr %336, %337
  br i1 %338, label %369, label %339

339:                                              ; preds = %361, %321
  %340 = phi ptr [ %362, %361 ], [ %336, %321 ]
  %341 = load ptr, ptr %303, align 8, !tbaa !619
  %342 = load ptr, ptr %10, align 8, !tbaa !621
  %343 = icmp eq ptr %341, %342
  br i1 %343, label %369, label %344

344:                                              ; preds = %339
  %345 = getelementptr inbounds ptr, ptr %340, i64 -1
  %346 = load ptr, ptr %345, align 8, !tbaa !14
  %347 = getelementptr inbounds %struct.PNode, ptr %346, i64 0, i32 8
  %348 = load i32, ptr %347, align 8, !tbaa !609
  %349 = getelementptr inbounds ptr, ptr %341, i64 -1
  %350 = load ptr, ptr %349, align 8, !tbaa !14
  %351 = getelementptr inbounds %struct.PNode, ptr %350, i64 0, i32 8
  %352 = load i32, ptr %351, align 8, !tbaa !609
  %353 = icmp ugt i32 %348, %352
  br i1 %353, label %365, label %354

354:                                              ; preds = %344
  %355 = icmp ult i32 %348, %352
  br i1 %355, label %367, label %356

356:                                              ; preds = %354
  %357 = icmp ugt ptr %346, %350
  br i1 %357, label %365, label %358

358:                                              ; preds = %356
  %359 = icmp ult ptr %346, %350
  br i1 %359, label %367, label %360

360:                                              ; preds = %358
  store ptr %345, ptr %302, align 8, !tbaa !619
  store ptr %349, ptr %303, align 8, !tbaa !619
  br label %361

361:                                              ; preds = %367, %365, %360
  %362 = load ptr, ptr %302, align 8, !tbaa !619
  %363 = load ptr, ptr %9, align 8, !tbaa !621
  %364 = icmp eq ptr %362, %363
  br i1 %364, label %369, label %339

365:                                              ; preds = %356, %344
  store ptr %345, ptr %302, align 8, !tbaa !619
  %366 = load ptr, ptr %345, align 8, !tbaa !14
  call fastcc void @get_exp_one_down(ptr noundef %366, ptr noundef nonnull %9, ptr noundef nonnull %11) #44
  br label %361

367:                                              ; preds = %358, %354
  store ptr %349, ptr %303, align 8, !tbaa !619
  %368 = load ptr, ptr %349, align 8, !tbaa !14
  call fastcc void @get_exp_one_down(ptr noundef %368, ptr noundef nonnull %10, ptr noundef nonnull %12) #44
  br label %361

369:                                              ; preds = %361, %339, %321
  %370 = phi ptr [ %10, %321 ], [ %9, %339 ], [ %10, %361 ]
  %371 = phi ptr [ %303, %321 ], [ %302, %339 ], [ %303, %361 ]
  %372 = load ptr, ptr %371, align 8, !tbaa !619
  %373 = load ptr, ptr %370, align 8, !tbaa !621
  %374 = icmp eq ptr %372, %373
  br i1 %374, label %385, label %375

375:                                              ; preds = %369
  %376 = icmp eq ptr %370, %9
  %377 = select i1 %376, ptr %11, ptr %12
  br label %378

378:                                              ; preds = %378, %375
  %379 = phi ptr [ %372, %375 ], [ %382, %378 ]
  %380 = getelementptr inbounds ptr, ptr %379, i64 -1
  store ptr %380, ptr %371, align 8, !tbaa !619
  %381 = load ptr, ptr %380, align 8, !tbaa !14
  call fastcc void @get_exp_all(ptr noundef %381, ptr noundef nonnull %377) #44
  %382 = load ptr, ptr %371, align 8, !tbaa !619
  %383 = load ptr, ptr %370, align 8, !tbaa !621
  %384 = icmp eq ptr %382, %383
  br i1 %384, label %385, label %378, !llvm.loop !623

385:                                              ; preds = %378, %369
  %386 = load ptr, ptr %11, align 8, !tbaa !621
  %387 = load ptr, ptr %330, align 8, !tbaa !619
  %388 = ptrtoint ptr %387 to i64
  %389 = ptrtoint ptr %386 to i64
  %390 = sub i64 %388, %389
  %391 = lshr exact i64 %390, 2
  %392 = trunc i64 %391 to i32
  %393 = add nuw nsw i64 %391, 4294967295
  %394 = icmp slt i32 %392, 2
  %395 = and i64 %393, 4294967295
  br i1 %394, label %414, label %398

396:                                              ; preds = %410
  %.lcssa1 = phi i32 [ %412, %410 ]
  %397 = icmp eq i32 %.lcssa1, 0
  br i1 %397, label %414, label %398, !llvm.loop !624

398:                                              ; preds = %396, %385
  %399 = load i32, ptr %386, align 4, !tbaa !15
  br label %400

400:                                              ; preds = %410, %398
  %401 = phi i32 [ %399, %398 ], [ %411, %410 ]
  %402 = phi i64 [ 0, %398 ], [ %404, %410 ]
  %403 = phi i32 [ 0, %398 ], [ %412, %410 ]
  %404 = add nuw nsw i64 %402, 1
  %405 = getelementptr inbounds i32, ptr %386, i64 %404
  %406 = load i32, ptr %405, align 4, !tbaa !15
  %407 = icmp sgt i32 %401, %406
  br i1 %407, label %408, label %410

408:                                              ; preds = %400
  %409 = getelementptr inbounds i32, ptr %386, i64 %402
  store i32 %406, ptr %409, align 4, !tbaa !15
  store i32 %401, ptr %405, align 4, !tbaa !15
  br label %410

410:                                              ; preds = %408, %400
  %411 = phi i32 [ %401, %408 ], [ %406, %400 ]
  %412 = phi i32 [ 1, %408 ], [ %403, %400 ]
  %413 = icmp eq i64 %404, %395
  br i1 %413, label %396, label %400, !llvm.loop !625

414:                                              ; preds = %396, %385
  %415 = load ptr, ptr %12, align 8, !tbaa !621
  %416 = load ptr, ptr %334, align 8, !tbaa !619
  %417 = ptrtoint ptr %416 to i64
  %418 = ptrtoint ptr %415 to i64
  %419 = sub i64 %417, %418
  %420 = lshr exact i64 %419, 2
  %421 = trunc i64 %420 to i32
  %422 = add nuw nsw i64 %420, 4294967295
  %423 = icmp slt i32 %421, 2
  %424 = and i64 %422, 4294967295
  br i1 %423, label %443, label %427

425:                                              ; preds = %439
  %.lcssa = phi i32 [ %441, %439 ]
  %426 = icmp eq i32 %.lcssa, 0
  br i1 %426, label %443, label %427, !llvm.loop !624

427:                                              ; preds = %425, %414
  %428 = load i32, ptr %415, align 4, !tbaa !15
  br label %429

429:                                              ; preds = %439, %427
  %430 = phi i32 [ %428, %427 ], [ %440, %439 ]
  %431 = phi i64 [ 0, %427 ], [ %433, %439 ]
  %432 = phi i32 [ 0, %427 ], [ %441, %439 ]
  %433 = add nuw nsw i64 %431, 1
  %434 = getelementptr inbounds i32, ptr %415, i64 %433
  %435 = load i32, ptr %434, align 4, !tbaa !15
  %436 = icmp sgt i32 %430, %435
  br i1 %436, label %437, label %439

437:                                              ; preds = %429
  %438 = getelementptr inbounds i32, ptr %415, i64 %431
  store i32 %435, ptr %438, align 4, !tbaa !15
  store i32 %430, ptr %434, align 4, !tbaa !15
  br label %439

439:                                              ; preds = %437, %429
  %440 = phi i32 [ %430, %437 ], [ %435, %429 ]
  %441 = phi i32 [ 1, %437 ], [ %432, %429 ]
  %442 = icmp eq i64 %433, %424
  br i1 %442, label %425, label %429, !llvm.loop !625

443:                                              ; preds = %425, %414
  %444 = call i32 @llvm.smin.i32(i32 %392, i32 %421)
  %445 = icmp sgt i32 %444, 0
  br i1 %445, label %446, label %460

446:                                              ; preds = %443
  %447 = zext i32 %444 to i64
  br label %451

448:                                              ; preds = %458
  %449 = add nuw nsw i64 %452, 1
  %450 = icmp eq i64 %449, %447
  br i1 %450, label %460, label %451, !llvm.loop !626

451:                                              ; preds = %448, %446
  %452 = phi i64 [ 0, %446 ], [ %449, %448 ]
  %453 = getelementptr inbounds i32, ptr %386, i64 %452
  %454 = load i32, ptr %453, align 4, !tbaa !15
  %455 = getelementptr inbounds i32, ptr %415, i64 %452
  %456 = load i32, ptr %455, align 4, !tbaa !15
  %457 = icmp sgt i32 %454, %456
  br i1 %457, label %460, label %458

458:                                              ; preds = %451
  %459 = icmp slt i32 %454, %456
  br i1 %459, label %460, label %448

460:                                              ; preds = %458, %451, %448, %443
  %461 = phi i1 [ true, %443 ], [ true, %448 ], [ false, %458 ], [ false, %451 ]
  %462 = phi i32 [ 0, %443 ], [ 0, %448 ], [ 1, %458 ], [ -1, %451 ]
  %463 = load ptr, ptr %9, align 8, !tbaa !621
  %464 = icmp eq ptr %463, %322
  br i1 %464, label %466, label %465

465:                                              ; preds = %460
  call void @free(ptr noundef %463) #43
  br label %466

466:                                              ; preds = %465, %460
  store ptr %322, ptr %302, align 8, !tbaa !619
  store ptr %322, ptr %9, align 8, !tbaa !621
  store ptr %324, ptr %323, align 8, !tbaa !622
  %467 = load ptr, ptr %10, align 8, !tbaa !621
  %468 = icmp eq ptr %467, %325
  br i1 %468, label %470, label %469

469:                                              ; preds = %466
  call void @free(ptr noundef %467) #43
  br label %470

470:                                              ; preds = %469, %466
  store ptr %325, ptr %303, align 8, !tbaa !619
  store ptr %325, ptr %10, align 8, !tbaa !621
  store ptr %327, ptr %326, align 8, !tbaa !622
  %471 = load ptr, ptr %11, align 8, !tbaa !621
  %472 = icmp eq ptr %471, %328
  br i1 %472, label %474, label %473

473:                                              ; preds = %470
  call void @free(ptr noundef %471) #43
  br label %474

474:                                              ; preds = %473, %470
  store ptr %328, ptr %330, align 8, !tbaa !619
  store ptr %328, ptr %11, align 8, !tbaa !621
  store ptr %331, ptr %329, align 8, !tbaa !622
  %475 = load ptr, ptr %12, align 8, !tbaa !621
  %476 = icmp eq ptr %475, %332
  br i1 %476, label %478, label %477

477:                                              ; preds = %474
  call void @free(ptr noundef %475) #43
  br label %478

478:                                              ; preds = %477, %474
  store ptr %332, ptr %334, align 8, !tbaa !619
  store ptr %332, ptr %12, align 8, !tbaa !621
  store ptr %335, ptr %333, align 8, !tbaa !622
  br i1 %461, label %479, label %541

479:                                              ; preds = %478, %306, %298
  %480 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 13
  %481 = load i32, ptr %480, align 8, !tbaa !627
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %526

483:                                              ; preds = %479
  %484 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 7
  %485 = load i32, ptr %484, align 8, !tbaa !420
  %486 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 7
  %487 = load i32, ptr %486, align 8, !tbaa !420
  %488 = call i32 @llvm.umin.i32(i32 %485, i32 %487)
  %489 = icmp sgt i32 %488, 0
  br i1 %489, label %490, label %526

490:                                              ; preds = %483
  %491 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 7, i32 2
  %492 = load ptr, ptr %491, align 8, !tbaa !421
  %493 = add i32 %485, -1
  %494 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 7, i32 2
  %495 = add i32 %487, -1
  %496 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 19, i32 3
  %497 = zext i32 %493 to i64
  %498 = zext i32 %495 to i64
  %499 = zext i32 %488 to i64
  br label %503

500:                                              ; preds = %524
  %501 = add nuw nsw i64 %504, 1
  %502 = icmp eq i64 %501, %499
  br i1 %502, label %526, label %503, !llvm.loop !628

503:                                              ; preds = %500, %490
  %504 = phi i64 [ 0, %490 ], [ %501, %500 ]
  %505 = getelementptr inbounds ptr, ptr %492, i64 %504
  %506 = load ptr, ptr %505, align 8, !tbaa !14
  %507 = getelementptr inbounds %struct.PNode, ptr %506, i64 0, i32 19, i32 3
  %508 = load ptr, ptr %507, align 8, !tbaa !424
  %509 = icmp eq i64 %504, %497
  br i1 %509, label %514, label %510

510:                                              ; preds = %503
  %511 = load ptr, ptr %494, align 8, !tbaa !421
  %512 = getelementptr inbounds ptr, ptr %511, i64 %504
  %513 = load ptr, ptr %512, align 8, !tbaa !14
  br label %514

514:                                              ; preds = %510, %503
  %515 = phi ptr [ %513, %510 ], [ %287, %503 ]
  %516 = getelementptr inbounds %struct.PNode, ptr %515, i64 0, i32 19, i32 3
  %517 = load ptr, ptr %516, align 8, !tbaa !424
  %518 = icmp eq i64 %504, %498
  br i1 %518, label %519, label %521

519:                                              ; preds = %514
  %520 = load ptr, ptr %496, align 8, !tbaa !424
  br label %521

521:                                              ; preds = %519, %514
  %522 = phi ptr [ %520, %519 ], [ %508, %514 ]
  %523 = icmp ugt ptr %517, %522
  br i1 %523, label %539, label %524

524:                                              ; preds = %521
  %525 = icmp ult ptr %517, %522
  br i1 %525, label %540, label %500

526:                                              ; preds = %500, %483, %479
  %527 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 14
  %528 = load i32, ptr %527, align 4, !tbaa !629
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %538

530:                                              ; preds = %526
  %531 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 8
  %532 = load i32, ptr %531, align 8, !tbaa !609
  %533 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 8
  %534 = load i32, ptr %533, align 8, !tbaa !609
  %535 = icmp ult i32 %532, %534
  br i1 %535, label %539, label %536

536:                                              ; preds = %530
  %537 = icmp ugt i32 %532, %534
  br i1 %537, label %540, label %538

538:                                              ; preds = %536, %526
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %12) #45
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %11) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %10) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %9) #45
  br label %542

539:                                              ; preds = %530, %521, %313
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %12) #45
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %11) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %10) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %9) #45
  br label %546

540:                                              ; preds = %536, %524, %319
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %12) #45
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %11) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %10) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %9) #45
  br label %554

541:                                              ; preds = %478
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %12) #45
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %11) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %10) #45
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %9) #45
  switch i32 %462, label %555 [
    i32 0, label %542
    i32 -1, label %546
    i32 1, label %554
  ]

542:                                              ; preds = %541, %538
  %543 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 13
  %544 = load ptr, ptr %543, align 8, !tbaa !589
  %545 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 13
  store ptr %544, ptr %545, align 8, !tbaa !589
  store ptr %287, ptr %543, align 8, !tbaa !589
  br label %555

546:                                              ; preds = %541, %539
  call void @insert_PNode_internal(ptr noundef %0, ptr noundef nonnull %287) #44
  %547 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 6
  %548 = load i32, ptr %547, align 8, !tbaa !506
  %549 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 4
  %550 = load ptr, ptr %549, align 8, !tbaa !617
  %551 = getelementptr inbounds %struct.PNode, ptr %287, i64 0, i32 11
  store ptr %550, ptr %551, align 8, !tbaa !592
  store ptr %287, ptr %549, align 8, !tbaa !617
  %552 = getelementptr inbounds %struct.PNode, ptr %18, i64 0, i32 14
  store ptr %287, ptr %552, align 8, !tbaa !590
  %553 = add i32 %548, 2
  store i32 %553, ptr %547, align 8, !tbaa !506
  br label %555

554:                                              ; preds = %541, %540
  call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %287) #44
  br label %555

555:                                              ; preds = %554, %546, %542, %541, %297, %290, %289, %62, %43, %35, %28
  %556 = phi ptr [ %18, %62 ], [ null, %289 ], [ %18, %541 ], [ %18, %554 ], [ %287, %546 ], [ %18, %542 ], [ %18, %297 ], [ %287, %290 ], [ %18, %28 ], [ %18, %35 ], [ %18, %43 ]
  ret ptr %556
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @set_add_znode(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = load i32, ptr %0, align 8, !tbaa !30
  %4 = icmp slt i32 %3, 3
  br i1 %4, label %5, label %30

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !31
  %8 = icmp eq ptr %7, null
  %9 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 3
  br i1 %8, label %10, label %14

10:                                               ; preds = %5
  store ptr %9, ptr %6, align 8, !tbaa !31
  %11 = add nsw i32 %3, 1
  store i32 %11, ptr %0, align 8, !tbaa !30
  %12 = zext i32 %3 to i64
  %13 = getelementptr inbounds ptr, ptr %9, i64 %12
  store ptr %1, ptr %13, align 8, !tbaa !14
  br label %42

14:                                               ; preds = %5
  %15 = icmp eq ptr %7, %9
  br i1 %15, label %16, label %22

16:                                               ; preds = %14
  %17 = icmp ult i32 %3, 3
  br i1 %17, label %18, label %29

18:                                               ; preds = %16
  %19 = add nuw nsw i32 %3, 1
  store i32 %19, ptr %0, align 8, !tbaa !30
  %20 = zext i32 %3 to i64
  %21 = getelementptr inbounds ptr, ptr %7, i64 %20
  store ptr %1, ptr %21, align 8, !tbaa !14
  br label %42

22:                                               ; preds = %14
  %23 = and i32 %3, 7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %22
  %26 = add nsw i32 %3, 1
  store i32 %26, ptr %0, align 8, !tbaa !30
  %27 = zext i32 %3 to i64
  %28 = getelementptr inbounds ptr, ptr %7, i64 %27
  store ptr %1, ptr %28, align 8, !tbaa !14
  br label %42

29:                                               ; preds = %22, %16
  tail call void @vec_add_internal(ptr noundef nonnull %0, ptr noundef %1) #43
  br label %42

30:                                               ; preds = %2
  %31 = icmp eq i32 %3, 3
  br i1 %31, label %32, label %41

32:                                               ; preds = %30
  %33 = getelementptr inbounds i8, ptr %0, i64 8
  %34 = load ptr, ptr %33, align 8, !tbaa.struct !630
  store i32 0, ptr %0, align 8, !tbaa !30
  store ptr null, ptr %33, align 8, !tbaa !31
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi i64 [ 0, %32 ], [ %39, %35 ]
  %37 = getelementptr inbounds ptr, ptr %34, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !14
  tail call fastcc void @set_add_znode_hash(ptr noundef nonnull %0, ptr noundef %38) #44
  %39 = add nuw nsw i64 %36, 1
  %40 = icmp eq i64 %39, 3
  br i1 %40, label %41, label %35, !llvm.loop !631

41:                                               ; preds = %35, %30
  tail call fastcc void @set_add_znode_hash(ptr noundef nonnull %0, ptr noundef %1) #44
  br label %42

42:                                               ; preds = %41, %29, %25, %18, %10
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free_old_nodes(ptr noundef %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11
  %3 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !617
  %5 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12
  %6 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !632
  %8 = icmp eq ptr %7, null
  br i1 %8, label %50, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %11 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 2
  %12 = load i32, ptr %11, align 4, !tbaa !633
  br label %13

13:                                               ; preds = %46, %9
  %14 = phi ptr [ %7, %9 ], [ %40, %46 ]
  %15 = load ptr, ptr %14, align 8, !tbaa !441
  %16 = load ptr, ptr %10, align 8, !tbaa !426
  %17 = getelementptr inbounds %struct.D_ParserTables, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !440
  %19 = ptrtoint ptr %15 to i64
  %20 = ptrtoint ptr %18 to i64
  %21 = sub i64 %19, %20
  %22 = sdiv exact i64 %21, 120
  %23 = trunc i64 %22 to i32
  %24 = shl i32 %23, 12
  %25 = getelementptr inbounds %struct.SNode, ptr %14, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !443
  %27 = ptrtoint ptr %26 to i64
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds %struct.SNode, ptr %14, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !444
  %31 = ptrtoint ptr %30 to i64
  %32 = trunc i64 %31 to i32
  %33 = add i32 %32, %28
  %34 = add i32 %33, %24
  %35 = load ptr, ptr %5, align 8, !tbaa !550
  %36 = urem i32 %34, %12
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds ptr, ptr %35, i64 %37
  %39 = getelementptr inbounds %struct.SNode, ptr %14, i64 0, i32 9
  %40 = load ptr, ptr %39, align 8, !tbaa !586
  br label %41

41:                                               ; preds = %41, %13
  %42 = phi ptr [ %38, %13 ], [ %45, %41 ]
  %43 = load ptr, ptr %42, align 8, !tbaa !14
  %44 = icmp eq ptr %43, %14
  %45 = getelementptr inbounds %struct.SNode, ptr %43, i64 0, i32 8
  br i1 %44, label %46, label %41, !llvm.loop !634

46:                                               ; preds = %41
  %.lcssa1 = phi ptr [ %42, %41 ]
  %47 = getelementptr inbounds %struct.SNode, ptr %14, i64 0, i32 8
  %48 = load ptr, ptr %47, align 8, !tbaa !448
  store ptr %48, ptr %.lcssa1, align 8, !tbaa !14
  %49 = icmp eq ptr %40, null
  br i1 %49, label %50, label %13, !llvm.loop !635

50:                                               ; preds = %46, %1
  %51 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 5
  %52 = load ptr, ptr %51, align 8, !tbaa !636
  %53 = icmp eq ptr %52, null
  br i1 %53, label %65, label %54

54:                                               ; preds = %63, %50
  %55 = phi ptr [ %57, %63 ], [ %52, %50 ]
  %56 = getelementptr inbounds %struct.SNode, ptr %55, i64 0, i32 9
  %57 = load ptr, ptr %56, align 8, !tbaa !586
  %58 = getelementptr inbounds %struct.SNode, ptr %55, i64 0, i32 7
  %59 = load i32, ptr %58, align 8, !tbaa !482
  %60 = add i32 %59, -1
  store i32 %60, ptr %58, align 8, !tbaa !482
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %54
  tail call fastcc void @free_SNode(ptr noundef %0, ptr noundef nonnull %55) #44
  br label %63

63:                                               ; preds = %62, %54
  %64 = icmp eq ptr %57, null
  br i1 %64, label %65, label %54, !llvm.loop !637

65:                                               ; preds = %63, %50
  %66 = load ptr, ptr %6, align 8, !tbaa !632
  store ptr %66, ptr %51, align 8, !tbaa !636
  store ptr null, ptr %6, align 8, !tbaa !632
  %67 = icmp eq ptr %4, null
  br i1 %67, label %160, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 2
  br label %70

70:                                               ; preds = %158, %68
  %71 = phi ptr [ %4, %68 ], [ %144, %158 ]
  %72 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 7
  %73 = load i32, ptr %72, align 8, !tbaa !420
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %113, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 7, i32 2
  br label %77

77:                                               ; preds = %107, %75
  %78 = phi i32 [ %73, %75 ], [ %108, %107 ]
  %79 = phi i32 [ %73, %75 ], [ %109, %107 ]
  %80 = phi i64 [ 0, %75 ], [ %110, %107 ]
  %81 = load ptr, ptr %76, align 8, !tbaa !421
  %82 = getelementptr inbounds ptr, ptr %81, i64 %80
  %83 = load ptr, ptr %82, align 8, !tbaa !14
  %84 = getelementptr inbounds %struct.PNode, ptr %83, i64 0, i32 14
  %85 = load ptr, ptr %84, align 8, !tbaa !590
  %86 = icmp eq ptr %83, %85
  br i1 %86, label %107, label %87

87:                                               ; preds = %77
  %88 = getelementptr inbounds %struct.PNode, ptr %85, i64 0, i32 6
  %89 = load i32, ptr %88, align 8, !tbaa !506
  %90 = add i32 %89, 1
  store i32 %90, ptr %88, align 8, !tbaa !506
  %91 = getelementptr inbounds %struct.PNode, ptr %83, i64 0, i32 6
  %92 = load i32, ptr %91, align 8, !tbaa !506
  %93 = add i32 %92, -1
  store i32 %93, ptr %91, align 8, !tbaa !506
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %102

95:                                               ; preds = %87
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %83) #44
  %96 = load ptr, ptr %76, align 8, !tbaa !421
  %97 = getelementptr inbounds ptr, ptr %96, i64 %80
  %98 = load ptr, ptr %97, align 8, !tbaa !14
  %99 = getelementptr inbounds %struct.PNode, ptr %98, i64 0, i32 14
  %100 = load ptr, ptr %99, align 8, !tbaa !590
  %101 = load i32, ptr %72, align 8, !tbaa !420
  br label %102

102:                                              ; preds = %95, %87
  %103 = phi i32 [ %101, %95 ], [ %78, %87 ]
  %104 = phi ptr [ %100, %95 ], [ %85, %87 ]
  %105 = phi ptr [ %96, %95 ], [ %81, %87 ]
  %106 = getelementptr inbounds ptr, ptr %105, i64 %80
  store ptr %104, ptr %106, align 8, !tbaa !14
  br label %107

107:                                              ; preds = %102, %77
  %108 = phi i32 [ %78, %77 ], [ %103, %102 ]
  %109 = phi i32 [ %79, %77 ], [ %103, %102 ]
  %110 = add nuw nsw i64 %80, 1
  %111 = zext i32 %109 to i64
  %112 = icmp ult i64 %110, %111
  br i1 %112, label %77, label %113, !llvm.loop !638

113:                                              ; preds = %107, %70
  %114 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 19
  %115 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 19, i32 1
  %116 = load ptr, ptr %115, align 8, !tbaa !423
  %117 = ptrtoint ptr %116 to i64
  %118 = trunc i64 %117 to i32
  %119 = shl i32 %118, 8
  %120 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 19, i32 3
  %121 = load ptr, ptr %120, align 8, !tbaa !424
  %122 = ptrtoint ptr %121 to i64
  %123 = trunc i64 %122 to i32
  %124 = shl i32 %123, 16
  %125 = load i32, ptr %114, align 8, !tbaa !433
  %126 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 17
  %127 = load ptr, ptr %126, align 8, !tbaa !453
  %128 = ptrtoint ptr %127 to i64
  %129 = trunc i64 %128 to i32
  %130 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 18
  %131 = load ptr, ptr %130, align 8, !tbaa !454
  %132 = ptrtoint ptr %131 to i64
  %133 = trunc i64 %132 to i32
  %134 = add i32 %119, %125
  %135 = add i32 %134, %124
  %136 = add i32 %135, %129
  %137 = add i32 %136, %133
  %138 = load ptr, ptr %2, align 8, !tbaa !639
  %139 = load i32, ptr %69, align 4, !tbaa !640
  %140 = urem i32 %137, %139
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds ptr, ptr %138, i64 %141
  %143 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 11
  %144 = load ptr, ptr %143, align 8, !tbaa !592
  br label %145

145:                                              ; preds = %145, %113
  %146 = phi ptr [ %142, %113 ], [ %149, %145 ]
  %147 = load ptr, ptr %146, align 8, !tbaa !14
  %148 = icmp eq ptr %147, %71
  %149 = getelementptr inbounds %struct.PNode, ptr %147, i64 0, i32 12
  br i1 %148, label %150, label %145, !llvm.loop !641

150:                                              ; preds = %145
  %.lcssa = phi ptr [ %146, %145 ]
  %151 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 12
  %152 = load ptr, ptr %151, align 8, !tbaa !458
  store ptr %152, ptr %.lcssa, align 8, !tbaa !14
  %153 = getelementptr inbounds %struct.PNode, ptr %71, i64 0, i32 6
  %154 = load i32, ptr %153, align 8, !tbaa !506
  %155 = add i32 %154, -1
  store i32 %155, ptr %153, align 8, !tbaa !506
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %150
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %71) #44
  br label %158

158:                                              ; preds = %157, %150
  %159 = icmp eq ptr %144, null
  br i1 %159, label %160, label %70, !llvm.loop !642

160:                                              ; preds = %158, %65
  %161 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 3
  store i32 0, ptr %161, align 8, !tbaa !643
  store ptr null, ptr %3, align 8, !tbaa !617
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @reduce_one(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = alloca %struct.anon, align 8
  %4 = getelementptr inbounds %struct.Reduction, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !508
  %6 = getelementptr inbounds %struct.Reduction, ptr %1, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !547
  %8 = load i16, ptr %7, align 8, !tbaa !540
  %9 = zext i16 %8 to i32
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #45
  %10 = load ptr, ptr %1, align 8, !tbaa !546
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %23

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.D_Reduction, ptr %7, i64 0, i32 1
  %14 = load i16, ptr %13, align 2, !tbaa !543
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds %struct.SNode, ptr %5, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !510
  %18 = getelementptr inbounds %struct.SNode, ptr %5, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !500
  %20 = tail call fastcc ptr @add_PNode(ptr noundef %0, i32 noundef %15, ptr noundef nonnull %16, ptr noundef %17, ptr noundef %19, ptr noundef nonnull %7, ptr noundef null, ptr noundef null) #44
  %21 = icmp eq ptr %20, null
  br i1 %21, label %325, label %22

22:                                               ; preds = %12
  tail call fastcc void @goto_PNode(ptr noundef %0, ptr noundef nonnull %16, ptr noundef nonnull %20, ptr noundef nonnull %5) #44
  br label %325

23:                                               ; preds = %2
  store i32 0, ptr %3, align 8, !tbaa !30
  %24 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 2
  store ptr null, ptr %24, align 8, !tbaa !31
  %25 = icmp eq i16 %8, 0
  br i1 %25, label %281, label %26

26:                                               ; preds = %23
  store i32 0, ptr @path1, align 8, !tbaa !30
  store ptr null, ptr getelementptr inbounds (%struct.anon, ptr @path1, i64 0, i32 2), align 8, !tbaa !31
  %27 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 3
  store ptr %27, ptr %24, align 8, !tbaa !31
  store i32 1, ptr %3, align 8, !tbaa !30
  store ptr @path1, ptr %27, align 8, !tbaa !14
  call fastcc void @build_paths_internal(ptr noundef nonnull %10, ptr noundef nonnull %3, i32 noundef 0, i32 noundef %9, i32 noundef %9) #44
  %28 = load i32, ptr %3, align 8, !tbaa !30
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %281, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.Reduction, ptr %1, i64 0, i32 3
  %32 = getelementptr inbounds %struct.Reduction, ptr %1, i64 0, i32 4
  %33 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 8
  %34 = add nsw i32 %9, -1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.SNode, ptr %5, i64 0, i32 3
  br label %37

37:                                               ; preds = %276, %30
  %38 = phi i64 [ 0, %30 ], [ %277, %276 ]
  %39 = load ptr, ptr %24, align 8, !tbaa !31
  %40 = getelementptr inbounds ptr, ptr %39, i64 %38
  %41 = load ptr, ptr %40, align 8, !tbaa !14
  %42 = load ptr, ptr %31, align 8, !tbaa !548
  %43 = icmp eq ptr %42, null
  br i1 %43, label %66, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.anon, ptr %41, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !31
  %47 = load i32, ptr %32, align 8, !tbaa !644
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds ptr, ptr %46, i64 %48
  %50 = load ptr, ptr %49, align 8, !tbaa !14
  %51 = getelementptr inbounds %struct.ZNode, ptr %50, i64 0, i32 1
  %52 = load i32, ptr %51, align 8, !tbaa !504
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %276, label %54

54:                                               ; preds = %44
  %55 = getelementptr inbounds %struct.ZNode, ptr %50, i64 0, i32 1, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !505
  %57 = zext i32 %52 to i64
  br label %61

58:                                               ; preds = %61
  %59 = add nuw nsw i64 %62, 1
  %60 = icmp eq i64 %59, %57
  br i1 %60, label %276, label %61, !llvm.loop !645

61:                                               ; preds = %58, %54
  %62 = phi i64 [ 0, %54 ], [ %59, %58 ]
  %63 = getelementptr inbounds ptr, ptr %56, i64 %62
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = icmp eq ptr %64, %42
  br i1 %65, label %66, label %58

66:                                               ; preds = %61, %37
  %67 = load i32, ptr %41, align 8, !tbaa !30
  %68 = icmp ugt i32 %67, 1
  %69 = getelementptr inbounds %struct.anon, ptr %41, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !31
  %71 = load ptr, ptr %70, align 8, !tbaa !14
  %72 = load ptr, ptr %71, align 8, !tbaa !502
  br i1 %68, label %73, label %247

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.PNode, ptr %72, i64 0, i32 2
  %75 = load i32, ptr %74, align 8, !tbaa !603
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %117

77:                                               ; preds = %73
  %78 = getelementptr inbounds ptr, ptr %70, i64 1
  %79 = load ptr, ptr %78, align 8, !tbaa !14
  %80 = load ptr, ptr %79, align 8, !tbaa !502
  %81 = getelementptr inbounds %struct.PNode, ptr %80, i64 0, i32 2
  %82 = load i32, ptr %81, align 8, !tbaa !603
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %247, label %84

84:                                               ; preds = %77
  %85 = load i32, ptr %72, align 8, !tbaa !607
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %117, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %struct.PNode, ptr %80, i64 0, i32 3
  %89 = load i32, ptr %88, align 4, !tbaa !561
  %90 = getelementptr inbounds %struct.PNode, ptr %72, i64 0, i32 1
  %91 = load i32, ptr %90, align 4, !tbaa !608
  %92 = icmp sgt i32 %91, %89
  br i1 %92, label %102, label %93

93:                                               ; preds = %87
  %94 = icmp slt i32 %91, %89
  br i1 %94, label %102, label %95

95:                                               ; preds = %93
  %96 = and i32 %85, 2
  %97 = lshr i32 %82, 1
  %98 = and i32 %97, 1
  %99 = or i32 %98, 2
  %100 = add nuw nsw i32 %99, %96
  %101 = zext i32 %100 to i64
  br label %102

102:                                              ; preds = %95, %93, %87
  %103 = phi i64 [ 0, %87 ], [ %101, %95 ], [ 1, %93 ]
  %104 = and i32 %85, 20
  %105 = icmp eq i32 %104, 0
  %106 = icmp eq i32 %85, 9
  %107 = select i1 %106, i64 1, i64 2
  %108 = select i1 %105, i64 %107, i64 0
  %109 = and i32 %82, 20
  %110 = icmp eq i32 %109, 0
  %111 = icmp eq i32 %82, 9
  %112 = select i1 %111, i64 2, i64 3
  %113 = select i1 %110, i64 %112, i64 1
  %114 = getelementptr inbounds [4 x [3 x [6 x i32]]], ptr @child_table, i64 0, i64 %113, i64 %108, i64 %103
  %115 = load i32, ptr %114, align 4, !tbaa !15
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %276, label %117

117:                                              ; preds = %102, %84, %73
  %118 = phi ptr [ %79, %102 ], [ %79, %84 ], [ %71, %73 ]
  %119 = phi i32 [ 1, %102 ], [ 1, %84 ], [ 0, %73 ]
  %120 = phi ptr [ %80, %102 ], [ %80, %84 ], [ %72, %73 ]
  %121 = add nuw nsw i32 %119, 1
  %122 = icmp ugt i32 %67, %121
  br i1 %122, label %123, label %179

123:                                              ; preds = %117
  %124 = zext i32 %121 to i64
  %125 = getelementptr inbounds ptr, ptr %70, i64 %124
  %126 = load ptr, ptr %125, align 8, !tbaa !14
  %127 = load ptr, ptr %126, align 8, !tbaa !502
  %128 = or i32 %119, 2
  %129 = icmp ugt i32 %67, %128
  br i1 %129, label %141, label %130

130:                                              ; preds = %123
  %131 = getelementptr inbounds %struct.ZNode, ptr %126, i64 0, i32 1
  %132 = load i32, ptr %131, align 8, !tbaa !504
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %177, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.ZNode, ptr %126, i64 0, i32 1, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !505
  %137 = zext i32 %132 to i64
  br label %138

138:                                              ; preds = %173, %134
  %139 = phi i64 [ %174, %173 ], [ 0, %134 ]
  %140 = phi i1 [ false, %173 ], [ true, %134 ]
  br label %147

141:                                              ; preds = %123
  %142 = zext i32 %128 to i64
  %143 = getelementptr inbounds ptr, ptr %70, i64 %142
  %144 = load ptr, ptr %143, align 8, !tbaa !14
  %145 = load ptr, ptr %144, align 8, !tbaa !502
  %146 = call fastcc i32 @check_assoc_priority(ptr noundef nonnull %120, ptr noundef %127, ptr noundef %145) #44, !range !646
  br label %244

147:                                              ; preds = %170, %138
  %148 = phi i64 [ %171, %170 ], [ %139, %138 ]
  %149 = getelementptr inbounds ptr, ptr %136, i64 %148
  %150 = load ptr, ptr %149, align 8, !tbaa !14
  %151 = getelementptr inbounds %struct.SNode, ptr %150, i64 0, i32 6
  %152 = load i32, ptr %151, align 8, !tbaa !534
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %170, label %154

154:                                              ; preds = %147
  %.lcssa4 = phi i64 [ %148, %147 ]
  %.lcssa2 = phi ptr [ %150, %147 ]
  %.lcssa = phi i32 [ %152, %147 ]
  %155 = getelementptr inbounds %struct.SNode, ptr %.lcssa2, i64 0, i32 6, i32 2
  %156 = load ptr, ptr %155, align 8, !tbaa !535
  %157 = zext i32 %.lcssa to i64
  br label %158

158:                                              ; preds = %167, %154
  %159 = phi i64 [ 0, %154 ], [ %168, %167 ]
  %160 = getelementptr inbounds ptr, ptr %156, i64 %159
  %161 = load ptr, ptr %160, align 8, !tbaa !14
  %162 = icmp eq ptr %161, null
  br i1 %162, label %167, label %163

163:                                              ; preds = %158
  %164 = load ptr, ptr %161, align 8, !tbaa !502
  %165 = call fastcc i32 @check_assoc_priority(ptr noundef %120, ptr noundef %127, ptr noundef %164) #44, !range !646
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %247, label %167

167:                                              ; preds = %163, %158
  %168 = add nuw nsw i64 %159, 1
  %169 = icmp eq i64 %168, %157
  br i1 %169, label %173, label %158, !llvm.loop !647

170:                                              ; preds = %147
  %171 = add nuw nsw i64 %148, 1
  %172 = icmp eq i64 %171, %137
  br i1 %172, label %176, label %147, !llvm.loop !648

173:                                              ; preds = %167
  %174 = add nuw nsw i64 %.lcssa4, 1
  %175 = icmp eq i64 %174, %137
  br i1 %175, label %276, label %138, !llvm.loop !648

176:                                              ; preds = %170
  %.lcssa6 = phi i1 [ %140, %170 ]
  br i1 %.lcssa6, label %177, label %276

177:                                              ; preds = %176, %130
  %178 = call fastcc i32 @check_assoc_priority(ptr noundef %120, ptr noundef %127, ptr noundef null) #44, !range !646
  br label %244

179:                                              ; preds = %117
  %180 = getelementptr inbounds %struct.ZNode, ptr %118, i64 0, i32 1
  %181 = load i32, ptr %180, align 8, !tbaa !504
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %247, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.ZNode, ptr %118, i64 0, i32 1, i32 2
  %185 = load ptr, ptr %184, align 8, !tbaa !505
  %186 = zext i32 %181 to i64
  br label %187

187:                                              ; preds = %241, %183
  %188 = phi i64 [ 0, %183 ], [ %242, %241 ]
  %189 = getelementptr inbounds ptr, ptr %185, i64 %188
  %190 = load ptr, ptr %189, align 8, !tbaa !14
  %191 = getelementptr inbounds %struct.SNode, ptr %190, i64 0, i32 6
  %192 = load i32, ptr %191, align 8, !tbaa !534
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %241, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %struct.SNode, ptr %190, i64 0, i32 6, i32 2
  %196 = load ptr, ptr %195, align 8, !tbaa !535
  %197 = zext i32 %192 to i64
  br label %198

198:                                              ; preds = %238, %194
  %199 = phi i64 [ 0, %194 ], [ %239, %238 ]
  %200 = getelementptr inbounds ptr, ptr %196, i64 %199
  %201 = load ptr, ptr %200, align 8, !tbaa !14
  %202 = icmp eq ptr %201, null
  br i1 %202, label %238, label %203

203:                                              ; preds = %198
  %204 = getelementptr inbounds %struct.ZNode, ptr %201, i64 0, i32 1
  %205 = load i32, ptr %204, align 8, !tbaa !504
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %238, label %207

207:                                              ; preds = %203
  %208 = getelementptr inbounds %struct.ZNode, ptr %201, i64 0, i32 1, i32 2
  %209 = load ptr, ptr %208, align 8, !tbaa !505
  %210 = zext i32 %205 to i64
  br label %211

211:                                              ; preds = %235, %207
  %212 = phi i64 [ 0, %207 ], [ %236, %235 ]
  %213 = getelementptr inbounds ptr, ptr %209, i64 %212
  %214 = load ptr, ptr %213, align 8, !tbaa !14
  %215 = getelementptr inbounds %struct.SNode, ptr %214, i64 0, i32 6
  %216 = load i32, ptr %215, align 8, !tbaa !534
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %235, label %218

218:                                              ; preds = %211
  %219 = getelementptr inbounds %struct.SNode, ptr %214, i64 0, i32 6, i32 2
  %220 = load ptr, ptr %219, align 8, !tbaa !535
  %221 = zext i32 %216 to i64
  br label %222

222:                                              ; preds = %232, %218
  %223 = phi i64 [ 0, %218 ], [ %233, %232 ]
  %224 = getelementptr inbounds ptr, ptr %220, i64 %223
  %225 = load ptr, ptr %224, align 8, !tbaa !14
  %226 = icmp eq ptr %225, null
  br i1 %226, label %232, label %227

227:                                              ; preds = %222
  %228 = load ptr, ptr %201, align 8, !tbaa !502
  %229 = load ptr, ptr %225, align 8, !tbaa !502
  %230 = call fastcc i32 @check_assoc_priority(ptr noundef %120, ptr noundef %228, ptr noundef %229) #44, !range !646
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %247, label %232

232:                                              ; preds = %227, %222
  %233 = add nuw nsw i64 %223, 1
  %234 = icmp eq i64 %233, %221
  br i1 %234, label %235, label %222, !llvm.loop !649

235:                                              ; preds = %232, %211
  %236 = add nuw nsw i64 %212, 1
  %237 = icmp eq i64 %236, %210
  br i1 %237, label %238, label %211, !llvm.loop !650

238:                                              ; preds = %235, %203, %198
  %239 = add nuw nsw i64 %199, 1
  %240 = icmp eq i64 %239, %197
  br i1 %240, label %241, label %198, !llvm.loop !651

241:                                              ; preds = %238, %187
  %242 = add nuw nsw i64 %188, 1
  %243 = icmp eq i64 %242, %186
  br i1 %243, label %247, label %187, !llvm.loop !652

244:                                              ; preds = %177, %141
  %245 = phi i32 [ %146, %141 ], [ %178, %177 ]
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %276

247:                                              ; preds = %244, %241, %227, %179, %163, %77, %66
  %248 = load i32, ptr %33, align 8, !tbaa !653
  %249 = add nsw i32 %248, 1
  store i32 %249, ptr %33, align 8, !tbaa !653
  %250 = getelementptr inbounds ptr, ptr %70, i64 %35
  %251 = load ptr, ptr %250, align 8, !tbaa !14
  %252 = load ptr, ptr %6, align 8, !tbaa !547
  %253 = getelementptr inbounds %struct.D_Reduction, ptr %252, i64 0, i32 1
  %254 = load i16, ptr %253, align 2, !tbaa !543
  %255 = zext i16 %254 to i32
  %256 = load ptr, ptr %251, align 8, !tbaa !502
  %257 = getelementptr inbounds %struct.PNode, ptr %256, i64 0, i32 19, i32 1
  %258 = load ptr, ptr %36, align 8, !tbaa !510
  %259 = call fastcc ptr @add_PNode(ptr noundef %0, i32 noundef %255, ptr noundef nonnull %257, ptr noundef %258, ptr noundef %72, ptr noundef %252, ptr noundef nonnull %41, ptr noundef null) #44
  %260 = icmp eq ptr %259, null
  br i1 %260, label %276, label %261

261:                                              ; preds = %247
  %262 = getelementptr inbounds %struct.ZNode, ptr %251, i64 0, i32 1
  %263 = load i32, ptr %262, align 8, !tbaa !504
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %276, label %265

265:                                              ; preds = %261
  %266 = getelementptr inbounds %struct.ZNode, ptr %251, i64 0, i32 1, i32 2
  br label %267

267:                                              ; preds = %267, %265
  %268 = phi i64 [ 0, %265 ], [ %272, %267 ]
  %269 = load ptr, ptr %266, align 8, !tbaa !505
  %270 = getelementptr inbounds ptr, ptr %269, i64 %268
  %271 = load ptr, ptr %270, align 8, !tbaa !14
  call fastcc void @goto_PNode(ptr noundef %0, ptr noundef nonnull %36, ptr noundef nonnull %259, ptr noundef %271) #44
  %272 = add nuw nsw i64 %268, 1
  %273 = load i32, ptr %262, align 8, !tbaa !504
  %274 = zext i32 %273 to i64
  %275 = icmp ult i64 %272, %274
  br i1 %275, label %267, label %276, !llvm.loop !654

276:                                              ; preds = %267, %261, %247, %244, %176, %173, %102, %58, %44
  %277 = add nuw nsw i64 %38, 1
  %278 = load i32, ptr %3, align 8, !tbaa !30
  %279 = zext i32 %278 to i64
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %37, label %281, !llvm.loop !655

281:                                              ; preds = %276, %26, %23
  %282 = phi i32 [ 0, %26 ], [ 0, %23 ], [ %278, %276 ]
  %283 = load ptr, ptr getelementptr inbounds (%struct.anon, ptr @path1, i64 0, i32 2), align 8
  %284 = icmp ne ptr %283, null
  %285 = icmp ne ptr %283, getelementptr inbounds (%struct.anon, ptr @path1, i64 0, i32 3)
  %286 = select i1 %284, i1 %285, i1 false
  br i1 %286, label %287, label %289

287:                                              ; preds = %281
  call void @free(ptr noundef nonnull %283) #43
  %288 = load i32, ptr %3, align 8, !tbaa !30
  br label %289

289:                                              ; preds = %287, %281
  %290 = phi i32 [ %288, %287 ], [ %282, %281 ]
  store i32 0, ptr @path1, align 8, !tbaa !30
  store ptr null, ptr getelementptr inbounds (%struct.anon, ptr @path1, i64 0, i32 2), align 8, !tbaa !31
  %291 = icmp ugt i32 %290, 1
  br i1 %291, label %292, label %317

292:                                              ; preds = %307, %289
  %293 = phi i64 [ %313, %307 ], [ 1, %289 ]
  %294 = load ptr, ptr %24, align 8, !tbaa !31
  %295 = getelementptr inbounds ptr, ptr %294, i64 %293
  %296 = load ptr, ptr %295, align 8, !tbaa !14
  %297 = getelementptr inbounds %struct.anon, ptr %296, i64 0, i32 2
  %298 = load ptr, ptr %297, align 8, !tbaa !31
  %299 = icmp eq ptr %298, null
  %300 = getelementptr inbounds %struct.anon, ptr %296, i64 0, i32 3
  %301 = icmp eq ptr %298, %300
  %302 = select i1 %299, i1 true, i1 %301
  br i1 %302, label %307, label %303

303:                                              ; preds = %292
  call void @free(ptr noundef nonnull %298) #43
  %304 = load ptr, ptr %24, align 8, !tbaa !31
  %305 = getelementptr inbounds ptr, ptr %304, i64 %293
  %306 = load ptr, ptr %305, align 8, !tbaa !14
  br label %307

307:                                              ; preds = %303, %292
  %308 = phi ptr [ %296, %292 ], [ %306, %303 ]
  store i32 0, ptr %308, align 8, !tbaa !30
  %309 = getelementptr inbounds %struct.anon, ptr %308, i64 0, i32 2
  store ptr null, ptr %309, align 8, !tbaa !31
  %310 = load ptr, ptr %24, align 8, !tbaa !31
  %311 = getelementptr inbounds ptr, ptr %310, i64 %293
  %312 = load ptr, ptr %311, align 8, !tbaa !14
  call void @free(ptr noundef %312) #43
  %313 = add nuw nsw i64 %293, 1
  %314 = load i32, ptr %3, align 8, !tbaa !30
  %315 = zext i32 %314 to i64
  %316 = icmp ult i64 %313, %315
  br i1 %316, label %292, label %317, !llvm.loop !656

317:                                              ; preds = %307, %289
  %318 = load ptr, ptr %24, align 8, !tbaa !31
  %319 = icmp eq ptr %318, null
  %320 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 3
  %321 = icmp eq ptr %318, %320
  %322 = select i1 %319, i1 true, i1 %321
  br i1 %322, label %324, label %323

323:                                              ; preds = %317
  call void @free(ptr noundef nonnull %318) #43
  br label %324

324:                                              ; preds = %323, %317
  store i32 0, ptr %3, align 8, !tbaa !30
  store ptr null, ptr %24, align 8, !tbaa !31
  br label %325

325:                                              ; preds = %324, %22, %12
  %326 = getelementptr inbounds %struct.SNode, ptr %5, i64 0, i32 7
  %327 = load i32, ptr %326, align 8, !tbaa !482
  %328 = add i32 %327, -1
  store i32 %328, ptr %326, align 8, !tbaa !482
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %331

330:                                              ; preds = %325
  call fastcc void @free_SNode(ptr noundef %0, ptr noundef nonnull %5) #44
  br label %331

331:                                              ; preds = %330, %325
  %332 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 18
  %333 = load ptr, ptr %332, align 8, !tbaa !657
  %334 = getelementptr inbounds %struct.Reduction, ptr %1, i64 0, i32 5
  store ptr %333, ptr %334, align 8, !tbaa !515
  store ptr %1, ptr %332, align 8, !tbaa !657
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3) #45
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @new_SNode(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 22
  %7 = load ptr, ptr %6, align 8, !tbaa !585
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  %10 = tail call noalias dereferenceable_or_null(136) ptr @malloc(i64 noundef 136) #50
  br label %14

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.SNode, ptr %7, i64 0, i32 9
  %13 = load ptr, ptr %12, align 8, !tbaa !586
  store ptr %13, ptr %6, align 8, !tbaa !585
  br label %14

14:                                               ; preds = %11, %9
  %15 = phi ptr [ %7, %11 ], [ %10, %9 ]
  %16 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 4
  store i32 0, ptr %16, align 8, !tbaa !531
  %17 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 6
  store i32 0, ptr %17, align 8, !tbaa !534
  %18 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 6, i32 2
  store ptr null, ptr %18, align 8, !tbaa !535
  %19 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 7
  store i32 0, ptr %19, align 8, !tbaa !482
  %20 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 9
  store ptr null, ptr %20, align 8, !tbaa !586
  %21 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 4
  %22 = load i32, ptr %21, align 8, !tbaa !658
  %23 = add nsw i32 %22, 1
  store i32 %23, ptr %21, align 8, !tbaa !658
  store ptr %1, ptr %15, align 8, !tbaa !441
  %24 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 1
  store ptr %3, ptr %24, align 8, !tbaa !443
  %25 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 2
  store ptr %4, ptr %25, align 8, !tbaa !444
  %26 = getelementptr inbounds %struct.SNode, ptr %15, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %26, ptr noundef nonnull align 8 dereferenceable(32) %2, i64 32, i1 false), !tbaa.struct !481
  tail call void @insert_SNode_internal(ptr noundef nonnull %0, ptr noundef nonnull %15) #44
  %27 = load i32, ptr %19, align 8, !tbaa !482
  %28 = add i32 %27, 1
  store i32 %28, ptr %19, align 8, !tbaa !482
  %29 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 4
  %30 = load ptr, ptr %29, align 8, !tbaa !632
  store ptr %30, ptr %20, align 8, !tbaa !586
  store ptr %15, ptr %29, align 8, !tbaa !632
  %31 = load ptr, ptr %15, align 8, !tbaa !441
  %32 = getelementptr inbounds %struct.D_State, ptr %31, i64 0, i32 9
  %33 = load i8, ptr %32, align 1, !tbaa !659
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %54, label %35

35:                                               ; preds = %14
  %36 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 16
  %37 = load ptr, ptr %36, align 8, !tbaa !480
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = add i32 %27, 2
  store i32 %40, ptr %19, align 8, !tbaa !482
  br label %53

41:                                               ; preds = %35
  %42 = load ptr, ptr %26, align 8, !tbaa !510
  %43 = getelementptr inbounds %struct.SNode, ptr %37, i64 0, i32 3
  %44 = load ptr, ptr %43, align 8, !tbaa !510
  %45 = icmp ugt ptr %42, %44
  br i1 %45, label %46, label %54

46:                                               ; preds = %41
  %47 = add i32 %27, 2
  store i32 %47, ptr %19, align 8, !tbaa !482
  %48 = getelementptr inbounds %struct.SNode, ptr %37, i64 0, i32 7
  %49 = load i32, ptr %48, align 8, !tbaa !482
  %50 = add i32 %49, -1
  store i32 %50, ptr %48, align 8, !tbaa !482
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %46
  tail call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %37) #44
  br label %53

53:                                               ; preds = %52, %46, %39
  store ptr %15, ptr %36, align 8, !tbaa !480
  br label %54

54:                                               ; preds = %53, %41, %14
  ret ptr %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @binary_op_ZNode(ptr nocapture noundef readonly %0) unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.SNode, ptr %0, i64 0, i32 6
  %3 = load i32, ptr %2, align 8, !tbaa !534
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %37

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.SNode, ptr %0, i64 0, i32 6, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !535
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load ptr, ptr %8, align 8, !tbaa !502
  %10 = getelementptr inbounds %struct.PNode, ptr %9, i64 0, i32 2
  %11 = load i32, ptr %10, align 8, !tbaa !603
  %12 = icmp eq i32 %11, 10
  br i1 %12, label %13, label %31

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.ZNode, ptr %8, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !504
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %37

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.ZNode, ptr %8, i64 0, i32 1, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !505
  %20 = load ptr, ptr %19, align 8, !tbaa !14
  %21 = getelementptr inbounds %struct.SNode, ptr %20, i64 0, i32 6
  %22 = load i32, ptr %21, align 8, !tbaa !534
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %37

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.SNode, ptr %20, i64 0, i32 6, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !535
  %27 = load ptr, ptr %26, align 8, !tbaa !14
  %28 = load ptr, ptr %27, align 8, !tbaa !502
  %29 = getelementptr inbounds %struct.PNode, ptr %28, i64 0, i32 2
  %30 = load i32, ptr %29, align 8, !tbaa !603
  br label %31

31:                                               ; preds = %24, %5
  %32 = phi i32 [ %30, %24 ], [ %11, %5 ]
  %33 = phi ptr [ %27, %24 ], [ %8, %5 ]
  %34 = and i32 %32, 16
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, ptr null, ptr %33
  br label %37

37:                                               ; preds = %31, %17, %13, %1
  %38 = phi ptr [ null, %1 ], [ null, %13 ], [ null, %17 ], [ %36, %31 ]
  ret ptr %38
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @commit_stack(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 6
  %4 = load i32, ptr %3, align 8, !tbaa !534
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %6, label %45

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.SNode, ptr %1, i64 0, i32 6, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !535
  %9 = load ptr, ptr %8, align 8, !tbaa !14
  %10 = getelementptr inbounds %struct.ZNode, ptr %9, i64 0, i32 1
  %11 = load i32, ptr %10, align 8, !tbaa !504
  %12 = icmp ugt i32 %11, 1
  br i1 %12, label %45, label %13

13:                                               ; preds = %6
  %14 = load ptr, ptr %9, align 8, !tbaa !502
  %15 = getelementptr inbounds %struct.PNode, ptr %14, i64 0, i32 19, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !423
  %17 = getelementptr inbounds %struct.PNode, ptr %14, i64 0, i32 19, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !499
  %19 = icmp eq ptr %16, %18
  br i1 %19, label %20, label %28

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.PNode, ptr %14, i64 0, i32 4
  %22 = load ptr, ptr %21, align 8, !tbaa !551
  %23 = icmp eq ptr %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.D_Reduction, ptr %22, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !660
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %45

28:                                               ; preds = %24, %20, %13
  %29 = icmp eq i32 %11, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.ZNode, ptr %9, i64 0, i32 1, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !505
  %33 = load ptr, ptr %32, align 8, !tbaa !14
  %34 = tail call fastcc i32 @commit_stack(ptr noundef %0, ptr noundef %33) #44, !range !564
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %30
  %37 = load ptr, ptr %7, align 8, !tbaa !535
  %38 = load ptr, ptr %37, align 8, !tbaa !14
  %39 = load ptr, ptr %38, align 8, !tbaa !502
  br label %40

40:                                               ; preds = %36, %28
  %41 = phi ptr [ %39, %36 ], [ %14, %28 ]
  %42 = tail call fastcc ptr @commit_tree(ptr noundef %0, ptr noundef %41) #44
  %43 = load ptr, ptr %7, align 8, !tbaa !535
  %44 = load ptr, ptr %43, align 8, !tbaa !14
  store ptr %42, ptr %44, align 8, !tbaa !502
  br label %45

45:                                               ; preds = %40, %30, %24, %6, %2
  %46 = phi i32 [ 0, %40 ], [ -1, %2 ], [ -2, %6 ], [ -3, %24 ], [ %34, %30 ]
  ret i32 %46
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @find_ws_before(ptr nocapture noundef readonly %0, ptr noundef readonly %1) unnamed_addr #16 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %28, label %4

4:                                                ; preds = %23, %2
  %5 = phi ptr [ %26, %23 ], [ %1, %2 ]
  %6 = load ptr, ptr %5, align 8, !tbaa !502
  %7 = getelementptr inbounds %struct.PNode, ptr %6, i64 0, i32 19, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !423
  %9 = getelementptr inbounds %struct.PNode, ptr %6, i64 0, i32 19, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !14
  %11 = icmp eq ptr %8, %10
  br i1 %11, label %12, label %31

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.ZNode, ptr %5, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !504
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.ZNode, ptr %5, i64 0, i32 1, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !505
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.SNode, ptr %19, i64 0, i32 6
  %21 = load i32, ptr %20, align 8, !tbaa !534
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.SNode, ptr %19, i64 0, i32 6, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !535
  %26 = load ptr, ptr %25, align 8, !tbaa !14
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %4, !llvm.loop !661

28:                                               ; preds = %23, %16, %12, %2
  %29 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  br label %31

31:                                               ; preds = %28, %4
  %32 = phi ptr [ %30, %28 ], [ %10, %4 ]
  ret ptr %32
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @goto_PNode(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr noundef %3) unnamed_addr #0 {
  %5 = load ptr, ptr %3, align 8, !tbaa !441
  %6 = load ptr, ptr %5, align 8, !tbaa !662
  %7 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 19
  %8 = load i32, ptr %7, align 8, !tbaa !433
  %9 = sdiv i32 %8, 8
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, ptr %6, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !60
  %13 = zext i8 %12 to i32
  %14 = and i32 %8, 7
  %15 = shl nuw nsw i32 1, %14
  %16 = and i32 %15, %13
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %237, label %18

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !426
  %21 = getelementptr inbounds %struct.D_ParserTables, ptr %20, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !663
  %23 = getelementptr inbounds %struct.D_State, ptr %5, i64 0, i32 1
  %24 = load i32, ptr %23, align 8, !tbaa !664
  %25 = sub nsw i32 %8, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i16, ptr %22, i64 %26
  %28 = load i16, ptr %27, align 2, !tbaa !61
  %29 = zext i16 %28 to i64
  %30 = add nsw i64 %29, -1
  %31 = getelementptr inbounds %struct.D_ParserTables, ptr %20, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !440
  %33 = getelementptr inbounds %struct.D_State, ptr %32, i64 %30
  %34 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 17
  %35 = load ptr, ptr %34, align 8, !tbaa !453
  %36 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 18
  %37 = load ptr, ptr %36, align 8, !tbaa !454
  %38 = tail call fastcc ptr @add_SNode(ptr noundef %0, ptr noundef %33, ptr noundef %1, ptr noundef %35, ptr noundef %37) #44
  %39 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 5
  store ptr %2, ptr %39, align 8, !tbaa !500
  %40 = icmp eq ptr %38, %3
  br i1 %40, label %49, label %41

41:                                               ; preds = %18
  %42 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 4
  %43 = load i32, ptr %42, align 8, !tbaa !531
  %44 = getelementptr inbounds %struct.SNode, ptr %3, i64 0, i32 4
  %45 = load i32, ptr %44, align 8, !tbaa !531
  %46 = add i32 %45, 1
  %47 = icmp ult i32 %43, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %41
  store i32 %46, ptr %42, align 8, !tbaa !531
  br label %49

49:                                               ; preds = %48, %41, %18
  %50 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 6
  %51 = load i32, ptr %50, align 8, !tbaa !30
  %52 = icmp ult i32 %51, 4
  br i1 %52, label %53, label %68

53:                                               ; preds = %49
  %54 = icmp eq i32 %51, 0
  br i1 %54, label %88, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 6, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !31
  %58 = zext i32 %51 to i64
  br label %62

59:                                               ; preds = %62
  %60 = add nuw nsw i64 %63, 1
  %61 = icmp eq i64 %60, %58
  br i1 %61, label %88, label %62, !llvm.loop !665

62:                                               ; preds = %59, %55
  %63 = phi i64 [ 0, %55 ], [ %60, %59 ]
  %64 = getelementptr inbounds ptr, ptr %57, i64 %63
  %65 = load ptr, ptr %64, align 8, !tbaa !14
  %66 = load ptr, ptr %65, align 8, !tbaa !502
  %67 = icmp eq ptr %66, %2
  br i1 %67, label %187, label %59

68:                                               ; preds = %49
  %69 = ptrtoint ptr %2 to i64
  %70 = trunc i64 %69 to i32
  %71 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 6, i32 2
  %72 = load ptr, ptr %71, align 8, !tbaa !31
  br label %73

73:                                               ; preds = %84, %68
  %74 = phi i32 [ %70, %68 ], [ %85, %84 ]
  %75 = phi i32 [ 0, %68 ], [ %86, %84 ]
  %76 = urem i32 %74, %51
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds ptr, ptr %72, i64 %77
  %79 = load ptr, ptr %78, align 8, !tbaa !14
  %80 = icmp eq ptr %79, null
  br i1 %80, label %88, label %81

81:                                               ; preds = %73
  %82 = load ptr, ptr %79, align 8, !tbaa !502
  %83 = icmp eq ptr %82, %2
  br i1 %83, label %187, label %84

84:                                               ; preds = %81
  %85 = add nuw i32 %76, 1
  %86 = add nuw nsw i32 %75, 1
  %87 = icmp eq i32 %86, 5
  br i1 %87, label %88, label %73, !llvm.loop !666

88:                                               ; preds = %84, %73, %59, %53
  %89 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 23
  %90 = load ptr, ptr %89, align 8, !tbaa !501
  %91 = icmp eq ptr %90, null
  br i1 %91, label %92, label %94

92:                                               ; preds = %88
  %93 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  br label %96

94:                                               ; preds = %88
  %95 = load ptr, ptr %90, align 8, !tbaa !14
  store ptr %95, ptr %89, align 8, !tbaa !501
  br label %96

96:                                               ; preds = %94, %92
  %97 = phi ptr [ %90, %94 ], [ %93, %92 ]
  store ptr %2, ptr %97, align 8, !tbaa !502
  %98 = getelementptr inbounds %struct.ZNode, ptr %97, i64 0, i32 1
  store i32 0, ptr %98, align 8, !tbaa !504
  %99 = getelementptr inbounds %struct.ZNode, ptr %97, i64 0, i32 1, i32 2
  store ptr null, ptr %99, align 8, !tbaa !505
  tail call fastcc void @set_add_znode(ptr noundef nonnull %50, ptr noundef nonnull %97) #44
  %100 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 6
  %101 = load i32, ptr %100, align 8, !tbaa !506
  %102 = add i32 %101, 1
  store i32 %102, ptr %100, align 8, !tbaa !506
  %103 = load ptr, ptr %38, align 8, !tbaa !441
  %104 = getelementptr inbounds %struct.D_State, ptr %103, i64 0, i32 2
  %105 = load i32, ptr %104, align 8, !tbaa !595
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %126, label %107

107:                                              ; preds = %119, %96
  %108 = phi ptr [ %120, %119 ], [ %103, %96 ]
  %109 = phi i64 [ %121, %119 ], [ 0, %96 ]
  %110 = getelementptr inbounds %struct.D_State, ptr %108, i64 0, i32 2, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !596
  %112 = getelementptr inbounds ptr, ptr %111, i64 %109
  %113 = load ptr, ptr %112, align 8, !tbaa !14
  %114 = load i16, ptr %113, align 8, !tbaa !540
  %115 = icmp eq i16 %114, 0
  br i1 %115, label %119, label %116

116:                                              ; preds = %107
  %117 = tail call fastcc ptr @add_Reduction(ptr noundef %0, ptr noundef nonnull %97, ptr noundef nonnull %38, ptr noundef nonnull %113) #44
  %118 = load ptr, ptr %38, align 8, !tbaa !441
  br label %119

119:                                              ; preds = %116, %107
  %120 = phi ptr [ %108, %107 ], [ %118, %116 ]
  %121 = add nuw nsw i64 %109, 1
  %122 = getelementptr inbounds %struct.D_State, ptr %120, i64 0, i32 2
  %123 = load i32, ptr %122, align 8, !tbaa !595
  %124 = zext i32 %123 to i64
  %125 = icmp ult i64 %121, %124
  br i1 %125, label %107, label %126, !llvm.loop !667

126:                                              ; preds = %119, %96
  %127 = phi ptr [ %103, %96 ], [ %120, %119 ]
  %128 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 5
  %129 = load ptr, ptr %128, align 8, !tbaa !599
  %130 = icmp eq ptr %129, null
  br i1 %130, label %131, label %187

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.D_State, ptr %127, i64 0, i32 3
  %133 = load i32, ptr %132, align 8, !tbaa !668
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %187, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 1
  %137 = getelementptr inbounds %struct.SNode, ptr %38, i64 0, i32 2
  br label %138

138:                                              ; preds = %180, %135
  %139 = phi ptr [ %127, %135 ], [ %181, %180 ]
  %140 = phi i64 [ 0, %135 ], [ %182, %180 ]
  %141 = getelementptr inbounds %struct.D_State, ptr %139, i64 0, i32 3, i32 1
  %142 = load ptr, ptr %141, align 8, !tbaa !669
  %143 = getelementptr inbounds %struct.D_ErrorRecoveryHint, ptr %142, i64 %140
  %144 = getelementptr inbounds %struct.D_ErrorRecoveryHint, ptr %142, i64 %140, i32 1
  %145 = load i16, ptr %144, align 2, !tbaa !670
  %146 = zext i16 %145 to i32
  %147 = load ptr, ptr %136, align 8, !tbaa !443
  %148 = load ptr, ptr %137, align 8, !tbaa !444
  %149 = tail call ptr @find_SNode(ptr noundef %0, i32 noundef %146, ptr noundef %147, ptr noundef %148) #44
  %150 = icmp eq ptr %149, null
  br i1 %150, label %180, label %151

151:                                              ; preds = %138
  %152 = getelementptr inbounds %struct.SNode, ptr %149, i64 0, i32 6
  %153 = load i32, ptr %152, align 8, !tbaa !534
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %180, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %struct.SNode, ptr %149, i64 0, i32 6, i32 2
  %157 = getelementptr inbounds %struct.D_ErrorRecoveryHint, ptr %142, i64 %140, i32 2
  br label %158

158:                                              ; preds = %173, %155
  %159 = phi i64 [ 0, %155 ], [ %174, %173 ]
  %160 = load ptr, ptr %156, align 8, !tbaa !535
  %161 = getelementptr inbounds ptr, ptr %160, i64 %159
  %162 = load ptr, ptr %161, align 8, !tbaa !14
  %163 = icmp eq ptr %162, null
  br i1 %163, label %173, label %164

164:                                              ; preds = %158
  %165 = load ptr, ptr %157, align 8, !tbaa !672
  %166 = tail call fastcc ptr @add_Reduction(ptr noundef %0, ptr noundef nonnull %162, ptr noundef nonnull %149, ptr noundef %165) #44
  %167 = icmp eq ptr %166, null
  br i1 %167, label %173, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %struct.Reduction, ptr %166, i64 0, i32 3
  store ptr %38, ptr %169, align 8, !tbaa !548
  %170 = load i16, ptr %143, align 8, !tbaa !673
  %171 = zext i16 %170 to i32
  %172 = getelementptr inbounds %struct.Reduction, ptr %166, i64 0, i32 4
  store i32 %171, ptr %172, align 8, !tbaa !644
  br label %173

173:                                              ; preds = %168, %164, %158
  %174 = add nuw nsw i64 %159, 1
  %175 = load i32, ptr %152, align 8, !tbaa !534
  %176 = zext i32 %175 to i64
  %177 = icmp ult i64 %174, %176
  br i1 %177, label %158, label %178, !llvm.loop !674

178:                                              ; preds = %173
  %179 = load ptr, ptr %38, align 8, !tbaa !441
  br label %180

180:                                              ; preds = %178, %151, %138
  %181 = phi ptr [ %179, %178 ], [ %139, %151 ], [ %139, %138 ]
  %182 = add nuw nsw i64 %140, 1
  %183 = getelementptr inbounds %struct.D_State, ptr %181, i64 0, i32 3
  %184 = load i32, ptr %183, align 8, !tbaa !668
  %185 = zext i32 %184 to i64
  %186 = icmp ult i64 %182, %185
  br i1 %186, label %138, label %187, !llvm.loop !675

187:                                              ; preds = %180, %131, %126, %81, %62
  %188 = phi ptr [ %97, %126 ], [ %97, %131 ], [ %97, %180 ], [ %65, %62 ], [ %79, %81 ]
  %189 = getelementptr inbounds %struct.ZNode, ptr %188, i64 0, i32 1
  %190 = load i32, ptr %189, align 8, !tbaa !504
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %struct.ZNode, ptr %188, i64 0, i32 1, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !505
  br i1 %191, label %204, label %194

194:                                              ; preds = %187
  %195 = zext i32 %190 to i64
  br label %199

196:                                              ; preds = %199
  %197 = add nuw nsw i64 %200, 1
  %198 = icmp eq i64 %197, %195
  br i1 %198, label %212, label %199, !llvm.loop !676

199:                                              ; preds = %196, %194
  %200 = phi i64 [ 0, %194 ], [ %197, %196 ]
  %201 = getelementptr inbounds ptr, ptr %193, i64 %200
  %202 = load ptr, ptr %201, align 8, !tbaa !14
  %203 = icmp eq ptr %202, %3
  br i1 %203, label %237, label %196

204:                                              ; preds = %187
  %205 = icmp eq ptr %193, null
  br i1 %205, label %206, label %215

206:                                              ; preds = %204
  %207 = getelementptr inbounds %struct.ZNode, ptr %188, i64 0, i32 1, i32 2
  %208 = getelementptr inbounds %struct.ZNode, ptr %188, i64 0, i32 1, i32 3
  store ptr %208, ptr %207, align 8, !tbaa !505
  %209 = add nuw nsw i32 %190, 1
  store i32 %209, ptr %189, align 8, !tbaa !504
  %210 = zext i32 %190 to i64
  %211 = getelementptr inbounds ptr, ptr %208, i64 %210
  store ptr %3, ptr %211, align 8, !tbaa !14
  br label %232

212:                                              ; preds = %196
  %213 = getelementptr inbounds %struct.ZNode, ptr %188, i64 0, i32 1, i32 3
  %214 = icmp eq ptr %193, %213
  br i1 %214, label %218, label %224

215:                                              ; preds = %204
  %216 = getelementptr inbounds %struct.ZNode, ptr %188, i64 0, i32 1, i32 3
  %217 = icmp eq ptr %193, %216
  br i1 %217, label %220, label %231

218:                                              ; preds = %212
  %219 = icmp ult i32 %190, 3
  br i1 %219, label %220, label %231

220:                                              ; preds = %218, %215
  %221 = add nuw nsw i32 %190, 1
  store i32 %221, ptr %189, align 8, !tbaa !504
  %222 = zext i32 %190 to i64
  %223 = getelementptr inbounds ptr, ptr %193, i64 %222
  store ptr %3, ptr %223, align 8, !tbaa !14
  br label %232

224:                                              ; preds = %212
  %225 = and i32 %190, 7
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %231, label %227

227:                                              ; preds = %224
  %228 = add i32 %190, 1
  store i32 %228, ptr %189, align 8, !tbaa !504
  %229 = zext i32 %190 to i64
  %230 = getelementptr inbounds ptr, ptr %193, i64 %229
  store ptr %3, ptr %230, align 8, !tbaa !14
  br label %232

231:                                              ; preds = %224, %218, %215
  tail call void @vec_add_internal(ptr noundef nonnull %189, ptr noundef nonnull %3) #43
  br label %232

232:                                              ; preds = %231, %227, %220, %206
  br i1 %40, label %237, label %233

233:                                              ; preds = %232
  %234 = getelementptr inbounds %struct.SNode, ptr %3, i64 0, i32 7
  %235 = load i32, ptr %234, align 8, !tbaa !482
  %236 = add i32 %235, 1
  store i32 %236, ptr %234, align 8, !tbaa !482
  br label %237

237:                                              ; preds = %233, %232, %199, %4
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc ptr @add_Reduction(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #20 {
  %5 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 13
  %6 = icmp eq ptr %1, null
  br i1 %6, label %25, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.ZNode, ptr %1, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !504
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %25, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.ZNode, ptr %1, i64 0, i32 1, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !505
  %14 = zext i32 %9 to i64
  br label %15

15:                                               ; preds = %15, %11
  %16 = phi i64 [ 0, %11 ], [ %23, %15 ]
  %17 = phi i32 [ 0, %11 ], [ %22, %15 ]
  %18 = getelementptr inbounds ptr, ptr %13, i64 %16
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.SNode, ptr %19, i64 0, i32 4
  %21 = load i32, ptr %20, align 8, !tbaa !531
  %22 = tail call i32 @llvm.umax.i32(i32 %17, i32 %21)
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp eq i64 %23, %14
  br i1 %24, label %25, label %15, !llvm.loop !677

25:                                               ; preds = %15, %7, %4
  %26 = phi i32 [ 2147483647, %4 ], [ 0, %7 ], [ %22, %15 ]
  %27 = load ptr, ptr %5, align 8, !tbaa !14
  %28 = icmp eq ptr %27, null
  br i1 %28, label %88, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.SNode, ptr %2, i64 0, i32 3
  %31 = load ptr, ptr %30, align 8, !tbaa !510
  br label %32

32:                                               ; preds = %84, %29
  %33 = phi ptr [ %27, %29 ], [ %86, %84 ]
  %34 = phi ptr [ %5, %29 ], [ %85, %84 ]
  %35 = getelementptr inbounds %struct.Reduction, ptr %33, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !508
  %37 = getelementptr inbounds %struct.SNode, ptr %36, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !510
  %39 = icmp ult ptr %31, %38
  br i1 %39, label %88, label %40

40:                                               ; preds = %32
  %41 = load ptr, ptr %33, align 8, !tbaa !546
  %42 = icmp eq ptr %41, null
  br i1 %42, label %61, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.ZNode, ptr %41, i64 0, i32 1
  %45 = load i32, ptr %44, align 8, !tbaa !504
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %61, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.ZNode, ptr %41, i64 0, i32 1, i32 2
  %49 = load ptr, ptr %48, align 8, !tbaa !505
  %50 = zext i32 %45 to i64
  br label %51

51:                                               ; preds = %51, %47
  %52 = phi i64 [ 0, %47 ], [ %59, %51 ]
  %53 = phi i32 [ 0, %47 ], [ %58, %51 ]
  %54 = getelementptr inbounds ptr, ptr %49, i64 %52
  %55 = load ptr, ptr %54, align 8, !tbaa !14
  %56 = getelementptr inbounds %struct.SNode, ptr %55, i64 0, i32 4
  %57 = load i32, ptr %56, align 8, !tbaa !531
  %58 = tail call i32 @llvm.umax.i32(i32 %53, i32 %57)
  %59 = add nuw nsw i64 %52, 1
  %60 = icmp eq i64 %59, %50
  br i1 %60, label %61, label %51, !llvm.loop !677

61:                                               ; preds = %51, %43, %40
  %62 = phi i32 [ 2147483647, %40 ], [ 0, %43 ], [ %58, %51 ]
  %63 = icmp ne ptr %31, %38
  %64 = icmp slt i32 %26, %62
  %65 = select i1 %63, i1 true, i1 %64
  br i1 %65, label %84, label %66

66:                                               ; preds = %61
  %.lcssa2 = phi i32 [ %62, %61 ]
  %.lcssa1 = phi ptr [ %33, %61 ]
  %.lcssa = phi ptr [ %34, %61 ]
  %67 = icmp eq i32 %26, %.lcssa2
  br i1 %67, label %68, label %88

68:                                               ; preds = %80, %66
  %69 = phi ptr [ %82, %80 ], [ %.lcssa1, %66 ]
  %70 = getelementptr inbounds %struct.Reduction, ptr %69, i64 0, i32 1
  %71 = load ptr, ptr %70, align 8, !tbaa !508
  %72 = icmp eq ptr %71, %2
  br i1 %72, label %73, label %80

73:                                               ; preds = %68
  %74 = load ptr, ptr %69, align 8, !tbaa !546
  %75 = icmp eq ptr %74, %1
  br i1 %75, label %76, label %80

76:                                               ; preds = %73
  %77 = getelementptr inbounds %struct.Reduction, ptr %69, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !547
  %79 = icmp eq ptr %78, %3
  br i1 %79, label %108, label %80

80:                                               ; preds = %76, %73, %68
  %81 = getelementptr inbounds %struct.Reduction, ptr %69, i64 0, i32 5
  %82 = load ptr, ptr %81, align 8, !tbaa !515
  %83 = icmp eq ptr %82, null
  br i1 %83, label %88, label %68

84:                                               ; preds = %61
  %85 = getelementptr inbounds %struct.Reduction, ptr %33, i64 0, i32 5
  %86 = load ptr, ptr %85, align 8, !tbaa !14
  %87 = icmp eq ptr %86, null
  br i1 %87, label %88, label %32, !llvm.loop !678

88:                                               ; preds = %84, %80, %66, %32, %25
  %89 = phi ptr [ %.lcssa, %66 ], [ %5, %25 ], [ %.lcssa, %80 ], [ %85, %84 ], [ %34, %32 ]
  %90 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 18
  %91 = load ptr, ptr %90, align 8, !tbaa !657
  %92 = icmp eq ptr %91, null
  br i1 %92, label %93, label %95

93:                                               ; preds = %88
  %94 = tail call noalias dereferenceable_or_null(48) ptr @malloc(i64 noundef 48) #50
  br label %98

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.Reduction, ptr %91, i64 0, i32 5
  %97 = load ptr, ptr %96, align 8, !tbaa !515
  store ptr %97, ptr %90, align 8, !tbaa !657
  br label %98

98:                                               ; preds = %95, %93
  %99 = phi ptr [ %91, %95 ], [ %94, %93 ]
  store ptr %1, ptr %99, align 8, !tbaa !546
  %100 = getelementptr inbounds %struct.Reduction, ptr %99, i64 0, i32 1
  store ptr %2, ptr %100, align 8, !tbaa !508
  %101 = getelementptr inbounds %struct.Reduction, ptr %99, i64 0, i32 3
  store ptr null, ptr %101, align 8, !tbaa !548
  %102 = getelementptr inbounds %struct.SNode, ptr %2, i64 0, i32 7
  %103 = load i32, ptr %102, align 8, !tbaa !482
  %104 = add i32 %103, 1
  store i32 %104, ptr %102, align 8, !tbaa !482
  %105 = getelementptr inbounds %struct.Reduction, ptr %99, i64 0, i32 2
  store ptr %3, ptr %105, align 8, !tbaa !547
  %106 = load ptr, ptr %89, align 8, !tbaa !14
  %107 = getelementptr inbounds %struct.Reduction, ptr %99, i64 0, i32 5
  store ptr %106, ptr %107, align 8, !tbaa !515
  store ptr %99, ptr %89, align 8, !tbaa !14
  br label %108

108:                                              ; preds = %98, %76
  %109 = phi ptr [ %99, %98 ], [ null, %76 ]
  ret ptr %109
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @commit_tree(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = alloca %struct.anon, align 8
  %4 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 9
  %5 = load i8, ptr %4, align 4, !tbaa !552
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %298

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !423
  %10 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !499
  %12 = icmp eq ptr %9, %11
  br i1 %12, label %13, label %25

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !551
  %16 = icmp eq ptr %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.D_Reduction, ptr %15, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !660
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %31

21:                                               ; preds = %17, %13
  store i8 1, ptr %4, align 4, !tbaa !552
  %22 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 13
  %23 = load ptr, ptr %22, align 8, !tbaa !589
  %24 = icmp eq ptr %23, null
  br i1 %24, label %117, label %36

25:                                               ; preds = %7
  store i8 1, ptr %4, align 4, !tbaa !552
  %26 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 13
  %27 = load ptr, ptr %26, align 8, !tbaa !589
  %28 = icmp eq ptr %27, null
  br i1 %28, label %117, label %29

29:                                               ; preds = %25
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #45
  %30 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 2
  br label %42

31:                                               ; preds = %17
  %32 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 13
  %33 = load ptr, ptr %32, align 8, !tbaa !589
  %34 = icmp eq ptr %33, null
  br i1 %34, label %117, label %35

35:                                               ; preds = %31
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #45
  br label %37

36:                                               ; preds = %21
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #45
  br label %37

37:                                               ; preds = %36, %35
  %38 = phi ptr [ %33, %35 ], [ %23, %36 ]
  %39 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 2
  %40 = tail call fastcc i32 @final_actionless(ptr noundef nonnull %1) #44, !range !479
  %41 = icmp ne i32 %40, 0
  br label %42

42:                                               ; preds = %37, %29
  %43 = phi ptr [ %39, %37 ], [ %30, %29 ]
  %44 = phi ptr [ %38, %37 ], [ %27, %29 ]
  %45 = phi i1 [ %41, %37 ], [ false, %29 ]
  %46 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 19
  %47 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 3
  store ptr %47, ptr %43, align 8, !tbaa !31
  store i32 1, ptr %3, align 8, !tbaa !30
  store ptr %46, ptr %47, align 8, !tbaa !14
  %48 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 12
  br label %49

49:                                               ; preds = %92, %42
  %50 = phi ptr [ %44, %42 ], [ %94, %92 ]
  %51 = load i32, ptr %48, align 4, !tbaa !679
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, i1 %45, i1 false
  br i1 %53, label %54, label %63

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 19, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !423
  %57 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 19, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !499
  %59 = icmp eq ptr %56, %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %54
  %61 = call fastcc i32 @final_actionless(ptr noundef nonnull %50) #44, !range !479
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %92

63:                                               ; preds = %60, %54, %49
  %64 = load ptr, ptr %43, align 8, !tbaa !31
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %72

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 19
  store ptr %47, ptr %43, align 8, !tbaa !31
  %68 = load i32, ptr %3, align 8, !tbaa !30
  %69 = add i32 %68, 1
  store i32 %69, ptr %3, align 8, !tbaa !30
  %70 = zext i32 %68 to i64
  %71 = getelementptr inbounds ptr, ptr %47, i64 %70
  store ptr %67, ptr %71, align 8, !tbaa !14
  br label %92

72:                                               ; preds = %63
  %73 = icmp eq ptr %64, %47
  %74 = load i32, ptr %3, align 8, !tbaa !30
  br i1 %73, label %75, label %82

75:                                               ; preds = %72
  %76 = icmp ult i32 %74, 3
  br i1 %76, label %77, label %90

77:                                               ; preds = %75
  %78 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 19
  %79 = add nuw nsw i32 %74, 1
  store i32 %79, ptr %3, align 8, !tbaa !30
  %80 = zext i32 %74 to i64
  %81 = getelementptr inbounds ptr, ptr %47, i64 %80
  store ptr %78, ptr %81, align 8, !tbaa !14
  br label %92

82:                                               ; preds = %72
  %83 = and i32 %74, 7
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 19
  %87 = add i32 %74, 1
  store i32 %87, ptr %3, align 8, !tbaa !30
  %88 = zext i32 %74 to i64
  %89 = getelementptr inbounds ptr, ptr %64, i64 %88
  store ptr %86, ptr %89, align 8, !tbaa !14
  br label %92

90:                                               ; preds = %82, %75
  %91 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 19
  call void @vec_add_internal(ptr noundef nonnull %3, ptr noundef nonnull %91) #43
  br label %92

92:                                               ; preds = %90, %85, %77, %66, %60
  %93 = getelementptr inbounds %struct.PNode, ptr %50, i64 0, i32 13
  %94 = load ptr, ptr %93, align 8, !tbaa !589
  %95 = icmp eq ptr %94, null
  br i1 %95, label %96, label %49, !llvm.loop !680

96:                                               ; preds = %92
  %97 = load i32, ptr %3, align 8, !tbaa !30
  %98 = icmp eq i32 %97, 1
  br i1 %98, label %99, label %102

99:                                               ; preds = %96
  %100 = load ptr, ptr %43, align 8
  %101 = load ptr, ptr %100, align 8, !tbaa !14
  br label %108

102:                                              ; preds = %96
  %103 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 4
  %104 = load ptr, ptr %103, align 8, !tbaa !468
  %105 = load ptr, ptr %43, align 8, !tbaa !31
  %106 = call ptr %104(ptr noundef nonnull %0, i32 noundef %97, ptr noundef %105) #43
  %107 = load ptr, ptr %43, align 8
  br label %108

108:                                              ; preds = %102, %99
  %109 = phi ptr [ %100, %99 ], [ %107, %102 ]
  %110 = phi ptr [ %101, %99 ], [ %106, %102 ]
  %111 = icmp ne ptr %109, null
  %112 = icmp ne ptr %109, %47
  %113 = and i1 %111, %112
  br i1 %113, label %114, label %115

114:                                              ; preds = %108
  call void @free(ptr noundef nonnull %109) #43
  br label %115

115:                                              ; preds = %114, %108
  %116 = getelementptr inbounds i8, ptr %110, i64 -152
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3) #45
  br label %117

117:                                              ; preds = %115, %31, %25, %21
  %118 = phi ptr [ %116, %115 ], [ %1, %21 ], [ %1, %31 ], [ %1, %25 ]
  %119 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %120 = load ptr, ptr %119, align 8, !tbaa !426
  %121 = getelementptr inbounds %struct.D_ParserTables, ptr %120, i64 0, i32 5
  %122 = load ptr, ptr %121, align 8, !tbaa !431
  %123 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 19
  %124 = load i32, ptr %123, align 8, !tbaa !433
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %struct.D_Symbol, ptr %122, i64 %125
  %127 = load i32, ptr %126, align 8, !tbaa !681
  %128 = icmp eq i32 %127, 2
  %129 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 11
  %130 = load i32, ptr %129, align 8, !tbaa !682
  %131 = icmp eq i32 %130, 0
  %132 = select i1 %131, i1 %128, i1 false
  %133 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 7
  %134 = load i32, ptr %133, align 8, !tbaa !420
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %275, label %136

136:                                              ; preds = %117
  %137 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 7, i32 2
  %138 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 7, i32 3
  br label %139

139:                                              ; preds = %270, %136
  %140 = phi i32 [ 0, %136 ], [ %272, %270 ]
  %141 = load ptr, ptr %137, align 8, !tbaa !421
  %142 = sext i32 %140 to i64
  %143 = getelementptr inbounds ptr, ptr %141, i64 %142
  %144 = load ptr, ptr %143, align 8, !tbaa !14
  %145 = call fastcc ptr @commit_tree(ptr noundef %0, ptr noundef %144) #44
  %146 = load ptr, ptr %137, align 8, !tbaa !421
  %147 = getelementptr inbounds ptr, ptr %146, i64 %142
  store ptr %145, ptr %147, align 8, !tbaa !14
  br i1 %132, label %148, label %270

148:                                              ; preds = %139
  %149 = load ptr, ptr %137, align 8, !tbaa !421
  %150 = getelementptr inbounds ptr, ptr %149, i64 %142
  %151 = load ptr, ptr %150, align 8, !tbaa !14
  %152 = load ptr, ptr %119, align 8, !tbaa !426
  %153 = getelementptr inbounds %struct.D_ParserTables, ptr %152, i64 0, i32 5
  %154 = load ptr, ptr %153, align 8, !tbaa !431
  %155 = getelementptr inbounds %struct.PNode, ptr %151, i64 0, i32 19
  %156 = load i32, ptr %155, align 8, !tbaa !433
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds %struct.D_Symbol, ptr %154, i64 %157
  %159 = load i32, ptr %158, align 8, !tbaa !681
  %160 = icmp eq i32 %159, 2
  br i1 %160, label %161, label %270

161:                                              ; preds = %148
  %162 = getelementptr inbounds %struct.PNode, ptr %151, i64 0, i32 7
  %163 = load i32, ptr %162, align 8, !tbaa !420
  %164 = load i32, ptr %133, align 8, !tbaa !420
  %165 = icmp eq ptr %151, %118
  br i1 %165, label %166, label %167

166:                                              ; preds = %161
  call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.12.278) #43
  br label %167

167:                                              ; preds = %166, %161
  switch i32 %163, label %173 [
    i32 0, label %168
    i32 1, label %188
  ]

168:                                              ; preds = %167
  %169 = add nsw i32 %164, -1
  %170 = icmp sgt i32 %169, %140
  br i1 %170, label %171, label %185

171:                                              ; preds = %168
  %172 = sext i32 %169 to i64
  br label %177

173:                                              ; preds = %167
  %174 = icmp sgt i32 %163, 1
  br i1 %174, label %175, label %197

175:                                              ; preds = %173
  %176 = add nsw i32 %163, -2
  br label %204

177:                                              ; preds = %177, %171
  %178 = phi i64 [ %142, %171 ], [ %180, %177 ]
  %179 = load ptr, ptr %137, align 8, !tbaa !421
  %180 = add nsw i64 %178, 1
  %181 = getelementptr inbounds ptr, ptr %179, i64 %180
  %182 = load ptr, ptr %181, align 8, !tbaa !14
  %183 = getelementptr inbounds ptr, ptr %179, i64 %178
  store ptr %182, ptr %183, align 8, !tbaa !14
  %184 = icmp eq i64 %180, %172
  br i1 %184, label %185, label %177, !llvm.loop !683

185:                                              ; preds = %177, %168
  %186 = load i32, ptr %133, align 8, !tbaa !420
  %187 = add i32 %186, -1
  store i32 %187, ptr %133, align 8, !tbaa !420
  br label %262

188:                                              ; preds = %167
  %189 = getelementptr inbounds %struct.PNode, ptr %151, i64 0, i32 7, i32 2
  %190 = load ptr, ptr %189, align 8, !tbaa !421
  %191 = load ptr, ptr %190, align 8, !tbaa !14
  %192 = getelementptr inbounds %struct.PNode, ptr %191, i64 0, i32 6
  %193 = load i32, ptr %192, align 8, !tbaa !506
  %194 = add i32 %193, 1
  store i32 %194, ptr %192, align 8, !tbaa !506
  %195 = load ptr, ptr %137, align 8, !tbaa !421
  %196 = getelementptr inbounds ptr, ptr %195, i64 %142
  store ptr %191, ptr %196, align 8, !tbaa !14
  br label %262

197:                                              ; preds = %230, %173
  %198 = add nsw i32 %140, 1
  %199 = icmp sgt i32 %164, %198
  br i1 %199, label %200, label %233

200:                                              ; preds = %197
  %201 = add i32 %163, -2
  %202 = sext i32 %164 to i64
  %203 = sext i32 %198 to i64
  br label %238

204:                                              ; preds = %230, %175
  %205 = phi i32 [ 0, %175 ], [ %231, %230 ]
  %206 = load ptr, ptr %137, align 8, !tbaa !421
  %207 = icmp eq ptr %206, null
  br i1 %207, label %208, label %213

208:                                              ; preds = %204
  store ptr %138, ptr %137, align 8, !tbaa !421
  %209 = load i32, ptr %133, align 8, !tbaa !420
  %210 = add i32 %209, 1
  store i32 %210, ptr %133, align 8, !tbaa !420
  %211 = zext i32 %209 to i64
  %212 = getelementptr inbounds ptr, ptr %138, i64 %211
  store ptr null, ptr %212, align 8, !tbaa !14
  br label %230

213:                                              ; preds = %204
  %214 = icmp eq ptr %206, %138
  %215 = load i32, ptr %133, align 8, !tbaa !420
  br i1 %214, label %216, label %222

216:                                              ; preds = %213
  %217 = icmp ult i32 %215, 3
  br i1 %217, label %218, label %229

218:                                              ; preds = %216
  %219 = add nuw nsw i32 %215, 1
  store i32 %219, ptr %133, align 8, !tbaa !420
  %220 = zext i32 %215 to i64
  %221 = getelementptr inbounds ptr, ptr %138, i64 %220
  store ptr null, ptr %221, align 8, !tbaa !14
  br label %230

222:                                              ; preds = %213
  %223 = and i32 %215, 7
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %229, label %225

225:                                              ; preds = %222
  %226 = add i32 %215, 1
  store i32 %226, ptr %133, align 8, !tbaa !420
  %227 = zext i32 %215 to i64
  %228 = getelementptr inbounds ptr, ptr %206, i64 %227
  store ptr null, ptr %228, align 8, !tbaa !14
  br label %230

229:                                              ; preds = %222, %216
  call void @vec_add_internal(ptr noundef nonnull %133, ptr noundef null) #43
  br label %230

230:                                              ; preds = %229, %225, %218, %208
  %231 = add nuw nsw i32 %205, 1
  %232 = icmp eq i32 %205, %176
  br i1 %232, label %197, label %204, !llvm.loop !684

233:                                              ; preds = %238, %197
  %234 = icmp sgt i32 %163, 0
  br i1 %234, label %235, label %262

235:                                              ; preds = %233
  %236 = getelementptr inbounds %struct.PNode, ptr %151, i64 0, i32 7, i32 2
  %237 = zext i32 %163 to i64
  br label %249

238:                                              ; preds = %238, %200
  %239 = phi i64 [ %202, %200 ], [ %240, %238 ]
  %240 = add nsw i64 %239, -1
  %241 = load ptr, ptr %137, align 8, !tbaa !421
  %242 = getelementptr inbounds ptr, ptr %241, i64 %240
  %243 = load ptr, ptr %242, align 8, !tbaa !14
  %244 = trunc i64 %239 to i32
  %245 = add i32 %201, %244
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds ptr, ptr %241, i64 %246
  store ptr %243, ptr %247, align 8, !tbaa !14
  %248 = icmp sgt i64 %240, %203
  br i1 %248, label %238, label %233, !llvm.loop !685

249:                                              ; preds = %249, %235
  %250 = phi i64 [ 0, %235 ], [ %260, %249 ]
  %251 = load ptr, ptr %236, align 8, !tbaa !421
  %252 = getelementptr inbounds ptr, ptr %251, i64 %250
  %253 = load ptr, ptr %252, align 8, !tbaa !14
  %254 = getelementptr inbounds %struct.PNode, ptr %253, i64 0, i32 6
  %255 = load i32, ptr %254, align 8, !tbaa !506
  %256 = add i32 %255, 1
  store i32 %256, ptr %254, align 8, !tbaa !506
  %257 = load ptr, ptr %137, align 8, !tbaa !421
  %258 = add nsw i64 %250, %142
  %259 = getelementptr inbounds ptr, ptr %257, i64 %258
  store ptr %253, ptr %259, align 8, !tbaa !14
  %260 = add nuw nsw i64 %250, 1
  %261 = icmp eq i64 %260, %237
  br i1 %261, label %262, label %249, !llvm.loop !686

262:                                              ; preds = %249, %233, %188, %185
  %263 = getelementptr inbounds %struct.PNode, ptr %151, i64 0, i32 6
  %264 = load i32, ptr %263, align 8, !tbaa !506
  %265 = add i32 %264, -1
  store i32 %265, ptr %263, align 8, !tbaa !506
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %268

267:                                              ; preds = %262
  call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %151) #44
  br label %268

268:                                              ; preds = %267, %262
  %269 = add nsw i32 %140, -1
  br label %270

270:                                              ; preds = %268, %148, %139
  %271 = phi i32 [ %269, %268 ], [ %140, %148 ], [ %140, %139 ]
  %272 = add nsw i32 %271, 1
  %273 = load i32, ptr %133, align 8, !tbaa !420
  %274 = icmp ult i32 %272, %273
  br i1 %274, label %139, label %275, !llvm.loop !687

275:                                              ; preds = %270, %117
  %276 = phi i32 [ 0, %117 ], [ %273, %270 ]
  %277 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 4
  %278 = load ptr, ptr %277, align 8, !tbaa !551
  %279 = icmp eq ptr %278, null
  br i1 %279, label %288, label %280

280:                                              ; preds = %275
  %281 = getelementptr inbounds %struct.D_Reduction, ptr %278, i64 0, i32 3
  %282 = load ptr, ptr %281, align 8, !tbaa !660
  %283 = icmp eq ptr %282, null
  br i1 %283, label %288, label %284

284:                                              ; preds = %280
  %285 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 7, i32 2
  %286 = load ptr, ptr %285, align 8, !tbaa !421
  %287 = call i32 %282(ptr noundef nonnull %118, ptr noundef %286, i32 noundef %276, i32 noundef 152, ptr noundef %0) #43
  br label %288

288:                                              ; preds = %284, %280, %275
  %289 = getelementptr inbounds %struct.PNode, ptr %118, i64 0, i32 9
  %290 = load i8, ptr %289, align 4, !tbaa !552
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %298, label %292

292:                                              ; preds = %288
  %293 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 9
  %294 = load i32, ptr %293, align 8, !tbaa !471
  %295 = icmp ne i32 %294, 0
  %296 = select i1 %295, i1 true, i1 %128
  br i1 %296, label %298, label %297

297:                                              ; preds = %292
  call fastcc void @free_ParseTreeBelow(ptr noundef nonnull %0, ptr noundef nonnull %118) #44
  br label %298

298:                                              ; preds = %297, %292, %288, %2
  %299 = phi ptr [ %1, %2 ], [ %118, %292 ], [ %118, %297 ], [ %118, %288 ]
  ret ptr %299
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal fastcc i32 @final_actionless(ptr nocapture noundef readonly %0) unnamed_addr #32 {
  %2 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %2, align 8, !tbaa !551
  %4 = icmp eq ptr %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.D_Reduction, ptr %3, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !660
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %26

9:                                                ; preds = %5, %1
  %10 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7
  %11 = load i32, ptr %10, align 8, !tbaa !420
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !421
  %16 = zext i32 %11 to i64
  br label %20

17:                                               ; preds = %20
  %18 = add nuw nsw i64 %21, 1
  %19 = icmp eq i64 %18, %16
  br i1 %19, label %26, label %20, !llvm.loop !688

20:                                               ; preds = %17, %13
  %21 = phi i64 [ 0, %13 ], [ %18, %17 ]
  %22 = getelementptr inbounds ptr, ptr %15, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !14
  %24 = tail call fastcc i32 @final_actionless(ptr noundef %23) #44, !range !479
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %20, %17, %9, %5
  %27 = phi i32 [ 0, %5 ], [ 1, %9 ], [ 0, %20 ], [ 1, %17 ]
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free_ParseTreeBelow(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7
  %4 = load i32, ptr %3, align 8, !tbaa !420
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 2
  br label %8

8:                                                ; preds = %20, %6
  %9 = phi i32 [ %4, %6 ], [ %21, %20 ]
  %10 = phi i64 [ 0, %6 ], [ %22, %20 ]
  %11 = load ptr, ptr %7, align 8, !tbaa !421
  %12 = getelementptr inbounds ptr, ptr %11, i64 %10
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = getelementptr inbounds %struct.PNode, ptr %13, i64 0, i32 6
  %15 = load i32, ptr %14, align 8, !tbaa !506
  %16 = add i32 %15, -1
  store i32 %16, ptr %14, align 8, !tbaa !506
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %8
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %13) #44
  %19 = load i32, ptr %3, align 8, !tbaa !420
  br label %20

20:                                               ; preds = %18, %8
  %21 = phi i32 [ %9, %8 ], [ %19, %18 ]
  %22 = add nuw nsw i64 %10, 1
  %23 = zext i32 %21 to i64
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %8, label %25, !llvm.loop !689

25:                                               ; preds = %20, %2
  %26 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !421
  %28 = icmp eq ptr %27, null
  %29 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 7, i32 3
  %30 = icmp eq ptr %27, %29
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %33, label %32

32:                                               ; preds = %25
  tail call void @free(ptr noundef nonnull %27) #43
  br label %33

33:                                               ; preds = %32, %25
  store i32 0, ptr %3, align 8, !tbaa !420
  store ptr null, ptr %26, align 8, !tbaa !421
  %34 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 13
  %35 = load ptr, ptr %34, align 8, !tbaa !589
  %36 = icmp eq ptr %35, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %33
  store ptr null, ptr %34, align 8, !tbaa !589
  tail call fastcc void @free_PNode(ptr noundef %0, ptr noundef nonnull %35) #44
  br label %38

38:                                               ; preds = %37, %33
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @build_paths_internal(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.anon, ptr %1, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !31
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !14
  %11 = getelementptr inbounds %struct.anon, ptr %10, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !31
  %13 = icmp eq ptr %12, null
  %14 = getelementptr inbounds %struct.anon, ptr %10, i64 0, i32 3
  br i1 %13, label %15, label %23

15:                                               ; preds = %5
  store ptr %14, ptr %11, align 8, !tbaa !31
  %16 = load ptr, ptr %6, align 8, !tbaa !31
  %17 = getelementptr inbounds ptr, ptr %16, i64 %8
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  %19 = load i32, ptr %18, align 8, !tbaa !30
  %20 = add i32 %19, 1
  store i32 %20, ptr %18, align 8, !tbaa !30
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds ptr, ptr %14, i64 %21
  store ptr %0, ptr %22, align 8, !tbaa !14
  br label %40

23:                                               ; preds = %5
  %24 = icmp eq ptr %12, %14
  %25 = load i32, ptr %10, align 8, !tbaa !30
  br i1 %24, label %26, label %32

26:                                               ; preds = %23
  %27 = icmp ult i32 %25, 3
  br i1 %27, label %28, label %39

28:                                               ; preds = %26
  %29 = add nuw nsw i32 %25, 1
  store i32 %29, ptr %10, align 8, !tbaa !30
  %30 = zext i32 %25 to i64
  %31 = getelementptr inbounds ptr, ptr %12, i64 %30
  store ptr %0, ptr %31, align 8, !tbaa !14
  br label %40

32:                                               ; preds = %23
  %33 = and i32 %25, 7
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = add i32 %25, 1
  store i32 %36, ptr %10, align 8, !tbaa !30
  %37 = zext i32 %25 to i64
  %38 = getelementptr inbounds ptr, ptr %12, i64 %37
  store ptr %0, ptr %38, align 8, !tbaa !14
  br label %40

39:                                               ; preds = %32, %26
  tail call void @vec_add_internal(ptr noundef nonnull %10, ptr noundef %0) #43
  br label %40

40:                                               ; preds = %39, %35, %28, %15
  %41 = icmp slt i32 %4, 2
  br i1 %41, label %150, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.ZNode, ptr %0, i64 0, i32 1
  %44 = load i32, ptr %43, align 8, !tbaa !504
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %150, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.ZNode, ptr %0, i64 0, i32 1, i32 2
  %48 = getelementptr inbounds %struct.anon, ptr %1, i64 0, i32 3
  %49 = add i32 %3, 1
  %50 = sub i32 %49, %4
  %51 = add nsw i32 %4, -1
  %52 = load ptr, ptr %47, align 8, !tbaa !505
  br label %53

53:                                               ; preds = %142, %46
  %54 = phi i32 [ %44, %46 ], [ %143, %142 ]
  %55 = phi ptr [ %52, %46 ], [ %144, %142 ]
  %56 = phi ptr [ %52, %46 ], [ %145, %142 ]
  %57 = phi i64 [ 0, %46 ], [ %147, %142 ]
  %58 = phi i32 [ %2, %46 ], [ %146, %142 ]
  %59 = getelementptr inbounds ptr, ptr %56, i64 %57
  %60 = load ptr, ptr %59, align 8, !tbaa !14
  %61 = getelementptr inbounds %struct.SNode, ptr %60, i64 0, i32 6
  %62 = load i32, ptr %61, align 8, !tbaa !534
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %142, label %64

64:                                               ; preds = %129, %53
  %65 = phi ptr [ %130, %129 ], [ %55, %53 ]
  %66 = phi ptr [ %130, %129 ], [ %56, %53 ]
  %67 = phi i64 [ %133, %129 ], [ 0, %53 ]
  %68 = phi ptr [ %135, %129 ], [ %60, %53 ]
  %69 = phi i32 [ %132, %129 ], [ 0, %53 ]
  %70 = phi i32 [ %131, %129 ], [ %58, %53 ]
  %71 = getelementptr inbounds %struct.SNode, ptr %68, i64 0, i32 6, i32 2
  %72 = load ptr, ptr %71, align 8, !tbaa !535
  %73 = getelementptr inbounds ptr, ptr %72, i64 %67
  %74 = load ptr, ptr %73, align 8, !tbaa !14
  %75 = icmp eq ptr %74, null
  br i1 %75, label %129, label %76

76:                                               ; preds = %64
  %77 = sub i32 0, %69
  %78 = zext i32 %77 to i64
  %79 = icmp eq i64 %57, %78
  br i1 %79, label %118, label %80

80:                                               ; preds = %76
  %81 = load ptr, ptr %6, align 8, !tbaa !31
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %89

83:                                               ; preds = %80
  %84 = tail call fastcc ptr @new_VecZNode(ptr noundef nonnull %1, i32 noundef %50, i32 noundef %70) #44
  store ptr %48, ptr %6, align 8, !tbaa !31
  %85 = load i32, ptr %1, align 8, !tbaa !30
  %86 = add i32 %85, 1
  store i32 %86, ptr %1, align 8, !tbaa !30
  %87 = zext i32 %85 to i64
  %88 = getelementptr inbounds ptr, ptr %48, i64 %87
  store ptr %84, ptr %88, align 8, !tbaa !14
  br label %114

89:                                               ; preds = %80
  %90 = icmp eq ptr %81, %48
  %91 = load i32, ptr %1, align 8, !tbaa !30
  br i1 %90, label %92, label %101

92:                                               ; preds = %89
  %93 = icmp ult i32 %91, 3
  br i1 %93, label %94, label %111

94:                                               ; preds = %92
  %95 = tail call fastcc ptr @new_VecZNode(ptr noundef nonnull %1, i32 noundef %50, i32 noundef %70) #44
  %96 = load ptr, ptr %6, align 8, !tbaa !31
  %97 = load i32, ptr %1, align 8, !tbaa !30
  %98 = add i32 %97, 1
  store i32 %98, ptr %1, align 8, !tbaa !30
  %99 = zext i32 %97 to i64
  %100 = getelementptr inbounds ptr, ptr %96, i64 %99
  store ptr %95, ptr %100, align 8, !tbaa !14
  br label %114

101:                                              ; preds = %89
  %102 = and i32 %91, 7
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %111, label %104

104:                                              ; preds = %101
  %105 = tail call fastcc ptr @new_VecZNode(ptr noundef nonnull %1, i32 noundef %50, i32 noundef %70) #44
  %106 = load ptr, ptr %6, align 8, !tbaa !31
  %107 = load i32, ptr %1, align 8, !tbaa !30
  %108 = add i32 %107, 1
  store i32 %108, ptr %1, align 8, !tbaa !30
  %109 = zext i32 %107 to i64
  %110 = getelementptr inbounds ptr, ptr %106, i64 %109
  store ptr %105, ptr %110, align 8, !tbaa !14
  br label %114

111:                                              ; preds = %101, %92
  %112 = tail call fastcc ptr @new_VecZNode(ptr noundef nonnull %1, i32 noundef %50, i32 noundef %70) #44
  tail call void @vec_add_internal(ptr noundef nonnull %1, ptr noundef %112) #43
  %113 = load i32, ptr %1, align 8, !tbaa !30
  br label %114

114:                                              ; preds = %111, %104, %94, %83
  %115 = phi i32 [ %113, %111 ], [ %108, %104 ], [ %98, %94 ], [ %86, %83 ]
  %116 = add i32 %115, -1
  %117 = load ptr, ptr %47, align 8, !tbaa !505
  br label %118

118:                                              ; preds = %114, %76
  %119 = phi ptr [ %117, %114 ], [ %66, %76 ]
  %120 = phi i32 [ %116, %114 ], [ %70, %76 ]
  %121 = getelementptr inbounds ptr, ptr %119, i64 %57
  %122 = load ptr, ptr %121, align 8, !tbaa !14
  %123 = getelementptr inbounds %struct.SNode, ptr %122, i64 0, i32 6, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !535
  %125 = getelementptr inbounds ptr, ptr %124, i64 %67
  %126 = load ptr, ptr %125, align 8, !tbaa !14
  tail call fastcc void @build_paths_internal(ptr noundef %126, ptr noundef %1, i32 noundef %120, i32 noundef %3, i32 noundef %51) #44
  %127 = add nsw i32 %69, 1
  %128 = load ptr, ptr %47, align 8, !tbaa !505
  br label %129

129:                                              ; preds = %118, %64
  %130 = phi ptr [ %128, %118 ], [ %65, %64 ]
  %131 = phi i32 [ %120, %118 ], [ %70, %64 ]
  %132 = phi i32 [ %127, %118 ], [ %69, %64 ]
  %133 = add nuw nsw i64 %67, 1
  %134 = getelementptr inbounds ptr, ptr %130, i64 %57
  %135 = load ptr, ptr %134, align 8, !tbaa !14
  %136 = getelementptr inbounds %struct.SNode, ptr %135, i64 0, i32 6
  %137 = load i32, ptr %136, align 8, !tbaa !534
  %138 = zext i32 %137 to i64
  %139 = icmp ult i64 %133, %138
  br i1 %139, label %64, label %140, !llvm.loop !690

140:                                              ; preds = %129
  %.lcssa1 = phi ptr [ %130, %129 ]
  %.lcssa = phi i32 [ %131, %129 ]
  %141 = load i32, ptr %43, align 8, !tbaa !504
  br label %142

142:                                              ; preds = %140, %53
  %143 = phi i32 [ %54, %53 ], [ %141, %140 ]
  %144 = phi ptr [ %55, %53 ], [ %.lcssa1, %140 ]
  %145 = phi ptr [ %56, %53 ], [ %.lcssa1, %140 ]
  %146 = phi i32 [ %58, %53 ], [ %.lcssa, %140 ]
  %147 = add nuw nsw i64 %57, 1
  %148 = zext i32 %143 to i64
  %149 = icmp ult i64 %147, %148
  br i1 %149, label %53, label %150, !llvm.loop !691

150:                                              ; preds = %142, %42, %40
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal fastcc i32 @check_assoc_priority(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2) unnamed_addr #29 {
  %4 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 2
  %5 = load i32, ptr %4, align 8, !tbaa !603
  %6 = and i32 %5, 24
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 2
  %9 = load i32, ptr %8, align 8, !tbaa !603
  br i1 %7, label %10, label %46

10:                                               ; preds = %3
  %11 = and i32 %9, 24
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %147, label %13

13:                                               ; preds = %10
  %14 = load i32, ptr %0, align 8, !tbaa !607
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %147, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 3
  %18 = load i32, ptr %17, align 4, !tbaa !561
  %19 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !608
  %21 = icmp sgt i32 %20, %18
  br i1 %21, label %31, label %22

22:                                               ; preds = %16
  %23 = icmp slt i32 %20, %18
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = and i32 %14, 2
  %26 = lshr i32 %9, 1
  %27 = and i32 %26, 1
  %28 = or i32 %27, 2
  %29 = add nuw nsw i32 %28, %25
  %30 = zext i32 %29 to i64
  br label %31

31:                                               ; preds = %24, %22, %16
  %32 = phi i64 [ 0, %16 ], [ %30, %24 ], [ 1, %22 ]
  %33 = and i32 %14, 20
  %34 = icmp eq i32 %33, 0
  %35 = icmp eq i32 %14, 9
  %36 = select i1 %35, i64 1, i64 2
  %37 = select i1 %34, i64 %36, i64 0
  %38 = and i32 %9, 20
  %39 = icmp eq i32 %38, 0
  %40 = icmp eq i32 %9, 9
  %41 = select i1 %40, i64 2, i64 3
  %42 = select i1 %39, i64 %41, i64 1
  %43 = getelementptr inbounds [4 x [3 x [6 x i32]]], ptr @child_table, i64 0, i64 %42, i64 %37, i64 %32
  %44 = load i32, ptr %43, align 4, !tbaa !15
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %148, label %147

46:                                               ; preds = %3
  %47 = icmp eq i32 %9, 0
  br i1 %47, label %78, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 3
  %50 = load i32, ptr %49, align 4, !tbaa !561
  %51 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 3
  %52 = load i32, ptr %51, align 4, !tbaa !561
  %53 = icmp sgt i32 %52, %50
  br i1 %53, label %63, label %54

54:                                               ; preds = %48
  %55 = icmp slt i32 %52, %50
  br i1 %55, label %63, label %56

56:                                               ; preds = %54
  %57 = and i32 %5, 2
  %58 = lshr i32 %9, 1
  %59 = and i32 %58, 1
  %60 = add nuw nsw i32 %57, 2
  %61 = or i32 %60, %59
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %56, %54, %48
  %64 = phi i64 [ 0, %48 ], [ %62, %56 ], [ 1, %54 ]
  %65 = and i32 %5, 20
  %66 = icmp eq i32 %65, 0
  %67 = icmp eq i32 %5, 9
  %68 = select i1 %67, i64 1, i64 2
  %69 = select i1 %66, i64 %68, i64 0
  %70 = and i32 %9, 20
  %71 = icmp eq i32 %70, 0
  %72 = icmp eq i32 %9, 9
  %73 = select i1 %72, i64 2, i64 3
  %74 = select i1 %71, i64 %73, i64 1
  %75 = getelementptr inbounds [4 x [3 x [6 x i32]]], ptr @child_table, i64 0, i64 %74, i64 %69, i64 %64
  %76 = load i32, ptr %75, align 4, !tbaa !15
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %148, label %114

78:                                               ; preds = %46
  %79 = icmp eq ptr %2, null
  br i1 %79, label %114, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 2
  %82 = load i32, ptr %81, align 8, !tbaa !603
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %114, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.PNode, ptr %2, i64 0, i32 3
  %86 = load i32, ptr %85, align 4, !tbaa !561
  %87 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 3
  %88 = load i32, ptr %87, align 4, !tbaa !561
  %89 = icmp sgt i32 %88, %86
  br i1 %89, label %99, label %90

90:                                               ; preds = %84
  %91 = icmp slt i32 %88, %86
  br i1 %91, label %99, label %92

92:                                               ; preds = %90
  %93 = and i32 %5, 2
  %94 = lshr i32 %82, 1
  %95 = and i32 %94, 1
  %96 = add nuw nsw i32 %93, 2
  %97 = or i32 %96, %95
  %98 = zext i32 %97 to i64
  br label %99

99:                                               ; preds = %92, %90, %84
  %100 = phi i64 [ 0, %84 ], [ %98, %92 ], [ 1, %90 ]
  %101 = and i32 %5, 20
  %102 = icmp eq i32 %101, 0
  %103 = icmp eq i32 %5, 9
  %104 = select i1 %103, i64 1, i64 2
  %105 = select i1 %102, i64 %104, i64 0
  %106 = and i32 %82, 20
  %107 = icmp eq i32 %106, 0
  %108 = icmp eq i32 %82, 9
  %109 = select i1 %108, i64 2, i64 3
  %110 = select i1 %107, i64 %109, i64 1
  %111 = getelementptr inbounds [4 x [3 x [6 x i32]]], ptr @child_table, i64 0, i64 %110, i64 %105, i64 %100
  %112 = load i32, ptr %111, align 4, !tbaa !15
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %148, label %114

114:                                              ; preds = %99, %80, %78, %63
  %115 = load i32, ptr %1, align 8, !tbaa !607
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %147, label %117

117:                                              ; preds = %114
  %118 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 3
  %119 = load i32, ptr %118, align 4, !tbaa !561
  %120 = getelementptr inbounds %struct.PNode, ptr %1, i64 0, i32 1
  %121 = load i32, ptr %120, align 4, !tbaa !608
  %122 = icmp sgt i32 %121, %119
  br i1 %122, label %132, label %123

123:                                              ; preds = %117
  %124 = icmp slt i32 %121, %119
  br i1 %124, label %132, label %125

125:                                              ; preds = %123
  %126 = and i32 %115, 2
  %127 = lshr i32 %5, 1
  %128 = and i32 %127, 1
  %129 = or i32 %128, 2
  %130 = add nuw nsw i32 %129, %126
  %131 = zext i32 %130 to i64
  br label %132

132:                                              ; preds = %125, %123, %117
  %133 = phi i64 [ 0, %117 ], [ %131, %125 ], [ 1, %123 ]
  %134 = and i32 %115, 20
  %135 = icmp eq i32 %134, 0
  %136 = icmp eq i32 %115, 9
  %137 = select i1 %136, i64 1, i64 2
  %138 = select i1 %135, i64 %137, i64 0
  %139 = and i32 %5, 20
  %140 = icmp eq i32 %139, 0
  %141 = icmp eq i32 %5, 9
  %142 = select i1 %141, i64 2, i64 3
  %143 = select i1 %140, i64 %142, i64 0
  %144 = getelementptr inbounds [4 x [3 x [6 x i32]]], ptr @child_table, i64 0, i64 %143, i64 %138, i64 %133
  %145 = load i32, ptr %144, align 4, !tbaa !15
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %148, label %147

147:                                              ; preds = %132, %114, %31, %13, %10
  br label %148

148:                                              ; preds = %147, %132, %99, %63, %31
  %149 = phi i32 [ 0, %147 ], [ -1, %31 ], [ -1, %63 ], [ -1, %99 ], [ -1, %132 ]
  ret i32 %149
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @new_VecZNode(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) unnamed_addr #0 {
  %4 = load i32, ptr %0, align 8, !tbaa !30
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call noalias dereferenceable_or_null(40) ptr @malloc(i64 noundef 40) #50
  br label %8

8:                                                ; preds = %6, %3
  %9 = phi ptr [ %7, %6 ], [ @path1, %3 ]
  store i32 0, ptr %9, align 8, !tbaa !30
  %10 = getelementptr inbounds %struct.anon, ptr %9, i64 0, i32 2
  store ptr null, ptr %10, align 8, !tbaa !31
  %11 = icmp sgt i32 %2, -1
  %12 = icmp sgt i32 %1, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %76

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.anon, ptr %9, i64 0, i32 3
  %16 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %17 = zext i32 %2 to i64
  %18 = zext i32 %1 to i64
  br label %19

19:                                               ; preds = %73, %14
  %20 = phi i64 [ 0, %14 ], [ %74, %73 ]
  %21 = load ptr, ptr %10, align 8, !tbaa !31
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %35

23:                                               ; preds = %19
  %24 = load ptr, ptr %16, align 8, !tbaa !31
  %25 = getelementptr inbounds ptr, ptr %24, i64 %17
  %26 = load ptr, ptr %25, align 8, !tbaa !14
  %27 = getelementptr inbounds %struct.anon, ptr %26, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !31
  %29 = getelementptr inbounds ptr, ptr %28, i64 %20
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  store ptr %15, ptr %10, align 8, !tbaa !31
  %31 = load i32, ptr %9, align 8, !tbaa !30
  %32 = add i32 %31, 1
  store i32 %32, ptr %9, align 8, !tbaa !30
  %33 = zext i32 %31 to i64
  %34 = getelementptr inbounds ptr, ptr %15, i64 %33
  store ptr %30, ptr %34, align 8, !tbaa !14
  br label %73

35:                                               ; preds = %19
  %36 = icmp eq ptr %21, %15
  %37 = load i32, ptr %9, align 8, !tbaa !30
  br i1 %36, label %38, label %51

38:                                               ; preds = %35
  %39 = icmp ult i32 %37, 3
  br i1 %39, label %40, label %65

40:                                               ; preds = %38
  %41 = load ptr, ptr %16, align 8, !tbaa !31
  %42 = getelementptr inbounds ptr, ptr %41, i64 %17
  %43 = load ptr, ptr %42, align 8, !tbaa !14
  %44 = getelementptr inbounds %struct.anon, ptr %43, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !31
  %46 = getelementptr inbounds ptr, ptr %45, i64 %20
  %47 = load ptr, ptr %46, align 8, !tbaa !14
  %48 = add nuw nsw i32 %37, 1
  store i32 %48, ptr %9, align 8, !tbaa !30
  %49 = zext i32 %37 to i64
  %50 = getelementptr inbounds ptr, ptr %15, i64 %49
  store ptr %47, ptr %50, align 8, !tbaa !14
  br label %73

51:                                               ; preds = %35
  %52 = and i32 %37, 7
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %65, label %54

54:                                               ; preds = %51
  %55 = load ptr, ptr %16, align 8, !tbaa !31
  %56 = getelementptr inbounds ptr, ptr %55, i64 %17
  %57 = load ptr, ptr %56, align 8, !tbaa !14
  %58 = getelementptr inbounds %struct.anon, ptr %57, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !31
  %60 = getelementptr inbounds ptr, ptr %59, i64 %20
  %61 = load ptr, ptr %60, align 8, !tbaa !14
  %62 = add i32 %37, 1
  store i32 %62, ptr %9, align 8, !tbaa !30
  %63 = zext i32 %37 to i64
  %64 = getelementptr inbounds ptr, ptr %21, i64 %63
  store ptr %61, ptr %64, align 8, !tbaa !14
  br label %73

65:                                               ; preds = %51, %38
  %66 = load ptr, ptr %16, align 8, !tbaa !31
  %67 = getelementptr inbounds ptr, ptr %66, i64 %17
  %68 = load ptr, ptr %67, align 8, !tbaa !14
  %69 = getelementptr inbounds %struct.anon, ptr %68, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !31
  %71 = getelementptr inbounds ptr, ptr %70, i64 %20
  %72 = load ptr, ptr %71, align 8, !tbaa !14
  tail call void @vec_add_internal(ptr noundef nonnull %9, ptr noundef %72) #43
  br label %73

73:                                               ; preds = %65, %54, %40, %23
  %74 = add nuw nsw i64 %20, 1
  %75 = icmp eq i64 %74, %18
  br i1 %75, label %76, label %19, !llvm.loop !692

76:                                               ; preds = %73, %8
  ret ptr %9
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @set_add_znode_hash(ptr noundef %0, ptr noundef %1) unnamed_addr #0 {
  %3 = load i32, ptr %0, align 8, !tbaa !30
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %28, label %5

5:                                                ; preds = %2
  %6 = load ptr, ptr %1, align 8, !tbaa !502
  %7 = ptrtoint ptr %6 to i64
  %8 = trunc i64 %7 to i32
  %9 = urem i32 %8, %3
  %10 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !31
  br label %12

12:                                               ; preds = %21, %5
  %13 = phi i32 [ %9, %5 ], [ %23, %21 ]
  %14 = phi i32 [ 0, %5 ], [ %24, %21 ]
  %15 = sext i32 %13 to i64
  %16 = getelementptr inbounds ptr, ptr %11, i64 %15
  %17 = load ptr, ptr %16, align 8, !tbaa !14
  %18 = icmp eq ptr %17, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %12
  %.lcssa = phi i64 [ %15, %12 ]
  %20 = getelementptr inbounds ptr, ptr %11, i64 %.lcssa
  store ptr %1, ptr %20, align 8, !tbaa !14
  br label %59

21:                                               ; preds = %12
  %22 = add nuw nsw i32 %13, 1
  %23 = srem i32 %22, %3
  %24 = add nuw nsw i32 %14, 1
  %25 = icmp uge i32 %23, %3
  %26 = icmp ugt i32 %14, 3
  %27 = select i1 %25, i1 true, i1 %26
  br i1 %27, label %30, label %12, !llvm.loop !693

28:                                               ; preds = %2
  %29 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 1
  store i32 2, ptr %29, align 4, !tbaa !694
  br label %35

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !694
  %33 = add i32 %32, 2
  store i32 %33, ptr %31, align 4, !tbaa !694
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %30, %28
  %36 = phi i64 [ 2, %28 ], [ %34, %30 ]
  %37 = phi ptr [ null, %28 ], [ %11, %30 ]
  %38 = getelementptr inbounds [0 x i32], ptr @prime2, i64 0, i64 %36
  %39 = load i32, ptr %38, align 4, !tbaa !15
  store i32 %39, ptr %0, align 8, !tbaa !30
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 3
  %42 = tail call ptr @calloc(i64 1, i64 %41)
  %43 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  store ptr %42, ptr %43, align 8, !tbaa !31
  %44 = icmp eq ptr %37, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %35
  br i1 %4, label %57, label %46

46:                                               ; preds = %45
  %47 = zext i32 %3 to i64
  br label %48

48:                                               ; preds = %54, %46
  %49 = phi i64 [ 0, %46 ], [ %55, %54 ]
  %50 = getelementptr inbounds ptr, ptr %37, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !14
  %52 = icmp eq ptr %51, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %48
  tail call fastcc void @set_add_znode(ptr noundef nonnull %0, ptr noundef nonnull %51) #44
  br label %54

54:                                               ; preds = %53, %48
  %55 = add nuw nsw i64 %49, 1
  %56 = icmp eq i64 %55, %47
  br i1 %56, label %57, label %48, !llvm.loop !695

57:                                               ; preds = %54, %45
  tail call void @free(ptr noundef nonnull %37) #43
  br label %58

58:                                               ; preds = %57, %35
  tail call fastcc void @set_add_znode(ptr noundef nonnull %0, ptr noundef %1) #44
  br label %59

59:                                               ; preds = %58, %19
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal fastcc i32 @check_child(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #30 {
  %6 = icmp sgt i32 %2, %0
  br i1 %6, label %16, label %7

7:                                                ; preds = %5
  %8 = icmp slt i32 %2, %0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = and i32 %3, 2
  %11 = lshr i32 %1, 1
  %12 = and i32 %11, 1
  %13 = or i32 %12, 2
  %14 = add nuw nsw i32 %13, %10
  %15 = zext i32 %14 to i64
  br label %16

16:                                               ; preds = %9, %7, %5
  %17 = phi i64 [ 0, %5 ], [ %15, %9 ], [ 1, %7 ]
  %18 = and i32 %3, 20
  %19 = icmp eq i32 %18, 0
  %20 = icmp eq i32 %3, 9
  %21 = select i1 %20, i64 1, i64 2
  %22 = select i1 %19, i64 %21, i64 0
  %23 = and i32 %1, 20
  %24 = icmp eq i32 %23, 0
  %25 = icmp eq i32 %1, 9
  %26 = select i1 %25, i64 2, i64 3
  %27 = icmp ne i32 %4, 0
  %28 = zext i1 %27 to i64
  %29 = select i1 %24, i64 %26, i64 %28
  %30 = getelementptr inbounds [4 x [3 x [6 x i32]]], ptr @child_table, i64 0, i64 %29, i64 %22, i64 %17
  %31 = load i32, ptr %30, align 4, !tbaa !15
  ret i32 %31
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @get_exp_one(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = load i32, ptr %0, align 8, !tbaa !607
  %5 = and i32 %4, 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %40

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.StackPNode, ptr %1, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !619
  %10 = getelementptr inbounds %struct.StackPNode, ptr %1, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !622
  %12 = icmp eq ptr %9, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = tail call ptr @stack_push_internal(ptr noundef nonnull %1, ptr noundef nonnull %0) #43
  br label %17

15:                                               ; preds = %7
  %16 = getelementptr inbounds ptr, ptr %9, i64 1
  store ptr %16, ptr %8, align 8, !tbaa !619
  store ptr %0, ptr %9, align 8, !tbaa !14
  br label %17

17:                                               ; preds = %15, %13
  %18 = load ptr, ptr %1, align 8, !tbaa !621
  %19 = load ptr, ptr %8, align 8, !tbaa !619
  %20 = getelementptr inbounds ptr, ptr %18, i64 1
  %21 = icmp ugt ptr %19, %20
  br i1 %21, label %22, label %75

22:                                               ; preds = %38, %17
  %23 = phi ptr [ %24, %38 ], [ %19, %17 ]
  %24 = getelementptr inbounds ptr, ptr %23, i64 -1
  %25 = load ptr, ptr %24, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.PNode, ptr %25, i64 0, i32 8
  %27 = load i32, ptr %26, align 8, !tbaa !609
  %28 = getelementptr inbounds ptr, ptr %23, i64 -2
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.PNode, ptr %29, i64 0, i32 8
  %31 = load i32, ptr %30, align 8, !tbaa !609
  %32 = icmp ugt i32 %27, %31
  br i1 %32, label %38, label %33

33:                                               ; preds = %22
  %34 = icmp eq i32 %27, %31
  %35 = icmp ugt ptr %25, %29
  %36 = and i1 %35, %34
  br i1 %36, label %38, label %37

37:                                               ; preds = %33
  store ptr %29, ptr %24, align 8, !tbaa !14
  store ptr %25, ptr %28, align 8, !tbaa !14
  br label %38

38:                                               ; preds = %37, %33, %22
  %39 = icmp ugt ptr %24, %20
  br i1 %39, label %22, label %75, !llvm.loop !696

40:                                               ; preds = %3
  %41 = getelementptr inbounds %struct.StackInt, ptr %2, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !619
  %43 = getelementptr inbounds %struct.StackInt, ptr %2, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !622
  %45 = icmp eq ptr %42, %44
  %46 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 1
  %47 = load i32, ptr %46, align 4, !tbaa !608
  br i1 %45, label %48, label %52

48:                                               ; preds = %40
  %49 = sext i32 %47 to i64
  %50 = inttoptr i64 %49 to ptr
  %51 = tail call ptr @stack_push_internal(ptr noundef nonnull %2, ptr noundef %50) #43
  br label %54

52:                                               ; preds = %40
  %53 = getelementptr inbounds i32, ptr %42, i64 1
  store ptr %53, ptr %41, align 8, !tbaa !619
  store i32 %47, ptr %42, align 4, !tbaa !15
  br label %54

54:                                               ; preds = %52, %48
  %55 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7
  %56 = load i32, ptr %55, align 8, !tbaa !420
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %75, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7, i32 2
  br label %60

60:                                               ; preds = %70, %58
  %61 = phi i32 [ %56, %58 ], [ %71, %70 ]
  %62 = phi i64 [ 0, %58 ], [ %72, %70 ]
  %63 = load ptr, ptr %59, align 8, !tbaa !421
  %64 = getelementptr inbounds ptr, ptr %63, i64 %62
  %65 = load ptr, ptr %64, align 8, !tbaa !14
  %66 = load i32, ptr %65, align 8, !tbaa !607
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %60
  tail call fastcc void @get_exp_one(ptr noundef nonnull %65, ptr noundef %1, ptr noundef %2) #44
  %69 = load i32, ptr %55, align 8, !tbaa !420
  br label %70

70:                                               ; preds = %68, %60
  %71 = phi i32 [ %61, %60 ], [ %69, %68 ]
  %72 = add nuw nsw i64 %62, 1
  %73 = zext i32 %71 to i64
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %60, label %75, !llvm.loop !697

75:                                               ; preds = %70, %54, %38, %17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @get_exp_one_down(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.StackInt, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !619
  %6 = getelementptr inbounds %struct.StackInt, ptr %2, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !622
  %8 = icmp eq ptr %5, %7
  %9 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !608
  br i1 %8, label %11, label %15

11:                                               ; preds = %3
  %12 = sext i32 %10 to i64
  %13 = inttoptr i64 %12 to ptr
  %14 = tail call ptr @stack_push_internal(ptr noundef nonnull %2, ptr noundef %13) #43
  br label %17

15:                                               ; preds = %3
  %16 = getelementptr inbounds i32, ptr %5, i64 1
  store ptr %16, ptr %4, align 8, !tbaa !619
  store i32 %10, ptr %5, align 4, !tbaa !15
  br label %17

17:                                               ; preds = %15, %11
  %18 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7
  %19 = load i32, ptr %18, align 8, !tbaa !420
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7, i32 2
  br label %23

23:                                               ; preds = %33, %21
  %24 = phi i32 [ %19, %21 ], [ %34, %33 ]
  %25 = phi i64 [ 0, %21 ], [ %35, %33 ]
  %26 = load ptr, ptr %22, align 8, !tbaa !421
  %27 = getelementptr inbounds ptr, ptr %26, i64 %25
  %28 = load ptr, ptr %27, align 8, !tbaa !14
  %29 = load i32, ptr %28, align 8, !tbaa !607
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %23
  tail call fastcc void @get_exp_one(ptr noundef nonnull %28, ptr noundef %1, ptr noundef %2) #44
  %32 = load i32, ptr %18, align 8, !tbaa !420
  br label %33

33:                                               ; preds = %31, %23
  %34 = phi i32 [ %24, %23 ], [ %32, %31 ]
  %35 = add nuw nsw i64 %25, 1
  %36 = zext i32 %34 to i64
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %23, label %38, !llvm.loop !698

38:                                               ; preds = %33, %17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @get_exp_all(ptr nocapture noundef readonly %0, ptr noundef %1) unnamed_addr #0 {
  %3 = load i32, ptr %0, align 8, !tbaa !607
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.StackInt, ptr %1, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !619
  %8 = getelementptr inbounds %struct.StackInt, ptr %1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !622
  %10 = icmp eq ptr %7, %9
  %11 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 1
  %12 = load i32, ptr %11, align 4, !tbaa !608
  br i1 %10, label %13, label %17

13:                                               ; preds = %5
  %14 = sext i32 %12 to i64
  %15 = inttoptr i64 %14 to ptr
  %16 = tail call ptr @stack_push_internal(ptr noundef nonnull %1, ptr noundef %15) #43
  br label %19

17:                                               ; preds = %5
  %18 = getelementptr inbounds i32, ptr %7, i64 1
  store ptr %18, ptr %6, align 8, !tbaa !619
  store i32 %12, ptr %7, align 4, !tbaa !15
  br label %19

19:                                               ; preds = %17, %13, %2
  %20 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7
  %21 = load i32, ptr %20, align 8, !tbaa !420
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.PNode, ptr %0, i64 0, i32 7, i32 2
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %32, %25 ]
  %27 = load ptr, ptr %24, align 8, !tbaa !421
  %28 = getelementptr inbounds ptr, ptr %27, i64 %26
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.PNode, ptr %29, i64 0, i32 14
  %31 = load ptr, ptr %30, align 8, !tbaa !590
  tail call fastcc void @get_exp_all(ptr noundef %31, ptr noundef %1) #44
  %32 = add nuw nsw i64 %26, 1
  %33 = load i32, ptr %20, align 8, !tbaa !420
  %34 = zext i32 %33 to i64
  %35 = icmp ult i64 %32, %34
  br i1 %35, label %25, label %36, !llvm.loop !699

36:                                               ; preds = %25, %19
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #9

; Function Attrs: nounwind optsize uwtable
define internal ptr @dparse(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 9
  %5 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 8
  %6 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 7
  %7 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 6
  %8 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 4
  store i32 0, ptr %8, align 8, !tbaa !658
  %9 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false)
  store ptr %1, ptr %9, align 8, !tbaa !478
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds i8, ptr %1, i64 %10
  %12 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 2
  store ptr %11, ptr %12, align 8, !tbaa !517
  %13 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !426
  %15 = getelementptr inbounds %struct.D_ParserTables, ptr %14, i64 0, i32 3
  %16 = load i32, ptr %15, align 8, !tbaa !474
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 8
  %20 = load i32, ptr %19, align 4, !tbaa !465
  %21 = tail call ptr @new_D_Parser(ptr noundef nonnull %14, i32 noundef %20) #44
  %22 = load ptr, ptr %12, align 8, !tbaa !517
  %23 = getelementptr inbounds %struct.Parser, ptr %21, i64 0, i32 2
  store ptr %22, ptr %23, align 8, !tbaa !517
  %24 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 28
  %25 = load ptr, ptr %24, align 8, !tbaa !700
  %26 = getelementptr inbounds %struct.Parser, ptr %21, i64 0, i32 28
  store ptr %25, ptr %26, align 8, !tbaa !700
  tail call fastcc void @alloc_parser_working_data(ptr noundef %21) #44
  %27 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 27
  store ptr %21, ptr %27, align 8, !tbaa !476
  %28 = getelementptr inbounds %struct.D_Parser, ptr %21, i64 0, i32 1
  store ptr @null_white_space, ptr %28, align 8, !tbaa !473
  %29 = getelementptr inbounds %struct.D_Parser, ptr %21, i64 0, i32 16
  store i32 0, ptr %29, align 4, !tbaa !469
  %30 = getelementptr inbounds %struct.D_Parser, ptr %21, i64 0, i32 17
  store i32 1, ptr %30, align 8, !tbaa !518
  br label %31

31:                                               ; preds = %18, %3
  tail call fastcc void @alloc_parser_working_data(ptr noundef nonnull %0) #44
  %32 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !701
  %34 = icmp eq ptr %33, null
  %35 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 15
  br i1 %34, label %37, label %36

36:                                               ; preds = %31
  store ptr %33, ptr %35, align 8, !tbaa !496
  br label %45

37:                                               ; preds = %31
  %38 = load ptr, ptr %35, align 8, !tbaa !496
  %39 = icmp eq ptr %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %37
  tail call void @free_D_Scope(ptr noundef nonnull %38, i32 noundef 0) #43
  br label %41

41:                                               ; preds = %40, %37
  %42 = tail call ptr @new_D_Scope(ptr noundef null) #43
  store ptr %42, ptr %35, align 8, !tbaa !496
  %43 = load i8, ptr %42, align 8
  %44 = or i8 %43, 6
  store i8 %44, ptr %42, align 8
  br label %45

45:                                               ; preds = %41, %36
  %46 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 7
  %47 = load i32, ptr %46, align 8, !tbaa !702
  %48 = tail call fastcc i32 @exhaustive_parse(ptr noundef nonnull %0, i32 noundef %47) #44, !range !479
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 16
  br i1 %49, label %51, label %115

51:                                               ; preds = %45
  %52 = load ptr, ptr %50, align 8, !tbaa !480
  %53 = getelementptr inbounds %struct.SNode, ptr %52, i64 0, i32 6
  %54 = load i32, ptr %53, align 8, !tbaa !534
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %64

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.SNode, ptr %52, i64 0, i32 6, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !535
  %59 = load ptr, ptr %58, align 8, !tbaa !14
  %60 = load ptr, ptr %59, align 8, !tbaa !502
  %61 = getelementptr inbounds %struct.PNode, ptr %60, i64 0, i32 7
  %62 = load i32, ptr %61, align 8, !tbaa !420
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %69, label %64

64:                                               ; preds = %56, %51
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.8.282) #43
  %65 = getelementptr inbounds %struct.SNode, ptr %52, i64 0, i32 6, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !535
  %67 = load ptr, ptr %66, align 8, !tbaa !14
  %68 = load ptr, ptr %67, align 8, !tbaa !502
  br label %69

69:                                               ; preds = %64, %56
  %70 = phi ptr [ %68, %64 ], [ %60, %56 ]
  %71 = getelementptr inbounds %struct.PNode, ptr %70, i64 0, i32 14
  %72 = load ptr, ptr %71, align 8, !tbaa !590
  %73 = getelementptr inbounds %struct.PNode, ptr %72, i64 0, i32 7, i32 2
  %74 = load ptr, ptr %73, align 8, !tbaa !421
  %75 = load ptr, ptr %74, align 8, !tbaa !14
  %76 = tail call fastcc ptr @commit_tree(ptr noundef nonnull %0, ptr noundef %75) #44
  %77 = load i32, ptr @verbose_level, align 4, !tbaa !15
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %98, label %79

79:                                               ; preds = %69
  %80 = load i32, ptr %8, align 8, !tbaa !658
  %81 = load i32, ptr %7, align 8, !tbaa !565
  %82 = load i32, ptr %6, align 4, !tbaa !573
  %83 = load i32, ptr %5, align 8, !tbaa !653
  %84 = load i32, ptr %4, align 4, !tbaa !618
  %85 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 10
  %86 = load i32, ptr %85, align 8, !tbaa !703
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9.283, i32 noundef %80, i32 noundef %81, i32 noundef %82, i32 noundef %83, i32 noundef %84, i32 noundef %86) #44
  %88 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 9
  %89 = load i32, ptr %88, align 8, !tbaa !471
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %79
  %92 = load i32, ptr @verbose_level, align 4, !tbaa !15
  %93 = icmp sgt i32 %92, 1
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  tail call void @xprint_paren(ptr noundef nonnull %0, ptr noundef %76) #44
  br label %96

95:                                               ; preds = %91
  tail call void @print_paren(ptr noundef %76) #44
  br label %96

96:                                               ; preds = %95, %94
  %97 = tail call i32 @putchar(i32 10)
  br label %98

98:                                               ; preds = %96, %79, %69
  %99 = getelementptr inbounds %struct.D_Parser, ptr %0, i64 0, i32 9
  %100 = load i32, ptr %99, align 8, !tbaa !471
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %107, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.PNode, ptr %76, i64 0, i32 6
  %104 = load i32, ptr %103, align 8, !tbaa !506
  %105 = add i32 %104, 1
  store i32 %105, ptr %103, align 8, !tbaa !506
  %106 = getelementptr inbounds %struct.PNode, ptr %76, i64 0, i32 19
  br label %107

107:                                              ; preds = %102, %98
  %108 = phi ptr [ %106, %102 ], [ inttoptr (i64 1 to ptr), %98 ]
  %109 = load ptr, ptr %50, align 8, !tbaa !480
  %110 = getelementptr inbounds %struct.SNode, ptr %109, i64 0, i32 7
  %111 = load i32, ptr %110, align 8, !tbaa !482
  %112 = add i32 %111, -1
  store i32 %112, ptr %110, align 8, !tbaa !482
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %107
  tail call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %109) #44
  br label %115

115:                                              ; preds = %114, %107, %45
  %116 = phi ptr [ %108, %114 ], [ %108, %107 ], [ null, %45 ]
  store ptr null, ptr %50, align 8, !tbaa !480
  tail call fastcc void @free_parser_working_data(ptr noundef nonnull %0) #44
  ret ptr %116
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal fastcc void @alloc_parser_working_data(ptr nocapture noundef %0) unnamed_addr #33 {
  %2 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11
  %3 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 1
  store i32 10, ptr %3, align 8, !tbaa !704
  %4 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @prime2, i64 0, i64 10), align 4, !tbaa !15
  %5 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11, i32 2
  store i32 %4, ptr %5, align 4, !tbaa !640
  %6 = zext i32 %4 to i64
  %7 = shl nuw nsw i64 %6, 3
  %8 = tail call ptr @calloc(i64 1, i64 %7)
  store ptr %8, ptr %2, align 8, !tbaa !639
  %9 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12
  %10 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 1
  store i32 8, ptr %10, align 8, !tbaa !705
  %11 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @prime2, i64 0, i64 8), align 4, !tbaa !15
  %12 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12, i32 2
  store i32 %11, ptr %12, align 4, !tbaa !633
  %13 = zext i32 %11 to i64
  %14 = shl nuw nsw i64 %13, 3
  %15 = tail call ptr @calloc(i64 1, i64 %14)
  store ptr %15, ptr %9, align 8, !tbaa !550
  %16 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !426
  %18 = getelementptr inbounds %struct.D_ParserTables, ptr %17, i64 0, i32 4
  %19 = load i32, ptr %18, align 4, !tbaa !706
  %20 = zext i32 %19 to i64
  %21 = mul nuw nsw i64 %20, 40
  %22 = tail call noalias ptr @malloc(i64 noundef %21) #50
  %23 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 25
  store ptr %22, ptr %23, align 8, !tbaa !569
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @free_parser_working_data(ptr noundef %0) unnamed_addr #0 {
  tail call fastcc void @free_old_nodes(ptr noundef %0) #44
  tail call fastcc void @free_old_nodes(ptr noundef %0) #44
  %2 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 11
  %3 = load ptr, ptr %2, align 8, !tbaa !639
  %4 = icmp eq ptr %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %3) #43
  br label %6

6:                                                ; preds = %5, %1
  %7 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 12
  %8 = load ptr, ptr %7, align 8, !tbaa !550
  %9 = icmp eq ptr %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %6
  tail call void @free(ptr noundef nonnull %8) #43
  br label %11

11:                                               ; preds = %10, %6
  %12 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 13
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %2, i8 0, i64 72, i1 false)
  %13 = load ptr, ptr %12, align 8, !tbaa !507
  %14 = icmp eq ptr %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 18
  %17 = load ptr, ptr %16, align 8, !tbaa !657
  br label %25

18:                                               ; preds = %38, %11
  %19 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 14
  %20 = load ptr, ptr %19, align 8, !tbaa !511
  %21 = icmp eq ptr %20, null
  br i1 %21, label %42, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 19
  %24 = load ptr, ptr %23, align 8, !tbaa !581
  br label %46

25:                                               ; preds = %38, %15
  %26 = phi ptr [ %17, %15 ], [ %29, %38 ]
  %27 = phi ptr [ %13, %15 ], [ %40, %38 ]
  %28 = getelementptr inbounds %struct.Reduction, ptr %26, i64 0, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !515
  %30 = getelementptr inbounds %struct.Reduction, ptr %27, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !508
  %32 = getelementptr inbounds %struct.SNode, ptr %31, i64 0, i32 7
  %33 = load i32, ptr %32, align 8, !tbaa !482
  %34 = add i32 %33, -1
  store i32 %34, ptr %32, align 8, !tbaa !482
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %25
  tail call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %31) #44
  %37 = load ptr, ptr %16, align 8, !tbaa !657
  br label %38

38:                                               ; preds = %36, %25
  %39 = phi ptr [ %37, %36 ], [ %26, %25 ]
  tail call void @free(ptr noundef %39) #43
  store ptr %29, ptr %16, align 8, !tbaa !657
  %40 = load ptr, ptr %12, align 8, !tbaa !507
  %41 = icmp eq ptr %40, null
  br i1 %41, label %18, label %25, !llvm.loop !707

42:                                               ; preds = %58, %18
  %43 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 18
  %44 = load ptr, ptr %43, align 8, !tbaa !657
  %45 = icmp eq ptr %44, null
  br i1 %45, label %62, label %66

46:                                               ; preds = %58, %22
  %47 = phi ptr [ %24, %22 ], [ %50, %58 ]
  %48 = phi ptr [ %20, %22 ], [ %60, %58 ]
  %49 = getelementptr inbounds %struct.Goto, ptr %47, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !557
  %51 = load ptr, ptr %48, align 8, !tbaa !512
  %52 = getelementptr inbounds %struct.SNode, ptr %51, i64 0, i32 7
  %53 = load i32, ptr %52, align 8, !tbaa !482
  %54 = add i32 %53, -1
  store i32 %54, ptr %52, align 8, !tbaa !482
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %46
  tail call fastcc void @free_SNode(ptr noundef nonnull %0, ptr noundef nonnull %51) #44
  %57 = load ptr, ptr %23, align 8, !tbaa !581
  br label %58

58:                                               ; preds = %56, %46
  %59 = phi ptr [ %57, %56 ], [ %47, %46 ]
  tail call void @free(ptr noundef %59) #43
  store ptr %50, ptr %23, align 8, !tbaa !581
  %60 = load ptr, ptr %19, align 8, !tbaa !511
  %61 = icmp eq ptr %60, null
  br i1 %61, label %42, label %46, !llvm.loop !708

62:                                               ; preds = %66, %42
  %63 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 19
  %64 = load ptr, ptr %63, align 8, !tbaa !581
  %65 = icmp eq ptr %64, null
  br i1 %65, label %71, label %75

66:                                               ; preds = %66, %42
  %67 = phi ptr [ %69, %66 ], [ %44, %42 ]
  %68 = getelementptr inbounds %struct.Reduction, ptr %67, i64 0, i32 5
  %69 = load ptr, ptr %68, align 8, !tbaa !515
  tail call void @free(ptr noundef nonnull %67) #43
  store ptr %69, ptr %43, align 8, !tbaa !657
  %70 = icmp eq ptr %69, null
  br i1 %70, label %62, label %66, !llvm.loop !709

71:                                               ; preds = %75, %62
  %72 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 21
  %73 = load ptr, ptr %72, align 8, !tbaa !591
  %74 = icmp eq ptr %73, null
  br i1 %74, label %80, label %84

75:                                               ; preds = %75, %62
  %76 = phi ptr [ %78, %75 ], [ %64, %62 ]
  %77 = getelementptr inbounds %struct.Goto, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %77, align 8, !tbaa !557
  tail call void @free(ptr noundef nonnull %76) #43
  store ptr %78, ptr %63, align 8, !tbaa !581
  %79 = icmp eq ptr %78, null
  br i1 %79, label %71, label %75, !llvm.loop !710

80:                                               ; preds = %84, %71
  %81 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 23
  %82 = load ptr, ptr %81, align 8, !tbaa !501
  %83 = icmp eq ptr %82, null
  br i1 %83, label %89, label %93

84:                                               ; preds = %84, %71
  %85 = phi ptr [ %87, %84 ], [ %73, %71 ]
  %86 = getelementptr inbounds %struct.PNode, ptr %85, i64 0, i32 11
  %87 = load ptr, ptr %86, align 8, !tbaa !592
  tail call void @free(ptr noundef nonnull %85) #43
  store ptr %87, ptr %72, align 8, !tbaa !591
  %88 = icmp eq ptr %87, null
  br i1 %88, label %80, label %84, !llvm.loop !711

89:                                               ; preds = %93, %80
  %90 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 22
  %91 = load ptr, ptr %90, align 8, !tbaa !585
  %92 = icmp eq ptr %91, null
  br i1 %92, label %97, label %103

93:                                               ; preds = %93, %80
  %94 = phi ptr [ %95, %93 ], [ %82, %80 ]
  %95 = load ptr, ptr %94, align 8, !tbaa !14
  tail call void @free(ptr noundef nonnull %94) #43
  store ptr %95, ptr %81, align 8, !tbaa !501
  %96 = icmp eq ptr %95, null
  br i1 %96, label %89, label %93, !llvm.loop !712

97:                                               ; preds = %103, %89
  %98 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24
  %99 = load i32, ptr %98, align 8, !tbaa !539
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24, i32 2
  br label %108

103:                                              ; preds = %103, %89
  %104 = phi ptr [ %106, %103 ], [ %91, %89 ]
  %105 = getelementptr inbounds %struct.SNode, ptr %104, i64 0, i32 9
  %106 = load ptr, ptr %105, align 8, !tbaa !586
  tail call void @free(ptr noundef nonnull %104) #43
  store ptr %106, ptr %90, align 8, !tbaa !585
  %107 = icmp eq ptr %106, null
  br i1 %107, label %97, label %103, !llvm.loop !713

108:                                              ; preds = %108, %101
  %109 = phi i64 [ 0, %101 ], [ %113, %108 ]
  %110 = load ptr, ptr %102, align 8, !tbaa !538
  %111 = getelementptr inbounds ptr, ptr %110, i64 %109
  %112 = load ptr, ptr %111, align 8, !tbaa !14
  tail call void @free(ptr noundef %112) #43
  %113 = add nuw nsw i64 %109, 1
  %114 = load i32, ptr %98, align 8, !tbaa !539
  %115 = zext i32 %114 to i64
  %116 = icmp ult i64 %113, %115
  br i1 %116, label %108, label %117, !llvm.loop !714

117:                                              ; preds = %108, %97
  %118 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24, i32 2
  %119 = load ptr, ptr %118, align 8, !tbaa !538
  %120 = icmp eq ptr %119, null
  %121 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 24, i32 3
  %122 = icmp eq ptr %119, %121
  %123 = select i1 %120, i1 true, i1 %122
  br i1 %123, label %125, label %124

124:                                              ; preds = %117
  tail call void @free(ptr noundef nonnull %119) #43
  br label %125

125:                                              ; preds = %124, %117
  store i32 0, ptr %98, align 8, !tbaa !539
  store ptr null, ptr %118, align 8, !tbaa !538
  %126 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 27
  %127 = load ptr, ptr %126, align 8, !tbaa !476
  %128 = icmp eq ptr %127, null
  br i1 %128, label %130, label %129

129:                                              ; preds = %125
  tail call fastcc void @free_parser_working_data(ptr noundef nonnull %127) #44
  br label %130

130:                                              ; preds = %129, %125
  %131 = getelementptr inbounds %struct.Parser, ptr %0, i64 0, i32 25
  %132 = load ptr, ptr %131, align 8, !tbaa !569
  tail call void @free(ptr noundef %132) #43
  store ptr null, ptr %131, align 8, !tbaa !569
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @scan_buffer(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) #34 {
  %4 = load ptr, ptr %0, align 8, !tbaa !477
  %5 = getelementptr inbounds %struct.d_loc_t, ptr %0, i64 0, i32 3
  %6 = getelementptr inbounds %struct.d_loc_t, ptr %0, i64 0, i32 4
  %7 = load i32, ptr %6, align 8, !tbaa !487
  %8 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 10
  %9 = load i8, ptr %8, align 2, !tbaa !715
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %212, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 7
  %13 = load ptr, ptr %12, align 8, !tbaa !572
  %14 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 11
  %15 = load ptr, ptr %14, align 8, !tbaa !716
  %16 = getelementptr inbounds i8, ptr %4, i64 1
  %17 = load i8, ptr %4, align 1, !tbaa !60
  %18 = zext i8 %17 to i32
  %19 = lshr i32 %18, 6
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.SB_uint8, ptr %13, i64 0, i32 1, i64 %20
  %22 = load ptr, ptr %21, align 8, !tbaa !14
  %23 = and i32 %18, 63
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, ptr %22, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !60
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %90, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 12
  br label %30

30:                                               ; preds = %71, %28
  %31 = phi i8 [ %26, %28 ], [ %88, %71 ]
  %32 = phi i64 [ %24, %28 ], [ %86, %71 ]
  %33 = phi i64 [ %20, %28 ], [ %82, %71 ]
  %34 = phi i8 [ %17, %28 ], [ %79, %71 ]
  %35 = phi ptr [ %16, %28 ], [ %78, %71 ]
  %36 = phi ptr [ null, %28 ], [ %77, %71 ]
  %37 = phi i32 [ %7, %28 ], [ %76, %71 ]
  %38 = phi i8 [ 0, %28 ], [ %73, %71 ]
  %39 = phi i32 [ 0, %28 ], [ %72, %71 ]
  %40 = add i8 %31, -1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds %struct.SB_uint8, ptr %13, i64 %41
  %43 = load ptr, ptr %42, align 8, !tbaa !717
  %44 = icmp eq ptr %43, null
  br i1 %44, label %71, label %45

45:                                               ; preds = %30
  store ptr %35, ptr %0, align 8, !tbaa !477
  store i32 %37, ptr %6, align 8, !tbaa !487
  %46 = load ptr, ptr %29, align 8, !tbaa !719
  %47 = getelementptr inbounds %struct.SB_trans_uint8, ptr %15, i64 %41
  %48 = getelementptr inbounds [4 x ptr], ptr %47, i64 0, i64 %33
  %49 = load ptr, ptr %48, align 8, !tbaa !14
  %50 = getelementptr inbounds i8, ptr %49, i64 %32
  %51 = load i8, ptr %50, align 1, !tbaa !60
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds ptr, ptr %46, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !14
  %55 = load ptr, ptr %54, align 8, !tbaa !14
  %56 = icmp eq ptr %55, null
  br i1 %56, label %71, label %57

57:                                               ; preds = %45
  %58 = sext i32 %39 to i64
  br label %59

59:                                               ; preds = %59, %57
  %60 = phi i64 [ %58, %57 ], [ %65, %59 ]
  %61 = phi ptr [ %54, %57 ], [ %66, %59 ]
  %62 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %60
  %63 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %60, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %63, ptr noundef nonnull align 8 dereferenceable(32) %0, i64 32, i1 false), !tbaa.struct !481
  %64 = load ptr, ptr %61, align 8, !tbaa !14
  %65 = add i64 %60, 1
  store ptr %64, ptr %62, align 8, !tbaa !570
  %66 = getelementptr inbounds ptr, ptr %61, i64 1
  %67 = load ptr, ptr %66, align 8, !tbaa !14
  %68 = icmp eq ptr %67, null
  br i1 %68, label %69, label %59, !llvm.loop !720

69:                                               ; preds = %59
  %.lcssa3 = phi i64 [ %65, %59 ]
  %70 = trunc i64 %.lcssa3 to i32
  br label %71

71:                                               ; preds = %69, %45, %30
  %72 = phi i32 [ %39, %30 ], [ %39, %45 ], [ %70, %69 ]
  %73 = phi i8 [ %38, %30 ], [ %40, %45 ], [ %40, %69 ]
  %74 = icmp eq i8 %34, 10
  %75 = zext i1 %74 to i32
  %76 = add nsw i32 %37, %75
  %77 = select i1 %74, ptr %35, ptr %36
  %78 = getelementptr inbounds i8, ptr %35, i64 1
  %79 = load i8, ptr %35, align 1, !tbaa !60
  %80 = zext i8 %79 to i32
  %81 = lshr i32 %80, 6
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.SB_uint8, ptr %13, i64 %41, i32 1, i64 %82
  %84 = load ptr, ptr %83, align 8, !tbaa !14
  %85 = and i32 %80, 63
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, ptr %84, i64 %86
  %88 = load i8, ptr %87, align 1, !tbaa !60
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %90, label %30, !llvm.loop !721

90:                                               ; preds = %71, %11
  %91 = phi i32 [ 0, %11 ], [ %72, %71 ]
  %92 = phi i8 [ 0, %11 ], [ %73, %71 ]
  %93 = phi i32 [ %7, %11 ], [ %76, %71 ]
  %94 = phi ptr [ null, %11 ], [ %77, %71 ]
  %95 = phi ptr [ %16, %11 ], [ %78, %71 ]
  %96 = icmp eq ptr %94, null
  %97 = ptrtoint ptr %95 to i64
  %98 = ptrtoint ptr %94 to i64
  %99 = sub i64 %97, %98
  %100 = trunc i64 %99 to i32
  %101 = select i1 %96, i32 -1, i32 %100
  store i32 %101, ptr %5, align 4, !tbaa !722
  %102 = zext i8 %92 to i64
  %103 = getelementptr inbounds %struct.SB_uint8, ptr %13, i64 %102
  %104 = load ptr, ptr %103, align 8, !tbaa !717
  %105 = icmp eq ptr %104, null
  br i1 %105, label %123, label %106

106:                                              ; preds = %90
  store i32 %93, ptr %6, align 8, !tbaa !487
  %107 = load ptr, ptr %104, align 8, !tbaa !14
  %108 = icmp eq ptr %107, null
  br i1 %108, label %123, label %109

109:                                              ; preds = %106
  %110 = sext i32 %91 to i64
  br label %111

111:                                              ; preds = %111, %109
  %112 = phi i64 [ %110, %109 ], [ %117, %111 ]
  %113 = phi ptr [ %104, %109 ], [ %118, %111 ]
  %114 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %112
  %115 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %112, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %115, ptr noundef nonnull align 8 dereferenceable(32) %0, i64 32, i1 false), !tbaa.struct !481
  %116 = load ptr, ptr %113, align 8, !tbaa !14
  %117 = add i64 %112, 1
  store ptr %116, ptr %114, align 8, !tbaa !570
  %118 = getelementptr inbounds ptr, ptr %113, i64 1
  %119 = load ptr, ptr %118, align 8, !tbaa !14
  %120 = icmp eq ptr %119, null
  br i1 %120, label %121, label %111, !llvm.loop !723

121:                                              ; preds = %111
  %.lcssa2 = phi i64 [ %117, %111 ]
  %122 = trunc i64 %.lcssa2 to i32
  br label %123

123:                                              ; preds = %121, %106, %90
  %124 = phi i32 [ %91, %90 ], [ %91, %106 ], [ %122, %121 ]
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %403, label %126

126:                                              ; preds = %123
  %127 = load i8, ptr %8, align 2, !tbaa !715
  %128 = icmp eq i8 %127, 2
  br i1 %128, label %129, label %403

129:                                              ; preds = %126
  %130 = add nsw i32 %124, -1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %131, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !575
  %134 = icmp sgt i32 %124, 0
  br i1 %134, label %135, label %157

135:                                              ; preds = %148, %129
  %136 = phi i32 [ %144, %148 ], [ 0, %129 ]
  %137 = phi i32 [ %149, %148 ], [ %130, %129 ]
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %138
  %140 = load ptr, ptr %139, align 8, !tbaa !570
  %141 = getelementptr inbounds %struct.D_Shift, ptr %140, i64 0, i32 1
  %142 = load i8, ptr %141, align 2, !tbaa !724
  %143 = icmp eq i8 %142, 1
  %144 = select i1 %143, i32 1, i32 %136
  %145 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %138, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !575
  %147 = icmp ult ptr %146, %133
  br i1 %147, label %151, label %148

148:                                              ; preds = %135
  %149 = add nsw i32 %137, -1
  %150 = icmp sgt i32 %137, 0
  br i1 %150, label %135, label %151, !llvm.loop !725

151:                                              ; preds = %148, %135
  %.lcssa1 = phi i32 [ %144, %148 ], [ %144, %135 ]
  %152 = phi i32 [ -1, %148 ], [ %137, %135 ]
  %153 = icmp eq i32 %.lcssa1, 0
  br i1 %153, label %157, label %154

154:                                              ; preds = %151
  br i1 %134, label %155, label %403

155:                                              ; preds = %154
  %156 = zext i32 %124 to i64
  br label %193

157:                                              ; preds = %151, %129
  %158 = phi i32 [ %152, %151 ], [ %130, %129 ]
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %160, label %182

160:                                              ; preds = %157
  %161 = zext i32 %158 to i64
  br label %162

162:                                              ; preds = %178, %160
  %163 = phi i64 [ %161, %160 ], [ %180, %178 ]
  %164 = phi i32 [ %158, %160 ], [ %179, %178 ]
  %165 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %163
  %166 = load ptr, ptr %165, align 8, !tbaa !570
  %167 = getelementptr inbounds %struct.D_Shift, ptr %166, i64 0, i32 1
  %168 = load i8, ptr %167, align 2, !tbaa !724
  %169 = icmp eq i8 %168, 1
  br i1 %169, label %178, label %170

170:                                              ; preds = %162
  %171 = zext i32 %164 to i64
  %172 = icmp eq i64 %163, %171
  br i1 %172, label %176, label %173

173:                                              ; preds = %170
  %174 = sext i32 %164 to i64
  %175 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %174
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %175, ptr noundef nonnull align 8 dereferenceable(40) %165, i64 40, i1 false), !tbaa.struct !726
  br label %176

176:                                              ; preds = %173, %170
  %177 = add nsw i32 %164, -1
  br label %178

178:                                              ; preds = %176, %162
  %179 = phi i32 [ %177, %176 ], [ %164, %162 ]
  %180 = add nsw i64 %163, -1
  %181 = icmp sgt i64 %163, 0
  br i1 %181, label %162, label %182, !llvm.loop !727

182:                                              ; preds = %178, %157
  %183 = phi i32 [ %158, %157 ], [ %179, %178 ]
  %184 = xor i32 %183, -1
  %185 = add i32 %124, %184
  %186 = icmp eq i32 %183, -1
  br i1 %186, label %403, label %187

187:                                              ; preds = %182
  %188 = add nuw nsw i32 %183, 1
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %189
  %191 = sext i32 %185 to i64
  %192 = mul nsw i64 %191, 40
  tail call void @llvm.memmove.p0.p0.i64(ptr nonnull align 8 %2, ptr nonnull align 8 %190, i64 %192, i1 false)
  br label %403

193:                                              ; preds = %208, %155
  %194 = phi i64 [ 0, %155 ], [ %210, %208 ]
  %195 = phi i32 [ 0, %155 ], [ %209, %208 ]
  %196 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %194
  %197 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %194, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !575
  %199 = icmp eq ptr %198, %133
  br i1 %199, label %200, label %208

200:                                              ; preds = %193
  %201 = zext i32 %195 to i64
  %202 = icmp eq i64 %194, %201
  br i1 %202, label %206, label %203

203:                                              ; preds = %200
  %204 = sext i32 %195 to i64
  %205 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %204
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %205, ptr noundef nonnull align 8 dereferenceable(40) %196, i64 40, i1 false), !tbaa.struct !726
  br label %206

206:                                              ; preds = %203, %200
  %207 = add nsw i32 %195, 1
  br label %208

208:                                              ; preds = %206, %193
  %209 = phi i32 [ %207, %206 ], [ %195, %193 ]
  %210 = add nuw nsw i64 %194, 1
  %211 = icmp eq i64 %210, %156
  br i1 %211, label %403, label %193, !llvm.loop !728

212:                                              ; preds = %3
  %213 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 8
  %214 = load i8, ptr %213, align 8, !tbaa !729
  switch i8 %214, label %215 [
    i8 1, label %216
    i8 2, label %269
    i8 4, label %322
  ]

215:                                              ; preds = %212
  store i32 -1, ptr %5, align 4, !tbaa !722
  br label %403

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 7
  %218 = load ptr, ptr %217, align 8, !tbaa !572
  %219 = getelementptr inbounds i8, ptr %4, i64 1
  %220 = load i8, ptr %4, align 1, !tbaa !60
  %221 = zext i8 %220 to i32
  %222 = lshr i32 %221, 6
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds %struct.SB_uint8, ptr %218, i64 0, i32 1, i64 %223
  %225 = load ptr, ptr %224, align 8, !tbaa !14
  %226 = and i32 %221, 63
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds i8, ptr %225, i64 %227
  %229 = load i8, ptr %228, align 1, !tbaa !60
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %262, label %231

231:                                              ; preds = %244, %216
  %232 = phi i8 [ %260, %244 ], [ %229, %216 ]
  %233 = phi i8 [ %251, %244 ], [ %220, %216 ]
  %234 = phi ptr [ %250, %244 ], [ %219, %216 ]
  %235 = phi i8 [ %245, %244 ], [ 0, %216 ]
  %236 = phi ptr [ %249, %244 ], [ null, %216 ]
  %237 = phi i32 [ %248, %244 ], [ %7, %216 ]
  %238 = add i8 %232, -1
  %239 = zext i8 %238 to i64
  %240 = getelementptr inbounds %struct.SB_uint8, ptr %218, i64 %239
  %241 = load ptr, ptr %240, align 8, !tbaa !717
  %242 = icmp eq ptr %241, null
  br i1 %242, label %244, label %243

243:                                              ; preds = %231
  store ptr %234, ptr %0, align 8, !tbaa !477
  store i32 %237, ptr %6, align 8, !tbaa !487
  br label %244

244:                                              ; preds = %243, %231
  %245 = phi i8 [ %238, %243 ], [ %235, %231 ]
  %246 = icmp eq i8 %233, 10
  %247 = zext i1 %246 to i32
  %248 = add nsw i32 %237, %247
  %249 = select i1 %246, ptr %234, ptr %236
  %250 = getelementptr inbounds i8, ptr %234, i64 1
  %251 = load i8, ptr %234, align 1, !tbaa !60
  %252 = zext i8 %251 to i32
  %253 = lshr i32 %252, 6
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds %struct.SB_uint8, ptr %218, i64 %239, i32 1, i64 %254
  %256 = load ptr, ptr %255, align 8, !tbaa !14
  %257 = and i32 %252, 63
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds i8, ptr %256, i64 %258
  %260 = load i8, ptr %259, align 1, !tbaa !60
  %261 = icmp eq i8 %260, 0
  br i1 %261, label %262, label %231, !llvm.loop !730

262:                                              ; preds = %244, %216
  %263 = phi i32 [ %7, %216 ], [ %248, %244 ]
  %264 = phi ptr [ null, %216 ], [ %249, %244 ]
  %265 = phi i8 [ 0, %216 ], [ %245, %244 ]
  %266 = phi ptr [ %219, %216 ], [ %250, %244 ]
  %267 = zext i8 %265 to i64
  %268 = getelementptr inbounds %struct.SB_uint8, ptr %218, i64 %267
  br label %375

269:                                              ; preds = %212
  %270 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 7
  %271 = load ptr, ptr %270, align 8, !tbaa !572
  %272 = getelementptr inbounds i8, ptr %4, i64 1
  %273 = load i8, ptr %4, align 1, !tbaa !60
  %274 = zext i8 %273 to i32
  %275 = lshr i32 %274, 6
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds %struct.SB_uint8, ptr %271, i64 0, i32 1, i64 %276
  %278 = load ptr, ptr %277, align 8, !tbaa !14
  %279 = and i32 %274, 63
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds i16, ptr %278, i64 %280
  %282 = load i16, ptr %281, align 2, !tbaa !61
  %283 = icmp eq i16 %282, 0
  br i1 %283, label %315, label %284

284:                                              ; preds = %297, %269
  %285 = phi i16 [ %313, %297 ], [ %282, %269 ]
  %286 = phi i8 [ %304, %297 ], [ %273, %269 ]
  %287 = phi ptr [ %303, %297 ], [ %272, %269 ]
  %288 = phi i16 [ %298, %297 ], [ 0, %269 ]
  %289 = phi ptr [ %302, %297 ], [ null, %269 ]
  %290 = phi i32 [ %301, %297 ], [ %7, %269 ]
  %291 = add i16 %285, -1
  %292 = zext i16 %291 to i64
  %293 = getelementptr inbounds %struct.SB_uint8, ptr %271, i64 %292
  %294 = load ptr, ptr %293, align 8, !tbaa !731
  %295 = icmp eq ptr %294, null
  br i1 %295, label %297, label %296

296:                                              ; preds = %284
  store ptr %287, ptr %0, align 8, !tbaa !477
  store i32 %290, ptr %6, align 8, !tbaa !487
  br label %297

297:                                              ; preds = %296, %284
  %298 = phi i16 [ %291, %296 ], [ %288, %284 ]
  %299 = icmp eq i8 %286, 10
  %300 = zext i1 %299 to i32
  %301 = add nsw i32 %290, %300
  %302 = select i1 %299, ptr %287, ptr %289
  %303 = getelementptr inbounds i8, ptr %287, i64 1
  %304 = load i8, ptr %287, align 1, !tbaa !60
  %305 = zext i8 %304 to i32
  %306 = lshr i32 %305, 6
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds %struct.SB_uint8, ptr %271, i64 %292, i32 1, i64 %307
  %309 = load ptr, ptr %308, align 8, !tbaa !14
  %310 = and i32 %305, 63
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds i16, ptr %309, i64 %311
  %313 = load i16, ptr %312, align 2, !tbaa !61
  %314 = icmp eq i16 %313, 0
  br i1 %314, label %315, label %284, !llvm.loop !733

315:                                              ; preds = %297, %269
  %316 = phi i32 [ %7, %269 ], [ %301, %297 ]
  %317 = phi ptr [ null, %269 ], [ %302, %297 ]
  %318 = phi i16 [ 0, %269 ], [ %298, %297 ]
  %319 = phi ptr [ %272, %269 ], [ %303, %297 ]
  %320 = zext i16 %318 to i64
  %321 = getelementptr inbounds %struct.SB_uint8, ptr %271, i64 %320
  br label %375

322:                                              ; preds = %212
  %323 = getelementptr inbounds %struct.D_State, ptr %1, i64 0, i32 7
  %324 = load ptr, ptr %323, align 8, !tbaa !572
  %325 = getelementptr inbounds i8, ptr %4, i64 1
  %326 = load i8, ptr %4, align 1, !tbaa !60
  %327 = zext i8 %326 to i32
  %328 = lshr i32 %327, 6
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds %struct.SB_uint8, ptr %324, i64 0, i32 1, i64 %329
  %331 = load ptr, ptr %330, align 8, !tbaa !14
  %332 = and i32 %327, 63
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds i32, ptr %331, i64 %333
  %335 = load i32, ptr %334, align 4, !tbaa !15
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %368, label %337

337:                                              ; preds = %350, %322
  %338 = phi i32 [ %366, %350 ], [ %335, %322 ]
  %339 = phi i8 [ %357, %350 ], [ %326, %322 ]
  %340 = phi ptr [ %356, %350 ], [ %325, %322 ]
  %341 = phi i32 [ %351, %350 ], [ 0, %322 ]
  %342 = phi ptr [ %355, %350 ], [ null, %322 ]
  %343 = phi i32 [ %354, %350 ], [ %7, %322 ]
  %344 = add i32 %338, -1
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds %struct.SB_uint8, ptr %324, i64 %345
  %347 = load ptr, ptr %346, align 8, !tbaa !734
  %348 = icmp eq ptr %347, null
  br i1 %348, label %350, label %349

349:                                              ; preds = %337
  store ptr %340, ptr %0, align 8, !tbaa !477
  store i32 %343, ptr %6, align 8, !tbaa !487
  br label %350

350:                                              ; preds = %349, %337
  %351 = phi i32 [ %344, %349 ], [ %341, %337 ]
  %352 = icmp eq i8 %339, 10
  %353 = zext i1 %352 to i32
  %354 = add nsw i32 %343, %353
  %355 = select i1 %352, ptr %340, ptr %342
  %356 = getelementptr inbounds i8, ptr %340, i64 1
  %357 = load i8, ptr %340, align 1, !tbaa !60
  %358 = zext i8 %357 to i32
  %359 = lshr i32 %358, 6
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds %struct.SB_uint8, ptr %324, i64 %345, i32 1, i64 %360
  %362 = load ptr, ptr %361, align 8, !tbaa !14
  %363 = and i32 %358, 63
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds i32, ptr %362, i64 %364
  %366 = load i32, ptr %365, align 4, !tbaa !15
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %337, !llvm.loop !736

368:                                              ; preds = %350, %322
  %369 = phi i32 [ %7, %322 ], [ %354, %350 ]
  %370 = phi ptr [ null, %322 ], [ %355, %350 ]
  %371 = phi i32 [ 0, %322 ], [ %351, %350 ]
  %372 = phi ptr [ %325, %322 ], [ %356, %350 ]
  %373 = zext i32 %371 to i64
  %374 = getelementptr inbounds %struct.SB_uint8, ptr %324, i64 %373
  br label %375

375:                                              ; preds = %368, %315, %262
  %376 = phi ptr [ %374, %368 ], [ %321, %315 ], [ %268, %262 ]
  %377 = phi i32 [ %369, %368 ], [ %316, %315 ], [ %263, %262 ]
  %378 = phi ptr [ %370, %368 ], [ %317, %315 ], [ %264, %262 ]
  %379 = phi ptr [ %372, %368 ], [ %319, %315 ], [ %266, %262 ]
  %380 = load ptr, ptr %376, align 8, !tbaa !14
  %381 = icmp eq ptr %378, null
  %382 = ptrtoint ptr %379 to i64
  %383 = ptrtoint ptr %378 to i64
  %384 = sub i64 %382, %383
  %385 = trunc i64 %384 to i32
  %386 = select i1 %381, i32 -1, i32 %385
  store i32 %386, ptr %5, align 4, !tbaa !722
  %387 = icmp eq ptr %380, null
  br i1 %387, label %403, label %388

388:                                              ; preds = %375
  store i32 %377, ptr %6, align 8, !tbaa !487
  %389 = load ptr, ptr %380, align 8, !tbaa !14
  %390 = icmp eq ptr %389, null
  br i1 %390, label %403, label %391

391:                                              ; preds = %391, %388
  %392 = phi i64 [ %397, %391 ], [ 0, %388 ]
  %393 = phi ptr [ %398, %391 ], [ %380, %388 ]
  %394 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %392
  %395 = getelementptr inbounds %struct.ShiftResult, ptr %2, i64 %392, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %395, ptr noundef nonnull align 8 dereferenceable(32) %0, i64 32, i1 false), !tbaa.struct !481
  %396 = load ptr, ptr %393, align 8, !tbaa !14
  %397 = add nuw i64 %392, 1
  store ptr %396, ptr %394, align 8, !tbaa !570
  %398 = getelementptr inbounds ptr, ptr %393, i64 1
  %399 = load ptr, ptr %398, align 8, !tbaa !14
  %400 = icmp eq ptr %399, null
  br i1 %400, label %401, label %391, !llvm.loop !737

401:                                              ; preds = %391
  %.lcssa = phi i64 [ %397, %391 ]
  %402 = trunc i64 %.lcssa to i32
  br label %403

403:                                              ; preds = %401, %388, %375, %215, %208, %187, %182, %154, %126, %123
  %404 = phi i32 [ %124, %126 ], [ 0, %123 ], [ %185, %187 ], [ %185, %182 ], [ 0, %375 ], [ 0, %215 ], [ 0, %388 ], [ 0, %154 ], [ %402, %401 ], [ %209, %208 ]
  ret i32 %404
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #6

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal ptr @new_D_Scope(ptr noundef %0) #35 {
  %2 = tail call dereferenceable_or_null(72) ptr @calloc(i64 1, i64 72)
  %3 = icmp eq ptr %0, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %1
  %5 = load i8, ptr %0, align 8
  %6 = and i8 %5, 6
  store i8 %6, ptr %2, align 8
  %7 = getelementptr inbounds %struct.D_Scope, ptr %2, i64 0, i32 4
  store ptr %0, ptr %7, align 8, !tbaa !738
  %8 = getelementptr inbounds %struct.D_Scope, ptr %2, i64 0, i32 5
  store ptr %0, ptr %8, align 8, !tbaa !740
  %9 = getelementptr inbounds %struct.D_Scope, ptr %2, i64 0, i32 6
  store ptr %0, ptr %9, align 8, !tbaa !741
  %10 = getelementptr inbounds %struct.D_Scope, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8, !tbaa !742
  %12 = getelementptr inbounds %struct.D_Scope, ptr %2, i64 0, i32 8
  store ptr %11, ptr %12, align 8, !tbaa !743
  store ptr %2, ptr %10, align 8, !tbaa !742
  br label %20

13:                                               ; preds = %1
  %14 = tail call dereferenceable_or_null(48) ptr @calloc(i64 1, i64 48)
  %15 = getelementptr inbounds %struct.D_SymHash, ptr %14, i64 0, i32 1
  store i32 6275, ptr %15, align 4, !tbaa !744
  %16 = getelementptr inbounds %struct.D_SymHash, ptr %14, i64 0, i32 2
  store i32 3137, ptr %16, align 8, !tbaa !746
  %17 = tail call dereferenceable_or_null(25096) ptr @calloc(i64 1, i64 25096)
  %18 = getelementptr inbounds %struct.D_SymHash, ptr %14, i64 0, i32 2, i32 2
  store ptr %17, ptr %18, align 8, !tbaa !747
  %19 = getelementptr inbounds %struct.D_Scope, ptr %2, i64 0, i32 2
  store ptr %14, ptr %19, align 8, !tbaa !748
  br label %20

20:                                               ; preds = %13, %4
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal void @free_D_Scope(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.D_Scope, ptr %0, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8, !tbaa !742
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %6, %2
  %7 = phi ptr [ %9, %6 ], [ %4, %2 ]
  %8 = getelementptr inbounds %struct.D_Scope, ptr %7, i64 0, i32 8
  %9 = load ptr, ptr %8, align 8, !tbaa !743
  tail call void @free_D_Scope(ptr noundef nonnull %7, i32 noundef 0) #44
  store ptr %9, ptr %3, align 8, !tbaa !742
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %6, !llvm.loop !749

11:                                               ; preds = %6, %2
  %12 = load i8, ptr %0, align 8
  %13 = and i8 %12, 1
  %14 = icmp eq i8 %13, 0
  %15 = icmp ne i32 %1, 0
  %16 = or i1 %15, %14
  br i1 %16, label %17, label %73

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.D_Scope, ptr %0, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !748
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.D_Scope, ptr %0, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !750
  %24 = icmp eq ptr %23, null
  br i1 %24, label %63, label %58

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.D_SymHash, ptr %19, i64 0, i32 2
  %27 = load i32, ptr %26, align 8, !tbaa !746
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %struct.D_SymHash, ptr %19, i64 0, i32 2, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !747
  br i1 %28, label %56, label %31

31:                                               ; preds = %50, %25
  %32 = phi i32 [ %51, %50 ], [ %27, %25 ]
  %33 = phi ptr [ %52, %50 ], [ %30, %25 ]
  %34 = phi i64 [ %53, %50 ], [ 0, %25 ]
  %35 = getelementptr inbounds ptr, ptr %33, i64 %34
  %36 = load ptr, ptr %35, align 8, !tbaa !14
  %37 = icmp eq ptr %36, null
  br i1 %37, label %50, label %38

38:                                               ; preds = %38, %31
  %39 = phi ptr [ %46, %38 ], [ %36, %31 ]
  %40 = getelementptr inbounds %struct.D_Sym, ptr %39, i64 0, i32 4
  %41 = load ptr, ptr %40, align 8, !tbaa !751
  tail call void @free(ptr noundef nonnull %39) #43
  %42 = load ptr, ptr %29, align 8, !tbaa !747
  %43 = getelementptr inbounds ptr, ptr %42, i64 %34
  store ptr %41, ptr %43, align 8, !tbaa !14
  %44 = load ptr, ptr %29, align 8, !tbaa !747
  %45 = getelementptr inbounds ptr, ptr %44, i64 %34
  %46 = load ptr, ptr %45, align 8, !tbaa !14
  %47 = icmp eq ptr %46, null
  br i1 %47, label %48, label %38, !llvm.loop !753

48:                                               ; preds = %38
  %.lcssa = phi ptr [ %44, %38 ]
  %49 = load i32, ptr %26, align 8, !tbaa !746
  br label %50

50:                                               ; preds = %48, %31
  %51 = phi i32 [ %49, %48 ], [ %32, %31 ]
  %52 = phi ptr [ %.lcssa, %48 ], [ %33, %31 ]
  %53 = add nuw nsw i64 %34, 1
  %54 = zext i32 %51 to i64
  %55 = icmp ult i64 %53, %54
  br i1 %55, label %31, label %56, !llvm.loop !754

56:                                               ; preds = %50, %25
  %57 = phi ptr [ %30, %25 ], [ %52, %50 ]
  tail call void @free(ptr noundef %57) #43
  tail call void @free(ptr noundef nonnull %19) #43
  br label %63

58:                                               ; preds = %58, %21
  %59 = phi ptr [ %61, %58 ], [ %23, %21 ]
  %60 = getelementptr inbounds %struct.D_Sym, ptr %59, i64 0, i32 4
  %61 = load ptr, ptr %60, align 8, !tbaa !751
  tail call void @free(ptr noundef nonnull %59) #43
  store ptr %61, ptr %22, align 8, !tbaa !750
  %62 = icmp eq ptr %61, null
  br i1 %62, label %63, label %58, !llvm.loop !755

63:                                               ; preds = %58, %56, %21
  %64 = getelementptr inbounds %struct.D_Scope, ptr %0, i64 0, i32 3
  %65 = load ptr, ptr %64, align 8, !tbaa !756
  %66 = icmp eq ptr %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %67, %63
  %68 = phi ptr [ %70, %67 ], [ %65, %63 ]
  %69 = getelementptr inbounds %struct.D_Sym, ptr %68, i64 0, i32 4
  %70 = load ptr, ptr %69, align 8, !tbaa !751
  tail call void @free(ptr noundef nonnull %68) #43
  store ptr %70, ptr %64, align 8, !tbaa !756
  %71 = icmp eq ptr %70, null
  br i1 %71, label %72, label %67, !llvm.loop !757

72:                                               ; preds = %67, %63
  tail call void @free(ptr noundef nonnull %0) #43
  br label %73

73:                                               ; preds = %72, %11
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @d_dup_pathname_str(ptr noundef %0) #20 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %3, label %5

3:                                                ; preds = %1
  %4 = tail call noalias dereferenceable_or_null(1) ptr @strdup(ptr noundef nonnull @.str.292) #43
  br label %31

5:                                                ; preds = %1
  %6 = load i8, ptr %0, align 1, !tbaa !60
  %7 = icmp eq i8 %6, 34
  br i1 %7, label %8, label %23

8:                                                ; preds = %8, %5
  %9 = phi ptr [ %10, %8 ], [ %0, %5 ]
  %10 = getelementptr inbounds i8, ptr %9, i64 1
  %11 = load i8, ptr %10, align 1, !tbaa !60
  switch i8 %11, label %8 [
    i8 0, label %12
    i8 34, label %12
  ], !llvm.loop !758

12:                                               ; preds = %8, %8
  %.lcssa = phi ptr [ %10, %8 ], [ %10, %8 ]
  %13 = getelementptr inbounds i8, ptr %0, i64 1
  %14 = ptrtoint ptr %.lcssa to i64
  %15 = ptrtoint ptr %13 to i64
  %16 = sub i64 %14, %15
  %17 = shl i64 %16, 32
  %18 = add i64 %17, 4294967296
  %19 = ashr exact i64 %18, 32
  %20 = tail call noalias ptr @malloc(i64 noundef %19) #50
  %21 = ashr exact i64 %17, 32
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %20, ptr nonnull align 1 %13, i64 %21, i1 false)
  %22 = getelementptr inbounds i8, ptr %20, i64 %21
  store i8 0, ptr %22, align 1, !tbaa !60
  br label %31

23:                                               ; preds = %5
  %24 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #48
  %25 = shl i64 %24, 32
  %26 = add i64 %25, 4294967296
  %27 = ashr exact i64 %26, 32
  %28 = tail call noalias ptr @malloc(i64 noundef %27) #50
  %29 = ashr exact i64 %25, 32
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %28, ptr nonnull align 1 %0, i64 %29, i1 false)
  %30 = getelementptr inbounds i8, ptr %28, i64 %29
  store i8 0, ptr %30, align 1, !tbaa !60
  br label %31

31:                                               ; preds = %23, %12, %3
  %32 = phi ptr [ %20, %12 ], [ %28, %23 ], [ %4, %3 ]
  ret ptr %32
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal noalias ptr @dup_str(ptr noundef %0, ptr noundef %1) #36 {
  %3 = ptrtoint ptr %1 to i64
  %4 = ptrtoint ptr %0 to i64
  %5 = sub i64 %3, %4
  %6 = shl i64 %5, 32
  %7 = add i64 %6, 4294967296
  %8 = ashr exact i64 %7, 32
  %9 = tail call noalias ptr @malloc(i64 noundef %8) #50
  %10 = ashr exact i64 %6, 32
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %9, ptr align 1 %0, i64 %10, i1 false)
  %11 = getelementptr inbounds i8, ptr %9, i64 %10
  store i8 0, ptr %11, align 1, !tbaa !60
  ret ptr %9
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @strhashl(ptr nocapture noundef readonly %0, i32 noundef %1) #16 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %21

4:                                                ; preds = %4, %2
  %5 = phi i32 [ %18, %4 ], [ 0, %2 ]
  %6 = phi ptr [ %19, %4 ], [ %0, %2 ]
  %7 = phi i32 [ %17, %4 ], [ 0, %2 ]
  %8 = shl i32 %7, 4
  %9 = load i8, ptr %6, align 1, !tbaa !60
  %10 = sext i8 %9 to i32
  %11 = add i32 %8, %10
  %12 = and i32 %11, -268435456
  %13 = icmp eq i32 %12, 0
  %14 = lshr exact i32 %12, 24
  %15 = and i32 %11, 268435455
  %16 = xor i32 %15, %14
  %17 = select i1 %13, i32 %11, i32 %16
  %18 = add nuw nsw i32 %5, 1
  %19 = getelementptr inbounds i8, ptr %6, i64 1
  %20 = icmp eq i32 %18, %1
  br i1 %20, label %21, label %4, !llvm.loop !759

21:                                               ; preds = %4, %2
  %22 = phi i32 [ 0, %2 ], [ %17, %4 ]
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @buf_read(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef %2) #0 {
  %4 = alloca %struct.stat, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %4) #45
  store ptr null, ptr %1, align 8, !tbaa !14
  store i32 0, ptr %2, align 4, !tbaa !15
  %5 = tail call i32 (ptr, i32, ...) @open(ptr noundef %0, i32 noundef 0) #43
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %4, i8 0, i64 144, i1 false)
  %8 = call i32 @fstat(i32 noundef %5, ptr noundef nonnull %4) #43
  %9 = getelementptr inbounds %struct.stat, ptr %4, i64 0, i32 8
  %10 = load i64, ptr %9, align 8, !tbaa !760
  %11 = trunc i64 %10 to i32
  store i32 %11, ptr %2, align 4, !tbaa !15
  %12 = shl i64 %10, 32
  %13 = add i64 %12, 8589934592
  %14 = ashr exact i64 %13, 32
  %15 = tail call noalias ptr @malloc(i64 noundef %14) #50
  store ptr %15, ptr %1, align 8, !tbaa !14
  %16 = ashr exact i64 %12, 32
  %17 = getelementptr inbounds i8, ptr %15, i64 %16
  store i8 0, ptr %17, align 1, !tbaa !60
  %18 = add i64 %12, 4294967296
  %19 = ashr exact i64 %18, 32
  %20 = getelementptr inbounds i8, ptr %15, i64 %19
  store i8 0, ptr %20, align 1, !tbaa !60
  %21 = tail call i64 @read(i32 noundef %5, ptr noundef %15, i64 noundef %16) #43
  %22 = tail call i32 @close(i32 noundef %5) #43
  %23 = load i32, ptr %2, align 4, !tbaa !15
  br label %24

24:                                               ; preds = %7, %3
  %25 = phi i32 [ %23, %7 ], [ -1, %3 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %4) #45
  ret i32 %25
}

; Function Attrs: nofree optsize
declare noundef i32 @open(ptr nocapture noundef readonly, i32 noundef, ...) local_unnamed_addr #24

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fstat(i32 noundef, ptr nocapture noundef) local_unnamed_addr #3

; Function Attrs: nofree optsize
declare noundef i64 @read(i32 noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #24

; Function Attrs: optsize
declare i32 @close(i32 noundef) local_unnamed_addr #37

; Function Attrs: nounwind optsize uwtable
define internal ptr @sbuf_read(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #45
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #45
  %4 = call i32 @buf_read(ptr noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %3) #44
  %5 = icmp slt i32 %4, 0
  %6 = load ptr, ptr %2, align 8
  %7 = select i1 %5, ptr null, ptr %6
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #45
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #45
  ret ptr %7
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @d_fail(ptr noundef %0, ...) #25 {
  %2 = alloca [256 x i8], align 16
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %2) #45
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #45
  call void @llvm.va_start(ptr nonnull %3)
  %4 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef nonnull dereferenceable(1) %2, i64 noundef 255, ptr noundef nonnull @.str.1.301, ptr noundef %0) #43
  %5 = load ptr, ptr @stderr, align 8, !tbaa !14
  %6 = call i32 @vfprintf(ptr noundef %5, ptr noundef nonnull %2, ptr noundef nonnull %3) #46
  call void @llvm.va_end(ptr nonnull %3)
  call void @exit(i32 noundef 1) #52
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #38

; Function Attrs: nofree nounwind optsize
declare noundef i32 @snprintf(ptr noalias nocapture noundef writeonly, i64 noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nofree nounwind optsize
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #38

; Function Attrs: nounwind optsize uwtable
define internal void @vec_add_internal(ptr noundef %0, ptr noundef %1) #0 {
  %3 = load i32, ptr %0, align 8, !tbaa !763
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 3
  %7 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  store ptr %6, ptr %7, align 8, !tbaa !765
  br label %41

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !765
  %11 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 3
  %12 = icmp eq ptr %10, %11
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = tail call noalias dereferenceable_or_null(64) ptr @malloc(i64 noundef 64) #50
  store ptr %14, ptr %9, align 8, !tbaa !765
  %15 = zext i32 %3 to i64
  %16 = shl nuw nsw i64 %15, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr nonnull align 8 %10, i64 %16, i1 false)
  br label %41

17:                                               ; preds = %8
  %18 = and i32 %3, 7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %41

20:                                               ; preds = %17
  %21 = ashr i32 %3, 3
  %22 = and i32 %3, 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %31

24:                                               ; preds = %24, %20
  %25 = phi i32 [ %28, %24 ], [ 4, %20 ]
  %26 = phi i32 [ %27, %24 ], [ %21, %20 ]
  %27 = ashr i32 %26, 1
  %28 = add nuw nsw i32 %25, 1
  %29 = and i32 %26, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %24, label %31, !llvm.loop !766

31:                                               ; preds = %24, %20
  %32 = phi i32 [ %21, %20 ], [ %27, %24 ]
  %33 = phi i32 [ 4, %20 ], [ %28, %24 ]
  %34 = icmp ugt i32 %32, 1
  br i1 %34, label %41, label %35

35:                                               ; preds = %31
  %36 = shl nuw i32 1, %33
  %37 = sext i32 %36 to i64
  %38 = shl nsw i64 %37, 3
  %39 = tail call ptr @realloc(ptr noundef %10, i64 noundef %38) #51
  store ptr %39, ptr %9, align 8, !tbaa !765
  %40 = load i32, ptr %0, align 8, !tbaa !763
  br label %41

41:                                               ; preds = %35, %31, %17, %13, %5
  %42 = phi i32 [ %40, %35 ], [ %3, %31 ], [ %3, %13 ], [ %3, %17 ], [ 0, %5 ]
  %43 = phi ptr [ %39, %35 ], [ %10, %31 ], [ %14, %13 ], [ %10, %17 ], [ %6, %5 ]
  %44 = add i32 %42, 1
  store i32 %44, ptr %0, align 8, !tbaa !763
  %45 = zext i32 %42 to i64
  %46 = getelementptr inbounds ptr, ptr %43, i64 %45
  store ptr %1, ptr %46, align 8, !tbaa !14
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn uwtable
define internal ptr @stack_push_internal(ptr noundef %0, ptr noundef returned %1) #23 {
  %3 = getelementptr inbounds %struct.StackPNode, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !767
  %5 = load ptr, ptr %0, align 8, !tbaa !769
  %6 = ptrtoint ptr %4 to i64
  %7 = ptrtoint ptr %5 to i64
  %8 = sub i64 %6, %7
  %9 = getelementptr inbounds %struct.StackPNode, ptr %0, i64 0, i32 3
  %10 = icmp eq ptr %5, %9
  %11 = shl i64 %8, 30
  %12 = ashr i64 %11, 32
  %13 = and i64 %12, -2
  %14 = shl nsw i64 %13, 3
  br i1 %10, label %15, label %20

15:                                               ; preds = %2
  %16 = tail call noalias ptr @malloc(i64 noundef %14) #50
  store ptr %16, ptr %3, align 8, !tbaa !767
  %17 = shl i64 %8, 29
  %18 = ashr exact i64 %17, 29
  %19 = and i64 %18, -8
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %16, ptr align 8 %5, i64 %19, i1 false)
  br label %23

20:                                               ; preds = %2
  %21 = tail call ptr @realloc(ptr noundef %5, i64 noundef %14) #51
  %22 = shl i64 %8, 29
  br label %23

23:                                               ; preds = %20, %15
  %24 = phi i64 [ %22, %20 ], [ %17, %15 ]
  %25 = phi ptr [ %21, %20 ], [ %16, %15 ]
  store ptr %25, ptr %0, align 8, !tbaa !769
  %26 = getelementptr inbounds %struct.StackPNode, ptr %0, i64 0, i32 1
  %27 = ashr i64 %24, 32
  %28 = getelementptr inbounds ptr, ptr %25, i64 %27
  %29 = getelementptr inbounds ptr, ptr %25, i64 %13
  store ptr %29, ptr %26, align 8, !tbaa !770
  %30 = getelementptr inbounds ptr, ptr %28, i64 1
  store ptr %30, ptr %3, align 8, !tbaa !767
  store ptr %1, ptr %28, align 8, !tbaa !14
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @set_add(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.anon, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #45
  %4 = load i32, ptr %0, align 8, !tbaa !763
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %34, label %6

6:                                                ; preds = %2
  %7 = ptrtoint ptr %1 to i64
  %8 = sext i32 %4 to i64
  %9 = urem i64 %7, %8
  %10 = trunc i64 %9 to i32
  %11 = icmp ugt i32 %4, %10
  %12 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !765
  br i1 %11, label %14, label %37

14:                                               ; preds = %26, %6
  %15 = phi i32 [ %29, %26 ], [ %10, %6 ]
  %16 = phi i32 [ %30, %26 ], [ 0, %6 ]
  %17 = freeze i32 %15
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds ptr, ptr %13, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !14
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %14
  %.lcssa = phi i64 [ %18, %14 ]
  %23 = getelementptr inbounds ptr, ptr %13, i64 %.lcssa
  store ptr %1, ptr %23, align 8, !tbaa !14
  br label %57

24:                                               ; preds = %14
  %25 = icmp eq ptr %20, %1
  br i1 %25, label %57, label %26

26:                                               ; preds = %24
  %27 = add i32 %17, 1
  %28 = icmp eq i32 %27, %4
  %29 = select i1 %28, i32 0, i32 %27
  %30 = add nuw nsw i32 %16, 1
  %31 = icmp uge i32 %29, %4
  %32 = icmp ugt i32 %16, 3
  %33 = select i1 %31, i1 true, i1 %32
  br i1 %33, label %37, label %14, !llvm.loop !771

34:                                               ; preds = %2
  %35 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 2
  store ptr null, ptr %35, align 8, !tbaa !765
  %36 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 1
  store i32 2, ptr %36, align 4, !tbaa !772
  br label %43

37:                                               ; preds = %26, %6
  %38 = getelementptr inbounds %struct.anon, ptr %3, i64 0, i32 2
  store ptr %13, ptr %38, align 8, !tbaa !765
  store i32 %4, ptr %3, align 8, !tbaa !763
  %39 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 1
  %40 = load i32, ptr %39, align 4, !tbaa !772
  %41 = add i32 %40, 1
  store i32 %41, ptr %39, align 4, !tbaa !772
  %42 = zext i32 %41 to i64
  br label %43

43:                                               ; preds = %37, %34
  %44 = phi ptr [ %13, %37 ], [ null, %34 ]
  %45 = phi i64 [ %42, %37 ], [ 2, %34 ]
  %46 = getelementptr inbounds [29 x i32], ptr @prime2, i64 0, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !15
  store i32 %47, ptr %0, align 8, !tbaa !763
  %48 = zext i32 %47 to i64
  %49 = shl nuw nsw i64 %48, 3
  %50 = tail call ptr @calloc(i64 1, i64 %49)
  %51 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  store ptr %50, ptr %51, align 8, !tbaa !765
  %52 = icmp eq ptr %44, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %43
  %54 = call i32 @set_union(ptr noundef nonnull %0, ptr noundef nonnull %3) #44, !range !479
  tail call void @free(ptr noundef nonnull %44) #43
  br label %55

55:                                               ; preds = %53, %43
  %56 = tail call i32 @set_add(ptr noundef nonnull %0, ptr noundef %1) #44
  br label %57

57:                                               ; preds = %55, %24, %22
  %58 = phi i32 [ %56, %55 ], [ 1, %22 ], [ 0, %24 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3) #45
  ret i32 %58
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @set_union(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load i32, ptr %1, align 8, !tbaa !763
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %28, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.anon, ptr %1, i64 0, i32 2
  br label %7

7:                                                ; preds = %22, %5
  %8 = phi i32 [ %3, %5 ], [ %23, %22 ]
  %9 = phi i64 [ 0, %5 ], [ %25, %22 ]
  %10 = phi i32 [ 0, %5 ], [ %24, %22 ]
  %11 = load ptr, ptr %6, align 8, !tbaa !765
  %12 = getelementptr inbounds ptr, ptr %11, i64 %9
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = icmp eq ptr %13, null
  br i1 %14, label %22, label %15

15:                                               ; preds = %7
  %16 = tail call i32 @set_add(ptr noundef %0, ptr noundef nonnull %13) #44
  %17 = icmp ne i32 %16, 0
  %18 = icmp ne i32 %10, 0
  %19 = select i1 %17, i1 true, i1 %18
  %20 = zext i1 %19 to i32
  %21 = load i32, ptr %1, align 8, !tbaa !763
  br label %22

22:                                               ; preds = %15, %7
  %23 = phi i32 [ %21, %15 ], [ %8, %7 ]
  %24 = phi i32 [ %20, %15 ], [ %10, %7 ]
  %25 = add nuw nsw i64 %9, 1
  %26 = zext i32 %23 to i64
  %27 = icmp ult i64 %25, %26
  br i1 %27, label %7, label %28, !llvm.loop !773

28:                                               ; preds = %22, %2
  %29 = phi i32 [ 0, %2 ], [ %24, %22 ]
  ret i32 %29
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @set_add_fn(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %5 = getelementptr inbounds %struct.hash_fns_t, ptr %2, i64 0, i32 1
  %6 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 1
  br label %7

7:                                                ; preds = %72, %3
  %8 = load ptr, ptr %2, align 8, !tbaa !774
  %9 = tail call i32 %8(ptr noundef %1, ptr noundef nonnull %2) #43
  %10 = load i32, ptr %0, align 8, !tbaa !763
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %46, label %12

12:                                               ; preds = %7
  %13 = urem i32 %9, %10
  br label %14

14:                                               ; preds = %33, %12
  %15 = phi i32 [ %37, %33 ], [ %13, %12 ]
  %16 = phi i32 [ %35, %33 ], [ 0, %12 ]
  %17 = freeze i32 %15
  %18 = load ptr, ptr %4, align 8, !tbaa !765
  %19 = zext i32 %17 to i64
  %20 = getelementptr inbounds ptr, ptr %18, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !14
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %14
  %.lcssa3 = phi ptr [ %18, %14 ]
  %.lcssa = phi i64 [ %19, %14 ]
  %24 = getelementptr inbounds ptr, ptr %.lcssa3, i64 %.lcssa
  store ptr %1, ptr %24, align 8, !tbaa !14
  br label %73

25:                                               ; preds = %14
  %26 = load ptr, ptr %5, align 8, !tbaa !776
  %27 = tail call i32 %26(ptr noundef nonnull %21, ptr noundef %1, ptr noundef nonnull %2) #43
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %.lcssa1 = phi i64 [ %19, %25 ]
  %30 = load ptr, ptr %4, align 8, !tbaa !765
  %31 = getelementptr inbounds ptr, ptr %30, i64 %.lcssa1
  %32 = load ptr, ptr %31, align 8, !tbaa !14
  br label %73

33:                                               ; preds = %25
  %34 = add i32 %17, 1
  %35 = add nuw nsw i32 %16, 1
  %36 = icmp eq i32 %34, %10
  %37 = select i1 %36, i32 0, i32 %34
  %38 = load i32, ptr %0, align 8, !tbaa !763
  %39 = icmp uge i32 %37, %38
  %40 = icmp ugt i32 %16, 3
  %41 = select i1 %39, i1 true, i1 %40
  br i1 %41, label %42, label %14, !llvm.loop !777

42:                                               ; preds = %33
  %.lcssa6 = phi i32 [ %38, %33 ]
  %43 = load ptr, ptr %4, align 8, !tbaa !765
  %44 = load i32, ptr %6, align 4, !tbaa !772
  %45 = add i32 %44, 1
  br label %46

46:                                               ; preds = %42, %7
  %47 = phi i32 [ %45, %42 ], [ 2, %7 ]
  %48 = phi ptr [ %43, %42 ], [ null, %7 ]
  %49 = phi i32 [ %.lcssa6, %42 ], [ undef, %7 ]
  store i32 %47, ptr %6, align 4, !tbaa !772
  %50 = zext i32 %47 to i64
  %51 = getelementptr inbounds [29 x i32], ptr @prime2, i64 0, i64 %50
  %52 = load i32, ptr %51, align 4, !tbaa !15
  store i32 %52, ptr %0, align 8, !tbaa !763
  %53 = zext i32 %52 to i64
  %54 = shl nuw nsw i64 %53, 3
  %55 = tail call ptr @calloc(i64 1, i64 %54)
  store ptr %55, ptr %4, align 8, !tbaa !765
  %56 = icmp eq ptr %48, null
  br i1 %56, label %72, label %57

57:                                               ; preds = %46
  %58 = icmp eq i32 %49, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %57
  %60 = zext i32 %49 to i64
  br label %61

61:                                               ; preds = %68, %59
  %62 = phi i64 [ 0, %59 ], [ %69, %68 ]
  %63 = getelementptr inbounds ptr, ptr %48, i64 %62
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = icmp eq ptr %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %61
  %67 = tail call ptr @set_add_fn(ptr noundef nonnull %0, ptr noundef nonnull %64, ptr noundef nonnull %2) #44
  br label %68

68:                                               ; preds = %66, %61
  %69 = add nuw nsw i64 %62, 1
  %70 = icmp eq i64 %69, %60
  br i1 %70, label %71, label %61, !llvm.loop !778

71:                                               ; preds = %68, %57
  tail call void @free(ptr noundef nonnull %48) #43
  br label %72

72:                                               ; preds = %71, %46
  br label %7

73:                                               ; preds = %29, %23
  %74 = phi ptr [ %1, %23 ], [ %32, %29 ]
  ret ptr %74
}

; Function Attrs: nounwind optsize uwtable
define internal void @set_to_vec(ptr noundef %0) #0 {
  %2 = alloca %struct.anon, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %2) #45
  %3 = load i32, ptr %0, align 8, !tbaa !763
  store i32 %3, ptr %2, align 8, !tbaa !763
  %4 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !765
  %6 = getelementptr inbounds %struct.anon, ptr %2, i64 0, i32 2
  store ptr %5, ptr %6, align 8, !tbaa !765
  %7 = getelementptr inbounds %struct.anon, ptr %0, i64 0, i32 3
  %8 = icmp eq ptr %5, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.anon, ptr %2, i64 0, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %10, ptr noundef nonnull align 8 dereferenceable(24) %5, i64 24, i1 false)
  store ptr %10, ptr %6, align 8, !tbaa !765
  br label %11

11:                                               ; preds = %9, %1
  %12 = phi ptr [ %10, %9 ], [ %5, %1 ]
  store i32 0, ptr %0, align 8, !tbaa !763
  store ptr null, ptr %4, align 8, !tbaa !765
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %30, label %14

14:                                               ; preds = %23, %11
  %15 = phi i32 [ %24, %23 ], [ %3, %11 ]
  %16 = phi i64 [ %25, %23 ], [ 0, %11 ]
  %17 = load ptr, ptr %6, align 8, !tbaa !765
  %18 = getelementptr inbounds ptr, ptr %17, i64 %16
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = icmp eq ptr %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %14
  call void @vec_add_internal(ptr noundef nonnull %0, ptr noundef nonnull %19) #44
  %22 = load i32, ptr %2, align 8, !tbaa !763
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %15, %14 ], [ %22, %21 ]
  %25 = add nuw nsw i64 %16, 1
  %26 = zext i32 %24 to i64
  %27 = icmp ult i64 %25, %26
  br i1 %27, label %14, label %28, !llvm.loop !779

28:                                               ; preds = %23
  %29 = load ptr, ptr %6, align 8, !tbaa !765
  br label %30

30:                                               ; preds = %28, %11
  %31 = phi ptr [ %29, %28 ], [ %12, %11 ]
  call void @free(ptr noundef %31) #43
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %2) #45
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @escape_string(ptr nocapture noundef readonly %0) #20 {
  %2 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #48
  %3 = shl i64 %2, 2
  %4 = add i64 %3, 4
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #50
  %6 = load i8, ptr %0, align 1, !tbaa !60
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %63, label %8

8:                                                ; preds = %58, %1
  %9 = phi i8 [ %61, %58 ], [ %6, %1 ]
  %10 = phi ptr [ %60, %58 ], [ %0, %1 ]
  %11 = phi ptr [ %59, %58 ], [ %5, %1 ]
  %12 = sext i8 %9 to i32
  switch i32 %12, label %37 [
    i32 8, label %13
    i32 12, label %16
    i32 10, label %19
    i32 13, label %22
    i32 9, label %25
    i32 11, label %28
    i32 7, label %31
    i32 92, label %34
    i32 34, label %34
  ]

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %15 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 98, ptr %14, align 1, !tbaa !60
  br label %58

16:                                               ; preds = %8
  %17 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %18 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 102, ptr %17, align 1, !tbaa !60
  br label %58

19:                                               ; preds = %8
  %20 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %21 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 110, ptr %20, align 1, !tbaa !60
  br label %58

22:                                               ; preds = %8
  %23 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %24 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 114, ptr %23, align 1, !tbaa !60
  br label %58

25:                                               ; preds = %8
  %26 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %27 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 116, ptr %26, align 1, !tbaa !60
  br label %58

28:                                               ; preds = %8
  %29 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %30 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 118, ptr %29, align 1, !tbaa !60
  br label %58

31:                                               ; preds = %8
  %32 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %33 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 97, ptr %32, align 1, !tbaa !60
  br label %58

34:                                               ; preds = %8, %8
  %35 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 92, ptr %11, align 1, !tbaa !60
  %36 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 %9, ptr %35, align 1, !tbaa !60
  br label %58

37:                                               ; preds = %8
  %38 = tail call ptr @__ctype_b_loc() #49
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = sext i8 %9 to i64
  %41 = getelementptr inbounds i16, ptr %39, i64 %40
  %42 = load i16, ptr %41, align 2, !tbaa !61
  %43 = and i16 %42, 16384
  %44 = icmp eq i16 %43, 0
  %45 = getelementptr inbounds i8, ptr %11, i64 1
  br i1 %44, label %47, label %46

46:                                               ; preds = %37
  store i8 %9, ptr %11, align 1, !tbaa !60
  br label %58

47:                                               ; preds = %37
  store i8 92, ptr %11, align 1, !tbaa !60
  %48 = getelementptr inbounds i8, ptr %11, i64 2
  store i8 120, ptr %45, align 1, !tbaa !60
  %49 = ashr i8 %9, 4
  %50 = add nsw i8 %49, 48
  %51 = getelementptr inbounds i8, ptr %11, i64 3
  store i8 %50, ptr %48, align 1, !tbaa !60
  %52 = and i8 %9, 15
  %53 = icmp ugt i8 %52, 9
  %54 = add nuw nsw i8 %52, 55
  %55 = or i8 %52, 48
  %56 = select i1 %53, i8 %54, i8 %55
  %57 = getelementptr inbounds i8, ptr %11, i64 4
  store i8 %56, ptr %51, align 1, !tbaa !60
  br label %58

58:                                               ; preds = %47, %46, %34, %31, %28, %25, %22, %19, %16, %13
  %59 = phi ptr [ %45, %46 ], [ %57, %47 ], [ %36, %34 ], [ %33, %31 ], [ %30, %28 ], [ %27, %25 ], [ %24, %22 ], [ %21, %19 ], [ %18, %16 ], [ %15, %13 ]
  %60 = getelementptr inbounds i8, ptr %10, i64 1
  %61 = load i8, ptr %60, align 1, !tbaa !60
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %8, !llvm.loop !780

63:                                               ; preds = %58, %1
  %64 = phi ptr [ %5, %1 ], [ %59, %58 ]
  store i8 0, ptr %64, align 1, !tbaa !60
  ret ptr %5
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @d_version(ptr nocapture noundef writeonly %0) #20 {
  %2 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %0, ptr noundef nonnull dereferenceable(1) @.str.324, i32 noundef 1, i32 noundef 2) #43
  %3 = sext i32 %2 to i64
  %4 = getelementptr inbounds i8, ptr %0, i64 %3
  %5 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) @.str.1.325, i32 noundef 5725) #43
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_7_10_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = load ptr, ptr %1, align 8, !tbaa !14
  %11 = getelementptr inbounds i8, ptr %10, i64 %6
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !784
  %14 = getelementptr inbounds i8, ptr %13, i64 1
  %15 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !785
  %17 = getelementptr inbounds i8, ptr %16, i64 -1
  %18 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 1, i32 4
  %19 = load i32, ptr %18, align 8, !tbaa !786
  tail call void @add_global_code(ptr noundef %9, ptr noundef nonnull %14, ptr noundef nonnull %17, i32 noundef %19) #43
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_7_11_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = getelementptr inbounds ptr, ptr %1, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !14
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds i8, ptr %7, i64 %8
  %10 = getelementptr inbounds %struct.D_ParseNode.127, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !784
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %9, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !785
  %14 = tail call ptr @dup_str(ptr noundef %11, ptr noundef %13) #43
  %15 = getelementptr inbounds i8, ptr %0, i64 %8
  %16 = getelementptr inbounds %struct.D_ParseNode.127, ptr %15, i64 0, i32 6
  %17 = load ptr, ptr %16, align 8, !tbaa !781
  %18 = getelementptr inbounds %struct.Grammar, ptr %17, i64 0, i32 4
  store ptr %14, ptr %18, align 8, !tbaa !177
  %19 = load ptr, ptr %1, align 8, !tbaa !14
  %20 = getelementptr inbounds i8, ptr %19, i64 %8
  %21 = getelementptr inbounds %struct.D_ParseNode.127, ptr %20, i64 0, i32 1, i32 4
  %22 = load i32, ptr %21, align 8, !tbaa !786
  %23 = getelementptr inbounds %struct.Grammar, ptr %17, i64 0, i32 4, i32 1
  store i32 %22, ptr %23, align 8, !tbaa !787
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_7_12_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = getelementptr inbounds ptr, ptr %1, i64 2
  %7 = load ptr, ptr %6, align 8, !tbaa !14
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds i8, ptr %7, i64 %8
  %10 = tail call i32 @d_get_number_of_children(ptr noundef %9) #43
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %29

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, ptr %0, i64 %8
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %13, i64 0, i32 6
  %15 = load ptr, ptr %14, align 8, !tbaa !781
  %16 = load ptr, ptr %6, align 8, !tbaa !14
  %17 = getelementptr inbounds i8, ptr %16, i64 %8
  %18 = getelementptr inbounds %struct.D_ParseNode.127, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !784
  %20 = getelementptr inbounds %struct.D_ParseNode.127, ptr %17, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !785
  %22 = getelementptr inbounds ptr, ptr %1, i64 1
  %23 = load ptr, ptr %22, align 8, !tbaa !14
  %24 = getelementptr inbounds i8, ptr %23, i64 %8
  %25 = getelementptr inbounds %struct.D_ParseNode.127, ptr %24, i64 0, i32 7, i32 3
  %26 = load i32, ptr %25, align 8, !tbaa !788
  %27 = getelementptr inbounds %struct.D_ParseNode.127, ptr %17, i64 0, i32 1, i32 4
  %28 = load i32, ptr %27, align 8, !tbaa !786
  tail call void @add_declaration(ptr noundef %15, ptr noundef %19, ptr noundef %21, i32 noundef %26, i32 noundef %28) #43
  br label %56

29:                                               ; preds = %5
  %30 = load ptr, ptr %6, align 8, !tbaa !14
  %31 = getelementptr inbounds i8, ptr %30, i64 %8
  %32 = tail call i32 @d_get_number_of_children(ptr noundef %31) #43
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %56

34:                                               ; preds = %29
  %35 = getelementptr inbounds i8, ptr %0, i64 %8
  %36 = getelementptr inbounds %struct.D_ParseNode.127, ptr %35, i64 0, i32 6
  %37 = getelementptr inbounds ptr, ptr %1, i64 1
  br label %38

38:                                               ; preds = %38, %34
  %39 = phi i32 [ 0, %34 ], [ %54, %38 ]
  %40 = load ptr, ptr %6, align 8, !tbaa !14
  %41 = getelementptr inbounds i8, ptr %40, i64 %8
  %42 = tail call ptr @d_get_child(ptr noundef %41, i32 noundef %39) #43
  %43 = load ptr, ptr %36, align 8, !tbaa !781
  %44 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !784
  %46 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !785
  %48 = load ptr, ptr %37, align 8, !tbaa !14
  %49 = getelementptr inbounds i8, ptr %48, i64 %8
  %50 = getelementptr inbounds %struct.D_ParseNode.127, ptr %49, i64 0, i32 7, i32 3
  %51 = load i32, ptr %50, align 8, !tbaa !788
  %52 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 1, i32 4
  %53 = load i32, ptr %52, align 8, !tbaa !786
  tail call void @add_declaration(ptr noundef %43, ptr noundef %45, ptr noundef %47, i32 noundef %51, i32 noundef %53) #43
  %54 = add nuw nsw i32 %39, 1
  %55 = icmp eq i32 %54, %32
  br i1 %55, label %56, label %38, !llvm.loop !789

56:                                               ; preds = %38, %29, %12
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_7_14_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 26
  %11 = load i32, ptr %10, align 8, !tbaa !209
  %12 = add nsw i32 %11, 1
  store i32 %12, ptr %10, align 8, !tbaa !209
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_7_15_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds ptr, ptr %1, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !14
  %12 = getelementptr inbounds i8, ptr %11, i64 %6
  %13 = getelementptr inbounds %struct.D_ParseNode.127, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !784
  %15 = getelementptr inbounds %struct.D_ParseNode.127, ptr %12, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !785
  %17 = getelementptr inbounds ptr, ptr %1, i64 2
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  %19 = getelementptr inbounds i8, ptr %18, i64 %6
  %20 = getelementptr inbounds %struct.D_ParseNode.127, ptr %19, i64 0, i32 7, i32 3
  %21 = load i32, ptr %20, align 8, !tbaa !788
  %22 = getelementptr inbounds %struct.D_ParseNode.127, ptr %12, i64 0, i32 1, i32 4
  %23 = load i32, ptr %22, align 8, !tbaa !786
  tail call void @add_pass(ptr noundef %9, ptr noundef %14, ptr noundef %16, i32 noundef %21, i32 noundef %23) #43
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_11_23_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #40 {
  %6 = load ptr, ptr %1, align 8, !tbaa !14
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds i8, ptr %6, i64 %7
  %9 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 7, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !788
  %11 = getelementptr inbounds ptr, ptr %1, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds i8, ptr %12, i64 %7
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %13, i64 0, i32 7, i32 3
  %15 = load i32, ptr %14, align 8, !tbaa !788
  %16 = or i32 %15, %10
  %17 = getelementptr inbounds i8, ptr %0, i64 %7
  %18 = getelementptr inbounds %struct.D_ParseNode.127, ptr %17, i64 0, i32 7, i32 3
  store i32 %16, ptr %18, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @d_final_reduction_code_12_24_dparser_gram(ptr nocapture noundef %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #41 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !788
  %10 = or i32 %9, 1
  store i32 %10, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @d_final_reduction_code_12_25_dparser_gram(ptr nocapture noundef %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #41 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !788
  %10 = or i32 %9, 2
  store i32 %10, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @d_final_reduction_code_12_26_dparser_gram(ptr nocapture noundef %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #41 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !788
  %10 = or i32 %9, 4
  store i32 %10, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @d_final_reduction_code_12_27_dparser_gram(ptr nocapture noundef %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #41 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !788
  %10 = or i32 %9, 8
  store i32 %10, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @d_final_reduction_code_12_28_dparser_gram(ptr nocapture noundef %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #41 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !788
  %10 = or i32 %9, 16
  store i32 %10, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_29_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 0, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_30_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 1, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_31_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 6, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_32_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 2, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_33_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 3, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_34_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 4, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_35_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 5, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @d_final_reduction_code_13_36_dparser_gram(ptr nocapture noundef writeonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #42 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 3
  store i32 7, ptr %8, align 8, !tbaa !788
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_14_37_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = load ptr, ptr %1, align 8, !tbaa !14
  %11 = getelementptr inbounds i8, ptr %10, i64 %6
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !784
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !785
  tail call void @new_token(ptr noundef %9, ptr noundef %13, ptr noundef %15) #43
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_16_41_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 23
  %11 = load ptr, ptr %10, align 8, !tbaa !223
  %12 = getelementptr inbounds %struct.Production, ptr %11, i64 0, i32 4
  %13 = load i8, ptr %12, align 4
  %14 = or i8 %13, 1
  store i8 %14, ptr %12, align 4
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_17_42_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = load ptr, ptr %1, align 8, !tbaa !14
  %11 = getelementptr inbounds i8, ptr %10, i64 %6
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !784
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !785
  %16 = tail call ptr @dup_str(ptr noundef %13, ptr noundef %15) #43
  %17 = tail call ptr @new_production(ptr noundef %9, ptr noundef %16) #43
  %18 = load ptr, ptr %8, align 8, !tbaa !781
  %19 = getelementptr inbounds %struct.Grammar, ptr %18, i64 0, i32 23
  store ptr %17, ptr %19, align 8, !tbaa !223
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_22_49_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 23
  %11 = load ptr, ptr %10, align 8, !tbaa !223
  %12 = getelementptr inbounds %struct.Production, ptr %11, i64 0, i32 2
  %13 = getelementptr inbounds %struct.Production, ptr %11, i64 0, i32 2, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !67
  %15 = icmp eq ptr %14, null
  br i1 %15, label %16, label %24

16:                                               ; preds = %5
  %17 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %18 = load ptr, ptr %17, align 8, !tbaa !224
  %19 = getelementptr inbounds %struct.Production, ptr %11, i64 0, i32 2, i32 3
  store ptr %19, ptr %13, align 8, !tbaa !67
  %20 = load i32, ptr %12, align 8, !tbaa !74
  %21 = add i32 %20, 1
  store i32 %21, ptr %12, align 8, !tbaa !74
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds ptr, ptr %19, i64 %22
  store ptr %18, ptr %23, align 8, !tbaa !14
  br label %48

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.Production, ptr %11, i64 0, i32 2, i32 3
  %26 = icmp eq ptr %14, %25
  %27 = load i32, ptr %12, align 8, !tbaa !74
  br i1 %26, label %28, label %36

28:                                               ; preds = %24
  %29 = icmp ult i32 %27, 3
  br i1 %29, label %30, label %45

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %32 = load ptr, ptr %31, align 8, !tbaa !224
  %33 = add nuw nsw i32 %27, 1
  store i32 %33, ptr %12, align 8, !tbaa !74
  %34 = zext i32 %27 to i64
  %35 = getelementptr inbounds ptr, ptr %14, i64 %34
  store ptr %32, ptr %35, align 8, !tbaa !14
  br label %48

36:                                               ; preds = %24
  %37 = and i32 %27, 7
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %41 = load ptr, ptr %40, align 8, !tbaa !224
  %42 = add i32 %27, 1
  store i32 %42, ptr %12, align 8, !tbaa !74
  %43 = zext i32 %27 to i64
  %44 = getelementptr inbounds ptr, ptr %14, i64 %43
  store ptr %41, ptr %44, align 8, !tbaa !14
  br label %48

45:                                               ; preds = %36, %28
  %46 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %47 = load ptr, ptr %46, align 8, !tbaa !224
  tail call void @vec_add_internal(ptr noundef nonnull %12, ptr noundef %47) #43
  br label %48

48:                                               ; preds = %45, %39, %30, %16
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_30_62_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 23
  %11 = load ptr, ptr %10, align 8, !tbaa !223
  %12 = tail call ptr @new_rule(ptr noundef %9, ptr noundef %11) #43
  %13 = load ptr, ptr %8, align 8, !tbaa !781
  %14 = getelementptr inbounds %struct.Grammar, ptr %13, i64 0, i32 24
  store ptr %12, ptr %14, align 8, !tbaa !224
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_31_63_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = load ptr, ptr %1, align 8, !tbaa !14
  %11 = getelementptr inbounds i8, ptr %10, i64 %6
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !784
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !785
  %16 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %17 = load ptr, ptr %16, align 8, !tbaa !224
  %18 = tail call ptr @new_string(ptr noundef %9, ptr noundef %13, ptr noundef %15, ptr noundef %17) #43
  %19 = load ptr, ptr %8, align 8, !tbaa !781
  %20 = getelementptr inbounds %struct.Grammar, ptr %19, i64 0, i32 25
  store ptr %18, ptr %20, align 8, !tbaa !790
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_31_64_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = load ptr, ptr %1, align 8, !tbaa !14
  %11 = getelementptr inbounds i8, ptr %10, i64 %6
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !784
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %11, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !785
  %16 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %17 = load ptr, ptr %16, align 8, !tbaa !224
  %18 = tail call ptr @new_string(ptr noundef %9, ptr noundef %13, ptr noundef %15, ptr noundef %17) #43
  %19 = load ptr, ptr %8, align 8, !tbaa !781
  %20 = getelementptr inbounds %struct.Grammar, ptr %19, i64 0, i32 25
  store ptr %18, ptr %20, align 8, !tbaa !790
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_31_65_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = load ptr, ptr %1, align 8, !tbaa !14
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds i8, ptr %6, i64 %7
  %9 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !784
  %11 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !785
  %13 = getelementptr inbounds i8, ptr %0, i64 %7
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %13, i64 0, i32 6
  %15 = load ptr, ptr %14, align 8, !tbaa !781
  %16 = getelementptr inbounds %struct.Grammar, ptr %15, i64 0, i32 24
  %17 = load ptr, ptr %16, align 8, !tbaa !224
  %18 = tail call ptr @new_ident(ptr noundef %10, ptr noundef %12, ptr noundef %17) #43
  %19 = load ptr, ptr %14, align 8, !tbaa !781
  %20 = getelementptr inbounds %struct.Grammar, ptr %19, i64 0, i32 25
  store ptr %18, ptr %20, align 8, !tbaa !790
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_31_66_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds ptr, ptr %1, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !14
  %12 = getelementptr inbounds i8, ptr %11, i64 %6
  %13 = getelementptr inbounds %struct.D_ParseNode.127, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !784
  %15 = getelementptr inbounds %struct.D_ParseNode.127, ptr %12, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !785
  %17 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %18 = load ptr, ptr %17, align 8, !tbaa !224
  %19 = tail call ptr @new_code(ptr noundef %9, ptr noundef %14, ptr noundef %16, ptr noundef %18) #43
  %20 = load ptr, ptr %8, align 8, !tbaa !781
  %21 = getelementptr inbounds %struct.Grammar, ptr %20, i64 0, i32 25
  store ptr %19, ptr %21, align 8, !tbaa !790
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_31_67_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 23
  %11 = load ptr, ptr %10, align 8, !tbaa !223
  %12 = getelementptr inbounds ptr, ptr %1, i64 1
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = getelementptr inbounds i8, ptr %13, i64 %6
  %15 = getelementptr inbounds %struct.D_ParseNode.127, ptr %14, i64 0, i32 7, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !791
  %17 = tail call ptr @new_elem_nterm(ptr noundef %11, ptr noundef %16) #43
  %18 = load ptr, ptr %8, align 8, !tbaa !781
  %19 = getelementptr inbounds %struct.Grammar, ptr %18, i64 0, i32 25
  store ptr %17, ptr %19, align 8, !tbaa !790
  %20 = load ptr, ptr %12, align 8, !tbaa !14
  %21 = getelementptr inbounds i8, ptr %20, i64 %6
  %22 = getelementptr inbounds %struct.D_ParseNode.127, ptr %21, i64 0, i32 7
  %23 = load ptr, ptr %22, align 8, !tbaa !792
  %24 = getelementptr inbounds %struct.Grammar, ptr %18, i64 0, i32 23
  store ptr %23, ptr %24, align 8, !tbaa !223
  %25 = load ptr, ptr %12, align 8, !tbaa !14
  %26 = getelementptr inbounds i8, ptr %25, i64 %6
  %27 = getelementptr inbounds %struct.D_ParseNode.127, ptr %26, i64 0, i32 7, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !791
  %29 = getelementptr inbounds %struct.Grammar, ptr %18, i64 0, i32 24
  store ptr %28, ptr %29, align 8, !tbaa !224
  %30 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6
  %31 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !174
  %33 = icmp eq ptr %32, null
  %34 = getelementptr inbounds %struct.Rule, ptr %28, i64 0, i32 6, i32 3
  br i1 %33, label %35, label %40

35:                                               ; preds = %5
  store ptr %34, ptr %31, align 8, !tbaa !174
  %36 = load i32, ptr %30, align 8, !tbaa !75
  %37 = add i32 %36, 1
  store i32 %37, ptr %30, align 8, !tbaa !75
  %38 = zext i32 %36 to i64
  %39 = getelementptr inbounds ptr, ptr %34, i64 %38
  store ptr %17, ptr %39, align 8, !tbaa !14
  br label %57

40:                                               ; preds = %5
  %41 = icmp eq ptr %32, %34
  %42 = load i32, ptr %30, align 8, !tbaa !75
  br i1 %41, label %43, label %49

43:                                               ; preds = %40
  %44 = icmp ult i32 %42, 3
  br i1 %44, label %45, label %56

45:                                               ; preds = %43
  %46 = add nuw nsw i32 %42, 1
  store i32 %46, ptr %30, align 8, !tbaa !75
  %47 = zext i32 %42 to i64
  %48 = getelementptr inbounds ptr, ptr %32, i64 %47
  store ptr %17, ptr %48, align 8, !tbaa !14
  br label %57

49:                                               ; preds = %40
  %50 = and i32 %42, 7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %49
  %53 = add i32 %42, 1
  store i32 %53, ptr %30, align 8, !tbaa !75
  %54 = zext i32 %42 to i64
  %55 = getelementptr inbounds ptr, ptr %32, i64 %54
  store ptr %17, ptr %55, align 8, !tbaa !14
  br label %57

56:                                               ; preds = %49, %43
  tail call void @vec_add_internal(ptr noundef nonnull %30, ptr noundef %17) #43
  br label %57

57:                                               ; preds = %56, %52, %45, %35
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_33_71_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = tail call ptr @new_internal_production(ptr noundef %9, ptr noundef null) #43
  %11 = load ptr, ptr %8, align 8, !tbaa !781
  %12 = tail call ptr @new_rule(ptr noundef %11, ptr noundef %10) #43
  %13 = getelementptr inbounds %struct.Production, ptr %10, i64 0, i32 2
  %14 = getelementptr inbounds %struct.Production, ptr %10, i64 0, i32 2, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !67
  %16 = icmp eq ptr %15, null
  %17 = getelementptr inbounds %struct.Production, ptr %10, i64 0, i32 2, i32 3
  br i1 %16, label %18, label %23

18:                                               ; preds = %5
  store ptr %17, ptr %14, align 8, !tbaa !67
  %19 = load i32, ptr %13, align 8, !tbaa !74
  %20 = add i32 %19, 1
  store i32 %20, ptr %13, align 8, !tbaa !74
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds ptr, ptr %17, i64 %21
  store ptr %12, ptr %22, align 8, !tbaa !14
  br label %40

23:                                               ; preds = %5
  %24 = icmp eq ptr %15, %17
  %25 = load i32, ptr %13, align 8, !tbaa !74
  br i1 %24, label %26, label %32

26:                                               ; preds = %23
  %27 = icmp ult i32 %25, 3
  br i1 %27, label %28, label %39

28:                                               ; preds = %26
  %29 = add nuw nsw i32 %25, 1
  store i32 %29, ptr %13, align 8, !tbaa !74
  %30 = zext i32 %25 to i64
  %31 = getelementptr inbounds ptr, ptr %15, i64 %30
  store ptr %12, ptr %31, align 8, !tbaa !14
  br label %40

32:                                               ; preds = %23
  %33 = and i32 %25, 7
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = add i32 %25, 1
  store i32 %36, ptr %13, align 8, !tbaa !74
  %37 = zext i32 %25 to i64
  %38 = getelementptr inbounds ptr, ptr %15, i64 %37
  store ptr %12, ptr %38, align 8, !tbaa !14
  br label %40

39:                                               ; preds = %32, %26
  tail call void @vec_add_internal(ptr noundef nonnull %13, ptr noundef %12) #43
  br label %40

40:                                               ; preds = %39, %35, %28, %18
  %41 = load ptr, ptr %1, align 8, !tbaa !14
  %42 = getelementptr inbounds i8, ptr %41, i64 %6
  %43 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !784
  %45 = getelementptr inbounds i8, ptr %44, i64 1
  %46 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !785
  %48 = getelementptr inbounds i8, ptr %47, i64 -1
  %49 = tail call ptr @dup_str(ptr noundef nonnull %45, ptr noundef nonnull %48) #43
  %50 = getelementptr inbounds %struct.Rule, ptr %12, i64 0, i32 8
  store ptr %49, ptr %50, align 8, !tbaa !76
  %51 = load ptr, ptr %1, align 8, !tbaa !14
  %52 = getelementptr inbounds i8, ptr %51, i64 %6
  %53 = getelementptr inbounds %struct.D_ParseNode.127, ptr %52, i64 0, i32 1, i32 4
  %54 = load i32, ptr %53, align 8, !tbaa !786
  %55 = getelementptr inbounds %struct.Rule, ptr %12, i64 0, i32 8, i32 1
  store i32 %54, ptr %55, align 8, !tbaa !87
  %56 = load ptr, ptr %8, align 8, !tbaa !781
  %57 = getelementptr inbounds %struct.Grammar, ptr %56, i64 0, i32 24
  %58 = load ptr, ptr %57, align 8, !tbaa !224
  %59 = tail call ptr @new_elem_nterm(ptr noundef nonnull %10, ptr noundef %58) #43
  %60 = load ptr, ptr %8, align 8, !tbaa !781
  %61 = getelementptr inbounds %struct.Grammar, ptr %60, i64 0, i32 25
  store ptr %59, ptr %61, align 8, !tbaa !790
  %62 = getelementptr inbounds %struct.Grammar, ptr %60, i64 0, i32 24
  %63 = load ptr, ptr %62, align 8, !tbaa !224
  %64 = getelementptr inbounds %struct.Rule, ptr %63, i64 0, i32 6
  %65 = getelementptr inbounds %struct.Rule, ptr %63, i64 0, i32 6, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !174
  %67 = icmp eq ptr %66, null
  %68 = getelementptr inbounds %struct.Rule, ptr %63, i64 0, i32 6, i32 3
  br i1 %67, label %69, label %74

69:                                               ; preds = %40
  store ptr %68, ptr %65, align 8, !tbaa !174
  %70 = load i32, ptr %64, align 8, !tbaa !75
  %71 = add i32 %70, 1
  store i32 %71, ptr %64, align 8, !tbaa !75
  %72 = zext i32 %70 to i64
  %73 = getelementptr inbounds ptr, ptr %68, i64 %72
  store ptr %59, ptr %73, align 8, !tbaa !14
  br label %91

74:                                               ; preds = %40
  %75 = icmp eq ptr %66, %68
  %76 = load i32, ptr %64, align 8, !tbaa !75
  br i1 %75, label %77, label %83

77:                                               ; preds = %74
  %78 = icmp ult i32 %76, 3
  br i1 %78, label %79, label %90

79:                                               ; preds = %77
  %80 = add nuw nsw i32 %76, 1
  store i32 %80, ptr %64, align 8, !tbaa !75
  %81 = zext i32 %76 to i64
  %82 = getelementptr inbounds ptr, ptr %66, i64 %81
  store ptr %59, ptr %82, align 8, !tbaa !14
  br label %91

83:                                               ; preds = %74
  %84 = and i32 %76, 7
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %90, label %86

86:                                               ; preds = %83
  %87 = add i32 %76, 1
  store i32 %87, ptr %64, align 8, !tbaa !75
  %88 = zext i32 %76 to i64
  %89 = getelementptr inbounds ptr, ptr %66, i64 %88
  store ptr %59, ptr %89, align 8, !tbaa !14
  br label %91

90:                                               ; preds = %83, %77
  tail call void @vec_add_internal(ptr noundef nonnull %64, ptr noundef %59) #43
  br label %91

91:                                               ; preds = %90, %86, %79, %69
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_33_72_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = tail call ptr @new_internal_production(ptr noundef %9, ptr noundef null) #43
  %11 = load ptr, ptr %8, align 8, !tbaa !781
  %12 = tail call ptr @new_rule(ptr noundef %11, ptr noundef %10) #43
  %13 = getelementptr inbounds %struct.Production, ptr %10, i64 0, i32 2
  %14 = getelementptr inbounds %struct.Production, ptr %10, i64 0, i32 2, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !67
  %16 = icmp eq ptr %15, null
  %17 = getelementptr inbounds %struct.Production, ptr %10, i64 0, i32 2, i32 3
  br i1 %16, label %18, label %23

18:                                               ; preds = %5
  store ptr %17, ptr %14, align 8, !tbaa !67
  %19 = load i32, ptr %13, align 8, !tbaa !74
  %20 = add i32 %19, 1
  store i32 %20, ptr %13, align 8, !tbaa !74
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds ptr, ptr %17, i64 %21
  store ptr %12, ptr %22, align 8, !tbaa !14
  br label %40

23:                                               ; preds = %5
  %24 = icmp eq ptr %15, %17
  %25 = load i32, ptr %13, align 8, !tbaa !74
  br i1 %24, label %26, label %32

26:                                               ; preds = %23
  %27 = icmp ult i32 %25, 3
  br i1 %27, label %28, label %39

28:                                               ; preds = %26
  %29 = add nuw nsw i32 %25, 1
  store i32 %29, ptr %13, align 8, !tbaa !74
  %30 = zext i32 %25 to i64
  %31 = getelementptr inbounds ptr, ptr %15, i64 %30
  store ptr %12, ptr %31, align 8, !tbaa !14
  br label %40

32:                                               ; preds = %23
  %33 = and i32 %25, 7
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %32
  %36 = add i32 %25, 1
  store i32 %36, ptr %13, align 8, !tbaa !74
  %37 = zext i32 %25 to i64
  %38 = getelementptr inbounds ptr, ptr %15, i64 %37
  store ptr %12, ptr %38, align 8, !tbaa !14
  br label %40

39:                                               ; preds = %32, %26
  tail call void @vec_add_internal(ptr noundef nonnull %13, ptr noundef %12) #43
  br label %40

40:                                               ; preds = %39, %35, %28, %18
  %41 = load ptr, ptr %1, align 8, !tbaa !14
  %42 = getelementptr inbounds i8, ptr %41, i64 %6
  %43 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !784
  %45 = getelementptr inbounds i8, ptr %44, i64 1
  %46 = getelementptr inbounds %struct.D_ParseNode.127, ptr %42, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !785
  %48 = getelementptr inbounds i8, ptr %47, i64 -1
  %49 = tail call ptr @dup_str(ptr noundef nonnull %45, ptr noundef nonnull %48) #43
  %50 = getelementptr inbounds %struct.Rule, ptr %12, i64 0, i32 9
  store ptr %49, ptr %50, align 8, !tbaa !77
  %51 = load ptr, ptr %1, align 8, !tbaa !14
  %52 = getelementptr inbounds i8, ptr %51, i64 %6
  %53 = getelementptr inbounds %struct.D_ParseNode.127, ptr %52, i64 0, i32 1, i32 4
  %54 = load i32, ptr %53, align 8, !tbaa !786
  %55 = getelementptr inbounds %struct.Rule, ptr %12, i64 0, i32 9, i32 1
  store i32 %54, ptr %55, align 8, !tbaa !88
  %56 = load ptr, ptr %8, align 8, !tbaa !781
  %57 = getelementptr inbounds %struct.Grammar, ptr %56, i64 0, i32 24
  %58 = load ptr, ptr %57, align 8, !tbaa !224
  %59 = tail call ptr @new_elem_nterm(ptr noundef nonnull %10, ptr noundef %58) #43
  %60 = load ptr, ptr %8, align 8, !tbaa !781
  %61 = getelementptr inbounds %struct.Grammar, ptr %60, i64 0, i32 25
  store ptr %59, ptr %61, align 8, !tbaa !790
  %62 = getelementptr inbounds %struct.Grammar, ptr %60, i64 0, i32 24
  %63 = load ptr, ptr %62, align 8, !tbaa !224
  %64 = getelementptr inbounds %struct.Rule, ptr %63, i64 0, i32 6
  %65 = getelementptr inbounds %struct.Rule, ptr %63, i64 0, i32 6, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !174
  %67 = icmp eq ptr %66, null
  %68 = getelementptr inbounds %struct.Rule, ptr %63, i64 0, i32 6, i32 3
  br i1 %67, label %69, label %74

69:                                               ; preds = %40
  store ptr %68, ptr %65, align 8, !tbaa !174
  %70 = load i32, ptr %64, align 8, !tbaa !75
  %71 = add i32 %70, 1
  store i32 %71, ptr %64, align 8, !tbaa !75
  %72 = zext i32 %70 to i64
  %73 = getelementptr inbounds ptr, ptr %68, i64 %72
  store ptr %59, ptr %73, align 8, !tbaa !14
  br label %91

74:                                               ; preds = %40
  %75 = icmp eq ptr %66, %68
  %76 = load i32, ptr %64, align 8, !tbaa !75
  br i1 %75, label %77, label %83

77:                                               ; preds = %74
  %78 = icmp ult i32 %76, 3
  br i1 %78, label %79, label %90

79:                                               ; preds = %77
  %80 = add nuw nsw i32 %76, 1
  store i32 %80, ptr %64, align 8, !tbaa !75
  %81 = zext i32 %76 to i64
  %82 = getelementptr inbounds ptr, ptr %66, i64 %81
  store ptr %59, ptr %82, align 8, !tbaa !14
  br label %91

83:                                               ; preds = %74
  %84 = and i32 %76, 7
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %90, label %86

86:                                               ; preds = %83
  %87 = add i32 %76, 1
  store i32 %87, ptr %64, align 8, !tbaa !75
  %88 = zext i32 %76 to i64
  %89 = getelementptr inbounds ptr, ptr %66, i64 %88
  store ptr %59, ptr %89, align 8, !tbaa !14
  br label %91

90:                                               ; preds = %83, %77
  tail call void @vec_add_internal(ptr noundef nonnull %64, ptr noundef %59) #43
  br label %91

91:                                               ; preds = %90, %86, %79, %69
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_34_73_dparser_gram(ptr nocapture noundef %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 23
  %11 = load ptr, ptr %10, align 8, !tbaa !223
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7
  store ptr %11, ptr %12, align 8, !tbaa !792
  %13 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %14 = load ptr, ptr %13, align 8, !tbaa !224
  %15 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 7, i32 1
  store ptr %14, ptr %15, align 8, !tbaa !791
  %16 = tail call ptr @new_internal_production(ptr noundef %9, ptr noundef %11) #43
  %17 = load ptr, ptr %8, align 8, !tbaa !781
  %18 = getelementptr inbounds %struct.Grammar, ptr %17, i64 0, i32 23
  store ptr %16, ptr %18, align 8, !tbaa !223
  %19 = tail call ptr @new_rule(ptr noundef %17, ptr noundef %16) #43
  %20 = load ptr, ptr %8, align 8, !tbaa !781
  %21 = getelementptr inbounds %struct.Grammar, ptr %20, i64 0, i32 24
  store ptr %19, ptr %21, align 8, !tbaa !224
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_35_74_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 25
  %11 = load ptr, ptr %10, align 8, !tbaa !790
  %12 = load i32, ptr %11, align 8, !tbaa !146
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %15, label %14

14:                                               ; preds = %5
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.326) #43
  br label %15

15:                                               ; preds = %14, %5
  %16 = getelementptr inbounds ptr, ptr %1, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !14
  %18 = getelementptr inbounds i8, ptr %17, i64 %6
  %19 = getelementptr inbounds %struct.D_ParseNode.127, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !784
  %21 = tail call i64 @strtol(ptr nocapture noundef %20, ptr noundef null, i32 noundef 0) #43
  %22 = trunc i64 %21 to i32
  %23 = load ptr, ptr %8, align 8, !tbaa !781
  %24 = getelementptr inbounds %struct.Grammar, ptr %23, i64 0, i32 25
  %25 = load ptr, ptr %24, align 8, !tbaa !790
  %26 = getelementptr inbounds %struct.Elem, ptr %25, i64 0, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !60
  %28 = getelementptr inbounds %struct.Term, ptr %27, i64 0, i32 2
  store i32 %22, ptr %28, align 8, !tbaa !96
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_35_75_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 25
  %11 = load ptr, ptr %10, align 8, !tbaa !790
  %12 = load i32, ptr %11, align 8, !tbaa !146
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %18, label %14

14:                                               ; preds = %5
  tail call void (ptr, ...) @d_fail(ptr noundef nonnull @.str.1.327) #43
  %15 = load ptr, ptr %8, align 8, !tbaa !781
  %16 = getelementptr inbounds %struct.Grammar, ptr %15, i64 0, i32 25
  %17 = load ptr, ptr %16, align 8, !tbaa !790
  br label %18

18:                                               ; preds = %14, %5
  %19 = phi ptr [ %17, %14 ], [ %11, %5 ]
  %20 = getelementptr inbounds %struct.Elem, ptr %19, i64 0, i32 3
  %21 = load ptr, ptr %20, align 8, !tbaa !60
  %22 = getelementptr inbounds %struct.Term, ptr %21, i64 0, i32 7
  %23 = load i8, ptr %22, align 4
  %24 = or i8 %23, 8
  store i8 %24, ptr %22, align 4
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_35_76_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  tail call void @conditional_EBNF(ptr noundef %9) #43
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_35_77_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  tail call void @star_EBNF(ptr noundef %9) #43
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_35_78_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  tail call void @plus_EBNF(ptr noundef %9) #43
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_80_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 3
  store i32 10, ptr %12, align 4, !tbaa !79
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_81_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 3
  store i32 9, ptr %12, align 4, !tbaa !79
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_82_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 3
  store i32 18, ptr %12, align 4, !tbaa !79
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_83_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 3
  store i32 17, ptr %12, align 4, !tbaa !79
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_84_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 5
  store i32 10, ptr %12, align 4, !tbaa !81
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_85_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 5
  store i32 9, ptr %12, align 4, !tbaa !81
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_86_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 5
  store i32 18, ptr %12, align 4, !tbaa !81
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_87_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 5
  store i32 17, ptr %12, align 4, !tbaa !81
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_88_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 5
  store i32 6, ptr %12, align 4, !tbaa !81
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @d_final_reduction_code_37_89_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #39 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 5
  store i32 5, ptr %12, align 4, !tbaa !81
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal i32 @d_final_reduction_code_38_90_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #36 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = getelementptr inbounds %struct.Rule, ptr %11, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !79
  %14 = icmp eq i32 %13, 0
  %15 = load ptr, ptr %1, align 8, !tbaa !14
  %16 = getelementptr inbounds i8, ptr %15, i64 %6
  %17 = getelementptr inbounds %struct.D_ParseNode.127, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !784
  %19 = tail call i64 @strtol(ptr nocapture noundef %18, ptr noundef null, i32 noundef 0) #43
  %20 = trunc i64 %19 to i32
  %21 = load ptr, ptr %8, align 8, !tbaa !781
  %22 = getelementptr inbounds %struct.Grammar, ptr %21, i64 0, i32 24
  %23 = load ptr, ptr %22, align 8, !tbaa !224
  %24 = getelementptr inbounds %struct.Rule, ptr %23, i64 0, i32 4
  %25 = getelementptr inbounds %struct.Rule, ptr %23, i64 0, i32 2
  %26 = select i1 %14, ptr %24, ptr %25
  store i32 %20, ptr %26, align 8, !tbaa !15
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_43_98_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = load ptr, ptr %1, align 8, !tbaa !14
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds i8, ptr %6, i64 %7
  %9 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !784
  %11 = getelementptr inbounds i8, ptr %10, i64 1
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !785
  %14 = getelementptr inbounds i8, ptr %13, i64 -1
  %15 = tail call ptr @dup_str(ptr noundef nonnull %11, ptr noundef nonnull %14) #43
  %16 = getelementptr inbounds i8, ptr %0, i64 %7
  %17 = getelementptr inbounds %struct.D_ParseNode.127, ptr %16, i64 0, i32 6
  %18 = load ptr, ptr %17, align 8, !tbaa !781
  %19 = getelementptr inbounds %struct.Grammar, ptr %18, i64 0, i32 24
  %20 = load ptr, ptr %19, align 8, !tbaa !224
  %21 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 8
  store ptr %15, ptr %21, align 8, !tbaa !76
  %22 = load ptr, ptr %1, align 8, !tbaa !14
  %23 = getelementptr inbounds i8, ptr %22, i64 %7
  %24 = getelementptr inbounds %struct.D_ParseNode.127, ptr %23, i64 0, i32 1, i32 4
  %25 = load i32, ptr %24, align 8, !tbaa !786
  %26 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 8, i32 1
  store i32 %25, ptr %26, align 8, !tbaa !87
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_44_99_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = load ptr, ptr %1, align 8, !tbaa !14
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds i8, ptr %6, i64 %7
  %9 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !784
  %11 = getelementptr inbounds i8, ptr %10, i64 1
  %12 = getelementptr inbounds %struct.D_ParseNode.127, ptr %8, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !785
  %14 = getelementptr inbounds i8, ptr %13, i64 -1
  %15 = tail call ptr @dup_str(ptr noundef nonnull %11, ptr noundef nonnull %14) #43
  %16 = getelementptr inbounds i8, ptr %0, i64 %7
  %17 = getelementptr inbounds %struct.D_ParseNode.127, ptr %16, i64 0, i32 6
  %18 = load ptr, ptr %17, align 8, !tbaa !781
  %19 = getelementptr inbounds %struct.Grammar, ptr %18, i64 0, i32 24
  %20 = load ptr, ptr %19, align 8, !tbaa !224
  %21 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 9
  store ptr %15, ptr %21, align 8, !tbaa !77
  %22 = load ptr, ptr %1, align 8, !tbaa !14
  %23 = getelementptr inbounds i8, ptr %22, i64 %7
  %24 = getelementptr inbounds %struct.D_ParseNode.127, ptr %23, i64 0, i32 1, i32 4
  %25 = load i32, ptr %24, align 8, !tbaa !786
  %26 = getelementptr inbounds %struct.Rule, ptr %20, i64 0, i32 9, i32 1
  store i32 %25, ptr %26, align 8, !tbaa !88
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @d_final_reduction_code_45_100_dparser_gram(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 %2, i32 noundef %3, ptr nocapture readnone %4) #0 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i8, ptr %0, i64 %6
  %8 = getelementptr inbounds %struct.D_ParseNode.127, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !781
  %10 = getelementptr inbounds %struct.Grammar, ptr %9, i64 0, i32 24
  %11 = load ptr, ptr %10, align 8, !tbaa !224
  %12 = load ptr, ptr %1, align 8, !tbaa !14
  %13 = getelementptr inbounds i8, ptr %12, i64 %6
  %14 = getelementptr inbounds %struct.D_ParseNode.127, ptr %13, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !784
  %16 = getelementptr inbounds %struct.D_ParseNode.127, ptr %13, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !785
  %18 = getelementptr inbounds ptr, ptr %1, i64 2
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = getelementptr inbounds i8, ptr %19, i64 %6
  %21 = getelementptr inbounds %struct.D_ParseNode.127, ptr %20, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !784
  %23 = getelementptr inbounds i8, ptr %22, i64 1
  %24 = getelementptr inbounds %struct.D_ParseNode.127, ptr %20, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !785
  %26 = getelementptr inbounds i8, ptr %25, i64 -1
  %27 = getelementptr inbounds %struct.D_ParseNode.127, ptr %13, i64 0, i32 1, i32 4
  %28 = load i32, ptr %27, align 8, !tbaa !786
  %29 = getelementptr inbounds %struct.D_ParseNode.127, ptr %20, i64 0, i32 1, i32 4
  %30 = load i32, ptr %29, align 8, !tbaa !786
  tail call void @add_pass_code(ptr noundef %9, ptr noundef %11, ptr noundef %15, ptr noundef %17, ptr noundef nonnull %23, ptr noundef nonnull %26, i32 noundef %28, i32 noundef %30) #43
  ret i32 0
}

attributes #0 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nounwind }
attributes #5 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #10 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { nofree nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #18 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: read, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { mustprogress nofree nounwind optsize willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { mustprogress nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nofree optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nounwind willreturn memory(argmem: read) }
attributes #28 = { nofree nounwind optsize memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { nofree nounwind optsize memory(read, argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { mustprogress nofree nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #35 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #36 = { mustprogress nofree nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #37 = { optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #38 = { nocallback nofree nosync nounwind willreturn }
attributes #39 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #40 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #41 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #42 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #43 = { nounwind optsize }
attributes #44 = { optsize }
attributes #45 = { nounwind }
attributes #46 = { cold optsize }
attributes #47 = { cold }
attributes #48 = { nounwind optsize willreturn memory(read) }
attributes #49 = { nounwind optsize willreturn memory(none) }
attributes #50 = { nounwind optsize allocsize(0) }
attributes #51 = { nounwind optsize allocsize(1) }
attributes #52 = { noreturn nounwind optsize }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !12, i64 8}
!8 = !{!"ArgumentState", !9, i64 0, !12, i64 8, !9, i64 16, !9, i64 24}
!9 = !{!"any pointer", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!"int", !10, i64 0}
!13 = !{!8, !9, i64 0}
!14 = !{!9, !9, i64 0}
!15 = !{!12, !12, i64 0}
!16 = !{!17, !12, i64 248}
!17 = !{!"Grammar", !9, i64 0, !18, i64 8, !18, i64 48, !18, i64 88, !19, i64 128, !9, i64 144, !12, i64 152, !18, i64 160, !18, i64 200, !9, i64 240, !12, i64 248, !12, i64 252, !12, i64 256, !12, i64 260, !12, i64 264, !12, i64 268, !12, i64 272, !10, i64 276, !12, i64 532, !12, i64 536, !12, i64 540, !12, i64 544, !12, i64 548, !9, i64 552, !9, i64 560, !9, i64 568, !12, i64 576, !12, i64 580, !12, i64 584, !12, i64 588}
!18 = !{!"", !12, i64 0, !12, i64 4, !9, i64 8, !10, i64 16}
!19 = !{!"Code", !9, i64 0, !12, i64 8}
!20 = !{!17, !12, i64 252}
!21 = !{!17, !12, i64 256}
!22 = !{!17, !12, i64 260}
!23 = !{!17, !12, i64 264}
!24 = !{!17, !12, i64 268}
!25 = !{!17, !12, i64 532}
!26 = !{!17, !12, i64 536}
!27 = !{!17, !12, i64 540}
!28 = !{!17, !12, i64 544}
!29 = !{!17, !12, i64 548}
!30 = !{!18, !12, i64 0}
!31 = !{!18, !9, i64 8}
!32 = !{!17, !12, i64 48}
!33 = !{!17, !9, i64 56}
!34 = !{!35, !10, i64 0}
!35 = !{!"Term", !10, i64 0, !12, i64 4, !12, i64 8, !10, i64 12, !12, i64 16, !9, i64 24, !12, i64 32, !12, i64 36, !12, i64 36, !9, i64 40}
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.mustprogress"}
!38 = !{!17, !12, i64 8}
!39 = distinct !{!39, !37}
!40 = !{!35, !9, i64 24}
!41 = !{!35, !12, i64 4}
!42 = distinct !{!42, !37}
!43 = !{!35, !12, i64 32}
!44 = distinct !{!44, !37}
!45 = !{!17, !9, i64 16}
!46 = !{!47, !9, i64 208}
!47 = !{!"Production", !9, i64 0, !12, i64 8, !18, i64 16, !12, i64 56, !12, i64 60, !12, i64 60, !12, i64 60, !9, i64 64, !10, i64 72, !10, i64 136, !9, i64 200, !9, i64 208, !9, i64 216, !9, i64 224}
!48 = !{!47, !9, i64 0}
!49 = !{!47, !9, i64 200}
!50 = !{!51, !12, i64 0}
!51 = !{!"State", !12, i64 0, !52, i64 8, !18, i64 16, !18, i64 56, !18, i64 96, !18, i64 136, !18, i64 176, !18, i64 216, !18, i64 256, !53, i64 296, !12, i64 376, !12, i64 376, !12, i64 376, !12, i64 376, !9, i64 384, !12, i64 392, !9, i64 400, !9, i64 408, !9, i64 416, !9, i64 424}
!52 = !{!"long long", !10, i64 0}
!53 = !{!"Scanner", !18, i64 0, !18, i64 40}
!54 = distinct !{!54, !37}
!55 = !{!17, !12, i64 152}
!56 = !{!17, !9, i64 144}
!57 = !{!19, !12, i64 8}
!58 = !{!17, !9, i64 0}
!59 = !{!19, !9, i64 0}
!60 = !{!10, !10, i64 0}
!61 = !{!62, !62, i64 0}
!62 = !{!"short", !10, i64 0}
!63 = distinct !{!63, !37}
!64 = distinct !{!64, !37}
!65 = distinct !{!65, !37}
!66 = distinct !{!66, !37}
!67 = !{!47, !9, i64 24}
!68 = !{!69, !9, i64 8}
!69 = !{!"Rule", !12, i64 0, !9, i64 8, !12, i64 16, !10, i64 20, !12, i64 24, !10, i64 28, !18, i64 32, !9, i64 72, !19, i64 80, !19, i64 96, !18, i64 112, !12, i64 152, !9, i64 160}
!70 = !{!47, !12, i64 56}
!71 = !{!69, !12, i64 0}
!72 = !{!69, !12, i64 112}
!73 = distinct !{!73, !37}
!74 = !{!47, !12, i64 16}
!75 = !{!69, !12, i64 32}
!76 = !{!69, !9, i64 80}
!77 = !{!69, !9, i64 96}
!78 = !{!69, !12, i64 16}
!79 = !{!69, !10, i64 20}
!80 = !{!69, !12, i64 24}
!81 = !{!69, !10, i64 28}
!82 = !{!69, !12, i64 152}
!83 = !{!69, !9, i64 120}
!84 = distinct !{!84, !37}
!85 = !{!69, !9, i64 160}
!86 = distinct !{!86, !37}
!87 = !{!69, !12, i64 88}
!88 = !{!69, !12, i64 104}
!89 = distinct !{!89, !37}
!90 = distinct !{!90, !37}
!91 = distinct !{!91, !37}
!92 = distinct !{!92, !37}
!93 = !{!35, !9, i64 40}
!94 = !{!35, !10, i64 12}
!95 = !{!35, !12, i64 16}
!96 = !{!35, !12, i64 8}
!97 = distinct !{!97, !37}
!98 = !{!17, !12, i64 88}
!99 = !{!17, !9, i64 96}
!100 = !{!51, !12, i64 296}
!101 = distinct !{!101, !37}
!102 = distinct !{!102, !37}
!103 = !{!51, !12, i64 136}
!104 = !{!51, !9, i64 400}
!105 = !{!51, !9, i64 144}
!106 = !{!107, !9, i64 8}
!107 = !{!"Action", !10, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !12, i64 32, !9, i64 40}
!108 = distinct !{!108, !37}
!109 = !{!51, !12, i64 336}
!110 = !{!51, !9, i64 344}
!111 = distinct !{!111, !37}
!112 = distinct !{!112, !37}
!113 = distinct !{!113, !37}
!114 = !{!115, !12, i64 0}
!115 = !{!"ScannerBlock", !12, i64 0, !12, i64 4, !12, i64 8, !9, i64 16, !9, i64 24}
!116 = !{!115, !12, i64 4}
!117 = !{!115, !12, i64 8}
!118 = !{!115, !9, i64 16}
!119 = !{!115, !9, i64 24}
!120 = !{!121, !12, i64 0}
!121 = !{!"ScanState", !12, i64 0, !10, i64 8, !18, i64 2056, !18, i64 2096, !10, i64 2136}
!122 = distinct !{!122, !37}
!123 = !{!124, !12, i64 0}
!124 = !{!"ScanStateTransition", !12, i64 0, !18, i64 8, !18, i64 48}
!125 = distinct !{!125, !37}
!126 = distinct !{!126, !37}
!127 = !{!121, !12, i64 2056}
!128 = !{!121, !9, i64 2064}
!129 = !{!107, !9, i64 40}
!130 = distinct !{!130, !37}
!131 = distinct !{!131, !37}
!132 = distinct !{!132, !37}
!133 = distinct !{!133, !37}
!134 = distinct !{!134, !37}
!135 = distinct !{!135, !37}
!136 = distinct !{!136, !37}
!137 = distinct !{!137, !37}
!138 = distinct !{!138, !37}
!139 = !{!107, !10, i64 0}
!140 = distinct !{!140, !37}
!141 = distinct !{!141, !37}
!142 = !{!51, !12, i64 96}
!143 = !{!51, !9, i64 104}
!144 = !{!145, !9, i64 0}
!145 = !{!"Goto", !9, i64 0, !9, i64 8}
!146 = !{!147, !10, i64 0}
!147 = !{!"Elem", !10, i64 0, !12, i64 4, !9, i64 8, !10, i64 16}
!148 = distinct !{!148, !37}
!149 = distinct !{!149, !37}
!150 = !{!151, !151, i64 0}
!151 = !{!"long", !10, i64 0}
!152 = distinct !{!152, !37}
!153 = distinct !{!153, !37}
!154 = !{!145, !9, i64 8}
!155 = distinct !{!155, !37}
!156 = distinct !{!156, !37}
!157 = !{!51, !12, i64 392}
!158 = distinct !{!158, !37}
!159 = !{!51, !12, i64 176}
!160 = !{!51, !9, i64 184}
!161 = !{!107, !9, i64 16}
!162 = distinct !{!162, !37}
!163 = !{!51, !12, i64 216}
!164 = !{!51, !9, i64 224}
!165 = !{!166, !12, i64 0}
!166 = !{!"Hint", !12, i64 0, !9, i64 8, !9, i64 16}
!167 = !{!166, !9, i64 8}
!168 = !{!166, !9, i64 16}
!169 = distinct !{!169, !37}
!170 = distinct !{!170, !37}
!171 = distinct !{!171, !37}
!172 = !{!51, !12, i64 256}
!173 = !{!51, !9, i64 264}
!174 = !{!69, !9, i64 40}
!175 = distinct !{!175, !37}
!176 = distinct !{!176, !37}
!177 = !{!17, !9, i64 128}
!178 = !{!51, !9, i64 408}
!179 = distinct !{!179, !37}
!180 = !{!47, !12, i64 8}
!181 = distinct !{!181, !37}
!182 = distinct !{!182, !37}
!183 = !{!17, !12, i64 200}
!184 = !{!17, !9, i64 208}
!185 = !{!186, !9, i64 0}
!186 = !{!"D_Pass", !9, i64 0, !12, i64 8, !12, i64 12, !12, i64 16}
!187 = !{!186, !12, i64 8}
!188 = !{!186, !12, i64 12}
!189 = !{!186, !12, i64 16}
!190 = distinct !{!190, !37}
!191 = !{!17, !9, i64 240}
!192 = !{!17, !12, i64 272}
!193 = distinct !{!193, !37}
!194 = distinct !{!194, !37}
!195 = distinct !{!195, !37}
!196 = distinct !{!196, !37}
!197 = distinct !{!197, !37}
!198 = distinct !{!198, !37}
!199 = distinct !{!199, !37}
!200 = distinct !{!200, !37}
!201 = distinct !{!201, !37}
!202 = distinct !{!202, !37}
!203 = distinct !{!203, !37}
!204 = distinct !{!204, !37}
!205 = distinct !{!205, !37}
!206 = distinct !{!206, !37}
!207 = !{!69, !9, i64 72}
!208 = !{!147, !9, i64 8}
!209 = !{!17, !12, i64 576}
!210 = distinct !{!210, !37}
!211 = distinct !{!211, !37}
!212 = !{!213, !9, i64 0}
!213 = !{!"Declaration", !9, i64 0, !12, i64 8, !12, i64 12}
!214 = !{!213, !12, i64 8}
!215 = !{!17, !12, i64 160}
!216 = !{!213, !12, i64 12}
!217 = !{!17, !9, i64 168}
!218 = distinct !{!218, !37}
!219 = distinct !{!219, !37}
!220 = !{!17, !12, i64 584}
!221 = distinct !{!221, !37}
!222 = distinct !{!222, !37}
!223 = !{!17, !9, i64 552}
!224 = !{!17, !9, i64 560}
!225 = distinct !{!225, !37}
!226 = distinct !{!226, !37}
!227 = distinct !{!227, !37}
!228 = !{!229, !12, i64 0}
!229 = !{!"EnumStr", !12, i64 0, !9, i64 8}
!230 = !{!229, !9, i64 8}
!231 = distinct !{!231, !37}
!232 = distinct !{!232, !37}
!233 = distinct !{!233, !37}
!234 = !{!51, !12, i64 16}
!235 = !{!51, !9, i64 24}
!236 = distinct !{!236, !37}
!237 = distinct !{!237, !37}
!238 = distinct !{!238, !37}
!239 = distinct !{!239, !37}
!240 = !{!107, !9, i64 24}
!241 = distinct !{!241, !37}
!242 = distinct !{!242, !37}
!243 = distinct !{!243, !37}
!244 = distinct !{!244, !37}
!245 = distinct !{!245, !37}
!246 = !{!247, !9, i64 0}
!247 = !{!"", !9, i64 0, !9, i64 8, !9, i64 16}
!248 = !{!247, !9, i64 16}
!249 = distinct !{!249, !37}
!250 = !{!247, !9, i64 8}
!251 = distinct !{!251, !37}
!252 = distinct !{!252, !37}
!253 = distinct !{!253, !37}
!254 = !{!51, !9, i64 416}
!255 = !{!51, !9, i64 424}
!256 = distinct !{!256, !37}
!257 = distinct !{!257, !37}
!258 = !{!259, !9, i64 0}
!259 = !{!"D_Parser", !9, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !260, i64 48, !12, i64 80, !12, i64 84, !12, i64 88, !12, i64 92, !12, i64 96, !12, i64 100, !12, i64 104, !12, i64 108, !12, i64 112, !12, i64 116, !12, i64 120, !12, i64 124}
!260 = !{!"d_loc_t", !9, i64 0, !9, i64 8, !12, i64 16, !12, i64 20, !12, i64 24}
!261 = !{!259, !9, i64 56}
!262 = !{!17, !12, i64 588}
!263 = !{!147, !12, i64 4}
!264 = distinct !{!264, !37}
!265 = distinct !{!265, !37}
!266 = distinct !{!266, !37}
!267 = distinct !{!267, !37}
!268 = distinct !{!268, !37}
!269 = distinct !{!269, !37}
!270 = !{!47, !9, i64 64}
!271 = distinct !{!271, !37}
!272 = distinct !{!272, !37}
!273 = distinct !{!273, !37}
!274 = distinct !{!274, !37}
!275 = !{!47, !9, i64 216}
!276 = distinct !{!276, !37}
!277 = distinct !{!277, !37}
!278 = distinct !{!278, !37}
!279 = distinct !{!279, !37}
!280 = distinct !{!280, !37}
!281 = distinct !{!281, !37}
!282 = distinct !{!282, !37}
!283 = distinct !{!283, !37}
!284 = distinct !{!284, !37}
!285 = distinct !{!285, !37}
!286 = distinct !{!286, !37}
!287 = distinct !{!287, !37}
!288 = distinct !{!288, !37}
!289 = distinct !{!289, !37}
!290 = distinct !{!290, !37}
!291 = distinct !{!291, !37}
!292 = distinct !{!292, !37}
!293 = distinct !{!293, !37}
!294 = distinct !{!294, !37}
!295 = distinct !{!295, !37}
!296 = distinct !{!296, !37}
!297 = distinct !{!297, !37}
!298 = distinct !{!298, !37}
!299 = distinct !{!299, !37}
!300 = distinct !{!300, !37}
!301 = distinct !{!301, !37}
!302 = distinct !{!302, !37}
!303 = distinct !{!303, !37}
!304 = distinct !{!304, !37}
!305 = distinct !{!305, !37}
!306 = distinct !{!306, !37}
!307 = distinct !{!307, !37}
!308 = distinct !{!308, !37}
!309 = !{i64 0, i64 4, !15, i64 4, i64 4, !15, i64 8, i64 8, !14, i64 16, i64 24, !60, i64 40, i64 4, !15, i64 44, i64 4, !15, i64 48, i64 8, !14, i64 56, i64 24, !60}
!310 = !{!311, !9, i64 10296}
!311 = !{!"NFAState", !12, i64 0, !10, i64 8, !18, i64 10248, !18, i64 10288, !18, i64 10328}
!312 = !{!311, !12, i64 10288}
!313 = distinct !{!313, !37}
!314 = distinct !{!314, !37}
!315 = distinct !{!315, !37}
!316 = !{!311, !9, i64 10256}
!317 = !{!311, !12, i64 10248}
!318 = !{!319, !12, i64 56}
!319 = !{!"LexState", !12, i64 0, !18, i64 8, !12, i64 48, !12, i64 52, !12, i64 56}
!320 = distinct !{!320, !37}
!321 = !{!322, !9, i64 8}
!322 = !{!"DFAState", !18, i64 0, !10, i64 40, !9, i64 2088}
!323 = !{!322, !12, i64 0}
!324 = distinct !{!324, !37}
!325 = distinct !{!325, !37}
!326 = distinct !{!326, !37}
!327 = distinct !{!327, !37}
!328 = distinct !{!328, !37}
!329 = distinct !{!329, !37}
!330 = !{!322, !9, i64 2088}
!331 = distinct !{!331, !37}
!332 = distinct !{!332, !37}
!333 = distinct !{!333, !37}
!334 = distinct !{!334, !37}
!335 = distinct !{!335, !37}
!336 = distinct !{!336, !37}
!337 = distinct !{!337, !37}
!338 = distinct !{!338, !37}
!339 = distinct !{!339, !37}
!340 = distinct !{!340, !37}
!341 = distinct !{!341, !37}
!342 = distinct !{!342, !37}
!343 = distinct !{!343, !37}
!344 = distinct !{!344, !37}
!345 = !{!107, !12, i64 32}
!346 = !{!124, !9, i64 16}
!347 = !{!124, !12, i64 8}
!348 = !{!124, !9, i64 56}
!349 = !{!124, !12, i64 48}
!350 = distinct !{!350, !37}
!351 = distinct !{!351, !37}
!352 = !{!53, !12, i64 40}
!353 = !{!53, !9, i64 48}
!354 = distinct !{!354, !37}
!355 = !{!319, !12, i64 48}
!356 = distinct !{!356, !37}
!357 = distinct !{!357, !37}
!358 = !{!319, !12, i64 52}
!359 = distinct !{!359, !37}
!360 = !{!319, !12, i64 0}
!361 = !{!311, !12, i64 0}
!362 = !{!319, !9, i64 16}
!363 = !{!319, !12, i64 8}
!364 = distinct !{!364, !37}
!365 = distinct !{!365, !37}
!366 = distinct !{!366, !37}
!367 = distinct !{!367, !37}
!368 = distinct !{!368, !37}
!369 = distinct !{!369, !37}
!370 = distinct !{!370, !37}
!371 = distinct !{!371, !37}
!372 = distinct !{!372, !37}
!373 = distinct !{!373, !37}
!374 = distinct !{!374, !37}
!375 = !{!17, !12, i64 580}
!376 = distinct !{!376, !37}
!377 = distinct !{!377, !37}
!378 = distinct !{!378, !37}
!379 = distinct !{!379, !37}
!380 = distinct !{!380, !37}
!381 = distinct !{!381, !37}
!382 = distinct !{!382, !37}
!383 = distinct !{!383, !37}
!384 = distinct !{!384, !37}
!385 = distinct !{!385, !37}
!386 = distinct !{!386, !37}
!387 = distinct !{!387, !37}
!388 = distinct !{!388, !37}
!389 = distinct !{!389, !37}
!390 = distinct !{!390, !37}
!391 = distinct !{!391, !37}
!392 = distinct !{!392, !37}
!393 = distinct !{!393, !37}
!394 = !{!51, !52, i64 8}
!395 = distinct !{!395, !37}
!396 = distinct !{!396, !37}
!397 = !{!51, !9, i64 64}
!398 = distinct !{!398, !37}
!399 = distinct !{!399, !37}
!400 = distinct !{!400, !37}
!401 = distinct !{!401, !37}
!402 = !{!8, !9, i64 24}
!403 = !{!404, !9, i64 24}
!404 = !{!"", !9, i64 0, !10, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !9, i64 48}
!405 = !{!404, !9, i64 32}
!406 = !{!407, !407, i64 0}
!407 = !{!"double", !10, i64 0}
!408 = !{!52, !52, i64 0}
!409 = !{!8, !9, i64 16}
!410 = !{!404, !9, i64 48}
!411 = !{!404, !9, i64 0}
!412 = !{!404, !9, i64 16}
!413 = !{!404, !10, i64 8}
!414 = !{!404, !9, i64 40}
!415 = distinct !{!415, !37}
!416 = distinct !{!416, !37}
!417 = !{!418, !10, i64 85}
!418 = !{!"PNode", !10, i64 0, !12, i64 4, !10, i64 8, !12, i64 12, !9, i64 16, !9, i64 24, !12, i64 32, !18, i64 40, !12, i64 80, !10, i64 84, !10, i64 85, !9, i64 88, !9, i64 96, !9, i64 104, !9, i64 112, !9, i64 120, !9, i64 128, !9, i64 136, !9, i64 144, !419, i64 152}
!419 = !{!"D_ParseNode", !12, i64 0, !260, i64 8, !9, i64 40, !9, i64 48, !9, i64 56, !9, i64 64, !9, i64 72, !9, i64 80}
!420 = !{!418, !12, i64 40}
!421 = !{!418, !9, i64 48}
!422 = distinct !{!422, !37}
!423 = !{!418, !9, i64 160}
!424 = !{!418, !9, i64 200}
!425 = distinct !{!425, !37}
!426 = !{!427, !9, i64 144}
!427 = !{!"Parser", !259, i64 0, !9, i64 128, !9, i64 136, !9, i64 144, !12, i64 152, !12, i64 156, !12, i64 160, !12, i64 164, !12, i64 168, !12, i64 172, !12, i64 176, !428, i64 184, !429, i64 216, !9, i64 256, !9, i64 264, !9, i64 272, !9, i64 280, !12, i64 288, !9, i64 296, !9, i64 304, !12, i64 312, !9, i64 320, !9, i64 328, !9, i64 336, !18, i64 344, !9, i64 384, !430, i64 392, !9, i64 416, !9, i64 424}
!428 = !{!"PNodeHash", !9, i64 0, !12, i64 8, !12, i64 12, !12, i64 16, !9, i64 24}
!429 = !{!"SNodeHash", !9, i64 0, !12, i64 8, !12, i64 12, !12, i64 16, !9, i64 24, !9, i64 32}
!430 = !{!"D_Shift", !62, i64 0, !10, i64 2, !10, i64 3, !12, i64 4, !12, i64 8, !9, i64 16}
!431 = !{!432, !9, i64 32}
!432 = !{!"D_ParserTables", !12, i64 0, !9, i64 8, !9, i64 16, !12, i64 24, !12, i64 28, !9, i64 32, !9, i64 40, !12, i64 48, !9, i64 56, !12, i64 64}
!433 = !{!418, !12, i64 152}
!434 = !{!435, !9, i64 8}
!435 = !{!"D_Symbol", !12, i64 0, !9, i64 8, !12, i64 16}
!436 = distinct !{!436, !37}
!437 = distinct !{!437, !37}
!438 = !{!429, !9, i64 0}
!439 = !{!429, !12, i64 12}
!440 = !{!432, !9, i64 8}
!441 = !{!442, !9, i64 0}
!442 = !{!"SNode", !9, i64 0, !9, i64 8, !9, i64 16, !260, i64 24, !12, i64 56, !9, i64 64, !18, i64 72, !12, i64 112, !9, i64 120, !9, i64 128}
!443 = !{!442, !9, i64 8}
!444 = !{!442, !9, i64 16}
!445 = distinct !{!445, !37}
!446 = !{!429, !12, i64 16}
!447 = !{!429, !12, i64 8}
!448 = !{!442, !9, i64 120}
!449 = distinct !{!449, !37}
!450 = distinct !{!450, !37}
!451 = !{!428, !9, i64 0}
!452 = !{!428, !12, i64 12}
!453 = !{!418, !9, i64 136}
!454 = !{!418, !9, i64 144}
!455 = distinct !{!455, !37}
!456 = !{!428, !12, i64 16}
!457 = !{!428, !12, i64 8}
!458 = !{!418, !9, i64 96}
!459 = distinct !{!459, !37}
!460 = distinct !{!460, !37}
!461 = distinct !{!461, !37}
!462 = !{!419, !12, i64 32}
!463 = !{!419, !9, i64 16}
!464 = !{!427, !12, i64 72}
!465 = !{!427, !12, i64 84}
!466 = !{!427, !12, i64 112}
!467 = !{!427, !9, i64 24}
!468 = !{!427, !9, i64 32}
!469 = !{!427, !12, i64 116}
!470 = !{!432, !12, i64 64}
!471 = !{!427, !12, i64 88}
!472 = !{!432, !9, i64 40}
!473 = !{!427, !9, i64 8}
!474 = !{!432, !12, i64 24}
!475 = !{!259, !12, i64 72}
!476 = !{!427, !9, i64 416}
!477 = !{!260, !9, i64 0}
!478 = !{!427, !9, i64 128}
!479 = !{i32 0, i32 2}
!480 = !{!427, !9, i64 280}
!481 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 4, !15, i64 20, i64 4, !15, i64 24, i64 4, !15}
!482 = !{!442, !12, i64 112}
!483 = !{!259, !9, i64 48}
!484 = !{!260, !12, i64 16}
!485 = distinct !{!485, !37}
!486 = distinct !{!486, !37}
!487 = !{!260, !12, i64 24}
!488 = distinct !{!488, !37}
!489 = distinct !{!489, !37}
!490 = !{!260, !9, i64 8}
!491 = distinct !{!491, !37}
!492 = distinct !{!492, !37}
!493 = distinct !{!493, !37}
!494 = distinct !{!494, !37}
!495 = !{!427, !9, i64 48}
!496 = !{!427, !9, i64 272}
!497 = !{!427, !9, i64 0}
!498 = !{!418, !9, i64 208}
!499 = !{!418, !9, i64 192}
!500 = !{!442, !9, i64 64}
!501 = !{!427, !9, i64 336}
!502 = !{!503, !9, i64 0}
!503 = !{!"ZNode", !9, i64 0, !18, i64 8}
!504 = !{!503, !12, i64 8}
!505 = !{!503, !9, i64 16}
!506 = !{!418, !12, i64 32}
!507 = !{!427, !9, i64 256}
!508 = !{!509, !9, i64 8}
!509 = !{!"Reduction", !9, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !12, i64 32, !9, i64 40}
!510 = !{!442, !9, i64 24}
!511 = !{!427, !9, i64 264}
!512 = !{!513, !9, i64 0}
!513 = !{!"Shift", !9, i64 0, !9, i64 8}
!514 = distinct !{!514, !37}
!515 = !{!509, !9, i64 40}
!516 = distinct !{!516, !37}
!517 = !{!427, !9, i64 136}
!518 = !{!427, !12, i64 120}
!519 = !{!427, !12, i64 288}
!520 = !{!427, !12, i64 124}
!521 = distinct !{!521, !37}
!522 = distinct !{!522, !37}
!523 = !{!524, !12, i64 48}
!524 = !{!"D_State", !9, i64 0, !12, i64 8, !525, i64 16, !525, i64 32, !525, i64 48, !9, i64 64, !9, i64 72, !9, i64 80, !10, i64 88, !10, i64 89, !10, i64 90, !9, i64 96, !9, i64 104, !12, i64 112}
!525 = !{!"", !12, i64 0, !9, i64 8}
!526 = !{!524, !9, i64 56}
!527 = !{!528, !9, i64 8}
!528 = !{!"D_ErrorRecoveryHint", !62, i64 0, !62, i64 2, !9, i64 8}
!529 = distinct !{!529, !37}
!530 = distinct !{!530, !37}
!531 = !{!442, !12, i64 56}
!532 = !{!528, !62, i64 0}
!533 = distinct !{!533, !37}
!534 = !{!442, !12, i64 72}
!535 = !{!442, !9, i64 80}
!536 = distinct !{!536, !37}
!537 = distinct !{!537, !37}
!538 = !{!427, !9, i64 352}
!539 = !{!427, !12, i64 344}
!540 = !{!541, !62, i64 0}
!541 = !{!"D_Reduction", !62, i64 0, !62, i64 2, !9, i64 8, !9, i64 16, !62, i64 24, !62, i64 26, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !9, i64 48}
!542 = !{!528, !62, i64 2}
!543 = !{!541, !62, i64 2}
!544 = distinct !{!544, !37}
!545 = !{!418, !9, i64 216}
!546 = !{!509, !9, i64 0}
!547 = !{!509, !9, i64 16}
!548 = !{!509, !9, i64 24}
!549 = !{!432, !12, i64 0}
!550 = !{!427, !9, i64 216}
!551 = !{!418, !9, i64 16}
!552 = !{!418, !10, i64 84}
!553 = distinct !{!553, !37}
!554 = distinct !{!554, !37}
!555 = distinct !{!555, !37}
!556 = !{!427, !12, i64 92}
!557 = !{!513, !9, i64 8}
!558 = distinct !{!558, !37}
!559 = distinct !{!559, !37}
!560 = !{!524, !12, i64 112}
!561 = !{!418, !12, i64 12}
!562 = distinct !{!562, !37}
!563 = distinct !{!563, !37}
!564 = !{i32 -3, i32 1}
!565 = !{!427, !12, i64 160}
!566 = !{!524, !9, i64 72}
!567 = !{!427, !12, i64 400}
!568 = !{!427, !10, i64 395}
!569 = !{!427, !9, i64 384}
!570 = !{!571, !9, i64 0}
!571 = !{!"ShiftResult", !9, i64 0, !260, i64 8}
!572 = !{!524, !9, i64 80}
!573 = !{!427, !12, i64 164}
!574 = !{!430, !62, i64 0}
!575 = !{!571, !9, i64 8}
!576 = !{!442, !12, i64 44}
!577 = !{!442, !12, i64 40}
!578 = !{!418, !9, i64 120}
!579 = !{!418, !9, i64 128}
!580 = distinct !{!580, !37}
!581 = !{!427, !9, i64 304}
!582 = distinct !{!582, !37}
!583 = distinct !{!583, !37}
!584 = distinct !{!584, !37}
!585 = !{!427, !9, i64 328}
!586 = !{!442, !9, i64 128}
!587 = !{!427, !9, i64 40}
!588 = distinct !{!588, !37}
!589 = !{!418, !9, i64 104}
!590 = !{!418, !9, i64 112}
!591 = !{!427, !9, i64 320}
!592 = !{!418, !9, i64 88}
!593 = !{!524, !9, i64 64}
!594 = distinct !{!594, !37}
!595 = !{!524, !12, i64 16}
!596 = !{!524, !9, i64 24}
!597 = distinct !{!597, !37}
!598 = distinct !{!598, !37}
!599 = !{!418, !9, i64 24}
!600 = !{!427, !12, i64 156}
!601 = !{!418, !9, i64 224}
!602 = !{!430, !10, i64 3}
!603 = !{!418, !10, i64 8}
!604 = !{!430, !12, i64 4}
!605 = !{!430, !9, i64 16}
!606 = distinct !{!606, !37}
!607 = !{!418, !10, i64 0}
!608 = !{!418, !12, i64 4}
!609 = !{!418, !12, i64 80}
!610 = distinct !{!610, !37}
!611 = !{!541, !62, i64 24}
!612 = !{!541, !12, i64 28}
!613 = !{!541, !62, i64 26}
!614 = !{!541, !12, i64 32}
!615 = !{!541, !9, i64 8}
!616 = distinct !{!616, !37}
!617 = !{!427, !9, i64 208}
!618 = !{!427, !12, i64 172}
!619 = !{!620, !9, i64 16}
!620 = !{!"", !9, i64 0, !9, i64 8, !9, i64 16, !10, i64 24}
!621 = !{!620, !9, i64 0}
!622 = !{!620, !9, i64 8}
!623 = distinct !{!623, !37}
!624 = distinct !{!624, !37}
!625 = distinct !{!625, !37}
!626 = distinct !{!626, !37}
!627 = !{!427, !12, i64 104}
!628 = distinct !{!628, !37}
!629 = !{!427, !12, i64 108}
!630 = !{i64 0, i64 8, !14, i64 8, i64 24, !60}
!631 = distinct !{!631, !37}
!632 = !{!427, !9, i64 240}
!633 = !{!427, !12, i64 228}
!634 = distinct !{!634, !37}
!635 = distinct !{!635, !37}
!636 = !{!427, !9, i64 248}
!637 = distinct !{!637, !37}
!638 = distinct !{!638, !37}
!639 = !{!427, !9, i64 184}
!640 = !{!427, !12, i64 196}
!641 = distinct !{!641, !37}
!642 = distinct !{!642, !37}
!643 = !{!427, !12, i64 200}
!644 = !{!509, !12, i64 32}
!645 = distinct !{!645, !37}
!646 = !{i32 -1, i32 1}
!647 = distinct !{!647, !37}
!648 = distinct !{!648, !37}
!649 = distinct !{!649, !37}
!650 = distinct !{!650, !37}
!651 = distinct !{!651, !37}
!652 = distinct !{!652, !37}
!653 = !{!427, !12, i64 168}
!654 = distinct !{!654, !37}
!655 = distinct !{!655, !37}
!656 = distinct !{!656, !37}
!657 = !{!427, !9, i64 296}
!658 = !{!427, !12, i64 152}
!659 = !{!524, !10, i64 89}
!660 = !{!541, !9, i64 16}
!661 = distinct !{!661, !37}
!662 = !{!524, !9, i64 0}
!663 = !{!432, !9, i64 16}
!664 = !{!524, !12, i64 8}
!665 = distinct !{!665, !37}
!666 = distinct !{!666, !37}
!667 = distinct !{!667, !37}
!668 = !{!524, !12, i64 32}
!669 = !{!524, !9, i64 40}
!670 = !{!671, !62, i64 2}
!671 = !{!"D_RightEpsilonHint", !62, i64 0, !62, i64 2, !9, i64 8}
!672 = !{!671, !9, i64 8}
!673 = !{!671, !62, i64 0}
!674 = distinct !{!674, !37}
!675 = distinct !{!675, !37}
!676 = distinct !{!676, !37}
!677 = distinct !{!677, !37}
!678 = distinct !{!678, !37}
!679 = !{!427, !12, i64 100}
!680 = distinct !{!680, !37}
!681 = !{!435, !12, i64 0}
!682 = !{!427, !12, i64 96}
!683 = distinct !{!683, !37}
!684 = distinct !{!684, !37}
!685 = distinct !{!685, !37}
!686 = distinct !{!686, !37}
!687 = distinct !{!687, !37}
!688 = distinct !{!688, !37}
!689 = distinct !{!689, !37}
!690 = distinct !{!690, !37}
!691 = distinct !{!691, !37}
!692 = distinct !{!692, !37}
!693 = distinct !{!693, !37}
!694 = !{!18, !12, i64 4}
!695 = distinct !{!695, !37}
!696 = distinct !{!696, !37}
!697 = distinct !{!697, !37}
!698 = distinct !{!698, !37}
!699 = distinct !{!699, !37}
!700 = !{!427, !9, i64 424}
!701 = !{!427, !9, i64 16}
!702 = !{!427, !12, i64 80}
!703 = !{!427, !12, i64 176}
!704 = !{!427, !12, i64 192}
!705 = !{!427, !12, i64 224}
!706 = !{!432, !12, i64 28}
!707 = distinct !{!707, !37}
!708 = distinct !{!708, !37}
!709 = distinct !{!709, !37}
!710 = distinct !{!710, !37}
!711 = distinct !{!711, !37}
!712 = distinct !{!712, !37}
!713 = distinct !{!713, !37}
!714 = distinct !{!714, !37}
!715 = !{!524, !10, i64 90}
!716 = !{!524, !9, i64 96}
!717 = !{!718, !9, i64 0}
!718 = !{!"SB_uint8", !9, i64 0, !10, i64 8}
!719 = !{!524, !9, i64 104}
!720 = distinct !{!720, !37}
!721 = distinct !{!721, !37}
!722 = !{!260, !12, i64 20}
!723 = distinct !{!723, !37}
!724 = !{!430, !10, i64 2}
!725 = distinct !{!725, !37}
!726 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 4, !15, i64 28, i64 4, !15, i64 32, i64 4, !15}
!727 = distinct !{!727, !37}
!728 = distinct !{!728, !37}
!729 = !{!524, !10, i64 88}
!730 = distinct !{!730, !37}
!731 = !{!732, !9, i64 0}
!732 = !{!"SB_uint16", !9, i64 0, !10, i64 8}
!733 = distinct !{!733, !37}
!734 = !{!735, !9, i64 0}
!735 = !{!"SB_uint32", !9, i64 0, !10, i64 8}
!736 = distinct !{!736, !37}
!737 = distinct !{!737, !37}
!738 = !{!739, !9, i64 32}
!739 = !{!"D_Scope", !12, i64 0, !12, i64 0, !9, i64 8, !9, i64 16, !9, i64 24, !9, i64 32, !9, i64 40, !9, i64 48, !9, i64 56, !9, i64 64}
!740 = !{!739, !9, i64 40}
!741 = !{!739, !9, i64 48}
!742 = !{!739, !9, i64 56}
!743 = !{!739, !9, i64 64}
!744 = !{!745, !12, i64 4}
!745 = !{!"D_SymHash", !12, i64 0, !12, i64 4, !18, i64 8}
!746 = !{!745, !12, i64 8}
!747 = !{!745, !9, i64 16}
!748 = !{!739, !9, i64 16}
!749 = distinct !{!749, !37}
!750 = !{!739, !9, i64 8}
!751 = !{!752, !9, i64 24}
!752 = !{!"D_Sym", !9, i64 0, !12, i64 8, !12, i64 12, !9, i64 16, !9, i64 24, !12, i64 32}
!753 = distinct !{!753, !37}
!754 = distinct !{!754, !37}
!755 = distinct !{!755, !37}
!756 = !{!739, !9, i64 24}
!757 = distinct !{!757, !37}
!758 = distinct !{!758, !37}
!759 = distinct !{!759, !37}
!760 = !{!761, !151, i64 48}
!761 = !{!"stat", !151, i64 0, !151, i64 8, !151, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !151, i64 40, !151, i64 48, !151, i64 56, !151, i64 64, !762, i64 72, !762, i64 88, !762, i64 104, !10, i64 120}
!762 = !{!"timespec", !151, i64 0, !151, i64 8}
!763 = !{!764, !12, i64 0}
!764 = !{!"AbstractVec", !12, i64 0, !12, i64 4, !9, i64 8, !10, i64 16}
!765 = !{!764, !9, i64 8}
!766 = distinct !{!766, !37}
!767 = !{!768, !9, i64 16}
!768 = !{!"AbstractStack", !9, i64 0, !9, i64 8, !9, i64 16, !10, i64 24}
!769 = !{!768, !9, i64 0}
!770 = !{!768, !9, i64 8}
!771 = distinct !{!771, !37}
!772 = !{!764, !12, i64 4}
!773 = distinct !{!773, !37}
!774 = !{!775, !9, i64 0}
!775 = !{!"hash_fns_t", !9, i64 0, !9, i64 8, !10, i64 16}
!776 = !{!775, !9, i64 8}
!777 = distinct !{!777, !37}
!778 = distinct !{!778, !37}
!779 = distinct !{!779, !37}
!780 = distinct !{!780, !37}
!781 = !{!782, !9, i64 72}
!782 = !{!"D_ParseNode", !12, i64 0, !260, i64 8, !9, i64 40, !9, i64 48, !9, i64 56, !9, i64 64, !9, i64 72, !783, i64 80}
!783 = !{!"ParseNode_User", !9, i64 0, !9, i64 8, !9, i64 16, !12, i64 24}
!784 = !{!782, !9, i64 8}
!785 = !{!782, !9, i64 40}
!786 = !{!782, !12, i64 32}
!787 = !{!17, !12, i64 136}
!788 = !{!782, !12, i64 104}
!789 = distinct !{!789, !37}
!790 = !{!17, !9, i64 568}
!791 = !{!782, !9, i64 88}
!792 = !{!782, !9, i64 80}

; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/mafft/pairlocalalign.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._Fukusosuu = type { double, double }
%struct._Segment = type { i32, i32, i32, double, i32, i32, ptr, i32 }
%struct._Gappattern = type { i32, float }
%struct._LocalHom.3 = type { i32, ptr, ptr, i32, i32, i32, i32, double, i32, i32, double, float, double }

@polarity_ = internal global [20 x double] [double 8.100000e+00, double 1.050000e+01, double 1.160000e+01, double 1.300000e+01, double 5.500000e+00, double 1.050000e+01, double 1.230000e+01, double 9.000000e+00, double 1.040000e+01, double 5.200000e+00, double 4.900000e+00, double 1.130000e+01, double 5.700000e+00, double 5.200000e+00, double 8.000000e+00, double 0x4022666666666666, double 8.600000e+00, double 5.400000e+00, double 6.200000e+00, double 5.900000e+00], align 16
@volume_ = internal global [20 x double] [double 3.100000e+01, double 1.240000e+02, double 5.600000e+01, double 5.400000e+01, double 5.500000e+01, double 8.500000e+01, double 8.300000e+01, double 3.000000e+00, double 9.600000e+01, double 1.110000e+02, double 1.110000e+02, double 1.190000e+02, double 1.050000e+02, double 1.320000e+02, double 3.250000e+01, double 3.200000e+01, double 6.100000e+01, double 1.700000e+02, double 1.360000e+02, double 8.400000e+01], align 16
@ribosum4 = internal global [4 x [4 x double]] [[4 x double] [double 2.220000e+00, double -1.460000e+00, double -1.860000e+00, double -1.390000e+00], [4 x double] [double -1.460000e+00, double 1.030000e+00, double -2.480000e+00, double -1.740000e+00], [4 x double] [double -1.860000e+00, double -2.480000e+00, double 1.160000e+00, double -1.050000e+00], [4 x double] [double -1.390000e+00, double -1.740000e+00, double -1.050000e+00, double 1.650000e+00]], align 16
@ribosum16 = internal global [16 x [16 x double]] [[16 x double] [double -2.490000e+00, double -8.240000e+00, double -7.040000e+00, double -4.320000e+00, double -6.860000e+00, double -8.390000e+00, double -5.030000e+00, double -5.840000e+00, double 0xC021AE147AE147AE, double -4.680000e+00, double -1.437000e+01, double -1.264000e+01, double -4.010000e+00, double -6.160000e+00, double -1.132000e+01, double -9.050000e+00], [16 x double] [double -8.240000e+00, double -8.000000e-01, double -8.890000e+00, double -5.130000e+00, double -8.610000e+00, double -5.380000e+00, double -5.770000e+00, double -6.600000e+00, double -1.041000e+01, double -4.570000e+00, double -1.453000e+01, double -1.014000e+01, double -5.430000e+00, double -5.940000e+00, double -8.870000e+00, double -1.107000e+01], [16 x double] [double -7.040000e+00, double -8.890000e+00, double -2.110000e+00, double -2.040000e+00, double -9.730000e+00, double -1.105000e+01, double -3.810000e+00, double -4.720000e+00, double 0xC022BD70A3D70A3D, double -5.860000e+00, double -9.080000e+00, double -1.045000e+01, double -5.330000e+00, double -6.930000e+00, double -8.670000e+00, double -7.830000e+00], [16 x double] [double -4.320000e+00, double -5.130000e+00, double -2.040000e+00, double 4.490000e+00, double -5.330000e+00, double -5.610000e+00, double 2.700000e+00, double 5.900000e-01, double -5.560000e+00, double 1.670000e+00, double -6.710000e+00, double -5.170000e+00, double 1.610000e+00, double -5.100000e-01, double -4.810000e+00, double -2.980000e+00], [16 x double] [double -6.860000e+00, double -8.610000e+00, double -9.730000e+00, double -5.330000e+00, double -1.050000e+00, double -8.670000e+00, double -4.880000e+00, double -6.100000e+00, double -7.980000e+00, double -6.000000e+00, double -1.243000e+01, double 0xC01ED70A3D70A3D7, double -5.850000e+00, double 0xC01E333333333333, double -6.630000e+00, double -1.154000e+01], [16 x double] [double -8.390000e+00, double -5.380000e+00, double -1.105000e+01, double -5.610000e+00, double -8.670000e+00, double -1.980000e+00, double -4.130000e+00, double -5.770000e+00, double -1.136000e+01, double -4.660000e+00, double -1.258000e+01, double -1.369000e+01, double -5.750000e+00, double -4.270000e+00, double -1.201000e+01, double -1.079000e+01], [16 x double] [double -5.030000e+00, double -5.770000e+00, double -3.810000e+00, double 2.700000e+00, double -4.880000e+00, double -4.130000e+00, double 5.620000e+00, double 1.210000e+00, double -5.950000e+00, double 2.110000e+00, double -3.700000e+00, double -5.840000e+00, double 1.600000e+00, double -8.000000e-02, double -4.490000e+00, double -3.900000e+00], [16 x double] [double -5.840000e+00, double -6.600000e+00, double -4.720000e+00, double 5.900000e-01, double -6.100000e+00, double -5.770000e+00, double 1.210000e+00, double 3.470000e+00, double 0xC01FB851EB851EB8, double -2.700000e-01, double 0xC01F851EB851EB85, double -5.610000e+00, double -5.700000e-01, double -2.090000e+00, double -5.300000e+00, double -4.450000e+00], [16 x double] [double 0xC021AE147AE147AE, double -1.041000e+01, double 0xC022BD70A3D70A3D, double -5.560000e+00, double -7.980000e+00, double -1.136000e+01, double -5.950000e+00, double 0xC01FB851EB851EB8, double -5.130000e+00, double -3.570000e+00, double -1.045000e+01, double -8.490000e+00, double -2.420000e+00, double -5.630000e+00, double -7.080000e+00, double -8.390000e+00], [16 x double] [double -4.680000e+00, double -4.570000e+00, double -5.860000e+00, double 1.670000e+00, double -6.000000e+00, double -4.660000e+00, double 2.110000e+00, double -2.700000e-01, double -3.570000e+00, double 5.360000e+00, double -5.710000e+00, double -4.960000e+00, double 2.750000e+00, double 1.320000e+00, double -4.910000e+00, double -3.670000e+00], [16 x double] [double -1.437000e+01, double -1.453000e+01, double -9.080000e+00, double -6.710000e+00, double -1.243000e+01, double -1.258000e+01, double -3.700000e+00, double 0xC01F851EB851EB85, double -1.045000e+01, double -5.710000e+00, double -3.590000e+00, double -5.770000e+00, double -6.880000e+00, double -8.410000e+00, double -7.400000e+00, double -5.410000e+00], [16 x double] [double -1.264000e+01, double -1.014000e+01, double -1.045000e+01, double -5.170000e+00, double 0xC01ED70A3D70A3D7, double -1.369000e+01, double -5.840000e+00, double -5.610000e+00, double -8.490000e+00, double -4.960000e+00, double -5.770000e+00, double -2.280000e+00, double -4.720000e+00, double -7.360000e+00, double -3.830000e+00, double -5.210000e+00], [16 x double] [double -4.010000e+00, double -5.430000e+00, double -5.330000e+00, double 1.610000e+00, double -5.850000e+00, double -5.750000e+00, double 1.600000e+00, double -5.700000e-01, double -2.420000e+00, double 2.750000e+00, double -6.880000e+00, double -4.720000e+00, double 4.970000e+00, double 1.140000e+00, double -2.980000e+00, double -3.390000e+00], [16 x double] [double -6.160000e+00, double -5.940000e+00, double -6.930000e+00, double -5.100000e-01, double 0xC01E333333333333, double -4.270000e+00, double -8.000000e-02, double -2.090000e+00, double -5.630000e+00, double 1.320000e+00, double -8.410000e+00, double -7.360000e+00, double 1.140000e+00, double 3.360000e+00, double -4.760000e+00, double -4.280000e+00], [16 x double] [double -1.132000e+01, double -8.870000e+00, double -8.670000e+00, double -4.810000e+00, double -6.630000e+00, double -1.201000e+01, double -4.490000e+00, double -5.300000e+00, double -7.080000e+00, double -4.910000e+00, double -7.400000e+00, double -3.830000e+00, double -2.980000e+00, double -4.760000e+00, double -3.210000e+00, double -5.970000e+00], [16 x double] [double -9.050000e+00, double -1.107000e+01, double -7.830000e+00, double -2.980000e+00, double -1.154000e+01, double -1.079000e+01, double -3.900000e+00, double -4.450000e+00, double -8.390000e+00, double -3.670000e+00, double -5.410000e+00, double -5.210000e+00, double -3.390000e+00, double -4.280000e+00, double -5.970000e+00, double -2.000000e-02]], align 16
@locaminon = internal global [27 x i8] c"agctuAGCTUnNbdhkmnrsvwyx-O\00", align 16
@locgrpn = internal global [26 x i8] c"\00\01\02\03\03\00\01\02\03\03\04\04\05\05\05\05\05\05\05\05\05\05\05\05\05\05", align 16
@locn_disn = internal global [26 x [26 x i32]] [[26 x i32] [i32 1000, i32 600, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 600, i32 1000, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 1000, i32 600, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 600, i32 1000, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 500, i32 500, i32 0, i32 0, i32 0, i32 500, i32 500, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500], [26 x i32] zeroinitializer, [26 x i32] [i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 0, i32 500]], align 16
@__const.JTTmtx.freq0_TM = private unnamed_addr constant [20 x double] [double 1.051000e-01, double 1.570000e-02, double 1.850000e-02, double 0x3F823A29C779A6B5, double 2.190000e-02, double 1.410000e-02, double 9.700000e-03, double 7.580000e-02, double 1.680000e-02, double 1.188000e-01, double 1.635000e-01, double 1.120000e-02, double 3.330000e-02, double 7.770000e-02, double 2.600000e-02, double 5.680000e-02, double 5.230000e-02, double 2.230000e-02, double 3.240000e-02, double 1.195000e-01], align 16
@__const.BLOSUMmtx.locaminod = private unnamed_addr constant [27 x i8] c"ARNDCQEGHILKMFPSTWYVBZX.-U\00", align 16
@__const.BLOSUMmtx.locgrpd = private unnamed_addr constant [26 x i8] c"\00\03\02\02\05\02\02\00\03\01\01\03\01\04\00\00\00\04\04\01\02\02\06\06\06\06", align 16
@__const.BLOSUMmtx.freqd = private unnamed_addr constant [20 x double] [double 0x3FB3B645A1CAC083, double 5.100000e-02, double 4.300000e-02, double 5.200000e-02, double 2.000000e-02, double 4.100000e-02, double 6.200000e-02, double 0x3FB2F1A9FBE76C8B, double 2.300000e-02, double 5.200000e-02, double 0x3FB74BC6A7EF9DB2, double 5.900000e-02, double 2.400000e-02, double 4.000000e-02, double 5.100000e-02, double 6.900000e-02, double 5.900000e-02, double 1.400000e-02, double 3.200000e-02, double 6.600000e-02], align 16
@__const.BLOSUMmtx.tmpmtx30 = private unnamed_addr constant [276 x double] [double 4.000000e+00, double -1.000000e+00, double 8.000000e+00, double 0.000000e+00, double -2.000000e+00, double 8.000000e+00, double 0.000000e+00, double -1.000000e+00, double 1.000000e+00, double 9.000000e+00, double -3.000000e+00, double -2.000000e+00, double -1.000000e+00, double -3.000000e+00, double 1.700000e+01, double 1.000000e+00, double 3.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double 8.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.000000e+00, double 6.000000e+00, double 0.000000e+00, double -2.000000e+00, double 0.000000e+00, double -1.000000e+00, double -4.000000e+00, double -2.000000e+00, double -2.000000e+00, double 8.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -5.000000e+00, double 0.000000e+00, double 0.000000e+00, double -3.000000e+00, double 1.400000e+01, double 0.000000e+00, double -3.000000e+00, double 0.000000e+00, double -4.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double 6.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double 0.000000e+00, double -2.000000e+00, double -1.000000e+00, double -2.000000e+00, double -1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -3.000000e+00, double 0.000000e+00, double 2.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -3.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double 2.000000e+00, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 6.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -5.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -3.000000e+00, double -3.000000e+00, double 0.000000e+00, double 2.000000e+00, double -1.000000e+00, double -2.000000e+00, double 1.000000e+01, double -1.000000e+00, double -1.000000e+00, double -3.000000e+00, double -1.000000e+00, double -3.000000e+00, double 0.000000e+00, double 1.000000e+00, double -1.000000e+00, double 1.000000e+00, double -3.000000e+00, double -3.000000e+00, double 1.000000e+00, double -4.000000e+00, double -4.000000e+00, double 1.100000e+01, double 1.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -2.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double 0.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double 4.000000e+00, double 1.000000e+00, double -3.000000e+00, double 1.000000e+00, double -1.000000e+00, double -2.000000e+00, double 0.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 5.000000e+00, double -5.000000e+00, double 0.000000e+00, double -7.000000e+00, double -4.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double 1.000000e+00, double -5.000000e+00, double -3.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double 1.000000e+00, double -3.000000e+00, double -3.000000e+00, double -5.000000e+00, double 2.000000e+01, double -4.000000e+00, double 0.000000e+00, double -4.000000e+00, double -1.000000e+00, double -6.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double 0.000000e+00, double -1.000000e+00, double 3.000000e+00, double -1.000000e+00, double -1.000000e+00, double 3.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double 5.000000e+00, double 9.000000e+00, double 1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double 4.000000e+00, double 1.000000e+00, double -2.000000e+00, double 0.000000e+00, double 1.000000e+00, double -4.000000e+00, double -1.000000e+00, double 1.000000e+00, double -3.000000e+00, double 1.000000e+00, double 5.000000e+00, double 0.000000e+00, double -2.000000e+00, double 4.000000e+00, double 5.000000e+00, double -2.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double 0.000000e+00, double -2.000000e+00, double -3.000000e+00, double -2.000000e+00, double 0.000000e+00, double 0.000000e+00, double -5.000000e+00, double -3.000000e+00, double -2.000000e+00, double 5.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 4.000000e+00, double 5.000000e+00, double -2.000000e+00, double 0.000000e+00, double -3.000000e+00, double -1.000000e+00, double 1.000000e+00, double -1.000000e+00, double -4.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00, double -2.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -2.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00], align 16
@__const.BLOSUMmtx.tmpmtx45 = private unnamed_addr constant [210 x double] [double 5.000000e+00, double -2.000000e+00, double 7.000000e+00, double -1.000000e+00, double 0.000000e+00, double 6.000000e+00, double -2.000000e+00, double -1.000000e+00, double 2.000000e+00, double 7.000000e+00, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double -3.000000e+00, double 1.200000e+01, double -1.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -3.000000e+00, double 6.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 2.000000e+00, double -3.000000e+00, double 2.000000e+00, double 6.000000e+00, double 0.000000e+00, double -2.000000e+00, double 0.000000e+00, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double -2.000000e+00, double 7.000000e+00, double -2.000000e+00, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double -3.000000e+00, double 1.000000e+00, double 0.000000e+00, double -2.000000e+00, double 1.000000e+01, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double -4.000000e+00, double -3.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -3.000000e+00, double 5.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -3.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -2.000000e+00, double 2.000000e+00, double 5.000000e+00, double -1.000000e+00, double 3.000000e+00, double 0.000000e+00, double 0.000000e+00, double -3.000000e+00, double 1.000000e+00, double 1.000000e+00, double -2.000000e+00, double -1.000000e+00, double -3.000000e+00, double -3.000000e+00, double 5.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -2.000000e+00, double 0.000000e+00, double -2.000000e+00, double -2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 2.000000e+00, double -1.000000e+00, double 6.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -4.000000e+00, double -2.000000e+00, double -4.000000e+00, double -3.000000e+00, double -3.000000e+00, double -2.000000e+00, double 0.000000e+00, double 1.000000e+00, double -3.000000e+00, double 0.000000e+00, double 8.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double -4.000000e+00, double -1.000000e+00, double 0.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double 9.000000e+00, double 1.000000e+00, double -1.000000e+00, double 1.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double 4.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double 2.000000e+00, double 5.000000e+00, double -2.000000e+00, double -2.000000e+00, double -4.000000e+00, double -4.000000e+00, double -5.000000e+00, double -2.000000e+00, double -3.000000e+00, double -2.000000e+00, double -3.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double 1.000000e+00, double -3.000000e+00, double -4.000000e+00, double -3.000000e+00, double 1.500000e+01, double -2.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double 2.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double 3.000000e+00, double -3.000000e+00, double -2.000000e+00, double -1.000000e+00, double 3.000000e+00, double 8.000000e+00, double 0.000000e+00, double -2.000000e+00, double -3.000000e+00, double -3.000000e+00, double -1.000000e+00, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double 3.000000e+00, double 1.000000e+00, double -2.000000e+00, double 1.000000e+00, double 0.000000e+00, double -3.000000e+00, double -1.000000e+00, double 0.000000e+00, double -3.000000e+00, double -1.000000e+00, double 5.000000e+00], align 16
@__const.BLOSUMmtx.tmpmtx50 = private unnamed_addr constant [210 x double] [double 5.000000e+00, double -2.000000e+00, double 7.000000e+00, double -1.000000e+00, double -1.000000e+00, double 7.000000e+00, double -2.000000e+00, double -2.000000e+00, double 2.000000e+00, double 8.000000e+00, double -1.000000e+00, double -4.000000e+00, double -2.000000e+00, double -4.000000e+00, double 1.300000e+01, double -1.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -3.000000e+00, double 7.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 2.000000e+00, double -3.000000e+00, double 2.000000e+00, double 6.000000e+00, double 0.000000e+00, double -3.000000e+00, double 0.000000e+00, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double -3.000000e+00, double 8.000000e+00, double -2.000000e+00, double 0.000000e+00, double 1.000000e+00, double -1.000000e+00, double -3.000000e+00, double 1.000000e+00, double 0.000000e+00, double -2.000000e+00, double 1.000000e+01, double -1.000000e+00, double -4.000000e+00, double -3.000000e+00, double -4.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -4.000000e+00, double -4.000000e+00, double 5.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -4.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -3.000000e+00, double 2.000000e+00, double 5.000000e+00, double -1.000000e+00, double 3.000000e+00, double 0.000000e+00, double -1.000000e+00, double -3.000000e+00, double 2.000000e+00, double 1.000000e+00, double -2.000000e+00, double 0.000000e+00, double -3.000000e+00, double -3.000000e+00, double 6.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -4.000000e+00, double -2.000000e+00, double 0.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double 2.000000e+00, double 3.000000e+00, double -2.000000e+00, double 7.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -5.000000e+00, double -2.000000e+00, double -4.000000e+00, double -3.000000e+00, double -4.000000e+00, double -1.000000e+00, double 0.000000e+00, double 1.000000e+00, double -4.000000e+00, double 0.000000e+00, double 8.000000e+00, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double -1.000000e+00, double -4.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -1.000000e+00, double -3.000000e+00, double -4.000000e+00, double 1.000000e+01, double 1.000000e+00, double -1.000000e+00, double 1.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00, double -3.000000e+00, double -3.000000e+00, double 0.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double 5.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -1.000000e+00, double 2.000000e+00, double 5.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -5.000000e+00, double -5.000000e+00, double -1.000000e+00, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double 1.000000e+00, double -4.000000e+00, double -4.000000e+00, double -3.000000e+00, double 1.500000e+01, double -2.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double 2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double 0.000000e+00, double 4.000000e+00, double -3.000000e+00, double -2.000000e+00, double -2.000000e+00, double 2.000000e+00, double 8.000000e+00, double 0.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -1.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -4.000000e+00, double 4.000000e+00, double 1.000000e+00, double -3.000000e+00, double 1.000000e+00, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double 0.000000e+00, double -3.000000e+00, double -1.000000e+00, double 5.000000e+00], align 16
@__const.BLOSUMmtx.tmpmtx62 = private unnamed_addr constant [210 x double] [double 6.000000e+00, double -2.000000e+00, double 8.000000e+00, double -2.000000e+00, double -1.000000e+00, double 8.000000e+00, double -3.000000e+00, double -2.000000e+00, double 2.000000e+00, double 9.000000e+00, double -1.000000e+00, double -5.000000e+00, double -4.000000e+00, double -5.000000e+00, double 1.300000e+01, double -1.000000e+00, double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double -4.000000e+00, double 8.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 2.000000e+00, double -5.000000e+00, double 3.000000e+00, double 7.000000e+00, double 0.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double -4.000000e+00, double -3.000000e+00, double -3.000000e+00, double 8.000000e+00, double -2.000000e+00, double 0.000000e+00, double 1.000000e+00, double -2.000000e+00, double -4.000000e+00, double 1.000000e+00, double 0.000000e+00, double -3.000000e+00, double 1.100000e+01, double -2.000000e+00, double -4.000000e+00, double -5.000000e+00, double -5.000000e+00, double -2.000000e+00, double -4.000000e+00, double -5.000000e+00, double -6.000000e+00, double -5.000000e+00, double 6.000000e+00, double -2.000000e+00, double -3.000000e+00, double -5.000000e+00, double -5.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -5.000000e+00, double -4.000000e+00, double 2.000000e+00, double 6.000000e+00, double -1.000000e+00, double 3.000000e+00, double 0.000000e+00, double -1.000000e+00, double -5.000000e+00, double 2.000000e+00, double 1.000000e+00, double -2.000000e+00, double -1.000000e+00, double -4.000000e+00, double -4.000000e+00, double 7.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -5.000000e+00, double -2.000000e+00, double -1.000000e+00, double -3.000000e+00, double -4.000000e+00, double -2.000000e+00, double 2.000000e+00, double 3.000000e+00, double -2.000000e+00, double 8.000000e+00, double -3.000000e+00, double -4.000000e+00, double -4.000000e+00, double -5.000000e+00, double -4.000000e+00, double -5.000000e+00, double -5.000000e+00, double -5.000000e+00, double -2.000000e+00, double 0.000000e+00, double 1.000000e+00, double -5.000000e+00, double 0.000000e+00, double 9.000000e+00, double -1.000000e+00, double -3.000000e+00, double -3.000000e+00, double -2.000000e+00, double -4.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -4.000000e+00, double -2.000000e+00, double -4.000000e+00, double -5.000000e+00, double 1.100000e+01, double 2.000000e+00, double -1.000000e+00, double 1.000000e+00, double 0.000000e+00, double -1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double -1.000000e+00, double -4.000000e+00, double -4.000000e+00, double 0.000000e+00, double -2.000000e+00, double -4.000000e+00, double -1.000000e+00, double 6.000000e+00, double 0.000000e+00, double -2.000000e+00, double 0.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -3.000000e+00, double -2.000000e+00, double 2.000000e+00, double 7.000000e+00, double -4.000000e+00, double -4.000000e+00, double -6.000000e+00, double -6.000000e+00, double -3.000000e+00, double -3.000000e+00, double -4.000000e+00, double -4.000000e+00, double -4.000000e+00, double -4.000000e+00, double -2.000000e+00, double -4.000000e+00, double -2.000000e+00, double 1.000000e+00, double -5.000000e+00, double -4.000000e+00, double -4.000000e+00, double 1.600000e+01, double -3.000000e+00, double -3.000000e+00, double -3.000000e+00, double -5.000000e+00, double -4.000000e+00, double -2.000000e+00, double -3.000000e+00, double -5.000000e+00, double 3.000000e+00, double -2.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double 4.000000e+00, double -4.000000e+00, double -3.000000e+00, double -2.000000e+00, double 3.000000e+00, double 1.000000e+01, double 0.000000e+00, double -4.000000e+00, double -4.000000e+00, double -5.000000e+00, double -1.000000e+00, double -3.000000e+00, double -4.000000e+00, double -5.000000e+00, double -5.000000e+00, double 4.000000e+00, double 1.000000e+00, double -3.000000e+00, double 1.000000e+00, double -1.000000e+00, double -4.000000e+00, double -2.000000e+00, double 0.000000e+00, double -4.000000e+00, double -2.000000e+00, double 6.000000e+00], align 16
@__const.BLOSUMmtx.tmpmtx80 = private unnamed_addr constant [210 x double] [double 7.000000e+00, double -3.000000e+00, double 9.000000e+00, double -3.000000e+00, double -1.000000e+00, double 9.000000e+00, double -3.000000e+00, double -3.000000e+00, double 2.000000e+00, double 1.000000e+01, double -1.000000e+00, double -6.000000e+00, double -5.000000e+00, double -7.000000e+00, double 1.300000e+01, double -2.000000e+00, double 1.000000e+00, double 0.000000e+00, double -1.000000e+00, double -5.000000e+00, double 9.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double 2.000000e+00, double -7.000000e+00, double 3.000000e+00, double 8.000000e+00, double 0.000000e+00, double -4.000000e+00, double -1.000000e+00, double -3.000000e+00, double -6.000000e+00, double -4.000000e+00, double -4.000000e+00, double 9.000000e+00, double -3.000000e+00, double 0.000000e+00, double 1.000000e+00, double -2.000000e+00, double -7.000000e+00, double 1.000000e+00, double 0.000000e+00, double -4.000000e+00, double 1.200000e+01, double -3.000000e+00, double -5.000000e+00, double -6.000000e+00, double -7.000000e+00, double -2.000000e+00, double -5.000000e+00, double -6.000000e+00, double -7.000000e+00, double -6.000000e+00, double 7.000000e+00, double -3.000000e+00, double -4.000000e+00, double -6.000000e+00, double -7.000000e+00, double -3.000000e+00, double -4.000000e+00, double -6.000000e+00, double -7.000000e+00, double -5.000000e+00, double 2.000000e+00, double 6.000000e+00, double -1.000000e+00, double 3.000000e+00, double 0.000000e+00, double -2.000000e+00, double -6.000000e+00, double 2.000000e+00, double 1.000000e+00, double -3.000000e+00, double -1.000000e+00, double -5.000000e+00, double -4.000000e+00, double 8.000000e+00, double -2.000000e+00, double -3.000000e+00, double -4.000000e+00, double -6.000000e+00, double -3.000000e+00, double -1.000000e+00, double -4.000000e+00, double -5.000000e+00, double -4.000000e+00, double 2.000000e+00, double 3.000000e+00, double -3.000000e+00, double 9.000000e+00, double -4.000000e+00, double -5.000000e+00, double -6.000000e+00, double -6.000000e+00, double -4.000000e+00, double -5.000000e+00, double -6.000000e+00, double -6.000000e+00, double -2.000000e+00, double -1.000000e+00, double 0.000000e+00, double -5.000000e+00, double 0.000000e+00, double 1.000000e+01, double -1.000000e+00, double -3.000000e+00, double -4.000000e+00, double -3.000000e+00, double -6.000000e+00, double -3.000000e+00, double -2.000000e+00, double -5.000000e+00, double -4.000000e+00, double -5.000000e+00, double -5.000000e+00, double -2.000000e+00, double -4.000000e+00, double -6.000000e+00, double 1.200000e+01, double 2.000000e+00, double -2.000000e+00, double 1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -2.000000e+00, double -4.000000e+00, double -4.000000e+00, double -1.000000e+00, double -3.000000e+00, double -4.000000e+00, double -2.000000e+00, double 7.000000e+00, double 0.000000e+00, double -2.000000e+00, double 0.000000e+00, double -2.000000e+00, double -2.000000e+00, double -1.000000e+00, double -2.000000e+00, double -3.000000e+00, double -3.000000e+00, double -2.000000e+00, double -3.000000e+00, double -1.000000e+00, double -1.000000e+00, double -4.000000e+00, double -3.000000e+00, double 2.000000e+00, double 8.000000e+00, double -5.000000e+00, double -5.000000e+00, double -7.000000e+00, double -8.000000e+00, double -5.000000e+00, double -4.000000e+00, double -6.000000e+00, double -6.000000e+00, double -4.000000e+00, double -5.000000e+00, double -4.000000e+00, double -6.000000e+00, double -3.000000e+00, double 0.000000e+00, double -7.000000e+00, double -6.000000e+00, double -5.000000e+00, double 1.600000e+01, double -4.000000e+00, double -4.000000e+00, double -4.000000e+00, double -6.000000e+00, double -5.000000e+00, double -3.000000e+00, double -5.000000e+00, double -6.000000e+00, double 3.000000e+00, double -3.000000e+00, double -2.000000e+00, double -4.000000e+00, double -3.000000e+00, double 4.000000e+00, double -6.000000e+00, double -3.000000e+00, double -3.000000e+00, double 3.000000e+00, double 1.100000e+01, double -1.000000e+00, double -4.000000e+00, double -5.000000e+00, double -6.000000e+00, double -2.000000e+00, double -4.000000e+00, double -4.000000e+00, double -6.000000e+00, double -5.000000e+00, double 4.000000e+00, double 1.000000e+00, double -4.000000e+00, double 1.000000e+00, double -2.000000e+00, double -4.000000e+00, double -3.000000e+00, double 0.000000e+00, double -5.000000e+00, double -3.000000e+00, double 7.000000e+00], align 16
@__const.BLOSUMmtx.tmpmtx0 = private unnamed_addr constant [210 x double] [double 2.400000e+00, double -6.000000e-01, double 4.700000e+00, double -3.000000e-01, double 3.000000e-01, double 3.800000e+00, double -3.000000e-01, double -3.000000e-01, double 2.200000e+00, double 4.700000e+00, double 5.000000e-01, double -2.200000e+00, double -1.800000e+00, double -3.200000e+00, double 1.150000e+01, double -2.000000e-01, double 1.500000e+00, double 0x3FE6666666666666, double 9.000000e-01, double -2.400000e+00, double 2.700000e+00, double 0.000000e+00, double 4.000000e-01, double 9.000000e-01, double 2.700000e+00, double -3.000000e+00, double 1.700000e+00, double 3.600000e+00, double 5.000000e-01, double -1.000000e+00, double 4.000000e-01, double 1.000000e-01, double -2.000000e+00, double -1.000000e+00, double -8.000000e-01, double 6.600000e+00, double -8.000000e-01, double 6.000000e-01, double 1.200000e+00, double 4.000000e-01, double -1.300000e+00, double 1.200000e+00, double 4.000000e-01, double -1.400000e+00, double 6.000000e+00, double -8.000000e-01, double -2.400000e+00, double -2.800000e+00, double -3.800000e+00, double -1.100000e+00, double -1.900000e+00, double -2.700000e+00, double -4.500000e+00, double -2.200000e+00, double 4.000000e+00, double -1.200000e+00, double -2.200000e+00, double -3.000000e+00, double -4.000000e+00, double -1.500000e+00, double -1.600000e+00, double -2.800000e+00, double -4.400000e+00, double -1.900000e+00, double 2.800000e+00, double 4.000000e+00, double -4.000000e-01, double 2.700000e+00, double 8.000000e-01, double 5.000000e-01, double -2.800000e+00, double 1.500000e+00, double 1.200000e+00, double -1.100000e+00, double 6.000000e-01, double -2.100000e+00, double -2.100000e+00, double 3.200000e+00, double 0xBFE6666666666666, double -1.700000e+00, double -2.200000e+00, double -3.000000e+00, double -9.000000e-01, double -1.000000e+00, double -2.000000e+00, double -3.500000e+00, double -1.300000e+00, double 2.500000e+00, double 2.800000e+00, double -1.400000e+00, double 4.300000e+00, double -2.300000e+00, double -3.200000e+00, double -3.100000e+00, double -4.500000e+00, double -8.000000e-01, double -2.600000e+00, double -3.900000e+00, double -5.200000e+00, double -1.000000e-01, double 1.000000e+00, double 2.000000e+00, double -3.300000e+00, double 1.600000e+00, double 7.000000e+00, double 3.000000e-01, double -9.000000e-01, double -9.000000e-01, double 0xBFE6666666666666, double -3.100000e+00, double -2.000000e-01, double -5.000000e-01, double -1.600000e+00, double -1.100000e+00, double -2.600000e+00, double -2.300000e+00, double -6.000000e-01, double -2.400000e+00, double -3.800000e+00, double 7.600000e+00, double 1.100000e+00, double -2.000000e-01, double 9.000000e-01, double 5.000000e-01, double 1.000000e-01, double 2.000000e-01, double 2.000000e-01, double 4.000000e-01, double -2.000000e-01, double -1.800000e+00, double -2.100000e+00, double 1.000000e-01, double -1.400000e+00, double -2.800000e+00, double 4.000000e-01, double 2.200000e+00, double 6.000000e-01, double -2.000000e-01, double 5.000000e-01, double 0.000000e+00, double -5.000000e-01, double 0.000000e+00, double -1.000000e-01, double -1.100000e+00, double -3.000000e-01, double -6.000000e-01, double -1.300000e+00, double 1.000000e-01, double -6.000000e-01, double -2.200000e+00, double 1.000000e-01, double 1.500000e+00, double 2.500000e+00, double -3.600000e+00, double -1.600000e+00, double -3.600000e+00, double -5.200000e+00, double -1.000000e+00, double -2.700000e+00, double -4.300000e+00, double -4.000000e+00, double -8.000000e-01, double -1.800000e+00, double 0xBFE6666666666666, double -3.500000e+00, double -1.000000e+00, double 3.600000e+00, double -5.000000e+00, double -3.300000e+00, double -3.500000e+00, double 1.420000e+01, double -2.200000e+00, double -1.800000e+00, double -1.400000e+00, double -2.800000e+00, double -5.000000e-01, double -1.700000e+00, double -2.700000e+00, double -4.000000e+00, double 2.200000e+00, double 0xBFE6666666666666, double 0.000000e+00, double -2.100000e+00, double -2.000000e-01, double 5.100000e+00, double -3.100000e+00, double -1.900000e+00, double -1.900000e+00, double 4.100000e+00, double 0x401F333333333333, double 1.000000e-01, double -2.000000e+00, double -2.200000e+00, double -2.900000e+00, double 0.000000e+00, double -1.500000e+00, double -1.900000e+00, double -3.300000e+00, double -2.000000e+00, double 3.100000e+00, double 1.800000e+00, double -1.700000e+00, double 1.600000e+00, double 1.000000e-01, double -1.800000e+00, double -1.000000e+00, double 0.000000e+00, double -2.600000e+00, double -1.100000e+00, double 3.400000e+00], align 16
@.str = private unnamed_addr constant [13 x i8] c"blosum %d ?\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"%s%d (%d), %6.3f (%6.3f), %6.3f (%6.3f)\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"RNA\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"DNA\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"average = %f\0A\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"generating %dPAM scoring matrix for nucleotides ... \00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c" TPM \0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"%+#6.10f\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"WARNING: pamx[i][j] = 0.0 ?\0A\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c" after log\0A\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c" after shishagonyuu\0A\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c" before dis\0A\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c" score matrix  \0A\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"%+6d\00", align 1
@.str.16 = private unnamed_addr constant [28 x i8] c"ribosum after shishagonyuu\0A\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"ribosum16 after shishagonyuu\0A\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"%+#7.0f\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"ribosumdis\0A\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%+5d\00", align 1
@.str.21 = private unnamed_addr constant [36 x i8] c"User-defined, %6.3f, %+6.3f, %+6.3f\00", align 1
@.str.22 = private unnamed_addr constant [32 x i8] c"BLOSUM%d, %6.3f, %+6.3f, %+6.3f\00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c" scoring matrix  \0A\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"%c    \00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"%5.0f\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"     \00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"    %c\00", align 1
@.str.28 = private unnamed_addr constant [19 x i8] c"itch average = %f\0A\00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c"parameters: %d, %d, %d\0A\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"Not supported\0A\00", align 1
@.str.32 = private unnamed_addr constant [23 x i8] c"%s %dPAM, %6.3f, %6.3f\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c"Transmembrane\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"JTT\00", align 1
@.str.35 = private unnamed_addr constant [56 x i8] c"generating %dPAM %s scoring matrix for amino acids ... \00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"pam1 = \0A\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"%9.6f \00", align 1
@.str.38 = private unnamed_addr constant [30 x i8] c"WARNING: pamx[%d][%d] = 0.0?\0A\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"scoremtx = %d\0A\00", align 1
@.str.40 = private unnamed_addr constant [13 x i8] c"datafreq = \0A\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"total = %f\0A\00", align 1
@amino_grp = internal global [128 x i8] zeroinitializer, align 16
@amino_disLN = internal global [128 x [128 x i32]] zeroinitializer, align 16
@amino = internal global [26 x i8] zeroinitializer, align 16
@penaltyLN = internal global i32 0, align 4
@RNApenalty_ex = internal global i32 0, align 4
@RNAppenalty_ex = internal global i32 0, align 4
@penalty_exLN = internal global i32 0, align 4
@penalty_EX = internal global i32 0, align 4
@offsetLN = internal global i32 0, align 4
@offsetFFT = internal global i32 0, align 4
@rnakozo = internal global i32 0, align 4
@.str.95 = private unnamed_addr constant [18 x i8] c"Allocation error\0A\00", align 1
@n20or4or2 = internal unnamed_addr global i32 0, align 4
@.str.1.96 = private unnamed_addr constant [10 x i8] c" FFT ... \00", align 1
@polarity = internal global [20 x double] zeroinitializer, align 16
@volume = internal global [20 x double] zeroinitializer, align 16
@.str.2.97 = private unnamed_addr constant [20 x i8] c"TOO MANY SEGMENTS.\0A\00", align 1
@.str.4.98 = private unnamed_addr constant [22 x i8] c"Cannot detect anchor!\00", align 1
@.str.6.101 = private unnamed_addr constant [11 x i8] c"REPEAT!? \0A\00", align 1
@.str.7.103 = private unnamed_addr constant [10 x i8] c"alg = %c\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"ERROR IN SOURCE FILE Falign.c\00", align 1
@.str.9.105 = private unnamed_addr constant [24 x i8] c"LENGTH OVER in Falign\0A \00", align 1
@Falign.prevalloclen = internal unnamed_addr global i32 0, align 4
@Falign.crossscoresize = internal unnamed_addr global i32 0, align 4
@Falign.tmpseq1 = internal unnamed_addr global ptr null, align 8
@Falign.tmpseq2 = internal unnamed_addr global ptr null, align 8
@Falign.tmpptr1 = internal unnamed_addr global ptr null, align 8
@Falign.tmpptr2 = internal unnamed_addr global ptr null, align 8
@Falign.tmpres1 = internal unnamed_addr global ptr null, align 8
@Falign.tmpres2 = internal unnamed_addr global ptr null, align 8
@Falign.result1 = internal unnamed_addr global ptr null, align 8
@Falign.result2 = internal unnamed_addr global ptr null, align 8
@Falign.seqVector1 = internal unnamed_addr global ptr null, align 8
@Falign.seqVector2 = internal unnamed_addr global ptr null, align 8
@Falign.naiseki = internal unnamed_addr global ptr null, align 8
@Falign.naisekiNoWa = internal unnamed_addr global ptr null, align 8
@Falign.soukan = internal unnamed_addr global ptr null, align 8
@Falign.crossscore = internal unnamed_addr global ptr null, align 8
@Falign.kouho = internal unnamed_addr global ptr null, align 8
@Falign.segment = internal unnamed_addr global ptr null, align 8
@Falign.segment1 = internal unnamed_addr global ptr null, align 8
@Falign.segment2 = internal unnamed_addr global ptr null, align 8
@Falign.sortedseg1 = internal unnamed_addr global ptr null, align 8
@Falign.sortedseg2 = internal unnamed_addr global ptr null, align 8
@Falign.cut1 = internal unnamed_addr global ptr null, align 8
@Falign.cut2 = internal unnamed_addr global ptr null, align 8
@Falign.sgap1 = internal unnamed_addr global ptr null, align 8
@Falign.egap1 = internal unnamed_addr global ptr null, align 8
@Falign.sgap2 = internal unnamed_addr global ptr null, align 8
@Falign.egap2 = internal unnamed_addr global ptr null, align 8
@Falign.localalloclen = internal unnamed_addr global i32 0, align 4
@.str.10.99 = private unnamed_addr constant [40 x i8] c"######allocating crossscore, size = %d\0A\00", align 1
@.str.11.100 = private unnamed_addr constant [18 x i8] c"%d anchors found\0A\00", align 1
@.str.12.102 = private unnamed_addr constant [15 x i8] c"Not supported\0A\00", align 1
@.str.13.104 = private unnamed_addr constant [40 x i8] c"totallen=%d +  nlen=%d > alloclen = %d\0A\00", align 1
@mymergesort.allo = internal unnamed_addr global i32 0, align 4
@mymergesort.work = internal unnamed_addr global ptr null, align 8
@fft.last_n = internal unnamed_addr global i32 0, align 4
@fft.bitrev = internal unnamed_addr global ptr null, align 8
@fft.sintbl = internal unnamed_addr global ptr null, align 8
@.str.4.112 = private unnamed_addr constant [33 x i8] c"Cannot allocate %d FukusosuuVec\0A\00", align 1
@.str.5.115 = private unnamed_addr constant [41 x i8] c"Cannot allocate %d x %d FukusosuuVecMtx\0A\00", align 1
@alignableReagion.stra = internal unnamed_addr global ptr null, align 8
@alignableReagion.alloclen = internal unnamed_addr global i32 0, align 4
@alignableReagion.threshold = internal unnamed_addr global double 0.000000e+00, align 8
@alignableReagion.prf1 = internal unnamed_addr global [26 x double] zeroinitializer, align 16
@alignableReagion.prf2 = internal unnamed_addr global [26 x double] zeroinitializer, align 16
@alignableReagion.hat1 = internal unnamed_addr global [27 x i32] zeroinitializer, align 16
@alignableReagion.hat2 = internal unnamed_addr global [27 x i32] zeroinitializer, align 16
@n_disFFT = internal global [26 x [26 x i32]] zeroinitializer, align 16
@.str.7.126 = private unnamed_addr constant [19 x i8] c"TOO MANY SEGMENTS!\00", align 1
@blockAlign2.crossscoresize = internal unnamed_addr global i32 0, align 4
@blockAlign2.result1 = internal unnamed_addr global [100000 x i32] zeroinitializer, align 16
@blockAlign2.result2 = internal unnamed_addr global [100000 x i32] zeroinitializer, align 16
@blockAlign2.ocut1 = internal unnamed_addr global [100000 x i32] zeroinitializer, align 16
@blockAlign2.ocut2 = internal unnamed_addr global [100000 x i32] zeroinitializer, align 16
@blockAlign2.crossscore = internal unnamed_addr global ptr null, align 8
@blockAlign2.track = internal unnamed_addr global ptr null, align 8
@blockAlign2.maxj = internal unnamed_addr global double 0.000000e+00, align 8
@.str.10.129 = private unnamed_addr constant [44 x i8] c"allocating crossscore and track, size = %d\0A\00", align 1
@G__align11.m = internal unnamed_addr global ptr null, align 8
@G__align11.ijp = internal unnamed_addr global ptr null, align 8
@G__align11.mp = internal unnamed_addr global ptr null, align 8
@G__align11.w1 = internal unnamed_addr global ptr null, align 8
@G__align11.w2 = internal unnamed_addr global ptr null, align 8
@G__align11.match = internal unnamed_addr global ptr null, align 8
@G__align11.initverticalw = internal unnamed_addr global ptr null, align 8
@G__align11.lastverticalw = internal unnamed_addr global ptr null, align 8
@G__align11.mseq1 = internal unnamed_addr global ptr null, align 8
@G__align11.mseq2 = internal unnamed_addr global ptr null, align 8
@G__align11.mseq = internal unnamed_addr global ptr null, align 8
@G__align11.intwork = internal unnamed_addr global ptr null, align 8
@G__align11.floatwork = internal unnamed_addr global ptr null, align 8
@G__align11.orlgth1 = internal unnamed_addr global i32 0, align 4
@G__align11.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.132 = private unnamed_addr constant [35 x i8] c"WARNING (g11): lgth1=%d, lgth2=%d\0A\00", align 1
@.str.1.133 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.2.134 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@G__align11_noalign.m = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.w1 = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.w2 = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.match = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.initverticalw = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.lastverticalw = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.intwork = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.floatwork = internal unnamed_addr global ptr null, align 8
@G__align11_noalign.orlgth1 = internal unnamed_addr global i32 0, align 4
@G__align11_noalign.orlgth2 = internal unnamed_addr global i32 0, align 4
@genL__align11.m = internal unnamed_addr global ptr null, align 8
@genL__align11.largeM = internal unnamed_addr global ptr null, align 8
@genL__align11.ijpi = internal unnamed_addr global ptr null, align 8
@genL__align11.ijpj = internal unnamed_addr global ptr null, align 8
@genL__align11.mp = internal unnamed_addr global ptr null, align 8
@genL__align11.Mp = internal unnamed_addr global ptr null, align 8
@genL__align11.w1 = internal unnamed_addr global ptr null, align 8
@genL__align11.w2 = internal unnamed_addr global ptr null, align 8
@genL__align11.match = internal unnamed_addr global ptr null, align 8
@genL__align11.initverticalw = internal unnamed_addr global ptr null, align 8
@genL__align11.lastverticalw = internal unnamed_addr global ptr null, align 8
@genL__align11.mseq1 = internal unnamed_addr global ptr null, align 8
@genL__align11.mseq2 = internal unnamed_addr global ptr null, align 8
@genL__align11.mseq = internal unnamed_addr global ptr null, align 8
@genL__align11.cpmx1 = internal unnamed_addr global ptr null, align 8
@genL__align11.cpmx2 = internal unnamed_addr global ptr null, align 8
@genL__align11.intwork = internal unnamed_addr global ptr null, align 8
@genL__align11.floatwork = internal unnamed_addr global ptr null, align 8
@genL__align11.orlgth1 = internal unnamed_addr global i32 0, align 4
@genL__align11.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.1.135 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.2.136 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@genG__align11.m = internal unnamed_addr global ptr null, align 8
@genG__align11.largeM = internal unnamed_addr global ptr null, align 8
@genG__align11.ijpi = internal unnamed_addr global ptr null, align 8
@genG__align11.ijpj = internal unnamed_addr global ptr null, align 8
@genG__align11.mp = internal unnamed_addr global ptr null, align 8
@genG__align11.Mp = internal unnamed_addr global ptr null, align 8
@genG__align11.w1 = internal unnamed_addr global ptr null, align 8
@genG__align11.w2 = internal unnamed_addr global ptr null, align 8
@genG__align11.match = internal unnamed_addr global ptr null, align 8
@genG__align11.initverticalw = internal unnamed_addr global ptr null, align 8
@genG__align11.lastverticalw = internal unnamed_addr global ptr null, align 8
@genG__align11.mseq1 = internal unnamed_addr global ptr null, align 8
@genG__align11.mseq2 = internal unnamed_addr global ptr null, align 8
@genG__align11.mseq = internal unnamed_addr global ptr null, align 8
@genG__align11.cpmx1 = internal unnamed_addr global ptr null, align 8
@genG__align11.cpmx2 = internal unnamed_addr global ptr null, align 8
@genG__align11.intwork = internal unnamed_addr global ptr null, align 8
@genG__align11.floatwork = internal unnamed_addr global ptr null, align 8
@genG__align11.orlgth1 = internal unnamed_addr global i32 0, align 4
@genG__align11.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.137 = private unnamed_addr constant [35 x i8] c"WARNING (g11): lgth1=%d, lgth2=%d\0A\00", align 1
@.str.1.138 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.2.139 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@impmtx = internal unnamed_addr global ptr null, align 8
@H__align.m = internal unnamed_addr global ptr null, align 8
@H__align.ijp = internal unnamed_addr global ptr null, align 8
@H__align.mp = internal unnamed_addr global ptr null, align 8
@H__align.w1 = internal unnamed_addr global ptr null, align 8
@H__align.w2 = internal unnamed_addr global ptr null, align 8
@H__align.match = internal unnamed_addr global ptr null, align 8
@H__align.initverticalw = internal unnamed_addr global ptr null, align 8
@H__align.lastverticalw = internal unnamed_addr global ptr null, align 8
@H__align.mseq1 = internal unnamed_addr global ptr null, align 8
@H__align.mseq2 = internal unnamed_addr global ptr null, align 8
@H__align.mseq = internal unnamed_addr global ptr null, align 8
@H__align.gappat1 = internal unnamed_addr global ptr null, align 8
@H__align.gappat2 = internal unnamed_addr global ptr null, align 8
@H__align.digf1 = internal unnamed_addr global ptr null, align 8
@H__align.digf2 = internal unnamed_addr global ptr null, align 8
@H__align.diaf1 = internal unnamed_addr global ptr null, align 8
@H__align.diaf2 = internal unnamed_addr global ptr null, align 8
@H__align.gapz1 = internal unnamed_addr global ptr null, align 8
@H__align.gapz2 = internal unnamed_addr global ptr null, align 8
@H__align.gapf1 = internal unnamed_addr global ptr null, align 8
@H__align.gapf2 = internal unnamed_addr global ptr null, align 8
@H__align.ogcp1g = internal unnamed_addr global ptr null, align 8
@H__align.ogcp2g = internal unnamed_addr global ptr null, align 8
@H__align.fgcp1g = internal unnamed_addr global ptr null, align 8
@H__align.fgcp2g = internal unnamed_addr global ptr null, align 8
@H__align.ogcp1 = internal unnamed_addr global ptr null, align 8
@H__align.ogcp2 = internal unnamed_addr global ptr null, align 8
@H__align.fgcp1 = internal unnamed_addr global ptr null, align 8
@H__align.fgcp2 = internal unnamed_addr global ptr null, align 8
@H__align.cpmx1 = internal unnamed_addr global ptr null, align 8
@H__align.cpmx2 = internal unnamed_addr global ptr null, align 8
@H__align.intwork = internal unnamed_addr global ptr null, align 8
@H__align.floatwork = internal unnamed_addr global ptr null, align 8
@H__align.orlgth1 = internal unnamed_addr global i32 0, align 4
@H__align.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.142 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.1.143 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@.str.2.144 = private unnamed_addr constant [9 x i8] c"wm = %f\0A\00", align 1
@.str.5.147 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@upperCase = internal unnamed_addr global i32 0, align 4
@.str.16.148 = private unnamed_addr constant [17 x i8] c"reallocating...\0A\00", align 1
@.str.17.149 = private unnamed_addr constant [50 x i8] c"Allocation error in load1SeqWithoutName_realloc \0A\00", align 1
@.str.18.150 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@readData.tmpseq = internal unnamed_addr global ptr null, align 8
@.str.22.152 = private unnamed_addr constant [5 x i8] c"%5d\0A\00", align 1
@.str.24.151 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@.str.26.153 = private unnamed_addr constant [9 x i8] c" %#6.3f\0A\00", align 1
@.str.27.154 = private unnamed_addr constant [9 x i8] c"%4d. %s\0A\00", align 1
@.str.28.155 = private unnamed_addr constant [7 x i8] c"%#6.3f\00", align 1
@.str.29.156 = private unnamed_addr constant [14 x i8] c"%d-%d d=%.3f\0A\00", align 1
@prep_g = internal global ptr null, align 8
@.str.67 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@ppid = internal global i32 0, align 4
@signalSM = internal global ptr null, align 8
@.str.69 = private unnamed_addr constant [12 x i8] c"/tmp/pre.%d\00", align 1
@.str.70 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.71 = private unnamed_addr constant [16 x i8] c"Cannot open pre\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"trace\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"cannot open trace\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"PID = %d\0A\00", align 1
@.str.79 = private unnamed_addr constant [18 x i8] c"freeing localhom\0A\00", align 1
@.str.86 = private unnamed_addr constant [21 x i8] c"ARNDCQEGHILKMFPSTWYV\00", align 1
@.str.87 = private unnamed_addr constant [7 x i8] c"_aamtx\00", align 1
@.str.88 = private unnamed_addr constant [46 x i8] c"User-defined matrix is not supported for DNA\0A\00", align 1
@.str.89 = private unnamed_addr constant [29 x i8] c"Cannot open the _aamtx file\0A\00", align 1
@.str.90 = private unnamed_addr constant [40 x i8] c"%c: not found in the first 20 letters.\0A\00", align 1
@.str.91 = private unnamed_addr constant [14 x i8] c"inorder = %s\0A\00", align 1
@.str.96 = private unnamed_addr constant [11 x i8] c"; ALIGNING\00", align 1
@.str.97 = private unnamed_addr constant [37 x i8] c"; ALIGNING            %d against %d\0A\00", align 1
@.str.98 = private unnamed_addr constant [20 x i8] c"Error in FOLDALIGN\0A\00", align 1
@.str.99 = private unnamed_addr constant [26 x i8] c"qstr = %s, but gett = %s\0A\00", align 1
@.str.100 = private unnamed_addr constant [11 x i8] c"; --------\00", align 1
@.str.101 = private unnamed_addr constant [11 x i8] c"; ********\00", align 1
@.str.102 = private unnamed_addr constant [18 x i8] c"%c %c %s %s %d %d\00", align 1
@.str.103 = private unnamed_addr constant [21 x i8] c"Error in foldalign?\0A\00", align 1
@.str.112 = private unnamed_addr constant [27 x i8] c"Format error in aa matrix\0A\00", align 1
@.str.113 = private unnamed_addr constant [12 x i8] c"# Example:\0A\00", align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"# comment\0A\00", align 1
@.str.115 = private unnamed_addr constant [63 x i8] c"   A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V\0A\00", align 1
@.str.116 = private unnamed_addr constant [63 x i8] c"A  4 -1 -2 -2  0 -1 -1  0 -2 -1 -1 -1 -1 -2 -1  1  0 -3 -2  0\0A\00", align 1
@.str.117 = private unnamed_addr constant [63 x i8] c"R -1  5  0 -2 -3  1  0 -2  0 -3 -2  2 -1 -3 -2 -1 -1 -3 -2 -3\0A\00", align 1
@.str.118 = private unnamed_addr constant [5 x i8] c"...\0A\00", align 1
@.str.119 = private unnamed_addr constant [63 x i8] c"V  0 -3 -3 -3 -1 -2 -2 -3 -3  3  1 -2  1 -1 -2 -2  0 -3 -1  4\0A\00", align 1
@.str.120 = private unnamed_addr constant [40 x i8] c"frequency 0.07 0.05 0.04 0.05 0.02 .. \0A\00", align 1
@.str.121 = private unnamed_addr constant [15 x i8] c"# Example end\0A\00", align 1
@.str.122 = private unnamed_addr constant [31 x i8] c"Only the lower half is loaded\0A\00", align 1
@.str.123 = private unnamed_addr constant [40 x i8] c"The last line (frequency) is optional.\0A\00", align 1
@L__align11.m = internal unnamed_addr global ptr null, align 8
@L__align11.ijp = internal unnamed_addr global ptr null, align 8
@L__align11.mp = internal unnamed_addr global ptr null, align 8
@L__align11.w1 = internal unnamed_addr global ptr null, align 8
@L__align11.w2 = internal unnamed_addr global ptr null, align 8
@L__align11.match = internal unnamed_addr global ptr null, align 8
@L__align11.initverticalw = internal unnamed_addr global ptr null, align 8
@L__align11.lastverticalw = internal unnamed_addr global ptr null, align 8
@L__align11.mseq1 = internal unnamed_addr global ptr null, align 8
@L__align11.mseq2 = internal unnamed_addr global ptr null, align 8
@L__align11.mseq = internal unnamed_addr global ptr null, align 8
@L__align11.orlgth1 = internal unnamed_addr global i32 0, align 4
@L__align11.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.1.159 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.2.160 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@RNApenalty = internal global i32 0, align 4
@RNAthr = internal global i32 0, align 4
@.str.161 = private unnamed_addr constant [76 x i8] c"========================================================================= \0A\00", align 1
@.str.1.162 = private unnamed_addr constant [6 x i8] c"=== \0A\00", align 1
@.str.2.163 = private unnamed_addr constant [31 x i8] c"=== Alphabet '%c' is unknown.\0A\00", align 1
@.str.3.164 = private unnamed_addr constant [42 x i8] c"=== Please check site %d in sequence %d.\0A\00", align 1
@amino_dis_consweight_multi = internal global [128 x [128 x double]] zeroinitializer, align 16
@.str.34.193 = private unnamed_addr constant [30 x i8] c"Cannot allocate gappattern!'n\00", align 1
@.str.35.194 = private unnamed_addr constant [54 x i8] c"Use an approximate method, with the --mafft5 option.\0A\00", align 1
@.str.195 = private unnamed_addr constant [27 x i8] c"prevhiti = %d, lgth1 = %d\0A\00", align 1
@.str.1.196 = private unnamed_addr constant [27 x i8] c"prevhitj = %d, lgth2 = %d\0A\00", align 1
@.str.2.197 = private unnamed_addr constant [6 x i8] c"hit!\0A\00", align 1
@MSalign11.mi = internal unnamed_addr global float 0.000000e+00, align 4
@MSalign11.m = internal unnamed_addr global ptr null, align 8
@MSalign11.ijp = internal unnamed_addr global ptr null, align 8
@MSalign11.mpi = internal unnamed_addr global i32 0, align 4
@MSalign11.mp = internal unnamed_addr global ptr null, align 8
@MSalign11.w1 = internal unnamed_addr global ptr null, align 8
@MSalign11.w2 = internal unnamed_addr global ptr null, align 8
@MSalign11.match = internal unnamed_addr global ptr null, align 8
@MSalign11.initverticalw = internal unnamed_addr global ptr null, align 8
@MSalign11.lastverticalw = internal unnamed_addr global ptr null, align 8
@MSalign11.mseq1 = internal unnamed_addr global ptr null, align 8
@MSalign11.mseq2 = internal unnamed_addr global ptr null, align 8
@MSalign11.mseq = internal unnamed_addr global ptr null, align 8
@MSalign11.cpmx1 = internal unnamed_addr global ptr null, align 8
@MSalign11.cpmx2 = internal unnamed_addr global ptr null, align 8
@MSalign11.intwork = internal unnamed_addr global ptr null, align 8
@MSalign11.WMMTX = internal unnamed_addr global ptr null, align 8
@MSalign11.floatwork = internal unnamed_addr global ptr null, align 8
@MSalign11.orlgth1 = internal unnamed_addr global i32 0, align 4
@MSalign11.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.3.203 = private unnamed_addr constant [35 x i8] c"currentw[0]  = %f, *maxinwpt = %f\0A\00", align 1
@.str.4.204 = private unnamed_addr constant [17 x i8] c"maxinw[%d] = %f\0A\00", align 1
@.str.5.205 = private unnamed_addr constant [17 x i8] c"maxinh[%d] = %f\0A\00", align 1
@.str.6.206 = private unnamed_addr constant [20 x i8] c"wmmax = %f (%d,%d)\0A\00", align 1
@.str.7.207 = private unnamed_addr constant [12 x i8] c"wmmax = %f\0A\00", align 1
@.str.9.208 = private unnamed_addr constant [11 x i8] c">MSres\0A%s\0A\00", align 1
@.str.10.209 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.11.210 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@.str.12.211 = private unnamed_addr constant [6 x i8] c">\0A%s\0A\00", align 1
@.str.13.198 = private unnamed_addr constant [19 x i8] c"i=%d, prevhiti=%d\0A\00", align 1
@.str.14.199 = private unnamed_addr constant [19 x i8] c"j=%d, prevhitj=%d\0A\00", align 1
@.str.15.200 = private unnamed_addr constant [6 x i8] c"l=%d\0A\00", align 1
@.str.16.201 = private unnamed_addr constant [32 x i8] c"added %c to mseq1, mseq1 = %s \0A\00", align 1
@.str.17.202 = private unnamed_addr constant [32 x i8] c"added %c to mseq2, mseq2 = %s \0A\00", align 1
@.str.214 = private unnamed_addr constant [13 x i8] c"i = %d / %d\0A\00", align 1
@.str.1.215 = private unnamed_addr constant [28 x i8] c"bug! hairetsu ga kowareta!\0A\00", align 1
@.str.2.216 = private unnamed_addr constant [13 x i8] c"j = %d / %d\0A\00", align 1
@.str.3.217 = private unnamed_addr constant [70 x i8] c"bug! hairetsu ga kowareta! (nglen1) seqlen(seq1[0])=%d but nglen1=%d\0A\00", align 1
@.str.4.218 = private unnamed_addr constant [14 x i8] c"seq1[0] = %s\0A\00", align 1
@.str.5.219 = private unnamed_addr constant [70 x i8] c"bug! hairetsu ga kowareta! (nglen2) seqlen(seq2[0])=%d but nglen2=%d\0A\00", align 1
@.str.6.220 = private unnamed_addr constant [43 x i8] c"hairetsu ga kowareta (end of MSalignmm) !\0A\00", align 1
@reccycle = internal unnamed_addr global i32 0, align 4
@.str.228 = private unnamed_addr constant [38 x i8] c"Cannot allocate %d character vector.\0A\00", align 1
@.str.2.231 = private unnamed_addr constant [43 x i8] c"Cannot allocate %d x %d character matrix.\0A\00", align 1
@.str.3.236 = private unnamed_addr constant [35 x i8] c"Allocation error ( %d fload vec )\0A\00", align 1
@.str.6.241 = private unnamed_addr constant [40 x i8] c"Allocation error ( %d x %d fload mtx )\0A\00", align 1
@.str.7.242 = private unnamed_addr constant [38 x i8] c"Allocation error( %d x %d floatmtx )\0A\00", align 1
@.str.8.247 = private unnamed_addr constant [32 x i8] c"Allocation error( %d int vec )\0A\00", align 1
@.str.10.252 = private unnamed_addr constant [37 x i8] c"Allocation error( %d x %d int mtx )\0A\00", align 1
@.str.13.261 = private unnamed_addr constant [27 x i8] c"cannot allocate DoubleMtx\0A\00", align 1
@foldalignopt = internal global [1000 x i8] zeroinitializer, align 16
@laraparams = internal unnamed_addr global ptr null, align 8
@inputfile = internal global ptr null, align 8
@fftkeika = internal global i32 0, align 4
@pslocal = internal global i32 0, align 4
@constraint = internal global i32 0, align 4
@nblosum = internal global i32 0, align 4
@fmodel = internal global i32 0, align 4
@calledByXced = internal global i32 0, align 4
@devide = internal global i32 0, align 4
@use_fft = internal global i8 0, align 1
@fftscore = internal global i32 0, align 4
@fftRepeatStop = internal global i32 0, align 4
@fftNoAnchStop = internal global i32 0, align 4
@weight = internal global i32 0, align 4
@utree = internal global i32 0, align 4
@tbutree = internal global i32 0, align 4
@refine = internal global i32 0, align 4
@check = internal global i32 0, align 4
@cut = internal global double 0.000000e+00, align 8
@disp = internal global i32 0, align 4
@alg = internal global i8 0, align 1
@mix = internal global i32 0, align 4
@tbitr = internal global i32 0, align 4
@scmtd = internal global i32 0, align 4
@tbweight = internal global i32 0, align 4
@tbrweight = internal global i32 0, align 4
@checkC = internal global i32 0, align 4
@treemethod = internal global i32 0, align 4
@contin = internal global i32 0, align 4
@scoremtx = internal global i32 0, align 4
@kobetsubunkatsu = internal global i32 0, align 4
@divpairscore = internal global i32 0, align 4
@out_align_instead_of_hat3 = internal unnamed_addr global i1 false, align 4
@dorp = internal global i32 0, align 4
@ppenalty = internal global i32 0, align 4
@ppenalty_OP = internal global i32 0, align 4
@ppenalty_ex = internal global i32 0, align 4
@ppenalty_EX = internal global i32 0, align 4
@poffset = internal global i32 0, align 4
@kimuraR = internal global i32 0, align 4
@pamN = internal global i32 0, align 4
@fftWinSize = internal global i32 0, align 4
@fftThreshold = internal global i32 0, align 4
@RNAppenalty = internal global i32 0, align 4
@RNApthr = internal global i32 0, align 4
@.str.264 = private unnamed_addr constant [16 x i8] c"inputfile = %s\0A\00", align 1
@TMorJTT = internal global i32 0, align 4
@.str.1.265 = private unnamed_addr constant [8 x i8] c"jtt %d\0A\00", align 1
@.str.2.266 = private unnamed_addr constant [7 x i8] c"TM %d\0A\00", align 1
@ppslocal = internal global i32 0, align 4
@whereispairalign = internal unnamed_addr global ptr null, align 8
@.str.3.267 = private unnamed_addr constant [23 x i8] c"whereispairalign = %s\0A\00", align 1
@.str.4.268 = private unnamed_addr constant [17 x i8] c"laraparams = %s\0A\00", align 1
@.str.6.269 = private unnamed_addr constant [19 x i8] c"foldalignopt = %s\0A\00", align 1
@.str.7.270 = private unnamed_addr constant [19 x i8] c"illegal option %c\0A\00", align 1
@.str.8.271 = private unnamed_addr constant [30 x i8] c"options: Check source file !\0A\00", align 1
@.str.9.272 = private unnamed_addr constant [33 x i8] c"conflicting options : o, m or u\0A\00", align 1
@.str.10.273 = private unnamed_addr constant [28 x i8] c"conflicting options : C, o\0A\00", align 1
@main.nlen = internal global [50000 x i32] zeroinitializer, align 16
@main.name = internal global [50000 x [256 x i8]] zeroinitializer, align 16
@main.seq = internal unnamed_addr global ptr null, align 8
@main.mseq1 = internal unnamed_addr global ptr null, align 8
@main.mseq2 = internal unnamed_addr global ptr null, align 8
@main.aseq = internal unnamed_addr global ptr null, align 8
@main.bseq = internal unnamed_addr global ptr null, align 8
@main.eff = internal unnamed_addr global ptr null, align 8
@.str.11.274 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.12.275 = private unnamed_addr constant [16 x i8] c"Cannot open %s\0A\00", align 1
@stdin = external local_unnamed_addr global ptr, align 8
@.str.13.276 = private unnamed_addr constant [63 x i8] c"At least 2 sequences should be input!\0AOnly %d sequence found.\0A\00", align 1
@.str.14.277 = private unnamed_addr constant [38 x i8] c"The number of sequences must be < %d\0A\00", align 1
@.str.15.278 = private unnamed_addr constant [57 x i8] c"Please try the splittbfast program for such large data.\0A\00", align 1
@nlenmax = internal global i32 0, align 4
@trap_g = internal global ptr null, align 8
@.str.16.299 = private unnamed_addr constant [22 x i8] c"Illegal character %c\0A\00", align 1
@.str.17.304 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@.str.18.315 = private unnamed_addr constant [41 x i8] c"%s (%s) Version 6.624b alg=%c, model=%s\0A\00", align 1
@.str.19.316 = private unnamed_addr constant [11 x i8] c"<progname>\00", align 1
@.str.20.313 = private unnamed_addr constant [4 x i8] c"nuc\00", align 1
@.str.21.314 = private unnamed_addr constant [3 x i8] c"aa\00", align 1
@modelname = internal global [100 x i8] zeroinitializer, align 16
@.str.22.279 = private unnamed_addr constant [5 x i8] c"DNA\0A\00", align 1
@.str.23.280 = private unnamed_addr constant [11 x i8] c"JTT %dPAM\0A\00", align 1
@.str.24.281 = private unnamed_addr constant [11 x i8] c"BLOSUM %d\0A\00", align 1
@.str.25.282 = private unnamed_addr constant [5 x i8] c"M-Y\0A\00", align 1
@.str.26.283 = private unnamed_addr constant [38 x i8] c"Gap Penalty = %+5.2f, %+5.2f, %+5.2f\0A\00", align 1
@.str.27.284 = private unnamed_addr constant [8 x i8] c"FFT on\0A\00", align 1
@.str.28.285 = private unnamed_addr constant [18 x i8] c"tree-base method\0A\00", align 1
@.str.29.286 = private unnamed_addr constant [12 x i8] c"unweighted\0A\00", align 1
@.str.30.287 = private unnamed_addr constant [25 x i8] c"clustalw-like weighting\0A\00", align 1
@.str.31.288 = private unnamed_addr constant [22 x i8] c"iterate at each step\0A\00", align 1
@.str.32.289 = private unnamed_addr constant [14 x i8] c"  unweighted\0A\00", align 1
@.str.33.290 = private unnamed_addr constant [22 x i8] c"  reversely weighted\0A\00", align 1
@.str.34.291 = private unnamed_addr constant [12 x i8] c"  weighted\0A\00", align 1
@.str.36.292 = private unnamed_addr constant [13 x i8] c"Algorithm A\0A\00", align 1
@.str.37.293 = private unnamed_addr constant [14 x i8] c"Algorithm A+\0A\00", align 1
@.str.38.294 = private unnamed_addr constant [13 x i8] c"Apgorithm S\0A\00", align 1
@.str.39.295 = private unnamed_addr constant [16 x i8] c"Apgorithm A+/C\0A\00", align 1
@.str.40.296 = private unnamed_addr constant [19 x i8] c"Unknown algorithm\0A\00", align 1
@.str.41.297 = private unnamed_addr constant [23 x i8] c"Basis : 4 nucleotides\0A\00", align 1
@.str.42.298 = private unnamed_addr constant [29 x i8] c"Basis : Polarity and Volume\0A\00", align 1
@.str.43 = private unnamed_addr constant [24 x i8] c"Basis : 20 amino acids\0A\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"Threshold   of anchors = %d%%\0A\00", align 1
@.str.45 = private unnamed_addr constant [34 x i8] c"window size of anchors = %dsites\0A\00", align 1
@.str.46 = private unnamed_addr constant [9 x i8] c"FFT off\0A\00", align 1
@pairalign.indication1 = internal unnamed_addr global ptr null, align 8
@pairalign.indication2 = internal unnamed_addr global ptr null, align 8
@pairalign.distancemtx = internal unnamed_addr global ptr null, align 8
@pairalign.effarr1 = internal unnamed_addr global ptr null, align 8
@pairalign.effarr2 = internal unnamed_addr global ptr null, align 8
@.str.47 = private unnamed_addr constant [5 x i8] c"hat2\00", align 1
@pairalign.pair = internal unnamed_addr global ptr null, align 8
@.str.48 = private unnamed_addr constant [36 x i8] c"Calling FOLDALIGN with option '%s'\0A\00", align 1
@.str.49 = private unnamed_addr constant [57 x i8] c"Running LARA (Bauer et al. http://www.planet-lisa.net/)\0A\00", align 1
@.str.50 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.51 = private unnamed_addr constant [58 x i8] c"Running SLARA (Bauer et al. http://www.planet-lisa.net/)\0A\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.53 = private unnamed_addr constant [15 x i8] c"Preparing bpp\0A\00", align 1
@.str.54 = private unnamed_addr constant [72 x i8] c"Running MXSCARNA (Tabei et al. http://www.ncrna.org/software/mxscarna)\0A\00", align 1
@.str.55 = private unnamed_addr constant [11 x i8] c"% 5d / %d\0D\00", align 1
@.str.56 = private unnamed_addr constant [50 x i8] c"sequence %d - sequence %d, pairwise score = %.0f\0A\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c">%s\0A\00", align 1
@.str.58 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.59 = private unnamed_addr constant [18 x i8] c"Cannot open hat2.\00", align 1
@.str.60 = private unnamed_addr constant [20 x i8] c"##### writing hat3\0A\00", align 1
@.str.61 = private unnamed_addr constant [28 x i8] c"%d %d %d %7.5f %d %d %d %d\0A\00", align 1
@callfoldalign.com = internal global [10000 x i8] zeroinitializer, align 16
@.str.62 = private unnamed_addr constant [13 x i8] c"_foldalignin\00", align 1
@.str.63 = private unnamed_addr constant [26 x i8] c"Cannot open _foldalignin\0A\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c">%d\0A\00", align 1
@.str.65 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.66 = private unnamed_addr constant [59 x i8] c"env PATH=%s  foldalign210 %s _foldalignin > _foldalignout \00", align 1
@.str.67.300 = private unnamed_addr constant [30 x i8] c"Cannot execute system calls!\0A\00", align 1
@calllara.com = internal global [10000 x i8] zeroinitializer, align 16
@.str.68 = private unnamed_addr constant [8 x i8] c"_larain\00", align 1
@.str.69.317 = private unnamed_addr constant [21 x i8] c"Cannot open _larain\0A\00", align 1
@.str.70.318 = private unnamed_addr constant [79 x i8] c"env PATH=%s:/bin:/usr/bin mafft_lara -i _larain -w _laraout -o _lara.params %s\00", align 1
@.str.71.301 = private unnamed_addr constant [5 x i8] c"hat4\00", align 1
@.str.72.302 = private unnamed_addr constant [18 x i8] c"Cannot open hat4\0A\00", align 1
@.str.73.303 = private unnamed_addr constant [14 x i8] c"Format error\0A\00", align 1
@recallpairfoldalign.fp = internal unnamed_addr global ptr null, align 8
@.str.74.305 = private unnamed_addr constant [14 x i8] c"_foldalignout\00", align 1
@.str.75 = private unnamed_addr constant [27 x i8] c"Cannot open _foldalignout\0A\00", align 1
@.str.76 = private unnamed_addr constant [8 x i8] c"-global\00", align 1
@.str.77 = private unnamed_addr constant [20 x i8] c"Calling G__align11\0A\00", align 1
@.str.78 = private unnamed_addr constant [20 x i8] c"Calling L__align11\0A\00", align 1
@.str.79.306 = private unnamed_addr constant [89 x i8] c"FOLDALIGN returned no alignment between %d and %d.  Sequence alignment is used instead.\0A\00", align 1
@recalllara.fp = internal unnamed_addr global ptr null, align 8
@recalllara.ungap1 = internal unnamed_addr global ptr null, align 8
@recalllara.ungap2 = internal unnamed_addr global ptr null, align 8
@recalllara.ori1 = internal unnamed_addr global ptr null, align 8
@recalllara.ori2 = internal unnamed_addr global ptr null, align 8
@recalllara.com = internal global [10000 x i8] zeroinitializer, align 16
@.str.80 = private unnamed_addr constant [9 x i8] c"_laraout\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"Cannot open _laraout\0A\00", align 1
@.str.82 = private unnamed_addr constant [20 x i8] c"SEQUENCE CHANGED!!\0A\00", align 1
@.str.83 = private unnamed_addr constant [14 x i8] c"*mseq1  = %s\0A\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"ungap1  = %s\0A\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"ori1    = %s\0A\00", align 1
@.str.86.307 = private unnamed_addr constant [14 x i8] c"*mseq2  = %s\0A\00", align 1
@.str.87.308 = private unnamed_addr constant [14 x i8] c"ungap2  = %s\0A\00", align 1
@.str.88.309 = private unnamed_addr constant [14 x i8] c"ori2    = %s\0A\00", align 1
@.str.89.310 = private unnamed_addr constant [8 x i8] c"_bpporg\00", align 1
@.str.90.311 = private unnamed_addr constant [25 x i8] c"Cannot write to _bpporg\0A\00", align 1
@.str.91.312 = private unnamed_addr constant [4 x i8] c">a\0A\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c">b\0A\00", align 1
@impmtx.322 = internal unnamed_addr global ptr null, align 8
@Q__align.m = internal unnamed_addr global ptr null, align 8
@Q__align.ijp = internal unnamed_addr global ptr null, align 8
@Q__align.mp = internal unnamed_addr global ptr null, align 8
@Q__align.w1 = internal unnamed_addr global ptr null, align 8
@Q__align.w2 = internal unnamed_addr global ptr null, align 8
@Q__align.match = internal unnamed_addr global ptr null, align 8
@Q__align.initverticalw = internal unnamed_addr global ptr null, align 8
@Q__align.lastverticalw = internal unnamed_addr global ptr null, align 8
@Q__align.mseq1 = internal unnamed_addr global ptr null, align 8
@Q__align.mseq2 = internal unnamed_addr global ptr null, align 8
@Q__align.mseq = internal unnamed_addr global ptr null, align 8
@Q__align.digf1 = internal unnamed_addr global ptr null, align 8
@Q__align.digf2 = internal unnamed_addr global ptr null, align 8
@Q__align.diaf1 = internal unnamed_addr global ptr null, align 8
@Q__align.diaf2 = internal unnamed_addr global ptr null, align 8
@Q__align.gapz1 = internal unnamed_addr global ptr null, align 8
@Q__align.gapz2 = internal unnamed_addr global ptr null, align 8
@Q__align.gapf1 = internal unnamed_addr global ptr null, align 8
@Q__align.gapf2 = internal unnamed_addr global ptr null, align 8
@Q__align.ogcp1g = internal unnamed_addr global ptr null, align 8
@Q__align.ogcp2g = internal unnamed_addr global ptr null, align 8
@Q__align.fgcp1g = internal unnamed_addr global ptr null, align 8
@Q__align.fgcp2g = internal unnamed_addr global ptr null, align 8
@Q__align.og_h_dg_n1_p = internal unnamed_addr global ptr null, align 8
@Q__align.og_h_dg_n2_p = internal unnamed_addr global ptr null, align 8
@Q__align.fg_h_dg_n1_p = internal unnamed_addr global ptr null, align 8
@Q__align.fg_h_dg_n2_p = internal unnamed_addr global ptr null, align 8
@Q__align.og_t_fg_h_dg_n1_p = internal unnamed_addr global ptr null, align 8
@Q__align.og_t_fg_h_dg_n2_p = internal unnamed_addr global ptr null, align 8
@Q__align.fg_t_og_h_dg_n1_p = internal unnamed_addr global ptr null, align 8
@Q__align.fg_t_og_h_dg_n2_p = internal unnamed_addr global ptr null, align 8
@Q__align.gapz_n1 = internal unnamed_addr global ptr null, align 8
@Q__align.gapz_n2 = internal unnamed_addr global ptr null, align 8
@Q__align.cpmx1 = internal unnamed_addr global ptr null, align 8
@Q__align.cpmx2 = internal unnamed_addr global ptr null, align 8
@Q__align.intwork = internal unnamed_addr global ptr null, align 8
@Q__align.floatwork = internal unnamed_addr global ptr null, align 8
@Q__align.orlgth1 = internal unnamed_addr global i32 0, align 4
@Q__align.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.323 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.1.324 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@RNAscoremtx = internal global i8 110, align 1
@consweight_multi = internal global float 1.000000e+00, align 4
@ribosumdis = internal global [37 x [37 x i32]] zeroinitializer, align 16
@Aalign.m = internal unnamed_addr global ptr null, align 8
@Aalign.ijp = internal unnamed_addr global ptr null, align 8
@Aalign.mp = internal unnamed_addr global ptr null, align 8
@Aalign.currentw = internal unnamed_addr global ptr null, align 8
@Aalign.previousw = internal unnamed_addr global ptr null, align 8
@Aalign.match = internal unnamed_addr global ptr null, align 8
@Aalign.initverticalw = internal unnamed_addr global ptr null, align 8
@Aalign.lastverticalw = internal unnamed_addr global ptr null, align 8
@Aalign.mseq1 = internal unnamed_addr global ptr null, align 8
@Aalign.mseq2 = internal unnamed_addr global ptr null, align 8
@Aalign.mseq = internal unnamed_addr global ptr null, align 8
@Aalign.cpmx1 = internal unnamed_addr global ptr null, align 8
@Aalign.cpmx2 = internal unnamed_addr global ptr null, align 8
@Aalign.intwork = internal unnamed_addr global ptr null, align 8
@Aalign.floatwork = internal unnamed_addr global ptr null, align 8
@Aalign.orlgth1 = internal unnamed_addr global i32 0, align 4
@Aalign.orlgth2 = internal unnamed_addr global i32 0, align 4
@.str.327 = private unnamed_addr constant [44 x i8] c"\0Atrying to allocate (%d+%d)xn matrices ... \00", align 1
@.str.1.328 = private unnamed_addr constant [11 x i8] c"succeeded\0A\00", align 1
@.str.2.329 = private unnamed_addr constant [41 x i8] c"\0A\0Atrying to allocate %dx%d matrices ... \00", align 1
@.str.3.330 = private unnamed_addr constant [12 x i8] c"succeeded\0A\0A\00", align 1
@.str.4.332 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.5.333 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@n_dis = internal global [26 x [26 x i32]] zeroinitializer, align 16
@impmtx.337 = internal unnamed_addr global ptr null, align 8
@A__align.m = internal unnamed_addr global ptr null, align 8
@A__align.ijp = internal unnamed_addr global ptr null, align 8
@A__align.mp = internal unnamed_addr global ptr null, align 8
@A__align.w1 = internal unnamed_addr global ptr null, align 8
@A__align.w2 = internal unnamed_addr global ptr null, align 8
@A__align.match = internal unnamed_addr global ptr null, align 8
@A__align.initverticalw = internal unnamed_addr global ptr null, align 8
@A__align.lastverticalw = internal unnamed_addr global ptr null, align 8
@A__align.mseq1 = internal unnamed_addr global ptr null, align 8
@A__align.mseq2 = internal unnamed_addr global ptr null, align 8
@A__align.mseq = internal unnamed_addr global ptr null, align 8
@A__align.ogcp1 = internal unnamed_addr global ptr null, align 8
@A__align.ogcp2 = internal unnamed_addr global ptr null, align 8
@A__align.fgcp1 = internal unnamed_addr global ptr null, align 8
@A__align.fgcp2 = internal unnamed_addr global ptr null, align 8
@A__align.cpmx1 = internal unnamed_addr global ptr null, align 8
@A__align.cpmx2 = internal unnamed_addr global ptr null, align 8
@A__align.intwork = internal unnamed_addr global ptr null, align 8
@A__align.floatwork = internal unnamed_addr global ptr null, align 8
@A__align.orlgth1 = internal unnamed_addr global i32 0, align 4
@A__align.orlgth2 = internal unnamed_addr global i32 0, align 4
@outgap = internal global i32 0, align 4
@.str.339 = private unnamed_addr constant [33 x i8] c"alloclen=%d, resultlen=%d, N=%d\0A\00", align 1
@.str.1.340 = private unnamed_addr constant [14 x i8] c"LENGTH OVER!\0A\00", align 1
@n_dis_consweight_multi = internal global [26 x [26 x float]] zeroinitializer, align 16
@penalty_OP = internal global i32 0, align 4
@penalty_ex = internal global i32 0, align 4
@offset = internal global i32 0, align 4
@commonAlloc1 = internal global i32 0, align 4
@commonAlloc2 = internal global i32 0, align 4
@commonIP = internal global ptr null, align 8
@commonJP = internal global ptr null, align 8
@njob = internal global i32 0, align 4
@amino_dis = internal global [128 x [128 x i32]] zeroinitializer, align 16
@penalty = internal global i32 0, align 4
@stderr = external local_unnamed_addr global ptr, align 8
@amino_n = internal global [128 x i32] zeroinitializer, align 16
@.str.1.349 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@geta2 = internal global float 0.000000e+00, align 4

; Function Attrs: nofree nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @JTTmtx(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef %2, ptr nocapture noundef writeonly %3, i32 noundef %4) #0 {
  %6 = alloca [20 x [20 x double]], align 16
  call void @llvm.lifetime.start.p0(i64 3200, ptr nonnull %6) #34
  %7 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1
  store double 2.470000e+02, ptr %7, align 16, !tbaa !7
  %8 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2
  store <2 x double> <double 2.160000e+02, double 1.160000e+02>, ptr %8, align 16, !tbaa !7
  %9 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3
  store <2 x double> <double 3.860000e+02, double 4.800000e+01>, ptr %9, align 16, !tbaa !7
  %10 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 2
  store double 1.433000e+03, ptr %10, align 16, !tbaa !7
  %11 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4
  store <2 x double> <double 1.060000e+02, double 1.250000e+02>, ptr %11, align 16, !tbaa !7
  %12 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 2
  store <2 x double> <double 3.200000e+01, double 1.300000e+01>, ptr %12, align 16, !tbaa !7
  %13 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5
  store <2 x double> <double 2.080000e+02, double 7.500000e+02>, ptr %13, align 16, !tbaa !7
  %14 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 2
  store <2 x double> <double 1.590000e+02, double 1.300000e+02>, ptr %14, align 16, !tbaa !7
  %15 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 4
  store double 9.000000e+00, ptr %15, align 16, !tbaa !7
  %16 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6
  store <2 x double> <double 6.000000e+02, double 1.190000e+02>, ptr %16, align 16, !tbaa !7
  %17 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 2
  store <2 x double> <double 1.800000e+02, double 2.914000e+03>, ptr %17, align 16, !tbaa !7
  %18 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 4
  store <2 x double> <double 8.000000e+00, double 1.027000e+03>, ptr %18, align 16, !tbaa !7
  %19 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7
  store <2 x double> <double 1.183000e+03, double 6.140000e+02>, ptr %19, align 16, !tbaa !7
  %20 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 2
  store <2 x double> <double 2.910000e+02, double 5.770000e+02>, ptr %20, align 16, !tbaa !7
  %21 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 4
  store <2 x double> <double 9.800000e+01, double 8.400000e+01>, ptr %21, align 16, !tbaa !7
  %22 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 6
  store double 6.100000e+02, ptr %22, align 16, !tbaa !7
  %23 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8
  store <2 x double> <double 4.600000e+01, double 4.460000e+02>, ptr %23, align 16, !tbaa !7
  %24 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 2
  store <2 x double> <double 4.660000e+02, double 1.440000e+02>, ptr %24, align 16, !tbaa !7
  %25 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 4
  store <2 x double> <double 4.000000e+01, double 6.350000e+02>, ptr %25, align 16, !tbaa !7
  %26 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 6
  store <2 x double> <double 4.100000e+01, double 4.100000e+01>, ptr %26, align 16, !tbaa !7
  %27 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9
  store <2 x double> <double 1.730000e+02, double 7.600000e+01>, ptr %27, align 16, !tbaa !7
  %28 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 2
  store <2 x double> <double 1.300000e+02, double 3.700000e+01>, ptr %28, align 16, !tbaa !7
  %29 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 4
  store <2 x double> <double 1.900000e+01, double 2.000000e+01>, ptr %29, align 16, !tbaa !7
  %30 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 6
  store <2 x double> <double 4.300000e+01, double 2.500000e+01>, ptr %30, align 16, !tbaa !7
  %31 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 8
  store double 2.600000e+01, ptr %31, align 16, !tbaa !7
  %32 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10
  store <2 x double> <double 2.570000e+02, double 2.050000e+02>, ptr %32, align 16, !tbaa !7
  %33 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 2
  store <2 x double> <double 6.300000e+01, double 3.400000e+01>, ptr %33, align 16, !tbaa !7
  %34 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 4
  store <2 x double> <double 3.600000e+01, double 3.140000e+02>, ptr %34, align 16, !tbaa !7
  %35 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 6
  store <2 x double> <double 6.500000e+01, double 5.600000e+01>, ptr %35, align 16, !tbaa !7
  %36 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 8
  store <2 x double> <double 1.340000e+02, double 1.324000e+03>, ptr %36, align 16, !tbaa !7
  %37 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11
  store <2 x double> <double 2.000000e+02, double 2.348000e+03>, ptr %37, align 16, !tbaa !7
  %38 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 2
  store <2 x double> <double 7.580000e+02, double 1.020000e+02>, ptr %38, align 16, !tbaa !7
  %39 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 4
  store <2 x double> <double 7.000000e+00, double 8.580000e+02>, ptr %39, align 16, !tbaa !7
  %40 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 6
  store <2 x double> <double 7.540000e+02, double 1.420000e+02>, ptr %40, align 16, !tbaa !7
  %41 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 8
  store <2 x double> <double 8.500000e+01, double 7.500000e+01>, ptr %41, align 16, !tbaa !7
  %42 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 10
  store double 9.400000e+01, ptr %42, align 16, !tbaa !7
  %43 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12
  store <2 x double> <double 1.000000e+02, double 6.100000e+01>, ptr %43, align 16, !tbaa !7
  %44 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 2
  store <2 x double> <double 3.900000e+01, double 2.700000e+01>, ptr %44, align 16, !tbaa !7
  %45 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 4
  store <2 x double> <double 2.300000e+01, double 5.200000e+01>, ptr %45, align 16, !tbaa !7
  %46 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 6
  store <2 x double> <double 3.000000e+01, double 2.700000e+01>, ptr %46, align 16, !tbaa !7
  %47 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 8
  store <2 x double> <double 2.100000e+01, double 7.040000e+02>, ptr %47, align 16, !tbaa !7
  %48 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 10
  store <2 x double> <double 9.740000e+02, double 1.030000e+02>, ptr %48, align 16, !tbaa !7
  %49 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13
  store <2 x double> <double 5.100000e+01, double 1.600000e+01>, ptr %49, align 16, !tbaa !7
  %50 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 2
  store <2 x double> <double 1.500000e+01, double 8.000000e+00>, ptr %50, align 16, !tbaa !7
  %51 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 4
  store <2 x double> <double 6.600000e+01, double 9.000000e+00>, ptr %51, align 16, !tbaa !7
  %52 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 6
  store <2 x double> <double 1.300000e+01, double 1.800000e+01>, ptr %52, align 16, !tbaa !7
  %53 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 8
  store <2 x double> <double 5.000000e+01, double 1.960000e+02>, ptr %53, align 16, !tbaa !7
  %54 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 10
  store <2 x double> <double 1.093000e+03, double 7.000000e+00>, ptr %54, align 16, !tbaa !7
  %55 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 12
  store double 4.900000e+01, ptr %55, align 16, !tbaa !7
  %56 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14
  store <2 x double> <double 9.010000e+02, double 2.170000e+02>, ptr %56, align 16, !tbaa !7
  %57 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 2
  store <2 x double> <double 3.100000e+01, double 3.900000e+01>, ptr %57, align 16, !tbaa !7
  %58 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 4
  store <2 x double> <double 1.500000e+01, double 3.950000e+02>, ptr %58, align 16, !tbaa !7
  %59 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 6
  store <2 x double> <double 7.100000e+01, double 9.300000e+01>, ptr %59, align 16, !tbaa !7
  %60 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 8
  store <2 x double> <double 1.570000e+02, double 3.100000e+01>, ptr %60, align 16, !tbaa !7
  %61 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 10
  store <2 x double> <double 5.780000e+02, double 7.700000e+01>, ptr %61, align 16, !tbaa !7
  %62 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 12
  store <2 x double> <double 2.300000e+01, double 3.600000e+01>, ptr %62, align 16, !tbaa !7
  %63 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15
  store <2 x double> <double 2.413000e+03, double 4.130000e+02>, ptr %63, align 16, !tbaa !7
  %64 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 2
  store <2 x double> <double 1.738000e+03, double 2.440000e+02>, ptr %64, align 16, !tbaa !7
  %65 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 4
  store <2 x double> <double 3.530000e+02, double 1.820000e+02>, ptr %65, align 16, !tbaa !7
  %66 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 6
  store <2 x double> <double 1.560000e+02, double 1.131000e+03>, ptr %66, align 16, !tbaa !7
  %67 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 8
  store <2 x double> <double 1.380000e+02, double 1.720000e+02>, ptr %67, align 16, !tbaa !7
  %68 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 10
  store <2 x double> <double 4.360000e+02, double 2.280000e+02>, ptr %68, align 16, !tbaa !7
  %69 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 12
  store <2 x double> <double 5.400000e+01, double 3.090000e+02>, ptr %69, align 16, !tbaa !7
  %70 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 14
  store double 1.138000e+03, ptr %70, align 16, !tbaa !7
  %71 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16
  store <2 x double> <double 2.440000e+03, double 2.300000e+02>, ptr %71, align 16, !tbaa !7
  %72 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 2
  store <2 x double> <double 6.930000e+02, double 1.510000e+02>, ptr %72, align 16, !tbaa !7
  %73 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 4
  store <2 x double> <double 6.600000e+01, double 1.490000e+02>, ptr %73, align 16, !tbaa !7
  %74 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 6
  store <2 x double> <double 1.420000e+02, double 1.640000e+02>, ptr %74, align 16, !tbaa !7
  %75 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 8
  store <2 x double> <double 7.600000e+01, double 9.300000e+02>, ptr %75, align 16, !tbaa !7
  %76 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 10
  store <2 x double> <double 1.720000e+02, double 3.980000e+02>, ptr %76, align 16, !tbaa !7
  %77 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 12
  store <2 x double> <double 3.430000e+02, double 3.900000e+01>, ptr %77, align 16, !tbaa !7
  %78 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 14
  store <2 x double> <double 4.120000e+02, double 2.258000e+03>, ptr %78, align 16, !tbaa !7
  %79 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17
  store <2 x double> <double 1.100000e+01, double 1.090000e+02>, ptr %79, align 16, !tbaa !7
  %80 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 2
  store <2 x double> <double 2.000000e+00, double 5.000000e+00>, ptr %80, align 16, !tbaa !7
  %81 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 4
  store <2 x double> <double 3.800000e+01, double 1.200000e+01>, ptr %81, align 16, !tbaa !7
  %82 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 6
  store <2 x double> <double 1.200000e+01, double 6.900000e+01>, ptr %82, align 16, !tbaa !7
  %83 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 8
  store <2 x double> <double 5.000000e+00, double 1.200000e+01>, ptr %83, align 16, !tbaa !7
  %84 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 10
  store <2 x double> <double 8.200000e+01, double 9.000000e+00>, ptr %84, align 16, !tbaa !7
  %85 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 12
  store <2 x double> <double 8.000000e+00, double 3.700000e+01>, ptr %85, align 16, !tbaa !7
  %86 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 14
  store <2 x double> <double 6.000000e+00, double 3.600000e+01>, ptr %86, align 16, !tbaa !7
  %87 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 16
  store double 8.000000e+00, ptr %87, align 16, !tbaa !7
  %88 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18
  store <2 x double> <double 4.100000e+01, double 4.600000e+01>, ptr %88, align 16, !tbaa !7
  %89 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 2
  store <2 x double> <double 1.140000e+02, double 8.900000e+01>, ptr %89, align 16, !tbaa !7
  %90 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 4
  store <2 x double> <double 1.640000e+02, double 4.000000e+01>, ptr %90, align 16, !tbaa !7
  %91 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 6
  store <2 x double> <double 1.500000e+01, double 1.500000e+01>, ptr %91, align 16, !tbaa !7
  %92 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 8
  store <2 x double> <double 5.140000e+02, double 6.100000e+01>, ptr %92, align 16, !tbaa !7
  %93 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 10
  store <2 x double> <double 8.400000e+01, double 2.000000e+01>, ptr %93, align 16, !tbaa !7
  %94 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 12
  store <2 x double> <double 1.700000e+01, double 8.500000e+02>, ptr %94, align 16, !tbaa !7
  %95 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 14
  store <2 x double> <double 2.200000e+01, double 1.640000e+02>, ptr %95, align 16, !tbaa !7
  %96 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 16
  store <2 x double> <double 4.500000e+01, double 4.100000e+01>, ptr %96, align 16, !tbaa !7
  %97 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19
  store <2 x double> <double 1.766000e+03, double 6.900000e+01>, ptr %97, align 16, !tbaa !7
  %98 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 2
  store <2 x double> <double 5.500000e+01, double 1.270000e+02>, ptr %98, align 16, !tbaa !7
  %99 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 4
  store <2 x double> <double 9.900000e+01, double 5.800000e+01>, ptr %99, align 16, !tbaa !7
  %100 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 6
  store <2 x double> <double 2.260000e+02, double 2.760000e+02>, ptr %100, align 16, !tbaa !7
  %101 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 8
  store <2 x double> <double 2.200000e+01, double 3.938000e+03>, ptr %101, align 16, !tbaa !7
  %102 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 10
  store <2 x double> <double 1.261000e+03, double 5.800000e+01>, ptr %102, align 16, !tbaa !7
  %103 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 12
  store <2 x double> <double 5.590000e+02, double 1.890000e+02>, ptr %103, align 16, !tbaa !7
  %104 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 14
  store <2 x double> <double 8.400000e+01, double 2.190000e+02>, ptr %104, align 16, !tbaa !7
  %105 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 16
  store <2 x double> <double 5.260000e+02, double 2.700000e+01>, ptr %105, align 16, !tbaa !7
  %106 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 19, i64 18
  store double 4.200000e+01, ptr %106, align 16, !tbaa !7
  %107 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 1
  store <2 x double> <double 2.100000e+01, double 2.000000e+00>, ptr %107, align 8, !tbaa !7
  %108 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 3
  store <2 x double> <double 7.000000e+00, double 1.300000e+01>, ptr %108, align 8, !tbaa !7
  %109 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 5
  store <2 x double> <double 4.000000e+00, double 6.000000e+00>, ptr %109, align 8, !tbaa !7
  %110 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 7
  store <2 x double> <double 1.600000e+02, double 6.000000e+00>, ptr %110, align 8, !tbaa !7
  %111 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 9
  store <2 x double> <double 4.400000e+01, double 4.300000e+01>, ptr %111, align 8, !tbaa !7
  %112 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 11
  store <2 x double> <double 5.000000e+00, double 1.000000e+01>, ptr %112, align 8, !tbaa !7
  %113 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 13
  store <2 x double> <double 2.100000e+01, double 3.400000e+01>, ptr %113, align 8, !tbaa !7
  %114 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 15
  store <2 x double> <double 1.980000e+02, double 2.020000e+02>, ptr %114, align 8, !tbaa !7
  %115 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 17
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, ptr %115, align 8, !tbaa !7
  %116 = getelementptr inbounds [20 x double], ptr %6, i64 0, i64 19
  store double 2.920000e+02, ptr %116, align 8, !tbaa !7
  %117 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 2
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, ptr %117, align 16, !tbaa !7
  %118 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 4
  store <2 x double> <double 2.000000e+00, double 2.100000e+01>, ptr %118, align 16, !tbaa !7
  %119 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 6
  store <2 x double> <double 3.000000e+00, double 2.200000e+01>, ptr %119, align 16, !tbaa !7
  %120 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 8
  store <2 x double> <double 2.100000e+01, double 4.000000e+00>, ptr %120, align 16, !tbaa !7
  %121 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 10
  store <2 x double> <double 8.000000e+00, double 5.300000e+01>, ptr %121, align 16, !tbaa !7
  %122 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 12
  store <2 x double> <double 1.900000e+01, double 0.000000e+00>, ptr %122, align 16, !tbaa !7
  %123 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 14
  store <2 x double> <double 1.000000e+00, double 5.000000e+00>, ptr %123, align 16, !tbaa !7
  %124 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 16
  store <2 x double> <double 5.000000e+00, double 2.800000e+01>, ptr %124, align 16, !tbaa !7
  %125 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 1, i64 18
  %126 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %125, i8 0, i64 16, i1 false)
  store <2 x double> <double 1.400000e+01, double 1.000000e+00>, ptr %126, align 8, !tbaa !7
  %127 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 5
  store double 7.000000e+00, ptr %127, align 8, !tbaa !7
  %128 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 6
  %129 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %128, i8 0, i64 16, i1 false)
  store <2 x double> <double 8.000000e+00, double 4.000000e+00>, ptr %129, align 16, !tbaa !7
  %130 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 10
  store <2 x double> <double 5.000000e+00, double 1.100000e+01>, ptr %130, align 16, !tbaa !7
  %131 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 12
  store <2 x double> <double 3.000000e+00, double 1.000000e+00>, ptr %131, align 16, !tbaa !7
  %132 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 14
  store <2 x double> <double 2.000000e+00, double 3.200000e+01>, ptr %132, align 16, !tbaa !7
  %133 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 16
  store <2 x double> <double 1.900000e+01, double 1.000000e+00>, ptr %133, align 16, !tbaa !7
  %134 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 2, i64 18
  store <2 x double> <double 1.000000e+00, double 2.000000e+00>, ptr %134, align 16, !tbaa !7
  %135 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 4
  %136 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %135, i8 0, i64 16, i1 false)
  store <2 x double> <double 1.200000e+01, double 1.500000e+01>, ptr %136, align 16, !tbaa !7
  %137 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 8
  store <2 x double> <double 4.000000e+00, double 1.000000e+00>, ptr %137, align 16, !tbaa !7
  %138 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 10
  store <2 x double> <double 0.000000e+00, double 2.000000e+00>, ptr %138, align 16, !tbaa !7
  %139 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 12
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, ptr %139, align 16, !tbaa !7
  %140 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 14
  store <2 x double> <double 1.000000e+00, double 0.000000e+00>, ptr %140, align 16, !tbaa !7
  %141 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 16
  store <2 x double> <double 6.000000e+00, double 0.000000e+00>, ptr %141, align 16, !tbaa !7
  %142 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 3, i64 18
  store <2 x double> <double 1.000000e+00, double 4.000000e+00>, ptr %142, align 16, !tbaa !7
  %143 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 5
  %144 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %143, i8 0, i64 16, i1 false)
  store <2 x double> <double 1.300000e+01, double 2.000000e+00>, ptr %144, align 8, !tbaa !7
  %145 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 9
  store <2 x double> <double 4.000000e+00, double 1.100000e+01>, ptr %145, align 8, !tbaa !7
  %146 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 11
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, ptr %146, align 8, !tbaa !7
  %147 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 13
  store <2 x double> <double 3.400000e+01, double 0.000000e+00>, ptr %147, align 8, !tbaa !7
  %148 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 15
  store <2 x double> <double 4.800000e+01, double 1.300000e+01>, ptr %148, align 8, !tbaa !7
  %149 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 17
  store <2 x double> <double 8.000000e+00, double 2.300000e+01>, ptr %149, align 8, !tbaa !7
  %150 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 4, i64 19
  store double 4.700000e+01, ptr %150, align 8, !tbaa !7
  %151 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 6
  store <2 x double> <double 1.600000e+01, double 1.000000e+00>, ptr %151, align 16, !tbaa !7
  %152 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 8
  store <2 x double> <double 2.600000e+01, double 1.000000e+00>, ptr %152, align 16, !tbaa !7
  %153 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 10
  store <2 x double> <double 1.600000e+01, double 6.000000e+00>, ptr %153, align 16, !tbaa !7
  %154 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 12
  store <2 x double> <double 3.000000e+00, double 0.000000e+00>, ptr %154, align 16, !tbaa !7
  %155 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 14
  store <2 x double> <double 5.000000e+00, double 7.000000e+00>, ptr %155, align 16, !tbaa !7
  %156 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 16
  store double 2.000000e+00, ptr %156, align 16, !tbaa !7
  %157 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 5, i64 17
  %158 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %157, i8 0, i64 24, i1 false)
  store double 2.100000e+01, ptr %158, align 8, !tbaa !7
  %159 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 8
  %160 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 15
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(56) %159, i8 0, i64 56, i1 false)
  store <2 x double> <double 4.000000e+00, double 2.000000e+00>, ptr %160, align 8, !tbaa !7
  %161 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 17
  %162 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 6, i64 19
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %161, i8 0, i64 16, i1 false)
  store double 7.000000e+00, ptr %162, align 8, !tbaa !7
  %163 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 8
  store <2 x double> <double 1.000000e+00, double 1.000000e+01>, ptr %163, align 16, !tbaa !7
  %164 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 10
  %165 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 12
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %164, i8 0, i64 16, i1 false)
  store <2 x double> <double 3.000000e+00, double 4.000000e+00>, ptr %165, align 16, !tbaa !7
  %166 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 14
  store <2 x double> <double 7.000000e+00, double 6.400000e+01>, ptr %166, align 16, !tbaa !7
  %167 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 16
  store <2 x double> <double 1.200000e+01, double 5.000000e+00>, ptr %167, align 16, !tbaa !7
  %168 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 7, i64 18
  store <2 x double> <double 0.000000e+00, double 5.300000e+01>, ptr %168, align 16, !tbaa !7
  %169 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 9
  store <2 x double> <double 3.000000e+00, double 2.000000e+00>, ptr %169, align 8, !tbaa !7
  %170 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 11
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, ptr %170, align 8, !tbaa !7
  %171 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 13
  %172 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %171, i8 0, i64 24, i1 false)
  store <2 x double> <double 4.000000e+00, double 0.000000e+00>, ptr %172, align 16, !tbaa !7
  %173 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 8, i64 18
  store <2 x double> <double 2.900000e+01, double 2.000000e+00>, ptr %173, align 16, !tbaa !7
  %174 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 10
  store <2 x double> <double 2.730000e+02, double 0.000000e+00>, ptr %174, align 16, !tbaa !7
  %175 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 12
  store <2 x double> <double 1.610000e+02, double 6.600000e+01>, ptr %175, align 16, !tbaa !7
  %176 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 14
  store <2 x double> <double 4.000000e+00, double 2.200000e+01>, ptr %176, align 16, !tbaa !7
  %177 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 16
  store <2 x double> <double 1.500000e+02, double 1.000000e+00>, ptr %177, align 16, !tbaa !7
  %178 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 9, i64 18
  store <2 x double> <double 4.000000e+00, double 8.830000e+02>, ptr %178, align 16, !tbaa !7
  %179 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 11
  store <2 x double> <double 1.000000e+00, double 1.530000e+02>, ptr %179, align 8, !tbaa !7
  %180 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 13
  store <2 x double> <double 2.510000e+02, double 3.700000e+01>, ptr %180, align 8, !tbaa !7
  %181 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 15
  store <2 x double> <double 4.300000e+01, double 2.600000e+01>, ptr %181, align 8, !tbaa !7
  %182 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 17
  store <2 x double> <double 2.000000e+01, double 6.000000e+00>, ptr %182, align 8, !tbaa !7
  %183 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 10, i64 19
  store double 2.550000e+02, ptr %183, align 8, !tbaa !7
  %184 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 12
  store double 4.000000e+00, ptr %184, align 16, !tbaa !7
  %185 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 13
  %186 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 15
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %185, i8 0, i64 16, i1 false)
  store <2 x double> <double 1.000000e+00, double 2.000000e+00>, ptr %186, align 8, !tbaa !7
  %187 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 17
  store <2 x double> <double 0.000000e+00, double 5.000000e+00>, ptr %187, align 8, !tbaa !7
  %188 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 11, i64 19
  store double 1.000000e+00, ptr %188, align 8, !tbaa !7
  %189 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 13
  store <2 x double> <double 8.000000e+00, double 0.000000e+00>, ptr %189, align 8, !tbaa !7
  %190 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 15
  store <2 x double> <double 1.000000e+00, double 3.200000e+01>, ptr %190, align 8, !tbaa !7
  %191 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 17
  store <2 x double> <double 1.000000e+00, double 5.000000e+00>, ptr %191, align 8, !tbaa !7
  %192 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 12, i64 19
  store double 8.900000e+01, ptr %192, align 8, !tbaa !7
  %193 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 14
  store <2 x double> <double 0.000000e+00, double 3.200000e+01>, ptr %193, align 16, !tbaa !7
  %194 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 16
  store <2 x double> <double 9.000000e+00, double 2.000000e+00>, ptr %194, align 16, !tbaa !7
  %195 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 13, i64 18
  store <2 x double> <double 5.400000e+01, double 3.700000e+01>, ptr %195, align 16, !tbaa !7
  %196 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 15
  store <2 x double> <double 9.000000e+00, double 1.000000e+01>, ptr %196, align 8, !tbaa !7
  %197 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 17
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, ptr %197, align 8, !tbaa !7
  %198 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 14, i64 19
  store double 1.000000e+00, ptr %198, align 8, !tbaa !7
  %199 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 16
  store <2 x double> <double 1.340000e+02, double 1.000000e+00>, ptr %199, align 16, !tbaa !7
  %200 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 15, i64 18
  store <2 x double> <double 2.200000e+01, double 1.300000e+01>, ptr %200, align 16, !tbaa !7
  %201 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 17
  store <2 x double> <double 1.000000e+00, double 3.000000e+00>, ptr %201, align 8, !tbaa !7
  %202 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 16, i64 19
  store double 4.800000e+01, ptr %202, align 8, !tbaa !7
  %203 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 17, i64 18
  store <2 x double> <double 2.000000e+00, double 1.800000e+01>, ptr %203, align 16, !tbaa !7
  %204 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 18, i64 19
  store double 2.000000e+00, ptr %204, align 8, !tbaa !7
  br label %205

205:                                              ; preds = %205, %5
  %206 = phi i64 [ 0, %5 ], [ %208, %205 ]
  %207 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 %206, i64 %206
  store double 0.000000e+00, ptr %207, align 8, !tbaa !7
  %208 = add nuw nsw i64 %206, 1
  %209 = icmp eq i64 %208, 20
  br i1 %209, label %210, label %205, !llvm.loop !11

210:                                              ; preds = %205
  %211 = icmp eq i32 %4, 0
  br i1 %211, label %232, label %212

212:                                              ; preds = %228, %210
  %213 = phi i64 [ %229, %228 ], [ 1, %210 ]
  %214 = getelementptr inbounds [20 x double], ptr @__const.JTTmtx.freq0_TM, i64 0, i64 %213
  %215 = load double, ptr %214, align 8, !tbaa !7
  %216 = fmul double %215, 4.000000e+02
  br label %217

217:                                              ; preds = %217, %212
  %218 = phi i64 [ 0, %212 ], [ %226, %217 ]
  %219 = getelementptr inbounds [20 x double], ptr @__const.JTTmtx.freq0_TM, i64 0, i64 %218
  %220 = load double, ptr %219, align 8, !tbaa !7
  %221 = fmul double %216, %220
  %222 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 %218, i64 %213
  %223 = load double, ptr %222, align 8, !tbaa !7
  %224 = fdiv double %223, %221
  store double %224, ptr %222, align 8, !tbaa !7
  %225 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 %213, i64 %218
  store double %224, ptr %225, align 8, !tbaa !7
  %226 = add nuw nsw i64 %218, 1
  %227 = icmp eq i64 %226, %213
  br i1 %227, label %228, label %217, !llvm.loop !13

228:                                              ; preds = %217
  %229 = add nuw nsw i64 %213, 1
  %230 = icmp eq i64 %229, 20
  br i1 %230, label %231, label %212, !llvm.loop !14

231:                                              ; preds = %228
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(160) %1, ptr noundef nonnull align 16 dereferenceable(160) @__const.JTTmtx.freq0_TM, i64 160, i1 false), !tbaa !7
  br label %252

232:                                              ; preds = %248, %210
  %233 = phi i64 [ %249, %248 ], [ 1, %210 ]
  %234 = getelementptr inbounds [20 x double], ptr @__const.BLOSUMmtx.freqd, i64 0, i64 %233
  %235 = load double, ptr %234, align 8, !tbaa !7
  %236 = fmul double %235, 4.000000e+02
  br label %237

237:                                              ; preds = %237, %232
  %238 = phi i64 [ 0, %232 ], [ %246, %237 ]
  %239 = getelementptr inbounds [20 x double], ptr @__const.BLOSUMmtx.freqd, i64 0, i64 %238
  %240 = load double, ptr %239, align 8, !tbaa !7
  %241 = fmul double %236, %240
  %242 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 %233, i64 %238
  %243 = load double, ptr %242, align 8, !tbaa !7
  %244 = fdiv double %243, %241
  store double %244, ptr %242, align 8, !tbaa !7
  %245 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 %238, i64 %233
  store double %244, ptr %245, align 8, !tbaa !7
  %246 = add nuw nsw i64 %238, 1
  %247 = icmp eq i64 %246, %233
  br i1 %247, label %248, label %237, !llvm.loop !15

248:                                              ; preds = %237
  %249 = add nuw nsw i64 %233, 1
  %250 = icmp eq i64 %249, 20
  br i1 %250, label %251, label %232, !llvm.loop !16

251:                                              ; preds = %248
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(160) %1, ptr noundef nonnull align 16 dereferenceable(160) @__const.BLOSUMmtx.freqd, i64 160, i1 false), !tbaa !7
  br label %252

252:                                              ; preds = %251, %231
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(26) %2, ptr noundef nonnull align 16 dereferenceable(26) @__const.BLOSUMmtx.locaminod, i64 26, i1 false), !tbaa !17
  br label %253

253:                                              ; preds = %253, %252
  %254 = phi i64 [ 0, %252 ], [ %261, %253 ]
  %255 = getelementptr inbounds [26 x i8], ptr @__const.BLOSUMmtx.locgrpd, i64 0, i64 %254
  %256 = load i8, ptr %255, align 1, !tbaa !17
  %257 = getelementptr inbounds i8, ptr %2, i64 %254
  %258 = load i8, ptr %257, align 1, !tbaa !17
  %259 = sext i8 %258 to i64
  %260 = getelementptr inbounds i8, ptr %3, i64 %259
  store i8 %256, ptr %260, align 1, !tbaa !17
  %261 = add nuw nsw i64 %254, 1
  %262 = icmp eq i64 %261, 26
  br i1 %262, label %263, label %253, !llvm.loop !18

263:                                              ; preds = %274, %253
  %264 = phi i64 [ %275, %274 ], [ 0, %253 ]
  %265 = getelementptr inbounds ptr, ptr %0, i64 %264
  %266 = load ptr, ptr %265, align 8, !tbaa !19
  br label %267

267:                                              ; preds = %267, %263
  %268 = phi i64 [ 0, %263 ], [ %272, %267 ]
  %269 = getelementptr inbounds [20 x [20 x double]], ptr %6, i64 0, i64 %264, i64 %268
  %270 = load double, ptr %269, align 8, !tbaa !7
  %271 = getelementptr inbounds double, ptr %266, i64 %268
  store double %270, ptr %271, align 8, !tbaa !7
  %272 = add nuw nsw i64 %268, 1
  %273 = icmp eq i64 %272, 20
  br i1 %273, label %274, label %267, !llvm.loop !21

274:                                              ; preds = %267
  %275 = add nuw nsw i64 %264, 1
  %276 = icmp eq i64 %275, 20
  br i1 %276, label %277, label %263, !llvm.loop !22

277:                                              ; preds = %274
  call void @llvm.lifetime.end.p0(i64 3200, ptr nonnull %6) #34
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind optsize uwtable
define internal void @BLOSUMmtx(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2, ptr nocapture noundef %3, ptr nocapture noundef writeonly %4) #4 {
  switch i32 %0, label %13 [
    i32 30, label %16
    i32 45, label %6
    i32 50, label %7
    i32 62, label %8
    i32 80, label %9
    i32 0, label %10
    i32 -1, label %11
  ]

6:                                                ; preds = %5
  br label %16

7:                                                ; preds = %5
  br label %16

8:                                                ; preds = %5
  br label %16

9:                                                ; preds = %5
  br label %16

10:                                               ; preds = %5
  br label %16

11:                                               ; preds = %5
  %12 = tail call ptr @loadaamtx() #35
  br label %16

13:                                               ; preds = %5
  %14 = load ptr, ptr @stderr, align 8, !tbaa !19
  %15 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %14, ptr noundef nonnull @.str, i32 noundef %0) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

16:                                               ; preds = %11, %10, %9, %8, %7, %6, %5
  %17 = phi ptr [ @__const.BLOSUMmtx.tmpmtx45, %6 ], [ @__const.BLOSUMmtx.tmpmtx50, %7 ], [ @__const.BLOSUMmtx.tmpmtx62, %8 ], [ @__const.BLOSUMmtx.tmpmtx80, %9 ], [ @__const.BLOSUMmtx.tmpmtx0, %10 ], [ %12, %11 ], [ @__const.BLOSUMmtx.tmpmtx30, %5 ]
  br label %18

18:                                               ; preds = %38, %16
  %19 = phi i64 [ 0, %16 ], [ %39, %38 ]
  %20 = phi i64 [ 1, %16 ], [ %40, %38 ]
  %21 = phi i64 [ 0, %16 ], [ %.lcssa1, %38 ]
  %22 = getelementptr inbounds ptr, ptr %1, i64 %19
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  %24 = shl i64 %21, 32
  %25 = ashr exact i64 %24, 32
  br label %26

26:                                               ; preds = %26, %18
  %27 = phi i64 [ 0, %18 ], [ %36, %26 ]
  %28 = phi i64 [ %25, %18 ], [ %29, %26 ]
  %29 = add nsw i64 %28, 1
  %30 = getelementptr inbounds double, ptr %17, i64 %28
  %31 = load double, ptr %30, align 8, !tbaa !7
  %32 = getelementptr inbounds ptr, ptr %1, i64 %27
  %33 = load ptr, ptr %32, align 8, !tbaa !19
  %34 = getelementptr inbounds double, ptr %33, i64 %19
  store double %31, ptr %34, align 8, !tbaa !7
  %35 = getelementptr inbounds double, ptr %23, i64 %27
  store double %31, ptr %35, align 8, !tbaa !7
  %36 = add nuw nsw i64 %27, 1
  %37 = icmp eq i64 %36, %20
  br i1 %37, label %38, label %26, !llvm.loop !23

38:                                               ; preds = %26
  %.lcssa1 = phi i64 [ %29, %26 ]
  %39 = add nuw nsw i64 %19, 1
  %40 = add nuw nsw i64 %20, 1
  %41 = icmp eq i64 %39, 20
  br i1 %41, label %42, label %18, !llvm.loop !24

42:                                               ; preds = %38
  %43 = icmp eq i32 %0, -1
  br i1 %43, label %44, label %74

44:                                               ; preds = %42
  %45 = getelementptr inbounds double, ptr %17, i64 400
  %46 = load double, ptr %45, align 8, !tbaa !7
  %47 = fcmp une double %46, -1.000000e+00
  br i1 %47, label %48, label %74

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %54, %48 ], [ 0, %44 ]
  %50 = add nuw nsw i64 %49, 400
  %51 = getelementptr inbounds double, ptr %17, i64 %50
  %52 = load double, ptr %51, align 8, !tbaa !7
  %53 = getelementptr inbounds double, ptr %2, i64 %49
  store double %52, ptr %53, align 8, !tbaa !7
  %54 = add nuw nsw i64 %49, 1
  %55 = icmp eq i64 %54, 20
  br i1 %55, label %66, label %48, !llvm.loop !25

56:                                               ; preds = %66
  %.lcssa = phi double [ %71, %66 ]
  %57 = insertelement <2 x double> poison, double %.lcssa, i64 0
  %58 = shufflevector <2 x double> %57, <2 x double> poison, <2 x i32> zeroinitializer
  br label %59

59:                                               ; preds = %59, %56
  %60 = phi i64 [ 0, %56 ], [ %64, %59 ]
  %61 = getelementptr inbounds double, ptr %2, i64 %60
  %62 = load <2 x double>, ptr %61, align 8, !tbaa !7
  %63 = fdiv <2 x double> %62, %58
  store <2 x double> %63, ptr %61, align 8, !tbaa !7
  %64 = add nuw i64 %60, 2
  %65 = icmp eq i64 %64, 20
  br i1 %65, label %75, label %59, !llvm.loop !26

66:                                               ; preds = %66, %48
  %67 = phi i64 [ %72, %66 ], [ 0, %48 ]
  %68 = phi double [ %71, %66 ], [ 0.000000e+00, %48 ]
  %69 = getelementptr inbounds double, ptr %2, i64 %67
  %70 = load double, ptr %69, align 8, !tbaa !7
  %71 = fadd double %68, %70
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, 20
  br i1 %73, label %56, label %66, !llvm.loop !29

74:                                               ; preds = %44, %42
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(160) %2, ptr noundef nonnull align 16 dereferenceable(160) @__const.BLOSUMmtx.freqd, i64 160, i1 false), !tbaa !7
  br label %75

75:                                               ; preds = %74, %59
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(26) %3, ptr noundef nonnull align 16 dereferenceable(26) @__const.BLOSUMmtx.locaminod, i64 26, i1 false), !tbaa !17
  br label %76

76:                                               ; preds = %76, %75
  %77 = phi i64 [ 0, %75 ], [ %84, %76 ]
  %78 = getelementptr inbounds [26 x i8], ptr @__const.BLOSUMmtx.locgrpd, i64 0, i64 %77
  %79 = load i8, ptr %78, align 1, !tbaa !17
  %80 = getelementptr inbounds i8, ptr %3, i64 %77
  %81 = load i8, ptr %80, align 1, !tbaa !17
  %82 = sext i8 %81 to i64
  %83 = getelementptr inbounds i8, ptr %4, i64 %82
  store i8 %79, ptr %83, align 1, !tbaa !17
  %84 = add nuw nsw i64 %77, 1
  %85 = icmp eq i64 %84, 26
  br i1 %85, label %86, label %76, !llvm.loop !30

86:                                               ; preds = %76
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #6

; Function Attrs: nounwind optsize uwtable
define internal void @constants(i32 noundef %0, ptr nocapture noundef readonly %1) #4 {
  %3 = load i32, ptr @dorp, align 4, !tbaa !31
  %4 = icmp eq i32 %3, 100
  br i1 %4, label %5, label %988

5:                                                ; preds = %2
  %6 = tail call ptr @AllocateDoubleMtx(i32 noundef 11, i32 noundef 11) #35
  %7 = tail call ptr @AllocateDoubleMtx(i32 noundef 4, i32 noundef 4) #35
  %8 = tail call ptr @AllocateDoubleVec(i32 noundef 4) #35
  store i32 -1, ptr @scoremtx, align 4, !tbaa !31
  %9 = load i32, ptr @RNAppenalty, align 4, !tbaa !31
  %10 = icmp eq i32 %9, 100009
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  store i32 -1530, ptr @RNAppenalty, align 4, !tbaa !31
  br label %12

12:                                               ; preds = %11, %5
  %13 = phi i32 [ -1530, %11 ], [ %9, %5 ]
  %14 = load i32, ptr @RNAppenalty_ex, align 4, !tbaa !31
  %15 = icmp eq i32 %14, 100009
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  store i32 0, ptr @RNAppenalty_ex, align 4, !tbaa !31
  br label %17

17:                                               ; preds = %16, %12
  %18 = phi i32 [ 0, %16 ], [ %14, %12 ]
  %19 = load i32, ptr @ppenalty, align 4, !tbaa !31
  %20 = icmp eq i32 %19, 100009
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  store i32 -1530, ptr @ppenalty, align 4, !tbaa !31
  br label %22

22:                                               ; preds = %21, %17
  %23 = phi i32 [ -1530, %21 ], [ %19, %17 ]
  %24 = load i32, ptr @ppenalty_OP, align 4, !tbaa !31
  %25 = icmp eq i32 %24, 100009
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store i32 -1530, ptr @ppenalty_OP, align 4, !tbaa !31
  br label %27

27:                                               ; preds = %26, %22
  %28 = phi i32 [ -1530, %26 ], [ %24, %22 ]
  %29 = load i32, ptr @ppenalty_ex, align 4, !tbaa !31
  %30 = icmp eq i32 %29, 100009
  br i1 %30, label %31, label %32

31:                                               ; preds = %27
  store i32 0, ptr @ppenalty_ex, align 4, !tbaa !31
  br label %32

32:                                               ; preds = %31, %27
  %33 = phi i32 [ 0, %31 ], [ %29, %27 ]
  %34 = load i32, ptr @ppenalty_EX, align 4, !tbaa !31
  %35 = icmp eq i32 %34, 100009
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  store i32 0, ptr @ppenalty_EX, align 4, !tbaa !31
  br label %37

37:                                               ; preds = %36, %32
  %38 = phi i32 [ 0, %36 ], [ %34, %32 ]
  %39 = load i32, ptr @poffset, align 4, !tbaa !31
  %40 = icmp eq i32 %39, 100009
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  store i32 -123, ptr @poffset, align 4, !tbaa !31
  br label %42

42:                                               ; preds = %41, %37
  %43 = phi i32 [ -123, %41 ], [ %39, %37 ]
  %44 = load i32, ptr @RNApthr, align 4, !tbaa !31
  %45 = icmp eq i32 %44, 100009
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  store i32 0, ptr @RNApthr, align 4, !tbaa !31
  br label %47

47:                                               ; preds = %46, %42
  %48 = phi i32 [ 0, %46 ], [ %44, %42 ]
  %49 = load i32, ptr @pamN, align 4, !tbaa !31
  %50 = icmp eq i32 %49, 100009
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  store i32 200, ptr @pamN, align 4, !tbaa !31
  br label %52

52:                                               ; preds = %51, %47
  %53 = phi i32 [ 200, %51 ], [ %49, %47 ]
  %54 = load i32, ptr @kimuraR, align 4, !tbaa !31
  %55 = icmp eq i32 %54, 100009
  br i1 %55, label %56, label %57

56:                                               ; preds = %52
  store i32 2, ptr @kimuraR, align 4, !tbaa !31
  br label %57

57:                                               ; preds = %56, %52
  %58 = phi i32 [ 2, %56 ], [ %54, %52 ]
  %59 = sitofp i32 %13 to double
  %60 = tail call double @llvm.fmuladd.f64(double %59, double 1.800000e+00, double 5.000000e-01)
  %61 = fptosi double %60 to i32
  store i32 %61, ptr @RNApenalty, align 4, !tbaa !31
  %62 = sitofp i32 %18 to double
  %63 = tail call double @llvm.fmuladd.f64(double %62, double 1.800000e+00, double 5.000000e-01)
  %64 = fptosi double %63 to i32
  store i32 %64, ptr @RNApenalty_ex, align 4, !tbaa !31
  %65 = sitofp i32 %48 to double
  %66 = tail call double @llvm.fmuladd.f64(double %65, double 1.800000e+00, double 5.000000e-01)
  %67 = fptosi double %66 to i32
  store i32 %67, ptr @RNAthr, align 4, !tbaa !31
  %68 = sitofp i32 %23 to double
  %69 = tail call double @llvm.fmuladd.f64(double %68, double 1.800000e+00, double 5.000000e-01)
  %70 = fptosi double %69 to i32
  store i32 %70, ptr @penalty, align 4, !tbaa !31
  %71 = sitofp i32 %28 to double
  %72 = tail call double @llvm.fmuladd.f64(double %71, double 1.800000e+00, double 5.000000e-01)
  %73 = fptosi double %72 to i32
  store i32 %73, ptr @penalty_OP, align 4, !tbaa !31
  %74 = sitofp i32 %33 to double
  %75 = tail call double @llvm.fmuladd.f64(double %74, double 1.800000e+00, double 5.000000e-01)
  %76 = fptosi double %75 to i32
  store i32 %76, ptr @penalty_ex, align 4, !tbaa !31
  %77 = sitofp i32 %38 to double
  %78 = tail call double @llvm.fmuladd.f64(double %77, double 1.800000e+00, double 5.000000e-01)
  %79 = fptosi double %78 to i32
  store i32 %79, ptr @penalty_EX, align 4, !tbaa !31
  %80 = sitofp i32 %43 to double
  %81 = tail call double @llvm.fmuladd.f64(double %80, double 1.800000e+00, double 5.000000e-01)
  %82 = fptosi double %81 to i32
  store i32 %82, ptr @offset, align 4, !tbaa !31
  store i32 0, ptr @offsetFFT, align 4, !tbaa !31
  store i32 180, ptr @offsetLN, align 4, !tbaa !31
  store i32 -3599, ptr @penaltyLN, align 4, !tbaa !31
  store i32 -179, ptr @penalty_exLN, align 4, !tbaa !31
  %83 = load i32, ptr @rnakozo, align 4, !tbaa !31
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, ptr @.str.3, ptr @.str.2
  %86 = fmul double %68, -1.000000e-03
  %87 = fmul double %68, -3.000000e-03
  %88 = fmul double %80, -1.000000e-03
  %89 = fmul double %80, -3.000000e-03
  %90 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @modelname, ptr noundef nonnull dereferenceable(1) @.str.1, ptr noundef nonnull %85, i32 noundef %53, i32 noundef %58, double noundef %86, double noundef %87, double noundef %88, double noundef %89) #35
  %91 = load i32, ptr @kimuraR, align 4, !tbaa !31
  %92 = icmp eq i32 %91, 9999
  br i1 %92, label %93, label %185

93:                                               ; preds = %105, %57
  %94 = phi i64 [ %106, %105 ], [ 0, %57 ]
  %95 = getelementptr inbounds ptr, ptr %6, i64 %94
  %96 = load ptr, ptr %95, align 8, !tbaa !19
  br label %97

97:                                               ; preds = %97, %93
  %98 = phi i64 [ 0, %93 ], [ %103, %97 ]
  %99 = getelementptr inbounds [26 x [26 x i32]], ptr @locn_disn, i64 0, i64 %94, i64 %98
  %100 = load <2 x i32>, ptr %99, align 8, !tbaa !31
  %101 = sitofp <2 x i32> %100 to <2 x double>
  %102 = getelementptr inbounds double, ptr %96, i64 %98
  store <2 x double> %101, ptr %102, align 8, !tbaa !7
  %103 = add nuw i64 %98, 2
  %104 = icmp eq i64 %103, 4
  br i1 %104, label %105, label %97, !llvm.loop !33

105:                                              ; preds = %97
  %106 = add nuw nsw i64 %94, 1
  %107 = icmp eq i64 %106, 4
  br i1 %107, label %108, label %93, !llvm.loop !34

108:                                              ; preds = %121, %105
  %109 = phi i64 [ %122, %121 ], [ 0, %105 ]
  %110 = phi double [ %.lcssa7, %121 ], [ 0.000000e+00, %105 ]
  %111 = getelementptr inbounds ptr, ptr %6, i64 %109
  %112 = load ptr, ptr %111, align 8, !tbaa !19
  br label %113

113:                                              ; preds = %113, %108
  %114 = phi i64 [ 0, %108 ], [ %119, %113 ]
  %115 = phi double [ %110, %108 ], [ %118, %113 ]
  %116 = getelementptr inbounds double, ptr %112, i64 %114
  %117 = load double, ptr %116, align 8, !tbaa !7
  %118 = fadd double %115, %117
  %119 = add nuw nsw i64 %114, 1
  %120 = icmp eq i64 %119, 4
  br i1 %120, label %121, label %113, !llvm.loop !35

121:                                              ; preds = %113
  %.lcssa7 = phi double [ %118, %113 ]
  %122 = add nuw nsw i64 %109, 1
  %123 = icmp eq i64 %122, 4
  br i1 %123, label %124, label %108, !llvm.loop !36

124:                                              ; preds = %121
  %.lcssa7.lcssa = phi double [ %.lcssa7, %121 ]
  %125 = fmul double %.lcssa7.lcssa, 6.250000e-02
  %126 = load i32, ptr @disp, align 4, !tbaa !31
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %124
  %129 = load ptr, ptr @stderr, align 8, !tbaa !19
  %130 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %129, ptr noundef nonnull @.str.4, double noundef %125) #36
  br label %131

131:                                              ; preds = %128, %124
  %132 = insertelement <2 x double> poison, double %125, i64 0
  %133 = shufflevector <2 x double> %132, <2 x double> poison, <2 x i32> zeroinitializer
  br label %134

134:                                              ; preds = %149, %131
  %135 = phi i64 [ %150, %149 ], [ 0, %131 ]
  %136 = getelementptr inbounds ptr, ptr %6, i64 %135
  %137 = load ptr, ptr %136, align 8, !tbaa !19
  br label %138

138:                                              ; preds = %138, %134
  %139 = phi i64 [ 0, %134 ], [ %143, %138 ]
  %140 = getelementptr inbounds double, ptr %137, i64 %139
  %141 = load <2 x double>, ptr %140, align 8, !tbaa !7
  %142 = fsub <2 x double> %141, %133
  store <2 x double> %142, ptr %140, align 8, !tbaa !7
  %143 = add nuw i64 %139, 2
  %144 = icmp eq i64 %143, 4
  br i1 %144, label %149, label %138, !llvm.loop !37

145:                                              ; preds = %149
  %146 = fdiv double 6.000000e+02, %125
  %147 = insertelement <2 x double> poison, double %146, i64 0
  %148 = shufflevector <2 x double> %147, <2 x double> poison, <2 x i32> zeroinitializer
  br label %152

149:                                              ; preds = %138
  %150 = add nuw nsw i64 %135, 1
  %151 = icmp eq i64 %150, 4
  br i1 %151, label %145, label %134, !llvm.loop !38

152:                                              ; preds = %168, %145
  %153 = phi i64 [ 0, %145 ], [ %169, %168 ]
  %154 = getelementptr inbounds ptr, ptr %6, i64 %153
  %155 = load ptr, ptr %154, align 8, !tbaa !19
  br label %156

156:                                              ; preds = %156, %152
  %157 = phi i64 [ 0, %152 ], [ %161, %156 ]
  %158 = getelementptr inbounds double, ptr %155, i64 %157
  %159 = load <2 x double>, ptr %158, align 8, !tbaa !7
  %160 = fmul <2 x double> %148, %159
  store <2 x double> %160, ptr %158, align 8, !tbaa !7
  %161 = add nuw i64 %157, 2
  %162 = icmp eq i64 %161, 4
  br i1 %162, label %168, label %156, !llvm.loop !39

163:                                              ; preds = %168
  %164 = load i32, ptr @offset, align 4, !tbaa !31
  %165 = sitofp i32 %164 to double
  %166 = insertelement <2 x double> poison, double %165, i64 0
  %167 = shufflevector <2 x double> %166, <2 x double> poison, <2 x i32> zeroinitializer
  br label %171

168:                                              ; preds = %156
  %169 = add nuw nsw i64 %153, 1
  %170 = icmp eq i64 %169, 4
  br i1 %170, label %163, label %152, !llvm.loop !40

171:                                              ; preds = %182, %163
  %172 = phi i64 [ 0, %163 ], [ %183, %182 ]
  %173 = getelementptr inbounds ptr, ptr %6, i64 %172
  %174 = load ptr, ptr %173, align 8, !tbaa !19
  br label %175

175:                                              ; preds = %175, %171
  %176 = phi i64 [ 0, %171 ], [ %180, %175 ]
  %177 = getelementptr inbounds double, ptr %174, i64 %176
  %178 = load <2 x double>, ptr %177, align 8, !tbaa !7
  %179 = fsub <2 x double> %178, %167
  store <2 x double> %179, ptr %177, align 8, !tbaa !7
  %180 = add nuw i64 %176, 2
  %181 = icmp eq i64 %180, 4
  br i1 %181, label %182, label %175, !llvm.loop !41

182:                                              ; preds = %175
  %183 = add nuw nsw i64 %172, 1
  %184 = icmp eq i64 %183, 4
  br i1 %184, label %474, label %171, !llvm.loop !42

185:                                              ; preds = %57
  %186 = sitofp i32 %91 to double
  %187 = add nsw i32 %91, 2
  %188 = sitofp i32 %187 to double
  %189 = load ptr, ptr %7, align 8, !tbaa !19
  store double 0x3FEFAE147AE147AE, ptr %189, align 8, !tbaa !7
  %190 = getelementptr inbounds double, ptr %189, i64 1
  %191 = insertelement <2 x double> <double poison, double 1.000000e+00>, double %186, i64 0
  %192 = insertelement <2 x double> poison, double %188, i64 0
  %193 = shufflevector <2 x double> %192, <2 x double> poison, <2 x i32> zeroinitializer
  %194 = fdiv <2 x double> %191, %193
  %195 = fmul <2 x double> %194, <double 1.000000e-02, double 1.000000e-02>
  store <2 x double> %195, ptr %190, align 8, !tbaa !7
  %196 = getelementptr inbounds double, ptr %189, i64 3
  %197 = extractelement <2 x double> %195, i64 1
  store double %197, ptr %196, align 8, !tbaa !7
  %198 = getelementptr inbounds ptr, ptr %7, i64 1
  %199 = load ptr, ptr %198, align 8, !tbaa !19
  %200 = extractelement <2 x double> %195, i64 0
  store double %200, ptr %199, align 8, !tbaa !7
  %201 = getelementptr inbounds double, ptr %199, i64 1
  store double 0x3FEFAE147AE147AE, ptr %201, align 8, !tbaa !7
  %202 = getelementptr inbounds double, ptr %199, i64 2
  store double %197, ptr %202, align 8, !tbaa !7
  %203 = getelementptr inbounds double, ptr %199, i64 3
  store double %197, ptr %203, align 8, !tbaa !7
  %204 = getelementptr inbounds ptr, ptr %7, i64 2
  %205 = load ptr, ptr %204, align 8, !tbaa !19
  store double %197, ptr %205, align 8, !tbaa !7
  %206 = getelementptr inbounds double, ptr %205, i64 1
  store double %197, ptr %206, align 8, !tbaa !7
  %207 = getelementptr inbounds double, ptr %205, i64 2
  store double 0x3FEFAE147AE147AE, ptr %207, align 8, !tbaa !7
  %208 = getelementptr inbounds double, ptr %205, i64 3
  store double %200, ptr %208, align 8, !tbaa !7
  %209 = getelementptr inbounds ptr, ptr %7, i64 3
  %210 = load ptr, ptr %209, align 8, !tbaa !19
  store double %197, ptr %210, align 8, !tbaa !7
  %211 = getelementptr inbounds double, ptr %210, i64 1
  store double %197, ptr %211, align 8, !tbaa !7
  %212 = getelementptr inbounds double, ptr %210, i64 2
  store double %200, ptr %212, align 8, !tbaa !7
  %213 = getelementptr inbounds double, ptr %210, i64 3
  store double 0x3FEFAE147AE147AE, ptr %213, align 8, !tbaa !7
  %214 = load ptr, ptr @stderr, align 8, !tbaa !19
  %215 = load i32, ptr @pamN, align 4, !tbaa !31
  %216 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %214, ptr noundef nonnull @.str.5, i32 noundef %215) #36
  %217 = load i32, ptr @disp, align 4, !tbaa !31
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %242, label %219

219:                                              ; preds = %185
  %220 = load ptr, ptr @stderr, align 8, !tbaa !19
  %221 = tail call i64 @fwrite(ptr nonnull @.str.6, i64 6, i64 1, ptr %220) #38
  br label %222

222:                                              ; preds = %234, %219
  %223 = phi i64 [ 0, %219 ], [ %237, %234 ]
  %224 = getelementptr inbounds ptr, ptr %7, i64 %223
  br label %225

225:                                              ; preds = %225, %222
  %226 = phi i64 [ 0, %222 ], [ %232, %225 ]
  %227 = load ptr, ptr @stderr, align 8, !tbaa !19
  %228 = load ptr, ptr %224, align 8, !tbaa !19
  %229 = getelementptr inbounds double, ptr %228, i64 %226
  %230 = load double, ptr %229, align 8, !tbaa !7
  %231 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %227, ptr noundef nonnull @.str.7, double noundef %230) #36
  %232 = add nuw nsw i64 %226, 1
  %233 = icmp eq i64 %232, 4
  br i1 %233, label %234, label %225, !llvm.loop !43

234:                                              ; preds = %225
  %235 = load ptr, ptr @stderr, align 8, !tbaa !19
  %236 = tail call i32 @fputc(i32 10, ptr %235)
  %237 = add nuw nsw i64 %223, 1
  %238 = icmp eq i64 %237, 4
  br i1 %238, label %239, label %222, !llvm.loop !44

239:                                              ; preds = %234
  %240 = load ptr, ptr @stderr, align 8, !tbaa !19
  %241 = tail call i32 @fputc(i32 10, ptr %240)
  br label %242

242:                                              ; preds = %239, %185
  tail call void @MtxuntDouble(ptr noundef %6, i32 noundef 4) #35
  %243 = load i32, ptr @pamN, align 4, !tbaa !31
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %245, label %250

245:                                              ; preds = %245, %242
  %246 = phi i32 [ %247, %245 ], [ 0, %242 ]
  tail call void @MtxmltDouble(ptr noundef %6, ptr noundef nonnull %7, i32 noundef 4) #35
  %247 = add nuw nsw i32 %246, 1
  %248 = load i32, ptr @pamN, align 4, !tbaa !31
  %249 = icmp slt i32 %247, %248
  br i1 %249, label %245, label %250, !llvm.loop !45

250:                                              ; preds = %245, %242
  br label %251

251:                                              ; preds = %262, %250
  %252 = phi i64 [ %263, %262 ], [ 0, %250 ]
  %253 = getelementptr inbounds ptr, ptr %6, i64 %252
  %254 = load ptr, ptr %253, align 8, !tbaa !19
  br label %255

255:                                              ; preds = %255, %251
  %256 = phi i64 [ 0, %251 ], [ %260, %255 ]
  %257 = getelementptr inbounds double, ptr %254, i64 %256
  %258 = load <2 x double>, ptr %257, align 8, !tbaa !7
  %259 = fmul <2 x double> %258, <double 4.000000e+00, double 4.000000e+00>
  store <2 x double> %259, ptr %257, align 8, !tbaa !7
  %260 = add nuw i64 %256, 2
  %261 = icmp eq i64 %260, 4
  br i1 %261, label %262, label %255, !llvm.loop !46

262:                                              ; preds = %255
  %263 = add nuw nsw i64 %252, 1
  %264 = icmp eq i64 %263, 4
  br i1 %264, label %265, label %251, !llvm.loop !47

265:                                              ; preds = %288, %262
  %266 = phi i64 [ %289, %288 ], [ 0, %262 ]
  %267 = getelementptr inbounds ptr, ptr %6, i64 %266
  %268 = load ptr, ptr %267, align 8, !tbaa !19
  br label %269

269:                                              ; preds = %280, %265
  %270 = phi ptr [ %268, %265 ], [ %284, %280 ]
  %271 = phi i64 [ 0, %265 ], [ %286, %280 ]
  %272 = getelementptr inbounds double, ptr %270, i64 %271
  %273 = load double, ptr %272, align 8, !tbaa !7
  %274 = fcmp oeq double %273, 0.000000e+00
  br i1 %274, label %275, label %280

275:                                              ; preds = %269
  %276 = load ptr, ptr @stderr, align 8, !tbaa !19
  %277 = tail call i64 @fwrite(ptr nonnull @.str.9, i64 28, i64 1, ptr %276) #38
  %278 = load ptr, ptr %267, align 8, !tbaa !19
  %279 = getelementptr inbounds double, ptr %278, i64 %271
  store double 1.000000e-05, ptr %279, align 8, !tbaa !7
  br label %280

280:                                              ; preds = %275, %269
  %281 = phi double [ 1.000000e-05, %275 ], [ %273, %269 ]
  %282 = tail call double @log10(double noundef %281) #35
  %283 = fmul double %282, 1.000000e+03
  %284 = load ptr, ptr %267, align 8, !tbaa !19
  %285 = getelementptr inbounds double, ptr %284, i64 %271
  store double %283, ptr %285, align 8, !tbaa !7
  %286 = add nuw nsw i64 %271, 1
  %287 = icmp eq i64 %286, 4
  br i1 %287, label %288, label %269, !llvm.loop !48

288:                                              ; preds = %280
  %289 = add nuw nsw i64 %266, 1
  %290 = icmp eq i64 %289, 4
  br i1 %290, label %291, label %265, !llvm.loop !49

291:                                              ; preds = %288
  %292 = load i32, ptr @disp, align 4, !tbaa !31
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %317, label %294

294:                                              ; preds = %291
  %295 = load ptr, ptr @stderr, align 8, !tbaa !19
  %296 = tail call i64 @fwrite(ptr nonnull @.str.10, i64 11, i64 1, ptr %295) #38
  br label %297

297:                                              ; preds = %309, %294
  %298 = phi i64 [ 0, %294 ], [ %312, %309 ]
  %299 = getelementptr inbounds ptr, ptr %6, i64 %298
  br label %300

300:                                              ; preds = %300, %297
  %301 = phi i64 [ 0, %297 ], [ %307, %300 ]
  %302 = load ptr, ptr @stderr, align 8, !tbaa !19
  %303 = load ptr, ptr %299, align 8, !tbaa !19
  %304 = getelementptr inbounds double, ptr %303, i64 %301
  %305 = load double, ptr %304, align 8, !tbaa !7
  %306 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %302, ptr noundef nonnull @.str.7, double noundef %305) #36
  %307 = add nuw nsw i64 %301, 1
  %308 = icmp eq i64 %307, 4
  br i1 %308, label %309, label %300, !llvm.loop !50

309:                                              ; preds = %300
  %310 = load ptr, ptr @stderr, align 8, !tbaa !19
  %311 = tail call i32 @fputc(i32 10, ptr %310)
  %312 = add nuw nsw i64 %298, 1
  %313 = icmp eq i64 %312, 4
  br i1 %313, label %314, label %297, !llvm.loop !51

314:                                              ; preds = %309
  %315 = load ptr, ptr @stderr, align 8, !tbaa !19
  %316 = tail call i32 @fputc(i32 10, ptr %315)
  br label %317

317:                                              ; preds = %314, %291
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(26) @amino, ptr noundef nonnull align 16 dereferenceable(26) @locaminon, i64 26, i1 false), !tbaa !17
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(512) @amino_n, i8 -1, i64 512, i1 false), !tbaa !31
  br label %318

318:                                              ; preds = %318, %317
  %319 = phi i64 [ 0, %317 ], [ %325, %318 ]
  %320 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %319
  %321 = load i8, ptr %320, align 1, !tbaa !17
  %322 = sext i8 %321 to i64
  %323 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %322
  %324 = trunc i64 %319 to i32
  store i32 %324, ptr %323, align 4, !tbaa !31
  %325 = add nuw nsw i64 %319, 1
  %326 = icmp eq i64 %325, 26
  br i1 %326, label %327, label %318, !llvm.loop !52

327:                                              ; preds = %318
  %328 = load i32, ptr @fmodel, align 4, !tbaa !31
  %329 = icmp eq i32 %328, 1
  br i1 %329, label %330, label %331

330:                                              ; preds = %327
  tail call fastcc void @calcfreq_nuc(i32 noundef %0, ptr noundef %1, ptr noundef %8) #39
  br label %333

331:                                              ; preds = %327
  store <2 x double> <double 2.500000e-01, double 2.500000e-01>, ptr %8, align 8, !tbaa !7
  %332 = getelementptr inbounds double, ptr %8, i64 2
  store <2 x double> <double 2.500000e-01, double 2.500000e-01>, ptr %332, align 8, !tbaa !7
  br label %333

333:                                              ; preds = %331, %330
  br label %334

334:                                              ; preds = %352, %333
  %335 = phi i64 [ %353, %352 ], [ 0, %333 ]
  %336 = phi double [ %.lcssa9, %352 ], [ 0.000000e+00, %333 ]
  %337 = getelementptr inbounds ptr, ptr %6, i64 %335
  %338 = load ptr, ptr %337, align 8, !tbaa !19
  %339 = getelementptr inbounds double, ptr %8, i64 %335
  %340 = load double, ptr %339, align 8, !tbaa !7
  br label %341

341:                                              ; preds = %341, %334
  %342 = phi i64 [ 0, %334 ], [ %350, %341 ]
  %343 = phi double [ %336, %334 ], [ %349, %341 ]
  %344 = getelementptr inbounds double, ptr %338, i64 %342
  %345 = load double, ptr %344, align 8, !tbaa !7
  %346 = fmul double %345, %340
  %347 = getelementptr inbounds double, ptr %8, i64 %342
  %348 = load double, ptr %347, align 8, !tbaa !7
  %349 = tail call double @llvm.fmuladd.f64(double %346, double %348, double %343)
  %350 = add nuw nsw i64 %342, 1
  %351 = icmp eq i64 %350, 4
  br i1 %351, label %352, label %341, !llvm.loop !53

352:                                              ; preds = %341
  %.lcssa9 = phi double [ %349, %341 ]
  %353 = add nuw nsw i64 %335, 1
  %354 = icmp eq i64 %353, 4
  br i1 %354, label %355, label %334, !llvm.loop !54

355:                                              ; preds = %352
  %.lcssa9.lcssa = phi double [ %.lcssa9, %352 ]
  %356 = insertelement <2 x double> poison, double %.lcssa9.lcssa, i64 0
  %357 = shufflevector <2 x double> %356, <2 x double> poison, <2 x i32> zeroinitializer
  br label %358

358:                                              ; preds = %369, %355
  %359 = phi i64 [ %370, %369 ], [ 0, %355 ]
  %360 = getelementptr inbounds ptr, ptr %6, i64 %359
  %361 = load ptr, ptr %360, align 8, !tbaa !19
  br label %362

362:                                              ; preds = %362, %358
  %363 = phi i64 [ 0, %358 ], [ %367, %362 ]
  %364 = getelementptr inbounds double, ptr %361, i64 %363
  %365 = load <2 x double>, ptr %364, align 8, !tbaa !7
  %366 = fsub <2 x double> %365, %357
  store <2 x double> %366, ptr %364, align 8, !tbaa !7
  %367 = add nuw i64 %363, 2
  %368 = icmp eq i64 %367, 4
  br i1 %368, label %369, label %362, !llvm.loop !55

369:                                              ; preds = %362
  %370 = add nuw nsw i64 %359, 1
  %371 = icmp eq i64 %370, 4
  br i1 %371, label %376, label %358, !llvm.loop !56

372:                                              ; preds = %376
  %.lcssa8 = phi double [ %384, %376 ]
  %373 = fdiv double 6.000000e+02, %.lcssa8
  %374 = insertelement <2 x double> poison, double %373, i64 0
  %375 = shufflevector <2 x double> %374, <2 x double> poison, <2 x i32> zeroinitializer
  br label %387

376:                                              ; preds = %376, %369
  %377 = phi i64 [ %385, %376 ], [ 0, %369 ]
  %378 = phi double [ %384, %376 ], [ 0.000000e+00, %369 ]
  %379 = getelementptr inbounds ptr, ptr %6, i64 %377
  %380 = load ptr, ptr %379, align 8, !tbaa !19
  %381 = getelementptr inbounds double, ptr %380, i64 %377
  %382 = load double, ptr %381, align 8, !tbaa !7
  %383 = fmul double %382, 2.500000e-01
  %384 = fadd double %378, %383
  %385 = add nuw nsw i64 %377, 1
  %386 = icmp eq i64 %385, 4
  br i1 %386, label %372, label %376, !llvm.loop !57

387:                                              ; preds = %403, %372
  %388 = phi i64 [ 0, %372 ], [ %404, %403 ]
  %389 = getelementptr inbounds ptr, ptr %6, i64 %388
  %390 = load ptr, ptr %389, align 8, !tbaa !19
  br label %391

391:                                              ; preds = %391, %387
  %392 = phi i64 [ 0, %387 ], [ %396, %391 ]
  %393 = getelementptr inbounds double, ptr %390, i64 %392
  %394 = load <2 x double>, ptr %393, align 8, !tbaa !7
  %395 = fmul <2 x double> %375, %394
  store <2 x double> %395, ptr %393, align 8, !tbaa !7
  %396 = add nuw i64 %392, 2
  %397 = icmp eq i64 %396, 4
  br i1 %397, label %403, label %391, !llvm.loop !58

398:                                              ; preds = %403
  %399 = load i32, ptr @offset, align 4, !tbaa !31
  %400 = sitofp i32 %399 to double
  %401 = insertelement <2 x double> poison, double %400, i64 0
  %402 = shufflevector <2 x double> %401, <2 x double> poison, <2 x i32> zeroinitializer
  br label %406

403:                                              ; preds = %391
  %404 = add nuw nsw i64 %388, 1
  %405 = icmp eq i64 %404, 4
  br i1 %405, label %398, label %387, !llvm.loop !59

406:                                              ; preds = %417, %398
  %407 = phi i64 [ 0, %398 ], [ %418, %417 ]
  %408 = getelementptr inbounds ptr, ptr %6, i64 %407
  %409 = load ptr, ptr %408, align 8, !tbaa !19
  br label %410

410:                                              ; preds = %410, %406
  %411 = phi i64 [ 0, %406 ], [ %415, %410 ]
  %412 = getelementptr inbounds double, ptr %409, i64 %411
  %413 = load <2 x double>, ptr %412, align 8, !tbaa !7
  %414 = fsub <2 x double> %413, %402
  store <2 x double> %414, ptr %412, align 8, !tbaa !7
  %415 = add nuw i64 %411, 2
  %416 = icmp eq i64 %415, 4
  br i1 %416, label %417, label %410, !llvm.loop !60

417:                                              ; preds = %410
  %418 = add nuw nsw i64 %407, 1
  %419 = icmp eq i64 %418, 4
  br i1 %419, label %420, label %406, !llvm.loop !61

420:                                              ; preds = %442, %417
  %421 = phi i64 [ %443, %442 ], [ 0, %417 ]
  %422 = getelementptr inbounds ptr, ptr %6, i64 %421
  %423 = load ptr, ptr %422, align 8, !tbaa !19
  br label %424

424:                                              ; preds = %437, %420
  %425 = phi i64 [ 0, %420 ], [ %440, %437 ]
  %426 = getelementptr inbounds double, ptr %423, i64 %425
  %427 = load double, ptr %426, align 8, !tbaa !7
  %428 = fcmp ogt double %427, 0.000000e+00
  br i1 %428, label %429, label %432

429:                                              ; preds = %424
  %430 = fadd double %427, 5.000000e-01
  %431 = fptosi double %430 to i32
  br label %437

432:                                              ; preds = %424
  %433 = fcmp olt double %427, 0.000000e+00
  br i1 %433, label %434, label %437

434:                                              ; preds = %432
  %435 = fadd double %427, -5.000000e-01
  %436 = fptosi double %435 to i32
  br label %437

437:                                              ; preds = %434, %432, %429
  %438 = phi i32 [ %431, %429 ], [ %436, %434 ], [ 0, %432 ]
  %439 = sitofp i32 %438 to double
  store double %439, ptr %426, align 8, !tbaa !7
  %440 = add nuw nsw i64 %425, 1
  %441 = icmp eq i64 %440, 4
  br i1 %441, label %442, label %424, !llvm.loop !62

442:                                              ; preds = %437
  %443 = add nuw nsw i64 %421, 1
  %444 = icmp eq i64 %443, 4
  br i1 %444, label %445, label %420, !llvm.loop !63

445:                                              ; preds = %442
  %446 = load i32, ptr @disp, align 4, !tbaa !31
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %471, label %448

448:                                              ; preds = %445
  %449 = load ptr, ptr @stderr, align 8, !tbaa !19
  %450 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 20, i64 1, ptr %449) #38
  br label %451

451:                                              ; preds = %463, %448
  %452 = phi i64 [ 0, %448 ], [ %466, %463 ]
  %453 = getelementptr inbounds ptr, ptr %6, i64 %452
  br label %454

454:                                              ; preds = %454, %451
  %455 = phi i64 [ 0, %451 ], [ %461, %454 ]
  %456 = load ptr, ptr @stderr, align 8, !tbaa !19
  %457 = load ptr, ptr %453, align 8, !tbaa !19
  %458 = getelementptr inbounds double, ptr %457, i64 %455
  %459 = load double, ptr %458, align 8, !tbaa !7
  %460 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %456, ptr noundef nonnull @.str.7, double noundef %459) #36
  %461 = add nuw nsw i64 %455, 1
  %462 = icmp eq i64 %461, 4
  br i1 %462, label %463, label %454, !llvm.loop !64

463:                                              ; preds = %454
  %464 = load ptr, ptr @stderr, align 8, !tbaa !19
  %465 = tail call i32 @fputc(i32 10, ptr %464)
  %466 = add nuw nsw i64 %452, 1
  %467 = icmp eq i64 %466, 4
  br i1 %467, label %468, label %451, !llvm.loop !65

468:                                              ; preds = %463
  %469 = load ptr, ptr @stderr, align 8, !tbaa !19
  %470 = tail call i32 @fputc(i32 10, ptr %469)
  br label %471

471:                                              ; preds = %468, %445
  %472 = load ptr, ptr @stderr, align 8, !tbaa !19
  %473 = tail call i64 @fwrite(ptr nonnull @.str.12, i64 5, i64 1, ptr %472) #38
  br label %474

474:                                              ; preds = %471, %182
  %475 = getelementptr inbounds ptr, ptr %6, i64 3
  %476 = load ptr, ptr %475, align 8, !tbaa !19
  %477 = getelementptr inbounds ptr, ptr %6, i64 4
  %478 = load ptr, ptr %477, align 8, !tbaa !19
  br label %479

479:                                              ; preds = %479, %474
  %480 = phi i64 [ 0, %474 ], [ %489, %479 ]
  %481 = getelementptr inbounds double, ptr %476, i64 %480
  %482 = load double, ptr %481, align 8, !tbaa !7
  %483 = getelementptr inbounds double, ptr %478, i64 %480
  store double %482, ptr %483, align 8, !tbaa !7
  %484 = getelementptr inbounds ptr, ptr %6, i64 %480
  %485 = load ptr, ptr %484, align 8, !tbaa !19
  %486 = getelementptr inbounds double, ptr %485, i64 3
  %487 = load double, ptr %486, align 8, !tbaa !7
  %488 = getelementptr inbounds double, ptr %485, i64 4
  store double %487, ptr %488, align 8, !tbaa !7
  %489 = add nuw nsw i64 %480, 1
  %490 = icmp eq i64 %489, 5
  br i1 %490, label %491, label %479, !llvm.loop !66

491:                                              ; preds = %506, %479
  %492 = phi i64 [ %507, %506 ], [ 5, %479 ]
  %493 = add nsw i64 %492, -5
  %494 = getelementptr inbounds ptr, ptr %6, i64 %493
  %495 = load ptr, ptr %494, align 8, !tbaa !19
  %496 = getelementptr inbounds ptr, ptr %6, i64 %492
  %497 = load ptr, ptr %496, align 8, !tbaa !19
  br label %498

498:                                              ; preds = %498, %491
  %499 = phi i64 [ 5, %491 ], [ %504, %498 ]
  %500 = add nsw i64 %499, -5
  %501 = getelementptr inbounds double, ptr %495, i64 %500
  %502 = load double, ptr %501, align 8, !tbaa !7
  %503 = getelementptr inbounds double, ptr %497, i64 %499
  store double %502, ptr %503, align 8, !tbaa !7
  %504 = add nuw nsw i64 %499, 1
  %505 = icmp eq i64 %504, 10
  br i1 %505, label %506, label %498, !llvm.loop !67

506:                                              ; preds = %498
  %507 = add nuw nsw i64 %492, 1
  %508 = icmp eq i64 %507, 10
  br i1 %508, label %509, label %491, !llvm.loop !68

509:                                              ; preds = %506
  %510 = load i32, ptr @disp, align 4, !tbaa !31
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %560, label %512

512:                                              ; preds = %509
  %513 = load ptr, ptr @stderr, align 8, !tbaa !19
  %514 = tail call i64 @fwrite(ptr nonnull @.str.13, i64 12, i64 1, ptr %513) #38
  br label %515

515:                                              ; preds = %527, %512
  %516 = phi i64 [ 0, %512 ], [ %530, %527 ]
  %517 = getelementptr inbounds ptr, ptr %6, i64 %516
  br label %518

518:                                              ; preds = %518, %515
  %519 = phi i64 [ 0, %515 ], [ %525, %518 ]
  %520 = load ptr, ptr @stderr, align 8, !tbaa !19
  %521 = load ptr, ptr %517, align 8, !tbaa !19
  %522 = getelementptr inbounds double, ptr %521, i64 %519
  %523 = load double, ptr %522, align 8, !tbaa !7
  %524 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %520, ptr noundef nonnull @.str.7, double noundef %523) #36
  %525 = add nuw nsw i64 %519, 1
  %526 = icmp eq i64 %525, 4
  br i1 %526, label %527, label %518, !llvm.loop !69

527:                                              ; preds = %518
  %528 = load ptr, ptr @stderr, align 8, !tbaa !19
  %529 = tail call i32 @fputc(i32 10, ptr %528)
  %530 = add nuw nsw i64 %516, 1
  %531 = icmp eq i64 %530, 4
  br i1 %531, label %532, label %515, !llvm.loop !70

532:                                              ; preds = %527
  %533 = load ptr, ptr @stderr, align 8, !tbaa !19
  %534 = tail call i32 @fputc(i32 10, ptr %533)
  %535 = load i32, ptr @disp, align 4, !tbaa !31
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %560, label %537

537:                                              ; preds = %532
  %538 = load ptr, ptr @stderr, align 8, !tbaa !19
  %539 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 16, i64 1, ptr %538) #38
  br label %540

540:                                              ; preds = %552, %537
  %541 = phi i64 [ 0, %537 ], [ %555, %552 ]
  %542 = getelementptr inbounds ptr, ptr %6, i64 %541
  br label %543

543:                                              ; preds = %543, %540
  %544 = phi i64 [ 0, %540 ], [ %550, %543 ]
  %545 = load ptr, ptr @stderr, align 8, !tbaa !19
  %546 = load ptr, ptr %542, align 8, !tbaa !19
  %547 = getelementptr inbounds double, ptr %546, i64 %544
  %548 = load double, ptr %547, align 8, !tbaa !7
  %549 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %545, ptr noundef nonnull @.str.7, double noundef %548) #36
  %550 = add nuw nsw i64 %544, 1
  %551 = icmp eq i64 %550, 4
  br i1 %551, label %552, label %543, !llvm.loop !71

552:                                              ; preds = %543
  %553 = load ptr, ptr @stderr, align 8, !tbaa !19
  %554 = tail call i32 @fputc(i32 10, ptr %553)
  %555 = add nuw nsw i64 %541, 1
  %556 = icmp eq i64 %555, 4
  br i1 %556, label %557, label %540, !llvm.loop !72

557:                                              ; preds = %552
  %558 = load ptr, ptr @stderr, align 8, !tbaa !19
  %559 = tail call i32 @fputc(i32 10, ptr %558)
  br label %560

560:                                              ; preds = %557, %532, %509
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(26) @amino, ptr noundef nonnull align 16 dereferenceable(26) @locaminon, i64 26, i1 false), !tbaa !17
  br label %561

561:                                              ; preds = %561, %560
  %562 = phi i64 [ 0, %560 ], [ %569, %561 ]
  %563 = getelementptr inbounds [26 x i8], ptr @locgrpn, i64 0, i64 %562
  %564 = load i8, ptr %563, align 1, !tbaa !17
  %565 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %562
  %566 = load i8, ptr %565, align 1, !tbaa !17
  %567 = sext i8 %566 to i64
  %568 = getelementptr inbounds [128 x i8], ptr @amino_grp, i64 0, i64 %567
  store i8 %564, ptr %568, align 1, !tbaa !17
  %569 = add nuw nsw i64 %562, 1
  %570 = icmp eq i64 %569, 26
  br i1 %570, label %571, label %561, !llvm.loop !73

571:                                              ; preds = %561
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(2704) @n_dis, i8 0, i64 2704, i1 false), !tbaa !31
  br label %572

572:                                              ; preds = %594, %571
  %573 = phi i64 [ 0, %571 ], [ %595, %594 ]
  %574 = getelementptr inbounds ptr, ptr %6, i64 %573
  %575 = load ptr, ptr %574, align 8, !tbaa !19
  br label %576

576:                                              ; preds = %589, %572
  %577 = phi i64 [ 0, %572 ], [ %592, %589 ]
  %578 = getelementptr inbounds double, ptr %575, i64 %577
  %579 = load double, ptr %578, align 8, !tbaa !7
  %580 = fcmp ogt double %579, 0.000000e+00
  br i1 %580, label %581, label %584

581:                                              ; preds = %576
  %582 = fadd double %579, 5.000000e-01
  %583 = fptosi double %582 to i32
  br label %589

584:                                              ; preds = %576
  %585 = fcmp olt double %579, 0.000000e+00
  br i1 %585, label %586, label %589

586:                                              ; preds = %584
  %587 = fadd double %579, -5.000000e-01
  %588 = fptosi double %587 to i32
  br label %589

589:                                              ; preds = %586, %584, %581
  %590 = phi i32 [ %583, %581 ], [ %588, %586 ], [ 0, %584 ]
  %591 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %573, i64 %577
  store i32 %590, ptr %591, align 4, !tbaa !31
  %592 = add nuw nsw i64 %577, 1
  %593 = icmp eq i64 %592, 10
  br i1 %593, label %594, label %576, !llvm.loop !74

594:                                              ; preds = %589
  %595 = add nuw nsw i64 %573, 1
  %596 = icmp eq i64 %595, 10
  br i1 %596, label %597, label %572, !llvm.loop !75

597:                                              ; preds = %594
  %598 = load i32, ptr @disp, align 4, !tbaa !31
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %621, label %600

600:                                              ; preds = %597
  %601 = load ptr, ptr @stderr, align 8, !tbaa !19
  %602 = tail call i64 @fwrite(ptr nonnull @.str.14, i64 16, i64 1, ptr %601) #38
  br label %603

603:                                              ; preds = %613, %600
  %604 = phi i64 [ 0, %600 ], [ %616, %613 ]
  br label %605

605:                                              ; preds = %605, %603
  %606 = phi i64 [ 0, %603 ], [ %611, %605 ]
  %607 = load ptr, ptr @stderr, align 8, !tbaa !19
  %608 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %604, i64 %606
  %609 = load i32, ptr %608, align 4, !tbaa !31
  %610 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %607, ptr noundef nonnull @.str.15, i32 noundef %609) #36
  %611 = add nuw nsw i64 %606, 1
  %612 = icmp eq i64 %611, 26
  br i1 %612, label %613, label %605, !llvm.loop !76

613:                                              ; preds = %605
  %614 = load ptr, ptr @stderr, align 8, !tbaa !19
  %615 = tail call i32 @fputc(i32 10, ptr %614)
  %616 = add nuw nsw i64 %604, 1
  %617 = icmp eq i64 %616, 26
  br i1 %617, label %618, label %603, !llvm.loop !77

618:                                              ; preds = %613
  %619 = load ptr, ptr @stderr, align 8, !tbaa !19
  %620 = tail call i32 @fputc(i32 10, ptr %619)
  br label %621

621:                                              ; preds = %618, %597
  br label %622

622:                                              ; preds = %638, %621
  %623 = phi i64 [ %639, %638 ], [ 0, %621 ]
  %624 = phi double [ %.lcssa6, %638 ], [ 0.000000e+00, %621 ]
  %625 = getelementptr inbounds double, ptr %8, i64 %623
  %626 = load double, ptr %625, align 8, !tbaa !7
  br label %627

627:                                              ; preds = %627, %622
  %628 = phi i64 [ 0, %622 ], [ %636, %627 ]
  %629 = phi double [ %624, %622 ], [ %635, %627 ]
  %630 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %623, i64 %628
  %631 = load double, ptr %630, align 8, !tbaa !7
  %632 = fmul double %631, %626
  %633 = getelementptr inbounds double, ptr %8, i64 %628
  %634 = load double, ptr %633, align 8, !tbaa !7
  %635 = tail call double @llvm.fmuladd.f64(double %632, double %634, double %629)
  %636 = add nuw nsw i64 %628, 1
  %637 = icmp eq i64 %636, 4
  br i1 %637, label %638, label %627, !llvm.loop !78

638:                                              ; preds = %627
  %.lcssa6 = phi double [ %635, %627 ]
  %639 = add nuw nsw i64 %623, 1
  %640 = icmp eq i64 %639, 4
  br i1 %640, label %641, label %622, !llvm.loop !79

641:                                              ; preds = %638
  %.lcssa6.lcssa = phi double [ %.lcssa6, %638 ]
  %642 = insertelement <2 x double> poison, double %.lcssa6.lcssa, i64 0
  %643 = shufflevector <2 x double> %642, <2 x double> poison, <2 x i32> zeroinitializer
  br label %644

644:                                              ; preds = %653, %641
  %645 = phi i64 [ %654, %653 ], [ 0, %641 ]
  br label %646

646:                                              ; preds = %646, %644
  %647 = phi i64 [ 0, %644 ], [ %651, %646 ]
  %648 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %645, i64 %647
  %649 = load <2 x double>, ptr %648, align 16, !tbaa !7
  %650 = fsub <2 x double> %649, %643
  store <2 x double> %650, ptr %648, align 16, !tbaa !7
  %651 = add nuw i64 %647, 2
  %652 = icmp eq i64 %651, 4
  br i1 %652, label %653, label %646, !llvm.loop !80

653:                                              ; preds = %646
  %654 = add nuw nsw i64 %645, 1
  %655 = icmp eq i64 %654, 4
  br i1 %655, label %656, label %644, !llvm.loop !81

656:                                              ; preds = %694, %653
  %657 = phi i64 [ %695, %694 ], [ 0, %653 ]
  %658 = phi double [ %.lcssa5.lcssa.lcssa, %694 ], [ 0.000000e+00, %653 ]
  %659 = shl nsw i64 %657, 2
  %660 = getelementptr inbounds double, ptr %8, i64 %657
  %661 = load double, ptr %660, align 8, !tbaa !7
  br label %662

662:                                              ; preds = %691, %656
  %663 = phi i64 [ 0, %656 ], [ %692, %691 ]
  %664 = phi double [ %658, %656 ], [ %.lcssa5.lcssa, %691 ]
  %665 = add nuw nsw i64 %663, %659
  %666 = getelementptr inbounds double, ptr %8, i64 %663
  %667 = load double, ptr %666, align 8, !tbaa !7
  br label %668

668:                                              ; preds = %688, %662
  %669 = phi i64 [ 0, %662 ], [ %689, %688 ]
  %670 = phi double [ %664, %662 ], [ %.lcssa5, %688 ]
  %671 = shl nsw i64 %669, 2
  %672 = getelementptr inbounds double, ptr %8, i64 %669
  %673 = load double, ptr %672, align 8, !tbaa !7
  br label %674

674:                                              ; preds = %674, %668
  %675 = phi i64 [ 0, %668 ], [ %686, %674 ]
  %676 = phi double [ %670, %668 ], [ %685, %674 ]
  %677 = add nuw nsw i64 %675, %671
  %678 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %665, i64 %677
  %679 = load double, ptr %678, align 8, !tbaa !7
  %680 = fmul double %679, %661
  %681 = fmul double %680, %667
  %682 = fmul double %681, %673
  %683 = getelementptr inbounds double, ptr %8, i64 %675
  %684 = load double, ptr %683, align 8, !tbaa !7
  %685 = tail call double @llvm.fmuladd.f64(double %682, double %684, double %676)
  %686 = add nuw nsw i64 %675, 1
  %687 = icmp eq i64 %686, 4
  br i1 %687, label %688, label %674, !llvm.loop !82

688:                                              ; preds = %674
  %.lcssa5 = phi double [ %685, %674 ]
  %689 = add nuw nsw i64 %669, 1
  %690 = icmp eq i64 %689, 4
  br i1 %690, label %691, label %668, !llvm.loop !83

691:                                              ; preds = %688
  %.lcssa5.lcssa = phi double [ %.lcssa5, %688 ]
  %692 = add nuw nsw i64 %663, 1
  %693 = icmp eq i64 %692, 4
  br i1 %693, label %694, label %662, !llvm.loop !84

694:                                              ; preds = %691
  %.lcssa5.lcssa.lcssa = phi double [ %.lcssa5.lcssa, %691 ]
  %695 = add nuw nsw i64 %657, 1
  %696 = icmp eq i64 %695, 4
  br i1 %696, label %697, label %656, !llvm.loop !85

697:                                              ; preds = %694
  %.lcssa5.lcssa.lcssa.lcssa = phi double [ %.lcssa5.lcssa.lcssa, %694 ]
  %698 = insertelement <2 x double> poison, double %.lcssa5.lcssa.lcssa.lcssa, i64 0
  %699 = shufflevector <2 x double> %698, <2 x double> poison, <2 x i32> zeroinitializer
  br label %700

700:                                              ; preds = %709, %697
  %701 = phi i64 [ %710, %709 ], [ 0, %697 ]
  br label %702

702:                                              ; preds = %702, %700
  %703 = phi i64 [ 0, %700 ], [ %707, %702 ]
  %704 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %701, i64 %703
  %705 = load <2 x double>, ptr %704, align 16, !tbaa !7
  %706 = fsub <2 x double> %705, %699
  store <2 x double> %706, ptr %704, align 16, !tbaa !7
  %707 = add nuw i64 %703, 2
  %708 = icmp eq i64 %707, 16
  br i1 %708, label %709, label %702, !llvm.loop !86

709:                                              ; preds = %702
  %710 = add nuw nsw i64 %701, 1
  %711 = icmp eq i64 %710, 16
  br i1 %711, label %716, label %700, !llvm.loop !87

712:                                              ; preds = %716
  %.lcssa4 = phi double [ %723, %716 ]
  %713 = fdiv double 6.000000e+02, %.lcssa4
  %714 = insertelement <2 x double> poison, double %713, i64 0
  %715 = shufflevector <2 x double> %714, <2 x double> poison, <2 x i32> zeroinitializer
  br label %726

716:                                              ; preds = %716, %709
  %717 = phi i64 [ %724, %716 ], [ 0, %709 ]
  %718 = phi double [ %723, %716 ], [ 0.000000e+00, %709 ]
  %719 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %717, i64 %717
  %720 = load double, ptr %719, align 8, !tbaa !7
  %721 = getelementptr inbounds double, ptr %8, i64 %717
  %722 = load double, ptr %721, align 8, !tbaa !7
  %723 = tail call double @llvm.fmuladd.f64(double %720, double %722, double %718)
  %724 = add nuw nsw i64 %717, 1
  %725 = icmp eq i64 %724, 4
  br i1 %725, label %712, label %716, !llvm.loop !88

726:                                              ; preds = %735, %712
  %727 = phi i64 [ 0, %712 ], [ %736, %735 ]
  br label %728

728:                                              ; preds = %728, %726
  %729 = phi i64 [ 0, %726 ], [ %733, %728 ]
  %730 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %727, i64 %729
  %731 = load <2 x double>, ptr %730, align 16, !tbaa !7
  %732 = fmul <2 x double> %715, %731
  store <2 x double> %732, ptr %730, align 16, !tbaa !7
  %733 = add nuw i64 %729, 2
  %734 = icmp eq i64 %733, 4
  br i1 %734, label %735, label %728, !llvm.loop !89

735:                                              ; preds = %728
  %736 = add nuw nsw i64 %727, 1
  %737 = icmp eq i64 %736, 4
  br i1 %737, label %738, label %726, !llvm.loop !90

738:                                              ; preds = %735
  %739 = load double, ptr getelementptr inbounds ([16 x [16 x double]], ptr @ribosum16, i64 0, i64 3, i64 3), align 8, !tbaa !7
  %740 = load double, ptr %8, align 8, !tbaa !7
  %741 = fmul double %739, %740
  %742 = getelementptr inbounds double, ptr %8, i64 3
  %743 = load double, ptr %742, align 8, !tbaa !7
  %744 = tail call double @llvm.fmuladd.f64(double %741, double %743, double 0.000000e+00)
  %745 = load double, ptr getelementptr inbounds ([16 x [16 x double]], ptr @ribosum16, i64 0, i64 12, i64 12), align 16, !tbaa !7
  %746 = fmul double %743, %745
  %747 = tail call double @llvm.fmuladd.f64(double %746, double %740, double %744)
  %748 = load double, ptr getelementptr inbounds ([16 x [16 x double]], ptr @ribosum16, i64 0, i64 6, i64 6), align 16, !tbaa !7
  %749 = getelementptr inbounds double, ptr %8, i64 1
  %750 = load double, ptr %749, align 8, !tbaa !7
  %751 = fmul double %748, %750
  %752 = getelementptr inbounds double, ptr %8, i64 2
  %753 = load double, ptr %752, align 8, !tbaa !7
  %754 = tail call double @llvm.fmuladd.f64(double %751, double %753, double %747)
  %755 = load double, ptr getelementptr inbounds ([16 x [16 x double]], ptr @ribosum16, i64 0, i64 9, i64 9), align 8, !tbaa !7
  %756 = fmul double %753, %755
  %757 = tail call double @llvm.fmuladd.f64(double %756, double %750, double %754)
  %758 = load double, ptr getelementptr inbounds ([16 x [16 x double]], ptr @ribosum16, i64 0, i64 7, i64 7), align 8, !tbaa !7
  %759 = fmul double %750, %758
  %760 = tail call double @llvm.fmuladd.f64(double %759, double %743, double %757)
  %761 = load double, ptr getelementptr inbounds ([16 x [16 x double]], ptr @ribosum16, i64 0, i64 13, i64 13), align 8, !tbaa !7
  %762 = fmul double %743, %761
  %763 = tail call double @llvm.fmuladd.f64(double %762, double %750, double %760)
  %764 = fdiv double 6.000000e+02, %763
  %765 = insertelement <2 x double> poison, double %764, i64 0
  %766 = shufflevector <2 x double> %765, <2 x double> poison, <2 x i32> zeroinitializer
  br label %767

767:                                              ; preds = %781, %738
  %768 = phi i64 [ 0, %738 ], [ %782, %781 ]
  br label %769

769:                                              ; preds = %769, %767
  %770 = phi i64 [ 0, %767 ], [ %774, %769 ]
  %771 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %768, i64 %770
  %772 = load <2 x double>, ptr %771, align 16, !tbaa !7
  %773 = fmul <2 x double> %766, %772
  store <2 x double> %773, ptr %771, align 16, !tbaa !7
  %774 = add nuw i64 %770, 2
  %775 = icmp eq i64 %774, 16
  br i1 %775, label %781, label %769, !llvm.loop !91

776:                                              ; preds = %781
  %777 = load i32, ptr @offset, align 4, !tbaa !31
  %778 = sitofp i32 %777 to double
  %779 = insertelement <2 x double> poison, double %778, i64 0
  %780 = shufflevector <2 x double> %779, <2 x double> poison, <2 x i32> zeroinitializer
  br label %784

781:                                              ; preds = %769
  %782 = add nuw nsw i64 %768, 1
  %783 = icmp eq i64 %782, 16
  br i1 %783, label %776, label %767, !llvm.loop !92

784:                                              ; preds = %793, %776
  %785 = phi i64 [ 0, %776 ], [ %794, %793 ]
  br label %786

786:                                              ; preds = %786, %784
  %787 = phi i64 [ 0, %784 ], [ %791, %786 ]
  %788 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %785, i64 %787
  %789 = load <2 x double>, ptr %788, align 16, !tbaa !7
  %790 = fsub <2 x double> %789, %780
  store <2 x double> %790, ptr %788, align 16, !tbaa !7
  %791 = add nuw i64 %787, 2
  %792 = icmp eq i64 %791, 4
  br i1 %792, label %793, label %786, !llvm.loop !93

793:                                              ; preds = %786
  %794 = add nuw nsw i64 %785, 1
  %795 = icmp eq i64 %794, 4
  br i1 %795, label %796, label %784, !llvm.loop !94

796:                                              ; preds = %793
  %797 = insertelement <2 x double> poison, double %778, i64 0
  %798 = shufflevector <2 x double> %797, <2 x double> poison, <2 x i32> zeroinitializer
  br label %799

799:                                              ; preds = %808, %796
  %800 = phi i64 [ %809, %808 ], [ 0, %796 ]
  br label %801

801:                                              ; preds = %801, %799
  %802 = phi i64 [ 0, %799 ], [ %806, %801 ]
  %803 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %800, i64 %802
  %804 = load <2 x double>, ptr %803, align 16, !tbaa !7
  %805 = fsub <2 x double> %804, %798
  store <2 x double> %805, ptr %803, align 16, !tbaa !7
  %806 = add nuw i64 %802, 2
  %807 = icmp eq i64 %806, 16
  br i1 %807, label %808, label %801, !llvm.loop !95

808:                                              ; preds = %801
  %809 = add nuw nsw i64 %800, 1
  %810 = icmp eq i64 %809, 16
  br i1 %810, label %811, label %799, !llvm.loop !96

811:                                              ; preds = %831, %808
  %812 = phi i64 [ %832, %831 ], [ 0, %808 ]
  br label %813

813:                                              ; preds = %826, %811
  %814 = phi i64 [ 0, %811 ], [ %829, %826 ]
  %815 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %812, i64 %814
  %816 = load double, ptr %815, align 8, !tbaa !7
  %817 = fcmp ogt double %816, 0.000000e+00
  br i1 %817, label %818, label %821

818:                                              ; preds = %813
  %819 = fadd double %816, 5.000000e-01
  %820 = fptosi double %819 to i32
  br label %826

821:                                              ; preds = %813
  %822 = fcmp olt double %816, 0.000000e+00
  br i1 %822, label %823, label %826

823:                                              ; preds = %821
  %824 = fadd double %816, -5.000000e-01
  %825 = fptosi double %824 to i32
  br label %826

826:                                              ; preds = %823, %821, %818
  %827 = phi i32 [ %820, %818 ], [ %825, %823 ], [ 0, %821 ]
  %828 = sitofp i32 %827 to double
  store double %828, ptr %815, align 8, !tbaa !7
  %829 = add nuw nsw i64 %814, 1
  %830 = icmp eq i64 %829, 4
  br i1 %830, label %831, label %813, !llvm.loop !97

831:                                              ; preds = %826
  %832 = add nuw nsw i64 %812, 1
  %833 = icmp eq i64 %832, 4
  br i1 %833, label %834, label %811, !llvm.loop !98

834:                                              ; preds = %854, %831
  %835 = phi i64 [ %855, %854 ], [ 0, %831 ]
  br label %836

836:                                              ; preds = %849, %834
  %837 = phi i64 [ 0, %834 ], [ %852, %849 ]
  %838 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %835, i64 %837
  %839 = load double, ptr %838, align 8, !tbaa !7
  %840 = fcmp ogt double %839, 0.000000e+00
  br i1 %840, label %841, label %844

841:                                              ; preds = %836
  %842 = fadd double %839, 5.000000e-01
  %843 = fptosi double %842 to i32
  br label %849

844:                                              ; preds = %836
  %845 = fcmp olt double %839, 0.000000e+00
  br i1 %845, label %846, label %849

846:                                              ; preds = %844
  %847 = fadd double %839, -5.000000e-01
  %848 = fptosi double %847 to i32
  br label %849

849:                                              ; preds = %846, %844, %841
  %850 = phi i32 [ %843, %841 ], [ %848, %846 ], [ 0, %844 ]
  %851 = sitofp i32 %850 to double
  store double %851, ptr %838, align 8, !tbaa !7
  %852 = add nuw nsw i64 %837, 1
  %853 = icmp eq i64 %852, 16
  br i1 %853, label %854, label %836, !llvm.loop !99

854:                                              ; preds = %849
  %855 = add nuw nsw i64 %835, 1
  %856 = icmp eq i64 %855, 16
  br i1 %856, label %857, label %834, !llvm.loop !100

857:                                              ; preds = %854
  %858 = load i32, ptr @disp, align 4, !tbaa !31
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %901, label %860

860:                                              ; preds = %857
  %861 = load ptr, ptr @stderr, align 8, !tbaa !19
  %862 = tail call i64 @fwrite(ptr nonnull @.str.16, i64 27, i64 1, ptr %861) #38
  br label %863

863:                                              ; preds = %873, %860
  %864 = phi i64 [ 0, %860 ], [ %876, %873 ]
  br label %865

865:                                              ; preds = %865, %863
  %866 = phi i64 [ 0, %863 ], [ %871, %865 ]
  %867 = load ptr, ptr @stderr, align 8, !tbaa !19
  %868 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %864, i64 %866
  %869 = load double, ptr %868, align 8, !tbaa !7
  %870 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %867, ptr noundef nonnull @.str.7, double noundef %869) #36
  %871 = add nuw nsw i64 %866, 1
  %872 = icmp eq i64 %871, 4
  br i1 %872, label %873, label %865, !llvm.loop !101

873:                                              ; preds = %865
  %874 = load ptr, ptr @stderr, align 8, !tbaa !19
  %875 = tail call i32 @fputc(i32 10, ptr %874)
  %876 = add nuw nsw i64 %864, 1
  %877 = icmp eq i64 %876, 4
  br i1 %877, label %878, label %863, !llvm.loop !102

878:                                              ; preds = %873
  %879 = load ptr, ptr @stderr, align 8, !tbaa !19
  %880 = tail call i32 @fputc(i32 10, ptr %879)
  %881 = load ptr, ptr @stderr, align 8, !tbaa !19
  %882 = tail call i64 @fwrite(ptr nonnull @.str.17, i64 29, i64 1, ptr %881) #38
  br label %883

883:                                              ; preds = %893, %878
  %884 = phi i64 [ 0, %878 ], [ %896, %893 ]
  br label %885

885:                                              ; preds = %885, %883
  %886 = phi i64 [ 0, %883 ], [ %891, %885 ]
  %887 = load ptr, ptr @stderr, align 8, !tbaa !19
  %888 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %884, i64 %886
  %889 = load double, ptr %888, align 8, !tbaa !7
  %890 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %887, ptr noundef nonnull @.str.18, double noundef %889) #36
  %891 = add nuw nsw i64 %886, 1
  %892 = icmp eq i64 %891, 16
  br i1 %892, label %893, label %885, !llvm.loop !103

893:                                              ; preds = %885
  %894 = load ptr, ptr @stderr, align 8, !tbaa !19
  %895 = tail call i32 @fputc(i32 10, ptr %894)
  %896 = add nuw nsw i64 %884, 1
  %897 = icmp eq i64 %896, 16
  br i1 %897, label %898, label %883, !llvm.loop !104

898:                                              ; preds = %893
  %899 = load ptr, ptr @stderr, align 8, !tbaa !19
  %900 = tail call i32 @fputc(i32 10, ptr %899)
  br label %901

901:                                              ; preds = %898, %857
  %902 = load ptr, ptr @stderr, align 8, !tbaa !19
  %903 = tail call i64 @fwrite(ptr nonnull @.str.12, i64 5, i64 1, ptr %902) #38
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(5476) @ribosumdis, i8 0, i64 5476, i1 false), !tbaa !31
  br label %904

904:                                              ; preds = %928, %901
  %905 = phi i64 [ 0, %901 ], [ %929, %928 ]
  %906 = shl nsw i64 %905, 2
  br label %907

907:                                              ; preds = %925, %904
  %908 = phi i64 [ 0, %904 ], [ %926, %925 ]
  %909 = add nuw nsw i64 %908, %906
  br label %910

910:                                              ; preds = %922, %907
  %911 = phi i64 [ 0, %907 ], [ %923, %922 ]
  %912 = shl nsw i64 %911, 2
  br label %913

913:                                              ; preds = %913, %910
  %914 = phi i64 [ 0, %910 ], [ %920, %913 ]
  %915 = getelementptr inbounds [4 x [4 x double]], ptr @ribosum4, i64 0, i64 %908, i64 %914
  %916 = load <2 x double>, ptr %915, align 16, !tbaa !7
  %917 = fptosi <2 x double> %916 to <2 x i32>
  %918 = add nuw nsw i64 %914, %912
  %919 = getelementptr inbounds [37 x [37 x i32]], ptr @ribosumdis, i64 0, i64 %909, i64 %918
  store <2 x i32> %917, ptr %919, align 4, !tbaa !31
  %920 = add nuw i64 %914, 2
  %921 = icmp eq i64 %920, 4
  br i1 %921, label %922, label %913, !llvm.loop !105

922:                                              ; preds = %913
  %923 = add nuw nsw i64 %911, 1
  %924 = icmp eq i64 %923, 9
  br i1 %924, label %925, label %910, !llvm.loop !106

925:                                              ; preds = %922
  %926 = add nuw nsw i64 %908, 1
  %927 = icmp eq i64 %926, 4
  br i1 %927, label %928, label %907, !llvm.loop !107

928:                                              ; preds = %925
  %929 = add nuw nsw i64 %905, 1
  %930 = icmp eq i64 %929, 9
  br i1 %930, label %931, label %904, !llvm.loop !108

931:                                              ; preds = %943, %928
  %932 = phi i64 [ %944, %943 ], [ 0, %928 ]
  %933 = add nuw nsw i64 %932, 4
  br label %934

934:                                              ; preds = %934, %931
  %935 = phi i64 [ 0, %931 ], [ %941, %934 ]
  %936 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %932, i64 %935
  %937 = load <2 x double>, ptr %936, align 16, !tbaa !7
  %938 = fptosi <2 x double> %937 to <2 x i32>
  %939 = add nuw nsw i64 %935, 4
  %940 = getelementptr inbounds [37 x [37 x i32]], ptr @ribosumdis, i64 0, i64 %933, i64 %939
  store <2 x i32> %938, ptr %940, align 4, !tbaa !31
  %941 = add nuw i64 %935, 2
  %942 = icmp eq i64 %941, 16
  br i1 %942, label %943, label %934, !llvm.loop !109

943:                                              ; preds = %934
  %944 = add nuw nsw i64 %932, 1
  %945 = icmp eq i64 %944, 16
  br i1 %945, label %946, label %931, !llvm.loop !110

946:                                              ; preds = %958, %943
  %947 = phi i64 [ %959, %958 ], [ 0, %943 ]
  %948 = add nuw nsw i64 %947, 20
  br label %949

949:                                              ; preds = %949, %946
  %950 = phi i64 [ 0, %946 ], [ %956, %949 ]
  %951 = getelementptr inbounds [16 x [16 x double]], ptr @ribosum16, i64 0, i64 %947, i64 %950
  %952 = load <2 x double>, ptr %951, align 16, !tbaa !7
  %953 = fptosi <2 x double> %952 to <2 x i32>
  %954 = add nuw nsw i64 %950, 20
  %955 = getelementptr inbounds [37 x [37 x i32]], ptr @ribosumdis, i64 0, i64 %948, i64 %954
  store <2 x i32> %953, ptr %955, align 4, !tbaa !31
  %956 = add nuw i64 %950, 2
  %957 = icmp eq i64 %956, 16
  br i1 %957, label %958, label %949, !llvm.loop !111

958:                                              ; preds = %949
  %959 = add nuw nsw i64 %947, 1
  %960 = icmp eq i64 %959, 16
  br i1 %960, label %961, label %946, !llvm.loop !112

961:                                              ; preds = %958
  %962 = load i32, ptr @disp, align 4, !tbaa !31
  %963 = icmp eq i32 %962, 0
  br i1 %963, label %985, label %964

964:                                              ; preds = %961
  %965 = load ptr, ptr @stderr, align 8, !tbaa !19
  %966 = tail call i64 @fwrite(ptr nonnull @.str.19, i64 11, i64 1, ptr %965) #38
  br label %967

967:                                              ; preds = %977, %964
  %968 = phi i64 [ 0, %964 ], [ %980, %977 ]
  br label %969

969:                                              ; preds = %969, %967
  %970 = phi i64 [ 0, %967 ], [ %975, %969 ]
  %971 = load ptr, ptr @stderr, align 8, !tbaa !19
  %972 = getelementptr inbounds [37 x [37 x i32]], ptr @ribosumdis, i64 0, i64 %968, i64 %970
  %973 = load i32, ptr %972, align 4, !tbaa !31
  %974 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %971, ptr noundef nonnull @.str.20, i32 noundef %973) #36
  %975 = add nuw nsw i64 %970, 1
  %976 = icmp eq i64 %975, 37
  br i1 %976, label %977, label %969, !llvm.loop !113

977:                                              ; preds = %969
  %978 = load ptr, ptr @stderr, align 8, !tbaa !19
  %979 = tail call i32 @fputc(i32 10, ptr %978)
  %980 = add nuw nsw i64 %968, 1
  %981 = icmp eq i64 %980, 37
  br i1 %981, label %982, label %967, !llvm.loop !114

982:                                              ; preds = %977
  %983 = load ptr, ptr @stderr, align 8, !tbaa !19
  %984 = tail call i32 @fputc(i32 10, ptr %983)
  br label %985

985:                                              ; preds = %982, %961
  %986 = load ptr, ptr @stderr, align 8, !tbaa !19
  %987 = tail call i64 @fwrite(ptr nonnull @.str.12, i64 5, i64 1, ptr %986) #38
  tail call void @FreeDoubleMtx(ptr noundef %7) #35
  tail call void @FreeDoubleMtx(ptr noundef %6) #35
  tail call void @free(ptr noundef %8) #35
  br label %1737

988:                                              ; preds = %2
  %989 = icmp eq i32 %3, 112
  %990 = load i32, ptr @scoremtx, align 4
  %991 = icmp eq i32 %990, 1
  %992 = select i1 %989, i1 %991, i1 false
  br i1 %992, label %993, label %1296

993:                                              ; preds = %988
  %994 = tail call ptr @AllocateDoubleMtx(i32 noundef 20, i32 noundef 20) #35
  %995 = tail call ptr @AllocateDoubleVec(i32 noundef 20) #35
  %996 = tail call ptr @AllocateDoubleVec(i32 noundef 20) #35
  %997 = load i32, ptr @ppenalty, align 4, !tbaa !31
  %998 = icmp eq i32 %997, 100009
  br i1 %998, label %999, label %1000

999:                                              ; preds = %993
  store i32 -1530, ptr @ppenalty, align 4, !tbaa !31
  br label %1000

1000:                                             ; preds = %999, %993
  %1001 = phi i32 [ -1530, %999 ], [ %997, %993 ]
  %1002 = load i32, ptr @ppenalty_OP, align 4, !tbaa !31
  %1003 = icmp eq i32 %1002, 100009
  br i1 %1003, label %1004, label %1005

1004:                                             ; preds = %1000
  store i32 -1530, ptr @ppenalty_OP, align 4, !tbaa !31
  br label %1005

1005:                                             ; preds = %1004, %1000
  %1006 = phi i32 [ -1530, %1004 ], [ %1002, %1000 ]
  %1007 = load i32, ptr @ppenalty_ex, align 4, !tbaa !31
  %1008 = icmp eq i32 %1007, 100009
  br i1 %1008, label %1009, label %1010

1009:                                             ; preds = %1005
  store i32 0, ptr @ppenalty_ex, align 4, !tbaa !31
  br label %1010

1010:                                             ; preds = %1009, %1005
  %1011 = phi i32 [ 0, %1009 ], [ %1007, %1005 ]
  %1012 = load i32, ptr @ppenalty_EX, align 4, !tbaa !31
  %1013 = icmp eq i32 %1012, 100009
  br i1 %1013, label %1014, label %1015

1014:                                             ; preds = %1010
  store i32 0, ptr @ppenalty_EX, align 4, !tbaa !31
  br label %1015

1015:                                             ; preds = %1014, %1010
  %1016 = phi i32 [ 0, %1014 ], [ %1012, %1010 ]
  %1017 = load i32, ptr @poffset, align 4, !tbaa !31
  %1018 = icmp eq i32 %1017, 100009
  br i1 %1018, label %1019, label %1020

1019:                                             ; preds = %1015
  store i32 -123, ptr @poffset, align 4, !tbaa !31
  br label %1020

1020:                                             ; preds = %1019, %1015
  %1021 = phi i32 [ -123, %1019 ], [ %1017, %1015 ]
  %1022 = load i32, ptr @pamN, align 4, !tbaa !31
  %1023 = icmp eq i32 %1022, 100009
  br i1 %1023, label %1024, label %1025

1024:                                             ; preds = %1020
  store i32 0, ptr @pamN, align 4, !tbaa !31
  br label %1025

1025:                                             ; preds = %1024, %1020
  %1026 = load i32, ptr @kimuraR, align 4, !tbaa !31
  %1027 = icmp eq i32 %1026, 100009
  br i1 %1027, label %1028, label %1029

1028:                                             ; preds = %1025
  store i32 1, ptr @kimuraR, align 4, !tbaa !31
  br label %1029

1029:                                             ; preds = %1028, %1025
  %1030 = sitofp i32 %1001 to double
  %1031 = tail call double @llvm.fmuladd.f64(double %1030, double 6.000000e-01, double 5.000000e-01)
  %1032 = fptosi double %1031 to i32
  store i32 %1032, ptr @penalty, align 4, !tbaa !31
  %1033 = sitofp i32 %1006 to double
  %1034 = tail call double @llvm.fmuladd.f64(double %1033, double 6.000000e-01, double 5.000000e-01)
  %1035 = fptosi double %1034 to i32
  store i32 %1035, ptr @penalty_OP, align 4, !tbaa !31
  %1036 = sitofp i32 %1011 to double
  %1037 = tail call double @llvm.fmuladd.f64(double %1036, double 6.000000e-01, double 5.000000e-01)
  %1038 = fptosi double %1037 to i32
  store i32 %1038, ptr @penalty_ex, align 4, !tbaa !31
  %1039 = sitofp i32 %1016 to double
  %1040 = tail call double @llvm.fmuladd.f64(double %1039, double 6.000000e-01, double 5.000000e-01)
  %1041 = fptosi double %1040 to i32
  store i32 %1041, ptr @penalty_EX, align 4, !tbaa !31
  %1042 = sitofp i32 %1021 to double
  %1043 = tail call double @llvm.fmuladd.f64(double %1042, double 6.000000e-01, double 5.000000e-01)
  %1044 = fptosi double %1043 to i32
  store i32 %1044, ptr @offset, align 4, !tbaa !31
  store i32 0, ptr @offsetFFT, align 4, !tbaa !31
  store i32 60, ptr @offsetLN, align 4, !tbaa !31
  store i32 -1199, ptr @penaltyLN, align 4, !tbaa !31
  store i32 -59, ptr @penalty_exLN, align 4, !tbaa !31
  %1045 = load i32, ptr @nblosum, align 4, !tbaa !31
  tail call void @BLOSUMmtx(i32 noundef %1045, ptr noundef %994, ptr noundef %996, ptr noundef nonnull @amino, ptr noundef nonnull @amino_grp) #39
  %1046 = load i32, ptr @nblosum, align 4, !tbaa !31
  %1047 = icmp eq i32 %1046, -1
  %1048 = load i32, ptr @ppenalty, align 4, !tbaa !31
  %1049 = sitofp i32 %1048 to double
  %1050 = fdiv double %1049, -1.000000e+03
  %1051 = load i32, ptr @poffset, align 4, !tbaa !31
  %1052 = sitofp i32 %1051 to double
  %1053 = fdiv double %1052, -1.000000e+03
  %1054 = load i32, ptr @ppenalty_ex, align 4, !tbaa !31
  %1055 = sitofp i32 %1054 to double
  %1056 = fdiv double %1055, -1.000000e+03
  br i1 %1047, label %1057, label %1059

1057:                                             ; preds = %1029
  %1058 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @modelname, ptr noundef nonnull dereferenceable(1) @.str.21, double noundef %1050, double noundef %1053, double noundef %1056) #35
  br label %1061

1059:                                             ; preds = %1029
  %1060 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @modelname, ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef %1046, double noundef %1050, double noundef %1053, double noundef %1056) #35
  br label %1061

1061:                                             ; preds = %1059, %1057
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(512) @amino_n, i8 -1, i64 512, i1 false), !tbaa !31
  br label %1062

1062:                                             ; preds = %1062, %1061
  %1063 = phi i64 [ 0, %1061 ], [ %1069, %1062 ]
  %1064 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1063
  %1065 = load i8, ptr %1064, align 1, !tbaa !17
  %1066 = sext i8 %1065 to i64
  %1067 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %1066
  %1068 = trunc i64 %1063 to i32
  store i32 %1068, ptr %1067, align 4, !tbaa !31
  %1069 = add nuw nsw i64 %1063, 1
  %1070 = icmp eq i64 %1069, 26
  br i1 %1070, label %1071, label %1062, !llvm.loop !115

1071:                                             ; preds = %1062
  %1072 = load i32, ptr @fmodel, align 4, !tbaa !31
  %1073 = icmp eq i32 %1072, 1
  br i1 %1073, label %1074, label %1076

1074:                                             ; preds = %1071
  tail call fastcc void @calcfreq(i32 noundef %0, ptr noundef %1, ptr noundef %995) #39
  %1075 = load i32, ptr @fmodel, align 4, !tbaa !31
  br label %1076

1076:                                             ; preds = %1074, %1071
  %1077 = phi i32 [ %1072, %1071 ], [ %1075, %1074 ]
  %1078 = phi ptr [ %996, %1071 ], [ %995, %1074 ]
  %1079 = icmp eq i32 %1077, -1
  br i1 %1079, label %1101, label %1080

1080:                                             ; preds = %1098, %1076
  %1081 = phi i64 [ %1099, %1098 ], [ 0, %1076 ]
  %1082 = phi double [ %.lcssa13, %1098 ], [ 0.000000e+00, %1076 ]
  %1083 = getelementptr inbounds ptr, ptr %994, i64 %1081
  %1084 = load ptr, ptr %1083, align 8, !tbaa !19
  %1085 = getelementptr inbounds double, ptr %1078, i64 %1081
  %1086 = load double, ptr %1085, align 8, !tbaa !7
  br label %1087

1087:                                             ; preds = %1087, %1080
  %1088 = phi i64 [ 0, %1080 ], [ %1096, %1087 ]
  %1089 = phi double [ %1082, %1080 ], [ %1095, %1087 ]
  %1090 = getelementptr inbounds double, ptr %1084, i64 %1088
  %1091 = load double, ptr %1090, align 8, !tbaa !7
  %1092 = fmul double %1091, %1086
  %1093 = getelementptr inbounds double, ptr %1078, i64 %1088
  %1094 = load double, ptr %1093, align 8, !tbaa !7
  %1095 = tail call double @llvm.fmuladd.f64(double %1092, double %1094, double %1089)
  %1096 = add nuw nsw i64 %1088, 1
  %1097 = icmp eq i64 %1096, 20
  br i1 %1097, label %1098, label %1087, !llvm.loop !116

1098:                                             ; preds = %1087
  %.lcssa13 = phi double [ %1095, %1087 ]
  %1099 = add nuw nsw i64 %1081, 1
  %1100 = icmp eq i64 %1099, 20
  br i1 %1100, label %1101, label %1080, !llvm.loop !117

1101:                                             ; preds = %1098, %1076
  %1102 = phi double [ 0.000000e+00, %1076 ], [ %.lcssa13, %1098 ]
  %1103 = insertelement <2 x double> poison, double %1102, i64 0
  %1104 = shufflevector <2 x double> %1103, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1105

1105:                                             ; preds = %1116, %1101
  %1106 = phi i64 [ 0, %1101 ], [ %1117, %1116 ]
  %1107 = getelementptr inbounds ptr, ptr %994, i64 %1106
  %1108 = load ptr, ptr %1107, align 8, !tbaa !19
  br label %1109

1109:                                             ; preds = %1109, %1105
  %1110 = phi i64 [ 0, %1105 ], [ %1114, %1109 ]
  %1111 = getelementptr inbounds double, ptr %1108, i64 %1110
  %1112 = load <2 x double>, ptr %1111, align 8, !tbaa !7
  %1113 = fsub <2 x double> %1112, %1104
  store <2 x double> %1113, ptr %1111, align 8, !tbaa !7
  %1114 = add nuw i64 %1110, 2
  %1115 = icmp eq i64 %1114, 20
  br i1 %1115, label %1116, label %1109, !llvm.loop !118

1116:                                             ; preds = %1109
  %1117 = add nuw nsw i64 %1106, 1
  %1118 = icmp eq i64 %1117, 20
  br i1 %1118, label %1123, label %1105, !llvm.loop !119

1119:                                             ; preds = %1123
  %.lcssa12 = phi double [ %1132, %1123 ]
  %1120 = fdiv double 6.000000e+02, %.lcssa12
  %1121 = insertelement <2 x double> poison, double %1120, i64 0
  %1122 = shufflevector <2 x double> %1121, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1135

1123:                                             ; preds = %1123, %1116
  %1124 = phi i64 [ %1133, %1123 ], [ 0, %1116 ]
  %1125 = phi double [ %1132, %1123 ], [ 0.000000e+00, %1116 ]
  %1126 = getelementptr inbounds ptr, ptr %994, i64 %1124
  %1127 = load ptr, ptr %1126, align 8, !tbaa !19
  %1128 = getelementptr inbounds double, ptr %1127, i64 %1124
  %1129 = load double, ptr %1128, align 8, !tbaa !7
  %1130 = getelementptr inbounds double, ptr %1078, i64 %1124
  %1131 = load double, ptr %1130, align 8, !tbaa !7
  %1132 = tail call double @llvm.fmuladd.f64(double %1129, double %1131, double %1125)
  %1133 = add nuw nsw i64 %1124, 1
  %1134 = icmp eq i64 %1133, 20
  br i1 %1134, label %1119, label %1123, !llvm.loop !120

1135:                                             ; preds = %1151, %1119
  %1136 = phi i64 [ 0, %1119 ], [ %1152, %1151 ]
  %1137 = getelementptr inbounds ptr, ptr %994, i64 %1136
  %1138 = load ptr, ptr %1137, align 8, !tbaa !19
  br label %1139

1139:                                             ; preds = %1139, %1135
  %1140 = phi i64 [ 0, %1135 ], [ %1144, %1139 ]
  %1141 = getelementptr inbounds double, ptr %1138, i64 %1140
  %1142 = load <2 x double>, ptr %1141, align 8, !tbaa !7
  %1143 = fmul <2 x double> %1122, %1142
  store <2 x double> %1143, ptr %1141, align 8, !tbaa !7
  %1144 = add nuw i64 %1140, 2
  %1145 = icmp eq i64 %1144, 20
  br i1 %1145, label %1151, label %1139, !llvm.loop !121

1146:                                             ; preds = %1151
  %1147 = load i32, ptr @offset, align 4, !tbaa !31
  %1148 = sitofp i32 %1147 to double
  %1149 = insertelement <2 x double> poison, double %1148, i64 0
  %1150 = shufflevector <2 x double> %1149, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1154

1151:                                             ; preds = %1139
  %1152 = add nuw nsw i64 %1136, 1
  %1153 = icmp eq i64 %1152, 20
  br i1 %1153, label %1146, label %1135, !llvm.loop !122

1154:                                             ; preds = %1165, %1146
  %1155 = phi i64 [ 0, %1146 ], [ %1166, %1165 ]
  %1156 = getelementptr inbounds ptr, ptr %994, i64 %1155
  %1157 = load ptr, ptr %1156, align 8, !tbaa !19
  br label %1158

1158:                                             ; preds = %1158, %1154
  %1159 = phi i64 [ 0, %1154 ], [ %1163, %1158 ]
  %1160 = getelementptr inbounds double, ptr %1157, i64 %1159
  %1161 = load <2 x double>, ptr %1160, align 8, !tbaa !7
  %1162 = fsub <2 x double> %1161, %1150
  store <2 x double> %1162, ptr %1160, align 8, !tbaa !7
  %1163 = add nuw i64 %1159, 2
  %1164 = icmp eq i64 %1163, 20
  br i1 %1164, label %1165, label %1158, !llvm.loop !123

1165:                                             ; preds = %1158
  %1166 = add nuw nsw i64 %1155, 1
  %1167 = icmp eq i64 %1166, 20
  br i1 %1167, label %1168, label %1154, !llvm.loop !124

1168:                                             ; preds = %1190, %1165
  %1169 = phi i64 [ %1191, %1190 ], [ 0, %1165 ]
  %1170 = getelementptr inbounds ptr, ptr %994, i64 %1169
  %1171 = load ptr, ptr %1170, align 8, !tbaa !19
  br label %1172

1172:                                             ; preds = %1185, %1168
  %1173 = phi i64 [ 0, %1168 ], [ %1188, %1185 ]
  %1174 = getelementptr inbounds double, ptr %1171, i64 %1173
  %1175 = load double, ptr %1174, align 8, !tbaa !7
  %1176 = fcmp ogt double %1175, 0.000000e+00
  br i1 %1176, label %1177, label %1180

1177:                                             ; preds = %1172
  %1178 = fadd double %1175, 5.000000e-01
  %1179 = fptosi double %1178 to i32
  br label %1185

1180:                                             ; preds = %1172
  %1181 = fcmp olt double %1175, 0.000000e+00
  br i1 %1181, label %1182, label %1185

1182:                                             ; preds = %1180
  %1183 = fadd double %1175, -5.000000e-01
  %1184 = fptosi double %1183 to i32
  br label %1185

1185:                                             ; preds = %1182, %1180, %1177
  %1186 = phi i32 [ %1179, %1177 ], [ %1184, %1182 ], [ 0, %1180 ]
  %1187 = sitofp i32 %1186 to double
  store double %1187, ptr %1174, align 8, !tbaa !7
  %1188 = add nuw nsw i64 %1173, 1
  %1189 = icmp eq i64 %1188, 20
  br i1 %1189, label %1190, label %1172, !llvm.loop !125

1190:                                             ; preds = %1185
  %1191 = add nuw nsw i64 %1169, 1
  %1192 = icmp eq i64 %1191, 20
  br i1 %1192, label %1193, label %1168, !llvm.loop !126

1193:                                             ; preds = %1190
  %1194 = load i32, ptr @disp, align 4, !tbaa !31
  %1195 = icmp eq i32 %1194, 0
  br i1 %1195, label %1196, label %1197

1196:                                             ; preds = %1193
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(2704) @n_dis, i8 0, i64 2704, i1 false), !tbaa !31
  br label %1278

1197:                                             ; preds = %1193
  %1198 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1199 = tail call i64 @fwrite(ptr nonnull @.str.23, i64 18, i64 1, ptr %1198)
  br label %1200

1200:                                             ; preds = %1217, %1197
  %1201 = phi i64 [ 0, %1197 ], [ %1220, %1217 ]
  %1202 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1203 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1201
  %1204 = load i8, ptr %1203, align 1, !tbaa !17
  %1205 = sext i8 %1204 to i32
  %1206 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1202, ptr noundef nonnull @.str.24, i32 noundef %1205) #39
  %1207 = getelementptr inbounds ptr, ptr %994, i64 %1201
  br label %1208

1208:                                             ; preds = %1208, %1200
  %1209 = phi i64 [ 0, %1200 ], [ %1215, %1208 ]
  %1210 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1211 = load ptr, ptr %1207, align 8, !tbaa !19
  %1212 = getelementptr inbounds double, ptr %1211, i64 %1209
  %1213 = load double, ptr %1212, align 8, !tbaa !7
  %1214 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1210, ptr noundef nonnull @.str.25, double noundef %1213) #39
  %1215 = add nuw nsw i64 %1209, 1
  %1216 = icmp eq i64 %1215, 20
  br i1 %1216, label %1217, label %1208, !llvm.loop !127

1217:                                             ; preds = %1208
  %1218 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1219 = tail call i32 @fputc(i32 10, ptr %1218)
  %1220 = add nuw nsw i64 %1201, 1
  %1221 = icmp eq i64 %1220, 20
  br i1 %1221, label %1222, label %1200, !llvm.loop !128

1222:                                             ; preds = %1217
  %1223 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1224 = tail call i64 @fwrite(ptr nonnull @.str.26, i64 5, i64 1, ptr %1223)
  br label %1225

1225:                                             ; preds = %1225, %1222
  %1226 = phi i64 [ 0, %1222 ], [ %1232, %1225 ]
  %1227 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1228 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1226
  %1229 = load i8, ptr %1228, align 1, !tbaa !17
  %1230 = sext i8 %1229 to i32
  %1231 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1227, ptr noundef nonnull @.str.27, i32 noundef %1230) #39
  %1232 = add nuw nsw i64 %1226, 1
  %1233 = icmp eq i64 %1232, 20
  br i1 %1233, label %1234, label %1225, !llvm.loop !129

1234:                                             ; preds = %1252, %1225
  %1235 = phi i64 [ %1253, %1252 ], [ 0, %1225 ]
  %1236 = phi double [ %.lcssa11, %1252 ], [ 0.000000e+00, %1225 ]
  %1237 = getelementptr inbounds ptr, ptr %994, i64 %1235
  %1238 = load ptr, ptr %1237, align 8, !tbaa !19
  %1239 = getelementptr inbounds double, ptr %1078, i64 %1235
  %1240 = load double, ptr %1239, align 8, !tbaa !7
  br label %1241

1241:                                             ; preds = %1241, %1234
  %1242 = phi i64 [ 0, %1234 ], [ %1250, %1241 ]
  %1243 = phi double [ %1236, %1234 ], [ %1249, %1241 ]
  %1244 = getelementptr inbounds double, ptr %1238, i64 %1242
  %1245 = load double, ptr %1244, align 8, !tbaa !7
  %1246 = fmul double %1245, %1240
  %1247 = getelementptr inbounds double, ptr %1078, i64 %1242
  %1248 = load double, ptr %1247, align 8, !tbaa !7
  %1249 = tail call double @llvm.fmuladd.f64(double %1246, double %1248, double %1243)
  %1250 = add nuw nsw i64 %1242, 1
  %1251 = icmp eq i64 %1250, 20
  br i1 %1251, label %1252, label %1241, !llvm.loop !130

1252:                                             ; preds = %1241
  %.lcssa11 = phi double [ %1249, %1241 ]
  %1253 = add nuw nsw i64 %1235, 1
  %1254 = icmp eq i64 %1253, 20
  br i1 %1254, label %1255, label %1234, !llvm.loop !131

1255:                                             ; preds = %1252
  %.lcssa11.lcssa = phi double [ %.lcssa11, %1252 ]
  %1256 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1257 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1256, ptr noundef nonnull @.str.4, double noundef %.lcssa11.lcssa) #39
  br label %1258

1258:                                             ; preds = %1258, %1255
  %1259 = phi i64 [ 0, %1255 ], [ %1268, %1258 ]
  %1260 = phi double [ 0.000000e+00, %1255 ], [ %1267, %1258 ]
  %1261 = getelementptr inbounds ptr, ptr %994, i64 %1259
  %1262 = load ptr, ptr %1261, align 8, !tbaa !19
  %1263 = getelementptr inbounds double, ptr %1262, i64 %1259
  %1264 = load double, ptr %1263, align 8, !tbaa !7
  %1265 = getelementptr inbounds double, ptr %1078, i64 %1259
  %1266 = load double, ptr %1265, align 8, !tbaa !7
  %1267 = tail call double @llvm.fmuladd.f64(double %1264, double %1266, double %1260)
  %1268 = add nuw nsw i64 %1259, 1
  %1269 = icmp eq i64 %1268, 20
  br i1 %1269, label %1270, label %1258, !llvm.loop !132

1270:                                             ; preds = %1258
  %.lcssa10 = phi double [ %1267, %1258 ]
  %1271 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1272 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1271, ptr noundef nonnull @.str.28, double noundef %.lcssa10) #39
  %1273 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1274 = load i32, ptr @penalty, align 4, !tbaa !31
  %1275 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %1276 = load i32, ptr @offset, align 4, !tbaa !31
  %1277 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1273, ptr noundef nonnull @.str.29, i32 noundef %1274, i32 noundef %1275, i32 noundef %1276) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

1278:                                             ; preds = %1290, %1196
  %1279 = phi i64 [ 0, %1196 ], [ %1291, %1290 ]
  %1280 = getelementptr inbounds ptr, ptr %994, i64 %1279
  %1281 = load ptr, ptr %1280, align 8, !tbaa !19
  br label %1282

1282:                                             ; preds = %1282, %1278
  %1283 = phi i64 [ 0, %1278 ], [ %1288, %1282 ]
  %1284 = getelementptr inbounds double, ptr %1281, i64 %1283
  %1285 = load <2 x double>, ptr %1284, align 8, !tbaa !7
  %1286 = fptosi <2 x double> %1285 to <2 x i32>
  %1287 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1279, i64 %1283
  store <2 x i32> %1286, ptr %1287, align 8, !tbaa !31
  %1288 = add nuw i64 %1283, 2
  %1289 = icmp eq i64 %1288, 20
  br i1 %1289, label %1290, label %1282, !llvm.loop !133

1290:                                             ; preds = %1282
  %1291 = add nuw nsw i64 %1279, 1
  %1292 = icmp eq i64 %1291, 20
  br i1 %1292, label %1293, label %1278, !llvm.loop !134

1293:                                             ; preds = %1290
  tail call void @FreeDoubleMtx(ptr noundef %994) #35
  tail call void @FreeDoubleVec(ptr noundef %995) #35
  tail call void @FreeDoubleVec(ptr noundef %996) #35
  %1294 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1295 = tail call i64 @fwrite(ptr nonnull @.str.30, i64 6, i64 1, ptr %1294) #38
  br label %1737

1296:                                             ; preds = %988
  %1297 = icmp eq i32 %990, 2
  %1298 = select i1 %989, i1 %1297, i1 false
  br i1 %1298, label %1299, label %1302

1299:                                             ; preds = %1296
  %1300 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1301 = tail call i64 @fwrite(ptr nonnull @.str.31, i64 14, i64 1, ptr %1300) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

1302:                                             ; preds = %1296
  %1303 = tail call ptr @AllocateDoubleMtx(i32 noundef 20, i32 noundef 20) #35
  %1304 = tail call ptr @AllocateDoubleMtx(i32 noundef 20, i32 noundef 20) #35
  %1305 = tail call ptr @AllocateDoubleMtx(i32 noundef 20, i32 noundef 20) #35
  %1306 = tail call ptr @AllocateDoubleVec(i32 noundef 20) #35
  %1307 = tail call ptr @AllocateDoubleVec(i32 noundef 20) #35
  %1308 = tail call ptr @AllocateDoubleVec(i32 noundef 20) #35
  %1309 = load i32, ptr @ppenalty, align 4, !tbaa !31
  %1310 = icmp eq i32 %1309, 100009
  br i1 %1310, label %1311, label %1312

1311:                                             ; preds = %1302
  store i32 -1530, ptr @ppenalty, align 4, !tbaa !31
  br label %1312

1312:                                             ; preds = %1311, %1302
  %1313 = phi i32 [ -1530, %1311 ], [ %1309, %1302 ]
  %1314 = load i32, ptr @ppenalty_OP, align 4, !tbaa !31
  %1315 = icmp eq i32 %1314, 100009
  br i1 %1315, label %1316, label %1317

1316:                                             ; preds = %1312
  store i32 -1530, ptr @ppenalty_OP, align 4, !tbaa !31
  br label %1317

1317:                                             ; preds = %1316, %1312
  %1318 = phi i32 [ -1530, %1316 ], [ %1314, %1312 ]
  %1319 = load i32, ptr @ppenalty_ex, align 4, !tbaa !31
  %1320 = icmp eq i32 %1319, 100009
  br i1 %1320, label %1321, label %1322

1321:                                             ; preds = %1317
  store i32 0, ptr @ppenalty_ex, align 4, !tbaa !31
  br label %1322

1322:                                             ; preds = %1321, %1317
  %1323 = phi i32 [ 0, %1321 ], [ %1319, %1317 ]
  %1324 = load i32, ptr @ppenalty_EX, align 4, !tbaa !31
  %1325 = icmp eq i32 %1324, 100009
  br i1 %1325, label %1326, label %1327

1326:                                             ; preds = %1322
  store i32 0, ptr @ppenalty_EX, align 4, !tbaa !31
  br label %1327

1327:                                             ; preds = %1326, %1322
  %1328 = phi i32 [ 0, %1326 ], [ %1324, %1322 ]
  %1329 = load i32, ptr @poffset, align 4, !tbaa !31
  %1330 = icmp eq i32 %1329, 100009
  br i1 %1330, label %1331, label %1332

1331:                                             ; preds = %1327
  store i32 -123, ptr @poffset, align 4, !tbaa !31
  br label %1332

1332:                                             ; preds = %1331, %1327
  %1333 = phi i32 [ -123, %1331 ], [ %1329, %1327 ]
  %1334 = load i32, ptr @pamN, align 4, !tbaa !31
  %1335 = icmp eq i32 %1334, 100009
  br i1 %1335, label %1336, label %1337

1336:                                             ; preds = %1332
  store i32 200, ptr @pamN, align 4, !tbaa !31
  br label %1337

1337:                                             ; preds = %1336, %1332
  %1338 = phi i32 [ 200, %1336 ], [ %1334, %1332 ]
  %1339 = load i32, ptr @kimuraR, align 4, !tbaa !31
  %1340 = icmp eq i32 %1339, 100009
  br i1 %1340, label %1341, label %1342

1341:                                             ; preds = %1337
  store i32 1, ptr @kimuraR, align 4, !tbaa !31
  br label %1342

1342:                                             ; preds = %1341, %1337
  %1343 = sitofp i32 %1313 to double
  %1344 = tail call double @llvm.fmuladd.f64(double %1343, double 6.000000e-01, double 5.000000e-01)
  %1345 = fptosi double %1344 to i32
  store i32 %1345, ptr @penalty, align 4, !tbaa !31
  %1346 = sitofp i32 %1318 to double
  %1347 = tail call double @llvm.fmuladd.f64(double %1346, double 6.000000e-01, double 5.000000e-01)
  %1348 = fptosi double %1347 to i32
  store i32 %1348, ptr @penalty_OP, align 4, !tbaa !31
  %1349 = sitofp i32 %1323 to double
  %1350 = tail call double @llvm.fmuladd.f64(double %1349, double 6.000000e-01, double 5.000000e-01)
  %1351 = fptosi double %1350 to i32
  store i32 %1351, ptr @penalty_ex, align 4, !tbaa !31
  %1352 = sitofp i32 %1328 to double
  %1353 = tail call double @llvm.fmuladd.f64(double %1352, double 6.000000e-01, double 5.000000e-01)
  %1354 = fptosi double %1353 to i32
  store i32 %1354, ptr @penalty_EX, align 4, !tbaa !31
  %1355 = sitofp i32 %1333 to double
  %1356 = tail call double @llvm.fmuladd.f64(double %1355, double 6.000000e-01, double 5.000000e-01)
  %1357 = fptosi double %1356 to i32
  store i32 %1357, ptr @offset, align 4, !tbaa !31
  store i32 0, ptr @offsetFFT, align 4, !tbaa !31
  store i32 60, ptr @offsetLN, align 4, !tbaa !31
  store i32 -1199, ptr @penaltyLN, align 4, !tbaa !31
  store i32 -59, ptr @penalty_exLN, align 4, !tbaa !31
  %1358 = load i32, ptr @TMorJTT, align 4, !tbaa !31
  %1359 = icmp eq i32 %1358, 202
  %1360 = select i1 %1359, ptr @.str.33, ptr @.str.34
  %1361 = fdiv double %1343, -1.000000e+03
  %1362 = fdiv double %1355, -1.000000e+03
  %1363 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @modelname, ptr noundef nonnull dereferenceable(1) @.str.32, ptr noundef nonnull %1360, i32 noundef %1338, double noundef %1361, double noundef %1362) #35
  %1364 = load i32, ptr @TMorJTT, align 4, !tbaa !31
  %1365 = icmp eq i32 %1364, 202
  %1366 = zext i1 %1365 to i32
  tail call void @JTTmtx(ptr noundef %1303, ptr noundef %1306, ptr noundef nonnull @amino, ptr noundef nonnull @amino_grp, i32 noundef %1366) #39
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(512) @amino_n, i8 -1, i64 512, i1 false), !tbaa !31
  br label %1367

1367:                                             ; preds = %1367, %1342
  %1368 = phi i64 [ 0, %1342 ], [ %1374, %1367 ]
  %1369 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1368
  %1370 = load i8, ptr %1369, align 1, !tbaa !17
  %1371 = sext i8 %1370 to i64
  %1372 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %1371
  %1373 = trunc i64 %1368 to i32
  store i32 %1373, ptr %1372, align 4, !tbaa !31
  %1374 = add nuw nsw i64 %1368, 1
  %1375 = icmp eq i64 %1374, 26
  br i1 %1375, label %1376, label %1367, !llvm.loop !135

1376:                                             ; preds = %1367
  %1377 = load i32, ptr @fmodel, align 4, !tbaa !31
  %1378 = icmp eq i32 %1377, 1
  br i1 %1378, label %1379, label %1380

1379:                                             ; preds = %1376
  tail call fastcc void @calcfreq(i32 noundef %0, ptr noundef %1, ptr noundef %1308) #39
  br label %1380

1380:                                             ; preds = %1379, %1376
  %1381 = phi ptr [ %1308, %1379 ], [ %1306, %1376 ]
  %1382 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1383 = load i32, ptr @pamN, align 4, !tbaa !31
  %1384 = load i32, ptr @TMorJTT, align 4, !tbaa !31
  %1385 = icmp eq i32 %1384, 202
  %1386 = select i1 %1385, ptr @.str.33, ptr @.str.34
  %1387 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1382, ptr noundef nonnull @.str.35, i32 noundef %1383, ptr noundef nonnull %1386) #36
  br label %1388

1388:                                             ; preds = %1404, %1380
  %1389 = phi i64 [ 0, %1380 ], [ %1408, %1404 ]
  %1390 = phi double [ 0.000000e+00, %1380 ], [ %1407, %1404 ]
  %1391 = getelementptr inbounds double, ptr %1307, i64 %1389
  store double 0.000000e+00, ptr %1391, align 8, !tbaa !7
  %1392 = getelementptr inbounds ptr, ptr %1303, i64 %1389
  %1393 = load ptr, ptr %1392, align 8, !tbaa !19
  br label %1394

1394:                                             ; preds = %1394, %1388
  %1395 = phi i64 [ 0, %1388 ], [ %1402, %1394 ]
  %1396 = phi double [ 0.000000e+00, %1388 ], [ %1401, %1394 ]
  %1397 = getelementptr inbounds double, ptr %1393, i64 %1395
  %1398 = load double, ptr %1397, align 8, !tbaa !7
  %1399 = getelementptr inbounds double, ptr %1306, i64 %1395
  %1400 = load double, ptr %1399, align 8, !tbaa !7
  %1401 = tail call double @llvm.fmuladd.f64(double %1398, double %1400, double %1396)
  store double %1401, ptr %1391, align 8, !tbaa !7
  %1402 = add nuw nsw i64 %1395, 1
  %1403 = icmp eq i64 %1402, 20
  br i1 %1403, label %1404, label %1394, !llvm.loop !136

1404:                                             ; preds = %1394
  %.lcssa18 = phi double [ %1401, %1394 ]
  %1405 = getelementptr inbounds double, ptr %1306, i64 %1389
  %1406 = load double, ptr %1405, align 8, !tbaa !7
  %1407 = tail call double @llvm.fmuladd.f64(double %.lcssa18, double %1406, double %1390)
  %1408 = add nuw nsw i64 %1389, 1
  %1409 = icmp eq i64 %1408, 20
  br i1 %1409, label %1410, label %1388, !llvm.loop !137

1410:                                             ; preds = %1404
  %.lcssa19 = phi double [ %1407, %1404 ]
  %1411 = fdiv double 1.000000e-02, %.lcssa19
  %1412 = fneg double %1411
  br label %1413

1413:                                             ; preds = %1439, %1410
  %1414 = phi i64 [ 0, %1410 ], [ %1440, %1439 ]
  %1415 = getelementptr inbounds ptr, ptr %1303, i64 %1414
  %1416 = getelementptr inbounds double, ptr %1306, i64 %1414
  %1417 = getelementptr inbounds ptr, ptr %1304, i64 %1414
  %1418 = getelementptr inbounds double, ptr %1307, i64 %1414
  %1419 = load ptr, ptr %1417, align 8, !tbaa !19
  br label %1420

1420:                                             ; preds = %1433, %1413
  %1421 = phi i64 [ 0, %1413 ], [ %1437, %1433 ]
  %1422 = icmp eq i64 %1414, %1421
  br i1 %1422, label %1430, label %1423

1423:                                             ; preds = %1420
  %1424 = load ptr, ptr %1415, align 8, !tbaa !19
  %1425 = getelementptr inbounds double, ptr %1424, i64 %1421
  %1426 = load double, ptr %1425, align 8, !tbaa !7
  %1427 = fmul double %1411, %1426
  %1428 = load double, ptr %1416, align 8, !tbaa !7
  %1429 = fmul double %1427, %1428
  br label %1433

1430:                                             ; preds = %1420
  %1431 = load double, ptr %1418, align 8, !tbaa !7
  %1432 = tail call double @llvm.fmuladd.f64(double %1412, double %1431, double 1.000000e+00)
  br label %1433

1433:                                             ; preds = %1430, %1423
  %1434 = phi i64 [ %1421, %1423 ], [ %1414, %1430 ]
  %1435 = phi double [ %1429, %1423 ], [ %1432, %1430 ]
  %1436 = getelementptr inbounds double, ptr %1419, i64 %1434
  store double %1435, ptr %1436, align 8, !tbaa !7
  %1437 = add nuw nsw i64 %1421, 1
  %1438 = icmp eq i64 %1437, 20
  br i1 %1438, label %1439, label %1420, !llvm.loop !138

1439:                                             ; preds = %1433
  %1440 = add nuw nsw i64 %1414, 1
  %1441 = icmp eq i64 %1440, 20
  br i1 %1441, label %1442, label %1413, !llvm.loop !139

1442:                                             ; preds = %1439
  %1443 = load i32, ptr @disp, align 4, !tbaa !31
  %1444 = icmp eq i32 %1443, 0
  br i1 %1444, label %1465, label %1445

1445:                                             ; preds = %1442
  %1446 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1447 = tail call i64 @fwrite(ptr nonnull @.str.36, i64 8, i64 1, ptr %1446)
  br label %1448

1448:                                             ; preds = %1460, %1445
  %1449 = phi i64 [ 0, %1445 ], [ %1463, %1460 ]
  %1450 = getelementptr inbounds ptr, ptr %1304, i64 %1449
  br label %1451

1451:                                             ; preds = %1451, %1448
  %1452 = phi i64 [ 0, %1448 ], [ %1458, %1451 ]
  %1453 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1454 = load ptr, ptr %1450, align 8, !tbaa !19
  %1455 = getelementptr inbounds double, ptr %1454, i64 %1452
  %1456 = load double, ptr %1455, align 8, !tbaa !7
  %1457 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1453, ptr noundef nonnull @.str.37, double noundef %1456) #39
  %1458 = add nuw nsw i64 %1452, 1
  %1459 = icmp eq i64 %1458, 20
  br i1 %1459, label %1460, label %1451, !llvm.loop !140

1460:                                             ; preds = %1451
  %1461 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1462 = tail call i32 @fputc(i32 10, ptr %1461)
  %1463 = add nuw nsw i64 %1449, 1
  %1464 = icmp eq i64 %1463, 20
  br i1 %1464, label %1465, label %1448, !llvm.loop !141

1465:                                             ; preds = %1460, %1442
  tail call void @MtxuntDouble(ptr noundef %1305, i32 noundef 20) #35
  %1466 = load i32, ptr @pamN, align 4, !tbaa !31
  %1467 = icmp sgt i32 %1466, 0
  br i1 %1467, label %1468, label %1473

1468:                                             ; preds = %1468, %1465
  %1469 = phi i32 [ %1470, %1468 ], [ 0, %1465 ]
  tail call void @MtxmltDouble(ptr noundef %1305, ptr noundef %1304, i32 noundef 20) #35
  %1470 = add nuw nsw i32 %1469, 1
  %1471 = load i32, ptr @pamN, align 4, !tbaa !31
  %1472 = icmp slt i32 %1470, %1471
  br i1 %1472, label %1468, label %1473, !llvm.loop !142

1473:                                             ; preds = %1468, %1465
  br label %1474

1474:                                             ; preds = %1487, %1473
  %1475 = phi i64 [ %1488, %1487 ], [ 0, %1473 ]
  %1476 = getelementptr inbounds ptr, ptr %1305, i64 %1475
  %1477 = load ptr, ptr %1476, align 8, !tbaa !19
  br label %1478

1478:                                             ; preds = %1478, %1474
  %1479 = phi i64 [ 0, %1474 ], [ %1485, %1478 ]
  %1480 = getelementptr inbounds double, ptr %1306, i64 %1479
  %1481 = load double, ptr %1480, align 8, !tbaa !7
  %1482 = getelementptr inbounds double, ptr %1477, i64 %1479
  %1483 = load double, ptr %1482, align 8, !tbaa !7
  %1484 = fdiv double %1483, %1481
  store double %1484, ptr %1482, align 8, !tbaa !7
  %1485 = add nuw nsw i64 %1479, 1
  %1486 = icmp eq i64 %1485, 20
  br i1 %1486, label %1487, label %1478, !llvm.loop !143

1487:                                             ; preds = %1478
  %1488 = add nuw nsw i64 %1475, 1
  %1489 = icmp eq i64 %1488, 20
  br i1 %1489, label %1490, label %1474, !llvm.loop !144

1490:                                             ; preds = %1515, %1487
  %1491 = phi i64 [ %1516, %1515 ], [ 0, %1487 ]
  %1492 = getelementptr inbounds ptr, ptr %1305, i64 %1491
  %1493 = load ptr, ptr %1492, align 8, !tbaa !19
  %1494 = trunc i64 %1491 to i32
  br label %1495

1495:                                             ; preds = %1507, %1490
  %1496 = phi ptr [ %1493, %1490 ], [ %1511, %1507 ]
  %1497 = phi i64 [ 0, %1490 ], [ %1513, %1507 ]
  %1498 = getelementptr inbounds double, ptr %1496, i64 %1497
  %1499 = load double, ptr %1498, align 8, !tbaa !7
  %1500 = fcmp oeq double %1499, 0.000000e+00
  br i1 %1500, label %1501, label %1507

1501:                                             ; preds = %1495
  %1502 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1503 = trunc i64 %1497 to i32
  %1504 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1502, ptr noundef nonnull @.str.38, i32 noundef %1494, i32 noundef %1503) #36
  %1505 = load ptr, ptr %1492, align 8, !tbaa !19
  %1506 = getelementptr inbounds double, ptr %1505, i64 %1497
  store double 1.000000e-05, ptr %1506, align 8, !tbaa !7
  br label %1507

1507:                                             ; preds = %1501, %1495
  %1508 = phi double [ 1.000000e-05, %1501 ], [ %1499, %1495 ]
  %1509 = tail call double @log10(double noundef %1508) #35
  %1510 = fmul double %1509, 1.000000e+03
  %1511 = load ptr, ptr %1492, align 8, !tbaa !19
  %1512 = getelementptr inbounds double, ptr %1511, i64 %1497
  store double %1510, ptr %1512, align 8, !tbaa !7
  %1513 = add nuw nsw i64 %1497, 1
  %1514 = icmp eq i64 %1513, 20
  br i1 %1514, label %1515, label %1495, !llvm.loop !145

1515:                                             ; preds = %1507
  %1516 = add nuw nsw i64 %1491, 1
  %1517 = icmp eq i64 %1516, 20
  br i1 %1517, label %1518, label %1490, !llvm.loop !146

1518:                                             ; preds = %1515
  %1519 = load i32, ptr @fmodel, align 4, !tbaa !31
  %1520 = icmp eq i32 %1519, -1
  br i1 %1520, label %1542, label %1521

1521:                                             ; preds = %1539, %1518
  %1522 = phi i64 [ %1540, %1539 ], [ 0, %1518 ]
  %1523 = phi double [ %.lcssa17, %1539 ], [ 0.000000e+00, %1518 ]
  %1524 = getelementptr inbounds ptr, ptr %1305, i64 %1522
  %1525 = load ptr, ptr %1524, align 8, !tbaa !19
  %1526 = getelementptr inbounds double, ptr %1381, i64 %1522
  %1527 = load double, ptr %1526, align 8, !tbaa !7
  br label %1528

1528:                                             ; preds = %1528, %1521
  %1529 = phi i64 [ 0, %1521 ], [ %1537, %1528 ]
  %1530 = phi double [ %1523, %1521 ], [ %1536, %1528 ]
  %1531 = getelementptr inbounds double, ptr %1525, i64 %1529
  %1532 = load double, ptr %1531, align 8, !tbaa !7
  %1533 = fmul double %1532, %1527
  %1534 = getelementptr inbounds double, ptr %1381, i64 %1529
  %1535 = load double, ptr %1534, align 8, !tbaa !7
  %1536 = tail call double @llvm.fmuladd.f64(double %1533, double %1535, double %1530)
  %1537 = add nuw nsw i64 %1529, 1
  %1538 = icmp eq i64 %1537, 20
  br i1 %1538, label %1539, label %1528, !llvm.loop !147

1539:                                             ; preds = %1528
  %.lcssa17 = phi double [ %1536, %1528 ]
  %1540 = add nuw nsw i64 %1522, 1
  %1541 = icmp eq i64 %1540, 20
  br i1 %1541, label %1542, label %1521, !llvm.loop !148

1542:                                             ; preds = %1539, %1518
  %1543 = phi double [ 0.000000e+00, %1518 ], [ %.lcssa17, %1539 ]
  %1544 = insertelement <2 x double> poison, double %1543, i64 0
  %1545 = shufflevector <2 x double> %1544, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1546

1546:                                             ; preds = %1557, %1542
  %1547 = phi i64 [ 0, %1542 ], [ %1558, %1557 ]
  %1548 = getelementptr inbounds ptr, ptr %1305, i64 %1547
  %1549 = load ptr, ptr %1548, align 8, !tbaa !19
  br label %1550

1550:                                             ; preds = %1550, %1546
  %1551 = phi i64 [ 0, %1546 ], [ %1555, %1550 ]
  %1552 = getelementptr inbounds double, ptr %1549, i64 %1551
  %1553 = load <2 x double>, ptr %1552, align 8, !tbaa !7
  %1554 = fsub <2 x double> %1553, %1545
  store <2 x double> %1554, ptr %1552, align 8, !tbaa !7
  %1555 = add nuw i64 %1551, 2
  %1556 = icmp eq i64 %1555, 20
  br i1 %1556, label %1557, label %1550, !llvm.loop !149

1557:                                             ; preds = %1550
  %1558 = add nuw nsw i64 %1547, 1
  %1559 = icmp eq i64 %1558, 20
  br i1 %1559, label %1564, label %1546, !llvm.loop !150

1560:                                             ; preds = %1564
  %.lcssa16 = phi double [ %1573, %1564 ]
  %1561 = fdiv double 6.000000e+02, %.lcssa16
  %1562 = insertelement <2 x double> poison, double %1561, i64 0
  %1563 = shufflevector <2 x double> %1562, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1576

1564:                                             ; preds = %1564, %1557
  %1565 = phi i64 [ %1574, %1564 ], [ 0, %1557 ]
  %1566 = phi double [ %1573, %1564 ], [ 0.000000e+00, %1557 ]
  %1567 = getelementptr inbounds ptr, ptr %1305, i64 %1565
  %1568 = load ptr, ptr %1567, align 8, !tbaa !19
  %1569 = getelementptr inbounds double, ptr %1568, i64 %1565
  %1570 = load double, ptr %1569, align 8, !tbaa !7
  %1571 = getelementptr inbounds double, ptr %1381, i64 %1565
  %1572 = load double, ptr %1571, align 8, !tbaa !7
  %1573 = tail call double @llvm.fmuladd.f64(double %1570, double %1572, double %1566)
  %1574 = add nuw nsw i64 %1565, 1
  %1575 = icmp eq i64 %1574, 20
  br i1 %1575, label %1560, label %1564, !llvm.loop !151

1576:                                             ; preds = %1592, %1560
  %1577 = phi i64 [ 0, %1560 ], [ %1593, %1592 ]
  %1578 = getelementptr inbounds ptr, ptr %1305, i64 %1577
  %1579 = load ptr, ptr %1578, align 8, !tbaa !19
  br label %1580

1580:                                             ; preds = %1580, %1576
  %1581 = phi i64 [ 0, %1576 ], [ %1585, %1580 ]
  %1582 = getelementptr inbounds double, ptr %1579, i64 %1581
  %1583 = load <2 x double>, ptr %1582, align 8, !tbaa !7
  %1584 = fmul <2 x double> %1563, %1583
  store <2 x double> %1584, ptr %1582, align 8, !tbaa !7
  %1585 = add nuw i64 %1581, 2
  %1586 = icmp eq i64 %1585, 20
  br i1 %1586, label %1592, label %1580, !llvm.loop !152

1587:                                             ; preds = %1592
  %1588 = load i32, ptr @offset, align 4, !tbaa !31
  %1589 = sitofp i32 %1588 to double
  %1590 = insertelement <2 x double> poison, double %1589, i64 0
  %1591 = shufflevector <2 x double> %1590, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1595

1592:                                             ; preds = %1580
  %1593 = add nuw nsw i64 %1577, 1
  %1594 = icmp eq i64 %1593, 20
  br i1 %1594, label %1587, label %1576, !llvm.loop !153

1595:                                             ; preds = %1606, %1587
  %1596 = phi i64 [ 0, %1587 ], [ %1607, %1606 ]
  %1597 = getelementptr inbounds ptr, ptr %1305, i64 %1596
  %1598 = load ptr, ptr %1597, align 8, !tbaa !19
  br label %1599

1599:                                             ; preds = %1599, %1595
  %1600 = phi i64 [ 0, %1595 ], [ %1604, %1599 ]
  %1601 = getelementptr inbounds double, ptr %1598, i64 %1600
  %1602 = load <2 x double>, ptr %1601, align 8, !tbaa !7
  %1603 = fsub <2 x double> %1602, %1591
  store <2 x double> %1603, ptr %1601, align 8, !tbaa !7
  %1604 = add nuw i64 %1600, 2
  %1605 = icmp eq i64 %1604, 20
  br i1 %1605, label %1606, label %1599, !llvm.loop !154

1606:                                             ; preds = %1599
  %1607 = add nuw nsw i64 %1596, 1
  %1608 = icmp eq i64 %1607, 20
  br i1 %1608, label %1609, label %1595, !llvm.loop !155

1609:                                             ; preds = %1631, %1606
  %1610 = phi i64 [ %1632, %1631 ], [ 0, %1606 ]
  %1611 = getelementptr inbounds ptr, ptr %1305, i64 %1610
  %1612 = load ptr, ptr %1611, align 8, !tbaa !19
  br label %1613

1613:                                             ; preds = %1626, %1609
  %1614 = phi i64 [ 0, %1609 ], [ %1629, %1626 ]
  %1615 = getelementptr inbounds double, ptr %1612, i64 %1614
  %1616 = load double, ptr %1615, align 8, !tbaa !7
  %1617 = fcmp ogt double %1616, 0.000000e+00
  br i1 %1617, label %1618, label %1621

1618:                                             ; preds = %1613
  %1619 = fadd double %1616, 5.000000e-01
  %1620 = fptosi double %1619 to i32
  br label %1626

1621:                                             ; preds = %1613
  %1622 = fcmp olt double %1616, 0.000000e+00
  br i1 %1622, label %1623, label %1626

1623:                                             ; preds = %1621
  %1624 = fadd double %1616, -5.000000e-01
  %1625 = fptosi double %1624 to i32
  br label %1626

1626:                                             ; preds = %1623, %1621, %1618
  %1627 = phi i32 [ %1620, %1618 ], [ %1625, %1623 ], [ 0, %1621 ]
  %1628 = sitofp i32 %1627 to double
  store double %1628, ptr %1615, align 8, !tbaa !7
  %1629 = add nuw nsw i64 %1614, 1
  %1630 = icmp eq i64 %1629, 20
  br i1 %1630, label %1631, label %1613, !llvm.loop !156

1631:                                             ; preds = %1626
  %1632 = add nuw nsw i64 %1610, 1
  %1633 = icmp eq i64 %1632, 20
  br i1 %1633, label %1634, label %1609, !llvm.loop !157

1634:                                             ; preds = %1631
  %1635 = load i32, ptr @disp, align 4, !tbaa !31
  %1636 = icmp eq i32 %1635, 0
  br i1 %1636, label %1637, label %1638

1637:                                             ; preds = %1634
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(2704) @n_dis, i8 0, i64 2704, i1 false), !tbaa !31
  br label %1719

1638:                                             ; preds = %1634
  %1639 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1640 = tail call i64 @fwrite(ptr nonnull @.str.23, i64 18, i64 1, ptr %1639)
  br label %1641

1641:                                             ; preds = %1658, %1638
  %1642 = phi i64 [ 0, %1638 ], [ %1661, %1658 ]
  %1643 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1644 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1642
  %1645 = load i8, ptr %1644, align 1, !tbaa !17
  %1646 = sext i8 %1645 to i32
  %1647 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1643, ptr noundef nonnull @.str.24, i32 noundef %1646) #39
  %1648 = getelementptr inbounds ptr, ptr %1305, i64 %1642
  br label %1649

1649:                                             ; preds = %1649, %1641
  %1650 = phi i64 [ 0, %1641 ], [ %1656, %1649 ]
  %1651 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1652 = load ptr, ptr %1648, align 8, !tbaa !19
  %1653 = getelementptr inbounds double, ptr %1652, i64 %1650
  %1654 = load double, ptr %1653, align 8, !tbaa !7
  %1655 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1651, ptr noundef nonnull @.str.25, double noundef %1654) #39
  %1656 = add nuw nsw i64 %1650, 1
  %1657 = icmp eq i64 %1656, 20
  br i1 %1657, label %1658, label %1649, !llvm.loop !158

1658:                                             ; preds = %1649
  %1659 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1660 = tail call i32 @fputc(i32 10, ptr %1659)
  %1661 = add nuw nsw i64 %1642, 1
  %1662 = icmp eq i64 %1661, 20
  br i1 %1662, label %1663, label %1641, !llvm.loop !159

1663:                                             ; preds = %1658
  %1664 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1665 = tail call i64 @fwrite(ptr nonnull @.str.26, i64 5, i64 1, ptr %1664)
  br label %1666

1666:                                             ; preds = %1666, %1663
  %1667 = phi i64 [ 0, %1663 ], [ %1673, %1666 ]
  %1668 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1669 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1667
  %1670 = load i8, ptr %1669, align 1, !tbaa !17
  %1671 = sext i8 %1670 to i32
  %1672 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1668, ptr noundef nonnull @.str.27, i32 noundef %1671) #39
  %1673 = add nuw nsw i64 %1667, 1
  %1674 = icmp eq i64 %1673, 20
  br i1 %1674, label %1675, label %1666, !llvm.loop !160

1675:                                             ; preds = %1693, %1666
  %1676 = phi i64 [ %1694, %1693 ], [ 0, %1666 ]
  %1677 = phi double [ %.lcssa15, %1693 ], [ 0.000000e+00, %1666 ]
  %1678 = getelementptr inbounds ptr, ptr %1305, i64 %1676
  %1679 = load ptr, ptr %1678, align 8, !tbaa !19
  %1680 = getelementptr inbounds double, ptr %1381, i64 %1676
  %1681 = load double, ptr %1680, align 8, !tbaa !7
  br label %1682

1682:                                             ; preds = %1682, %1675
  %1683 = phi i64 [ 0, %1675 ], [ %1691, %1682 ]
  %1684 = phi double [ %1677, %1675 ], [ %1690, %1682 ]
  %1685 = getelementptr inbounds double, ptr %1679, i64 %1683
  %1686 = load double, ptr %1685, align 8, !tbaa !7
  %1687 = fmul double %1686, %1681
  %1688 = getelementptr inbounds double, ptr %1381, i64 %1683
  %1689 = load double, ptr %1688, align 8, !tbaa !7
  %1690 = tail call double @llvm.fmuladd.f64(double %1687, double %1689, double %1684)
  %1691 = add nuw nsw i64 %1683, 1
  %1692 = icmp eq i64 %1691, 20
  br i1 %1692, label %1693, label %1682, !llvm.loop !161

1693:                                             ; preds = %1682
  %.lcssa15 = phi double [ %1690, %1682 ]
  %1694 = add nuw nsw i64 %1676, 1
  %1695 = icmp eq i64 %1694, 20
  br i1 %1695, label %1696, label %1675, !llvm.loop !162

1696:                                             ; preds = %1693
  %.lcssa15.lcssa = phi double [ %.lcssa15, %1693 ]
  %1697 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1698 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1697, ptr noundef nonnull @.str.4, double noundef %.lcssa15.lcssa) #39
  br label %1699

1699:                                             ; preds = %1699, %1696
  %1700 = phi i64 [ 0, %1696 ], [ %1709, %1699 ]
  %1701 = phi double [ 0.000000e+00, %1696 ], [ %1708, %1699 ]
  %1702 = getelementptr inbounds ptr, ptr %1305, i64 %1700
  %1703 = load ptr, ptr %1702, align 8, !tbaa !19
  %1704 = getelementptr inbounds double, ptr %1703, i64 %1700
  %1705 = load double, ptr %1704, align 8, !tbaa !7
  %1706 = getelementptr inbounds double, ptr %1381, i64 %1700
  %1707 = load double, ptr %1706, align 8, !tbaa !7
  %1708 = tail call double @llvm.fmuladd.f64(double %1705, double %1707, double %1701)
  %1709 = add nuw nsw i64 %1700, 1
  %1710 = icmp eq i64 %1709, 20
  br i1 %1710, label %1711, label %1699, !llvm.loop !163

1711:                                             ; preds = %1699
  %.lcssa14 = phi double [ %1708, %1699 ]
  %1712 = load ptr, ptr @stdout, align 8, !tbaa !19
  %1713 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1712, ptr noundef nonnull @.str.28, double noundef %.lcssa14) #39
  %1714 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1715 = load i32, ptr @penalty, align 4, !tbaa !31
  %1716 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %1717 = load i32, ptr @offset, align 4, !tbaa !31
  %1718 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1714, ptr noundef nonnull @.str.29, i32 noundef %1715, i32 noundef %1716, i32 noundef %1717) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

1719:                                             ; preds = %1731, %1637
  %1720 = phi i64 [ 0, %1637 ], [ %1732, %1731 ]
  %1721 = getelementptr inbounds ptr, ptr %1305, i64 %1720
  %1722 = load ptr, ptr %1721, align 8, !tbaa !19
  br label %1723

1723:                                             ; preds = %1723, %1719
  %1724 = phi i64 [ 0, %1719 ], [ %1729, %1723 ]
  %1725 = getelementptr inbounds double, ptr %1722, i64 %1724
  %1726 = load <2 x double>, ptr %1725, align 8, !tbaa !7
  %1727 = fptosi <2 x double> %1726 to <2 x i32>
  %1728 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1720, i64 %1724
  store <2 x i32> %1727, ptr %1728, align 8, !tbaa !31
  %1729 = add nuw i64 %1724, 2
  %1730 = icmp eq i64 %1729, 20
  br i1 %1730, label %1731, label %1723, !llvm.loop !164

1731:                                             ; preds = %1723
  %1732 = add nuw nsw i64 %1720, 1
  %1733 = icmp eq i64 %1732, 20
  br i1 %1733, label %1734, label %1719, !llvm.loop !165

1734:                                             ; preds = %1731
  %1735 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1736 = tail call i64 @fwrite(ptr nonnull @.str.30, i64 6, i64 1, ptr %1735) #38
  tail call void @FreeDoubleMtx(ptr noundef %1303) #35
  tail call void @FreeDoubleMtx(ptr noundef %1304) #35
  tail call void @FreeDoubleMtx(ptr noundef %1305) #35
  tail call void @FreeDoubleVec(ptr noundef %1306) #35
  tail call void @FreeDoubleVec(ptr noundef %1307) #35
  tail call void @FreeDoubleVec(ptr noundef %1308) #35
  br label %1737

1737:                                             ; preds = %1734, %1293, %985
  %1738 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1739 = load i32, ptr @scoremtx, align 4, !tbaa !31
  %1740 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1738, ptr noundef nonnull @.str.39, i32 noundef %1739) #36
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(512) @amino_n, i8 -1, i64 512, i1 false), !tbaa !31
  br label %1741

1741:                                             ; preds = %1741, %1737
  %1742 = phi i64 [ 0, %1737 ], [ %1748, %1741 ]
  %1743 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1742
  %1744 = load i8, ptr %1743, align 1, !tbaa !17
  %1745 = sext i8 %1744 to i64
  %1746 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %1745
  %1747 = trunc i64 %1742 to i32
  store i32 %1747, ptr %1746, align 4, !tbaa !31
  %1748 = add nuw nsw i64 %1742, 1
  %1749 = icmp eq i64 %1748, 26
  br i1 %1749, label %1750, label %1741, !llvm.loop !166

1750:                                             ; preds = %1741
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(65536) @amino_dis, i8 0, i64 65536, i1 false), !tbaa !31
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(65536) @amino_disLN, i8 0, i64 65536, i1 false), !tbaa !31
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(131072) @amino_dis_consweight_multi, i8 0, i64 131072, i1 false), !tbaa !7
  %1751 = load float, ptr @consweight_multi, align 4, !tbaa !167
  %1752 = fpext float %1751 to double
  br label %1753

1753:                                             ; preds = %1774, %1750
  %1754 = phi i64 [ 0, %1750 ], [ %1775, %1774 ]
  %1755 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1754
  %1756 = load i8, ptr %1755, align 1, !tbaa !17
  %1757 = sext i8 %1756 to i64
  br label %1758

1758:                                             ; preds = %1758, %1753
  %1759 = phi i64 [ 0, %1753 ], [ %1772, %1758 ]
  %1760 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1754, i64 %1759
  %1761 = load i32, ptr %1760, align 4, !tbaa !31
  %1762 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1759
  %1763 = load i8, ptr %1762, align 1, !tbaa !17
  %1764 = sext i8 %1763 to i64
  %1765 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %1757, i64 %1764
  store i32 %1761, ptr %1765, align 4, !tbaa !31
  %1766 = sitofp i32 %1761 to float
  %1767 = fmul float %1751, %1766
  %1768 = getelementptr inbounds [26 x [26 x float]], ptr @n_dis_consweight_multi, i64 0, i64 %1754, i64 %1759
  store float %1767, ptr %1768, align 4, !tbaa !167
  %1769 = sitofp i32 %1761 to double
  %1770 = fmul double %1769, %1752
  %1771 = getelementptr inbounds [128 x [128 x double]], ptr @amino_dis_consweight_multi, i64 0, i64 %1757, i64 %1764
  store double %1770, ptr %1771, align 8, !tbaa !7
  %1772 = add nuw nsw i64 %1759, 1
  %1773 = icmp eq i64 %1772, 26
  br i1 %1773, label %1774, label %1758, !llvm.loop !169

1774:                                             ; preds = %1758
  %1775 = add nuw nsw i64 %1754, 1
  %1776 = icmp eq i64 %1775, 26
  br i1 %1776, label %1777, label %1753, !llvm.loop !170

1777:                                             ; preds = %1774
  %1778 = load i32, ptr @dorp, align 4, !tbaa !31
  %1779 = icmp eq i32 %1778, 100
  %1780 = load i32, ptr @offset, align 4, !tbaa !31
  %1781 = load i32, ptr @offsetLN, align 4, !tbaa !31
  br i1 %1779, label %1782, label %1852

1782:                                             ; preds = %1799, %1777
  %1783 = phi i64 [ %1800, %1799 ], [ 0, %1777 ]
  %1784 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1783
  %1785 = load i8, ptr %1784, align 1, !tbaa !17
  %1786 = sext i8 %1785 to i64
  br label %1787

1787:                                             ; preds = %1787, %1782
  %1788 = phi i64 [ 0, %1782 ], [ %1797, %1787 ]
  %1789 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1783, i64 %1788
  %1790 = load i32, ptr %1789, align 4, !tbaa !31
  %1791 = add nsw i32 %1780, %1790
  %1792 = sub i32 %1791, %1781
  %1793 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1788
  %1794 = load i8, ptr %1793, align 1, !tbaa !17
  %1795 = sext i8 %1794 to i64
  %1796 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_disLN, i64 0, i64 %1786, i64 %1795
  store i32 %1792, ptr %1796, align 4, !tbaa !31
  %1797 = add nuw nsw i64 %1788, 1
  %1798 = icmp eq i64 %1797, 5
  br i1 %1798, label %1799, label %1787, !llvm.loop !171

1799:                                             ; preds = %1787
  %1800 = add nuw nsw i64 %1783, 1
  %1801 = icmp eq i64 %1800, 5
  br i1 %1801, label %1802, label %1782, !llvm.loop !172

1802:                                             ; preds = %1821, %1799
  %1803 = phi i64 [ %1822, %1821 ], [ 5, %1799 ]
  %1804 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1803
  %1805 = load i8, ptr %1804, align 1, !tbaa !17
  %1806 = sext i8 %1805 to i64
  br label %1809

1807:                                             ; preds = %1821
  %1808 = load i32, ptr @offsetFFT, align 4, !tbaa !31
  br label %1824

1809:                                             ; preds = %1809, %1802
  %1810 = phi i64 [ 5, %1802 ], [ %1819, %1809 ]
  %1811 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1803, i64 %1810
  %1812 = load i32, ptr %1811, align 4, !tbaa !31
  %1813 = add nsw i32 %1780, %1812
  %1814 = sub i32 %1813, %1781
  %1815 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1810
  %1816 = load i8, ptr %1815, align 1, !tbaa !17
  %1817 = sext i8 %1816 to i64
  %1818 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_disLN, i64 0, i64 %1806, i64 %1817
  store i32 %1814, ptr %1818, align 4, !tbaa !31
  %1819 = add nuw nsw i64 %1810, 1
  %1820 = icmp eq i64 %1819, 10
  br i1 %1820, label %1821, label %1809, !llvm.loop !173

1821:                                             ; preds = %1809
  %1822 = add nuw nsw i64 %1803, 1
  %1823 = icmp eq i64 %1822, 10
  br i1 %1823, label %1807, label %1802, !llvm.loop !174

1824:                                             ; preds = %1835, %1807
  %1825 = phi i64 [ 0, %1807 ], [ %1836, %1835 ]
  br label %1826

1826:                                             ; preds = %1826, %1824
  %1827 = phi i64 [ 0, %1824 ], [ %1833, %1826 ]
  %1828 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1825, i64 %1827
  %1829 = load i32, ptr %1828, align 4, !tbaa !31
  %1830 = add nsw i32 %1780, %1829
  %1831 = sub i32 %1830, %1808
  %1832 = getelementptr inbounds [26 x [26 x i32]], ptr @n_disFFT, i64 0, i64 %1825, i64 %1827
  store i32 %1831, ptr %1832, align 4, !tbaa !31
  %1833 = add nuw nsw i64 %1827, 1
  %1834 = icmp eq i64 %1833, 5
  br i1 %1834, label %1835, label %1826, !llvm.loop !175

1835:                                             ; preds = %1826
  %1836 = add nuw nsw i64 %1825, 1
  %1837 = icmp eq i64 %1836, 5
  br i1 %1837, label %1838, label %1824, !llvm.loop !176

1838:                                             ; preds = %1849, %1835
  %1839 = phi i64 [ %1850, %1849 ], [ 5, %1835 ]
  br label %1840

1840:                                             ; preds = %1840, %1838
  %1841 = phi i64 [ 5, %1838 ], [ %1847, %1840 ]
  %1842 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1839, i64 %1841
  %1843 = load i32, ptr %1842, align 4, !tbaa !31
  %1844 = add nsw i32 %1780, %1843
  %1845 = sub i32 %1844, %1808
  %1846 = getelementptr inbounds [26 x [26 x i32]], ptr @n_disFFT, i64 0, i64 %1839, i64 %1841
  store i32 %1845, ptr %1846, align 4, !tbaa !31
  %1847 = add nuw nsw i64 %1841, 1
  %1848 = icmp eq i64 %1847, 10
  br i1 %1848, label %1849, label %1840, !llvm.loop !177

1849:                                             ; preds = %1840
  %1850 = add nuw nsw i64 %1839, 1
  %1851 = icmp eq i64 %1850, 10
  br i1 %1851, label %1892, label %1838, !llvm.loop !178

1852:                                             ; preds = %1875, %1777
  %1853 = phi i64 [ %1876, %1875 ], [ 0, %1777 ]
  %1854 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1853
  %1855 = load i8, ptr %1854, align 1, !tbaa !17
  %1856 = sext i8 %1855 to i64
  br label %1863

1857:                                             ; preds = %1875
  %1858 = load i32, ptr @offsetFFT, align 4, !tbaa !31
  %1859 = insertelement <4 x i32> poison, i32 %1780, i64 0
  %1860 = shufflevector <4 x i32> %1859, <4 x i32> poison, <4 x i32> zeroinitializer
  %1861 = insertelement <4 x i32> poison, i32 %1858, i64 0
  %1862 = shufflevector <4 x i32> %1861, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %1878

1863:                                             ; preds = %1863, %1852
  %1864 = phi i64 [ 0, %1852 ], [ %1873, %1863 ]
  %1865 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1853, i64 %1864
  %1866 = load i32, ptr %1865, align 4, !tbaa !31
  %1867 = add nsw i32 %1780, %1866
  %1868 = sub i32 %1867, %1781
  %1869 = getelementptr inbounds [26 x i8], ptr @amino, i64 0, i64 %1864
  %1870 = load i8, ptr %1869, align 1, !tbaa !17
  %1871 = sext i8 %1870 to i64
  %1872 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_disLN, i64 0, i64 %1856, i64 %1871
  store i32 %1868, ptr %1872, align 4, !tbaa !31
  %1873 = add nuw nsw i64 %1864, 1
  %1874 = icmp eq i64 %1873, 20
  br i1 %1874, label %1875, label %1863, !llvm.loop !179

1875:                                             ; preds = %1863
  %1876 = add nuw nsw i64 %1853, 1
  %1877 = icmp eq i64 %1876, 20
  br i1 %1877, label %1857, label %1852, !llvm.loop !180

1878:                                             ; preds = %1889, %1857
  %1879 = phi i64 [ 0, %1857 ], [ %1890, %1889 ]
  br label %1880

1880:                                             ; preds = %1880, %1878
  %1881 = phi i64 [ 0, %1878 ], [ %1887, %1880 ]
  %1882 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %1879, i64 %1881
  %1883 = load <4 x i32>, ptr %1882, align 8, !tbaa !31
  %1884 = add nsw <4 x i32> %1860, %1883
  %1885 = sub <4 x i32> %1884, %1862
  %1886 = getelementptr inbounds [26 x [26 x i32]], ptr @n_disFFT, i64 0, i64 %1879, i64 %1881
  store <4 x i32> %1885, ptr %1886, align 8, !tbaa !31
  %1887 = add nuw i64 %1881, 4
  %1888 = icmp eq i64 %1887, 20
  br i1 %1888, label %1889, label %1880, !llvm.loop !181

1889:                                             ; preds = %1880
  %1890 = add nuw nsw i64 %1879, 1
  %1891 = icmp eq i64 %1890, 20
  br i1 %1891, label %1892, label %1878, !llvm.loop !182

1892:                                             ; preds = %1889, %1849
  store i32 0, ptr @ppid, align 4, !tbaa !31
  %1893 = load i32, ptr @fftThreshold, align 4, !tbaa !31
  %1894 = icmp eq i32 %1893, 100009
  br i1 %1894, label %1895, label %1896

1895:                                             ; preds = %1892
  store i32 80, ptr @fftThreshold, align 4, !tbaa !31
  br label %1896

1896:                                             ; preds = %1895, %1892
  %1897 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  %1898 = icmp eq i32 %1897, 100009
  br i1 %1898, label %1899, label %1901

1899:                                             ; preds = %1896
  %1900 = select i1 %1779, i32 100, i32 20
  store i32 %1900, ptr @fftWinSize, align 4, !tbaa !31
  br label %1901

1901:                                             ; preds = %1899, %1896
  %1902 = load i32, ptr @fftscore, align 4, !tbaa !31
  %1903 = icmp eq i32 %1902, 0
  br i1 %1903, label %1988, label %1904

1904:                                             ; preds = %1901
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(160) @polarity, ptr noundef nonnull align 16 dereferenceable(160) @polarity_, i64 160, i1 false), !tbaa !7
  br label %1905

1905:                                             ; preds = %1905, %1904
  %1906 = phi i64 [ 0, %1904 ], [ %1911, %1905 ]
  %1907 = phi double [ 0.000000e+00, %1904 ], [ %1910, %1905 ]
  %1908 = getelementptr inbounds [20 x double], ptr @polarity, i64 0, i64 %1906
  %1909 = load double, ptr %1908, align 8, !tbaa !7
  %1910 = fadd double %1907, %1909
  %1911 = add nuw nsw i64 %1906, 1
  %1912 = icmp eq i64 %1911, 20
  br i1 %1912, label %1913, label %1905, !llvm.loop !183

1913:                                             ; preds = %1905
  %.lcssa3 = phi double [ %1910, %1905 ]
  %1914 = fdiv double %.lcssa3, 2.000000e+01
  br label %1915

1915:                                             ; preds = %1915, %1913
  %1916 = phi i64 [ 0, %1913 ], [ %1922, %1915 ]
  %1917 = phi double [ 0.000000e+00, %1913 ], [ %1921, %1915 ]
  %1918 = getelementptr inbounds [20 x double], ptr @polarity, i64 0, i64 %1916
  %1919 = load double, ptr %1918, align 8, !tbaa !7
  %1920 = fsub double %1919, %1914
  %1921 = tail call double @llvm.fmuladd.f64(double %1920, double %1920, double %1917)
  %1922 = add nuw nsw i64 %1916, 1
  %1923 = icmp eq i64 %1922, 20
  br i1 %1923, label %1924, label %1915, !llvm.loop !184

1924:                                             ; preds = %1915
  %.lcssa2 = phi double [ %1921, %1915 ]
  %1925 = fdiv double %.lcssa2, 2.000000e+01
  %1926 = tail call double @sqrt(double noundef %1925) #35
  %1927 = insertelement <2 x double> poison, double %1914, i64 0
  %1928 = shufflevector <2 x double> %1927, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1929

1929:                                             ; preds = %1929, %1924
  %1930 = phi i64 [ 0, %1924 ], [ %1934, %1929 ]
  %1931 = getelementptr inbounds [20 x double], ptr @polarity, i64 0, i64 %1930
  %1932 = load <2 x double>, ptr %1931, align 16, !tbaa !7
  %1933 = fsub <2 x double> %1932, %1928
  store <2 x double> %1933, ptr %1931, align 16, !tbaa !7
  %1934 = add nuw i64 %1930, 2
  %1935 = icmp eq i64 %1934, 20
  br i1 %1935, label %1936, label %1929, !llvm.loop !185

1936:                                             ; preds = %1929
  %1937 = insertelement <2 x double> poison, double %1926, i64 0
  %1938 = shufflevector <2 x double> %1937, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1939

1939:                                             ; preds = %1939, %1936
  %1940 = phi i64 [ 0, %1936 ], [ %1944, %1939 ]
  %1941 = getelementptr inbounds [20 x double], ptr @polarity, i64 0, i64 %1940
  %1942 = load <2 x double>, ptr %1941, align 16, !tbaa !7
  %1943 = fdiv <2 x double> %1942, %1938
  store <2 x double> %1943, ptr %1941, align 16, !tbaa !7
  %1944 = add nuw i64 %1940, 2
  %1945 = icmp eq i64 %1944, 20
  br i1 %1945, label %1946, label %1939, !llvm.loop !186

1946:                                             ; preds = %1939
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(160) @volume, ptr noundef nonnull align 16 dereferenceable(160) @volume_, i64 160, i1 false), !tbaa !7
  br label %1947

1947:                                             ; preds = %1947, %1946
  %1948 = phi i64 [ 0, %1946 ], [ %1953, %1947 ]
  %1949 = phi double [ 0.000000e+00, %1946 ], [ %1952, %1947 ]
  %1950 = getelementptr inbounds [20 x double], ptr @volume, i64 0, i64 %1948
  %1951 = load double, ptr %1950, align 8, !tbaa !7
  %1952 = fadd double %1949, %1951
  %1953 = add nuw nsw i64 %1948, 1
  %1954 = icmp eq i64 %1953, 20
  br i1 %1954, label %1955, label %1947, !llvm.loop !187

1955:                                             ; preds = %1947
  %.lcssa1 = phi double [ %1952, %1947 ]
  %1956 = fdiv double %.lcssa1, 2.000000e+01
  br label %1957

1957:                                             ; preds = %1957, %1955
  %1958 = phi i64 [ 0, %1955 ], [ %1964, %1957 ]
  %1959 = phi double [ 0.000000e+00, %1955 ], [ %1963, %1957 ]
  %1960 = getelementptr inbounds [20 x double], ptr @volume, i64 0, i64 %1958
  %1961 = load double, ptr %1960, align 8, !tbaa !7
  %1962 = fsub double %1961, %1956
  %1963 = tail call double @llvm.fmuladd.f64(double %1962, double %1962, double %1959)
  %1964 = add nuw nsw i64 %1958, 1
  %1965 = icmp eq i64 %1964, 20
  br i1 %1965, label %1966, label %1957, !llvm.loop !188

1966:                                             ; preds = %1957
  %.lcssa = phi double [ %1963, %1957 ]
  %1967 = fdiv double %.lcssa, 2.000000e+01
  %1968 = tail call double @sqrt(double noundef %1967) #35
  %1969 = insertelement <2 x double> poison, double %1956, i64 0
  %1970 = shufflevector <2 x double> %1969, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1971

1971:                                             ; preds = %1971, %1966
  %1972 = phi i64 [ 0, %1966 ], [ %1976, %1971 ]
  %1973 = getelementptr inbounds [20 x double], ptr @volume, i64 0, i64 %1972
  %1974 = load <2 x double>, ptr %1973, align 16, !tbaa !7
  %1975 = fsub <2 x double> %1974, %1970
  store <2 x double> %1975, ptr %1973, align 16, !tbaa !7
  %1976 = add nuw i64 %1972, 2
  %1977 = icmp eq i64 %1976, 20
  br i1 %1977, label %1978, label %1971, !llvm.loop !189

1978:                                             ; preds = %1971
  %1979 = insertelement <2 x double> poison, double %1968, i64 0
  %1980 = shufflevector <2 x double> %1979, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1981

1981:                                             ; preds = %1981, %1978
  %1982 = phi i64 [ 0, %1978 ], [ %1986, %1981 ]
  %1983 = getelementptr inbounds [20 x double], ptr @volume, i64 0, i64 %1982
  %1984 = load <2 x double>, ptr %1983, align 16, !tbaa !7
  %1985 = fdiv <2 x double> %1984, %1980
  store <2 x double> %1985, ptr %1983, align 16, !tbaa !7
  %1986 = add nuw i64 %1982, 2
  %1987 = icmp eq i64 %1986, 20
  br i1 %1987, label %1988, label %1981, !llvm.loop !190

1988:                                             ; preds = %1981, %1901
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #7

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log10(double noundef) local_unnamed_addr #9

; Function Attrs: nofree nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @calcfreq_nuc(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) unnamed_addr #10 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %2, i8 0, i64 32, i1 false), !tbaa !7
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %5, label %53

5:                                                ; preds = %3
  %6 = zext i32 %0 to i64
  br label %23

7:                                                ; preds = %53, %20
  %8 = phi i64 [ %21, %20 ], [ 0, %53 ]
  %9 = getelementptr inbounds double, ptr %2, i64 %8
  %10 = load <2 x double>, ptr %9, align 8, !tbaa !7
  %11 = fcmp olt <2 x double> %10, <double 1.000000e-04, double 1.000000e-04>
  %12 = extractelement <2 x i1> %11, i64 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = getelementptr inbounds double, ptr %2, i64 %8
  store double 1.000000e-04, ptr %14, align 8, !tbaa !7
  br label %15

15:                                               ; preds = %13, %7
  %16 = extractelement <2 x i1> %11, i64 1
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = or i64 %8, 1
  %19 = getelementptr inbounds double, ptr %2, i64 %18
  store double 1.000000e-04, ptr %19, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %17, %15
  %21 = add nuw i64 %8, 2
  %22 = icmp eq i64 %21, 4
  br i1 %22, label %64, label %7, !llvm.loop !191

23:                                               ; preds = %50, %5
  %24 = phi i64 [ 0, %5 ], [ %51, %50 ]
  %25 = getelementptr inbounds ptr, ptr %1, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !19
  %27 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %26) #40
  %28 = trunc i64 %27 to i32
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %50

30:                                               ; preds = %23
  %31 = and i64 %27, 4294967295
  br label %32

32:                                               ; preds = %47, %30
  %33 = phi i64 [ 0, %30 ], [ %48, %47 ]
  %34 = getelementptr inbounds i8, ptr %26, i64 %33
  %35 = load i8, ptr %34, align 1, !tbaa !17
  %36 = sext i8 %35 to i64
  %37 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !31
  %39 = icmp eq i32 %38, 4
  %40 = select i1 %39, i32 3, i32 %38
  %41 = icmp ult i32 %40, 4
  br i1 %41, label %42, label %47

42:                                               ; preds = %32
  %43 = zext i32 %40 to i64
  %44 = getelementptr inbounds double, ptr %2, i64 %43
  %45 = load double, ptr %44, align 8, !tbaa !7
  %46 = fadd double %45, 1.000000e+00
  store double %46, ptr %44, align 8, !tbaa !7
  br label %47

47:                                               ; preds = %42, %32
  %48 = add nuw nsw i64 %33, 1
  %49 = icmp eq i64 %48, %31
  br i1 %49, label %50, label %32, !llvm.loop !192

50:                                               ; preds = %47, %23
  %51 = add nuw nsw i64 %24, 1
  %52 = icmp eq i64 %51, %6
  br i1 %52, label %53, label %23, !llvm.loop !193

53:                                               ; preds = %50, %3
  br label %7

54:                                               ; preds = %64
  %.lcssa = phi double [ %69, %64 ]
  %55 = insertelement <2 x double> poison, double %.lcssa, i64 0
  %56 = shufflevector <2 x double> %55, <2 x double> poison, <2 x i32> zeroinitializer
  br label %57

57:                                               ; preds = %57, %54
  %58 = phi i64 [ 0, %54 ], [ %62, %57 ]
  %59 = getelementptr inbounds double, ptr %2, i64 %58
  %60 = load <2 x double>, ptr %59, align 8, !tbaa !7
  %61 = fdiv <2 x double> %60, %56
  store <2 x double> %61, ptr %59, align 8, !tbaa !7
  %62 = add nuw i64 %58, 2
  %63 = icmp eq i64 %62, 4
  br i1 %63, label %72, label %57, !llvm.loop !194

64:                                               ; preds = %64, %20
  %65 = phi i64 [ %70, %64 ], [ 0, %20 ]
  %66 = phi double [ %69, %64 ], [ 0.000000e+00, %20 ]
  %67 = getelementptr inbounds double, ptr %2, i64 %65
  %68 = load double, ptr %67, align 8, !tbaa !7
  %69 = fadd double %66, %68
  %70 = add nuw nsw i64 %65, 1
  %71 = icmp eq i64 %70, 4
  br i1 %71, label %54, label %64, !llvm.loop !195

72:                                               ; preds = %57
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @calcfreq(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) unnamed_addr #12 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(160) %2, i8 0, i64 160, i1 false), !tbaa !7
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %5, label %51

5:                                                ; preds = %3
  %6 = zext i32 %0 to i64
  br label %23

7:                                                ; preds = %51, %20
  %8 = phi i64 [ %21, %20 ], [ 0, %51 ]
  %9 = getelementptr inbounds double, ptr %2, i64 %8
  %10 = load <2 x double>, ptr %9, align 8, !tbaa !7
  %11 = fcmp olt <2 x double> %10, <double 1.000000e-04, double 1.000000e-04>
  %12 = extractelement <2 x i1> %11, i64 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = getelementptr inbounds double, ptr %2, i64 %8
  store double 1.000000e-04, ptr %14, align 8, !tbaa !7
  br label %15

15:                                               ; preds = %13, %7
  %16 = extractelement <2 x i1> %11, i64 1
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = or i64 %8, 1
  %19 = getelementptr inbounds double, ptr %2, i64 %18
  store double 1.000000e-04, ptr %19, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %17, %15
  %21 = add nuw i64 %8, 2
  %22 = icmp eq i64 %21, 20
  br i1 %22, label %52, label %7, !llvm.loop !196

23:                                               ; preds = %48, %5
  %24 = phi i64 [ 0, %5 ], [ %49, %48 ]
  %25 = getelementptr inbounds ptr, ptr %1, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !19
  %27 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %26) #40
  %28 = trunc i64 %27 to i32
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %48

30:                                               ; preds = %23
  %31 = and i64 %27, 4294967295
  br label %32

32:                                               ; preds = %45, %30
  %33 = phi i64 [ 0, %30 ], [ %46, %45 ]
  %34 = getelementptr inbounds i8, ptr %26, i64 %33
  %35 = load i8, ptr %34, align 1, !tbaa !17
  %36 = sext i8 %35 to i64
  %37 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !31
  %39 = icmp ult i32 %38, 20
  br i1 %39, label %40, label %45

40:                                               ; preds = %32
  %41 = zext i32 %38 to i64
  %42 = getelementptr inbounds double, ptr %2, i64 %41
  %43 = load double, ptr %42, align 8, !tbaa !7
  %44 = fadd double %43, 1.000000e+00
  store double %44, ptr %42, align 8, !tbaa !7
  br label %45

45:                                               ; preds = %40, %32
  %46 = add nuw nsw i64 %33, 1
  %47 = icmp eq i64 %46, %31
  br i1 %47, label %48, label %32, !llvm.loop !197

48:                                               ; preds = %45, %23
  %49 = add nuw nsw i64 %24, 1
  %50 = icmp eq i64 %49, %6
  br i1 %50, label %51, label %23, !llvm.loop !198

51:                                               ; preds = %48, %3
  br label %7

52:                                               ; preds = %20
  %53 = load ptr, ptr @stderr, align 8, !tbaa !19
  %54 = tail call i64 @fwrite(ptr nonnull @.str.40, i64 12, i64 1, ptr %53) #38
  br label %55

55:                                               ; preds = %55, %52
  %56 = phi i64 [ 0, %52 ], [ %61, %55 ]
  %57 = load ptr, ptr @stderr, align 8, !tbaa !19
  %58 = getelementptr inbounds double, ptr %2, i64 %56
  %59 = load double, ptr %58, align 8, !tbaa !7
  %60 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %57, ptr noundef nonnull @.str.41, double noundef %59) #36
  %61 = add nuw nsw i64 %56, 1
  %62 = icmp eq i64 %61, 20
  br i1 %62, label %63, label %55, !llvm.loop !199

63:                                               ; preds = %63, %55
  %64 = phi i64 [ %69, %63 ], [ 0, %55 ]
  %65 = phi double [ %68, %63 ], [ 0.000000e+00, %55 ]
  %66 = getelementptr inbounds double, ptr %2, i64 %64
  %67 = load double, ptr %66, align 8, !tbaa !7
  %68 = fadd double %65, %67
  %69 = add nuw nsw i64 %64, 1
  %70 = icmp eq i64 %69, 20
  br i1 %70, label %71, label %63, !llvm.loop !200

71:                                               ; preds = %63
  %.lcssa = phi double [ %68, %63 ]
  %72 = load ptr, ptr @stderr, align 8, !tbaa !19
  %73 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %72, ptr noundef nonnull @.str.42, double noundef %.lcssa) #36
  %74 = insertelement <2 x double> poison, double %.lcssa, i64 0
  %75 = shufflevector <2 x double> %74, <2 x double> poison, <2 x i32> zeroinitializer
  br label %76

76:                                               ; preds = %76, %71
  %77 = phi i64 [ 0, %71 ], [ %81, %76 ]
  %78 = getelementptr inbounds double, ptr %2, i64 %77
  %79 = load <2 x double>, ptr %78, align 8, !tbaa !7
  %80 = fdiv <2 x double> %79, %75
  store <2 x double> %80, ptr %78, align 8, !tbaa !7
  %81 = add nuw i64 %77, 2
  %82 = icmp eq i64 %81, 20
  br i1 %82, label %83, label %76, !llvm.loop !201

83:                                               ; preds = %76
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sqrt(double noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #13

; Function Attrs: nounwind optsize uwtable
define internal float @Falign(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr nocapture noundef %7) #4 {
  %9 = alloca i32, align 4
  %10 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #34
  store float 0.000000e+00, ptr %10, align 4, !tbaa !167
  %11 = load ptr, ptr %0, align 8, !tbaa !19
  %12 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %11) #40
  %13 = trunc i64 %12 to i32
  %14 = load ptr, ptr %1, align 8, !tbaa !19
  %15 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %14) #40
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @llvm.smax.i32(i32 %13, i32 %16)
  br label %18

18:                                               ; preds = %18, %8
  %19 = phi i32 [ 1, %8 ], [ %21, %18 ]
  %20 = icmp slt i32 %17, %19
  %21 = shl i32 %19, 1
  br i1 %20, label %22, label %18, !llvm.loop !202

22:                                               ; preds = %18
  %.lcssa1 = phi i32 [ %19, %18 ]
  %23 = sdiv i32 %.lcssa1, 2
  %24 = load i32, ptr @Falign.prevalloclen, align 4, !tbaa !31
  %25 = icmp eq i32 %24, %6
  br i1 %25, label %42, label %26

26:                                               ; preds = %22
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %26
  %29 = load ptr, ptr @Falign.result1, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %29) #35
  %30 = load ptr, ptr @Falign.result2, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %30) #35
  %31 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %31) #35
  %32 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %32) #35
  br label %33

33:                                               ; preds = %28, %26
  %34 = load i32, ptr @njob, align 4, !tbaa !31
  %35 = tail call ptr @AllocateCharMtx(i32 noundef %34, i32 noundef %6) #35
  store ptr %35, ptr @Falign.result1, align 8, !tbaa !19
  %36 = load i32, ptr @njob, align 4, !tbaa !31
  %37 = tail call ptr @AllocateCharMtx(i32 noundef %36, i32 noundef %6) #35
  store ptr %37, ptr @Falign.result2, align 8, !tbaa !19
  %38 = load i32, ptr @njob, align 4, !tbaa !31
  %39 = tail call ptr @AllocateCharMtx(i32 noundef %38, i32 noundef %6) #35
  store ptr %39, ptr @Falign.tmpres1, align 8, !tbaa !19
  %40 = load i32, ptr @njob, align 4, !tbaa !31
  %41 = tail call ptr @AllocateCharMtx(i32 noundef %40, i32 noundef %6) #35
  store ptr %41, ptr @Falign.tmpres2, align 8, !tbaa !19
  store i32 %6, ptr @Falign.prevalloclen, align 4, !tbaa !31
  br label %42

42:                                               ; preds = %33, %22
  %43 = load i32, ptr @Falign.localalloclen, align 4, !tbaa !31
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %84

45:                                               ; preds = %42
  %46 = load i32, ptr @njob, align 4, !tbaa !31
  %47 = tail call ptr @AllocateCharVec(i32 noundef %46) #35
  store ptr %47, ptr @Falign.sgap1, align 8, !tbaa !19
  %48 = load i32, ptr @njob, align 4, !tbaa !31
  %49 = tail call ptr @AllocateCharVec(i32 noundef %48) #35
  store ptr %49, ptr @Falign.egap1, align 8, !tbaa !19
  %50 = load i32, ptr @njob, align 4, !tbaa !31
  %51 = tail call ptr @AllocateCharVec(i32 noundef %50) #35
  store ptr %51, ptr @Falign.sgap2, align 8, !tbaa !19
  %52 = load i32, ptr @njob, align 4, !tbaa !31
  %53 = tail call ptr @AllocateCharVec(i32 noundef %52) #35
  store ptr %53, ptr @Falign.egap2, align 8, !tbaa !19
  %54 = tail call ptr @AllocateIntVec(i32 noundef 20) #35
  store ptr %54, ptr @Falign.kouho, align 8, !tbaa !19
  %55 = tail call ptr @AllocateIntVec(i32 noundef 100000) #35
  store ptr %55, ptr @Falign.cut1, align 8, !tbaa !19
  %56 = tail call ptr @AllocateIntVec(i32 noundef 100000) #35
  store ptr %56, ptr @Falign.cut2, align 8, !tbaa !19
  %57 = load i32, ptr @njob, align 4, !tbaa !31
  %58 = tail call ptr @AllocateCharMtx(i32 noundef %57, i32 noundef 0) #35
  store ptr %58, ptr @Falign.tmpptr1, align 8, !tbaa !19
  %59 = load i32, ptr @njob, align 4, !tbaa !31
  %60 = tail call ptr @AllocateCharMtx(i32 noundef %59, i32 noundef 0) #35
  store ptr %60, ptr @Falign.tmpptr2, align 8, !tbaa !19
  %61 = tail call noalias dereferenceable_or_null(4800000) ptr @calloc(i64 noundef 100000, i64 noundef 48) #41
  store ptr %61, ptr @Falign.segment, align 8, !tbaa !19
  %62 = tail call noalias dereferenceable_or_null(4800000) ptr @calloc(i64 noundef 100000, i64 noundef 48) #41
  store ptr %62, ptr @Falign.segment1, align 8, !tbaa !19
  %63 = tail call noalias dereferenceable_or_null(4800000) ptr @calloc(i64 noundef 100000, i64 noundef 48) #41
  store ptr %63, ptr @Falign.segment2, align 8, !tbaa !19
  %64 = tail call noalias dereferenceable_or_null(800000) ptr @calloc(i64 noundef 100000, i64 noundef 8) #41
  store ptr %64, ptr @Falign.sortedseg1, align 8, !tbaa !19
  %65 = tail call noalias dereferenceable_or_null(800000) ptr @calloc(i64 noundef 100000, i64 noundef 8) #41
  store ptr %65, ptr @Falign.sortedseg2, align 8, !tbaa !19
  %66 = insertelement <4 x ptr> poison, ptr %62, i64 0
  %67 = insertelement <4 x ptr> %66, ptr %61, i64 1
  %68 = insertelement <4 x ptr> %67, ptr %63, i64 2
  %69 = insertelement <4 x ptr> %68, ptr %64, i64 3
  %70 = icmp eq <4 x ptr> %69, zeroinitializer
  %71 = icmp ne ptr %65, null
  %72 = bitcast <4 x i1> %70 to i4
  %73 = icmp eq i4 %72, 0
  %74 = and i1 %73, %71
  br i1 %74, label %76, label %75

75:                                               ; preds = %45
  tail call void @ErrorExit(ptr noundef nonnull @.str.95) #35
  br label %76

76:                                               ; preds = %75, %45
  %77 = load i32, ptr @scoremtx, align 4, !tbaa !31
  %78 = icmp eq i32 %77, -1
  %79 = load i32, ptr @fftscore, align 4
  %80 = icmp eq i32 %79, 0
  %81 = select i1 %80, i32 20, i32 1
  %82 = select i1 %78, i32 1, i32 %81
  store i32 %82, ptr @n20or4or2, align 4, !tbaa !31
  %83 = load i32, ptr @Falign.localalloclen, align 4, !tbaa !31
  br label %84

84:                                               ; preds = %76, %42
  %85 = phi i32 [ %83, %76 ], [ %43, %42 ]
  %86 = icmp slt i32 %85, %.lcssa1
  br i1 %86, label %87, label %121

87:                                               ; preds = %84
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %101, label %89

89:                                               ; preds = %87
  %90 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %98

92:                                               ; preds = %89
  %93 = load ptr, ptr @Falign.seqVector1, align 8, !tbaa !19
  tail call void @FreeFukusosuuMtx(ptr noundef %93) #35
  %94 = load ptr, ptr @Falign.seqVector2, align 8, !tbaa !19
  tail call void @FreeFukusosuuMtx(ptr noundef %94) #35
  %95 = load ptr, ptr @Falign.naisekiNoWa, align 8, !tbaa !19
  tail call void @FreeFukusosuuVec(ptr noundef %95) #35
  %96 = load ptr, ptr @Falign.naiseki, align 8, !tbaa !19
  tail call void @FreeFukusosuuMtx(ptr noundef %96) #35
  %97 = load ptr, ptr @Falign.soukan, align 8, !tbaa !19
  tail call void @FreeDoubleVec(ptr noundef %97) #35
  br label %98

98:                                               ; preds = %92, %89
  %99 = load ptr, ptr @Falign.tmpseq1, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %99) #35
  %100 = load ptr, ptr @Falign.tmpseq2, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %100) #35
  br label %101

101:                                              ; preds = %98, %87
  %102 = load i32, ptr @njob, align 4, !tbaa !31
  %103 = tail call ptr @AllocateCharMtx(i32 noundef %102, i32 noundef %.lcssa1) #35
  store ptr %103, ptr @Falign.tmpseq1, align 8, !tbaa !19
  %104 = load i32, ptr @njob, align 4, !tbaa !31
  %105 = tail call ptr @AllocateCharMtx(i32 noundef %104, i32 noundef %.lcssa1) #35
  store ptr %105, ptr @Falign.tmpseq2, align 8, !tbaa !19
  %106 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %120

108:                                              ; preds = %101
  %109 = tail call ptr @AllocateFukusosuuVec(i32 noundef %.lcssa1) #35
  store ptr %109, ptr @Falign.naisekiNoWa, align 8, !tbaa !19
  %110 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  %111 = tail call ptr @AllocateFukusosuuMtx(i32 noundef %110, i32 noundef %.lcssa1) #35
  store ptr %111, ptr @Falign.naiseki, align 8, !tbaa !19
  %112 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  %113 = add nuw nsw i32 %112, 1
  %114 = add nuw nsw i32 %.lcssa1, 1
  %115 = tail call ptr @AllocateFukusosuuMtx(i32 noundef %113, i32 noundef %114) #35
  store ptr %115, ptr @Falign.seqVector1, align 8, !tbaa !19
  %116 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  %117 = add nuw nsw i32 %116, 1
  %118 = tail call ptr @AllocateFukusosuuMtx(i32 noundef %117, i32 noundef %114) #35
  store ptr %118, ptr @Falign.seqVector2, align 8, !tbaa !19
  %119 = tail call ptr @AllocateDoubleVec(i32 noundef %114) #35
  store ptr %119, ptr @Falign.soukan, align 8, !tbaa !19
  br label %120

120:                                              ; preds = %108, %101
  store i32 %.lcssa1, ptr @Falign.localalloclen, align 4, !tbaa !31
  br label %121

121:                                              ; preds = %120, %84
  %122 = icmp sgt i32 %4, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %121
  %124 = load ptr, ptr @Falign.tmpseq1, align 8, !tbaa !19
  %125 = zext i32 %4 to i64
  br label %131

126:                                              ; preds = %131, %121
  %127 = icmp sgt i32 %5, 0
  br i1 %127, label %128, label %149

128:                                              ; preds = %126
  %129 = load ptr, ptr @Falign.tmpseq2, align 8, !tbaa !19
  %130 = zext i32 %5 to i64
  br label %140

131:                                              ; preds = %131, %123
  %132 = phi i64 [ 0, %123 ], [ %138, %131 ]
  %133 = getelementptr inbounds ptr, ptr %124, i64 %132
  %134 = load ptr, ptr %133, align 8, !tbaa !19
  %135 = getelementptr inbounds ptr, ptr %0, i64 %132
  %136 = load ptr, ptr %135, align 8, !tbaa !19
  %137 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %134, ptr noundef nonnull dereferenceable(1) %136) #35
  %138 = add nuw nsw i64 %132, 1
  %139 = icmp eq i64 %138, %125
  br i1 %139, label %126, label %131, !llvm.loop !203

140:                                              ; preds = %140, %128
  %141 = phi i64 [ 0, %128 ], [ %147, %140 ]
  %142 = getelementptr inbounds ptr, ptr %129, i64 %141
  %143 = load ptr, ptr %142, align 8, !tbaa !19
  %144 = getelementptr inbounds ptr, ptr %1, i64 %141
  %145 = load ptr, ptr %144, align 8, !tbaa !19
  %146 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %143, ptr noundef nonnull dereferenceable(1) %145) #35
  %147 = add nuw nsw i64 %141, 1
  %148 = icmp eq i64 %147, %130
  br i1 %148, label %149, label %140, !llvm.loop !204

149:                                              ; preds = %140, %126
  %150 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %153, label %152

152:                                              ; preds = %149
  store i32 0, ptr %9, align 4, !tbaa !31
  br label %374

153:                                              ; preds = %149
  %154 = load i32, ptr @fftkeika, align 4, !tbaa !31
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %159, label %156

156:                                              ; preds = %153
  %157 = load ptr, ptr @stderr, align 8, !tbaa !19
  %158 = tail call i64 @fwrite(ptr nonnull @.str.1.96, i64 9, i64 1, ptr %157) #38
  br label %159

159:                                              ; preds = %156, %153
  %160 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %176

162:                                              ; preds = %159
  %163 = icmp eq i32 %.lcssa1, 0
  %164 = load ptr, ptr @Falign.seqVector1, align 8
  %165 = zext i32 %.lcssa1 to i64
  %166 = shl nuw nsw i64 %165, 4
  %167 = zext i32 %160 to i64
  br label %168

168:                                              ; preds = %173, %162
  %169 = phi i64 [ 0, %162 ], [ %174, %173 ]
  br i1 %163, label %173, label %170

170:                                              ; preds = %168
  %171 = getelementptr inbounds ptr, ptr %164, i64 %169
  %172 = load ptr, ptr %171, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr align 8 %172, i8 0, i64 %166, i1 false), !tbaa !7
  br label %173

173:                                              ; preds = %170, %168
  %174 = add nuw nsw i64 %169, 1
  %175 = icmp eq i64 %174, %167
  br i1 %175, label %176, label %168, !llvm.loop !205

176:                                              ; preds = %173, %159
  %177 = load i32, ptr @fftscore, align 4, !tbaa !31
  %178 = icmp ne i32 %177, 0
  %179 = load i32, ptr @scoremtx, align 4
  %180 = icmp ne i32 %179, -1
  %181 = select i1 %178, i1 %180, i1 false
  br i1 %181, label %187, label %182

182:                                              ; preds = %176
  br i1 %122, label %183, label %209

183:                                              ; preds = %182
  %184 = load ptr, ptr @Falign.seqVector1, align 8, !tbaa !19
  %185 = load ptr, ptr @Falign.tmpseq1, align 8, !tbaa !19
  %186 = zext i32 %4 to i64
  br label %201

187:                                              ; preds = %176
  br i1 %122, label %188, label %209

188:                                              ; preds = %187
  %189 = load ptr, ptr @Falign.seqVector1, align 8, !tbaa !19
  %190 = load ptr, ptr @Falign.tmpseq1, align 8, !tbaa !19
  %191 = zext i32 %4 to i64
  br label %192

192:                                              ; preds = %192, %188
  %193 = phi i64 [ 0, %188 ], [ %199, %192 ]
  %194 = load ptr, ptr %189, align 8, !tbaa !19
  %195 = getelementptr inbounds double, ptr %2, i64 %193
  %196 = load double, ptr %195, align 8, !tbaa !7
  %197 = getelementptr inbounds ptr, ptr %190, i64 %193
  %198 = load ptr, ptr %197, align 8, !tbaa !19
  tail call fastcc void @seq_vec_5(ptr noundef %194, double noundef %196, ptr noundef %198) #39
  %199 = add nuw nsw i64 %193, 1
  %200 = icmp eq i64 %199, %191
  br i1 %200, label %209, label %192, !llvm.loop !206

201:                                              ; preds = %201, %183
  %202 = phi i64 [ 0, %183 ], [ %207, %201 ]
  %203 = getelementptr inbounds double, ptr %2, i64 %202
  %204 = load double, ptr %203, align 8, !tbaa !7
  %205 = getelementptr inbounds ptr, ptr %185, i64 %202
  %206 = load ptr, ptr %205, align 8, !tbaa !19
  tail call fastcc void @seq_vec_3(ptr noundef %184, double noundef %204, ptr noundef %206) #39
  %207 = add nuw nsw i64 %202, 1
  %208 = icmp eq i64 %207, %186
  br i1 %208, label %209, label %201, !llvm.loop !207

209:                                              ; preds = %201, %192, %187, %182
  br i1 %161, label %210, label %224

210:                                              ; preds = %209
  %211 = icmp eq i32 %.lcssa1, 0
  %212 = load ptr, ptr @Falign.seqVector2, align 8
  %213 = zext i32 %.lcssa1 to i64
  %214 = shl nuw nsw i64 %213, 4
  %215 = zext i32 %160 to i64
  br label %216

216:                                              ; preds = %221, %210
  %217 = phi i64 [ 0, %210 ], [ %222, %221 ]
  br i1 %211, label %221, label %218

218:                                              ; preds = %216
  %219 = getelementptr inbounds ptr, ptr %212, i64 %217
  %220 = load ptr, ptr %219, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr align 8 %220, i8 0, i64 %214, i1 false), !tbaa !7
  br label %221

221:                                              ; preds = %218, %216
  %222 = add nuw nsw i64 %217, 1
  %223 = icmp eq i64 %222, %215
  br i1 %223, label %224, label %216, !llvm.loop !208

224:                                              ; preds = %221, %209
  %225 = load i32, ptr @fftscore, align 4, !tbaa !31
  %226 = icmp ne i32 %225, 0
  %227 = load i32, ptr @scoremtx, align 4
  %228 = icmp ne i32 %227, -1
  %229 = select i1 %226, i1 %228, i1 false
  br i1 %229, label %235, label %230

230:                                              ; preds = %224
  br i1 %127, label %231, label %257

231:                                              ; preds = %230
  %232 = load ptr, ptr @Falign.seqVector2, align 8, !tbaa !19
  %233 = load ptr, ptr @Falign.tmpseq2, align 8, !tbaa !19
  %234 = zext i32 %5 to i64
  br label %249

235:                                              ; preds = %224
  br i1 %127, label %236, label %257

236:                                              ; preds = %235
  %237 = load ptr, ptr @Falign.seqVector2, align 8, !tbaa !19
  %238 = load ptr, ptr @Falign.tmpseq2, align 8, !tbaa !19
  %239 = zext i32 %5 to i64
  br label %240

240:                                              ; preds = %240, %236
  %241 = phi i64 [ 0, %236 ], [ %247, %240 ]
  %242 = load ptr, ptr %237, align 8, !tbaa !19
  %243 = getelementptr inbounds double, ptr %3, i64 %241
  %244 = load double, ptr %243, align 8, !tbaa !7
  %245 = getelementptr inbounds ptr, ptr %238, i64 %241
  %246 = load ptr, ptr %245, align 8, !tbaa !19
  tail call fastcc void @seq_vec_5(ptr noundef %242, double noundef %244, ptr noundef %246) #39
  %247 = add nuw nsw i64 %241, 1
  %248 = icmp eq i64 %247, %239
  br i1 %248, label %257, label %240, !llvm.loop !209

249:                                              ; preds = %249, %231
  %250 = phi i64 [ 0, %231 ], [ %255, %249 ]
  %251 = getelementptr inbounds double, ptr %3, i64 %250
  %252 = load double, ptr %251, align 8, !tbaa !7
  %253 = getelementptr inbounds ptr, ptr %233, i64 %250
  %254 = load ptr, ptr %253, align 8, !tbaa !19
  tail call fastcc void @seq_vec_3(ptr noundef %232, double noundef %252, ptr noundef %254) #39
  %255 = add nuw nsw i64 %250, 1
  %256 = icmp eq i64 %255, %234
  br i1 %256, label %257, label %249, !llvm.loop !210

257:                                              ; preds = %249, %240, %235, %230
  br i1 %161, label %263, label %282

258:                                              ; preds = %263
  %.lcssa = phi i32 [ %276, %263 ]
  %259 = icmp sgt i32 %.lcssa, 0
  br i1 %259, label %260, label %282

260:                                              ; preds = %258
  %261 = icmp sgt i32 %.lcssa1, 0
  %262 = zext i32 %.lcssa1 to i64
  br label %279

263:                                              ; preds = %263, %257
  %264 = phi i64 [ %275, %263 ], [ 0, %257 ]
  %265 = load ptr, ptr @Falign.seqVector2, align 8, !tbaa !19
  %266 = getelementptr inbounds ptr, ptr %265, i64 %264
  %267 = load ptr, ptr %266, align 8, !tbaa !19
  %268 = icmp eq i64 %264, 0
  %269 = zext i1 %268 to i32
  %270 = tail call i32 @fft(i32 noundef %.lcssa1, ptr noundef %267, i32 noundef %269) #35
  %271 = load ptr, ptr @Falign.seqVector1, align 8, !tbaa !19
  %272 = getelementptr inbounds ptr, ptr %271, i64 %264
  %273 = load ptr, ptr %272, align 8, !tbaa !19
  %274 = tail call i32 @fft(i32 noundef %.lcssa1, ptr noundef %273, i32 noundef 0) #35
  %275 = add nuw nsw i64 %264, 1
  %276 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  %277 = sext i32 %276 to i64
  %278 = icmp slt i64 %275, %277
  br i1 %278, label %263, label %258, !llvm.loop !211

279:                                              ; preds = %309, %260
  %280 = phi i32 [ %.lcssa, %260 ], [ %310, %309 ]
  %281 = phi i64 [ 0, %260 ], [ %311, %309 ]
  br i1 %261, label %291, label %309

282:                                              ; preds = %309, %258, %257
  %283 = phi i32 [ %.lcssa, %258 ], [ %160, %257 ], [ %310, %309 ]
  %284 = icmp sgt i32 %.lcssa1, 0
  %285 = load ptr, ptr @Falign.naisekiNoWa, align 8, !tbaa !19
  br i1 %284, label %286, label %330

286:                                              ; preds = %282
  %287 = icmp sgt i32 %283, 0
  %288 = load ptr, ptr @Falign.naiseki, align 8
  %289 = zext i32 %.lcssa1 to i64
  %290 = zext i32 %283 to i64
  br label %314

291:                                              ; preds = %291, %279
  %292 = phi i64 [ %305, %291 ], [ 0, %279 ]
  %293 = load ptr, ptr @Falign.naiseki, align 8, !tbaa !19
  %294 = getelementptr inbounds ptr, ptr %293, i64 %281
  %295 = load ptr, ptr %294, align 8, !tbaa !19
  %296 = getelementptr inbounds %struct._Fukusosuu, ptr %295, i64 %292
  %297 = load ptr, ptr @Falign.seqVector1, align 8, !tbaa !19
  %298 = getelementptr inbounds ptr, ptr %297, i64 %281
  %299 = load ptr, ptr %298, align 8, !tbaa !19
  %300 = getelementptr inbounds %struct._Fukusosuu, ptr %299, i64 %292
  %301 = load ptr, ptr @Falign.seqVector2, align 8, !tbaa !19
  %302 = getelementptr inbounds ptr, ptr %301, i64 %281
  %303 = load ptr, ptr %302, align 8, !tbaa !19
  %304 = getelementptr inbounds %struct._Fukusosuu, ptr %303, i64 %292
  tail call void @calcNaiseki(ptr noundef %296, ptr noundef %300, ptr noundef %304) #35
  %305 = add nuw nsw i64 %292, 1
  %306 = icmp eq i64 %305, %262
  br i1 %306, label %307, label %291, !llvm.loop !212

307:                                              ; preds = %291
  %308 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  br label %309

309:                                              ; preds = %307, %279
  %310 = phi i32 [ %308, %307 ], [ %280, %279 ]
  %311 = add nuw nsw i64 %281, 1
  %312 = sext i32 %310 to i64
  %313 = icmp slt i64 %311, %312
  br i1 %313, label %279, label %282, !llvm.loop !213

314:                                              ; preds = %327, %286
  %315 = phi i64 [ 0, %286 ], [ %328, %327 ]
  %316 = getelementptr inbounds %struct._Fukusosuu, ptr %285, i64 %315
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %316, i8 0, i64 16, i1 false)
  br i1 %287, label %317, label %327

317:                                              ; preds = %317, %314
  %318 = phi i64 [ %325, %317 ], [ 0, %314 ]
  %319 = phi <2 x double> [ %324, %317 ], [ zeroinitializer, %314 ]
  %320 = getelementptr inbounds ptr, ptr %288, i64 %318
  %321 = load ptr, ptr %320, align 8, !tbaa !19
  %322 = getelementptr inbounds %struct._Fukusosuu, ptr %321, i64 %315
  %323 = load <2 x double>, ptr %322, align 8, !tbaa !7
  %324 = fadd <2 x double> %323, %319
  store <2 x double> %324, ptr %316, align 8, !tbaa !7
  %325 = add nuw nsw i64 %318, 1
  %326 = icmp eq i64 %325, %290
  br i1 %326, label %327, label %317, !llvm.loop !214

327:                                              ; preds = %317, %314
  %328 = add nuw nsw i64 %315, 1
  %329 = icmp eq i64 %328, %289
  br i1 %329, label %330, label %314, !llvm.loop !215

330:                                              ; preds = %327, %282
  %331 = sub nsw i32 0, %.lcssa1
  %332 = tail call i32 @fft(i32 noundef %331, ptr noundef %285, i32 noundef 0) #35
  %333 = icmp slt i32 %.lcssa1, -1
  %334 = load ptr, ptr @Falign.soukan, align 8, !tbaa !19
  br i1 %333, label %335, label %337

335:                                              ; preds = %330
  %336 = add nsw i32 %23, 1
  br label %342

337:                                              ; preds = %330
  %338 = load ptr, ptr @Falign.naisekiNoWa, align 8, !tbaa !19
  %339 = sext i32 %23 to i64
  %340 = add nsw i32 %23, 1
  %341 = zext i32 %340 to i64
  br label %351

342:                                              ; preds = %351, %335
  %343 = phi i32 [ %336, %335 ], [ %340, %351 ]
  %344 = icmp slt i32 %343, %.lcssa1
  br i1 %344, label %345, label %369

345:                                              ; preds = %342
  %346 = load ptr, ptr @Falign.naisekiNoWa, align 8, !tbaa !19
  %347 = add nsw i32 %23, %.lcssa1
  %348 = add nsw i32 %23, 1
  %349 = sext i32 %348 to i64
  %350 = sext i32 %.lcssa1 to i64
  br label %359

351:                                              ; preds = %351, %337
  %352 = phi i64 [ 0, %337 ], [ %357, %351 ]
  %353 = sub nsw i64 %339, %352
  %354 = getelementptr inbounds %struct._Fukusosuu, ptr %338, i64 %353
  %355 = load double, ptr %354, align 8, !tbaa !216
  %356 = getelementptr inbounds double, ptr %334, i64 %352
  store double %355, ptr %356, align 8, !tbaa !7
  %357 = add nuw nsw i64 %352, 1
  %358 = icmp eq i64 %357, %341
  br i1 %358, label %342, label %351, !llvm.loop !218

359:                                              ; preds = %359, %345
  %360 = phi i64 [ %349, %345 ], [ %367, %359 ]
  %361 = trunc i64 %360 to i32
  %362 = sub i32 %347, %361
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds %struct._Fukusosuu, ptr %346, i64 %363
  %365 = load double, ptr %364, align 8, !tbaa !216
  %366 = getelementptr inbounds double, ptr %334, i64 %360
  store double %365, ptr %366, align 8, !tbaa !7
  %367 = add nsw i64 %360, 1
  %368 = icmp eq i64 %367, %350
  br i1 %368, label %369, label %359, !llvm.loop !219

369:                                              ; preds = %359, %342
  %370 = load ptr, ptr @Falign.kouho, align 8, !tbaa !19
  %371 = tail call i32 @getKouho(ptr noundef %370, i32 noundef 20, ptr noundef %334, i32 noundef %.lcssa1) #35
  %372 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  store i32 0, ptr %9, align 4, !tbaa !31
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %376, label %374

374:                                              ; preds = %369, %152
  %375 = load ptr, ptr @Falign.kouho, align 8, !tbaa !19
  store i32 0, ptr %375, align 4, !tbaa !31
  br label %376

376:                                              ; preds = %374, %369
  %377 = phi i64 [ 1, %374 ], [ 20, %369 ]
  %378 = sub nsw i32 0, %13
  br label %379

379:                                              ; preds = %495, %376
  %380 = phi i64 [ 0, %376 ], [ %496, %495 ]
  %381 = load ptr, ptr @Falign.kouho, align 8, !tbaa !19
  %382 = getelementptr inbounds i32, ptr %381, i64 %380
  %383 = load i32, ptr %382, align 4, !tbaa !31
  %384 = icmp sgt i32 %383, %378
  %385 = icmp slt i32 %383, %16
  %386 = select i1 %384, i1 %385, i1 false
  br i1 %386, label %387, label %495

387:                                              ; preds = %379
  %388 = load ptr, ptr @Falign.tmpptr1, align 8, !tbaa !19
  %389 = load ptr, ptr @Falign.tmpptr2, align 8, !tbaa !19
  tail call void @zurasu2(i32 noundef %383, i32 noundef %4, i32 noundef %5, ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef %388, ptr noundef %389) #35
  %390 = load ptr, ptr @Falign.tmpptr1, align 8, !tbaa !19
  %391 = load ptr, ptr @Falign.tmpptr2, align 8, !tbaa !19
  %392 = load ptr, ptr @Falign.segment, align 8, !tbaa !19
  %393 = load i32, ptr %9, align 4, !tbaa !31
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds %struct._Segment, ptr %392, i64 %394
  %396 = tail call i32 @alignableReagion(i32 noundef %4, i32 noundef %5, ptr noundef %390, ptr noundef %391, ptr noundef %2, ptr noundef %3, ptr noundef %395) #35
  %397 = add nsw i32 %393, %396
  %398 = icmp sgt i32 %397, 99997
  br i1 %398, label %399, label %400

399:                                              ; preds = %387
  tail call void @ErrorExit(ptr noundef nonnull @.str.2.97) #35
  br label %400

400:                                              ; preds = %399, %387
  %401 = icmp eq i32 %396, 0
  br i1 %401, label %500, label %402

402:                                              ; preds = %400
  %403 = icmp sgt i32 %396, 0
  br i1 %403, label %404, label %495

404:                                              ; preds = %402
  %405 = icmp sgt i32 %383, 0
  %406 = load ptr, ptr @Falign.segment, align 8
  %407 = load ptr, ptr @Falign.segment1, align 8
  %408 = load ptr, ptr @Falign.segment2, align 8
  br label %409

409:                                              ; preds = %480, %404
  %410 = phi i32 [ %393, %404 ], [ %493, %480 ]
  %411 = phi i32 [ %396, %404 ], [ %412, %480 ]
  %412 = add nsw i32 %411, -1
  %413 = sext i32 %410 to i64
  %414 = getelementptr inbounds %struct._Segment, ptr %406, i64 %413
  %415 = load i32, ptr %414, align 8, !tbaa !220
  br i1 %405, label %416, label %448

416:                                              ; preds = %409
  %417 = getelementptr inbounds %struct._Segment, ptr %407, i64 %413
  store i32 %415, ptr %417, align 8, !tbaa !220
  %418 = load i32, ptr %9, align 4, !tbaa !31
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds %struct._Segment, ptr %406, i64 %419, i32 1
  %421 = load i32, ptr %420, align 4, !tbaa !222
  %422 = getelementptr inbounds %struct._Segment, ptr %407, i64 %419, i32 1
  store i32 %421, ptr %422, align 4, !tbaa !222
  %423 = load i32, ptr %9, align 4, !tbaa !31
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds %struct._Segment, ptr %406, i64 %424, i32 2
  %426 = load i32, ptr %425, align 8, !tbaa !223
  %427 = getelementptr inbounds %struct._Segment, ptr %407, i64 %424, i32 2
  store i32 %426, ptr %427, align 8, !tbaa !223
  %428 = load i32, ptr %9, align 4, !tbaa !31
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds %struct._Segment, ptr %406, i64 %429, i32 3
  %431 = load double, ptr %430, align 8, !tbaa !224
  %432 = getelementptr inbounds %struct._Segment, ptr %407, i64 %429, i32 3
  store double %431, ptr %432, align 8, !tbaa !224
  %433 = getelementptr inbounds %struct._Segment, ptr %406, i64 %429
  %434 = load i32, ptr %433, align 8, !tbaa !220
  %435 = add nsw i32 %434, %383
  %436 = getelementptr inbounds %struct._Segment, ptr %408, i64 %429
  store i32 %435, ptr %436, align 8, !tbaa !220
  %437 = load i32, ptr %9, align 4, !tbaa !31
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds %struct._Segment, ptr %406, i64 %438, i32 1
  %440 = load i32, ptr %439, align 4, !tbaa !222
  %441 = add nsw i32 %440, %383
  %442 = getelementptr inbounds %struct._Segment, ptr %408, i64 %438, i32 1
  store i32 %441, ptr %442, align 4, !tbaa !222
  %443 = load i32, ptr %9, align 4, !tbaa !31
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds %struct._Segment, ptr %406, i64 %444, i32 2
  %446 = load i32, ptr %445, align 8, !tbaa !223
  %447 = add nsw i32 %446, %383
  br label %480

448:                                              ; preds = %409
  %449 = sub nsw i32 %415, %383
  %450 = getelementptr inbounds %struct._Segment, ptr %407, i64 %413
  store i32 %449, ptr %450, align 8, !tbaa !220
  %451 = load i32, ptr %9, align 4, !tbaa !31
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds %struct._Segment, ptr %406, i64 %452, i32 1
  %454 = load i32, ptr %453, align 4, !tbaa !222
  %455 = sub nsw i32 %454, %383
  %456 = getelementptr inbounds %struct._Segment, ptr %407, i64 %452, i32 1
  store i32 %455, ptr %456, align 4, !tbaa !222
  %457 = load i32, ptr %9, align 4, !tbaa !31
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds %struct._Segment, ptr %406, i64 %458, i32 2
  %460 = load i32, ptr %459, align 8, !tbaa !223
  %461 = sub nsw i32 %460, %383
  %462 = getelementptr inbounds %struct._Segment, ptr %407, i64 %458, i32 2
  store i32 %461, ptr %462, align 8, !tbaa !223
  %463 = load i32, ptr %9, align 4, !tbaa !31
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds %struct._Segment, ptr %406, i64 %464, i32 3
  %466 = load double, ptr %465, align 8, !tbaa !224
  %467 = getelementptr inbounds %struct._Segment, ptr %407, i64 %464, i32 3
  store double %466, ptr %467, align 8, !tbaa !224
  %468 = getelementptr inbounds %struct._Segment, ptr %406, i64 %464
  %469 = load i32, ptr %468, align 8, !tbaa !220
  %470 = getelementptr inbounds %struct._Segment, ptr %408, i64 %464
  store i32 %469, ptr %470, align 8, !tbaa !220
  %471 = load i32, ptr %9, align 4, !tbaa !31
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds %struct._Segment, ptr %406, i64 %472, i32 1
  %474 = load i32, ptr %473, align 4, !tbaa !222
  %475 = getelementptr inbounds %struct._Segment, ptr %408, i64 %472, i32 1
  store i32 %474, ptr %475, align 4, !tbaa !222
  %476 = load i32, ptr %9, align 4, !tbaa !31
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds %struct._Segment, ptr %406, i64 %477, i32 2
  %479 = load i32, ptr %478, align 8, !tbaa !223
  br label %480

480:                                              ; preds = %448, %416
  %481 = phi i64 [ %477, %448 ], [ %444, %416 ]
  %482 = phi i32 [ %479, %448 ], [ %447, %416 ]
  %483 = getelementptr inbounds %struct._Segment, ptr %408, i64 %481, i32 2
  store i32 %482, ptr %483, align 8, !tbaa !223
  %484 = load i32, ptr %9, align 4, !tbaa !31
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds %struct._Segment, ptr %406, i64 %485, i32 3
  %487 = load double, ptr %486, align 8, !tbaa !224
  %488 = getelementptr inbounds %struct._Segment, ptr %408, i64 %485, i32 3
  store double %487, ptr %488, align 8, !tbaa !224
  %489 = getelementptr inbounds %struct._Segment, ptr %408, i64 %485
  %490 = getelementptr inbounds %struct._Segment, ptr %407, i64 %485, i32 6
  store ptr %489, ptr %490, align 8, !tbaa !225
  %491 = getelementptr inbounds %struct._Segment, ptr %407, i64 %485
  %492 = getelementptr inbounds %struct._Segment, ptr %408, i64 %485, i32 6
  store ptr %491, ptr %492, align 8, !tbaa !225
  %493 = add nsw i32 %484, 1
  store i32 %493, ptr %9, align 4, !tbaa !31
  %494 = icmp ugt i32 %411, 1
  br i1 %494, label %409, label %495, !llvm.loop !226

495:                                              ; preds = %480, %402, %379
  %496 = add nuw nsw i64 %380, 1
  %497 = icmp eq i64 %496, %377
  br i1 %497, label %498, label %379, !llvm.loop !227

498:                                              ; preds = %495
  %499 = load i32, ptr %9, align 4, !tbaa !31
  br label %500

500:                                              ; preds = %498, %400
  %501 = phi i32 [ %499, %498 ], [ %393, %400 ]
  %502 = icmp eq i32 %501, 0
  %503 = load i32, ptr @fftNoAnchStop, align 4
  %504 = icmp ne i32 %503, 0
  %505 = select i1 %502, i1 %504, i1 false
  br i1 %505, label %506, label %508

506:                                              ; preds = %500
  tail call void @ErrorExit(ptr noundef nonnull @.str.4.98) #35
  %507 = load ptr, ptr @Falign.sortedseg1, align 8, !tbaa !19
  br label %524

508:                                              ; preds = %500
  %509 = icmp sgt i32 %501, 0
  %510 = load ptr, ptr @Falign.sortedseg1, align 8, !tbaa !19
  br i1 %509, label %511, label %524

511:                                              ; preds = %508
  %512 = load ptr, ptr @Falign.segment1, align 8, !tbaa !19
  %513 = load ptr, ptr @Falign.segment2, align 8, !tbaa !19
  %514 = load ptr, ptr @Falign.sortedseg2, align 8, !tbaa !19
  %515 = zext i32 %501 to i64
  br label %516

516:                                              ; preds = %516, %511
  %517 = phi i64 [ 0, %511 ], [ %522, %516 ]
  %518 = getelementptr inbounds %struct._Segment, ptr %512, i64 %517
  %519 = getelementptr inbounds ptr, ptr %510, i64 %517
  store ptr %518, ptr %519, align 8, !tbaa !19
  %520 = getelementptr inbounds %struct._Segment, ptr %513, i64 %517
  %521 = getelementptr inbounds ptr, ptr %514, i64 %517
  store ptr %520, ptr %521, align 8, !tbaa !19
  %522 = add nuw nsw i64 %517, 1
  %523 = icmp eq i64 %522, %515
  br i1 %523, label %524, label %516, !llvm.loop !228

524:                                              ; preds = %516, %508, %506
  %525 = phi ptr [ %507, %506 ], [ %510, %508 ], [ %510, %516 ]
  %526 = phi i1 [ false, %506 ], [ false, %508 ], [ %509, %516 ]
  %527 = add nsw i32 %501, -1
  tail call fastcc void @mymergesort(i32 noundef 0, i32 noundef %527, ptr noundef %525) #39
  %528 = load ptr, ptr @Falign.sortedseg2, align 8, !tbaa !19
  tail call fastcc void @mymergesort(i32 noundef 0, i32 noundef %527, ptr noundef %528) #39
  br i1 %526, label %529, label %552

529:                                              ; preds = %524
  %530 = load ptr, ptr @Falign.sortedseg1, align 8, !tbaa !19
  %531 = zext i32 %501 to i64
  br label %536

532:                                              ; preds = %536
  br i1 %526, label %533, label %552

533:                                              ; preds = %532
  %534 = load ptr, ptr @Falign.sortedseg2, align 8, !tbaa !19
  %535 = zext i32 %501 to i64
  br label %544

536:                                              ; preds = %536, %529
  %537 = phi i64 [ 0, %529 ], [ %542, %536 ]
  %538 = getelementptr inbounds ptr, ptr %530, i64 %537
  %539 = load ptr, ptr %538, align 8, !tbaa !19
  %540 = getelementptr inbounds %struct._Segment, ptr %539, i64 0, i32 7
  %541 = trunc i64 %537 to i32
  store i32 %541, ptr %540, align 8, !tbaa !229
  %542 = add nuw nsw i64 %537, 1
  %543 = icmp eq i64 %542, %531
  br i1 %543, label %532, label %536, !llvm.loop !230

544:                                              ; preds = %544, %533
  %545 = phi i64 [ 0, %533 ], [ %550, %544 ]
  %546 = getelementptr inbounds ptr, ptr %534, i64 %545
  %547 = load ptr, ptr %546, align 8, !tbaa !19
  %548 = getelementptr inbounds %struct._Segment, ptr %547, i64 0, i32 7
  %549 = trunc i64 %545 to i32
  store i32 %549, ptr %548, align 8, !tbaa !229
  %550 = add nuw nsw i64 %545, 1
  %551 = icmp eq i64 %550, %535
  br i1 %551, label %552, label %544, !llvm.loop !231

552:                                              ; preds = %544, %532, %524
  %553 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %588, label %555

555:                                              ; preds = %552
  %556 = load ptr, ptr @Falign.cut1, align 8, !tbaa !19
  %557 = load ptr, ptr @Falign.cut2, align 8, !tbaa !19
  br i1 %526, label %558, label %577

558:                                              ; preds = %555
  %559 = load ptr, ptr @Falign.sortedseg1, align 8, !tbaa !19
  %560 = load ptr, ptr @Falign.sortedseg2, align 8, !tbaa !19
  br label %561

561:                                              ; preds = %561, %558
  %562 = phi i64 [ 0, %558 ], [ %567, %561 ]
  %563 = getelementptr inbounds ptr, ptr %559, i64 %562
  %564 = load ptr, ptr %563, align 8, !tbaa !19
  %565 = getelementptr inbounds %struct._Segment, ptr %564, i64 0, i32 2
  %566 = load i32, ptr %565, align 8, !tbaa !223
  %567 = add nuw nsw i64 %562, 1
  %568 = getelementptr inbounds i32, ptr %556, i64 %567
  store i32 %566, ptr %568, align 4, !tbaa !31
  %569 = getelementptr inbounds ptr, ptr %560, i64 %562
  %570 = load ptr, ptr %569, align 8, !tbaa !19
  %571 = getelementptr inbounds %struct._Segment, ptr %570, i64 0, i32 2
  %572 = load i32, ptr %571, align 8, !tbaa !223
  %573 = getelementptr inbounds i32, ptr %557, i64 %567
  store i32 %572, ptr %573, align 4, !tbaa !31
  %574 = load i32, ptr %9, align 4, !tbaa !31
  %575 = sext i32 %574 to i64
  %576 = icmp slt i64 %567, %575
  br i1 %576, label %561, label %577, !llvm.loop !232

577:                                              ; preds = %561, %555
  store i32 0, ptr %556, align 4, !tbaa !31
  store i32 0, ptr %557, align 4, !tbaa !31
  %578 = load i32, ptr %9, align 4, !tbaa !31
  %579 = add nsw i32 %578, 1
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds i32, ptr %556, i64 %580
  store i32 %13, ptr %581, align 4, !tbaa !31
  %582 = load i32, ptr %9, align 4, !tbaa !31
  %583 = add nsw i32 %582, 1
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds i32, ptr %557, i64 %584
  store i32 %16, ptr %585, align 4, !tbaa !31
  %586 = load i32, ptr %9, align 4, !tbaa !31
  %587 = add nsw i32 %586, 2
  store i32 %587, ptr %9, align 4, !tbaa !31
  br label %695

588:                                              ; preds = %552
  %589 = load i32, ptr @Falign.crossscoresize, align 4, !tbaa !31
  %590 = add i32 %501, 2
  %591 = icmp slt i32 %589, %590
  br i1 %591, label %594, label %592

592:                                              ; preds = %588
  %593 = load ptr, ptr @Falign.crossscore, align 8
  br label %607

594:                                              ; preds = %588
  store i32 %590, ptr @Falign.crossscoresize, align 4, !tbaa !31
  %595 = load i32, ptr @fftkeika, align 4, !tbaa !31
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %600, label %597

597:                                              ; preds = %594
  %598 = load ptr, ptr @stderr, align 8, !tbaa !19
  %599 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %598, ptr noundef nonnull @.str.10.99, i32 noundef %590) #36
  br label %600

600:                                              ; preds = %597, %594
  %601 = load ptr, ptr @Falign.crossscore, align 8, !tbaa !19
  %602 = icmp eq ptr %601, null
  br i1 %602, label %604, label %603

603:                                              ; preds = %600
  tail call void @FreeDoubleMtx(ptr noundef nonnull %601) #35
  br label %604

604:                                              ; preds = %603, %600
  %605 = load i32, ptr @Falign.crossscoresize, align 4, !tbaa !31
  %606 = tail call ptr @AllocateDoubleMtx(i32 noundef %605, i32 noundef %605) #35
  store ptr %606, ptr @Falign.crossscore, align 8, !tbaa !19
  br label %607

607:                                              ; preds = %604, %592
  %608 = phi ptr [ %593, %592 ], [ %606, %604 ]
  %609 = icmp sgt i32 %501, -2
  br i1 %609, label %610, label %614

610:                                              ; preds = %607
  %611 = tail call i32 @llvm.smax.i32(i32 %590, i32 1)
  %612 = zext i32 %611 to i64
  %613 = shl nuw nsw i64 %612, 3
  br label %621

614:                                              ; preds = %621, %607
  %615 = load ptr, ptr @Falign.cut1, align 8, !tbaa !19
  %616 = load ptr, ptr @Falign.cut2, align 8, !tbaa !19
  %617 = load ptr, ptr @Falign.sortedseg1, align 8, !tbaa !19
  %618 = load ptr, ptr @Falign.sortedseg2, align 8, !tbaa !19
  br i1 %526, label %619, label %658

619:                                              ; preds = %614
  %620 = load ptr, ptr @Falign.segment1, align 8, !tbaa !19
  br label %627

621:                                              ; preds = %621, %610
  %622 = phi i64 [ 0, %610 ], [ %625, %621 ]
  %623 = getelementptr inbounds ptr, ptr %608, i64 %622
  %624 = load ptr, ptr %623, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1) %624, i8 0, i64 %613, i1 false), !tbaa !7
  %625 = add nuw nsw i64 %622, 1
  %626 = icmp eq i64 %625, %612
  br i1 %626, label %614, label %621, !llvm.loop !233

627:                                              ; preds = %627, %619
  %628 = phi i64 [ 0, %619 ], [ %648, %627 ]
  %629 = getelementptr inbounds %struct._Segment, ptr %620, i64 %628, i32 3
  %630 = load double, ptr %629, align 8, !tbaa !224
  %631 = getelementptr inbounds %struct._Segment, ptr %620, i64 %628, i32 7
  %632 = load i32, ptr %631, align 8, !tbaa !229
  %633 = add nsw i32 %632, 1
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds ptr, ptr %608, i64 %634
  %636 = load ptr, ptr %635, align 8, !tbaa !19
  %637 = getelementptr inbounds %struct._Segment, ptr %620, i64 %628, i32 6
  %638 = load ptr, ptr %637, align 8, !tbaa !225
  %639 = getelementptr inbounds %struct._Segment, ptr %638, i64 0, i32 7
  %640 = load i32, ptr %639, align 8, !tbaa !229
  %641 = add nsw i32 %640, 1
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds double, ptr %636, i64 %642
  store double %630, ptr %643, align 8, !tbaa !7
  %644 = getelementptr inbounds ptr, ptr %617, i64 %628
  %645 = load ptr, ptr %644, align 8, !tbaa !19
  %646 = getelementptr inbounds %struct._Segment, ptr %645, i64 0, i32 2
  %647 = load i32, ptr %646, align 8, !tbaa !223
  %648 = add nuw nsw i64 %628, 1
  %649 = getelementptr inbounds i32, ptr %615, i64 %648
  store i32 %647, ptr %649, align 4, !tbaa !31
  %650 = getelementptr inbounds ptr, ptr %618, i64 %628
  %651 = load ptr, ptr %650, align 8, !tbaa !19
  %652 = getelementptr inbounds %struct._Segment, ptr %651, i64 0, i32 2
  %653 = load i32, ptr %652, align 8, !tbaa !223
  %654 = getelementptr inbounds i32, ptr %616, i64 %648
  store i32 %653, ptr %654, align 4, !tbaa !31
  %655 = load i32, ptr %9, align 4, !tbaa !31
  %656 = sext i32 %655 to i64
  %657 = icmp slt i64 %648, %656
  br i1 %657, label %627, label %658, !llvm.loop !234

658:                                              ; preds = %627, %614
  %659 = load ptr, ptr %608, align 8, !tbaa !19
  store double 1.000000e+07, ptr %659, align 8, !tbaa !7
  store i32 0, ptr %615, align 4, !tbaa !31
  store i32 0, ptr %616, align 4, !tbaa !31
  %660 = load i32, ptr %9, align 4, !tbaa !31
  %661 = add nsw i32 %660, 1
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds ptr, ptr %608, i64 %662
  %664 = load ptr, ptr %663, align 8, !tbaa !19
  %665 = getelementptr inbounds double, ptr %664, i64 %662
  store double 1.000000e+07, ptr %665, align 8, !tbaa !7
  %666 = getelementptr inbounds i32, ptr %615, i64 %662
  store i32 %13, ptr %666, align 4, !tbaa !31
  %667 = load i32, ptr %9, align 4, !tbaa !31
  %668 = add nsw i32 %667, 1
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds i32, ptr %616, i64 %669
  store i32 %16, ptr %670, align 4, !tbaa !31
  %671 = load i32, ptr %9, align 4, !tbaa !31
  %672 = add nsw i32 %671, 2
  store i32 %672, ptr %9, align 4, !tbaa !31
  call void @blockAlign2(ptr noundef nonnull %615, ptr noundef nonnull %616, ptr noundef %617, ptr noundef %618, ptr noundef nonnull %608, ptr noundef nonnull %9) #35
  %673 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %674 = icmp eq i32 %673, 0
  %675 = load i32, ptr @fftkeika, align 4
  %676 = icmp ne i32 %675, 0
  %677 = select i1 %674, i1 %676, i1 false
  br i1 %677, label %678, label %683

678:                                              ; preds = %658
  %679 = load ptr, ptr @stderr, align 8, !tbaa !19
  %680 = load i32, ptr %9, align 4, !tbaa !31
  %681 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %679, ptr noundef nonnull @.str.11.100, i32 noundef %680) #36
  %682 = load i32, ptr @fftkeika, align 4, !tbaa !31
  br label %683

683:                                              ; preds = %678, %658
  %684 = phi i32 [ %682, %678 ], [ %675, %658 ]
  %685 = icmp ne i32 %684, 0
  %686 = load i32, ptr %9, align 4
  %687 = icmp sgt i32 %672, %686
  %688 = select i1 %685, i1 %687, i1 false
  br i1 %688, label %689, label %695

689:                                              ; preds = %683
  %690 = load ptr, ptr @stderr, align 8, !tbaa !19
  %691 = call i64 @fwrite(ptr nonnull @.str.6.101, i64 10, i64 1, ptr %690) #38
  %692 = load i32, ptr @fftRepeatStop, align 4, !tbaa !31
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %695, label %694

694:                                              ; preds = %689
  call void @exit(i32 noundef 1) #37
  unreachable

695:                                              ; preds = %689, %683, %577
  br i1 %122, label %696, label %699

696:                                              ; preds = %695
  %697 = load ptr, ptr @Falign.result1, align 8, !tbaa !19
  %698 = zext i32 %4 to i64
  br label %703

699:                                              ; preds = %703, %695
  br i1 %127, label %700, label %715

700:                                              ; preds = %699
  %701 = load ptr, ptr @Falign.result2, align 8, !tbaa !19
  %702 = zext i32 %5 to i64
  br label %709

703:                                              ; preds = %703, %696
  %704 = phi i64 [ 0, %696 ], [ %707, %703 ]
  %705 = getelementptr inbounds ptr, ptr %697, i64 %704
  %706 = load ptr, ptr %705, align 8, !tbaa !19
  store i8 0, ptr %706, align 1, !tbaa !17
  %707 = add nuw nsw i64 %704, 1
  %708 = icmp eq i64 %707, %698
  br i1 %708, label %699, label %703, !llvm.loop !235

709:                                              ; preds = %709, %700
  %710 = phi i64 [ 0, %700 ], [ %713, %709 ]
  %711 = getelementptr inbounds ptr, ptr %701, i64 %710
  %712 = load ptr, ptr %711, align 8, !tbaa !19
  store i8 0, ptr %712, align 1, !tbaa !17
  %713 = add nuw nsw i64 %710, 1
  %714 = icmp eq i64 %713, %702
  br i1 %714, label %715, label %709, !llvm.loop !236

715:                                              ; preds = %709, %699
  store i32 -1, ptr %7, align 4, !tbaa !31
  %716 = load i32, ptr %9, align 4, !tbaa !31
  %717 = icmp sgt i32 %716, 1
  br i1 %717, label %718, label %729

718:                                              ; preds = %715
  %719 = icmp eq i32 %4, 1
  %720 = icmp eq i32 %5, 1
  %721 = and i1 %719, %720
  %722 = zext i32 %4 to i64
  %723 = zext i32 %5 to i64
  br label %734

724:                                              ; preds = %939, %926
  %725 = load i32, ptr %9, align 4, !tbaa !31
  %726 = add nsw i32 %725, -1
  %727 = sext i32 %726 to i64
  %728 = icmp slt i64 %760, %727
  br i1 %728, label %734, label %729, !llvm.loop !237

729:                                              ; preds = %724, %715
  %730 = phi float [ 0.000000e+00, %715 ], [ %912, %724 ]
  br i1 %122, label %731, label %948

731:                                              ; preds = %729
  %732 = load ptr, ptr @Falign.result1, align 8, !tbaa !19
  %733 = zext i32 %4 to i64
  br label %952

734:                                              ; preds = %724, %718
  %735 = phi i64 [ 0, %718 ], [ %760, %724 ]
  %736 = phi float [ 0.000000e+00, %718 ], [ %912, %724 ]
  %737 = phi i32 [ 0, %718 ], [ %917, %724 ]
  %738 = phi i32 [ %.lcssa1, %718 ], [ %916, %724 ]
  %739 = load i32, ptr %7, align 4, !tbaa !31
  %740 = add nsw i32 %739, 1
  store i32 %740, ptr %7, align 4, !tbaa !31
  %741 = load ptr, ptr @Falign.cut1, align 8, !tbaa !19
  %742 = getelementptr inbounds i32, ptr %741, i64 %735
  %743 = load i32, ptr %742, align 4, !tbaa !31
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %745, label %748

745:                                              ; preds = %734
  br i1 %122, label %746, label %755

746:                                              ; preds = %745
  %747 = load ptr, ptr @Falign.sgap1, align 8, !tbaa !19
  call void @llvm.memset.p0.i64(ptr align 1 %747, i8 111, i64 %722, i1 false), !tbaa !17
  br label %755

748:                                              ; preds = %734
  %749 = load ptr, ptr @Falign.sgap1, align 8, !tbaa !19
  %750 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %751 = add nsw i32 %738, -1
  call void @getkyokaigap(ptr noundef %749, ptr noundef %750, i32 noundef %751, i32 noundef %4) #35
  %752 = load ptr, ptr @Falign.sgap2, align 8, !tbaa !19
  %753 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  call void @getkyokaigap(ptr noundef %752, ptr noundef %753, i32 noundef %751, i32 noundef %5) #35
  %754 = load ptr, ptr @Falign.cut1, align 8, !tbaa !19
  br label %758

755:                                              ; preds = %746, %745
  br i1 %127, label %756, label %758

756:                                              ; preds = %755
  %757 = load ptr, ptr @Falign.sgap2, align 8, !tbaa !19
  call void @llvm.memset.p0.i64(ptr align 1 %757, i8 111, i64 %723, i1 false), !tbaa !17
  br label %758

758:                                              ; preds = %756, %755, %748
  %759 = phi ptr [ %741, %756 ], [ %741, %755 ], [ %754, %748 ]
  %760 = add nuw nsw i64 %735, 1
  %761 = getelementptr inbounds i32, ptr %759, i64 %760
  %762 = load i32, ptr %761, align 4, !tbaa !31
  %763 = icmp eq i32 %762, %13
  br i1 %763, label %764, label %767

764:                                              ; preds = %758
  br i1 %122, label %765, label %773

765:                                              ; preds = %764
  %766 = load ptr, ptr @Falign.egap1, align 8, !tbaa !19
  call void @llvm.memset.p0.i64(ptr align 1 %766, i8 111, i64 %722, i1 false), !tbaa !17
  br label %773

767:                                              ; preds = %758
  %768 = load ptr, ptr @Falign.egap1, align 8, !tbaa !19
  call void @getkyokaigap(ptr noundef %768, ptr noundef nonnull %0, i32 noundef %762, i32 noundef %4) #35
  %769 = load ptr, ptr @Falign.egap2, align 8, !tbaa !19
  %770 = load ptr, ptr @Falign.cut2, align 8, !tbaa !19
  %771 = getelementptr inbounds i32, ptr %770, i64 %760
  %772 = load i32, ptr %771, align 4, !tbaa !31
  call void @getkyokaigap(ptr noundef %769, ptr noundef nonnull %1, i32 noundef %772, i32 noundef %5) #35
  br label %776

773:                                              ; preds = %765, %764
  br i1 %127, label %774, label %776

774:                                              ; preds = %773
  %775 = load ptr, ptr @Falign.egap2, align 8, !tbaa !19
  call void @llvm.memset.p0.i64(ptr align 1 %775, i8 111, i64 %723, i1 false), !tbaa !17
  br label %776

776:                                              ; preds = %774, %773, %767
  br i1 %122, label %777, label %803

777:                                              ; preds = %776
  %778 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %779 = load ptr, ptr @Falign.cut1, align 8, !tbaa !19
  %780 = getelementptr inbounds i32, ptr %779, i64 %735
  %781 = getelementptr inbounds i32, ptr %779, i64 %760
  br label %782

782:                                              ; preds = %782, %777
  %783 = phi i64 [ 0, %777 ], [ %801, %782 ]
  %784 = getelementptr inbounds ptr, ptr %778, i64 %783
  %785 = load ptr, ptr %784, align 8, !tbaa !19
  %786 = getelementptr inbounds ptr, ptr %0, i64 %783
  %787 = load ptr, ptr %786, align 8, !tbaa !19
  %788 = load i32, ptr %780, align 4, !tbaa !31
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i8, ptr %787, i64 %789
  %791 = load i32, ptr %781, align 4, !tbaa !31
  %792 = sub nsw i32 %791, %788
  %793 = sext i32 %792 to i64
  %794 = call ptr @strncpy(ptr noundef %785, ptr noundef %790, i64 noundef %793) #35
  %795 = load ptr, ptr %784, align 8, !tbaa !19
  %796 = load i32, ptr %781, align 4, !tbaa !31
  %797 = load i32, ptr %780, align 4, !tbaa !31
  %798 = sub nsw i32 %796, %797
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i8, ptr %795, i64 %799
  store i8 0, ptr %800, align 1, !tbaa !17
  %801 = add nuw nsw i64 %783, 1
  %802 = icmp eq i64 %801, %722
  br i1 %802, label %803, label %782, !llvm.loop !238

803:                                              ; preds = %782, %776
  %804 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %805 = icmp ne i32 %804, 0
  %806 = load i32, ptr @fftkeika, align 4
  %807 = icmp ne i32 %806, 0
  %808 = select i1 %805, i1 %807, i1 false
  br i1 %808, label %809, label %811

809:                                              ; preds = %803
  %810 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  call void @commongappick(i32 noundef %4, ptr noundef %810) #35
  br label %811

811:                                              ; preds = %809, %803
  br i1 %127, label %812, label %838

812:                                              ; preds = %811
  %813 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  %814 = load ptr, ptr @Falign.cut2, align 8, !tbaa !19
  %815 = getelementptr inbounds i32, ptr %814, i64 %735
  %816 = getelementptr inbounds i32, ptr %814, i64 %760
  br label %817

817:                                              ; preds = %817, %812
  %818 = phi i64 [ 0, %812 ], [ %836, %817 ]
  %819 = getelementptr inbounds ptr, ptr %813, i64 %818
  %820 = load ptr, ptr %819, align 8, !tbaa !19
  %821 = getelementptr inbounds ptr, ptr %1, i64 %818
  %822 = load ptr, ptr %821, align 8, !tbaa !19
  %823 = load i32, ptr %815, align 4, !tbaa !31
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds i8, ptr %822, i64 %824
  %826 = load i32, ptr %816, align 4, !tbaa !31
  %827 = sub nsw i32 %826, %823
  %828 = sext i32 %827 to i64
  %829 = call ptr @strncpy(ptr noundef %820, ptr noundef %825, i64 noundef %828) #35
  %830 = load ptr, ptr %819, align 8, !tbaa !19
  %831 = load i32, ptr %816, align 4, !tbaa !31
  %832 = load i32, ptr %815, align 4, !tbaa !31
  %833 = sub nsw i32 %831, %832
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i8, ptr %830, i64 %834
  store i8 0, ptr %835, align 1, !tbaa !17
  %836 = add nuw nsw i64 %818, 1
  %837 = icmp eq i64 %836, %723
  br i1 %837, label %838, label %817, !llvm.loop !239

838:                                              ; preds = %817, %811
  %839 = load i32, ptr @kobetsubunkatsu, align 4, !tbaa !31
  %840 = icmp ne i32 %839, 0
  %841 = load i32, ptr @fftkeika, align 4
  %842 = icmp ne i32 %841, 0
  %843 = select i1 %840, i1 %842, i1 false
  br i1 %843, label %844, label %846

844:                                              ; preds = %838
  %845 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  call void @commongappick(i32 noundef %5, ptr noundef %845) #35
  br label %846

846:                                              ; preds = %844, %838
  %847 = load i32, ptr @constraint, align 4, !tbaa !31
  %848 = icmp eq i32 %847, 0
  br i1 %848, label %852, label %849

849:                                              ; preds = %846
  %850 = load ptr, ptr @stderr, align 8, !tbaa !19
  %851 = call i64 @fwrite(ptr nonnull @.str.12.102, i64 14, i64 1, ptr %850) #38
  call void @exit(i32 noundef 1) #37
  unreachable

852:                                              ; preds = %846
  %853 = load i8, ptr @alg, align 1, !tbaa !17
  %854 = sext i8 %853 to i32
  switch i32 %854, label %908 [
    i32 97, label %855
    i32 77, label %860
    i32 65, label %869
    i32 72, label %882
    i32 81, label %895
  ]

855:                                              ; preds = %852
  %856 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %857 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  %858 = call float (ptr, ptr, ptr, ptr, i32, i32, i32, ...) @Aalign(ptr noundef %856, ptr noundef %857, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #35
  %859 = fadd float %736, %858
  br label %911

860:                                              ; preds = %852
  %861 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %862 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  %863 = load ptr, ptr @Falign.sgap1, align 8, !tbaa !19
  %864 = load ptr, ptr @Falign.sgap2, align 8, !tbaa !19
  %865 = load ptr, ptr @Falign.egap1, align 8, !tbaa !19
  %866 = load ptr, ptr @Falign.egap2, align 8, !tbaa !19
  %867 = call float @MSalignmm(ptr noundef %861, ptr noundef %862, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef %863, ptr noundef %864, ptr noundef %865, ptr noundef %866) #35
  %868 = fadd float %736, %867
  br label %911

869:                                              ; preds = %852
  %870 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %871 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  br i1 %721, label %872, label %875

872:                                              ; preds = %869
  %873 = call float @G__align11(ptr noundef %870, ptr noundef %871, i32 noundef %6) #35
  %874 = fadd float %736, %873
  br label %911

875:                                              ; preds = %869
  %876 = load ptr, ptr @Falign.sgap1, align 8, !tbaa !19
  %877 = load ptr, ptr @Falign.sgap2, align 8, !tbaa !19
  %878 = load ptr, ptr @Falign.egap1, align 8, !tbaa !19
  %879 = load ptr, ptr @Falign.egap2, align 8, !tbaa !19
  %880 = call float @A__align(ptr noundef %870, ptr noundef %871, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef null, ptr noundef nonnull %10, ptr noundef %876, ptr noundef %877, ptr noundef %878, ptr noundef %879) #35
  %881 = fadd float %736, %880
  br label %911

882:                                              ; preds = %852
  %883 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %884 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  br i1 %721, label %885, label %888

885:                                              ; preds = %882
  %886 = call float @G__align11(ptr noundef %883, ptr noundef %884, i32 noundef %6) #35
  %887 = fadd float %736, %886
  br label %911

888:                                              ; preds = %882
  %889 = load ptr, ptr @Falign.sgap1, align 8, !tbaa !19
  %890 = load ptr, ptr @Falign.sgap2, align 8, !tbaa !19
  %891 = load ptr, ptr @Falign.egap1, align 8, !tbaa !19
  %892 = load ptr, ptr @Falign.egap2, align 8, !tbaa !19
  %893 = call float @H__align(ptr noundef %883, ptr noundef %884, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef null, ptr noundef nonnull %10, ptr noundef %889, ptr noundef %890, ptr noundef %891, ptr noundef %892) #35
  %894 = fadd float %736, %893
  br label %911

895:                                              ; preds = %852
  %896 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %897 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  br i1 %721, label %898, label %901

898:                                              ; preds = %895
  %899 = call float @G__align11(ptr noundef %896, ptr noundef %897, i32 noundef %6) #35
  %900 = fadd float %736, %899
  br label %911

901:                                              ; preds = %895
  %902 = load ptr, ptr @Falign.sgap1, align 8, !tbaa !19
  %903 = load ptr, ptr @Falign.sgap2, align 8, !tbaa !19
  %904 = load ptr, ptr @Falign.egap1, align 8, !tbaa !19
  %905 = load ptr, ptr @Falign.egap2, align 8, !tbaa !19
  %906 = call float @Q__align(ptr noundef %896, ptr noundef %897, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef null, ptr noundef nonnull %10, ptr noundef %902, ptr noundef %903, ptr noundef %904, ptr noundef %905) #35
  %907 = fadd float %736, %906
  br label %911

908:                                              ; preds = %852
  %909 = load ptr, ptr @stderr, align 8, !tbaa !19
  %910 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %909, ptr noundef nonnull @.str.7.103, i32 noundef %854) #36
  call void @ErrorExit(ptr noundef nonnull @.str.8) #35
  br label %911

911:                                              ; preds = %908, %901, %898, %888, %885, %875, %872, %860, %855
  %912 = phi float [ %736, %908 ], [ %900, %898 ], [ %907, %901 ], [ %887, %885 ], [ %894, %888 ], [ %874, %872 ], [ %881, %875 ], [ %868, %860 ], [ %859, %855 ]
  %913 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  %914 = load ptr, ptr %913, align 8, !tbaa !19
  %915 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %914) #40
  %916 = trunc i64 %915 to i32
  %917 = add nsw i32 %737, %916
  %918 = icmp sgt i32 %917, %6
  br i1 %918, label %919, label %922

919:                                              ; preds = %911
  %920 = load ptr, ptr @stderr, align 8, !tbaa !19
  %921 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %920, ptr noundef nonnull @.str.13.104, i32 noundef %737, i32 noundef %916, i32 noundef %6) #36
  call void @ErrorExit(ptr noundef nonnull @.str.9.105) #35
  br label %922

922:                                              ; preds = %919, %911
  br i1 %122, label %923, label %926

923:                                              ; preds = %922
  %924 = load ptr, ptr @Falign.result1, align 8, !tbaa !19
  %925 = load ptr, ptr @Falign.tmpres1, align 8, !tbaa !19
  br label %930

926:                                              ; preds = %930, %922
  br i1 %127, label %927, label %724

927:                                              ; preds = %926
  %928 = load ptr, ptr @Falign.result2, align 8, !tbaa !19
  %929 = load ptr, ptr @Falign.tmpres2, align 8, !tbaa !19
  br label %939

930:                                              ; preds = %930, %923
  %931 = phi i64 [ 0, %923 ], [ %937, %930 ]
  %932 = getelementptr inbounds ptr, ptr %924, i64 %931
  %933 = load ptr, ptr %932, align 8, !tbaa !19
  %934 = getelementptr inbounds ptr, ptr %925, i64 %931
  %935 = load ptr, ptr %934, align 8, !tbaa !19
  %936 = call ptr @strcat(ptr noundef nonnull dereferenceable(1) %933, ptr noundef nonnull dereferenceable(1) %935) #35
  %937 = add nuw nsw i64 %931, 1
  %938 = icmp eq i64 %937, %722
  br i1 %938, label %926, label %930, !llvm.loop !240

939:                                              ; preds = %939, %927
  %940 = phi i64 [ 0, %927 ], [ %946, %939 ]
  %941 = getelementptr inbounds ptr, ptr %928, i64 %940
  %942 = load ptr, ptr %941, align 8, !tbaa !19
  %943 = getelementptr inbounds ptr, ptr %929, i64 %940
  %944 = load ptr, ptr %943, align 8, !tbaa !19
  %945 = call ptr @strcat(ptr noundef nonnull dereferenceable(1) %942, ptr noundef nonnull dereferenceable(1) %944) #35
  %946 = add nuw nsw i64 %940, 1
  %947 = icmp eq i64 %946, %723
  br i1 %947, label %724, label %939, !llvm.loop !241

948:                                              ; preds = %952, %729
  br i1 %127, label %949, label %970

949:                                              ; preds = %948
  %950 = load ptr, ptr @Falign.result2, align 8, !tbaa !19
  %951 = zext i32 %5 to i64
  br label %961

952:                                              ; preds = %952, %731
  %953 = phi i64 [ 0, %731 ], [ %959, %952 ]
  %954 = getelementptr inbounds ptr, ptr %0, i64 %953
  %955 = load ptr, ptr %954, align 8, !tbaa !19
  %956 = getelementptr inbounds ptr, ptr %732, i64 %953
  %957 = load ptr, ptr %956, align 8, !tbaa !19
  %958 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %955, ptr noundef nonnull dereferenceable(1) %957) #35
  %959 = add nuw nsw i64 %953, 1
  %960 = icmp eq i64 %959, %733
  br i1 %960, label %948, label %952, !llvm.loop !242

961:                                              ; preds = %961, %949
  %962 = phi i64 [ 0, %949 ], [ %968, %961 ]
  %963 = getelementptr inbounds ptr, ptr %1, i64 %962
  %964 = load ptr, ptr %963, align 8, !tbaa !19
  %965 = getelementptr inbounds ptr, ptr %950, i64 %962
  %966 = load ptr, ptr %965, align 8, !tbaa !19
  %967 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %964, ptr noundef nonnull dereferenceable(1) %966) #35
  %968 = add nuw nsw i64 %962, 1
  %969 = icmp eq i64 %968, %951
  br i1 %969, label %970, label %961, !llvm.loop !243

970:                                              ; preds = %961, %948
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #34
  ret float %730
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #7

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #14

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #15

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @seq_vec_5(ptr nocapture noundef %0, double noundef %1, ptr nocapture noundef readonly %2) unnamed_addr #16 {
  %4 = load i8, ptr %2, align 1, !tbaa !17
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %30, label %6

6:                                                ; preds = %26, %3
  %7 = phi i8 [ %28, %26 ], [ %4, %3 ]
  %8 = phi ptr [ %27, %26 ], [ %0, %3 ]
  %9 = phi ptr [ %10, %26 ], [ %2, %3 ]
  %10 = getelementptr inbounds i8, ptr %9, i64 1
  %11 = sext i8 %7 to i64
  %12 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !31
  %14 = icmp sgt i32 %13, 20
  br i1 %14, label %26, label %15

15:                                               ; preds = %6
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds double, ptr @polarity, i64 %16
  %18 = load double, ptr %17, align 8, !tbaa !7
  %19 = load double, ptr %8, align 8, !tbaa !216
  %20 = tail call double @llvm.fmuladd.f64(double %1, double %18, double %19)
  store double %20, ptr %8, align 8, !tbaa !216
  %21 = getelementptr inbounds double, ptr @volume, i64 %16
  %22 = load double, ptr %21, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct._Fukusosuu, ptr %8, i64 0, i32 1
  %24 = load double, ptr %23, align 8, !tbaa !244
  %25 = tail call double @llvm.fmuladd.f64(double %1, double %22, double %24)
  store double %25, ptr %23, align 8, !tbaa !244
  br label %26

26:                                               ; preds = %15, %6
  %27 = getelementptr inbounds %struct._Fukusosuu, ptr %8, i64 1
  %28 = load i8, ptr %10, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %6, !llvm.loop !245

30:                                               ; preds = %26, %3
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @seq_vec_3(ptr nocapture noundef readonly %0, double noundef %1, ptr nocapture noundef readonly %2) unnamed_addr #17 {
  %4 = load i8, ptr %2, align 1, !tbaa !17
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %30, label %6

6:                                                ; preds = %3
  %7 = load i32, ptr @n20or4or2, align 4, !tbaa !31
  br label %8

8:                                                ; preds = %26, %6
  %9 = phi i64 [ 0, %6 ], [ %27, %26 ]
  %10 = phi i8 [ %4, %6 ], [ %28, %26 ]
  %11 = phi ptr [ %2, %6 ], [ %12, %26 ]
  %12 = getelementptr inbounds i8, ptr %11, i64 1
  %13 = sext i8 %10 to i64
  %14 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = icmp slt i32 %15, %7
  %17 = icmp sgt i32 %15, -1
  %18 = and i1 %17, %16
  br i1 %18, label %19, label %26

19:                                               ; preds = %8
  %20 = zext i32 %15 to i64
  %21 = getelementptr inbounds ptr, ptr %0, i64 %20
  %22 = load ptr, ptr %21, align 8, !tbaa !19
  %23 = getelementptr inbounds %struct._Fukusosuu, ptr %22, i64 %9
  %24 = load double, ptr %23, align 8, !tbaa !216
  %25 = fadd double %24, %1
  store double %25, ptr %23, align 8, !tbaa !216
  br label %26

26:                                               ; preds = %19, %8
  %27 = add nuw i64 %9, 1
  %28 = load i8, ptr %12, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %8, !llvm.loop !246

30:                                               ; preds = %26, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @mymergesort(i32 noundef %0, i32 noundef %1, ptr noundef %2) unnamed_addr #4 {
  %4 = load i32, ptr @mymergesort.allo, align 4, !tbaa !31
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %15

6:                                                ; preds = %3
  store i32 %1, ptr @mymergesort.allo, align 4, !tbaa !31
  %7 = load ptr, ptr @mymergesort.work, align 8, !tbaa !19
  %8 = icmp eq ptr %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @free(ptr noundef nonnull %7) #35
  br label %10

10:                                               ; preds = %9, %6
  %11 = lshr i32 %1, 1
  %12 = add nuw nsw i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = tail call noalias ptr @calloc(i64 noundef %13, i64 noundef 8) #41
  store ptr %14, ptr @mymergesort.work, align 8, !tbaa !19
  br label %15

15:                                               ; preds = %10, %3
  %16 = icmp slt i32 %0, %1
  br i1 %16, label %17, label %88

17:                                               ; preds = %15
  %18 = add nsw i32 %1, %0
  %19 = sdiv i32 %18, 2
  tail call fastcc void @mymergesort(i32 noundef %0, i32 noundef %19, ptr noundef %2) #39
  %20 = add nsw i32 %19, 1
  tail call fastcc void @mymergesort(i32 noundef %20, i32 noundef %1, ptr noundef %2) #39
  %21 = icmp slt i32 %19, %0
  br i1 %21, label %88, label %22

22:                                               ; preds = %17
  %23 = load ptr, ptr @mymergesort.work, align 8, !tbaa !19
  %24 = sext i32 %0 to i64
  br label %25

25:                                               ; preds = %25, %22
  %26 = phi i64 [ 0, %22 ], [ %30, %25 ]
  %27 = phi i64 [ %24, %22 ], [ %32, %25 ]
  %28 = getelementptr inbounds ptr, ptr %2, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !19
  %30 = add nuw nsw i64 %26, 1
  %31 = getelementptr inbounds ptr, ptr %23, i64 %26
  store ptr %29, ptr %31, align 8, !tbaa !19
  %32 = add nsw i64 %27, 1
  %33 = trunc i64 %32 to i32
  %34 = icmp eq i32 %20, %33
  br i1 %34, label %35, label %25, !llvm.loop !247

35:                                               ; preds = %25
  %.lcssa = phi i64 [ %30, %25 ]
  %36 = trunc i64 %.lcssa to i32
  %37 = icmp slt i32 %19, %1
  %38 = icmp sgt i32 %36, 0
  %39 = select i1 %37, i1 %38, i1 false
  br i1 %39, label %40, label %42

40:                                               ; preds = %35
  %41 = load ptr, ptr @mymergesort.work, align 8, !tbaa !19
  br label %52

42:                                               ; preds = %52, %35
  %43 = phi i32 [ %0, %35 ], [ %67, %52 ]
  %44 = phi i32 [ 0, %35 ], [ %72, %52 ]
  %45 = icmp slt i32 %44, %36
  br i1 %45, label %46, label %88

46:                                               ; preds = %42
  %47 = load ptr, ptr @mymergesort.work, align 8, !tbaa !19
  %48 = sext i32 %44 to i64
  %49 = sext i32 %43 to i64
  %50 = shl i64 %.lcssa, 32
  %51 = ashr exact i64 %50, 32
  br label %79

52:                                               ; preds = %52, %40
  %53 = phi i32 [ %20, %40 ], [ %75, %52 ]
  %54 = phi i32 [ 0, %40 ], [ %72, %52 ]
  %55 = phi i32 [ %0, %40 ], [ %67, %52 ]
  %56 = zext i32 %54 to i64
  %57 = getelementptr inbounds ptr, ptr %41, i64 %56
  %58 = load ptr, ptr %57, align 8, !tbaa !19
  %59 = getelementptr inbounds %struct._Segment, ptr %58, i64 0, i32 2
  %60 = load i32, ptr %59, align 8, !tbaa !223
  %61 = sext i32 %53 to i64
  %62 = getelementptr inbounds ptr, ptr %2, i64 %61
  %63 = load ptr, ptr %62, align 8, !tbaa !19
  %64 = getelementptr inbounds %struct._Segment, ptr %63, i64 0, i32 2
  %65 = load i32, ptr %64, align 8, !tbaa !223
  %66 = icmp sle i32 %60, %65
  %67 = add nsw i32 %55, 1
  %68 = sext i32 %55 to i64
  %69 = getelementptr inbounds ptr, ptr %2, i64 %68
  %70 = select i1 %66, ptr %58, ptr %63
  %71 = zext i1 %66 to i32
  %72 = add nuw nsw i32 %54, %71
  %73 = xor i1 %66, true
  %74 = zext i1 %73 to i32
  %75 = add nsw i32 %53, %74
  store ptr %70, ptr %69, align 8, !tbaa !19
  %76 = icmp sle i32 %75, %1
  %77 = icmp slt i32 %72, %36
  %78 = select i1 %76, i1 %77, i1 false
  br i1 %78, label %52, label %42, !llvm.loop !248

79:                                               ; preds = %79, %46
  %80 = phi i64 [ %49, %46 ], [ %85, %79 ]
  %81 = phi i64 [ %48, %46 ], [ %82, %79 ]
  %82 = add nsw i64 %81, 1
  %83 = getelementptr inbounds ptr, ptr %47, i64 %81
  %84 = load ptr, ptr %83, align 8, !tbaa !19
  %85 = add nsw i64 %80, 1
  %86 = getelementptr inbounds ptr, ptr %2, i64 %80
  store ptr %84, ptr %86, align 8, !tbaa !19
  %87 = icmp eq i64 %82, %51
  br i1 %87, label %88, label %79, !llvm.loop !249

88:                                               ; preds = %79, %42, %17, %15
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #15

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly) local_unnamed_addr #15

; Function Attrs: nounwind optsize uwtable
define internal i32 @fft(i32 noundef %0, ptr nocapture noundef %1, i32 noundef %2) #4 {
  %4 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)
  %5 = lshr i32 %4, 2
  %6 = load i32, ptr @fft.last_n, align 4, !tbaa !31
  %7 = icmp ne i32 %4, %6
  %8 = icmp eq i32 %0, 0
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %112

10:                                               ; preds = %3
  store i32 %4, ptr @fft.last_n, align 4, !tbaa !31
  %11 = load ptr, ptr @fft.sintbl, align 8, !tbaa !19
  %12 = add nuw nsw i32 %5, %4
  %13 = zext i32 %12 to i64
  %14 = shl nuw nsw i64 %13, 2
  %15 = tail call ptr @realloc(ptr noundef %11, i64 noundef %14) #42
  store ptr %15, ptr @fft.sintbl, align 8, !tbaa !19
  %16 = load ptr, ptr @fft.bitrev, align 8, !tbaa !19
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 2
  %19 = tail call ptr @realloc(ptr noundef %16, i64 noundef %18) #42
  store ptr %19, ptr @fft.bitrev, align 8, !tbaa !19
  %20 = icmp eq ptr %15, null
  %21 = icmp eq ptr %19, null
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %10
  %24 = load ptr, ptr @stderr, align 8, !tbaa !19
  %25 = tail call i32 @fputc(i32 10, ptr %24)
  br label %208

26:                                               ; preds = %10
  %27 = lshr i32 %4, 1
  %28 = lshr i32 %4, 3
  %29 = sitofp i32 %4 to double
  %30 = fdiv double 0x400921FB54442D18, %29
  %31 = tail call double @sin(double noundef %30) #35
  %32 = fmul double %31, 2.000000e+00
  %33 = fmul double %31, %32
  %34 = fsub double 2.000000e+00, %33
  %35 = fmul double %33, %34
  %36 = tail call double @sqrt(double noundef %35) #35
  %37 = fmul double %33, 2.000000e+00
  %38 = zext i32 %5 to i64
  %39 = getelementptr inbounds float, ptr %15, i64 %38
  store float 1.000000e+00, ptr %39, align 4, !tbaa !167
  store float 0.000000e+00, ptr %15, align 4, !tbaa !167
  %40 = icmp ugt i32 %4, 15
  br i1 %40, label %41, label %62

41:                                               ; preds = %26
  %42 = fneg double %37
  %43 = tail call i32 @llvm.smax.i32(i32 %28, i32 2)
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ 1, %41 ], [ %60, %45 ]
  %47 = phi double [ %36, %41 ], [ %54, %45 ]
  %48 = phi double [ %33, %41 ], [ %52, %45 ]
  %49 = phi double [ 0.000000e+00, %41 ], [ %53, %45 ]
  %50 = phi double [ 1.000000e+00, %41 ], [ %51, %45 ]
  %51 = fsub double %50, %48
  %52 = tail call double @llvm.fmuladd.f64(double %37, double %51, double %48)
  %53 = fadd double %47, %49
  %54 = tail call double @llvm.fmuladd.f64(double %42, double %53, double %47)
  %55 = fptrunc double %53 to float
  %56 = getelementptr inbounds float, ptr %15, i64 %46
  store float %55, ptr %56, align 4, !tbaa !167
  %57 = fptrunc double %51 to float
  %58 = sub nsw i64 %38, %46
  %59 = getelementptr inbounds float, ptr %15, i64 %58
  store float %57, ptr %59, align 4, !tbaa !167
  %60 = add nuw nsw i64 %46, 1
  %61 = icmp eq i64 %60, %44
  br i1 %61, label %62, label %45, !llvm.loop !250

62:                                               ; preds = %45, %26
  %63 = icmp ult i32 %4, 8
  br i1 %63, label %67, label %64

64:                                               ; preds = %62
  %65 = zext i32 %28 to i64
  %66 = getelementptr inbounds float, ptr %15, i64 %65
  store float 0x3FE6A09E60000000, ptr %66, align 4, !tbaa !167
  br label %69

67:                                               ; preds = %62
  %68 = icmp ugt i32 %4, 3
  br i1 %68, label %69, label %71

69:                                               ; preds = %67, %64
  %70 = zext i32 %27 to i64
  br label %77

71:                                               ; preds = %77, %67
  %72 = add nuw nsw i32 %27, %5
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %94, label %74

74:                                               ; preds = %71
  %75 = zext i32 %27 to i64
  %76 = zext i32 %72 to i64
  br label %85

77:                                               ; preds = %77, %69
  %78 = phi i64 [ 0, %69 ], [ %83, %77 ]
  %79 = getelementptr inbounds float, ptr %15, i64 %78
  %80 = load float, ptr %79, align 4, !tbaa !167
  %81 = sub nsw i64 %70, %78
  %82 = getelementptr inbounds float, ptr %15, i64 %81
  store float %80, ptr %82, align 4, !tbaa !167
  %83 = add nuw nsw i64 %78, 1
  %84 = icmp eq i64 %83, %38
  br i1 %84, label %71, label %77, !llvm.loop !251

85:                                               ; preds = %85, %74
  %86 = phi i64 [ 0, %74 ], [ %92, %85 ]
  %87 = getelementptr inbounds float, ptr %15, i64 %86
  %88 = load float, ptr %87, align 4, !tbaa !167
  %89 = fneg float %88
  %90 = add nuw nsw i64 %86, %75
  %91 = getelementptr inbounds float, ptr %15, i64 %90
  store float %89, ptr %91, align 4, !tbaa !167
  %92 = add nuw nsw i64 %86, 1
  %93 = icmp eq i64 %92, %76
  br i1 %93, label %94, label %85, !llvm.loop !252

94:                                               ; preds = %85, %71
  %95 = load ptr, ptr @fft.bitrev, align 8, !tbaa !19
  store i32 0, ptr %95, align 4, !tbaa !31
  %96 = icmp ugt i32 %4, 1
  br i1 %96, label %97, label %111

97:                                               ; preds = %106, %94
  %98 = phi i64 [ %109, %106 ], [ 1, %94 ]
  %99 = phi i32 [ %107, %106 ], [ 0, %94 ]
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i32 [ %105, %100 ], [ %99, %97 ]
  %102 = phi i32 [ %103, %100 ], [ %4, %97 ]
  %103 = lshr i32 %102, 1
  %104 = icmp sgt i32 %103, %101
  %105 = sub nsw i32 %101, %103
  br i1 %104, label %106, label %100, !llvm.loop !253

106:                                              ; preds = %100
  %.lcssa1 = phi i32 [ %101, %100 ]
  %.lcssa = phi i32 [ %103, %100 ]
  %107 = add nsw i32 %.lcssa, %.lcssa1
  %108 = getelementptr inbounds i32, ptr %95, i64 %98
  store i32 %107, ptr %108, align 4, !tbaa !31
  %109 = add nuw nsw i64 %98, 1
  %110 = icmp eq i64 %109, %17
  br i1 %110, label %111, label %97

111:                                              ; preds = %106, %94
  br i1 %8, label %116, label %112

112:                                              ; preds = %111, %3
  %113 = load ptr, ptr @fft.bitrev, align 8, !tbaa !19
  %114 = tail call i32 @llvm.umax.i32(i32 %4, i32 1)
  %115 = zext i32 %114 to i64
  br label %123

116:                                              ; preds = %136, %111
  %117 = icmp ugt i32 %4, 1
  br i1 %117, label %118, label %194

118:                                              ; preds = %116
  %119 = load ptr, ptr @fft.sintbl, align 8
  %120 = zext i32 %4 to i64
  %121 = zext i32 %5 to i64
  %122 = icmp slt i32 %0, 0
  br label %141

123:                                              ; preds = %136, %112
  %124 = phi i64 [ 0, %112 ], [ %137, %136 ]
  %125 = getelementptr inbounds i32, ptr %113, i64 %124
  %126 = load i32, ptr %125, align 4, !tbaa !31
  %127 = sext i32 %126 to i64
  %128 = icmp slt i64 %124, %127
  br i1 %128, label %129, label %136

129:                                              ; preds = %123
  %130 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 %124
  %131 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 %127
  %132 = load <2 x double>, ptr %131, align 8, !tbaa !7
  %133 = load <2 x double>, ptr %130, align 8, !tbaa !7
  %134 = fptrunc <2 x double> %133 to <2 x float>
  store <2 x double> %132, ptr %130, align 8, !tbaa !7
  %135 = fpext <2 x float> %134 to <2 x double>
  store <2 x double> %135, ptr %131, align 8, !tbaa !7
  br label %136

136:                                              ; preds = %129, %123
  %137 = add nuw nsw i64 %124, 1
  %138 = icmp eq i64 %137, %115
  br i1 %138, label %116, label %123, !llvm.loop !254

139:                                              ; preds = %190, %141
  %140 = icmp slt i32 %143, %4
  br i1 %140, label %141, label %194, !llvm.loop !255

141:                                              ; preds = %139, %118
  %142 = phi i32 [ 1, %118 ], [ %143, %139 ]
  %143 = shl nsw i32 %142, 1
  %144 = icmp sgt i32 %142, 0
  br i1 %144, label %145, label %139

145:                                              ; preds = %141
  %146 = sext i32 %143 to i64
  %147 = zext i32 %142 to i64
  %148 = zext i32 %142 to i64
  %149 = udiv i32 %4, %143
  %150 = zext i32 %149 to i64
  br label %151

151:                                              ; preds = %190, %145
  %152 = phi i64 [ 0, %145 ], [ %191, %190 ]
  %153 = phi i64 [ 0, %145 ], [ %192, %190 ]
  %154 = trunc i64 %153 to i32
  %155 = icmp ugt i32 %4, %154
  br i1 %155, label %156, label %190

156:                                              ; preds = %151
  %157 = getelementptr inbounds float, ptr %119, i64 %152
  %158 = load float, ptr %157, align 4, !tbaa !167
  %159 = fneg float %158
  %160 = select i1 %122, float %159, float %158
  %161 = add nuw nsw i64 %152, %121
  %162 = getelementptr inbounds float, ptr %119, i64 %161
  %163 = load float, ptr %162, align 4, !tbaa !167
  %164 = insertelement <2 x float> poison, float %160, i64 0
  %165 = insertelement <2 x float> %164, float %163, i64 1
  %166 = fpext <2 x float> %165 to <2 x double>
  %167 = shufflevector <2 x double> %166, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  br label %168

168:                                              ; preds = %168, %156
  %169 = phi i64 [ %153, %156 ], [ %188, %168 ]
  %170 = add nsw i64 %169, %147
  %171 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 %170
  %172 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 %170, i32 1
  %173 = load double, ptr %172, align 8, !tbaa !244
  %174 = load double, ptr %171, align 8, !tbaa !216
  %175 = fneg double %174
  %176 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 %169
  %177 = insertelement <2 x double> poison, double %174, i64 0
  %178 = insertelement <2 x double> %177, double %175, i64 1
  %179 = fmul <2 x double> %178, %167
  %180 = insertelement <2 x double> poison, double %173, i64 0
  %181 = shufflevector <2 x double> %180, <2 x double> poison, <2 x i32> zeroinitializer
  %182 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %166, <2 x double> %181, <2 x double> %179)
  %183 = fptrunc <2 x double> %182 to <2 x float>
  %184 = load <2 x double>, ptr %176, align 8, !tbaa !7
  %185 = fpext <2 x float> %183 to <2 x double>
  %186 = fsub <2 x double> %184, %185
  store <2 x double> %186, ptr %171, align 8, !tbaa !7
  %187 = fadd <2 x double> %184, %185
  store <2 x double> %187, ptr %176, align 8, !tbaa !7
  %188 = add i64 %169, %146
  %189 = icmp slt i64 %188, %120
  br i1 %189, label %168, label %190, !llvm.loop !256

190:                                              ; preds = %168, %151
  %191 = add nuw nsw i64 %152, %150
  %192 = add nuw nsw i64 %153, 1
  %193 = icmp eq i64 %192, %148
  br i1 %193, label %139, label %151, !llvm.loop !257

194:                                              ; preds = %139, %116
  %195 = icmp sgt i32 %0, 0
  br i1 %195, label %196, label %208

196:                                              ; preds = %194
  %197 = sitofp i32 %4 to double
  %198 = zext i32 %4 to i64
  %199 = insertelement <2 x double> poison, double %197, i64 0
  %200 = shufflevector <2 x double> %199, <2 x double> poison, <2 x i32> zeroinitializer
  br label %201

201:                                              ; preds = %201, %196
  %202 = phi i64 [ 0, %196 ], [ %206, %201 ]
  %203 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 %202
  %204 = load <2 x double>, ptr %203, align 8, !tbaa !7
  %205 = fdiv <2 x double> %204, %200
  store <2 x double> %205, ptr %203, align 8, !tbaa !7
  %206 = add nuw nsw i64 %202, 1
  %207 = icmp eq i64 %206, %198
  br i1 %207, label %208, label %201, !llvm.loop !258

208:                                              ; preds = %201, %194, %23
  %209 = phi i32 [ 1, %23 ], [ 0, %194 ], [ 0, %201 ]
  ret i32 %209
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #7

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #18

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sin(double noundef) local_unnamed_addr #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #7

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @calcNaiseki(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #19 {
  %4 = load double, ptr %1, align 8, !tbaa !216
  %5 = load double, ptr %2, align 8, !tbaa !216
  %6 = getelementptr inbounds %struct._Fukusosuu, ptr %1, i64 0, i32 1
  %7 = load double, ptr %6, align 8, !tbaa !244
  %8 = getelementptr inbounds %struct._Fukusosuu, ptr %2, i64 0, i32 1
  %9 = load double, ptr %8, align 8, !tbaa !244
  %10 = fmul double %7, %9
  %11 = tail call double @llvm.fmuladd.f64(double %4, double %5, double %10)
  store double %11, ptr %0, align 8, !tbaa !216
  %12 = load double, ptr %1, align 8, !tbaa !216
  %13 = fneg double %12
  %14 = load double, ptr %2, align 8, !tbaa !216
  %15 = fmul double %7, %14
  %16 = tail call double @llvm.fmuladd.f64(double %13, double %9, double %15)
  %17 = getelementptr inbounds %struct._Fukusosuu, ptr %0, i64 0, i32 1
  store double %16, ptr %17, align 8, !tbaa !244
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @AllocateFukusosuuVec(i32 noundef %0) #12 {
  %2 = sext i32 %0 to i64
  %3 = tail call noalias ptr @calloc(i64 noundef %2, i64 noundef 16) #41
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load ptr, ptr @stderr, align 8, !tbaa !19
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.4.112, i32 noundef %0) #36
  br label %8

8:                                                ; preds = %5, %1
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateFukusosuuMtx(i32 noundef %0, i32 noundef %1) #4 {
  %3 = add nsw i32 %0, 1
  %4 = sext i32 %3 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 8) #41
  %6 = icmp eq ptr %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = icmp sgt i32 %0, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %7
  %10 = zext i32 %0 to i64
  br label %17

11:                                               ; preds = %2
  %12 = load ptr, ptr @stderr, align 8, !tbaa !19
  %13 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.5.115, i32 noundef %0, i32 noundef %1) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

14:                                               ; preds = %17
  %15 = add nuw nsw i64 %18, 1
  %16 = icmp eq i64 %15, %10
  br i1 %16, label %25, label %17, !llvm.loop !259

17:                                               ; preds = %14, %9
  %18 = phi i64 [ 0, %9 ], [ %15, %14 ]
  %19 = tail call ptr @AllocateFukusosuuVec(i32 noundef %1) #39
  %20 = getelementptr inbounds ptr, ptr %5, i64 %18
  store ptr %19, ptr %20, align 8, !tbaa !19
  %21 = icmp eq ptr %19, null
  br i1 %21, label %22, label %14

22:                                               ; preds = %17
  %23 = load ptr, ptr @stderr, align 8, !tbaa !19
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %23, ptr noundef nonnull @.str.5.115, i32 noundef %0, i32 noundef %1) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

25:                                               ; preds = %14, %7
  %26 = sext i32 %0 to i64
  %27 = getelementptr inbounds ptr, ptr %5, i64 %26
  store ptr null, ptr %27, align 8, !tbaa !19
  ret ptr %5
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @FreeFukusosuuVec(ptr nocapture noundef %0) #20 {
  tail call void @free(ptr noundef %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @FreeFukusosuuMtx(ptr nocapture noundef %0) #4 {
  %2 = load ptr, ptr %0, align 8, !tbaa !19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %7, %4 ], [ 0, %1 ]
  %6 = phi ptr [ %9, %4 ], [ %2, %1 ]
  tail call void @free(ptr noundef nonnull %6) #35
  %7 = add nuw nsw i64 %5, 1
  %8 = getelementptr inbounds ptr, ptr %0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %4, !llvm.loop !260

11:                                               ; preds = %4, %1
  tail call void @free(ptr noundef nonnull %0) #35
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @getKouho(ptr nocapture noundef writeonly %0, i32 noundef %1, ptr nocapture noundef %2, i32 noundef %3) #21 {
  %5 = sdiv i32 %3, -2
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %34

7:                                                ; preds = %4
  %8 = icmp sgt i32 %3, 0
  %9 = zext i32 %1 to i64
  %10 = zext i32 %3 to i64
  br label %11

11:                                               ; preds = %26, %7
  %12 = phi i64 [ 0, %7 ], [ %32, %26 ]
  %13 = phi i32 [ 0, %7 ], [ %27, %26 ]
  br i1 %8, label %14, label %26

14:                                               ; preds = %14, %11
  %15 = phi i64 [ %24, %14 ], [ 0, %11 ]
  %16 = phi i32 [ %23, %14 ], [ %13, %11 ]
  %17 = phi double [ %21, %14 ], [ 0xC0C387F333333333, %11 ]
  %18 = getelementptr inbounds double, ptr %2, i64 %15
  %19 = load double, ptr %18, align 8, !tbaa !7
  %20 = fcmp ogt double %19, %17
  %21 = select i1 %20, double %19, double %17
  %22 = trunc i64 %15 to i32
  %23 = select i1 %20, i32 %22, i32 %16
  %24 = add nuw nsw i64 %15, 1
  %25 = icmp eq i64 %24, %10
  br i1 %25, label %26, label %14, !llvm.loop !261

26:                                               ; preds = %14, %11
  %27 = phi i32 [ %13, %11 ], [ %23, %14 ]
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds double, ptr %2, i64 %28
  store double 0xC0C387F333333333, ptr %29, align 8, !tbaa !7
  %30 = add i32 %27, %5
  %31 = getelementptr inbounds i32, ptr %0, i64 %12
  store i32 %30, ptr %31, align 4, !tbaa !31
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, %9
  br i1 %33, label %34, label %11, !llvm.loop !262

34:                                               ; preds = %26, %4
  %35 = phi i32 [ 0, %4 ], [ %1, %26 ]
  ret i32 %35
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @zurasu2(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef writeonly %5, ptr nocapture noundef writeonly %6) #21 {
  %8 = icmp sgt i32 %0, 0
  %9 = icmp sgt i32 %1, 0
  br i1 %8, label %15, label %10

10:                                               ; preds = %7
  br i1 %9, label %11, label %38

11:                                               ; preds = %10
  %12 = sext i32 %0 to i64
  %13 = sub nsw i64 0, %12
  %14 = zext i32 %1 to i64
  br label %42

15:                                               ; preds = %7
  br i1 %9, label %16, label %18

16:                                               ; preds = %15
  %17 = zext i32 %1 to i64
  br label %23

18:                                               ; preds = %23, %15
  %19 = icmp sgt i32 %2, 0
  br i1 %19, label %20, label %57

20:                                               ; preds = %18
  %21 = zext i32 %0 to i64
  %22 = zext i32 %2 to i64
  br label %30

23:                                               ; preds = %23, %16
  %24 = phi i64 [ 0, %16 ], [ %28, %23 ]
  %25 = getelementptr inbounds ptr, ptr %3, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !19
  %27 = getelementptr inbounds ptr, ptr %5, i64 %24
  store ptr %26, ptr %27, align 8, !tbaa !19
  %28 = add nuw nsw i64 %24, 1
  %29 = icmp eq i64 %28, %17
  br i1 %29, label %18, label %23, !llvm.loop !263

30:                                               ; preds = %30, %20
  %31 = phi i64 [ 0, %20 ], [ %36, %30 ]
  %32 = getelementptr inbounds ptr, ptr %4, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !19
  %34 = getelementptr inbounds i8, ptr %33, i64 %21
  %35 = getelementptr inbounds ptr, ptr %6, i64 %31
  store ptr %34, ptr %35, align 8, !tbaa !19
  %36 = add nuw nsw i64 %31, 1
  %37 = icmp eq i64 %36, %22
  br i1 %37, label %57, label %30, !llvm.loop !264

38:                                               ; preds = %42, %10
  %39 = icmp sgt i32 %2, 0
  br i1 %39, label %40, label %57

40:                                               ; preds = %38
  %41 = zext i32 %2 to i64
  br label %50

42:                                               ; preds = %42, %11
  %43 = phi i64 [ 0, %11 ], [ %48, %42 ]
  %44 = getelementptr inbounds ptr, ptr %3, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !19
  %46 = getelementptr inbounds i8, ptr %45, i64 %13
  %47 = getelementptr inbounds ptr, ptr %5, i64 %43
  store ptr %46, ptr %47, align 8, !tbaa !19
  %48 = add nuw nsw i64 %43, 1
  %49 = icmp eq i64 %48, %14
  br i1 %49, label %38, label %42, !llvm.loop !265

50:                                               ; preds = %50, %40
  %51 = phi i64 [ 0, %40 ], [ %55, %50 ]
  %52 = getelementptr inbounds ptr, ptr %4, i64 %51
  %53 = load ptr, ptr %52, align 8, !tbaa !19
  %54 = getelementptr inbounds ptr, ptr %6, i64 %51
  store ptr %53, ptr %54, align 8, !tbaa !19
  %55 = add nuw nsw i64 %51, 1
  %56 = icmp eq i64 %55, %41
  br i1 %56, label %57, label %50, !llvm.loop !266

57:                                               ; preds = %50, %38, %30, %18
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @alignableReagion(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr nocapture noundef writeonly %6) #4 {
  %8 = load ptr, ptr %2, align 8, !tbaa !19
  %9 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %8) #40
  %10 = load ptr, ptr %3, align 8, !tbaa !19
  %11 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %10) #40
  %12 = tail call i64 @llvm.umin.i64(i64 %9, i64 %11)
  %13 = trunc i64 %12 to i32
  %14 = tail call i64 @llvm.umax.i64(i64 %9, i64 %11)
  %15 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  %16 = trunc i64 %14 to i32
  %17 = add i32 %15, %16
  %18 = load i32, ptr @alignableReagion.alloclen, align 4, !tbaa !31
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %20, label %33

20:                                               ; preds = %7
  %21 = icmp eq i32 %18, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %20
  %23 = load ptr, ptr @alignableReagion.stra, align 8, !tbaa !19
  tail call void @FreeDoubleVec(ptr noundef %23) #35
  br label %31

24:                                               ; preds = %20
  %25 = load i32, ptr @fftThreshold, align 4, !tbaa !31
  %26 = sitofp i32 %25 to double
  %27 = fdiv double %26, 1.000000e+02
  %28 = fmul double %27, 6.000000e+02
  %29 = sitofp i32 %15 to double
  %30 = fmul double %28, %29
  store double %30, ptr @alignableReagion.threshold, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %24, %22
  %32 = tail call ptr @AllocateDoubleVec(i32 noundef %17) #35
  store ptr %32, ptr @alignableReagion.stra, align 8, !tbaa !19
  store i32 %17, ptr @alignableReagion.alloclen, align 4, !tbaa !31
  br label %33

33:                                               ; preds = %31, %7
  %34 = icmp sgt i32 %0, 0
  br i1 %34, label %35, label %45

35:                                               ; preds = %33
  %36 = icmp sgt i32 %1, 0
  %37 = zext i32 %0 to i64
  %38 = zext i32 %1 to i64
  br label %39

39:                                               ; preds = %62, %35
  %40 = phi i64 [ 0, %35 ], [ %64, %62 ]
  %41 = phi double [ 0.000000e+00, %35 ], [ %63, %62 ]
  br i1 %36, label %42, label %62

42:                                               ; preds = %39
  %43 = getelementptr inbounds double, ptr %4, i64 %40
  %44 = load double, ptr %43, align 8, !tbaa !7
  br label %54

45:                                               ; preds = %62, %33
  %46 = phi double [ 0.000000e+00, %33 ], [ %63, %62 ]
  %47 = icmp sgt i32 %13, 0
  br i1 %47, label %48, label %171

48:                                               ; preds = %45
  %49 = icmp sgt i32 %1, 0
  %50 = load ptr, ptr @alignableReagion.stra, align 8, !tbaa !19
  %51 = and i64 %12, 4294967295
  %52 = zext i32 %0 to i64
  %53 = zext i32 %1 to i64
  br label %66

54:                                               ; preds = %54, %42
  %55 = phi i64 [ 0, %42 ], [ %60, %54 ]
  %56 = phi double [ %41, %42 ], [ %59, %54 ]
  %57 = getelementptr inbounds double, ptr %5, i64 %55
  %58 = load double, ptr %57, align 8, !tbaa !7
  %59 = tail call double @llvm.fmuladd.f64(double %44, double %58, double %56)
  %60 = add nuw nsw i64 %55, 1
  %61 = icmp eq i64 %60, %38
  br i1 %61, label %62, label %54, !llvm.loop !267

62:                                               ; preds = %54, %39
  %63 = phi double [ %41, %39 ], [ %59, %54 ]
  %64 = add nuw nsw i64 %40, 1
  %65 = icmp eq i64 %64, %37
  br i1 %65, label %45, label %39, !llvm.loop !268

66:                                               ; preds = %166, %48
  %67 = phi i64 [ 0, %48 ], [ %169, %166 ]
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(208) @alignableReagion.prf1, i8 0, i64 208, i1 false), !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(208) @alignableReagion.prf2, i8 0, i64 208, i1 false), !tbaa !7
  br i1 %34, label %69, label %68

68:                                               ; preds = %69, %66
  br i1 %49, label %86, label %103

69:                                               ; preds = %69, %66
  %70 = phi i64 [ %84, %69 ], [ 0, %66 ]
  %71 = getelementptr inbounds double, ptr %4, i64 %70
  %72 = load double, ptr %71, align 8, !tbaa !7
  %73 = getelementptr inbounds ptr, ptr %2, i64 %70
  %74 = load ptr, ptr %73, align 8, !tbaa !19
  %75 = getelementptr inbounds i8, ptr %74, i64 %67
  %76 = load i8, ptr %75, align 1, !tbaa !17
  %77 = sext i8 %76 to i64
  %78 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !31
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [26 x double], ptr @alignableReagion.prf1, i64 0, i64 %80
  %82 = load double, ptr %81, align 8, !tbaa !7
  %83 = fadd double %72, %82
  store double %83, ptr %81, align 8, !tbaa !7
  %84 = add nuw nsw i64 %70, 1
  %85 = icmp eq i64 %84, %52
  br i1 %85, label %68, label %69, !llvm.loop !269

86:                                               ; preds = %86, %68
  %87 = phi i64 [ %101, %86 ], [ 0, %68 ]
  %88 = getelementptr inbounds double, ptr %5, i64 %87
  %89 = load double, ptr %88, align 8, !tbaa !7
  %90 = getelementptr inbounds ptr, ptr %3, i64 %87
  %91 = load ptr, ptr %90, align 8, !tbaa !19
  %92 = getelementptr inbounds i8, ptr %91, i64 %67
  %93 = load i8, ptr %92, align 1, !tbaa !17
  %94 = sext i8 %93 to i64
  %95 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %94
  %96 = load i32, ptr %95, align 4, !tbaa !31
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [26 x double], ptr @alignableReagion.prf2, i64 0, i64 %97
  %99 = load double, ptr %98, align 8, !tbaa !7
  %100 = fadd double %89, %99
  store double %100, ptr %98, align 8, !tbaa !7
  %101 = add nuw nsw i64 %87, 1
  %102 = icmp eq i64 %101, %53
  br i1 %102, label %103, label %86, !llvm.loop !270

103:                                              ; preds = %86, %68
  br label %104

104:                                              ; preds = %124, %103
  %105 = phi i64 [ %126, %124 ], [ 25, %103 ]
  %106 = phi i32 [ %125, %124 ], [ 26, %103 ]
  %107 = phi i32 [ %116, %124 ], [ 26, %103 ]
  %108 = getelementptr inbounds [26 x double], ptr @alignableReagion.prf1, i64 0, i64 %105
  %109 = load double, ptr %108, align 8, !tbaa !7
  %110 = fcmp une double %109, 0.000000e+00
  br i1 %110, label %111, label %115

111:                                              ; preds = %104
  %112 = sext i32 %107 to i64
  %113 = getelementptr inbounds [27 x i32], ptr @alignableReagion.hat1, i64 0, i64 %112
  %114 = trunc i64 %105 to i32
  store i32 %114, ptr %113, align 4, !tbaa !31
  br label %115

115:                                              ; preds = %111, %104
  %116 = phi i32 [ %114, %111 ], [ %107, %104 ]
  %117 = getelementptr inbounds [26 x double], ptr @alignableReagion.prf2, i64 0, i64 %105
  %118 = load double, ptr %117, align 8, !tbaa !7
  %119 = fcmp une double %118, 0.000000e+00
  br i1 %119, label %120, label %124

120:                                              ; preds = %115
  %121 = sext i32 %106 to i64
  %122 = getelementptr inbounds [27 x i32], ptr @alignableReagion.hat2, i64 0, i64 %121
  %123 = trunc i64 %105 to i32
  store i32 %123, ptr %122, align 4, !tbaa !31
  br label %124

124:                                              ; preds = %120, %115
  %125 = phi i32 [ %123, %120 ], [ %106, %115 ]
  %126 = add nsw i64 %105, -1
  %127 = icmp eq i64 %105, 0
  br i1 %127, label %128, label %104, !llvm.loop !271

128:                                              ; preds = %124
  %.lcssa9 = phi i32 [ %125, %124 ]
  %.lcssa8 = phi i32 [ %116, %124 ]
  %129 = sext i32 %.lcssa8 to i64
  %130 = getelementptr inbounds [27 x i32], ptr @alignableReagion.hat1, i64 0, i64 %129
  store i32 -1, ptr %130, align 4, !tbaa !31
  %131 = sext i32 %.lcssa9 to i64
  %132 = getelementptr inbounds [27 x i32], ptr @alignableReagion.hat2, i64 0, i64 %131
  store i32 -1, ptr %132, align 4, !tbaa !31
  %133 = getelementptr inbounds double, ptr %50, i64 %67
  %134 = load i32, ptr getelementptr inbounds ([27 x i32], ptr @alignableReagion.hat1, i64 0, i64 26), align 8, !tbaa !31
  %135 = icmp eq i32 %134, -1
  br i1 %135, label %166, label %136

136:                                              ; preds = %128
  %137 = load i32, ptr getelementptr inbounds ([27 x i32], ptr @alignableReagion.hat2, i64 0, i64 26), align 8, !tbaa !31
  %138 = icmp eq i32 %137, -1
  br label %139

139:                                              ; preds = %161, %136
  %140 = phi double [ 0.000000e+00, %136 ], [ %162, %161 ]
  %141 = phi i32 [ %134, %136 ], [ %164, %161 ]
  %142 = sext i32 %141 to i64
  br i1 %138, label %161, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds [26 x double], ptr @alignableReagion.prf1, i64 0, i64 %142
  %145 = load double, ptr %144, align 8, !tbaa !7
  br label %146

146:                                              ; preds = %146, %143
  %147 = phi double [ %140, %143 ], [ %156, %146 ]
  %148 = phi i32 [ %137, %143 ], [ %158, %146 ]
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [26 x [26 x i32]], ptr @n_disFFT, i64 0, i64 %142, i64 %149
  %151 = load i32, ptr %150, align 4, !tbaa !31
  %152 = sitofp i32 %151 to double
  %153 = fmul double %145, %152
  %154 = getelementptr inbounds [26 x double], ptr @alignableReagion.prf2, i64 0, i64 %149
  %155 = load double, ptr %154, align 8, !tbaa !7
  %156 = tail call double @llvm.fmuladd.f64(double %153, double %155, double %147)
  %157 = getelementptr inbounds [27 x i32], ptr @alignableReagion.hat2, i64 0, i64 %149
  %158 = load i32, ptr %157, align 4, !tbaa !31
  %159 = icmp eq i32 %158, -1
  br i1 %159, label %160, label %146, !llvm.loop !272

160:                                              ; preds = %146
  %.lcssa10 = phi double [ %156, %146 ]
  store double %.lcssa10, ptr %133, align 8, !tbaa !7
  br label %161

161:                                              ; preds = %160, %139
  %162 = phi double [ %.lcssa10, %160 ], [ %140, %139 ]
  %163 = getelementptr inbounds [27 x i32], ptr @alignableReagion.hat1, i64 0, i64 %142
  %164 = load i32, ptr %163, align 4, !tbaa !31
  %165 = icmp eq i32 %164, -1
  br i1 %165, label %166, label %139, !llvm.loop !273

166:                                              ; preds = %161, %128
  %167 = phi double [ 0.000000e+00, %128 ], [ %162, %161 ]
  %168 = fdiv double %167, %46
  store double %168, ptr %133, align 8, !tbaa !7
  %169 = add nuw nsw i64 %67, 1
  %170 = icmp eq i64 %169, %51
  br i1 %170, label %171, label %66, !llvm.loop !274

171:                                              ; preds = %166, %45
  %172 = getelementptr inbounds %struct._Segment, ptr %6, i64 0, i32 4
  store i32 0, ptr %172, align 8, !tbaa !275
  %173 = getelementptr inbounds %struct._Segment, ptr %6, i64 1, i32 5
  store i32 0, ptr %173, align 4, !tbaa !276
  %174 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %179

176:                                              ; preds = %171
  %177 = load ptr, ptr @alignableReagion.stra, align 8, !tbaa !19
  %178 = zext i32 %174 to i64
  br label %186

179:                                              ; preds = %186, %171
  %180 = phi double [ 0.000000e+00, %171 ], [ %191, %186 ]
  %181 = sub nsw i32 %13, %174
  %182 = icmp sgt i32 %181, 1
  br i1 %182, label %183, label %291

183:                                              ; preds = %179
  %184 = load ptr, ptr @alignableReagion.stra, align 8, !tbaa !19
  %185 = load double, ptr @alignableReagion.threshold, align 8, !tbaa !7
  br label %194

186:                                              ; preds = %186, %176
  %187 = phi i64 [ 0, %176 ], [ %192, %186 ]
  %188 = phi double [ 0.000000e+00, %176 ], [ %191, %186 ]
  %189 = getelementptr inbounds double, ptr %177, i64 %187
  %190 = load double, ptr %189, align 8, !tbaa !7
  %191 = fadd double %188, %190
  %192 = add nuw nsw i64 %187, 1
  %193 = icmp eq i64 %192, %178
  br i1 %193, label %179, label %186, !llvm.loop !277

194:                                              ; preds = %263, %183
  %195 = phi i32 [ %174, %183 ], [ %264, %263 ]
  %196 = phi double [ %185, %183 ], [ %265, %263 ]
  %197 = phi ptr [ %184, %183 ], [ %266, %263 ]
  %198 = phi i64 [ 1, %183 ], [ %273, %263 ]
  %199 = phi double [ 0.000000e+00, %183 ], [ %272, %263 ]
  %200 = phi i32 [ 0, %183 ], [ %271, %263 ]
  %201 = phi ptr [ %6, %183 ], [ %270, %263 ]
  %202 = phi i32 [ 0, %183 ], [ %269, %263 ]
  %203 = phi double [ %180, %183 ], [ %215, %263 ]
  %204 = phi i32 [ 0, %183 ], [ %268, %263 ]
  %205 = phi i32 [ 0, %183 ], [ %267, %263 ]
  %206 = add nsw i64 %198, -1
  %207 = getelementptr inbounds double, ptr %197, i64 %206
  %208 = load double, ptr %207, align 8, !tbaa !7
  %209 = fsub double %203, %208
  %210 = trunc i64 %206 to i32
  %211 = add i32 %195, %210
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds double, ptr %197, i64 %212
  %214 = load double, ptr %213, align 8, !tbaa !7
  %215 = fadd double %209, %214
  %216 = fcmp ogt double %215, %196
  br i1 %216, label %217, label %225

217:                                              ; preds = %194
  %218 = icmp eq i32 %205, 0
  %219 = trunc i64 %198 to i32
  %220 = select i1 %218, i32 %219, i32 %204
  %221 = add nsw i32 %200, 1
  %222 = select i1 %218, double 0.000000e+00, double %199
  %223 = select i1 %218, i32 1, i32 %221
  %224 = fadd double %222, %215
  br label %225

225:                                              ; preds = %217, %194
  %226 = phi i32 [ 1, %217 ], [ %205, %194 ]
  %227 = phi i32 [ %220, %217 ], [ %204, %194 ]
  %228 = phi i32 [ %223, %217 ], [ %200, %194 ]
  %229 = phi double [ %224, %217 ], [ %199, %194 ]
  %230 = fcmp ole double %215, %196
  %231 = icmp sgt i32 %228, 150
  %232 = select i1 %230, i1 true, i1 %231
  %233 = icmp ne i32 %226, 0
  %234 = select i1 %232, i1 %233, i1 false
  br i1 %234, label %235, label %263

235:                                              ; preds = %225
  %236 = icmp sgt i32 %228, %195
  br i1 %236, label %239, label %237

237:                                              ; preds = %235
  %238 = trunc i64 %198 to i32
  br label %253

239:                                              ; preds = %235
  store i32 %227, ptr %201, align 8, !tbaa !220
  %240 = getelementptr inbounds %struct._Segment, ptr %201, i64 0, i32 1
  %241 = trunc i64 %198 to i32
  store i32 %241, ptr %240, align 4, !tbaa !222
  %242 = add nsw i32 %227, %241
  %243 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  %244 = add nsw i32 %242, %243
  %245 = sdiv i32 %244, 2
  %246 = getelementptr inbounds %struct._Segment, ptr %201, i64 0, i32 2
  store i32 %245, ptr %246, align 8, !tbaa !223
  %247 = getelementptr inbounds %struct._Segment, ptr %201, i64 0, i32 3
  store double %229, ptr %247, align 8, !tbaa !224
  %248 = zext i1 %231 to i32
  %249 = getelementptr inbounds %struct._Segment, ptr %201, i64 0, i32 4
  store i32 %248, ptr %249, align 8
  %250 = getelementptr inbounds %struct._Segment, ptr %201, i64 1, i32 5
  store i32 %248, ptr %250, align 4
  %251 = add nsw i32 %202, 1
  %252 = getelementptr inbounds %struct._Segment, ptr %201, i64 1
  br label %253

253:                                              ; preds = %239, %237
  %254 = phi i32 [ %238, %237 ], [ %241, %239 ]
  %255 = phi i32 [ %195, %237 ], [ %243, %239 ]
  %256 = phi i32 [ %202, %237 ], [ %251, %239 ]
  %257 = phi ptr [ %201, %237 ], [ %252, %239 ]
  %258 = icmp sgt i32 %256, 99997
  br i1 %258, label %259, label %263

259:                                              ; preds = %253
  tail call void @ErrorExit(ptr noundef nonnull @.str.7.126) #35
  %260 = load ptr, ptr @alignableReagion.stra, align 8, !tbaa !19
  %261 = load double, ptr @alignableReagion.threshold, align 8, !tbaa !7
  %262 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  br label %263

263:                                              ; preds = %259, %253, %225
  %264 = phi i32 [ %262, %259 ], [ %255, %253 ], [ %195, %225 ]
  %265 = phi double [ %261, %259 ], [ %196, %253 ], [ %196, %225 ]
  %266 = phi ptr [ %260, %259 ], [ %197, %253 ], [ %197, %225 ]
  %267 = phi i32 [ 0, %259 ], [ 0, %253 ], [ %226, %225 ]
  %268 = phi i32 [ %254, %259 ], [ %254, %253 ], [ %227, %225 ]
  %269 = phi i32 [ %256, %259 ], [ %256, %253 ], [ %202, %225 ]
  %270 = phi ptr [ %257, %259 ], [ %257, %253 ], [ %201, %225 ]
  %271 = phi i32 [ 0, %259 ], [ 0, %253 ], [ %228, %225 ]
  %272 = phi double [ 0.000000e+00, %259 ], [ 0.000000e+00, %253 ], [ %229, %225 ]
  %273 = add nuw nsw i64 %198, 1
  %274 = sub nsw i32 %13, %264
  %275 = sext i32 %274 to i64
  %276 = icmp slt i64 %273, %275
  br i1 %276, label %194, label %277, !llvm.loop !278

277:                                              ; preds = %263
  %.lcssa7 = phi i32 [ %264, %263 ]
  %.lcssa6 = phi i32 [ %267, %263 ]
  %.lcssa5 = phi i32 [ %268, %263 ]
  %.lcssa4 = phi i32 [ %269, %263 ]
  %.lcssa3 = phi ptr [ %270, %263 ]
  %.lcssa2 = phi i32 [ %271, %263 ]
  %.lcssa1 = phi double [ %272, %263 ]
  %.lcssa = phi i64 [ %273, %263 ]
  %278 = icmp ne i32 %.lcssa6, 0
  %279 = icmp sgt i32 %.lcssa2, %.lcssa7
  %280 = select i1 %278, i1 %279, i1 false
  br i1 %280, label %281, label %291

281:                                              ; preds = %277
  %282 = trunc i64 %.lcssa to i32
  %283 = getelementptr inbounds %struct._Segment, ptr %.lcssa3, i64 0, i32 1
  store i32 %282, ptr %283, align 4, !tbaa !222
  store i32 %.lcssa5, ptr %.lcssa3, align 8, !tbaa !220
  %284 = add nsw i32 %.lcssa5, %282
  %285 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  %286 = add nsw i32 %284, %285
  %287 = sdiv i32 %286, 2
  %288 = getelementptr inbounds %struct._Segment, ptr %.lcssa3, i64 0, i32 2
  store i32 %287, ptr %288, align 8, !tbaa !223
  %289 = getelementptr inbounds %struct._Segment, ptr %.lcssa3, i64 0, i32 3
  store double %.lcssa1, ptr %289, align 8, !tbaa !224
  %290 = add nsw i32 %.lcssa4, 1
  br label %291

291:                                              ; preds = %281, %277, %179
  %292 = phi i32 [ %290, %281 ], [ %.lcssa4, %277 ], [ 0, %179 ]
  ret i32 %292
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #7

; Function Attrs: nounwind optsize uwtable
define internal void @blockAlign2(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef readnone %2, ptr nocapture noundef readnone %3, ptr nocapture noundef readonly %4, ptr nocapture noundef %5) #4 {
  %7 = load i32, ptr @blockAlign2.crossscoresize, align 4, !tbaa !31
  %8 = load i32, ptr %5, align 4, !tbaa !31
  %9 = add nsw i32 %8, 2
  %10 = icmp slt i32 %7, %9
  br i1 %10, label %11, label %31

11:                                               ; preds = %6
  store i32 %9, ptr @blockAlign2.crossscoresize, align 4, !tbaa !31
  %12 = load i32, ptr @fftkeika, align 4, !tbaa !31
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr @stderr, align 8, !tbaa !19
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %15, ptr noundef nonnull @.str.10.129, i32 noundef %9) #36
  br label %17

17:                                               ; preds = %14, %11
  %18 = load ptr, ptr @blockAlign2.track, align 8, !tbaa !19
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @FreeIntMtx(ptr noundef nonnull %18) #35
  br label %21

21:                                               ; preds = %20, %17
  %22 = load ptr, ptr @blockAlign2.crossscore, align 8, !tbaa !19
  %23 = icmp eq ptr %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  tail call void @FreeDoubleMtx(ptr noundef nonnull %22) #35
  br label %25

25:                                               ; preds = %24, %21
  %26 = load i32, ptr @blockAlign2.crossscoresize, align 4, !tbaa !31
  %27 = tail call ptr @AllocateIntMtx(i32 noundef %26, i32 noundef %26) #35
  store ptr %27, ptr @blockAlign2.track, align 8, !tbaa !19
  %28 = load i32, ptr @blockAlign2.crossscoresize, align 4, !tbaa !31
  %29 = tail call ptr @AllocateDoubleMtx(i32 noundef %28, i32 noundef %28) #35
  store ptr %29, ptr @blockAlign2.crossscore, align 8, !tbaa !19
  %30 = load i32, ptr %5, align 4, !tbaa !31
  br label %31

31:                                               ; preds = %25, %6
  %32 = phi i32 [ %30, %25 ], [ %8, %6 ]
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %54

34:                                               ; preds = %31
  %35 = load ptr, ptr @blockAlign2.crossscore, align 8
  %36 = zext i32 %32 to i64
  br label %37

37:                                               ; preds = %51, %34
  %38 = phi i64 [ 0, %34 ], [ %52, %51 ]
  %39 = getelementptr inbounds ptr, ptr %4, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !19
  %41 = getelementptr inbounds ptr, ptr %35, i64 %38
  %42 = load ptr, ptr %41, align 8, !tbaa !19
  br label %44

43:                                               ; preds = %51
  br i1 %33, label %56, label %54

44:                                               ; preds = %44, %37
  %45 = phi i64 [ 0, %37 ], [ %49, %44 ]
  %46 = getelementptr inbounds double, ptr %40, i64 %45
  %47 = load double, ptr %46, align 8, !tbaa !7
  %48 = getelementptr inbounds double, ptr %42, i64 %45
  store double %47, ptr %48, align 8, !tbaa !7
  %49 = add nuw nsw i64 %45, 1
  %50 = icmp eq i64 %49, %36
  br i1 %50, label %51, label %44, !llvm.loop !279

51:                                               ; preds = %44
  %52 = add nuw nsw i64 %38, 1
  %53 = icmp eq i64 %52, %36
  br i1 %53, label %43, label %37, !llvm.loop !280

54:                                               ; preds = %43, %31
  %55 = load ptr, ptr @blockAlign2.track, align 8
  br label %178

56:                                               ; preds = %43
  %57 = zext i32 %32 to i64
  %58 = shl nuw nsw i64 %57, 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 @blockAlign2.ocut1, ptr align 4 %0, i64 %58, i1 false), !tbaa !31
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 @blockAlign2.ocut2, ptr align 4 %1, i64 %58, i1 false), !tbaa !31
  %59 = icmp eq i32 %32, 1
  %60 = load ptr, ptr @blockAlign2.track, align 8
  br i1 %59, label %178, label %61

61:                                               ; preds = %56
  %62 = load double, ptr @blockAlign2.maxj, align 8
  %63 = load ptr, ptr @blockAlign2.crossscore, align 8
  br label %64

64:                                               ; preds = %171, %61
  %65 = phi i32 [ %32, %61 ], [ %173, %171 ]
  %66 = phi i64 [ 1, %61 ], [ %175, %171 ]
  %67 = phi i32 [ -1, %61 ], [ %177, %171 ]
  %68 = phi double [ %62, %61 ], [ %174, %171 ]
  %69 = icmp sgt i32 %65, 1
  br i1 %69, label %72, label %70

70:                                               ; preds = %64
  %71 = sext i32 %65 to i64
  br label %171

72:                                               ; preds = %64
  %73 = add nsw i64 %66, -1
  %74 = getelementptr inbounds ptr, ptr %63, i64 %73
  %75 = icmp ugt i64 %66, 2
  %76 = load ptr, ptr %74, align 8, !tbaa !19
  %77 = getelementptr inbounds ptr, ptr %60, i64 %66
  %78 = load ptr, ptr %77, align 8, !tbaa !19
  %79 = getelementptr inbounds ptr, ptr %63, i64 %66
  %80 = load ptr, ptr %79, align 8, !tbaa !19
  %81 = zext i32 %67 to i64
  %82 = trunc i64 %66 to i32
  br label %83

83:                                               ; preds = %142, %72
  %84 = phi i64 [ 1, %72 ], [ %165, %142 ]
  %85 = phi i32 [ -1, %72 ], [ %169, %142 ]
  %86 = phi i32 [ %65, %72 ], [ %166, %142 ]
  %87 = phi double [ %68, %72 ], [ %149, %142 ]
  %88 = icmp ugt i64 %84, 2
  br i1 %88, label %89, label %111

89:                                               ; preds = %83
  %90 = add nsw i32 %86, -1
  %91 = sext i32 %90 to i64
  %92 = icmp sge i64 %84, %91
  %93 = zext i32 %85 to i64
  br label %94

94:                                               ; preds = %106, %89
  %95 = phi i64 [ 0, %89 ], [ %109, %106 ]
  %96 = phi double [ 0.000000e+00, %89 ], [ %107, %106 ]
  %97 = phi i32 [ 0, %89 ], [ %108, %106 ]
  %98 = icmp eq i64 %95, 0
  %99 = select i1 %98, i1 true, i1 %92
  br i1 %99, label %100, label %106

100:                                              ; preds = %94
  %101 = getelementptr inbounds double, ptr %76, i64 %95
  %102 = load double, ptr %101, align 8, !tbaa !7
  %103 = fcmp ogt double %102, %87
  br i1 %103, label %104, label %106

104:                                              ; preds = %100
  %105 = trunc i64 %95 to i32
  br label %106

106:                                              ; preds = %104, %100, %94
  %107 = phi double [ %96, %100 ], [ %102, %104 ], [ %96, %94 ]
  %108 = phi i32 [ %97, %100 ], [ %105, %104 ], [ %97, %94 ]
  %109 = add nuw nsw i64 %95, 1
  %110 = icmp eq i64 %109, %93
  br i1 %110, label %111, label %94, !llvm.loop !281

111:                                              ; preds = %106, %83
  %112 = phi i32 [ 0, %83 ], [ %108, %106 ]
  %113 = phi double [ 0.000000e+00, %83 ], [ %107, %106 ]
  br i1 %75, label %116, label %114

114:                                              ; preds = %111
  %115 = add nsw i64 %84, -1
  br label %142

116:                                              ; preds = %111
  %117 = add nsw i32 %86, -1
  %118 = sext i32 %117 to i64
  %119 = icmp slt i64 %66, %118
  %120 = add nsw i64 %84, -1
  br label %121

121:                                              ; preds = %137, %116
  %122 = phi i64 [ 0, %116 ], [ %140, %137 ]
  %123 = phi i32 [ 0, %116 ], [ %138, %137 ]
  %124 = phi double [ 0.000000e+00, %116 ], [ %139, %137 ]
  %125 = icmp ne i64 %122, 0
  %126 = icmp slt i64 %122, %118
  %127 = and i1 %119, %126
  %128 = select i1 %125, i1 %127, i1 false
  br i1 %128, label %137, label %129

129:                                              ; preds = %121
  %130 = getelementptr inbounds ptr, ptr %63, i64 %122
  %131 = load ptr, ptr %130, align 8, !tbaa !19
  %132 = getelementptr inbounds double, ptr %131, i64 %120
  %133 = load double, ptr %132, align 8, !tbaa !7
  %134 = fcmp ogt double %133, %124
  br i1 %134, label %135, label %137

135:                                              ; preds = %129
  %136 = trunc i64 %122 to i32
  br label %137

137:                                              ; preds = %135, %129, %121
  %138 = phi i32 [ %123, %129 ], [ %136, %135 ], [ %123, %121 ]
  %139 = phi double [ %124, %129 ], [ %133, %135 ], [ %124, %121 ]
  %140 = add nuw nsw i64 %122, 1
  %141 = icmp eq i64 %140, %81
  br i1 %141, label %142, label %121, !llvm.loop !282

142:                                              ; preds = %137, %114
  %143 = phi i64 [ %115, %114 ], [ %120, %137 ]
  %144 = phi i32 [ 0, %114 ], [ %138, %137 ]
  %145 = phi double [ 0.000000e+00, %114 ], [ %139, %137 ]
  %146 = load i32, ptr @penalty, align 4, !tbaa !31
  %147 = sitofp i32 %146 to double
  %148 = fadd double %113, %147
  %149 = fadd double %145, %147
  %150 = getelementptr inbounds double, ptr %76, i64 %143
  %151 = load double, ptr %150, align 8, !tbaa !7
  %152 = getelementptr inbounds i32, ptr %78, i64 %84
  %153 = fcmp olt double %151, %148
  %154 = select i1 %153, double %148, double %151
  %155 = fcmp olt double %154, %149
  %156 = select i1 %155, double %149, double %154
  %157 = sub nsw i32 %144, %82
  %158 = trunc i64 %84 to i32
  %159 = sub nsw i32 %158, %112
  %160 = select i1 %153, i32 %159, i32 0
  %161 = select i1 %155, i32 %157, i32 %160
  store i32 %161, ptr %152, align 4, !tbaa !31
  %162 = getelementptr inbounds double, ptr %80, i64 %84
  %163 = load double, ptr %162, align 8, !tbaa !7
  %164 = fadd double %156, %163
  store double %164, ptr %162, align 8, !tbaa !7
  %165 = add nuw nsw i64 %84, 1
  %166 = load i32, ptr %5, align 4, !tbaa !31
  %167 = sext i32 %166 to i64
  %168 = icmp slt i64 %165, %167
  %169 = add nsw i32 %85, 1
  br i1 %168, label %83, label %170, !llvm.loop !283

170:                                              ; preds = %142
  %.lcssa4 = phi double [ %149, %142 ]
  %.lcssa3 = phi i32 [ %166, %142 ]
  %.lcssa2 = phi i64 [ %167, %142 ]
  store double %.lcssa4, ptr @blockAlign2.maxj, align 8, !tbaa !7
  br label %171

171:                                              ; preds = %170, %70
  %172 = phi i64 [ %71, %70 ], [ %.lcssa2, %170 ]
  %173 = phi i32 [ %65, %70 ], [ %.lcssa3, %170 ]
  %174 = phi double [ %68, %70 ], [ %.lcssa4, %170 ]
  %175 = add nuw nsw i64 %66, 1
  %176 = icmp slt i64 %175, %172
  %177 = add nsw i32 %67, 1
  br i1 %176, label %64, label %178, !llvm.loop !284

178:                                              ; preds = %171, %56, %54
  %179 = phi ptr [ %60, %56 ], [ %55, %54 ], [ %60, %171 ]
  %180 = phi i32 [ 1, %56 ], [ %32, %54 ], [ %173, %171 ]
  %181 = add nsw i32 %180, -1
  store i32 %181, ptr getelementptr inbounds ([100000 x i32], ptr @blockAlign2.result1, i64 0, i64 99999), align 4, !tbaa !31
  store i32 %181, ptr getelementptr inbounds ([100000 x i32], ptr @blockAlign2.result2, i64 0, i64 99999), align 4, !tbaa !31
  br label %182

182:                                              ; preds = %216, %178
  %183 = phi i32 [ 99999, %178 ], [ %200, %216 ]
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result1, i64 0, i64 %184
  %186 = load i32, ptr %185, align 4, !tbaa !31
  %187 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result2, i64 0, i64 %184
  %188 = load i32, ptr %187, align 4, !tbaa !31
  %189 = icmp eq i32 %186, 0
  %190 = icmp eq i32 %188, 0
  %191 = select i1 %189, i1 true, i1 %190
  br i1 %191, label %218, label %192

192:                                              ; preds = %182
  %193 = sext i32 %186 to i64
  %194 = getelementptr inbounds ptr, ptr %179, i64 %193
  %195 = load ptr, ptr %194, align 8, !tbaa !19
  %196 = sext i32 %188 to i64
  %197 = getelementptr inbounds i32, ptr %195, i64 %196
  %198 = load i32, ptr %197, align 4, !tbaa !31
  %199 = icmp eq i32 %198, 0
  %200 = add nsw i32 %183, -1
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result1, i64 0, i64 %201
  br i1 %199, label %203, label %207

203:                                              ; preds = %192
  %204 = add nsw i32 %186, -1
  store i32 %204, ptr %202, align 4, !tbaa !31
  %205 = add nsw i32 %188, -1
  %206 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result2, i64 0, i64 %201
  store i32 %205, ptr %206, align 4, !tbaa !31
  br label %216

207:                                              ; preds = %192
  %208 = icmp sgt i32 %198, 0
  %209 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result2, i64 0, i64 %201
  br i1 %208, label %210, label %213

210:                                              ; preds = %207
  %211 = add nsw i32 %186, -1
  store i32 %211, ptr %202, align 4, !tbaa !31
  %212 = sub nsw i32 %188, %198
  store i32 %212, ptr %209, align 4, !tbaa !31
  br label %216

213:                                              ; preds = %207
  %214 = add nsw i32 %198, %186
  store i32 %214, ptr %202, align 4, !tbaa !31
  %215 = add nsw i32 %188, -1
  store i32 %215, ptr %209, align 4, !tbaa !31
  br label %216

216:                                              ; preds = %213, %210, %203
  %217 = icmp ugt i32 %183, 1
  br i1 %217, label %182, label %220, !llvm.loop !285

218:                                              ; preds = %182
  %.lcssa = phi i32 [ %183, %182 ]
  %219 = icmp slt i32 %.lcssa, 100000
  br i1 %219, label %220, label %272

220:                                              ; preds = %218, %216
  %221 = phi i32 [ %.lcssa, %218 ], [ 0, %216 ]
  %222 = zext i32 %221 to i64
  br label %223

223:                                              ; preds = %268, %220
  %224 = phi i64 [ %222, %220 ], [ %270, %268 ]
  %225 = phi i32 [ 0, %220 ], [ %269, %268 ]
  %226 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result1, i64 0, i64 %224
  %227 = load i32, ptr %226, align 4, !tbaa !31
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds ptr, ptr %4, i64 %228
  %230 = load ptr, ptr %229, align 8, !tbaa !19
  %231 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result2, i64 0, i64 %224
  %232 = load i32, ptr %231, align 4, !tbaa !31
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds double, ptr %230, i64 %233
  %235 = load double, ptr %234, align 8, !tbaa !7
  %236 = fcmp oeq double %235, 0.000000e+00
  br i1 %236, label %268, label %237

237:                                              ; preds = %223
  %238 = add nsw i64 %224, -1
  %239 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result1, i64 0, i64 %238
  %240 = load i32, ptr %239, align 4, !tbaa !31
  %241 = icmp eq i32 %227, %240
  %242 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.result2, i64 0, i64 %238
  %243 = load i32, ptr %242, align 4, !tbaa !31
  br i1 %241, label %244, label %246

244:                                              ; preds = %237
  %245 = sext i32 %243 to i64
  br label %248

246:                                              ; preds = %237
  %247 = icmp eq i32 %232, %243
  br i1 %247, label %248, label %258

248:                                              ; preds = %246, %244
  %249 = phi i64 [ %245, %244 ], [ %233, %246 ]
  %250 = sext i32 %240 to i64
  %251 = getelementptr inbounds ptr, ptr %4, i64 %250
  %252 = load ptr, ptr %251, align 8, !tbaa !19
  %253 = getelementptr inbounds double, ptr %252, i64 %249
  %254 = load double, ptr %253, align 8, !tbaa !7
  %255 = fcmp ogt double %235, %254
  br i1 %255, label %256, label %258

256:                                              ; preds = %248
  %257 = add nsw i32 %225, -1
  br label %258

258:                                              ; preds = %256, %248, %246
  %259 = phi i32 [ %257, %256 ], [ %225, %248 ], [ %225, %246 ]
  %260 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.ocut1, i64 0, i64 %228
  %261 = load i32, ptr %260, align 4, !tbaa !31
  %262 = sext i32 %259 to i64
  %263 = getelementptr inbounds i32, ptr %0, i64 %262
  store i32 %261, ptr %263, align 4, !tbaa !31
  %264 = getelementptr inbounds [100000 x i32], ptr @blockAlign2.ocut2, i64 0, i64 %233
  %265 = load i32, ptr %264, align 4, !tbaa !31
  %266 = getelementptr inbounds i32, ptr %1, i64 %262
  store i32 %265, ptr %266, align 4, !tbaa !31
  %267 = add nsw i32 %259, 1
  br label %268

268:                                              ; preds = %258, %223
  %269 = phi i32 [ %225, %223 ], [ %267, %258 ]
  %270 = add nuw nsw i64 %224, 1
  %271 = icmp eq i64 %270, 100000
  br i1 %271, label %272, label %223, !llvm.loop !286

272:                                              ; preds = %268, %218
  %273 = phi i32 [ 0, %218 ], [ %269, %268 ]
  store i32 %273, ptr %5, align 4, !tbaa !31
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal float @G__align11(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #4 {
  %4 = load i32, ptr @penalty, align 4, !tbaa !31
  %5 = sitofp i32 %4 to float
  %6 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %7 = sitofp i32 %6 to float
  %8 = load i32, ptr @G__align11.orlgth1, align 4, !tbaa !31
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  %11 = load i32, ptr @njob, align 4, !tbaa !31
  %12 = tail call ptr @AllocateCharMtx(i32 noundef %11, i32 noundef 0) #35
  store ptr %12, ptr @G__align11.mseq1, align 8, !tbaa !19
  %13 = load i32, ptr @njob, align 4, !tbaa !31
  %14 = tail call ptr @AllocateCharMtx(i32 noundef %13, i32 noundef 0) #35
  store ptr %14, ptr @G__align11.mseq2, align 8, !tbaa !19
  br label %15

15:                                               ; preds = %10, %3
  %16 = load ptr, ptr %0, align 8, !tbaa !19
  %17 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %16) #40
  %18 = trunc i64 %17 to i32
  %19 = load ptr, ptr %1, align 8, !tbaa !19
  %20 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %19) #40
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %18, 1
  %23 = icmp slt i32 %21, 1
  %24 = select i1 %22, i1 true, i1 %23
  br i1 %24, label %25, label %28

25:                                               ; preds = %15
  %26 = load ptr, ptr @stderr, align 8, !tbaa !19
  %27 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %26, ptr noundef nonnull @.str.132, i32 noundef %18, i32 noundef %21) #36
  br label %28

28:                                               ; preds = %25, %15
  %29 = load i32, ptr @G__align11.orlgth1, align 4
  %30 = icmp slt i32 %29, %18
  %31 = load i32, ptr @G__align11.orlgth2, align 4
  %32 = icmp slt i32 %31, %21
  %33 = select i1 %30, i1 true, i1 %32
  br i1 %33, label %34, label %80

34:                                               ; preds = %28
  %35 = icmp sgt i32 %29, 0
  %36 = icmp sgt i32 %31, 0
  %37 = select i1 %35, i1 %36, i1 false
  br i1 %37, label %38, label %51

38:                                               ; preds = %34
  %39 = load ptr, ptr @G__align11.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %39) #35
  %40 = load ptr, ptr @G__align11.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %40) #35
  %41 = load ptr, ptr @G__align11.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @G__align11.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @G__align11.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @G__align11.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @G__align11.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %45) #35
  %46 = load ptr, ptr @G__align11.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %46) #35
  %47 = load ptr, ptr @G__align11.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %47) #35
  %48 = load ptr, ptr @G__align11.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %48) #35
  %49 = load i32, ptr @G__align11.orlgth1, align 4, !tbaa !31
  %50 = load i32, ptr @G__align11.orlgth2, align 4, !tbaa !31
  br label %51

51:                                               ; preds = %38, %34
  %52 = phi i32 [ %50, %38 ], [ %31, %34 ]
  %53 = phi i32 [ %49, %38 ], [ %29, %34 ]
  %54 = sitofp i32 %18 to double
  %55 = fmul double %54, 1.300000e+00
  %56 = fptosi double %55 to i32
  %57 = tail call i32 @llvm.smax.i32(i32 %53, i32 %56)
  %58 = add nuw nsw i32 %57, 100
  %59 = sitofp i32 %21 to double
  %60 = fmul double %59, 1.300000e+00
  %61 = fptosi double %60 to i32
  %62 = tail call i32 @llvm.smax.i32(i32 %52, i32 %61)
  %63 = add nuw nsw i32 %62, 100
  %64 = add nuw nsw i32 %62, 102
  %65 = tail call ptr @AllocateFloatVec(i32 noundef %64) #35
  store ptr %65, ptr @G__align11.w1, align 8, !tbaa !19
  %66 = tail call ptr @AllocateFloatVec(i32 noundef %64) #35
  store ptr %66, ptr @G__align11.w2, align 8, !tbaa !19
  %67 = tail call ptr @AllocateFloatVec(i32 noundef %64) #35
  store ptr %67, ptr @G__align11.match, align 8, !tbaa !19
  %68 = add nuw nsw i32 %57, 102
  %69 = tail call ptr @AllocateFloatVec(i32 noundef %68) #35
  store ptr %69, ptr @G__align11.initverticalw, align 8, !tbaa !19
  %70 = tail call ptr @AllocateFloatVec(i32 noundef %68) #35
  store ptr %70, ptr @G__align11.lastverticalw, align 8, !tbaa !19
  %71 = tail call ptr @AllocateFloatVec(i32 noundef %64) #35
  store ptr %71, ptr @G__align11.m, align 8, !tbaa !19
  %72 = tail call ptr @AllocateIntVec(i32 noundef %64) #35
  store ptr %72, ptr @G__align11.mp, align 8, !tbaa !19
  %73 = load i32, ptr @njob, align 4, !tbaa !31
  %74 = add nsw i32 %63, %58
  %75 = tail call ptr @AllocateCharMtx(i32 noundef %73, i32 noundef %74) #35
  store ptr %75, ptr @G__align11.mseq, align 8, !tbaa !19
  %76 = tail call i32 @llvm.smax.i32(i32 %58, i32 %63)
  %77 = add nuw nsw i32 %76, 2
  %78 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %77) #35
  store ptr %78, ptr @G__align11.floatwork, align 8, !tbaa !19
  %79 = tail call ptr @AllocateIntMtx(i32 noundef 26, i32 noundef %77) #35
  store ptr %79, ptr @G__align11.intwork, align 8, !tbaa !19
  store i32 %57, ptr @G__align11.orlgth1, align 4, !tbaa !31
  store i32 %62, ptr @G__align11.orlgth2, align 4, !tbaa !31
  br label %80

80:                                               ; preds = %51, %28
  %81 = phi i32 [ %31, %28 ], [ %62, %51 ]
  %82 = phi i32 [ %29, %28 ], [ %57, %51 ]
  %83 = load ptr, ptr @G__align11.mseq, align 8, !tbaa !19
  %84 = load ptr, ptr %83, align 8, !tbaa !19
  %85 = load ptr, ptr @G__align11.mseq1, align 8, !tbaa !19
  store ptr %84, ptr %85, align 8, !tbaa !19
  %86 = getelementptr inbounds ptr, ptr %83, i64 1
  %87 = load ptr, ptr %86, align 8, !tbaa !19
  %88 = load ptr, ptr @G__align11.mseq2, align 8, !tbaa !19
  store ptr %87, ptr %88, align 8, !tbaa !19
  %89 = load i32, ptr @commonAlloc1, align 4
  %90 = icmp sgt i32 %82, %89
  %91 = load i32, ptr @commonAlloc2, align 4
  %92 = icmp sgt i32 %81, %91
  %93 = select i1 %90, i1 true, i1 %92
  br i1 %93, label %96, label %94

94:                                               ; preds = %80
  %95 = load ptr, ptr @commonIP, align 8, !tbaa !19
  br label %116

96:                                               ; preds = %80
  %97 = icmp ne i32 %89, 0
  %98 = icmp ne i32 %91, 0
  %99 = select i1 %97, i1 %98, i1 false
  br i1 %99, label %100, label %106

100:                                              ; preds = %96
  %101 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %101) #35
  %102 = load i32, ptr @G__align11.orlgth1, align 4
  %103 = load i32, ptr @commonAlloc1, align 4
  %104 = load i32, ptr @G__align11.orlgth2, align 4
  %105 = load i32, ptr @commonAlloc2, align 4
  br label %106

106:                                              ; preds = %100, %96
  %107 = phi i32 [ %105, %100 ], [ %91, %96 ]
  %108 = phi i32 [ %104, %100 ], [ %81, %96 ]
  %109 = phi i32 [ %103, %100 ], [ %89, %96 ]
  %110 = phi i32 [ %102, %100 ], [ %82, %96 ]
  %111 = tail call i32 @llvm.smax.i32(i32 %110, i32 %109)
  %112 = tail call i32 @llvm.smax.i32(i32 %108, i32 %107)
  %113 = add nsw i32 %111, 10
  %114 = add nsw i32 %112, 10
  %115 = tail call ptr @AllocateIntMtx(i32 noundef %113, i32 noundef %114) #35
  store ptr %115, ptr @commonIP, align 8, !tbaa !19
  store i32 %111, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %112, ptr @commonAlloc2, align 4, !tbaa !31
  br label %116

116:                                              ; preds = %106, %94
  %117 = phi ptr [ %95, %94 ], [ %115, %106 ]
  store ptr %117, ptr @G__align11.ijp, align 8, !tbaa !19
  %118 = load ptr, ptr @G__align11.w1, align 8, !tbaa !19
  %119 = load ptr, ptr @G__align11.w2, align 8, !tbaa !19
  %120 = load ptr, ptr @G__align11.initverticalw, align 8, !tbaa !19
  %121 = load ptr, ptr %1, align 8, !tbaa !19
  %122 = load i8, ptr %121, align 1, !tbaa !17
  %123 = sext i8 %122 to i64
  %124 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %123
  %125 = icmp eq i32 %18, 0
  %126 = load ptr, ptr %0, align 8, !tbaa !19
  br i1 %125, label %140, label %127

127:                                              ; preds = %127, %116
  %128 = phi ptr [ %138, %127 ], [ %120, %116 ]
  %129 = phi ptr [ %132, %127 ], [ %126, %116 ]
  %130 = phi i32 [ %131, %127 ], [ %18, %116 ]
  %131 = add nsw i32 %130, -1
  %132 = getelementptr inbounds i8, ptr %129, i64 1
  %133 = load i8, ptr %129, align 1, !tbaa !17
  %134 = sext i8 %133 to i64
  %135 = getelementptr inbounds i32, ptr %124, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !31
  %137 = sitofp i32 %136 to float
  %138 = getelementptr inbounds float, ptr %128, i64 1
  store float %137, ptr %128, align 4, !tbaa !167
  %139 = icmp eq i32 %131, 0
  br i1 %139, label %140, label %127, !llvm.loop !287

140:                                              ; preds = %127, %116
  %141 = load i8, ptr %126, align 1, !tbaa !17
  %142 = sext i8 %141 to i64
  %143 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %142
  %144 = icmp eq i32 %21, 0
  br i1 %144, label %158, label %145

145:                                              ; preds = %145, %140
  %146 = phi ptr [ %156, %145 ], [ %118, %140 ]
  %147 = phi ptr [ %150, %145 ], [ %121, %140 ]
  %148 = phi i32 [ %149, %145 ], [ %21, %140 ]
  %149 = add nsw i32 %148, -1
  %150 = getelementptr inbounds i8, ptr %147, i64 1
  %151 = load i8, ptr %147, align 1, !tbaa !17
  %152 = sext i8 %151 to i64
  %153 = getelementptr inbounds i32, ptr %143, i64 %152
  %154 = load i32, ptr %153, align 4, !tbaa !31
  %155 = sitofp i32 %154 to float
  %156 = getelementptr inbounds float, ptr %146, i64 1
  store float %155, ptr %146, align 4, !tbaa !167
  %157 = icmp eq i32 %149, 0
  br i1 %157, label %158, label %145, !llvm.loop !287

158:                                              ; preds = %145, %140
  %159 = load i32, ptr @outgap, align 4, !tbaa !31
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %161, label %183

161:                                              ; preds = %158
  br i1 %22, label %165, label %162

162:                                              ; preds = %161
  %163 = add i64 %17, 1
  %164 = and i64 %163, 4294967295
  br label %169

165:                                              ; preds = %169, %161
  br i1 %23, label %198, label %166

166:                                              ; preds = %165
  %167 = add i64 %20, 1
  %168 = and i64 %167, 4294967295
  br label %176

169:                                              ; preds = %169, %162
  %170 = phi i64 [ 1, %162 ], [ %174, %169 ]
  %171 = getelementptr inbounds float, ptr %120, i64 %170
  %172 = load float, ptr %171, align 4, !tbaa !167
  %173 = fadd float %172, %5
  store float %173, ptr %171, align 4, !tbaa !167
  %174 = add nuw nsw i64 %170, 1
  %175 = icmp eq i64 %174, %164
  br i1 %175, label %165, label %169, !llvm.loop !288

176:                                              ; preds = %176, %166
  %177 = phi i64 [ 1, %166 ], [ %181, %176 ]
  %178 = getelementptr inbounds float, ptr %118, i64 %177
  %179 = load float, ptr %178, align 4, !tbaa !167
  %180 = fadd float %179, %5
  store float %180, ptr %178, align 4, !tbaa !167
  %181 = add nuw nsw i64 %177, 1
  %182 = icmp eq i64 %181, %168
  br i1 %182, label %183, label %176, !llvm.loop !289

183:                                              ; preds = %176, %158
  br i1 %23, label %198, label %184

184:                                              ; preds = %183
  %185 = load ptr, ptr @G__align11.m, align 8, !tbaa !19
  %186 = load ptr, ptr @G__align11.mp, align 8, !tbaa !19
  %187 = add i64 %20, 1
  %188 = and i64 %187, 4294967295
  br label %189

189:                                              ; preds = %189, %184
  %190 = phi i64 [ 1, %184 ], [ %196, %189 ]
  %191 = add nsw i64 %190, -1
  %192 = getelementptr inbounds float, ptr %118, i64 %191
  %193 = load float, ptr %192, align 4, !tbaa !167
  %194 = getelementptr inbounds float, ptr %185, i64 %190
  store float %193, ptr %194, align 4, !tbaa !167
  %195 = getelementptr inbounds i32, ptr %186, i64 %190
  store i32 0, ptr %195, align 4, !tbaa !31
  %196 = add nuw nsw i64 %190, 1
  %197 = icmp eq i64 %196, %188
  br i1 %197, label %198, label %189, !llvm.loop !290

198:                                              ; preds = %189, %183, %165
  br i1 %144, label %199, label %201

199:                                              ; preds = %198
  %200 = load ptr, ptr @G__align11.lastverticalw, align 8, !tbaa !19
  store float 0.000000e+00, ptr %200, align 4, !tbaa !167
  br label %208

201:                                              ; preds = %198
  %202 = shl i64 %20, 32
  %203 = add i64 %202, -4294967296
  %204 = ashr exact i64 %203, 32
  %205 = getelementptr inbounds float, ptr %118, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !167
  %207 = load ptr, ptr @G__align11.lastverticalw, align 8, !tbaa !19
  store float %206, ptr %207, align 4, !tbaa !167
  br label %208

208:                                              ; preds = %201, %199
  %209 = phi ptr [ %207, %201 ], [ %200, %199 ]
  %210 = load i32, ptr @outgap, align 4, !tbaa !31
  %211 = icmp ne i32 %210, 0
  %212 = zext i1 %211 to i32
  %213 = add nsw i32 %212, %18
  %214 = icmp sgt i32 %213, 1
  br i1 %214, label %215, label %313

215:                                              ; preds = %208
  %216 = load ptr, ptr @G__align11.m, align 8, !tbaa !19
  %217 = load ptr, ptr @G__align11.mp, align 8, !tbaa !19
  %218 = shl i64 %20, 32
  %219 = add i64 %218, -4294967296
  %220 = ashr exact i64 %219, 32
  %221 = add i64 %20, 1
  %222 = zext i32 %213 to i64
  %223 = and i64 %221, 4294967295
  br label %224

224:                                              ; preds = %306, %215
  %225 = phi i64 [ 1, %215 ], [ %311, %306 ]
  %226 = phi float [ 0.000000e+00, %215 ], [ %307, %306 ]
  %227 = phi ptr [ %118, %215 ], [ %228, %306 ]
  %228 = phi ptr [ %119, %215 ], [ %227, %306 ]
  %229 = add nsw i64 %225, -1
  %230 = getelementptr inbounds float, ptr %120, i64 %229
  %231 = load float, ptr %230, align 4, !tbaa !167
  store float %231, ptr %227, align 4, !tbaa !167
  %232 = getelementptr inbounds i8, ptr %126, i64 %225
  %233 = load i8, ptr %232, align 1, !tbaa !17
  %234 = sext i8 %233 to i64
  %235 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %234
  br i1 %144, label %236, label %239

236:                                              ; preds = %224
  %237 = getelementptr inbounds float, ptr %120, i64 %225
  %238 = load float, ptr %237, align 4, !tbaa !167
  store float %238, ptr %228, align 4, !tbaa !167
  br label %306

239:                                              ; preds = %239, %224
  %240 = phi ptr [ %250, %239 ], [ %228, %224 ]
  %241 = phi ptr [ %244, %239 ], [ %121, %224 ]
  %242 = phi i32 [ %243, %239 ], [ %21, %224 ]
  %243 = add nsw i32 %242, -1
  %244 = getelementptr inbounds i8, ptr %241, i64 1
  %245 = load i8, ptr %241, align 1, !tbaa !17
  %246 = sext i8 %245 to i64
  %247 = getelementptr inbounds i32, ptr %235, i64 %246
  %248 = load i32, ptr %247, align 4, !tbaa !31
  %249 = sitofp i32 %248 to float
  %250 = getelementptr inbounds float, ptr %240, i64 1
  store float %249, ptr %240, align 4, !tbaa !167
  %251 = icmp eq i32 %243, 0
  br i1 %251, label %252, label %239, !llvm.loop !287

252:                                              ; preds = %239
  %253 = getelementptr inbounds float, ptr %120, i64 %225
  %254 = load float, ptr %253, align 4, !tbaa !167
  store float %254, ptr %228, align 4, !tbaa !167
  br i1 %23, label %306, label %255

255:                                              ; preds = %252
  %256 = load float, ptr %227, align 4, !tbaa !167
  %257 = getelementptr inbounds ptr, ptr %117, i64 %225
  %258 = load ptr, ptr %257, align 8, !tbaa !19
  %259 = trunc i64 %225 to i32
  %260 = trunc i64 %229 to i32
  br label %261

261:                                              ; preds = %297, %255
  %262 = phi i64 [ 1, %255 ], [ %304, %297 ]
  %263 = phi ptr [ %228, %255 ], [ %273, %297 ]
  %264 = phi ptr [ %258, %255 ], [ %272, %297 ]
  %265 = phi ptr [ %216, %255 ], [ %271, %297 ]
  %266 = phi ptr [ %217, %255 ], [ %270, %297 ]
  %267 = phi ptr [ %227, %255 ], [ %303, %297 ]
  %268 = phi float [ %256, %255 ], [ %286, %297 ]
  %269 = phi i32 [ 0, %255 ], [ %284, %297 ]
  %270 = getelementptr inbounds i32, ptr %266, i64 1
  %271 = getelementptr inbounds float, ptr %265, i64 1
  %272 = getelementptr inbounds i32, ptr %264, i64 1
  %273 = getelementptr inbounds float, ptr %263, i64 1
  %274 = load float, ptr %267, align 4, !tbaa !167
  %275 = fadd float %268, %5
  %276 = fcmp ogt float %275, %274
  %277 = trunc i64 %262 to i32
  %278 = sub i32 %269, %277
  %279 = select i1 %276, i32 %278, i32 0
  %280 = select i1 %276, float %275, float %274
  store i32 %279, ptr %272, align 4, !tbaa !31
  %281 = fcmp ult float %274, %268
  %282 = trunc i64 %262 to i32
  %283 = add i32 %282, -1
  %284 = select i1 %281, i32 %269, i32 %283
  %285 = select i1 %281, float %268, float %274
  %286 = fadd float %285, %7
  %287 = load float, ptr %271, align 4, !tbaa !167
  %288 = fadd float %287, %5
  %289 = fcmp ogt float %288, %280
  br i1 %289, label %290, label %293

290:                                              ; preds = %261
  %291 = load i32, ptr %270, align 4, !tbaa !31
  %292 = sub nsw i32 %259, %291
  store i32 %292, ptr %272, align 4, !tbaa !31
  br label %293

293:                                              ; preds = %290, %261
  %294 = phi float [ %288, %290 ], [ %280, %261 ]
  %295 = fcmp ult float %274, %287
  br i1 %295, label %297, label %296

296:                                              ; preds = %293
  store float %274, ptr %271, align 4, !tbaa !167
  store i32 %260, ptr %270, align 4, !tbaa !31
  br label %297

297:                                              ; preds = %296, %293
  %298 = getelementptr inbounds float, ptr %216, i64 %262
  %299 = load float, ptr %298, align 4, !tbaa !167
  %300 = fadd float %299, %7
  store float %300, ptr %298, align 4, !tbaa !167
  %301 = load float, ptr %273, align 4, !tbaa !167
  %302 = fadd float %294, %301
  store float %302, ptr %273, align 4, !tbaa !167
  %303 = getelementptr inbounds float, ptr %267, i64 1
  %304 = add nuw nsw i64 %262, 1
  %305 = icmp eq i64 %304, %223
  br i1 %305, label %306, label %261, !llvm.loop !291

306:                                              ; preds = %297, %252, %236
  %307 = phi float [ %226, %252 ], [ %226, %236 ], [ %294, %297 ]
  %308 = getelementptr inbounds float, ptr %228, i64 %220
  %309 = load float, ptr %308, align 4, !tbaa !167
  %310 = getelementptr inbounds float, ptr %209, i64 %225
  store float %309, ptr %310, align 4, !tbaa !167
  %311 = add nuw nsw i64 %225, 1
  %312 = icmp eq i64 %311, %222
  br i1 %312, label %313, label %224, !llvm.loop !292

313:                                              ; preds = %306, %208
  %314 = phi float [ 0.000000e+00, %208 ], [ %307, %306 ]
  %315 = load ptr, ptr @G__align11.mseq1, align 8, !tbaa !19
  %316 = load ptr, ptr @G__align11.mseq2, align 8, !tbaa !19
  %317 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %126) #40
  %318 = trunc i64 %317 to i32
  %319 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %121) #40
  %320 = trunc i64 %319 to i32
  %321 = icmp slt i32 %318, 0
  br i1 %321, label %325, label %322

322:                                              ; preds = %313
  %323 = add i64 %317, 1
  %324 = and i64 %323, 4294967295
  br label %367

325:                                              ; preds = %367, %313
  %326 = icmp slt i32 %320, 0
  br i1 %326, label %374, label %327

327:                                              ; preds = %325
  %328 = load ptr, ptr %117, align 8, !tbaa !19
  %329 = add i64 %319, 1
  %330 = and i64 %329, 4294967295
  %331 = add nuw nsw i64 %330, 3
  %332 = and i64 %331, 8589934588
  %333 = add nsw i64 %330, -1
  %334 = insertelement <4 x i64> poison, i64 %333, i64 0
  %335 = shufflevector <4 x i64> %334, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %336

336:                                              ; preds = %363, %327
  %337 = phi i64 [ 0, %327 ], [ %364, %363 ]
  %338 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %327 ], [ %365, %363 ]
  %339 = trunc i64 %337 to i32
  %340 = icmp ule <4 x i64> %338, %335
  %341 = extractelement <4 x i1> %340, i64 0
  br i1 %341, label %342, label %345

342:                                              ; preds = %336
  %343 = getelementptr inbounds i32, ptr %328, i64 %337
  %344 = xor i32 %339, -1
  store i32 %344, ptr %343, align 4, !tbaa !31
  br label %345

345:                                              ; preds = %342, %336
  %346 = extractelement <4 x i1> %340, i64 1
  br i1 %346, label %347, label %351

347:                                              ; preds = %345
  %348 = or i64 %337, 1
  %349 = getelementptr inbounds i32, ptr %328, i64 %348
  %350 = xor i32 %339, -2
  store i32 %350, ptr %349, align 4, !tbaa !31
  br label %351

351:                                              ; preds = %347, %345
  %352 = extractelement <4 x i1> %340, i64 2
  br i1 %352, label %353, label %357

353:                                              ; preds = %351
  %354 = or i64 %337, 2
  %355 = getelementptr inbounds i32, ptr %328, i64 %354
  %356 = xor i32 %339, -3
  store i32 %356, ptr %355, align 4, !tbaa !31
  br label %357

357:                                              ; preds = %353, %351
  %358 = extractelement <4 x i1> %340, i64 3
  br i1 %358, label %359, label %363

359:                                              ; preds = %357
  %360 = or i64 %337, 3
  %361 = getelementptr inbounds i32, ptr %328, i64 %360
  %362 = xor i32 %339, -4
  store i32 %362, ptr %361, align 4, !tbaa !31
  br label %363

363:                                              ; preds = %359, %357
  %364 = add i64 %337, 4
  %365 = add <4 x i64> %338, <i64 4, i64 4, i64 4, i64 4>
  %366 = icmp eq i64 %364, %332
  br i1 %366, label %374, label %336, !llvm.loop !293

367:                                              ; preds = %367, %322
  %368 = phi i64 [ 0, %322 ], [ %369, %367 ]
  %369 = add nuw nsw i64 %368, 1
  %370 = getelementptr inbounds ptr, ptr %117, i64 %368
  %371 = load ptr, ptr %370, align 8, !tbaa !19
  %372 = trunc i64 %369 to i32
  store i32 %372, ptr %371, align 4, !tbaa !31
  %373 = icmp eq i64 %369, %324
  br i1 %373, label %325, label %367, !llvm.loop !294

374:                                              ; preds = %363, %325
  %375 = add nsw i32 %320, %318
  %376 = load ptr, ptr %315, align 8, !tbaa !19
  %377 = sext i32 %375 to i64
  %378 = getelementptr inbounds i8, ptr %376, i64 %377
  store ptr %378, ptr %315, align 8, !tbaa !19
  store i8 0, ptr %378, align 1, !tbaa !17
  %379 = load ptr, ptr %316, align 8, !tbaa !19
  %380 = getelementptr inbounds i8, ptr %379, i64 %377
  store ptr %380, ptr %316, align 8, !tbaa !19
  store i8 0, ptr %380, align 1, !tbaa !17
  %381 = icmp slt i32 %375, 0
  br i1 %381, label %470, label %382

382:                                              ; preds = %455, %374
  %383 = phi i32 [ %468, %455 ], [ 0, %374 ]
  %384 = phi i32 [ %402, %455 ], [ %318, %374 ]
  %385 = phi i32 [ %404, %455 ], [ %320, %374 ]
  %386 = sext i32 %384 to i64
  %387 = getelementptr inbounds ptr, ptr %117, i64 %386
  %388 = load ptr, ptr %387, align 8, !tbaa !19
  %389 = sext i32 %385 to i64
  %390 = getelementptr inbounds i32, ptr %388, i64 %389
  %391 = load i32, ptr %390, align 4, !tbaa !31
  %392 = icmp slt i32 %391, 0
  br i1 %392, label %393, label %395

393:                                              ; preds = %382
  %394 = add nsw i32 %384, -1
  br label %401

395:                                              ; preds = %382
  %396 = icmp eq i32 %391, 0
  br i1 %396, label %399, label %397

397:                                              ; preds = %395
  %398 = sub nsw i32 %384, %391
  br label %401

399:                                              ; preds = %395
  %400 = add nsw i32 %384, -1
  br label %401

401:                                              ; preds = %399, %397, %393
  %402 = phi i32 [ %394, %393 ], [ %398, %397 ], [ %400, %399 ]
  %403 = phi i32 [ %391, %393 ], [ -1, %397 ], [ -1, %399 ]
  %404 = add nsw i32 %403, %385
  %405 = xor i32 %402, -1
  %406 = add i32 %384, %405
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %428, label %408

408:                                              ; preds = %401
  %409 = sext i32 %406 to i64
  %410 = sext i32 %402 to i64
  %411 = add i32 %384, -1
  br label %412

412:                                              ; preds = %412, %408
  %413 = phi i64 [ %409, %408 ], [ %422, %412 ]
  %414 = load ptr, ptr %0, align 8, !tbaa !19
  %415 = add nsw i64 %413, %410
  %416 = getelementptr inbounds i8, ptr %414, i64 %415
  %417 = load i8, ptr %416, align 1, !tbaa !17
  %418 = load ptr, ptr %315, align 8, !tbaa !19
  %419 = getelementptr inbounds i8, ptr %418, i64 -1
  store ptr %419, ptr %315, align 8, !tbaa !19
  store i8 %417, ptr %419, align 1, !tbaa !17
  %420 = load ptr, ptr %316, align 8, !tbaa !19
  %421 = getelementptr inbounds i8, ptr %420, i64 -1
  store ptr %421, ptr %316, align 8, !tbaa !19
  store i8 45, ptr %421, align 1, !tbaa !17
  %422 = add nsw i64 %413, -1
  %423 = and i64 %422, 4294967295
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %425, label %412, !llvm.loop !295

425:                                              ; preds = %412
  %426 = add i32 %411, %383
  %427 = sub i32 %426, %402
  br label %428

428:                                              ; preds = %425, %401
  %429 = phi i32 [ %383, %401 ], [ %427, %425 ]
  %430 = icmp eq i32 %403, -1
  br i1 %430, label %450, label %431

431:                                              ; preds = %428
  %432 = xor i32 %403, -1
  %433 = sext i32 %432 to i64
  %434 = sext i32 %404 to i64
  br label %435

435:                                              ; preds = %435, %431
  %436 = phi i64 [ %433, %431 ], [ %447, %435 ]
  %437 = phi i32 [ %429, %431 ], [ %446, %435 ]
  %438 = load ptr, ptr %315, align 8, !tbaa !19
  %439 = getelementptr inbounds i8, ptr %438, i64 -1
  store ptr %439, ptr %315, align 8, !tbaa !19
  store i8 45, ptr %439, align 1, !tbaa !17
  %440 = load ptr, ptr %1, align 8, !tbaa !19
  %441 = add nsw i64 %436, %434
  %442 = getelementptr inbounds i8, ptr %440, i64 %441
  %443 = load i8, ptr %442, align 1, !tbaa !17
  %444 = load ptr, ptr %316, align 8, !tbaa !19
  %445 = getelementptr inbounds i8, ptr %444, i64 -1
  store ptr %445, ptr %316, align 8, !tbaa !19
  store i8 %443, ptr %445, align 1, !tbaa !17
  %446 = add nsw i32 %437, 1
  %447 = add nsw i64 %436, -1
  %448 = and i64 %447, 4294967295
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %450, label %435, !llvm.loop !296

450:                                              ; preds = %435, %428
  %451 = phi i32 [ %429, %428 ], [ %446, %435 ]
  %452 = icmp slt i32 %384, 1
  %453 = icmp slt i32 %385, 1
  %454 = or i1 %452, %453
  br i1 %454, label %470, label %455

455:                                              ; preds = %450
  %456 = load ptr, ptr %0, align 8, !tbaa !19
  %457 = sext i32 %402 to i64
  %458 = getelementptr inbounds i8, ptr %456, i64 %457
  %459 = load i8, ptr %458, align 1, !tbaa !17
  %460 = load ptr, ptr %315, align 8, !tbaa !19
  %461 = getelementptr inbounds i8, ptr %460, i64 -1
  store ptr %461, ptr %315, align 8, !tbaa !19
  store i8 %459, ptr %461, align 1, !tbaa !17
  %462 = load ptr, ptr %1, align 8, !tbaa !19
  %463 = sext i32 %404 to i64
  %464 = getelementptr inbounds i8, ptr %462, i64 %463
  %465 = load i8, ptr %464, align 1, !tbaa !17
  %466 = load ptr, ptr %316, align 8, !tbaa !19
  %467 = getelementptr inbounds i8, ptr %466, i64 -1
  store ptr %467, ptr %316, align 8, !tbaa !19
  store i8 %465, ptr %467, align 1, !tbaa !17
  %468 = add nsw i32 %451, 2
  %469 = icmp sgt i32 %468, %375
  br i1 %469, label %470, label %382, !llvm.loop !297

470:                                              ; preds = %455, %450, %374
  %471 = load ptr, ptr %315, align 8, !tbaa !19
  %472 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %471) #40
  %473 = trunc i64 %472 to i32
  %474 = icmp sgt i32 %473, %2
  %475 = icmp sgt i32 %473, 5000000
  %476 = or i1 %474, %475
  br i1 %476, label %477, label %483

477:                                              ; preds = %470
  %478 = load ptr, ptr @stderr, align 8, !tbaa !19
  %479 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %478, ptr noundef nonnull @.str.1.133, i32 noundef %2, i32 noundef %473, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.2.134) #35
  %480 = load ptr, ptr @G__align11.mseq1, align 8, !tbaa !19
  %481 = load ptr, ptr %480, align 8, !tbaa !19
  %482 = load ptr, ptr @G__align11.mseq2, align 8, !tbaa !19
  br label %483

483:                                              ; preds = %477, %470
  %484 = phi ptr [ %316, %470 ], [ %482, %477 ]
  %485 = phi ptr [ %471, %470 ], [ %481, %477 ]
  %486 = load ptr, ptr %0, align 8, !tbaa !19
  %487 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %486, ptr noundef nonnull dereferenceable(1) %485) #35
  %488 = load ptr, ptr %1, align 8, !tbaa !19
  %489 = load ptr, ptr %484, align 8, !tbaa !19
  %490 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %488, ptr noundef nonnull dereferenceable(1) %489) #35
  ret float %314
}

; Function Attrs: nounwind optsize uwtable
define internal float @G__align11_noalign(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, i32 noundef %5) #4 {
  %7 = sitofp i32 %1 to float
  %8 = sitofp i32 %2 to float
  %9 = load ptr, ptr %3, align 8, !tbaa !19
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9) #40
  %11 = trunc i64 %10 to i32
  %12 = load ptr, ptr %4, align 8, !tbaa !19
  %13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %12) #40
  %14 = trunc i64 %13 to i32
  %15 = icmp slt i32 %11, 1
  %16 = icmp slt i32 %14, 1
  %17 = select i1 %15, i1 true, i1 %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %6
  %19 = load ptr, ptr @stderr, align 8, !tbaa !19
  %20 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %19, ptr noundef nonnull @.str.132, i32 noundef %11, i32 noundef %14) #36
  br label %21

21:                                               ; preds = %18, %6
  %22 = load i32, ptr @G__align11_noalign.orlgth1, align 4, !tbaa !31
  %23 = icmp slt i32 %22, %11
  %24 = load i32, ptr @G__align11_noalign.orlgth2, align 4
  %25 = icmp slt i32 %24, %14
  %26 = select i1 %23, i1 true, i1 %25
  br i1 %26, label %27, label %67

27:                                               ; preds = %21
  %28 = icmp sgt i32 %22, 0
  %29 = icmp sgt i32 %24, 0
  %30 = select i1 %28, i1 %29, i1 false
  br i1 %30, label %31, label %42

31:                                               ; preds = %27
  %32 = load ptr, ptr @G__align11_noalign.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %32) #35
  %33 = load ptr, ptr @G__align11_noalign.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %33) #35
  %34 = load ptr, ptr @G__align11_noalign.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %34) #35
  %35 = load ptr, ptr @G__align11_noalign.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %35) #35
  %36 = load ptr, ptr @G__align11_noalign.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %36) #35
  %37 = load ptr, ptr @G__align11_noalign.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %37) #35
  %38 = load ptr, ptr @G__align11_noalign.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %38) #35
  %39 = load ptr, ptr @G__align11_noalign.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %39) #35
  %40 = load i32, ptr @G__align11_noalign.orlgth1, align 4, !tbaa !31
  %41 = load i32, ptr @G__align11_noalign.orlgth2, align 4, !tbaa !31
  br label %42

42:                                               ; preds = %31, %27
  %43 = phi i32 [ %41, %31 ], [ %24, %27 ]
  %44 = phi i32 [ %40, %31 ], [ %22, %27 ]
  %45 = sitofp i32 %11 to double
  %46 = fmul double %45, 1.300000e+00
  %47 = fptosi double %46 to i32
  %48 = tail call i32 @llvm.smax.i32(i32 %44, i32 %47)
  %49 = add nuw nsw i32 %48, 100
  %50 = sitofp i32 %14 to double
  %51 = fmul double %50, 1.300000e+00
  %52 = fptosi double %51 to i32
  %53 = tail call i32 @llvm.smax.i32(i32 %43, i32 %52)
  %54 = add nuw nsw i32 %53, 100
  %55 = add nuw nsw i32 %53, 102
  %56 = tail call ptr @AllocateFloatVec(i32 noundef %55) #35
  store ptr %56, ptr @G__align11_noalign.w1, align 8, !tbaa !19
  %57 = tail call ptr @AllocateFloatVec(i32 noundef %55) #35
  store ptr %57, ptr @G__align11_noalign.w2, align 8, !tbaa !19
  %58 = tail call ptr @AllocateFloatVec(i32 noundef %55) #35
  store ptr %58, ptr @G__align11_noalign.match, align 8, !tbaa !19
  %59 = add nuw nsw i32 %48, 102
  %60 = tail call ptr @AllocateFloatVec(i32 noundef %59) #35
  store ptr %60, ptr @G__align11_noalign.initverticalw, align 8, !tbaa !19
  %61 = tail call ptr @AllocateFloatVec(i32 noundef %59) #35
  store ptr %61, ptr @G__align11_noalign.lastverticalw, align 8, !tbaa !19
  %62 = tail call ptr @AllocateFloatVec(i32 noundef %55) #35
  store ptr %62, ptr @G__align11_noalign.m, align 8, !tbaa !19
  %63 = tail call i32 @llvm.smax.i32(i32 %49, i32 %54)
  %64 = add nuw nsw i32 %63, 2
  %65 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %64) #35
  store ptr %65, ptr @G__align11_noalign.floatwork, align 8, !tbaa !19
  %66 = tail call ptr @AllocateIntMtx(i32 noundef 26, i32 noundef %64) #35
  store ptr %66, ptr @G__align11_noalign.intwork, align 8, !tbaa !19
  store i32 %48, ptr @G__align11_noalign.orlgth1, align 4, !tbaa !31
  store i32 %53, ptr @G__align11_noalign.orlgth2, align 4, !tbaa !31
  br label %67

67:                                               ; preds = %42, %21
  %68 = load ptr, ptr @G__align11_noalign.w1, align 8, !tbaa !19
  %69 = load ptr, ptr @G__align11_noalign.w2, align 8, !tbaa !19
  %70 = load ptr, ptr @G__align11_noalign.initverticalw, align 8, !tbaa !19
  %71 = load ptr, ptr %4, align 8, !tbaa !19
  %72 = load i8, ptr %71, align 1, !tbaa !17
  %73 = sext i8 %72 to i64
  %74 = getelementptr inbounds [128 x i32], ptr %0, i64 %73
  %75 = icmp eq i32 %11, 0
  %76 = load ptr, ptr %3, align 8, !tbaa !19
  br i1 %75, label %90, label %77

77:                                               ; preds = %77, %67
  %78 = phi ptr [ %88, %77 ], [ %70, %67 ]
  %79 = phi ptr [ %82, %77 ], [ %76, %67 ]
  %80 = phi i32 [ %81, %77 ], [ %11, %67 ]
  %81 = add nsw i32 %80, -1
  %82 = getelementptr inbounds i8, ptr %79, i64 1
  %83 = load i8, ptr %79, align 1, !tbaa !17
  %84 = sext i8 %83 to i64
  %85 = getelementptr inbounds i32, ptr %74, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !31
  %87 = sitofp i32 %86 to float
  %88 = getelementptr inbounds float, ptr %78, i64 1
  store float %87, ptr %78, align 4, !tbaa !167
  %89 = icmp eq i32 %81, 0
  br i1 %89, label %90, label %77, !llvm.loop !298

90:                                               ; preds = %77, %67
  %91 = load i8, ptr %76, align 1, !tbaa !17
  %92 = sext i8 %91 to i64
  %93 = getelementptr inbounds [128 x i32], ptr %0, i64 %92
  %94 = icmp eq i32 %14, 0
  br i1 %94, label %108, label %95

95:                                               ; preds = %95, %90
  %96 = phi ptr [ %106, %95 ], [ %68, %90 ]
  %97 = phi ptr [ %100, %95 ], [ %71, %90 ]
  %98 = phi i32 [ %99, %95 ], [ %14, %90 ]
  %99 = add nsw i32 %98, -1
  %100 = getelementptr inbounds i8, ptr %97, i64 1
  %101 = load i8, ptr %97, align 1, !tbaa !17
  %102 = sext i8 %101 to i64
  %103 = getelementptr inbounds i32, ptr %93, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !31
  %105 = sitofp i32 %104 to float
  %106 = getelementptr inbounds float, ptr %96, i64 1
  store float %105, ptr %96, align 4, !tbaa !167
  %107 = icmp eq i32 %99, 0
  br i1 %107, label %108, label %95, !llvm.loop !298

108:                                              ; preds = %95, %90
  %109 = load i32, ptr @outgap, align 4, !tbaa !31
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %111, label %133

111:                                              ; preds = %108
  br i1 %15, label %115, label %112

112:                                              ; preds = %111
  %113 = add i64 %10, 1
  %114 = and i64 %113, 4294967295
  br label %119

115:                                              ; preds = %119, %111
  br i1 %16, label %146, label %116

116:                                              ; preds = %115
  %117 = add i64 %13, 1
  %118 = and i64 %117, 4294967295
  br label %126

119:                                              ; preds = %119, %112
  %120 = phi i64 [ 1, %112 ], [ %124, %119 ]
  %121 = getelementptr inbounds float, ptr %70, i64 %120
  %122 = load float, ptr %121, align 4, !tbaa !167
  %123 = fadd float %122, %7
  store float %123, ptr %121, align 4, !tbaa !167
  %124 = add nuw nsw i64 %120, 1
  %125 = icmp eq i64 %124, %114
  br i1 %125, label %115, label %119, !llvm.loop !299

126:                                              ; preds = %126, %116
  %127 = phi i64 [ 1, %116 ], [ %131, %126 ]
  %128 = getelementptr inbounds float, ptr %68, i64 %127
  %129 = load float, ptr %128, align 4, !tbaa !167
  %130 = fadd float %129, %7
  store float %130, ptr %128, align 4, !tbaa !167
  %131 = add nuw nsw i64 %127, 1
  %132 = icmp eq i64 %131, %118
  br i1 %132, label %133, label %126, !llvm.loop !300

133:                                              ; preds = %126, %108
  br i1 %16, label %146, label %134

134:                                              ; preds = %133
  %135 = load ptr, ptr @G__align11_noalign.m, align 8, !tbaa !19
  %136 = add i64 %13, 1
  %137 = and i64 %136, 4294967295
  br label %138

138:                                              ; preds = %138, %134
  %139 = phi i64 [ 1, %134 ], [ %144, %138 ]
  %140 = add nsw i64 %139, -1
  %141 = getelementptr inbounds float, ptr %68, i64 %140
  %142 = load float, ptr %141, align 4, !tbaa !167
  %143 = getelementptr inbounds float, ptr %135, i64 %139
  store float %142, ptr %143, align 4, !tbaa !167
  %144 = add nuw nsw i64 %139, 1
  %145 = icmp eq i64 %144, %137
  br i1 %145, label %146, label %138, !llvm.loop !301

146:                                              ; preds = %138, %133, %115
  br i1 %94, label %147, label %149

147:                                              ; preds = %146
  %148 = load ptr, ptr @G__align11_noalign.lastverticalw, align 8, !tbaa !19
  store float 0.000000e+00, ptr %148, align 4, !tbaa !167
  br label %156

149:                                              ; preds = %146
  %150 = shl i64 %13, 32
  %151 = add i64 %150, -4294967296
  %152 = ashr exact i64 %151, 32
  %153 = getelementptr inbounds float, ptr %68, i64 %152
  %154 = load float, ptr %153, align 4, !tbaa !167
  %155 = load ptr, ptr @G__align11_noalign.lastverticalw, align 8, !tbaa !19
  store float %154, ptr %155, align 4, !tbaa !167
  br label %156

156:                                              ; preds = %149, %147
  %157 = phi ptr [ %155, %149 ], [ %148, %147 ]
  %158 = icmp ne i32 %109, 0
  %159 = zext i1 %158 to i32
  %160 = add nsw i32 %159, %11
  %161 = icmp sgt i32 %160, 1
  br i1 %161, label %162, label %240

162:                                              ; preds = %156
  %163 = load ptr, ptr @G__align11_noalign.m, align 8, !tbaa !19
  %164 = shl i64 %13, 32
  %165 = add i64 %164, -4294967296
  %166 = ashr exact i64 %165, 32
  %167 = add i64 %13, 1
  %168 = zext i32 %160 to i64
  %169 = and i64 %167, 4294967295
  br label %170

170:                                              ; preds = %233, %162
  %171 = phi i64 [ 1, %162 ], [ %238, %233 ]
  %172 = phi float [ 0.000000e+00, %162 ], [ %234, %233 ]
  %173 = phi ptr [ %69, %162 ], [ %174, %233 ]
  %174 = phi ptr [ %68, %162 ], [ %173, %233 ]
  %175 = add nsw i64 %171, -1
  %176 = getelementptr inbounds float, ptr %70, i64 %175
  %177 = load float, ptr %176, align 4, !tbaa !167
  store float %177, ptr %174, align 4, !tbaa !167
  %178 = getelementptr inbounds i8, ptr %76, i64 %171
  %179 = load i8, ptr %178, align 1, !tbaa !17
  %180 = sext i8 %179 to i64
  %181 = getelementptr inbounds [128 x i32], ptr %0, i64 %180
  br i1 %94, label %182, label %185

182:                                              ; preds = %170
  %183 = getelementptr inbounds float, ptr %70, i64 %171
  %184 = load float, ptr %183, align 4, !tbaa !167
  store float %184, ptr %173, align 4, !tbaa !167
  br label %233

185:                                              ; preds = %185, %170
  %186 = phi ptr [ %196, %185 ], [ %173, %170 ]
  %187 = phi ptr [ %190, %185 ], [ %71, %170 ]
  %188 = phi i32 [ %189, %185 ], [ %14, %170 ]
  %189 = add nsw i32 %188, -1
  %190 = getelementptr inbounds i8, ptr %187, i64 1
  %191 = load i8, ptr %187, align 1, !tbaa !17
  %192 = sext i8 %191 to i64
  %193 = getelementptr inbounds i32, ptr %181, i64 %192
  %194 = load i32, ptr %193, align 4, !tbaa !31
  %195 = sitofp i32 %194 to float
  %196 = getelementptr inbounds float, ptr %186, i64 1
  store float %195, ptr %186, align 4, !tbaa !167
  %197 = icmp eq i32 %189, 0
  br i1 %197, label %198, label %185, !llvm.loop !298

198:                                              ; preds = %185
  %199 = getelementptr inbounds float, ptr %70, i64 %171
  %200 = load float, ptr %199, align 4, !tbaa !167
  store float %200, ptr %173, align 4, !tbaa !167
  br i1 %16, label %233, label %201

201:                                              ; preds = %198
  %202 = load float, ptr %174, align 4, !tbaa !167
  br label %203

203:                                              ; preds = %224, %201
  %204 = phi i64 [ %231, %224 ], [ 1, %201 ]
  %205 = phi ptr [ %210, %224 ], [ %173, %201 ]
  %206 = phi ptr [ %209, %224 ], [ %163, %201 ]
  %207 = phi ptr [ %230, %224 ], [ %174, %201 ]
  %208 = phi float [ %217, %224 ], [ %202, %201 ]
  %209 = getelementptr inbounds float, ptr %206, i64 1
  %210 = getelementptr inbounds float, ptr %205, i64 1
  %211 = load float, ptr %207, align 4, !tbaa !167
  %212 = fadd float %208, %7
  %213 = fcmp ogt float %212, %211
  %214 = select i1 %213, float %212, float %211
  %215 = fcmp oge float %211, %208
  %216 = select i1 %215, float %211, float %208
  %217 = fadd float %216, %8
  %218 = load float, ptr %209, align 4, !tbaa !167
  %219 = fadd float %218, %7
  %220 = fcmp ogt float %219, %214
  %221 = select i1 %220, float %219, float %214
  %222 = fcmp ult float %211, %218
  br i1 %222, label %224, label %223

223:                                              ; preds = %203
  store float %211, ptr %209, align 4, !tbaa !167
  br label %224

224:                                              ; preds = %223, %203
  %225 = getelementptr inbounds float, ptr %163, i64 %204
  %226 = load float, ptr %225, align 4, !tbaa !167
  %227 = fadd float %226, %8
  store float %227, ptr %225, align 4, !tbaa !167
  %228 = load float, ptr %210, align 4, !tbaa !167
  %229 = fadd float %221, %228
  store float %229, ptr %210, align 4, !tbaa !167
  %230 = getelementptr inbounds float, ptr %207, i64 1
  %231 = add nuw nsw i64 %204, 1
  %232 = icmp eq i64 %231, %169
  br i1 %232, label %233, label %203, !llvm.loop !302

233:                                              ; preds = %224, %198, %182
  %234 = phi float [ %172, %198 ], [ %172, %182 ], [ %221, %224 ]
  %235 = getelementptr inbounds float, ptr %173, i64 %166
  %236 = load float, ptr %235, align 4, !tbaa !167
  %237 = getelementptr inbounds float, ptr %157, i64 %171
  store float %236, ptr %237, align 4, !tbaa !167
  %238 = add nuw nsw i64 %171, 1
  %239 = icmp eq i64 %238, %168
  br i1 %239, label %240, label %170, !llvm.loop !303

240:                                              ; preds = %233, %156
  %241 = phi float [ 0.000000e+00, %156 ], [ %234, %233 ]
  ret float %241
}

; Function Attrs: nounwind optsize uwtable
define internal float @genL__align11(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) #4 {
  %6 = load i32, ptr @penalty, align 4, !tbaa !31
  %7 = sitofp i32 %6 to float
  %8 = load i32, ptr @penalty_OP, align 4, !tbaa !31
  %9 = sitofp i32 %8 to float
  %10 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %11 = sitofp i32 %10 to float
  %12 = load i32, ptr @offset, align 4, !tbaa !31
  %13 = sitofp i32 %12 to float
  %14 = fneg float %13
  %15 = load i32, ptr @genL__align11.orlgth1, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %5
  %18 = load i32, ptr @njob, align 4, !tbaa !31
  %19 = tail call ptr @AllocateCharMtx(i32 noundef %18, i32 noundef 0) #35
  store ptr %19, ptr @genL__align11.mseq1, align 8, !tbaa !19
  %20 = load i32, ptr @njob, align 4, !tbaa !31
  %21 = tail call ptr @AllocateCharMtx(i32 noundef %20, i32 noundef 0) #35
  store ptr %21, ptr @genL__align11.mseq2, align 8, !tbaa !19
  %22 = load i32, ptr @genL__align11.orlgth1, align 4
  br label %23

23:                                               ; preds = %17, %5
  %24 = phi i32 [ %22, %17 ], [ %15, %5 ]
  %25 = load ptr, ptr %0, align 8, !tbaa !19
  %26 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %25) #40
  %27 = trunc i64 %26 to i32
  %28 = load ptr, ptr %1, align 8, !tbaa !19
  %29 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %28) #40
  %30 = trunc i64 %29 to i32
  %31 = icmp slt i32 %24, %27
  %32 = load i32, ptr @genL__align11.orlgth2, align 4
  %33 = icmp slt i32 %32, %30
  %34 = select i1 %31, i1 true, i1 %33
  br i1 %34, label %35, label %89

35:                                               ; preds = %23
  %36 = icmp sgt i32 %24, 0
  %37 = icmp sgt i32 %32, 0
  %38 = select i1 %36, i1 %37, i1 false
  br i1 %38, label %39, label %56

39:                                               ; preds = %35
  %40 = load ptr, ptr @genL__align11.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %40) #35
  %41 = load ptr, ptr @genL__align11.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @genL__align11.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @genL__align11.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @genL__align11.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @genL__align11.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %45) #35
  %46 = load ptr, ptr @genL__align11.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %46) #35
  %47 = load ptr, ptr @genL__align11.largeM, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %47) #35
  %48 = load ptr, ptr @genL__align11.Mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %48) #35
  %49 = load ptr, ptr @genL__align11.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %49) #35
  %50 = load ptr, ptr @genL__align11.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %50) #35
  %51 = load ptr, ptr @genL__align11.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %51) #35
  %52 = load ptr, ptr @genL__align11.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %52) #35
  %53 = load ptr, ptr @genL__align11.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %53) #35
  %54 = load i32, ptr @genL__align11.orlgth1, align 4, !tbaa !31
  %55 = load i32, ptr @genL__align11.orlgth2, align 4, !tbaa !31
  br label %56

56:                                               ; preds = %39, %35
  %57 = phi i32 [ %55, %39 ], [ %32, %35 ]
  %58 = phi i32 [ %54, %39 ], [ %24, %35 ]
  %59 = sitofp i32 %27 to double
  %60 = fmul double %59, 1.300000e+00
  %61 = fptosi double %60 to i32
  %62 = tail call i32 @llvm.smax.i32(i32 %58, i32 %61)
  %63 = add nuw nsw i32 %62, 100
  %64 = sitofp i32 %30 to double
  %65 = fmul double %64, 1.300000e+00
  %66 = fptosi double %65 to i32
  %67 = tail call i32 @llvm.smax.i32(i32 %57, i32 %66)
  %68 = add nuw nsw i32 %67, 100
  %69 = add nuw nsw i32 %67, 102
  %70 = tail call ptr @AllocateFloatVec(i32 noundef %69) #35
  store ptr %70, ptr @genL__align11.w1, align 8, !tbaa !19
  %71 = tail call ptr @AllocateFloatVec(i32 noundef %69) #35
  store ptr %71, ptr @genL__align11.w2, align 8, !tbaa !19
  %72 = tail call ptr @AllocateFloatVec(i32 noundef %69) #35
  store ptr %72, ptr @genL__align11.match, align 8, !tbaa !19
  %73 = add nuw nsw i32 %62, 102
  %74 = tail call ptr @AllocateFloatVec(i32 noundef %73) #35
  store ptr %74, ptr @genL__align11.initverticalw, align 8, !tbaa !19
  %75 = tail call ptr @AllocateFloatVec(i32 noundef %73) #35
  store ptr %75, ptr @genL__align11.lastverticalw, align 8, !tbaa !19
  %76 = tail call ptr @AllocateFloatVec(i32 noundef %69) #35
  store ptr %76, ptr @genL__align11.m, align 8, !tbaa !19
  %77 = tail call ptr @AllocateIntVec(i32 noundef %69) #35
  store ptr %77, ptr @genL__align11.mp, align 8, !tbaa !19
  %78 = tail call ptr @AllocateFloatVec(i32 noundef %69) #35
  store ptr %78, ptr @genL__align11.largeM, align 8, !tbaa !19
  %79 = tail call ptr @AllocateIntVec(i32 noundef %69) #35
  store ptr %79, ptr @genL__align11.Mp, align 8, !tbaa !19
  %80 = load i32, ptr @njob, align 4, !tbaa !31
  %81 = add nsw i32 %68, %63
  %82 = tail call ptr @AllocateCharMtx(i32 noundef %80, i32 noundef %81) #35
  store ptr %82, ptr @genL__align11.mseq, align 8, !tbaa !19
  %83 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %73) #35
  store ptr %83, ptr @genL__align11.cpmx1, align 8, !tbaa !19
  %84 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %69) #35
  store ptr %84, ptr @genL__align11.cpmx2, align 8, !tbaa !19
  %85 = tail call i32 @llvm.smax.i32(i32 %63, i32 %68)
  %86 = add nuw nsw i32 %85, 2
  %87 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %86) #35
  store ptr %87, ptr @genL__align11.floatwork, align 8, !tbaa !19
  %88 = tail call ptr @AllocateIntMtx(i32 noundef 26, i32 noundef %86) #35
  store ptr %88, ptr @genL__align11.intwork, align 8, !tbaa !19
  store i32 %62, ptr @genL__align11.orlgth1, align 4, !tbaa !31
  store i32 %67, ptr @genL__align11.orlgth2, align 4, !tbaa !31
  br label %89

89:                                               ; preds = %56, %23
  %90 = phi i32 [ %32, %23 ], [ %67, %56 ]
  %91 = phi i32 [ %24, %23 ], [ %62, %56 ]
  %92 = load ptr, ptr @genL__align11.mseq, align 8, !tbaa !19
  %93 = load ptr, ptr %92, align 8, !tbaa !19
  %94 = load ptr, ptr @genL__align11.mseq1, align 8, !tbaa !19
  store ptr %93, ptr %94, align 8, !tbaa !19
  %95 = getelementptr inbounds ptr, ptr %92, i64 1
  %96 = load ptr, ptr %95, align 8, !tbaa !19
  %97 = load ptr, ptr @genL__align11.mseq2, align 8, !tbaa !19
  store ptr %96, ptr %97, align 8, !tbaa !19
  %98 = load i32, ptr @commonAlloc1, align 4
  %99 = icmp sgt i32 %91, %98
  %100 = load i32, ptr @commonAlloc2, align 4
  %101 = icmp sgt i32 %90, %100
  %102 = select i1 %99, i1 true, i1 %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %89
  %104 = load ptr, ptr @commonJP, align 8, !tbaa !19
  br label %127

105:                                              ; preds = %89
  %106 = icmp ne i32 %98, 0
  %107 = icmp ne i32 %100, 0
  %108 = select i1 %106, i1 %107, i1 false
  br i1 %108, label %109, label %116

109:                                              ; preds = %105
  %110 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %110) #35
  %111 = load ptr, ptr @commonJP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %111) #35
  %112 = load i32, ptr @genL__align11.orlgth1, align 4
  %113 = load i32, ptr @commonAlloc1, align 4
  %114 = load i32, ptr @genL__align11.orlgth2, align 4
  %115 = load i32, ptr @commonAlloc2, align 4
  br label %116

116:                                              ; preds = %109, %105
  %117 = phi i32 [ %115, %109 ], [ %100, %105 ]
  %118 = phi i32 [ %114, %109 ], [ %90, %105 ]
  %119 = phi i32 [ %113, %109 ], [ %98, %105 ]
  %120 = phi i32 [ %112, %109 ], [ %91, %105 ]
  %121 = tail call i32 @llvm.smax.i32(i32 %120, i32 %119)
  %122 = tail call i32 @llvm.smax.i32(i32 %118, i32 %117)
  %123 = add nsw i32 %121, 10
  %124 = add nsw i32 %122, 10
  %125 = tail call ptr @AllocateIntMtx(i32 noundef %123, i32 noundef %124) #35
  store ptr %125, ptr @commonIP, align 8, !tbaa !19
  %126 = tail call ptr @AllocateIntMtx(i32 noundef %123, i32 noundef %124) #35
  store ptr %126, ptr @commonJP, align 8, !tbaa !19
  store i32 %121, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %122, ptr @commonAlloc2, align 4, !tbaa !31
  br label %127

127:                                              ; preds = %116, %103
  %128 = phi ptr [ %104, %103 ], [ %126, %116 ]
  %129 = load ptr, ptr @commonIP, align 8, !tbaa !19
  store ptr %129, ptr @genL__align11.ijpi, align 8, !tbaa !19
  store ptr %128, ptr @genL__align11.ijpj, align 8, !tbaa !19
  %130 = load ptr, ptr @genL__align11.w1, align 8, !tbaa !19
  %131 = load ptr, ptr @genL__align11.w2, align 8, !tbaa !19
  %132 = load ptr, ptr @genL__align11.initverticalw, align 8, !tbaa !19
  %133 = icmp eq i32 %27, 0
  br i1 %133, label %152, label %134

134:                                              ; preds = %127
  %135 = load ptr, ptr %0, align 8, !tbaa !19
  %136 = load ptr, ptr %1, align 8, !tbaa !19
  %137 = load i8, ptr %136, align 1, !tbaa !17
  %138 = sext i8 %137 to i64
  br label %139

139:                                              ; preds = %139, %134
  %140 = phi ptr [ %135, %134 ], [ %144, %139 ]
  %141 = phi ptr [ %132, %134 ], [ %150, %139 ]
  %142 = phi i32 [ %27, %134 ], [ %143, %139 ]
  %143 = add nsw i32 %142, -1
  %144 = getelementptr inbounds i8, ptr %140, i64 1
  %145 = load i8, ptr %140, align 1, !tbaa !17
  %146 = sext i8 %145 to i64
  %147 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %138, i64 %146
  %148 = load i32, ptr %147, align 4, !tbaa !31
  %149 = sitofp i32 %148 to float
  %150 = getelementptr inbounds float, ptr %141, i64 1
  store float %149, ptr %141, align 4, !tbaa !167
  %151 = icmp eq i32 %143, 0
  br i1 %151, label %152, label %139, !llvm.loop !304

152:                                              ; preds = %139, %127
  %153 = icmp eq i32 %30, 0
  br i1 %153, label %193, label %154

154:                                              ; preds = %152
  %155 = load ptr, ptr %1, align 8, !tbaa !19
  %156 = load ptr, ptr %0, align 8, !tbaa !19
  %157 = load i8, ptr %156, align 1, !tbaa !17
  %158 = sext i8 %157 to i64
  br label %159

159:                                              ; preds = %159, %154
  %160 = phi ptr [ %155, %154 ], [ %164, %159 ]
  %161 = phi ptr [ %130, %154 ], [ %170, %159 ]
  %162 = phi i32 [ %30, %154 ], [ %163, %159 ]
  %163 = add nsw i32 %162, -1
  %164 = getelementptr inbounds i8, ptr %160, i64 1
  %165 = load i8, ptr %160, align 1, !tbaa !17
  %166 = sext i8 %165 to i64
  %167 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %158, i64 %166
  %168 = load i32, ptr %167, align 4, !tbaa !31
  %169 = sitofp i32 %168 to float
  %170 = getelementptr inbounds float, ptr %161, i64 1
  store float %169, ptr %161, align 4, !tbaa !167
  %171 = icmp eq i32 %163, 0
  br i1 %171, label %172, label %159, !llvm.loop !304

172:                                              ; preds = %159
  %173 = icmp slt i32 %30, 1
  br i1 %173, label %193, label %174

174:                                              ; preds = %172
  %175 = load ptr, ptr @genL__align11.m, align 8, !tbaa !19
  %176 = load ptr, ptr @genL__align11.mp, align 8, !tbaa !19
  %177 = load ptr, ptr @genL__align11.largeM, align 8, !tbaa !19
  %178 = load ptr, ptr @genL__align11.Mp, align 8, !tbaa !19
  %179 = add i64 %29, 1
  %180 = and i64 %179, 4294967295
  br label %181

181:                                              ; preds = %181, %174
  %182 = phi i64 [ 1, %174 ], [ %191, %181 ]
  %183 = add nsw i64 %182, -1
  %184 = getelementptr inbounds float, ptr %130, i64 %183
  %185 = load float, ptr %184, align 4, !tbaa !167
  %186 = getelementptr inbounds float, ptr %175, i64 %182
  store float %185, ptr %186, align 4, !tbaa !167
  %187 = getelementptr inbounds i32, ptr %176, i64 %182
  store i32 0, ptr %187, align 4, !tbaa !31
  %188 = load float, ptr %184, align 4, !tbaa !167
  %189 = getelementptr inbounds float, ptr %177, i64 %182
  store float %188, ptr %189, align 4, !tbaa !167
  %190 = getelementptr inbounds i32, ptr %178, i64 %182
  store i32 0, ptr %190, align 4, !tbaa !31
  %191 = add nuw nsw i64 %182, 1
  %192 = icmp eq i64 %191, %180
  br i1 %192, label %193, label %181, !llvm.loop !305

193:                                              ; preds = %181, %172, %152
  %194 = phi i1 [ true, %172 ], [ true, %152 ], [ %173, %181 ]
  %195 = shl i64 %29, 32
  %196 = add i64 %195, -4294967296
  %197 = ashr exact i64 %196, 32
  %198 = getelementptr inbounds float, ptr %130, i64 %197
  %199 = load float, ptr %198, align 4, !tbaa !167
  %200 = load ptr, ptr @genL__align11.lastverticalw, align 8, !tbaa !19
  store float %199, ptr %200, align 4, !tbaa !167
  %201 = add i32 %27, 1
  %202 = add i32 %201, %30
  %203 = icmp slt i32 %27, 1
  br i1 %203, label %347, label %204

204:                                              ; preds = %193
  %205 = load ptr, ptr @genL__align11.m, align 8, !tbaa !19
  %206 = load ptr, ptr @genL__align11.largeM, align 8, !tbaa !19
  %207 = load ptr, ptr @genL__align11.mp, align 8, !tbaa !19
  %208 = load ptr, ptr @genL__align11.Mp, align 8, !tbaa !19
  %209 = zext i32 %201 to i64
  br label %210

210:                                              ; preds = %338, %204
  %211 = phi i64 [ 1, %204 ], [ %345, %338 ]
  %212 = phi ptr [ %130, %204 ], [ %213, %338 ]
  %213 = phi ptr [ %131, %204 ], [ %212, %338 ]
  %214 = phi i32 [ 0, %204 ], [ %341, %338 ]
  %215 = phi i32 [ 0, %204 ], [ %340, %338 ]
  %216 = phi float [ -1.000000e+09, %204 ], [ %339, %338 ]
  %217 = add nsw i64 %211, -1
  %218 = getelementptr inbounds float, ptr %132, i64 %217
  %219 = load float, ptr %218, align 4, !tbaa !167
  store float %219, ptr %212, align 4, !tbaa !167
  br i1 %153, label %239, label %220

220:                                              ; preds = %210
  %221 = load ptr, ptr %1, align 8, !tbaa !19
  %222 = load ptr, ptr %0, align 8, !tbaa !19
  %223 = getelementptr inbounds i8, ptr %222, i64 %211
  %224 = load i8, ptr %223, align 1, !tbaa !17
  %225 = sext i8 %224 to i64
  br label %226

226:                                              ; preds = %226, %220
  %227 = phi ptr [ %221, %220 ], [ %231, %226 ]
  %228 = phi ptr [ %213, %220 ], [ %237, %226 ]
  %229 = phi i32 [ %30, %220 ], [ %230, %226 ]
  %230 = add nsw i32 %229, -1
  %231 = getelementptr inbounds i8, ptr %227, i64 1
  %232 = load i8, ptr %227, align 1, !tbaa !17
  %233 = sext i8 %232 to i64
  %234 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %225, i64 %233
  %235 = load i32, ptr %234, align 4, !tbaa !31
  %236 = sitofp i32 %235 to float
  %237 = getelementptr inbounds float, ptr %228, i64 1
  store float %236, ptr %228, align 4, !tbaa !167
  %238 = icmp eq i32 %230, 0
  br i1 %238, label %239, label %226, !llvm.loop !304

239:                                              ; preds = %226, %210
  %240 = getelementptr inbounds float, ptr %132, i64 %211
  %241 = load float, ptr %240, align 4, !tbaa !167
  store float %241, ptr %213, align 4, !tbaa !167
  br i1 %194, label %338, label %242

242:                                              ; preds = %239
  %243 = load float, ptr %212, align 4, !tbaa !167
  %244 = getelementptr inbounds ptr, ptr %128, i64 %211
  %245 = load ptr, ptr %244, align 8, !tbaa !19
  %246 = getelementptr inbounds ptr, ptr %129, i64 %211
  %247 = load ptr, ptr %246, align 8, !tbaa !19
  %248 = trunc i64 %217 to i32
  %249 = trunc i64 %211 to i32
  br label %250

250:                                              ; preds = %331, %242
  %251 = phi ptr [ %276, %331 ], [ %247, %242 ]
  %252 = phi ptr [ %275, %331 ], [ %245, %242 ]
  %253 = phi ptr [ %274, %331 ], [ %205, %242 ]
  %254 = phi ptr [ %273, %331 ], [ %206, %242 ]
  %255 = phi ptr [ %272, %331 ], [ %207, %242 ]
  %256 = phi ptr [ %271, %331 ], [ %208, %242 ]
  %257 = phi ptr [ %270, %331 ], [ %213, %242 ]
  %258 = phi i32 [ %336, %331 ], [ 1, %242 ]
  %259 = phi i32 [ %328, %331 ], [ %214, %242 ]
  %260 = phi i32 [ %327, %331 ], [ %215, %242 ]
  %261 = phi i32 [ %315, %331 ], [ 0, %242 ]
  %262 = phi i32 [ %314, %331 ], [ 0, %242 ]
  %263 = phi float [ %313, %331 ], [ 0xC12E847FC0000000, %242 ]
  %264 = phi float [ %326, %331 ], [ %216, %242 ]
  %265 = phi ptr [ %335, %331 ], [ %212, %242 ]
  %266 = phi float [ %286, %331 ], [ %243, %242 ]
  %267 = phi i32 [ %284, %331 ], [ 0, %242 ]
  %268 = phi float [ %324, %331 ], [ %243, %242 ]
  %269 = phi i32 [ %323, %331 ], [ 0, %242 ]
  %270 = getelementptr inbounds float, ptr %257, i64 1
  %271 = getelementptr inbounds i32, ptr %256, i64 1
  %272 = getelementptr inbounds i32, ptr %255, i64 1
  %273 = getelementptr inbounds float, ptr %254, i64 1
  %274 = getelementptr inbounds float, ptr %253, i64 1
  %275 = getelementptr inbounds i32, ptr %252, i64 1
  %276 = getelementptr inbounds i32, ptr %251, i64 1
  %277 = load float, ptr %265, align 4, !tbaa !167
  store i32 %248, ptr %276, align 4, !tbaa !31
  %278 = add nsw i32 %258, -1
  %279 = fadd float %266, %7
  %280 = fcmp ogt float %279, %277
  %281 = select i1 %280, i32 %267, i32 %278
  %282 = select i1 %280, float %279, float %277
  store i32 %281, ptr %275, align 4, !tbaa !31
  %283 = fcmp ogt float %277, %266
  %284 = select i1 %283, i32 %278, i32 %267
  %285 = select i1 %283, float %277, float %266
  %286 = fadd float %285, %11
  %287 = load float, ptr %274, align 4, !tbaa !167
  %288 = fadd float %287, %7
  %289 = fcmp ogt float %288, %282
  br i1 %289, label %290, label %292

290:                                              ; preds = %250
  %291 = load i32, ptr %272, align 4, !tbaa !31
  store i32 %291, ptr %276, align 4, !tbaa !31
  store i32 %278, ptr %275, align 4, !tbaa !31
  br label %292

292:                                              ; preds = %290, %250
  %293 = phi float [ %288, %290 ], [ %282, %250 ]
  %294 = fcmp ogt float %277, %287
  br i1 %294, label %295, label %296

295:                                              ; preds = %292
  store i32 %248, ptr %272, align 4, !tbaa !31
  br label %296

296:                                              ; preds = %295, %292
  %297 = phi float [ %277, %295 ], [ %287, %292 ]
  %298 = fadd float %297, %11
  store float %298, ptr %274, align 4, !tbaa !167
  %299 = fadd float %263, %9
  %300 = fcmp ogt float %299, %293
  br i1 %300, label %301, label %302

301:                                              ; preds = %296
  store i32 %262, ptr %276, align 4, !tbaa !31
  store i32 %261, ptr %275, align 4, !tbaa !31
  br label %302

302:                                              ; preds = %301, %296
  %303 = phi float [ %299, %301 ], [ %293, %296 ]
  %304 = fcmp ogt float %268, %263
  %305 = select i1 %304, float %268, float %263
  %306 = select i1 %304, i32 %248, i32 %262
  %307 = select i1 %304, i32 %269, i32 %261
  %308 = load float, ptr %273, align 4, !tbaa !167
  %309 = fcmp ogt float %308, %305
  br i1 %309, label %310, label %312

310:                                              ; preds = %302
  %311 = load i32, ptr %271, align 4, !tbaa !31
  br label %312

312:                                              ; preds = %310, %302
  %313 = phi float [ %308, %310 ], [ %305, %302 ]
  %314 = phi i32 [ %311, %310 ], [ %306, %302 ]
  %315 = phi i32 [ %278, %310 ], [ %307, %302 ]
  %316 = load float, ptr %265, align 4, !tbaa !167
  %317 = fcmp ogt float %316, %308
  br i1 %317, label %318, label %320

318:                                              ; preds = %312
  store float %316, ptr %273, align 4, !tbaa !167
  store i32 %248, ptr %271, align 4, !tbaa !31
  %319 = load float, ptr %265, align 4, !tbaa !167
  br label %320

320:                                              ; preds = %318, %312
  %321 = phi float [ %319, %318 ], [ %316, %312 ]
  %322 = fcmp ogt float %321, %268
  %323 = select i1 %322, i32 %278, i32 %269
  %324 = select i1 %322, float %321, float %268
  %325 = fcmp olt float %264, %303
  %326 = select i1 %325, float %303, float %264
  %327 = select i1 %325, i32 %249, i32 %260
  %328 = select i1 %325, i32 %258, i32 %259
  %329 = fcmp olt float %303, %14
  br i1 %329, label %330, label %331

330:                                              ; preds = %320
  store i32 %202, ptr %276, align 4, !tbaa !31
  br label %331

331:                                              ; preds = %330, %320
  %332 = phi float [ %14, %330 ], [ %303, %320 ]
  %333 = load float, ptr %270, align 4, !tbaa !167
  %334 = fadd float %332, %333
  store float %334, ptr %270, align 4, !tbaa !167
  %335 = getelementptr inbounds float, ptr %265, i64 1
  %336 = add nuw i32 %258, 1
  %337 = icmp eq i32 %258, %30
  br i1 %337, label %338, label %250, !llvm.loop !306

338:                                              ; preds = %331, %239
  %339 = phi float [ %216, %239 ], [ %326, %331 ]
  %340 = phi i32 [ %215, %239 ], [ %327, %331 ]
  %341 = phi i32 [ %214, %239 ], [ %328, %331 ]
  %342 = getelementptr inbounds float, ptr %213, i64 %197
  %343 = load float, ptr %342, align 4, !tbaa !167
  %344 = getelementptr inbounds float, ptr %200, i64 %211
  store float %343, ptr %344, align 4, !tbaa !167
  %345 = add nuw nsw i64 %211, 1
  %346 = icmp eq i64 %345, %209
  br i1 %346, label %347, label %210, !llvm.loop !307

347:                                              ; preds = %338, %193
  %348 = phi float [ -1.000000e+09, %193 ], [ %339, %338 ]
  %349 = phi i32 [ 0, %193 ], [ %340, %338 ]
  %350 = phi i32 [ 0, %193 ], [ %341, %338 ]
  %351 = sext i32 %349 to i64
  %352 = getelementptr inbounds ptr, ptr %129, i64 %351
  %353 = load ptr, ptr %352, align 8, !tbaa !19
  %354 = sext i32 %350 to i64
  %355 = getelementptr inbounds i32, ptr %353, i64 %354
  %356 = load i32, ptr %355, align 4, !tbaa !31
  %357 = icmp eq i32 %356, %202
  br i1 %357, label %358, label %361

358:                                              ; preds = %347
  %359 = load ptr, ptr %0, align 8, !tbaa !19
  store i8 0, ptr %359, align 1
  %360 = load ptr, ptr %1, align 8, !tbaa !19
  store i8 0, ptr %360, align 1
  store i32 0, ptr %4, align 4, !tbaa !31
  store i32 0, ptr %3, align 4, !tbaa !31
  br label %524

361:                                              ; preds = %347
  %362 = load ptr, ptr @genL__align11.mseq1, align 8, !tbaa !19
  %363 = load ptr, ptr @genL__align11.mseq2, align 8, !tbaa !19
  %364 = load ptr, ptr %0, align 8, !tbaa !19
  %365 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %364) #40
  %366 = trunc i64 %365 to i32
  %367 = load ptr, ptr %1, align 8, !tbaa !19
  %368 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %367) #40
  %369 = trunc i64 %368 to i32
  %370 = icmp slt i32 %366, 0
  br i1 %370, label %374, label %371

371:                                              ; preds = %361
  %372 = add i64 %365, 1
  %373 = and i64 %372, 4294967295
  br label %381

374:                                              ; preds = %381, %361
  %375 = icmp slt i32 %369, 0
  br i1 %375, label %395, label %376

376:                                              ; preds = %374
  %377 = load ptr, ptr %129, align 8, !tbaa !19
  %378 = load ptr, ptr %128, align 8, !tbaa !19
  %379 = add i64 %368, 1
  %380 = and i64 %379, 4294967295
  br label %389

381:                                              ; preds = %381, %371
  %382 = phi i64 [ 0, %371 ], [ %387, %381 ]
  %383 = getelementptr inbounds ptr, ptr %129, i64 %382
  %384 = load ptr, ptr %383, align 8, !tbaa !19
  store i32 %202, ptr %384, align 4, !tbaa !31
  %385 = getelementptr inbounds ptr, ptr %128, i64 %382
  %386 = load ptr, ptr %385, align 8, !tbaa !19
  store i32 %202, ptr %386, align 4, !tbaa !31
  %387 = add nuw nsw i64 %382, 1
  %388 = icmp eq i64 %387, %373
  br i1 %388, label %374, label %381, !llvm.loop !308

389:                                              ; preds = %389, %376
  %390 = phi i64 [ 0, %376 ], [ %393, %389 ]
  %391 = getelementptr inbounds i32, ptr %377, i64 %390
  store i32 %202, ptr %391, align 4, !tbaa !31
  %392 = getelementptr inbounds i32, ptr %378, i64 %390
  store i32 %202, ptr %392, align 4, !tbaa !31
  %393 = add nuw nsw i64 %390, 1
  %394 = icmp eq i64 %393, %380
  br i1 %394, label %395, label %389, !llvm.loop !309

395:                                              ; preds = %389, %374
  %396 = add nsw i32 %369, %366
  %397 = load ptr, ptr %362, align 8, !tbaa !19
  %398 = sext i32 %396 to i64
  %399 = getelementptr inbounds i8, ptr %397, i64 %398
  store ptr %399, ptr %362, align 8, !tbaa !19
  store i8 0, ptr %399, align 1, !tbaa !17
  %400 = load ptr, ptr %363, align 8, !tbaa !19
  %401 = getelementptr inbounds i8, ptr %400, i64 %398
  store ptr %401, ptr %363, align 8, !tbaa !19
  store i8 0, ptr %401, align 1, !tbaa !17
  %402 = icmp slt i32 %396, 0
  br i1 %402, label %403, label %404

403:                                              ; preds = %395
  store i32 0, ptr %3, align 4, !tbaa !31
  br label %502

404:                                              ; preds = %395
  %405 = load ptr, ptr %352, align 8, !tbaa !19
  %406 = getelementptr inbounds i32, ptr %405, i64 %354
  %407 = load i32, ptr %406, align 4, !tbaa !31
  %408 = getelementptr inbounds ptr, ptr %128, i64 %351
  %409 = load ptr, ptr %408, align 8, !tbaa !19
  %410 = getelementptr inbounds i32, ptr %409, i64 %354
  %411 = load i32, ptr %410, align 4, !tbaa !31
  br label %412

412:                                              ; preds = %488, %404
  %413 = phi i32 [ %411, %404 ], [ %492, %488 ]
  %414 = phi i32 [ %407, %404 ], [ %486, %488 ]
  %415 = phi i32 [ 0, %404 ], [ %494, %488 ]
  %416 = phi i32 [ %349, %404 ], [ %419, %488 ]
  %417 = phi i32 [ %350, %404 ], [ %418, %488 ]
  %418 = freeze i32 %413
  %419 = freeze i32 %414
  %420 = xor i32 %419, -1
  %421 = add i32 %416, %420
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %442, label %423

423:                                              ; preds = %412
  %424 = sext i32 %421 to i64
  %425 = sext i32 %419 to i64
  br label %426

426:                                              ; preds = %426, %423
  %427 = phi i64 [ %424, %423 ], [ %436, %426 ]
  %428 = load ptr, ptr %0, align 8, !tbaa !19
  %429 = add nsw i64 %427, %425
  %430 = getelementptr inbounds i8, ptr %428, i64 %429
  %431 = load i8, ptr %430, align 1, !tbaa !17
  %432 = load ptr, ptr %362, align 8, !tbaa !19
  %433 = getelementptr inbounds i8, ptr %432, i64 -1
  store ptr %433, ptr %362, align 8, !tbaa !19
  store i8 %431, ptr %433, align 1, !tbaa !17
  %434 = load ptr, ptr %363, align 8, !tbaa !19
  %435 = getelementptr inbounds i8, ptr %434, i64 -1
  store ptr %435, ptr %363, align 8, !tbaa !19
  store i8 45, ptr %435, align 1, !tbaa !17
  %436 = add nsw i64 %427, -1
  %437 = and i64 %436, 4294967295
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %426, !llvm.loop !310

439:                                              ; preds = %426
  %440 = add i32 %415, %420
  %441 = add i32 %440, %416
  br label %442

442:                                              ; preds = %439, %412
  %443 = phi i32 [ %415, %412 ], [ %441, %439 ]
  %444 = xor i32 %418, -1
  %445 = add i32 %417, %444
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %465, label %447

447:                                              ; preds = %442
  %448 = sext i32 %445 to i64
  %449 = sext i32 %418 to i64
  br label %450

450:                                              ; preds = %450, %447
  %451 = phi i64 [ %448, %447 ], [ %462, %450 ]
  %452 = phi i32 [ %443, %447 ], [ %461, %450 ]
  %453 = load ptr, ptr %362, align 8, !tbaa !19
  %454 = getelementptr inbounds i8, ptr %453, i64 -1
  store ptr %454, ptr %362, align 8, !tbaa !19
  store i8 45, ptr %454, align 1, !tbaa !17
  %455 = load ptr, ptr %1, align 8, !tbaa !19
  %456 = add nsw i64 %451, %449
  %457 = getelementptr inbounds i8, ptr %455, i64 %456
  %458 = load i8, ptr %457, align 1, !tbaa !17
  %459 = load ptr, ptr %363, align 8, !tbaa !19
  %460 = getelementptr inbounds i8, ptr %459, i64 -1
  store ptr %460, ptr %363, align 8, !tbaa !19
  store i8 %458, ptr %460, align 1, !tbaa !17
  %461 = add nsw i32 %452, 1
  %462 = add nsw i64 %451, -1
  %463 = and i64 %462, 4294967295
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %465, label %450, !llvm.loop !311

465:                                              ; preds = %450, %442
  %466 = phi i32 [ %443, %442 ], [ %461, %450 ]
  %467 = icmp slt i32 %416, 1
  %468 = icmp slt i32 %417, 1
  %469 = or i1 %467, %468
  br i1 %469, label %497, label %470

470:                                              ; preds = %465
  %471 = load ptr, ptr %0, align 8, !tbaa !19
  %472 = sext i32 %419 to i64
  %473 = getelementptr inbounds i8, ptr %471, i64 %472
  %474 = load i8, ptr %473, align 1, !tbaa !17
  %475 = load ptr, ptr %362, align 8, !tbaa !19
  %476 = getelementptr inbounds i8, ptr %475, i64 -1
  store ptr %476, ptr %362, align 8, !tbaa !19
  store i8 %474, ptr %476, align 1, !tbaa !17
  %477 = load ptr, ptr %1, align 8, !tbaa !19
  %478 = sext i32 %418 to i64
  %479 = getelementptr inbounds i8, ptr %477, i64 %478
  %480 = load i8, ptr %479, align 1, !tbaa !17
  %481 = load ptr, ptr %363, align 8, !tbaa !19
  %482 = getelementptr inbounds i8, ptr %481, i64 -1
  store ptr %482, ptr %363, align 8, !tbaa !19
  store i8 %480, ptr %482, align 1, !tbaa !17
  %483 = getelementptr inbounds ptr, ptr %129, i64 %472
  %484 = load ptr, ptr %483, align 8, !tbaa !19
  %485 = getelementptr inbounds i32, ptr %484, i64 %478
  %486 = load i32, ptr %485, align 4, !tbaa !31
  %487 = icmp eq i32 %486, %202
  br i1 %487, label %497, label %488

488:                                              ; preds = %470
  %489 = getelementptr inbounds ptr, ptr %128, i64 %472
  %490 = load ptr, ptr %489, align 8, !tbaa !19
  %491 = getelementptr inbounds i32, ptr %490, i64 %478
  %492 = load i32, ptr %491, align 4, !tbaa !31
  %493 = icmp eq i32 %492, %202
  %494 = add nsw i32 %466, 2
  %495 = icmp sgt i32 %494, %396
  %496 = select i1 %493, i1 true, i1 %495
  br i1 %496, label %497, label %412, !llvm.loop !312

497:                                              ; preds = %488, %470, %465
  %.lcssa1 = phi i32 [ %418, %488 ], [ %418, %470 ], [ %418, %465 ]
  %.lcssa = phi i32 [ %419, %488 ], [ %419, %470 ], [ %419, %465 ]
  %498 = icmp eq i32 %.lcssa, -1
  %499 = select i1 %498, i32 0, i32 %.lcssa
  store i32 %499, ptr %3, align 4, !tbaa !31
  %500 = icmp eq i32 %.lcssa1, -1
  %501 = select i1 %500, i32 0, i32 %.lcssa1
  br label %502

502:                                              ; preds = %497, %403
  %503 = phi i32 [ 0, %403 ], [ %501, %497 ]
  store i32 %503, ptr %4, align 4, !tbaa !31
  %504 = load ptr, ptr %362, align 8, !tbaa !19
  %505 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %504) #40
  %506 = trunc i64 %505 to i32
  %507 = icmp sgt i32 %506, %2
  %508 = icmp sgt i32 %506, 5000000
  %509 = or i1 %507, %508
  br i1 %509, label %510, label %516

510:                                              ; preds = %502
  %511 = load ptr, ptr @stderr, align 8, !tbaa !19
  %512 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %511, ptr noundef nonnull @.str.1.135, i32 noundef %2, i32 noundef %506, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.2.136) #35
  %513 = load ptr, ptr @genL__align11.mseq1, align 8, !tbaa !19
  %514 = load ptr, ptr %513, align 8, !tbaa !19
  %515 = load ptr, ptr @genL__align11.mseq2, align 8, !tbaa !19
  br label %516

516:                                              ; preds = %510, %502
  %517 = phi ptr [ %363, %502 ], [ %515, %510 ]
  %518 = phi ptr [ %504, %502 ], [ %514, %510 ]
  %519 = load ptr, ptr %0, align 8, !tbaa !19
  %520 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %519, ptr noundef nonnull dereferenceable(1) %518) #35
  %521 = load ptr, ptr %1, align 8, !tbaa !19
  %522 = load ptr, ptr %517, align 8, !tbaa !19
  %523 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %521, ptr noundef nonnull dereferenceable(1) %522) #35
  br label %524

524:                                              ; preds = %516, %358
  %525 = phi float [ 0.000000e+00, %358 ], [ %348, %516 ]
  ret float %525
}

; Function Attrs: nounwind optsize uwtable
define internal float @genG__align11(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #4 {
  %4 = load i32, ptr @penalty, align 4, !tbaa !31
  %5 = sitofp i32 %4 to float
  %6 = load i32, ptr @penalty_OP, align 4, !tbaa !31
  %7 = sitofp i32 %6 to float
  %8 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %9 = sitofp i32 %8 to float
  %10 = load i32, ptr @genG__align11.orlgth1, align 4, !tbaa !31
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %3
  %13 = load i32, ptr @njob, align 4, !tbaa !31
  %14 = tail call ptr @AllocateCharMtx(i32 noundef %13, i32 noundef 0) #35
  store ptr %14, ptr @genG__align11.mseq1, align 8, !tbaa !19
  %15 = load i32, ptr @njob, align 4, !tbaa !31
  %16 = tail call ptr @AllocateCharMtx(i32 noundef %15, i32 noundef 0) #35
  store ptr %16, ptr @genG__align11.mseq2, align 8, !tbaa !19
  br label %17

17:                                               ; preds = %12, %3
  %18 = load ptr, ptr %0, align 8, !tbaa !19
  %19 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %18) #40
  %20 = trunc i64 %19 to i32
  %21 = load ptr, ptr %1, align 8, !tbaa !19
  %22 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %21) #40
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %20, 1
  %25 = icmp slt i32 %23, 1
  %26 = select i1 %24, i1 true, i1 %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %17
  %28 = load ptr, ptr @stderr, align 8, !tbaa !19
  %29 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %28, ptr noundef nonnull @.str.137, i32 noundef %20, i32 noundef %23) #36
  br label %30

30:                                               ; preds = %27, %17
  %31 = load i32, ptr @genG__align11.orlgth1, align 4
  %32 = icmp slt i32 %31, %20
  %33 = load i32, ptr @genG__align11.orlgth2, align 4
  %34 = icmp slt i32 %33, %23
  %35 = select i1 %32, i1 true, i1 %34
  br i1 %35, label %36, label %90

36:                                               ; preds = %30
  %37 = icmp sgt i32 %31, 0
  %38 = icmp sgt i32 %33, 0
  %39 = select i1 %37, i1 %38, i1 false
  br i1 %39, label %40, label %57

40:                                               ; preds = %36
  %41 = load ptr, ptr @genG__align11.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @genG__align11.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @genG__align11.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @genG__align11.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @genG__align11.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %45) #35
  %46 = load ptr, ptr @genG__align11.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %46) #35
  %47 = load ptr, ptr @genG__align11.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %47) #35
  %48 = load ptr, ptr @genG__align11.largeM, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %48) #35
  %49 = load ptr, ptr @genG__align11.Mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %49) #35
  %50 = load ptr, ptr @genG__align11.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %50) #35
  %51 = load ptr, ptr @genG__align11.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %51) #35
  %52 = load ptr, ptr @genG__align11.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %52) #35
  %53 = load ptr, ptr @genG__align11.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %53) #35
  %54 = load ptr, ptr @genG__align11.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %54) #35
  %55 = load i32, ptr @genG__align11.orlgth1, align 4, !tbaa !31
  %56 = load i32, ptr @genG__align11.orlgth2, align 4, !tbaa !31
  br label %57

57:                                               ; preds = %40, %36
  %58 = phi i32 [ %56, %40 ], [ %33, %36 ]
  %59 = phi i32 [ %55, %40 ], [ %31, %36 ]
  %60 = sitofp i32 %20 to double
  %61 = fmul double %60, 1.300000e+00
  %62 = fptosi double %61 to i32
  %63 = tail call i32 @llvm.smax.i32(i32 %59, i32 %62)
  %64 = add nuw nsw i32 %63, 100
  %65 = sitofp i32 %23 to double
  %66 = fmul double %65, 1.300000e+00
  %67 = fptosi double %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %58, i32 %67)
  %69 = add nuw nsw i32 %68, 100
  %70 = add nuw nsw i32 %68, 102
  %71 = tail call ptr @AllocateFloatVec(i32 noundef %70) #35
  store ptr %71, ptr @genG__align11.w1, align 8, !tbaa !19
  %72 = tail call ptr @AllocateFloatVec(i32 noundef %70) #35
  store ptr %72, ptr @genG__align11.w2, align 8, !tbaa !19
  %73 = tail call ptr @AllocateFloatVec(i32 noundef %70) #35
  store ptr %73, ptr @genG__align11.match, align 8, !tbaa !19
  %74 = add nuw nsw i32 %63, 102
  %75 = tail call ptr @AllocateFloatVec(i32 noundef %74) #35
  store ptr %75, ptr @genG__align11.initverticalw, align 8, !tbaa !19
  %76 = tail call ptr @AllocateFloatVec(i32 noundef %74) #35
  store ptr %76, ptr @genG__align11.lastverticalw, align 8, !tbaa !19
  %77 = tail call ptr @AllocateFloatVec(i32 noundef %70) #35
  store ptr %77, ptr @genG__align11.m, align 8, !tbaa !19
  %78 = tail call ptr @AllocateIntVec(i32 noundef %70) #35
  store ptr %78, ptr @genG__align11.mp, align 8, !tbaa !19
  %79 = tail call ptr @AllocateFloatVec(i32 noundef %70) #35
  store ptr %79, ptr @genG__align11.largeM, align 8, !tbaa !19
  %80 = tail call ptr @AllocateIntVec(i32 noundef %70) #35
  store ptr %80, ptr @genG__align11.Mp, align 8, !tbaa !19
  %81 = load i32, ptr @njob, align 4, !tbaa !31
  %82 = add nsw i32 %69, %64
  %83 = tail call ptr @AllocateCharMtx(i32 noundef %81, i32 noundef %82) #35
  store ptr %83, ptr @genG__align11.mseq, align 8, !tbaa !19
  %84 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %74) #35
  store ptr %84, ptr @genG__align11.cpmx1, align 8, !tbaa !19
  %85 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %70) #35
  store ptr %85, ptr @genG__align11.cpmx2, align 8, !tbaa !19
  %86 = tail call i32 @llvm.smax.i32(i32 %64, i32 %69)
  %87 = add nuw nsw i32 %86, 2
  %88 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %87) #35
  store ptr %88, ptr @genG__align11.floatwork, align 8, !tbaa !19
  %89 = tail call ptr @AllocateIntMtx(i32 noundef 26, i32 noundef %87) #35
  store ptr %89, ptr @genG__align11.intwork, align 8, !tbaa !19
  store i32 %63, ptr @genG__align11.orlgth1, align 4, !tbaa !31
  store i32 %68, ptr @genG__align11.orlgth2, align 4, !tbaa !31
  br label %90

90:                                               ; preds = %57, %30
  %91 = phi i32 [ %33, %30 ], [ %68, %57 ]
  %92 = phi i32 [ %31, %30 ], [ %63, %57 ]
  %93 = load ptr, ptr @genG__align11.mseq, align 8, !tbaa !19
  %94 = load ptr, ptr %93, align 8, !tbaa !19
  %95 = load ptr, ptr @genG__align11.mseq1, align 8, !tbaa !19
  store ptr %94, ptr %95, align 8, !tbaa !19
  %96 = getelementptr inbounds ptr, ptr %93, i64 1
  %97 = load ptr, ptr %96, align 8, !tbaa !19
  %98 = load ptr, ptr @genG__align11.mseq2, align 8, !tbaa !19
  store ptr %97, ptr %98, align 8, !tbaa !19
  %99 = load i32, ptr @commonAlloc1, align 4
  %100 = icmp sgt i32 %92, %99
  %101 = load i32, ptr @commonAlloc2, align 4
  %102 = icmp sgt i32 %91, %101
  %103 = select i1 %100, i1 true, i1 %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %90
  %105 = load ptr, ptr @commonJP, align 8, !tbaa !19
  br label %128

106:                                              ; preds = %90
  %107 = icmp ne i32 %99, 0
  %108 = icmp ne i32 %101, 0
  %109 = select i1 %107, i1 %108, i1 false
  br i1 %109, label %110, label %117

110:                                              ; preds = %106
  %111 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %111) #35
  %112 = load ptr, ptr @commonJP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %112) #35
  %113 = load i32, ptr @genG__align11.orlgth1, align 4
  %114 = load i32, ptr @commonAlloc1, align 4
  %115 = load i32, ptr @genG__align11.orlgth2, align 4
  %116 = load i32, ptr @commonAlloc2, align 4
  br label %117

117:                                              ; preds = %110, %106
  %118 = phi i32 [ %116, %110 ], [ %101, %106 ]
  %119 = phi i32 [ %115, %110 ], [ %91, %106 ]
  %120 = phi i32 [ %114, %110 ], [ %99, %106 ]
  %121 = phi i32 [ %113, %110 ], [ %92, %106 ]
  %122 = tail call i32 @llvm.smax.i32(i32 %121, i32 %120)
  %123 = tail call i32 @llvm.smax.i32(i32 %119, i32 %118)
  %124 = add nsw i32 %122, 10
  %125 = add nsw i32 %123, 10
  %126 = tail call ptr @AllocateIntMtx(i32 noundef %124, i32 noundef %125) #35
  store ptr %126, ptr @commonIP, align 8, !tbaa !19
  %127 = tail call ptr @AllocateIntMtx(i32 noundef %124, i32 noundef %125) #35
  store ptr %127, ptr @commonJP, align 8, !tbaa !19
  store i32 %122, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %123, ptr @commonAlloc2, align 4, !tbaa !31
  br label %128

128:                                              ; preds = %117, %104
  %129 = phi ptr [ %105, %104 ], [ %127, %117 ]
  %130 = load ptr, ptr @commonIP, align 8, !tbaa !19
  store ptr %130, ptr @genG__align11.ijpi, align 8, !tbaa !19
  store ptr %129, ptr @genG__align11.ijpj, align 8, !tbaa !19
  %131 = load ptr, ptr @genG__align11.w1, align 8, !tbaa !19
  %132 = load ptr, ptr @genG__align11.w2, align 8, !tbaa !19
  %133 = load ptr, ptr @genG__align11.initverticalw, align 8, !tbaa !19
  %134 = load ptr, ptr %1, align 8, !tbaa !19
  %135 = load i8, ptr %134, align 1, !tbaa !17
  %136 = sext i8 %135 to i64
  %137 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %136
  %138 = icmp eq i32 %20, 0
  %139 = load ptr, ptr %0, align 8, !tbaa !19
  br i1 %138, label %153, label %140

140:                                              ; preds = %140, %128
  %141 = phi ptr [ %151, %140 ], [ %133, %128 ]
  %142 = phi ptr [ %145, %140 ], [ %139, %128 ]
  %143 = phi i32 [ %144, %140 ], [ %20, %128 ]
  %144 = add nsw i32 %143, -1
  %145 = getelementptr inbounds i8, ptr %142, i64 1
  %146 = load i8, ptr %142, align 1, !tbaa !17
  %147 = sext i8 %146 to i64
  %148 = getelementptr inbounds i32, ptr %137, i64 %147
  %149 = load i32, ptr %148, align 4, !tbaa !31
  %150 = sitofp i32 %149 to float
  %151 = getelementptr inbounds float, ptr %141, i64 1
  store float %150, ptr %141, align 4, !tbaa !167
  %152 = icmp eq i32 %144, 0
  br i1 %152, label %153, label %140, !llvm.loop !313

153:                                              ; preds = %140, %128
  %154 = load i8, ptr %139, align 1, !tbaa !17
  %155 = sext i8 %154 to i64
  %156 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %155
  %157 = icmp eq i32 %23, 0
  br i1 %157, label %171, label %158

158:                                              ; preds = %158, %153
  %159 = phi ptr [ %169, %158 ], [ %131, %153 ]
  %160 = phi ptr [ %163, %158 ], [ %134, %153 ]
  %161 = phi i32 [ %162, %158 ], [ %23, %153 ]
  %162 = add nsw i32 %161, -1
  %163 = getelementptr inbounds i8, ptr %160, i64 1
  %164 = load i8, ptr %160, align 1, !tbaa !17
  %165 = sext i8 %164 to i64
  %166 = getelementptr inbounds i32, ptr %156, i64 %165
  %167 = load i32, ptr %166, align 4, !tbaa !31
  %168 = sitofp i32 %167 to float
  %169 = getelementptr inbounds float, ptr %159, i64 1
  store float %168, ptr %159, align 4, !tbaa !167
  %170 = icmp eq i32 %162, 0
  br i1 %170, label %171, label %158, !llvm.loop !313

171:                                              ; preds = %158, %153
  %172 = load i32, ptr @outgap, align 4, !tbaa !31
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %174, label %196

174:                                              ; preds = %171
  br i1 %24, label %178, label %175

175:                                              ; preds = %174
  %176 = add i64 %19, 1
  %177 = and i64 %176, 4294967295
  br label %182

178:                                              ; preds = %182, %174
  br i1 %25, label %216, label %179

179:                                              ; preds = %178
  %180 = add i64 %22, 1
  %181 = and i64 %180, 4294967295
  br label %189

182:                                              ; preds = %182, %175
  %183 = phi i64 [ 1, %175 ], [ %187, %182 ]
  %184 = getelementptr inbounds float, ptr %133, i64 %183
  %185 = load float, ptr %184, align 4, !tbaa !167
  %186 = fadd float %185, %5
  store float %186, ptr %184, align 4, !tbaa !167
  %187 = add nuw nsw i64 %183, 1
  %188 = icmp eq i64 %187, %177
  br i1 %188, label %178, label %182, !llvm.loop !314

189:                                              ; preds = %189, %179
  %190 = phi i64 [ 1, %179 ], [ %194, %189 ]
  %191 = getelementptr inbounds float, ptr %131, i64 %190
  %192 = load float, ptr %191, align 4, !tbaa !167
  %193 = fadd float %192, %5
  store float %193, ptr %191, align 4, !tbaa !167
  %194 = add nuw nsw i64 %190, 1
  %195 = icmp eq i64 %194, %181
  br i1 %195, label %196, label %189, !llvm.loop !315

196:                                              ; preds = %189, %171
  br i1 %25, label %216, label %197

197:                                              ; preds = %196
  %198 = load ptr, ptr @genG__align11.m, align 8, !tbaa !19
  %199 = load ptr, ptr @genG__align11.mp, align 8, !tbaa !19
  %200 = load ptr, ptr @genG__align11.largeM, align 8, !tbaa !19
  %201 = load ptr, ptr @genG__align11.Mp, align 8, !tbaa !19
  %202 = add i64 %22, 1
  %203 = and i64 %202, 4294967295
  br label %204

204:                                              ; preds = %204, %197
  %205 = phi i64 [ 1, %197 ], [ %214, %204 ]
  %206 = add nsw i64 %205, -1
  %207 = getelementptr inbounds float, ptr %131, i64 %206
  %208 = load float, ptr %207, align 4, !tbaa !167
  %209 = getelementptr inbounds float, ptr %198, i64 %205
  store float %208, ptr %209, align 4, !tbaa !167
  %210 = getelementptr inbounds i32, ptr %199, i64 %205
  store i32 0, ptr %210, align 4, !tbaa !31
  %211 = load float, ptr %207, align 4, !tbaa !167
  %212 = getelementptr inbounds float, ptr %200, i64 %205
  store float %211, ptr %212, align 4, !tbaa !167
  %213 = getelementptr inbounds i32, ptr %201, i64 %205
  store i32 0, ptr %213, align 4, !tbaa !31
  %214 = add nuw nsw i64 %205, 1
  %215 = icmp eq i64 %214, %203
  br i1 %215, label %216, label %204, !llvm.loop !316

216:                                              ; preds = %204, %196, %178
  br i1 %157, label %217, label %219

217:                                              ; preds = %216
  %218 = load ptr, ptr @genG__align11.lastverticalw, align 8, !tbaa !19
  store float 0.000000e+00, ptr %218, align 4, !tbaa !167
  br label %226

219:                                              ; preds = %216
  %220 = shl i64 %22, 32
  %221 = add i64 %220, -4294967296
  %222 = ashr exact i64 %221, 32
  %223 = getelementptr inbounds float, ptr %131, i64 %222
  %224 = load float, ptr %223, align 4, !tbaa !167
  %225 = load ptr, ptr @genG__align11.lastverticalw, align 8, !tbaa !19
  store float %224, ptr %225, align 4, !tbaa !167
  br label %226

226:                                              ; preds = %219, %217
  %227 = phi ptr [ %225, %219 ], [ %218, %217 ]
  %228 = load i32, ptr @outgap, align 4, !tbaa !31
  %229 = icmp ne i32 %228, 0
  %230 = zext i1 %229 to i32
  %231 = add nsw i32 %230, %20
  %232 = icmp sgt i32 %231, 1
  br i1 %232, label %233, label %368

233:                                              ; preds = %226
  %234 = load ptr, ptr @genG__align11.m, align 8, !tbaa !19
  %235 = load ptr, ptr @genG__align11.largeM, align 8, !tbaa !19
  %236 = load ptr, ptr @genG__align11.mp, align 8, !tbaa !19
  %237 = load ptr, ptr @genG__align11.Mp, align 8, !tbaa !19
  %238 = shl i64 %22, 32
  %239 = add i64 %238, -4294967296
  %240 = ashr exact i64 %239, 32
  %241 = add i64 %22, 1
  %242 = zext i32 %231 to i64
  %243 = and i64 %241, 4294967295
  br label %244

244:                                              ; preds = %361, %233
  %245 = phi i64 [ 1, %233 ], [ %366, %361 ]
  %246 = phi float [ 0.000000e+00, %233 ], [ %362, %361 ]
  %247 = phi ptr [ %131, %233 ], [ %248, %361 ]
  %248 = phi ptr [ %132, %233 ], [ %247, %361 ]
  %249 = add nsw i64 %245, -1
  %250 = getelementptr inbounds float, ptr %133, i64 %249
  %251 = load float, ptr %250, align 4, !tbaa !167
  store float %251, ptr %247, align 4, !tbaa !167
  %252 = getelementptr inbounds i8, ptr %139, i64 %245
  %253 = load i8, ptr %252, align 1, !tbaa !17
  %254 = sext i8 %253 to i64
  %255 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %254
  br i1 %157, label %256, label %259

256:                                              ; preds = %244
  %257 = getelementptr inbounds float, ptr %133, i64 %245
  %258 = load float, ptr %257, align 4, !tbaa !167
  store float %258, ptr %248, align 4, !tbaa !167
  br label %361

259:                                              ; preds = %259, %244
  %260 = phi ptr [ %270, %259 ], [ %248, %244 ]
  %261 = phi ptr [ %264, %259 ], [ %134, %244 ]
  %262 = phi i32 [ %263, %259 ], [ %23, %244 ]
  %263 = add nsw i32 %262, -1
  %264 = getelementptr inbounds i8, ptr %261, i64 1
  %265 = load i8, ptr %261, align 1, !tbaa !17
  %266 = sext i8 %265 to i64
  %267 = getelementptr inbounds i32, ptr %255, i64 %266
  %268 = load i32, ptr %267, align 4, !tbaa !31
  %269 = sitofp i32 %268 to float
  %270 = getelementptr inbounds float, ptr %260, i64 1
  store float %269, ptr %260, align 4, !tbaa !167
  %271 = icmp eq i32 %263, 0
  br i1 %271, label %272, label %259, !llvm.loop !313

272:                                              ; preds = %259
  %273 = getelementptr inbounds float, ptr %133, i64 %245
  %274 = load float, ptr %273, align 4, !tbaa !167
  store float %274, ptr %248, align 4, !tbaa !167
  br i1 %25, label %361, label %275

275:                                              ; preds = %272
  %276 = load float, ptr %247, align 4, !tbaa !167
  %277 = getelementptr inbounds ptr, ptr %129, i64 %245
  %278 = load ptr, ptr %277, align 8, !tbaa !19
  %279 = getelementptr inbounds ptr, ptr %130, i64 %245
  %280 = load ptr, ptr %279, align 8, !tbaa !19
  %281 = trunc i64 %249 to i32
  br label %282

282:                                              ; preds = %351, %275
  %283 = phi i64 [ 1, %275 ], [ %359, %351 ]
  %284 = phi ptr [ %248, %275 ], [ %305, %351 ]
  %285 = phi ptr [ %280, %275 ], [ %304, %351 ]
  %286 = phi ptr [ %278, %275 ], [ %303, %351 ]
  %287 = phi ptr [ %234, %275 ], [ %302, %351 ]
  %288 = phi ptr [ %235, %275 ], [ %301, %351 ]
  %289 = phi ptr [ %236, %275 ], [ %300, %351 ]
  %290 = phi ptr [ %237, %275 ], [ %299, %351 ]
  %291 = phi i32 [ 0, %275 ], [ %346, %351 ]
  %292 = phi i32 [ 0, %275 ], [ %345, %351 ]
  %293 = phi float [ -1.000000e+07, %275 ], [ %344, %351 ]
  %294 = phi ptr [ %247, %275 ], [ %358, %351 ]
  %295 = phi float [ %276, %275 ], [ %316, %351 ]
  %296 = phi i32 [ 0, %275 ], [ %314, %351 ]
  %297 = phi float [ %276, %275 ], [ %355, %351 ]
  %298 = phi i32 [ 0, %275 ], [ %354, %351 ]
  %299 = getelementptr inbounds i32, ptr %290, i64 1
  %300 = getelementptr inbounds i32, ptr %289, i64 1
  %301 = getelementptr inbounds float, ptr %288, i64 1
  %302 = getelementptr inbounds float, ptr %287, i64 1
  %303 = getelementptr inbounds i32, ptr %286, i64 1
  %304 = getelementptr inbounds i32, ptr %285, i64 1
  %305 = getelementptr inbounds float, ptr %284, i64 1
  %306 = load float, ptr %294, align 4, !tbaa !167
  store i32 %281, ptr %304, align 4, !tbaa !31
  %307 = fadd float %295, %5
  %308 = fcmp ogt float %307, %306
  %309 = trunc i64 %283 to i32
  %310 = add i32 %309, -1
  %311 = select i1 %308, i32 %296, i32 %310
  %312 = select i1 %308, float %307, float %306
  store i32 %311, ptr %303, align 4, !tbaa !31
  %313 = fcmp ult float %306, %295
  %314 = select i1 %313, i32 %296, i32 %310
  %315 = select i1 %313, float %295, float %306
  %316 = fadd float %315, %9
  %317 = load float, ptr %302, align 4, !tbaa !167
  %318 = fadd float %317, %5
  %319 = fcmp ogt float %318, %312
  br i1 %319, label %320, label %322

320:                                              ; preds = %282
  %321 = load i32, ptr %300, align 4, !tbaa !31
  store i32 %321, ptr %304, align 4, !tbaa !31
  store i32 %310, ptr %303, align 4, !tbaa !31
  br label %322

322:                                              ; preds = %320, %282
  %323 = phi float [ %318, %320 ], [ %312, %282 ]
  %324 = fcmp ult float %306, %317
  br i1 %324, label %326, label %325

325:                                              ; preds = %322
  store float %306, ptr %302, align 4, !tbaa !167
  store i32 %281, ptr %300, align 4, !tbaa !31
  br label %326

326:                                              ; preds = %325, %322
  %327 = getelementptr inbounds float, ptr %234, i64 %283
  %328 = load float, ptr %327, align 4, !tbaa !167
  %329 = fadd float %328, %9
  store float %329, ptr %327, align 4, !tbaa !167
  %330 = fadd float %293, %7
  %331 = fcmp ogt float %330, %323
  br i1 %331, label %332, label %333

332:                                              ; preds = %326
  store i32 %292, ptr %304, align 4, !tbaa !31
  store i32 %291, ptr %303, align 4, !tbaa !31
  br label %333

333:                                              ; preds = %332, %326
  %334 = phi float [ %330, %332 ], [ %323, %326 ]
  %335 = fcmp ogt float %297, %293
  %336 = select i1 %335, float %297, float %293
  %337 = select i1 %335, i32 %281, i32 %292
  %338 = select i1 %335, i32 %298, i32 %291
  %339 = load float, ptr %301, align 4, !tbaa !167
  %340 = fcmp ogt float %339, %336
  br i1 %340, label %341, label %343

341:                                              ; preds = %333
  %342 = load i32, ptr %299, align 4, !tbaa !31
  br label %343

343:                                              ; preds = %341, %333
  %344 = phi float [ %339, %341 ], [ %336, %333 ]
  %345 = phi i32 [ %342, %341 ], [ %337, %333 ]
  %346 = phi i32 [ %310, %341 ], [ %338, %333 ]
  %347 = load float, ptr %294, align 4, !tbaa !167
  %348 = fcmp ogt float %347, %339
  br i1 %348, label %349, label %351

349:                                              ; preds = %343
  store float %347, ptr %301, align 4, !tbaa !167
  store i32 %281, ptr %299, align 4, !tbaa !31
  %350 = load float, ptr %294, align 4, !tbaa !167
  br label %351

351:                                              ; preds = %349, %343
  %352 = phi float [ %350, %349 ], [ %347, %343 ]
  %353 = fcmp ogt float %352, %297
  %354 = select i1 %353, i32 %310, i32 %298
  %355 = select i1 %353, float %352, float %297
  %356 = load float, ptr %305, align 4, !tbaa !167
  %357 = fadd float %334, %356
  store float %357, ptr %305, align 4, !tbaa !167
  %358 = getelementptr inbounds float, ptr %294, i64 1
  %359 = add nuw nsw i64 %283, 1
  %360 = icmp eq i64 %359, %243
  br i1 %360, label %361, label %282, !llvm.loop !317

361:                                              ; preds = %351, %272, %256
  %362 = phi float [ %246, %272 ], [ %246, %256 ], [ %334, %351 ]
  %363 = getelementptr inbounds float, ptr %248, i64 %240
  %364 = load float, ptr %363, align 4, !tbaa !167
  %365 = getelementptr inbounds float, ptr %227, i64 %245
  store float %364, ptr %365, align 4, !tbaa !167
  %366 = add nuw nsw i64 %245, 1
  %367 = icmp eq i64 %366, %242
  br i1 %367, label %368, label %244, !llvm.loop !318

368:                                              ; preds = %361, %226
  %369 = phi float [ 0.000000e+00, %226 ], [ %362, %361 ]
  %370 = load ptr, ptr @genG__align11.mseq1, align 8, !tbaa !19
  %371 = load ptr, ptr @genG__align11.mseq2, align 8, !tbaa !19
  %372 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %139) #40
  %373 = trunc i64 %372 to i32
  %374 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %134) #40
  %375 = trunc i64 %374 to i32
  %376 = icmp slt i32 %373, 0
  br i1 %376, label %380, label %377

377:                                              ; preds = %368
  %378 = add i64 %372, 1
  %379 = and i64 %378, 4294967295
  br label %387

380:                                              ; preds = %387, %368
  %381 = icmp slt i32 %375, 0
  br i1 %381, label %401, label %382

382:                                              ; preds = %380
  %383 = load ptr, ptr %130, align 8, !tbaa !19
  %384 = load ptr, ptr %129, align 8, !tbaa !19
  %385 = add i64 %374, 1
  %386 = and i64 %385, 4294967295
  br label %395

387:                                              ; preds = %387, %377
  %388 = phi i64 [ 0, %377 ], [ %393, %387 ]
  %389 = getelementptr inbounds ptr, ptr %130, i64 %388
  %390 = load ptr, ptr %389, align 8, !tbaa !19
  store i32 -1, ptr %390, align 4, !tbaa !31
  %391 = getelementptr inbounds ptr, ptr %129, i64 %388
  %392 = load ptr, ptr %391, align 8, !tbaa !19
  store i32 -1, ptr %392, align 4, !tbaa !31
  %393 = add nuw nsw i64 %388, 1
  %394 = icmp eq i64 %393, %379
  br i1 %394, label %380, label %387, !llvm.loop !319

395:                                              ; preds = %395, %382
  %396 = phi i64 [ 0, %382 ], [ %399, %395 ]
  %397 = getelementptr inbounds i32, ptr %383, i64 %396
  store i32 -1, ptr %397, align 4, !tbaa !31
  %398 = getelementptr inbounds i32, ptr %384, i64 %396
  store i32 -1, ptr %398, align 4, !tbaa !31
  %399 = add nuw nsw i64 %396, 1
  %400 = icmp eq i64 %399, %386
  br i1 %400, label %401, label %395, !llvm.loop !320

401:                                              ; preds = %395, %380
  %402 = add nsw i32 %375, %373
  %403 = load ptr, ptr %370, align 8, !tbaa !19
  %404 = sext i32 %402 to i64
  %405 = getelementptr inbounds i8, ptr %403, i64 %404
  store ptr %405, ptr %370, align 8, !tbaa !19
  store i8 0, ptr %405, align 1, !tbaa !17
  %406 = load ptr, ptr %371, align 8, !tbaa !19
  %407 = getelementptr inbounds i8, ptr %406, i64 %404
  store ptr %407, ptr %371, align 8, !tbaa !19
  store i8 0, ptr %407, align 1, !tbaa !17
  %408 = icmp slt i32 %402, 0
  br i1 %408, label %489, label %409

409:                                              ; preds = %474, %401
  %410 = phi i32 [ %487, %474 ], [ 0, %401 ]
  %411 = phi i32 [ %418, %474 ], [ %373, %401 ]
  %412 = phi i32 [ %422, %474 ], [ %375, %401 ]
  %413 = sext i32 %411 to i64
  %414 = getelementptr inbounds ptr, ptr %130, i64 %413
  %415 = load ptr, ptr %414, align 8, !tbaa !19
  %416 = sext i32 %412 to i64
  %417 = getelementptr inbounds i32, ptr %415, i64 %416
  %418 = load i32, ptr %417, align 4, !tbaa !31
  %419 = getelementptr inbounds ptr, ptr %129, i64 %413
  %420 = load ptr, ptr %419, align 8, !tbaa !19
  %421 = getelementptr inbounds i32, ptr %420, i64 %416
  %422 = load i32, ptr %421, align 4, !tbaa !31
  %423 = xor i32 %418, -1
  %424 = add i32 %411, %423
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %446, label %426

426:                                              ; preds = %409
  %427 = sext i32 %424 to i64
  %428 = sext i32 %418 to i64
  br label %429

429:                                              ; preds = %429, %426
  %430 = phi i64 [ %427, %426 ], [ %439, %429 ]
  %431 = load ptr, ptr %0, align 8, !tbaa !19
  %432 = add nsw i64 %430, %428
  %433 = getelementptr inbounds i8, ptr %431, i64 %432
  %434 = load i8, ptr %433, align 1, !tbaa !17
  %435 = load ptr, ptr %370, align 8, !tbaa !19
  %436 = getelementptr inbounds i8, ptr %435, i64 -1
  store ptr %436, ptr %370, align 8, !tbaa !19
  store i8 %434, ptr %436, align 1, !tbaa !17
  %437 = load ptr, ptr %371, align 8, !tbaa !19
  %438 = getelementptr inbounds i8, ptr %437, i64 -1
  store ptr %438, ptr %371, align 8, !tbaa !19
  store i8 45, ptr %438, align 1, !tbaa !17
  %439 = add nsw i64 %430, -1
  %440 = and i64 %439, 4294967295
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %442, label %429, !llvm.loop !321

442:                                              ; preds = %429
  %443 = add i32 %410, -1
  %444 = add i32 %443, %411
  %445 = sub i32 %444, %418
  br label %446

446:                                              ; preds = %442, %409
  %447 = phi i32 [ %410, %409 ], [ %445, %442 ]
  %448 = xor i32 %422, -1
  %449 = add i32 %412, %448
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %469, label %451

451:                                              ; preds = %446
  %452 = sext i32 %449 to i64
  %453 = sext i32 %422 to i64
  br label %454

454:                                              ; preds = %454, %451
  %455 = phi i64 [ %452, %451 ], [ %466, %454 ]
  %456 = phi i32 [ %447, %451 ], [ %465, %454 ]
  %457 = load ptr, ptr %370, align 8, !tbaa !19
  %458 = getelementptr inbounds i8, ptr %457, i64 -1
  store ptr %458, ptr %370, align 8, !tbaa !19
  store i8 45, ptr %458, align 1, !tbaa !17
  %459 = load ptr, ptr %1, align 8, !tbaa !19
  %460 = add nsw i64 %455, %453
  %461 = getelementptr inbounds i8, ptr %459, i64 %460
  %462 = load i8, ptr %461, align 1, !tbaa !17
  %463 = load ptr, ptr %371, align 8, !tbaa !19
  %464 = getelementptr inbounds i8, ptr %463, i64 -1
  store ptr %464, ptr %371, align 8, !tbaa !19
  store i8 %462, ptr %464, align 1, !tbaa !17
  %465 = add nsw i32 %456, 1
  %466 = add nsw i64 %455, -1
  %467 = and i64 %466, 4294967295
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %469, label %454, !llvm.loop !322

469:                                              ; preds = %454, %446
  %470 = phi i32 [ %447, %446 ], [ %465, %454 ]
  %471 = icmp slt i32 %411, 1
  %472 = icmp slt i32 %412, 1
  %473 = or i1 %471, %472
  br i1 %473, label %489, label %474

474:                                              ; preds = %469
  %475 = load ptr, ptr %0, align 8, !tbaa !19
  %476 = sext i32 %418 to i64
  %477 = getelementptr inbounds i8, ptr %475, i64 %476
  %478 = load i8, ptr %477, align 1, !tbaa !17
  %479 = load ptr, ptr %370, align 8, !tbaa !19
  %480 = getelementptr inbounds i8, ptr %479, i64 -1
  store ptr %480, ptr %370, align 8, !tbaa !19
  store i8 %478, ptr %480, align 1, !tbaa !17
  %481 = load ptr, ptr %1, align 8, !tbaa !19
  %482 = sext i32 %422 to i64
  %483 = getelementptr inbounds i8, ptr %481, i64 %482
  %484 = load i8, ptr %483, align 1, !tbaa !17
  %485 = load ptr, ptr %371, align 8, !tbaa !19
  %486 = getelementptr inbounds i8, ptr %485, i64 -1
  store ptr %486, ptr %371, align 8, !tbaa !19
  store i8 %484, ptr %486, align 1, !tbaa !17
  %487 = add nsw i32 %470, 2
  %488 = icmp sgt i32 %487, %402
  br i1 %488, label %489, label %409, !llvm.loop !323

489:                                              ; preds = %474, %469, %401
  %490 = load ptr, ptr %370, align 8, !tbaa !19
  %491 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %490) #40
  %492 = trunc i64 %491 to i32
  %493 = icmp sgt i32 %492, %2
  %494 = icmp sgt i32 %492, 5000000
  %495 = or i1 %493, %494
  br i1 %495, label %496, label %502

496:                                              ; preds = %489
  %497 = load ptr, ptr @stderr, align 8, !tbaa !19
  %498 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %497, ptr noundef nonnull @.str.1.138, i32 noundef %2, i32 noundef %492, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.2.139) #35
  %499 = load ptr, ptr @genG__align11.mseq1, align 8, !tbaa !19
  %500 = load ptr, ptr %499, align 8, !tbaa !19
  %501 = load ptr, ptr @genG__align11.mseq2, align 8, !tbaa !19
  br label %502

502:                                              ; preds = %496, %489
  %503 = phi ptr [ %371, %489 ], [ %501, %496 ]
  %504 = phi ptr [ %490, %489 ], [ %500, %496 ]
  %505 = load ptr, ptr %0, align 8, !tbaa !19
  %506 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %505, ptr noundef nonnull dereferenceable(1) %504) #35
  %507 = load ptr, ptr %1, align 8, !tbaa !19
  %508 = load ptr, ptr %503, align 8, !tbaa !19
  %509 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %507, ptr noundef nonnull dereferenceable(1) %508) #35
  ret float %369
}

; Function Attrs: nounwind optsize uwtable
define internal float @H__align(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef readnone %7, ptr nocapture noundef %8, ptr noundef %9, ptr noundef %10, ptr noundef %11, ptr noundef %12) #4 {
  %14 = load i32, ptr @penalty, align 4, !tbaa !31
  %15 = sitofp i32 %14 to float
  %16 = load i32, ptr @H__align.orlgth1, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %13
  %19 = load i32, ptr @njob, align 4, !tbaa !31
  %20 = tail call ptr @AllocateCharMtx(i32 noundef %19, i32 noundef 0) #35
  store ptr %20, ptr @H__align.mseq1, align 8, !tbaa !19
  %21 = load i32, ptr @njob, align 4, !tbaa !31
  %22 = tail call ptr @AllocateCharMtx(i32 noundef %21, i32 noundef 0) #35
  store ptr %22, ptr @H__align.mseq2, align 8, !tbaa !19
  %23 = load i32, ptr @H__align.orlgth1, align 4
  br label %24

24:                                               ; preds = %18, %13
  %25 = phi i32 [ %23, %18 ], [ %16, %13 ]
  %26 = load ptr, ptr %0, align 8, !tbaa !19
  %27 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %26) #40
  %28 = trunc i64 %27 to i32
  %29 = load ptr, ptr %1, align 8, !tbaa !19
  %30 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %29) #40
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %25, %28
  %33 = load i32, ptr @H__align.orlgth2, align 4
  %34 = icmp slt i32 %33, %31
  %35 = select i1 %32, i1 true, i1 %34
  br i1 %35, label %36, label %124

36:                                               ; preds = %24
  %37 = icmp sgt i32 %25, 0
  %38 = icmp sgt i32 %33, 0
  %39 = select i1 %37, i1 %38, i1 false
  br i1 %39, label %40, label %73

40:                                               ; preds = %36
  %41 = load ptr, ptr @H__align.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @H__align.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @H__align.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @H__align.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %45) #35
  %46 = load ptr, ptr @H__align.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %46) #35
  %47 = load ptr, ptr @H__align.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %47) #35
  %48 = load ptr, ptr @H__align.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %48) #35
  %49 = load ptr, ptr @H__align.gappat1, align 8, !tbaa !19
  tail call void @free(ptr noundef %49) #35
  %50 = load ptr, ptr @H__align.gappat2, align 8, !tbaa !19
  tail call void @free(ptr noundef %50) #35
  %51 = load ptr, ptr @H__align.digf1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %51) #35
  %52 = load ptr, ptr @H__align.digf2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %52) #35
  %53 = load ptr, ptr @H__align.diaf1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %53) #35
  %54 = load ptr, ptr @H__align.diaf2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %54) #35
  %55 = load ptr, ptr @H__align.gapz1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %55) #35
  %56 = load ptr, ptr @H__align.gapz2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %56) #35
  %57 = load ptr, ptr @H__align.gapf1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %57) #35
  %58 = load ptr, ptr @H__align.gapf2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %58) #35
  %59 = load ptr, ptr @H__align.ogcp1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %59) #35
  %60 = load ptr, ptr @H__align.ogcp2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %60) #35
  %61 = load ptr, ptr @H__align.fgcp1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %61) #35
  %62 = load ptr, ptr @H__align.fgcp2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %62) #35
  %63 = load ptr, ptr @H__align.ogcp1g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %63) #35
  %64 = load ptr, ptr @H__align.ogcp2g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %64) #35
  %65 = load ptr, ptr @H__align.fgcp1g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %65) #35
  %66 = load ptr, ptr @H__align.fgcp2g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %66) #35
  %67 = load ptr, ptr @H__align.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %67) #35
  %68 = load ptr, ptr @H__align.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %68) #35
  %69 = load ptr, ptr @H__align.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %69) #35
  %70 = load ptr, ptr @H__align.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %70) #35
  %71 = load i32, ptr @H__align.orlgth1, align 4, !tbaa !31
  %72 = load i32, ptr @H__align.orlgth2, align 4, !tbaa !31
  br label %73

73:                                               ; preds = %40, %36
  %74 = phi i32 [ %72, %40 ], [ %33, %36 ]
  %75 = phi i32 [ %71, %40 ], [ %25, %36 ]
  %76 = sitofp i32 %28 to double
  %77 = fmul double %76, 1.300000e+00
  %78 = fptosi double %77 to i32
  %79 = tail call i32 @llvm.smax.i32(i32 %75, i32 %78)
  %80 = add nuw nsw i32 %79, 100
  %81 = sitofp i32 %31 to double
  %82 = fmul double %81, 1.300000e+00
  %83 = fptosi double %82 to i32
  %84 = tail call i32 @llvm.smax.i32(i32 %74, i32 %83)
  %85 = add nuw nsw i32 %84, 100
  %86 = add nuw nsw i32 %84, 102
  %87 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %87, ptr @H__align.w1, align 8, !tbaa !19
  %88 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %88, ptr @H__align.w2, align 8, !tbaa !19
  %89 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %89, ptr @H__align.match, align 8, !tbaa !19
  %90 = add nuw nsw i32 %79, 102
  %91 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %91, ptr @H__align.initverticalw, align 8, !tbaa !19
  %92 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %92, ptr @H__align.lastverticalw, align 8, !tbaa !19
  %93 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %93, ptr @H__align.m, align 8, !tbaa !19
  %94 = tail call ptr @AllocateIntVec(i32 noundef %86) #35
  store ptr %94, ptr @H__align.mp, align 8, !tbaa !19
  %95 = load i32, ptr @njob, align 4, !tbaa !31
  %96 = add nsw i32 %85, %80
  %97 = tail call ptr @AllocateCharMtx(i32 noundef %95, i32 noundef %96) #35
  store ptr %97, ptr @H__align.mseq, align 8, !tbaa !19
  %98 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %98, ptr @H__align.digf1, align 8, !tbaa !19
  %99 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %99, ptr @H__align.digf2, align 8, !tbaa !19
  %100 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %100, ptr @H__align.diaf1, align 8, !tbaa !19
  %101 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %101, ptr @H__align.diaf2, align 8, !tbaa !19
  %102 = sext i32 %90 to i64
  %103 = tail call noalias ptr @calloc(i64 noundef %102, i64 noundef 8) #41
  store ptr %103, ptr @H__align.gappat1, align 8, !tbaa !19
  %104 = sext i32 %86 to i64
  %105 = tail call noalias ptr @calloc(i64 noundef %104, i64 noundef 8) #41
  store ptr %105, ptr @H__align.gappat2, align 8, !tbaa !19
  %106 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %106, ptr @H__align.gapz1, align 8, !tbaa !19
  %107 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %107, ptr @H__align.gapz2, align 8, !tbaa !19
  %108 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %108, ptr @H__align.gapf1, align 8, !tbaa !19
  %109 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %109, ptr @H__align.gapf2, align 8, !tbaa !19
  %110 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %110, ptr @H__align.ogcp1, align 8, !tbaa !19
  %111 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %111, ptr @H__align.ogcp2, align 8, !tbaa !19
  %112 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %112, ptr @H__align.fgcp1, align 8, !tbaa !19
  %113 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %113, ptr @H__align.fgcp2, align 8, !tbaa !19
  %114 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %114, ptr @H__align.ogcp1g, align 8, !tbaa !19
  %115 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %115, ptr @H__align.ogcp2g, align 8, !tbaa !19
  %116 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %116, ptr @H__align.fgcp1g, align 8, !tbaa !19
  %117 = tail call ptr @AllocateFloatVec(i32 noundef %86) #35
  store ptr %117, ptr @H__align.fgcp2g, align 8, !tbaa !19
  %118 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %90) #35
  store ptr %118, ptr @H__align.cpmx1, align 8, !tbaa !19
  %119 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %86) #35
  store ptr %119, ptr @H__align.cpmx2, align 8, !tbaa !19
  %120 = tail call i32 @llvm.smax.i32(i32 %80, i32 %85)
  %121 = add nuw nsw i32 %120, 2
  %122 = tail call ptr @AllocateFloatMtx(i32 noundef %121, i32 noundef 26) #35
  store ptr %122, ptr @H__align.floatwork, align 8, !tbaa !19
  %123 = tail call ptr @AllocateIntMtx(i32 noundef %121, i32 noundef 27) #35
  store ptr %123, ptr @H__align.intwork, align 8, !tbaa !19
  store i32 %79, ptr @H__align.orlgth1, align 4, !tbaa !31
  store i32 %84, ptr @H__align.orlgth2, align 4, !tbaa !31
  br label %124

124:                                              ; preds = %73, %24
  %125 = phi i32 [ %33, %24 ], [ %84, %73 ]
  %126 = phi i32 [ %25, %24 ], [ %79, %73 ]
  %127 = icmp sgt i32 %4, 0
  br i1 %127, label %128, label %134

128:                                              ; preds = %124
  %129 = load ptr, ptr @H__align.mseq, align 8, !tbaa !19
  %130 = load ptr, ptr @H__align.mseq1, align 8, !tbaa !19
  %131 = shl i64 %27, 32
  %132 = ashr exact i64 %131, 32
  %133 = zext i32 %4 to i64
  br label %143

134:                                              ; preds = %143, %124
  %135 = icmp sgt i32 %5, 0
  br i1 %135, label %136, label %164

136:                                              ; preds = %134
  %137 = load ptr, ptr @H__align.mseq, align 8, !tbaa !19
  %138 = load ptr, ptr @H__align.mseq2, align 8, !tbaa !19
  %139 = shl i64 %30, 32
  %140 = ashr exact i64 %139, 32
  %141 = sext i32 %4 to i64
  %142 = zext i32 %5 to i64
  br label %153

143:                                              ; preds = %143, %128
  %144 = phi i64 [ 0, %128 ], [ %151, %143 ]
  %145 = getelementptr inbounds ptr, ptr %129, i64 %144
  %146 = load ptr, ptr %145, align 8, !tbaa !19
  %147 = getelementptr inbounds ptr, ptr %130, i64 %144
  store ptr %146, ptr %147, align 8, !tbaa !19
  %148 = getelementptr inbounds ptr, ptr %0, i64 %144
  %149 = load ptr, ptr %148, align 8, !tbaa !19
  %150 = getelementptr inbounds i8, ptr %149, i64 %132
  store i8 0, ptr %150, align 1, !tbaa !17
  %151 = add nuw nsw i64 %144, 1
  %152 = icmp eq i64 %151, %133
  br i1 %152, label %134, label %143, !llvm.loop !324

153:                                              ; preds = %153, %136
  %154 = phi i64 [ 0, %136 ], [ %162, %153 ]
  %155 = add nsw i64 %154, %141
  %156 = getelementptr inbounds ptr, ptr %137, i64 %155
  %157 = load ptr, ptr %156, align 8, !tbaa !19
  %158 = getelementptr inbounds ptr, ptr %138, i64 %154
  store ptr %157, ptr %158, align 8, !tbaa !19
  %159 = getelementptr inbounds ptr, ptr %1, i64 %154
  %160 = load ptr, ptr %159, align 8, !tbaa !19
  %161 = getelementptr inbounds i8, ptr %160, i64 %140
  store i8 0, ptr %161, align 1, !tbaa !17
  %162 = add nuw nsw i64 %154, 1
  %163 = icmp eq i64 %162, %142
  br i1 %163, label %164, label %153, !llvm.loop !325

164:                                              ; preds = %153, %134
  %165 = load i32, ptr @commonAlloc1, align 4
  %166 = icmp sgt i32 %126, %165
  %167 = load i32, ptr @commonAlloc2, align 4
  %168 = icmp sgt i32 %125, %167
  %169 = select i1 %166, i1 true, i1 %168
  br i1 %169, label %172, label %170

170:                                              ; preds = %164
  %171 = load ptr, ptr @commonIP, align 8, !tbaa !19
  br label %192

172:                                              ; preds = %164
  %173 = icmp ne i32 %165, 0
  %174 = icmp ne i32 %167, 0
  %175 = select i1 %173, i1 %174, i1 false
  br i1 %175, label %176, label %182

176:                                              ; preds = %172
  %177 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %177) #35
  %178 = load i32, ptr @H__align.orlgth1, align 4
  %179 = load i32, ptr @commonAlloc1, align 4
  %180 = load i32, ptr @H__align.orlgth2, align 4
  %181 = load i32, ptr @commonAlloc2, align 4
  br label %182

182:                                              ; preds = %176, %172
  %183 = phi i32 [ %181, %176 ], [ %167, %172 ]
  %184 = phi i32 [ %180, %176 ], [ %125, %172 ]
  %185 = phi i32 [ %179, %176 ], [ %165, %172 ]
  %186 = phi i32 [ %178, %176 ], [ %126, %172 ]
  %187 = tail call i32 @llvm.smax.i32(i32 %186, i32 %185)
  %188 = tail call i32 @llvm.smax.i32(i32 %184, i32 %183)
  %189 = add nsw i32 %187, 10
  %190 = add nsw i32 %188, 10
  %191 = tail call ptr @AllocateIntMtx(i32 noundef %189, i32 noundef %190) #35
  store ptr %191, ptr @commonIP, align 8, !tbaa !19
  store i32 %187, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %188, ptr @commonAlloc2, align 4, !tbaa !31
  br label %192

192:                                              ; preds = %182, %170
  %193 = phi ptr [ %171, %170 ], [ %191, %182 ]
  store ptr %193, ptr @H__align.ijp, align 8, !tbaa !19
  %194 = load ptr, ptr @H__align.cpmx1, align 8, !tbaa !19
  tail call void @cpmx_calc_new(ptr noundef nonnull %0, ptr noundef %194, ptr noundef %2, i32 noundef %28, i32 noundef %4) #35
  %195 = load ptr, ptr @H__align.cpmx2, align 8, !tbaa !19
  tail call void @cpmx_calc_new(ptr noundef nonnull %1, ptr noundef %195, ptr noundef %3, i32 noundef %31, i32 noundef %5) #35
  %196 = icmp eq ptr %9, null
  %197 = load ptr, ptr @H__align.ogcp1g, align 8, !tbaa !19
  br i1 %196, label %206, label %198

198:                                              ; preds = %192
  tail call void @new_OpeningGapCount_zure(ptr noundef %197, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %199 = load ptr, ptr @H__align.ogcp2g, align 8, !tbaa !19
  tail call void @new_OpeningGapCount_zure(ptr noundef %199, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10, ptr noundef %11) #35
  %200 = load ptr, ptr @H__align.fgcp1g, align 8, !tbaa !19
  tail call void @new_FinalGapCount_zure(ptr noundef %200, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %201 = load ptr, ptr @H__align.fgcp2g, align 8, !tbaa !19
  tail call void @new_FinalGapCount_zure(ptr noundef %201, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef nonnull %9, ptr noundef %12) #35
  %202 = load ptr, ptr @H__align.digf1, align 8, !tbaa !19
  tail call void @getdigapfreq_part(ptr noundef %202, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %203 = load ptr, ptr @H__align.digf2, align 8, !tbaa !19
  tail call void @getdigapfreq_part(ptr noundef %203, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10, ptr noundef %12) #35
  %204 = load ptr, ptr @H__align.diaf1, align 8, !tbaa !19
  tail call void @getdiaminofreq_part(ptr noundef %204, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %205 = load ptr, ptr @H__align.diaf2, align 8, !tbaa !19
  tail call void @getdiaminofreq_part(ptr noundef %205, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef nonnull %9, ptr noundef %12) #35
  br label %216

206:                                              ; preds = %192
  tail call void @st_OpeningGapCount(ptr noundef %197, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %207 = load ptr, ptr @H__align.ogcp2g, align 8, !tbaa !19
  tail call void @st_OpeningGapCount(ptr noundef %207, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %208 = load ptr, ptr @H__align.fgcp1g, align 8, !tbaa !19
  tail call void @st_FinalGapCount_zure(ptr noundef %208, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %209 = load ptr, ptr @H__align.fgcp2g, align 8, !tbaa !19
  tail call void @st_FinalGapCount_zure(ptr noundef %209, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %210 = load ptr, ptr @H__align.gappat1, align 8, !tbaa !19
  tail call void @st_getGapPattern(ptr noundef %210, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %211 = load ptr, ptr @H__align.gappat2, align 8, !tbaa !19
  tail call void @st_getGapPattern(ptr noundef %211, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %212 = load ptr, ptr @H__align.digf1, align 8, !tbaa !19
  tail call void @getdigapfreq_st(ptr noundef %212, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %213 = load ptr, ptr @H__align.digf2, align 8, !tbaa !19
  tail call void @getdigapfreq_st(ptr noundef %213, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %214 = load ptr, ptr @H__align.diaf1, align 8, !tbaa !19
  tail call void @getdiaminofreq_x(ptr noundef %214, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %215 = load ptr, ptr @H__align.diaf2, align 8, !tbaa !19
  tail call void @getdiaminofreq_x(ptr noundef %215, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  br label %216

216:                                              ; preds = %206, %198
  %217 = load ptr, ptr @H__align.gapf1, align 8, !tbaa !19
  tail call void @getgapfreq(ptr noundef %217, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %218 = load ptr, ptr @H__align.gapf2, align 8, !tbaa !19
  tail call void @getgapfreq(ptr noundef %218, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %219 = load ptr, ptr @H__align.gapz1, align 8, !tbaa !19
  tail call void @getgapfreq_zure(ptr noundef %219, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %220 = load ptr, ptr @H__align.gapz2, align 8, !tbaa !19
  tail call void @getgapfreq_zure(ptr noundef %220, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %221 = load ptr, ptr @H__align.w1, align 8, !tbaa !19
  %222 = load ptr, ptr @H__align.w2, align 8, !tbaa !19
  %223 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  %224 = load ptr, ptr @H__align.cpmx2, align 8, !tbaa !19
  %225 = load ptr, ptr @H__align.cpmx1, align 8, !tbaa !19
  %226 = load ptr, ptr @H__align.floatwork, align 8, !tbaa !19
  %227 = load ptr, ptr @H__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc(ptr noundef %223, ptr noundef %224, ptr noundef %225, i32 noundef 0, i32 noundef %28, ptr noundef %226, ptr noundef %227, i32 noundef 1) #39
  %228 = icmp eq ptr %7, null
  br i1 %228, label %266, label %229

229:                                              ; preds = %216
  %230 = icmp sgt i32 %28, 0
  br i1 %230, label %231, label %246

231:                                              ; preds = %229
  %232 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  %233 = load ptr, ptr @impmtx, align 8, !tbaa !19
  %234 = and i64 %27, 4294967295
  br label %235

235:                                              ; preds = %235, %231
  %236 = phi i64 [ 0, %231 ], [ %244, %235 ]
  %237 = phi ptr [ %232, %231 ], [ %241, %235 ]
  %238 = getelementptr inbounds ptr, ptr %233, i64 %236
  %239 = load ptr, ptr %238, align 8, !tbaa !19
  %240 = load float, ptr %239, align 4, !tbaa !167
  %241 = getelementptr inbounds float, ptr %237, i64 1
  %242 = load float, ptr %237, align 4, !tbaa !167
  %243 = fadd float %240, %242
  store float %243, ptr %237, align 4, !tbaa !167
  %244 = add nuw nsw i64 %236, 1
  %245 = icmp eq i64 %244, %234
  br i1 %245, label %246, label %235, !llvm.loop !326

246:                                              ; preds = %235, %229
  %247 = load ptr, ptr @H__align.cpmx1, align 8, !tbaa !19
  %248 = load ptr, ptr @H__align.cpmx2, align 8, !tbaa !19
  %249 = load ptr, ptr @H__align.floatwork, align 8, !tbaa !19
  %250 = load ptr, ptr @H__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc(ptr noundef %221, ptr noundef %247, ptr noundef %248, i32 noundef 0, i32 noundef %31, ptr noundef %249, ptr noundef %250, i32 noundef 1) #39
  %251 = icmp eq i32 %31, 0
  br i1 %251, label %274, label %252

252:                                              ; preds = %246
  %253 = load ptr, ptr @impmtx, align 8, !tbaa !19
  %254 = load ptr, ptr %253, align 8, !tbaa !19
  br label %255

255:                                              ; preds = %255, %252
  %256 = phi ptr [ %260, %255 ], [ %254, %252 ]
  %257 = phi i32 [ %259, %255 ], [ %31, %252 ]
  %258 = phi ptr [ %262, %255 ], [ %221, %252 ]
  %259 = add nsw i32 %257, -1
  %260 = getelementptr inbounds float, ptr %256, i64 1
  %261 = load float, ptr %256, align 4, !tbaa !167
  %262 = getelementptr inbounds float, ptr %258, i64 1
  %263 = load float, ptr %258, align 4, !tbaa !167
  %264 = fadd float %261, %263
  store float %264, ptr %258, align 4, !tbaa !167
  %265 = icmp eq i32 %259, 0
  br i1 %265, label %271, label %255, !llvm.loop !327

266:                                              ; preds = %216
  %267 = load ptr, ptr @H__align.cpmx1, align 8, !tbaa !19
  %268 = load ptr, ptr @H__align.cpmx2, align 8, !tbaa !19
  %269 = load ptr, ptr @H__align.floatwork, align 8, !tbaa !19
  %270 = load ptr, ptr @H__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc(ptr noundef %221, ptr noundef %267, ptr noundef %268, i32 noundef 0, i32 noundef %31, ptr noundef %269, ptr noundef %270, i32 noundef 1) #39
  br label %271

271:                                              ; preds = %266, %255
  %272 = load i32, ptr @outgap, align 4, !tbaa !31
  %273 = icmp eq i32 %272, 1
  br i1 %273, label %283, label %277

274:                                              ; preds = %246
  %275 = load i32, ptr @outgap, align 4, !tbaa !31
  %276 = icmp eq i32 %275, 1
  br i1 %276, label %283, label %380

277:                                              ; preds = %271
  %278 = icmp slt i32 %31, 1
  br i1 %278, label %380, label %279

279:                                              ; preds = %277
  %280 = load i32, ptr @offset, align 4, !tbaa !31
  %281 = add i64 %30, 1
  %282 = and i64 %281, 4294967295
  br label %387

283:                                              ; preds = %274, %271
  %284 = icmp slt i32 %28, 1
  br i1 %284, label %295, label %285

285:                                              ; preds = %283
  %286 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  %287 = load ptr, ptr @H__align.diaf1, align 8, !tbaa !19
  %288 = load ptr, ptr @H__align.gapf2, align 8, !tbaa !19
  %289 = fpext float %15 to double
  %290 = load ptr, ptr @H__align.gappat1, align 8, !tbaa !19
  %291 = load ptr, ptr @H__align.gappat2, align 8
  %292 = load ptr, ptr @H__align.diaf2, align 8
  %293 = add i64 %27, 1
  %294 = and i64 %293, 4294967295
  br label %308

295:                                              ; preds = %339, %283
  %296 = icmp slt i32 %31, 1
  br i1 %296, label %297, label %299

297:                                              ; preds = %295
  %298 = load ptr, ptr @H__align.m, align 8, !tbaa !19
  store float 0.000000e+00, ptr %298, align 4, !tbaa !167
  br label %431

299:                                              ; preds = %295
  %300 = load ptr, ptr @H__align.diaf2, align 8, !tbaa !19
  %301 = load ptr, ptr @H__align.gapf1, align 8, !tbaa !19
  %302 = fpext float %15 to double
  %303 = load ptr, ptr @H__align.gappat2, align 8, !tbaa !19
  %304 = load ptr, ptr @H__align.gappat1, align 8
  %305 = load ptr, ptr @H__align.diaf1, align 8
  %306 = add i64 %30, 1
  %307 = and i64 %306, 4294967295
  br label %344

308:                                              ; preds = %339, %285
  %309 = phi i64 [ 1, %285 ], [ %342, %339 ]
  %310 = getelementptr inbounds float, ptr %286, i64 %309
  %311 = load float, ptr %310, align 4, !tbaa !167
  %312 = fadd float %311, 0.000000e+00
  store float %312, ptr %310, align 4, !tbaa !167
  %313 = getelementptr inbounds float, ptr %287, i64 %309
  %314 = load float, ptr %313, align 4, !tbaa !167
  %315 = fpext float %314 to double
  %316 = load float, ptr %288, align 4, !tbaa !167
  %317 = fpext float %316 to double
  %318 = fsub double 1.000000e+00, %317
  %319 = fmul double %318, %315
  %320 = fmul double %319, %289
  %321 = fptrunc double %320 to float
  %322 = getelementptr inbounds ptr, ptr %290, i64 %309
  %323 = load ptr, ptr %322, align 8, !tbaa !19
  %324 = getelementptr inbounds %struct._Gappattern, ptr %323, i64 0, i32 1
  %325 = load float, ptr %324, align 4, !tbaa !328
  %326 = fcmp une float %325, 0.000000e+00
  br i1 %326, label %327, label %339

327:                                              ; preds = %308
  %328 = fpext float %325 to double
  %329 = fmul double %318, %328
  %330 = fpext float %321 to double
  %331 = tail call double @llvm.fmuladd.f64(double %329, double %289, double %330)
  %332 = fptrunc double %331 to float
  %333 = load ptr, ptr %291, align 8, !tbaa !19
  %334 = load float, ptr %292, align 4, !tbaa !167
  %335 = trunc i64 %309 to i32
  %336 = tail call fastcc float @countnocountx(ptr noundef %333, float noundef %334, ptr noundef nonnull %323, i32 noundef %335) #39
  %337 = fneg float %336
  %338 = tail call float @llvm.fmuladd.f32(float %337, float %15, float %332)
  br label %339

339:                                              ; preds = %327, %308
  %340 = phi float [ %338, %327 ], [ %321, %308 ]
  %341 = fadd float %312, %340
  store float %341, ptr %310, align 4, !tbaa !167
  %342 = add nuw nsw i64 %309, 1
  %343 = icmp eq i64 %342, %294
  br i1 %343, label %295, label %308, !llvm.loop !330

344:                                              ; preds = %375, %299
  %345 = phi i64 [ 1, %299 ], [ %378, %375 ]
  %346 = getelementptr inbounds float, ptr %221, i64 %345
  %347 = load float, ptr %346, align 4, !tbaa !167
  %348 = fadd float %347, 0.000000e+00
  store float %348, ptr %346, align 4, !tbaa !167
  %349 = getelementptr inbounds float, ptr %300, i64 %345
  %350 = load float, ptr %349, align 4, !tbaa !167
  %351 = fpext float %350 to double
  %352 = load float, ptr %301, align 4, !tbaa !167
  %353 = fpext float %352 to double
  %354 = fsub double 1.000000e+00, %353
  %355 = fmul double %354, %351
  %356 = fmul double %355, %302
  %357 = fptrunc double %356 to float
  %358 = getelementptr inbounds ptr, ptr %303, i64 %345
  %359 = load ptr, ptr %358, align 8, !tbaa !19
  %360 = getelementptr inbounds %struct._Gappattern, ptr %359, i64 0, i32 1
  %361 = load float, ptr %360, align 4, !tbaa !328
  %362 = fcmp une float %361, 0.000000e+00
  br i1 %362, label %363, label %375

363:                                              ; preds = %344
  %364 = fpext float %361 to double
  %365 = fmul double %354, %364
  %366 = fpext float %357 to double
  %367 = tail call double @llvm.fmuladd.f64(double %365, double %302, double %366)
  %368 = fptrunc double %367 to float
  %369 = load ptr, ptr %304, align 8, !tbaa !19
  %370 = load float, ptr %305, align 4, !tbaa !167
  %371 = trunc i64 %345 to i32
  %372 = tail call fastcc float @countnocountx(ptr noundef %369, float noundef %370, ptr noundef nonnull %359, i32 noundef %371) #39
  %373 = fneg float %372
  %374 = tail call float @llvm.fmuladd.f32(float %373, float %15, float %368)
  br label %375

375:                                              ; preds = %363, %344
  %376 = phi float [ %374, %363 ], [ %357, %344 ]
  %377 = fadd float %348, %376
  store float %377, ptr %346, align 4, !tbaa !167
  %378 = add nuw nsw i64 %345, 1
  %379 = icmp eq i64 %378, %307
  br i1 %379, label %413, label %344, !llvm.loop !331

380:                                              ; preds = %387, %277, %274
  %381 = icmp slt i32 %28, 1
  br i1 %381, label %413, label %382

382:                                              ; preds = %380
  %383 = load i32, ptr @offset, align 4, !tbaa !31
  %384 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  %385 = add i64 %27, 1
  %386 = and i64 %385, 4294967295
  br label %400

387:                                              ; preds = %387, %279
  %388 = phi i64 [ 1, %279 ], [ %398, %387 ]
  %389 = trunc i64 %388 to i32
  %390 = mul nsw i32 %280, %389
  %391 = sitofp i32 %390 to double
  %392 = fmul double %391, 5.000000e-01
  %393 = getelementptr inbounds float, ptr %221, i64 %388
  %394 = load float, ptr %393, align 4, !tbaa !167
  %395 = fpext float %394 to double
  %396 = fsub double %395, %392
  %397 = fptrunc double %396 to float
  store float %397, ptr %393, align 4, !tbaa !167
  %398 = add nuw nsw i64 %388, 1
  %399 = icmp eq i64 %398, %282
  br i1 %399, label %380, label %387, !llvm.loop !332

400:                                              ; preds = %400, %382
  %401 = phi i64 [ 1, %382 ], [ %411, %400 ]
  %402 = trunc i64 %401 to i32
  %403 = mul nsw i32 %383, %402
  %404 = sitofp i32 %403 to double
  %405 = fmul double %404, 5.000000e-01
  %406 = getelementptr inbounds float, ptr %384, i64 %401
  %407 = load float, ptr %406, align 4, !tbaa !167
  %408 = fpext float %407 to double
  %409 = fsub double %408, %405
  %410 = fptrunc double %409 to float
  store float %410, ptr %406, align 4, !tbaa !167
  %411 = add nuw nsw i64 %401, 1
  %412 = icmp eq i64 %411, %386
  br i1 %412, label %413, label %400, !llvm.loop !333

413:                                              ; preds = %400, %380, %375
  %414 = load ptr, ptr @H__align.m, align 8, !tbaa !19
  store float 0.000000e+00, ptr %414, align 4, !tbaa !167
  %415 = icmp slt i32 %31, 1
  br i1 %415, label %431, label %416

416:                                              ; preds = %413
  %417 = load ptr, ptr @H__align.mp, align 8, !tbaa !19
  %418 = add i64 %30, 1
  %419 = and i64 %418, 4294967295
  br label %420

420:                                              ; preds = %420, %416
  %421 = phi i64 [ 1, %416 ], [ %429, %420 ]
  %422 = getelementptr inbounds i32, ptr %417, i64 %421
  store i32 0, ptr %422, align 4, !tbaa !31
  %423 = add nsw i64 %421, -1
  %424 = getelementptr inbounds float, ptr %221, i64 %423
  %425 = load float, ptr %424, align 4, !tbaa !167
  %426 = fadd float %425, 0.000000e+00
  %427 = tail call float @llvm.fmuladd.f32(float %15, float 1.000000e+04, float %426)
  %428 = getelementptr inbounds float, ptr %414, i64 %421
  store float %427, ptr %428, align 4, !tbaa !167
  %429 = add nuw nsw i64 %421, 1
  %430 = icmp eq i64 %429, %419
  br i1 %430, label %431, label %420, !llvm.loop !334

431:                                              ; preds = %420, %413, %297
  %432 = phi i1 [ true, %297 ], [ true, %413 ], [ %415, %420 ]
  %433 = icmp eq i32 %31, 0
  br i1 %433, label %434, label %436

434:                                              ; preds = %431
  %435 = load ptr, ptr @H__align.lastverticalw, align 8, !tbaa !19
  store float 0.000000e+00, ptr %435, align 4, !tbaa !167
  br label %443

436:                                              ; preds = %431
  %437 = shl i64 %30, 32
  %438 = add i64 %437, -4294967296
  %439 = ashr exact i64 %438, 32
  %440 = getelementptr inbounds float, ptr %221, i64 %439
  %441 = load float, ptr %440, align 4, !tbaa !167
  %442 = load ptr, ptr @H__align.lastverticalw, align 8, !tbaa !19
  store float %441, ptr %442, align 4, !tbaa !167
  br label %443

443:                                              ; preds = %436, %434
  %444 = phi ptr [ %442, %436 ], [ %435, %434 ]
  %445 = load i32, ptr @outgap, align 4, !tbaa !31
  %446 = icmp ne i32 %445, 0
  %447 = zext i1 %446 to i32
  %448 = add nsw i32 %447, %28
  %449 = icmp sgt i32 %448, 1
  br i1 %449, label %450, label %642

450:                                              ; preds = %443
  %451 = or i1 %228, %433
  %452 = fpext float %15 to double
  %453 = shl i64 %30, 32
  %454 = add i64 %453, -4294967296
  %455 = ashr exact i64 %454, 32
  %456 = add i64 %30, 1
  %457 = zext i32 %448 to i64
  %458 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  %459 = and i64 %456, 4294967295
  br label %460

460:                                              ; preds = %632, %450
  %461 = phi ptr [ %458, %450 ], [ %490, %632 ]
  %462 = phi i64 [ 1, %450 ], [ %638, %632 ]
  %463 = phi float [ 0.000000e+00, %450 ], [ %633, %632 ]
  %464 = phi ptr [ %221, %450 ], [ %465, %632 ]
  %465 = phi ptr [ %222, %450 ], [ %464, %632 ]
  %466 = add nsw i64 %462, -1
  %467 = getelementptr inbounds float, ptr %461, i64 %466
  %468 = load float, ptr %467, align 4, !tbaa !167
  store float %468, ptr %464, align 4, !tbaa !167
  %469 = load ptr, ptr @H__align.cpmx1, align 8, !tbaa !19
  %470 = load ptr, ptr @H__align.cpmx2, align 8, !tbaa !19
  %471 = load ptr, ptr @H__align.floatwork, align 8, !tbaa !19
  %472 = load ptr, ptr @H__align.intwork, align 8, !tbaa !19
  %473 = trunc i64 %462 to i32
  tail call fastcc void @match_calc(ptr noundef %465, ptr noundef %469, ptr noundef %470, i32 noundef %473, i32 noundef %31, ptr noundef %471, ptr noundef %472, i32 noundef 0) #39
  br i1 %451, label %489, label %474

474:                                              ; preds = %460
  %475 = load ptr, ptr @impmtx, align 8, !tbaa !19
  %476 = getelementptr inbounds ptr, ptr %475, i64 %462
  %477 = load ptr, ptr %476, align 8, !tbaa !19
  br label %478

478:                                              ; preds = %478, %474
  %479 = phi ptr [ %483, %478 ], [ %477, %474 ]
  %480 = phi i32 [ %482, %478 ], [ %31, %474 ]
  %481 = phi ptr [ %485, %478 ], [ %465, %474 ]
  %482 = add nsw i32 %480, -1
  %483 = getelementptr inbounds float, ptr %479, i64 1
  %484 = load float, ptr %479, align 4, !tbaa !167
  %485 = getelementptr inbounds float, ptr %481, i64 1
  %486 = load float, ptr %481, align 4, !tbaa !167
  %487 = fadd float %484, %486
  store float %487, ptr %481, align 4, !tbaa !167
  %488 = icmp eq i32 %482, 0
  br i1 %488, label %489, label %478, !llvm.loop !327

489:                                              ; preds = %478, %460
  %490 = load ptr, ptr @H__align.initverticalw, align 8, !tbaa !19
  %491 = getelementptr inbounds float, ptr %490, i64 %462
  %492 = load float, ptr %491, align 4, !tbaa !167
  store float %492, ptr %465, align 4, !tbaa !167
  %493 = load ptr, ptr @H__align.ijp, align 8, !tbaa !19
  br i1 %432, label %632, label %494

494:                                              ; preds = %489
  %495 = load float, ptr %464, align 4, !tbaa !167
  %496 = fadd float %495, 0.000000e+00
  %497 = tail call float @llvm.fmuladd.f32(float %15, float 1.000000e+04, float %496)
  %498 = getelementptr inbounds ptr, ptr %493, i64 %462
  %499 = load ptr, ptr %498, align 8, !tbaa !19
  %500 = load ptr, ptr @H__align.m, align 8, !tbaa !19
  %501 = load ptr, ptr @H__align.mp, align 8, !tbaa !19
  %502 = load ptr, ptr @H__align.gappat2, align 8, !tbaa !19
  %503 = load ptr, ptr @H__align.diaf1, align 8
  %504 = getelementptr inbounds float, ptr %503, i64 %462
  %505 = load ptr, ptr @H__align.gappat1, align 8, !tbaa !19
  %506 = getelementptr inbounds ptr, ptr %505, i64 %462
  %507 = load ptr, ptr %506, align 8, !tbaa !19
  %508 = getelementptr inbounds %struct._Gappattern, ptr %507, i64 0, i32 1
  %509 = load ptr, ptr @H__align.diaf2, align 8
  %510 = load ptr, ptr @H__align.gapf1, align 8, !tbaa !19
  %511 = getelementptr inbounds float, ptr %510, i64 %462
  %512 = load ptr, ptr @H__align.gapf2, align 8
  %513 = trunc i64 %466 to i32
  br label %514

514:                                              ; preds = %626, %494
  %515 = phi i64 [ 1, %494 ], [ %630, %626 ]
  %516 = phi ptr [ %465, %494 ], [ %526, %626 ]
  %517 = phi ptr [ %499, %494 ], [ %525, %626 ]
  %518 = phi ptr [ %500, %494 ], [ %524, %626 ]
  %519 = phi ptr [ %501, %494 ], [ %523, %626 ]
  %520 = phi ptr [ %464, %494 ], [ %629, %626 ]
  %521 = phi i32 [ 0, %494 ], [ %584, %626 ]
  %522 = phi float [ %497, %494 ], [ %583, %626 ]
  %523 = getelementptr inbounds i32, ptr %519, i64 1
  %524 = getelementptr inbounds float, ptr %518, i64 1
  %525 = getelementptr inbounds i32, ptr %517, i64 1
  %526 = getelementptr inbounds float, ptr %516, i64 1
  %527 = load float, ptr %520, align 4, !tbaa !167
  %528 = getelementptr inbounds ptr, ptr %502, i64 %515
  %529 = load ptr, ptr %528, align 8, !tbaa !19
  %530 = getelementptr inbounds %struct._Gappattern, ptr %529, i64 0, i32 1
  %531 = load float, ptr %530, align 4, !tbaa !328
  %532 = fcmp une float %531, 0.000000e+00
  br i1 %532, label %533, label %538

533:                                              ; preds = %514
  %534 = load float, ptr %504, align 4, !tbaa !167
  %535 = fmul float %531, %534
  %536 = fmul float %535, %15
  %537 = fadd float %527, %536
  br label %538

538:                                              ; preds = %533, %514
  %539 = phi float [ %537, %533 ], [ %527, %514 ]
  %540 = load float, ptr %508, align 4, !tbaa !328
  %541 = fcmp une float %540, 0.000000e+00
  %542 = getelementptr inbounds float, ptr %509, i64 %515
  %543 = load float, ptr %542, align 4, !tbaa !167
  %544 = fmul float %540, %543
  %545 = fmul float %544, %15
  %546 = select i1 %541, float %545, float -0.000000e+00
  %547 = fadd float %539, %546
  %548 = fmul float %531, %540
  %549 = fmul float %548, %15
  %550 = fadd float %549, %547
  store i32 0, ptr %525, align 4, !tbaa !31
  %551 = fpext float %543 to double
  %552 = load float, ptr %511, align 4, !tbaa !167
  %553 = fpext float %552 to double
  %554 = fsub double 1.000000e+00, %553
  %555 = fmul double %554, %551
  %556 = fmul double %555, %452
  %557 = fptrunc double %556 to float
  br i1 %532, label %558, label %571

558:                                              ; preds = %538
  %559 = fpext float %531 to double
  %560 = fmul double %554, %559
  %561 = fpext float %557 to double
  %562 = tail call double @llvm.fmuladd.f64(double %560, double %452, double %561)
  %563 = fptrunc double %562 to float
  %564 = load float, ptr %504, align 4, !tbaa !167
  %565 = xor i32 %521, -1
  %566 = trunc i64 %515 to i32
  %567 = add i32 %566, %565
  %568 = tail call fastcc float @countnocountx(ptr noundef nonnull %507, float noundef %564, ptr noundef nonnull %529, i32 noundef %567) #39
  %569 = fneg float %568
  %570 = tail call float @llvm.fmuladd.f32(float %569, float %15, float %563)
  br label %571

571:                                              ; preds = %558, %538
  %572 = phi float [ %570, %558 ], [ %557, %538 ]
  %573 = fadd float %572, %522
  %574 = fcmp ogt float %573, %550
  br i1 %574, label %575, label %578

575:                                              ; preds = %571
  %576 = trunc i64 %515 to i32
  %577 = sub i32 %521, %576
  store i32 %577, ptr %525, align 4, !tbaa !31
  br label %578

578:                                              ; preds = %575, %571
  %579 = phi float [ %573, %575 ], [ %550, %571 ]
  %580 = fcmp ult float %527, %522
  %581 = trunc i64 %515 to i32
  %582 = add i32 %581, -1
  %583 = select i1 %580, float %522, float %527
  %584 = select i1 %580, i32 %521, i32 %582
  %585 = load float, ptr %504, align 4, !tbaa !167
  %586 = fpext float %585 to double
  %587 = getelementptr inbounds float, ptr %512, i64 %515
  %588 = load float, ptr %587, align 4, !tbaa !167
  %589 = fpext float %588 to double
  %590 = fsub double 1.000000e+00, %589
  %591 = fmul double %590, %586
  %592 = fmul double %591, %452
  %593 = fptrunc double %592 to float
  br i1 %541, label %594, label %614

594:                                              ; preds = %578
  %595 = fpext float %540 to double
  %596 = fmul double %590, %595
  %597 = fpext float %593 to double
  %598 = tail call double @llvm.fmuladd.f64(double %596, double %452, double %597)
  %599 = fptrunc double %598 to float
  %600 = load i32, ptr %523, align 4, !tbaa !31
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds ptr, ptr %493, i64 %601
  %603 = load ptr, ptr %602, align 8, !tbaa !19
  %604 = add nsw i64 %515, -1
  %605 = getelementptr inbounds i32, ptr %603, i64 %604
  %606 = load i32, ptr %605, align 4, !tbaa !31
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %608, label %614

608:                                              ; preds = %594
  %609 = xor i32 %600, -1
  %610 = add i32 %473, %609
  %611 = tail call fastcc float @countnocountx(ptr noundef nonnull %529, float noundef %543, ptr noundef nonnull %507, i32 noundef %610) #39
  %612 = fneg float %611
  %613 = tail call float @llvm.fmuladd.f32(float %612, float %15, float %599)
  br label %614

614:                                              ; preds = %608, %594, %578
  %615 = phi float [ %613, %608 ], [ %599, %594 ], [ %593, %578 ]
  %616 = load float, ptr %524, align 4, !tbaa !167
  %617 = fadd float %615, %616
  %618 = fcmp ogt float %617, %579
  br i1 %618, label %619, label %622

619:                                              ; preds = %614
  %620 = load i32, ptr %523, align 4, !tbaa !31
  %621 = sub nsw i32 %473, %620
  store i32 %621, ptr %525, align 4, !tbaa !31
  br label %622

622:                                              ; preds = %619, %614
  %623 = phi float [ %617, %619 ], [ %579, %614 ]
  %624 = fcmp ult float %527, %616
  br i1 %624, label %626, label %625

625:                                              ; preds = %622
  store float %527, ptr %524, align 4, !tbaa !167
  store i32 %513, ptr %523, align 4, !tbaa !31
  br label %626

626:                                              ; preds = %625, %622
  %627 = load float, ptr %526, align 4, !tbaa !167
  %628 = fadd float %623, %627
  store float %628, ptr %526, align 4, !tbaa !167
  %629 = getelementptr inbounds float, ptr %520, i64 1
  %630 = add nuw nsw i64 %515, 1
  %631 = icmp eq i64 %630, %459
  br i1 %631, label %632, label %514, !llvm.loop !335

632:                                              ; preds = %626, %489
  %633 = phi float [ %463, %489 ], [ %623, %626 ]
  %634 = getelementptr inbounds float, ptr %465, i64 %455
  %635 = load float, ptr %634, align 4, !tbaa !167
  %636 = load ptr, ptr @H__align.lastverticalw, align 8, !tbaa !19
  %637 = getelementptr inbounds float, ptr %636, i64 %462
  store float %635, ptr %637, align 4, !tbaa !167
  %638 = add nuw nsw i64 %462, 1
  %639 = icmp eq i64 %638, %457
  br i1 %639, label %640, label %460, !llvm.loop !336

640:                                              ; preds = %632
  %.lcssa6 = phi float [ %633, %632 ]
  %.lcssa5 = phi ptr [ %636, %632 ]
  %.lcssa4 = phi ptr [ %465, %632 ]
  %641 = load i32, ptr @outgap, align 4, !tbaa !31
  br label %642

642:                                              ; preds = %640, %443
  %643 = phi ptr [ %444, %443 ], [ %.lcssa5, %640 ]
  %644 = phi i32 [ %445, %443 ], [ %641, %640 ]
  %645 = phi ptr [ %221, %443 ], [ %.lcssa4, %640 ]
  %646 = phi float [ 0.000000e+00, %443 ], [ %.lcssa6, %640 ]
  %647 = icmp eq i32 %644, 0
  br i1 %647, label %648, label %689

648:                                              ; preds = %642
  br i1 %432, label %653, label %649

649:                                              ; preds = %648
  %650 = load i32, ptr @offset, align 4, !tbaa !31
  %651 = add i64 %30, 1
  %652 = and i64 %651, 4294967295
  br label %662

653:                                              ; preds = %662, %648
  %654 = icmp slt i32 %28, 1
  br i1 %654, label %689, label %655

655:                                              ; preds = %653
  %656 = load i32, ptr @offset, align 4, !tbaa !31
  %657 = sitofp i32 %656 to double
  %658 = sitofp i32 %28 to double
  %659 = fneg double %657
  %660 = add i64 %27, 1
  %661 = and i64 %660, 4294967295
  br label %676

662:                                              ; preds = %662, %649
  %663 = phi i64 [ 1, %649 ], [ %674, %662 ]
  %664 = trunc i64 %663 to i32
  %665 = sub nsw i32 %31, %664
  %666 = mul nsw i32 %650, %665
  %667 = sitofp i32 %666 to double
  %668 = fmul double %667, 5.000000e-01
  %669 = getelementptr inbounds float, ptr %645, i64 %663
  %670 = load float, ptr %669, align 4, !tbaa !167
  %671 = fpext float %670 to double
  %672 = fsub double %671, %668
  %673 = fptrunc double %672 to float
  store float %673, ptr %669, align 4, !tbaa !167
  %674 = add nuw nsw i64 %663, 1
  %675 = icmp eq i64 %674, %652
  br i1 %675, label %653, label %662, !llvm.loop !337

676:                                              ; preds = %676, %655
  %677 = phi i64 [ 1, %655 ], [ %687, %676 ]
  %678 = trunc i64 %677 to i32
  %679 = sitofp i32 %678 to double
  %680 = fmul double %679, 5.000000e-01
  %681 = fsub double %658, %680
  %682 = getelementptr inbounds float, ptr %643, i64 %677
  %683 = load float, ptr %682, align 4, !tbaa !167
  %684 = fpext float %683 to double
  %685 = tail call double @llvm.fmuladd.f64(double %659, double %681, double %684)
  %686 = fptrunc double %685 to float
  store float %686, ptr %682, align 4, !tbaa !167
  %687 = add nuw nsw i64 %677, 1
  %688 = icmp eq i64 %687, %661
  br i1 %688, label %689, label %676, !llvm.loop !338

689:                                              ; preds = %676, %653, %642
  %690 = load ptr, ptr @H__align.mseq1, align 8, !tbaa !19
  %691 = load ptr, ptr @H__align.mseq2, align 8, !tbaa !19
  %692 = load ptr, ptr @H__align.ijp, align 8, !tbaa !19
  %693 = load ptr, ptr %0, align 8, !tbaa !19
  %694 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %693) #40
  %695 = trunc i64 %694 to i32
  %696 = load ptr, ptr %1, align 8, !tbaa !19
  %697 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %696) #40
  %698 = trunc i64 %697 to i32
  %699 = add nsw i32 %698, %695
  %700 = add nsw i32 %699, 1
  %701 = tail call ptr @AllocateCharVec(i32 noundef %700) #35
  %702 = tail call ptr @AllocateCharVec(i32 noundef %700) #35
  %703 = load i32, ptr @outgap, align 4, !tbaa !31
  %704 = icmp eq i32 %703, 1
  br i1 %228, label %926, label %705

705:                                              ; preds = %689
  br i1 %704, label %756, label %706

706:                                              ; preds = %705
  %707 = load float, ptr %643, align 4, !tbaa !167
  %708 = icmp sgt i32 %695, 0
  br i1 %708, label %709, label %716

709:                                              ; preds = %706
  %710 = shl i64 %694, 32
  %711 = ashr exact i64 %710, 32
  %712 = getelementptr inbounds ptr, ptr %692, i64 %711
  %713 = shl i64 %697, 32
  %714 = ashr exact i64 %713, 32
  %715 = and i64 %694, 4294967295
  br label %726

716:                                              ; preds = %737, %706
  %717 = phi float [ %707, %706 ], [ %738, %737 ]
  %718 = icmp sgt i32 %698, 0
  br i1 %718, label %719, label %756

719:                                              ; preds = %716
  %720 = shl i64 %694, 32
  %721 = ashr exact i64 %720, 32
  %722 = getelementptr inbounds ptr, ptr %692, i64 %721
  %723 = shl i64 %697, 32
  %724 = ashr exact i64 %723, 32
  %725 = and i64 %697, 4294967295
  br label %741

726:                                              ; preds = %737, %709
  %727 = phi i64 [ 0, %709 ], [ %739, %737 ]
  %728 = phi float [ %707, %709 ], [ %738, %737 ]
  %729 = getelementptr inbounds float, ptr %643, i64 %727
  %730 = load float, ptr %729, align 4, !tbaa !167
  %731 = fcmp ult float %730, %728
  br i1 %731, label %737, label %732

732:                                              ; preds = %726
  %733 = trunc i64 %727 to i32
  %734 = sub nsw i32 %695, %733
  %735 = load ptr, ptr %712, align 8, !tbaa !19
  %736 = getelementptr inbounds i32, ptr %735, i64 %714
  store i32 %734, ptr %736, align 4, !tbaa !31
  br label %737

737:                                              ; preds = %732, %726
  %738 = phi float [ %730, %732 ], [ %728, %726 ]
  %739 = add nuw nsw i64 %727, 1
  %740 = icmp eq i64 %739, %715
  br i1 %740, label %716, label %726, !llvm.loop !339

741:                                              ; preds = %752, %719
  %742 = phi i64 [ 0, %719 ], [ %754, %752 ]
  %743 = phi float [ %717, %719 ], [ %753, %752 ]
  %744 = getelementptr inbounds float, ptr %645, i64 %742
  %745 = load float, ptr %744, align 4, !tbaa !167
  %746 = fcmp ult float %745, %743
  br i1 %746, label %752, label %747

747:                                              ; preds = %741
  %748 = trunc i64 %742 to i32
  %749 = sub i32 %748, %698
  %750 = load ptr, ptr %722, align 8, !tbaa !19
  %751 = getelementptr inbounds i32, ptr %750, i64 %724
  store i32 %749, ptr %751, align 4, !tbaa !31
  br label %752

752:                                              ; preds = %747, %741
  %753 = phi float [ %745, %747 ], [ %743, %741 ]
  %754 = add nuw nsw i64 %742, 1
  %755 = icmp eq i64 %754, %725
  br i1 %755, label %756, label %741, !llvm.loop !340

756:                                              ; preds = %752, %716, %705
  %757 = icmp slt i32 %695, 0
  br i1 %757, label %761, label %758

758:                                              ; preds = %756
  %759 = add i64 %694, 1
  %760 = and i64 %759, 4294967295
  br label %803

761:                                              ; preds = %803, %756
  %762 = icmp slt i32 %698, 0
  br i1 %762, label %810, label %763

763:                                              ; preds = %761
  %764 = load ptr, ptr %692, align 8, !tbaa !19
  %765 = add i64 %697, 1
  %766 = and i64 %765, 4294967295
  %767 = add nuw nsw i64 %766, 3
  %768 = and i64 %767, 8589934588
  %769 = add nsw i64 %766, -1
  %770 = insertelement <4 x i64> poison, i64 %769, i64 0
  %771 = shufflevector <4 x i64> %770, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %772

772:                                              ; preds = %799, %763
  %773 = phi i64 [ 0, %763 ], [ %800, %799 ]
  %774 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %763 ], [ %801, %799 ]
  %775 = trunc i64 %773 to i32
  %776 = icmp ule <4 x i64> %774, %771
  %777 = extractelement <4 x i1> %776, i64 0
  br i1 %777, label %778, label %781

778:                                              ; preds = %772
  %779 = getelementptr inbounds i32, ptr %764, i64 %773
  %780 = xor i32 %775, -1
  store i32 %780, ptr %779, align 4, !tbaa !31
  br label %781

781:                                              ; preds = %778, %772
  %782 = extractelement <4 x i1> %776, i64 1
  br i1 %782, label %783, label %787

783:                                              ; preds = %781
  %784 = or i64 %773, 1
  %785 = getelementptr inbounds i32, ptr %764, i64 %784
  %786 = xor i32 %775, -2
  store i32 %786, ptr %785, align 4, !tbaa !31
  br label %787

787:                                              ; preds = %783, %781
  %788 = extractelement <4 x i1> %776, i64 2
  br i1 %788, label %789, label %793

789:                                              ; preds = %787
  %790 = or i64 %773, 2
  %791 = getelementptr inbounds i32, ptr %764, i64 %790
  %792 = xor i32 %775, -3
  store i32 %792, ptr %791, align 4, !tbaa !31
  br label %793

793:                                              ; preds = %789, %787
  %794 = extractelement <4 x i1> %776, i64 3
  br i1 %794, label %795, label %799

795:                                              ; preds = %793
  %796 = or i64 %773, 3
  %797 = getelementptr inbounds i32, ptr %764, i64 %796
  %798 = xor i32 %775, -4
  store i32 %798, ptr %797, align 4, !tbaa !31
  br label %799

799:                                              ; preds = %795, %793
  %800 = add i64 %773, 4
  %801 = add <4 x i64> %774, <i64 4, i64 4, i64 4, i64 4>
  %802 = icmp eq i64 %800, %768
  br i1 %802, label %810, label %772, !llvm.loop !341

803:                                              ; preds = %803, %758
  %804 = phi i64 [ 0, %758 ], [ %805, %803 ]
  %805 = add nuw nsw i64 %804, 1
  %806 = getelementptr inbounds ptr, ptr %692, i64 %804
  %807 = load ptr, ptr %806, align 8, !tbaa !19
  %808 = trunc i64 %805 to i32
  store i32 %808, ptr %807, align 4, !tbaa !31
  %809 = icmp eq i64 %805, %760
  br i1 %809, label %761, label %803, !llvm.loop !342

810:                                              ; preds = %799, %761
  %811 = shl i64 %694, 32
  %812 = ashr exact i64 %811, 32
  %813 = getelementptr inbounds i8, ptr %701, i64 %812
  %814 = shl i64 %697, 32
  %815 = ashr exact i64 %814, 32
  %816 = getelementptr inbounds i8, ptr %813, i64 %815
  store i8 0, ptr %816, align 1, !tbaa !17
  %817 = getelementptr inbounds i8, ptr %702, i64 %812
  %818 = getelementptr inbounds i8, ptr %817, i64 %815
  store i8 0, ptr %818, align 1, !tbaa !17
  store float 0.000000e+00, ptr %8, align 4, !tbaa !167
  %819 = icmp slt i32 %699, 0
  br i1 %819, label %902, label %820

820:                                              ; preds = %897, %810
  %821 = phi ptr [ %899, %897 ], [ %818, %810 ]
  %822 = phi ptr [ %898, %897 ], [ %816, %810 ]
  %823 = phi i32 [ %900, %897 ], [ 0, %810 ]
  %824 = phi i32 [ %842, %897 ], [ %695, %810 ]
  %825 = phi i32 [ %844, %897 ], [ %698, %810 ]
  %826 = sext i32 %824 to i64
  %827 = getelementptr inbounds ptr, ptr %692, i64 %826
  %828 = load ptr, ptr %827, align 8, !tbaa !19
  %829 = sext i32 %825 to i64
  %830 = getelementptr inbounds i32, ptr %828, i64 %829
  %831 = load i32, ptr %830, align 4, !tbaa !31
  %832 = icmp slt i32 %831, 0
  br i1 %832, label %833, label %835

833:                                              ; preds = %820
  %834 = add nsw i32 %824, -1
  br label %841

835:                                              ; preds = %820
  %836 = icmp eq i32 %831, 0
  br i1 %836, label %839, label %837

837:                                              ; preds = %835
  %838 = sub nsw i32 %824, %831
  br label %841

839:                                              ; preds = %835
  %840 = add nsw i32 %824, -1
  br label %841

841:                                              ; preds = %839, %837, %833
  %842 = phi i32 [ %834, %833 ], [ %838, %837 ], [ %840, %839 ]
  %843 = phi i32 [ %831, %833 ], [ -1, %837 ], [ -1, %839 ]
  %844 = add nsw i32 %843, %825
  %845 = xor i32 %842, -1
  %846 = add i32 %824, %845
  %847 = icmp eq i32 %846, 0
  br i1 %847, label %861, label %848

848:                                              ; preds = %841
  %849 = add i32 %824, -1
  br label %850

850:                                              ; preds = %850, %848
  %851 = phi i32 [ %856, %850 ], [ %846, %848 ]
  %852 = phi ptr [ %855, %850 ], [ %821, %848 ]
  %853 = phi ptr [ %854, %850 ], [ %822, %848 ]
  %854 = getelementptr inbounds i8, ptr %853, i64 -1
  store i8 111, ptr %854, align 1, !tbaa !17
  %855 = getelementptr inbounds i8, ptr %852, i64 -1
  store i8 45, ptr %855, align 1, !tbaa !17
  %856 = add nsw i32 %851, -1
  %857 = icmp eq i32 %856, 0
  br i1 %857, label %858, label %850, !llvm.loop !343

858:                                              ; preds = %850
  %.lcssa3 = phi ptr [ %854, %850 ]
  %.lcssa2 = phi ptr [ %855, %850 ]
  %859 = add i32 %849, %823
  %860 = sub i32 %859, %842
  br label %861

861:                                              ; preds = %858, %841
  %862 = phi i32 [ %823, %841 ], [ %860, %858 ]
  %863 = phi ptr [ %822, %841 ], [ %.lcssa3, %858 ]
  %864 = phi ptr [ %821, %841 ], [ %.lcssa2, %858 ]
  %865 = icmp eq i32 %843, -1
  br i1 %865, label %878, label %866

866:                                              ; preds = %861
  %867 = xor i32 %843, -1
  br label %868

868:                                              ; preds = %868, %866
  %869 = phi i32 [ %876, %868 ], [ %867, %866 ]
  %870 = phi ptr [ %874, %868 ], [ %864, %866 ]
  %871 = phi ptr [ %873, %868 ], [ %863, %866 ]
  %872 = phi i32 [ %875, %868 ], [ %862, %866 ]
  %873 = getelementptr inbounds i8, ptr %871, i64 -1
  store i8 45, ptr %873, align 1, !tbaa !17
  %874 = getelementptr inbounds i8, ptr %870, i64 -1
  store i8 111, ptr %874, align 1, !tbaa !17
  %875 = add nsw i32 %872, 1
  %876 = add nsw i32 %869, -1
  %877 = icmp eq i32 %876, 0
  br i1 %877, label %878, label %868, !llvm.loop !344

878:                                              ; preds = %868, %861
  %879 = phi i32 [ %862, %861 ], [ %875, %868 ]
  %880 = phi ptr [ %863, %861 ], [ %873, %868 ]
  %881 = phi ptr [ %864, %861 ], [ %874, %868 ]
  %882 = icmp eq i32 %824, %695
  %883 = icmp eq i32 %825, %698
  %884 = or i1 %882, %883
  br i1 %884, label %893, label %885

885:                                              ; preds = %878
  %886 = load ptr, ptr @impmtx, align 8, !tbaa !19
  %887 = getelementptr inbounds ptr, ptr %886, i64 %826
  %888 = load ptr, ptr %887, align 8, !tbaa !19
  %889 = getelementptr inbounds float, ptr %888, i64 %829
  %890 = load float, ptr %889, align 4, !tbaa !167
  %891 = load float, ptr %8, align 4, !tbaa !167
  %892 = fadd float %890, %891
  store float %892, ptr %8, align 4, !tbaa !167
  br label %893

893:                                              ; preds = %885, %878
  %894 = icmp slt i32 %824, 1
  %895 = icmp slt i32 %825, 1
  %896 = or i1 %894, %895
  br i1 %896, label %902, label %897

897:                                              ; preds = %893
  %898 = getelementptr inbounds i8, ptr %880, i64 -1
  store i8 111, ptr %898, align 1, !tbaa !17
  %899 = getelementptr inbounds i8, ptr %881, i64 -1
  store i8 111, ptr %899, align 1, !tbaa !17
  %900 = add nsw i32 %879, 2
  %901 = icmp sgt i32 %900, %699
  br i1 %901, label %902, label %820, !llvm.loop !345

902:                                              ; preds = %897, %893, %810
  %903 = phi ptr [ %816, %810 ], [ %898, %897 ], [ %880, %893 ]
  %904 = phi ptr [ %818, %810 ], [ %899, %897 ], [ %881, %893 ]
  br i1 %127, label %905, label %907

905:                                              ; preds = %902
  %906 = zext i32 %4 to i64
  br label %910

907:                                              ; preds = %910, %902
  br i1 %135, label %908, label %1135

908:                                              ; preds = %907
  %909 = zext i32 %5 to i64
  br label %918

910:                                              ; preds = %910, %905
  %911 = phi i64 [ 0, %905 ], [ %916, %910 ]
  %912 = getelementptr inbounds ptr, ptr %690, i64 %911
  %913 = load ptr, ptr %912, align 8, !tbaa !19
  %914 = getelementptr inbounds ptr, ptr %0, i64 %911
  %915 = load ptr, ptr %914, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %913, ptr noundef %915, ptr noundef %903) #35
  %916 = add nuw nsw i64 %911, 1
  %917 = icmp eq i64 %916, %906
  br i1 %917, label %907, label %910, !llvm.loop !346

918:                                              ; preds = %918, %908
  %919 = phi i64 [ 0, %908 ], [ %924, %918 ]
  %920 = getelementptr inbounds ptr, ptr %691, i64 %919
  %921 = load ptr, ptr %920, align 8, !tbaa !19
  %922 = getelementptr inbounds ptr, ptr %1, i64 %919
  %923 = load ptr, ptr %922, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %921, ptr noundef %923, ptr noundef %904) #35
  %924 = add nuw nsw i64 %919, 1
  %925 = icmp eq i64 %924, %909
  br i1 %925, label %1135, label %918, !llvm.loop !347

926:                                              ; preds = %689
  br i1 %704, label %977, label %927

927:                                              ; preds = %926
  %928 = load float, ptr %643, align 4, !tbaa !167
  %929 = icmp sgt i32 %695, 0
  br i1 %929, label %930, label %937

930:                                              ; preds = %927
  %931 = shl i64 %694, 32
  %932 = ashr exact i64 %931, 32
  %933 = getelementptr inbounds ptr, ptr %692, i64 %932
  %934 = shl i64 %697, 32
  %935 = ashr exact i64 %934, 32
  %936 = and i64 %694, 4294967295
  br label %947

937:                                              ; preds = %958, %927
  %938 = phi float [ %928, %927 ], [ %959, %958 ]
  %939 = icmp sgt i32 %698, 0
  br i1 %939, label %940, label %977

940:                                              ; preds = %937
  %941 = shl i64 %694, 32
  %942 = ashr exact i64 %941, 32
  %943 = getelementptr inbounds ptr, ptr %692, i64 %942
  %944 = shl i64 %697, 32
  %945 = ashr exact i64 %944, 32
  %946 = and i64 %697, 4294967295
  br label %962

947:                                              ; preds = %958, %930
  %948 = phi i64 [ 0, %930 ], [ %960, %958 ]
  %949 = phi float [ %928, %930 ], [ %959, %958 ]
  %950 = getelementptr inbounds float, ptr %643, i64 %948
  %951 = load float, ptr %950, align 4, !tbaa !167
  %952 = fcmp ult float %951, %949
  br i1 %952, label %958, label %953

953:                                              ; preds = %947
  %954 = trunc i64 %948 to i32
  %955 = sub nsw i32 %695, %954
  %956 = load ptr, ptr %933, align 8, !tbaa !19
  %957 = getelementptr inbounds i32, ptr %956, i64 %935
  store i32 %955, ptr %957, align 4, !tbaa !31
  br label %958

958:                                              ; preds = %953, %947
  %959 = phi float [ %951, %953 ], [ %949, %947 ]
  %960 = add nuw nsw i64 %948, 1
  %961 = icmp eq i64 %960, %936
  br i1 %961, label %937, label %947, !llvm.loop !348

962:                                              ; preds = %973, %940
  %963 = phi i64 [ 0, %940 ], [ %975, %973 ]
  %964 = phi float [ %938, %940 ], [ %974, %973 ]
  %965 = getelementptr inbounds float, ptr %645, i64 %963
  %966 = load float, ptr %965, align 4, !tbaa !167
  %967 = fcmp ult float %966, %964
  br i1 %967, label %973, label %968

968:                                              ; preds = %962
  %969 = trunc i64 %963 to i32
  %970 = sub i32 %969, %698
  %971 = load ptr, ptr %943, align 8, !tbaa !19
  %972 = getelementptr inbounds i32, ptr %971, i64 %945
  store i32 %970, ptr %972, align 4, !tbaa !31
  br label %973

973:                                              ; preds = %968, %962
  %974 = phi float [ %966, %968 ], [ %964, %962 ]
  %975 = add nuw nsw i64 %963, 1
  %976 = icmp eq i64 %975, %946
  br i1 %976, label %977, label %962, !llvm.loop !349

977:                                              ; preds = %973, %937, %926
  %978 = icmp slt i32 %695, 0
  br i1 %978, label %982, label %979

979:                                              ; preds = %977
  %980 = add i64 %694, 1
  %981 = and i64 %980, 4294967295
  br label %1024

982:                                              ; preds = %1024, %977
  %983 = icmp slt i32 %698, 0
  br i1 %983, label %1031, label %984

984:                                              ; preds = %982
  %985 = load ptr, ptr %692, align 8, !tbaa !19
  %986 = add i64 %697, 1
  %987 = and i64 %986, 4294967295
  %988 = add nuw nsw i64 %987, 3
  %989 = and i64 %988, 8589934588
  %990 = add nsw i64 %987, -1
  %991 = insertelement <4 x i64> poison, i64 %990, i64 0
  %992 = shufflevector <4 x i64> %991, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %993

993:                                              ; preds = %1020, %984
  %994 = phi i64 [ 0, %984 ], [ %1021, %1020 ]
  %995 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %984 ], [ %1022, %1020 ]
  %996 = trunc i64 %994 to i32
  %997 = icmp ule <4 x i64> %995, %992
  %998 = extractelement <4 x i1> %997, i64 0
  br i1 %998, label %999, label %1002

999:                                              ; preds = %993
  %1000 = getelementptr inbounds i32, ptr %985, i64 %994
  %1001 = xor i32 %996, -1
  store i32 %1001, ptr %1000, align 4, !tbaa !31
  br label %1002

1002:                                             ; preds = %999, %993
  %1003 = extractelement <4 x i1> %997, i64 1
  br i1 %1003, label %1004, label %1008

1004:                                             ; preds = %1002
  %1005 = or i64 %994, 1
  %1006 = getelementptr inbounds i32, ptr %985, i64 %1005
  %1007 = xor i32 %996, -2
  store i32 %1007, ptr %1006, align 4, !tbaa !31
  br label %1008

1008:                                             ; preds = %1004, %1002
  %1009 = extractelement <4 x i1> %997, i64 2
  br i1 %1009, label %1010, label %1014

1010:                                             ; preds = %1008
  %1011 = or i64 %994, 2
  %1012 = getelementptr inbounds i32, ptr %985, i64 %1011
  %1013 = xor i32 %996, -3
  store i32 %1013, ptr %1012, align 4, !tbaa !31
  br label %1014

1014:                                             ; preds = %1010, %1008
  %1015 = extractelement <4 x i1> %997, i64 3
  br i1 %1015, label %1016, label %1020

1016:                                             ; preds = %1014
  %1017 = or i64 %994, 3
  %1018 = getelementptr inbounds i32, ptr %985, i64 %1017
  %1019 = xor i32 %996, -4
  store i32 %1019, ptr %1018, align 4, !tbaa !31
  br label %1020

1020:                                             ; preds = %1016, %1014
  %1021 = add i64 %994, 4
  %1022 = add <4 x i64> %995, <i64 4, i64 4, i64 4, i64 4>
  %1023 = icmp eq i64 %1021, %989
  br i1 %1023, label %1031, label %993, !llvm.loop !350

1024:                                             ; preds = %1024, %979
  %1025 = phi i64 [ 0, %979 ], [ %1026, %1024 ]
  %1026 = add nuw nsw i64 %1025, 1
  %1027 = getelementptr inbounds ptr, ptr %692, i64 %1025
  %1028 = load ptr, ptr %1027, align 8, !tbaa !19
  %1029 = trunc i64 %1026 to i32
  store i32 %1029, ptr %1028, align 4, !tbaa !31
  %1030 = icmp eq i64 %1026, %981
  br i1 %1030, label %982, label %1024, !llvm.loop !351

1031:                                             ; preds = %1020, %982
  %1032 = shl i64 %694, 32
  %1033 = ashr exact i64 %1032, 32
  %1034 = getelementptr inbounds i8, ptr %701, i64 %1033
  %1035 = shl i64 %697, 32
  %1036 = ashr exact i64 %1035, 32
  %1037 = getelementptr inbounds i8, ptr %1034, i64 %1036
  store i8 0, ptr %1037, align 1, !tbaa !17
  %1038 = getelementptr inbounds i8, ptr %702, i64 %1033
  %1039 = getelementptr inbounds i8, ptr %1038, i64 %1036
  store i8 0, ptr %1039, align 1, !tbaa !17
  %1040 = icmp slt i32 %699, 0
  br i1 %1040, label %1111, label %1041

1041:                                             ; preds = %1106, %1031
  %1042 = phi ptr [ %1108, %1106 ], [ %1039, %1031 ]
  %1043 = phi ptr [ %1107, %1106 ], [ %1037, %1031 ]
  %1044 = phi i32 [ %1109, %1106 ], [ 0, %1031 ]
  %1045 = phi i32 [ %1063, %1106 ], [ %695, %1031 ]
  %1046 = phi i32 [ %1065, %1106 ], [ %698, %1031 ]
  %1047 = sext i32 %1045 to i64
  %1048 = getelementptr inbounds ptr, ptr %692, i64 %1047
  %1049 = load ptr, ptr %1048, align 8, !tbaa !19
  %1050 = sext i32 %1046 to i64
  %1051 = getelementptr inbounds i32, ptr %1049, i64 %1050
  %1052 = load i32, ptr %1051, align 4, !tbaa !31
  %1053 = icmp slt i32 %1052, 0
  br i1 %1053, label %1054, label %1056

1054:                                             ; preds = %1041
  %1055 = add nsw i32 %1045, -1
  br label %1062

1056:                                             ; preds = %1041
  %1057 = icmp eq i32 %1052, 0
  br i1 %1057, label %1060, label %1058

1058:                                             ; preds = %1056
  %1059 = sub nsw i32 %1045, %1052
  br label %1062

1060:                                             ; preds = %1056
  %1061 = add nsw i32 %1045, -1
  br label %1062

1062:                                             ; preds = %1060, %1058, %1054
  %1063 = phi i32 [ %1055, %1054 ], [ %1059, %1058 ], [ %1061, %1060 ]
  %1064 = phi i32 [ %1052, %1054 ], [ -1, %1058 ], [ -1, %1060 ]
  %1065 = add nsw i32 %1064, %1046
  %1066 = xor i32 %1063, -1
  %1067 = add i32 %1045, %1066
  %1068 = icmp eq i32 %1067, 0
  br i1 %1068, label %1082, label %1069

1069:                                             ; preds = %1062
  %1070 = add i32 %1045, -1
  br label %1071

1071:                                             ; preds = %1071, %1069
  %1072 = phi i32 [ %1077, %1071 ], [ %1067, %1069 ]
  %1073 = phi ptr [ %1076, %1071 ], [ %1042, %1069 ]
  %1074 = phi ptr [ %1075, %1071 ], [ %1043, %1069 ]
  %1075 = getelementptr inbounds i8, ptr %1074, i64 -1
  store i8 111, ptr %1075, align 1, !tbaa !17
  %1076 = getelementptr inbounds i8, ptr %1073, i64 -1
  store i8 45, ptr %1076, align 1, !tbaa !17
  %1077 = add nsw i32 %1072, -1
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %1071, !llvm.loop !352

1079:                                             ; preds = %1071
  %.lcssa1 = phi ptr [ %1075, %1071 ]
  %.lcssa = phi ptr [ %1076, %1071 ]
  %1080 = add i32 %1070, %1044
  %1081 = sub i32 %1080, %1063
  br label %1082

1082:                                             ; preds = %1079, %1062
  %1083 = phi i32 [ %1044, %1062 ], [ %1081, %1079 ]
  %1084 = phi ptr [ %1043, %1062 ], [ %.lcssa1, %1079 ]
  %1085 = phi ptr [ %1042, %1062 ], [ %.lcssa, %1079 ]
  %1086 = icmp eq i32 %1064, -1
  br i1 %1086, label %1099, label %1087

1087:                                             ; preds = %1082
  %1088 = xor i32 %1064, -1
  br label %1089

1089:                                             ; preds = %1089, %1087
  %1090 = phi i32 [ %1097, %1089 ], [ %1088, %1087 ]
  %1091 = phi ptr [ %1095, %1089 ], [ %1085, %1087 ]
  %1092 = phi ptr [ %1094, %1089 ], [ %1084, %1087 ]
  %1093 = phi i32 [ %1096, %1089 ], [ %1083, %1087 ]
  %1094 = getelementptr inbounds i8, ptr %1092, i64 -1
  store i8 45, ptr %1094, align 1, !tbaa !17
  %1095 = getelementptr inbounds i8, ptr %1091, i64 -1
  store i8 111, ptr %1095, align 1, !tbaa !17
  %1096 = add nsw i32 %1093, 1
  %1097 = add nsw i32 %1090, -1
  %1098 = icmp eq i32 %1097, 0
  br i1 %1098, label %1099, label %1089, !llvm.loop !353

1099:                                             ; preds = %1089, %1082
  %1100 = phi i32 [ %1083, %1082 ], [ %1096, %1089 ]
  %1101 = phi ptr [ %1084, %1082 ], [ %1094, %1089 ]
  %1102 = phi ptr [ %1085, %1082 ], [ %1095, %1089 ]
  %1103 = icmp slt i32 %1045, 1
  %1104 = icmp slt i32 %1046, 1
  %1105 = or i1 %1103, %1104
  br i1 %1105, label %1111, label %1106

1106:                                             ; preds = %1099
  %1107 = getelementptr inbounds i8, ptr %1101, i64 -1
  store i8 111, ptr %1107, align 1, !tbaa !17
  %1108 = getelementptr inbounds i8, ptr %1102, i64 -1
  store i8 111, ptr %1108, align 1, !tbaa !17
  %1109 = add nsw i32 %1100, 2
  %1110 = icmp sgt i32 %1109, %699
  br i1 %1110, label %1111, label %1041, !llvm.loop !354

1111:                                             ; preds = %1106, %1099, %1031
  %1112 = phi ptr [ %1037, %1031 ], [ %1107, %1106 ], [ %1101, %1099 ]
  %1113 = phi ptr [ %1039, %1031 ], [ %1108, %1106 ], [ %1102, %1099 ]
  br i1 %127, label %1114, label %1116

1114:                                             ; preds = %1111
  %1115 = zext i32 %4 to i64
  br label %1119

1116:                                             ; preds = %1119, %1111
  br i1 %135, label %1117, label %1135

1117:                                             ; preds = %1116
  %1118 = zext i32 %5 to i64
  br label %1127

1119:                                             ; preds = %1119, %1114
  %1120 = phi i64 [ 0, %1114 ], [ %1125, %1119 ]
  %1121 = getelementptr inbounds ptr, ptr %690, i64 %1120
  %1122 = load ptr, ptr %1121, align 8, !tbaa !19
  %1123 = getelementptr inbounds ptr, ptr %0, i64 %1120
  %1124 = load ptr, ptr %1123, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %1122, ptr noundef %1124, ptr noundef %1112) #35
  %1125 = add nuw nsw i64 %1120, 1
  %1126 = icmp eq i64 %1125, %1115
  br i1 %1126, label %1116, label %1119, !llvm.loop !355

1127:                                             ; preds = %1127, %1117
  %1128 = phi i64 [ 0, %1117 ], [ %1133, %1127 ]
  %1129 = getelementptr inbounds ptr, ptr %691, i64 %1128
  %1130 = load ptr, ptr %1129, align 8, !tbaa !19
  %1131 = getelementptr inbounds ptr, ptr %1, i64 %1128
  %1132 = load ptr, ptr %1131, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %1130, ptr noundef %1132, ptr noundef %1113) #35
  %1133 = add nuw nsw i64 %1128, 1
  %1134 = icmp eq i64 %1133, %1118
  br i1 %1134, label %1135, label %1127, !llvm.loop !356

1135:                                             ; preds = %1127, %1116, %918, %907
  tail call void @free(ptr noundef %701) #35
  tail call void @free(ptr noundef %702) #35
  %1136 = load ptr, ptr @H__align.mseq1, align 8, !tbaa !19
  %1137 = load ptr, ptr %1136, align 8, !tbaa !19
  %1138 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1137) #40
  %1139 = trunc i64 %1138 to i32
  %1140 = icmp sgt i32 %1139, %6
  %1141 = icmp sgt i32 %1139, 5000000
  %1142 = or i1 %1140, %1141
  br i1 %1142, label %1143, label %1146

1143:                                             ; preds = %1135
  %1144 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1145 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1144, ptr noundef nonnull @.str.142, i32 noundef %6, i32 noundef %1139, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.1.143) #35
  br label %1146

1146:                                             ; preds = %1143, %1135
  br i1 %127, label %1147, label %1150

1147:                                             ; preds = %1146
  %1148 = load ptr, ptr @H__align.mseq1, align 8, !tbaa !19
  %1149 = zext i32 %4 to i64
  br label %1154

1150:                                             ; preds = %1154, %1146
  br i1 %135, label %1151, label %1172

1151:                                             ; preds = %1150
  %1152 = load ptr, ptr @H__align.mseq2, align 8, !tbaa !19
  %1153 = zext i32 %5 to i64
  br label %1163

1154:                                             ; preds = %1154, %1147
  %1155 = phi i64 [ 0, %1147 ], [ %1161, %1154 ]
  %1156 = getelementptr inbounds ptr, ptr %0, i64 %1155
  %1157 = load ptr, ptr %1156, align 8, !tbaa !19
  %1158 = getelementptr inbounds ptr, ptr %1148, i64 %1155
  %1159 = load ptr, ptr %1158, align 8, !tbaa !19
  %1160 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %1157, ptr noundef nonnull dereferenceable(1) %1159) #35
  %1161 = add nuw nsw i64 %1155, 1
  %1162 = icmp eq i64 %1161, %1149
  br i1 %1162, label %1150, label %1154, !llvm.loop !357

1163:                                             ; preds = %1163, %1151
  %1164 = phi i64 [ 0, %1151 ], [ %1170, %1163 ]
  %1165 = getelementptr inbounds ptr, ptr %1, i64 %1164
  %1166 = load ptr, ptr %1165, align 8, !tbaa !19
  %1167 = getelementptr inbounds ptr, ptr %1152, i64 %1164
  %1168 = load ptr, ptr %1167, align 8, !tbaa !19
  %1169 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %1166, ptr noundef nonnull dereferenceable(1) %1168) #35
  %1170 = add nuw nsw i64 %1164, 1
  %1171 = icmp eq i64 %1170, %1153
  br i1 %1171, label %1172, label %1163, !llvm.loop !358

1172:                                             ; preds = %1163, %1150
  %1173 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1174 = fpext float %646 to double
  %1175 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1173, ptr noundef nonnull @.str.2.144, double noundef %1174) #36
  %1176 = icmp slt i32 %28, 0
  br i1 %1176, label %1181, label %1177

1177:                                             ; preds = %1172
  %1178 = load ptr, ptr @H__align.gappat1, align 8, !tbaa !19
  %1179 = add i64 %27, 1
  %1180 = and i64 %1179, 4294967295
  br label %1187

1181:                                             ; preds = %1187, %1172
  %1182 = icmp slt i32 %31, 0
  br i1 %1182, label %1199, label %1183

1183:                                             ; preds = %1181
  %1184 = load ptr, ptr @H__align.gappat2, align 8, !tbaa !19
  %1185 = add i64 %30, 1
  %1186 = and i64 %1185, 4294967295
  br label %1193

1187:                                             ; preds = %1187, %1177
  %1188 = phi i64 [ 0, %1177 ], [ %1191, %1187 ]
  %1189 = getelementptr inbounds ptr, ptr %1178, i64 %1188
  %1190 = load ptr, ptr %1189, align 8, !tbaa !19
  tail call void @free(ptr noundef %1190) #35
  store ptr null, ptr %1189, align 8, !tbaa !19
  %1191 = add nuw nsw i64 %1188, 1
  %1192 = icmp eq i64 %1191, %1180
  br i1 %1192, label %1181, label %1187, !llvm.loop !359

1193:                                             ; preds = %1193, %1183
  %1194 = phi i64 [ 0, %1183 ], [ %1197, %1193 ]
  %1195 = getelementptr inbounds ptr, ptr %1184, i64 %1194
  %1196 = load ptr, ptr %1195, align 8, !tbaa !19
  tail call void @free(ptr noundef %1196) #35
  store ptr null, ptr %1195, align 8, !tbaa !19
  %1197 = add nuw nsw i64 %1194, 1
  %1198 = icmp eq i64 %1197, %1186
  br i1 %1198, label %1199, label %1193, !llvm.loop !360

1199:                                             ; preds = %1193, %1181
  ret float %646
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @match_calc(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7) unnamed_addr #16 {
  %9 = alloca [26 x float], align 16
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #34
  %10 = icmp ne i32 %7, 0
  %11 = icmp sgt i32 %4, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %45

13:                                               ; preds = %8
  %14 = zext i32 %4 to i64
  br label %15

15:                                               ; preds = %39, %13
  %16 = phi i64 [ 0, %13 ], [ %43, %39 ]
  %17 = getelementptr inbounds ptr, ptr %5, i64 %16
  %18 = getelementptr inbounds ptr, ptr %6, i64 %16
  br label %19

19:                                               ; preds = %35, %15
  %20 = phi i64 [ 0, %15 ], [ %37, %35 ]
  %21 = phi i32 [ 0, %15 ], [ %36, %35 ]
  %22 = getelementptr inbounds ptr, ptr %2, i64 %20
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  %24 = getelementptr inbounds float, ptr %23, i64 %16
  %25 = load float, ptr %24, align 4, !tbaa !167
  %26 = fcmp une float %25, 0.000000e+00
  br i1 %26, label %27, label %35

27:                                               ; preds = %19
  %28 = load ptr, ptr %17, align 8, !tbaa !19
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds float, ptr %28, i64 %29
  store float %25, ptr %30, align 4, !tbaa !167
  %31 = load ptr, ptr %18, align 8, !tbaa !19
  %32 = getelementptr inbounds i32, ptr %31, i64 %29
  %33 = trunc i64 %20 to i32
  store i32 %33, ptr %32, align 4, !tbaa !31
  %34 = add nsw i32 %21, 1
  br label %35

35:                                               ; preds = %27, %19
  %36 = phi i32 [ %34, %27 ], [ %21, %19 ]
  %37 = add nuw nsw i64 %20, 1
  %38 = icmp eq i64 %37, 26
  br i1 %38, label %39, label %19, !llvm.loop !361

39:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %36, %35 ]
  %40 = load ptr, ptr %18, align 8, !tbaa !19
  %41 = sext i32 %.lcssa1 to i64
  %42 = getelementptr inbounds i32, ptr %40, i64 %41
  store i32 -1, ptr %42, align 4, !tbaa !31
  %43 = add nuw nsw i64 %16, 1
  %44 = icmp eq i64 %43, %14
  br i1 %44, label %45, label %15, !llvm.loop !362

45:                                               ; preds = %39, %8
  %46 = sext i32 %3 to i64
  br label %49

47:                                               ; preds = %65
  %48 = icmp eq i32 %4, 0
  br i1 %48, label %98, label %68

49:                                               ; preds = %65, %45
  %50 = phi i64 [ 0, %45 ], [ %66, %65 ]
  %51 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %50
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i64 [ 0, %49 ], [ %63, %52 ]
  %54 = phi float [ 0.000000e+00, %49 ], [ %62, %52 ]
  %55 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %53, i64 %50
  %56 = load i32, ptr %55, align 4, !tbaa !31
  %57 = sitofp i32 %56 to float
  %58 = getelementptr inbounds ptr, ptr %1, i64 %53
  %59 = load ptr, ptr %58, align 8, !tbaa !19
  %60 = getelementptr inbounds float, ptr %59, i64 %46
  %61 = load float, ptr %60, align 4, !tbaa !167
  %62 = tail call float @llvm.fmuladd.f32(float %57, float %61, float %54)
  %63 = add nuw nsw i64 %53, 1
  %64 = icmp eq i64 %63, 26
  br i1 %64, label %65, label %52, !llvm.loop !363

65:                                               ; preds = %52
  %.lcssa = phi float [ %62, %52 ]
  store float %.lcssa, ptr %51, align 4, !tbaa !167
  %66 = add nuw nsw i64 %50, 1
  %67 = icmp eq i64 %66, 26
  br i1 %67, label %47, label %49, !llvm.loop !364

68:                                               ; preds = %95, %47
  %69 = phi i32 [ %73, %95 ], [ %4, %47 ]
  %70 = phi ptr [ %74, %95 ], [ %6, %47 ]
  %71 = phi ptr [ %76, %95 ], [ %5, %47 ]
  %72 = phi ptr [ %96, %95 ], [ %0, %47 ]
  %73 = add nsw i32 %69, -1
  store float 0.000000e+00, ptr %72, align 4, !tbaa !167
  %74 = getelementptr inbounds ptr, ptr %70, i64 1
  %75 = load ptr, ptr %70, align 8, !tbaa !19
  %76 = getelementptr inbounds ptr, ptr %71, i64 1
  %77 = load i32, ptr %75, align 4, !tbaa !31
  %78 = icmp sgt i32 %77, -1
  br i1 %78, label %79, label %95

79:                                               ; preds = %68
  %80 = load ptr, ptr %71, align 8, !tbaa !19
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi float [ 0.000000e+00, %79 ], [ %92, %81 ]
  %83 = phi i32 [ %77, %79 ], [ %93, %81 ]
  %84 = phi ptr [ %75, %79 ], [ %86, %81 ]
  %85 = phi ptr [ %80, %79 ], [ %90, %81 ]
  %86 = getelementptr inbounds i32, ptr %84, i64 1
  %87 = zext i32 %83 to i64
  %88 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %87
  %89 = load float, ptr %88, align 4, !tbaa !167
  %90 = getelementptr inbounds float, ptr %85, i64 1
  %91 = load float, ptr %85, align 4, !tbaa !167
  %92 = tail call float @llvm.fmuladd.f32(float %89, float %91, float %82)
  store float %92, ptr %72, align 4, !tbaa !167
  %93 = load i32, ptr %86, align 4, !tbaa !31
  %94 = icmp sgt i32 %93, -1
  br i1 %94, label %81, label %95, !llvm.loop !365

95:                                               ; preds = %81, %68
  %96 = getelementptr inbounds float, ptr %72, i64 1
  %97 = icmp eq i32 %73, 0
  br i1 %97, label %98, label %68, !llvm.loop !366

98:                                               ; preds = %95, %47
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #34
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal fastcc float @countnocountx(ptr nocapture noundef readonly %0, float noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3) unnamed_addr #22 {
  %5 = getelementptr inbounds %struct._Gappattern, ptr %2, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !367
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %22, %4
  %9 = phi float [ 0.000000e+00, %4 ], [ %23, %22 ]
  %10 = getelementptr inbounds %struct._Gappattern, ptr %0, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !367
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %55, label %32

13:                                               ; preds = %22, %4
  %14 = phi i32 [ %25, %22 ], [ %6, %4 ]
  %15 = phi ptr [ %24, %22 ], [ %5, %4 ]
  %16 = phi float [ %23, %22 ], [ 0.000000e+00, %4 ]
  %17 = icmp eq i32 %14, %3
  br i1 %17, label %18, label %22

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct._Gappattern, ptr %15, i64 0, i32 1
  %20 = load float, ptr %19, align 4, !tbaa !328
  %21 = fmul float %20, %1
  br label %22

22:                                               ; preds = %18, %13
  %23 = phi float [ %21, %18 ], [ %16, %13 ]
  %24 = getelementptr inbounds %struct._Gappattern, ptr %15, i64 1
  %25 = load i32, ptr %24, align 4, !tbaa !367
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %8, label %13, !llvm.loop !368

27:                                               ; preds = %50, %32
  %28 = phi float [ %36, %32 ], [ %51, %50 ]
  %29 = getelementptr inbounds %struct._Gappattern, ptr %34, i64 1
  %30 = load i32, ptr %29, align 4, !tbaa !367
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %55, label %32, !llvm.loop !369

32:                                               ; preds = %27, %8
  %33 = phi i32 [ %30, %27 ], [ %11, %8 ]
  %34 = phi ptr [ %29, %27 ], [ %10, %8 ]
  %35 = phi ptr [ %34, %27 ], [ %0, %8 ]
  %36 = phi float [ %28, %27 ], [ %9, %8 ]
  br i1 %7, label %27, label %37

37:                                               ; preds = %32
  %38 = add nsw i32 %33, %3
  %39 = getelementptr inbounds %struct._Gappattern, ptr %35, i64 1, i32 1
  br label %40

40:                                               ; preds = %50, %37
  %41 = phi i32 [ %6, %37 ], [ %53, %50 ]
  %42 = phi ptr [ %5, %37 ], [ %52, %50 ]
  %43 = phi float [ %36, %37 ], [ %51, %50 ]
  %44 = icmp eq i32 %38, %41
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = load float, ptr %39, align 4, !tbaa !328
  %47 = getelementptr inbounds %struct._Gappattern, ptr %42, i64 0, i32 1
  %48 = load float, ptr %47, align 4, !tbaa !328
  %49 = tail call float @llvm.fmuladd.f32(float %46, float %48, float %43)
  br label %50

50:                                               ; preds = %45, %40
  %51 = phi float [ %49, %45 ], [ %43, %40 ]
  %52 = getelementptr inbounds %struct._Gappattern, ptr %42, i64 1
  %53 = load i32, ptr %52, align 4, !tbaa !367
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %27, label %40, !llvm.loop !370

55:                                               ; preds = %27, %8
  %56 = phi float [ %9, %8 ], [ %28, %27 ]
  ret float %56
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #7

; Function Attrs: nofree nounwind optsize uwtable
define internal void @putlocalhom_ext(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #12 {
  %8 = load i8, ptr %0, align 1, !tbaa !17
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %102, label %10

10:                                               ; preds = %7
  %11 = load i32, ptr @divpairscore, align 4
  %12 = icmp eq i32 %11, 0
  br label %13

13:                                               ; preds = %81, %10
  %14 = phi i8 [ %8, %10 ], [ %100, %81 ]
  %15 = phi i32 [ 0, %10 ], [ %99, %81 ]
  %16 = phi i32 [ 0, %10 ], [ %88, %81 ]
  %17 = phi i32 [ 0, %10 ], [ %87, %81 ]
  %18 = phi ptr [ %2, %10 ], [ %86, %81 ]
  %19 = phi i32 [ 0, %10 ], [ %85, %81 ]
  %20 = phi i32 [ 0, %10 ], [ %84, %81 ]
  %21 = phi ptr [ %1, %10 ], [ %94, %81 ]
  %22 = phi ptr [ %0, %10 ], [ %89, %81 ]
  %23 = phi i32 [ 0, %10 ], [ %83, %81 ]
  %24 = phi i32 [ 0, %10 ], [ %82, %81 ]
  %25 = phi i32 [ %4, %10 ], [ %98, %81 ]
  %26 = phi i32 [ %3, %10 ], [ %93, %81 ]
  %27 = icmp eq i32 %16, 1
  br i1 %27, label %28, label %61

28:                                               ; preds = %13
  %29 = icmp eq i8 %14, 45
  br i1 %29, label %33, label %30

30:                                               ; preds = %28
  %31 = load i8, ptr %21, align 1, !tbaa !17
  %32 = icmp eq i8 %31, 45
  br i1 %32, label %33, label %61

33:                                               ; preds = %30, %28
  %34 = add nsw i32 %26, -1
  %35 = add nsw i32 %25, -1
  %36 = add nsw i32 %17, 1
  %37 = icmp sgt i32 %17, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %33
  %39 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #41
  %40 = getelementptr inbounds %struct._LocalHom.3, ptr %18, i64 0, i32 1
  store ptr %39, ptr %40, align 8, !tbaa !371
  %41 = getelementptr inbounds %struct._LocalHom.3, ptr %39, i64 0, i32 1
  store ptr null, ptr %41, align 8, !tbaa !371
  br label %42

42:                                               ; preds = %38, %33
  %43 = phi ptr [ %39, %38 ], [ %18, %33 ]
  %44 = getelementptr inbounds %struct._LocalHom.3, ptr %43, i64 0, i32 3
  store i32 %24, ptr %44, align 8, !tbaa !373
  %45 = getelementptr inbounds %struct._LocalHom.3, ptr %43, i64 0, i32 5
  store i32 %23, ptr %45, align 8, !tbaa !374
  %46 = getelementptr inbounds %struct._LocalHom.3, ptr %43, i64 0, i32 4
  store i32 %34, ptr %46, align 4, !tbaa !375
  %47 = getelementptr inbounds %struct._LocalHom.3, ptr %43, i64 0, i32 6
  store i32 %35, ptr %47, align 4, !tbaa !376
  br i1 %12, label %58, label %48

48:                                               ; preds = %42
  %49 = sub nsw i32 %35, %23
  %50 = add nsw i32 %49, 1
  %51 = getelementptr inbounds %struct._LocalHom.3, ptr %43, i64 0, i32 8
  store i32 %50, ptr %51, align 8, !tbaa !377
  %52 = sitofp i32 %20 to double
  %53 = sitofp i32 %50 to double
  %54 = fdiv double %52, %53
  %55 = fmul double %54, 5.800000e+00
  %56 = fdiv double %55, 6.000000e+02
  %57 = getelementptr inbounds %struct._LocalHom.3, ptr %43, i64 0, i32 7
  store double %56, ptr %57, align 8, !tbaa !378
  br label %81

58:                                               ; preds = %42
  %59 = add i32 %25, %15
  %60 = add nsw i32 %59, %19
  br label %81

61:                                               ; preds = %30, %13
  %62 = icmp eq i8 %14, 45
  br i1 %62, label %81, label %63

63:                                               ; preds = %61
  %64 = load i8, ptr %21, align 1, !tbaa !17
  %65 = icmp eq i8 %64, 45
  br i1 %65, label %81, label %66

66:                                               ; preds = %63
  %67 = icmp eq i32 %16, 0
  %68 = select i1 %67, i32 %26, i32 %24
  %69 = select i1 %67, i32 %25, i32 %23
  %70 = sext i8 %14 to i64
  %71 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !31
  %73 = sext i32 %72 to i64
  %74 = sext i8 %64 to i64
  %75 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !31
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %73, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !31
  %80 = add nsw i32 %79, %20
  br label %81

81:                                               ; preds = %66, %63, %61, %58, %48
  %82 = phi i32 [ %68, %66 ], [ %24, %63 ], [ %24, %61 ], [ %24, %58 ], [ %24, %48 ]
  %83 = phi i32 [ %69, %66 ], [ %23, %63 ], [ %23, %61 ], [ %23, %58 ], [ %23, %48 ]
  %84 = phi i32 [ %80, %66 ], [ %20, %63 ], [ %20, %61 ], [ 0, %58 ], [ 0, %48 ]
  %85 = phi i32 [ %19, %66 ], [ %19, %63 ], [ %19, %61 ], [ %60, %58 ], [ %19, %48 ]
  %86 = phi ptr [ %18, %66 ], [ %18, %63 ], [ %18, %61 ], [ %43, %58 ], [ %43, %48 ]
  %87 = phi i32 [ %17, %66 ], [ %17, %63 ], [ %17, %61 ], [ %36, %58 ], [ %36, %48 ]
  %88 = phi i32 [ 1, %66 ], [ %16, %63 ], [ %16, %61 ], [ 0, %58 ], [ 0, %48 ]
  %89 = getelementptr inbounds i8, ptr %22, i64 1
  %90 = load i8, ptr %22, align 1, !tbaa !17
  %91 = icmp ne i8 %90, 45
  %92 = zext i1 %91 to i32
  %93 = add nsw i32 %26, %92
  %94 = getelementptr inbounds i8, ptr %21, i64 1
  %95 = load i8, ptr %21, align 1, !tbaa !17
  %96 = icmp ne i8 %95, 45
  %97 = zext i1 %96 to i32
  %98 = add nsw i32 %25, %97
  %99 = sub i32 0, %83
  %100 = load i8, ptr %89, align 1, !tbaa !17
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %102, label %13, !llvm.loop !379

102:                                              ; preds = %81, %7
  %103 = phi i32 [ %3, %7 ], [ %93, %81 ]
  %104 = phi i32 [ %4, %7 ], [ %98, %81 ]
  %105 = phi i32 [ 0, %7 ], [ %82, %81 ]
  %106 = phi i32 [ 0, %7 ], [ %83, %81 ]
  %107 = phi ptr [ %0, %7 ], [ %89, %81 ]
  %108 = phi ptr [ %1, %7 ], [ %94, %81 ]
  %109 = phi i32 [ 0, %7 ], [ %84, %81 ]
  %110 = phi i32 [ 0, %7 ], [ %85, %81 ]
  %111 = phi ptr [ %2, %7 ], [ %86, %81 ]
  %112 = phi i32 [ 0, %7 ], [ %87, %81 ]
  %113 = phi i32 [ 0, %7 ], [ %99, %81 ]
  %114 = getelementptr inbounds i8, ptr %107, i64 -1
  %115 = load i8, ptr %114, align 1, !tbaa !17
  %116 = icmp eq i8 %115, 45
  br i1 %116, label %150, label %117

117:                                              ; preds = %102
  %118 = getelementptr inbounds i8, ptr %108, i64 -1
  %119 = load i8, ptr %118, align 1, !tbaa !17
  %120 = icmp eq i8 %119, 45
  br i1 %120, label %150, label %121

121:                                              ; preds = %117
  %122 = icmp sgt i32 %112, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %121
  %124 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #41
  %125 = getelementptr inbounds %struct._LocalHom.3, ptr %111, i64 0, i32 1
  store ptr %124, ptr %125, align 8, !tbaa !371
  %126 = getelementptr inbounds %struct._LocalHom.3, ptr %124, i64 0, i32 1
  store ptr null, ptr %126, align 8, !tbaa !371
  br label %127

127:                                              ; preds = %123, %121
  %128 = phi ptr [ %124, %123 ], [ %111, %121 ]
  %129 = add nsw i32 %103, -1
  %130 = add nsw i32 %104, -1
  %131 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 3
  store i32 %105, ptr %131, align 8, !tbaa !373
  %132 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 5
  store i32 %106, ptr %132, align 8, !tbaa !374
  %133 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 4
  store i32 %129, ptr %133, align 4, !tbaa !375
  %134 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 6
  store i32 %130, ptr %134, align 4, !tbaa !376
  %135 = load i32, ptr @divpairscore, align 4, !tbaa !31
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %147, label %137

137:                                              ; preds = %127
  %138 = sub nsw i32 %130, %106
  %139 = add nsw i32 %138, 1
  %140 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 8
  store i32 %139, ptr %140, align 8, !tbaa !377
  %141 = sitofp i32 %109 to double
  %142 = sitofp i32 %139 to double
  %143 = fdiv double %141, %142
  %144 = fmul double %143, 5.800000e+00
  %145 = fdiv double %144, 6.000000e+02
  %146 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 7
  store double %145, ptr %146, align 8, !tbaa !378
  br label %150

147:                                              ; preds = %127
  %148 = add i32 %104, %113
  %149 = add nsw i32 %148, %110
  br label %150

150:                                              ; preds = %147, %137, %117, %102
  %151 = phi i32 [ %110, %137 ], [ %149, %147 ], [ %110, %117 ], [ %110, %102 ]
  %152 = load i32, ptr @divpairscore, align 4, !tbaa !31
  %153 = icmp ne i32 %152, 0
  %154 = icmp eq ptr %2, null
  %155 = or i1 %153, %154
  br i1 %155, label %163, label %156

156:                                              ; preds = %156, %150
  %157 = phi ptr [ %161, %156 ], [ %2, %150 ]
  %158 = getelementptr inbounds %struct._LocalHom.3, ptr %157, i64 0, i32 8
  store i32 %151, ptr %158, align 8, !tbaa !377
  %159 = getelementptr inbounds %struct._LocalHom.3, ptr %157, i64 0, i32 7
  store double 5.800000e+00, ptr %159, align 8, !tbaa !378
  %160 = getelementptr inbounds %struct._LocalHom.3, ptr %157, i64 0, i32 1
  %161 = load ptr, ptr %160, align 8, !tbaa !371
  %162 = icmp eq ptr %161, null
  br i1 %162, label %163, label %156, !llvm.loop !380

163:                                              ; preds = %156, %150
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @putlocalhom2(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #12 {
  %8 = load i8, ptr %0, align 1, !tbaa !17
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %105, label %10

10:                                               ; preds = %7
  %11 = load i32, ptr @divpairscore, align 4
  %12 = icmp eq i32 %11, 0
  br label %13

13:                                               ; preds = %83, %10
  %14 = phi i8 [ %8, %10 ], [ %103, %83 ]
  %15 = phi i32 [ 0, %10 ], [ %102, %83 ]
  %16 = phi i32 [ 0, %10 ], [ %91, %83 ]
  %17 = phi i32 [ 0, %10 ], [ %90, %83 ]
  %18 = phi ptr [ %2, %10 ], [ %89, %83 ]
  %19 = phi i32 [ 0, %10 ], [ %88, %83 ]
  %20 = phi i32 [ 0, %10 ], [ %87, %83 ]
  %21 = phi i32 [ 0, %10 ], [ %86, %83 ]
  %22 = phi ptr [ %1, %10 ], [ %97, %83 ]
  %23 = phi ptr [ %0, %10 ], [ %92, %83 ]
  %24 = phi i32 [ 0, %10 ], [ %85, %83 ]
  %25 = phi i32 [ 0, %10 ], [ %84, %83 ]
  %26 = phi i32 [ %4, %10 ], [ %101, %83 ]
  %27 = phi i32 [ %3, %10 ], [ %96, %83 ]
  %28 = icmp eq i32 %16, 1
  br i1 %28, label %29, label %63

29:                                               ; preds = %13
  %30 = icmp eq i8 %14, 45
  br i1 %30, label %34, label %31

31:                                               ; preds = %29
  %32 = load i8, ptr %22, align 1, !tbaa !17
  %33 = icmp eq i8 %32, 45
  br i1 %33, label %34, label %63

34:                                               ; preds = %31, %29
  %35 = add nsw i32 %27, -1
  %36 = add nsw i32 %26, -1
  %37 = add nsw i32 %17, 1
  %38 = icmp sgt i32 %17, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %34
  %40 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #41
  %41 = getelementptr inbounds %struct._LocalHom.3, ptr %18, i64 0, i32 1
  store ptr %40, ptr %41, align 8, !tbaa !371
  %42 = getelementptr inbounds %struct._LocalHom.3, ptr %40, i64 0, i32 1
  store ptr null, ptr %42, align 8, !tbaa !371
  br label %43

43:                                               ; preds = %39, %34
  %44 = phi ptr [ %40, %39 ], [ %18, %34 ]
  %45 = getelementptr inbounds %struct._LocalHom.3, ptr %44, i64 0, i32 3
  store i32 %25, ptr %45, align 8, !tbaa !373
  %46 = getelementptr inbounds %struct._LocalHom.3, ptr %44, i64 0, i32 5
  store i32 %24, ptr %46, align 8, !tbaa !374
  %47 = getelementptr inbounds %struct._LocalHom.3, ptr %44, i64 0, i32 4
  store i32 %35, ptr %47, align 4, !tbaa !375
  %48 = getelementptr inbounds %struct._LocalHom.3, ptr %44, i64 0, i32 6
  store i32 %36, ptr %48, align 4, !tbaa !376
  br i1 %12, label %59, label %49

49:                                               ; preds = %43
  %50 = sub nsw i32 %36, %24
  %51 = add nsw i32 %50, 1
  %52 = getelementptr inbounds %struct._LocalHom.3, ptr %44, i64 0, i32 8
  store i32 %51, ptr %52, align 8, !tbaa !377
  %53 = sitofp i32 %21 to double
  %54 = sitofp i32 %51 to double
  %55 = fdiv double %53, %54
  %56 = fmul double %55, 5.800000e+00
  %57 = fdiv double %56, 6.000000e+02
  %58 = getelementptr inbounds %struct._LocalHom.3, ptr %44, i64 0, i32 7
  store double %57, ptr %58, align 8, !tbaa !378
  br label %83

59:                                               ; preds = %43
  %60 = add nsw i32 %20, %21
  %61 = add i32 %26, %15
  %62 = add nsw i32 %61, %19
  br label %83

63:                                               ; preds = %31, %13
  %64 = icmp eq i8 %14, 45
  br i1 %64, label %83, label %65

65:                                               ; preds = %63
  %66 = load i8, ptr %22, align 1, !tbaa !17
  %67 = icmp eq i8 %66, 45
  br i1 %67, label %83, label %68

68:                                               ; preds = %65
  %69 = icmp eq i32 %16, 0
  %70 = select i1 %69, i32 %27, i32 %25
  %71 = select i1 %69, i32 %26, i32 %24
  %72 = sext i8 %14 to i64
  %73 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !31
  %75 = sext i32 %74 to i64
  %76 = sext i8 %66 to i64
  %77 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !31
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %75, i64 %79
  %81 = load i32, ptr %80, align 4, !tbaa !31
  %82 = add nsw i32 %81, %21
  br label %83

83:                                               ; preds = %68, %65, %63, %59, %49
  %84 = phi i32 [ %70, %68 ], [ %25, %65 ], [ %25, %63 ], [ %25, %59 ], [ %25, %49 ]
  %85 = phi i32 [ %71, %68 ], [ %24, %65 ], [ %24, %63 ], [ %24, %59 ], [ %24, %49 ]
  %86 = phi i32 [ %82, %68 ], [ %21, %65 ], [ %21, %63 ], [ 0, %59 ], [ 0, %49 ]
  %87 = phi i32 [ %20, %68 ], [ %20, %65 ], [ %20, %63 ], [ %60, %59 ], [ %20, %49 ]
  %88 = phi i32 [ %19, %68 ], [ %19, %65 ], [ %19, %63 ], [ %62, %59 ], [ %19, %49 ]
  %89 = phi ptr [ %18, %68 ], [ %18, %65 ], [ %18, %63 ], [ %44, %59 ], [ %44, %49 ]
  %90 = phi i32 [ %17, %68 ], [ %17, %65 ], [ %17, %63 ], [ %37, %59 ], [ %37, %49 ]
  %91 = phi i32 [ 1, %68 ], [ %16, %65 ], [ %16, %63 ], [ 0, %59 ], [ 0, %49 ]
  %92 = getelementptr inbounds i8, ptr %23, i64 1
  %93 = load i8, ptr %23, align 1, !tbaa !17
  %94 = icmp ne i8 %93, 45
  %95 = zext i1 %94 to i32
  %96 = add nsw i32 %27, %95
  %97 = getelementptr inbounds i8, ptr %22, i64 1
  %98 = load i8, ptr %22, align 1, !tbaa !17
  %99 = icmp ne i8 %98, 45
  %100 = zext i1 %99 to i32
  %101 = add nsw i32 %26, %100
  %102 = sub i32 0, %85
  %103 = load i8, ptr %92, align 1, !tbaa !17
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %105, label %13, !llvm.loop !381

105:                                              ; preds = %83, %7
  %106 = phi i32 [ %3, %7 ], [ %96, %83 ]
  %107 = phi i32 [ %4, %7 ], [ %101, %83 ]
  %108 = phi i32 [ 0, %7 ], [ %84, %83 ]
  %109 = phi i32 [ 0, %7 ], [ %85, %83 ]
  %110 = phi ptr [ %0, %7 ], [ %92, %83 ]
  %111 = phi ptr [ %1, %7 ], [ %97, %83 ]
  %112 = phi i32 [ 0, %7 ], [ %86, %83 ]
  %113 = phi i32 [ 0, %7 ], [ %87, %83 ]
  %114 = phi i32 [ 0, %7 ], [ %88, %83 ]
  %115 = phi ptr [ %2, %7 ], [ %89, %83 ]
  %116 = phi i32 [ 0, %7 ], [ %90, %83 ]
  %117 = phi i32 [ 0, %7 ], [ %102, %83 ]
  %118 = getelementptr inbounds i8, ptr %110, i64 -1
  %119 = load i8, ptr %118, align 1, !tbaa !17
  %120 = icmp eq i8 %119, 45
  br i1 %120, label %155, label %121

121:                                              ; preds = %105
  %122 = getelementptr inbounds i8, ptr %111, i64 -1
  %123 = load i8, ptr %122, align 1, !tbaa !17
  %124 = icmp eq i8 %123, 45
  br i1 %124, label %155, label %125

125:                                              ; preds = %121
  %126 = icmp sgt i32 %116, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %125
  %128 = tail call noalias dereferenceable_or_null(80) ptr @calloc(i64 noundef 1, i64 noundef 80) #41
  %129 = getelementptr inbounds %struct._LocalHom.3, ptr %115, i64 0, i32 1
  store ptr %128, ptr %129, align 8, !tbaa !371
  %130 = getelementptr inbounds %struct._LocalHom.3, ptr %128, i64 0, i32 1
  store ptr null, ptr %130, align 8, !tbaa !371
  br label %131

131:                                              ; preds = %127, %125
  %132 = phi ptr [ %128, %127 ], [ %115, %125 ]
  %133 = add nsw i32 %106, -1
  %134 = add nsw i32 %107, -1
  %135 = getelementptr inbounds %struct._LocalHom.3, ptr %132, i64 0, i32 3
  store i32 %108, ptr %135, align 8, !tbaa !373
  %136 = getelementptr inbounds %struct._LocalHom.3, ptr %132, i64 0, i32 5
  store i32 %109, ptr %136, align 8, !tbaa !374
  %137 = getelementptr inbounds %struct._LocalHom.3, ptr %132, i64 0, i32 4
  store i32 %133, ptr %137, align 4, !tbaa !375
  %138 = getelementptr inbounds %struct._LocalHom.3, ptr %132, i64 0, i32 6
  store i32 %134, ptr %138, align 4, !tbaa !376
  %139 = load i32, ptr @divpairscore, align 4, !tbaa !31
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %151, label %141

141:                                              ; preds = %131
  %142 = sub nsw i32 %134, %109
  %143 = add nsw i32 %142, 1
  %144 = getelementptr inbounds %struct._LocalHom.3, ptr %132, i64 0, i32 8
  store i32 %143, ptr %144, align 8, !tbaa !377
  %145 = sitofp i32 %112 to double
  %146 = sitofp i32 %143 to double
  %147 = fdiv double %145, %146
  %148 = fmul double %147, 5.800000e+00
  %149 = fdiv double %148, 6.000000e+02
  %150 = getelementptr inbounds %struct._LocalHom.3, ptr %132, i64 0, i32 7
  store double %149, ptr %150, align 8, !tbaa !378
  br label %155

151:                                              ; preds = %131
  %152 = add nsw i32 %113, %112
  %153 = add i32 %107, %117
  %154 = add nsw i32 %153, %114
  br label %155

155:                                              ; preds = %151, %141, %121, %105
  %156 = phi i32 [ %113, %141 ], [ %152, %151 ], [ %113, %121 ], [ %113, %105 ]
  %157 = phi i32 [ %114, %141 ], [ %154, %151 ], [ %114, %121 ], [ %114, %105 ]
  %158 = load i32, ptr @divpairscore, align 4, !tbaa !31
  %159 = icmp ne i32 %158, 0
  %160 = icmp eq ptr %2, null
  %161 = or i1 %159, %160
  br i1 %161, label %175, label %162

162:                                              ; preds = %155
  %163 = sitofp i32 %156 to double
  %164 = fmul double %163, 5.800000e+00
  %165 = mul nsw i32 %157, 600
  %166 = sitofp i32 %165 to double
  %167 = fdiv double %164, %166
  br label %168

168:                                              ; preds = %168, %162
  %169 = phi ptr [ %2, %162 ], [ %173, %168 ]
  %170 = getelementptr inbounds %struct._LocalHom.3, ptr %169, i64 0, i32 8
  store i32 %157, ptr %170, align 8, !tbaa !377
  %171 = getelementptr inbounds %struct._LocalHom.3, ptr %169, i64 0, i32 7
  store double %167, ptr %171, align 8, !tbaa !378
  %172 = getelementptr inbounds %struct._LocalHom.3, ptr %169, i64 0, i32 1
  %173 = load ptr, ptr %172, align 8, !tbaa !371
  %174 = icmp eq ptr %173, null
  br i1 %174, label %175, label %168, !llvm.loop !382

175:                                              ; preds = %168, %155
  ret void
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @ErrorExit(ptr noundef %0) #23 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !19
  %3 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef nonnull @.str.5.147, ptr noundef %0) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @seqLower(i32 noundef %0, ptr nocapture noundef readonly %1) #24 {
  %3 = icmp sgt i32 %0, 0
  br i1 %3, label %4, label %31

4:                                                ; preds = %2
  %5 = zext i32 %0 to i64
  br label %6

6:                                                ; preds = %28, %4
  %7 = phi i64 [ 0, %4 ], [ %29, %28 ]
  %8 = getelementptr inbounds ptr, ptr %1, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %9) #40
  %11 = trunc i64 %10 to i32
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %28

13:                                               ; preds = %6
  %14 = tail call ptr @__ctype_tolower_loc() #43
  %15 = and i64 %10, 4294967295
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi i64 [ 0, %13 ], [ %26, %16 ]
  %18 = load ptr, ptr %14, align 8, !tbaa !19
  %19 = load ptr, ptr %8, align 8, !tbaa !19
  %20 = getelementptr inbounds i8, ptr %19, i64 %17
  %21 = load i8, ptr %20, align 1, !tbaa !17
  %22 = sext i8 %21 to i64
  %23 = getelementptr inbounds i32, ptr %18, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !31
  %25 = trunc i32 %24 to i8
  store i8 %25, ptr %20, align 1, !tbaa !17
  %26 = add nuw nsw i64 %17, 1
  %27 = icmp eq i64 %26, %15
  br i1 %27, label %28, label %16, !llvm.loop !383

28:                                               ; preds = %16, %6
  %29 = add nuw nsw i64 %7, 1
  %30 = icmp eq i64 %29, %5
  br i1 %30, label %31, label %6, !llvm.loop !384

31:                                               ; preds = %28, %2
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_tolower_loc() local_unnamed_addr #25

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @myfgets(ptr nocapture noundef writeonly %0, i32 noundef %1, ptr nocapture noundef %2) #12 {
  %4 = tail call i32 @feof(ptr noundef %2) #35
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %24

6:                                                ; preds = %3
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %13, %6
  %9 = phi i32 [ %16, %13 ], [ 0, %6 ]
  %10 = phi ptr [ %15, %13 ], [ %0, %6 ]
  %11 = tail call i32 @getc(ptr noundef %2) #39
  %12 = icmp eq i32 %11, 10
  br i1 %12, label %18, label %13

13:                                               ; preds = %8
  %14 = trunc i32 %11 to i8
  %15 = getelementptr inbounds i8, ptr %10, i64 1
  store i8 %14, ptr %10, align 1, !tbaa !17
  %16 = add nuw nsw i32 %9, 1
  %17 = icmp eq i32 %16, %1
  br i1 %17, label %19, label %8, !llvm.loop !385

18:                                               ; preds = %8
  %.lcssa = phi ptr [ %10, %8 ]
  store i8 0, ptr %.lcssa, align 1, !tbaa !17
  br label %24

19:                                               ; preds = %13, %6
  %20 = phi ptr [ %0, %6 ], [ %15, %13 ]
  store i8 0, ptr %20, align 1, !tbaa !17
  br label %21

21:                                               ; preds = %21, %19
  %22 = tail call i32 @getc(ptr noundef %2) #39
  %23 = icmp eq i32 %22, 10
  br i1 %23, label %24, label %21, !llvm.loop !386

24:                                               ; preds = %21, %18, %3
  %25 = phi i32 [ 1, %3 ], [ 0, %18 ], [ 0, %21 ]
  ret i32 %25
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @feof(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize uwtable
define internal void @searchKUorWA(ptr nocapture noundef %0) #12 {
  br label %2

2:                                                ; preds = %5, %1
  %3 = phi i32 [ 10, %1 ], [ %4, %5 ]
  %4 = tail call i32 @getc(ptr noundef %0) #39
  switch i32 %4, label %5 [
    i32 -1, label %6
    i32 62, label %6
    i32 61, label %6
  ]

5:                                                ; preds = %6, %2
  br label %2, !llvm.loop !387

6:                                                ; preds = %2, %2, %2
  %7 = icmp eq i32 %3, 10
  br i1 %7, label %8, label %5

8:                                                ; preds = %6
  %.lcssa = phi i32 [ %4, %6 ]
  %9 = tail call i32 @ungetc(i32 noundef %.lcssa, ptr noundef %0) #39
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @ungetc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal ptr @load1SeqWithoutName_realloc(ptr nocapture noundef %0) #4 {
  %2 = tail call noalias dereferenceable_or_null(5000001) ptr @malloc(i64 noundef 5000001) #44
  br label %3

3:                                                ; preds = %32, %1
  %4 = phi i32 [ %.lcssa1, %32 ], [ 10, %1 ]
  %5 = phi ptr [ %38, %32 ], [ %2, %1 ]
  %6 = phi i32 [ %33, %32 ], [ 5000000, %1 ]
  %7 = phi ptr [ %27, %32 ], [ %2, %1 ]
  %8 = ptrtoint ptr %7 to i64
  %9 = zext i32 %6 to i64
  br label %10

10:                                               ; preds = %16, %3
  %11 = phi i32 [ %13, %16 ], [ %4, %3 ]
  %12 = phi ptr [ %18, %16 ], [ %5, %3 ]
  %13 = tail call i32 @getc(ptr noundef %0) #39
  switch i32 %13, label %16 [
    i32 -1, label %39
    i32 62, label %14
    i32 61, label %14
    i32 40, label %14
  ]

14:                                               ; preds = %10, %10, %10
  %15 = icmp eq i32 %11, 10
  br i1 %15, label %39, label %16

16:                                               ; preds = %14, %10
  %17 = trunc i32 %13 to i8
  %18 = getelementptr inbounds i8, ptr %12, i64 1
  store i8 %17, ptr %12, align 1, !tbaa !17
  %19 = ptrtoint ptr %18 to i64
  %20 = sub i64 %19, %8
  %21 = icmp eq i64 %20, %9
  br i1 %21, label %22, label %10, !llvm.loop !388

22:                                               ; preds = %16
  %.lcssa1 = phi i32 [ %13, %16 ]
  %23 = load ptr, ptr @stderr, align 8, !tbaa !19
  %24 = tail call i64 @fwrite(ptr nonnull @.str.16.148, i64 16, i64 1, ptr %23) #38
  %25 = add nuw nsw i32 %6, 5000001
  %26 = zext i32 %25 to i64
  %27 = tail call ptr @realloc(ptr noundef %7, i64 noundef %26) #42
  %28 = icmp eq ptr %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %22
  %30 = load ptr, ptr @stderr, align 8, !tbaa !19
  %31 = tail call i64 @fwrite(ptr nonnull @.str.17.149, i64 49, i64 1, ptr %30) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

32:                                               ; preds = %22
  %33 = add nuw nsw i32 %6, 5000000
  %34 = load ptr, ptr @stderr, align 8, !tbaa !19
  %35 = tail call i64 @fwrite(ptr nonnull @.str.18.150, i64 6, i64 1, ptr %34) #38
  %36 = zext i32 %33 to i64
  %37 = getelementptr inbounds i8, ptr %27, i64 %36
  %38 = getelementptr inbounds i8, ptr %37, i64 -5000000
  br label %3, !llvm.loop !388

39:                                               ; preds = %14, %10
  %.lcssa4 = phi ptr [ %7, %14 ], [ %7, %10 ]
  %.lcssa2 = phi ptr [ %12, %14 ], [ %12, %10 ]
  %.lcssa = phi i32 [ %13, %14 ], [ %13, %10 ]
  %40 = tail call i32 @ungetc(i32 noundef %.lcssa, ptr noundef %0) #39
  store i8 0, ptr %.lcssa2, align 1, !tbaa !17
  %41 = load i32, ptr @dorp, align 4, !tbaa !31
  %42 = icmp eq i32 %41, 100
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  tail call fastcc void @onlyAlpha_lower(ptr noundef %.lcssa4) #39
  br label %45

44:                                               ; preds = %39
  tail call fastcc void @onlyAlpha_upper(ptr noundef %.lcssa4) #39
  br label %45

45:                                               ; preds = %44, %43
  br label %46

46:                                               ; preds = %51, %45
  %47 = phi ptr [ %53, %51 ], [ %.lcssa4, %45 ]
  %48 = load i8, ptr %47, align 1, !tbaa !17
  %49 = icmp eq i8 %48, 42
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  store i8 45, ptr %47, align 1, !tbaa !17
  br label %51

51:                                               ; preds = %50, %46
  %52 = phi i8 [ %48, %46 ], [ 45, %50 ]
  %53 = getelementptr inbounds i8, ptr %47, i64 1
  %54 = icmp eq i8 %52, 0
  br i1 %54, label %55, label %46, !llvm.loop !389

55:                                               ; preds = %51
  ret ptr %.lcssa4
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #26

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @onlyAlpha_lower(ptr noundef %0) unnamed_addr #16 {
  %2 = load i8, ptr %0, align 1, !tbaa !17
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %30, label %4

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_b_loc() #43
  br label %6

6:                                                ; preds = %26, %4
  %7 = phi i8 [ %2, %4 ], [ %28, %26 ]
  %8 = phi ptr [ %0, %4 ], [ %10, %26 ]
  %9 = phi ptr [ %0, %4 ], [ %27, %26 ]
  %10 = getelementptr inbounds i8, ptr %8, i64 1
  %11 = load ptr, ptr %5, align 8, !tbaa !19
  %12 = sext i8 %7 to i64
  %13 = getelementptr inbounds i16, ptr %11, i64 %12
  %14 = load i16, ptr %13, align 2, !tbaa !390
  %15 = freeze i16 %14
  %16 = and i16 %15, 1024
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  switch i8 %7, label %26 [
    i8 46, label %19
    i8 45, label %19
    i8 42, label %19
  ]

19:                                               ; preds = %18, %18, %18, %6
  %20 = tail call ptr @__ctype_tolower_loc() #43
  %21 = load ptr, ptr %20, align 8, !tbaa !19
  %22 = getelementptr inbounds i32, ptr %21, i64 %12
  %23 = load i32, ptr %22, align 4, !tbaa !31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds i8, ptr %9, i64 1
  store i8 %24, ptr %9, align 1, !tbaa !17
  br label %26

26:                                               ; preds = %19, %18
  %27 = phi ptr [ %25, %19 ], [ %9, %18 ]
  %28 = load i8, ptr %10, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %6, !llvm.loop !392

30:                                               ; preds = %26, %1
  %31 = phi ptr [ %0, %1 ], [ %27, %26 ]
  store i8 0, ptr %31, align 1, !tbaa !17
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @onlyAlpha_upper(ptr noundef %0) unnamed_addr #16 {
  %2 = load i8, ptr %0, align 1, !tbaa !17
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %30, label %4

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_b_loc() #43
  br label %6

6:                                                ; preds = %26, %4
  %7 = phi i8 [ %2, %4 ], [ %28, %26 ]
  %8 = phi ptr [ %0, %4 ], [ %10, %26 ]
  %9 = phi ptr [ %0, %4 ], [ %27, %26 ]
  %10 = getelementptr inbounds i8, ptr %8, i64 1
  %11 = load ptr, ptr %5, align 8, !tbaa !19
  %12 = sext i8 %7 to i64
  %13 = getelementptr inbounds i16, ptr %11, i64 %12
  %14 = load i16, ptr %13, align 2, !tbaa !390
  %15 = freeze i16 %14
  %16 = and i16 %15, 1024
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  switch i8 %7, label %26 [
    i8 46, label %19
    i8 45, label %19
    i8 42, label %19
  ]

19:                                               ; preds = %18, %18, %18, %6
  %20 = tail call ptr @__ctype_toupper_loc() #43
  %21 = load ptr, ptr %20, align 8, !tbaa !19
  %22 = getelementptr inbounds i32, ptr %21, i64 %12
  %23 = load i32, ptr %22, align 4, !tbaa !31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds i8, ptr %9, i64 1
  store i8 %24, ptr %9, align 1, !tbaa !17
  br label %26

26:                                               ; preds = %19, %18
  %27 = phi ptr [ %25, %19 ], [ %9, %18 ]
  %28 = load i8, ptr %10, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %6, !llvm.loop !393

30:                                               ; preds = %26, %1
  %31 = phi ptr [ %0, %1 ], [ %27, %26 ]
  store i8 0, ptr %31, align 1, !tbaa !17
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #25

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_toupper_loc() local_unnamed_addr #25

; Function Attrs: nounwind optsize uwtable
define internal void @readData(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef readonly %3) #4 {
  tail call void @rewind(ptr noundef %0) #39
  tail call void @searchKUorWA(ptr noundef %0) #39
  %5 = load i32, ptr @njob, align 4, !tbaa !31
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %7, %4
  %8 = phi i64 [ %21, %7 ], [ 0, %4 ]
  %9 = getelementptr inbounds [256 x i8], ptr %1, i64 %8
  store i8 61, ptr %9, align 1, !tbaa !17
  %10 = tail call i32 @getc(ptr noundef %0) #39
  %11 = getelementptr inbounds i8, ptr %9, i64 1
  %12 = tail call i32 @myfgets(ptr noundef nonnull %11, i32 noundef 254, ptr noundef %0) #39, !range !394
  %13 = tail call ptr @load1SeqWithoutName_realloc(ptr noundef %0) #39
  store ptr %13, ptr @readData.tmpseq, align 8, !tbaa !19
  %14 = getelementptr inbounds ptr, ptr %3, i64 %8
  %15 = load ptr, ptr %14, align 8, !tbaa !19
  %16 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %15, ptr noundef nonnull dereferenceable(1) %13) #35
  %17 = load ptr, ptr %14, align 8, !tbaa !19
  %18 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %17) #40
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds i32, ptr %2, i64 %8
  store i32 %19, ptr %20, align 4, !tbaa !31
  tail call void @free(ptr noundef %13) #35
  %21 = add nuw nsw i64 %8, 1
  %22 = load i32, ptr @njob, align 4, !tbaa !31
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %7, label %25, !llvm.loop !395

25:                                               ; preds = %7, %4
  %26 = phi i32 [ %5, %4 ], [ %22, %7 ]
  %27 = load i32, ptr @dorp, align 4, !tbaa !31
  %28 = icmp eq i32 %27, 100
  %29 = load i32, ptr @upperCase, align 4
  %30 = icmp ne i32 %29, -1
  %31 = select i1 %28, i1 %30, i1 false
  br i1 %31, label %32, label %33

32:                                               ; preds = %25
  tail call void @seqLower(i32 noundef %26, ptr noundef %3) #39
  br label %33

33:                                               ; preds = %32, %25
  ret void
}

; Function Attrs: nofree nounwind optsize
declare void @rewind(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @countATGC(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #27 {
  %3 = load i8, ptr %0, align 1, !tbaa !17
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %40, label %5

5:                                                ; preds = %2
  %6 = tail call ptr @__ctype_tolower_loc() #43
  %7 = load ptr, ptr %6, align 8, !tbaa !19
  %8 = tail call ptr @__ctype_b_loc() #43
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  br label %10

10:                                               ; preds = %33, %5
  %11 = phi i8 [ %37, %33 ], [ %3, %5 ]
  %12 = phi i32 [ %34, %33 ], [ 0, %5 ]
  %13 = phi i32 [ %35, %33 ], [ 0, %5 ]
  %14 = phi ptr [ %36, %33 ], [ %0, %5 ]
  %15 = sext i8 %11 to i64
  %16 = getelementptr inbounds i32, ptr %7, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !31
  %18 = freeze i32 %17
  %19 = shl i32 %18, 24
  %20 = ashr exact i32 %19, 24
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, ptr %9, i64 %21
  %23 = load i16, ptr %22, align 2, !tbaa !390
  %24 = and i16 %23, 1024
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %10
  %27 = add nsw i32 %13, 1
  %28 = and i32 %18, 251
  %29 = icmp eq i32 %28, 99
  br i1 %29, label %31, label %30

30:                                               ; preds = %26
  switch i32 %19, label %33 [
    i32 1962934272, label %31
    i32 1946157056, label %31
    i32 1845493760, label %31
    i32 1627389952, label %31
  ]

31:                                               ; preds = %30, %30, %30, %30, %26
  %32 = add nsw i32 %12, 1
  br label %33

33:                                               ; preds = %31, %30, %10
  %34 = phi i32 [ %32, %31 ], [ %12, %30 ], [ %12, %10 ]
  %35 = phi i32 [ %27, %31 ], [ %27, %30 ], [ %13, %10 ]
  %36 = getelementptr inbounds i8, ptr %14, i64 1
  %37 = load i8, ptr %36, align 1, !tbaa !17
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %10, !llvm.loop !396

39:                                               ; preds = %33
  %.lcssa1 = phi i32 [ %34, %33 ]
  %.lcssa = phi i32 [ %35, %33 ]
  store i32 %.lcssa, ptr %1, align 4, !tbaa !31
  br label %40

40:                                               ; preds = %39, %2
  %41 = phi i32 [ %.lcssa1, %39 ], [ 0, %2 ]
  ret i32 %41
}

; Function Attrs: nounwind optsize uwtable
define internal void @getnumlen(ptr nocapture noundef %0) #4 {
  %2 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #34
  %3 = tail call ptr @AllocateCharVec(i32 noundef 5000000) #35
  %4 = tail call fastcc i32 @countKUorWA(ptr noundef %0) #39
  store i32 %4, ptr @njob, align 4, !tbaa !31
  tail call void @searchKUorWA(ptr noundef %0) #39
  store i32 0, ptr @nlenmax, align 4, !tbaa !31
  %5 = load i32, ptr @njob, align 4, !tbaa !31
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %18, %1
  %8 = phi i32 [ %22, %18 ], [ 0, %1 ]
  %9 = phi i32 [ %20, %18 ], [ 0, %1 ]
  %10 = phi i32 [ %23, %18 ], [ 0, %1 ]
  %11 = tail call i32 @myfgets(ptr noundef %3, i32 noundef 4999999, ptr noundef %0) #39, !range !394
  %12 = tail call ptr @load1SeqWithoutName_realloc(ptr noundef %0) #39
  %13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %12) #40
  %14 = trunc i64 %13 to i32
  %15 = load i32, ptr @nlenmax, align 4, !tbaa !31
  %16 = icmp slt i32 %15, %14
  br i1 %16, label %17, label %18

17:                                               ; preds = %7
  store i32 %14, ptr @nlenmax, align 4, !tbaa !31
  br label %18

18:                                               ; preds = %17, %7
  %19 = call i32 @countATGC(ptr noundef %12, ptr noundef nonnull %2) #39
  %20 = add nsw i32 %19, %9
  %21 = load i32, ptr %2, align 4, !tbaa !31
  %22 = add nsw i32 %21, %8
  tail call void @free(ptr noundef %12) #35
  %23 = add nuw nsw i32 %10, 1
  %24 = load i32, ptr @njob, align 4, !tbaa !31
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %7, label %26, !llvm.loop !397

26:                                               ; preds = %18
  %.lcssa1 = phi i32 [ %20, %18 ]
  %.lcssa = phi i32 [ %22, %18 ]
  %27 = sitofp i32 %.lcssa1 to double
  %28 = sitofp i32 %.lcssa to double
  br label %29

29:                                               ; preds = %26, %1
  %30 = phi double [ 0.000000e+00, %1 ], [ %27, %26 ]
  %31 = phi double [ 0.000000e+00, %1 ], [ %28, %26 ]
  %32 = load i32, ptr @dorp, align 4, !tbaa !31
  %33 = icmp eq i32 %32, 100009
  br i1 %33, label %34, label %39

34:                                               ; preds = %29
  %35 = fdiv double %30, %31
  %36 = fcmp ogt double %35, 7.500000e-01
  %37 = select i1 %36, i32 100, i32 112
  %38 = sext i1 %36 to i32
  store i32 %37, ptr @dorp, align 4, !tbaa !31
  store i32 %38, ptr @upperCase, align 4, !tbaa !31
  br label %39

39:                                               ; preds = %34, %29
  tail call void @free(ptr noundef %3) #35
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #34
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @countKUorWA(ptr nocapture noundef %0) unnamed_addr #12 {
  br label %2

2:                                                ; preds = %7, %1
  %3 = phi i32 [ 0, %1 ], [ %13, %7 ]
  %4 = phi i32 [ 10, %1 ], [ %5, %7 ]
  %5 = tail call i32 @getc(ptr noundef %0) #39
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = icmp eq i32 %4, 10
  %9 = add i32 %5, -61
  %10 = icmp ult i32 %9, 2
  %11 = and i1 %8, %10
  %12 = zext i1 %11 to i32
  %13 = add nuw nsw i32 %3, %12
  br label %2, !llvm.loop !398

14:                                               ; preds = %2
  %.lcssa = phi i32 [ %3, %2 ]
  tail call void @rewind(ptr noundef %0) #39
  ret i32 %.lcssa
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @write1seq(ptr nocapture noundef %0, ptr noundef %1) #12 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #40
  %4 = trunc i64 %3 to i32
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %6, %2
  %7 = phi i64 [ %10, %6 ], [ 0, %2 ]
  %8 = getelementptr inbounds i8, ptr %1, i64 %7
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.24.151, i32 noundef 60, ptr noundef %8) #39
  %10 = add nuw i64 %7, 60
  %11 = trunc i64 %10 to i32
  %12 = icmp slt i32 %11, %4
  br i1 %12, label %6, label %13, !llvm.loop !399

13:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @WriteHat2(ptr nocapture noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3) #12 {
  %5 = add i32 %1, -1
  %6 = icmp sgt i32 %1, 1
  br i1 %6, label %7, label %33

7:                                                ; preds = %4
  %8 = zext i32 %1 to i64
  %9 = zext i32 %5 to i64
  %10 = zext i32 %1 to i64
  br label %15

11:                                               ; preds = %24, %15
  %12 = phi double [ %18, %15 ], [ %30, %24 ]
  %13 = add nuw nsw i64 %17, 1
  %14 = icmp eq i64 %19, %9
  br i1 %14, label %33, label %15, !llvm.loop !400

15:                                               ; preds = %11, %7
  %16 = phi i64 [ 0, %7 ], [ %19, %11 ]
  %17 = phi i64 [ 1, %7 ], [ %13, %11 ]
  %18 = phi double [ 0.000000e+00, %7 ], [ %12, %11 ]
  %19 = add nuw nsw i64 %16, 1
  %20 = icmp ult i64 %19, %8
  br i1 %20, label %21, label %11

21:                                               ; preds = %15
  %22 = getelementptr inbounds ptr, ptr %3, i64 %16
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  br label %24

24:                                               ; preds = %24, %21
  %25 = phi i64 [ %17, %21 ], [ %31, %24 ]
  %26 = phi double [ %18, %21 ], [ %30, %24 ]
  %27 = getelementptr inbounds double, ptr %23, i64 %25
  %28 = load double, ptr %27, align 8, !tbaa !7
  %29 = fcmp ogt double %28, %26
  %30 = select i1 %29, double %28, double %26
  %31 = add nuw nsw i64 %25, 1
  %32 = icmp eq i64 %31, %10
  br i1 %32, label %11, label %24, !llvm.loop !401

33:                                               ; preds = %11, %4
  %34 = phi double [ 0.000000e+00, %4 ], [ %12, %11 ]
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.22.152, i32 noundef 1) #39
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.22.152, i32 noundef %1) #39
  %37 = fmul double %34, 2.500000e+00
  %38 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.26.153, double noundef %37) #39
  %39 = icmp sgt i32 %1, 0
  br i1 %39, label %40, label %82

40:                                               ; preds = %33
  %41 = zext i32 %1 to i64
  br label %47

42:                                               ; preds = %47
  br i1 %6, label %43, label %82

43:                                               ; preds = %42
  %44 = zext i32 %5 to i64
  %45 = zext i32 %1 to i64
  %46 = zext i32 %1 to i64
  br label %57

47:                                               ; preds = %47, %40
  %48 = phi i64 [ 0, %40 ], [ %49, %47 ]
  %49 = add nuw nsw i64 %48, 1
  %50 = getelementptr inbounds [256 x i8], ptr %2, i64 %48
  %51 = trunc i64 %49 to i32
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.27.154, i32 noundef %51, ptr noundef %50) #39
  %53 = icmp eq i64 %49, %41
  br i1 %53, label %42, label %47, !llvm.loop !402

54:                                               ; preds = %79, %57
  %55 = add nuw nsw i64 %59, 1
  %56 = icmp eq i64 %60, %44
  br i1 %56, label %82, label %57, !llvm.loop !403

57:                                               ; preds = %54, %43
  %58 = phi i64 [ 0, %43 ], [ %60, %54 ]
  %59 = phi i64 [ 1, %43 ], [ %55, %54 ]
  %60 = add nuw nsw i64 %58, 1
  %61 = icmp ult i64 %60, %45
  br i1 %61, label %62, label %54

62:                                               ; preds = %57
  %63 = getelementptr inbounds ptr, ptr %3, i64 %58
  %64 = trunc i64 %58 to i32
  br label %65

65:                                               ; preds = %79, %62
  %66 = phi i64 [ %59, %62 ], [ %80, %79 ]
  %67 = load ptr, ptr %63, align 8, !tbaa !19
  %68 = getelementptr inbounds double, ptr %67, i64 %66
  %69 = load double, ptr %68, align 8, !tbaa !7
  %70 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.28.155, double noundef %69) #39
  %71 = trunc i64 %66 to i32
  %72 = sub nsw i32 %71, %64
  %73 = srem i32 %72, 12
  %74 = icmp eq i32 %73, 0
  %75 = icmp eq i64 %66, %44
  %76 = or i1 %75, %74
  br i1 %76, label %77, label %79

77:                                               ; preds = %65
  %78 = tail call i32 @fputc(i32 10, ptr %0)
  br label %79

79:                                               ; preds = %77, %65
  %80 = add nuw nsw i64 %66, 1
  %81 = icmp eq i64 %80, %46
  br i1 %81, label %54, label %65, !llvm.loop !404

82:                                               ; preds = %54, %42, %33
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @WriteHat2plain(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) #12 {
  %4 = icmp sgt i32 %1, 1
  br i1 %4, label %5, label %30

5:                                                ; preds = %3
  %6 = add nsw i32 %1, -1
  %7 = zext i32 %1 to i64
  %8 = zext i32 %6 to i64
  %9 = zext i32 %1 to i64
  br label %13

10:                                               ; preds = %21, %13
  %11 = add nuw nsw i64 %15, 1
  %12 = icmp eq i64 %16, %8
  br i1 %12, label %30, label %13, !llvm.loop !405

13:                                               ; preds = %10, %5
  %14 = phi i64 [ 0, %5 ], [ %16, %10 ]
  %15 = phi i64 [ 1, %5 ], [ %11, %10 ]
  %16 = add nuw nsw i64 %14, 1
  %17 = icmp ult i64 %16, %7
  br i1 %17, label %18, label %10

18:                                               ; preds = %13
  %19 = getelementptr inbounds ptr, ptr %2, i64 %14
  %20 = trunc i64 %16 to i32
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %15, %18 ], [ %23, %21 ]
  %23 = add nuw nsw i64 %22, 1
  %24 = load ptr, ptr %19, align 8, !tbaa !19
  %25 = getelementptr inbounds double, ptr %24, i64 %22
  %26 = load double, ptr %25, align 8, !tbaa !7
  %27 = trunc i64 %23 to i32
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.29.156, i32 noundef %20, i32 noundef %27, double noundef %26) #39
  %29 = icmp eq i64 %23, %9
  br i1 %29, label %10, label %21, !llvm.loop !406

30:                                               ; preds = %10, %3
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal void @initSignalSM() #28 {
  %1 = load i32, ptr @ppid, align 4, !tbaa !31
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  store ptr null, ptr @signalSM, align 8, !tbaa !19
  br label %4

4:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @initFiles() #4 {
  %1 = alloca [100 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %1) #34
  %2 = load i32, ptr @ppid, align 4, !tbaa !31
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %0
  %5 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %1, ptr noundef nonnull dereferenceable(1) @.str.69, i32 noundef %2) #35
  br label %7

6:                                                ; preds = %0
  store i32 6648432, ptr %1, align 16
  br label %7

7:                                                ; preds = %6, %4
  %8 = call noalias ptr @fopen(ptr noundef nonnull %1, ptr noundef nonnull @.str.70) #39
  store ptr %8, ptr @prep_g, align 8, !tbaa !19
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %7
  %11 = load ptr, ptr @stderr, align 8, !tbaa !19
  %12 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %11, ptr noundef nonnull @.str.5.147, ptr noundef nonnull @.str.71) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

13:                                               ; preds = %7
  %14 = tail call noalias ptr @fopen(ptr noundef nonnull @.str.72, ptr noundef nonnull @.str.70) #39
  store ptr %14, ptr @trap_g, align 8, !tbaa !19
  %15 = icmp eq ptr %14, null
  br i1 %15, label %16, label %19

16:                                               ; preds = %13
  %17 = load ptr, ptr @stderr, align 8, !tbaa !19
  %18 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.5.147, ptr noundef nonnull @.str.73) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

19:                                               ; preds = %13
  %20 = tail call i32 @getpid() #35
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %14, ptr noundef nonnull @.str.74, i32 noundef %20) #39
  %22 = load ptr, ptr @trap_g, align 8, !tbaa !19
  %23 = tail call i32 @fflush(ptr noundef %22) #39
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %1) #34
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nounwind optsize
declare i32 @getpid() local_unnamed_addr #29

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal void @FreeLocalHomTable(ptr nocapture noundef %0, i32 noundef %1) #4 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !19
  %4 = tail call i64 @fwrite(ptr nonnull @.str.79, i64 17, i64 1, ptr %3)
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %35

6:                                                ; preds = %2
  %7 = zext i32 %1 to i64
  br label %8

8:                                                ; preds = %30, %6
  %9 = phi i64 [ 0, %6 ], [ %33, %30 ]
  %10 = getelementptr inbounds ptr, ptr %0, i64 %9
  br label %11

11:                                               ; preds = %27, %8
  %12 = phi i64 [ 0, %8 ], [ %28, %27 ]
  %13 = load ptr, ptr %10, align 8, !tbaa !19
  %14 = icmp eq ptr %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct._LocalHom.3, ptr %13, i64 %12
  br label %17

17:                                               ; preds = %25, %15
  %18 = phi ptr [ %20, %25 ], [ %16, %15 ]
  %19 = getelementptr inbounds %struct._LocalHom.3, ptr %18, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !371
  %21 = load ptr, ptr %10, align 8, !tbaa !19
  %22 = getelementptr inbounds %struct._LocalHom.3, ptr %21, i64 %12
  %23 = icmp eq ptr %18, %22
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  tail call void @free(ptr noundef nonnull %18) #35
  br label %25

25:                                               ; preds = %24, %17
  %26 = icmp eq ptr %20, null
  br i1 %26, label %27, label %17, !llvm.loop !407

27:                                               ; preds = %25, %11
  %28 = add nuw nsw i64 %12, 1
  %29 = icmp eq i64 %28, %7
  br i1 %29, label %30, label %11, !llvm.loop !408

30:                                               ; preds = %27
  %31 = getelementptr inbounds ptr, ptr %0, i64 %9
  %32 = load ptr, ptr %31, align 8, !tbaa !19
  tail call void @free(ptr noundef %32) #35
  %33 = add nuw nsw i64 %9, 1
  %34 = icmp eq i64 %33, %7
  br i1 %34, label %35, label %8, !llvm.loop !409

35:                                               ; preds = %30, %2
  tail call void @free(ptr noundef %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @loadaamtx() #4 {
  %1 = tail call ptr @AllocateDoubleMtx(i32 noundef 21, i32 noundef 20) #35
  %2 = tail call ptr @AllocateDoubleVec(i32 noundef 420) #35
  %3 = tail call ptr @AllocateIntVec(i32 noundef 20) #35
  %4 = load i32, ptr @dorp, align 4, !tbaa !31
  %5 = icmp eq i32 %4, 112
  br i1 %5, label %9, label %6

6:                                                ; preds = %0
  %7 = load ptr, ptr @stderr, align 8, !tbaa !19
  %8 = tail call i64 @fwrite(ptr nonnull @.str.88, i64 45, i64 1, ptr %7) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

9:                                                ; preds = %0
  %10 = tail call noalias ptr @fopen(ptr noundef nonnull @.str.87, ptr noundef nonnull @.str.67) #39
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %9
  %13 = load ptr, ptr @stderr, align 8, !tbaa !19
  %14 = tail call i64 @fwrite(ptr nonnull @.str.89, i64 28, i64 1, ptr %13) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

15:                                               ; preds = %9
  %16 = tail call noalias dereferenceable_or_null(1000) ptr @calloc(i64 noundef 1000, i64 noundef 1) #41
  %17 = tail call noalias dereferenceable_or_null(1000) ptr @calloc(i64 noundef 1000, i64 noundef 1) #41
  br label %18

18:                                               ; preds = %23, %15
  %19 = tail call i32 @feof(ptr noundef nonnull %10) #35
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  %22 = load i8, ptr %16, align 1, !tbaa !17
  br label %27

23:                                               ; preds = %18
  %24 = tail call ptr @fgets(ptr noundef %16, i32 noundef 999, ptr noundef nonnull %10) #39
  %25 = load i8, ptr %16, align 1, !tbaa !17
  %26 = icmp eq i8 %25, 35
  br i1 %26, label %18, label %27, !llvm.loop !410

27:                                               ; preds = %23, %21
  %28 = phi i8 [ %22, %21 ], [ %25, %23 ]
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %54, label %30

30:                                               ; preds = %27
  %31 = tail call ptr @__ctype_b_loc() #43
  br label %32

32:                                               ; preds = %49, %30
  %33 = phi i8 [ %28, %30 ], [ %52, %49 ]
  %34 = phi ptr [ %16, %30 ], [ %51, %49 ]
  %35 = phi ptr [ %16, %30 ], [ %50, %49 ]
  %36 = load ptr, ptr %31, align 8, !tbaa !19
  %37 = sext i8 %33 to i64
  %38 = getelementptr inbounds i16, ptr %36, i64 %37
  %39 = load i16, ptr %38, align 2, !tbaa !390
  %40 = and i16 %39, 1024
  %41 = icmp eq i16 %40, 0
  br i1 %41, label %49, label %42

42:                                               ; preds = %32
  %43 = tail call ptr @__ctype_toupper_loc() #43
  %44 = load ptr, ptr %43, align 8, !tbaa !19
  %45 = getelementptr inbounds i32, ptr %44, i64 %37
  %46 = load i32, ptr %45, align 4, !tbaa !31
  %47 = trunc i32 %46 to i8
  store i8 %47, ptr %35, align 1, !tbaa !17
  %48 = getelementptr inbounds i8, ptr %35, i64 1
  br label %49

49:                                               ; preds = %42, %32
  %50 = phi ptr [ %48, %42 ], [ %35, %32 ]
  %51 = getelementptr inbounds i8, ptr %34, i64 1
  %52 = load i8, ptr %51, align 1, !tbaa !17
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %32, !llvm.loop !411

54:                                               ; preds = %49, %27
  %55 = getelementptr inbounds i8, ptr %16, i64 20
  store i8 0, ptr %55, align 1, !tbaa !17
  %56 = ptrtoint ptr %16 to i64
  br label %57

57:                                               ; preds = %67, %54
  %58 = phi i64 [ 0, %54 ], [ %72, %67 ]
  %59 = getelementptr inbounds i8, ptr @.str.86, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !17
  %61 = sext i8 %60 to i32
  %62 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %16, i32 noundef %61) #40
  %63 = icmp eq ptr %62, null
  br i1 %63, label %64, label %67

64:                                               ; preds = %57
  %.lcssa3 = phi i32 [ %61, %57 ]
  %65 = load ptr, ptr @stderr, align 8, !tbaa !19
  %66 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %65, ptr noundef nonnull @.str.90, i32 noundef %.lcssa3) #36
  tail call fastcc void @showaamtxexample() #39
  unreachable

67:                                               ; preds = %57
  %68 = ptrtoint ptr %62 to i64
  %69 = sub i64 %68, %56
  %70 = trunc i64 %69 to i32
  %71 = getelementptr inbounds i32, ptr %3, i64 %58
  store i32 %70, ptr %71, align 4, !tbaa !31
  %72 = add nuw nsw i64 %58, 1
  %73 = icmp eq i64 %72, 20
  br i1 %73, label %117, label %57, !llvm.loop !412

74:                                               ; preds = %117, %77
  %75 = tail call i32 @feof(ptr noundef nonnull %10) #35
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %120

77:                                               ; preds = %74
  %78 = tail call ptr @fgets(ptr noundef %17, i32 noundef 999, ptr noundef nonnull %10) #39
  %79 = load i8, ptr %17, align 1, !tbaa !17
  %80 = icmp eq i8 %79, 35
  br i1 %80, label %74, label %81, !llvm.loop !413

81:                                               ; preds = %77
  %82 = tail call ptr @__ctype_b_loc() #43
  %83 = load ptr, ptr %82, align 8, !tbaa !19
  %84 = getelementptr inbounds ptr, ptr %1, i64 %118
  %85 = load ptr, ptr %84, align 8, !tbaa !19
  br label %89

86:                                               ; preds = %105
  %87 = add nuw nsw i64 %90, 1
  %88 = icmp eq i64 %87, %119
  br i1 %88, label %113, label %89, !llvm.loop !414

89:                                               ; preds = %86, %81
  %90 = phi i64 [ 0, %81 ], [ %87, %86 ]
  %91 = phi ptr [ %17, %81 ], [ %108, %86 ]
  br label %92

92:                                               ; preds = %92, %89
  %93 = phi ptr [ %104, %92 ], [ %91, %89 ]
  %94 = load i8, ptr %93, align 1, !tbaa !17
  %95 = sext i8 %94 to i64
  %96 = getelementptr inbounds i16, ptr %83, i64 %95
  %97 = load i16, ptr %96, align 2, !tbaa !390
  %98 = freeze i16 %97
  %99 = and i16 %98, 2048
  %100 = icmp ne i16 %99, 0
  %101 = add i8 %94, -45
  %102 = icmp ult i8 %101, 2
  %103 = or i1 %102, %100
  %104 = getelementptr inbounds i8, ptr %93, i64 1
  br i1 %103, label %105, label %92, !llvm.loop !415

105:                                              ; preds = %92
  %.lcssa2 = phi ptr [ %93, %92 ]
  %106 = tail call double @atof(ptr noundef nonnull %.lcssa2) #40
  %107 = getelementptr inbounds double, ptr %85, i64 %90
  store double %106, ptr %107, align 8, !tbaa !7
  %108 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %.lcssa2, i32 noundef 32) #40
  %109 = icmp eq ptr %108, null
  %110 = icmp ult i64 %90, %118
  %111 = and i1 %109, %110
  br i1 %111, label %112, label %86

112:                                              ; preds = %105
  tail call fastcc void @showaamtxexample() #39
  unreachable

113:                                              ; preds = %86
  %114 = add nuw nsw i64 %118, 1
  %115 = add nuw nsw i64 %119, 1
  %116 = icmp eq i64 %114, 20
  br i1 %116, label %120, label %117, !llvm.loop !413

117:                                              ; preds = %113, %67
  %.lcssa4 = phi i32 [ %.lcssa4, %113 ], [ %61, %67 ]
  %118 = phi i64 [ %114, %113 ], [ 0, %67 ]
  %119 = phi i64 [ %115, %113 ], [ 1, %67 ]
  br label %74

120:                                              ; preds = %113, %74
  %121 = getelementptr inbounds ptr, ptr %1, i64 20
  %122 = load ptr, ptr %121, align 8, !tbaa !19
  br label %123

123:                                              ; preds = %123, %120
  %124 = phi i64 [ 0, %120 ], [ %126, %123 ]
  %125 = getelementptr inbounds double, ptr %122, i64 %124
  store <2 x double> <double -1.000000e+00, double -1.000000e+00>, ptr %125, align 8, !tbaa !7
  %126 = add nuw i64 %124, 2
  %127 = icmp eq i64 %126, 20
  br i1 %127, label %128, label %123, !llvm.loop !416

128:                                              ; preds = %131, %123
  %129 = tail call i32 @feof(ptr noundef nonnull %10) #35
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %142

131:                                              ; preds = %128
  %132 = tail call ptr @fgets(ptr noundef %17, i32 noundef 999, ptr noundef nonnull %10) #39
  %133 = load i8, ptr %17, align 1, !tbaa !17
  %134 = icmp eq i8 %133, 102
  br i1 %134, label %135, label %128, !llvm.loop !417

135:                                              ; preds = %131
  %136 = tail call ptr @__ctype_b_loc() #43
  %137 = load ptr, ptr %136, align 8, !tbaa !19
  %138 = load ptr, ptr %121, align 8, !tbaa !19
  br label %143

139:                                              ; preds = %159
  %140 = add nuw nsw i64 %144, 1
  %141 = icmp eq i64 %140, 20
  br i1 %141, label %142, label %143, !llvm.loop !418

142:                                              ; preds = %139, %128
  br label %167

143:                                              ; preds = %139, %135
  %144 = phi i64 [ 0, %135 ], [ %140, %139 ]
  %145 = phi ptr [ %17, %135 ], [ %162, %139 ]
  br label %146

146:                                              ; preds = %146, %143
  %147 = phi ptr [ %158, %146 ], [ %145, %143 ]
  %148 = load i8, ptr %147, align 1, !tbaa !17
  %149 = sext i8 %148 to i64
  %150 = getelementptr inbounds i16, ptr %137, i64 %149
  %151 = load i16, ptr %150, align 2, !tbaa !390
  %152 = freeze i16 %151
  %153 = and i16 %152, 2048
  %154 = icmp ne i16 %153, 0
  %155 = add i8 %148, -45
  %156 = icmp ult i8 %155, 2
  %157 = or i1 %156, %154
  %158 = getelementptr inbounds i8, ptr %147, i64 1
  br i1 %157, label %159, label %146, !llvm.loop !419

159:                                              ; preds = %146
  %.lcssa1 = phi ptr [ %147, %146 ]
  %160 = tail call double @atof(ptr noundef nonnull %.lcssa1) #40
  %161 = getelementptr inbounds double, ptr %138, i64 %144
  store double %160, ptr %161, align 8, !tbaa !7
  %162 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %.lcssa1, i32 noundef 32) #40
  %163 = icmp eq ptr %162, null
  %164 = icmp ult i64 %144, 19
  %165 = and i1 %164, %163
  br i1 %165, label %166, label %139

166:                                              ; preds = %159
  tail call fastcc void @showaamtxexample() #39
  unreachable

167:                                              ; preds = %199, %142
  %168 = phi i64 [ %200, %199 ], [ 0, %142 ]
  %169 = phi i64 [ %201, %199 ], [ 1, %142 ]
  %170 = phi i64 [ %.lcssa, %199 ], [ 0, %142 ]
  %171 = getelementptr inbounds i32, ptr %3, i64 %168
  %172 = shl i64 %170, 32
  %173 = ashr exact i64 %172, 32
  %174 = load i32, ptr %171, align 4, !tbaa !31
  br label %177

175:                                              ; preds = %199
  %176 = load ptr, ptr %121, align 8, !tbaa !19
  br label %203

177:                                              ; preds = %186, %167
  %178 = phi i64 [ %173, %167 ], [ %195, %186 ]
  %179 = phi i64 [ 0, %167 ], [ %197, %186 ]
  %180 = icmp eq i64 %168, %179
  br i1 %180, label %186, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds i32, ptr %3, i64 %179
  %183 = load i32, ptr %182, align 4, !tbaa !31
  %184 = tail call i32 @llvm.smax.i32(i32 %174, i32 %183)
  %185 = tail call i32 @llvm.smin.i32(i32 %174, i32 %183)
  br label %186

186:                                              ; preds = %181, %177
  %187 = phi i32 [ %185, %181 ], [ %174, %177 ]
  %188 = phi i32 [ %184, %181 ], [ %174, %177 ]
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds ptr, ptr %1, i64 %189
  %191 = load ptr, ptr %190, align 8, !tbaa !19
  %192 = sext i32 %187 to i64
  %193 = getelementptr inbounds double, ptr %191, i64 %192
  %194 = load double, ptr %193, align 8, !tbaa !7
  %195 = add nsw i64 %178, 1
  %196 = getelementptr inbounds double, ptr %2, i64 %178
  store double %194, ptr %196, align 8, !tbaa !7
  %197 = add nuw nsw i64 %179, 1
  %198 = icmp eq i64 %197, %169
  br i1 %198, label %199, label %177, !llvm.loop !420

199:                                              ; preds = %186
  %.lcssa = phi i64 [ %195, %186 ]
  %200 = add nuw nsw i64 %168, 1
  %201 = add nuw nsw i64 %169, 1
  %202 = icmp eq i64 %200, 20
  br i1 %202, label %175, label %167, !llvm.loop !421

203:                                              ; preds = %203, %175
  %204 = phi i64 [ 0, %175 ], [ %212, %203 ]
  %205 = getelementptr inbounds i32, ptr %3, i64 %204
  %206 = load i32, ptr %205, align 4, !tbaa !31
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds double, ptr %176, i64 %207
  %209 = load double, ptr %208, align 8, !tbaa !7
  %210 = add nuw nsw i64 %204, 400
  %211 = getelementptr inbounds double, ptr %2, i64 %210
  store double %209, ptr %211, align 8, !tbaa !7
  %212 = add nuw nsw i64 %204, 1
  %213 = icmp eq i64 %212, 20
  br i1 %213, label %214, label %203, !llvm.loop !422

214:                                              ; preds = %203
  %215 = load ptr, ptr @stderr, align 8, !tbaa !19
  %216 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %215, ptr noundef nonnull @.str.91, ptr noundef nonnull %16) #36
  %217 = tail call i32 @fclose(ptr noundef nonnull %10) #39
  tail call void @free(ptr noundef %16) #35
  tail call void @free(ptr noundef %17) #35
  tail call void @FreeDoubleMtx(ptr noundef %1) #35
  tail call void @free(ptr noundef nonnull %3) #35
  ret ptr %2
}

; Function Attrs: nofree nounwind optsize
declare noundef ptr @fgets(ptr noundef, i32 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #13

; Function Attrs: noreturn nounwind optsize uwtable
define internal fastcc void @showaamtxexample() unnamed_addr #23 {
  %1 = load ptr, ptr @stderr, align 8, !tbaa !19
  %2 = tail call i64 @fwrite(ptr nonnull @.str.112, i64 26, i64 1, ptr %1) #38
  %3 = load ptr, ptr @stderr, align 8, !tbaa !19
  %4 = tail call i64 @fwrite(ptr nonnull @.str.113, i64 11, i64 1, ptr %3) #38
  %5 = load ptr, ptr @stderr, align 8, !tbaa !19
  %6 = tail call i64 @fwrite(ptr nonnull @.str.114, i64 10, i64 1, ptr %5) #38
  %7 = load ptr, ptr @stderr, align 8, !tbaa !19
  %8 = tail call i64 @fwrite(ptr nonnull @.str.115, i64 62, i64 1, ptr %7) #38
  %9 = load ptr, ptr @stderr, align 8, !tbaa !19
  %10 = tail call i64 @fwrite(ptr nonnull @.str.116, i64 62, i64 1, ptr %9) #38
  %11 = load ptr, ptr @stderr, align 8, !tbaa !19
  %12 = tail call i64 @fwrite(ptr nonnull @.str.117, i64 62, i64 1, ptr %11) #38
  %13 = load ptr, ptr @stderr, align 8, !tbaa !19
  %14 = tail call i64 @fwrite(ptr nonnull @.str.118, i64 4, i64 1, ptr %13) #38
  %15 = load ptr, ptr @stderr, align 8, !tbaa !19
  %16 = tail call i64 @fwrite(ptr nonnull @.str.119, i64 62, i64 1, ptr %15) #38
  %17 = load ptr, ptr @stderr, align 8, !tbaa !19
  %18 = tail call i64 @fwrite(ptr nonnull @.str.120, i64 39, i64 1, ptr %17) #38
  %19 = load ptr, ptr @stderr, align 8, !tbaa !19
  %20 = tail call i64 @fwrite(ptr nonnull @.str.121, i64 14, i64 1, ptr %19) #38
  %21 = load ptr, ptr @stderr, align 8, !tbaa !19
  %22 = tail call i64 @fwrite(ptr nonnull @.str.122, i64 30, i64 1, ptr %21) #38
  %23 = load ptr, ptr @stderr, align 8, !tbaa !19
  %24 = tail call i64 @fwrite(ptr nonnull @.str.123, i64 39, i64 1, ptr %23) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare double @atof(ptr nocapture noundef) local_unnamed_addr #30

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #7

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal void @readpairfoldalign(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, i32 noundef %5, i32 noundef %6, ptr nocapture noundef writeonly %7, ptr nocapture noundef writeonly %8, i32 noundef %9) #4 {
  %11 = alloca [1000 x i8], align 16
  %12 = alloca i8, align 1
  %13 = alloca i32, align 4
  %14 = alloca [100 x i8], align 16
  %15 = alloca [100 x i8], align 16
  %16 = alloca [1000 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1000, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %14) #34
  call void @llvm.lifetime.start.p0(i64 100, ptr nonnull %15) #34
  call void @llvm.lifetime.start.p0(i64 1000, ptr nonnull %16) #34
  store i32 -1, ptr %7, align 4, !tbaa !31
  store i32 -1, ptr %8, align 4, !tbaa !31
  %17 = add nsw i32 %9, 1
  %18 = tail call ptr @AllocateIntVec(i32 noundef %17) #35
  %19 = tail call ptr @AllocateIntVec(i32 noundef %17) #35
  br label %20

20:                                               ; preds = %23, %10
  %21 = call i32 @feof(ptr noundef %0) #35
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %20
  %24 = call ptr @fgets(ptr noundef nonnull %11, i32 noundef 999, ptr noundef %0) #39
  %25 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %11, ptr noundef nonnull dereferenceable(10) @.str.96, i64 10)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %20, !llvm.loop !423

27:                                               ; preds = %23, %20
  %28 = add nsw i32 %5, 1
  %29 = add nsw i32 %6, 1
  %30 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %16, ptr noundef nonnull dereferenceable(1) @.str.97, i32 noundef %28, i32 noundef %29) #35
  %31 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %11, ptr noundef nonnull dereferenceable(1) %16) #40
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = load ptr, ptr @stderr, align 8, !tbaa !19
  %35 = call i64 @fwrite(ptr nonnull @.str.98, i64 19, i64 1, ptr %34) #38
  %36 = load ptr, ptr @stderr, align 8, !tbaa !19
  %37 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.99, ptr noundef nonnull %16, ptr noundef nonnull %11) #36
  call void @exit(i32 noundef 1) #37
  unreachable

38:                                               ; preds = %41, %27
  %39 = call i32 @feof(ptr noundef %0) #35
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %38
  %42 = call ptr @fgets(ptr noundef nonnull %11, i32 noundef 999, ptr noundef %0) #39
  %43 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %11, ptr noundef nonnull dereferenceable(10) @.str.100, i64 10)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %38, !llvm.loop !424

45:                                               ; preds = %41, %38
  br label %46

46:                                               ; preds = %55, %45
  %47 = phi i32 [ %57, %55 ], [ 0, %45 ]
  %48 = call i32 @feof(ptr noundef %0) #35
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %51, %46
  %.lcssa3 = phi i32 [ %47, %51 ], [ %47, %46 ]
  br label %63

51:                                               ; preds = %46
  %52 = call ptr @fgets(ptr noundef nonnull %11, i32 noundef 999, ptr noundef %0) #39
  %53 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %11, ptr noundef nonnull dereferenceable(10) @.str.101, i64 10)
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %50, label %55

55:                                               ; preds = %51
  %56 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef nonnull %11, ptr noundef nonnull @.str.102, ptr noundef nonnull %12, ptr noundef nonnull %12, ptr noundef nonnull %14, ptr noundef nonnull %15, ptr noundef nonnull %13, ptr noundef nonnull %13) #35
  %57 = call i32 @atoi(ptr nocapture noundef nonnull %15) #40
  %58 = call i32 @atoi(ptr nocapture noundef nonnull %14) #40
  %59 = add nsw i32 %58, -1
  %60 = add nsw i32 %57, -1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, ptr %18, i64 %61
  store i32 %59, ptr %62, align 4, !tbaa !31
  br label %46, !llvm.loop !425

63:                                               ; preds = %66, %50
  %64 = call i32 @feof(ptr noundef %0) #35
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %63
  %67 = call ptr @fgets(ptr noundef nonnull %11, i32 noundef 999, ptr noundef %0) #39
  %68 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %11, ptr noundef nonnull dereferenceable(10) @.str.100, i64 10)
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %63, !llvm.loop !426

70:                                               ; preds = %66, %63
  br label %71

71:                                               ; preds = %79, %70
  %72 = phi i32 [ %82, %79 ], [ %.lcssa3, %70 ]
  %73 = call i32 @feof(ptr noundef %0) #35
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %89

75:                                               ; preds = %71
  %76 = call ptr @fgets(ptr noundef nonnull %11, i32 noundef 999, ptr noundef %0) #39
  %77 = call i32 @bcmp(ptr noundef nonnull dereferenceable(10) %11, ptr noundef nonnull dereferenceable(10) @.str.101, i64 10)
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %89, label %79

79:                                               ; preds = %75
  %80 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef nonnull %11, ptr noundef nonnull @.str.102, ptr noundef nonnull %12, ptr noundef nonnull %12, ptr noundef nonnull %14, ptr noundef nonnull %15, ptr noundef nonnull %13, ptr noundef nonnull %13) #35
  %81 = call double @atof(ptr noundef nonnull %15) #40
  %82 = fptosi double %81 to i32
  %83 = call double @atof(ptr noundef nonnull %14) #40
  %84 = fptosi double %83 to i32
  %85 = add nsw i32 %84, -1
  %86 = add nsw i32 %82, -1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, ptr %19, i64 %87
  store i32 %85, ptr %88, align 4, !tbaa !31
  br label %71, !llvm.loop !427

89:                                               ; preds = %75, %71
  %.lcssa2 = phi i32 [ %72, %75 ], [ %72, %71 ]
  %90 = icmp eq i32 %.lcssa3, %.lcssa2
  br i1 %90, label %91, label %96

91:                                               ; preds = %89
  %92 = icmp sgt i32 %.lcssa3, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %91
  store i8 0, ptr %3, align 1, !tbaa !17
  store i8 0, ptr %4, align 1, !tbaa !17
  store i32 0, ptr %7, align 4, !tbaa !31
  br label %136

94:                                               ; preds = %91
  %95 = zext i32 %.lcssa3 to i64
  br label %99

96:                                               ; preds = %89
  %97 = load ptr, ptr @stderr, align 8, !tbaa !19
  %98 = call i64 @fwrite(ptr nonnull @.str.103, i64 20, i64 1, ptr %97) #38
  call void @exit(i32 noundef 1) #37
  unreachable

99:                                               ; preds = %120, %94
  %100 = phi i64 [ 0, %94 ], [ %123, %120 ]
  %101 = phi ptr [ %4, %94 ], [ %122, %120 ]
  %102 = phi ptr [ %3, %94 ], [ %114, %120 ]
  %103 = getelementptr inbounds i32, ptr %18, i64 %100
  %104 = load i32, ptr %103, align 4, !tbaa !31
  %105 = getelementptr inbounds i32, ptr %19, i64 %100
  %106 = load i32, ptr %105, align 4, !tbaa !31
  %107 = icmp sgt i32 %104, -1
  br i1 %107, label %108, label %112

108:                                              ; preds = %99
  %109 = zext i32 %104 to i64
  %110 = getelementptr inbounds i8, ptr %1, i64 %109
  %111 = load i8, ptr %110, align 1, !tbaa !17
  br label %112

112:                                              ; preds = %108, %99
  %113 = phi i8 [ %111, %108 ], [ 45, %99 ]
  %114 = getelementptr inbounds i8, ptr %102, i64 1
  store i8 %113, ptr %102, align 1, !tbaa !17
  %115 = icmp sgt i32 %106, -1
  br i1 %115, label %116, label %120

116:                                              ; preds = %112
  %117 = zext i32 %106 to i64
  %118 = getelementptr inbounds i8, ptr %2, i64 %117
  %119 = load i8, ptr %118, align 1, !tbaa !17
  br label %120

120:                                              ; preds = %116, %112
  %121 = phi i8 [ %119, %116 ], [ 45, %112 ]
  %122 = getelementptr inbounds i8, ptr %101, i64 1
  store i8 %121, ptr %101, align 1, !tbaa !17
  %123 = add nuw nsw i64 %100, 1
  %124 = icmp eq i64 %123, %95
  br i1 %124, label %125, label %99, !llvm.loop !428

125:                                              ; preds = %120
  %.lcssa1 = phi ptr [ %122, %120 ]
  %.lcssa = phi ptr [ %114, %120 ]
  store i8 0, ptr %.lcssa, align 1, !tbaa !17
  store i8 0, ptr %.lcssa1, align 1, !tbaa !17
  store i32 0, ptr %7, align 4, !tbaa !31
  br i1 %92, label %126, label %136

126:                                              ; preds = %125
  %127 = zext i32 %.lcssa3 to i64
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi i64 [ 0, %126 ], [ %133, %128 ]
  %130 = getelementptr inbounds i32, ptr %18, i64 %129
  %131 = load i32, ptr %130, align 4, !tbaa !31
  store i32 %131, ptr %7, align 4, !tbaa !31
  %132 = icmp sgt i32 %131, -1
  %133 = add nuw nsw i64 %129, 1
  %134 = icmp eq i64 %133, %127
  %135 = select i1 %132, i1 true, i1 %134
  br i1 %135, label %137, label %128, !llvm.loop !429

136:                                              ; preds = %125, %93
  store i32 0, ptr %8, align 4, !tbaa !31
  br label %148

137:                                              ; preds = %128
  store i32 0, ptr %8, align 4, !tbaa !31
  br i1 %92, label %138, label %148

138:                                              ; preds = %137
  %139 = zext i32 %.lcssa3 to i64
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i64 [ 0, %138 ], [ %145, %140 ]
  %142 = getelementptr inbounds i32, ptr %19, i64 %141
  %143 = load i32, ptr %142, align 4, !tbaa !31
  store i32 %143, ptr %8, align 4, !tbaa !31
  %144 = icmp sgt i32 %143, -1
  %145 = add nuw nsw i64 %141, 1
  %146 = icmp eq i64 %145, %139
  %147 = select i1 %144, i1 true, i1 %146
  br i1 %147, label %148, label %140, !llvm.loop !430

148:                                              ; preds = %140, %137, %136
  call void @free(ptr noundef %18) #35
  call void @free(ptr noundef %19) #35
  call void @llvm.lifetime.end.p0(i64 1000, ptr nonnull %16) #34
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %15) #34
  call void @llvm.lifetime.end.p0(i64 100, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 1000, ptr nonnull %11) #34
  ret void
}

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #31

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #13

; Function Attrs: nofree nounwind optsize
declare noundef i32 @__isoc99_sscanf(ptr nocapture noundef readonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @atoi(ptr nocapture noundef) local_unnamed_addr #30

; Function Attrs: nounwind optsize uwtable
define internal float @L__align11(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) #4 {
  %6 = load i32, ptr @offset, align 4, !tbaa !31
  %7 = sub nsw i32 0, %6
  %8 = sitofp i32 %7 to float
  %9 = load i32, ptr @penalty, align 4, !tbaa !31
  %10 = sitofp i32 %9 to float
  %11 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %12 = sitofp i32 %11 to float
  %13 = load i32, ptr @L__align11.orlgth1, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = load i32, ptr @njob, align 4, !tbaa !31
  %17 = tail call ptr @AllocateCharMtx(i32 noundef %16, i32 noundef 0) #35
  store ptr %17, ptr @L__align11.mseq1, align 8, !tbaa !19
  %18 = load i32, ptr @njob, align 4, !tbaa !31
  %19 = tail call ptr @AllocateCharMtx(i32 noundef %18, i32 noundef 0) #35
  store ptr %19, ptr @L__align11.mseq2, align 8, !tbaa !19
  %20 = load i32, ptr @L__align11.orlgth1, align 4
  br label %21

21:                                               ; preds = %15, %5
  %22 = phi i32 [ %20, %15 ], [ %13, %5 ]
  %23 = load ptr, ptr %0, align 8, !tbaa !19
  %24 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %23) #40
  %25 = trunc i64 %24 to i32
  %26 = load ptr, ptr %1, align 8, !tbaa !19
  %27 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %26) #40
  %28 = trunc i64 %27 to i32
  %29 = icmp slt i32 %22, %25
  %30 = load i32, ptr @L__align11.orlgth2, align 4
  %31 = icmp slt i32 %30, %28
  %32 = select i1 %29, i1 true, i1 %31
  br i1 %32, label %35, label %33

33:                                               ; preds = %21
  %34 = load ptr, ptr @L__align11.mseq, align 8, !tbaa !19
  br label %74

35:                                               ; preds = %21
  %36 = icmp sgt i32 %22, 0
  %37 = icmp sgt i32 %30, 0
  %38 = select i1 %36, i1 %37, i1 false
  br i1 %38, label %39, label %50

39:                                               ; preds = %35
  %40 = load ptr, ptr @L__align11.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %40) #35
  %41 = load ptr, ptr @L__align11.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @L__align11.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @L__align11.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @L__align11.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @L__align11.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %45) #35
  %46 = load ptr, ptr @L__align11.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %46) #35
  %47 = load ptr, ptr @L__align11.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %47) #35
  %48 = load i32, ptr @L__align11.orlgth1, align 4, !tbaa !31
  %49 = load i32, ptr @L__align11.orlgth2, align 4, !tbaa !31
  br label %50

50:                                               ; preds = %39, %35
  %51 = phi i32 [ %49, %39 ], [ %30, %35 ]
  %52 = phi i32 [ %48, %39 ], [ %22, %35 ]
  %53 = sitofp i32 %25 to double
  %54 = fmul double %53, 1.300000e+00
  %55 = fptosi double %54 to i32
  %56 = tail call i32 @llvm.smax.i32(i32 %52, i32 %55)
  %57 = sitofp i32 %28 to double
  %58 = fmul double %57, 1.300000e+00
  %59 = fptosi double %58 to i32
  %60 = tail call i32 @llvm.smax.i32(i32 %51, i32 %59)
  %61 = add nuw nsw i32 %60, 102
  %62 = tail call ptr @AllocateFloatVec(i32 noundef %61) #35
  store ptr %62, ptr @L__align11.w1, align 8, !tbaa !19
  %63 = tail call ptr @AllocateFloatVec(i32 noundef %61) #35
  store ptr %63, ptr @L__align11.w2, align 8, !tbaa !19
  %64 = tail call ptr @AllocateFloatVec(i32 noundef %61) #35
  store ptr %64, ptr @L__align11.match, align 8, !tbaa !19
  %65 = add nuw nsw i32 %56, 102
  %66 = tail call ptr @AllocateFloatVec(i32 noundef %65) #35
  store ptr %66, ptr @L__align11.initverticalw, align 8, !tbaa !19
  %67 = tail call ptr @AllocateFloatVec(i32 noundef %65) #35
  store ptr %67, ptr @L__align11.lastverticalw, align 8, !tbaa !19
  %68 = tail call ptr @AllocateFloatVec(i32 noundef %61) #35
  store ptr %68, ptr @L__align11.m, align 8, !tbaa !19
  %69 = tail call ptr @AllocateIntVec(i32 noundef %61) #35
  store ptr %69, ptr @L__align11.mp, align 8, !tbaa !19
  %70 = load i32, ptr @njob, align 4, !tbaa !31
  %71 = add i32 %56, 200
  %72 = add i32 %71, %60
  %73 = tail call ptr @AllocateCharMtx(i32 noundef %70, i32 noundef %72) #35
  store ptr %73, ptr @L__align11.mseq, align 8, !tbaa !19
  store i32 %56, ptr @L__align11.orlgth1, align 4, !tbaa !31
  store i32 %60, ptr @L__align11.orlgth2, align 4, !tbaa !31
  br label %74

74:                                               ; preds = %50, %33
  %75 = phi i32 [ %30, %33 ], [ %60, %50 ]
  %76 = phi i32 [ %22, %33 ], [ %56, %50 ]
  %77 = phi ptr [ %34, %33 ], [ %73, %50 ]
  %78 = load ptr, ptr %77, align 8, !tbaa !19
  %79 = load ptr, ptr @L__align11.mseq1, align 8, !tbaa !19
  store ptr %78, ptr %79, align 8, !tbaa !19
  %80 = getelementptr inbounds ptr, ptr %77, i64 1
  %81 = load ptr, ptr %80, align 8, !tbaa !19
  %82 = load ptr, ptr @L__align11.mseq2, align 8, !tbaa !19
  store ptr %81, ptr %82, align 8, !tbaa !19
  %83 = load i32, ptr @commonAlloc1, align 4
  %84 = icmp sgt i32 %76, %83
  %85 = load i32, ptr @commonAlloc2, align 4
  %86 = icmp sgt i32 %75, %85
  %87 = select i1 %84, i1 true, i1 %86
  br i1 %87, label %90, label %88

88:                                               ; preds = %74
  %89 = load ptr, ptr @commonIP, align 8, !tbaa !19
  br label %110

90:                                               ; preds = %74
  %91 = icmp ne i32 %83, 0
  %92 = icmp ne i32 %85, 0
  %93 = select i1 %91, i1 %92, i1 false
  br i1 %93, label %94, label %100

94:                                               ; preds = %90
  %95 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %95) #35
  %96 = load i32, ptr @L__align11.orlgth1, align 4
  %97 = load i32, ptr @commonAlloc1, align 4
  %98 = load i32, ptr @L__align11.orlgth2, align 4
  %99 = load i32, ptr @commonAlloc2, align 4
  br label %100

100:                                              ; preds = %94, %90
  %101 = phi i32 [ %99, %94 ], [ %85, %90 ]
  %102 = phi i32 [ %98, %94 ], [ %75, %90 ]
  %103 = phi i32 [ %97, %94 ], [ %83, %90 ]
  %104 = phi i32 [ %96, %94 ], [ %76, %90 ]
  %105 = tail call i32 @llvm.smax.i32(i32 %104, i32 %103)
  %106 = tail call i32 @llvm.smax.i32(i32 %102, i32 %101)
  %107 = add nsw i32 %105, 10
  %108 = add nsw i32 %106, 10
  %109 = tail call ptr @AllocateIntMtx(i32 noundef %107, i32 noundef %108) #35
  store ptr %109, ptr @commonIP, align 8, !tbaa !19
  store i32 %105, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %106, ptr @commonAlloc2, align 4, !tbaa !31
  br label %110

110:                                              ; preds = %100, %88
  %111 = phi ptr [ %89, %88 ], [ %109, %100 ]
  store ptr %111, ptr @L__align11.ijp, align 8, !tbaa !19
  %112 = load ptr, ptr @L__align11.w1, align 8, !tbaa !19
  %113 = load ptr, ptr @L__align11.w2, align 8, !tbaa !19
  %114 = load ptr, ptr @L__align11.initverticalw, align 8, !tbaa !19
  %115 = load ptr, ptr %1, align 8, !tbaa !19
  %116 = load i8, ptr %115, align 1, !tbaa !17
  %117 = sext i8 %116 to i64
  %118 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %117
  %119 = icmp eq i32 %25, 0
  %120 = load ptr, ptr %0, align 8, !tbaa !19
  br i1 %119, label %134, label %121

121:                                              ; preds = %121, %110
  %122 = phi ptr [ %132, %121 ], [ %114, %110 ]
  %123 = phi ptr [ %126, %121 ], [ %120, %110 ]
  %124 = phi i32 [ %125, %121 ], [ %25, %110 ]
  %125 = add nsw i32 %124, -1
  %126 = getelementptr inbounds i8, ptr %123, i64 1
  %127 = load i8, ptr %123, align 1, !tbaa !17
  %128 = sext i8 %127 to i64
  %129 = getelementptr inbounds i32, ptr %118, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !31
  %131 = sitofp i32 %130 to float
  %132 = getelementptr inbounds float, ptr %122, i64 1
  store float %131, ptr %122, align 4, !tbaa !167
  %133 = icmp eq i32 %125, 0
  br i1 %133, label %134, label %121, !llvm.loop !431

134:                                              ; preds = %121, %110
  %135 = load i8, ptr %120, align 1, !tbaa !17
  %136 = sext i8 %135 to i64
  %137 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %136
  %138 = icmp eq i32 %28, 0
  br i1 %138, label %168, label %139

139:                                              ; preds = %139, %134
  %140 = phi ptr [ %150, %139 ], [ %112, %134 ]
  %141 = phi ptr [ %144, %139 ], [ %115, %134 ]
  %142 = phi i32 [ %143, %139 ], [ %28, %134 ]
  %143 = add nsw i32 %142, -1
  %144 = getelementptr inbounds i8, ptr %141, i64 1
  %145 = load i8, ptr %141, align 1, !tbaa !17
  %146 = sext i8 %145 to i64
  %147 = getelementptr inbounds i32, ptr %137, i64 %146
  %148 = load i32, ptr %147, align 4, !tbaa !31
  %149 = sitofp i32 %148 to float
  %150 = getelementptr inbounds float, ptr %140, i64 1
  store float %149, ptr %140, align 4, !tbaa !167
  %151 = icmp eq i32 %143, 0
  br i1 %151, label %152, label %139, !llvm.loop !431

152:                                              ; preds = %139
  %153 = icmp slt i32 %28, 1
  br i1 %153, label %168, label %154

154:                                              ; preds = %152
  %155 = load ptr, ptr @L__align11.m, align 8, !tbaa !19
  %156 = load ptr, ptr @L__align11.mp, align 8, !tbaa !19
  %157 = add i64 %27, 1
  %158 = and i64 %157, 4294967295
  br label %159

159:                                              ; preds = %159, %154
  %160 = phi i64 [ 1, %154 ], [ %166, %159 ]
  %161 = add nsw i64 %160, -1
  %162 = getelementptr inbounds float, ptr %112, i64 %161
  %163 = load float, ptr %162, align 4, !tbaa !167
  %164 = getelementptr inbounds float, ptr %155, i64 %160
  store float %163, ptr %164, align 4, !tbaa !167
  %165 = getelementptr inbounds i32, ptr %156, i64 %160
  store i32 0, ptr %165, align 4, !tbaa !31
  %166 = add nuw nsw i64 %160, 1
  %167 = icmp eq i64 %166, %158
  br i1 %167, label %168, label %159, !llvm.loop !432

168:                                              ; preds = %159, %152, %134
  %169 = phi i1 [ true, %152 ], [ true, %134 ], [ %153, %159 ]
  %170 = shl i64 %27, 32
  %171 = add i64 %170, -4294967296
  %172 = ashr exact i64 %171, 32
  %173 = getelementptr inbounds float, ptr %112, i64 %172
  %174 = load float, ptr %173, align 4, !tbaa !167
  %175 = load ptr, ptr @L__align11.lastverticalw, align 8, !tbaa !19
  store float %174, ptr %175, align 4, !tbaa !167
  %176 = add i32 %25, 1
  %177 = add i32 %176, %28
  %178 = icmp slt i32 %25, 1
  br i1 %178, label %282, label %179

179:                                              ; preds = %168
  %180 = load ptr, ptr @L__align11.m, align 8, !tbaa !19
  %181 = load ptr, ptr @L__align11.mp, align 8, !tbaa !19
  %182 = zext i32 %176 to i64
  br label %183

183:                                              ; preds = %273, %179
  %184 = phi i64 [ 1, %179 ], [ %280, %273 ]
  %185 = phi ptr [ %112, %179 ], [ %186, %273 ]
  %186 = phi ptr [ %113, %179 ], [ %185, %273 ]
  %187 = phi i32 [ 0, %179 ], [ %276, %273 ]
  %188 = phi i32 [ 0, %179 ], [ %275, %273 ]
  %189 = phi float [ -1.000000e+09, %179 ], [ %274, %273 ]
  %190 = add nsw i64 %184, -1
  %191 = getelementptr inbounds float, ptr %114, i64 %190
  %192 = load float, ptr %191, align 4, !tbaa !167
  store float %192, ptr %185, align 4, !tbaa !167
  %193 = getelementptr inbounds i8, ptr %120, i64 %184
  %194 = load i8, ptr %193, align 1, !tbaa !17
  %195 = sext i8 %194 to i64
  %196 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %195
  br i1 %138, label %210, label %197

197:                                              ; preds = %197, %183
  %198 = phi ptr [ %208, %197 ], [ %186, %183 ]
  %199 = phi ptr [ %202, %197 ], [ %115, %183 ]
  %200 = phi i32 [ %201, %197 ], [ %28, %183 ]
  %201 = add nsw i32 %200, -1
  %202 = getelementptr inbounds i8, ptr %199, i64 1
  %203 = load i8, ptr %199, align 1, !tbaa !17
  %204 = sext i8 %203 to i64
  %205 = getelementptr inbounds i32, ptr %196, i64 %204
  %206 = load i32, ptr %205, align 4, !tbaa !31
  %207 = sitofp i32 %206 to float
  %208 = getelementptr inbounds float, ptr %198, i64 1
  store float %207, ptr %198, align 4, !tbaa !167
  %209 = icmp eq i32 %201, 0
  br i1 %209, label %210, label %197, !llvm.loop !431

210:                                              ; preds = %197, %183
  %211 = getelementptr inbounds float, ptr %114, i64 %184
  %212 = load float, ptr %211, align 4, !tbaa !167
  store float %212, ptr %186, align 4, !tbaa !167
  br i1 %169, label %273, label %213

213:                                              ; preds = %210
  %214 = load float, ptr %185, align 4, !tbaa !167
  %215 = getelementptr inbounds ptr, ptr %111, i64 %184
  %216 = load ptr, ptr %215, align 8, !tbaa !19
  %217 = trunc i64 %184 to i32
  %218 = trunc i64 %190 to i32
  %219 = trunc i64 %184 to i32
  br label %220

220:                                              ; preds = %266, %213
  %221 = phi ptr [ %235, %266 ], [ %186, %213 ]
  %222 = phi ptr [ %234, %266 ], [ %216, %213 ]
  %223 = phi ptr [ %233, %266 ], [ %180, %213 ]
  %224 = phi ptr [ %232, %266 ], [ %181, %213 ]
  %225 = phi i32 [ %271, %266 ], [ 1, %213 ]
  %226 = phi i32 [ %263, %266 ], [ %187, %213 ]
  %227 = phi i32 [ %262, %266 ], [ %188, %213 ]
  %228 = phi float [ %261, %266 ], [ %189, %213 ]
  %229 = phi ptr [ %270, %266 ], [ %185, %213 ]
  %230 = phi float [ %246, %266 ], [ %214, %213 ]
  %231 = phi i32 [ %244, %266 ], [ 0, %213 ]
  %232 = getelementptr inbounds i32, ptr %224, i64 1
  %233 = getelementptr inbounds float, ptr %223, i64 1
  %234 = getelementptr inbounds i32, ptr %222, i64 1
  %235 = getelementptr inbounds float, ptr %221, i64 1
  %236 = load float, ptr %229, align 4, !tbaa !167
  %237 = fadd float %230, %10
  %238 = fcmp ogt float %237, %236
  %239 = sub i32 %231, %225
  %240 = select i1 %238, i32 %239, i32 0
  %241 = select i1 %238, float %237, float %236
  store i32 %240, ptr %234, align 4, !tbaa !31
  %242 = fcmp ogt float %236, %230
  %243 = add nsw i32 %225, -1
  %244 = select i1 %242, i32 %243, i32 %231
  %245 = select i1 %242, float %236, float %230
  %246 = fadd float %245, %12
  %247 = load float, ptr %233, align 4, !tbaa !167
  %248 = fadd float %247, %10
  %249 = fcmp ogt float %248, %241
  br i1 %249, label %250, label %253

250:                                              ; preds = %220
  %251 = load i32, ptr %232, align 4, !tbaa !31
  %252 = sub nsw i32 %217, %251
  store i32 %252, ptr %234, align 4, !tbaa !31
  br label %253

253:                                              ; preds = %250, %220
  %254 = phi float [ %248, %250 ], [ %241, %220 ]
  %255 = fcmp ogt float %236, %247
  br i1 %255, label %256, label %257

256:                                              ; preds = %253
  store i32 %218, ptr %232, align 4, !tbaa !31
  br label %257

257:                                              ; preds = %256, %253
  %258 = phi float [ %236, %256 ], [ %247, %253 ]
  %259 = fadd float %258, %12
  store float %259, ptr %233, align 4, !tbaa !167
  %260 = fcmp olt float %228, %254
  %261 = select i1 %260, float %254, float %228
  %262 = select i1 %260, i32 %219, i32 %227
  %263 = select i1 %260, i32 %225, i32 %226
  %264 = fcmp olt float %254, %8
  br i1 %264, label %265, label %266

265:                                              ; preds = %257
  store i32 %177, ptr %234, align 4, !tbaa !31
  br label %266

266:                                              ; preds = %265, %257
  %267 = phi float [ %8, %265 ], [ %254, %257 ]
  %268 = load float, ptr %235, align 4, !tbaa !167
  %269 = fadd float %267, %268
  store float %269, ptr %235, align 4, !tbaa !167
  %270 = getelementptr inbounds float, ptr %229, i64 1
  %271 = add nuw i32 %225, 1
  %272 = icmp eq i32 %225, %28
  br i1 %272, label %273, label %220, !llvm.loop !433

273:                                              ; preds = %266, %210
  %274 = phi float [ %189, %210 ], [ %261, %266 ]
  %275 = phi i32 [ %188, %210 ], [ %262, %266 ]
  %276 = phi i32 [ %187, %210 ], [ %263, %266 ]
  %277 = getelementptr inbounds float, ptr %186, i64 %172
  %278 = load float, ptr %277, align 4, !tbaa !167
  %279 = getelementptr inbounds float, ptr %175, i64 %184
  store float %278, ptr %279, align 4, !tbaa !167
  %280 = add nuw nsw i64 %184, 1
  %281 = icmp eq i64 %280, %182
  br i1 %281, label %282, label %183, !llvm.loop !434

282:                                              ; preds = %273, %168
  %283 = phi float [ -1.000000e+09, %168 ], [ %274, %273 ]
  %284 = phi i32 [ 0, %168 ], [ %275, %273 ]
  %285 = phi i32 [ 0, %168 ], [ %276, %273 ]
  %286 = sext i32 %284 to i64
  %287 = getelementptr inbounds ptr, ptr %111, i64 %286
  %288 = load ptr, ptr %287, align 8, !tbaa !19
  %289 = sext i32 %285 to i64
  %290 = getelementptr inbounds i32, ptr %288, i64 %289
  %291 = load i32, ptr %290, align 4, !tbaa !31
  %292 = icmp eq i32 %291, %177
  br i1 %292, label %293, label %295

293:                                              ; preds = %282
  store i8 0, ptr %120, align 1
  %294 = load ptr, ptr %1, align 8, !tbaa !19
  store i8 0, ptr %294, align 1
  store i32 0, ptr %4, align 4, !tbaa !31
  store i32 0, ptr %3, align 4, !tbaa !31
  br label %480

295:                                              ; preds = %282
  %296 = load ptr, ptr @L__align11.mseq1, align 8, !tbaa !19
  %297 = load ptr, ptr @L__align11.mseq2, align 8, !tbaa !19
  %298 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %120) #40
  %299 = trunc i64 %298 to i32
  %300 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %115) #40
  %301 = trunc i64 %300 to i32
  %302 = icmp slt i32 %299, 0
  br i1 %302, label %306, label %303

303:                                              ; preds = %295
  %304 = add i64 %298, 1
  %305 = and i64 %304, 4294967295
  br label %343

306:                                              ; preds = %343, %295
  %307 = icmp slt i32 %301, 0
  br i1 %307, label %349, label %308

308:                                              ; preds = %306
  %309 = load ptr, ptr %111, align 8, !tbaa !19
  %310 = add i64 %300, 1
  %311 = and i64 %310, 4294967295
  %312 = add nuw nsw i64 %311, 3
  %313 = and i64 %312, 8589934588
  %314 = add nsw i64 %311, -1
  %315 = insertelement <4 x i64> poison, i64 %314, i64 0
  %316 = shufflevector <4 x i64> %315, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %317

317:                                              ; preds = %339, %308
  %318 = phi i64 [ 0, %308 ], [ %340, %339 ]
  %319 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %308 ], [ %341, %339 ]
  %320 = icmp ule <4 x i64> %319, %316
  %321 = extractelement <4 x i1> %320, i64 0
  br i1 %321, label %322, label %324

322:                                              ; preds = %317
  %323 = getelementptr inbounds i32, ptr %309, i64 %318
  store i32 %177, ptr %323, align 4, !tbaa !31
  br label %324

324:                                              ; preds = %322, %317
  %325 = extractelement <4 x i1> %320, i64 1
  br i1 %325, label %326, label %329

326:                                              ; preds = %324
  %327 = or i64 %318, 1
  %328 = getelementptr inbounds i32, ptr %309, i64 %327
  store i32 %177, ptr %328, align 4, !tbaa !31
  br label %329

329:                                              ; preds = %326, %324
  %330 = extractelement <4 x i1> %320, i64 2
  br i1 %330, label %331, label %334

331:                                              ; preds = %329
  %332 = or i64 %318, 2
  %333 = getelementptr inbounds i32, ptr %309, i64 %332
  store i32 %177, ptr %333, align 4, !tbaa !31
  br label %334

334:                                              ; preds = %331, %329
  %335 = extractelement <4 x i1> %320, i64 3
  br i1 %335, label %336, label %339

336:                                              ; preds = %334
  %337 = or i64 %318, 3
  %338 = getelementptr inbounds i32, ptr %309, i64 %337
  store i32 %177, ptr %338, align 4, !tbaa !31
  br label %339

339:                                              ; preds = %336, %334
  %340 = add i64 %318, 4
  %341 = add <4 x i64> %319, <i64 4, i64 4, i64 4, i64 4>
  %342 = icmp eq i64 %340, %313
  br i1 %342, label %349, label %317, !llvm.loop !435

343:                                              ; preds = %343, %303
  %344 = phi i64 [ 0, %303 ], [ %347, %343 ]
  %345 = getelementptr inbounds ptr, ptr %111, i64 %344
  %346 = load ptr, ptr %345, align 8, !tbaa !19
  store i32 %177, ptr %346, align 4, !tbaa !31
  %347 = add nuw nsw i64 %344, 1
  %348 = icmp eq i64 %347, %305
  br i1 %348, label %306, label %343, !llvm.loop !436

349:                                              ; preds = %339, %306
  %350 = add nsw i32 %301, %299
  %351 = load ptr, ptr %296, align 8, !tbaa !19
  %352 = sext i32 %350 to i64
  %353 = getelementptr inbounds i8, ptr %351, i64 %352
  store ptr %353, ptr %296, align 8, !tbaa !19
  store i8 0, ptr %353, align 1, !tbaa !17
  %354 = load ptr, ptr %297, align 8, !tbaa !19
  %355 = getelementptr inbounds i8, ptr %354, i64 %352
  store ptr %355, ptr %297, align 8, !tbaa !19
  store i8 0, ptr %355, align 1, !tbaa !17
  %356 = icmp slt i32 %350, 0
  br i1 %356, label %357, label %358

357:                                              ; preds = %349
  store i32 0, ptr %3, align 4, !tbaa !31
  br label %458

358:                                              ; preds = %349
  %359 = load ptr, ptr %287, align 8, !tbaa !19
  %360 = getelementptr inbounds i32, ptr %359, i64 %289
  %361 = load i32, ptr %360, align 4, !tbaa !31
  br label %362

362:                                              ; preds = %432, %358
  %363 = phi i32 [ %361, %358 ], [ %448, %432 ]
  %364 = phi i32 [ 0, %358 ], [ %450, %432 ]
  %365 = phi i32 [ %284, %358 ], [ %380, %432 ]
  %366 = phi i32 [ %285, %358 ], [ %381, %432 ]
  %367 = icmp slt i32 %363, 0
  br i1 %367, label %368, label %370

368:                                              ; preds = %362
  %369 = add nsw i32 %365, -1
  br label %376

370:                                              ; preds = %362
  %371 = icmp eq i32 %363, 0
  br i1 %371, label %374, label %372

372:                                              ; preds = %370
  %373 = sub nsw i32 %365, %363
  br label %376

374:                                              ; preds = %370
  %375 = add nsw i32 %365, -1
  br label %376

376:                                              ; preds = %374, %372, %368
  %377 = phi i32 [ %369, %368 ], [ %373, %372 ], [ %375, %374 ]
  %378 = phi i32 [ %363, %368 ], [ -1, %372 ], [ -1, %374 ]
  %379 = freeze i32 %378
  %380 = freeze i32 %377
  %381 = add i32 %379, %366
  %382 = xor i32 %380, -1
  %383 = add i32 %365, %382
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %405, label %385

385:                                              ; preds = %376
  %386 = sext i32 %383 to i64
  %387 = sext i32 %380 to i64
  %388 = add i32 %365, -1
  br label %389

389:                                              ; preds = %389, %385
  %390 = phi i64 [ %386, %385 ], [ %399, %389 ]
  %391 = load ptr, ptr %0, align 8, !tbaa !19
  %392 = add nsw i64 %390, %387
  %393 = getelementptr inbounds i8, ptr %391, i64 %392
  %394 = load i8, ptr %393, align 1, !tbaa !17
  %395 = load ptr, ptr %296, align 8, !tbaa !19
  %396 = getelementptr inbounds i8, ptr %395, i64 -1
  store ptr %396, ptr %296, align 8, !tbaa !19
  store i8 %394, ptr %396, align 1, !tbaa !17
  %397 = load ptr, ptr %297, align 8, !tbaa !19
  %398 = getelementptr inbounds i8, ptr %397, i64 -1
  store ptr %398, ptr %297, align 8, !tbaa !19
  store i8 45, ptr %398, align 1, !tbaa !17
  %399 = add nsw i64 %390, -1
  %400 = and i64 %399, 4294967295
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %402, label %389, !llvm.loop !437

402:                                              ; preds = %389
  %403 = add i32 %388, %364
  %404 = sub i32 %403, %380
  br label %405

405:                                              ; preds = %402, %376
  %406 = phi i32 [ %364, %376 ], [ %404, %402 ]
  %407 = icmp eq i32 %379, -1
  br i1 %407, label %427, label %408

408:                                              ; preds = %405
  %409 = xor i32 %379, -1
  %410 = sext i32 %409 to i64
  %411 = sext i32 %381 to i64
  br label %412

412:                                              ; preds = %412, %408
  %413 = phi i64 [ %410, %408 ], [ %424, %412 ]
  %414 = phi i32 [ %406, %408 ], [ %423, %412 ]
  %415 = load ptr, ptr %296, align 8, !tbaa !19
  %416 = getelementptr inbounds i8, ptr %415, i64 -1
  store ptr %416, ptr %296, align 8, !tbaa !19
  store i8 45, ptr %416, align 1, !tbaa !17
  %417 = load ptr, ptr %1, align 8, !tbaa !19
  %418 = add nsw i64 %413, %411
  %419 = getelementptr inbounds i8, ptr %417, i64 %418
  %420 = load i8, ptr %419, align 1, !tbaa !17
  %421 = load ptr, ptr %297, align 8, !tbaa !19
  %422 = getelementptr inbounds i8, ptr %421, i64 -1
  store ptr %422, ptr %297, align 8, !tbaa !19
  store i8 %420, ptr %422, align 1, !tbaa !17
  %423 = add nsw i32 %414, 1
  %424 = add nsw i64 %413, -1
  %425 = and i64 %424, 4294967295
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %427, label %412, !llvm.loop !438

427:                                              ; preds = %412, %405
  %428 = phi i32 [ %406, %405 ], [ %423, %412 ]
  %429 = icmp slt i32 %365, 1
  %430 = icmp slt i32 %366, 1
  %431 = or i1 %429, %430
  br i1 %431, label %453, label %432

432:                                              ; preds = %427
  %433 = load ptr, ptr %0, align 8, !tbaa !19
  %434 = sext i32 %380 to i64
  %435 = getelementptr inbounds i8, ptr %433, i64 %434
  %436 = load i8, ptr %435, align 1, !tbaa !17
  %437 = load ptr, ptr %296, align 8, !tbaa !19
  %438 = getelementptr inbounds i8, ptr %437, i64 -1
  store ptr %438, ptr %296, align 8, !tbaa !19
  store i8 %436, ptr %438, align 1, !tbaa !17
  %439 = load ptr, ptr %1, align 8, !tbaa !19
  %440 = sext i32 %381 to i64
  %441 = getelementptr inbounds i8, ptr %439, i64 %440
  %442 = load i8, ptr %441, align 1, !tbaa !17
  %443 = load ptr, ptr %297, align 8, !tbaa !19
  %444 = getelementptr inbounds i8, ptr %443, i64 -1
  store ptr %444, ptr %297, align 8, !tbaa !19
  store i8 %442, ptr %444, align 1, !tbaa !17
  %445 = getelementptr inbounds ptr, ptr %111, i64 %434
  %446 = load ptr, ptr %445, align 8, !tbaa !19
  %447 = getelementptr inbounds i32, ptr %446, i64 %440
  %448 = load i32, ptr %447, align 4, !tbaa !31
  %449 = icmp eq i32 %448, %177
  %450 = add nsw i32 %428, 2
  %451 = icmp sgt i32 %450, %350
  %452 = select i1 %449, i1 true, i1 %451
  br i1 %452, label %453, label %362, !llvm.loop !439

453:                                              ; preds = %432, %427
  %.lcssa1 = phi i32 [ %380, %432 ], [ %380, %427 ]
  %.lcssa = phi i32 [ %381, %432 ], [ %381, %427 ]
  %454 = icmp eq i32 %.lcssa1, -1
  %455 = select i1 %454, i32 0, i32 %.lcssa1
  store i32 %455, ptr %3, align 4, !tbaa !31
  %456 = icmp eq i32 %.lcssa, -1
  %457 = select i1 %456, i32 0, i32 %.lcssa
  br label %458

458:                                              ; preds = %453, %357
  %459 = phi i32 [ 0, %357 ], [ %457, %453 ]
  store i32 %459, ptr %4, align 4, !tbaa !31
  %460 = load ptr, ptr %296, align 8, !tbaa !19
  %461 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %460) #40
  %462 = trunc i64 %461 to i32
  %463 = icmp sgt i32 %462, %2
  %464 = icmp sgt i32 %462, 5000000
  %465 = or i1 %463, %464
  br i1 %465, label %466, label %472

466:                                              ; preds = %458
  %467 = load ptr, ptr @stderr, align 8, !tbaa !19
  %468 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %467, ptr noundef nonnull @.str.1.159, i32 noundef %2, i32 noundef %462, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.2.160) #35
  %469 = load ptr, ptr @L__align11.mseq1, align 8, !tbaa !19
  %470 = load ptr, ptr %469, align 8, !tbaa !19
  %471 = load ptr, ptr @L__align11.mseq2, align 8, !tbaa !19
  br label %472

472:                                              ; preds = %466, %458
  %473 = phi ptr [ %297, %458 ], [ %471, %466 ]
  %474 = phi ptr [ %460, %458 ], [ %470, %466 ]
  %475 = load ptr, ptr %0, align 8, !tbaa !19
  %476 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %475, ptr noundef nonnull dereferenceable(1) %474) #35
  %477 = load ptr, ptr %1, align 8, !tbaa !19
  %478 = load ptr, ptr %473, align 8, !tbaa !19
  %479 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %477, ptr noundef nonnull dereferenceable(1) %478) #35
  br label %480

480:                                              ; preds = %472, %293
  %481 = phi float [ 0.000000e+00, %293 ], [ %283, %472 ]
  ret float %481
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @seqlen(ptr nocapture noundef readonly %0) #32 {
  %2 = load i8, ptr %0, align 1, !tbaa !17
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %14, label %4

4:                                                ; preds = %4, %1
  %5 = phi i8 [ %12, %4 ], [ %2, %1 ]
  %6 = phi i32 [ %11, %4 ], [ 0, %1 ]
  %7 = phi ptr [ %8, %4 ], [ %0, %1 ]
  %8 = getelementptr inbounds i8, ptr %7, i64 1
  %9 = icmp ne i8 %5, 45
  %10 = zext i1 %9 to i32
  %11 = add nuw nsw i32 %6, %10
  %12 = load i8, ptr %8, align 1, !tbaa !17
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %4, !llvm.loop !440

14:                                               ; preds = %4, %1
  %15 = phi i32 [ 0, %1 ], [ %11, %4 ]
  ret i32 %15
}

; Function Attrs: nofree nounwind optsize uwtable
define internal signext i8 @seqcheck(ptr noundef %0) #12 {
  %2 = load ptr, ptr %0, align 8, !tbaa !19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %63, label %4

4:                                                ; preds = %59, %1
  %5 = phi ptr [ %61, %59 ], [ %2, %1 ]
  %6 = phi ptr [ %60, %59 ], [ %0, %1 ]
  %7 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %5) #40
  %8 = trunc i64 %7 to i32
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %59

10:                                               ; preds = %4
  %11 = and i64 %7, 4294967295
  br label %12

12:                                               ; preds = %56, %10
  %13 = phi i64 [ 0, %10 ], [ %57, %56 ]
  %14 = getelementptr inbounds i8, ptr %5, i64 %13
  %15 = load i8, ptr %14, align 1, !tbaa !17
  %16 = sext i8 %15 to i64
  %17 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !31
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %56

20:                                               ; preds = %12
  %.lcssa1 = phi ptr [ %6, %12 ]
  %.lcssa = phi i64 [ %13, %12 ]
  %21 = trunc i64 %.lcssa to i32
  %22 = load ptr, ptr @stderr, align 8, !tbaa !19
  %23 = tail call i64 @fwrite(ptr nonnull @.str.161, i64 75, i64 1, ptr %22) #38
  %24 = load ptr, ptr @stderr, align 8, !tbaa !19
  %25 = tail call i64 @fwrite(ptr nonnull @.str.161, i64 75, i64 1, ptr %24) #38
  %26 = load ptr, ptr @stderr, align 8, !tbaa !19
  %27 = tail call i64 @fwrite(ptr nonnull @.str.161, i64 75, i64 1, ptr %26) #38
  %28 = load ptr, ptr @stderr, align 8, !tbaa !19
  %29 = tail call i64 @fwrite(ptr nonnull @.str.1.162, i64 5, i64 1, ptr %28) #38
  %30 = load ptr, ptr @stderr, align 8, !tbaa !19
  %31 = load ptr, ptr %.lcssa1, align 8, !tbaa !19
  %32 = getelementptr inbounds i8, ptr %31, i64 %.lcssa
  %33 = load i8, ptr %32, align 1, !tbaa !17
  %34 = sext i8 %33 to i32
  %35 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %30, ptr noundef nonnull @.str.2.163, i32 noundef %34) #36
  %36 = load ptr, ptr @stderr, align 8, !tbaa !19
  %37 = add nuw nsw i32 %21, 1
  %38 = ptrtoint ptr %.lcssa1 to i64
  %39 = ptrtoint ptr %0 to i64
  %40 = sub i64 %38, %39
  %41 = lshr exact i64 %40, 3
  %42 = trunc i64 %41 to i32
  %43 = add i32 %42, 1
  %44 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.3.164, i32 noundef %37, i32 noundef %43) #36
  %45 = load ptr, ptr @stderr, align 8, !tbaa !19
  %46 = tail call i64 @fwrite(ptr nonnull @.str.1.162, i64 5, i64 1, ptr %45) #38
  %47 = load ptr, ptr @stderr, align 8, !tbaa !19
  %48 = tail call i64 @fwrite(ptr nonnull @.str.161, i64 75, i64 1, ptr %47) #38
  %49 = load ptr, ptr @stderr, align 8, !tbaa !19
  %50 = tail call i64 @fwrite(ptr nonnull @.str.161, i64 75, i64 1, ptr %49) #38
  %51 = load ptr, ptr @stderr, align 8, !tbaa !19
  %52 = tail call i64 @fwrite(ptr nonnull @.str.161, i64 75, i64 1, ptr %51) #38
  %53 = load ptr, ptr %.lcssa1, align 8, !tbaa !19
  %54 = getelementptr inbounds i8, ptr %53, i64 %.lcssa
  %55 = load i8, ptr %54, align 1, !tbaa !17
  br label %63

56:                                               ; preds = %12
  %57 = add nuw nsw i64 %13, 1
  %58 = icmp eq i64 %57, %11
  br i1 %58, label %59, label %12, !llvm.loop !441

59:                                               ; preds = %56, %4
  %60 = getelementptr inbounds ptr, ptr %6, i64 1
  %61 = load ptr, ptr %60, align 8, !tbaa !19
  %62 = icmp eq ptr %61, null
  br i1 %62, label %63, label %4, !llvm.loop !442

63:                                               ; preds = %59, %20, %1
  %64 = phi i8 [ %55, %20 ], [ 0, %1 ], [ 0, %59 ]
  ret i8 %64
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @gappick0(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #17 {
  br label %3

3:                                                ; preds = %9, %2
  %4 = phi ptr [ %0, %2 ], [ %10, %9 ]
  %5 = phi ptr [ %1, %2 ], [ %11, %9 ]
  %6 = load i8, ptr %5, align 1, !tbaa !17
  switch i8 %6, label %7 [
    i8 0, label %12
    i8 45, label %9
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, ptr %4, i64 1
  store i8 %6, ptr %4, align 1, !tbaa !17
  br label %9

9:                                                ; preds = %7, %3
  %10 = phi ptr [ %8, %7 ], [ %4, %3 ]
  %11 = getelementptr inbounds i8, ptr %5, i64 1
  br label %3, !llvm.loop !443

12:                                               ; preds = %3
  %.lcssa = phi ptr [ %4, %3 ]
  store i8 0, ptr %.lcssa, align 1, !tbaa !17
  ret void
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @commongappick(i32 noundef %0, ptr nocapture noundef readonly %1) #24 {
  %3 = load ptr, ptr %1, align 8, !tbaa !19
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %3) #40
  %5 = and i64 %4, 2147483648
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %49

7:                                                ; preds = %2
  %8 = icmp sgt i32 %0, 0
  %9 = add nuw i64 %4, 1
  %10 = and i64 %9, 4294967295
  %11 = icmp eq i32 %0, 0
  %12 = zext i32 %0 to i64
  %13 = zext i32 %0 to i64
  br label %14

14:                                               ; preds = %45, %7
  %15 = phi i64 [ 0, %7 ], [ %47, %45 ]
  %16 = phi i32 [ 0, %7 ], [ %46, %45 ]
  br i1 %8, label %17, label %30

17:                                               ; preds = %24, %14
  %18 = phi i64 [ %25, %24 ], [ 0, %14 ]
  %19 = getelementptr inbounds ptr, ptr %1, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !19
  %21 = getelementptr inbounds i8, ptr %20, i64 %15
  %22 = load i8, ptr %21, align 1, !tbaa !17
  %23 = icmp eq i8 %22, 45
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = add nuw nsw i64 %18, 1
  %26 = icmp eq i64 %25, %12
  br i1 %26, label %45, label %17, !llvm.loop !444

27:                                               ; preds = %17
  %.lcssa = phi i64 [ %18, %17 ]
  %28 = trunc i64 %.lcssa to i32
  %29 = icmp eq i32 %28, %0
  br i1 %29, label %45, label %31

30:                                               ; preds = %14
  br i1 %11, label %45, label %43

31:                                               ; preds = %27
  br i1 %8, label %32, label %43

32:                                               ; preds = %31
  %33 = sext i32 %16 to i64
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %41, %34 ]
  %36 = getelementptr inbounds ptr, ptr %1, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !19
  %38 = getelementptr inbounds i8, ptr %37, i64 %15
  %39 = load i8, ptr %38, align 1, !tbaa !17
  %40 = getelementptr inbounds i8, ptr %37, i64 %33
  store i8 %39, ptr %40, align 1, !tbaa !17
  %41 = add nuw nsw i64 %35, 1
  %42 = icmp eq i64 %41, %13
  br i1 %42, label %43, label %34, !llvm.loop !445

43:                                               ; preds = %34, %31, %30
  %44 = add nsw i32 %16, 1
  br label %45

45:                                               ; preds = %43, %30, %27, %24
  %46 = phi i32 [ %44, %43 ], [ %16, %27 ], [ %16, %30 ], [ %16, %24 ]
  %47 = add nuw nsw i64 %15, 1
  %48 = icmp eq i64 %47, %10
  br i1 %48, label %49, label %14, !llvm.loop !446

49:                                               ; preds = %45, %2
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @floatncpy(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #17 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %9, %5 ], [ %2, %3 ]
  %7 = phi ptr [ %10, %5 ], [ %1, %3 ]
  %8 = phi ptr [ %12, %5 ], [ %0, %3 ]
  %9 = add nsw i32 %6, -1
  %10 = getelementptr inbounds float, ptr %7, i64 1
  %11 = load float, ptr %7, align 4, !tbaa !167
  %12 = getelementptr inbounds float, ptr %8, i64 1
  store float %11, ptr %8, align 4, !tbaa !167
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %14, label %5, !llvm.loop !447

14:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @gapireru(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #17 {
  br label %4

4:                                                ; preds = %13, %3
  %5 = phi ptr [ %1, %3 ], [ %15, %13 ]
  %6 = phi ptr [ %2, %3 ], [ %8, %13 ]
  %7 = phi ptr [ %0, %3 ], [ %16, %13 ]
  %8 = getelementptr inbounds i8, ptr %6, i64 1
  %9 = load i8, ptr %6, align 1, !tbaa !17
  switch i8 %9, label %10 [
    i8 0, label %17
    i8 45, label %13
  ]

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8, ptr %5, i64 1
  %12 = load i8, ptr %5, align 1, !tbaa !17
  br label %13

13:                                               ; preds = %10, %4
  %14 = phi i8 [ %12, %10 ], [ %9, %4 ]
  %15 = phi ptr [ %11, %10 ], [ %5, %4 ]
  %16 = getelementptr inbounds i8, ptr %7, i64 1
  store i8 %14, ptr %7, align 1, !tbaa !17
  br label %4, !llvm.loop !448

17:                                               ; preds = %4
  %.lcssa = phi ptr [ %7, %4 ]
  store i8 0, ptr %.lcssa, align 1, !tbaa !17
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @getkyokaigap(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3) #17 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %8, %6
  %9 = phi i32 [ %3, %6 ], [ %12, %8 ]
  %10 = phi ptr [ %0, %6 ], [ %17, %8 ]
  %11 = phi ptr [ %1, %6 ], [ %13, %8 ]
  %12 = add nsw i32 %9, -1
  %13 = getelementptr inbounds ptr, ptr %11, i64 1
  %14 = load ptr, ptr %11, align 8, !tbaa !19
  %15 = getelementptr inbounds i8, ptr %14, i64 %7
  %16 = load i8, ptr %15, align 1, !tbaa !17
  %17 = getelementptr inbounds i8, ptr %10, i64 1
  store i8 %16, ptr %10, align 1, !tbaa !17
  %18 = icmp eq i32 %12, 0
  br i1 %18, label %19, label %8, !llvm.loop !449

19:                                               ; preds = %8, %4
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @new_OpeningGapCount(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5) #16 {
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = zext i32 %4 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %10, i1 false), !tbaa !167
  br label %11

11:                                               ; preds = %8, %6
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %46

13:                                               ; preds = %11
  %14 = zext i32 %1 to i64
  br label %15

15:                                               ; preds = %43, %13
  %16 = phi i64 [ 0, %13 ], [ %44, %43 ]
  %17 = getelementptr inbounds double, ptr %3, i64 %16
  %18 = load double, ptr %17, align 8, !tbaa !7
  %19 = fptrunc double %18 to float
  br i1 %7, label %43, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds i8, ptr %5, i64 %16
  %22 = load i8, ptr %21, align 1, !tbaa !17
  %23 = icmp eq i8 %22, 45
  %24 = getelementptr inbounds ptr, ptr %2, i64 %16
  %25 = load ptr, ptr %24, align 8, !tbaa !19
  br label %26

26:                                               ; preds = %40, %20
  %27 = phi i32 [ %31, %40 ], [ %4, %20 ]
  %28 = phi ptr [ %32, %40 ], [ %25, %20 ]
  %29 = phi ptr [ %41, %40 ], [ %0, %20 ]
  %30 = phi i1 [ %34, %40 ], [ %23, %20 ]
  %31 = add nsw i32 %27, -1
  %32 = getelementptr inbounds i8, ptr %28, i64 1
  %33 = load i8, ptr %28, align 1, !tbaa !17
  %34 = icmp eq i8 %33, 45
  %35 = xor i1 %34, true
  %36 = select i1 %35, i1 true, i1 %30
  br i1 %36, label %40, label %37

37:                                               ; preds = %26
  %38 = load float, ptr %29, align 4, !tbaa !167
  %39 = fadd float %38, %19
  store float %39, ptr %29, align 4, !tbaa !167
  br label %40

40:                                               ; preds = %37, %26
  %41 = getelementptr inbounds float, ptr %29, i64 1
  %42 = icmp eq i32 %31, 0
  br i1 %42, label %43, label %26, !llvm.loop !450

43:                                               ; preds = %40, %15
  %44 = add nuw nsw i64 %16, 1
  %45 = icmp eq i64 %44, %14
  br i1 %45, label %46, label %15, !llvm.loop !451

46:                                               ; preds = %43, %11
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @new_OpeningGapCount_zure(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6) #16 {
  %8 = add nsw i32 %4, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7
  %11 = zext i32 %8 to i64
  %12 = shl nuw nsw i64 %11, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %12, i1 false), !tbaa !167
  br label %13

13:                                               ; preds = %10, %7
  %14 = icmp sgt i32 %1, 0
  br i1 %14, label %15, label %59

15:                                               ; preds = %13
  %16 = icmp eq i32 %4, 0
  %17 = zext i32 %1 to i64
  br label %18

18:                                               ; preds = %56, %15
  %19 = phi i64 [ 0, %15 ], [ %57, %56 ]
  %20 = getelementptr inbounds double, ptr %3, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !7
  %22 = fptrunc double %21 to float
  %23 = getelementptr inbounds i8, ptr %5, i64 %19
  %24 = load i8, ptr %23, align 1, !tbaa !17
  %25 = icmp eq i8 %24, 45
  br i1 %16, label %46, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds ptr, ptr %2, i64 %19
  %28 = load ptr, ptr %27, align 8, !tbaa !19
  br label %29

29:                                               ; preds = %43, %26
  %30 = phi i32 [ %34, %43 ], [ %4, %26 ]
  %31 = phi ptr [ %35, %43 ], [ %28, %26 ]
  %32 = phi ptr [ %44, %43 ], [ %0, %26 ]
  %33 = phi i1 [ %37, %43 ], [ %25, %26 ]
  %34 = add nsw i32 %30, -1
  %35 = getelementptr inbounds i8, ptr %31, i64 1
  %36 = load i8, ptr %31, align 1, !tbaa !17
  %37 = icmp eq i8 %36, 45
  %38 = xor i1 %37, true
  %39 = select i1 %38, i1 true, i1 %33
  br i1 %39, label %43, label %40

40:                                               ; preds = %29
  %41 = load float, ptr %32, align 4, !tbaa !167
  %42 = fadd float %41, %22
  store float %42, ptr %32, align 4, !tbaa !167
  br label %43

43:                                               ; preds = %40, %29
  %44 = getelementptr inbounds float, ptr %32, i64 1
  %45 = icmp eq i32 %34, 0
  br i1 %45, label %46, label %29, !llvm.loop !452

46:                                               ; preds = %43, %18
  %47 = phi i1 [ %25, %18 ], [ %37, %43 ]
  %48 = phi ptr [ %0, %18 ], [ %44, %43 ]
  %49 = getelementptr inbounds i8, ptr %6, i64 %19
  %50 = load i8, ptr %49, align 1, !tbaa !17
  %51 = icmp ne i8 %50, 45
  %52 = select i1 %51, i1 true, i1 %47
  br i1 %52, label %56, label %53

53:                                               ; preds = %46
  %54 = load float, ptr %48, align 4, !tbaa !167
  %55 = fadd float %54, %22
  store float %55, ptr %48, align 4, !tbaa !167
  br label %56

56:                                               ; preds = %53, %46
  %57 = add nuw nsw i64 %19, 1
  %58 = icmp eq i64 %57, %17
  br i1 %58, label %59, label %18, !llvm.loop !453

59:                                               ; preds = %56, %13
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @new_FinalGapCount_zure(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6) #16 {
  %8 = add nsw i32 %4, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7
  %11 = zext i32 %8 to i64
  %12 = shl nuw nsw i64 %11, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %12, i1 false), !tbaa !167
  br label %13

13:                                               ; preds = %10, %7
  %14 = icmp sgt i32 %1, 0
  br i1 %14, label %15, label %59

15:                                               ; preds = %13
  %16 = icmp eq i32 %4, 0
  %17 = zext i32 %1 to i64
  br label %18

18:                                               ; preds = %56, %15
  %19 = phi i64 [ 0, %15 ], [ %57, %56 ]
  %20 = getelementptr inbounds double, ptr %3, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !7
  %22 = fptrunc double %21 to float
  %23 = getelementptr inbounds i8, ptr %5, i64 %19
  %24 = load i8, ptr %23, align 1, !tbaa !17
  %25 = icmp eq i8 %24, 45
  br i1 %16, label %46, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds ptr, ptr %2, i64 %19
  %28 = load ptr, ptr %27, align 8, !tbaa !19
  br label %29

29:                                               ; preds = %43, %26
  %30 = phi i32 [ %34, %43 ], [ %4, %26 ]
  %31 = phi ptr [ %35, %43 ], [ %28, %26 ]
  %32 = phi ptr [ %44, %43 ], [ %0, %26 ]
  %33 = phi i1 [ %37, %43 ], [ %25, %26 ]
  %34 = add nsw i32 %30, -1
  %35 = getelementptr inbounds i8, ptr %31, i64 1
  %36 = load i8, ptr %31, align 1, !tbaa !17
  %37 = icmp eq i8 %36, 45
  %38 = xor i1 %37, true
  %39 = and i1 %33, %38
  br i1 %39, label %40, label %43

40:                                               ; preds = %29
  %41 = load float, ptr %32, align 4, !tbaa !167
  %42 = fadd float %41, %22
  store float %42, ptr %32, align 4, !tbaa !167
  br label %43

43:                                               ; preds = %40, %29
  %44 = getelementptr inbounds float, ptr %32, i64 1
  %45 = icmp eq i32 %34, 0
  br i1 %45, label %46, label %29, !llvm.loop !454

46:                                               ; preds = %43, %18
  %47 = phi i1 [ %25, %18 ], [ %37, %43 ]
  %48 = phi ptr [ %0, %18 ], [ %44, %43 ]
  %49 = getelementptr inbounds i8, ptr %6, i64 %19
  %50 = load i8, ptr %49, align 1, !tbaa !17
  %51 = icmp ne i8 %50, 45
  %52 = and i1 %47, %51
  br i1 %52, label %53, label %56

53:                                               ; preds = %46
  %54 = load float, ptr %48, align 4, !tbaa !167
  %55 = fadd float %54, %22
  store float %55, ptr %48, align 4, !tbaa !167
  br label %56

56:                                               ; preds = %53, %46
  %57 = add nuw nsw i64 %19, 1
  %58 = icmp eq i64 %57, %17
  br i1 %58, label %59, label %18, !llvm.loop !455

59:                                               ; preds = %56, %13
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @new_FinalGapCount(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5) #16 {
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = zext i32 %4 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %10, i1 false), !tbaa !167
  br label %11

11:                                               ; preds = %8, %6
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %54

13:                                               ; preds = %11
  %14 = zext i32 %1 to i64
  br label %15

15:                                               ; preds = %51, %13
  %16 = phi i64 [ 0, %13 ], [ %52, %51 ]
  %17 = getelementptr inbounds double, ptr %3, i64 %16
  %18 = load double, ptr %17, align 8, !tbaa !7
  %19 = fptrunc double %18 to float
  %20 = getelementptr inbounds ptr, ptr %2, i64 %16
  %21 = load ptr, ptr %20, align 8, !tbaa !19
  %22 = load i8, ptr %21, align 1, !tbaa !17
  %23 = icmp eq i8 %22, 45
  br i1 %7, label %41, label %24

24:                                               ; preds = %38, %15
  %25 = phi i32 [ %29, %38 ], [ %4, %15 ]
  %26 = phi ptr [ %30, %38 ], [ %21, %15 ]
  %27 = phi ptr [ %39, %38 ], [ %0, %15 ]
  %28 = phi i1 [ %32, %38 ], [ %23, %15 ]
  %29 = add nsw i32 %25, -1
  %30 = getelementptr inbounds i8, ptr %26, i64 1
  %31 = load i8, ptr %30, align 1, !tbaa !17
  %32 = icmp eq i8 %31, 45
  %33 = xor i1 %32, true
  %34 = and i1 %28, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %24
  %36 = load float, ptr %27, align 4, !tbaa !167
  %37 = fadd float %36, %19
  store float %37, ptr %27, align 4, !tbaa !167
  br label %38

38:                                               ; preds = %35, %24
  %39 = getelementptr inbounds float, ptr %27, i64 1
  %40 = icmp eq i32 %29, 0
  br i1 %40, label %41, label %24, !llvm.loop !456

41:                                               ; preds = %38, %15
  %42 = phi i1 [ %23, %15 ], [ %32, %38 ]
  %43 = phi ptr [ %0, %15 ], [ %39, %38 ]
  %44 = getelementptr inbounds i8, ptr %5, i64 %16
  %45 = load i8, ptr %44, align 1, !tbaa !17
  %46 = icmp ne i8 %45, 45
  %47 = and i1 %42, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %41
  %49 = load float, ptr %43, align 4, !tbaa !167
  %50 = fadd float %49, %19
  store float %50, ptr %43, align 4, !tbaa !167
  br label %51

51:                                               ; preds = %48, %41
  %52 = add nuw nsw i64 %16, 1
  %53 = icmp eq i64 %52, %14
  br i1 %53, label %54, label %15, !llvm.loop !457

54:                                               ; preds = %51, %11
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @st_OpeningGapCount(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #16 {
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = shl nuw nsw i64 %8, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %9, i1 false), !tbaa !167
  br label %10

10:                                               ; preds = %7, %5
  %11 = icmp sgt i32 %1, 0
  br i1 %11, label %12, label %43

12:                                               ; preds = %10
  %13 = zext i32 %1 to i64
  br label %14

14:                                               ; preds = %40, %12
  %15 = phi i64 [ 0, %12 ], [ %41, %40 ]
  %16 = getelementptr inbounds double, ptr %3, i64 %15
  %17 = load double, ptr %16, align 8, !tbaa !7
  %18 = fptrunc double %17 to float
  br i1 %6, label %40, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds ptr, ptr %2, i64 %15
  %21 = load ptr, ptr %20, align 8, !tbaa !19
  br label %22

22:                                               ; preds = %37, %19
  %23 = phi i32 [ %27, %37 ], [ %4, %19 ]
  %24 = phi ptr [ %28, %37 ], [ %21, %19 ]
  %25 = phi ptr [ %38, %37 ], [ %0, %19 ]
  %26 = phi i32 [ %31, %37 ], [ 0, %19 ]
  %27 = add nsw i32 %23, -1
  %28 = getelementptr inbounds i8, ptr %24, i64 1
  %29 = load i8, ptr %24, align 1, !tbaa !17
  %30 = icmp eq i8 %29, 45
  %31 = zext i1 %30 to i32
  %32 = icmp eq i32 %26, 0
  %33 = and i1 %32, %30
  br i1 %33, label %34, label %37

34:                                               ; preds = %22
  %35 = load float, ptr %25, align 4, !tbaa !167
  %36 = fadd float %35, %18
  store float %36, ptr %25, align 4, !tbaa !167
  br label %37

37:                                               ; preds = %34, %22
  %38 = getelementptr inbounds float, ptr %25, i64 1
  %39 = icmp eq i32 %27, 0
  br i1 %39, label %40, label %22, !llvm.loop !458

40:                                               ; preds = %37, %14
  %41 = add nuw nsw i64 %15, 1
  %42 = icmp eq i64 %41, %13
  br i1 %42, label %43, label %14, !llvm.loop !459

43:                                               ; preds = %40, %10
  %44 = sext i32 %4 to i64
  %45 = getelementptr inbounds float, ptr %0, i64 %44
  store float 0.000000e+00, ptr %45, align 4, !tbaa !167
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @st_FinalGapCount_zure(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #16 {
  %6 = add nsw i32 %4, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = zext i32 %6 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %10, i1 false), !tbaa !167
  br label %11

11:                                               ; preds = %8, %5
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %52

13:                                               ; preds = %11
  %14 = getelementptr inbounds float, ptr %0, i64 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i32 %1 to i64
  br label %17

17:                                               ; preds = %49, %13
  %18 = phi i64 [ 0, %13 ], [ %50, %49 ]
  %19 = getelementptr inbounds double, ptr %3, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !7
  %21 = fptrunc double %20 to float
  %22 = getelementptr inbounds ptr, ptr %2, i64 %18
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  %24 = load i8, ptr %23, align 1, !tbaa !17
  %25 = icmp eq i8 %24, 45
  br i1 %15, label %43, label %26

26:                                               ; preds = %40, %17
  %27 = phi i32 [ %31, %40 ], [ %4, %17 ]
  %28 = phi ptr [ %41, %40 ], [ %14, %17 ]
  %29 = phi ptr [ %32, %40 ], [ %23, %17 ]
  %30 = phi i1 [ %34, %40 ], [ %25, %17 ]
  %31 = add nsw i32 %27, -1
  %32 = getelementptr inbounds i8, ptr %29, i64 1
  %33 = load i8, ptr %32, align 1, !tbaa !17
  %34 = icmp eq i8 %33, 45
  %35 = xor i1 %34, true
  %36 = and i1 %30, %35
  br i1 %36, label %37, label %40

37:                                               ; preds = %26
  %38 = load float, ptr %28, align 4, !tbaa !167
  %39 = fadd float %38, %21
  store float %39, ptr %28, align 4, !tbaa !167
  br label %40

40:                                               ; preds = %37, %26
  %41 = getelementptr inbounds float, ptr %28, i64 1
  %42 = icmp eq i32 %31, 0
  br i1 %42, label %43, label %26, !llvm.loop !460

43:                                               ; preds = %40, %17
  %44 = phi i1 [ %25, %17 ], [ %34, %40 ]
  %45 = phi ptr [ %14, %17 ], [ %41, %40 ]
  br i1 %44, label %46, label %49

46:                                               ; preds = %43
  %47 = load float, ptr %45, align 4, !tbaa !167
  %48 = fadd float %47, %21
  store float %48, ptr %45, align 4, !tbaa !167
  br label %49

49:                                               ; preds = %46, %43
  %50 = add nuw nsw i64 %18, 1
  %51 = icmp eq i64 %50, %16
  br i1 %51, label %52, label %17, !llvm.loop !461

52:                                               ; preds = %49, %11
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @st_FinalGapCount(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #16 {
  %6 = icmp eq i32 %4, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = shl nuw nsw i64 %8, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %0, i8 0, i64 %9, i1 false), !tbaa !167
  br label %10

10:                                               ; preds = %7, %5
  %11 = icmp sgt i32 %1, 0
  br i1 %11, label %12, label %49

12:                                               ; preds = %10
  %13 = zext i32 %1 to i64
  br label %14

14:                                               ; preds = %46, %12
  %15 = phi i64 [ 0, %12 ], [ %47, %46 ]
  %16 = getelementptr inbounds double, ptr %3, i64 %15
  %17 = load double, ptr %16, align 8, !tbaa !7
  %18 = fptrunc double %17 to float
  %19 = getelementptr inbounds ptr, ptr %2, i64 %15
  %20 = load ptr, ptr %19, align 8, !tbaa !19
  %21 = load i8, ptr %20, align 1, !tbaa !17
  %22 = icmp eq i8 %21, 45
  br i1 %6, label %40, label %23

23:                                               ; preds = %37, %14
  %24 = phi i32 [ %28, %37 ], [ %4, %14 ]
  %25 = phi ptr [ %29, %37 ], [ %20, %14 ]
  %26 = phi ptr [ %38, %37 ], [ %0, %14 ]
  %27 = phi i1 [ %31, %37 ], [ %22, %14 ]
  %28 = add nsw i32 %24, -1
  %29 = getelementptr inbounds i8, ptr %25, i64 1
  %30 = load i8, ptr %29, align 1, !tbaa !17
  %31 = icmp eq i8 %30, 45
  %32 = xor i1 %31, true
  %33 = and i1 %27, %32
  br i1 %33, label %34, label %37

34:                                               ; preds = %23
  %35 = load float, ptr %26, align 4, !tbaa !167
  %36 = fadd float %35, %18
  store float %36, ptr %26, align 4, !tbaa !167
  br label %37

37:                                               ; preds = %34, %23
  %38 = getelementptr inbounds float, ptr %26, i64 1
  %39 = icmp eq i32 %28, 0
  br i1 %39, label %40, label %23, !llvm.loop !462

40:                                               ; preds = %37, %14
  %41 = phi i1 [ %22, %14 ], [ %31, %37 ]
  %42 = phi ptr [ %0, %14 ], [ %38, %37 ]
  br i1 %41, label %43, label %46

43:                                               ; preds = %40
  %44 = load float, ptr %42, align 4, !tbaa !167
  %45 = fadd float %44, %18
  store float %45, ptr %42, align 4, !tbaa !167
  br label %46

46:                                               ; preds = %43, %40
  %47 = add nuw nsw i64 %15, 1
  %48 = icmp eq i64 %47, %13
  br i1 %48, label %49, label %14, !llvm.loop !463

49:                                               ; preds = %46, %10
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getdigapfreq_st(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #27 {
  %6 = icmp slt i32 %4, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = add nuw i32 %4, 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %10, i1 false), !tbaa !167
  br label %11

11:                                               ; preds = %7, %5
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %45

13:                                               ; preds = %11
  %14 = icmp sgt i32 %4, 1
  %15 = zext i32 %1 to i64
  %16 = zext i32 %4 to i64
  br label %17

17:                                               ; preds = %42, %13
  %18 = phi i64 [ 0, %13 ], [ %43, %42 ]
  %19 = getelementptr inbounds double, ptr %3, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !7
  %21 = fptrunc double %20 to float
  br i1 %14, label %22, label %42

22:                                               ; preds = %17
  %23 = getelementptr inbounds ptr, ptr %2, i64 %18
  %24 = load ptr, ptr %23, align 8, !tbaa !19
  br label %25

25:                                               ; preds = %39, %22
  %26 = phi i64 [ 1, %22 ], [ %40, %39 ]
  %27 = getelementptr inbounds i8, ptr %24, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 45
  br i1 %29, label %30, label %39

30:                                               ; preds = %25
  %31 = add nsw i64 %26, -1
  %32 = getelementptr inbounds i8, ptr %24, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !17
  %34 = icmp eq i8 %33, 45
  br i1 %34, label %35, label %39

35:                                               ; preds = %30
  %36 = getelementptr inbounds float, ptr %0, i64 %26
  %37 = load float, ptr %36, align 4, !tbaa !167
  %38 = fadd float %37, %21
  store float %38, ptr %36, align 4, !tbaa !167
  br label %39

39:                                               ; preds = %35, %30, %25
  %40 = add nuw nsw i64 %26, 1
  %41 = icmp eq i64 %40, %16
  br i1 %41, label %42, label %25, !llvm.loop !464

42:                                               ; preds = %39, %17
  %43 = add nuw nsw i64 %18, 1
  %44 = icmp eq i64 %43, %15
  br i1 %44, label %45, label %17, !llvm.loop !465

45:                                               ; preds = %42, %11
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getdiaminofreq_x(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #27 {
  %6 = icmp sgt i32 %4, -2
  br i1 %6, label %7, label %12

7:                                                ; preds = %5
  %8 = add i32 %4, 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 2
  %11 = add nuw nsw i64 %10, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %11, i1 false), !tbaa !167
  br label %12

12:                                               ; preds = %7, %5
  %13 = icmp sgt i32 %1, 0
  br i1 %13, label %14, label %62

14:                                               ; preds = %12
  %15 = icmp sgt i32 %4, 1
  %16 = add nsw i32 %4, -1
  %17 = sext i32 %16 to i64
  %18 = sext i32 %4 to i64
  %19 = getelementptr inbounds float, ptr %0, i64 %18
  %20 = zext i32 %1 to i64
  %21 = zext i32 %4 to i64
  br label %22

22:                                               ; preds = %59, %14
  %23 = phi i64 [ 0, %14 ], [ %60, %59 ]
  %24 = getelementptr inbounds double, ptr %3, i64 %23
  %25 = load double, ptr %24, align 8, !tbaa !7
  %26 = fptrunc double %25 to float
  %27 = getelementptr inbounds ptr, ptr %2, i64 %23
  %28 = load ptr, ptr %27, align 8, !tbaa !19
  %29 = load i8, ptr %28, align 1, !tbaa !17
  %30 = icmp eq i8 %29, 45
  br i1 %30, label %34, label %31

31:                                               ; preds = %22
  %32 = load float, ptr %0, align 4, !tbaa !167
  %33 = fadd float %32, %26
  store float %33, ptr %0, align 4, !tbaa !167
  br label %34

34:                                               ; preds = %31, %22
  br i1 %15, label %35, label %52

35:                                               ; preds = %49, %34
  %36 = phi i64 [ %50, %49 ], [ 1, %34 ]
  %37 = getelementptr inbounds i8, ptr %28, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !17
  %39 = icmp eq i8 %38, 45
  br i1 %39, label %49, label %40

40:                                               ; preds = %35
  %41 = add nsw i64 %36, -1
  %42 = getelementptr inbounds i8, ptr %28, i64 %41
  %43 = load i8, ptr %42, align 1, !tbaa !17
  %44 = icmp eq i8 %43, 45
  br i1 %44, label %49, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds float, ptr %0, i64 %36
  %47 = load float, ptr %46, align 4, !tbaa !167
  %48 = fadd float %47, %26
  store float %48, ptr %46, align 4, !tbaa !167
  br label %49

49:                                               ; preds = %45, %40, %35
  %50 = add nuw nsw i64 %36, 1
  %51 = icmp eq i64 %50, %21
  br i1 %51, label %52, label %35, !llvm.loop !466

52:                                               ; preds = %49, %34
  %53 = getelementptr inbounds i8, ptr %28, i64 %17
  %54 = load i8, ptr %53, align 1, !tbaa !17
  %55 = icmp eq i8 %54, 45
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = load float, ptr %19, align 4, !tbaa !167
  %58 = fadd float %57, %26
  store float %58, ptr %19, align 4, !tbaa !167
  br label %59

59:                                               ; preds = %56, %52
  %60 = add nuw nsw i64 %23, 1
  %61 = icmp eq i64 %60, %20
  br i1 %61, label %62, label %22, !llvm.loop !467

62:                                               ; preds = %59, %12
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getdigapfreq_part(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6) #27 {
  %8 = icmp sgt i32 %4, -2
  br i1 %8, label %9, label %14

9:                                                ; preds = %7
  %10 = add i32 %4, 1
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = add nuw nsw i64 %12, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %13, i1 false), !tbaa !167
  br label %14

14:                                               ; preds = %9, %7
  %15 = icmp sgt i32 %1, 0
  br i1 %15, label %16, label %72

16:                                               ; preds = %14
  %17 = icmp sgt i32 %4, 1
  %18 = add nsw i32 %4, -1
  %19 = sext i32 %18 to i64
  %20 = sext i32 %4 to i64
  %21 = getelementptr inbounds float, ptr %0, i64 %20
  %22 = zext i32 %1 to i64
  %23 = zext i32 %4 to i64
  br label %24

24:                                               ; preds = %69, %16
  %25 = phi i64 [ 0, %16 ], [ %70, %69 ]
  %26 = getelementptr inbounds double, ptr %3, i64 %25
  %27 = load double, ptr %26, align 8, !tbaa !7
  %28 = fptrunc double %27 to float
  %29 = getelementptr inbounds ptr, ptr %2, i64 %25
  %30 = load ptr, ptr %29, align 8, !tbaa !19
  %31 = load i8, ptr %30, align 1, !tbaa !17
  %32 = icmp eq i8 %31, 45
  br i1 %32, label %33, label %40

33:                                               ; preds = %24
  %34 = getelementptr inbounds i8, ptr %5, i64 %25
  %35 = load i8, ptr %34, align 1, !tbaa !17
  %36 = icmp eq i8 %35, 45
  br i1 %36, label %37, label %40

37:                                               ; preds = %33
  %38 = load float, ptr %0, align 4, !tbaa !167
  %39 = fadd float %38, %28
  store float %39, ptr %0, align 4, !tbaa !167
  br label %40

40:                                               ; preds = %37, %33, %24
  br i1 %17, label %41, label %58

41:                                               ; preds = %55, %40
  %42 = phi i64 [ %56, %55 ], [ 1, %40 ]
  %43 = getelementptr inbounds i8, ptr %30, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !17
  %45 = icmp eq i8 %44, 45
  br i1 %45, label %46, label %55

46:                                               ; preds = %41
  %47 = add nsw i64 %42, -1
  %48 = getelementptr inbounds i8, ptr %30, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !17
  %50 = icmp eq i8 %49, 45
  br i1 %50, label %51, label %55

51:                                               ; preds = %46
  %52 = getelementptr inbounds float, ptr %0, i64 %42
  %53 = load float, ptr %52, align 4, !tbaa !167
  %54 = fadd float %53, %28
  store float %54, ptr %52, align 4, !tbaa !167
  br label %55

55:                                               ; preds = %51, %46, %41
  %56 = add nuw nsw i64 %42, 1
  %57 = icmp eq i64 %56, %23
  br i1 %57, label %58, label %41, !llvm.loop !468

58:                                               ; preds = %55, %40
  %59 = getelementptr inbounds i8, ptr %6, i64 %25
  %60 = load i8, ptr %59, align 1, !tbaa !17
  %61 = icmp eq i8 %60, 45
  br i1 %61, label %62, label %69

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, ptr %30, i64 %19
  %64 = load i8, ptr %63, align 1, !tbaa !17
  %65 = icmp eq i8 %64, 45
  br i1 %65, label %66, label %69

66:                                               ; preds = %62
  %67 = load float, ptr %21, align 4, !tbaa !167
  %68 = fadd float %67, %28
  store float %68, ptr %21, align 4, !tbaa !167
  br label %69

69:                                               ; preds = %66, %62, %58
  %70 = add nuw nsw i64 %25, 1
  %71 = icmp eq i64 %70, %22
  br i1 %71, label %72, label %24, !llvm.loop !469

72:                                               ; preds = %69, %14
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getdiaminofreq_part(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6) #27 {
  %8 = icmp sgt i32 %4, -2
  br i1 %8, label %9, label %14

9:                                                ; preds = %7
  %10 = add i32 %4, 1
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = add nuw nsw i64 %12, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %13, i1 false), !tbaa !167
  br label %14

14:                                               ; preds = %9, %7
  %15 = icmp sgt i32 %1, 0
  br i1 %15, label %16, label %72

16:                                               ; preds = %14
  %17 = icmp sgt i32 %4, 1
  %18 = add nsw i32 %4, -1
  %19 = sext i32 %18 to i64
  %20 = sext i32 %4 to i64
  %21 = getelementptr inbounds float, ptr %0, i64 %20
  %22 = zext i32 %1 to i64
  %23 = zext i32 %4 to i64
  br label %24

24:                                               ; preds = %69, %16
  %25 = phi i64 [ 0, %16 ], [ %70, %69 ]
  %26 = getelementptr inbounds double, ptr %3, i64 %25
  %27 = load double, ptr %26, align 8, !tbaa !7
  %28 = fptrunc double %27 to float
  %29 = getelementptr inbounds ptr, ptr %2, i64 %25
  %30 = load ptr, ptr %29, align 8, !tbaa !19
  %31 = load i8, ptr %30, align 1, !tbaa !17
  %32 = icmp eq i8 %31, 45
  br i1 %32, label %40, label %33

33:                                               ; preds = %24
  %34 = getelementptr inbounds i8, ptr %5, i64 %25
  %35 = load i8, ptr %34, align 1, !tbaa !17
  %36 = icmp eq i8 %35, 45
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = load float, ptr %0, align 4, !tbaa !167
  %39 = fadd float %38, %28
  store float %39, ptr %0, align 4, !tbaa !167
  br label %40

40:                                               ; preds = %37, %33, %24
  br i1 %17, label %41, label %58

41:                                               ; preds = %55, %40
  %42 = phi i64 [ %56, %55 ], [ 1, %40 ]
  %43 = getelementptr inbounds i8, ptr %30, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !17
  %45 = icmp eq i8 %44, 45
  br i1 %45, label %55, label %46

46:                                               ; preds = %41
  %47 = add nsw i64 %42, -1
  %48 = getelementptr inbounds i8, ptr %30, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !17
  %50 = icmp eq i8 %49, 45
  br i1 %50, label %55, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds float, ptr %0, i64 %42
  %53 = load float, ptr %52, align 4, !tbaa !167
  %54 = fadd float %53, %28
  store float %54, ptr %52, align 4, !tbaa !167
  br label %55

55:                                               ; preds = %51, %46, %41
  %56 = add nuw nsw i64 %42, 1
  %57 = icmp eq i64 %56, %23
  br i1 %57, label %58, label %41, !llvm.loop !470

58:                                               ; preds = %55, %40
  %59 = getelementptr inbounds i8, ptr %6, i64 %25
  %60 = load i8, ptr %59, align 1, !tbaa !17
  %61 = icmp eq i8 %60, 45
  br i1 %61, label %69, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, ptr %30, i64 %19
  %64 = load i8, ptr %63, align 1, !tbaa !17
  %65 = icmp eq i8 %64, 45
  br i1 %65, label %69, label %66

66:                                               ; preds = %62
  %67 = load float, ptr %21, align 4, !tbaa !167
  %68 = fadd float %67, %28
  store float %68, ptr %21, align 4, !tbaa !167
  br label %69

69:                                               ; preds = %66, %62, %58
  %70 = add nuw nsw i64 %25, 1
  %71 = icmp eq i64 %70, %22
  br i1 %71, label %72, label %24, !llvm.loop !471

72:                                               ; preds = %69, %14
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getgapfreq_zure_part(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, ptr nocapture noundef readonly %5) #27 {
  %7 = icmp sgt i32 %4, -2
  br i1 %7, label %8, label %13

8:                                                ; preds = %6
  %9 = add i32 %4, 1
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %10, 2
  %12 = add nuw nsw i64 %11, 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %12, i1 false), !tbaa !167
  br label %13

13:                                               ; preds = %8, %6
  %14 = icmp sgt i32 %1, 0
  br i1 %14, label %15, label %49

15:                                               ; preds = %13
  %16 = icmp sgt i32 %4, 0
  %17 = zext i32 %1 to i64
  %18 = zext i32 %4 to i64
  br label %19

19:                                               ; preds = %46, %15
  %20 = phi i64 [ 0, %15 ], [ %47, %46 ]
  %21 = getelementptr inbounds double, ptr %3, i64 %20
  %22 = load double, ptr %21, align 8, !tbaa !7
  %23 = fptrunc double %22 to float
  %24 = getelementptr inbounds i8, ptr %5, i64 %20
  %25 = load i8, ptr %24, align 1, !tbaa !17
  %26 = icmp eq i8 %25, 45
  br i1 %26, label %27, label %30

27:                                               ; preds = %19
  %28 = load float, ptr %0, align 4, !tbaa !167
  %29 = fadd float %28, %23
  store float %29, ptr %0, align 4, !tbaa !167
  br label %30

30:                                               ; preds = %27, %19
  br i1 %16, label %31, label %46

31:                                               ; preds = %30
  %32 = getelementptr inbounds ptr, ptr %2, i64 %20
  %33 = load ptr, ptr %32, align 8, !tbaa !19
  br label %34

34:                                               ; preds = %44, %31
  %35 = phi i64 [ 0, %31 ], [ %39, %44 ]
  %36 = getelementptr inbounds i8, ptr %33, i64 %35
  %37 = load i8, ptr %36, align 1, !tbaa !17
  %38 = icmp eq i8 %37, 45
  %39 = add nuw nsw i64 %35, 1
  br i1 %38, label %40, label %44

40:                                               ; preds = %34
  %41 = getelementptr inbounds float, ptr %0, i64 %39
  %42 = load float, ptr %41, align 4, !tbaa !167
  %43 = fadd float %42, %23
  store float %43, ptr %41, align 4, !tbaa !167
  br label %44

44:                                               ; preds = %40, %34
  %45 = icmp eq i64 %39, %18
  br i1 %45, label %46, label %34, !llvm.loop !472

46:                                               ; preds = %44, %30
  %47 = add nuw nsw i64 %20, 1
  %48 = icmp eq i64 %47, %17
  br i1 %48, label %49, label %19, !llvm.loop !473

49:                                               ; preds = %46, %13
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getgapfreq_zure(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #27 {
  %6 = icmp slt i32 %4, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = add nuw i32 %4, 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %10, i1 false), !tbaa !167
  br label %11

11:                                               ; preds = %7, %5
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %40

13:                                               ; preds = %11
  %14 = icmp sgt i32 %4, 0
  %15 = zext i32 %1 to i64
  %16 = zext i32 %4 to i64
  br label %17

17:                                               ; preds = %37, %13
  %18 = phi i64 [ 0, %13 ], [ %38, %37 ]
  %19 = getelementptr inbounds double, ptr %3, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !7
  %21 = fptrunc double %20 to float
  br i1 %14, label %22, label %37

22:                                               ; preds = %17
  %23 = getelementptr inbounds ptr, ptr %2, i64 %18
  %24 = load ptr, ptr %23, align 8, !tbaa !19
  br label %25

25:                                               ; preds = %35, %22
  %26 = phi i64 [ 0, %22 ], [ %30, %35 ]
  %27 = getelementptr inbounds i8, ptr %24, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 45
  %30 = add nuw nsw i64 %26, 1
  br i1 %29, label %31, label %35

31:                                               ; preds = %25
  %32 = getelementptr inbounds float, ptr %0, i64 %30
  %33 = load float, ptr %32, align 4, !tbaa !167
  %34 = fadd float %33, %21
  store float %34, ptr %32, align 4, !tbaa !167
  br label %35

35:                                               ; preds = %31, %25
  %36 = icmp eq i64 %30, %16
  br i1 %36, label %37, label %25, !llvm.loop !474

37:                                               ; preds = %35, %17
  %38 = add nuw nsw i64 %18, 1
  %39 = icmp eq i64 %38, %15
  br i1 %39, label %40, label %17, !llvm.loop !475

40:                                               ; preds = %37, %11
  %41 = add nsw i32 %4, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, ptr %0, i64 %42
  store float 0.000000e+00, ptr %43, align 4, !tbaa !167
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @getgapfreq(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #27 {
  %6 = icmp slt i32 %4, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = add nuw i32 %4, 1
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %0, i8 0, i64 %10, i1 false), !tbaa !167
  br label %11

11:                                               ; preds = %7, %5
  %12 = icmp sgt i32 %1, 0
  br i1 %12, label %13, label %40

13:                                               ; preds = %11
  %14 = icmp sgt i32 %4, 0
  %15 = zext i32 %1 to i64
  %16 = zext i32 %4 to i64
  br label %17

17:                                               ; preds = %37, %13
  %18 = phi i64 [ 0, %13 ], [ %38, %37 ]
  %19 = getelementptr inbounds double, ptr %3, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !7
  %21 = fptrunc double %20 to float
  br i1 %14, label %22, label %37

22:                                               ; preds = %17
  %23 = getelementptr inbounds ptr, ptr %2, i64 %18
  %24 = load ptr, ptr %23, align 8, !tbaa !19
  br label %25

25:                                               ; preds = %34, %22
  %26 = phi i64 [ 0, %22 ], [ %35, %34 ]
  %27 = getelementptr inbounds i8, ptr %24, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !17
  %29 = icmp eq i8 %28, 45
  br i1 %29, label %30, label %34

30:                                               ; preds = %25
  %31 = getelementptr inbounds float, ptr %0, i64 %26
  %32 = load float, ptr %31, align 4, !tbaa !167
  %33 = fadd float %32, %21
  store float %33, ptr %31, align 4, !tbaa !167
  br label %34

34:                                               ; preds = %30, %25
  %35 = add nuw nsw i64 %26, 1
  %36 = icmp eq i64 %35, %16
  br i1 %36, label %37, label %25, !llvm.loop !476

37:                                               ; preds = %34, %17
  %38 = add nuw nsw i64 %18, 1
  %39 = icmp eq i64 %38, %15
  br i1 %39, label %40, label %17, !llvm.loop !477

40:                                               ; preds = %37, %11
  %41 = sext i32 %4 to i64
  %42 = getelementptr inbounds float, ptr %0, i64 %41
  store float 0.000000e+00, ptr %42, align 4, !tbaa !167
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @st_getGapPattern(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4) #4 {
  %6 = icmp eq i32 %4, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %18, %5
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp slt i32 %4, 0
  %11 = zext i32 %1 to i64
  br label %27

12:                                               ; preds = %18, %5
  %13 = phi i32 [ %20, %18 ], [ %4, %5 ]
  %14 = phi ptr [ %19, %18 ], [ %0, %5 ]
  %15 = load ptr, ptr %14, align 8, !tbaa !19
  %16 = icmp eq ptr %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  tail call void @free(ptr noundef nonnull %15) #35
  br label %18

18:                                               ; preds = %17, %12
  %19 = getelementptr inbounds ptr, ptr %14, i64 1
  store ptr null, ptr %14, align 8, !tbaa !19
  %20 = add nsw i32 %13, -1
  %21 = icmp eq i32 %13, 0
  br i1 %21, label %7, label %12, !llvm.loop !478

22:                                               ; preds = %108, %7
  %23 = icmp slt i32 %4, 0
  br i1 %23, label %151, label %24

24:                                               ; preds = %22
  %25 = add nuw i32 %4, 1
  %26 = zext i32 %25 to i64
  br label %111

27:                                               ; preds = %108, %9
  %28 = phi i64 [ 0, %9 ], [ %109, %108 ]
  %29 = getelementptr inbounds double, ptr %3, i64 %28
  %30 = load double, ptr %29, align 8, !tbaa !7
  %31 = fptrunc double %30 to float
  store ptr null, ptr %0, align 8, !tbaa !19
  br i1 %10, label %108, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds ptr, ptr %2, i64 %28
  %34 = load ptr, ptr %33, align 8, !tbaa !19
  br label %35

35:                                               ; preds = %101, %32
  %36 = phi i32 [ %104, %101 ], [ 0, %32 ]
  %37 = phi ptr [ %103, %101 ], [ %34, %32 ]
  %38 = phi ptr [ %105, %101 ], [ %0, %32 ]
  %39 = phi i32 [ %106, %101 ], [ 0, %32 ]
  %40 = phi i32 [ %102, %101 ], [ 0, %32 ]
  %41 = icmp eq i32 %39, %4
  br i1 %41, label %48, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds i8, ptr %37, i64 1
  %44 = load i8, ptr %37, align 1, !tbaa !17
  %45 = icmp eq i8 %44, 45
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = add nsw i32 %36, 1
  br label %101

48:                                               ; preds = %42, %35
  %49 = phi ptr [ %43, %42 ], [ %37, %35 ]
  %50 = icmp ne i32 %40, 0
  %51 = icmp ne i32 %36, 0
  %52 = select i1 %50, i1 %51, i1 false
  br i1 %52, label %53, label %101

53:                                               ; preds = %48
  %54 = load ptr, ptr %38, align 8, !tbaa !19
  %55 = icmp eq ptr %54, null
  br i1 %55, label %71, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct._Gappattern, ptr %54, i64 1
  %58 = load i32, ptr %57, align 4, !tbaa !367
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %71, label %60

60:                                               ; preds = %64, %56
  %61 = phi i64 [ %65, %64 ], [ 1, %56 ]
  %62 = phi i32 [ %67, %64 ], [ %58, %56 ]
  %63 = icmp eq i32 %62, %36
  br i1 %63, label %91, label %64

64:                                               ; preds = %60
  %65 = add nuw i64 %61, 1
  %66 = getelementptr inbounds %struct._Gappattern, ptr %54, i64 %65
  %67 = load i32, ptr %66, align 4, !tbaa !367
  %68 = icmp eq i32 %67, -1
  br i1 %68, label %69, label %60, !llvm.loop !479

69:                                               ; preds = %64
  %.lcssa4 = phi i64 [ %65, %64 ]
  %70 = trunc i64 %.lcssa4 to i32
  br label %71

71:                                               ; preds = %69, %56, %53
  %72 = phi i32 [ 1, %53 ], [ 1, %56 ], [ %70, %69 ]
  %73 = add nuw nsw i32 %72, 3
  %74 = zext i32 %73 to i64
  %75 = shl nuw nsw i64 %74, 3
  %76 = tail call ptr @realloc(ptr noundef %54, i64 noundef %75) #42
  store ptr %76, ptr %38, align 8, !tbaa !19
  %77 = icmp eq ptr %76, null
  br i1 %77, label %78, label %83

78:                                               ; preds = %71
  %79 = load ptr, ptr @stderr, align 8, !tbaa !19
  %80 = tail call i64 @fwrite(ptr nonnull @.str.34.193, i64 29, i64 1, ptr %79) #38
  %81 = load ptr, ptr @stderr, align 8, !tbaa !19
  %82 = tail call i64 @fwrite(ptr nonnull @.str.35.194, i64 53, i64 1, ptr %81) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

83:                                               ; preds = %71
  %84 = zext i32 %72 to i64
  %85 = getelementptr inbounds %struct._Gappattern, ptr %76, i64 %84, i32 1
  store float 0.000000e+00, ptr %85, align 4, !tbaa !328
  %86 = getelementptr inbounds %struct._Gappattern, ptr %76, i64 %84
  store i32 %36, ptr %86, align 4, !tbaa !367
  %87 = add nuw nsw i32 %72, 1
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %struct._Gappattern, ptr %76, i64 %88
  store i32 -1, ptr %89, align 4, !tbaa !367
  %90 = getelementptr inbounds %struct._Gappattern, ptr %76, i64 %88, i32 1
  store float 0.000000e+00, ptr %90, align 4, !tbaa !328
  br label %95

91:                                               ; preds = %60
  %.lcssa2 = phi i64 [ %61, %60 ]
  %92 = and i64 %.lcssa2, 4294967295
  %93 = getelementptr inbounds %struct._Gappattern, ptr %54, i64 %92, i32 1
  %94 = load float, ptr %93, align 4, !tbaa !328
  br label %95

95:                                               ; preds = %91, %83
  %96 = phi float [ %94, %91 ], [ 0.000000e+00, %83 ]
  %97 = phi i64 [ %92, %91 ], [ %84, %83 ]
  %98 = phi ptr [ %54, %91 ], [ %76, %83 ]
  %99 = getelementptr inbounds %struct._Gappattern, ptr %98, i64 %97, i32 1
  %100 = fadd float %96, %31
  store float %100, ptr %99, align 4, !tbaa !328
  br label %101

101:                                              ; preds = %95, %48, %46
  %102 = phi i32 [ 1, %46 ], [ 0, %95 ], [ 0, %48 ]
  %103 = phi ptr [ %43, %46 ], [ %49, %95 ], [ %49, %48 ]
  %104 = phi i32 [ %47, %46 ], [ 0, %95 ], [ %36, %48 ]
  %105 = getelementptr inbounds ptr, ptr %38, i64 1
  %106 = add nuw i32 %39, 1
  %107 = icmp eq i32 %39, %4
  br i1 %107, label %108, label %35, !llvm.loop !480

108:                                              ; preds = %101, %27
  %109 = add nuw nsw i64 %28, 1
  %110 = icmp eq i64 %109, %11
  br i1 %110, label %22, label %27, !llvm.loop !481

111:                                              ; preds = %147, %24
  %112 = phi i64 [ 0, %24 ], [ %149, %147 ]
  %113 = getelementptr inbounds ptr, ptr %0, i64 %112
  %114 = load ptr, ptr %113, align 8, !tbaa !19
  %115 = icmp eq ptr %114, null
  br i1 %115, label %141, label %116

116:                                              ; preds = %111
  store i32 0, ptr %114, align 4, !tbaa !367
  %117 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 0, i32 1
  store float 0.000000e+00, ptr %117, align 4, !tbaa !328
  %118 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 1
  %119 = load i32, ptr %118, align 4, !tbaa !367
  %120 = icmp eq i32 %119, -1
  br i1 %120, label %132, label %121

121:                                              ; preds = %121, %116
  %122 = phi i64 [ %127, %121 ], [ 1, %116 ]
  %123 = phi float [ %126, %121 ], [ 0.000000e+00, %116 ]
  %124 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 %122, i32 1
  %125 = load float, ptr %124, align 4, !tbaa !328
  %126 = fadd float %125, %123
  %127 = add nuw nsw i64 %122, 1
  %128 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 %127
  %129 = load i32, ptr %128, align 4, !tbaa !367
  %130 = icmp eq i32 %129, -1
  br i1 %130, label %131, label %121, !llvm.loop !482

131:                                              ; preds = %121
  %.lcssa1 = phi float [ %126, %121 ]
  %.lcssa = phi i64 [ %127, %121 ]
  store float %.lcssa1, ptr %117, align 4, !tbaa !328
  br label %132

132:                                              ; preds = %131, %116
  %133 = phi float [ 0.000000e+00, %116 ], [ %.lcssa1, %131 ]
  %134 = phi i64 [ 1, %116 ], [ %.lcssa, %131 ]
  %135 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 %134
  %136 = fsub float 1.000000e+00, %133
  %137 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 %134, i32 1
  store float %136, ptr %137, align 4, !tbaa !328
  store i32 0, ptr %135, align 4, !tbaa !367
  %138 = add i64 %134, 1
  %139 = and i64 %138, 4294967295
  %140 = getelementptr inbounds %struct._Gappattern, ptr %114, i64 %139
  br label %147

141:                                              ; preds = %111
  %142 = tail call noalias dereferenceable_or_null(24) ptr @calloc(i64 noundef 3, i64 noundef 8) #41
  store ptr %142, ptr %113, align 8, !tbaa !19
  %143 = getelementptr inbounds %struct._Gappattern, ptr %142, i64 0, i32 1
  store float 0.000000e+00, ptr %143, align 4, !tbaa !328
  store i32 0, ptr %142, align 4, !tbaa !367
  %144 = getelementptr inbounds %struct._Gappattern, ptr %142, i64 1, i32 1
  store float 1.000000e+00, ptr %144, align 4, !tbaa !328
  %145 = getelementptr inbounds %struct._Gappattern, ptr %142, i64 1
  store i32 0, ptr %145, align 4, !tbaa !367
  %146 = getelementptr inbounds %struct._Gappattern, ptr %142, i64 2
  br label %147

147:                                              ; preds = %141, %132
  %148 = phi ptr [ %140, %132 ], [ %146, %141 ]
  store i32 -1, ptr %148, align 4, !tbaa !367
  %149 = add nuw nsw i64 %112, 1
  %150 = icmp eq i64 %149, %26
  br i1 %150, label %151, label %111, !llvm.loop !483

151:                                              ; preds = %147, %22
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @naivepairscore11(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #4 {
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #40
  %5 = shl i64 %4, 32
  %6 = add i64 %5, 4294967296
  %7 = ashr exact i64 %6, 32
  %8 = tail call noalias ptr @calloc(i64 noundef %7, i64 noundef 1) #41
  %9 = tail call noalias ptr @calloc(i64 noundef %7, i64 noundef 1) #41
  br label %10

10:                                               ; preds = %23, %3
  %11 = phi ptr [ %8, %3 ], [ %24, %23 ]
  %12 = phi ptr [ %9, %3 ], [ %25, %23 ]
  %13 = phi ptr [ %0, %3 ], [ %27, %23 ]
  %14 = phi ptr [ %1, %3 ], [ %26, %23 ]
  %15 = load i8, ptr %13, align 1, !tbaa !17
  switch i8 %15, label %19 [
    i8 0, label %28
    i8 45, label %16
  ]

16:                                               ; preds = %10
  %17 = load i8, ptr %14, align 1, !tbaa !17
  %18 = icmp eq i8 %17, 45
  br i1 %18, label %23, label %19

19:                                               ; preds = %16, %10
  %20 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 %15, ptr %11, align 1, !tbaa !17
  %21 = load i8, ptr %14, align 1, !tbaa !17
  %22 = getelementptr inbounds i8, ptr %12, i64 1
  store i8 %21, ptr %12, align 1, !tbaa !17
  br label %23

23:                                               ; preds = %19, %16
  %24 = phi ptr [ %20, %19 ], [ %11, %16 ]
  %25 = phi ptr [ %22, %19 ], [ %12, %16 ]
  %26 = getelementptr inbounds i8, ptr %14, i64 1
  %27 = getelementptr inbounds i8, ptr %13, i64 1
  br label %10, !llvm.loop !484

28:                                               ; preds = %10
  %.lcssa14 = phi ptr [ %11, %10 ]
  %.lcssa13 = phi ptr [ %12, %10 ]
  store i8 0, ptr %.lcssa14, align 1, !tbaa !17
  store i8 0, ptr %.lcssa13, align 1, !tbaa !17
  br label %29

29:                                               ; preds = %69, %28
  %30 = phi i32 [ 0, %28 ], [ %70, %69 ]
  %31 = phi ptr [ %8, %28 ], [ %71, %69 ]
  %32 = phi ptr [ %9, %28 ], [ %72, %69 ]
  %33 = load i8, ptr %31, align 1, !tbaa !17
  br label %35

34:                                               ; preds = %42
  %.lcssa2 = phi ptr [ %45, %42 ]
  %.lcssa1 = phi ptr [ %46, %42 ]
  %.lcssa = phi i8 [ %47, %42 ]
  br label %35, !llvm.loop !485

35:                                               ; preds = %34, %29
  %36 = phi i8 [ %33, %29 ], [ %.lcssa, %34 ]
  %37 = phi i32 [ %30, %29 ], [ %41, %34 ]
  %38 = phi ptr [ %31, %29 ], [ %.lcssa2, %34 ]
  %39 = phi ptr [ %32, %29 ], [ %.lcssa1, %34 ]
  switch i8 %36, label %49 [
    i8 0, label %73
    i8 45, label %40
  ]

40:                                               ; preds = %35
  %41 = add nsw i32 %37, %2
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi ptr [ %46, %42 ], [ %39, %40 ]
  %44 = phi ptr [ %45, %42 ], [ %38, %40 ]
  %45 = getelementptr inbounds i8, ptr %44, i64 1
  %46 = getelementptr inbounds i8, ptr %43, i64 1
  %47 = load i8, ptr %45, align 1, !tbaa !17
  %48 = icmp eq i8 %47, 45
  br i1 %48, label %42, label %34, !llvm.loop !486

49:                                               ; preds = %35
  %.lcssa9 = phi i8 [ %36, %35 ]
  %.lcssa7 = phi i32 [ %37, %35 ]
  %.lcssa5 = phi ptr [ %38, %35 ]
  %.lcssa3 = phi ptr [ %39, %35 ]
  %50 = load i8, ptr %.lcssa3, align 1, !tbaa !17
  %51 = icmp eq i8 %50, 45
  br i1 %51, label %52, label %59

52:                                               ; preds = %52, %49
  %53 = phi ptr [ %56, %52 ], [ %.lcssa3, %49 ]
  %54 = phi ptr [ %55, %52 ], [ %.lcssa5, %49 ]
  %55 = getelementptr inbounds i8, ptr %54, i64 1
  %56 = getelementptr inbounds i8, ptr %53, i64 1
  %57 = load i8, ptr %56, align 1, !tbaa !17
  %58 = icmp eq i8 %57, 45
  br i1 %58, label %52, label %67, !llvm.loop !487

59:                                               ; preds = %49
  %60 = getelementptr inbounds i8, ptr %.lcssa5, i64 1
  %61 = sext i8 %.lcssa9 to i64
  %62 = getelementptr inbounds i8, ptr %.lcssa3, i64 1
  %63 = sext i8 %50 to i64
  %64 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %61, i64 %63
  %65 = load i32, ptr %64, align 4, !tbaa !31
  %66 = add nsw i32 %65, %.lcssa7
  br label %69

67:                                               ; preds = %52
  %.lcssa12 = phi ptr [ %55, %52 ]
  %.lcssa11 = phi ptr [ %56, %52 ]
  %68 = add nsw i32 %.lcssa7, %2
  br label %69

69:                                               ; preds = %67, %59
  %70 = phi i32 [ %66, %59 ], [ %68, %67 ]
  %71 = phi ptr [ %60, %59 ], [ %.lcssa12, %67 ]
  %72 = phi ptr [ %62, %59 ], [ %.lcssa11, %67 ]
  br label %29, !llvm.loop !485

73:                                               ; preds = %35
  %.lcssa8 = phi i32 [ %37, %35 ]
  tail call void @free(ptr noundef %8) #35
  tail call void @free(ptr noundef %9) #35
  ret i32 %.lcssa8
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @backdp(ptr nocapture noundef readonly %0, float noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, i32 noundef %5, i32 %6, ptr nocapture noundef %7, ptr nocapture noundef %8, ptr nocapture noundef %9, ptr nocapture noundef %10, ptr nocapture noundef writeonly %11, i32 noundef %12, i32 noundef %13, ptr nocapture noundef readonly %14, ptr nocapture noundef readonly %15, ptr nocapture noundef %16, ptr nocapture noundef %17) #12 {
  %19 = load i32, ptr @penalty, align 4, !tbaa !31
  %20 = sitofp i32 %19 to float
  %21 = add i32 %5, -1
  %22 = icmp eq i32 %4, 0
  br i1 %22, label %43, label %23

23:                                               ; preds = %18
  %24 = load ptr, ptr %14, align 8, !tbaa !19
  %25 = load ptr, ptr %15, align 8, !tbaa !19
  %26 = sext i32 %21 to i64
  %27 = getelementptr inbounds i8, ptr %25, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !17
  %29 = sext i8 %28 to i64
  br label %30

30:                                               ; preds = %30, %23
  %31 = phi ptr [ %24, %23 ], [ %35, %30 ]
  %32 = phi ptr [ %9, %23 ], [ %41, %30 ]
  %33 = phi i32 [ %4, %23 ], [ %34, %30 ]
  %34 = add nsw i32 %33, -1
  %35 = getelementptr inbounds i8, ptr %31, i64 1
  %36 = load i8, ptr %31, align 1, !tbaa !17
  %37 = sext i8 %36 to i64
  %38 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %29, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !31
  %40 = sitofp i32 %39 to float
  %41 = getelementptr inbounds float, ptr %32, i64 1
  store float %40, ptr %32, align 4, !tbaa !167
  %42 = icmp eq i32 %34, 0
  br i1 %42, label %43, label %30, !llvm.loop !488

43:                                               ; preds = %30, %18
  %44 = add i32 %4, -1
  %45 = icmp eq i32 %5, 0
  br i1 %45, label %66, label %46

46:                                               ; preds = %43
  %47 = load ptr, ptr %15, align 8, !tbaa !19
  %48 = load ptr, ptr %14, align 8, !tbaa !19
  %49 = sext i32 %44 to i64
  %50 = getelementptr inbounds i8, ptr %48, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !17
  %52 = sext i8 %51 to i64
  br label %53

53:                                               ; preds = %53, %46
  %54 = phi ptr [ %47, %46 ], [ %58, %53 ]
  %55 = phi ptr [ %7, %46 ], [ %64, %53 ]
  %56 = phi i32 [ %5, %46 ], [ %57, %53 ]
  %57 = add nsw i32 %56, -1
  %58 = getelementptr inbounds i8, ptr %54, i64 1
  %59 = load i8, ptr %54, align 1, !tbaa !17
  %60 = sext i8 %59 to i64
  %61 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %52, i64 %60
  %62 = load i32, ptr %61, align 4, !tbaa !31
  %63 = sitofp i32 %62 to float
  %64 = getelementptr inbounds float, ptr %55, i64 1
  store float %63, ptr %55, align 4, !tbaa !167
  %65 = icmp eq i32 %57, 0
  br i1 %65, label %66, label %53, !llvm.loop !488

66:                                               ; preds = %53, %43
  %67 = load ptr, ptr @stderr, align 8, !tbaa !19
  %68 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.195, i32 noundef %12, i32 noundef %4) #36
  %69 = load ptr, ptr @stderr, align 8, !tbaa !19
  %70 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.1.196, i32 noundef %13, i32 noundef %5) #36
  tail call fastcc void @extendmseq(ptr noundef %16, ptr noundef %17, ptr noundef %14, ptr noundef %15, i32 noundef %12, i32 noundef %13, i32 noundef %4, i32 noundef %5) #39
  %71 = icmp sgt i32 %4, 1
  br i1 %71, label %72, label %75

72:                                               ; preds = %66
  %73 = sext i32 %21 to i64
  %74 = zext i32 %44 to i64
  br label %82

75:                                               ; preds = %82, %66
  %76 = icmp sgt i32 %5, 1
  br i1 %76, label %77, label %107

77:                                               ; preds = %75
  %78 = sext i32 %44 to i64
  %79 = getelementptr inbounds ptr, ptr %0, i64 %78
  %80 = load ptr, ptr %79, align 8, !tbaa !19
  %81 = zext i32 %21 to i64
  br label %97

82:                                               ; preds = %82, %72
  %83 = phi i64 [ 0, %72 ], [ %92, %82 ]
  %84 = getelementptr inbounds float, ptr %9, i64 %83
  %85 = load float, ptr %84, align 4, !tbaa !167
  %86 = fadd float %85, %20
  store float %86, ptr %84, align 4, !tbaa !167
  %87 = getelementptr inbounds ptr, ptr %0, i64 %83
  %88 = load ptr, ptr %87, align 8, !tbaa !19
  %89 = getelementptr inbounds float, ptr %88, i64 %73
  %90 = load float, ptr %89, align 4, !tbaa !167
  %91 = fadd float %90, %20
  store float %91, ptr %89, align 4, !tbaa !167
  %92 = add nuw nsw i64 %83, 1
  %93 = icmp eq i64 %92, %74
  br i1 %93, label %75, label %82, !llvm.loop !489

94:                                               ; preds = %97
  br i1 %76, label %95, label %107

95:                                               ; preds = %94
  %96 = zext i32 %21 to i64
  br label %112

97:                                               ; preds = %97, %77
  %98 = phi i64 [ 0, %77 ], [ %105, %97 ]
  %99 = getelementptr inbounds float, ptr %7, i64 %98
  %100 = load float, ptr %99, align 4, !tbaa !167
  %101 = fadd float %100, %20
  store float %101, ptr %99, align 4, !tbaa !167
  %102 = getelementptr inbounds float, ptr %80, i64 %98
  %103 = load float, ptr %102, align 4, !tbaa !167
  %104 = fadd float %103, %20
  store float %104, ptr %102, align 4, !tbaa !167
  %105 = add nuw nsw i64 %98, 1
  %106 = icmp eq i64 %105, %81
  br i1 %106, label %94, label %97, !llvm.loop !490

107:                                              ; preds = %112, %94, %75
  %108 = icmp sgt i32 %5, 0
  br i1 %108, label %109, label %121

109:                                              ; preds = %107
  %110 = zext i32 %5 to i64
  %111 = shl nuw nsw i64 %110, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %10, i8 0, i64 %111, i1 false), !tbaa !167
  br label %121

112:                                              ; preds = %112, %95
  %113 = phi i64 [ %96, %95 ], [ %116, %112 ]
  %114 = getelementptr inbounds float, ptr %7, i64 %113
  %115 = load float, ptr %114, align 4, !tbaa !167
  %116 = add nsw i64 %113, -1
  %117 = and i64 %116, 4294967295
  %118 = getelementptr inbounds float, ptr %10, i64 %117
  store float %115, ptr %118, align 4, !tbaa !167
  %119 = getelementptr inbounds i32, ptr %11, i64 %113
  store i32 0, ptr %119, align 4, !tbaa !31
  %120 = icmp ugt i64 %113, 1
  br i1 %120, label %112, label %107, !llvm.loop !491

121:                                              ; preds = %109, %107
  br i1 %71, label %122, label %240

122:                                              ; preds = %121
  %123 = add nsw i32 %4, -2
  %124 = getelementptr i32, ptr %11, i64 -2
  %125 = getelementptr float, ptr %10, i64 -2
  %126 = sext i32 %21 to i64
  %127 = sext i32 %5 to i64
  %128 = getelementptr float, ptr %125, i64 %127
  %129 = getelementptr i32, ptr %124, i64 %127
  %130 = add i32 %5, -2
  %131 = zext i32 %130 to i64
  %132 = zext i32 %123 to i64
  br label %133

133:                                              ; preds = %235, %122
  %134 = phi i64 [ %132, %122 ], [ %238, %235 ]
  %135 = phi ptr [ %8, %122 ], [ %136, %235 ]
  %136 = phi ptr [ %7, %122 ], [ %135, %235 ]
  %137 = phi i32 [ %12, %122 ], [ %237, %235 ]
  %138 = phi i32 [ %13, %122 ], [ %236, %235 ]
  %139 = trunc i64 %134 to i32
  %140 = add nuw nsw i64 %134, 1
  %141 = getelementptr inbounds float, ptr %9, i64 %140
  %142 = load float, ptr %141, align 4, !tbaa !167
  %143 = getelementptr inbounds float, ptr %136, i64 %126
  store float %142, ptr %143, align 4, !tbaa !167
  br i1 %45, label %144, label %148

144:                                              ; preds = %133
  %145 = getelementptr inbounds float, ptr %9, i64 %134
  %146 = load float, ptr %145, align 4, !tbaa !167
  %147 = getelementptr inbounds float, ptr %135, i64 %126
  store float %146, ptr %147, align 4, !tbaa !167
  br label %235

148:                                              ; preds = %133
  %149 = load ptr, ptr %15, align 8, !tbaa !19
  %150 = load ptr, ptr %14, align 8, !tbaa !19
  %151 = getelementptr inbounds i8, ptr %150, i64 %134
  %152 = load i8, ptr %151, align 1, !tbaa !17
  %153 = sext i8 %152 to i64
  br label %154

154:                                              ; preds = %154, %148
  %155 = phi ptr [ %149, %148 ], [ %159, %154 ]
  %156 = phi ptr [ %135, %148 ], [ %165, %154 ]
  %157 = phi i32 [ %5, %148 ], [ %158, %154 ]
  %158 = add nsw i32 %157, -1
  %159 = getelementptr inbounds i8, ptr %155, i64 1
  %160 = load i8, ptr %155, align 1, !tbaa !17
  %161 = sext i8 %160 to i64
  %162 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %153, i64 %161
  %163 = load i32, ptr %162, align 4, !tbaa !31
  %164 = sitofp i32 %163 to float
  %165 = getelementptr inbounds float, ptr %156, i64 1
  store float %164, ptr %156, align 4, !tbaa !167
  %166 = icmp eq i32 %158, 0
  br i1 %166, label %167, label %154, !llvm.loop !488

167:                                              ; preds = %154
  %168 = getelementptr inbounds float, ptr %9, i64 %134
  %169 = load float, ptr %168, align 4, !tbaa !167
  %170 = getelementptr inbounds float, ptr %135, i64 %126
  store float %169, ptr %170, align 4, !tbaa !167
  br i1 %76, label %171, label %235

171:                                              ; preds = %167
  %172 = getelementptr inbounds float, ptr %136, i64 %127
  %173 = getelementptr inbounds float, ptr %135, i64 %127
  %174 = getelementptr inbounds float, ptr %173, i64 -2
  %175 = load float, ptr %143, align 4, !tbaa !167
  %176 = add nsw i32 %139, -1
  %177 = getelementptr inbounds float, ptr %2, i64 %134
  %178 = getelementptr inbounds ptr, ptr %0, i64 %134
  br label %179

179:                                              ; preds = %225, %171
  %180 = phi i64 [ %131, %171 ], [ %233, %225 ]
  %181 = phi ptr [ %172, %171 ], [ %188, %225 ]
  %182 = phi ptr [ %174, %171 ], [ %232, %225 ]
  %183 = phi ptr [ %128, %171 ], [ %230, %225 ]
  %184 = phi ptr [ %129, %171 ], [ %231, %225 ]
  %185 = phi float [ %175, %171 ], [ %194, %225 ]
  %186 = phi i32 [ %137, %171 ], [ %227, %225 ]
  %187 = phi i32 [ %138, %171 ], [ %226, %225 ]
  %188 = getelementptr inbounds float, ptr %181, i64 -1
  %189 = load float, ptr %188, align 4, !tbaa !167
  %190 = fadd float %185, %20
  %191 = fcmp ogt float %190, %189
  %192 = select i1 %191, float %190, float %189
  %193 = fcmp oge float %189, %185
  %194 = select i1 %193, float %189, float %185
  %195 = load float, ptr %183, align 4, !tbaa !167
  %196 = fadd float %195, %20
  %197 = fcmp ogt float %196, %192
  %198 = select i1 %197, float %196, float %192
  %199 = fcmp ult float %189, %195
  br i1 %199, label %201, label %200

200:                                              ; preds = %179
  store float %189, ptr %183, align 4, !tbaa !167
  store i32 %176, ptr %184, align 4, !tbaa !31
  br label %201

201:                                              ; preds = %200, %179
  %202 = load float, ptr %177, align 4, !tbaa !167
  %203 = getelementptr inbounds float, ptr %3, i64 %180
  %204 = load float, ptr %203, align 4, !tbaa !167
  %205 = fcmp olt float %202, %204
  %206 = select i1 %205, float %202, float %204
  %207 = fadd float %198, %206
  %208 = load ptr, ptr %178, align 8, !tbaa !19
  %209 = getelementptr inbounds float, ptr %208, i64 %180
  store float %207, ptr %209, align 4, !tbaa !167
  %210 = fcmp oeq float %207, %1
  %211 = sext i32 %186 to i64
  %212 = icmp slt i64 %134, %211
  %213 = select i1 %210, i1 %212, i1 false
  %214 = sext i32 %187 to i64
  %215 = icmp slt i64 %180, %214
  %216 = select i1 %213, i1 %215, i1 false
  br i1 %216, label %217, label %225

217:                                              ; preds = %201
  %218 = load ptr, ptr @stderr, align 8, !tbaa !19
  %219 = tail call i64 @fwrite(ptr nonnull @.str.2.197, i64 5, i64 1, ptr %218) #38
  %220 = trunc i64 %180 to i32
  tail call fastcc void @extendmseq(ptr noundef %16, ptr noundef %17, ptr noundef nonnull %14, ptr noundef nonnull %15, i32 noundef %139, i32 noundef %220, i32 noundef %186, i32 noundef %187) #39
  %221 = load ptr, ptr %16, align 8, !tbaa !19
  %222 = getelementptr inbounds i8, ptr %221, i64 -1
  store ptr %222, ptr %16, align 8, !tbaa !19
  store i8 117, ptr %222, align 1, !tbaa !17
  %223 = load ptr, ptr %17, align 8, !tbaa !19
  %224 = getelementptr inbounds i8, ptr %223, i64 -1
  store ptr %224, ptr %17, align 8, !tbaa !19
  store i8 117, ptr %224, align 1, !tbaa !17
  br label %225

225:                                              ; preds = %217, %201
  %226 = phi i32 [ %220, %217 ], [ %187, %201 ]
  %227 = phi i32 [ %139, %217 ], [ %186, %201 ]
  %228 = load float, ptr %182, align 4, !tbaa !167
  %229 = fadd float %198, %228
  store float %229, ptr %182, align 4, !tbaa !167
  %230 = getelementptr inbounds float, ptr %183, i64 -1
  %231 = getelementptr inbounds i32, ptr %184, i64 -1
  %232 = getelementptr inbounds float, ptr %182, i64 -1
  %233 = add nsw i64 %180, -1
  %234 = icmp sgt i64 %180, 0
  br i1 %234, label %179, label %235, !llvm.loop !492

235:                                              ; preds = %225, %167, %144
  %236 = phi i32 [ %138, %167 ], [ %138, %144 ], [ %226, %225 ]
  %237 = phi i32 [ %137, %167 ], [ %137, %144 ], [ %227, %225 ]
  %238 = add nsw i64 %134, -1
  %239 = icmp sgt i64 %134, 0
  br i1 %239, label %133, label %240, !llvm.loop !493

240:                                              ; preds = %235, %121
  %241 = phi i32 [ %13, %121 ], [ %236, %235 ]
  %242 = phi i32 [ %12, %121 ], [ %237, %235 ]
  tail call fastcc void @extendmseq(ptr noundef %16, ptr noundef %17, ptr noundef %14, ptr noundef %15, i32 noundef -1, i32 noundef -1, i32 noundef %242, i32 noundef %241) #39
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @extendmseq(ptr nocapture noundef %0, ptr nocapture noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) unnamed_addr #12 {
  %9 = load ptr, ptr @stderr, align 8, !tbaa !19
  %10 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef nonnull @.str.13.198, i32 noundef %4, i32 noundef %6) #36
  %11 = load ptr, ptr @stderr, align 8, !tbaa !19
  %12 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %11, ptr noundef nonnull @.str.14.199, i32 noundef %5, i32 noundef %7) #36
  %13 = xor i32 %4, -1
  %14 = add i32 %13, %6
  %15 = load ptr, ptr @stderr, align 8, !tbaa !19
  %16 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %15, ptr noundef nonnull @.str.15.200, i32 noundef %14) #36
  %17 = icmp sgt i32 %14, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %8
  %19 = zext i32 %14 to i64
  %20 = sext i32 %4 to i64
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi i64 [ %19, %18 ], [ %24, %21 ]
  %23 = load ptr, ptr %2, align 8, !tbaa !19
  %24 = add nsw i64 %22, -1
  %25 = add nsw i64 %22, %20
  %26 = getelementptr inbounds i8, ptr %23, i64 %25
  %27 = load i8, ptr %26, align 1, !tbaa !17
  %28 = load ptr, ptr %0, align 8, !tbaa !19
  %29 = getelementptr inbounds i8, ptr %28, i64 -1
  store ptr %29, ptr %0, align 8, !tbaa !19
  store i8 %27, ptr %29, align 1, !tbaa !17
  %30 = load ptr, ptr %1, align 8, !tbaa !19
  %31 = getelementptr inbounds i8, ptr %30, i64 -1
  store ptr %31, ptr %1, align 8, !tbaa !19
  store i8 45, ptr %31, align 1, !tbaa !17
  %32 = icmp ugt i64 %22, 1
  br i1 %32, label %21, label %33, !llvm.loop !494

33:                                               ; preds = %21, %8
  %34 = xor i32 %5, -1
  %35 = add i32 %34, %7
  %36 = load ptr, ptr @stderr, align 8, !tbaa !19
  %37 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef nonnull @.str.15.200, i32 noundef %35) #36
  %38 = icmp sgt i32 %35, 0
  br i1 %38, label %39, label %54

39:                                               ; preds = %33
  %40 = zext i32 %35 to i64
  %41 = sext i32 %5 to i64
  br label %42

42:                                               ; preds = %42, %39
  %43 = phi i64 [ %40, %39 ], [ %47, %42 ]
  %44 = load ptr, ptr %0, align 8, !tbaa !19
  %45 = getelementptr inbounds i8, ptr %44, i64 -1
  store ptr %45, ptr %0, align 8, !tbaa !19
  store i8 45, ptr %45, align 1, !tbaa !17
  %46 = load ptr, ptr %3, align 8, !tbaa !19
  %47 = add nsw i64 %43, -1
  %48 = add nsw i64 %43, %41
  %49 = getelementptr inbounds i8, ptr %46, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !17
  %51 = load ptr, ptr %1, align 8, !tbaa !19
  %52 = getelementptr inbounds i8, ptr %51, i64 -1
  store ptr %52, ptr %1, align 8, !tbaa !19
  store i8 %50, ptr %52, align 1, !tbaa !17
  %53 = icmp ugt i64 %43, 1
  br i1 %53, label %42, label %54, !llvm.loop !495

54:                                               ; preds = %42, %33
  %55 = or i32 %5, %4
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %57, label %84

57:                                               ; preds = %54
  %58 = load ptr, ptr %2, align 8, !tbaa !19
  %59 = zext i32 %4 to i64
  %60 = getelementptr inbounds i8, ptr %58, i64 %59
  %61 = load i8, ptr %60, align 1, !tbaa !17
  %62 = load ptr, ptr %0, align 8, !tbaa !19
  %63 = getelementptr inbounds i8, ptr %62, i64 -1
  store ptr %63, ptr %0, align 8, !tbaa !19
  store i8 %61, ptr %63, align 1, !tbaa !17
  %64 = load ptr, ptr %3, align 8, !tbaa !19
  %65 = zext i32 %5 to i64
  %66 = getelementptr inbounds i8, ptr %64, i64 %65
  %67 = load i8, ptr %66, align 1, !tbaa !17
  %68 = load ptr, ptr %1, align 8, !tbaa !19
  %69 = getelementptr inbounds i8, ptr %68, i64 -1
  store ptr %69, ptr %1, align 8, !tbaa !19
  store i8 %67, ptr %69, align 1, !tbaa !17
  %70 = load ptr, ptr @stderr, align 8, !tbaa !19
  %71 = load ptr, ptr %2, align 8, !tbaa !19
  %72 = getelementptr inbounds i8, ptr %71, i64 %59
  %73 = load i8, ptr %72, align 1, !tbaa !17
  %74 = sext i8 %73 to i32
  %75 = load ptr, ptr %0, align 8, !tbaa !19
  %76 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %70, ptr noundef nonnull @.str.16.201, i32 noundef %74, ptr noundef %75) #36
  %77 = load ptr, ptr @stderr, align 8, !tbaa !19
  %78 = load ptr, ptr %3, align 8, !tbaa !19
  %79 = getelementptr inbounds i8, ptr %78, i64 %65
  %80 = load i8, ptr %79, align 1, !tbaa !17
  %81 = sext i8 %80 to i32
  %82 = load ptr, ptr %1, align 8, !tbaa !19
  %83 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %77, ptr noundef nonnull @.str.17.202, i32 noundef %81, ptr noundef %82) #36
  br label %84

84:                                               ; preds = %57, %54
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal float @MSalign11(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #4 {
  %4 = load i32, ptr @penalty, align 4, !tbaa !31
  %5 = sitofp i32 %4 to float
  %6 = load i32, ptr @MSalign11.orlgth1, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %3
  %9 = load i32, ptr @njob, align 4, !tbaa !31
  %10 = tail call ptr @AllocateCharMtx(i32 noundef %9, i32 noundef 0) #35
  store ptr %10, ptr @MSalign11.mseq1, align 8, !tbaa !19
  %11 = load i32, ptr @njob, align 4, !tbaa !31
  %12 = tail call ptr @AllocateCharMtx(i32 noundef %11, i32 noundef 0) #35
  store ptr %12, ptr @MSalign11.mseq2, align 8, !tbaa !19
  %13 = load i32, ptr @MSalign11.orlgth1, align 4
  br label %14

14:                                               ; preds = %8, %3
  %15 = phi i32 [ %13, %8 ], [ %6, %3 ]
  %16 = load ptr, ptr %0, align 8, !tbaa !19
  %17 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %16) #40
  %18 = trunc i64 %17 to i32
  %19 = load ptr, ptr %1, align 8, !tbaa !19
  %20 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %19) #40
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %15, %18
  %23 = load i32, ptr @MSalign11.orlgth2, align 4
  %24 = icmp slt i32 %23, %21
  %25 = select i1 %22, i1 true, i1 %24
  br i1 %25, label %26, label %78

26:                                               ; preds = %14
  %27 = icmp sgt i32 %15, 0
  %28 = icmp sgt i32 %23, 0
  %29 = select i1 %27, i1 %28, i1 false
  br i1 %29, label %30, label %45

30:                                               ; preds = %26
  %31 = load ptr, ptr @MSalign11.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %31) #35
  %32 = load ptr, ptr @MSalign11.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %32) #35
  %33 = load ptr, ptr @MSalign11.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %33) #35
  %34 = load ptr, ptr @MSalign11.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %34) #35
  %35 = load ptr, ptr @MSalign11.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %35) #35
  tail call void @FreeFloatVec(ptr noundef null) #35
  tail call void @FreeFloatVec(ptr noundef null) #35
  %36 = load ptr, ptr @MSalign11.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %36) #35
  %37 = load ptr, ptr @MSalign11.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %37) #35
  %38 = load ptr, ptr @MSalign11.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %38) #35
  %39 = load ptr, ptr @MSalign11.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %39) #35
  %40 = load ptr, ptr @MSalign11.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %40) #35
  %41 = load ptr, ptr @MSalign11.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %41) #35
  %42 = load ptr, ptr @MSalign11.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %42) #35
  %43 = load i32, ptr @MSalign11.orlgth1, align 4, !tbaa !31
  %44 = load i32, ptr @MSalign11.orlgth2, align 4, !tbaa !31
  br label %45

45:                                               ; preds = %30, %26
  %46 = phi i32 [ %44, %30 ], [ %23, %26 ]
  %47 = phi i32 [ %43, %30 ], [ %15, %26 ]
  %48 = sitofp i32 %18 to double
  %49 = fmul double %48, 1.300000e+00
  %50 = fptosi double %49 to i32
  %51 = tail call i32 @llvm.smax.i32(i32 %47, i32 %50)
  %52 = add nuw nsw i32 %51, 100
  %53 = sitofp i32 %21 to double
  %54 = fmul double %53, 1.300000e+00
  %55 = fptosi double %54 to i32
  %56 = tail call i32 @llvm.smax.i32(i32 %46, i32 %55)
  %57 = add nuw nsw i32 %56, 100
  %58 = add nuw nsw i32 %56, 102
  %59 = tail call ptr @AllocateFloatVec(i32 noundef %58) #35
  store ptr %59, ptr @MSalign11.w1, align 8, !tbaa !19
  %60 = tail call ptr @AllocateFloatVec(i32 noundef %58) #35
  store ptr %60, ptr @MSalign11.w2, align 8, !tbaa !19
  %61 = tail call ptr @AllocateFloatVec(i32 noundef %58) #35
  store ptr %61, ptr @MSalign11.match, align 8, !tbaa !19
  %62 = add nuw nsw i32 %51, 102
  %63 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  store ptr %63, ptr @MSalign11.initverticalw, align 8, !tbaa !19
  %64 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  store ptr %64, ptr @MSalign11.lastverticalw, align 8, !tbaa !19
  %65 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  %66 = tail call ptr @AllocateFloatVec(i32 noundef %58) #35
  store ptr %66, ptr @MSalign11.m, align 8, !tbaa !19
  %67 = tail call ptr @AllocateIntVec(i32 noundef %58) #35
  store ptr %67, ptr @MSalign11.mp, align 8, !tbaa !19
  %68 = tail call ptr @AllocateFloatVec(i32 noundef %58) #35
  %69 = load i32, ptr @njob, align 4, !tbaa !31
  %70 = add nsw i32 %57, %52
  %71 = tail call ptr @AllocateCharMtx(i32 noundef %69, i32 noundef %70) #35
  store ptr %71, ptr @MSalign11.mseq, align 8, !tbaa !19
  %72 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %62) #35
  store ptr %72, ptr @MSalign11.cpmx1, align 8, !tbaa !19
  %73 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %58) #35
  store ptr %73, ptr @MSalign11.cpmx2, align 8, !tbaa !19
  %74 = tail call i32 @llvm.smax.i32(i32 %52, i32 %57)
  %75 = add nuw nsw i32 %74, 2
  %76 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %75) #35
  store ptr %76, ptr @MSalign11.floatwork, align 8, !tbaa !19
  %77 = tail call ptr @AllocateIntMtx(i32 noundef 26, i32 noundef %75) #35
  store ptr %77, ptr @MSalign11.intwork, align 8, !tbaa !19
  store i32 %51, ptr @MSalign11.orlgth1, align 4, !tbaa !31
  store i32 %56, ptr @MSalign11.orlgth2, align 4, !tbaa !31
  br label %78

78:                                               ; preds = %45, %14
  %79 = phi i32 [ %56, %45 ], [ %23, %14 ]
  %80 = phi i32 [ %51, %45 ], [ %15, %14 ]
  %81 = phi ptr [ %65, %45 ], [ null, %14 ]
  %82 = phi ptr [ %68, %45 ], [ null, %14 ]
  %83 = load ptr, ptr @MSalign11.mseq, align 8, !tbaa !19
  %84 = load ptr, ptr %83, align 8, !tbaa !19
  %85 = load ptr, ptr @MSalign11.mseq1, align 8, !tbaa !19
  store ptr %84, ptr %85, align 8, !tbaa !19
  %86 = getelementptr inbounds ptr, ptr %83, i64 1
  %87 = load ptr, ptr %86, align 8, !tbaa !19
  %88 = load ptr, ptr @MSalign11.mseq2, align 8, !tbaa !19
  store ptr %87, ptr %88, align 8, !tbaa !19
  %89 = load i32, ptr @commonAlloc1, align 4
  %90 = icmp sgt i32 %80, %89
  %91 = load i32, ptr @commonAlloc2, align 4
  %92 = icmp sgt i32 %79, %91
  %93 = select i1 %90, i1 true, i1 %92
  br i1 %93, label %94, label %116

94:                                               ; preds = %78
  %95 = icmp ne i32 %89, 0
  %96 = icmp ne i32 %91, 0
  %97 = select i1 %95, i1 %96, i1 false
  br i1 %97, label %98, label %105

98:                                               ; preds = %94
  %99 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %99) #35
  %100 = load ptr, ptr @MSalign11.WMMTX, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %100) #35
  %101 = load i32, ptr @MSalign11.orlgth1, align 4
  %102 = load i32, ptr @commonAlloc1, align 4
  %103 = load i32, ptr @MSalign11.orlgth2, align 4
  %104 = load i32, ptr @commonAlloc2, align 4
  br label %105

105:                                              ; preds = %98, %94
  %106 = phi i32 [ %104, %98 ], [ %91, %94 ]
  %107 = phi i32 [ %103, %98 ], [ %79, %94 ]
  %108 = phi i32 [ %102, %98 ], [ %89, %94 ]
  %109 = phi i32 [ %101, %98 ], [ %80, %94 ]
  %110 = tail call i32 @llvm.smax.i32(i32 %109, i32 %108)
  %111 = tail call i32 @llvm.smax.i32(i32 %107, i32 %106)
  %112 = add nsw i32 %110, 10
  %113 = add nsw i32 %111, 10
  %114 = tail call ptr @AllocateIntMtx(i32 noundef %112, i32 noundef %113) #35
  store ptr %114, ptr @commonIP, align 8, !tbaa !19
  %115 = tail call ptr @AllocateFloatMtx(i32 noundef %112, i32 noundef %113) #35
  store ptr %115, ptr @MSalign11.WMMTX, align 8, !tbaa !19
  store i32 %110, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %111, ptr @commonAlloc2, align 4, !tbaa !31
  br label %116

116:                                              ; preds = %105, %78
  %117 = load ptr, ptr @commonIP, align 8, !tbaa !19
  store ptr %117, ptr @MSalign11.ijp, align 8, !tbaa !19
  %118 = load ptr, ptr @MSalign11.w1, align 8, !tbaa !19
  %119 = load ptr, ptr @MSalign11.w2, align 8, !tbaa !19
  %120 = load ptr, ptr @MSalign11.initverticalw, align 8, !tbaa !19
  %121 = icmp eq i32 %18, 0
  br i1 %121, label %140, label %122

122:                                              ; preds = %116
  %123 = load ptr, ptr %0, align 8, !tbaa !19
  %124 = load ptr, ptr %1, align 8, !tbaa !19
  %125 = load i8, ptr %124, align 1, !tbaa !17
  %126 = sext i8 %125 to i64
  br label %127

127:                                              ; preds = %127, %122
  %128 = phi ptr [ %123, %122 ], [ %132, %127 ]
  %129 = phi ptr [ %120, %122 ], [ %138, %127 ]
  %130 = phi i32 [ %18, %122 ], [ %131, %127 ]
  %131 = add nsw i32 %130, -1
  %132 = getelementptr inbounds i8, ptr %128, i64 1
  %133 = load i8, ptr %128, align 1, !tbaa !17
  %134 = sext i8 %133 to i64
  %135 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %126, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !31
  %137 = sitofp i32 %136 to float
  %138 = getelementptr inbounds float, ptr %129, i64 1
  store float %137, ptr %129, align 4, !tbaa !167
  %139 = icmp eq i32 %131, 0
  br i1 %139, label %140, label %127, !llvm.loop !488

140:                                              ; preds = %127, %116
  %141 = icmp eq i32 %21, 0
  br i1 %141, label %160, label %142

142:                                              ; preds = %140
  %143 = load ptr, ptr %1, align 8, !tbaa !19
  %144 = load ptr, ptr %0, align 8, !tbaa !19
  %145 = load i8, ptr %144, align 1, !tbaa !17
  %146 = sext i8 %145 to i64
  br label %147

147:                                              ; preds = %147, %142
  %148 = phi ptr [ %143, %142 ], [ %152, %147 ]
  %149 = phi ptr [ %118, %142 ], [ %158, %147 ]
  %150 = phi i32 [ %21, %142 ], [ %151, %147 ]
  %151 = add nsw i32 %150, -1
  %152 = getelementptr inbounds i8, ptr %148, i64 1
  %153 = load i8, ptr %148, align 1, !tbaa !17
  %154 = sext i8 %153 to i64
  %155 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %146, i64 %154
  %156 = load i32, ptr %155, align 4, !tbaa !31
  %157 = sitofp i32 %156 to float
  %158 = getelementptr inbounds float, ptr %149, i64 1
  store float %157, ptr %149, align 4, !tbaa !167
  %159 = icmp eq i32 %151, 0
  br i1 %159, label %160, label %147, !llvm.loop !488

160:                                              ; preds = %147, %140
  %161 = load float, ptr %120, align 4, !tbaa !167
  %162 = load ptr, ptr @MSalign11.WMMTX, align 8, !tbaa !19
  %163 = load ptr, ptr %162, align 8, !tbaa !19
  store float %161, ptr %163, align 4, !tbaa !167
  %164 = load float, ptr %120, align 4, !tbaa !167
  store float %164, ptr %82, align 4, !tbaa !167
  %165 = icmp slt i32 %18, 1
  br i1 %165, label %183, label %166

166:                                              ; preds = %160
  %167 = add i64 %17, 1
  %168 = and i64 %167, 4294967295
  br label %169

169:                                              ; preds = %180, %166
  %170 = phi i64 [ 1, %166 ], [ %181, %180 ]
  %171 = getelementptr inbounds float, ptr %120, i64 %170
  %172 = load float, ptr %171, align 4, !tbaa !167
  %173 = fadd float %172, %5
  store float %173, ptr %171, align 4, !tbaa !167
  %174 = getelementptr inbounds ptr, ptr %162, i64 %170
  %175 = load ptr, ptr %174, align 8, !tbaa !19
  store float %173, ptr %175, align 4, !tbaa !167
  %176 = load float, ptr %82, align 4, !tbaa !167
  %177 = load float, ptr %171, align 4, !tbaa !167
  %178 = fcmp olt float %176, %177
  br i1 %178, label %179, label %180

179:                                              ; preds = %169
  store float %177, ptr %82, align 4, !tbaa !167
  br label %180

180:                                              ; preds = %179, %169
  %181 = add nuw nsw i64 %170, 1
  %182 = icmp eq i64 %181, %168
  br i1 %182, label %183, label %169, !llvm.loop !496

183:                                              ; preds = %180, %160
  %184 = load float, ptr %118, align 4, !tbaa !167
  store float %184, ptr %81, align 4, !tbaa !167
  %185 = icmp slt i32 %21, 1
  br i1 %185, label %217, label %186

186:                                              ; preds = %183
  %187 = add i64 %20, 1
  %188 = and i64 %187, 4294967295
  br label %195

189:                                              ; preds = %205
  br i1 %185, label %217, label %190

190:                                              ; preds = %189
  %191 = load ptr, ptr @MSalign11.m, align 8, !tbaa !19
  %192 = load ptr, ptr @MSalign11.mp, align 8, !tbaa !19
  %193 = add i64 %20, 1
  %194 = and i64 %193, 4294967295
  br label %208

195:                                              ; preds = %205, %186
  %196 = phi i64 [ 1, %186 ], [ %206, %205 ]
  %197 = getelementptr inbounds float, ptr %118, i64 %196
  %198 = load float, ptr %197, align 4, !tbaa !167
  %199 = fadd float %198, %5
  store float %199, ptr %197, align 4, !tbaa !167
  %200 = getelementptr inbounds float, ptr %163, i64 %196
  store float %199, ptr %200, align 4, !tbaa !167
  %201 = load float, ptr %81, align 4, !tbaa !167
  %202 = load float, ptr %197, align 4, !tbaa !167
  %203 = fcmp olt float %201, %202
  br i1 %203, label %204, label %205

204:                                              ; preds = %195
  store float %202, ptr %81, align 4, !tbaa !167
  br label %205

205:                                              ; preds = %204, %195
  %206 = add nuw nsw i64 %196, 1
  %207 = icmp eq i64 %206, %188
  br i1 %207, label %189, label %195, !llvm.loop !497

208:                                              ; preds = %208, %190
  %209 = phi i64 [ 1, %190 ], [ %215, %208 ]
  %210 = add nsw i64 %209, -1
  %211 = getelementptr inbounds float, ptr %118, i64 %210
  %212 = load float, ptr %211, align 4, !tbaa !167
  %213 = getelementptr inbounds float, ptr %191, i64 %209
  store float %212, ptr %213, align 4, !tbaa !167
  %214 = getelementptr inbounds i32, ptr %192, i64 %209
  store i32 0, ptr %214, align 4, !tbaa !31
  %215 = add nuw nsw i64 %209, 1
  %216 = icmp eq i64 %215, %194
  br i1 %216, label %217, label %208, !llvm.loop !498

217:                                              ; preds = %208, %189, %183
  %218 = add nsw i32 %21, -1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds float, ptr %118, i64 %219
  %221 = load float, ptr %220, align 4, !tbaa !167
  %222 = load ptr, ptr @MSalign11.lastverticalw, align 8, !tbaa !19
  store float %221, ptr %222, align 4, !tbaa !167
  br i1 %165, label %351, label %223

223:                                              ; preds = %217
  %224 = shl i64 %20, 32
  %225 = ashr exact i64 %224, 32
  %226 = add i64 %20, 1
  %227 = add i64 %17, 1
  %228 = and i64 %227, 4294967295
  %229 = and i64 %226, 4294967295
  br label %234

230:                                              ; preds = %343
  %.lcssa2 = phi float [ %344, %343 ]
  %.lcssa1 = phi ptr [ %347, %343 ]
  %.lcssa = phi ptr [ %237, %343 ]
  %231 = icmp sgt i32 %18, 0
  br i1 %231, label %232, label %351

232:                                              ; preds = %230
  %233 = and i64 %17, 4294967295
  br label %362

234:                                              ; preds = %343, %223
  %235 = phi i64 [ 1, %223 ], [ %349, %343 ]
  %236 = phi float [ 0.000000e+00, %223 ], [ %344, %343 ]
  %237 = phi ptr [ %119, %223 ], [ %238, %343 ]
  %238 = phi ptr [ %118, %223 ], [ %237, %343 ]
  %239 = load ptr, ptr @MSalign11.initverticalw, align 8, !tbaa !19
  %240 = add nsw i64 %235, -1
  %241 = getelementptr inbounds float, ptr %239, i64 %240
  %242 = load float, ptr %241, align 4, !tbaa !167
  store float %242, ptr %238, align 4, !tbaa !167
  br i1 %141, label %262, label %243

243:                                              ; preds = %234
  %244 = load ptr, ptr %1, align 8, !tbaa !19
  %245 = load ptr, ptr %0, align 8, !tbaa !19
  %246 = getelementptr inbounds i8, ptr %245, i64 %235
  %247 = load i8, ptr %246, align 1, !tbaa !17
  %248 = sext i8 %247 to i64
  br label %249

249:                                              ; preds = %249, %243
  %250 = phi ptr [ %244, %243 ], [ %254, %249 ]
  %251 = phi ptr [ %237, %243 ], [ %260, %249 ]
  %252 = phi i32 [ %21, %243 ], [ %253, %249 ]
  %253 = add nsw i32 %252, -1
  %254 = getelementptr inbounds i8, ptr %250, i64 1
  %255 = load i8, ptr %250, align 1, !tbaa !17
  %256 = sext i8 %255 to i64
  %257 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %248, i64 %256
  %258 = load i32, ptr %257, align 4, !tbaa !31
  %259 = sitofp i32 %258 to float
  %260 = getelementptr inbounds float, ptr %251, i64 1
  store float %259, ptr %251, align 4, !tbaa !167
  %261 = icmp eq i32 %253, 0
  br i1 %261, label %262, label %249, !llvm.loop !488

262:                                              ; preds = %249, %234
  %263 = getelementptr inbounds float, ptr %239, i64 %235
  %264 = load float, ptr %263, align 4, !tbaa !167
  store float %264, ptr %237, align 4, !tbaa !167
  %265 = load float, ptr %238, align 4, !tbaa !167
  store float %265, ptr @MSalign11.mi, align 4, !tbaa !167
  store i32 0, ptr @MSalign11.mpi, align 4, !tbaa !31
  %266 = getelementptr inbounds float, ptr %81, i64 %235
  store float %264, ptr %266, align 4, !tbaa !167
  %267 = load ptr, ptr @stderr, align 8, !tbaa !19
  %268 = load float, ptr %237, align 4, !tbaa !167
  %269 = fpext float %268 to double
  %270 = fpext float %264 to double
  %271 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %267, ptr noundef nonnull @.str.3.203, double noundef %269, double noundef %270) #36
  br i1 %185, label %343, label %272

272:                                              ; preds = %262
  %273 = load ptr, ptr @MSalign11.ijp, align 8, !tbaa !19
  %274 = getelementptr inbounds ptr, ptr %273, i64 %235
  %275 = load ptr, ptr %274, align 8, !tbaa !19
  %276 = load ptr, ptr @MSalign11.m, align 8, !tbaa !19
  %277 = load ptr, ptr @MSalign11.mp, align 8, !tbaa !19
  %278 = load i32, ptr @MSalign11.mpi, align 4, !tbaa !31
  %279 = load float, ptr @MSalign11.mi, align 4, !tbaa !167
  %280 = load ptr, ptr @MSalign11.WMMTX, align 8, !tbaa !19
  %281 = getelementptr inbounds ptr, ptr %280, i64 %235
  %282 = load ptr, ptr %281, align 8, !tbaa !19
  %283 = trunc i64 %235 to i32
  %284 = trunc i64 %240 to i32
  br label %285

285:                                              ; preds = %339, %272
  %286 = phi i64 [ 1, %272 ], [ %341, %339 ]
  %287 = phi ptr [ %275, %272 ], [ %297, %339 ]
  %288 = phi ptr [ %276, %272 ], [ %296, %339 ]
  %289 = phi ptr [ %277, %272 ], [ %295, %339 ]
  %290 = phi ptr [ %237, %272 ], [ %294, %339 ]
  %291 = phi ptr [ %238, %272 ], [ %340, %339 ]
  %292 = phi float [ %279, %272 ], [ %311, %339 ]
  %293 = phi i32 [ %278, %272 ], [ %310, %339 ]
  %294 = getelementptr inbounds float, ptr %290, i64 1
  %295 = getelementptr inbounds i32, ptr %289, i64 1
  %296 = getelementptr inbounds float, ptr %288, i64 1
  %297 = getelementptr inbounds i32, ptr %287, i64 1
  %298 = load float, ptr %291, align 4, !tbaa !167
  %299 = fadd float %292, %5
  %300 = fcmp ogt float %299, %298
  %301 = trunc i64 %286 to i32
  %302 = sub i32 %293, %301
  %303 = select i1 %300, i32 %302, i32 0
  %304 = select i1 %300, float %299, float %298
  store i32 %303, ptr %297, align 4, !tbaa !31
  %305 = fcmp ult float %298, %292
  br i1 %305, label %309, label %306

306:                                              ; preds = %285
  store float %298, ptr @MSalign11.mi, align 4, !tbaa !167
  %307 = trunc i64 %286 to i32
  %308 = add i32 %307, -1
  store i32 %308, ptr @MSalign11.mpi, align 4, !tbaa !31
  br label %309

309:                                              ; preds = %306, %285
  %310 = phi i32 [ %308, %306 ], [ %293, %285 ]
  %311 = phi float [ %298, %306 ], [ %292, %285 ]
  %312 = load float, ptr %296, align 4, !tbaa !167
  %313 = fadd float %312, %5
  %314 = fcmp ogt float %313, %304
  br i1 %314, label %315, label %318

315:                                              ; preds = %309
  %316 = load i32, ptr %295, align 4, !tbaa !31
  %317 = sub nsw i32 %283, %316
  store i32 %317, ptr %297, align 4, !tbaa !31
  br label %318

318:                                              ; preds = %315, %309
  %319 = phi float [ %313, %315 ], [ %304, %309 ]
  %320 = fcmp ult float %298, %312
  br i1 %320, label %322, label %321

321:                                              ; preds = %318
  store float %298, ptr %296, align 4, !tbaa !167
  store i32 %284, ptr %295, align 4, !tbaa !31
  br label %322

322:                                              ; preds = %321, %318
  %323 = load float, ptr %294, align 4, !tbaa !167
  %324 = fadd float %319, %323
  store float %324, ptr %294, align 4, !tbaa !167
  %325 = getelementptr inbounds float, ptr %282, i64 %286
  store float %324, ptr %325, align 4, !tbaa !167
  %326 = icmp slt i64 %286, %225
  br i1 %326, label %327, label %339

327:                                              ; preds = %322
  %328 = load float, ptr %266, align 4, !tbaa !167
  %329 = load float, ptr %294, align 4, !tbaa !167
  %330 = fcmp olt float %328, %329
  br i1 %330, label %331, label %333

331:                                              ; preds = %327
  store float %329, ptr %266, align 4, !tbaa !167
  %332 = load float, ptr %294, align 4, !tbaa !167
  br label %333

333:                                              ; preds = %331, %327
  %334 = phi float [ %329, %327 ], [ %332, %331 ]
  %335 = getelementptr inbounds float, ptr %82, i64 %286
  %336 = load float, ptr %335, align 4, !tbaa !167
  %337 = fcmp olt float %336, %334
  br i1 %337, label %338, label %339

338:                                              ; preds = %333
  store float %334, ptr %335, align 4, !tbaa !167
  br label %339

339:                                              ; preds = %338, %333, %322
  %340 = getelementptr inbounds float, ptr %291, i64 1
  %341 = add nuw nsw i64 %286, 1
  %342 = icmp eq i64 %341, %229
  br i1 %342, label %343, label %285, !llvm.loop !499

343:                                              ; preds = %339, %262
  %344 = phi float [ %236, %262 ], [ %319, %339 ]
  %345 = getelementptr inbounds float, ptr %237, i64 %219
  %346 = load float, ptr %345, align 4, !tbaa !167
  %347 = load ptr, ptr @MSalign11.lastverticalw, align 8, !tbaa !19
  %348 = getelementptr inbounds float, ptr %347, i64 %235
  store float %346, ptr %348, align 4, !tbaa !167
  %349 = add nuw nsw i64 %235, 1
  %350 = icmp eq i64 %349, %228
  br i1 %350, label %230, label %234, !llvm.loop !500

351:                                              ; preds = %362, %230, %217
  %352 = phi i1 [ false, %230 ], [ false, %217 ], [ %231, %362 ]
  %353 = phi float [ %.lcssa2, %230 ], [ 0.000000e+00, %217 ], [ %.lcssa2, %362 ]
  %354 = phi ptr [ %.lcssa, %230 ], [ %118, %217 ], [ %.lcssa, %362 ]
  %355 = phi float [ 0xC08F3F3340000000, %230 ], [ 0xC08F3F3340000000, %217 ], [ %370, %362 ]
  %356 = phi i32 [ 0, %230 ], [ 0, %217 ], [ %371, %362 ]
  %357 = phi i32 [ 0, %230 ], [ 0, %217 ], [ %373, %362 ]
  %358 = icmp sgt i32 %21, 0
  br i1 %358, label %359, label %376

359:                                              ; preds = %351
  %360 = add nsw i32 %18, -1
  %361 = and i64 %20, 4294967295
  br label %382

362:                                              ; preds = %362, %232
  %363 = phi i64 [ 0, %232 ], [ %374, %362 ]
  %364 = phi i32 [ 0, %232 ], [ %373, %362 ]
  %365 = phi i32 [ 0, %232 ], [ %371, %362 ]
  %366 = phi float [ 0xC08F3F3340000000, %232 ], [ %370, %362 ]
  %367 = getelementptr inbounds float, ptr %.lcssa1, i64 %363
  %368 = load float, ptr %367, align 4, !tbaa !167
  %369 = fcmp ogt float %368, %366
  %370 = select i1 %369, float %368, float %366
  %371 = select i1 %369, i32 %218, i32 %365
  %372 = trunc i64 %363 to i32
  %373 = select i1 %369, i32 %372, i32 %364
  %374 = add nuw nsw i64 %363, 1
  %375 = icmp eq i64 %374, %233
  br i1 %375, label %351, label %362, !llvm.loop !501

376:                                              ; preds = %382, %351
  %377 = phi float [ %355, %351 ], [ %390, %382 ]
  %378 = phi i32 [ %356, %351 ], [ %392, %382 ]
  %379 = phi i32 [ %357, %351 ], [ %393, %382 ]
  br i1 %352, label %380, label %396

380:                                              ; preds = %376
  %381 = and i64 %17, 4294967295
  br label %399

382:                                              ; preds = %382, %359
  %383 = phi i64 [ 0, %359 ], [ %394, %382 ]
  %384 = phi i32 [ %357, %359 ], [ %393, %382 ]
  %385 = phi i32 [ %356, %359 ], [ %392, %382 ]
  %386 = phi float [ %355, %359 ], [ %390, %382 ]
  %387 = getelementptr inbounds float, ptr %354, i64 %383
  %388 = load float, ptr %387, align 4, !tbaa !167
  %389 = fcmp ogt float %388, %386
  %390 = select i1 %389, float %388, float %386
  %391 = trunc i64 %383 to i32
  %392 = select i1 %389, i32 %391, i32 %385
  %393 = select i1 %389, i32 %360, i32 %384
  %394 = add nuw nsw i64 %383, 1
  %395 = icmp eq i64 %394, %361
  br i1 %395, label %376, label %382, !llvm.loop !502

396:                                              ; preds = %399, %376
  br i1 %358, label %397, label %419

397:                                              ; preds = %396
  %398 = and i64 %20, 4294967295
  br label %409

399:                                              ; preds = %399, %380
  %400 = phi i64 [ 0, %380 ], [ %407, %399 ]
  %401 = load ptr, ptr @stderr, align 8, !tbaa !19
  %402 = getelementptr inbounds float, ptr %81, i64 %400
  %403 = load float, ptr %402, align 4, !tbaa !167
  %404 = fpext float %403 to double
  %405 = trunc i64 %400 to i32
  %406 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %401, ptr noundef nonnull @.str.4.204, i32 noundef %405, double noundef %404) #36
  %407 = add nuw nsw i64 %400, 1
  %408 = icmp eq i64 %407, %381
  br i1 %408, label %396, label %399, !llvm.loop !503

409:                                              ; preds = %409, %397
  %410 = phi i64 [ 0, %397 ], [ %417, %409 ]
  %411 = load ptr, ptr @stderr, align 8, !tbaa !19
  %412 = getelementptr inbounds float, ptr %82, i64 %410
  %413 = load float, ptr %412, align 4, !tbaa !167
  %414 = fpext float %413 to double
  %415 = trunc i64 %410 to i32
  %416 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %411, ptr noundef nonnull @.str.5.205, i32 noundef %415, double noundef %414) #36
  %417 = add nuw nsw i64 %410, 1
  %418 = icmp eq i64 %417, %398
  br i1 %418, label %419, label %409, !llvm.loop !504

419:                                              ; preds = %409, %396
  %420 = load ptr, ptr @stderr, align 8, !tbaa !19
  %421 = fpext float %377 to double
  %422 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %420, ptr noundef nonnull @.str.6.206, double noundef %421, i32 noundef %379, i32 noundef %378) #36
  %423 = add nsw i32 %18, -1
  %424 = icmp eq i32 %379, %423
  %425 = icmp eq i32 %378, %218
  %426 = select i1 %424, i1 %425, i1 false
  %427 = select i1 %426, float -0.000000e+00, float %5
  %428 = fadd float %377, %427
  %429 = load ptr, ptr @stderr, align 8, !tbaa !19
  %430 = fpext float %428 to double
  %431 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %429, ptr noundef nonnull @.str.7.207, double noundef %430) #36
  %432 = add i64 %20, %17
  %433 = load ptr, ptr @MSalign11.mseq1, align 8, !tbaa !19
  %434 = load ptr, ptr %433, align 8, !tbaa !19
  %435 = shl i64 %432, 32
  %436 = ashr exact i64 %435, 32
  %437 = getelementptr inbounds i8, ptr %434, i64 %436
  store ptr %437, ptr %433, align 8, !tbaa !19
  store i8 0, ptr %437, align 1, !tbaa !17
  %438 = load ptr, ptr @MSalign11.mseq2, align 8, !tbaa !19
  %439 = load ptr, ptr %438, align 8, !tbaa !19
  %440 = getelementptr inbounds i8, ptr %439, i64 %436
  store ptr %440, ptr %438, align 8, !tbaa !19
  store i8 0, ptr %440, align 1, !tbaa !17
  %441 = load ptr, ptr @MSalign11.WMMTX, align 8, !tbaa !19
  %442 = load ptr, ptr @MSalign11.w1, align 8, !tbaa !19
  %443 = load ptr, ptr @MSalign11.w2, align 8, !tbaa !19
  %444 = load ptr, ptr @MSalign11.initverticalw, align 8, !tbaa !19
  %445 = load ptr, ptr @MSalign11.m, align 8, !tbaa !19
  %446 = load ptr, ptr @MSalign11.mp, align 8, !tbaa !19
  tail call void @backdp(ptr noundef %441, float noundef %428, ptr noundef nonnull %81, ptr noundef nonnull %82, i32 noundef %18, i32 noundef %21, i32 poison, ptr noundef %442, ptr noundef %443, ptr noundef %444, ptr noundef %445, ptr noundef %446, i32 noundef %379, i32 noundef %378, ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef nonnull %433, ptr noundef nonnull %438) #39
  %447 = load ptr, ptr @stderr, align 8, !tbaa !19
  %448 = tail call i32 @fputc(i32 10, ptr %447)
  %449 = load ptr, ptr @stderr, align 8, !tbaa !19
  %450 = tail call i32 @fputc(i32 10, ptr %449)
  %451 = load ptr, ptr @stderr, align 8, !tbaa !19
  %452 = load ptr, ptr @MSalign11.mseq1, align 8, !tbaa !19
  %453 = load ptr, ptr %452, align 8, !tbaa !19
  %454 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %451, ptr noundef nonnull @.str.9.208, ptr noundef %453) #36
  %455 = load ptr, ptr @stderr, align 8, !tbaa !19
  %456 = load ptr, ptr @MSalign11.mseq2, align 8, !tbaa !19
  %457 = load ptr, ptr %456, align 8, !tbaa !19
  %458 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %455, ptr noundef nonnull @.str.9.208, ptr noundef %457) #36
  %459 = load ptr, ptr @MSalign11.mseq, align 8, !tbaa !19
  %460 = load ptr, ptr %459, align 8, !tbaa !19
  %461 = load ptr, ptr @MSalign11.mseq1, align 8, !tbaa !19
  store ptr %460, ptr %461, align 8, !tbaa !19
  %462 = getelementptr inbounds ptr, ptr %459, i64 1
  %463 = load ptr, ptr %462, align 8, !tbaa !19
  %464 = load ptr, ptr @MSalign11.mseq2, align 8, !tbaa !19
  store ptr %463, ptr %464, align 8, !tbaa !19
  %465 = load ptr, ptr %461, align 8, !tbaa !19
  %466 = getelementptr inbounds i8, ptr %465, i64 %436
  store ptr %466, ptr %461, align 8, !tbaa !19
  store i8 0, ptr %466, align 1, !tbaa !17
  %467 = load ptr, ptr %464, align 8, !tbaa !19
  %468 = getelementptr inbounds i8, ptr %467, i64 %436
  store ptr %468, ptr %464, align 8, !tbaa !19
  store i8 0, ptr %468, align 1, !tbaa !17
  %469 = load ptr, ptr @MSalign11.ijp, align 8, !tbaa !19
  %470 = load ptr, ptr %0, align 8, !tbaa !19
  %471 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %470) #40
  %472 = trunc i64 %471 to i32
  %473 = load ptr, ptr %1, align 8, !tbaa !19
  %474 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %473) #40
  %475 = trunc i64 %474 to i32
  %476 = icmp slt i32 %472, 0
  br i1 %476, label %480, label %477

477:                                              ; preds = %419
  %478 = add i64 %471, 1
  %479 = and i64 %478, 4294967295
  br label %522

480:                                              ; preds = %522, %419
  %481 = icmp slt i32 %475, 0
  br i1 %481, label %529, label %482

482:                                              ; preds = %480
  %483 = load ptr, ptr %469, align 8, !tbaa !19
  %484 = add i64 %474, 1
  %485 = and i64 %484, 4294967295
  %486 = add nuw nsw i64 %485, 3
  %487 = and i64 %486, 8589934588
  %488 = add nsw i64 %485, -1
  %489 = insertelement <4 x i64> poison, i64 %488, i64 0
  %490 = shufflevector <4 x i64> %489, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %491

491:                                              ; preds = %518, %482
  %492 = phi i64 [ 0, %482 ], [ %519, %518 ]
  %493 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %482 ], [ %520, %518 ]
  %494 = trunc i64 %492 to i32
  %495 = icmp ule <4 x i64> %493, %490
  %496 = extractelement <4 x i1> %495, i64 0
  br i1 %496, label %497, label %500

497:                                              ; preds = %491
  %498 = getelementptr inbounds i32, ptr %483, i64 %492
  %499 = xor i32 %494, -1
  store i32 %499, ptr %498, align 4, !tbaa !31
  br label %500

500:                                              ; preds = %497, %491
  %501 = extractelement <4 x i1> %495, i64 1
  br i1 %501, label %502, label %506

502:                                              ; preds = %500
  %503 = or i64 %492, 1
  %504 = getelementptr inbounds i32, ptr %483, i64 %503
  %505 = xor i32 %494, -2
  store i32 %505, ptr %504, align 4, !tbaa !31
  br label %506

506:                                              ; preds = %502, %500
  %507 = extractelement <4 x i1> %495, i64 2
  br i1 %507, label %508, label %512

508:                                              ; preds = %506
  %509 = or i64 %492, 2
  %510 = getelementptr inbounds i32, ptr %483, i64 %509
  %511 = xor i32 %494, -3
  store i32 %511, ptr %510, align 4, !tbaa !31
  br label %512

512:                                              ; preds = %508, %506
  %513 = extractelement <4 x i1> %495, i64 3
  br i1 %513, label %514, label %518

514:                                              ; preds = %512
  %515 = or i64 %492, 3
  %516 = getelementptr inbounds i32, ptr %483, i64 %515
  %517 = xor i32 %494, -4
  store i32 %517, ptr %516, align 4, !tbaa !31
  br label %518

518:                                              ; preds = %514, %512
  %519 = add i64 %492, 4
  %520 = add <4 x i64> %493, <i64 4, i64 4, i64 4, i64 4>
  %521 = icmp eq i64 %519, %487
  br i1 %521, label %529, label %491, !llvm.loop !505

522:                                              ; preds = %522, %477
  %523 = phi i64 [ 0, %477 ], [ %524, %522 ]
  %524 = add nuw nsw i64 %523, 1
  %525 = getelementptr inbounds ptr, ptr %469, i64 %523
  %526 = load ptr, ptr %525, align 8, !tbaa !19
  %527 = trunc i64 %524 to i32
  store i32 %527, ptr %526, align 4, !tbaa !31
  %528 = icmp eq i64 %524, %479
  br i1 %528, label %480, label %522, !llvm.loop !506

529:                                              ; preds = %518, %480
  %530 = add nsw i32 %475, %472
  %531 = load ptr, ptr %461, align 8, !tbaa !19
  %532 = sext i32 %530 to i64
  %533 = getelementptr inbounds i8, ptr %531, i64 %532
  store ptr %533, ptr %461, align 8, !tbaa !19
  store i8 0, ptr %533, align 1, !tbaa !17
  %534 = load ptr, ptr %464, align 8, !tbaa !19
  %535 = getelementptr inbounds i8, ptr %534, i64 %532
  store ptr %535, ptr %464, align 8, !tbaa !19
  store i8 0, ptr %535, align 1, !tbaa !17
  %536 = icmp slt i32 %530, 0
  br i1 %536, label %625, label %537

537:                                              ; preds = %610, %529
  %538 = phi i32 [ %623, %610 ], [ 0, %529 ]
  %539 = phi i32 [ %557, %610 ], [ %472, %529 ]
  %540 = phi i32 [ %559, %610 ], [ %475, %529 ]
  %541 = sext i32 %539 to i64
  %542 = getelementptr inbounds ptr, ptr %469, i64 %541
  %543 = load ptr, ptr %542, align 8, !tbaa !19
  %544 = sext i32 %540 to i64
  %545 = getelementptr inbounds i32, ptr %543, i64 %544
  %546 = load i32, ptr %545, align 4, !tbaa !31
  %547 = icmp slt i32 %546, 0
  br i1 %547, label %548, label %550

548:                                              ; preds = %537
  %549 = add nsw i32 %539, -1
  br label %556

550:                                              ; preds = %537
  %551 = icmp eq i32 %546, 0
  br i1 %551, label %554, label %552

552:                                              ; preds = %550
  %553 = sub nsw i32 %539, %546
  br label %556

554:                                              ; preds = %550
  %555 = add nsw i32 %539, -1
  br label %556

556:                                              ; preds = %554, %552, %548
  %557 = phi i32 [ %549, %548 ], [ %553, %552 ], [ %555, %554 ]
  %558 = phi i32 [ %546, %548 ], [ -1, %552 ], [ -1, %554 ]
  %559 = add nsw i32 %558, %540
  %560 = xor i32 %557, -1
  %561 = add i32 %539, %560
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %583, label %563

563:                                              ; preds = %556
  %564 = sext i32 %561 to i64
  %565 = sext i32 %557 to i64
  %566 = add i32 %539, -1
  br label %567

567:                                              ; preds = %567, %563
  %568 = phi i64 [ %564, %563 ], [ %577, %567 ]
  %569 = load ptr, ptr %0, align 8, !tbaa !19
  %570 = add nsw i64 %568, %565
  %571 = getelementptr inbounds i8, ptr %569, i64 %570
  %572 = load i8, ptr %571, align 1, !tbaa !17
  %573 = load ptr, ptr %461, align 8, !tbaa !19
  %574 = getelementptr inbounds i8, ptr %573, i64 -1
  store ptr %574, ptr %461, align 8, !tbaa !19
  store i8 %572, ptr %574, align 1, !tbaa !17
  %575 = load ptr, ptr %464, align 8, !tbaa !19
  %576 = getelementptr inbounds i8, ptr %575, i64 -1
  store ptr %576, ptr %464, align 8, !tbaa !19
  store i8 45, ptr %576, align 1, !tbaa !17
  %577 = add nsw i64 %568, -1
  %578 = and i64 %577, 4294967295
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %580, label %567, !llvm.loop !507

580:                                              ; preds = %567
  %581 = add i32 %566, %538
  %582 = sub i32 %581, %557
  br label %583

583:                                              ; preds = %580, %556
  %584 = phi i32 [ %538, %556 ], [ %582, %580 ]
  %585 = icmp eq i32 %558, -1
  br i1 %585, label %605, label %586

586:                                              ; preds = %583
  %587 = xor i32 %558, -1
  %588 = sext i32 %587 to i64
  %589 = sext i32 %559 to i64
  br label %590

590:                                              ; preds = %590, %586
  %591 = phi i64 [ %588, %586 ], [ %602, %590 ]
  %592 = phi i32 [ %584, %586 ], [ %601, %590 ]
  %593 = load ptr, ptr %461, align 8, !tbaa !19
  %594 = getelementptr inbounds i8, ptr %593, i64 -1
  store ptr %594, ptr %461, align 8, !tbaa !19
  store i8 45, ptr %594, align 1, !tbaa !17
  %595 = load ptr, ptr %1, align 8, !tbaa !19
  %596 = add nsw i64 %591, %589
  %597 = getelementptr inbounds i8, ptr %595, i64 %596
  %598 = load i8, ptr %597, align 1, !tbaa !17
  %599 = load ptr, ptr %464, align 8, !tbaa !19
  %600 = getelementptr inbounds i8, ptr %599, i64 -1
  store ptr %600, ptr %464, align 8, !tbaa !19
  store i8 %598, ptr %600, align 1, !tbaa !17
  %601 = add nsw i32 %592, 1
  %602 = add nsw i64 %591, -1
  %603 = and i64 %602, 4294967295
  %604 = icmp eq i64 %603, 0
  br i1 %604, label %605, label %590, !llvm.loop !508

605:                                              ; preds = %590, %583
  %606 = phi i32 [ %584, %583 ], [ %601, %590 ]
  %607 = icmp slt i32 %539, 1
  %608 = icmp slt i32 %540, 1
  %609 = or i1 %607, %608
  br i1 %609, label %625, label %610

610:                                              ; preds = %605
  %611 = load ptr, ptr %0, align 8, !tbaa !19
  %612 = sext i32 %557 to i64
  %613 = getelementptr inbounds i8, ptr %611, i64 %612
  %614 = load i8, ptr %613, align 1, !tbaa !17
  %615 = load ptr, ptr %461, align 8, !tbaa !19
  %616 = getelementptr inbounds i8, ptr %615, i64 -1
  store ptr %616, ptr %461, align 8, !tbaa !19
  store i8 %614, ptr %616, align 1, !tbaa !17
  %617 = load ptr, ptr %1, align 8, !tbaa !19
  %618 = sext i32 %559 to i64
  %619 = getelementptr inbounds i8, ptr %617, i64 %618
  %620 = load i8, ptr %619, align 1, !tbaa !17
  %621 = load ptr, ptr %464, align 8, !tbaa !19
  %622 = getelementptr inbounds i8, ptr %621, i64 -1
  store ptr %622, ptr %464, align 8, !tbaa !19
  store i8 %620, ptr %622, align 1, !tbaa !17
  %623 = add nsw i32 %606, 2
  %624 = icmp sgt i32 %623, %530
  br i1 %624, label %625, label %537, !llvm.loop !509

625:                                              ; preds = %610, %605, %529
  %626 = load ptr, ptr %461, align 8, !tbaa !19
  %627 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %626) #40
  %628 = trunc i64 %627 to i32
  %629 = icmp sgt i32 %628, %2
  %630 = icmp sgt i32 %628, 5000000
  %631 = or i1 %629, %630
  br i1 %631, label %632, label %638

632:                                              ; preds = %625
  %633 = load ptr, ptr @stderr, align 8, !tbaa !19
  %634 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %633, ptr noundef nonnull @.str.10.209, i32 noundef %2, i32 noundef %628, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.11.210) #35
  %635 = load ptr, ptr @MSalign11.mseq1, align 8, !tbaa !19
  %636 = load ptr, ptr %635, align 8, !tbaa !19
  %637 = load ptr, ptr @MSalign11.mseq2, align 8, !tbaa !19
  br label %638

638:                                              ; preds = %632, %625
  %639 = phi ptr [ %464, %625 ], [ %637, %632 ]
  %640 = phi ptr [ %626, %625 ], [ %636, %632 ]
  %641 = load ptr, ptr %0, align 8, !tbaa !19
  %642 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %641, ptr noundef nonnull dereferenceable(1) %640) #35
  %643 = load ptr, ptr %1, align 8, !tbaa !19
  %644 = load ptr, ptr %639, align 8, !tbaa !19
  %645 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %643, ptr noundef nonnull dereferenceable(1) %644) #35
  %646 = load ptr, ptr @stderr, align 8, !tbaa !19
  %647 = tail call i32 @fputc(i32 10, ptr %646)
  %648 = load ptr, ptr @stderr, align 8, !tbaa !19
  %649 = load ptr, ptr @MSalign11.mseq1, align 8, !tbaa !19
  %650 = load ptr, ptr %649, align 8, !tbaa !19
  %651 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %648, ptr noundef nonnull @.str.12.211, ptr noundef %650) #36
  %652 = load ptr, ptr @stderr, align 8, !tbaa !19
  %653 = load ptr, ptr @MSalign11.mseq2, align 8, !tbaa !19
  %654 = load ptr, ptr %653, align 8, !tbaa !19
  %655 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %652, ptr noundef nonnull @.str.12.211, ptr noundef %654) #36
  ret float %353
}

; Function Attrs: nounwind optsize uwtable
define internal float @MSalignmm(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef %7, ptr noundef %8, ptr nocapture noundef readnone %9, ptr noundef %10) #4 {
  %12 = load i32, ptr @penalty, align 4, !tbaa !31
  %13 = sitofp i32 %12 to float
  %14 = load ptr, ptr %0, align 8, !tbaa !19
  %15 = tail call i32 @seqlen(ptr noundef %14) #35
  %16 = load ptr, ptr %1, align 8, !tbaa !19
  %17 = tail call i32 @seqlen(ptr noundef %16) #35
  %18 = load ptr, ptr %0, align 8, !tbaa !19
  %19 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %18) #40
  %20 = trunc i64 %19 to i32
  %21 = load ptr, ptr %1, align 8, !tbaa !19
  %22 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %21) #40
  %23 = trunc i64 %22 to i32
  %24 = add i32 %20, 200
  %25 = add i32 %24, %23
  %26 = tail call ptr @AllocateCharMtx(i32 noundef %4, i32 noundef %25) #35
  %27 = tail call ptr @AllocateCharMtx(i32 noundef %5, i32 noundef %25) #35
  %28 = tail call ptr @AllocateFloatMtx(i32 noundef 4, i32 noundef 0) #35
  %29 = add nsw i32 %20, 102
  %30 = tail call ptr @AllocateFloatVec(i32 noundef %29) #35
  %31 = add nsw i32 %23, 102
  %32 = tail call ptr @AllocateFloatVec(i32 noundef %31) #35
  %33 = tail call ptr @AllocateFloatVec(i32 noundef %29) #35
  %34 = tail call ptr @AllocateFloatVec(i32 noundef %31) #35
  %35 = tail call ptr @AllocateFloatMtx(i32 noundef %29, i32 noundef 27) #35
  %36 = tail call ptr @AllocateFloatMtx(i32 noundef %31, i32 noundef 27) #35
  %37 = icmp sgt i32 %4, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %11
  %39 = shl i64 %19, 32
  %40 = ashr exact i64 %39, 32
  %41 = zext i32 %4 to i64
  br label %48

42:                                               ; preds = %60, %11
  %43 = icmp sgt i32 %5, 0
  br i1 %43, label %44, label %78

44:                                               ; preds = %42
  %45 = shl i64 %22, 32
  %46 = ashr exact i64 %45, 32
  %47 = zext i32 %5 to i64
  br label %63

48:                                               ; preds = %60, %38
  %49 = phi i64 [ 0, %38 ], [ %61, %60 ]
  %50 = getelementptr inbounds ptr, ptr %0, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !19
  %52 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %51) #40
  %53 = icmp eq i64 %52, %40
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %.lcssa3 = phi i64 [ %49, %48 ]
  %55 = trunc i64 %.lcssa3 to i32
  %56 = load ptr, ptr @stderr, align 8, !tbaa !19
  %57 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %56, ptr noundef nonnull @.str.214, i32 noundef %55, i32 noundef %4) #36
  %58 = load ptr, ptr @stderr, align 8, !tbaa !19
  %59 = tail call i64 @fwrite(ptr nonnull @.str.1.215, i64 27, i64 1, ptr %58) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

60:                                               ; preds = %48
  %61 = add nuw nsw i64 %49, 1
  %62 = icmp eq i64 %61, %41
  br i1 %62, label %42, label %48, !llvm.loop !510

63:                                               ; preds = %75, %44
  %64 = phi i64 [ 0, %44 ], [ %76, %75 ]
  %65 = getelementptr inbounds ptr, ptr %1, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !19
  %67 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %66) #40
  %68 = icmp eq i64 %67, %46
  br i1 %68, label %75, label %69

69:                                               ; preds = %63
  %.lcssa2 = phi i64 [ %64, %63 ]
  %70 = trunc i64 %.lcssa2 to i32
  %71 = load ptr, ptr @stderr, align 8, !tbaa !19
  %72 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %71, ptr noundef nonnull @.str.2.216, i32 noundef %70, i32 noundef %5) #36
  %73 = load ptr, ptr @stderr, align 8, !tbaa !19
  %74 = tail call i64 @fwrite(ptr nonnull @.str.1.215, i64 27, i64 1, ptr %73) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

75:                                               ; preds = %63
  %76 = add nuw nsw i64 %64, 1
  %77 = icmp eq i64 %76, %47
  br i1 %77, label %78, label %63, !llvm.loop !511

78:                                               ; preds = %75, %42
  tail call void @MScpmx_calc_new(ptr noundef nonnull %0, ptr noundef %35, ptr noundef %2, i32 noundef %20, i32 noundef %4) #35
  tail call void @MScpmx_calc_new(ptr noundef nonnull %1, ptr noundef %36, ptr noundef %3, i32 noundef %23, i32 noundef %5) #35
  %79 = icmp eq ptr %7, null
  br i1 %79, label %81, label %80

80:                                               ; preds = %78
  tail call void @new_OpeningGapCount(ptr noundef %30, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %20, ptr noundef nonnull %7) #35
  tail call void @new_OpeningGapCount(ptr noundef %32, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %23, ptr noundef %8) #35
  tail call void @new_FinalGapCount(ptr noundef %33, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %20, ptr noundef %10) #35
  tail call void @new_FinalGapCount(ptr noundef %34, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %23, ptr noundef %10) #35
  br label %82

81:                                               ; preds = %78
  tail call void @st_OpeningGapCount(ptr noundef %30, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %20) #35
  tail call void @st_OpeningGapCount(ptr noundef %32, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %23) #35
  tail call void @st_FinalGapCount(ptr noundef %33, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %20) #35
  tail call void @st_FinalGapCount(ptr noundef %34, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %23) #35
  br label %82

82:                                               ; preds = %81, %80
  %83 = icmp sgt i32 %20, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %82
  %85 = fpext float %13 to double
  %86 = and i64 %19, 4294967295
  br label %92

87:                                               ; preds = %92, %82
  %88 = icmp sgt i32 %23, 0
  br i1 %88, label %89, label %128

89:                                               ; preds = %87
  %90 = fpext float %13 to double
  %91 = and i64 %22, 4294967295
  br label %110

92:                                               ; preds = %92, %84
  %93 = phi i64 [ 0, %84 ], [ %108, %92 ]
  %94 = getelementptr inbounds float, ptr %30, i64 %93
  %95 = load float, ptr %94, align 4, !tbaa !167
  %96 = fpext float %95 to double
  %97 = fsub double 1.000000e+00, %96
  %98 = fmul double %97, 5.000000e-01
  %99 = fmul double %98, %85
  %100 = fptrunc double %99 to float
  store float %100, ptr %94, align 4, !tbaa !167
  %101 = getelementptr inbounds float, ptr %33, i64 %93
  %102 = load float, ptr %101, align 4, !tbaa !167
  %103 = fpext float %102 to double
  %104 = fsub double 1.000000e+00, %103
  %105 = fmul double %104, 5.000000e-01
  %106 = fmul double %105, %85
  %107 = fptrunc double %106 to float
  store float %107, ptr %101, align 4, !tbaa !167
  %108 = add nuw nsw i64 %93, 1
  %109 = icmp eq i64 %108, %86
  br i1 %109, label %87, label %92, !llvm.loop !512

110:                                              ; preds = %110, %89
  %111 = phi i64 [ 0, %89 ], [ %126, %110 ]
  %112 = getelementptr inbounds float, ptr %32, i64 %111
  %113 = load float, ptr %112, align 4, !tbaa !167
  %114 = fpext float %113 to double
  %115 = fsub double 1.000000e+00, %114
  %116 = fmul double %115, 5.000000e-01
  %117 = fmul double %116, %90
  %118 = fptrunc double %117 to float
  store float %118, ptr %112, align 4, !tbaa !167
  %119 = getelementptr inbounds float, ptr %34, i64 %111
  %120 = load float, ptr %119, align 4, !tbaa !167
  %121 = fpext float %120 to double
  %122 = fsub double 1.000000e+00, %121
  %123 = fmul double %122, 5.000000e-01
  %124 = fmul double %123, %90
  %125 = fptrunc double %124 to float
  store float %125, ptr %119, align 4, !tbaa !167
  %126 = add nuw nsw i64 %111, 1
  %127 = icmp eq i64 %126, %91
  br i1 %127, label %128, label %110, !llvm.loop !513

128:                                              ; preds = %110, %87
  store ptr %30, ptr %28, align 8, !tbaa !19
  %129 = getelementptr inbounds ptr, ptr %28, i64 1
  store ptr %33, ptr %129, align 8, !tbaa !19
  %130 = getelementptr inbounds ptr, ptr %28, i64 2
  store ptr %32, ptr %130, align 8, !tbaa !19
  %131 = getelementptr inbounds ptr, ptr %28, i64 3
  store ptr %34, ptr %131, align 8, !tbaa !19
  %132 = add nsw i32 %20, -1
  %133 = add nsw i32 %23, -1
  %134 = tail call fastcc float @MSalignmm_rec(i32 noundef %4, i32 noundef %5, ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef %35, ptr noundef %36, i32 noundef 0, i32 noundef %132, i32 noundef 0, i32 noundef %133, ptr noundef %26, ptr noundef %27, i32 noundef 0, ptr noundef nonnull %28) #39
  br i1 %37, label %135, label %137

135:                                              ; preds = %128
  %136 = zext i32 %4 to i64
  br label %140

137:                                              ; preds = %140, %128
  br i1 %43, label %138, label %158

138:                                              ; preds = %137
  %139 = zext i32 %5 to i64
  br label %149

140:                                              ; preds = %140, %135
  %141 = phi i64 [ 0, %135 ], [ %147, %140 ]
  %142 = getelementptr inbounds ptr, ptr %0, i64 %141
  %143 = load ptr, ptr %142, align 8, !tbaa !19
  %144 = getelementptr inbounds ptr, ptr %26, i64 %141
  %145 = load ptr, ptr %144, align 8, !tbaa !19
  %146 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %143, ptr noundef nonnull dereferenceable(1) %145) #35
  %147 = add nuw nsw i64 %141, 1
  %148 = icmp eq i64 %147, %136
  br i1 %148, label %137, label %140, !llvm.loop !514

149:                                              ; preds = %149, %138
  %150 = phi i64 [ 0, %138 ], [ %156, %149 ]
  %151 = getelementptr inbounds ptr, ptr %1, i64 %150
  %152 = load ptr, ptr %151, align 8, !tbaa !19
  %153 = getelementptr inbounds ptr, ptr %27, i64 %150
  %154 = load ptr, ptr %153, align 8, !tbaa !19
  %155 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %152, ptr noundef nonnull dereferenceable(1) %154) #35
  %156 = add nuw nsw i64 %150, 1
  %157 = icmp eq i64 %156, %139
  br i1 %157, label %158, label %149, !llvm.loop !515

158:                                              ; preds = %149, %137
  %159 = load ptr, ptr %0, align 8, !tbaa !19
  %160 = tail call i32 @seqlen(ptr noundef %159) #35
  %161 = icmp eq i32 %160, %15
  br i1 %161, label %170, label %162

162:                                              ; preds = %158
  %163 = load ptr, ptr @stderr, align 8, !tbaa !19
  %164 = load ptr, ptr %0, align 8, !tbaa !19
  %165 = tail call i32 @seqlen(ptr noundef %164) #35
  %166 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %163, ptr noundef nonnull @.str.3.217, i32 noundef %165, i32 noundef %15) #36
  %167 = load ptr, ptr @stderr, align 8, !tbaa !19
  %168 = load ptr, ptr %0, align 8, !tbaa !19
  %169 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %167, ptr noundef nonnull @.str.4.218, ptr noundef %168) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

170:                                              ; preds = %158
  %171 = load ptr, ptr %1, align 8, !tbaa !19
  %172 = tail call i32 @seqlen(ptr noundef %171) #35
  %173 = icmp eq i32 %172, %17
  br i1 %173, label %179, label %174

174:                                              ; preds = %170
  %175 = load ptr, ptr @stderr, align 8, !tbaa !19
  %176 = load ptr, ptr %1, align 8, !tbaa !19
  %177 = tail call i32 @seqlen(ptr noundef %176) #35
  %178 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %175, ptr noundef nonnull @.str.5.219, i32 noundef %177, i32 noundef %17) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

179:                                              ; preds = %170
  tail call void @FreeFloatVec(ptr noundef %30) #35
  tail call void @FreeFloatVec(ptr noundef %32) #35
  tail call void @FreeFloatVec(ptr noundef %33) #35
  tail call void @FreeFloatVec(ptr noundef %34) #35
  tail call void @FreeFloatMtx(ptr noundef %35) #35
  tail call void @FreeFloatMtx(ptr noundef %36) #35
  tail call void @free(ptr noundef %28) #35
  tail call void @FreeCharMtx(ptr noundef %26) #35
  tail call void @FreeCharMtx(ptr noundef %27) #35
  %180 = load ptr, ptr %1, align 8, !tbaa !19
  %181 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %180) #40
  br i1 %37, label %182, label %188

182:                                              ; preds = %179
  %183 = load ptr, ptr %0, align 8, !tbaa !19
  %184 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %183) #40
  %185 = shl i64 %184, 32
  %186 = ashr exact i64 %185, 32
  %187 = zext i32 %4 to i64
  br label %193

188:                                              ; preds = %205, %179
  br i1 %43, label %189, label %223

189:                                              ; preds = %188
  %190 = shl i64 %181, 32
  %191 = ashr exact i64 %190, 32
  %192 = zext i32 %5 to i64
  br label %208

193:                                              ; preds = %205, %182
  %194 = phi i64 [ 0, %182 ], [ %206, %205 ]
  %195 = getelementptr inbounds ptr, ptr %0, i64 %194
  %196 = load ptr, ptr %195, align 8, !tbaa !19
  %197 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %196) #40
  %198 = icmp eq i64 %197, %186
  br i1 %198, label %205, label %199

199:                                              ; preds = %193
  %.lcssa1 = phi i64 [ %194, %193 ]
  %200 = trunc i64 %.lcssa1 to i32
  %201 = load ptr, ptr @stderr, align 8, !tbaa !19
  %202 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %201, ptr noundef nonnull @.str.214, i32 noundef %200, i32 noundef %4) #36
  %203 = load ptr, ptr @stderr, align 8, !tbaa !19
  %204 = tail call i64 @fwrite(ptr nonnull @.str.6.220, i64 42, i64 1, ptr %203) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

205:                                              ; preds = %193
  %206 = add nuw nsw i64 %194, 1
  %207 = icmp eq i64 %206, %187
  br i1 %207, label %188, label %193, !llvm.loop !516

208:                                              ; preds = %220, %189
  %209 = phi i64 [ 0, %189 ], [ %221, %220 ]
  %210 = getelementptr inbounds ptr, ptr %1, i64 %209
  %211 = load ptr, ptr %210, align 8, !tbaa !19
  %212 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %211) #40
  %213 = icmp eq i64 %212, %191
  br i1 %213, label %220, label %214

214:                                              ; preds = %208
  %.lcssa = phi i64 [ %209, %208 ]
  %215 = trunc i64 %.lcssa to i32
  %216 = load ptr, ptr @stderr, align 8, !tbaa !19
  %217 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %216, ptr noundef nonnull @.str.2.216, i32 noundef %215, i32 noundef %5) #36
  %218 = load ptr, ptr @stderr, align 8, !tbaa !19
  %219 = tail call i64 @fwrite(ptr nonnull @.str.6.220, i64 42, i64 1, ptr %218) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

220:                                              ; preds = %208
  %221 = add nuw nsw i64 %209, 1
  %222 = icmp eq i64 %221, %192
  br i1 %222, label %223, label %208, !llvm.loop !517

223:                                              ; preds = %220, %188
  ret float %134
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc float @MSalignmm_rec(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %8, i32 noundef %9, ptr nocapture noundef readonly %10, ptr nocapture noundef readonly %11, i32 noundef %12, ptr noundef %13) unnamed_addr #4 {
  %15 = load ptr, ptr %13, align 8, !tbaa !19
  %16 = sext i32 %6 to i64
  %17 = getelementptr inbounds float, ptr %15, i64 %16
  %18 = getelementptr inbounds ptr, ptr %13, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds float, ptr %19, i64 %16
  %21 = getelementptr inbounds ptr, ptr %13, i64 2
  %22 = load ptr, ptr %21, align 8, !tbaa !19
  %23 = sext i32 %8 to i64
  %24 = getelementptr inbounds float, ptr %22, i64 %23
  %25 = getelementptr inbounds ptr, ptr %13, i64 3
  %26 = load ptr, ptr %25, align 8, !tbaa !19
  %27 = getelementptr inbounds float, ptr %26, i64 %23
  %28 = add nsw i32 %12, 1
  %29 = load i32, ptr @reccycle, align 4, !tbaa !31
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr @reccycle, align 4, !tbaa !31
  %31 = sub i32 %7, %6
  %32 = add i32 %31, 1
  %33 = sub nsw i32 %9, %8
  %34 = add nsw i32 %33, 1
  %35 = icmp slt i32 %33, 0
  br i1 %35, label %36, label %72

36:                                               ; preds = %14
  %37 = icmp sgt i32 %0, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = sext i32 %32 to i64
  %40 = zext i32 %0 to i64
  br label %46

41:                                               ; preds = %46, %36
  %42 = icmp sgt i32 %1, 0
  br i1 %42, label %43, label %999

43:                                               ; preds = %41
  %44 = icmp slt i32 %31, 0
  %45 = zext i32 %1 to i64
  br label %58

46:                                               ; preds = %46, %38
  %47 = phi i64 [ 0, %38 ], [ %56, %46 ]
  %48 = getelementptr inbounds ptr, ptr %10, i64 %47
  %49 = load ptr, ptr %48, align 8, !tbaa !19
  %50 = getelementptr inbounds ptr, ptr %2, i64 %47
  %51 = load ptr, ptr %50, align 8, !tbaa !19
  %52 = getelementptr inbounds i8, ptr %51, i64 %16
  %53 = tail call ptr @strncpy(ptr noundef %49, ptr noundef %52, i64 noundef %39) #35
  %54 = load ptr, ptr %48, align 8, !tbaa !19
  %55 = getelementptr inbounds i8, ptr %54, i64 %39
  store i8 0, ptr %55, align 1, !tbaa !17
  %56 = add nuw nsw i64 %47, 1
  %57 = icmp eq i64 %56, %40
  br i1 %57, label %41, label %46, !llvm.loop !518

58:                                               ; preds = %69, %43
  %59 = phi i64 [ 0, %43 ], [ %70, %69 ]
  %60 = getelementptr inbounds ptr, ptr %11, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !19
  store i8 0, ptr %61, align 1, !tbaa !17
  br i1 %44, label %69, label %62

62:                                               ; preds = %62, %58
  %63 = phi i32 [ %67, %62 ], [ 0, %58 ]
  %64 = load ptr, ptr %60, align 8, !tbaa !19
  %65 = tail call i64 @strlen(ptr nonnull dereferenceable(1) %64)
  %66 = getelementptr inbounds i8, ptr %64, i64 %65
  store i16 45, ptr %66, align 1
  %67 = add nuw i32 %63, 1
  %68 = icmp eq i32 %63, %31
  br i1 %68, label %69, label %62, !llvm.loop !519

69:                                               ; preds = %62, %58
  %70 = add nuw nsw i64 %59, 1
  %71 = icmp eq i64 %70, %45
  br i1 %71, label %999, label %58, !llvm.loop !520

72:                                               ; preds = %14
  %73 = tail call ptr @AllocateCharMtx(i32 noundef %0, i32 noundef 0) #35
  %74 = tail call ptr @AllocateCharMtx(i32 noundef %1, i32 noundef 0) #35
  %75 = icmp sgt i32 %0, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = zext i32 %0 to i64
  br label %82

78:                                               ; preds = %82, %72
  %79 = icmp sgt i32 %1, 0
  br i1 %79, label %80, label %96

80:                                               ; preds = %78
  %81 = zext i32 %1 to i64
  br label %89

82:                                               ; preds = %82, %76
  %83 = phi i64 [ 0, %76 ], [ %87, %82 ]
  %84 = getelementptr inbounds ptr, ptr %10, i64 %83
  %85 = load ptr, ptr %84, align 8, !tbaa !19
  %86 = getelementptr inbounds ptr, ptr %73, i64 %83
  store ptr %85, ptr %86, align 8, !tbaa !19
  %87 = add nuw nsw i64 %83, 1
  %88 = icmp eq i64 %87, %77
  br i1 %88, label %78, label %82, !llvm.loop !521

89:                                               ; preds = %89, %80
  %90 = phi i64 [ 0, %80 ], [ %94, %89 ]
  %91 = getelementptr inbounds ptr, ptr %11, i64 %90
  %92 = load ptr, ptr %91, align 8, !tbaa !19
  %93 = getelementptr inbounds ptr, ptr %74, i64 %90
  store ptr %92, ptr %93, align 8, !tbaa !19
  %94 = add nuw nsw i64 %90, 1
  %95 = icmp eq i64 %94, %81
  br i1 %95, label %96, label %89, !llvm.loop !522

96:                                               ; preds = %89, %78
  %97 = icmp slt i32 %31, 99
  %98 = icmp slt i32 %33, 99
  %99 = or i1 %97, %98
  br i1 %99, label %100, label %415

100:                                              ; preds = %96
  %101 = load ptr, ptr %13, align 8, !tbaa !19
  %102 = getelementptr inbounds float, ptr %101, i64 %16
  %103 = load ptr, ptr %18, align 8, !tbaa !19
  %104 = getelementptr inbounds float, ptr %103, i64 %16
  %105 = load ptr, ptr %21, align 8, !tbaa !19
  %106 = getelementptr inbounds float, ptr %105, i64 %23
  %107 = load ptr, ptr %25, align 8, !tbaa !19
  %108 = getelementptr inbounds float, ptr %107, i64 %23
  %109 = add nsw i32 %31, 101
  %110 = add nsw i32 %33, 101
  %111 = add nsw i32 %33, 103
  %112 = tail call ptr @AllocateFloatVec(i32 noundef %111) #35
  %113 = tail call ptr @AllocateFloatVec(i32 noundef %111) #35
  %114 = add nsw i32 %31, 103
  %115 = tail call ptr @AllocateFloatVec(i32 noundef %114) #35
  %116 = tail call ptr @AllocateFloatVec(i32 noundef %114) #35
  %117 = tail call ptr @AllocateFloatVec(i32 noundef %111) #35
  %118 = tail call ptr @AllocateIntVec(i32 noundef %111) #35
  %119 = tail call i32 @llvm.smax.i32(i32 %109, i32 %110)
  %120 = add nsw i32 %119, 2
  %121 = tail call ptr @AllocateFloatMtx(i32 noundef %120, i32 noundef 27) #35
  %122 = tail call ptr @AllocateIntMtx(i32 noundef %120, i32 noundef 27) #35
  %123 = add nsw i32 %31, 102
  %124 = add nsw i32 %33, 102
  %125 = tail call ptr @AllocateIntMtx(i32 noundef %123, i32 noundef %124) #35
  %126 = getelementptr inbounds ptr, ptr %5, i64 %23
  %127 = getelementptr inbounds ptr, ptr %4, i64 %16
  tail call fastcc void @match_calc.221(ptr noundef %115, ptr noundef %126, ptr noundef %127, i32 noundef 0, i32 noundef %32, ptr noundef %121, ptr noundef %122, i32 noundef 1) #39
  tail call fastcc void @match_calc.221(ptr noundef %112, ptr noundef %127, ptr noundef %126, i32 noundef 0, i32 noundef %34, ptr noundef %121, ptr noundef %122, i32 noundef 1) #39
  %128 = add i32 %31, 2
  %129 = icmp sgt i32 %31, -1
  br i1 %129, label %130, label %133

130:                                              ; preds = %100
  %131 = tail call i32 @llvm.smax.i32(i32 %128, i32 2)
  %132 = zext i32 %131 to i64
  br label %137

133:                                              ; preds = %137, %100
  %134 = add i32 %33, 2
  %135 = tail call i32 @llvm.smax.i32(i32 %134, i32 2)
  %136 = zext i32 %135 to i64
  br label %151

137:                                              ; preds = %137, %130
  %138 = phi i64 [ 1, %130 ], [ %147, %137 ]
  %139 = load float, ptr %102, align 4, !tbaa !167
  %140 = add nsw i64 %138, -1
  %141 = getelementptr inbounds float, ptr %104, i64 %140
  %142 = load float, ptr %141, align 4, !tbaa !167
  %143 = fadd float %139, %142
  %144 = getelementptr inbounds float, ptr %115, i64 %138
  %145 = load float, ptr %144, align 4, !tbaa !167
  %146 = fadd float %145, %143
  store float %146, ptr %144, align 4, !tbaa !167
  %147 = add nuw nsw i64 %138, 1
  %148 = icmp eq i64 %147, %132
  br i1 %148, label %133, label %137, !llvm.loop !523

149:                                              ; preds = %151
  %150 = getelementptr inbounds float, ptr %102, i64 1
  br label %163

151:                                              ; preds = %151, %133
  %152 = phi i64 [ 1, %133 ], [ %161, %151 ]
  %153 = load float, ptr %106, align 4, !tbaa !167
  %154 = add nsw i64 %152, -1
  %155 = getelementptr inbounds float, ptr %108, i64 %154
  %156 = load float, ptr %155, align 4, !tbaa !167
  %157 = fadd float %153, %156
  %158 = getelementptr inbounds float, ptr %112, i64 %152
  %159 = load float, ptr %158, align 4, !tbaa !167
  %160 = fadd float %159, %157
  store float %160, ptr %158, align 4, !tbaa !167
  %161 = add nuw nsw i64 %152, 1
  %162 = icmp eq i64 %161, %136
  br i1 %162, label %149, label %151, !llvm.loop !524

163:                                              ; preds = %163, %149
  %164 = phi i64 [ 1, %149 ], [ %172, %163 ]
  %165 = add nsw i64 %164, -1
  %166 = getelementptr inbounds float, ptr %112, i64 %165
  %167 = load float, ptr %166, align 4, !tbaa !167
  %168 = load float, ptr %150, align 4, !tbaa !167
  %169 = fadd float %167, %168
  %170 = getelementptr inbounds float, ptr %117, i64 %164
  store float %169, ptr %170, align 4, !tbaa !167
  %171 = getelementptr inbounds i32, ptr %118, i64 %164
  store i32 0, ptr %171, align 4, !tbaa !31
  %172 = add nuw nsw i64 %164, 1
  %173 = icmp eq i64 %172, %136
  br i1 %173, label %174, label %163, !llvm.loop !525

174:                                              ; preds = %163
  %175 = sext i32 %33 to i64
  %176 = getelementptr inbounds float, ptr %112, i64 %175
  %177 = load float, ptr %176, align 4, !tbaa !167
  store float %177, ptr %116, align 4, !tbaa !167
  br i1 %129, label %178, label %256

178:                                              ; preds = %174
  %179 = getelementptr inbounds float, ptr %106, i64 1
  %180 = tail call i32 @llvm.smax.i32(i32 %128, i32 2)
  %181 = zext i32 %180 to i64
  br label %182

182:                                              ; preds = %250, %178
  %183 = phi i64 [ 1, %178 ], [ %254, %250 ]
  %184 = phi ptr [ %112, %178 ], [ %185, %250 ]
  %185 = phi ptr [ %113, %178 ], [ %184, %250 ]
  %186 = add nsw i64 %183, -1
  %187 = getelementptr inbounds float, ptr %115, i64 %186
  %188 = load float, ptr %187, align 4, !tbaa !167
  store float %188, ptr %184, align 4, !tbaa !167
  %189 = trunc i64 %183 to i32
  tail call fastcc void @match_calc.221(ptr noundef %185, ptr noundef %127, ptr noundef %126, i32 noundef %189, i32 noundef %34, ptr noundef %121, ptr noundef %122, i32 noundef 0) #39
  %190 = getelementptr inbounds float, ptr %115, i64 %183
  %191 = load float, ptr %190, align 4, !tbaa !167
  store float %191, ptr %185, align 4, !tbaa !167
  %192 = getelementptr inbounds ptr, ptr %125, i64 %183
  %193 = load ptr, ptr %192, align 8, !tbaa !19
  %194 = load float, ptr %184, align 4, !tbaa !167
  %195 = load float, ptr %179, align 4, !tbaa !167
  %196 = fadd float %194, %195
  %197 = getelementptr inbounds float, ptr %104, i64 %186
  %198 = getelementptr inbounds float, ptr %102, i64 %183
  %199 = trunc i64 %186 to i32
  br label %200

200:                                              ; preds = %244, %182
  %201 = phi i64 [ 1, %182 ], [ %248, %244 ]
  %202 = phi ptr [ %193, %182 ], [ %212, %244 ]
  %203 = phi ptr [ %117, %182 ], [ %211, %244 ]
  %204 = phi ptr [ %118, %182 ], [ %210, %244 ]
  %205 = phi ptr [ %185, %182 ], [ %209, %244 ]
  %206 = phi ptr [ %184, %182 ], [ %247, %244 ]
  %207 = phi float [ %196, %182 ], [ %230, %244 ]
  %208 = phi i32 [ 0, %182 ], [ %229, %244 ]
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = getelementptr inbounds i32, ptr %204, i64 1
  %211 = getelementptr inbounds float, ptr %203, i64 1
  %212 = getelementptr inbounds i32, ptr %202, i64 1
  %213 = load float, ptr %206, align 4, !tbaa !167
  store i32 0, ptr %212, align 4, !tbaa !31
  %214 = add nsw i64 %201, -1
  %215 = getelementptr inbounds float, ptr %108, i64 %214
  %216 = load float, ptr %215, align 4, !tbaa !167
  %217 = fadd float %207, %216
  %218 = fcmp ogt float %217, %213
  br i1 %218, label %219, label %222

219:                                              ; preds = %200
  %220 = trunc i64 %201 to i32
  %221 = sub i32 %208, %220
  store i32 %221, ptr %212, align 4, !tbaa !31
  br label %222

222:                                              ; preds = %219, %200
  %223 = phi float [ %217, %219 ], [ %213, %200 ]
  %224 = getelementptr inbounds float, ptr %106, i64 %201
  %225 = load float, ptr %224, align 4, !tbaa !167
  %226 = fadd float %213, %225
  %227 = fcmp ult float %226, %207
  %228 = trunc i64 %214 to i32
  %229 = select i1 %227, i32 %208, i32 %228
  %230 = select i1 %227, float %207, float %226
  %231 = load float, ptr %211, align 4, !tbaa !167
  %232 = load float, ptr %197, align 4, !tbaa !167
  %233 = fadd float %231, %232
  %234 = fcmp ogt float %233, %223
  br i1 %234, label %235, label %238

235:                                              ; preds = %222
  %236 = load i32, ptr %210, align 4, !tbaa !31
  %237 = sub nsw i32 %189, %236
  store i32 %237, ptr %212, align 4, !tbaa !31
  br label %238

238:                                              ; preds = %235, %222
  %239 = phi float [ %233, %235 ], [ %223, %222 ]
  %240 = load float, ptr %198, align 4, !tbaa !167
  %241 = fadd float %213, %240
  %242 = fcmp ult float %241, %231
  br i1 %242, label %244, label %243

243:                                              ; preds = %238
  store float %241, ptr %211, align 4, !tbaa !167
  store i32 %199, ptr %210, align 4, !tbaa !31
  br label %244

244:                                              ; preds = %243, %238
  %245 = load float, ptr %209, align 4, !tbaa !167
  %246 = fadd float %239, %245
  store float %246, ptr %209, align 4, !tbaa !167
  %247 = getelementptr inbounds float, ptr %206, i64 1
  %248 = add nuw nsw i64 %201, 1
  %249 = icmp eq i64 %248, %136
  br i1 %249, label %250, label %200, !llvm.loop !526

250:                                              ; preds = %244
  %.lcssa2 = phi float [ %239, %244 ]
  %251 = getelementptr inbounds float, ptr %185, i64 %175
  %252 = load float, ptr %251, align 4, !tbaa !167
  %253 = getelementptr inbounds float, ptr %116, i64 %183
  store float %252, ptr %253, align 4, !tbaa !167
  %254 = add nuw nsw i64 %183, 1
  %255 = icmp eq i64 %254, %181
  br i1 %255, label %256, label %182, !llvm.loop !527

256:                                              ; preds = %250, %174
  %257 = phi float [ 0.000000e+00, %174 ], [ %.lcssa2, %250 ]
  %258 = add nsw i32 %34, %32
  %259 = add nsw i32 %258, 1
  %260 = tail call ptr @AllocateCharVec(i32 noundef %259) #35
  %261 = tail call ptr @AllocateCharVec(i32 noundef %259) #35
  %262 = icmp sgt i32 %31, -2
  br i1 %262, label %263, label %265

263:                                              ; preds = %256
  %264 = zext i32 %128 to i64
  br label %304

265:                                              ; preds = %304, %256
  %266 = load ptr, ptr %125, align 8, !tbaa !19
  %267 = zext i32 %134 to i64
  %268 = add nuw nsw i64 %267, 3
  %269 = and i64 %268, 8589934588
  %270 = add nsw i64 %267, -1
  %271 = insertelement <4 x i64> poison, i64 %270, i64 0
  %272 = shufflevector <4 x i64> %271, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %273

273:                                              ; preds = %300, %265
  %274 = phi i64 [ 0, %265 ], [ %301, %300 ]
  %275 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %265 ], [ %302, %300 ]
  %276 = trunc i64 %274 to i32
  %277 = icmp ule <4 x i64> %275, %272
  %278 = extractelement <4 x i1> %277, i64 0
  br i1 %278, label %279, label %282

279:                                              ; preds = %273
  %280 = getelementptr inbounds i32, ptr %266, i64 %274
  %281 = xor i32 %276, -1
  store i32 %281, ptr %280, align 4, !tbaa !31
  br label %282

282:                                              ; preds = %279, %273
  %283 = extractelement <4 x i1> %277, i64 1
  br i1 %283, label %284, label %288

284:                                              ; preds = %282
  %285 = or i64 %274, 1
  %286 = getelementptr inbounds i32, ptr %266, i64 %285
  %287 = xor i32 %276, -2
  store i32 %287, ptr %286, align 4, !tbaa !31
  br label %288

288:                                              ; preds = %284, %282
  %289 = extractelement <4 x i1> %277, i64 2
  br i1 %289, label %290, label %294

290:                                              ; preds = %288
  %291 = or i64 %274, 2
  %292 = getelementptr inbounds i32, ptr %266, i64 %291
  %293 = xor i32 %276, -3
  store i32 %293, ptr %292, align 4, !tbaa !31
  br label %294

294:                                              ; preds = %290, %288
  %295 = extractelement <4 x i1> %277, i64 3
  br i1 %295, label %296, label %300

296:                                              ; preds = %294
  %297 = or i64 %274, 3
  %298 = getelementptr inbounds i32, ptr %266, i64 %297
  %299 = xor i32 %276, -4
  store i32 %299, ptr %298, align 4, !tbaa !31
  br label %300

300:                                              ; preds = %296, %294
  %301 = add i64 %274, 4
  %302 = add <4 x i64> %275, <i64 4, i64 4, i64 4, i64 4>
  %303 = icmp eq i64 %301, %269
  br i1 %303, label %311, label %273, !llvm.loop !528

304:                                              ; preds = %304, %263
  %305 = phi i64 [ 0, %263 ], [ %306, %304 ]
  %306 = add nuw nsw i64 %305, 1
  %307 = getelementptr inbounds ptr, ptr %125, i64 %305
  %308 = load ptr, ptr %307, align 8, !tbaa !19
  %309 = trunc i64 %306 to i32
  store i32 %309, ptr %308, align 4, !tbaa !31
  %310 = icmp eq i64 %306, %264
  br i1 %310, label %265, label %304, !llvm.loop !529

311:                                              ; preds = %300
  %312 = sext i32 %32 to i64
  %313 = getelementptr inbounds i8, ptr %260, i64 %312
  %314 = sext i32 %34 to i64
  %315 = getelementptr inbounds i8, ptr %313, i64 %314
  store i8 0, ptr %315, align 1, !tbaa !17
  %316 = getelementptr inbounds i8, ptr %261, i64 %312
  %317 = getelementptr inbounds i8, ptr %316, i64 %314
  store i8 0, ptr %317, align 1, !tbaa !17
  %318 = icmp slt i32 %258, 0
  br i1 %318, label %388, label %319

319:                                              ; preds = %383, %311
  %320 = phi ptr [ %385, %383 ], [ %317, %311 ]
  %321 = phi ptr [ %384, %383 ], [ %315, %311 ]
  %322 = phi i32 [ %386, %383 ], [ 0, %311 ]
  %323 = phi i32 [ %341, %383 ], [ %32, %311 ]
  %324 = phi i32 [ %343, %383 ], [ %34, %311 ]
  %325 = sext i32 %323 to i64
  %326 = getelementptr inbounds ptr, ptr %125, i64 %325
  %327 = load ptr, ptr %326, align 8, !tbaa !19
  %328 = sext i32 %324 to i64
  %329 = getelementptr inbounds i32, ptr %327, i64 %328
  %330 = load i32, ptr %329, align 4, !tbaa !31
  %331 = icmp slt i32 %330, 0
  br i1 %331, label %332, label %334

332:                                              ; preds = %319
  %333 = add nsw i32 %323, -1
  br label %340

334:                                              ; preds = %319
  %335 = icmp eq i32 %330, 0
  br i1 %335, label %338, label %336

336:                                              ; preds = %334
  %337 = sub nsw i32 %323, %330
  br label %340

338:                                              ; preds = %334
  %339 = add nsw i32 %323, -1
  br label %340

340:                                              ; preds = %338, %336, %332
  %341 = phi i32 [ %333, %332 ], [ %337, %336 ], [ %339, %338 ]
  %342 = phi i32 [ %330, %332 ], [ -1, %336 ], [ -1, %338 ]
  %343 = add nsw i32 %342, %324
  %344 = xor i32 %341, -1
  %345 = add i32 %323, %344
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %359, label %347

347:                                              ; preds = %347, %340
  %348 = phi i32 [ %353, %347 ], [ %345, %340 ]
  %349 = phi ptr [ %352, %347 ], [ %320, %340 ]
  %350 = phi ptr [ %351, %347 ], [ %321, %340 ]
  %351 = getelementptr inbounds i8, ptr %350, i64 -1
  store i8 111, ptr %351, align 1, !tbaa !17
  %352 = getelementptr inbounds i8, ptr %349, i64 -1
  store i8 45, ptr %352, align 1, !tbaa !17
  %353 = add nsw i32 %348, -1
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %347, !llvm.loop !530

355:                                              ; preds = %347
  %.lcssa1 = phi ptr [ %351, %347 ]
  %.lcssa = phi ptr [ %352, %347 ]
  %356 = add i32 %323, -1
  %357 = add i32 %356, %322
  %358 = sub i32 %357, %341
  br label %359

359:                                              ; preds = %355, %340
  %360 = phi i32 [ %322, %340 ], [ %358, %355 ]
  %361 = phi ptr [ %321, %340 ], [ %.lcssa1, %355 ]
  %362 = phi ptr [ %320, %340 ], [ %.lcssa, %355 ]
  %363 = icmp eq i32 %342, -1
  br i1 %363, label %376, label %364

364:                                              ; preds = %359
  %365 = xor i32 %342, -1
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i32 [ %374, %366 ], [ %365, %364 ]
  %368 = phi ptr [ %372, %366 ], [ %362, %364 ]
  %369 = phi ptr [ %371, %366 ], [ %361, %364 ]
  %370 = phi i32 [ %373, %366 ], [ %360, %364 ]
  %371 = getelementptr inbounds i8, ptr %369, i64 -1
  store i8 45, ptr %371, align 1, !tbaa !17
  %372 = getelementptr inbounds i8, ptr %368, i64 -1
  store i8 111, ptr %372, align 1, !tbaa !17
  %373 = add nsw i32 %370, 1
  %374 = add nsw i32 %367, -1
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %366, !llvm.loop !531

376:                                              ; preds = %366, %359
  %377 = phi i32 [ %360, %359 ], [ %373, %366 ]
  %378 = phi ptr [ %361, %359 ], [ %371, %366 ]
  %379 = phi ptr [ %362, %359 ], [ %372, %366 ]
  %380 = icmp slt i32 %323, 1
  %381 = icmp slt i32 %324, 1
  %382 = or i1 %380, %381
  br i1 %382, label %388, label %383

383:                                              ; preds = %376
  %384 = getelementptr inbounds i8, ptr %378, i64 -1
  store i8 111, ptr %384, align 1, !tbaa !17
  %385 = getelementptr inbounds i8, ptr %379, i64 -1
  store i8 111, ptr %385, align 1, !tbaa !17
  %386 = add nsw i32 %377, 2
  %387 = icmp sgt i32 %386, %258
  br i1 %387, label %388, label %319, !llvm.loop !532

388:                                              ; preds = %383, %376, %311
  %389 = phi ptr [ %315, %311 ], [ %378, %376 ], [ %384, %383 ]
  %390 = phi ptr [ %317, %311 ], [ %379, %376 ], [ %385, %383 ]
  br i1 %75, label %391, label %393

391:                                              ; preds = %388
  %392 = zext i32 %0 to i64
  br label %396

393:                                              ; preds = %396, %388
  br i1 %79, label %394, label %414

394:                                              ; preds = %393
  %395 = zext i32 %1 to i64
  br label %405

396:                                              ; preds = %396, %391
  %397 = phi i64 [ 0, %391 ], [ %403, %396 ]
  %398 = getelementptr inbounds ptr, ptr %73, i64 %397
  %399 = load ptr, ptr %398, align 8, !tbaa !19
  %400 = getelementptr inbounds ptr, ptr %2, i64 %397
  %401 = load ptr, ptr %400, align 8, !tbaa !19
  %402 = getelementptr inbounds i8, ptr %401, i64 %16
  tail call void @gapireru(ptr noundef %399, ptr noundef %402, ptr noundef %389) #35
  %403 = add nuw nsw i64 %397, 1
  %404 = icmp eq i64 %403, %392
  br i1 %404, label %393, label %396, !llvm.loop !533

405:                                              ; preds = %405, %394
  %406 = phi i64 [ 0, %394 ], [ %412, %405 ]
  %407 = getelementptr inbounds ptr, ptr %74, i64 %406
  %408 = load ptr, ptr %407, align 8, !tbaa !19
  %409 = getelementptr inbounds ptr, ptr %3, i64 %406
  %410 = load ptr, ptr %409, align 8, !tbaa !19
  %411 = getelementptr inbounds i8, ptr %410, i64 %23
  tail call void @gapireru(ptr noundef %408, ptr noundef %411, ptr noundef %390) #35
  %412 = add nuw nsw i64 %406, 1
  %413 = icmp eq i64 %412, %395
  br i1 %413, label %414, label %405, !llvm.loop !534

414:                                              ; preds = %405, %393
  tail call void @free(ptr noundef %260) #35
  tail call void @free(ptr noundef %261) #35
  tail call void @FreeFloatVec(ptr noundef %112) #35
  tail call void @FreeFloatVec(ptr noundef %113) #35
  tail call void @FreeFloatVec(ptr noundef %115) #35
  tail call void @FreeFloatVec(ptr noundef nonnull %116) #35
  tail call void @FreeFloatVec(ptr noundef %117) #35
  tail call void @FreeIntVec(ptr noundef %118) #35
  tail call void @FreeFloatMtx(ptr noundef %121) #35
  tail call void @FreeIntMtx(ptr noundef %122) #35
  tail call void @FreeIntMtx(ptr noundef nonnull %125) #35
  br label %997

415:                                              ; preds = %96
  %416 = add nuw nsw i32 %31, 101
  %417 = add nuw nsw i32 %33, 101
  %418 = add nuw nsw i32 %33, 103
  %419 = tail call ptr @AllocateFloatVec(i32 noundef %418) #35
  %420 = tail call ptr @AllocateFloatVec(i32 noundef %418) #35
  %421 = tail call ptr @AllocateFloatVec(i32 noundef %418) #35
  %422 = tail call ptr @AllocateFloatVec(i32 noundef %418) #35
  %423 = tail call ptr @AllocateFloatVec(i32 noundef %418) #35
  %424 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %425 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %426 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %427 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %428 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %429 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %430 = add nuw nsw i32 %31, 103
  %431 = tail call ptr @AllocateFloatVec(i32 noundef %430) #35
  %432 = tail call ptr @AllocateFloatVec(i32 noundef %430) #35
  %433 = tail call ptr @AllocateFloatVec(i32 noundef %418) #35
  %434 = tail call ptr @AllocateIntVec(i32 noundef %418) #35
  %435 = tail call i32 @llvm.smax.i32(i32 %416, i32 %417)
  %436 = add nuw nsw i32 %435, 2
  %437 = tail call ptr @AllocateCharVec(i32 noundef %436) #35
  %438 = tail call ptr @AllocateFloatMtx(i32 noundef %436, i32 noundef 26) #35
  %439 = tail call ptr @AllocateIntMtx(i32 noundef %436, i32 noundef 26) #35
  %440 = getelementptr inbounds ptr, ptr %5, i64 %23
  %441 = getelementptr inbounds ptr, ptr %4, i64 %16
  tail call fastcc void @match_calc.221(ptr noundef %431, ptr noundef %440, ptr noundef %441, i32 noundef 0, i32 noundef %32, ptr noundef %438, ptr noundef %439, i32 noundef 1) #39
  tail call fastcc void @match_calc.221(ptr noundef %419, ptr noundef %441, ptr noundef %440, i32 noundef 0, i32 noundef %34, ptr noundef %438, ptr noundef %439, i32 noundef 1) #39
  %442 = add i32 %7, 2
  %443 = sub i32 %442, %6
  %444 = zext i32 %443 to i64
  br label %451

445:                                              ; preds = %451
  %446 = add i32 %33, 2
  %447 = icmp sgt i32 %33, -1
  br i1 %447, label %448, label %491

448:                                              ; preds = %445
  %449 = tail call i32 @llvm.smax.i32(i32 %446, i32 2)
  %450 = zext i32 %449 to i64
  br label %468

451:                                              ; preds = %451, %415
  %452 = phi i64 [ 1, %415 ], [ %461, %451 ]
  %453 = load float, ptr %17, align 4, !tbaa !167
  %454 = add nsw i64 %452, -1
  %455 = getelementptr inbounds float, ptr %20, i64 %454
  %456 = load float, ptr %455, align 4, !tbaa !167
  %457 = fadd float %453, %456
  %458 = getelementptr inbounds float, ptr %431, i64 %452
  %459 = load float, ptr %458, align 4, !tbaa !167
  %460 = fadd float %459, %457
  store float %460, ptr %458, align 4, !tbaa !167
  %461 = add nuw nsw i64 %452, 1
  %462 = icmp eq i64 %461, %444
  br i1 %462, label %445, label %451, !llvm.loop !535

463:                                              ; preds = %468
  br i1 %447, label %464, label %491

464:                                              ; preds = %463
  %465 = getelementptr inbounds float, ptr %17, i64 1
  %466 = tail call i32 @llvm.smax.i32(i32 %446, i32 2)
  %467 = zext i32 %466 to i64
  br label %480

468:                                              ; preds = %468, %448
  %469 = phi i64 [ 1, %448 ], [ %478, %468 ]
  %470 = load float, ptr %24, align 4, !tbaa !167
  %471 = add nsw i64 %469, -1
  %472 = getelementptr inbounds float, ptr %27, i64 %471
  %473 = load float, ptr %472, align 4, !tbaa !167
  %474 = fadd float %470, %473
  %475 = getelementptr inbounds float, ptr %419, i64 %469
  %476 = load float, ptr %475, align 4, !tbaa !167
  %477 = fadd float %476, %474
  store float %477, ptr %475, align 4, !tbaa !167
  %478 = add nuw nsw i64 %469, 1
  %479 = icmp eq i64 %478, %450
  br i1 %479, label %463, label %468, !llvm.loop !536

480:                                              ; preds = %480, %464
  %481 = phi i64 [ 1, %464 ], [ %489, %480 ]
  %482 = add nsw i64 %481, -1
  %483 = getelementptr inbounds float, ptr %419, i64 %482
  %484 = load float, ptr %483, align 4, !tbaa !167
  %485 = load float, ptr %465, align 4, !tbaa !167
  %486 = fadd float %484, %485
  %487 = getelementptr inbounds float, ptr %433, i64 %481
  store float %486, ptr %487, align 4, !tbaa !167
  %488 = getelementptr inbounds i32, ptr %434, i64 %481
  store i32 0, ptr %488, align 4, !tbaa !31
  %489 = add nuw nsw i64 %481, 1
  %490 = icmp eq i64 %489, %467
  br i1 %490, label %491, label %480, !llvm.loop !537

491:                                              ; preds = %480, %463, %445
  %492 = sext i32 %33 to i64
  %493 = getelementptr inbounds float, ptr %419, i64 %492
  %494 = load float, ptr %493, align 4, !tbaa !167
  store float %494, ptr %432, align 4, !tbaa !167
  %495 = sitofp i32 %32 to double
  %496 = fmul double %495, 5.000000e-01
  %497 = fptosi double %496 to i32
  %498 = icmp slt i32 %497, 1
  br i1 %498, label %582, label %499

499:                                              ; preds = %491
  %500 = getelementptr inbounds float, ptr %24, i64 1
  %501 = tail call i32 @llvm.smax.i32(i32 %446, i32 2)
  %502 = zext i32 %497 to i64
  %503 = add nuw i32 %497, 1
  %504 = zext i32 %503 to i64
  %505 = zext i32 %501 to i64
  br label %506

506:                                              ; preds = %576, %499
  %507 = phi i64 [ 1, %499 ], [ %580, %576 ]
  %508 = phi ptr [ %419, %499 ], [ %509, %576 ]
  %509 = phi ptr [ %420, %499 ], [ %508, %576 ]
  %510 = add nsw i64 %507, -1
  %511 = getelementptr inbounds float, ptr %431, i64 %510
  %512 = load float, ptr %511, align 4, !tbaa !167
  store float %512, ptr %508, align 4, !tbaa !167
  %513 = trunc i64 %507 to i32
  tail call fastcc void @match_calc.221(ptr noundef %509, ptr noundef %441, ptr noundef %440, i32 noundef %513, i32 noundef %34, ptr noundef %438, ptr noundef %439, i32 noundef 0) #39
  %514 = getelementptr inbounds float, ptr %431, i64 %507
  %515 = load float, ptr %514, align 4, !tbaa !167
  store float %515, ptr %509, align 4, !tbaa !167
  %516 = getelementptr inbounds float, ptr %17, i64 %507
  %517 = load float, ptr %516, align 4, !tbaa !167
  store float %517, ptr %433, align 4, !tbaa !167
  %518 = icmp eq i64 %507, %502
  br i1 %518, label %519, label %520

519:                                              ; preds = %506
  store float %517, ptr %423, align 4, !tbaa !167
  br label %520

520:                                              ; preds = %519, %506
  br i1 %447, label %521, label %576

521:                                              ; preds = %520
  %522 = load float, ptr %508, align 4, !tbaa !167
  %523 = load float, ptr %500, align 4, !tbaa !167
  %524 = fadd float %522, %523
  %525 = getelementptr inbounds float, ptr %20, i64 %510
  %526 = trunc i64 %510 to i32
  br label %527

527:                                              ; preds = %572, %521
  %528 = phi i64 [ 1, %521 ], [ %574, %572 ]
  %529 = phi ptr [ %433, %521 ], [ %537, %572 ]
  %530 = phi ptr [ %434, %521 ], [ %536, %572 ]
  %531 = phi ptr [ %509, %521 ], [ %535, %572 ]
  %532 = phi i32 [ 0, %521 ], [ %551, %572 ]
  %533 = phi ptr [ %508, %521 ], [ %573, %572 ]
  %534 = phi float [ %524, %521 ], [ %549, %572 ]
  %535 = getelementptr inbounds float, ptr %531, i64 1
  %536 = getelementptr inbounds i32, ptr %530, i64 1
  %537 = getelementptr inbounds float, ptr %529, i64 1
  %538 = load float, ptr %533, align 4, !tbaa !167
  %539 = add nsw i64 %528, -1
  %540 = getelementptr inbounds float, ptr %27, i64 %539
  %541 = load float, ptr %540, align 4, !tbaa !167
  %542 = fadd float %534, %541
  %543 = fcmp ogt float %542, %538
  %544 = select i1 %543, float %542, float %538
  %545 = getelementptr inbounds float, ptr %24, i64 %528
  %546 = load float, ptr %545, align 4, !tbaa !167
  %547 = fadd float %538, %546
  %548 = fcmp ult float %547, %534
  %549 = select i1 %548, float %534, float %547
  %550 = trunc i64 %539 to i32
  %551 = select i1 %548, i32 %532, i32 %550
  %552 = load float, ptr %537, align 4, !tbaa !167
  %553 = load float, ptr %525, align 4, !tbaa !167
  %554 = fadd float %552, %553
  %555 = fcmp ogt float %554, %544
  %556 = select i1 %555, float %554, float %544
  %557 = load float, ptr %516, align 4, !tbaa !167
  %558 = fadd float %538, %557
  %559 = fcmp ult float %558, %552
  br i1 %559, label %561, label %560

560:                                              ; preds = %527
  store float %558, ptr %537, align 4, !tbaa !167
  store i32 %526, ptr %536, align 4, !tbaa !31
  br label %561

561:                                              ; preds = %560, %527
  %562 = load float, ptr %535, align 4, !tbaa !167
  %563 = fadd float %556, %562
  store float %563, ptr %535, align 4, !tbaa !167
  br i1 %518, label %564, label %572

564:                                              ; preds = %561
  %565 = load i32, ptr %536, align 4, !tbaa !31
  %566 = getelementptr inbounds i32, ptr %425, i64 %528
  store i32 %565, ptr %566, align 4, !tbaa !31
  %567 = getelementptr inbounds i32, ptr %424, i64 %528
  store i32 %551, ptr %567, align 4, !tbaa !31
  %568 = getelementptr inbounds float, ptr %421, i64 %528
  store float %563, ptr %568, align 4, !tbaa !167
  %569 = load float, ptr %537, align 4, !tbaa !167
  %570 = getelementptr inbounds float, ptr %423, i64 %528
  store float %569, ptr %570, align 4, !tbaa !167
  %571 = getelementptr inbounds float, ptr %422, i64 %528
  store float %549, ptr %571, align 4, !tbaa !167
  br label %572

572:                                              ; preds = %564, %561
  %573 = getelementptr inbounds float, ptr %533, i64 1
  %574 = add nuw nsw i64 %528, 1
  %575 = icmp eq i64 %574, %505
  br i1 %575, label %576, label %527, !llvm.loop !538

576:                                              ; preds = %572, %520
  %577 = getelementptr inbounds float, ptr %509, i64 %492
  %578 = load float, ptr %577, align 4, !tbaa !167
  %579 = getelementptr inbounds float, ptr %432, i64 %507
  store float %578, ptr %579, align 4, !tbaa !167
  %580 = add nuw nsw i64 %507, 1
  %581 = icmp eq i64 %580, %504
  br i1 %581, label %582, label %506, !llvm.loop !539

582:                                              ; preds = %576, %491
  %583 = phi ptr [ %420, %491 ], [ %508, %576 ]
  %584 = phi ptr [ %419, %491 ], [ %509, %576 ]
  tail call fastcc void @match_calc.221(ptr noundef %431, ptr noundef %440, ptr noundef %441, i32 noundef %33, i32 noundef %32, ptr noundef %438, ptr noundef %439, i32 noundef 1) #39
  tail call fastcc void @match_calc.221(ptr noundef nonnull %584, ptr noundef %441, ptr noundef %440, i32 noundef %31, i32 noundef %34, ptr noundef %438, ptr noundef %439, i32 noundef 1) #39
  %585 = icmp sgt i32 %31, 0
  br i1 %585, label %586, label %590

586:                                              ; preds = %582
  %587 = zext i32 %31 to i64
  %588 = getelementptr inbounds float, ptr %20, i64 %587
  %589 = zext i32 %31 to i64
  br label %595

590:                                              ; preds = %595, %582
  %591 = icmp sgt i32 %33, 0
  br i1 %591, label %592, label %607

592:                                              ; preds = %590
  %593 = getelementptr inbounds float, ptr %27, i64 %492
  %594 = zext i32 %33 to i64
  br label %615

595:                                              ; preds = %595, %586
  %596 = phi i64 [ 0, %586 ], [ %598, %595 ]
  %597 = load float, ptr %588, align 4, !tbaa !167
  %598 = add nuw nsw i64 %596, 1
  %599 = getelementptr inbounds float, ptr %17, i64 %598
  %600 = load float, ptr %599, align 4, !tbaa !167
  %601 = fadd float %597, %600
  %602 = getelementptr inbounds float, ptr %431, i64 %596
  %603 = load float, ptr %602, align 4, !tbaa !167
  %604 = fadd float %603, %601
  store float %604, ptr %602, align 4, !tbaa !167
  %605 = icmp eq i64 %598, %589
  br i1 %605, label %590, label %595, !llvm.loop !540

606:                                              ; preds = %615
  br i1 %591, label %610, label %607

607:                                              ; preds = %606, %590
  %608 = add i32 %33, -1
  %609 = zext i32 %608 to i64
  br label %626

610:                                              ; preds = %606
  %611 = add nsw i32 %33, -1
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds float, ptr %27, i64 %612
  %614 = zext i32 %33 to i64
  br label %643

615:                                              ; preds = %615, %592
  %616 = phi i64 [ 0, %592 ], [ %618, %615 ]
  %617 = load float, ptr %593, align 4, !tbaa !167
  %618 = add nuw nsw i64 %616, 1
  %619 = getelementptr inbounds float, ptr %24, i64 %618
  %620 = load float, ptr %619, align 4, !tbaa !167
  %621 = fadd float %617, %620
  %622 = getelementptr inbounds float, ptr %584, i64 %616
  %623 = load float, ptr %622, align 4, !tbaa !167
  %624 = fadd float %623, %621
  store float %624, ptr %622, align 4, !tbaa !167
  %625 = icmp eq i64 %618, %594
  br i1 %625, label %606, label %615, !llvm.loop !541

626:                                              ; preds = %643, %607
  %627 = phi i64 [ %609, %607 ], [ %612, %643 ]
  %628 = getelementptr float, ptr %433, i64 -2
  %629 = getelementptr i32, ptr %434, i64 -2
  %630 = getelementptr inbounds float, ptr %27, i64 %627
  %631 = zext i32 %34 to i64
  %632 = getelementptr float, ptr %628, i64 %631
  %633 = getelementptr i32, ptr %629, i64 %631
  %634 = add nsw i32 %497, -1
  %635 = getelementptr inbounds float, ptr %421, i64 1
  %636 = icmp sgt i32 %33, 2
  %637 = icmp sgt i32 %33, -2
  %638 = tail call i32 @llvm.smax.i32(i32 %446, i32 1)
  %639 = zext i32 %31 to i64
  %640 = zext i32 %497 to i64
  %641 = zext i32 %33 to i64
  %642 = zext i32 %638 to i64
  br label %655

643:                                              ; preds = %643, %610
  %644 = phi i64 [ %614, %610 ], [ %649, %643 ]
  %645 = getelementptr inbounds float, ptr %584, i64 %644
  %646 = load float, ptr %645, align 4, !tbaa !167
  %647 = load float, ptr %613, align 4, !tbaa !167
  %648 = fadd float %646, %647
  %649 = add nsw i64 %644, -1
  %650 = and i64 %649, 4294967295
  %651 = getelementptr inbounds float, ptr %433, i64 %650
  store float %648, ptr %651, align 4, !tbaa !167
  %652 = getelementptr inbounds i32, ptr %434, i64 %644
  store i32 %31, ptr %652, align 4, !tbaa !31
  %653 = trunc i64 %644 to i32
  %654 = icmp sgt i32 %653, 1
  br i1 %654, label %643, label %626, !llvm.loop !542

655:                                              ; preds = %826, %626
  %656 = phi i64 [ %639, %626 ], [ %664, %826 ]
  %657 = phi ptr [ %583, %626 ], [ %658, %826 ]
  %658 = phi ptr [ %584, %626 ], [ %657, %826 ]
  %659 = phi i32 [ 0, %626 ], [ %827, %826 ]
  %660 = phi i32 [ 0, %626 ], [ %828, %826 ]
  %661 = phi i32 [ 0, %626 ], [ %829, %826 ]
  %662 = phi float [ -1.000000e+07, %626 ], [ %763, %826 ]
  %663 = phi i32 [ %31, %626 ], [ %764, %826 ]
  %664 = add nsw i64 %656, -1
  %665 = trunc i64 %664 to i32
  %666 = trunc i64 %656 to i32
  %667 = icmp sgt i32 %666, 0
  br i1 %667, label %668, label %843

668:                                              ; preds = %655
  %669 = getelementptr inbounds float, ptr %431, i64 %656
  %670 = load float, ptr %669, align 4, !tbaa !167
  %671 = getelementptr inbounds float, ptr %658, i64 %492
  store float %670, ptr %671, align 4, !tbaa !167
  tail call fastcc void @match_calc.221(ptr noundef %657, ptr noundef %441, ptr noundef %440, i32 noundef %665, i32 noundef %34, ptr noundef %438, ptr noundef %439, i32 noundef 0) #39
  %672 = and i64 %664, 4294967295
  %673 = getelementptr inbounds float, ptr %431, i64 %672
  %674 = load float, ptr %673, align 4, !tbaa !167
  %675 = getelementptr inbounds float, ptr %657, i64 %492
  store float %674, ptr %675, align 4, !tbaa !167
  %676 = getelementptr inbounds float, ptr %658, i64 %631
  %677 = getelementptr inbounds float, ptr %676, i64 -1
  br i1 %591, label %678, label %755

678:                                              ; preds = %668
  %679 = getelementptr inbounds float, ptr %657, i64 %631
  %680 = getelementptr inbounds float, ptr %679, i64 -2
  %681 = load float, ptr %671, align 4, !tbaa !167
  %682 = load float, ptr %630, align 4, !tbaa !167
  %683 = fadd float %681, %682
  %684 = getelementptr inbounds float, ptr %17, i64 %656
  %685 = getelementptr inbounds float, ptr %20, i64 %672
  %686 = icmp eq i32 %660, %665
  %687 = icmp eq i64 %656, %640
  %688 = or i1 %687, %686
  %689 = icmp eq i32 %665, %497
  br label %690

690:                                              ; preds = %745, %678
  %691 = phi i64 [ %627, %678 ], [ %751, %745 ]
  %692 = phi ptr [ %677, %678 ], [ %752, %745 ]
  %693 = phi ptr [ %633, %678 ], [ %749, %745 ]
  %694 = phi i32 [ %33, %678 ], [ %712, %745 ]
  %695 = phi ptr [ %632, %678 ], [ %748, %745 ]
  %696 = phi ptr [ %680, %678 ], [ %750, %745 ]
  %697 = phi float [ %683, %678 ], [ %711, %745 ]
  %698 = load float, ptr %692, align 4, !tbaa !167
  %699 = add nuw nsw i64 %691, 1
  %700 = getelementptr inbounds float, ptr %24, i64 %699
  %701 = load float, ptr %700, align 4, !tbaa !167
  %702 = fadd float %697, %701
  %703 = fcmp ogt float %702, %698
  %704 = select i1 %703, float %702, float %698
  %705 = trunc i64 %699 to i32
  %706 = select i1 %703, i32 %694, i32 %705
  %707 = getelementptr inbounds float, ptr %27, i64 %691
  %708 = load float, ptr %707, align 4, !tbaa !167
  %709 = fadd float %698, %708
  %710 = fcmp ult float %709, %697
  %711 = select i1 %710, float %697, float %709
  %712 = select i1 %710, i32 %694, i32 %705
  %713 = load float, ptr %695, align 4, !tbaa !167
  %714 = load float, ptr %684, align 4, !tbaa !167
  %715 = fadd float %713, %714
  %716 = fcmp ogt float %715, %704
  br i1 %716, label %717, label %719

717:                                              ; preds = %690
  %718 = load i32, ptr %693, align 4, !tbaa !31
  br label %719

719:                                              ; preds = %717, %690
  %720 = phi float [ %715, %717 ], [ %704, %690 ]
  %721 = phi i32 [ %718, %717 ], [ %666, %690 ]
  %722 = phi i32 [ %705, %717 ], [ %706, %690 ]
  %723 = load float, ptr %685, align 4, !tbaa !167
  %724 = fadd float %698, %723
  %725 = fcmp ult float %724, %713
  br i1 %725, label %727, label %726

726:                                              ; preds = %719
  store float %724, ptr %695, align 4, !tbaa !167
  store i32 %666, ptr %693, align 4, !tbaa !31
  br label %727

727:                                              ; preds = %726, %719
  br i1 %688, label %728, label %731

728:                                              ; preds = %727
  %729 = getelementptr inbounds i32, ptr %426, i64 %691
  store i32 %721, ptr %729, align 4, !tbaa !31
  %730 = getelementptr inbounds i32, ptr %427, i64 %691
  store i32 %722, ptr %730, align 4, !tbaa !31
  br label %731

731:                                              ; preds = %728, %727
  br i1 %689, label %732, label %740

732:                                              ; preds = %731
  %733 = getelementptr inbounds float, ptr %421, i64 %691
  %734 = load float, ptr %733, align 4, !tbaa !167
  %735 = fadd float %720, %734
  store float %735, ptr %733, align 4, !tbaa !167
  %736 = load float, ptr %695, align 4, !tbaa !167
  %737 = getelementptr inbounds float, ptr %423, i64 %699
  %738 = load float, ptr %737, align 4, !tbaa !167
  %739 = fadd float %736, %738
  store float %739, ptr %737, align 4, !tbaa !167
  br label %740

740:                                              ; preds = %732, %731
  br i1 %687, label %741, label %745

741:                                              ; preds = %740
  %742 = getelementptr inbounds float, ptr %422, i64 %691
  %743 = load float, ptr %742, align 4, !tbaa !167
  %744 = fadd float %711, %743
  store float %744, ptr %742, align 4, !tbaa !167
  br label %745

745:                                              ; preds = %741, %740
  %746 = load float, ptr %696, align 4, !tbaa !167
  %747 = fadd float %720, %746
  store float %747, ptr %696, align 4, !tbaa !167
  %748 = getelementptr inbounds float, ptr %695, i64 -1
  %749 = getelementptr inbounds i32, ptr %693, i64 -1
  %750 = getelementptr inbounds float, ptr %696, i64 -1
  %751 = add nsw i64 %691, -1
  %752 = getelementptr inbounds float, ptr %692, i64 -1
  %753 = trunc i64 %691 to i32
  %754 = icmp sgt i32 %753, 0
  br i1 %754, label %690, label %755, !llvm.loop !543

755:                                              ; preds = %745, %668
  %756 = phi i32 [ %33, %668 ], [ 0, %745 ]
  %757 = phi ptr [ %677, %668 ], [ %752, %745 ]
  %758 = load float, ptr %757, align 4, !tbaa !167
  %759 = getelementptr inbounds float, ptr %20, i64 %672
  %760 = load float, ptr %759, align 4, !tbaa !167
  %761 = fadd float %758, %760
  %762 = fcmp olt float %662, %761
  %763 = select i1 %762, float %761, float %662
  %764 = select i1 %762, i32 %666, i32 %663
  %765 = icmp eq i32 %665, %497
  br i1 %765, label %766, label %771

766:                                              ; preds = %755
  %767 = sext i32 %756 to i64
  %768 = getelementptr inbounds float, ptr %423, i64 %767
  %769 = load float, ptr %768, align 4, !tbaa !167
  %770 = fadd float %763, %769
  store float %770, ptr %768, align 4, !tbaa !167
  br label %771

771:                                              ; preds = %766, %755
  %772 = icmp eq i64 %656, %640
  br i1 %772, label %773, label %826

773:                                              ; preds = %771
  %774 = load float, ptr %635, align 4, !tbaa !167
  br i1 %636, label %778, label %775

775:                                              ; preds = %778, %773
  %776 = phi float [ %774, %773 ], [ %785, %778 ]
  %777 = phi i32 [ 0, %773 ], [ %787, %778 ]
  br i1 %637, label %790, label %802

778:                                              ; preds = %778, %773
  %779 = phi i64 [ %788, %778 ], [ 2, %773 ]
  %780 = phi i32 [ %787, %778 ], [ 0, %773 ]
  %781 = phi float [ %785, %778 ], [ %774, %773 ]
  %782 = getelementptr inbounds float, ptr %421, i64 %779
  %783 = load float, ptr %782, align 4, !tbaa !167
  %784 = fcmp ogt float %783, %781
  %785 = select i1 %784, float %783, float %781
  %786 = trunc i64 %779 to i32
  %787 = select i1 %784, i32 %786, i32 %780
  %788 = add nuw nsw i64 %779, 1
  %789 = icmp eq i64 %788, %641
  br i1 %789, label %775, label %778, !llvm.loop !544

790:                                              ; preds = %790, %775
  %791 = phi i64 [ %800, %790 ], [ 0, %775 ]
  %792 = phi i32 [ %799, %790 ], [ %777, %775 ]
  %793 = phi float [ %797, %790 ], [ %776, %775 ]
  %794 = getelementptr inbounds float, ptr %423, i64 %791
  %795 = load float, ptr %794, align 4, !tbaa !167
  %796 = fcmp ogt float %795, %793
  %797 = select i1 %796, float %795, float %793
  %798 = trunc i64 %791 to i32
  %799 = select i1 %796, i32 %798, i32 %792
  %800 = add nuw nsw i64 %791, 1
  %801 = icmp eq i64 %800, %642
  br i1 %801, label %802, label %790, !llvm.loop !545

802:                                              ; preds = %790, %775
  %803 = phi i32 [ %777, %775 ], [ %799, %790 ]
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds float, ptr %421, i64 %804
  %806 = load float, ptr %805, align 4, !tbaa !167
  %807 = add nsw i32 %803, -1
  %808 = icmp sgt i32 %803, 0
  br i1 %808, label %809, label %817

809:                                              ; preds = %802
  %810 = zext i32 %807 to i64
  %811 = getelementptr inbounds float, ptr %422, i64 %810
  %812 = load float, ptr %811, align 4, !tbaa !167
  %813 = fcmp ogt float %812, %806
  br i1 %813, label %814, label %817

814:                                              ; preds = %809
  %815 = getelementptr inbounds i32, ptr %424, i64 %804
  %816 = load i32, ptr %815, align 4, !tbaa !31
  br label %817

817:                                              ; preds = %814, %809, %802
  %818 = phi float [ %812, %814 ], [ %806, %809 ], [ %806, %802 ]
  %819 = phi i32 [ %816, %814 ], [ %807, %809 ], [ %807, %802 ]
  %820 = getelementptr inbounds float, ptr %423, i64 %804
  %821 = load float, ptr %820, align 4, !tbaa !167
  %822 = fcmp ogt float %821, %818
  br i1 %822, label %823, label %826

823:                                              ; preds = %817
  %824 = getelementptr inbounds i32, ptr %425, i64 %804
  %825 = load i32, ptr %824, align 4, !tbaa !31
  br label %826

826:                                              ; preds = %823, %817, %771
  %827 = phi i32 [ %803, %823 ], [ %803, %817 ], [ %659, %771 ]
  %828 = phi i32 [ %825, %823 ], [ %634, %817 ], [ %660, %771 ]
  %829 = phi i32 [ %807, %823 ], [ %819, %817 ], [ %661, %771 ]
  %830 = icmp eq i32 %828, %665
  br i1 %830, label %831, label %655, !llvm.loop !546

831:                                              ; preds = %826
  %.lcssa7 = phi i32 [ %827, %826 ]
  %.lcssa6 = phi i32 [ %829, %826 ]
  %.lcssa5 = phi i32 [ %764, %826 ]
  %.lcssa4 = phi i32 [ %665, %826 ]
  %832 = icmp eq i32 %.lcssa7, 0
  br i1 %832, label %833, label %835

833:                                              ; preds = %831
  %834 = add nsw i32 %.lcssa5, -1
  br label %843

835:                                              ; preds = %831
  %836 = icmp sgt i32 %.lcssa7, %33
  br i1 %836, label %843, label %837

837:                                              ; preds = %835
  %838 = sext i32 %.lcssa6 to i64
  %839 = getelementptr inbounds i32, ptr %426, i64 %838
  %840 = load i32, ptr %839, align 4, !tbaa !31
  %841 = getelementptr inbounds i32, ptr %427, i64 %838
  %842 = load i32, ptr %841, align 4, !tbaa !31
  br label %843

843:                                              ; preds = %837, %835, %833, %655
  %844 = phi i32 [ 1, %833 ], [ %842, %837 ], [ %34, %835 ], [ %659, %655 ]
  %845 = phi i32 [ %.lcssa5, %833 ], [ %840, %837 ], [ %497, %835 ], [ %497, %655 ]
  %846 = phi i32 [ %834, %833 ], [ %.lcssa4, %837 ], [ %634, %835 ], [ %660, %655 ]
  %847 = phi i32 [ 0, %833 ], [ %.lcssa6, %837 ], [ %33, %835 ], [ %661, %655 ]
  tail call void @FreeFloatVec(ptr noundef %419) #35
  tail call void @FreeFloatVec(ptr noundef %420) #35
  tail call void @FreeFloatVec(ptr noundef %431) #35
  tail call void @FreeFloatVec(ptr noundef nonnull %432) #35
  tail call void @FreeFloatVec(ptr noundef %421) #35
  tail call void @FreeFloatVec(ptr noundef %423) #35
  tail call void @FreeFloatVec(ptr noundef %422) #35
  tail call void @FreeIntVec(ptr noundef %424) #35
  tail call void @FreeIntVec(ptr noundef %425) #35
  tail call void @FreeIntVec(ptr noundef %426) #35
  tail call void @FreeIntVec(ptr noundef %427) #35
  tail call void @FreeIntVec(ptr noundef %428) #35
  tail call void @FreeIntVec(ptr noundef %429) #35
  tail call void @FreeFloatVec(ptr noundef %433) #35
  tail call void @FreeIntVec(ptr noundef %434) #35
  tail call void @FreeFloatMtx(ptr noundef %438) #35
  tail call void @FreeIntMtx(ptr noundef %439) #35
  %848 = add nsw i32 %846, %6
  %849 = add nsw i32 %847, %8
  %850 = tail call fastcc float @MSalignmm_rec(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, i32 noundef %848, i32 noundef %8, i32 noundef %849, ptr noundef %73, ptr noundef %74, i32 noundef %28, ptr noundef nonnull %13) #39
  %851 = load ptr, ptr %10, align 8, !tbaa !19
  %852 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %851) #40
  %853 = trunc i64 %852 to i32
  %854 = xor i32 %847, -1
  %855 = add i32 %844, %854
  %856 = icmp sgt i32 %855, 0
  br i1 %856, label %857, label %910

857:                                              ; preds = %843
  %858 = add i32 %844, -2
  %859 = sub i32 %858, %847
  %860 = zext i32 %859 to i64
  %861 = add nuw nsw i64 %860, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %437, i8 45, i64 %861, i1 false), !tbaa !17
  %862 = zext i32 %855 to i64
  %863 = and i64 %861, 4294967295
  %864 = getelementptr inbounds i8, ptr %437, i64 %863
  store i8 0, ptr %864, align 1, !tbaa !17
  br i1 %75, label %865, label %869

865:                                              ; preds = %857
  %866 = add nsw i32 %855, %853
  %867 = sext i32 %866 to i64
  %868 = zext i32 %0 to i64
  br label %875

869:                                              ; preds = %875, %857
  br i1 %79, label %870, label %898

870:                                              ; preds = %869
  %871 = sext i32 %847 to i64
  %872 = add nsw i32 %855, %853
  %873 = sext i32 %872 to i64
  %874 = zext i32 %1 to i64
  br label %884

875:                                              ; preds = %875, %865
  %876 = phi i64 [ 0, %865 ], [ %882, %875 ]
  %877 = getelementptr inbounds ptr, ptr %10, i64 %876
  %878 = load ptr, ptr %877, align 8, !tbaa !19
  %879 = tail call ptr @strcat(ptr noundef nonnull dereferenceable(1) %878, ptr noundef nonnull dereferenceable(1) %437) #35
  %880 = load ptr, ptr %877, align 8, !tbaa !19
  %881 = getelementptr inbounds i8, ptr %880, i64 %867
  store i8 0, ptr %881, align 1, !tbaa !17
  %882 = add nuw nsw i64 %876, 1
  %883 = icmp eq i64 %882, %868
  br i1 %883, label %869, label %875, !llvm.loop !547

884:                                              ; preds = %884, %870
  %885 = phi i64 [ 0, %870 ], [ %896, %884 ]
  %886 = getelementptr inbounds ptr, ptr %11, i64 %885
  %887 = load ptr, ptr %886, align 8, !tbaa !19
  %888 = getelementptr inbounds ptr, ptr %3, i64 %885
  %889 = load ptr, ptr %888, align 8, !tbaa !19
  %890 = getelementptr inbounds i8, ptr %889, i64 %23
  %891 = getelementptr inbounds i8, ptr %890, i64 %871
  %892 = getelementptr inbounds i8, ptr %891, i64 1
  %893 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %887, ptr noundef nonnull %892, i64 noundef %862) #35
  %894 = load ptr, ptr %886, align 8, !tbaa !19
  %895 = getelementptr inbounds i8, ptr %894, i64 %873
  store i8 0, ptr %895, align 1, !tbaa !17
  %896 = add nuw nsw i64 %885, 1
  %897 = icmp eq i64 %896, %874
  br i1 %897, label %898, label %884, !llvm.loop !548

898:                                              ; preds = %884, %869
  %899 = add nsw i32 %847, 1
  %900 = sext i32 %899 to i64
  %901 = getelementptr inbounds float, ptr %24, i64 %900
  %902 = load float, ptr %901, align 4, !tbaa !167
  %903 = add nsw i32 %844, -1
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds float, ptr %27, i64 %904
  %906 = load float, ptr %905, align 4, !tbaa !167
  %907 = fadd float %902, %906
  %908 = fadd float %850, %907
  %909 = load ptr, ptr %10, align 8, !tbaa !19
  br label %910

910:                                              ; preds = %898, %843
  %911 = phi ptr [ %909, %898 ], [ %851, %843 ]
  %912 = phi float [ %908, %898 ], [ %850, %843 ]
  %913 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %911) #40
  %914 = trunc i64 %913 to i32
  %915 = xor i32 %846, -1
  %916 = add i32 %845, %915
  %917 = icmp sgt i32 %916, 0
  br i1 %917, label %918, label %970

918:                                              ; preds = %910
  %919 = add i32 %845, -2
  %920 = sub i32 %919, %846
  %921 = zext i32 %920 to i64
  %922 = add nuw nsw i64 %921, 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %437, i8 45, i64 %922, i1 false), !tbaa !17
  %923 = zext i32 %916 to i64
  %924 = and i64 %922, 4294967295
  %925 = getelementptr inbounds i8, ptr %437, i64 %924
  store i8 0, ptr %925, align 1, !tbaa !17
  br i1 %75, label %926, label %931

926:                                              ; preds = %918
  %927 = sext i32 %846 to i64
  %928 = add nsw i32 %916, %914
  %929 = sext i32 %928 to i64
  %930 = zext i32 %0 to i64
  br label %936

931:                                              ; preds = %936, %918
  br i1 %79, label %932, label %959

932:                                              ; preds = %931
  %933 = add nsw i32 %916, %914
  %934 = sext i32 %933 to i64
  %935 = zext i32 %1 to i64
  br label %950

936:                                              ; preds = %936, %926
  %937 = phi i64 [ 0, %926 ], [ %948, %936 ]
  %938 = getelementptr inbounds ptr, ptr %10, i64 %937
  %939 = load ptr, ptr %938, align 8, !tbaa !19
  %940 = getelementptr inbounds ptr, ptr %2, i64 %937
  %941 = load ptr, ptr %940, align 8, !tbaa !19
  %942 = getelementptr inbounds i8, ptr %941, i64 %16
  %943 = getelementptr inbounds i8, ptr %942, i64 %927
  %944 = getelementptr inbounds i8, ptr %943, i64 1
  %945 = tail call ptr @strncat(ptr noundef nonnull dereferenceable(1) %939, ptr noundef nonnull %944, i64 noundef %923) #35
  %946 = load ptr, ptr %938, align 8, !tbaa !19
  %947 = getelementptr inbounds i8, ptr %946, i64 %929
  store i8 0, ptr %947, align 1, !tbaa !17
  %948 = add nuw nsw i64 %937, 1
  %949 = icmp eq i64 %948, %930
  br i1 %949, label %931, label %936, !llvm.loop !549

950:                                              ; preds = %950, %932
  %951 = phi i64 [ 0, %932 ], [ %957, %950 ]
  %952 = getelementptr inbounds ptr, ptr %11, i64 %951
  %953 = load ptr, ptr %952, align 8, !tbaa !19
  %954 = tail call ptr @strcat(ptr noundef nonnull dereferenceable(1) %953, ptr noundef nonnull dereferenceable(1) %437) #35
  %955 = load ptr, ptr %952, align 8, !tbaa !19
  %956 = getelementptr inbounds i8, ptr %955, i64 %934
  store i8 0, ptr %956, align 1, !tbaa !17
  %957 = add nuw nsw i64 %951, 1
  %958 = icmp eq i64 %957, %935
  br i1 %958, label %959, label %950, !llvm.loop !550

959:                                              ; preds = %950, %931
  %960 = add nsw i32 %846, 1
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds float, ptr %17, i64 %961
  %963 = load float, ptr %962, align 4, !tbaa !167
  %964 = add nsw i32 %845, -1
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds float, ptr %20, i64 %965
  %967 = load float, ptr %966, align 4, !tbaa !167
  %968 = fadd float %963, %967
  %969 = fadd float %912, %968
  br label %970

970:                                              ; preds = %959, %910
  %971 = phi float [ %969, %959 ], [ %912, %910 ]
  %972 = load ptr, ptr %73, align 8, !tbaa !19
  %973 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %972) #40
  br i1 %75, label %974, label %978

974:                                              ; preds = %970
  %975 = shl i64 %973, 32
  %976 = ashr exact i64 %975, 32
  %977 = zext i32 %0 to i64
  br label %983

978:                                              ; preds = %983, %970
  br i1 %79, label %979, label %1001

979:                                              ; preds = %978
  %980 = shl i64 %973, 32
  %981 = ashr exact i64 %980, 32
  %982 = zext i32 %1 to i64
  br label %990

983:                                              ; preds = %983, %974
  %984 = phi i64 [ 0, %974 ], [ %988, %983 ]
  %985 = getelementptr inbounds ptr, ptr %73, i64 %984
  %986 = load ptr, ptr %985, align 8, !tbaa !19
  %987 = getelementptr inbounds i8, ptr %986, i64 %976
  store ptr %987, ptr %985, align 8, !tbaa !19
  %988 = add nuw nsw i64 %984, 1
  %989 = icmp eq i64 %988, %977
  br i1 %989, label %978, label %983, !llvm.loop !551

990:                                              ; preds = %990, %979
  %991 = phi i64 [ 0, %979 ], [ %995, %990 ]
  %992 = getelementptr inbounds ptr, ptr %74, i64 %991
  %993 = load ptr, ptr %992, align 8, !tbaa !19
  %994 = getelementptr inbounds i8, ptr %993, i64 %981
  store ptr %994, ptr %992, align 8, !tbaa !19
  %995 = add nuw nsw i64 %991, 1
  %996 = icmp eq i64 %995, %982
  br i1 %996, label %1001, label %990, !llvm.loop !552

997:                                              ; preds = %1001, %414
  %998 = phi float [ %257, %414 ], [ %1005, %1001 ]
  tail call void @free(ptr noundef %73) #35
  tail call void @free(ptr noundef %74) #35
  br label %999

999:                                              ; preds = %997, %69, %41
  %1000 = phi float [ 0.000000e+00, %41 ], [ %998, %997 ], [ 0.000000e+00, %69 ]
  ret float %1000

1001:                                             ; preds = %990, %978
  %1002 = add nsw i32 %845, %6
  %1003 = add nsw i32 %844, %8
  %1004 = tail call fastcc float @MSalignmm_rec(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %1002, i32 noundef %7, i32 noundef %1003, i32 noundef %9, ptr noundef nonnull %73, ptr noundef %74, i32 noundef %28, ptr noundef nonnull %13) #39
  %1005 = fadd float %971, %1004
  tail call void @free(ptr noundef %437) #35
  br label %997
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @match_calc.221(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7) unnamed_addr #16 {
  %9 = alloca [26 x float], align 16
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #34
  %10 = icmp ne i32 %7, 0
  %11 = icmp sgt i32 %4, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %45

13:                                               ; preds = %8
  %14 = zext i32 %4 to i64
  br label %15

15:                                               ; preds = %39, %13
  %16 = phi i64 [ 0, %13 ], [ %43, %39 ]
  %17 = getelementptr inbounds ptr, ptr %2, i64 %16
  %18 = load ptr, ptr %17, align 8, !tbaa !19
  %19 = getelementptr inbounds ptr, ptr %5, i64 %16
  %20 = getelementptr inbounds ptr, ptr %6, i64 %16
  br label %21

21:                                               ; preds = %35, %15
  %22 = phi i64 [ 0, %15 ], [ %37, %35 ]
  %23 = phi i32 [ 0, %15 ], [ %36, %35 ]
  %24 = getelementptr inbounds float, ptr %18, i64 %22
  %25 = load float, ptr %24, align 4, !tbaa !167
  %26 = fcmp une float %25, 0.000000e+00
  br i1 %26, label %27, label %35

27:                                               ; preds = %21
  %28 = load ptr, ptr %19, align 8, !tbaa !19
  %29 = sext i32 %23 to i64
  %30 = getelementptr inbounds float, ptr %28, i64 %29
  store float %25, ptr %30, align 4, !tbaa !167
  %31 = load ptr, ptr %20, align 8, !tbaa !19
  %32 = getelementptr inbounds i32, ptr %31, i64 %29
  %33 = trunc i64 %22 to i32
  store i32 %33, ptr %32, align 4, !tbaa !31
  %34 = add nsw i32 %23, 1
  br label %35

35:                                               ; preds = %27, %21
  %36 = phi i32 [ %34, %27 ], [ %23, %21 ]
  %37 = add nuw nsw i64 %22, 1
  %38 = icmp eq i64 %37, 26
  br i1 %38, label %39, label %21, !llvm.loop !553

39:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %36, %35 ]
  %40 = load ptr, ptr %20, align 8, !tbaa !19
  %41 = sext i32 %.lcssa1 to i64
  %42 = getelementptr inbounds i32, ptr %40, i64 %41
  store i32 -1, ptr %42, align 4, !tbaa !31
  %43 = add nuw nsw i64 %16, 1
  %44 = icmp eq i64 %43, %14
  br i1 %44, label %45, label %15, !llvm.loop !554

45:                                               ; preds = %39, %8
  %46 = sext i32 %3 to i64
  %47 = getelementptr inbounds ptr, ptr %1, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !19
  br label %51

49:                                               ; preds = %65
  %50 = icmp eq i32 %4, 0
  br i1 %50, label %98, label %68

51:                                               ; preds = %65, %45
  %52 = phi i64 [ 0, %45 ], [ %66, %65 ]
  %53 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %52
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ 0, %51 ], [ %63, %54 ]
  %56 = phi float [ 0.000000e+00, %51 ], [ %62, %54 ]
  %57 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %55, i64 %52
  %58 = load i32, ptr %57, align 4, !tbaa !31
  %59 = sitofp i32 %58 to float
  %60 = getelementptr inbounds float, ptr %48, i64 %55
  %61 = load float, ptr %60, align 4, !tbaa !167
  %62 = tail call float @llvm.fmuladd.f32(float %59, float %61, float %56)
  %63 = add nuw nsw i64 %55, 1
  %64 = icmp eq i64 %63, 26
  br i1 %64, label %65, label %54, !llvm.loop !555

65:                                               ; preds = %54
  %.lcssa = phi float [ %62, %54 ]
  store float %.lcssa, ptr %53, align 4, !tbaa !167
  %66 = add nuw nsw i64 %52, 1
  %67 = icmp eq i64 %66, 26
  br i1 %67, label %49, label %51, !llvm.loop !556

68:                                               ; preds = %93, %49
  %69 = phi i32 [ %73, %93 ], [ %4, %49 ]
  %70 = phi ptr [ %95, %93 ], [ %6, %49 ]
  %71 = phi ptr [ %96, %93 ], [ %5, %49 ]
  %72 = phi ptr [ %94, %93 ], [ %0, %49 ]
  %73 = add nsw i32 %69, -1
  store float 0.000000e+00, ptr %72, align 4, !tbaa !167
  %74 = load ptr, ptr %70, align 8, !tbaa !19
  %75 = load i32, ptr %74, align 4, !tbaa !31
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %93

77:                                               ; preds = %68
  %78 = load ptr, ptr %71, align 8, !tbaa !19
  br label %79

79:                                               ; preds = %79, %77
  %80 = phi i64 [ 0, %77 ], [ %89, %79 ]
  %81 = phi float [ 0.000000e+00, %77 ], [ %88, %79 ]
  %82 = phi i32 [ %75, %77 ], [ %91, %79 ]
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %83
  %85 = load float, ptr %84, align 4, !tbaa !167
  %86 = getelementptr inbounds float, ptr %78, i64 %80
  %87 = load float, ptr %86, align 4, !tbaa !167
  %88 = tail call float @llvm.fmuladd.f32(float %85, float %87, float %81)
  store float %88, ptr %72, align 4, !tbaa !167
  %89 = add nuw nsw i64 %80, 1
  %90 = getelementptr inbounds i32, ptr %74, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !31
  %92 = icmp sgt i32 %91, -1
  br i1 %92, label %79, label %93, !llvm.loop !557

93:                                               ; preds = %79, %68
  %94 = getelementptr inbounds float, ptr %72, i64 1
  %95 = getelementptr inbounds ptr, ptr %70, i64 1
  %96 = getelementptr inbounds ptr, ptr %71, i64 1
  %97 = icmp eq i32 %73, 0
  br i1 %97, label %98, label %68, !llvm.loop !558

98:                                               ; preds = %93, %49
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #34
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #15

; Function Attrs: nofree nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @MtxuntDouble(ptr nocapture noundef readonly %0, i32 noundef %1) #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %23

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = shl nuw nsw i64 %5, 3
  br label %10

7:                                                ; preds = %10
  br i1 %3, label %8, label %23

8:                                                ; preds = %7
  %9 = zext i32 %1 to i64
  br label %16

10:                                               ; preds = %10, %4
  %11 = phi i64 [ 0, %4 ], [ %14, %10 ]
  %12 = getelementptr inbounds ptr, ptr %0, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr align 8 %13, i8 0, i64 %6, i1 false), !tbaa !7
  %14 = add nuw nsw i64 %11, 1
  %15 = icmp eq i64 %14, %5
  br i1 %15, label %7, label %10, !llvm.loop !559

16:                                               ; preds = %16, %8
  %17 = phi i64 [ 0, %8 ], [ %21, %16 ]
  %18 = getelementptr inbounds ptr, ptr %0, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !19
  %20 = getelementptr inbounds double, ptr %19, i64 %17
  store double 1.000000e+00, ptr %20, align 8, !tbaa !7
  %21 = add nuw nsw i64 %17, 1
  %22 = icmp eq i64 %21, %9
  br i1 %22, label %23, label %16, !llvm.loop !560

23:                                               ; preds = %16, %7, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @MtxmltDouble(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #4 {
  %4 = sext i32 %2 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 8) #41
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %35

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  %9 = shl nuw nsw i64 %8, 3
  br label %10

10:                                               ; preds = %32, %7
  %11 = phi i64 [ 0, %7 ], [ %33, %32 ]
  %12 = getelementptr inbounds ptr, ptr %0, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !19
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %13, i64 %9, i1 false), !tbaa !7
  br label %14

14:                                               ; preds = %28, %10
  %15 = phi i64 [ 0, %10 ], [ %30, %28 ]
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %26, %16 ]
  %18 = phi double [ 0.000000e+00, %14 ], [ %25, %16 ]
  %19 = getelementptr inbounds double, ptr %5, i64 %17
  %20 = load double, ptr %19, align 8, !tbaa !7
  %21 = getelementptr inbounds ptr, ptr %1, i64 %17
  %22 = load ptr, ptr %21, align 8, !tbaa !19
  %23 = getelementptr inbounds double, ptr %22, i64 %15
  %24 = load double, ptr %23, align 8, !tbaa !7
  %25 = tail call double @llvm.fmuladd.f64(double %20, double %24, double %18)
  %26 = add nuw nsw i64 %17, 1
  %27 = icmp eq i64 %26, %8
  br i1 %27, label %28, label %16, !llvm.loop !561

28:                                               ; preds = %16
  %.lcssa = phi double [ %25, %16 ]
  %29 = getelementptr inbounds double, ptr %13, i64 %15
  store double %.lcssa, ptr %29, align 8, !tbaa !7
  %30 = add nuw nsw i64 %15, 1
  %31 = icmp eq i64 %30, %8
  br i1 %31, label %32, label %14, !llvm.loop !562

32:                                               ; preds = %28
  %33 = add nuw nsw i64 %11, 1
  %34 = icmp eq i64 %33, %8
  br i1 %34, label %35, label %10, !llvm.loop !563

35:                                               ; preds = %32, %3
  tail call void @free(ptr noundef %5) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateCharVec(i32 noundef %0) #4 {
  %2 = sext i32 %0 to i64
  %3 = tail call noalias ptr @calloc(i64 noundef %2, i64 noundef 1) #41
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load ptr, ptr @stderr, align 8, !tbaa !19
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.228, i32 noundef %0) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

8:                                                ; preds = %1
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateCharMtx(i32 noundef %0, i32 noundef %1) #4 {
  %3 = add nsw i32 %0, 1
  %4 = sext i32 %3 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 8) #41
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !19
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.2.231, i32 noundef %0, i32 noundef %1) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

10:                                               ; preds = %2
  %11 = icmp ne i32 %1, 0
  %12 = icmp sgt i32 %0, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %22

14:                                               ; preds = %10
  %15 = zext i32 %0 to i64
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %20, %16 ]
  %18 = tail call ptr @AllocateCharVec(i32 noundef %1) #39
  %19 = getelementptr inbounds ptr, ptr %5, i64 %17
  store ptr %18, ptr %19, align 8, !tbaa !19
  %20 = add nuw nsw i64 %17, 1
  %21 = icmp eq i64 %20, %15
  br i1 %21, label %22, label %16, !llvm.loop !564

22:                                               ; preds = %16, %10
  %23 = sext i32 %0 to i64
  %24 = getelementptr inbounds ptr, ptr %5, i64 %23
  store ptr null, ptr %24, align 8, !tbaa !19
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @FreeCharMtx(ptr nocapture noundef %0) #4 {
  %2 = load ptr, ptr %0, align 8, !tbaa !19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %7, %4 ], [ 0, %1 ]
  %6 = phi ptr [ %9, %4 ], [ %2, %1 ]
  tail call void @free(ptr noundef nonnull %6) #35
  %7 = add nuw nsw i64 %5, 1
  %8 = getelementptr inbounds ptr, ptr %0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %4, !llvm.loop !565

11:                                               ; preds = %4, %1
  tail call void @free(ptr noundef nonnull %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateFloatVec(i32 noundef %0) #4 {
  %2 = zext i32 %0 to i64
  %3 = tail call noalias ptr @calloc(i64 noundef %2, i64 noundef 4) #41
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load ptr, ptr @stderr, align 8, !tbaa !19
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.3.236, i32 noundef %0) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

8:                                                ; preds = %1
  ret ptr %3
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @FreeFloatVec(ptr nocapture noundef %0) #20 {
  tail call void @free(ptr noundef %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateFloatMtx(i32 noundef %0, i32 noundef %1) #4 {
  %3 = add i32 %0, 1
  %4 = zext i32 %3 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 8) #41
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !19
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.6.241, i32 noundef %0, i32 noundef %1) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

10:                                               ; preds = %2
  %11 = icmp ne i32 %1, 0
  %12 = icmp sgt i32 %0, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %28

14:                                               ; preds = %10
  %15 = sext i32 %1 to i64
  %16 = zext i32 %0 to i64
  br label %20

17:                                               ; preds = %20
  %18 = add nuw nsw i64 %21, 1
  %19 = icmp eq i64 %18, %16
  br i1 %19, label %28, label %20, !llvm.loop !566

20:                                               ; preds = %17, %14
  %21 = phi i64 [ 0, %14 ], [ %18, %17 ]
  %22 = tail call noalias ptr @calloc(i64 noundef %15, i64 noundef 4) #41
  %23 = getelementptr inbounds ptr, ptr %5, i64 %21
  store ptr %22, ptr %23, align 8, !tbaa !19
  %24 = icmp eq ptr %22, null
  br i1 %24, label %25, label %17

25:                                               ; preds = %20
  %26 = load ptr, ptr @stderr, align 8, !tbaa !19
  %27 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %26, ptr noundef nonnull @.str.7.242, i32 noundef %0, i32 noundef %1) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

28:                                               ; preds = %17, %10
  %29 = sext i32 %0 to i64
  %30 = getelementptr inbounds ptr, ptr %5, i64 %29
  store ptr null, ptr %30, align 8, !tbaa !19
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @FreeFloatMtx(ptr nocapture noundef %0) #4 {
  %2 = load ptr, ptr %0, align 8, !tbaa !19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %7, %4 ], [ 0, %1 ]
  %6 = phi ptr [ %9, %4 ], [ %2, %1 ]
  tail call void @free(ptr noundef nonnull %6) #35
  %7 = add nuw nsw i64 %5, 1
  %8 = getelementptr inbounds ptr, ptr %0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %4, !llvm.loop !567

11:                                               ; preds = %4, %1
  tail call void @free(ptr noundef nonnull %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateIntVec(i32 noundef %0) #4 {
  %2 = sext i32 %0 to i64
  %3 = tail call noalias ptr @calloc(i64 noundef %2, i64 noundef 4) #41
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load ptr, ptr @stderr, align 8, !tbaa !19
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef nonnull @.str.8.247, i32 noundef %0) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

8:                                                ; preds = %1
  ret ptr %3
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @FreeIntVec(ptr nocapture noundef %0) #20 {
  tail call void @free(ptr noundef %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateIntMtx(i32 noundef %0, i32 noundef %1) #4 {
  %3 = add nsw i32 %0, 1
  %4 = sext i32 %3 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 8) #41
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !19
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.10.252, i32 noundef %0, i32 noundef %1) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

10:                                               ; preds = %2
  %11 = icmp ne i32 %1, 0
  %12 = icmp sgt i32 %0, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %22

14:                                               ; preds = %10
  %15 = zext i32 %0 to i64
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %20, %16 ]
  %18 = tail call ptr @AllocateIntVec(i32 noundef %1) #39
  %19 = getelementptr inbounds ptr, ptr %5, i64 %17
  store ptr %18, ptr %19, align 8, !tbaa !19
  %20 = add nuw nsw i64 %17, 1
  %21 = icmp eq i64 %20, %15
  br i1 %21, label %22, label %16, !llvm.loop !568

22:                                               ; preds = %16, %10
  %23 = sext i32 %0 to i64
  %24 = getelementptr inbounds ptr, ptr %5, i64 %23
  store ptr null, ptr %24, align 8, !tbaa !19
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @FreeIntMtx(ptr nocapture noundef %0) #4 {
  %2 = load ptr, ptr %0, align 8, !tbaa !19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %7, %4 ], [ 0, %1 ]
  %6 = phi ptr [ %9, %4 ], [ %2, %1 ]
  tail call void @free(ptr noundef nonnull %6) #35
  %7 = add nuw nsw i64 %5, 1
  %8 = getelementptr inbounds ptr, ptr %0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %4, !llvm.loop !569

11:                                               ; preds = %4, %1
  tail call void @free(ptr noundef nonnull %0) #35
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(inaccessiblemem: readwrite) uwtable
define internal noalias ptr @AllocateDoubleVec(i32 noundef %0) #33 {
  %2 = sext i32 %0 to i64
  %3 = tail call noalias ptr @calloc(i64 noundef %2, i64 noundef 8) #41
  ret ptr %3
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @FreeDoubleVec(ptr nocapture noundef %0) #20 {
  tail call void @free(ptr noundef %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @AllocateDoubleMtx(i32 noundef %0, i32 noundef %1) #4 {
  %3 = add nsw i32 %0, 1
  %4 = sext i32 %3 to i64
  %5 = tail call noalias ptr @calloc(i64 noundef %4, i64 noundef 8) #41
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !19
  %9 = tail call i64 @fwrite(ptr nonnull @.str.13.261, i64 26, i64 1, ptr %8) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

10:                                               ; preds = %2
  %11 = icmp ne i32 %1, 0
  %12 = icmp sgt i32 %0, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %23

14:                                               ; preds = %10
  %15 = sext i32 %1 to i64
  %16 = zext i32 %0 to i64
  br label %17

17:                                               ; preds = %17, %14
  %18 = phi i64 [ 0, %14 ], [ %21, %17 ]
  %19 = tail call noalias ptr @calloc(i64 noundef %15, i64 noundef 8) #41
  %20 = getelementptr inbounds ptr, ptr %5, i64 %18
  store ptr %19, ptr %20, align 8, !tbaa !19
  %21 = add nuw nsw i64 %18, 1
  %22 = icmp eq i64 %21, %16
  br i1 %22, label %23, label %17, !llvm.loop !570

23:                                               ; preds = %17, %10
  %24 = sext i32 %0 to i64
  %25 = getelementptr inbounds ptr, ptr %5, i64 %24
  store ptr null, ptr %25, align 8, !tbaa !19
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal void @FreeDoubleMtx(ptr nocapture noundef %0) #4 {
  %2 = load ptr, ptr %0, align 8, !tbaa !19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ %7, %4 ], [ 0, %1 ]
  %6 = phi ptr [ %9, %4 ], [ %2, %1 ]
  tail call void @free(ptr noundef nonnull %6) #35
  %7 = add nuw nsw i64 %5, 1
  %8 = getelementptr inbounds ptr, ptr %0, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %4, !llvm.loop !571

11:                                               ; preds = %4, %1
  tail call void @free(ptr noundef nonnull %0) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @arguments(i32 noundef %0, ptr nocapture noundef %1) #4 {
  store i8 0, ptr @foldalignopt, align 16, !tbaa !17
  store ptr null, ptr @inputfile, align 8, !tbaa !19
  store i32 0, ptr @fftkeika, align 4, !tbaa !31
  store i32 -1000, ptr @pslocal, align 4, !tbaa !31
  store i32 0, ptr @constraint, align 4, !tbaa !31
  store i32 62, ptr @nblosum, align 4, !tbaa !31
  store i32 0, ptr @fmodel, align 4, !tbaa !31
  store i32 0, ptr @calledByXced, align 4, !tbaa !31
  store i32 0, ptr @devide, align 4, !tbaa !31
  store i8 0, ptr @use_fft, align 1, !tbaa !17
  store i32 1, ptr @fftscore, align 4, !tbaa !31
  store i32 0, ptr @fftRepeatStop, align 4, !tbaa !31
  store i32 0, ptr @fftNoAnchStop, align 4, !tbaa !31
  store i32 3, ptr @weight, align 4, !tbaa !31
  store i32 1, ptr @utree, align 4, !tbaa !31
  store i32 1, ptr @tbutree, align 4, !tbaa !31
  store i32 0, ptr @refine, align 4, !tbaa !31
  store i32 1, ptr @check, align 4, !tbaa !31
  store double 0.000000e+00, ptr @cut, align 8, !tbaa !7
  store i32 0, ptr @disp, align 4, !tbaa !31
  store i32 1, ptr @outgap, align 4, !tbaa !31
  store i8 65, ptr @alg, align 1, !tbaa !17
  store i32 0, ptr @mix, align 4, !tbaa !31
  store i32 0, ptr @tbitr, align 4, !tbaa !31
  store i32 5, ptr @scmtd, align 4, !tbaa !31
  store i32 0, ptr @tbweight, align 4, !tbaa !31
  store i32 3, ptr @tbrweight, align 4, !tbaa !31
  store i32 0, ptr @checkC, align 4, !tbaa !31
  store i32 120, ptr @treemethod, align 4, !tbaa !31
  store i32 0, ptr @contin, align 4, !tbaa !31
  store i32 1, ptr @scoremtx, align 4, !tbaa !31
  store i32 0, ptr @kobetsubunkatsu, align 4, !tbaa !31
  store i32 0, ptr @divpairscore, align 4, !tbaa !31
  store i1 false, ptr @out_align_instead_of_hat3, align 4
  store i32 100009, ptr @dorp, align 4, !tbaa !31
  store i32 100009, ptr @ppenalty, align 4, !tbaa !31
  store i32 100009, ptr @ppenalty_OP, align 4, !tbaa !31
  store i32 100009, ptr @ppenalty_ex, align 4, !tbaa !31
  store i32 100009, ptr @ppenalty_EX, align 4, !tbaa !31
  store i32 100009, ptr @poffset, align 4, !tbaa !31
  store i32 100009, ptr @kimuraR, align 4, !tbaa !31
  store i32 100009, ptr @pamN, align 4, !tbaa !31
  store float 0x3F50624DE0000000, ptr @geta2, align 4, !tbaa !167
  store i32 100009, ptr @fftWinSize, align 4, !tbaa !31
  store i32 100009, ptr @fftThreshold, align 4, !tbaa !31
  store i32 100009, ptr @RNAppenalty, align 4, !tbaa !31
  store i32 100009, ptr @RNApthr, align 4, !tbaa !31
  %3 = add nsw i32 %0, -1
  %4 = icmp sgt i32 %0, 1
  br i1 %4, label %5, label %173

5:                                                ; preds = %164, %2
  %6 = phi i32 [ %167, %164 ], [ %3, %2 ]
  %7 = phi ptr [ %165, %164 ], [ %1, %2 ]
  %8 = getelementptr inbounds ptr, ptr %7, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !19
  %10 = load i8, ptr %9, align 1, !tbaa !17
  %11 = icmp eq i8 %10, 45
  br i1 %11, label %12, label %169

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, ptr %9, i64 1
  store ptr %13, ptr %8, align 8, !tbaa !19
  %14 = load i8, ptr %13, align 1, !tbaa !17
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %164, label %16

16:                                               ; preds = %158, %12
  %17 = phi ptr [ %161, %158 ], [ %13, %12 ]
  %18 = phi i8 [ %162, %158 ], [ %14, %12 ]
  %19 = phi i32 [ %160, %158 ], [ %6, %12 ]
  %20 = sext i8 %18 to i32
  switch i32 %20, label %154 [
    i32 105, label %21
    i32 102, label %27
    i32 103, label %34
    i32 79, label %41
    i32 69, label %48
    i32 104, label %55
    i32 107, label %62
    i32 98, label %67
    i32 106, label %72
    i32 109, label %79
    i32 108, label %86
    i32 100, label %96
    i32 112, label %102
    i32 110, label %108
    i32 97, label %109
    i32 114, label %110
    i32 68, label %111
    i32 80, label %112
    i32 101, label %113
    i32 81, label %114
    i32 120, label %115
    i32 83, label %116
    i32 116, label %117
    i32 76, label %118
    i32 115, label %119
    i32 66, label %120
    i32 84, label %121
    i32 72, label %122
    i32 77, label %123
    i32 82, label %124
    i32 78, label %125
    i32 75, label %126
    i32 65, label %127
    i32 86, label %128
    i32 67, label %129
    i32 70, label %130
    i32 118, label %131
    i32 121, label %132
    i32 74, label %133
    i32 111, label %134
    i32 122, label %143
    i32 119, label %148
    i32 90, label %153
  ]

21:                                               ; preds = %16
  %.lcssa = phi i32 [ %19, %16 ]
  %22 = getelementptr inbounds ptr, ptr %7, i64 2
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  store ptr %23, ptr @inputfile, align 8, !tbaa !19
  %24 = load ptr, ptr @stderr, align 8, !tbaa !19
  %25 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.264, ptr noundef %23) #36
  %26 = add nsw i32 %.lcssa, -1
  br label %164

27:                                               ; preds = %16
  %.lcssa1 = phi i32 [ %19, %16 ]
  %28 = getelementptr inbounds ptr, ptr %7, i64 2
  %29 = load ptr, ptr %28, align 8, !tbaa !19
  %30 = tail call double @atof(ptr noundef %29) #40
  %31 = tail call double @llvm.fmuladd.f64(double %30, double 1.000000e+03, double -5.000000e-01)
  %32 = fptosi double %31 to i32
  store i32 %32, ptr @ppenalty, align 4, !tbaa !31
  %33 = add nsw i32 %.lcssa1, -1
  br label %164

34:                                               ; preds = %16
  %.lcssa2 = phi i32 [ %19, %16 ]
  %35 = getelementptr inbounds ptr, ptr %7, i64 2
  %36 = load ptr, ptr %35, align 8, !tbaa !19
  %37 = tail call double @atof(ptr noundef %36) #40
  %38 = tail call double @llvm.fmuladd.f64(double %37, double 1.000000e+03, double -5.000000e-01)
  %39 = fptosi double %38 to i32
  store i32 %39, ptr @ppenalty_ex, align 4, !tbaa !31
  %40 = add nsw i32 %.lcssa2, -1
  br label %164

41:                                               ; preds = %16
  %.lcssa3 = phi i32 [ %19, %16 ]
  %42 = getelementptr inbounds ptr, ptr %7, i64 2
  %43 = load ptr, ptr %42, align 8, !tbaa !19
  %44 = tail call double @atof(ptr noundef %43) #40
  %45 = tail call double @llvm.fmuladd.f64(double %44, double 1.000000e+03, double -5.000000e-01)
  %46 = fptosi double %45 to i32
  store i32 %46, ptr @ppenalty_OP, align 4, !tbaa !31
  %47 = add nsw i32 %.lcssa3, -1
  br label %164

48:                                               ; preds = %16
  %.lcssa4 = phi i32 [ %19, %16 ]
  %49 = getelementptr inbounds ptr, ptr %7, i64 2
  %50 = load ptr, ptr %49, align 8, !tbaa !19
  %51 = tail call double @atof(ptr noundef %50) #40
  %52 = tail call double @llvm.fmuladd.f64(double %51, double 1.000000e+03, double -5.000000e-01)
  %53 = fptosi double %52 to i32
  store i32 %53, ptr @ppenalty_EX, align 4, !tbaa !31
  %54 = add nsw i32 %.lcssa4, -1
  br label %164

55:                                               ; preds = %16
  %.lcssa5 = phi i32 [ %19, %16 ]
  %56 = getelementptr inbounds ptr, ptr %7, i64 2
  %57 = load ptr, ptr %56, align 8, !tbaa !19
  %58 = tail call double @atof(ptr noundef %57) #40
  %59 = tail call double @llvm.fmuladd.f64(double %58, double 1.000000e+03, double -5.000000e-01)
  %60 = fptosi double %59 to i32
  store i32 %60, ptr @poffset, align 4, !tbaa !31
  %61 = add nsw i32 %.lcssa5, -1
  br label %164

62:                                               ; preds = %16
  %.lcssa6 = phi i32 [ %19, %16 ]
  %63 = getelementptr inbounds ptr, ptr %7, i64 2
  %64 = load ptr, ptr %63, align 8, !tbaa !19
  %65 = tail call i32 @atoi(ptr nocapture noundef %64) #40
  store i32 %65, ptr @kimuraR, align 4, !tbaa !31
  %66 = add nsw i32 %.lcssa6, -1
  br label %164

67:                                               ; preds = %16
  %.lcssa7 = phi i32 [ %19, %16 ]
  %68 = getelementptr inbounds ptr, ptr %7, i64 2
  %69 = load ptr, ptr %68, align 8, !tbaa !19
  %70 = tail call i32 @atoi(ptr nocapture noundef %69) #40
  store i32 %70, ptr @nblosum, align 4, !tbaa !31
  store i32 1, ptr @scoremtx, align 4, !tbaa !31
  %71 = add nsw i32 %.lcssa7, -1
  br label %164

72:                                               ; preds = %16
  %.lcssa8 = phi i32 [ %19, %16 ]
  %73 = getelementptr inbounds ptr, ptr %7, i64 2
  %74 = load ptr, ptr %73, align 8, !tbaa !19
  %75 = tail call i32 @atoi(ptr nocapture noundef %74) #40
  store i32 %75, ptr @pamN, align 4, !tbaa !31
  store i32 0, ptr @scoremtx, align 4, !tbaa !31
  store i32 201, ptr @TMorJTT, align 4, !tbaa !31
  %76 = load ptr, ptr @stderr, align 8, !tbaa !19
  %77 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.1.265, i32 noundef %75) #36
  %78 = add nsw i32 %.lcssa8, -1
  br label %164

79:                                               ; preds = %16
  %.lcssa9 = phi i32 [ %19, %16 ]
  %80 = getelementptr inbounds ptr, ptr %7, i64 2
  %81 = load ptr, ptr %80, align 8, !tbaa !19
  %82 = tail call i32 @atoi(ptr nocapture noundef %81) #40
  store i32 %82, ptr @pamN, align 4, !tbaa !31
  store i32 0, ptr @scoremtx, align 4, !tbaa !31
  store i32 202, ptr @TMorJTT, align 4, !tbaa !31
  %83 = load ptr, ptr @stderr, align 8, !tbaa !19
  %84 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %83, ptr noundef nonnull @.str.2.266, i32 noundef %82) #36
  %85 = add nsw i32 %.lcssa9, -1
  br label %164

86:                                               ; preds = %16
  %.lcssa10 = phi i32 [ %19, %16 ]
  %87 = getelementptr inbounds ptr, ptr %7, i64 2
  %88 = load ptr, ptr %87, align 8, !tbaa !19
  %89 = tail call double @atof(ptr noundef %88) #40
  %90 = tail call double @llvm.fmuladd.f64(double %89, double 1.000000e+03, double 5.000000e-01)
  %91 = fptosi double %90 to i32
  store i32 %91, ptr @ppslocal, align 4, !tbaa !31
  %92 = sitofp i32 %91 to double
  %93 = tail call double @llvm.fmuladd.f64(double %92, double 6.000000e-01, double 5.000000e-01)
  %94 = fptosi double %93 to i32
  store i32 %94, ptr @pslocal, align 4, !tbaa !31
  %95 = add nsw i32 %.lcssa10, -1
  br label %164

96:                                               ; preds = %16
  %.lcssa11 = phi i32 [ %19, %16 ]
  %97 = getelementptr inbounds ptr, ptr %7, i64 2
  %98 = load ptr, ptr %97, align 8, !tbaa !19
  store ptr %98, ptr @whereispairalign, align 8, !tbaa !19
  %99 = load ptr, ptr @stderr, align 8, !tbaa !19
  %100 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef nonnull @.str.3.267, ptr noundef %98) #36
  %101 = add nsw i32 %.lcssa11, -1
  br label %164

102:                                              ; preds = %16
  %.lcssa12 = phi i32 [ %19, %16 ]
  %103 = getelementptr inbounds ptr, ptr %7, i64 2
  %104 = load ptr, ptr %103, align 8, !tbaa !19
  store ptr %104, ptr @laraparams, align 8, !tbaa !19
  %105 = load ptr, ptr @stderr, align 8, !tbaa !19
  %106 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %105, ptr noundef nonnull @.str.4.268, ptr noundef %104) #36
  %107 = add nsw i32 %.lcssa12, -1
  br label %164

108:                                              ; preds = %16
  store i1 true, ptr @out_align_instead_of_hat3, align 4
  br label %158

109:                                              ; preds = %16
  store i32 1, ptr @fmodel, align 4, !tbaa !31
  br label %158

110:                                              ; preds = %16
  store i32 -1, ptr @fmodel, align 4, !tbaa !31
  br label %158

111:                                              ; preds = %16
  store i32 100, ptr @dorp, align 4, !tbaa !31
  br label %158

112:                                              ; preds = %16
  store i32 112, ptr @dorp, align 4, !tbaa !31
  br label %158

113:                                              ; preds = %16
  store i32 0, ptr @fftscore, align 4, !tbaa !31
  br label %158

114:                                              ; preds = %16
  store i32 1, ptr @calledByXced, align 4, !tbaa !31
  br label %158

115:                                              ; preds = %16
  store i32 1, ptr @disp, align 4, !tbaa !31
  br label %158

116:                                              ; preds = %16
  store i8 83, ptr @alg, align 1, !tbaa !17
  br label %158

117:                                              ; preds = %16
  store i8 116, ptr @alg, align 1, !tbaa !17
  br label %158

118:                                              ; preds = %16
  store i8 76, ptr @alg, align 1, !tbaa !17
  br label %158

119:                                              ; preds = %16
  store i8 115, ptr @alg, align 1, !tbaa !17
  br label %158

120:                                              ; preds = %16
  store i8 66, ptr @alg, align 1, !tbaa !17
  br label %158

121:                                              ; preds = %16
  store i8 84, ptr @alg, align 1, !tbaa !17
  br label %158

122:                                              ; preds = %16
  store i8 72, ptr @alg, align 1, !tbaa !17
  br label %158

123:                                              ; preds = %16
  store i8 77, ptr @alg, align 1, !tbaa !17
  br label %158

124:                                              ; preds = %16
  store i8 82, ptr @alg, align 1, !tbaa !17
  br label %158

125:                                              ; preds = %16
  store i8 78, ptr @alg, align 1, !tbaa !17
  br label %158

126:                                              ; preds = %16
  store i8 75, ptr @alg, align 1, !tbaa !17
  br label %158

127:                                              ; preds = %16
  store i8 65, ptr @alg, align 1, !tbaa !17
  br label %158

128:                                              ; preds = %16
  store i8 86, ptr @alg, align 1, !tbaa !17
  br label %158

129:                                              ; preds = %16
  store i8 67, ptr @alg, align 1, !tbaa !17
  br label %158

130:                                              ; preds = %16
  store i8 1, ptr @use_fft, align 1, !tbaa !17
  br label %158

131:                                              ; preds = %16
  store i32 3, ptr @tbrweight, align 4, !tbaa !31
  br label %158

132:                                              ; preds = %16
  store i32 1, ptr @divpairscore, align 4, !tbaa !31
  br label %158

133:                                              ; preds = %16
  store i32 0, ptr @tbutree, align 4, !tbaa !31
  br label %158

134:                                              ; preds = %16
  %.lcssa13 = phi i32 [ %19, %16 ]
  %135 = tail call i64 @strlen(ptr nonnull dereferenceable(1) @foldalignopt)
  %136 = getelementptr inbounds i8, ptr @foldalignopt, i64 %135
  store i16 32, ptr %136, align 1
  %137 = getelementptr inbounds ptr, ptr %7, i64 2
  %138 = load ptr, ptr %137, align 8, !tbaa !19
  %139 = tail call ptr @strcat(ptr noundef nonnull dereferenceable(1) @foldalignopt, ptr noundef nonnull dereferenceable(1) %138) #35
  %140 = load ptr, ptr @stderr, align 8, !tbaa !19
  %141 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %140, ptr noundef nonnull @.str.6.269, ptr noundef nonnull @foldalignopt) #36
  %142 = add nsw i32 %.lcssa13, -1
  br label %164

143:                                              ; preds = %16
  %.lcssa14 = phi i32 [ %19, %16 ]
  %144 = getelementptr inbounds ptr, ptr %7, i64 2
  %145 = load ptr, ptr %144, align 8, !tbaa !19
  %146 = tail call i32 @atoi(ptr nocapture noundef %145) #40
  store i32 %146, ptr @fftThreshold, align 4, !tbaa !31
  %147 = add nsw i32 %.lcssa14, -1
  br label %164

148:                                              ; preds = %16
  %.lcssa15 = phi i32 [ %19, %16 ]
  %149 = getelementptr inbounds ptr, ptr %7, i64 2
  %150 = load ptr, ptr %149, align 8, !tbaa !19
  %151 = tail call i32 @atoi(ptr nocapture noundef %150) #40
  store i32 %151, ptr @fftWinSize, align 4, !tbaa !31
  %152 = add nsw i32 %.lcssa15, -1
  br label %164

153:                                              ; preds = %16
  store i32 1, ptr @checkC, align 4, !tbaa !31
  br label %158

154:                                              ; preds = %16
  %155 = load ptr, ptr @stderr, align 8, !tbaa !19
  %156 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %155, ptr noundef nonnull @.str.7.270, i32 noundef %20) #36
  %157 = load ptr, ptr %8, align 8, !tbaa !19
  br label %158

158:                                              ; preds = %154, %153, %133, %132, %131, %130, %129, %128, %127, %126, %125, %124, %123, %122, %121, %120, %119, %118, %117, %116, %115, %114, %113, %112, %111, %110, %109, %108
  %159 = phi ptr [ %157, %154 ], [ %17, %153 ], [ %17, %133 ], [ %17, %132 ], [ %17, %131 ], [ %17, %130 ], [ %17, %129 ], [ %17, %128 ], [ %17, %127 ], [ %17, %126 ], [ %17, %125 ], [ %17, %124 ], [ %17, %123 ], [ %17, %122 ], [ %17, %121 ], [ %17, %120 ], [ %17, %119 ], [ %17, %118 ], [ %17, %117 ], [ %17, %116 ], [ %17, %115 ], [ %17, %114 ], [ %17, %113 ], [ %17, %112 ], [ %17, %111 ], [ %17, %110 ], [ %17, %109 ], [ %17, %108 ]
  %160 = phi i32 [ 0, %154 ], [ %19, %153 ], [ %19, %133 ], [ %19, %132 ], [ %19, %131 ], [ %19, %130 ], [ %19, %129 ], [ %19, %128 ], [ %19, %127 ], [ %19, %126 ], [ %19, %125 ], [ %19, %124 ], [ %19, %123 ], [ %19, %122 ], [ %19, %121 ], [ %19, %120 ], [ %19, %119 ], [ %19, %118 ], [ %19, %117 ], [ %19, %116 ], [ %19, %115 ], [ %19, %114 ], [ %19, %113 ], [ %19, %112 ], [ %19, %111 ], [ %19, %110 ], [ %19, %109 ], [ %19, %108 ]
  %161 = getelementptr inbounds i8, ptr %159, i64 1
  store ptr %161, ptr %8, align 8, !tbaa !19
  %162 = load i8, ptr %161, align 1, !tbaa !17
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %16, !llvm.loop !572

164:                                              ; preds = %158, %148, %143, %134, %102, %96, %86, %79, %72, %67, %62, %55, %48, %41, %34, %27, %21, %12
  %165 = phi ptr [ %149, %148 ], [ %144, %143 ], [ %137, %134 ], [ %103, %102 ], [ %97, %96 ], [ %87, %86 ], [ %80, %79 ], [ %73, %72 ], [ %68, %67 ], [ %63, %62 ], [ %56, %55 ], [ %49, %48 ], [ %42, %41 ], [ %35, %34 ], [ %28, %27 ], [ %22, %21 ], [ %8, %12 ], [ %8, %158 ]
  %166 = phi i32 [ %152, %148 ], [ %147, %143 ], [ %142, %134 ], [ %107, %102 ], [ %101, %96 ], [ %95, %86 ], [ %85, %79 ], [ %78, %72 ], [ %71, %67 ], [ %66, %62 ], [ %61, %55 ], [ %54, %48 ], [ %47, %41 ], [ %40, %34 ], [ %33, %27 ], [ %26, %21 ], [ %6, %12 ], [ %160, %158 ]
  %167 = add nsw i32 %166, -1
  %168 = icmp sgt i32 %166, 1
  br i1 %168, label %5, label %173, !llvm.loop !573

169:                                              ; preds = %5
  %.lcssa17 = phi i32 [ %6, %5 ]
  %.lcssa16 = phi ptr [ %9, %5 ]
  %170 = icmp eq i32 %.lcssa17, 1
  br i1 %170, label %171, label %176

171:                                              ; preds = %169
  %172 = tail call double @atof(ptr noundef nonnull %.lcssa16) #40
  store double %172, ptr @cut, align 8, !tbaa !7
  br label %179

173:                                              ; preds = %164, %2
  %174 = phi i32 [ %3, %2 ], [ %167, %164 ]
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %179, label %176

176:                                              ; preds = %173, %169
  %177 = load ptr, ptr @stderr, align 8, !tbaa !19
  %178 = tail call i64 @fwrite(ptr nonnull @.str.8.271, i64 29, i64 1, ptr %177) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

179:                                              ; preds = %173, %171
  %180 = load i32, ptr @tbitr, align 4, !tbaa !31
  %181 = icmp eq i32 %180, 1
  %182 = load i32, ptr @outgap, align 4
  %183 = icmp eq i32 %182, 0
  %184 = select i1 %181, i1 %183, i1 false
  br i1 %184, label %185, label %188

185:                                              ; preds = %179
  %186 = load ptr, ptr @stderr, align 8, !tbaa !19
  %187 = tail call i64 @fwrite(ptr nonnull @.str.9.272, i64 32, i64 1, ptr %186) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

188:                                              ; preds = %179
  %189 = load i8, ptr @alg, align 1, !tbaa !17
  %190 = icmp eq i8 %189, 67
  %191 = select i1 %190, i1 %183, i1 false
  br i1 %191, label %192, label %195

192:                                              ; preds = %188
  %193 = load ptr, ptr @stderr, align 8, !tbaa !19
  %194 = tail call i64 @fwrite(ptr nonnull @.str.10.273, i64 27, i64 1, ptr %193) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

195:                                              ; preds = %188
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr nocapture noundef %1) #4 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1000 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  tail call void @arguments(i32 noundef %0, ptr noundef %1) #39
  %9 = load ptr, ptr @inputfile, align 8, !tbaa !19
  %10 = icmp eq ptr %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = tail call noalias ptr @fopen(ptr noundef nonnull %9, ptr noundef nonnull @.str.11.274) #39
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %20

14:                                               ; preds = %11
  %15 = load ptr, ptr @stderr, align 8, !tbaa !19
  %16 = load ptr, ptr @inputfile, align 8, !tbaa !19
  %17 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %15, ptr noundef nonnull @.str.12.275, ptr noundef %16) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

18:                                               ; preds = %2
  %19 = load ptr, ptr @stdin, align 8, !tbaa !19
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi ptr [ %12, %11 ], [ %19, %18 ]
  tail call void @getnumlen(ptr noundef %21) #35
  tail call void @rewind(ptr noundef %21) #39
  %22 = load i32, ptr @njob, align 4, !tbaa !31
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %24, label %27

24:                                               ; preds = %20
  %25 = load ptr, ptr @stderr, align 8, !tbaa !19
  %26 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %25, ptr noundef nonnull @.str.13.276, i32 noundef %22) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

27:                                               ; preds = %20
  %28 = icmp ugt i32 %22, 50000
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = load ptr, ptr @stderr, align 8, !tbaa !19
  %31 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %30, ptr noundef nonnull @.str.14.277, i32 noundef 50000) #36
  %32 = load ptr, ptr @stderr, align 8, !tbaa !19
  %33 = tail call i64 @fwrite(ptr nonnull @.str.15.278, i64 56, i64 1, ptr %32) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

34:                                               ; preds = %27
  %35 = load i32, ptr @nlenmax, align 4, !tbaa !31
  %36 = mul nsw i32 %35, 9
  %37 = add nsw i32 %36, 1
  %38 = tail call ptr @AllocateCharMtx(i32 noundef %22, i32 noundef %37) #35
  store ptr %38, ptr @main.seq, align 8, !tbaa !19
  %39 = load i32, ptr @njob, align 4, !tbaa !31
  %40 = load i32, ptr @nlenmax, align 4, !tbaa !31
  %41 = mul nsw i32 %40, 9
  %42 = add nsw i32 %41, 1
  %43 = tail call ptr @AllocateCharMtx(i32 noundef %39, i32 noundef %42) #35
  store ptr %43, ptr @main.aseq, align 8, !tbaa !19
  %44 = load i32, ptr @njob, align 4, !tbaa !31
  %45 = load i32, ptr @nlenmax, align 4, !tbaa !31
  %46 = mul nsw i32 %45, 9
  %47 = add nsw i32 %46, 1
  %48 = tail call ptr @AllocateCharMtx(i32 noundef %44, i32 noundef %47) #35
  store ptr %48, ptr @main.bseq, align 8, !tbaa !19
  %49 = load i32, ptr @njob, align 4, !tbaa !31
  %50 = tail call ptr @AllocateCharMtx(i32 noundef %49, i32 noundef 0) #35
  store ptr %50, ptr @main.mseq1, align 8, !tbaa !19
  %51 = load i32, ptr @njob, align 4, !tbaa !31
  %52 = tail call ptr @AllocateCharMtx(i32 noundef %51, i32 noundef 0) #35
  store ptr %52, ptr @main.mseq2, align 8, !tbaa !19
  %53 = load i32, ptr @nlenmax, align 4, !tbaa !31
  %54 = load i32, ptr @njob, align 4, !tbaa !31
  %55 = tail call ptr @AllocateDoubleVec(i32 noundef %54) #35
  store ptr %55, ptr @main.eff, align 8, !tbaa !19
  %56 = load ptr, ptr @main.seq, align 8, !tbaa !19
  tail call void @readData(ptr noundef %21, ptr noundef nonnull @main.name, ptr noundef nonnull @main.nlen, ptr noundef %56) #35
  %57 = tail call i32 @fclose(ptr noundef %21) #39
  %58 = load i32, ptr @njob, align 4, !tbaa !31
  %59 = load ptr, ptr @main.seq, align 8, !tbaa !19
  tail call void @constants(i32 noundef %58, ptr noundef %59) #35
  tail call void @initSignalSM() #35
  tail call void @initFiles() #35
  %60 = load ptr, ptr @trap_g, align 8, !tbaa !19
  %61 = load i32, ptr @dorp, align 4, !tbaa !31
  %62 = icmp eq i32 %61, 100
  br i1 %62, label %63, label %65

63:                                               ; preds = %34
  %64 = tail call i64 @fwrite(ptr nonnull @.str.22.279, i64 4, i64 1, ptr %60)
  br label %75

65:                                               ; preds = %34
  %66 = load i32, ptr @scoremtx, align 4, !tbaa !31
  switch i32 %66, label %75 [
    i32 0, label %67
    i32 1, label %70
    i32 2, label %73
  ]

67:                                               ; preds = %65
  %68 = load i32, ptr @pamN, align 4, !tbaa !31
  %69 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.23.280, i32 noundef %68) #39
  br label %75

70:                                               ; preds = %65
  %71 = load i32, ptr @nblosum, align 4, !tbaa !31
  %72 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.24.281, i32 noundef %71) #39
  br label %75

73:                                               ; preds = %65
  %74 = tail call i64 @fwrite(ptr nonnull @.str.25.282, i64 4, i64 1, ptr %60)
  br label %75

75:                                               ; preds = %73, %70, %67, %65, %63
  %76 = load ptr, ptr @stderr, align 8, !tbaa !19
  %77 = load i32, ptr @ppenalty, align 4, !tbaa !31
  %78 = sitofp i32 %77 to double
  %79 = fdiv double %78, 1.000000e+03
  %80 = load i32, ptr @ppenalty_ex, align 4, !tbaa !31
  %81 = sitofp i32 %80 to double
  %82 = fdiv double %81, 1.000000e+03
  %83 = load i32, ptr @poffset, align 4, !tbaa !31
  %84 = sitofp i32 %83 to double
  %85 = fdiv double %84, 1.000000e+03
  %86 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.26.283, double noundef %79, double noundef %82, double noundef %85) #36
  %87 = load i8, ptr @use_fft, align 1, !tbaa !17
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %75
  %90 = tail call i64 @fwrite(ptr nonnull @.str.27.284, i64 7, i64 1, ptr %60)
  br label %91

91:                                               ; preds = %89, %75
  %92 = tail call i64 @fwrite(ptr nonnull @.str.28.285, i64 17, i64 1, ptr %60)
  %93 = load i32, ptr @tbrweight, align 4, !tbaa !31
  switch i32 %93, label %98 [
    i32 0, label %94
    i32 3, label %96
  ]

94:                                               ; preds = %91
  %95 = tail call i64 @fwrite(ptr nonnull @.str.29.286, i64 11, i64 1, ptr %60)
  br label %98

96:                                               ; preds = %91
  %97 = tail call i64 @fwrite(ptr nonnull @.str.30.287, i64 24, i64 1, ptr %60)
  br label %98

98:                                               ; preds = %96, %94, %91
  %99 = load i32, ptr @tbitr, align 4, !tbaa !31
  %100 = icmp ne i32 %99, 0
  %101 = load i32, ptr @tbweight, align 4
  %102 = icmp ne i32 %101, 0
  %103 = select i1 %100, i1 true, i1 %102
  br i1 %103, label %104, label %130

104:                                              ; preds = %98
  %105 = tail call i64 @fwrite(ptr nonnull @.str.31.288, i64 21, i64 1, ptr %60)
  %106 = load i32, ptr @tbitr, align 4, !tbaa !31
  %107 = icmp ne i32 %106, 0
  %108 = load i32, ptr @tbrweight, align 4
  %109 = icmp eq i32 %108, 0
  %110 = select i1 %107, i1 %109, i1 false
  br i1 %110, label %111, label %115

111:                                              ; preds = %104
  %112 = tail call i64 @fwrite(ptr nonnull @.str.32.289, i64 13, i64 1, ptr %60)
  %113 = load i32, ptr @tbitr, align 4, !tbaa !31
  %114 = load i32, ptr @tbrweight, align 4
  br label %115

115:                                              ; preds = %111, %104
  %116 = phi i32 [ %114, %111 ], [ %108, %104 ]
  %117 = phi i32 [ %113, %111 ], [ %106, %104 ]
  %118 = icmp ne i32 %117, 0
  %119 = icmp eq i32 %116, 3
  %120 = select i1 %118, i1 %119, i1 false
  br i1 %120, label %121, label %123

121:                                              ; preds = %115
  %122 = tail call i64 @fwrite(ptr nonnull @.str.33.290, i64 21, i64 1, ptr %60)
  br label %123

123:                                              ; preds = %121, %115
  %124 = load i32, ptr @tbweight, align 4, !tbaa !31
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  %127 = tail call i64 @fwrite(ptr nonnull @.str.34.291, i64 11, i64 1, ptr %60)
  br label %128

128:                                              ; preds = %126, %123
  %129 = tail call i32 @fputc(i32 10, ptr %60)
  br label %130

130:                                              ; preds = %128, %98
  %131 = load i32, ptr @ppenalty, align 4, !tbaa !31
  %132 = sitofp i32 %131 to double
  %133 = fdiv double %132, 1.000000e+03
  %134 = load i32, ptr @ppenalty_ex, align 4, !tbaa !31
  %135 = sitofp i32 %134 to double
  %136 = fdiv double %135, 1.000000e+03
  %137 = load i32, ptr @poffset, align 4, !tbaa !31
  %138 = sitofp i32 %137 to double
  %139 = fdiv double %138, 1.000000e+03
  %140 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.26.283, double noundef %133, double noundef %136, double noundef %139) #39
  %141 = load i8, ptr @alg, align 1, !tbaa !17
  switch i8 %141, label %150 [
    i8 97, label %142
    i8 65, label %144
    i8 83, label %146
    i8 67, label %148
  ]

142:                                              ; preds = %130
  %143 = tail call i64 @fwrite(ptr nonnull @.str.36.292, i64 12, i64 1, ptr %60)
  br label %152

144:                                              ; preds = %130
  %145 = tail call i64 @fwrite(ptr nonnull @.str.37.293, i64 13, i64 1, ptr %60)
  br label %152

146:                                              ; preds = %130
  %147 = tail call i64 @fwrite(ptr nonnull @.str.38.294, i64 12, i64 1, ptr %60)
  br label %152

148:                                              ; preds = %130
  %149 = tail call i64 @fwrite(ptr nonnull @.str.39.295, i64 15, i64 1, ptr %60)
  br label %152

150:                                              ; preds = %130
  %151 = tail call i64 @fwrite(ptr nonnull @.str.40.296, i64 18, i64 1, ptr %60)
  br label %152

152:                                              ; preds = %150, %148, %146, %144, %142
  %153 = load i8, ptr @use_fft, align 1, !tbaa !17
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %173, label %155

155:                                              ; preds = %152
  %156 = tail call i64 @fwrite(ptr nonnull @.str.27.284, i64 7, i64 1, ptr %60)
  %157 = load i32, ptr @dorp, align 4, !tbaa !31
  %158 = icmp eq i32 %157, 100
  br i1 %158, label %159, label %161

159:                                              ; preds = %155
  %160 = tail call i64 @fwrite(ptr nonnull @.str.41.297, i64 22, i64 1, ptr %60)
  br label %168

161:                                              ; preds = %155
  %162 = load i32, ptr @fftscore, align 4, !tbaa !31
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %166, label %164

164:                                              ; preds = %161
  %165 = tail call i64 @fwrite(ptr nonnull @.str.42.298, i64 28, i64 1, ptr %60)
  br label %168

166:                                              ; preds = %161
  %167 = tail call i64 @fwrite(ptr nonnull @.str.43, i64 23, i64 1, ptr %60)
  br label %168

168:                                              ; preds = %166, %164, %159
  %169 = load i32, ptr @fftThreshold, align 4, !tbaa !31
  %170 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.44, i32 noundef %169) #39
  %171 = load i32, ptr @fftWinSize, align 4, !tbaa !31
  %172 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.45, i32 noundef %171) #39
  br label %175

173:                                              ; preds = %152
  %174 = tail call i64 @fwrite(ptr nonnull @.str.46, i64 8, i64 1, ptr %60)
  br label %175

175:                                              ; preds = %173, %168
  %176 = tail call i32 @fflush(ptr noundef %60) #39
  %177 = load ptr, ptr @main.seq, align 8, !tbaa !19
  %178 = tail call signext i8 @seqcheck(ptr noundef %177) #35
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %180, label %207

180:                                              ; preds = %175
  %181 = load i32, ptr @njob, align 4, !tbaa !31
  %182 = icmp sgt i32 %181, 0
  br i1 %182, label %183, label %212

183:                                              ; preds = %180
  %184 = load ptr, ptr @main.eff, align 8, !tbaa !19
  %185 = zext i32 %181 to i64
  %186 = add nuw nsw i64 %185, 1
  %187 = and i64 %186, 8589934590
  %188 = add nsw i64 %185, -1
  %189 = insertelement <2 x i64> poison, i64 %188, i64 0
  %190 = shufflevector <2 x i64> %189, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %191

191:                                              ; preds = %203, %183
  %192 = phi i64 [ 0, %183 ], [ %204, %203 ]
  %193 = phi <2 x i64> [ <i64 0, i64 1>, %183 ], [ %205, %203 ]
  %194 = icmp ule <2 x i64> %193, %190
  %195 = extractelement <2 x i1> %194, i64 0
  br i1 %195, label %196, label %198

196:                                              ; preds = %191
  %197 = getelementptr inbounds double, ptr %184, i64 %192
  store double 1.000000e+00, ptr %197, align 8, !tbaa !7
  br label %198

198:                                              ; preds = %196, %191
  %199 = extractelement <2 x i1> %194, i64 1
  br i1 %199, label %200, label %203

200:                                              ; preds = %198
  %201 = or i64 %192, 1
  %202 = getelementptr inbounds double, ptr %184, i64 %201
  store double 1.000000e+00, ptr %202, align 8, !tbaa !7
  br label %203

203:                                              ; preds = %200, %198
  %204 = add i64 %192, 2
  %205 = add <2 x i64> %193, <i64 2, i64 2>
  %206 = icmp eq i64 %204, %187
  br i1 %206, label %211, label %191, !llvm.loop !574

207:                                              ; preds = %175
  %208 = load ptr, ptr @stderr, align 8, !tbaa !19
  %209 = sext i8 %178 to i32
  %210 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %208, ptr noundef nonnull @.str.16.299, i32 noundef %209) #36
  tail call void @exit(i32 noundef 1) #37
  unreachable

211:                                              ; preds = %203
  br i1 %182, label %214, label %212

212:                                              ; preds = %211, %180
  %213 = sext i32 %181 to i64
  br label %226

214:                                              ; preds = %214, %211
  %215 = phi i64 [ %222, %214 ], [ 0, %211 ]
  %216 = load ptr, ptr @main.bseq, align 8, !tbaa !19
  %217 = getelementptr inbounds ptr, ptr %216, i64 %215
  %218 = load ptr, ptr %217, align 8, !tbaa !19
  %219 = load ptr, ptr @main.seq, align 8, !tbaa !19
  %220 = getelementptr inbounds ptr, ptr %219, i64 %215
  %221 = load ptr, ptr %220, align 8, !tbaa !19
  tail call void @gappick0(ptr noundef %218, ptr noundef %221) #35
  %222 = add nuw nsw i64 %215, 1
  %223 = load i32, ptr @njob, align 4, !tbaa !31
  %224 = sext i32 %223 to i64
  %225 = icmp slt i64 %222, %224
  br i1 %225, label %214, label %226, !llvm.loop !575

226:                                              ; preds = %214, %212
  %227 = phi i64 [ %213, %212 ], [ %224, %214 ]
  %228 = phi i32 [ %181, %212 ], [ %223, %214 ]
  %229 = mul nsw i32 %53, 9
  %230 = load ptr, ptr @main.bseq, align 8, !tbaa !19
  %231 = load ptr, ptr @main.aseq, align 8, !tbaa !19
  %232 = load ptr, ptr @main.mseq1, align 8, !tbaa !19
  %233 = load ptr, ptr @main.mseq2, align 8, !tbaa !19
  %234 = load ptr, ptr @main.eff, align 8, !tbaa !19
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #34
  %235 = tail call noalias ptr @calloc(i64 noundef %227, i64 noundef 8) #41
  %236 = icmp sgt i32 %228, 0
  br i1 %236, label %237, label %261

237:                                              ; preds = %256, %226
  %238 = phi i32 [ %258, %256 ], [ %228, %226 ]
  %239 = phi i64 [ %259, %256 ], [ 0, %226 ]
  %240 = sext i32 %238 to i64
  %241 = tail call noalias ptr @calloc(i64 noundef %240, i64 noundef 80) #41
  %242 = getelementptr inbounds ptr, ptr %235, i64 %239
  store ptr %241, ptr %242, align 8, !tbaa !19
  %243 = icmp sgt i32 %238, 0
  br i1 %243, label %244, label %256

244:                                              ; preds = %244, %237
  %245 = phi ptr [ %250, %244 ], [ %241, %237 ]
  %246 = phi i64 [ %252, %244 ], [ 0, %237 ]
  %247 = getelementptr inbounds %struct._LocalHom.3, ptr %245, i64 %246, i32 3
  %248 = getelementptr inbounds %struct._LocalHom.3, ptr %245, i64 %246, i32 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %247, i8 -1, i64 16, i1 false)
  store double -1.000000e+00, ptr %248, align 8, !tbaa !378
  %249 = getelementptr inbounds %struct._LocalHom.3, ptr %245, i64 %246, i32 1
  store ptr null, ptr %249, align 8, !tbaa !371
  %250 = load ptr, ptr %242, align 8, !tbaa !19
  %251 = getelementptr inbounds %struct._LocalHom.3, ptr %250, i64 %246
  store i32 0, ptr %251, align 8, !tbaa !576
  %252 = add nuw nsw i64 %246, 1
  %253 = load i32, ptr @njob, align 4, !tbaa !31
  %254 = sext i32 %253 to i64
  %255 = icmp slt i64 %252, %254
  br i1 %255, label %244, label %256, !llvm.loop !577

256:                                              ; preds = %244, %237
  %257 = phi i64 [ %240, %237 ], [ %254, %244 ]
  %258 = phi i32 [ %238, %237 ], [ %253, %244 ]
  %259 = add nuw nsw i64 %239, 1
  %260 = icmp slt i64 %259, %257
  br i1 %260, label %237, label %261, !llvm.loop !578

261:                                              ; preds = %256, %226
  %262 = phi i32 [ %228, %226 ], [ %258, %256 ]
  %263 = load ptr, ptr @pairalign.effarr1, align 8, !tbaa !19
  %264 = icmp eq ptr %263, null
  br i1 %264, label %265, label %276

265:                                              ; preds = %261
  %266 = tail call ptr @AllocateDoubleMtx(i32 noundef %262, i32 noundef %262) #35
  store ptr %266, ptr @pairalign.distancemtx, align 8, !tbaa !19
  %267 = load i32, ptr @njob, align 4, !tbaa !31
  %268 = tail call ptr @AllocateDoubleVec(i32 noundef %267) #35
  store ptr %268, ptr @pairalign.effarr1, align 8, !tbaa !19
  %269 = load i32, ptr @njob, align 4, !tbaa !31
  %270 = tail call ptr @AllocateDoubleVec(i32 noundef %269) #35
  store ptr %270, ptr @pairalign.effarr2, align 8, !tbaa !19
  %271 = tail call ptr @AllocateCharVec(i32 noundef 150) #35
  store ptr %271, ptr @pairalign.indication1, align 8, !tbaa !19
  %272 = tail call ptr @AllocateCharVec(i32 noundef 150) #35
  store ptr %272, ptr @pairalign.indication2, align 8, !tbaa !19
  %273 = load i32, ptr @njob, align 4, !tbaa !31
  %274 = tail call ptr @AllocateCharMtx(i32 noundef %273, i32 noundef %273) #35
  store ptr %274, ptr @pairalign.pair, align 8, !tbaa !19
  %275 = load i32, ptr @njob, align 4, !tbaa !31
  br label %276

276:                                              ; preds = %265, %261
  %277 = phi i32 [ %275, %265 ], [ %262, %261 ]
  %278 = icmp sgt i32 %277, 0
  br i1 %278, label %279, label %313

279:                                              ; preds = %276
  %280 = load ptr, ptr @pairalign.pair, align 8
  br label %281

281:                                              ; preds = %299, %279
  %282 = phi i32 [ %277, %279 ], [ %301, %299 ]
  %283 = phi i64 [ 0, %279 ], [ %302, %299 ]
  %284 = icmp sgt i32 %282, 0
  br i1 %284, label %287, label %285

285:                                              ; preds = %281
  %286 = sext i32 %282 to i64
  br label %299

287:                                              ; preds = %281
  %288 = getelementptr inbounds ptr, ptr %280, i64 %283
  br label %291

289:                                              ; preds = %299
  %.lcssa9 = phi i32 [ %301, %299 ]
  %290 = icmp sgt i32 %.lcssa9, 0
  br i1 %290, label %304, label %313

291:                                              ; preds = %291, %287
  %292 = phi i64 [ 0, %287 ], [ %295, %291 ]
  %293 = load ptr, ptr %288, align 8, !tbaa !19
  %294 = getelementptr inbounds i8, ptr %293, i64 %292
  store i8 0, ptr %294, align 1, !tbaa !17
  %295 = add nuw nsw i64 %292, 1
  %296 = load i32, ptr @njob, align 4, !tbaa !31
  %297 = sext i32 %296 to i64
  %298 = icmp slt i64 %295, %297
  br i1 %298, label %291, label %299, !llvm.loop !579

299:                                              ; preds = %291, %285
  %300 = phi i64 [ %286, %285 ], [ %297, %291 ]
  %301 = phi i32 [ %282, %285 ], [ %296, %291 ]
  %302 = add nuw nsw i64 %283, 1
  %303 = icmp slt i64 %302, %300
  br i1 %303, label %281, label %289, !llvm.loop !580

304:                                              ; preds = %304, %289
  %305 = phi i64 [ %309, %304 ], [ 0, %289 ]
  %306 = getelementptr inbounds ptr, ptr %280, i64 %305
  %307 = load ptr, ptr %306, align 8, !tbaa !19
  %308 = getelementptr inbounds i8, ptr %307, i64 %305
  store i8 1, ptr %308, align 1, !tbaa !17
  %309 = add nuw nsw i64 %305, 1
  %310 = load i32, ptr @njob, align 4, !tbaa !31
  %311 = sext i32 %310 to i64
  %312 = icmp slt i64 %309, %311
  br i1 %312, label %304, label %313, !llvm.loop !581

313:                                              ; preds = %304, %289, %276
  %314 = phi i32 [ %.lcssa9, %289 ], [ %277, %276 ], [ %310, %304 ]
  %315 = load i8, ptr @alg, align 1, !tbaa !17
  switch i8 %315, label %419 [
    i8 72, label %316
    i8 66, label %354
    i8 84, label %358
    i8 115, label %362
  ]

316:                                              ; preds = %313
  %317 = load ptr, ptr @stderr, align 8, !tbaa !19
  %318 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %317, ptr noundef nonnull @.str.48, ptr noundef nonnull @foldalignopt) #36
  %319 = load i32, ptr @njob, align 4, !tbaa !31
  %320 = icmp sgt i32 %319, 0
  br i1 %320, label %321, label %332

321:                                              ; preds = %316
  %322 = zext i32 %319 to i64
  br label %323

323:                                              ; preds = %323, %321
  %324 = phi i64 [ 0, %321 ], [ %327, %323 ]
  %325 = getelementptr inbounds ptr, ptr %230, i64 %324
  %326 = load ptr, ptr %325, align 8, !tbaa !19
  tail call fastcc void @t2u(ptr noundef %326) #39
  %327 = add nuw nsw i64 %324, 1
  %328 = icmp eq i64 %327, %322
  br i1 %328, label %329, label %323, !llvm.loop !582

329:                                              ; preds = %323
  %330 = tail call noalias ptr @fopen(ptr noundef nonnull @.str.62, ptr noundef nonnull @.str.58) #39
  %331 = icmp eq ptr %330, null
  br i1 %331, label %335, label %338

332:                                              ; preds = %316
  %333 = tail call noalias ptr @fopen(ptr noundef nonnull @.str.62, ptr noundef nonnull @.str.58) #39
  %334 = icmp eq ptr %333, null
  br i1 %334, label %335, label %347

335:                                              ; preds = %332, %329
  %336 = load ptr, ptr @stderr, align 8, !tbaa !19
  %337 = tail call i64 @fwrite(ptr nonnull @.str.63, i64 25, i64 1, ptr %336) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

338:                                              ; preds = %338, %329
  %339 = phi i64 [ %340, %338 ], [ 0, %329 ]
  %340 = add nuw nsw i64 %339, 1
  %341 = trunc i64 %340 to i32
  %342 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %330, ptr noundef nonnull @.str.64, i32 noundef %341) #39
  %343 = getelementptr inbounds ptr, ptr %230, i64 %339
  %344 = load ptr, ptr %343, align 8, !tbaa !19
  %345 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %330, ptr noundef nonnull @.str.65, ptr noundef %344) #39
  %346 = icmp eq i64 %340, %322
  br i1 %346, label %347, label %338, !llvm.loop !583

347:                                              ; preds = %338, %332
  %348 = phi ptr [ %333, %332 ], [ %330, %338 ]
  %349 = tail call i32 @fclose(ptr noundef nonnull %348) #39
  %350 = load ptr, ptr @whereispairalign, align 8, !tbaa !19
  %351 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @callfoldalign.com, ptr noundef nonnull dereferenceable(1) @.str.66, ptr noundef %350, ptr noundef nonnull @foldalignopt) #35
  %352 = load ptr, ptr @stderr, align 8, !tbaa !19
  %353 = tail call i64 @fwrite(ptr nonnull @.str.67.300, i64 29, i64 1, ptr %352) #38
  tail call void @abort() #37
  unreachable

354:                                              ; preds = %313
  %355 = load ptr, ptr @stderr, align 8, !tbaa !19
  %356 = tail call i64 @fwrite(ptr nonnull @.str.49, i64 56, i64 1, ptr %355) #38
  %357 = load i32, ptr @njob, align 4, !tbaa !31
  tail call fastcc void @calllara(i32 noundef %357, ptr noundef %230, ptr noundef nonnull @.str.50) #39
  unreachable

358:                                              ; preds = %313
  %359 = load ptr, ptr @stderr, align 8, !tbaa !19
  %360 = tail call i64 @fwrite(ptr nonnull @.str.51, i64 57, i64 1, ptr %359) #38
  %361 = load i32, ptr @njob, align 4, !tbaa !31
  tail call fastcc void @calllara(i32 noundef %361, ptr noundef %230, ptr noundef nonnull @.str.52) #39
  unreachable

362:                                              ; preds = %313
  %363 = load ptr, ptr @stderr, align 8, !tbaa !19
  %364 = tail call i64 @fwrite(ptr nonnull @.str.53, i64 14, i64 1, ptr %363) #38
  %365 = load i32, ptr @njob, align 4, !tbaa !31
  %366 = sext i32 %365 to i64
  %367 = tail call noalias ptr @calloc(i64 noundef %366, i64 noundef 8) #41
  %368 = tail call noalias ptr @fopen(ptr noundef nonnull @.str.71.301, ptr noundef nonnull @.str.11.274) #39
  %369 = icmp eq ptr %368, null
  br i1 %369, label %374, label %370

370:                                              ; preds = %362
  %371 = icmp sgt i32 %365, 0
  br i1 %371, label %372, label %412

372:                                              ; preds = %370
  %373 = zext i32 %365 to i64
  br label %377

374:                                              ; preds = %362
  %375 = load ptr, ptr @stderr, align 8, !tbaa !19
  %376 = tail call i64 @fwrite(ptr nonnull @.str.72.302, i64 17, i64 1, ptr %375) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

377:                                              ; preds = %402, %372
  %378 = phi i64 [ 0, %372 ], [ %410, %402 ]
  %379 = getelementptr inbounds ptr, ptr %367, i64 %378
  call void @llvm.lifetime.start.p0(i64 1000, ptr nonnull %5) #34
  %380 = call i32 @getc(ptr noundef nonnull %368) #39
  %381 = icmp eq i32 %380, 62
  br i1 %381, label %385, label %382

382:                                              ; preds = %377
  %383 = load ptr, ptr @stderr, align 8, !tbaa !19
  %384 = call i64 @fwrite(ptr nonnull @.str.73.303, i64 13, i64 1, ptr %383) #38
  call void @exit(i32 noundef 1) #37
  unreachable

385:                                              ; preds = %377
  %386 = call i32 @ungetc(i32 noundef 62, ptr noundef nonnull %368) #39
  %387 = call ptr @fgets(ptr noundef nonnull %5, i32 noundef 999, ptr noundef nonnull %368) #39
  br label %388

388:                                              ; preds = %392, %385
  %389 = phi i64 [ %401, %392 ], [ 0, %385 ]
  %390 = call i32 @getc(ptr noundef nonnull %368) #39
  %391 = call i32 @ungetc(i32 noundef %390, ptr noundef nonnull %368) #39
  switch i32 %390, label %392 [
    i32 -1, label %402
    i32 62, label %402
  ]

392:                                              ; preds = %388
  %393 = call ptr @fgets(ptr noundef nonnull %5, i32 noundef 999, ptr noundef nonnull %368) #39
  %394 = load ptr, ptr %379, align 8, !tbaa !19
  %395 = shl i64 %389, 3
  %396 = add i64 %395, 16
  %397 = call ptr @realloc(ptr noundef %394, i64 noundef %396) #42
  store ptr %397, ptr %379, align 8, !tbaa !19
  %398 = call noalias dereferenceable_or_null(100) ptr @calloc(i64 noundef 100, i64 noundef 1) #41
  %399 = getelementptr inbounds ptr, ptr %397, i64 %389
  store ptr %398, ptr %399, align 8, !tbaa !19
  %400 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %398, ptr noundef nonnull dereferenceable(1) %5) #35
  %401 = add nuw i64 %389, 1
  br label %388

402:                                              ; preds = %388, %388
  %.lcssa8 = phi i64 [ %389, %388 ], [ %389, %388 ]
  %403 = load ptr, ptr %379, align 8, !tbaa !19
  %404 = shl i64 %.lcssa8, 3
  %405 = add i64 %404, 16
  %406 = and i64 %405, 34359738360
  %407 = call ptr @realloc(ptr noundef %403, i64 noundef %406) #42
  store ptr %407, ptr %379, align 8, !tbaa !19
  %408 = and i64 %.lcssa8, 4294967295
  %409 = getelementptr inbounds ptr, ptr %407, i64 %408
  store ptr null, ptr %409, align 8, !tbaa !19
  call void @llvm.lifetime.end.p0(i64 1000, ptr nonnull %5) #34
  %410 = add nuw nsw i64 %378, 1
  %411 = icmp eq i64 %410, %373
  br i1 %411, label %412, label %377, !llvm.loop !584

412:                                              ; preds = %402, %370
  %413 = call i32 @fclose(ptr noundef nonnull %368) #39
  %414 = load ptr, ptr @stderr, align 8, !tbaa !19
  %415 = call i64 @fwrite(ptr nonnull @.str.17.304, i64 6, i64 1, ptr %414) #38
  %416 = load ptr, ptr @stderr, align 8, !tbaa !19
  %417 = call i64 @fwrite(ptr nonnull @.str.54, i64 71, i64 1, ptr %416) #38
  %418 = load i32, ptr @njob, align 4, !tbaa !31
  br label %419

419:                                              ; preds = %412, %313
  %420 = phi i32 [ %418, %412 ], [ %314, %313 ]
  %421 = phi ptr [ %367, %412 ], [ undef, %313 ]
  %422 = icmp sgt i32 %420, 1
  br i1 %422, label %423, label %432

423:                                              ; preds = %419
  %424 = add nsw i32 %420, -1
  %425 = sext i32 %229 to i64
  %426 = zext i32 %424 to i64
  br label %438

427:                                              ; preds = %743, %438
  %428 = phi i32 [ %447, %438 ], [ %746, %743 ]
  %429 = phi float [ %442, %438 ], [ %744, %743 ]
  %430 = add nuw nsw i64 %441, 1
  %431 = icmp eq i64 %446, %426
  br i1 %431, label %432, label %438, !llvm.loop !585

432:                                              ; preds = %427, %419
  %433 = phi i32 [ %420, %419 ], [ %428, %427 ]
  %434 = icmp sgt i32 %433, 0
  br i1 %434, label %435, label %816

435:                                              ; preds = %432
  %436 = load ptr, ptr @pairalign.distancemtx, align 8
  %437 = zext i32 %433 to i64
  br label %749

438:                                              ; preds = %427, %423
  %439 = phi i32 [ %420, %423 ], [ %428, %427 ]
  %440 = phi i64 [ 0, %423 ], [ %446, %427 ]
  %441 = phi i64 [ 1, %423 ], [ %430, %427 ]
  %442 = phi float [ 0.000000e+00, %423 ], [ %429, %427 ]
  %443 = load ptr, ptr @stderr, align 8, !tbaa !19
  %444 = trunc i64 %440 to i32
  %445 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %443, ptr noundef nonnull @.str.55, i32 noundef %444, i32 noundef %439) #36
  %446 = add nuw nsw i64 %440, 1
  %447 = load i32, ptr @njob, align 4, !tbaa !31
  %448 = sext i32 %447 to i64
  %449 = icmp slt i64 %446, %448
  br i1 %449, label %450, label %427

450:                                              ; preds = %438
  %451 = getelementptr inbounds ptr, ptr %230, i64 %440
  %452 = getelementptr inbounds ptr, ptr %231, i64 %440
  %453 = getelementptr inbounds ptr, ptr %235, i64 %440
  %454 = getelementptr inbounds [256 x i8], ptr @main.name, i64 %440
  %455 = trunc i64 %446 to i32
  br label %456

456:                                              ; preds = %743, %450
  %457 = phi i64 [ %441, %450 ], [ %745, %743 ]
  %458 = phi float [ %442, %450 ], [ %744, %743 ]
  %459 = load ptr, ptr %451, align 8, !tbaa !19
  %460 = load i8, ptr %459, align 1
  %461 = icmp eq i8 %460, 0
  br i1 %461, label %467, label %462

462:                                              ; preds = %456
  %463 = getelementptr inbounds ptr, ptr %230, i64 %457
  %464 = load ptr, ptr %463, align 8, !tbaa !19
  %465 = load i8, ptr %464, align 1
  %466 = icmp eq i8 %465, 0
  br i1 %466, label %467, label %472

467:                                              ; preds = %462, %456
  %468 = load ptr, ptr @pairalign.distancemtx, align 8, !tbaa !19
  %469 = getelementptr inbounds ptr, ptr %468, i64 %440
  %470 = load ptr, ptr %469, align 8, !tbaa !19
  %471 = getelementptr inbounds double, ptr %470, i64 %457
  store double -9.999000e+03, ptr %471, align 8, !tbaa !7
  br label %743

472:                                              ; preds = %462
  %473 = load ptr, ptr %452, align 8, !tbaa !19
  %474 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %473, ptr noundef nonnull dereferenceable(1) %459) #35
  %475 = getelementptr inbounds ptr, ptr %231, i64 %457
  %476 = load ptr, ptr %475, align 8, !tbaa !19
  %477 = load ptr, ptr %463, align 8, !tbaa !19
  %478 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %476, ptr noundef nonnull dereferenceable(1) %477) #35
  %479 = load ptr, ptr @pairalign.pair, align 8, !tbaa !19
  %480 = load ptr, ptr @pairalign.effarr1, align 8, !tbaa !19
  %481 = load ptr, ptr @pairalign.indication1, align 8, !tbaa !19
  %482 = call i32 @conjuctionfortbfast(ptr noundef %479, i32 noundef %444, ptr noundef %231, ptr noundef %232, ptr noundef %480, ptr noundef %234, ptr noundef %481) #35
  %483 = load ptr, ptr @pairalign.pair, align 8, !tbaa !19
  %484 = load ptr, ptr @pairalign.effarr2, align 8, !tbaa !19
  %485 = load ptr, ptr @pairalign.indication2, align 8, !tbaa !19
  %486 = trunc i64 %457 to i32
  %487 = call i32 @conjuctionfortbfast(ptr noundef %483, i32 noundef %486, ptr noundef %231, ptr noundef %233, ptr noundef %484, ptr noundef %234, ptr noundef %485) #35
  %488 = load i8, ptr @use_fft, align 1, !tbaa !17
  %489 = icmp eq i8 %488, 0
  br i1 %489, label %494, label %490

490:                                              ; preds = %472
  %491 = load ptr, ptr @pairalign.effarr1, align 8, !tbaa !19
  %492 = load ptr, ptr @pairalign.effarr2, align 8, !tbaa !19
  %493 = call float @Falign(ptr noundef %232, ptr noundef %233, ptr noundef %491, ptr noundef %492, i32 noundef %482, i32 noundef %487, i32 noundef %229, ptr noundef nonnull %8) #35
  store i32 0, ptr %7, align 4, !tbaa !31
  store i32 0, ptr %6, align 4, !tbaa !31
  br label %671

494:                                              ; preds = %472
  %495 = load i8, ptr @alg, align 1, !tbaa !17
  %496 = sext i8 %495 to i32
  switch i32 %496, label %674 [
    i32 97, label %497
    i32 116, label %501
    i32 65, label %505
    i32 78, label %507
    i32 75, label %512
    i32 76, label %514
    i32 72, label %519
    i32 66, label %559
    i32 84, label %559
    i32 115, label %633
    i32 77, label %669
  ]

497:                                              ; preds = %494
  %498 = load ptr, ptr @pairalign.effarr1, align 8, !tbaa !19
  %499 = load ptr, ptr @pairalign.effarr2, align 8, !tbaa !19
  %500 = call float (ptr, ptr, ptr, ptr, i32, i32, i32, ...) @Aalign(ptr noundef %232, ptr noundef %233, ptr noundef %498, ptr noundef %499, i32 noundef %482, i32 noundef %487, i32 noundef %229) #35
  store i32 0, ptr %7, align 4, !tbaa !31
  store i32 0, ptr %6, align 4, !tbaa !31
  br label %671

501:                                              ; preds = %494
  %502 = load i32, ptr @penalty, align 4, !tbaa !31
  %503 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %504 = call float @G__align11_noalign(ptr noundef nonnull @amino_dis, i32 noundef %502, i32 noundef %503, ptr noundef %232, ptr noundef %233, i32 noundef %229) #35
  store i32 0, ptr %7, align 4, !tbaa !31
  store i32 0, ptr %6, align 4, !tbaa !31
  br label %671

505:                                              ; preds = %494
  %506 = call float @G__align11(ptr noundef %232, ptr noundef %233, i32 noundef %229) #35
  store i32 0, ptr %7, align 4, !tbaa !31
  store i32 0, ptr %6, align 4, !tbaa !31
  br label %671

507:                                              ; preds = %494
  %508 = load i32, ptr @penalty, align 4, !tbaa !31
  %509 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %510 = call float @G__align11_noalign(ptr noundef nonnull @amino_dis, i32 noundef %508, i32 noundef %509, ptr noundef %232, ptr noundef %233, i32 noundef %229) #35
  %511 = call float @genL__align11(ptr noundef %232, ptr noundef %233, i32 noundef %229, ptr noundef nonnull %6, ptr noundef nonnull %7) #35
  br label %671

512:                                              ; preds = %494
  %513 = call float @genG__align11(ptr noundef %232, ptr noundef %233, i32 noundef %229) #35
  store i32 0, ptr %7, align 4, !tbaa !31
  store i32 0, ptr %6, align 4, !tbaa !31
  br label %671

514:                                              ; preds = %494
  %515 = load i32, ptr @penalty, align 4, !tbaa !31
  %516 = load i32, ptr @penalty_ex, align 4, !tbaa !31
  %517 = call float @G__align11_noalign(ptr noundef nonnull @amino_dis, i32 noundef %515, i32 noundef %516, ptr noundef %232, ptr noundef %233, i32 noundef %229) #35
  %518 = call float @L__align11(ptr noundef %232, ptr noundef %233, i32 noundef %229, ptr noundef nonnull %6, ptr noundef nonnull %7) #35
  br label %671

519:                                              ; preds = %494
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #34
  %520 = load ptr, ptr @recallpairfoldalign.fp, align 8, !tbaa !19
  %521 = icmp eq ptr %520, null
  br i1 %521, label %522, label %528

522:                                              ; preds = %519
  %523 = call noalias ptr @fopen(ptr noundef nonnull @.str.74.305, ptr noundef nonnull @.str.11.274) #39
  store ptr %523, ptr @recallpairfoldalign.fp, align 8, !tbaa !19
  %524 = icmp eq ptr %523, null
  br i1 %524, label %525, label %528

525:                                              ; preds = %522
  %526 = load ptr, ptr @stderr, align 8, !tbaa !19
  %527 = call i64 @fwrite(ptr nonnull @.str.75, i64 26, i64 1, ptr %526) #38
  call void @exit(i32 noundef 1) #37
  unreachable

528:                                              ; preds = %522, %519
  %529 = phi ptr [ %523, %522 ], [ %520, %519 ]
  %530 = call noalias ptr @calloc(i64 noundef %425, i64 noundef 1) #41
  %531 = call noalias ptr @calloc(i64 noundef %425, i64 noundef 1) #41
  %532 = load ptr, ptr %232, align 8, !tbaa !19
  %533 = load ptr, ptr %233, align 8, !tbaa !19
  call void @readpairfoldalign(ptr noundef nonnull %529, ptr noundef %532, ptr noundef %533, ptr noundef %530, ptr noundef %531, i32 noundef %444, i32 noundef %486, ptr noundef nonnull %3, ptr noundef nonnull %4, i32 noundef %229) #35
  %534 = call ptr @strstr(ptr noundef nonnull dereferenceable(1) @foldalignopt, ptr noundef nonnull dereferenceable(1) @.str.76) #40
  %535 = icmp eq ptr %534, null
  %536 = load ptr, ptr @stderr, align 8, !tbaa !19
  br i1 %535, label %540, label %537

537:                                              ; preds = %528
  %538 = call i64 @fwrite(ptr nonnull @.str.77, i64 19, i64 1, ptr %536) #38
  %539 = call float @G__align11(ptr noundef nonnull %232, ptr noundef nonnull %233, i32 noundef %229) #35
  store i32 0, ptr %6, align 4, !tbaa !31
  store i32 0, ptr %7, align 4, !tbaa !31
  br label %543

540:                                              ; preds = %528
  %541 = call i64 @fwrite(ptr nonnull @.str.78, i64 19, i64 1, ptr %536) #38
  %542 = call float @L__align11(ptr noundef nonnull %232, ptr noundef nonnull %233, i32 noundef %229, ptr noundef nonnull %6, ptr noundef nonnull %7) #35
  br label %543

543:                                              ; preds = %540, %537
  %544 = phi float [ %539, %537 ], [ %542, %540 ]
  %545 = load i8, ptr %530, align 1, !tbaa !17
  %546 = icmp eq i8 %545, 0
  br i1 %546, label %547, label %551

547:                                              ; preds = %543
  %548 = load ptr, ptr @stderr, align 8, !tbaa !19
  %549 = add i32 %486, 1
  %550 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %548, ptr noundef nonnull @.str.79.306, i32 noundef %455, i32 noundef %549) #36
  br label %558

551:                                              ; preds = %543
  %552 = load ptr, ptr %232, align 8, !tbaa !19
  %553 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %552, ptr noundef nonnull dereferenceable(1) %530) #35
  %554 = load ptr, ptr %233, align 8, !tbaa !19
  %555 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %554, ptr noundef nonnull dereferenceable(1) %531) #35
  %556 = load i32, ptr %3, align 4, !tbaa !31
  store i32 %556, ptr %6, align 4, !tbaa !31
  %557 = load i32, ptr %4, align 4, !tbaa !31
  store i32 %557, ptr %7, align 4, !tbaa !31
  br label %558

558:                                              ; preds = %551, %547
  call void @free(ptr noundef nonnull %530) #35
  call void @free(ptr noundef %531) #35
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #34
  br label %671

559:                                              ; preds = %494, %494
  %560 = load ptr, ptr @recalllara.fp, align 8, !tbaa !19
  %561 = icmp eq ptr %560, null
  br i1 %561, label %564, label %562

562:                                              ; preds = %559
  %563 = load ptr, ptr @recalllara.ori2, align 8, !tbaa !19
  br label %576

564:                                              ; preds = %559
  %565 = call noalias ptr @fopen(ptr noundef nonnull @.str.80, ptr noundef nonnull @.str.11.274) #39
  store ptr %565, ptr @recalllara.fp, align 8, !tbaa !19
  %566 = icmp eq ptr %565, null
  br i1 %566, label %567, label %570

567:                                              ; preds = %564
  %568 = load ptr, ptr @stderr, align 8, !tbaa !19
  %569 = call i64 @fwrite(ptr nonnull @.str.81, i64 21, i64 1, ptr %568) #38
  call void @exit(i32 noundef 1) #37
  unreachable

570:                                              ; preds = %564
  %571 = call ptr @AllocateCharVec(i32 noundef %229) #35
  store ptr %571, ptr @recalllara.ungap1, align 8, !tbaa !19
  %572 = call ptr @AllocateCharVec(i32 noundef %229) #35
  store ptr %572, ptr @recalllara.ungap2, align 8, !tbaa !19
  %573 = call ptr @AllocateCharVec(i32 noundef %229) #35
  store ptr %573, ptr @recalllara.ori1, align 8, !tbaa !19
  %574 = call ptr @AllocateCharVec(i32 noundef %229) #35
  store ptr %574, ptr @recalllara.ori2, align 8, !tbaa !19
  %575 = load ptr, ptr @recalllara.fp, align 8, !tbaa !19
  br label %576

576:                                              ; preds = %570, %562
  %577 = phi ptr [ %560, %562 ], [ %575, %570 ]
  %578 = phi ptr [ %563, %562 ], [ %574, %570 ]
  %579 = load ptr, ptr @recalllara.ori1, align 8, !tbaa !19
  %580 = load ptr, ptr %232, align 8, !tbaa !19
  %581 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %579, ptr noundef nonnull dereferenceable(1) %580) #35
  %582 = load ptr, ptr %233, align 8, !tbaa !19
  %583 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %578, ptr noundef nonnull dereferenceable(1) %582) #35
  %584 = call ptr @fgets(ptr noundef nonnull @recalllara.com, i32 noundef 999, ptr noundef %577) #39
  %585 = load ptr, ptr @recalllara.fp, align 8, !tbaa !19
  %586 = call i32 @myfgets(ptr noundef nonnull @recalllara.com, i32 noundef 9999, ptr noundef %585) #35
  %587 = load ptr, ptr %232, align 8, !tbaa !19
  %588 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %587, ptr noundef nonnull dereferenceable(1) @recalllara.com) #35
  %589 = load ptr, ptr @recalllara.fp, align 8, !tbaa !19
  %590 = call i32 @myfgets(ptr noundef nonnull @recalllara.com, i32 noundef 9999, ptr noundef %589) #35
  %591 = load ptr, ptr %233, align 8, !tbaa !19
  %592 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %591, ptr noundef nonnull dereferenceable(1) @recalllara.com) #35
  %593 = load ptr, ptr @recalllara.ungap1, align 8, !tbaa !19
  %594 = load ptr, ptr %232, align 8, !tbaa !19
  call void @gappick0(ptr noundef %593, ptr noundef %594) #35
  %595 = load ptr, ptr @recalllara.ungap2, align 8, !tbaa !19
  %596 = load ptr, ptr %233, align 8, !tbaa !19
  call void @gappick0(ptr noundef %595, ptr noundef %596) #35
  %597 = load ptr, ptr @recalllara.ungap1, align 8, !tbaa !19
  call fastcc void @t2u(ptr noundef %597) #39
  %598 = load ptr, ptr @recalllara.ungap2, align 8, !tbaa !19
  call fastcc void @t2u(ptr noundef %598) #39
  %599 = load ptr, ptr @recalllara.ori1, align 8, !tbaa !19
  call fastcc void @t2u(ptr noundef %599) #39
  %600 = load ptr, ptr @recalllara.ori2, align 8, !tbaa !19
  call fastcc void @t2u(ptr noundef %600) #39
  %601 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %597, ptr noundef nonnull dereferenceable(1) %599) #40
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %603, label %606

603:                                              ; preds = %576
  %604 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %598, ptr noundef nonnull dereferenceable(1) %600) #40
  %605 = icmp eq i32 %604, 0
  br i1 %605, label %627, label %606

606:                                              ; preds = %603, %576
  %607 = load ptr, ptr @stderr, align 8, !tbaa !19
  %608 = call i64 @fwrite(ptr nonnull @.str.82, i64 19, i64 1, ptr %607) #38
  %609 = load ptr, ptr @stderr, align 8, !tbaa !19
  %610 = load ptr, ptr %232, align 8, !tbaa !19
  %611 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %609, ptr noundef nonnull @.str.83, ptr noundef %610) #36
  %612 = load ptr, ptr @stderr, align 8, !tbaa !19
  %613 = load ptr, ptr @recalllara.ungap1, align 8, !tbaa !19
  %614 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %612, ptr noundef nonnull @.str.84, ptr noundef %613) #36
  %615 = load ptr, ptr @stderr, align 8, !tbaa !19
  %616 = load ptr, ptr @recalllara.ori1, align 8, !tbaa !19
  %617 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %615, ptr noundef nonnull @.str.85, ptr noundef %616) #36
  %618 = load ptr, ptr @stderr, align 8, !tbaa !19
  %619 = load ptr, ptr %233, align 8, !tbaa !19
  %620 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %618, ptr noundef nonnull @.str.86.307, ptr noundef %619) #36
  %621 = load ptr, ptr @stderr, align 8, !tbaa !19
  %622 = load ptr, ptr @recalllara.ungap2, align 8, !tbaa !19
  %623 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %621, ptr noundef nonnull @.str.87.308, ptr noundef %622) #36
  %624 = load ptr, ptr @stderr, align 8, !tbaa !19
  %625 = load ptr, ptr @recalllara.ori2, align 8, !tbaa !19
  %626 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %624, ptr noundef nonnull @.str.88.309, ptr noundef %625) #36
  call void @exit(i32 noundef 1) #37
  unreachable

627:                                              ; preds = %603
  %628 = load ptr, ptr %232, align 8, !tbaa !19
  %629 = load ptr, ptr %233, align 8, !tbaa !19
  %630 = load i32, ptr @penalty, align 4, !tbaa !31
  %631 = call i32 @naivepairscore11(ptr noundef %628, ptr noundef %629, i32 noundef %630) #35
  %632 = sitofp i32 %631 to float
  store i32 0, ptr %7, align 4, !tbaa !31
  store i32 0, ptr %6, align 4, !tbaa !31
  br label %671

633:                                              ; preds = %494
  %.lcssa4 = phi i64 [ %440, %494 ]
  %.lcssa = phi i64 [ %457, %494 ]
  %634 = getelementptr inbounds ptr, ptr %421, i64 %.lcssa4
  %635 = load ptr, ptr %634, align 8, !tbaa !19
  %636 = getelementptr inbounds ptr, ptr %421, i64 %.lcssa
  %637 = load ptr, ptr %636, align 8, !tbaa !19
  %638 = call noalias ptr @fopen(ptr noundef nonnull @.str.89.310, ptr noundef nonnull @.str.58) #39
  %639 = icmp eq ptr %638, null
  br i1 %639, label %640, label %643

640:                                              ; preds = %633
  %641 = load ptr, ptr @stderr, align 8, !tbaa !19
  %642 = call i64 @fwrite(ptr nonnull @.str.90.311, i64 24, i64 1, ptr %641) #38
  call void @exit(i32 noundef 1) #37
  unreachable

643:                                              ; preds = %633
  %644 = call i64 @fwrite(ptr nonnull @.str.91.312, i64 3, i64 1, ptr nonnull %638)
  %645 = load ptr, ptr %635, align 8, !tbaa !19
  %646 = icmp eq ptr %645, null
  br i1 %646, label %654, label %647

647:                                              ; preds = %647, %643
  %648 = phi ptr [ %652, %647 ], [ %645, %643 ]
  %649 = phi ptr [ %650, %647 ], [ %635, %643 ]
  %650 = getelementptr inbounds ptr, ptr %649, i64 1
  %651 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %638, ptr noundef nonnull %648) #39
  %652 = load ptr, ptr %650, align 8, !tbaa !19
  %653 = icmp eq ptr %652, null
  br i1 %653, label %654, label %647, !llvm.loop !586

654:                                              ; preds = %647, %643
  %655 = call i64 @fwrite(ptr nonnull @.str.92, i64 3, i64 1, ptr nonnull %638)
  %656 = load ptr, ptr %637, align 8, !tbaa !19
  %657 = icmp eq ptr %656, null
  br i1 %657, label %665, label %658

658:                                              ; preds = %658, %654
  %659 = phi ptr [ %663, %658 ], [ %656, %654 ]
  %660 = phi ptr [ %661, %658 ], [ %637, %654 ]
  %661 = getelementptr inbounds ptr, ptr %660, i64 1
  %662 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %638, ptr noundef nonnull %659) #39
  %663 = load ptr, ptr %661, align 8, !tbaa !19
  %664 = icmp eq ptr %663, null
  br i1 %664, label %665, label %658, !llvm.loop !587

665:                                              ; preds = %658, %654
  %666 = call i32 @fclose(ptr noundef nonnull %638) #39
  %667 = load ptr, ptr @stderr, align 8, !tbaa !19
  %668 = call i64 @fwrite(ptr nonnull @.str.67.300, i64 29, i64 1, ptr %667) #38
  call void @abort() #37
  unreachable

669:                                              ; preds = %494
  %670 = call float @MSalign11(ptr noundef %232, ptr noundef %233, i32 noundef %229) #35
  br label %671

671:                                              ; preds = %669, %627, %558, %514, %512, %507, %505, %501, %497, %490
  %672 = phi float [ %500, %497 ], [ %504, %501 ], [ %506, %505 ], [ %510, %507 ], [ %513, %512 ], [ %517, %514 ], [ %544, %558 ], [ %632, %627 ], [ %670, %669 ], [ %493, %490 ]
  %673 = load i8, ptr @alg, align 1, !tbaa !17
  br label %674

674:                                              ; preds = %671, %494
  %675 = phi i8 [ %673, %671 ], [ %495, %494 ]
  %676 = phi float [ %672, %671 ], [ %458, %494 ]
  %677 = icmp eq i8 %675, 116
  br i1 %677, label %686, label %678

678:                                              ; preds = %674
  %679 = load ptr, ptr %232, align 8, !tbaa !19
  %680 = load i8, ptr %679, align 1, !tbaa !17
  %681 = icmp eq i8 %680, 0
  br i1 %681, label %717, label %682

682:                                              ; preds = %678
  %683 = load ptr, ptr %233, align 8, !tbaa !19
  %684 = load i8, ptr %683, align 1, !tbaa !17
  %685 = icmp eq i8 %684, 0
  br i1 %685, label %717, label %686

686:                                              ; preds = %682, %674
  %687 = fpext float %676 to double
  %688 = load ptr, ptr @pairalign.distancemtx, align 8, !tbaa !19
  %689 = getelementptr inbounds ptr, ptr %688, i64 %440
  %690 = load ptr, ptr %689, align 8, !tbaa !19
  %691 = getelementptr inbounds double, ptr %690, i64 %457
  store double %687, ptr %691, align 8, !tbaa !7
  %692 = load i8, ptr @alg, align 1
  %693 = icmp eq i8 %692, 116
  %694 = load i1, ptr @out_align_instead_of_hat3, align 4
  %695 = select i1 %693, i1 true, i1 %694
  br i1 %695, label %722, label %696

696:                                              ; preds = %686
  switch i8 %692, label %707 [
    i8 72, label %697
    i8 86, label %722
    i8 83, label %722
  ]

697:                                              ; preds = %696
  %698 = load ptr, ptr %232, align 8, !tbaa !19
  %699 = load ptr, ptr %233, align 8, !tbaa !19
  %700 = load ptr, ptr %453, align 8, !tbaa !19
  %701 = getelementptr inbounds %struct._LocalHom.3, ptr %700, i64 %457
  %702 = load i32, ptr %6, align 4, !tbaa !31
  %703 = load i32, ptr %7, align 4, !tbaa !31
  %704 = fptosi float %676 to i32
  %705 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %698) #40
  %706 = trunc i64 %705 to i32
  call void @putlocalhom_ext(ptr noundef %698, ptr noundef %699, ptr noundef nonnull %701, i32 noundef %702, i32 noundef %703, i32 noundef %704, i32 noundef %706) #35
  br label %722

707:                                              ; preds = %696
  %708 = load ptr, ptr %232, align 8, !tbaa !19
  %709 = load ptr, ptr %233, align 8, !tbaa !19
  %710 = load ptr, ptr %453, align 8, !tbaa !19
  %711 = getelementptr inbounds %struct._LocalHom.3, ptr %710, i64 %457
  %712 = load i32, ptr %6, align 4, !tbaa !31
  %713 = load i32, ptr %7, align 4, !tbaa !31
  %714 = fptosi float %676 to i32
  %715 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %708) #40
  %716 = trunc i64 %715 to i32
  call void @putlocalhom2(ptr noundef %708, ptr noundef %709, ptr noundef nonnull %711, i32 noundef %712, i32 noundef %713, i32 noundef %714, i32 noundef %716) #35
  br label %722

717:                                              ; preds = %682, %678
  %718 = load ptr, ptr @pairalign.distancemtx, align 8, !tbaa !19
  %719 = getelementptr inbounds ptr, ptr %718, i64 %440
  %720 = load ptr, ptr %719, align 8, !tbaa !19
  %721 = getelementptr inbounds double, ptr %720, i64 %457
  store double -9.999000e+03, ptr %721, align 8, !tbaa !7
  br label %722

722:                                              ; preds = %717, %707, %697, %696, %696, %686
  %723 = load i1, ptr @out_align_instead_of_hat3, align 4
  %724 = load i8, ptr @alg, align 1
  %725 = icmp ne i8 %724, 116
  %726 = select i1 %723, i1 %725, i1 false
  br i1 %726, label %727, label %743

727:                                              ; preds = %722
  %728 = load ptr, ptr @stdout, align 8, !tbaa !19
  %729 = fpext float %676 to double
  %730 = add i32 %486, 1
  %731 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %728, ptr noundef nonnull @.str.56, i32 noundef %455, i32 noundef %730, double noundef %729) #39
  %732 = load ptr, ptr @stdout, align 8, !tbaa !19
  %733 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %732, ptr noundef nonnull @.str.57, ptr noundef nonnull %454) #39
  %734 = load ptr, ptr @stdout, align 8, !tbaa !19
  %735 = load ptr, ptr %232, align 8, !tbaa !19
  call void @write1seq(ptr noundef %734, ptr noundef %735) #35
  %736 = load ptr, ptr @stdout, align 8, !tbaa !19
  %737 = getelementptr inbounds [256 x i8], ptr @main.name, i64 %457
  %738 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %736, ptr noundef nonnull @.str.57, ptr noundef nonnull %737) #39
  %739 = load ptr, ptr @stdout, align 8, !tbaa !19
  %740 = load ptr, ptr %233, align 8, !tbaa !19
  call void @write1seq(ptr noundef %739, ptr noundef %740) #35
  %741 = load ptr, ptr @stdout, align 8, !tbaa !19
  %742 = call i32 @fputc(i32 10, ptr %741)
  br label %743

743:                                              ; preds = %727, %722, %467
  %744 = phi float [ %458, %467 ], [ %676, %727 ], [ %676, %722 ]
  %745 = add nuw nsw i64 %457, 1
  %746 = load i32, ptr @njob, align 4, !tbaa !31
  %747 = trunc i64 %745 to i32
  %748 = icmp sgt i32 %746, %747
  br i1 %748, label %456, label %427, !llvm.loop !588

749:                                              ; preds = %767, %435
  %750 = phi i64 [ 0, %435 ], [ %773, %767 ]
  %751 = getelementptr inbounds ptr, ptr %230, i64 %750
  %752 = load ptr, ptr %751, align 8, !tbaa !19
  %753 = load i8, ptr %752, align 1, !tbaa !17
  %754 = icmp eq i8 %753, 0
  br i1 %754, label %767, label %755

755:                                              ; preds = %755, %749
  %756 = phi i8 [ %765, %755 ], [ %753, %749 ]
  %757 = phi ptr [ %764, %755 ], [ %752, %749 ]
  %758 = phi float [ %763, %755 ], [ 0.000000e+00, %749 ]
  %759 = sext i8 %756 to i64
  %760 = getelementptr inbounds [128 x [128 x i32]], ptr @amino_dis, i64 0, i64 %759, i64 %759
  %761 = load i32, ptr %760, align 4, !tbaa !31
  %762 = sitofp i32 %761 to float
  %763 = fadd float %758, %762
  %764 = getelementptr inbounds i8, ptr %757, i64 1
  %765 = load i8, ptr %764, align 1, !tbaa !17
  %766 = icmp eq i8 %765, 0
  br i1 %766, label %767, label %755, !llvm.loop !589

767:                                              ; preds = %755, %749
  %768 = phi float [ 0.000000e+00, %749 ], [ %763, %755 ]
  %769 = fpext float %768 to double
  %770 = getelementptr inbounds ptr, ptr %436, i64 %750
  %771 = load ptr, ptr %770, align 8, !tbaa !19
  %772 = getelementptr inbounds double, ptr %771, i64 %750
  store double %769, ptr %772, align 8, !tbaa !7
  %773 = add nuw nsw i64 %750, 1
  %774 = icmp eq i64 %773, %437
  br i1 %774, label %775, label %749, !llvm.loop !590

775:                                              ; preds = %767
  %776 = icmp sgt i32 %433, 1
  br i1 %776, label %777, label %816

777:                                              ; preds = %775
  %778 = add nsw i32 %433, -1
  %779 = zext i32 %778 to i64
  br label %783

780:                                              ; preds = %812, %783
  %781 = add nuw nsw i64 %785, 1
  %782 = icmp eq i64 %786, %779
  br i1 %782, label %816, label %783, !llvm.loop !591

783:                                              ; preds = %780, %777
  %784 = phi i64 [ 0, %777 ], [ %786, %780 ]
  %785 = phi i64 [ 1, %777 ], [ %781, %780 ]
  %786 = add nuw nsw i64 %784, 1
  %787 = icmp ult i64 %786, %437
  br i1 %787, label %788, label %780

788:                                              ; preds = %783
  %789 = getelementptr inbounds ptr, ptr %436, i64 %784
  %790 = load ptr, ptr %789, align 8, !tbaa !19
  %791 = getelementptr inbounds double, ptr %790, i64 %784
  br label %792

792:                                              ; preds = %812, %788
  %793 = phi i64 [ %785, %788 ], [ %814, %812 ]
  %794 = getelementptr inbounds double, ptr %790, i64 %793
  %795 = load double, ptr %794, align 8, !tbaa !7
  %796 = fcmp oeq double %795, -9.999000e+03
  br i1 %796, label %812, label %797

797:                                              ; preds = %792
  %798 = load double, ptr %791, align 8, !tbaa !7
  %799 = getelementptr inbounds ptr, ptr %436, i64 %793
  %800 = load ptr, ptr %799, align 8, !tbaa !19
  %801 = getelementptr inbounds double, ptr %800, i64 %793
  %802 = load double, ptr %801, align 8, !tbaa !7
  %803 = fcmp olt double %798, %802
  %804 = select i1 %803, double %798, double %802
  %805 = fcmp oeq double %804, 0.000000e+00
  %806 = fcmp olt double %804, %795
  %807 = or i1 %805, %806
  br i1 %807, label %812, label %808

808:                                              ; preds = %797
  %809 = fdiv double %795, %804
  %810 = fsub double 1.000000e+00, %809
  %811 = fmul double %810, 2.000000e+00
  br label %812

812:                                              ; preds = %808, %797, %792
  %813 = phi double [ %811, %808 ], [ 2.000000e+00, %797 ], [ 2.000000e+00, %792 ]
  store double %813, ptr %794, align 8, !tbaa !7
  %814 = add nuw nsw i64 %793, 1
  %815 = icmp eq i64 %814, %437
  br i1 %815, label %780, label %792, !llvm.loop !592

816:                                              ; preds = %780, %775, %432
  %817 = call noalias ptr @fopen(ptr noundef nonnull @.str.47, ptr noundef nonnull @.str.58) #39
  %818 = icmp eq ptr %817, null
  br i1 %818, label %819, label %820

819:                                              ; preds = %816
  call void @ErrorExit(ptr noundef nonnull @.str.59) #35
  br label %820

820:                                              ; preds = %819, %816
  %821 = load i1, ptr @out_align_instead_of_hat3, align 4
  %822 = load i32, ptr @njob, align 4, !tbaa !31
  %823 = load ptr, ptr @pairalign.distancemtx, align 8, !tbaa !19
  br i1 %821, label %825, label %824

824:                                              ; preds = %820
  call void @WriteHat2(ptr noundef %817, i32 noundef %822, ptr noundef nonnull @main.name, ptr noundef %823) #35
  br label %826

825:                                              ; preds = %820
  call void @WriteHat2plain(ptr noundef %817, i32 noundef %822, ptr noundef %823) #35
  br label %826

826:                                              ; preds = %825, %824
  %827 = call i32 @fclose(ptr noundef %817) #39
  %828 = load i1, ptr @out_align_instead_of_hat3, align 4
  br i1 %828, label %829, label %831

829:                                              ; preds = %826
  %830 = load i32, ptr @njob, align 4, !tbaa !31
  br label %885

831:                                              ; preds = %826
  %832 = load ptr, ptr @stderr, align 8, !tbaa !19
  %833 = call i64 @fwrite(ptr nonnull @.str.60, i64 19, i64 1, ptr %832) #38
  %834 = load i32, ptr @njob, align 4, !tbaa !31
  %835 = icmp sgt i32 %834, 1
  br i1 %835, label %836, label %885

836:                                              ; preds = %831
  %837 = add nsw i32 %834, -1
  %838 = zext i32 %837 to i64
  br label %843

839:                                              ; preds = %880, %843
  %840 = phi i32 [ %844, %843 ], [ %882, %880 ]
  %841 = add nuw nsw i64 %846, 1
  %842 = icmp eq i64 %847, %838
  br i1 %842, label %885, label %843, !llvm.loop !593

843:                                              ; preds = %839, %836
  %844 = phi i32 [ %834, %836 ], [ %840, %839 ]
  %845 = phi i64 [ 0, %836 ], [ %847, %839 ]
  %846 = phi i64 [ 1, %836 ], [ %841, %839 ]
  %847 = add nuw nsw i64 %845, 1
  %848 = sext i32 %844 to i64
  %849 = icmp slt i64 %847, %848
  br i1 %849, label %850, label %839

850:                                              ; preds = %843
  %851 = getelementptr inbounds ptr, ptr %235, i64 %845
  %852 = trunc i64 %845 to i32
  br label %853

853:                                              ; preds = %880, %850
  %854 = phi i64 [ %846, %850 ], [ %881, %880 ]
  %855 = load ptr, ptr %851, align 8, !tbaa !19
  %856 = getelementptr inbounds %struct._LocalHom.3, ptr %855, i64 %854
  %857 = trunc i64 %854 to i32
  br label %858

858:                                              ; preds = %876, %853
  %859 = phi ptr [ %856, %853 ], [ %878, %876 ]
  %860 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 7
  %861 = load double, ptr %860, align 8, !tbaa !378
  %862 = fcmp oeq double %861, -1.000000e+00
  br i1 %862, label %876, label %863

863:                                              ; preds = %858
  %864 = load ptr, ptr @stdout, align 8, !tbaa !19
  %865 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 8
  %866 = load i32, ptr %865, align 8, !tbaa !377
  %867 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 3
  %868 = load i32, ptr %867, align 8, !tbaa !373
  %869 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 4
  %870 = load i32, ptr %869, align 4, !tbaa !375
  %871 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 5
  %872 = load i32, ptr %871, align 8, !tbaa !374
  %873 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 6
  %874 = load i32, ptr %873, align 4, !tbaa !376
  %875 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %864, ptr noundef nonnull @.str.61, i32 noundef %852, i32 noundef %857, i32 noundef %866, double noundef %861, i32 noundef %868, i32 noundef %870, i32 noundef %872, i32 noundef %874) #39
  br label %876

876:                                              ; preds = %863, %858
  %877 = getelementptr inbounds %struct._LocalHom.3, ptr %859, i64 0, i32 1
  %878 = load ptr, ptr %877, align 8, !tbaa !371
  %879 = icmp eq ptr %878, null
  br i1 %879, label %880, label %858, !llvm.loop !594

880:                                              ; preds = %876
  %881 = add nuw nsw i64 %854, 1
  %882 = load i32, ptr @njob, align 4, !tbaa !31
  %883 = trunc i64 %881 to i32
  %884 = icmp sgt i32 %882, %883
  br i1 %884, label %853, label %839, !llvm.loop !595

885:                                              ; preds = %839, %831, %829
  %886 = phi i32 [ %830, %829 ], [ %834, %831 ], [ %840, %839 ]
  call void @FreeLocalHomTable(ptr noundef %235, i32 noundef %886) #35
  %887 = load i8, ptr @alg, align 1, !tbaa !17
  %888 = icmp eq i8 %887, 115
  br i1 %888, label %889, label %913

889:                                              ; preds = %885
  %890 = load i32, ptr @njob, align 4, !tbaa !31
  %891 = icmp sgt i32 %890, 0
  br i1 %891, label %892, label %912

892:                                              ; preds = %906, %889
  %893 = phi i64 [ %908, %906 ], [ 0, %889 ]
  %894 = getelementptr inbounds ptr, ptr %421, i64 %893
  %895 = load ptr, ptr %894, align 8, !tbaa !19
  %896 = load ptr, ptr %895, align 8, !tbaa !19
  %897 = icmp eq ptr %896, null
  br i1 %897, label %906, label %898

898:                                              ; preds = %898, %892
  %899 = phi ptr [ %902, %898 ], [ %896, %892 ]
  %900 = phi ptr [ %901, %898 ], [ %895, %892 ]
  call void @free(ptr noundef nonnull %899) #35
  %901 = getelementptr inbounds ptr, ptr %900, i64 1
  %902 = load ptr, ptr %901, align 8, !tbaa !19
  %903 = icmp eq ptr %902, null
  br i1 %903, label %904, label %898

904:                                              ; preds = %898
  %905 = load ptr, ptr %894, align 8, !tbaa !19
  br label %906

906:                                              ; preds = %904, %892
  %907 = phi ptr [ %905, %904 ], [ %895, %892 ]
  call void @free(ptr noundef %907) #35
  %908 = add nuw nsw i64 %893, 1
  %909 = load i32, ptr @njob, align 4, !tbaa !31
  %910 = sext i32 %909 to i64
  %911 = icmp slt i64 %908, %910
  br i1 %911, label %892, label %912, !llvm.loop !596

912:                                              ; preds = %906, %889
  call void @free(ptr noundef %421) #35
  br label %913

913:                                              ; preds = %912, %885
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #34
  %914 = load ptr, ptr @trap_g, align 8, !tbaa !19
  %915 = call i64 @fwrite(ptr nonnull @.str.17.304, i64 6, i64 1, ptr %914)
  %916 = load ptr, ptr @trap_g, align 8, !tbaa !19
  %917 = call i32 @fclose(ptr noundef %916) #39
  %918 = load ptr, ptr @stdout, align 8, !tbaa !19
  %919 = load i32, ptr @dorp, align 4, !tbaa !31
  %920 = icmp eq i32 %919, 100
  %921 = select i1 %920, ptr @.str.20.313, ptr @.str.21.314
  %922 = load i8, ptr @alg, align 1, !tbaa !17
  %923 = sext i8 %922 to i32
  %924 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %918, ptr noundef nonnull @.str.18.315, ptr noundef nonnull @.str.19.316, ptr noundef nonnull %921, i32 noundef %923, ptr noundef nonnull @modelname) #39
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @t2u(ptr nocapture noundef %0) unnamed_addr #17 {
  br label %2

2:                                                ; preds = %14, %1
  %3 = phi ptr [ %0, %1 ], [ %16, %14 ]
  %4 = load i8, ptr %3, align 1, !tbaa !17
  switch i8 %4, label %13 [
    i8 0, label %17
    i8 65, label %14
    i8 97, label %14
    i8 84, label %5
    i8 116, label %6
    i8 85, label %7
    i8 117, label %8
    i8 71, label %9
    i8 103, label %10
    i8 67, label %11
    i8 99, label %12
  ]

5:                                                ; preds = %2
  br label %14

6:                                                ; preds = %2
  br label %14

7:                                                ; preds = %2
  br label %14

8:                                                ; preds = %2
  br label %14

9:                                                ; preds = %2
  br label %14

10:                                               ; preds = %2
  br label %14

11:                                               ; preds = %2
  br label %14

12:                                               ; preds = %2
  br label %14

13:                                               ; preds = %2
  br label %14

14:                                               ; preds = %13, %12, %11, %10, %9, %8, %7, %6, %5, %2, %2
  %15 = phi i8 [ 117, %6 ], [ %4, %8 ], [ %4, %10 ], [ %4, %12 ], [ 110, %13 ], [ 99, %11 ], [ 103, %9 ], [ 117, %7 ], [ 117, %5 ], [ 97, %2 ], [ 97, %2 ]
  store i8 %15, ptr %3, align 1, !tbaa !17
  %16 = getelementptr inbounds i8, ptr %3, i64 1
  br label %2, !llvm.loop !597

17:                                               ; preds = %2
  ret void
}

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #6

; Function Attrs: noreturn nounwind optsize uwtable
define internal fastcc void @calllara(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) unnamed_addr #23 {
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %5, label %15

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %8, %5 ], [ 0, %3 ]
  %7 = tail call noalias ptr @fopen(ptr noundef nonnull @.str.68, ptr noundef nonnull @.str.58) #39
  %8 = add nuw nsw i32 %6, 1
  %9 = icmp eq i32 %8, %0
  br i1 %9, label %10, label %5, !llvm.loop !598

10:                                               ; preds = %5
  %.lcssa = phi ptr [ %7, %5 ]
  %11 = icmp eq ptr %.lcssa, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  br i1 %4, label %13, label %27

13:                                               ; preds = %12
  %14 = zext i32 %0 to i64
  br label %18

15:                                               ; preds = %10, %3
  %16 = load ptr, ptr @stderr, align 8, !tbaa !19
  %17 = tail call i64 @fwrite(ptr nonnull @.str.69.317, i64 20, i64 1, ptr %16) #38
  tail call void @exit(i32 noundef 1) #37
  unreachable

18:                                               ; preds = %18, %13
  %19 = phi i64 [ 0, %13 ], [ %20, %18 ]
  %20 = add nuw nsw i64 %19, 1
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %.lcssa, ptr noundef nonnull @.str.64, i32 noundef %21) #39
  %23 = getelementptr inbounds ptr, ptr %1, i64 %19
  %24 = load ptr, ptr %23, align 8, !tbaa !19
  %25 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %.lcssa, ptr noundef nonnull @.str.65, ptr noundef %24) #39
  %26 = icmp eq i64 %20, %14
  br i1 %26, label %27, label %18, !llvm.loop !599

27:                                               ; preds = %18, %12
  %28 = tail call i32 @fclose(ptr noundef nonnull %.lcssa) #39
  %29 = load ptr, ptr @whereispairalign, align 8, !tbaa !19
  %30 = tail call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) @calllara.com, ptr noundef nonnull dereferenceable(1) @.str.70.318, ptr noundef %29, ptr noundef %2) #35
  %31 = load ptr, ptr @stderr, align 8, !tbaa !19
  %32 = tail call i64 @fwrite(ptr nonnull @.str.67.300, i64 29, i64 1, ptr %31) #38
  tail call void @abort() #37
  unreachable
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strstr(ptr noundef, ptr nocapture noundef) local_unnamed_addr #13

; Function Attrs: nounwind optsize uwtable
define internal float @Q__align(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef readnone %7, ptr nocapture noundef %8, ptr noundef %9, ptr noundef %10, ptr noundef %11, ptr noundef %12) #4 {
  %14 = load i32, ptr @penalty, align 4, !tbaa !31
  %15 = sitofp i32 %14 to float
  %16 = load i32, ptr @Q__align.orlgth1, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %13
  %19 = load i32, ptr @njob, align 4, !tbaa !31
  %20 = tail call ptr @AllocateCharMtx(i32 noundef %19, i32 noundef 0) #35
  store ptr %20, ptr @Q__align.mseq1, align 8, !tbaa !19
  %21 = load i32, ptr @njob, align 4, !tbaa !31
  %22 = tail call ptr @AllocateCharMtx(i32 noundef %21, i32 noundef 0) #35
  store ptr %22, ptr @Q__align.mseq2, align 8, !tbaa !19
  %23 = load i32, ptr @Q__align.orlgth1, align 4
  br label %24

24:                                               ; preds = %18, %13
  %25 = phi i32 [ %23, %18 ], [ %16, %13 ]
  %26 = load ptr, ptr %0, align 8, !tbaa !19
  %27 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %26) #40
  %28 = trunc i64 %27 to i32
  %29 = load ptr, ptr %1, align 8, !tbaa !19
  %30 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %29) #40
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %25, %28
  %33 = load i32, ptr @Q__align.orlgth2, align 4
  %34 = icmp slt i32 %33, %31
  %35 = select i1 %32, i1 true, i1 %34
  br i1 %35, label %36, label %130

36:                                               ; preds = %24
  %37 = icmp sgt i32 %25, 0
  %38 = icmp sgt i32 %33, 0
  %39 = select i1 %37, i1 %38, i1 false
  br i1 %39, label %40, label %77

40:                                               ; preds = %36
  %41 = load ptr, ptr @Q__align.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @Q__align.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @Q__align.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @Q__align.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %45) #35
  %46 = load ptr, ptr @Q__align.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %46) #35
  %47 = load ptr, ptr @Q__align.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %47) #35
  %48 = load ptr, ptr @Q__align.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %48) #35
  %49 = load ptr, ptr @Q__align.digf1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %49) #35
  %50 = load ptr, ptr @Q__align.digf2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %50) #35
  %51 = load ptr, ptr @Q__align.diaf1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %51) #35
  %52 = load ptr, ptr @Q__align.diaf2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %52) #35
  %53 = load ptr, ptr @Q__align.gapz1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %53) #35
  %54 = load ptr, ptr @Q__align.gapz2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %54) #35
  %55 = load ptr, ptr @Q__align.gapf1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %55) #35
  %56 = load ptr, ptr @Q__align.gapf2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %56) #35
  %57 = load ptr, ptr @Q__align.ogcp1g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %57) #35
  %58 = load ptr, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %58) #35
  %59 = load ptr, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %59) #35
  %60 = load ptr, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %60) #35
  %61 = load ptr, ptr @Q__align.og_h_dg_n1_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %61) #35
  %62 = load ptr, ptr @Q__align.og_h_dg_n2_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %62) #35
  %63 = load ptr, ptr @Q__align.fg_h_dg_n1_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %63) #35
  %64 = load ptr, ptr @Q__align.fg_h_dg_n2_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %64) #35
  %65 = load ptr, ptr @Q__align.og_t_fg_h_dg_n1_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %65) #35
  %66 = load ptr, ptr @Q__align.og_t_fg_h_dg_n2_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %66) #35
  %67 = load ptr, ptr @Q__align.fg_t_og_h_dg_n1_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %67) #35
  %68 = load ptr, ptr @Q__align.fg_t_og_h_dg_n2_p, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %68) #35
  %69 = load ptr, ptr @Q__align.gapz_n1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %69) #35
  %70 = load ptr, ptr @Q__align.gapz_n2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %70) #35
  %71 = load ptr, ptr @Q__align.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %71) #35
  %72 = load ptr, ptr @Q__align.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %72) #35
  %73 = load ptr, ptr @Q__align.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %73) #35
  %74 = load ptr, ptr @Q__align.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %74) #35
  %75 = load i32, ptr @Q__align.orlgth1, align 4, !tbaa !31
  %76 = load i32, ptr @Q__align.orlgth2, align 4, !tbaa !31
  br label %77

77:                                               ; preds = %40, %36
  %78 = phi i32 [ %76, %40 ], [ %33, %36 ]
  %79 = phi i32 [ %75, %40 ], [ %25, %36 ]
  %80 = sitofp i32 %28 to double
  %81 = fmul double %80, 1.300000e+00
  %82 = fptosi double %81 to i32
  %83 = tail call i32 @llvm.smax.i32(i32 %79, i32 %82)
  %84 = add nuw nsw i32 %83, 100
  %85 = sitofp i32 %31 to double
  %86 = fmul double %85, 1.300000e+00
  %87 = fptosi double %86 to i32
  %88 = tail call i32 @llvm.smax.i32(i32 %78, i32 %87)
  %89 = add nuw nsw i32 %88, 100
  %90 = add nuw nsw i32 %88, 102
  %91 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %91, ptr @Q__align.w1, align 8, !tbaa !19
  %92 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %92, ptr @Q__align.w2, align 8, !tbaa !19
  %93 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %93, ptr @Q__align.match, align 8, !tbaa !19
  %94 = add nuw nsw i32 %83, 102
  %95 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %95, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %96 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %96, ptr @Q__align.lastverticalw, align 8, !tbaa !19
  %97 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %97, ptr @Q__align.m, align 8, !tbaa !19
  %98 = tail call ptr @AllocateIntVec(i32 noundef %90) #35
  store ptr %98, ptr @Q__align.mp, align 8, !tbaa !19
  %99 = load i32, ptr @njob, align 4, !tbaa !31
  %100 = add nsw i32 %89, %84
  %101 = tail call ptr @AllocateCharMtx(i32 noundef %99, i32 noundef %100) #35
  store ptr %101, ptr @Q__align.mseq, align 8, !tbaa !19
  %102 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %102, ptr @Q__align.digf1, align 8, !tbaa !19
  %103 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %103, ptr @Q__align.digf2, align 8, !tbaa !19
  %104 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %104, ptr @Q__align.diaf1, align 8, !tbaa !19
  %105 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %105, ptr @Q__align.diaf2, align 8, !tbaa !19
  %106 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %106, ptr @Q__align.gapz1, align 8, !tbaa !19
  %107 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %107, ptr @Q__align.gapz2, align 8, !tbaa !19
  %108 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %108, ptr @Q__align.gapf1, align 8, !tbaa !19
  %109 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %109, ptr @Q__align.gapf2, align 8, !tbaa !19
  %110 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %110, ptr @Q__align.ogcp1g, align 8, !tbaa !19
  %111 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %111, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  %112 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %112, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  %113 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %113, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  %114 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %114, ptr @Q__align.og_h_dg_n1_p, align 8, !tbaa !19
  %115 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %115, ptr @Q__align.og_h_dg_n2_p, align 8, !tbaa !19
  %116 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %116, ptr @Q__align.fg_h_dg_n1_p, align 8, !tbaa !19
  %117 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %117, ptr @Q__align.fg_h_dg_n2_p, align 8, !tbaa !19
  %118 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %118, ptr @Q__align.og_t_fg_h_dg_n1_p, align 8, !tbaa !19
  %119 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %119, ptr @Q__align.og_t_fg_h_dg_n2_p, align 8, !tbaa !19
  %120 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %120, ptr @Q__align.fg_t_og_h_dg_n1_p, align 8, !tbaa !19
  %121 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %121, ptr @Q__align.fg_t_og_h_dg_n2_p, align 8, !tbaa !19
  %122 = tail call ptr @AllocateFloatVec(i32 noundef %94) #35
  store ptr %122, ptr @Q__align.gapz_n1, align 8, !tbaa !19
  %123 = tail call ptr @AllocateFloatVec(i32 noundef %90) #35
  store ptr %123, ptr @Q__align.gapz_n2, align 8, !tbaa !19
  %124 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %94) #35
  store ptr %124, ptr @Q__align.cpmx1, align 8, !tbaa !19
  %125 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %90) #35
  store ptr %125, ptr @Q__align.cpmx2, align 8, !tbaa !19
  %126 = tail call i32 @llvm.smax.i32(i32 %84, i32 %89)
  %127 = add nuw nsw i32 %126, 2
  %128 = tail call ptr @AllocateFloatMtx(i32 noundef %127, i32 noundef 26) #35
  store ptr %128, ptr @Q__align.floatwork, align 8, !tbaa !19
  %129 = tail call ptr @AllocateIntMtx(i32 noundef %127, i32 noundef 27) #35
  store ptr %129, ptr @Q__align.intwork, align 8, !tbaa !19
  store i32 %83, ptr @Q__align.orlgth1, align 4, !tbaa !31
  store i32 %88, ptr @Q__align.orlgth2, align 4, !tbaa !31
  br label %130

130:                                              ; preds = %77, %24
  %131 = phi i32 [ %33, %24 ], [ %88, %77 ]
  %132 = phi i32 [ %25, %24 ], [ %83, %77 ]
  %133 = icmp sgt i32 %4, 0
  br i1 %133, label %134, label %140

134:                                              ; preds = %130
  %135 = load ptr, ptr @Q__align.mseq, align 8, !tbaa !19
  %136 = load ptr, ptr @Q__align.mseq1, align 8, !tbaa !19
  %137 = shl i64 %27, 32
  %138 = ashr exact i64 %137, 32
  %139 = zext i32 %4 to i64
  br label %149

140:                                              ; preds = %149, %130
  %141 = icmp sgt i32 %5, 0
  br i1 %141, label %142, label %170

142:                                              ; preds = %140
  %143 = load ptr, ptr @Q__align.mseq, align 8, !tbaa !19
  %144 = load ptr, ptr @Q__align.mseq2, align 8, !tbaa !19
  %145 = shl i64 %30, 32
  %146 = ashr exact i64 %145, 32
  %147 = sext i32 %4 to i64
  %148 = zext i32 %5 to i64
  br label %159

149:                                              ; preds = %149, %134
  %150 = phi i64 [ 0, %134 ], [ %157, %149 ]
  %151 = getelementptr inbounds ptr, ptr %135, i64 %150
  %152 = load ptr, ptr %151, align 8, !tbaa !19
  %153 = getelementptr inbounds ptr, ptr %136, i64 %150
  store ptr %152, ptr %153, align 8, !tbaa !19
  %154 = getelementptr inbounds ptr, ptr %0, i64 %150
  %155 = load ptr, ptr %154, align 8, !tbaa !19
  %156 = getelementptr inbounds i8, ptr %155, i64 %138
  store i8 0, ptr %156, align 1, !tbaa !17
  %157 = add nuw nsw i64 %150, 1
  %158 = icmp eq i64 %157, %139
  br i1 %158, label %140, label %149, !llvm.loop !600

159:                                              ; preds = %159, %142
  %160 = phi i64 [ 0, %142 ], [ %168, %159 ]
  %161 = add nsw i64 %160, %147
  %162 = getelementptr inbounds ptr, ptr %143, i64 %161
  %163 = load ptr, ptr %162, align 8, !tbaa !19
  %164 = getelementptr inbounds ptr, ptr %144, i64 %160
  store ptr %163, ptr %164, align 8, !tbaa !19
  %165 = getelementptr inbounds ptr, ptr %1, i64 %160
  %166 = load ptr, ptr %165, align 8, !tbaa !19
  %167 = getelementptr inbounds i8, ptr %166, i64 %146
  store i8 0, ptr %167, align 1, !tbaa !17
  %168 = add nuw nsw i64 %160, 1
  %169 = icmp eq i64 %168, %148
  br i1 %169, label %170, label %159, !llvm.loop !601

170:                                              ; preds = %159, %140
  %171 = load i32, ptr @commonAlloc1, align 4
  %172 = icmp sgt i32 %132, %171
  %173 = load i32, ptr @commonAlloc2, align 4
  %174 = icmp sgt i32 %131, %173
  %175 = select i1 %172, i1 true, i1 %174
  br i1 %175, label %178, label %176

176:                                              ; preds = %170
  %177 = load ptr, ptr @commonIP, align 8, !tbaa !19
  br label %198

178:                                              ; preds = %170
  %179 = icmp ne i32 %171, 0
  %180 = icmp ne i32 %173, 0
  %181 = select i1 %179, i1 %180, i1 false
  br i1 %181, label %182, label %188

182:                                              ; preds = %178
  %183 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %183) #35
  %184 = load i32, ptr @Q__align.orlgth1, align 4
  %185 = load i32, ptr @commonAlloc1, align 4
  %186 = load i32, ptr @Q__align.orlgth2, align 4
  %187 = load i32, ptr @commonAlloc2, align 4
  br label %188

188:                                              ; preds = %182, %178
  %189 = phi i32 [ %187, %182 ], [ %173, %178 ]
  %190 = phi i32 [ %186, %182 ], [ %131, %178 ]
  %191 = phi i32 [ %185, %182 ], [ %171, %178 ]
  %192 = phi i32 [ %184, %182 ], [ %132, %178 ]
  %193 = tail call i32 @llvm.smax.i32(i32 %192, i32 %191)
  %194 = tail call i32 @llvm.smax.i32(i32 %190, i32 %189)
  %195 = add nsw i32 %193, 10
  %196 = add nsw i32 %194, 10
  %197 = tail call ptr @AllocateIntMtx(i32 noundef %195, i32 noundef %196) #35
  store ptr %197, ptr @commonIP, align 8, !tbaa !19
  store i32 %193, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %194, ptr @commonAlloc2, align 4, !tbaa !31
  br label %198

198:                                              ; preds = %188, %176
  %199 = phi ptr [ %177, %176 ], [ %197, %188 ]
  store ptr %199, ptr @Q__align.ijp, align 8, !tbaa !19
  %200 = load ptr, ptr @Q__align.cpmx1, align 8, !tbaa !19
  tail call void @cpmx_calc_new(ptr noundef nonnull %0, ptr noundef %200, ptr noundef %2, i32 noundef %28, i32 noundef %4) #35
  %201 = load ptr, ptr @Q__align.cpmx2, align 8, !tbaa !19
  tail call void @cpmx_calc_new(ptr noundef nonnull %1, ptr noundef %201, ptr noundef %3, i32 noundef %31, i32 noundef %5) #35
  %202 = icmp eq ptr %9, null
  %203 = load ptr, ptr @Q__align.ogcp1g, align 8, !tbaa !19
  br i1 %202, label %216, label %204

204:                                              ; preds = %198
  tail call void @new_OpeningGapCount_zure(ptr noundef %203, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %205 = load ptr, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  tail call void @new_OpeningGapCount_zure(ptr noundef %205, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10, ptr noundef %12) #35
  %206 = load ptr, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  tail call void @new_FinalGapCount_zure(ptr noundef %206, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %207 = load ptr, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  tail call void @new_FinalGapCount_zure(ptr noundef %207, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10, ptr noundef %12) #35
  %208 = load ptr, ptr @Q__align.digf1, align 8, !tbaa !19
  tail call void @getdigapfreq_part(ptr noundef %208, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %209 = load ptr, ptr @Q__align.digf2, align 8, !tbaa !19
  tail call void @getdigapfreq_part(ptr noundef %209, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10, ptr noundef %12) #35
  %210 = load ptr, ptr @Q__align.diaf1, align 8, !tbaa !19
  tail call void @getdiaminofreq_part(ptr noundef %210, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9, ptr noundef %11) #35
  %211 = load ptr, ptr @Q__align.diaf2, align 8, !tbaa !19
  tail call void @getdiaminofreq_part(ptr noundef %211, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10, ptr noundef %12) #35
  %212 = load ptr, ptr @Q__align.gapf1, align 8, !tbaa !19
  tail call void @getgapfreq(ptr noundef %212, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %213 = load ptr, ptr @Q__align.gapf2, align 8, !tbaa !19
  tail call void @getgapfreq(ptr noundef %213, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %214 = load ptr, ptr @Q__align.gapz1, align 8, !tbaa !19
  tail call void @getgapfreq_zure_part(ptr noundef %214, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9) #35
  %215 = load ptr, ptr @Q__align.gapz2, align 8, !tbaa !19
  tail call void @getgapfreq_zure_part(ptr noundef %215, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef nonnull %9) #35
  br label %228

216:                                              ; preds = %198
  tail call void @st_OpeningGapCount(ptr noundef %203, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %217 = load ptr, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  tail call void @st_OpeningGapCount(ptr noundef %217, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %218 = load ptr, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  tail call void @st_FinalGapCount_zure(ptr noundef %218, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %219 = load ptr, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  tail call void @st_FinalGapCount_zure(ptr noundef %219, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %220 = load ptr, ptr @Q__align.digf1, align 8, !tbaa !19
  tail call void @getdigapfreq_st(ptr noundef %220, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %221 = load ptr, ptr @Q__align.digf2, align 8, !tbaa !19
  tail call void @getdigapfreq_st(ptr noundef %221, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %222 = load ptr, ptr @Q__align.diaf1, align 8, !tbaa !19
  tail call void @getdiaminofreq_x(ptr noundef %222, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %223 = load ptr, ptr @Q__align.diaf2, align 8, !tbaa !19
  tail call void @getdiaminofreq_x(ptr noundef %223, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %224 = load ptr, ptr @Q__align.gapf1, align 8, !tbaa !19
  tail call void @getgapfreq(ptr noundef %224, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %225 = load ptr, ptr @Q__align.gapf2, align 8, !tbaa !19
  tail call void @getgapfreq(ptr noundef %225, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %226 = load ptr, ptr @Q__align.gapz1, align 8, !tbaa !19
  tail call void @getgapfreq_zure(ptr noundef %226, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %227 = load ptr, ptr @Q__align.gapz2, align 8, !tbaa !19
  tail call void @getgapfreq_zure(ptr noundef %227, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  br label %228

228:                                              ; preds = %216, %204
  %229 = icmp sgt i32 %31, -2
  br i1 %229, label %230, label %300

230:                                              ; preds = %228
  %231 = load ptr, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  %232 = load ptr, ptr @Q__align.digf2, align 8, !tbaa !19
  %233 = fpext float %15 to double
  %234 = load ptr, ptr @Q__align.og_h_dg_n2_p, align 8, !tbaa !19
  %235 = load ptr, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  %236 = load ptr, ptr @Q__align.fg_h_dg_n2_p, align 8, !tbaa !19
  %237 = load ptr, ptr @Q__align.og_t_fg_h_dg_n2_p, align 8, !tbaa !19
  %238 = load ptr, ptr @Q__align.fg_t_og_h_dg_n2_p, align 8, !tbaa !19
  %239 = load ptr, ptr @Q__align.gapz2, align 8, !tbaa !19
  %240 = load ptr, ptr @Q__align.gapz_n2, align 8, !tbaa !19
  %241 = add i64 %30, 2
  %242 = and i64 %241, 4294967295
  br label %243

243:                                              ; preds = %243, %230
  %244 = phi i64 [ 0, %230 ], [ %298, %243 ]
  %245 = getelementptr inbounds float, ptr %231, i64 %244
  %246 = load float, ptr %245, align 4, !tbaa !167
  %247 = fpext float %246 to double
  %248 = fsub double 1.000000e+00, %247
  %249 = getelementptr inbounds float, ptr %232, i64 %244
  %250 = load float, ptr %249, align 4, !tbaa !167
  %251 = fpext float %250 to double
  %252 = fsub double %248, %251
  %253 = fmul double %252, %233
  %254 = fmul double %253, 5.000000e-01
  %255 = fptrunc double %254 to float
  %256 = getelementptr inbounds float, ptr %234, i64 %244
  store float %255, ptr %256, align 4, !tbaa !167
  %257 = getelementptr inbounds float, ptr %235, i64 %244
  %258 = load float, ptr %257, align 4, !tbaa !167
  %259 = fpext float %258 to double
  %260 = fsub double 1.000000e+00, %259
  %261 = load float, ptr %249, align 4, !tbaa !167
  %262 = fpext float %261 to double
  %263 = fsub double %260, %262
  %264 = fmul double %263, %233
  %265 = fmul double %264, 5.000000e-01
  %266 = fptrunc double %265 to float
  %267 = getelementptr inbounds float, ptr %236, i64 %244
  store float %266, ptr %267, align 4, !tbaa !167
  %268 = load float, ptr %245, align 4, !tbaa !167
  %269 = fpext float %268 to double
  %270 = fsub double 1.000000e+00, %269
  %271 = load float, ptr %257, align 4, !tbaa !167
  %272 = fpext float %271 to double
  %273 = fadd double %270, %272
  %274 = load float, ptr %249, align 4, !tbaa !167
  %275 = fpext float %274 to double
  %276 = fsub double %273, %275
  %277 = fmul double %276, 5.000000e-01
  %278 = fmul double %277, %233
  %279 = fptrunc double %278 to float
  %280 = getelementptr inbounds float, ptr %237, i64 %244
  store float %279, ptr %280, align 4, !tbaa !167
  %281 = load float, ptr %257, align 4, !tbaa !167
  %282 = fpext float %281 to double
  %283 = fsub double 1.000000e+00, %282
  %284 = load float, ptr %245, align 4, !tbaa !167
  %285 = fpext float %284 to double
  %286 = fadd double %283, %285
  %287 = load float, ptr %249, align 4, !tbaa !167
  %288 = fpext float %287 to double
  %289 = fsub double %286, %288
  %290 = fmul double %289, 5.000000e-01
  %291 = fmul double %290, %233
  %292 = fptrunc double %291 to float
  %293 = getelementptr inbounds float, ptr %238, i64 %244
  store float %292, ptr %293, align 4, !tbaa !167
  %294 = getelementptr inbounds float, ptr %239, i64 %244
  %295 = load float, ptr %294, align 4, !tbaa !167
  %296 = fsub float 1.000000e+00, %295
  %297 = getelementptr inbounds float, ptr %240, i64 %244
  store float %296, ptr %297, align 4, !tbaa !167
  %298 = add nuw nsw i64 %244, 1
  %299 = icmp eq i64 %298, %242
  br i1 %299, label %300, label %243, !llvm.loop !602

300:                                              ; preds = %243, %228
  %301 = icmp sgt i32 %28, -2
  br i1 %301, label %302, label %372

302:                                              ; preds = %300
  %303 = load ptr, ptr @Q__align.ogcp1g, align 8, !tbaa !19
  %304 = load ptr, ptr @Q__align.digf1, align 8, !tbaa !19
  %305 = fpext float %15 to double
  %306 = load ptr, ptr @Q__align.og_h_dg_n1_p, align 8, !tbaa !19
  %307 = load ptr, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  %308 = load ptr, ptr @Q__align.fg_h_dg_n1_p, align 8, !tbaa !19
  %309 = load ptr, ptr @Q__align.og_t_fg_h_dg_n1_p, align 8, !tbaa !19
  %310 = load ptr, ptr @Q__align.fg_t_og_h_dg_n1_p, align 8, !tbaa !19
  %311 = load ptr, ptr @Q__align.gapz1, align 8, !tbaa !19
  %312 = load ptr, ptr @Q__align.gapz_n1, align 8, !tbaa !19
  %313 = add i64 %27, 2
  %314 = and i64 %313, 4294967295
  br label %315

315:                                              ; preds = %315, %302
  %316 = phi i64 [ 0, %302 ], [ %370, %315 ]
  %317 = getelementptr inbounds float, ptr %303, i64 %316
  %318 = load float, ptr %317, align 4, !tbaa !167
  %319 = fpext float %318 to double
  %320 = fsub double 1.000000e+00, %319
  %321 = getelementptr inbounds float, ptr %304, i64 %316
  %322 = load float, ptr %321, align 4, !tbaa !167
  %323 = fpext float %322 to double
  %324 = fsub double %320, %323
  %325 = fmul double %324, %305
  %326 = fmul double %325, 5.000000e-01
  %327 = fptrunc double %326 to float
  %328 = getelementptr inbounds float, ptr %306, i64 %316
  store float %327, ptr %328, align 4, !tbaa !167
  %329 = getelementptr inbounds float, ptr %307, i64 %316
  %330 = load float, ptr %329, align 4, !tbaa !167
  %331 = fpext float %330 to double
  %332 = fsub double 1.000000e+00, %331
  %333 = load float, ptr %321, align 4, !tbaa !167
  %334 = fpext float %333 to double
  %335 = fsub double %332, %334
  %336 = fmul double %335, %305
  %337 = fmul double %336, 5.000000e-01
  %338 = fptrunc double %337 to float
  %339 = getelementptr inbounds float, ptr %308, i64 %316
  store float %338, ptr %339, align 4, !tbaa !167
  %340 = load float, ptr %317, align 4, !tbaa !167
  %341 = fpext float %340 to double
  %342 = fsub double 1.000000e+00, %341
  %343 = load float, ptr %329, align 4, !tbaa !167
  %344 = fpext float %343 to double
  %345 = fadd double %342, %344
  %346 = load float, ptr %321, align 4, !tbaa !167
  %347 = fpext float %346 to double
  %348 = fsub double %345, %347
  %349 = fmul double %348, 5.000000e-01
  %350 = fmul double %349, %305
  %351 = fptrunc double %350 to float
  %352 = getelementptr inbounds float, ptr %309, i64 %316
  store float %351, ptr %352, align 4, !tbaa !167
  %353 = load float, ptr %329, align 4, !tbaa !167
  %354 = fpext float %353 to double
  %355 = fsub double 1.000000e+00, %354
  %356 = load float, ptr %317, align 4, !tbaa !167
  %357 = fpext float %356 to double
  %358 = fadd double %355, %357
  %359 = load float, ptr %321, align 4, !tbaa !167
  %360 = fpext float %359 to double
  %361 = fsub double %358, %360
  %362 = fmul double %361, 5.000000e-01
  %363 = fmul double %362, %305
  %364 = fptrunc double %363 to float
  %365 = getelementptr inbounds float, ptr %310, i64 %316
  store float %364, ptr %365, align 4, !tbaa !167
  %366 = getelementptr inbounds float, ptr %311, i64 %316
  %367 = load float, ptr %366, align 4, !tbaa !167
  %368 = fsub float 1.000000e+00, %367
  %369 = getelementptr inbounds float, ptr %312, i64 %316
  store float %368, ptr %369, align 4, !tbaa !167
  %370 = add nuw nsw i64 %316, 1
  %371 = icmp eq i64 %370, %314
  br i1 %371, label %372, label %315, !llvm.loop !603

372:                                              ; preds = %315, %300
  %373 = load ptr, ptr @Q__align.w1, align 8, !tbaa !19
  %374 = load ptr, ptr @Q__align.w2, align 8, !tbaa !19
  %375 = load i8, ptr @RNAscoremtx, align 1, !tbaa !17
  %376 = icmp eq i8 %375, 114
  br i1 %376, label %383, label %377

377:                                              ; preds = %372
  %378 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %379 = load ptr, ptr @Q__align.cpmx2, align 8, !tbaa !19
  %380 = load ptr, ptr @Q__align.cpmx1, align 8, !tbaa !19
  %381 = load ptr, ptr @Q__align.floatwork, align 8, !tbaa !19
  %382 = load ptr, ptr @Q__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.321(ptr noundef %378, ptr noundef %379, ptr noundef %380, i32 noundef 0, i32 noundef %28, ptr noundef %381, ptr noundef %382, i32 noundef 1) #39
  br label %389

383:                                              ; preds = %372
  %384 = icmp eq i32 %28, 0
  br i1 %384, label %391, label %385

385:                                              ; preds = %383
  %386 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %387 = shl i64 %27, 2
  %388 = and i64 %387, 17179869180
  tail call void @llvm.memset.p0.i64(ptr align 4 %386, i8 0, i64 %388, i1 false), !tbaa !167
  br label %389

389:                                              ; preds = %385, %377
  %390 = icmp eq ptr %7, null
  br i1 %390, label %410, label %393

391:                                              ; preds = %383
  %392 = icmp eq ptr %7, null
  br label %410

393:                                              ; preds = %389
  %394 = icmp sgt i32 %28, 0
  br i1 %394, label %395, label %410

395:                                              ; preds = %393
  %396 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %397 = load ptr, ptr @impmtx.322, align 8, !tbaa !19
  %398 = and i64 %27, 4294967295
  br label %399

399:                                              ; preds = %399, %395
  %400 = phi i64 [ 0, %395 ], [ %408, %399 ]
  %401 = phi ptr [ %396, %395 ], [ %405, %399 ]
  %402 = getelementptr inbounds ptr, ptr %397, i64 %400
  %403 = load ptr, ptr %402, align 8, !tbaa !19
  %404 = load float, ptr %403, align 4, !tbaa !167
  %405 = getelementptr inbounds float, ptr %401, i64 1
  %406 = load float, ptr %401, align 4, !tbaa !167
  %407 = fadd float %404, %406
  store float %407, ptr %401, align 4, !tbaa !167
  %408 = add nuw nsw i64 %400, 1
  %409 = icmp eq i64 %408, %398
  br i1 %409, label %410, label %399, !llvm.loop !604

410:                                              ; preds = %399, %393, %391, %389
  %411 = phi i1 [ true, %389 ], [ false, %393 ], [ %392, %391 ], [ false, %399 ]
  %412 = load i8, ptr @RNAscoremtx, align 1, !tbaa !17
  %413 = icmp eq i8 %412, 114
  br i1 %413, label %419, label %414

414:                                              ; preds = %410
  %415 = load ptr, ptr @Q__align.cpmx1, align 8, !tbaa !19
  %416 = load ptr, ptr @Q__align.cpmx2, align 8, !tbaa !19
  %417 = load ptr, ptr @Q__align.floatwork, align 8, !tbaa !19
  %418 = load ptr, ptr @Q__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.321(ptr noundef %373, ptr noundef %415, ptr noundef %416, i32 noundef 0, i32 noundef %31, ptr noundef %417, ptr noundef %418, i32 noundef 1) #39
  br label %424

419:                                              ; preds = %410
  %420 = icmp eq i32 %31, 0
  br i1 %420, label %444, label %421

421:                                              ; preds = %419
  %422 = shl i64 %30, 2
  %423 = and i64 %422, 17179869180
  tail call void @llvm.memset.p0.i64(ptr align 4 %373, i8 0, i64 %423, i1 false), !tbaa !167
  br label %424

424:                                              ; preds = %421, %414
  %425 = icmp eq i32 %31, 0
  %426 = select i1 %411, i1 true, i1 %425
  br i1 %426, label %441, label %427

427:                                              ; preds = %424
  %428 = load ptr, ptr @impmtx.322, align 8, !tbaa !19
  %429 = load ptr, ptr %428, align 8, !tbaa !19
  br label %430

430:                                              ; preds = %430, %427
  %431 = phi ptr [ %435, %430 ], [ %429, %427 ]
  %432 = phi i32 [ %434, %430 ], [ %31, %427 ]
  %433 = phi ptr [ %437, %430 ], [ %373, %427 ]
  %434 = add nsw i32 %432, -1
  %435 = getelementptr inbounds float, ptr %431, i64 1
  %436 = load float, ptr %431, align 4, !tbaa !167
  %437 = getelementptr inbounds float, ptr %433, i64 1
  %438 = load float, ptr %433, align 4, !tbaa !167
  %439 = fadd float %436, %438
  store float %439, ptr %433, align 4, !tbaa !167
  %440 = icmp eq i32 %434, 0
  br i1 %440, label %441, label %430, !llvm.loop !605

441:                                              ; preds = %430, %424
  %442 = load i32, ptr @outgap, align 4, !tbaa !31
  %443 = icmp eq i32 %442, 1
  br i1 %443, label %453, label %447

444:                                              ; preds = %419
  %445 = load i32, ptr @outgap, align 4, !tbaa !31
  %446 = icmp eq i32 %445, 1
  br i1 %446, label %453, label %528

447:                                              ; preds = %441
  %448 = icmp slt i32 %31, 1
  br i1 %448, label %528, label %449

449:                                              ; preds = %447
  %450 = load i32, ptr @offset, align 4, !tbaa !31
  %451 = add i64 %30, 1
  %452 = and i64 %451, 4294967295
  br label %535

453:                                              ; preds = %444, %441
  %454 = load ptr, ptr @Q__align.ogcp1g, align 8, !tbaa !19
  %455 = load float, ptr %454, align 4, !tbaa !167
  %456 = load ptr, ptr @Q__align.og_h_dg_n2_p, align 8, !tbaa !19
  %457 = load float, ptr %456, align 4, !tbaa !167
  %458 = tail call float @llvm.fmuladd.f32(float %455, float %457, float 0.000000e+00)
  %459 = load ptr, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  %460 = load float, ptr %459, align 4, !tbaa !167
  %461 = load ptr, ptr @Q__align.og_h_dg_n1_p, align 8, !tbaa !19
  %462 = load float, ptr %461, align 4, !tbaa !167
  %463 = tail call float @llvm.fmuladd.f32(float %460, float %462, float %458)
  %464 = load ptr, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  %465 = load float, ptr %464, align 4, !tbaa !167
  %466 = load ptr, ptr @Q__align.fg_h_dg_n2_p, align 8, !tbaa !19
  %467 = load float, ptr %466, align 4, !tbaa !167
  %468 = tail call float @llvm.fmuladd.f32(float %465, float %467, float %463)
  %469 = load ptr, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  %470 = load float, ptr %469, align 4, !tbaa !167
  %471 = load ptr, ptr @Q__align.fg_h_dg_n1_p, align 8, !tbaa !19
  %472 = load float, ptr %471, align 4, !tbaa !167
  %473 = tail call float @llvm.fmuladd.f32(float %470, float %472, float %468)
  %474 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %475 = load float, ptr %474, align 4, !tbaa !167
  %476 = fadd float %473, %475
  store float %476, ptr %474, align 4, !tbaa !167
  %477 = load float, ptr %373, align 4, !tbaa !167
  %478 = fadd float %473, %477
  store float %478, ptr %373, align 4, !tbaa !167
  %479 = icmp slt i32 %28, 1
  br i1 %479, label %487, label %480

480:                                              ; preds = %453
  %481 = load ptr, ptr @Q__align.gapz_n2, align 8, !tbaa !19
  %482 = load ptr, ptr @Q__align.og_t_fg_h_dg_n1_p, align 8, !tbaa !19
  %483 = getelementptr inbounds float, ptr %481, i64 1
  %484 = load ptr, ptr @Q__align.fg_t_og_h_dg_n1_p, align 8, !tbaa !19
  %485 = add i64 %27, 1
  %486 = and i64 %485, 4294967295
  br label %498

487:                                              ; preds = %498, %453
  %488 = icmp slt i32 %31, 1
  br i1 %488, label %489, label %491

489:                                              ; preds = %487
  %490 = load ptr, ptr @Q__align.m, align 8, !tbaa !19
  store float 0.000000e+00, ptr %490, align 4, !tbaa !167
  br label %578

491:                                              ; preds = %487
  %492 = load ptr, ptr @Q__align.gapz_n1, align 8, !tbaa !19
  %493 = load ptr, ptr @Q__align.og_t_fg_h_dg_n2_p, align 8, !tbaa !19
  %494 = getelementptr inbounds float, ptr %492, i64 1
  %495 = load ptr, ptr @Q__align.fg_t_og_h_dg_n2_p, align 8, !tbaa !19
  %496 = add i64 %30, 1
  %497 = and i64 %496, 4294967295
  br label %513

498:                                              ; preds = %498, %480
  %499 = phi i64 [ 1, %480 ], [ %511, %498 ]
  %500 = load float, ptr %481, align 4, !tbaa !167
  %501 = load float, ptr %482, align 4, !tbaa !167
  %502 = fmul float %500, %501
  %503 = getelementptr inbounds float, ptr %474, i64 %499
  %504 = load float, ptr %503, align 4, !tbaa !167
  %505 = fadd float %504, %502
  store float %505, ptr %503, align 4, !tbaa !167
  %506 = load float, ptr %483, align 4, !tbaa !167
  %507 = getelementptr inbounds float, ptr %484, i64 %499
  %508 = load float, ptr %507, align 4, !tbaa !167
  %509 = fmul float %506, %508
  %510 = fadd float %505, %509
  store float %510, ptr %503, align 4, !tbaa !167
  %511 = add nuw nsw i64 %499, 1
  %512 = icmp eq i64 %511, %486
  br i1 %512, label %487, label %498, !llvm.loop !606

513:                                              ; preds = %513, %491
  %514 = phi i64 [ 1, %491 ], [ %526, %513 ]
  %515 = load float, ptr %492, align 4, !tbaa !167
  %516 = load float, ptr %493, align 4, !tbaa !167
  %517 = fmul float %515, %516
  %518 = getelementptr inbounds float, ptr %373, i64 %514
  %519 = load float, ptr %518, align 4, !tbaa !167
  %520 = fadd float %519, %517
  store float %520, ptr %518, align 4, !tbaa !167
  %521 = load float, ptr %494, align 4, !tbaa !167
  %522 = getelementptr inbounds float, ptr %495, i64 %514
  %523 = load float, ptr %522, align 4, !tbaa !167
  %524 = fmul float %521, %523
  %525 = fadd float %520, %524
  store float %525, ptr %518, align 4, !tbaa !167
  %526 = add nuw nsw i64 %514, 1
  %527 = icmp eq i64 %526, %497
  br i1 %527, label %561, label %513, !llvm.loop !607

528:                                              ; preds = %535, %447, %444
  %529 = icmp slt i32 %28, 1
  br i1 %529, label %561, label %530

530:                                              ; preds = %528
  %531 = load i32, ptr @offset, align 4, !tbaa !31
  %532 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %533 = add i64 %27, 1
  %534 = and i64 %533, 4294967295
  br label %548

535:                                              ; preds = %535, %449
  %536 = phi i64 [ 1, %449 ], [ %546, %535 ]
  %537 = trunc i64 %536 to i32
  %538 = mul nsw i32 %450, %537
  %539 = sitofp i32 %538 to double
  %540 = fmul double %539, 5.000000e-01
  %541 = getelementptr inbounds float, ptr %373, i64 %536
  %542 = load float, ptr %541, align 4, !tbaa !167
  %543 = fpext float %542 to double
  %544 = fsub double %543, %540
  %545 = fptrunc double %544 to float
  store float %545, ptr %541, align 4, !tbaa !167
  %546 = add nuw nsw i64 %536, 1
  %547 = icmp eq i64 %546, %452
  br i1 %547, label %528, label %535, !llvm.loop !608

548:                                              ; preds = %548, %530
  %549 = phi i64 [ 1, %530 ], [ %559, %548 ]
  %550 = trunc i64 %549 to i32
  %551 = mul nsw i32 %531, %550
  %552 = sitofp i32 %551 to double
  %553 = fmul double %552, 5.000000e-01
  %554 = getelementptr inbounds float, ptr %532, i64 %549
  %555 = load float, ptr %554, align 4, !tbaa !167
  %556 = fpext float %555 to double
  %557 = fsub double %556, %553
  %558 = fptrunc double %557 to float
  store float %558, ptr %554, align 4, !tbaa !167
  %559 = add nuw nsw i64 %549, 1
  %560 = icmp eq i64 %559, %534
  br i1 %560, label %561, label %548, !llvm.loop !609

561:                                              ; preds = %548, %528, %513
  %562 = load ptr, ptr @Q__align.m, align 8, !tbaa !19
  store float 0.000000e+00, ptr %562, align 4, !tbaa !167
  %563 = icmp slt i32 %31, 1
  br i1 %563, label %578, label %564

564:                                              ; preds = %561
  %565 = load ptr, ptr @Q__align.mp, align 8, !tbaa !19
  %566 = add i64 %30, 1
  %567 = and i64 %566, 4294967295
  br label %568

568:                                              ; preds = %568, %564
  %569 = phi i64 [ 1, %564 ], [ %576, %568 ]
  %570 = getelementptr inbounds i32, ptr %565, i64 %569
  store i32 0, ptr %570, align 4, !tbaa !31
  %571 = add nsw i64 %569, -1
  %572 = getelementptr inbounds float, ptr %373, i64 %571
  %573 = load float, ptr %572, align 4, !tbaa !167
  %574 = tail call float @llvm.fmuladd.f32(float %15, float 1.000000e+04, float %573)
  %575 = getelementptr inbounds float, ptr %562, i64 %569
  store float %574, ptr %575, align 4, !tbaa !167
  %576 = add nuw nsw i64 %569, 1
  %577 = icmp eq i64 %576, %567
  br i1 %577, label %578, label %568, !llvm.loop !610

578:                                              ; preds = %568, %561, %489
  %579 = phi i1 [ true, %489 ], [ true, %561 ], [ %563, %568 ]
  %580 = icmp eq i32 %31, 0
  br i1 %580, label %581, label %583

581:                                              ; preds = %578
  %582 = load ptr, ptr @Q__align.lastverticalw, align 8, !tbaa !19
  store float 0.000000e+00, ptr %582, align 4, !tbaa !167
  br label %590

583:                                              ; preds = %578
  %584 = shl i64 %30, 32
  %585 = add i64 %584, -4294967296
  %586 = ashr exact i64 %585, 32
  %587 = getelementptr inbounds float, ptr %373, i64 %586
  %588 = load float, ptr %587, align 4, !tbaa !167
  %589 = load ptr, ptr @Q__align.lastverticalw, align 8, !tbaa !19
  store float %588, ptr %589, align 4, !tbaa !167
  br label %590

590:                                              ; preds = %583, %581
  %591 = phi ptr [ %589, %583 ], [ %582, %581 ]
  %592 = load i32, ptr @outgap, align 4, !tbaa !31
  %593 = icmp ne i32 %592, 0
  %594 = zext i1 %593 to i32
  %595 = add nsw i32 %594, %28
  %596 = icmp sgt i32 %595, 1
  br i1 %596, label %597, label %773

597:                                              ; preds = %590
  %598 = or i1 %580, %411
  %599 = shl i64 %30, 2
  %600 = and i64 %599, 17179869180
  %601 = shl i64 %30, 32
  %602 = add i64 %601, -4294967296
  %603 = ashr exact i64 %602, 32
  %604 = zext i32 %595 to i64
  %605 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  br label %606

606:                                              ; preds = %764, %597
  %607 = phi ptr [ %605, %597 ], [ %641, %764 ]
  %608 = phi i64 [ 1, %597 ], [ %659, %764 ]
  %609 = phi float [ 0.000000e+00, %597 ], [ %765, %764 ]
  %610 = phi ptr [ %373, %597 ], [ %611, %764 ]
  %611 = phi ptr [ %374, %597 ], [ %610, %764 ]
  %612 = add nsw i64 %608, -1
  %613 = getelementptr inbounds float, ptr %607, i64 %612
  %614 = load float, ptr %613, align 4, !tbaa !167
  store float %614, ptr %610, align 4, !tbaa !167
  %615 = load i8, ptr @RNAscoremtx, align 1, !tbaa !17
  %616 = icmp eq i8 %615, 114
  br i1 %616, label %617, label %618

617:                                              ; preds = %606
  br i1 %580, label %640, label %624

618:                                              ; preds = %606
  %619 = load ptr, ptr @Q__align.cpmx1, align 8, !tbaa !19
  %620 = load ptr, ptr @Q__align.cpmx2, align 8, !tbaa !19
  %621 = load ptr, ptr @Q__align.floatwork, align 8, !tbaa !19
  %622 = load ptr, ptr @Q__align.intwork, align 8, !tbaa !19
  %623 = trunc i64 %608 to i32
  tail call fastcc void @match_calc.321(ptr noundef %611, ptr noundef %619, ptr noundef %620, i32 noundef %623, i32 noundef %31, ptr noundef %621, ptr noundef %622, i32 noundef 0) #39
  br i1 %598, label %640, label %625

624:                                              ; preds = %617
  tail call void @llvm.memset.p0.i64(ptr align 4 %611, i8 0, i64 %600, i1 false), !tbaa !167
  br i1 %411, label %640, label %625

625:                                              ; preds = %624, %618
  %626 = load ptr, ptr @impmtx.322, align 8, !tbaa !19
  %627 = getelementptr inbounds ptr, ptr %626, i64 %608
  %628 = load ptr, ptr %627, align 8, !tbaa !19
  br label %629

629:                                              ; preds = %629, %625
  %630 = phi ptr [ %634, %629 ], [ %628, %625 ]
  %631 = phi i32 [ %633, %629 ], [ %31, %625 ]
  %632 = phi ptr [ %636, %629 ], [ %611, %625 ]
  %633 = add nsw i32 %631, -1
  %634 = getelementptr inbounds float, ptr %630, i64 1
  %635 = load float, ptr %630, align 4, !tbaa !167
  %636 = getelementptr inbounds float, ptr %632, i64 1
  %637 = load float, ptr %632, align 4, !tbaa !167
  %638 = fadd float %635, %637
  store float %638, ptr %632, align 4, !tbaa !167
  %639 = icmp eq i32 %633, 0
  br i1 %639, label %640, label %629, !llvm.loop !605

640:                                              ; preds = %629, %624, %618, %617
  %641 = load ptr, ptr @Q__align.initverticalw, align 8, !tbaa !19
  %642 = getelementptr inbounds float, ptr %641, i64 %608
  %643 = load float, ptr %642, align 4, !tbaa !167
  store float %643, ptr %611, align 4, !tbaa !167
  %644 = load ptr, ptr @Q__align.fg_t_og_h_dg_n1_p, align 8, !tbaa !19
  %645 = getelementptr inbounds float, ptr %644, i64 %608
  %646 = load float, ptr %645, align 4, !tbaa !167
  %647 = load ptr, ptr @Q__align.og_t_fg_h_dg_n1_p, align 8, !tbaa !19
  %648 = getelementptr inbounds float, ptr %647, i64 %608
  %649 = load float, ptr %648, align 4, !tbaa !167
  %650 = load ptr, ptr @Q__align.og_h_dg_n1_p, align 8, !tbaa !19
  %651 = getelementptr inbounds float, ptr %650, i64 %608
  %652 = load float, ptr %651, align 4, !tbaa !167
  %653 = load ptr, ptr @Q__align.fg_h_dg_n1_p, align 8, !tbaa !19
  %654 = getelementptr inbounds float, ptr %653, i64 %608
  %655 = load float, ptr %654, align 4, !tbaa !167
  %656 = load ptr, ptr @Q__align.gapz_n1, align 8, !tbaa !19
  %657 = getelementptr inbounds float, ptr %656, i64 %608
  %658 = load float, ptr %657, align 4, !tbaa !167
  %659 = add nuw nsw i64 %608, 1
  %660 = getelementptr inbounds float, ptr %656, i64 %659
  %661 = load float, ptr %660, align 4, !tbaa !167
  %662 = load ptr, ptr @Q__align.fgcp1g, align 8, !tbaa !19
  %663 = getelementptr inbounds float, ptr %662, i64 %608
  %664 = load float, ptr %663, align 4, !tbaa !167
  %665 = load ptr, ptr @Q__align.ogcp1g, align 8, !tbaa !19
  %666 = getelementptr inbounds float, ptr %665, i64 %608
  %667 = load float, ptr %666, align 4, !tbaa !167
  br i1 %579, label %764, label %668

668:                                              ; preds = %640
  %669 = load float, ptr %610, align 4, !tbaa !167
  %670 = tail call float @llvm.fmuladd.f32(float %15, float 1.000000e+04, float %669)
  %671 = load ptr, ptr @Q__align.ogcp2g, align 8, !tbaa !19
  %672 = load ptr, ptr @Q__align.fgcp2g, align 8, !tbaa !19
  %673 = load ptr, ptr @Q__align.gapz_n2, align 8, !tbaa !19
  %674 = getelementptr inbounds float, ptr %673, i64 2
  %675 = load ptr, ptr @Q__align.fg_h_dg_n2_p, align 8, !tbaa !19
  %676 = load ptr, ptr @Q__align.og_h_dg_n2_p, align 8, !tbaa !19
  %677 = load ptr, ptr @Q__align.og_t_fg_h_dg_n2_p, align 8, !tbaa !19
  %678 = load ptr, ptr @Q__align.fg_t_og_h_dg_n2_p, align 8, !tbaa !19
  %679 = load ptr, ptr @Q__align.mp, align 8, !tbaa !19
  %680 = load ptr, ptr @Q__align.m, align 8, !tbaa !19
  %681 = load ptr, ptr @Q__align.ijp, align 8, !tbaa !19
  %682 = getelementptr inbounds ptr, ptr %681, i64 %608
  %683 = load ptr, ptr %682, align 8, !tbaa !19
  %684 = trunc i64 %608 to i32
  %685 = trunc i64 %612 to i32
  br label %686

686:                                              ; preds = %757, %668
  %687 = phi ptr [ %713, %757 ], [ %611, %668 ]
  %688 = phi ptr [ %712, %757 ], [ %683, %668 ]
  %689 = phi ptr [ %711, %757 ], [ %680, %668 ]
  %690 = phi ptr [ %710, %757 ], [ %679, %668 ]
  %691 = phi ptr [ %709, %757 ], [ %678, %668 ]
  %692 = phi ptr [ %708, %757 ], [ %677, %668 ]
  %693 = phi ptr [ %707, %757 ], [ %676, %668 ]
  %694 = phi ptr [ %706, %757 ], [ %675, %668 ]
  %695 = phi ptr [ %705, %757 ], [ %673, %668 ]
  %696 = phi ptr [ %704, %757 ], [ %672, %668 ]
  %697 = phi ptr [ %703, %757 ], [ %671, %668 ]
  %698 = phi i32 [ %762, %757 ], [ 1, %668 ]
  %699 = phi ptr [ %760, %757 ], [ %610, %668 ]
  %700 = phi ptr [ %761, %757 ], [ %674, %668 ]
  %701 = phi float [ %741, %757 ], [ %670, %668 ]
  %702 = phi i32 [ %740, %757 ], [ 0, %668 ]
  %703 = getelementptr inbounds float, ptr %697, i64 1
  %704 = getelementptr inbounds float, ptr %696, i64 1
  %705 = getelementptr inbounds float, ptr %695, i64 1
  %706 = getelementptr inbounds float, ptr %694, i64 1
  %707 = getelementptr inbounds float, ptr %693, i64 1
  %708 = getelementptr inbounds float, ptr %692, i64 1
  %709 = getelementptr inbounds float, ptr %691, i64 1
  %710 = getelementptr inbounds i32, ptr %690, i64 1
  %711 = getelementptr inbounds float, ptr %689, i64 1
  %712 = getelementptr inbounds i32, ptr %688, i64 1
  %713 = getelementptr inbounds float, ptr %687, i64 1
  %714 = load float, ptr %699, align 4, !tbaa !167
  %715 = load float, ptr %707, align 4, !tbaa !167
  %716 = fmul float %667, %715
  %717 = fadd float %714, %716
  %718 = load float, ptr %703, align 4, !tbaa !167
  %719 = fmul float %652, %718
  %720 = fadd float %717, %719
  %721 = load float, ptr %706, align 4, !tbaa !167
  %722 = fmul float %664, %721
  %723 = fadd float %720, %722
  %724 = load float, ptr %704, align 4, !tbaa !167
  %725 = fmul float %655, %724
  %726 = fadd float %723, %725
  store i32 0, ptr %712, align 4, !tbaa !31
  %727 = load float, ptr %709, align 4, !tbaa !167
  %728 = fmul float %661, %727
  %729 = fadd float %701, %728
  %730 = fcmp ogt float %729, %726
  br i1 %730, label %731, label %733

731:                                              ; preds = %686
  %732 = sub i32 %702, %698
  store i32 %732, ptr %712, align 4, !tbaa !31
  br label %733

733:                                              ; preds = %731, %686
  %734 = phi float [ %729, %731 ], [ %726, %686 ]
  %735 = load float, ptr %708, align 4, !tbaa !167
  %736 = fmul float %658, %735
  %737 = fadd float %714, %736
  %738 = fcmp ult float %737, %701
  %739 = add nsw i32 %698, -1
  %740 = select i1 %738, i32 %702, i32 %739
  %741 = select i1 %738, float %701, float %737
  %742 = load float, ptr %700, align 4, !tbaa !167
  %743 = fmul float %646, %742
  %744 = load float, ptr %711, align 4, !tbaa !167
  %745 = fadd float %744, %743
  %746 = fcmp ogt float %745, %734
  br i1 %746, label %747, label %750

747:                                              ; preds = %733
  %748 = load i32, ptr %710, align 4, !tbaa !31
  %749 = sub nsw i32 %684, %748
  store i32 %749, ptr %712, align 4, !tbaa !31
  br label %750

750:                                              ; preds = %747, %733
  %751 = phi float [ %745, %747 ], [ %734, %733 ]
  %752 = load float, ptr %705, align 4, !tbaa !167
  %753 = fmul float %649, %752
  %754 = fadd float %714, %753
  %755 = fcmp ult float %754, %744
  br i1 %755, label %757, label %756

756:                                              ; preds = %750
  store float %754, ptr %711, align 4, !tbaa !167
  store i32 %685, ptr %710, align 4, !tbaa !31
  br label %757

757:                                              ; preds = %756, %750
  %758 = load float, ptr %713, align 4, !tbaa !167
  %759 = fadd float %751, %758
  store float %759, ptr %713, align 4, !tbaa !167
  %760 = getelementptr inbounds float, ptr %699, i64 1
  %761 = getelementptr inbounds float, ptr %700, i64 1
  %762 = add nuw i32 %698, 1
  %763 = icmp eq i32 %698, %31
  br i1 %763, label %764, label %686, !llvm.loop !611

764:                                              ; preds = %757, %640
  %765 = phi float [ %609, %640 ], [ %751, %757 ]
  %766 = getelementptr inbounds float, ptr %611, i64 %603
  %767 = load float, ptr %766, align 4, !tbaa !167
  %768 = load ptr, ptr @Q__align.lastverticalw, align 8, !tbaa !19
  %769 = getelementptr inbounds float, ptr %768, i64 %608
  store float %767, ptr %769, align 4, !tbaa !167
  %770 = icmp eq i64 %659, %604
  br i1 %770, label %771, label %606, !llvm.loop !612

771:                                              ; preds = %764
  %.lcssa4 = phi float [ %765, %764 ]
  %.lcssa3 = phi ptr [ %768, %764 ]
  %.lcssa2 = phi ptr [ %611, %764 ]
  %772 = load i32, ptr @outgap, align 4, !tbaa !31
  br label %773

773:                                              ; preds = %771, %590
  %774 = phi ptr [ %591, %590 ], [ %.lcssa3, %771 ]
  %775 = phi i32 [ %592, %590 ], [ %772, %771 ]
  %776 = phi ptr [ %373, %590 ], [ %.lcssa2, %771 ]
  %777 = phi float [ 0.000000e+00, %590 ], [ %.lcssa4, %771 ]
  %778 = icmp eq i32 %775, 0
  br i1 %778, label %779, label %820

779:                                              ; preds = %773
  br i1 %579, label %784, label %780

780:                                              ; preds = %779
  %781 = load i32, ptr @offset, align 4, !tbaa !31
  %782 = add i64 %30, 1
  %783 = and i64 %782, 4294967295
  br label %793

784:                                              ; preds = %793, %779
  %785 = icmp slt i32 %28, 1
  br i1 %785, label %820, label %786

786:                                              ; preds = %784
  %787 = load i32, ptr @offset, align 4, !tbaa !31
  %788 = sitofp i32 %787 to double
  %789 = sitofp i32 %28 to double
  %790 = fneg double %788
  %791 = add i64 %27, 1
  %792 = and i64 %791, 4294967295
  br label %807

793:                                              ; preds = %793, %780
  %794 = phi i64 [ 1, %780 ], [ %805, %793 ]
  %795 = trunc i64 %794 to i32
  %796 = sub nsw i32 %31, %795
  %797 = mul nsw i32 %781, %796
  %798 = sitofp i32 %797 to double
  %799 = fmul double %798, 5.000000e-01
  %800 = getelementptr inbounds float, ptr %776, i64 %794
  %801 = load float, ptr %800, align 4, !tbaa !167
  %802 = fpext float %801 to double
  %803 = fsub double %802, %799
  %804 = fptrunc double %803 to float
  store float %804, ptr %800, align 4, !tbaa !167
  %805 = add nuw nsw i64 %794, 1
  %806 = icmp eq i64 %805, %783
  br i1 %806, label %784, label %793, !llvm.loop !613

807:                                              ; preds = %807, %786
  %808 = phi i64 [ 1, %786 ], [ %818, %807 ]
  %809 = trunc i64 %808 to i32
  %810 = sitofp i32 %809 to double
  %811 = fmul double %810, 5.000000e-01
  %812 = fsub double %789, %811
  %813 = getelementptr inbounds float, ptr %774, i64 %808
  %814 = load float, ptr %813, align 4, !tbaa !167
  %815 = fpext float %814 to double
  %816 = tail call double @llvm.fmuladd.f64(double %790, double %812, double %815)
  %817 = fptrunc double %816 to float
  store float %817, ptr %813, align 4, !tbaa !167
  %818 = add nuw nsw i64 %808, 1
  %819 = icmp eq i64 %818, %792
  br i1 %819, label %820, label %807, !llvm.loop !614

820:                                              ; preds = %807, %784, %773
  %821 = load ptr, ptr @Q__align.mseq1, align 8, !tbaa !19
  %822 = load ptr, ptr @Q__align.mseq2, align 8, !tbaa !19
  %823 = load ptr, ptr @Q__align.ijp, align 8, !tbaa !19
  br i1 %411, label %1058, label %824

824:                                              ; preds = %820
  %825 = load ptr, ptr %0, align 8, !tbaa !19
  %826 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %825) #40
  %827 = trunc i64 %826 to i32
  %828 = load ptr, ptr %1, align 8, !tbaa !19
  %829 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %828) #40
  %830 = trunc i64 %829 to i32
  %831 = add nsw i32 %830, %827
  %832 = add nsw i32 %831, 1
  %833 = tail call ptr @AllocateCharVec(i32 noundef %832) #35
  %834 = tail call ptr @AllocateCharVec(i32 noundef %832) #35
  %835 = load i32, ptr @outgap, align 4, !tbaa !31
  %836 = icmp eq i32 %835, 1
  br i1 %836, label %887, label %837

837:                                              ; preds = %824
  %838 = load float, ptr %774, align 4, !tbaa !167
  %839 = icmp sgt i32 %827, 0
  br i1 %839, label %840, label %847

840:                                              ; preds = %837
  %841 = shl i64 %826, 32
  %842 = ashr exact i64 %841, 32
  %843 = getelementptr inbounds ptr, ptr %823, i64 %842
  %844 = shl i64 %829, 32
  %845 = ashr exact i64 %844, 32
  %846 = and i64 %826, 4294967295
  br label %857

847:                                              ; preds = %868, %837
  %848 = phi float [ %838, %837 ], [ %869, %868 ]
  %849 = icmp sgt i32 %830, 0
  br i1 %849, label %850, label %887

850:                                              ; preds = %847
  %851 = shl i64 %826, 32
  %852 = ashr exact i64 %851, 32
  %853 = getelementptr inbounds ptr, ptr %823, i64 %852
  %854 = shl i64 %829, 32
  %855 = ashr exact i64 %854, 32
  %856 = and i64 %829, 4294967295
  br label %872

857:                                              ; preds = %868, %840
  %858 = phi i64 [ 0, %840 ], [ %870, %868 ]
  %859 = phi float [ %838, %840 ], [ %869, %868 ]
  %860 = getelementptr inbounds float, ptr %774, i64 %858
  %861 = load float, ptr %860, align 4, !tbaa !167
  %862 = fcmp ult float %861, %859
  br i1 %862, label %868, label %863

863:                                              ; preds = %857
  %864 = trunc i64 %858 to i32
  %865 = sub nsw i32 %827, %864
  %866 = load ptr, ptr %843, align 8, !tbaa !19
  %867 = getelementptr inbounds i32, ptr %866, i64 %845
  store i32 %865, ptr %867, align 4, !tbaa !31
  br label %868

868:                                              ; preds = %863, %857
  %869 = phi float [ %861, %863 ], [ %859, %857 ]
  %870 = add nuw nsw i64 %858, 1
  %871 = icmp eq i64 %870, %846
  br i1 %871, label %847, label %857, !llvm.loop !615

872:                                              ; preds = %883, %850
  %873 = phi i64 [ 0, %850 ], [ %885, %883 ]
  %874 = phi float [ %848, %850 ], [ %884, %883 ]
  %875 = getelementptr inbounds float, ptr %776, i64 %873
  %876 = load float, ptr %875, align 4, !tbaa !167
  %877 = fcmp ult float %876, %874
  br i1 %877, label %883, label %878

878:                                              ; preds = %872
  %879 = trunc i64 %873 to i32
  %880 = sub i32 %879, %830
  %881 = load ptr, ptr %853, align 8, !tbaa !19
  %882 = getelementptr inbounds i32, ptr %881, i64 %855
  store i32 %880, ptr %882, align 4, !tbaa !31
  br label %883

883:                                              ; preds = %878, %872
  %884 = phi float [ %876, %878 ], [ %874, %872 ]
  %885 = add nuw nsw i64 %873, 1
  %886 = icmp eq i64 %885, %856
  br i1 %886, label %887, label %872, !llvm.loop !616

887:                                              ; preds = %883, %847, %824
  %888 = icmp slt i32 %827, 0
  br i1 %888, label %892, label %889

889:                                              ; preds = %887
  %890 = add i64 %826, 1
  %891 = and i64 %890, 4294967295
  br label %934

892:                                              ; preds = %934, %887
  %893 = icmp slt i32 %830, 0
  br i1 %893, label %941, label %894

894:                                              ; preds = %892
  %895 = load ptr, ptr %823, align 8, !tbaa !19
  %896 = add i64 %829, 1
  %897 = and i64 %896, 4294967295
  %898 = add nuw nsw i64 %897, 3
  %899 = and i64 %898, 8589934588
  %900 = add nsw i64 %897, -1
  %901 = insertelement <4 x i64> poison, i64 %900, i64 0
  %902 = shufflevector <4 x i64> %901, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %903

903:                                              ; preds = %930, %894
  %904 = phi i64 [ 0, %894 ], [ %931, %930 ]
  %905 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %894 ], [ %932, %930 ]
  %906 = trunc i64 %904 to i32
  %907 = icmp ule <4 x i64> %905, %902
  %908 = extractelement <4 x i1> %907, i64 0
  br i1 %908, label %909, label %912

909:                                              ; preds = %903
  %910 = getelementptr inbounds i32, ptr %895, i64 %904
  %911 = xor i32 %906, -1
  store i32 %911, ptr %910, align 4, !tbaa !31
  br label %912

912:                                              ; preds = %909, %903
  %913 = extractelement <4 x i1> %907, i64 1
  br i1 %913, label %914, label %918

914:                                              ; preds = %912
  %915 = or i64 %904, 1
  %916 = getelementptr inbounds i32, ptr %895, i64 %915
  %917 = xor i32 %906, -2
  store i32 %917, ptr %916, align 4, !tbaa !31
  br label %918

918:                                              ; preds = %914, %912
  %919 = extractelement <4 x i1> %907, i64 2
  br i1 %919, label %920, label %924

920:                                              ; preds = %918
  %921 = or i64 %904, 2
  %922 = getelementptr inbounds i32, ptr %895, i64 %921
  %923 = xor i32 %906, -3
  store i32 %923, ptr %922, align 4, !tbaa !31
  br label %924

924:                                              ; preds = %920, %918
  %925 = extractelement <4 x i1> %907, i64 3
  br i1 %925, label %926, label %930

926:                                              ; preds = %924
  %927 = or i64 %904, 3
  %928 = getelementptr inbounds i32, ptr %895, i64 %927
  %929 = xor i32 %906, -4
  store i32 %929, ptr %928, align 4, !tbaa !31
  br label %930

930:                                              ; preds = %926, %924
  %931 = add i64 %904, 4
  %932 = add <4 x i64> %905, <i64 4, i64 4, i64 4, i64 4>
  %933 = icmp eq i64 %931, %899
  br i1 %933, label %941, label %903, !llvm.loop !617

934:                                              ; preds = %934, %889
  %935 = phi i64 [ 0, %889 ], [ %936, %934 ]
  %936 = add nuw nsw i64 %935, 1
  %937 = getelementptr inbounds ptr, ptr %823, i64 %935
  %938 = load ptr, ptr %937, align 8, !tbaa !19
  %939 = trunc i64 %936 to i32
  store i32 %939, ptr %938, align 4, !tbaa !31
  %940 = icmp eq i64 %936, %891
  br i1 %940, label %892, label %934, !llvm.loop !618

941:                                              ; preds = %930, %892
  %942 = shl i64 %826, 32
  %943 = ashr exact i64 %942, 32
  %944 = getelementptr inbounds i8, ptr %833, i64 %943
  %945 = shl i64 %829, 32
  %946 = ashr exact i64 %945, 32
  %947 = getelementptr inbounds i8, ptr %944, i64 %946
  store i8 0, ptr %947, align 1, !tbaa !17
  %948 = getelementptr inbounds i8, ptr %834, i64 %943
  %949 = getelementptr inbounds i8, ptr %948, i64 %946
  store i8 0, ptr %949, align 1, !tbaa !17
  store float 0.000000e+00, ptr %8, align 4, !tbaa !167
  %950 = icmp slt i32 %831, 0
  br i1 %950, label %1033, label %951

951:                                              ; preds = %1028, %941
  %952 = phi ptr [ %1030, %1028 ], [ %949, %941 ]
  %953 = phi ptr [ %1029, %1028 ], [ %947, %941 ]
  %954 = phi i32 [ %1031, %1028 ], [ 0, %941 ]
  %955 = phi i32 [ %973, %1028 ], [ %827, %941 ]
  %956 = phi i32 [ %975, %1028 ], [ %830, %941 ]
  %957 = sext i32 %955 to i64
  %958 = getelementptr inbounds ptr, ptr %823, i64 %957
  %959 = load ptr, ptr %958, align 8, !tbaa !19
  %960 = sext i32 %956 to i64
  %961 = getelementptr inbounds i32, ptr %959, i64 %960
  %962 = load i32, ptr %961, align 4, !tbaa !31
  %963 = icmp slt i32 %962, 0
  br i1 %963, label %964, label %966

964:                                              ; preds = %951
  %965 = add nsw i32 %955, -1
  br label %972

966:                                              ; preds = %951
  %967 = icmp eq i32 %962, 0
  br i1 %967, label %970, label %968

968:                                              ; preds = %966
  %969 = sub nsw i32 %955, %962
  br label %972

970:                                              ; preds = %966
  %971 = add nsw i32 %955, -1
  br label %972

972:                                              ; preds = %970, %968, %964
  %973 = phi i32 [ %965, %964 ], [ %969, %968 ], [ %971, %970 ]
  %974 = phi i32 [ %962, %964 ], [ -1, %968 ], [ -1, %970 ]
  %975 = add nsw i32 %974, %956
  %976 = xor i32 %973, -1
  %977 = add i32 %955, %976
  %978 = icmp eq i32 %977, 0
  br i1 %978, label %992, label %979

979:                                              ; preds = %972
  %980 = add i32 %955, -1
  br label %981

981:                                              ; preds = %981, %979
  %982 = phi i32 [ %987, %981 ], [ %977, %979 ]
  %983 = phi ptr [ %986, %981 ], [ %952, %979 ]
  %984 = phi ptr [ %985, %981 ], [ %953, %979 ]
  %985 = getelementptr inbounds i8, ptr %984, i64 -1
  store i8 111, ptr %985, align 1, !tbaa !17
  %986 = getelementptr inbounds i8, ptr %983, i64 -1
  store i8 45, ptr %986, align 1, !tbaa !17
  %987 = add nsw i32 %982, -1
  %988 = icmp eq i32 %987, 0
  br i1 %988, label %989, label %981, !llvm.loop !619

989:                                              ; preds = %981
  %.lcssa1 = phi ptr [ %985, %981 ]
  %.lcssa = phi ptr [ %986, %981 ]
  %990 = add i32 %980, %954
  %991 = sub i32 %990, %973
  br label %992

992:                                              ; preds = %989, %972
  %993 = phi i32 [ %954, %972 ], [ %991, %989 ]
  %994 = phi ptr [ %953, %972 ], [ %.lcssa1, %989 ]
  %995 = phi ptr [ %952, %972 ], [ %.lcssa, %989 ]
  %996 = icmp eq i32 %974, -1
  br i1 %996, label %1009, label %997

997:                                              ; preds = %992
  %998 = xor i32 %974, -1
  br label %999

999:                                              ; preds = %999, %997
  %1000 = phi i32 [ %1007, %999 ], [ %998, %997 ]
  %1001 = phi ptr [ %1005, %999 ], [ %995, %997 ]
  %1002 = phi ptr [ %1004, %999 ], [ %994, %997 ]
  %1003 = phi i32 [ %1006, %999 ], [ %993, %997 ]
  %1004 = getelementptr inbounds i8, ptr %1002, i64 -1
  store i8 45, ptr %1004, align 1, !tbaa !17
  %1005 = getelementptr inbounds i8, ptr %1001, i64 -1
  store i8 111, ptr %1005, align 1, !tbaa !17
  %1006 = add nsw i32 %1003, 1
  %1007 = add nsw i32 %1000, -1
  %1008 = icmp eq i32 %1007, 0
  br i1 %1008, label %1009, label %999, !llvm.loop !620

1009:                                             ; preds = %999, %992
  %1010 = phi i32 [ %993, %992 ], [ %1006, %999 ]
  %1011 = phi ptr [ %994, %992 ], [ %1004, %999 ]
  %1012 = phi ptr [ %995, %992 ], [ %1005, %999 ]
  %1013 = icmp eq i32 %955, %827
  %1014 = icmp eq i32 %956, %830
  %1015 = or i1 %1013, %1014
  br i1 %1015, label %1024, label %1016

1016:                                             ; preds = %1009
  %1017 = load ptr, ptr @impmtx.322, align 8, !tbaa !19
  %1018 = getelementptr inbounds ptr, ptr %1017, i64 %957
  %1019 = load ptr, ptr %1018, align 8, !tbaa !19
  %1020 = getelementptr inbounds float, ptr %1019, i64 %960
  %1021 = load float, ptr %1020, align 4, !tbaa !167
  %1022 = load float, ptr %8, align 4, !tbaa !167
  %1023 = fadd float %1021, %1022
  store float %1023, ptr %8, align 4, !tbaa !167
  br label %1024

1024:                                             ; preds = %1016, %1009
  %1025 = icmp slt i32 %955, 1
  %1026 = icmp slt i32 %956, 1
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %1033, label %1028

1028:                                             ; preds = %1024
  %1029 = getelementptr inbounds i8, ptr %1011, i64 -1
  store i8 111, ptr %1029, align 1, !tbaa !17
  %1030 = getelementptr inbounds i8, ptr %1012, i64 -1
  store i8 111, ptr %1030, align 1, !tbaa !17
  %1031 = add nsw i32 %1010, 2
  %1032 = icmp sgt i32 %1031, %831
  br i1 %1032, label %1033, label %951, !llvm.loop !621

1033:                                             ; preds = %1028, %1024, %941
  %1034 = phi ptr [ %947, %941 ], [ %1029, %1028 ], [ %1011, %1024 ]
  %1035 = phi ptr [ %949, %941 ], [ %1030, %1028 ], [ %1012, %1024 ]
  br i1 %133, label %1036, label %1038

1036:                                             ; preds = %1033
  %1037 = zext i32 %4 to i64
  br label %1041

1038:                                             ; preds = %1041, %1033
  br i1 %141, label %1039, label %1057

1039:                                             ; preds = %1038
  %1040 = zext i32 %5 to i64
  br label %1049

1041:                                             ; preds = %1041, %1036
  %1042 = phi i64 [ 0, %1036 ], [ %1047, %1041 ]
  %1043 = getelementptr inbounds ptr, ptr %821, i64 %1042
  %1044 = load ptr, ptr %1043, align 8, !tbaa !19
  %1045 = getelementptr inbounds ptr, ptr %0, i64 %1042
  %1046 = load ptr, ptr %1045, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %1044, ptr noundef %1046, ptr noundef %1034) #35
  %1047 = add nuw nsw i64 %1042, 1
  %1048 = icmp eq i64 %1047, %1037
  br i1 %1048, label %1038, label %1041, !llvm.loop !622

1049:                                             ; preds = %1049, %1039
  %1050 = phi i64 [ 0, %1039 ], [ %1055, %1049 ]
  %1051 = getelementptr inbounds ptr, ptr %822, i64 %1050
  %1052 = load ptr, ptr %1051, align 8, !tbaa !19
  %1053 = getelementptr inbounds ptr, ptr %1, i64 %1050
  %1054 = load ptr, ptr %1053, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %1052, ptr noundef %1054, ptr noundef %1035) #35
  %1055 = add nuw nsw i64 %1050, 1
  %1056 = icmp eq i64 %1055, %1040
  br i1 %1056, label %1057, label %1049, !llvm.loop !623

1057:                                             ; preds = %1049, %1038
  tail call void @free(ptr noundef %833) #35
  tail call void @free(ptr noundef %834) #35
  br label %1059

1058:                                             ; preds = %820
  tail call fastcc void @Atracking(ptr noundef %776, ptr noundef %774, ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef %821, ptr noundef %822, ptr noundef %823, i32 noundef %4, i32 noundef %5) #39
  br label %1059

1059:                                             ; preds = %1058, %1057
  %1060 = load ptr, ptr @Q__align.mseq1, align 8, !tbaa !19
  %1061 = load ptr, ptr %1060, align 8, !tbaa !19
  %1062 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1061) #40
  %1063 = trunc i64 %1062 to i32
  %1064 = icmp sgt i32 %1063, %6
  %1065 = icmp sgt i32 %1063, 5000000
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %1067, label %1070

1067:                                             ; preds = %1059
  %1068 = load ptr, ptr @stderr, align 8, !tbaa !19
  %1069 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1068, ptr noundef nonnull @.str.323, i32 noundef %6, i32 noundef %1063, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.1.324) #35
  br label %1070

1070:                                             ; preds = %1067, %1059
  br i1 %133, label %1071, label %1074

1071:                                             ; preds = %1070
  %1072 = load ptr, ptr @Q__align.mseq1, align 8, !tbaa !19
  %1073 = zext i32 %4 to i64
  br label %1078

1074:                                             ; preds = %1078, %1070
  br i1 %141, label %1075, label %1096

1075:                                             ; preds = %1074
  %1076 = load ptr, ptr @Q__align.mseq2, align 8, !tbaa !19
  %1077 = zext i32 %5 to i64
  br label %1087

1078:                                             ; preds = %1078, %1071
  %1079 = phi i64 [ 0, %1071 ], [ %1085, %1078 ]
  %1080 = getelementptr inbounds ptr, ptr %0, i64 %1079
  %1081 = load ptr, ptr %1080, align 8, !tbaa !19
  %1082 = getelementptr inbounds ptr, ptr %1072, i64 %1079
  %1083 = load ptr, ptr %1082, align 8, !tbaa !19
  %1084 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %1081, ptr noundef nonnull dereferenceable(1) %1083) #35
  %1085 = add nuw nsw i64 %1079, 1
  %1086 = icmp eq i64 %1085, %1073
  br i1 %1086, label %1074, label %1078, !llvm.loop !624

1087:                                             ; preds = %1087, %1075
  %1088 = phi i64 [ 0, %1075 ], [ %1094, %1087 ]
  %1089 = getelementptr inbounds ptr, ptr %1, i64 %1088
  %1090 = load ptr, ptr %1089, align 8, !tbaa !19
  %1091 = getelementptr inbounds ptr, ptr %1076, i64 %1088
  %1092 = load ptr, ptr %1091, align 8, !tbaa !19
  %1093 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %1090, ptr noundef nonnull dereferenceable(1) %1092) #35
  %1094 = add nuw nsw i64 %1088, 1
  %1095 = icmp eq i64 %1094, %1077
  br i1 %1095, label %1096, label %1087, !llvm.loop !625

1096:                                             ; preds = %1087, %1074
  ret float %777
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @match_calc.321(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7) unnamed_addr #16 {
  %9 = alloca [26 x float], align 16
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #34
  %10 = icmp ne i32 %7, 0
  %11 = icmp sgt i32 %4, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %45

13:                                               ; preds = %8
  %14 = zext i32 %4 to i64
  br label %15

15:                                               ; preds = %39, %13
  %16 = phi i64 [ 0, %13 ], [ %43, %39 ]
  %17 = getelementptr inbounds ptr, ptr %5, i64 %16
  %18 = getelementptr inbounds ptr, ptr %6, i64 %16
  br label %19

19:                                               ; preds = %35, %15
  %20 = phi i64 [ 0, %15 ], [ %37, %35 ]
  %21 = phi i32 [ 0, %15 ], [ %36, %35 ]
  %22 = getelementptr inbounds ptr, ptr %2, i64 %20
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  %24 = getelementptr inbounds float, ptr %23, i64 %16
  %25 = load float, ptr %24, align 4, !tbaa !167
  %26 = fcmp une float %25, 0.000000e+00
  br i1 %26, label %27, label %35

27:                                               ; preds = %19
  %28 = load ptr, ptr %17, align 8, !tbaa !19
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds float, ptr %28, i64 %29
  store float %25, ptr %30, align 4, !tbaa !167
  %31 = load ptr, ptr %18, align 8, !tbaa !19
  %32 = getelementptr inbounds i32, ptr %31, i64 %29
  %33 = trunc i64 %20 to i32
  store i32 %33, ptr %32, align 4, !tbaa !31
  %34 = add nsw i32 %21, 1
  br label %35

35:                                               ; preds = %27, %19
  %36 = phi i32 [ %34, %27 ], [ %21, %19 ]
  %37 = add nuw nsw i64 %20, 1
  %38 = icmp eq i64 %37, 26
  br i1 %38, label %39, label %19, !llvm.loop !626

39:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %36, %35 ]
  %40 = load ptr, ptr %18, align 8, !tbaa !19
  %41 = sext i32 %.lcssa1 to i64
  %42 = getelementptr inbounds i32, ptr %40, i64 %41
  store i32 -1, ptr %42, align 4, !tbaa !31
  %43 = add nuw nsw i64 %16, 1
  %44 = icmp eq i64 %43, %14
  br i1 %44, label %45, label %15, !llvm.loop !627

45:                                               ; preds = %39, %8
  %46 = sext i32 %3 to i64
  br label %49

47:                                               ; preds = %64
  %48 = icmp eq i32 %4, 0
  br i1 %48, label %97, label %67

49:                                               ; preds = %64, %45
  %50 = phi i64 [ 0, %45 ], [ %65, %64 ]
  %51 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %50
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i64 [ 0, %49 ], [ %62, %52 ]
  %54 = phi float [ 0.000000e+00, %49 ], [ %61, %52 ]
  %55 = getelementptr inbounds [26 x [26 x float]], ptr @n_dis_consweight_multi, i64 0, i64 %53, i64 %50
  %56 = load float, ptr %55, align 4, !tbaa !167
  %57 = getelementptr inbounds ptr, ptr %1, i64 %53
  %58 = load ptr, ptr %57, align 8, !tbaa !19
  %59 = getelementptr inbounds float, ptr %58, i64 %46
  %60 = load float, ptr %59, align 4, !tbaa !167
  %61 = tail call float @llvm.fmuladd.f32(float %56, float %60, float %54)
  %62 = add nuw nsw i64 %53, 1
  %63 = icmp eq i64 %62, 26
  br i1 %63, label %64, label %52, !llvm.loop !628

64:                                               ; preds = %52
  %.lcssa = phi float [ %61, %52 ]
  store float %.lcssa, ptr %51, align 4, !tbaa !167
  %65 = add nuw nsw i64 %50, 1
  %66 = icmp eq i64 %65, 26
  br i1 %66, label %47, label %49, !llvm.loop !629

67:                                               ; preds = %94, %47
  %68 = phi i32 [ %72, %94 ], [ %4, %47 ]
  %69 = phi ptr [ %73, %94 ], [ %6, %47 ]
  %70 = phi ptr [ %75, %94 ], [ %5, %47 ]
  %71 = phi ptr [ %95, %94 ], [ %0, %47 ]
  %72 = add nsw i32 %68, -1
  store float 0.000000e+00, ptr %71, align 4, !tbaa !167
  %73 = getelementptr inbounds ptr, ptr %69, i64 1
  %74 = load ptr, ptr %69, align 8, !tbaa !19
  %75 = getelementptr inbounds ptr, ptr %70, i64 1
  %76 = load i32, ptr %74, align 4, !tbaa !31
  %77 = icmp sgt i32 %76, -1
  br i1 %77, label %78, label %94

78:                                               ; preds = %67
  %79 = load ptr, ptr %70, align 8, !tbaa !19
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi float [ 0.000000e+00, %78 ], [ %91, %80 ]
  %82 = phi i32 [ %76, %78 ], [ %92, %80 ]
  %83 = phi ptr [ %74, %78 ], [ %85, %80 ]
  %84 = phi ptr [ %79, %78 ], [ %89, %80 ]
  %85 = getelementptr inbounds i32, ptr %83, i64 1
  %86 = zext i32 %82 to i64
  %87 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %86
  %88 = load float, ptr %87, align 4, !tbaa !167
  %89 = getelementptr inbounds float, ptr %84, i64 1
  %90 = load float, ptr %84, align 4, !tbaa !167
  %91 = tail call float @llvm.fmuladd.f32(float %88, float %90, float %81)
  store float %91, ptr %71, align 4, !tbaa !167
  %92 = load i32, ptr %85, align 4, !tbaa !31
  %93 = icmp sgt i32 %92, -1
  br i1 %93, label %80, label %94, !llvm.loop !630

94:                                               ; preds = %80, %67
  %95 = getelementptr inbounds float, ptr %71, i64 1
  %96 = icmp eq i32 %72, 0
  br i1 %96, label %97, label %67, !llvm.loop !631

97:                                               ; preds = %94, %47
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #34
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @Atracking(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7, i32 noundef %8) unnamed_addr #4 {
  %10 = load ptr, ptr %2, align 8, !tbaa !19
  %11 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %10) #40
  %12 = trunc i64 %11 to i32
  %13 = load ptr, ptr %3, align 8, !tbaa !19
  %14 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %13) #40
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, %12
  %17 = add nsw i32 %16, 1
  %18 = tail call ptr @AllocateCharVec(i32 noundef %17) #35
  %19 = tail call ptr @AllocateCharVec(i32 noundef %17) #35
  %20 = load i32, ptr @outgap, align 4, !tbaa !31
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %72, label %22

22:                                               ; preds = %9
  %23 = load float, ptr %1, align 4, !tbaa !167
  %24 = icmp sgt i32 %12, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %22
  %26 = shl i64 %11, 32
  %27 = ashr exact i64 %26, 32
  %28 = getelementptr inbounds ptr, ptr %6, i64 %27
  %29 = shl i64 %14, 32
  %30 = ashr exact i64 %29, 32
  %31 = and i64 %11, 4294967295
  br label %42

32:                                               ; preds = %53, %22
  %33 = phi float [ %23, %22 ], [ %54, %53 ]
  %34 = icmp sgt i32 %15, 0
  br i1 %34, label %35, label %72

35:                                               ; preds = %32
  %36 = shl i64 %11, 32
  %37 = ashr exact i64 %36, 32
  %38 = getelementptr inbounds ptr, ptr %6, i64 %37
  %39 = shl i64 %14, 32
  %40 = ashr exact i64 %39, 32
  %41 = and i64 %14, 4294967295
  br label %57

42:                                               ; preds = %53, %25
  %43 = phi i64 [ 0, %25 ], [ %55, %53 ]
  %44 = phi float [ %23, %25 ], [ %54, %53 ]
  %45 = getelementptr inbounds float, ptr %1, i64 %43
  %46 = load float, ptr %45, align 4, !tbaa !167
  %47 = fcmp ult float %46, %44
  br i1 %47, label %53, label %48

48:                                               ; preds = %42
  %49 = trunc i64 %43 to i32
  %50 = sub nsw i32 %12, %49
  %51 = load ptr, ptr %28, align 8, !tbaa !19
  %52 = getelementptr inbounds i32, ptr %51, i64 %30
  store i32 %50, ptr %52, align 4, !tbaa !31
  br label %53

53:                                               ; preds = %48, %42
  %54 = phi float [ %46, %48 ], [ %44, %42 ]
  %55 = add nuw nsw i64 %43, 1
  %56 = icmp eq i64 %55, %31
  br i1 %56, label %32, label %42, !llvm.loop !632

57:                                               ; preds = %68, %35
  %58 = phi i64 [ 0, %35 ], [ %70, %68 ]
  %59 = phi float [ %33, %35 ], [ %69, %68 ]
  %60 = getelementptr inbounds float, ptr %0, i64 %58
  %61 = load float, ptr %60, align 4, !tbaa !167
  %62 = fcmp ult float %61, %59
  br i1 %62, label %68, label %63

63:                                               ; preds = %57
  %64 = trunc i64 %58 to i32
  %65 = sub i32 %64, %15
  %66 = load ptr, ptr %38, align 8, !tbaa !19
  %67 = getelementptr inbounds i32, ptr %66, i64 %40
  store i32 %65, ptr %67, align 4, !tbaa !31
  br label %68

68:                                               ; preds = %63, %57
  %69 = phi float [ %61, %63 ], [ %59, %57 ]
  %70 = add nuw nsw i64 %58, 1
  %71 = icmp eq i64 %70, %41
  br i1 %71, label %72, label %57, !llvm.loop !633

72:                                               ; preds = %68, %32, %9
  %73 = icmp slt i32 %12, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %72
  %75 = add i64 %11, 1
  %76 = and i64 %75, 4294967295
  br label %119

77:                                               ; preds = %119, %72
  %78 = icmp slt i32 %15, 0
  br i1 %78, label %126, label %79

79:                                               ; preds = %77
  %80 = load ptr, ptr %6, align 8, !tbaa !19
  %81 = add i64 %14, 1
  %82 = and i64 %81, 4294967295
  %83 = add nuw nsw i64 %82, 3
  %84 = and i64 %83, 8589934588
  %85 = add nsw i64 %82, -1
  %86 = insertelement <4 x i64> poison, i64 %85, i64 0
  %87 = shufflevector <4 x i64> %86, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %88

88:                                               ; preds = %115, %79
  %89 = phi i64 [ 0, %79 ], [ %116, %115 ]
  %90 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %79 ], [ %117, %115 ]
  %91 = trunc i64 %89 to i32
  %92 = icmp ule <4 x i64> %90, %87
  %93 = extractelement <4 x i1> %92, i64 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds i32, ptr %80, i64 %89
  %96 = xor i32 %91, -1
  store i32 %96, ptr %95, align 4, !tbaa !31
  br label %97

97:                                               ; preds = %94, %88
  %98 = extractelement <4 x i1> %92, i64 1
  br i1 %98, label %99, label %103

99:                                               ; preds = %97
  %100 = or i64 %89, 1
  %101 = getelementptr inbounds i32, ptr %80, i64 %100
  %102 = xor i32 %91, -2
  store i32 %102, ptr %101, align 4, !tbaa !31
  br label %103

103:                                              ; preds = %99, %97
  %104 = extractelement <4 x i1> %92, i64 2
  br i1 %104, label %105, label %109

105:                                              ; preds = %103
  %106 = or i64 %89, 2
  %107 = getelementptr inbounds i32, ptr %80, i64 %106
  %108 = xor i32 %91, -3
  store i32 %108, ptr %107, align 4, !tbaa !31
  br label %109

109:                                              ; preds = %105, %103
  %110 = extractelement <4 x i1> %92, i64 3
  br i1 %110, label %111, label %115

111:                                              ; preds = %109
  %112 = or i64 %89, 3
  %113 = getelementptr inbounds i32, ptr %80, i64 %112
  %114 = xor i32 %91, -4
  store i32 %114, ptr %113, align 4, !tbaa !31
  br label %115

115:                                              ; preds = %111, %109
  %116 = add i64 %89, 4
  %117 = add <4 x i64> %90, <i64 4, i64 4, i64 4, i64 4>
  %118 = icmp eq i64 %116, %84
  br i1 %118, label %126, label %88, !llvm.loop !634

119:                                              ; preds = %119, %74
  %120 = phi i64 [ 0, %74 ], [ %121, %119 ]
  %121 = add nuw nsw i64 %120, 1
  %122 = getelementptr inbounds ptr, ptr %6, i64 %120
  %123 = load ptr, ptr %122, align 8, !tbaa !19
  %124 = trunc i64 %121 to i32
  store i32 %124, ptr %123, align 4, !tbaa !31
  %125 = icmp eq i64 %121, %76
  br i1 %125, label %77, label %119, !llvm.loop !635

126:                                              ; preds = %115, %77
  %127 = shl i64 %11, 32
  %128 = ashr exact i64 %127, 32
  %129 = getelementptr inbounds i8, ptr %18, i64 %128
  %130 = shl i64 %14, 32
  %131 = ashr exact i64 %130, 32
  %132 = getelementptr inbounds i8, ptr %129, i64 %131
  store i8 0, ptr %132, align 1, !tbaa !17
  %133 = getelementptr inbounds i8, ptr %19, i64 %128
  %134 = getelementptr inbounds i8, ptr %133, i64 %131
  store i8 0, ptr %134, align 1, !tbaa !17
  %135 = icmp slt i32 %16, 0
  br i1 %135, label %206, label %136

136:                                              ; preds = %201, %126
  %137 = phi ptr [ %203, %201 ], [ %134, %126 ]
  %138 = phi ptr [ %202, %201 ], [ %132, %126 ]
  %139 = phi i32 [ %204, %201 ], [ 0, %126 ]
  %140 = phi i32 [ %158, %201 ], [ %12, %126 ]
  %141 = phi i32 [ %160, %201 ], [ %15, %126 ]
  %142 = sext i32 %140 to i64
  %143 = getelementptr inbounds ptr, ptr %6, i64 %142
  %144 = load ptr, ptr %143, align 8, !tbaa !19
  %145 = sext i32 %141 to i64
  %146 = getelementptr inbounds i32, ptr %144, i64 %145
  %147 = load i32, ptr %146, align 4, !tbaa !31
  %148 = icmp slt i32 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %136
  %150 = add nsw i32 %140, -1
  br label %157

151:                                              ; preds = %136
  %152 = icmp eq i32 %147, 0
  br i1 %152, label %155, label %153

153:                                              ; preds = %151
  %154 = sub nsw i32 %140, %147
  br label %157

155:                                              ; preds = %151
  %156 = add nsw i32 %140, -1
  br label %157

157:                                              ; preds = %155, %153, %149
  %158 = phi i32 [ %150, %149 ], [ %154, %153 ], [ %156, %155 ]
  %159 = phi i32 [ %147, %149 ], [ -1, %153 ], [ -1, %155 ]
  %160 = add nsw i32 %159, %141
  %161 = xor i32 %158, -1
  %162 = add i32 %140, %161
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %177, label %164

164:                                              ; preds = %157
  %165 = add i32 %140, -1
  %166 = add i32 %165, %139
  br label %167

167:                                              ; preds = %167, %164
  %168 = phi i32 [ %173, %167 ], [ %162, %164 ]
  %169 = phi ptr [ %172, %167 ], [ %137, %164 ]
  %170 = phi ptr [ %171, %167 ], [ %138, %164 ]
  %171 = getelementptr inbounds i8, ptr %170, i64 -1
  store i8 111, ptr %171, align 1, !tbaa !17
  %172 = getelementptr inbounds i8, ptr %169, i64 -1
  store i8 45, ptr %172, align 1, !tbaa !17
  %173 = add nsw i32 %168, -1
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %167, !llvm.loop !636

175:                                              ; preds = %167
  %.lcssa1 = phi ptr [ %171, %167 ]
  %.lcssa = phi ptr [ %172, %167 ]
  %176 = sub i32 %166, %158
  br label %177

177:                                              ; preds = %175, %157
  %178 = phi i32 [ %139, %157 ], [ %176, %175 ]
  %179 = phi ptr [ %138, %157 ], [ %.lcssa1, %175 ]
  %180 = phi ptr [ %137, %157 ], [ %.lcssa, %175 ]
  %181 = icmp eq i32 %159, -1
  br i1 %181, label %194, label %182

182:                                              ; preds = %177
  %183 = xor i32 %159, -1
  br label %184

184:                                              ; preds = %184, %182
  %185 = phi i32 [ %192, %184 ], [ %183, %182 ]
  %186 = phi ptr [ %190, %184 ], [ %180, %182 ]
  %187 = phi ptr [ %189, %184 ], [ %179, %182 ]
  %188 = phi i32 [ %191, %184 ], [ %178, %182 ]
  %189 = getelementptr inbounds i8, ptr %187, i64 -1
  store i8 45, ptr %189, align 1, !tbaa !17
  %190 = getelementptr inbounds i8, ptr %186, i64 -1
  store i8 111, ptr %190, align 1, !tbaa !17
  %191 = add nsw i32 %188, 1
  %192 = add nsw i32 %185, -1
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %184, !llvm.loop !637

194:                                              ; preds = %184, %177
  %195 = phi i32 [ %178, %177 ], [ %191, %184 ]
  %196 = phi ptr [ %179, %177 ], [ %189, %184 ]
  %197 = phi ptr [ %180, %177 ], [ %190, %184 ]
  %198 = icmp slt i32 %140, 1
  %199 = icmp slt i32 %141, 1
  %200 = or i1 %198, %199
  br i1 %200, label %206, label %201

201:                                              ; preds = %194
  %202 = getelementptr inbounds i8, ptr %196, i64 -1
  store i8 111, ptr %202, align 1, !tbaa !17
  %203 = getelementptr inbounds i8, ptr %197, i64 -1
  store i8 111, ptr %203, align 1, !tbaa !17
  %204 = add nsw i32 %195, 2
  %205 = icmp sgt i32 %204, %16
  br i1 %205, label %206, label %136, !llvm.loop !638

206:                                              ; preds = %201, %194, %126
  %207 = phi ptr [ %132, %126 ], [ %196, %194 ], [ %202, %201 ]
  %208 = phi ptr [ %134, %126 ], [ %197, %194 ], [ %203, %201 ]
  %209 = icmp sgt i32 %7, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %206
  %211 = zext i32 %7 to i64
  br label %216

212:                                              ; preds = %216, %206
  %213 = icmp sgt i32 %8, 0
  br i1 %213, label %214, label %232

214:                                              ; preds = %212
  %215 = zext i32 %8 to i64
  br label %224

216:                                              ; preds = %216, %210
  %217 = phi i64 [ 0, %210 ], [ %222, %216 ]
  %218 = getelementptr inbounds ptr, ptr %4, i64 %217
  %219 = load ptr, ptr %218, align 8, !tbaa !19
  %220 = getelementptr inbounds ptr, ptr %2, i64 %217
  %221 = load ptr, ptr %220, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %219, ptr noundef %221, ptr noundef %207) #35
  %222 = add nuw nsw i64 %217, 1
  %223 = icmp eq i64 %222, %211
  br i1 %223, label %212, label %216, !llvm.loop !639

224:                                              ; preds = %224, %214
  %225 = phi i64 [ 0, %214 ], [ %230, %224 ]
  %226 = getelementptr inbounds ptr, ptr %5, i64 %225
  %227 = load ptr, ptr %226, align 8, !tbaa !19
  %228 = getelementptr inbounds ptr, ptr %3, i64 %225
  %229 = load ptr, ptr %228, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %227, ptr noundef %229, ptr noundef %208) #35
  %230 = add nuw nsw i64 %225, 1
  %231 = icmp eq i64 %230, %215
  br i1 %231, label %232, label %224, !llvm.loop !640

232:                                              ; preds = %224, %212
  tail call void @free(ptr noundef %18) #35
  tail call void @free(ptr noundef %19) #35
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal float @Aalign(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #4 {
  %8 = load i32, ptr @Aalign.orlgth1, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %7
  %11 = load i32, ptr @njob, align 4, !tbaa !31
  %12 = tail call ptr @AllocateCharMtx(i32 noundef %11, i32 noundef 1) #35
  store ptr %12, ptr @Aalign.mseq1, align 8, !tbaa !19
  %13 = load i32, ptr @njob, align 4, !tbaa !31
  %14 = tail call ptr @AllocateCharMtx(i32 noundef %13, i32 noundef 1) #35
  store ptr %14, ptr @Aalign.mseq2, align 8, !tbaa !19
  %15 = load i32, ptr @Aalign.orlgth1, align 4
  br label %16

16:                                               ; preds = %10, %7
  %17 = phi i32 [ %15, %10 ], [ %8, %7 ]
  %18 = load ptr, ptr %0, align 8, !tbaa !19
  %19 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %18) #40
  %20 = trunc i64 %19 to i32
  %21 = load ptr, ptr %1, align 8, !tbaa !19
  %22 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %21) #40
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %17, %20
  %25 = load i32, ptr @Aalign.orlgth2, align 4
  %26 = icmp slt i32 %25, %23
  %27 = select i1 %24, i1 true, i1 %26
  br i1 %27, label %28, label %82

28:                                               ; preds = %16
  %29 = icmp sgt i32 %17, 0
  %30 = icmp sgt i32 %25, 0
  %31 = select i1 %29, i1 %30, i1 false
  br i1 %31, label %32, label %47

32:                                               ; preds = %28
  %33 = load ptr, ptr @Aalign.currentw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %33) #35
  %34 = load ptr, ptr @Aalign.previousw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %34) #35
  %35 = load ptr, ptr @Aalign.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %35) #35
  %36 = load ptr, ptr @Aalign.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %36) #35
  %37 = load ptr, ptr @Aalign.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %37) #35
  %38 = load ptr, ptr @Aalign.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %38) #35
  %39 = load ptr, ptr @Aalign.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %39) #35
  %40 = load ptr, ptr @Aalign.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %40) #35
  %41 = load ptr, ptr @Aalign.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %41) #35
  %42 = load ptr, ptr @Aalign.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %42) #35
  %43 = load ptr, ptr @Aalign.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %43) #35
  %44 = load ptr, ptr @Aalign.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %44) #35
  %45 = load i32, ptr @Aalign.orlgth1, align 4, !tbaa !31
  %46 = load i32, ptr @Aalign.orlgth2, align 4, !tbaa !31
  br label %47

47:                                               ; preds = %32, %28
  %48 = phi i32 [ %46, %32 ], [ %25, %28 ]
  %49 = phi i32 [ %45, %32 ], [ %17, %28 ]
  %50 = sitofp i32 %20 to double
  %51 = fmul double %50, 1.100000e+00
  %52 = fptosi double %51 to i32
  %53 = tail call i32 @llvm.smax.i32(i32 %49, i32 %52)
  %54 = add nsw i32 %53, 100
  %55 = sitofp i32 %23 to double
  %56 = fmul double %55, 1.100000e+00
  %57 = fptosi double %56 to i32
  %58 = tail call i32 @llvm.smax.i32(i32 %48, i32 %57)
  %59 = add nsw i32 %58, 100
  %60 = load ptr, ptr @stderr, align 8, !tbaa !19
  %61 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %60, ptr noundef nonnull @.str.327, i32 noundef %54, i32 noundef %59) #36
  %62 = add nsw i32 %58, 102
  %63 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  store ptr %63, ptr @Aalign.currentw, align 8, !tbaa !19
  %64 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  store ptr %64, ptr @Aalign.previousw, align 8, !tbaa !19
  %65 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  store ptr %65, ptr @Aalign.match, align 8, !tbaa !19
  %66 = add nsw i32 %53, 102
  %67 = tail call ptr @AllocateFloatVec(i32 noundef %66) #35
  store ptr %67, ptr @Aalign.initverticalw, align 8, !tbaa !19
  %68 = tail call ptr @AllocateFloatVec(i32 noundef %66) #35
  store ptr %68, ptr @Aalign.lastverticalw, align 8, !tbaa !19
  %69 = tail call ptr @AllocateFloatVec(i32 noundef %62) #35
  store ptr %69, ptr @Aalign.m, align 8, !tbaa !19
  %70 = tail call ptr @AllocateIntVec(i32 noundef %62) #35
  store ptr %70, ptr @Aalign.mp, align 8, !tbaa !19
  %71 = load i32, ptr @njob, align 4, !tbaa !31
  %72 = add nsw i32 %59, %54
  %73 = tail call ptr @AllocateCharMtx(i32 noundef %71, i32 noundef %72) #35
  store ptr %73, ptr @Aalign.mseq, align 8, !tbaa !19
  %74 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %66) #35
  store ptr %74, ptr @Aalign.cpmx1, align 8, !tbaa !19
  %75 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %62) #35
  store ptr %75, ptr @Aalign.cpmx2, align 8, !tbaa !19
  %76 = tail call i32 @llvm.smax.i32(i32 %54, i32 %59)
  %77 = add nsw i32 %76, 2
  %78 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %77) #35
  store ptr %78, ptr @Aalign.floatwork, align 8, !tbaa !19
  %79 = tail call ptr @AllocateIntMtx(i32 noundef 26, i32 noundef %77) #35
  store ptr %79, ptr @Aalign.intwork, align 8, !tbaa !19
  %80 = load ptr, ptr @stderr, align 8, !tbaa !19
  %81 = tail call i64 @fwrite(ptr nonnull @.str.1.328, i64 10, i64 1, ptr %80) #38
  store i32 %54, ptr @Aalign.orlgth1, align 4, !tbaa !31
  store i32 %59, ptr @Aalign.orlgth2, align 4, !tbaa !31
  br label %82

82:                                               ; preds = %47, %16
  %83 = phi i32 [ %25, %16 ], [ %59, %47 ]
  %84 = phi i32 [ %17, %16 ], [ %54, %47 ]
  %85 = icmp sgt i32 %4, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %82
  %87 = load ptr, ptr @Aalign.mseq, align 8, !tbaa !19
  %88 = load ptr, ptr @Aalign.mseq1, align 8, !tbaa !19
  %89 = zext i32 %4 to i64
  br label %97

90:                                               ; preds = %97, %82
  %91 = icmp sgt i32 %5, 0
  br i1 %91, label %92, label %112

92:                                               ; preds = %90
  %93 = load ptr, ptr @Aalign.mseq, align 8, !tbaa !19
  %94 = load ptr, ptr @Aalign.mseq2, align 8, !tbaa !19
  %95 = sext i32 %4 to i64
  %96 = zext i32 %5 to i64
  br label %104

97:                                               ; preds = %97, %86
  %98 = phi i64 [ 0, %86 ], [ %102, %97 ]
  %99 = getelementptr inbounds ptr, ptr %87, i64 %98
  %100 = load ptr, ptr %99, align 8, !tbaa !19
  %101 = getelementptr inbounds ptr, ptr %88, i64 %98
  store ptr %100, ptr %101, align 8, !tbaa !19
  %102 = add nuw nsw i64 %98, 1
  %103 = icmp eq i64 %102, %89
  br i1 %103, label %90, label %97, !llvm.loop !641

104:                                              ; preds = %104, %92
  %105 = phi i64 [ 0, %92 ], [ %110, %104 ]
  %106 = add nsw i64 %105, %95
  %107 = getelementptr inbounds ptr, ptr %93, i64 %106
  %108 = load ptr, ptr %107, align 8, !tbaa !19
  %109 = getelementptr inbounds ptr, ptr %94, i64 %105
  store ptr %108, ptr %109, align 8, !tbaa !19
  %110 = add nuw nsw i64 %105, 1
  %111 = icmp eq i64 %110, %96
  br i1 %111, label %112, label %104, !llvm.loop !642

112:                                              ; preds = %104, %90
  %113 = load i32, ptr @commonAlloc1, align 4
  %114 = icmp sgt i32 %84, %113
  %115 = load i32, ptr @commonAlloc2, align 4
  %116 = icmp sgt i32 %83, %115
  %117 = select i1 %114, i1 true, i1 %116
  br i1 %117, label %118, label %144

118:                                              ; preds = %112
  %119 = icmp ne i32 %113, 0
  %120 = icmp ne i32 %115, 0
  %121 = select i1 %119, i1 %120, i1 false
  br i1 %121, label %122, label %128

122:                                              ; preds = %118
  %123 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %123) #35
  %124 = load i32, ptr @Aalign.orlgth1, align 4
  %125 = load i32, ptr @commonAlloc1, align 4
  %126 = load i32, ptr @Aalign.orlgth2, align 4
  %127 = load i32, ptr @commonAlloc2, align 4
  br label %128

128:                                              ; preds = %122, %118
  %129 = phi i32 [ %127, %122 ], [ %115, %118 ]
  %130 = phi i32 [ %126, %122 ], [ %83, %118 ]
  %131 = phi i32 [ %125, %122 ], [ %113, %118 ]
  %132 = phi i32 [ %124, %122 ], [ %84, %118 ]
  %133 = tail call i32 @llvm.smax.i32(i32 %132, i32 %131)
  %134 = tail call i32 @llvm.smax.i32(i32 %130, i32 %129)
  %135 = load ptr, ptr @stderr, align 8, !tbaa !19
  %136 = add nsw i32 %133, 1
  %137 = add nsw i32 %134, 1
  %138 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %135, ptr noundef nonnull @.str.2.329, i32 noundef %136, i32 noundef %137) #36
  %139 = add nsw i32 %133, 10
  %140 = add nsw i32 %134, 10
  %141 = tail call ptr @AllocateIntMtx(i32 noundef %139, i32 noundef %140) #35
  store ptr %141, ptr @commonIP, align 8, !tbaa !19
  %142 = load ptr, ptr @stderr, align 8, !tbaa !19
  %143 = tail call i64 @fwrite(ptr nonnull @.str.3.330, i64 11, i64 1, ptr %142) #38
  store i32 %133, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %134, ptr @commonAlloc2, align 4, !tbaa !31
  br label %144

144:                                              ; preds = %128, %112
  %145 = load ptr, ptr @commonIP, align 8, !tbaa !19
  store ptr %145, ptr @Aalign.ijp, align 8, !tbaa !19
  %146 = load ptr, ptr @Aalign.cpmx1, align 8, !tbaa !19
  %147 = load ptr, ptr %0, align 8, !tbaa !19
  %148 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %147) #40
  %149 = trunc i64 %148 to i32
  tail call void @cpmx_calc(ptr noundef nonnull %0, ptr noundef %146, ptr noundef %2, i32 noundef %149, i32 noundef %4) #35
  %150 = load ptr, ptr @Aalign.cpmx2, align 8, !tbaa !19
  %151 = load ptr, ptr %1, align 8, !tbaa !19
  %152 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %151) #40
  %153 = trunc i64 %152 to i32
  tail call void @cpmx_calc(ptr noundef nonnull %1, ptr noundef %150, ptr noundef %3, i32 noundef %153, i32 noundef %5) #35
  %154 = load ptr, ptr @Aalign.initverticalw, align 8, !tbaa !19
  %155 = load ptr, ptr @Aalign.cpmx2, align 8, !tbaa !19
  %156 = load ptr, ptr @Aalign.cpmx1, align 8, !tbaa !19
  %157 = load ptr, ptr @Aalign.floatwork, align 8, !tbaa !19
  %158 = load ptr, ptr @Aalign.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.331(ptr noundef %154, ptr noundef %155, ptr noundef %156, i32 noundef 0, i32 noundef %20, ptr noundef %157, ptr noundef %158, i32 noundef 1) #39
  %159 = load ptr, ptr @Aalign.currentw, align 8, !tbaa !19
  %160 = load ptr, ptr @Aalign.cpmx1, align 8, !tbaa !19
  %161 = load ptr, ptr @Aalign.cpmx2, align 8, !tbaa !19
  %162 = load ptr, ptr @Aalign.floatwork, align 8, !tbaa !19
  %163 = load ptr, ptr @Aalign.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.331(ptr noundef %159, ptr noundef %160, ptr noundef %161, i32 noundef 0, i32 noundef %23, ptr noundef %162, ptr noundef %163, i32 noundef 1) #39
  %164 = load i32, ptr @outgap, align 4, !tbaa !31
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %168, label %166

166:                                              ; preds = %144
  %167 = load ptr, ptr @Aalign.currentw, align 8, !tbaa !19
  br label %202

168:                                              ; preds = %144
  %169 = icmp slt i32 %20, 1
  br i1 %169, label %176, label %170

170:                                              ; preds = %168
  %171 = load i32, ptr @penalty, align 4, !tbaa !31
  %172 = sitofp i32 %171 to double
  %173 = load ptr, ptr @Aalign.initverticalw, align 8, !tbaa !19
  %174 = add i64 %19, 1
  %175 = and i64 %174, 4294967295
  br label %184

176:                                              ; preds = %184, %168
  %177 = icmp slt i32 %23, 1
  %178 = load ptr, ptr @Aalign.currentw, align 8, !tbaa !19
  br i1 %177, label %202, label %179

179:                                              ; preds = %176
  %180 = load i32, ptr @penalty, align 4, !tbaa !31
  %181 = sitofp i32 %180 to double
  %182 = add i64 %22, 1
  %183 = and i64 %182, 4294967295
  br label %193

184:                                              ; preds = %184, %170
  %185 = phi i64 [ 1, %170 ], [ %191, %184 ]
  %186 = getelementptr inbounds float, ptr %173, i64 %185
  %187 = load float, ptr %186, align 4, !tbaa !167
  %188 = fpext float %187 to double
  %189 = tail call double @llvm.fmuladd.f64(double %172, double 5.000000e-01, double %188)
  %190 = fptrunc double %189 to float
  store float %190, ptr %186, align 4, !tbaa !167
  %191 = add nuw nsw i64 %185, 1
  %192 = icmp eq i64 %191, %175
  br i1 %192, label %176, label %184, !llvm.loop !643

193:                                              ; preds = %193, %179
  %194 = phi i64 [ 1, %179 ], [ %200, %193 ]
  %195 = getelementptr inbounds float, ptr %178, i64 %194
  %196 = load float, ptr %195, align 4, !tbaa !167
  %197 = fpext float %196 to double
  %198 = tail call double @llvm.fmuladd.f64(double %181, double 5.000000e-01, double %197)
  %199 = fptrunc double %198 to float
  store float %199, ptr %195, align 4, !tbaa !167
  %200 = add nuw nsw i64 %194, 1
  %201 = icmp eq i64 %200, %183
  br i1 %201, label %202, label %193, !llvm.loop !644

202:                                              ; preds = %193, %176, %166
  %203 = phi ptr [ %167, %166 ], [ %178, %176 ], [ %178, %193 ]
  %204 = icmp slt i32 %23, 0
  br i1 %204, label %205, label %207

205:                                              ; preds = %202
  %206 = add nsw i32 %23, 1
  br label %228

207:                                              ; preds = %202
  %208 = load ptr, ptr @Aalign.m, align 8, !tbaa !19
  %209 = load ptr, ptr @Aalign.mp, align 8, !tbaa !19
  %210 = add nuw i32 %23, 1
  %211 = zext i32 %210 to i64
  br label %212

212:                                              ; preds = %212, %207
  %213 = phi i64 [ 0, %207 ], [ %224, %212 ]
  %214 = add nsw i64 %213, -1
  %215 = getelementptr inbounds float, ptr %203, i64 %214
  %216 = load float, ptr %215, align 4, !tbaa !167
  %217 = fpext float %216 to double
  %218 = load i32, ptr @penalty, align 4, !tbaa !31
  %219 = sitofp i32 %218 to double
  %220 = tail call double @llvm.fmuladd.f64(double %219, double 5.000000e-01, double %217)
  %221 = fptrunc double %220 to float
  %222 = getelementptr inbounds float, ptr %208, i64 %213
  store float %221, ptr %222, align 4, !tbaa !167
  %223 = getelementptr inbounds i32, ptr %209, i64 %213
  store i32 0, ptr %223, align 4, !tbaa !31
  %224 = add nuw nsw i64 %213, 1
  %225 = icmp eq i64 %224, %211
  br i1 %225, label %226, label %212, !llvm.loop !645

226:                                              ; preds = %212
  %227 = load i32, ptr @outgap, align 4, !tbaa !31
  br label %228

228:                                              ; preds = %226, %205
  %229 = phi i32 [ %206, %205 ], [ %210, %226 ]
  %230 = phi i32 [ %164, %205 ], [ %227, %226 ]
  %231 = shl i64 %22, 32
  %232 = add i64 %231, -4294967296
  %233 = ashr exact i64 %232, 32
  %234 = getelementptr inbounds float, ptr %203, i64 %233
  %235 = load float, ptr %234, align 4, !tbaa !167
  %236 = load ptr, ptr @Aalign.lastverticalw, align 8, !tbaa !19
  store float %235, ptr %236, align 4, !tbaa !167
  %237 = icmp ne i32 %230, 0
  %238 = zext i1 %237 to i32
  %239 = add nsw i32 %238, %20
  %240 = icmp sgt i32 %239, 1
  br i1 %240, label %241, label %344

241:                                              ; preds = %228
  %242 = icmp slt i32 %23, 1
  %243 = zext i32 %239 to i64
  %244 = load ptr, ptr @Aalign.previousw, align 8, !tbaa !19
  %245 = zext i32 %229 to i64
  br label %246

246:                                              ; preds = %334, %241
  %247 = phi ptr [ %203, %241 ], [ %265, %334 ]
  %248 = phi ptr [ %244, %241 ], [ %266, %334 ]
  %249 = phi i64 [ 1, %241 ], [ %340, %334 ]
  %250 = phi float [ 0.000000e+00, %241 ], [ %335, %334 ]
  tail call void @floatncpy(ptr noundef %248, ptr noundef nonnull %247, i32 noundef %229) #35
  %251 = load ptr, ptr @Aalign.initverticalw, align 8, !tbaa !19
  %252 = add nsw i64 %249, -1
  %253 = getelementptr inbounds float, ptr %251, i64 %252
  %254 = load float, ptr %253, align 4, !tbaa !167
  %255 = load ptr, ptr @Aalign.previousw, align 8, !tbaa !19
  store float %254, ptr %255, align 4, !tbaa !167
  %256 = load ptr, ptr @Aalign.currentw, align 8, !tbaa !19
  %257 = load ptr, ptr @Aalign.cpmx1, align 8, !tbaa !19
  %258 = load ptr, ptr @Aalign.cpmx2, align 8, !tbaa !19
  %259 = load ptr, ptr @Aalign.floatwork, align 8, !tbaa !19
  %260 = load ptr, ptr @Aalign.intwork, align 8, !tbaa !19
  %261 = trunc i64 %249 to i32
  tail call fastcc void @match_calc.331(ptr noundef %256, ptr noundef %257, ptr noundef %258, i32 noundef %261, i32 noundef %23, ptr noundef %259, ptr noundef %260, i32 noundef 0) #39
  %262 = load ptr, ptr @Aalign.initverticalw, align 8, !tbaa !19
  %263 = getelementptr inbounds float, ptr %262, i64 %249
  %264 = load float, ptr %263, align 4, !tbaa !167
  %265 = load ptr, ptr @Aalign.currentw, align 8, !tbaa !19
  store float %264, ptr %265, align 4, !tbaa !167
  %266 = load ptr, ptr @Aalign.previousw, align 8, !tbaa !19
  br i1 %242, label %334, label %267

267:                                              ; preds = %246
  %268 = load i32, ptr @penalty, align 4, !tbaa !31
  %269 = sitofp i32 %268 to double
  %270 = load float, ptr %266, align 4, !tbaa !167
  %271 = fpext float %270 to double
  %272 = tail call double @llvm.fmuladd.f64(double %269, double 5.000000e-01, double %271)
  %273 = fptrunc double %272 to float
  %274 = load ptr, ptr @Aalign.ijp, align 8, !tbaa !19
  %275 = getelementptr inbounds ptr, ptr %274, i64 %249
  %276 = load ptr, ptr %275, align 8, !tbaa !19
  %277 = load ptr, ptr @Aalign.m, align 8, !tbaa !19
  %278 = load ptr, ptr @Aalign.mp, align 8
  %279 = trunc i64 %252 to i32
  br label %280

280:                                              ; preds = %328, %267
  %281 = phi i64 [ 1, %267 ], [ %332, %328 ]
  %282 = phi float [ %273, %267 ], [ %308, %328 ]
  %283 = phi i32 [ 0, %267 ], [ %307, %328 ]
  %284 = add nsw i64 %281, -1
  %285 = getelementptr inbounds float, ptr %266, i64 %284
  %286 = load float, ptr %285, align 4, !tbaa !167
  %287 = getelementptr inbounds i32, ptr %276, i64 %281
  store i32 0, ptr %287, align 4, !tbaa !31
  %288 = load i32, ptr @penalty, align 4, !tbaa !31
  %289 = sitofp i32 %288 to double
  %290 = fmul double %289, 5.000000e-01
  %291 = fptrunc double %290 to float
  %292 = fadd float %282, %291
  %293 = fcmp ogt float %292, %286
  br i1 %293, label %294, label %301

294:                                              ; preds = %280
  %295 = trunc i64 %281 to i32
  %296 = sub i32 %283, %295
  store i32 %296, ptr %287, align 4, !tbaa !31
  %297 = load i32, ptr @penalty, align 4, !tbaa !31
  %298 = sitofp i32 %297 to double
  %299 = fmul double %298, 5.000000e-01
  %300 = fptrunc double %299 to float
  br label %301

301:                                              ; preds = %294, %280
  %302 = phi float [ %300, %294 ], [ %291, %280 ]
  %303 = phi float [ %292, %294 ], [ %286, %280 ]
  %304 = fadd float %286, %302
  %305 = fcmp ugt float %282, %304
  %306 = trunc i64 %284 to i32
  %307 = select i1 %305, i32 %283, i32 %306
  %308 = select i1 %305, float %282, float %304
  %309 = getelementptr inbounds float, ptr %277, i64 %281
  %310 = load float, ptr %309, align 4, !tbaa !167
  %311 = fadd float %310, %302
  %312 = fcmp ogt float %311, %303
  br i1 %312, label %313, label %322

313:                                              ; preds = %301
  %314 = getelementptr inbounds i32, ptr %278, i64 %281
  %315 = load i32, ptr %314, align 4, !tbaa !31
  %316 = sub nsw i32 %261, %315
  store i32 %316, ptr %287, align 4, !tbaa !31
  %317 = load i32, ptr @penalty, align 4, !tbaa !31
  %318 = sitofp i32 %317 to double
  %319 = fmul double %318, 5.000000e-01
  %320 = fptrunc double %319 to float
  %321 = fadd float %286, %320
  br label %322

322:                                              ; preds = %313, %301
  %323 = phi float [ %321, %313 ], [ %304, %301 ]
  %324 = phi float [ %311, %313 ], [ %303, %301 ]
  %325 = fcmp ugt float %310, %323
  br i1 %325, label %328, label %326

326:                                              ; preds = %322
  store float %323, ptr %309, align 4, !tbaa !167
  %327 = getelementptr inbounds i32, ptr %278, i64 %281
  store i32 %279, ptr %327, align 4, !tbaa !31
  br label %328

328:                                              ; preds = %326, %322
  %329 = getelementptr inbounds float, ptr %265, i64 %281
  %330 = load float, ptr %329, align 4, !tbaa !167
  %331 = fadd float %324, %330
  store float %331, ptr %329, align 4, !tbaa !167
  %332 = add nuw nsw i64 %281, 1
  %333 = icmp eq i64 %332, %245
  br i1 %333, label %334, label %280, !llvm.loop !646

334:                                              ; preds = %328, %246
  %335 = phi float [ %250, %246 ], [ %324, %328 ]
  %336 = getelementptr inbounds float, ptr %265, i64 %233
  %337 = load float, ptr %336, align 4, !tbaa !167
  %338 = load ptr, ptr @Aalign.lastverticalw, align 8, !tbaa !19
  %339 = getelementptr inbounds float, ptr %338, i64 %249
  store float %337, ptr %339, align 4, !tbaa !167
  %340 = add nuw nsw i64 %249, 1
  %341 = icmp eq i64 %340, %243
  br i1 %341, label %342, label %246, !llvm.loop !647

342:                                              ; preds = %334
  %.lcssa2 = phi float [ %335, %334 ]
  %.lcssa1 = phi ptr [ %338, %334 ]
  %.lcssa = phi ptr [ %265, %334 ]
  %343 = load i32, ptr @outgap, align 4, !tbaa !31
  br label %344

344:                                              ; preds = %342, %228
  %345 = phi i32 [ %230, %228 ], [ %343, %342 ]
  %346 = phi ptr [ %236, %228 ], [ %.lcssa1, %342 ]
  %347 = phi ptr [ %203, %228 ], [ %.lcssa, %342 ]
  %348 = phi float [ 0.000000e+00, %228 ], [ %.lcssa2, %342 ]
  %349 = load ptr, ptr @Aalign.mseq1, align 8, !tbaa !19
  %350 = load ptr, ptr @Aalign.mseq2, align 8, !tbaa !19
  %351 = load ptr, ptr @Aalign.ijp, align 8, !tbaa !19
  %352 = load ptr, ptr %0, align 8, !tbaa !19
  %353 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %352) #40
  %354 = trunc i64 %353 to i32
  %355 = load ptr, ptr %1, align 8, !tbaa !19
  %356 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %355) #40
  %357 = trunc i64 %356 to i32
  %358 = icmp eq i32 %345, 1
  br i1 %358, label %409, label %359

359:                                              ; preds = %344
  %360 = load float, ptr %346, align 4, !tbaa !167
  %361 = icmp sgt i32 %354, 0
  br i1 %361, label %362, label %369

362:                                              ; preds = %359
  %363 = shl i64 %353, 32
  %364 = ashr exact i64 %363, 32
  %365 = getelementptr inbounds ptr, ptr %351, i64 %364
  %366 = shl i64 %356, 32
  %367 = ashr exact i64 %366, 32
  %368 = and i64 %353, 4294967295
  br label %379

369:                                              ; preds = %390, %359
  %370 = phi float [ %360, %359 ], [ %391, %390 ]
  %371 = icmp sgt i32 %357, 0
  br i1 %371, label %372, label %409

372:                                              ; preds = %369
  %373 = shl i64 %353, 32
  %374 = ashr exact i64 %373, 32
  %375 = getelementptr inbounds ptr, ptr %351, i64 %374
  %376 = shl i64 %356, 32
  %377 = ashr exact i64 %376, 32
  %378 = and i64 %356, 4294967295
  br label %394

379:                                              ; preds = %390, %362
  %380 = phi i64 [ 0, %362 ], [ %392, %390 ]
  %381 = phi float [ %360, %362 ], [ %391, %390 ]
  %382 = getelementptr inbounds float, ptr %346, i64 %380
  %383 = load float, ptr %382, align 4, !tbaa !167
  %384 = fcmp ult float %383, %381
  br i1 %384, label %390, label %385

385:                                              ; preds = %379
  %386 = trunc i64 %380 to i32
  %387 = sub nsw i32 %354, %386
  %388 = load ptr, ptr %365, align 8, !tbaa !19
  %389 = getelementptr inbounds i32, ptr %388, i64 %367
  store i32 %387, ptr %389, align 4, !tbaa !31
  br label %390

390:                                              ; preds = %385, %379
  %391 = phi float [ %383, %385 ], [ %381, %379 ]
  %392 = add nuw nsw i64 %380, 1
  %393 = icmp eq i64 %392, %368
  br i1 %393, label %369, label %379, !llvm.loop !648

394:                                              ; preds = %405, %372
  %395 = phi i64 [ 0, %372 ], [ %407, %405 ]
  %396 = phi float [ %370, %372 ], [ %406, %405 ]
  %397 = getelementptr inbounds float, ptr %347, i64 %395
  %398 = load float, ptr %397, align 4, !tbaa !167
  %399 = fcmp ult float %398, %396
  br i1 %399, label %405, label %400

400:                                              ; preds = %394
  %401 = trunc i64 %395 to i32
  %402 = sub i32 %401, %357
  %403 = load ptr, ptr %375, align 8, !tbaa !19
  %404 = getelementptr inbounds i32, ptr %403, i64 %377
  store i32 %402, ptr %404, align 4, !tbaa !31
  br label %405

405:                                              ; preds = %400, %394
  %406 = phi float [ %398, %400 ], [ %396, %394 ]
  %407 = add nuw nsw i64 %395, 1
  %408 = icmp eq i64 %407, %378
  br i1 %408, label %409, label %394, !llvm.loop !649

409:                                              ; preds = %405, %369, %344
  %410 = icmp slt i32 %354, 0
  br i1 %410, label %414, label %411

411:                                              ; preds = %409
  %412 = add i64 %353, 1
  %413 = and i64 %412, 4294967295
  br label %456

414:                                              ; preds = %456, %409
  %415 = icmp slt i32 %357, 0
  br i1 %415, label %463, label %416

416:                                              ; preds = %414
  %417 = load ptr, ptr %351, align 8, !tbaa !19
  %418 = add i64 %356, 1
  %419 = and i64 %418, 4294967295
  %420 = add nuw nsw i64 %419, 3
  %421 = and i64 %420, 8589934588
  %422 = add nsw i64 %419, -1
  %423 = insertelement <4 x i64> poison, i64 %422, i64 0
  %424 = shufflevector <4 x i64> %423, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %425

425:                                              ; preds = %452, %416
  %426 = phi i64 [ 0, %416 ], [ %453, %452 ]
  %427 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %416 ], [ %454, %452 ]
  %428 = trunc i64 %426 to i32
  %429 = icmp ule <4 x i64> %427, %424
  %430 = extractelement <4 x i1> %429, i64 0
  br i1 %430, label %431, label %434

431:                                              ; preds = %425
  %432 = getelementptr inbounds i32, ptr %417, i64 %426
  %433 = xor i32 %428, -1
  store i32 %433, ptr %432, align 4, !tbaa !31
  br label %434

434:                                              ; preds = %431, %425
  %435 = extractelement <4 x i1> %429, i64 1
  br i1 %435, label %436, label %440

436:                                              ; preds = %434
  %437 = or i64 %426, 1
  %438 = getelementptr inbounds i32, ptr %417, i64 %437
  %439 = xor i32 %428, -2
  store i32 %439, ptr %438, align 4, !tbaa !31
  br label %440

440:                                              ; preds = %436, %434
  %441 = extractelement <4 x i1> %429, i64 2
  br i1 %441, label %442, label %446

442:                                              ; preds = %440
  %443 = or i64 %426, 2
  %444 = getelementptr inbounds i32, ptr %417, i64 %443
  %445 = xor i32 %428, -3
  store i32 %445, ptr %444, align 4, !tbaa !31
  br label %446

446:                                              ; preds = %442, %440
  %447 = extractelement <4 x i1> %429, i64 3
  br i1 %447, label %448, label %452

448:                                              ; preds = %446
  %449 = or i64 %426, 3
  %450 = getelementptr inbounds i32, ptr %417, i64 %449
  %451 = xor i32 %428, -4
  store i32 %451, ptr %450, align 4, !tbaa !31
  br label %452

452:                                              ; preds = %448, %446
  %453 = add i64 %426, 4
  %454 = add <4 x i64> %427, <i64 4, i64 4, i64 4, i64 4>
  %455 = icmp eq i64 %453, %421
  br i1 %455, label %463, label %425, !llvm.loop !650

456:                                              ; preds = %456, %411
  %457 = phi i64 [ 0, %411 ], [ %458, %456 ]
  %458 = add nuw nsw i64 %457, 1
  %459 = getelementptr inbounds ptr, ptr %351, i64 %457
  %460 = load ptr, ptr %459, align 8, !tbaa !19
  %461 = trunc i64 %458 to i32
  store i32 %461, ptr %460, align 4, !tbaa !31
  %462 = icmp eq i64 %458, %413
  br i1 %462, label %414, label %456, !llvm.loop !651

463:                                              ; preds = %452, %414
  br i1 %85, label %464, label %469

464:                                              ; preds = %463
  %465 = add i64 %356, %353
  %466 = shl i64 %465, 32
  %467 = ashr exact i64 %466, 32
  %468 = zext i32 %4 to i64
  br label %475

469:                                              ; preds = %475, %463
  br i1 %91, label %470, label %482

470:                                              ; preds = %469
  %471 = add i64 %356, %353
  %472 = shl i64 %471, 32
  %473 = ashr exact i64 %472, 32
  %474 = zext i32 %5 to i64
  br label %488

475:                                              ; preds = %475, %464
  %476 = phi i64 [ 0, %464 ], [ %480, %475 ]
  %477 = getelementptr inbounds ptr, ptr %349, i64 %476
  %478 = load ptr, ptr %477, align 8, !tbaa !19
  %479 = getelementptr inbounds i8, ptr %478, i64 %467
  store ptr %479, ptr %477, align 8, !tbaa !19
  store i8 0, ptr %479, align 1, !tbaa !17
  %480 = add nuw nsw i64 %476, 1
  %481 = icmp eq i64 %480, %468
  br i1 %481, label %469, label %475, !llvm.loop !652

482:                                              ; preds = %488, %469
  %483 = add nsw i32 %357, %354
  %484 = icmp slt i32 %483, 0
  br i1 %484, label %627, label %485

485:                                              ; preds = %482
  %486 = zext i32 %4 to i64
  %487 = zext i32 %5 to i64
  br label %495

488:                                              ; preds = %488, %470
  %489 = phi i64 [ 0, %470 ], [ %493, %488 ]
  %490 = getelementptr inbounds ptr, ptr %350, i64 %489
  %491 = load ptr, ptr %490, align 8, !tbaa !19
  %492 = getelementptr inbounds i8, ptr %491, i64 %473
  store ptr %492, ptr %490, align 8, !tbaa !19
  store i8 0, ptr %492, align 1, !tbaa !17
  %493 = add nuw nsw i64 %489, 1
  %494 = icmp eq i64 %493, %474
  br i1 %494, label %482, label %488, !llvm.loop !653

495:                                              ; preds = %624, %485
  %496 = phi i32 [ 0, %485 ], [ %625, %624 ]
  %497 = phi i32 [ %357, %485 ], [ %517, %624 ]
  %498 = phi i32 [ %354, %485 ], [ %515, %624 ]
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds ptr, ptr %351, i64 %499
  %501 = load ptr, ptr %500, align 8, !tbaa !19
  %502 = sext i32 %497 to i64
  %503 = getelementptr inbounds i32, ptr %501, i64 %502
  %504 = load i32, ptr %503, align 4, !tbaa !31
  %505 = icmp slt i32 %504, 0
  br i1 %505, label %506, label %508

506:                                              ; preds = %495
  %507 = add nsw i32 %498, -1
  br label %514

508:                                              ; preds = %495
  %509 = icmp eq i32 %504, 0
  br i1 %509, label %512, label %510

510:                                              ; preds = %508
  %511 = sub nsw i32 %498, %504
  br label %514

512:                                              ; preds = %508
  %513 = add nsw i32 %498, -1
  br label %514

514:                                              ; preds = %512, %510, %506
  %515 = phi i32 [ %507, %506 ], [ %511, %510 ], [ %513, %512 ]
  %516 = phi i32 [ %504, %506 ], [ -1, %510 ], [ -1, %512 ]
  %517 = add nsw i32 %516, %497
  %518 = xor i32 %515, -1
  %519 = add i32 %498, %518
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %555, label %521

521:                                              ; preds = %514
  %522 = sext i32 %519 to i64
  %523 = sext i32 %515 to i64
  %524 = add i32 %498, -1
  br label %525

525:                                              ; preds = %548, %521
  %526 = phi i64 [ %522, %521 ], [ %549, %548 ]
  br i1 %85, label %527, label %529

527:                                              ; preds = %525
  %528 = add nsw i64 %526, %523
  br label %530

529:                                              ; preds = %530, %525
  br i1 %91, label %541, label %548

530:                                              ; preds = %530, %527
  %531 = phi i64 [ 0, %527 ], [ %539, %530 ]
  %532 = getelementptr inbounds ptr, ptr %0, i64 %531
  %533 = load ptr, ptr %532, align 8, !tbaa !19
  %534 = getelementptr inbounds i8, ptr %533, i64 %528
  %535 = load i8, ptr %534, align 1, !tbaa !17
  %536 = getelementptr inbounds ptr, ptr %349, i64 %531
  %537 = load ptr, ptr %536, align 8, !tbaa !19
  %538 = getelementptr inbounds i8, ptr %537, i64 -1
  store ptr %538, ptr %536, align 8, !tbaa !19
  store i8 %535, ptr %538, align 1, !tbaa !17
  %539 = add nuw nsw i64 %531, 1
  %540 = icmp eq i64 %539, %486
  br i1 %540, label %529, label %530, !llvm.loop !654

541:                                              ; preds = %541, %529
  %542 = phi i64 [ %546, %541 ], [ 0, %529 ]
  %543 = getelementptr inbounds ptr, ptr %350, i64 %542
  %544 = load ptr, ptr %543, align 8, !tbaa !19
  %545 = getelementptr inbounds i8, ptr %544, i64 -1
  store ptr %545, ptr %543, align 8, !tbaa !19
  store i8 45, ptr %545, align 1, !tbaa !17
  %546 = add nuw nsw i64 %542, 1
  %547 = icmp eq i64 %546, %487
  br i1 %547, label %548, label %541, !llvm.loop !655

548:                                              ; preds = %541, %529
  %549 = add nsw i64 %526, -1
  %550 = and i64 %549, 4294967295
  %551 = icmp eq i64 %550, 0
  br i1 %551, label %552, label %525, !llvm.loop !656

552:                                              ; preds = %548
  %553 = add i32 %524, %496
  %554 = sub i32 %553, %515
  br label %555

555:                                              ; preds = %552, %514
  %556 = phi i32 [ %496, %514 ], [ %554, %552 ]
  %557 = icmp eq i32 %516, -1
  br i1 %557, label %591, label %558

558:                                              ; preds = %555
  %559 = xor i32 %516, -1
  %560 = sext i32 %559 to i64
  %561 = sext i32 %517 to i64
  br label %562

562:                                              ; preds = %586, %558
  %563 = phi i64 [ %560, %558 ], [ %588, %586 ]
  %564 = phi i32 [ %556, %558 ], [ %587, %586 ]
  br i1 %85, label %568, label %565

565:                                              ; preds = %568, %562
  br i1 %91, label %566, label %586

566:                                              ; preds = %565
  %567 = add nsw i64 %563, %561
  br label %575

568:                                              ; preds = %568, %562
  %569 = phi i64 [ %573, %568 ], [ 0, %562 ]
  %570 = getelementptr inbounds ptr, ptr %349, i64 %569
  %571 = load ptr, ptr %570, align 8, !tbaa !19
  %572 = getelementptr inbounds i8, ptr %571, i64 -1
  store ptr %572, ptr %570, align 8, !tbaa !19
  store i8 45, ptr %572, align 1, !tbaa !17
  %573 = add nuw nsw i64 %569, 1
  %574 = icmp eq i64 %573, %486
  br i1 %574, label %565, label %568, !llvm.loop !657

575:                                              ; preds = %575, %566
  %576 = phi i64 [ 0, %566 ], [ %584, %575 ]
  %577 = getelementptr inbounds ptr, ptr %1, i64 %576
  %578 = load ptr, ptr %577, align 8, !tbaa !19
  %579 = getelementptr inbounds i8, ptr %578, i64 %567
  %580 = load i8, ptr %579, align 1, !tbaa !17
  %581 = getelementptr inbounds ptr, ptr %350, i64 %576
  %582 = load ptr, ptr %581, align 8, !tbaa !19
  %583 = getelementptr inbounds i8, ptr %582, i64 -1
  store ptr %583, ptr %581, align 8, !tbaa !19
  store i8 %580, ptr %583, align 1, !tbaa !17
  %584 = add nuw nsw i64 %576, 1
  %585 = icmp eq i64 %584, %487
  br i1 %585, label %586, label %575, !llvm.loop !658

586:                                              ; preds = %575, %565
  %587 = add nsw i32 %564, 1
  %588 = add nsw i64 %563, -1
  %589 = and i64 %588, 4294967295
  %590 = icmp eq i64 %589, 0
  br i1 %590, label %591, label %562, !llvm.loop !659

591:                                              ; preds = %586, %555
  %592 = phi i32 [ %556, %555 ], [ %587, %586 ]
  %593 = icmp slt i32 %498, 1
  %594 = icmp slt i32 %497, 1
  %595 = or i1 %594, %593
  br i1 %595, label %627, label %596

596:                                              ; preds = %591
  br i1 %85, label %597, label %599

597:                                              ; preds = %596
  %598 = sext i32 %515 to i64
  br label %602

599:                                              ; preds = %602, %596
  br i1 %91, label %600, label %624

600:                                              ; preds = %599
  %601 = sext i32 %517 to i64
  br label %613

602:                                              ; preds = %602, %597
  %603 = phi i64 [ 0, %597 ], [ %611, %602 ]
  %604 = getelementptr inbounds ptr, ptr %0, i64 %603
  %605 = load ptr, ptr %604, align 8, !tbaa !19
  %606 = getelementptr inbounds i8, ptr %605, i64 %598
  %607 = load i8, ptr %606, align 1, !tbaa !17
  %608 = getelementptr inbounds ptr, ptr %349, i64 %603
  %609 = load ptr, ptr %608, align 8, !tbaa !19
  %610 = getelementptr inbounds i8, ptr %609, i64 -1
  store ptr %610, ptr %608, align 8, !tbaa !19
  store i8 %607, ptr %610, align 1, !tbaa !17
  %611 = add nuw nsw i64 %603, 1
  %612 = icmp eq i64 %611, %486
  br i1 %612, label %599, label %602, !llvm.loop !660

613:                                              ; preds = %613, %600
  %614 = phi i64 [ 0, %600 ], [ %622, %613 ]
  %615 = getelementptr inbounds ptr, ptr %1, i64 %614
  %616 = load ptr, ptr %615, align 8, !tbaa !19
  %617 = getelementptr inbounds i8, ptr %616, i64 %601
  %618 = load i8, ptr %617, align 1, !tbaa !17
  %619 = getelementptr inbounds ptr, ptr %350, i64 %614
  %620 = load ptr, ptr %619, align 8, !tbaa !19
  %621 = getelementptr inbounds i8, ptr %620, i64 -1
  store ptr %621, ptr %619, align 8, !tbaa !19
  store i8 %618, ptr %621, align 1, !tbaa !17
  %622 = add nuw nsw i64 %614, 1
  %623 = icmp eq i64 %622, %487
  br i1 %623, label %624, label %613, !llvm.loop !661

624:                                              ; preds = %613, %599
  %625 = add nsw i32 %592, 2
  %626 = icmp sgt i32 %625, %483
  br i1 %626, label %627, label %495, !llvm.loop !662

627:                                              ; preds = %624, %591, %482
  %628 = load ptr, ptr %349, align 8, !tbaa !19
  %629 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %628) #40
  %630 = trunc i64 %629 to i32
  %631 = icmp sgt i32 %630, %6
  %632 = icmp sgt i32 %630, 5000000
  %633 = or i1 %631, %632
  br i1 %633, label %634, label %637

634:                                              ; preds = %627
  %635 = load ptr, ptr @stderr, align 8, !tbaa !19
  %636 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %635, ptr noundef nonnull @.str.4.332, i32 noundef %6, i32 noundef %630, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.5.333) #35
  br label %637

637:                                              ; preds = %634, %627
  br i1 %85, label %638, label %641

638:                                              ; preds = %637
  %639 = load ptr, ptr @Aalign.mseq1, align 8, !tbaa !19
  %640 = zext i32 %4 to i64
  br label %645

641:                                              ; preds = %645, %637
  br i1 %91, label %642, label %663

642:                                              ; preds = %641
  %643 = load ptr, ptr @Aalign.mseq2, align 8, !tbaa !19
  %644 = zext i32 %5 to i64
  br label %654

645:                                              ; preds = %645, %638
  %646 = phi i64 [ 0, %638 ], [ %652, %645 ]
  %647 = getelementptr inbounds ptr, ptr %0, i64 %646
  %648 = load ptr, ptr %647, align 8, !tbaa !19
  %649 = getelementptr inbounds ptr, ptr %639, i64 %646
  %650 = load ptr, ptr %649, align 8, !tbaa !19
  %651 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %648, ptr noundef nonnull dereferenceable(1) %650) #35
  %652 = add nuw nsw i64 %646, 1
  %653 = icmp eq i64 %652, %640
  br i1 %653, label %641, label %645, !llvm.loop !663

654:                                              ; preds = %654, %642
  %655 = phi i64 [ 0, %642 ], [ %661, %654 ]
  %656 = getelementptr inbounds ptr, ptr %1, i64 %655
  %657 = load ptr, ptr %656, align 8, !tbaa !19
  %658 = getelementptr inbounds ptr, ptr %643, i64 %655
  %659 = load ptr, ptr %658, align 8, !tbaa !19
  %660 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %657, ptr noundef nonnull dereferenceable(1) %659) #35
  %661 = add nuw nsw i64 %655, 1
  %662 = icmp eq i64 %661, %644
  br i1 %662, label %663, label %654, !llvm.loop !664

663:                                              ; preds = %654, %641
  ret float %348
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @match_calc.331(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7) unnamed_addr #16 {
  %9 = alloca [26 x float], align 16
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #34
  %10 = icmp ne i32 %7, 0
  %11 = icmp sgt i32 %4, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %46

13:                                               ; preds = %8
  %14 = zext i32 %4 to i64
  br label %15

15:                                               ; preds = %39, %13
  %16 = phi i64 [ 0, %13 ], [ %44, %39 ]
  br label %17

17:                                               ; preds = %35, %15
  %18 = phi i64 [ 0, %15 ], [ %37, %35 ]
  %19 = phi i32 [ 0, %15 ], [ %36, %35 ]
  %20 = getelementptr inbounds ptr, ptr %2, i64 %18
  %21 = load ptr, ptr %20, align 8, !tbaa !19
  %22 = getelementptr inbounds float, ptr %21, i64 %16
  %23 = load float, ptr %22, align 4, !tbaa !167
  %24 = fcmp une float %23, 0.000000e+00
  br i1 %24, label %25, label %35

25:                                               ; preds = %17
  %26 = sext i32 %19 to i64
  %27 = getelementptr inbounds ptr, ptr %5, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !19
  %29 = getelementptr inbounds float, ptr %28, i64 %16
  store float %23, ptr %29, align 4, !tbaa !167
  %30 = getelementptr inbounds ptr, ptr %6, i64 %26
  %31 = load ptr, ptr %30, align 8, !tbaa !19
  %32 = getelementptr inbounds i32, ptr %31, i64 %16
  %33 = trunc i64 %18 to i32
  store i32 %33, ptr %32, align 4, !tbaa !31
  %34 = add nsw i32 %19, 1
  br label %35

35:                                               ; preds = %25, %17
  %36 = phi i32 [ %34, %25 ], [ %19, %17 ]
  %37 = add nuw nsw i64 %18, 1
  %38 = icmp eq i64 %37, 26
  br i1 %38, label %39, label %17, !llvm.loop !665

39:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %36, %35 ]
  %40 = sext i32 %.lcssa1 to i64
  %41 = getelementptr inbounds ptr, ptr %6, i64 %40
  %42 = load ptr, ptr %41, align 8, !tbaa !19
  %43 = getelementptr inbounds i32, ptr %42, i64 %16
  store i32 -1, ptr %43, align 4, !tbaa !31
  %44 = add nuw nsw i64 %16, 1
  %45 = icmp eq i64 %44, %14
  br i1 %45, label %46, label %15, !llvm.loop !666

46:                                               ; preds = %39, %8
  %47 = sext i32 %3 to i64
  br label %52

48:                                               ; preds = %68
  br i1 %11, label %49, label %98

49:                                               ; preds = %48
  %50 = load ptr, ptr %6, align 8, !tbaa !19
  %51 = zext i32 %4 to i64
  br label %71

52:                                               ; preds = %68, %46
  %53 = phi i64 [ 0, %46 ], [ %69, %68 ]
  %54 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %53
  br label %55

55:                                               ; preds = %55, %52
  %56 = phi i64 [ 0, %52 ], [ %66, %55 ]
  %57 = phi float [ 0.000000e+00, %52 ], [ %65, %55 ]
  %58 = getelementptr inbounds [26 x [26 x i32]], ptr @n_dis, i64 0, i64 %56, i64 %53
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = sitofp i32 %59 to float
  %61 = getelementptr inbounds ptr, ptr %1, i64 %56
  %62 = load ptr, ptr %61, align 8, !tbaa !19
  %63 = getelementptr inbounds float, ptr %62, i64 %47
  %64 = load float, ptr %63, align 4, !tbaa !167
  %65 = tail call float @llvm.fmuladd.f32(float %60, float %64, float %57)
  %66 = add nuw nsw i64 %56, 1
  %67 = icmp eq i64 %66, 26
  br i1 %67, label %68, label %55, !llvm.loop !667

68:                                               ; preds = %55
  %.lcssa = phi float [ %65, %55 ]
  store float %.lcssa, ptr %54, align 4, !tbaa !167
  %69 = add nuw nsw i64 %53, 1
  %70 = icmp eq i64 %69, 26
  br i1 %70, label %48, label %52, !llvm.loop !668

71:                                               ; preds = %95, %49
  %72 = phi i64 [ 0, %49 ], [ %96, %95 ]
  %73 = getelementptr inbounds float, ptr %0, i64 %72
  store float 0.000000e+00, ptr %73, align 4, !tbaa !167
  %74 = getelementptr inbounds i32, ptr %50, i64 %72
  %75 = load i32, ptr %74, align 4, !tbaa !31
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %95

77:                                               ; preds = %77, %71
  %78 = phi i64 [ %89, %77 ], [ 0, %71 ]
  %79 = phi float [ %88, %77 ], [ 0.000000e+00, %71 ]
  %80 = phi i32 [ %93, %77 ], [ %75, %71 ]
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %81
  %83 = load float, ptr %82, align 4, !tbaa !167
  %84 = getelementptr inbounds ptr, ptr %5, i64 %78
  %85 = load ptr, ptr %84, align 8, !tbaa !19
  %86 = getelementptr inbounds float, ptr %85, i64 %72
  %87 = load float, ptr %86, align 4, !tbaa !167
  %88 = tail call float @llvm.fmuladd.f32(float %83, float %87, float %79)
  store float %88, ptr %73, align 4, !tbaa !167
  %89 = add nuw nsw i64 %78, 1
  %90 = getelementptr inbounds ptr, ptr %6, i64 %89
  %91 = load ptr, ptr %90, align 8, !tbaa !19
  %92 = getelementptr inbounds i32, ptr %91, i64 %72
  %93 = load i32, ptr %92, align 4, !tbaa !31
  %94 = icmp sgt i32 %93, -1
  br i1 %94, label %77, label %95, !llvm.loop !669

95:                                               ; preds = %77, %71
  %96 = add nuw nsw i64 %72, 1
  %97 = icmp eq i64 %96, %51
  br i1 %97, label %98, label %71, !llvm.loop !670

98:                                               ; preds = %95, %48
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #34
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal float @A__align(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef readnone %7, ptr nocapture noundef %8, ptr noundef %9, ptr noundef %10, ptr noundef %11, ptr noundef %12) #4 {
  %14 = load i32, ptr @penalty, align 4, !tbaa !31
  %15 = sitofp i32 %14 to float
  %16 = load i32, ptr @A__align.orlgth1, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %13
  %19 = load i32, ptr @njob, align 4, !tbaa !31
  %20 = tail call ptr @AllocateCharMtx(i32 noundef %19, i32 noundef 0) #35
  store ptr %20, ptr @A__align.mseq1, align 8, !tbaa !19
  %21 = load i32, ptr @njob, align 4, !tbaa !31
  %22 = tail call ptr @AllocateCharMtx(i32 noundef %21, i32 noundef 0) #35
  store ptr %22, ptr @A__align.mseq2, align 8, !tbaa !19
  %23 = load i32, ptr @A__align.orlgth1, align 4
  br label %24

24:                                               ; preds = %18, %13
  %25 = phi i32 [ %23, %18 ], [ %16, %13 ]
  %26 = load ptr, ptr %0, align 8, !tbaa !19
  %27 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %26) #40
  %28 = trunc i64 %27 to i32
  %29 = load ptr, ptr %1, align 8, !tbaa !19
  %30 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %29) #40
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %25, %28
  %33 = load i32, ptr @A__align.orlgth2, align 4
  %34 = icmp slt i32 %33, %31
  %35 = select i1 %32, i1 true, i1 %34
  br i1 %35, label %36, label %94

36:                                               ; preds = %24
  %37 = icmp sgt i32 %25, 0
  %38 = icmp sgt i32 %33, 0
  %39 = select i1 %37, i1 %38, i1 false
  br i1 %39, label %40, label %59

40:                                               ; preds = %36
  %41 = load ptr, ptr @A__align.w1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %41) #35
  %42 = load ptr, ptr @A__align.w2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %42) #35
  %43 = load ptr, ptr @A__align.match, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %43) #35
  %44 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %44) #35
  %45 = load ptr, ptr @A__align.lastverticalw, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %45) #35
  %46 = load ptr, ptr @A__align.m, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %46) #35
  %47 = load ptr, ptr @A__align.mp, align 8, !tbaa !19
  tail call void @FreeIntVec(ptr noundef %47) #35
  %48 = load ptr, ptr @A__align.mseq, align 8, !tbaa !19
  tail call void @FreeCharMtx(ptr noundef %48) #35
  %49 = load ptr, ptr @A__align.ogcp1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %49) #35
  %50 = load ptr, ptr @A__align.ogcp2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %50) #35
  %51 = load ptr, ptr @A__align.fgcp1, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %51) #35
  %52 = load ptr, ptr @A__align.fgcp2, align 8, !tbaa !19
  tail call void @FreeFloatVec(ptr noundef %52) #35
  %53 = load ptr, ptr @A__align.cpmx1, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %53) #35
  %54 = load ptr, ptr @A__align.cpmx2, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %54) #35
  %55 = load ptr, ptr @A__align.floatwork, align 8, !tbaa !19
  tail call void @FreeFloatMtx(ptr noundef %55) #35
  %56 = load ptr, ptr @A__align.intwork, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %56) #35
  %57 = load i32, ptr @A__align.orlgth1, align 4, !tbaa !31
  %58 = load i32, ptr @A__align.orlgth2, align 4, !tbaa !31
  br label %59

59:                                               ; preds = %40, %36
  %60 = phi i32 [ %58, %40 ], [ %33, %36 ]
  %61 = phi i32 [ %57, %40 ], [ %25, %36 ]
  %62 = sitofp i32 %28 to double
  %63 = fmul double %62, 1.300000e+00
  %64 = fptosi double %63 to i32
  %65 = tail call i32 @llvm.smax.i32(i32 %61, i32 %64)
  %66 = add nuw nsw i32 %65, 100
  %67 = sitofp i32 %31 to double
  %68 = fmul double %67, 1.300000e+00
  %69 = fptosi double %68 to i32
  %70 = tail call i32 @llvm.smax.i32(i32 %60, i32 %69)
  %71 = add nuw nsw i32 %70, 100
  %72 = add nuw nsw i32 %70, 102
  %73 = tail call ptr @AllocateFloatVec(i32 noundef %72) #35
  store ptr %73, ptr @A__align.w1, align 8, !tbaa !19
  %74 = tail call ptr @AllocateFloatVec(i32 noundef %72) #35
  store ptr %74, ptr @A__align.w2, align 8, !tbaa !19
  %75 = tail call ptr @AllocateFloatVec(i32 noundef %72) #35
  store ptr %75, ptr @A__align.match, align 8, !tbaa !19
  %76 = add nuw nsw i32 %65, 102
  %77 = tail call ptr @AllocateFloatVec(i32 noundef %76) #35
  store ptr %77, ptr @A__align.initverticalw, align 8, !tbaa !19
  %78 = tail call ptr @AllocateFloatVec(i32 noundef %76) #35
  store ptr %78, ptr @A__align.lastverticalw, align 8, !tbaa !19
  %79 = tail call ptr @AllocateFloatVec(i32 noundef %72) #35
  store ptr %79, ptr @A__align.m, align 8, !tbaa !19
  %80 = tail call ptr @AllocateIntVec(i32 noundef %72) #35
  store ptr %80, ptr @A__align.mp, align 8, !tbaa !19
  %81 = load i32, ptr @njob, align 4, !tbaa !31
  %82 = add nsw i32 %71, %66
  %83 = tail call ptr @AllocateCharMtx(i32 noundef %81, i32 noundef %82) #35
  store ptr %83, ptr @A__align.mseq, align 8, !tbaa !19
  %84 = tail call ptr @AllocateFloatVec(i32 noundef %76) #35
  store ptr %84, ptr @A__align.ogcp1, align 8, !tbaa !19
  %85 = tail call ptr @AllocateFloatVec(i32 noundef %72) #35
  store ptr %85, ptr @A__align.ogcp2, align 8, !tbaa !19
  %86 = tail call ptr @AllocateFloatVec(i32 noundef %76) #35
  store ptr %86, ptr @A__align.fgcp1, align 8, !tbaa !19
  %87 = tail call ptr @AllocateFloatVec(i32 noundef %72) #35
  store ptr %87, ptr @A__align.fgcp2, align 8, !tbaa !19
  %88 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %76) #35
  store ptr %88, ptr @A__align.cpmx1, align 8, !tbaa !19
  %89 = tail call ptr @AllocateFloatMtx(i32 noundef 26, i32 noundef %72) #35
  store ptr %89, ptr @A__align.cpmx2, align 8, !tbaa !19
  %90 = tail call i32 @llvm.smax.i32(i32 %66, i32 %71)
  %91 = add nuw nsw i32 %90, 2
  %92 = tail call ptr @AllocateFloatMtx(i32 noundef %91, i32 noundef 26) #35
  store ptr %92, ptr @A__align.floatwork, align 8, !tbaa !19
  %93 = tail call ptr @AllocateIntMtx(i32 noundef %91, i32 noundef 27) #35
  store ptr %93, ptr @A__align.intwork, align 8, !tbaa !19
  store i32 %65, ptr @A__align.orlgth1, align 4, !tbaa !31
  store i32 %70, ptr @A__align.orlgth2, align 4, !tbaa !31
  br label %94

94:                                               ; preds = %59, %24
  %95 = phi i32 [ %33, %24 ], [ %70, %59 ]
  %96 = phi i32 [ %25, %24 ], [ %65, %59 ]
  %97 = icmp sgt i32 %4, 0
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = load ptr, ptr @A__align.mseq, align 8, !tbaa !19
  %100 = load ptr, ptr @A__align.mseq1, align 8, !tbaa !19
  %101 = shl i64 %27, 32
  %102 = ashr exact i64 %101, 32
  %103 = zext i32 %4 to i64
  br label %113

104:                                              ; preds = %113, %94
  %105 = icmp sgt i32 %5, 0
  br i1 %105, label %106, label %134

106:                                              ; preds = %104
  %107 = load ptr, ptr @A__align.mseq, align 8, !tbaa !19
  %108 = load ptr, ptr @A__align.mseq2, align 8, !tbaa !19
  %109 = shl i64 %30, 32
  %110 = ashr exact i64 %109, 32
  %111 = sext i32 %4 to i64
  %112 = zext i32 %5 to i64
  br label %123

113:                                              ; preds = %113, %98
  %114 = phi i64 [ 0, %98 ], [ %121, %113 ]
  %115 = getelementptr inbounds ptr, ptr %99, i64 %114
  %116 = load ptr, ptr %115, align 8, !tbaa !19
  %117 = getelementptr inbounds ptr, ptr %100, i64 %114
  store ptr %116, ptr %117, align 8, !tbaa !19
  %118 = getelementptr inbounds ptr, ptr %0, i64 %114
  %119 = load ptr, ptr %118, align 8, !tbaa !19
  %120 = getelementptr inbounds i8, ptr %119, i64 %102
  store i8 0, ptr %120, align 1, !tbaa !17
  %121 = add nuw nsw i64 %114, 1
  %122 = icmp eq i64 %121, %103
  br i1 %122, label %104, label %113, !llvm.loop !671

123:                                              ; preds = %123, %106
  %124 = phi i64 [ 0, %106 ], [ %132, %123 ]
  %125 = add nsw i64 %124, %111
  %126 = getelementptr inbounds ptr, ptr %107, i64 %125
  %127 = load ptr, ptr %126, align 8, !tbaa !19
  %128 = getelementptr inbounds ptr, ptr %108, i64 %124
  store ptr %127, ptr %128, align 8, !tbaa !19
  %129 = getelementptr inbounds ptr, ptr %1, i64 %124
  %130 = load ptr, ptr %129, align 8, !tbaa !19
  %131 = getelementptr inbounds i8, ptr %130, i64 %110
  store i8 0, ptr %131, align 1, !tbaa !17
  %132 = add nuw nsw i64 %124, 1
  %133 = icmp eq i64 %132, %112
  br i1 %133, label %134, label %123, !llvm.loop !672

134:                                              ; preds = %123, %104
  %135 = load i32, ptr @commonAlloc1, align 4
  %136 = icmp sgt i32 %96, %135
  %137 = load i32, ptr @commonAlloc2, align 4
  %138 = icmp sgt i32 %95, %137
  %139 = select i1 %136, i1 true, i1 %138
  br i1 %139, label %142, label %140

140:                                              ; preds = %134
  %141 = load ptr, ptr @commonIP, align 8, !tbaa !19
  br label %162

142:                                              ; preds = %134
  %143 = icmp ne i32 %135, 0
  %144 = icmp ne i32 %137, 0
  %145 = select i1 %143, i1 %144, i1 false
  br i1 %145, label %146, label %152

146:                                              ; preds = %142
  %147 = load ptr, ptr @commonIP, align 8, !tbaa !19
  tail call void @FreeIntMtx(ptr noundef %147) #35
  %148 = load i32, ptr @A__align.orlgth1, align 4
  %149 = load i32, ptr @commonAlloc1, align 4
  %150 = load i32, ptr @A__align.orlgth2, align 4
  %151 = load i32, ptr @commonAlloc2, align 4
  br label %152

152:                                              ; preds = %146, %142
  %153 = phi i32 [ %151, %146 ], [ %137, %142 ]
  %154 = phi i32 [ %150, %146 ], [ %95, %142 ]
  %155 = phi i32 [ %149, %146 ], [ %135, %142 ]
  %156 = phi i32 [ %148, %146 ], [ %96, %142 ]
  %157 = tail call i32 @llvm.smax.i32(i32 %156, i32 %155)
  %158 = tail call i32 @llvm.smax.i32(i32 %154, i32 %153)
  %159 = add nsw i32 %157, 10
  %160 = add nsw i32 %158, 10
  %161 = tail call ptr @AllocateIntMtx(i32 noundef %159, i32 noundef %160) #35
  store ptr %161, ptr @commonIP, align 8, !tbaa !19
  store i32 %157, ptr @commonAlloc1, align 4, !tbaa !31
  store i32 %158, ptr @commonAlloc2, align 4, !tbaa !31
  br label %162

162:                                              ; preds = %152, %140
  %163 = phi ptr [ %141, %140 ], [ %161, %152 ]
  store ptr %163, ptr @A__align.ijp, align 8, !tbaa !19
  %164 = load ptr, ptr @A__align.cpmx1, align 8, !tbaa !19
  tail call void @cpmx_calc_new(ptr noundef nonnull %0, ptr noundef %164, ptr noundef %2, i32 noundef %28, i32 noundef %4) #35
  %165 = load ptr, ptr @A__align.cpmx2, align 8, !tbaa !19
  tail call void @cpmx_calc_new(ptr noundef nonnull %1, ptr noundef %165, ptr noundef %3, i32 noundef %31, i32 noundef %5) #35
  %166 = icmp eq ptr %9, null
  %167 = load ptr, ptr @A__align.ogcp1, align 8, !tbaa !19
  br i1 %166, label %172, label %168

168:                                              ; preds = %162
  tail call void @new_OpeningGapCount(ptr noundef %167, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef nonnull %9) #35
  %169 = load ptr, ptr @A__align.ogcp2, align 8, !tbaa !19
  tail call void @new_OpeningGapCount(ptr noundef %169, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %10) #35
  %170 = load ptr, ptr @A__align.fgcp1, align 8, !tbaa !19
  tail call void @new_FinalGapCount(ptr noundef %170, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28, ptr noundef %11) #35
  %171 = load ptr, ptr @A__align.fgcp2, align 8, !tbaa !19
  tail call void @new_FinalGapCount(ptr noundef %171, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31, ptr noundef %12) #35
  br label %176

172:                                              ; preds = %162
  tail call void @st_OpeningGapCount(ptr noundef %167, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %173 = load ptr, ptr @A__align.ogcp2, align 8, !tbaa !19
  tail call void @st_OpeningGapCount(ptr noundef %173, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  %174 = load ptr, ptr @A__align.fgcp1, align 8, !tbaa !19
  tail call void @st_FinalGapCount(ptr noundef %174, i32 noundef %4, ptr noundef nonnull %0, ptr noundef %2, i32 noundef %28) #35
  %175 = load ptr, ptr @A__align.fgcp2, align 8, !tbaa !19
  tail call void @st_FinalGapCount(ptr noundef %175, i32 noundef %5, ptr noundef nonnull %1, ptr noundef %3, i32 noundef %31) #35
  br label %176

176:                                              ; preds = %172, %168
  %177 = icmp sgt i32 %28, 0
  br i1 %177, label %178, label %183

178:                                              ; preds = %176
  %179 = load ptr, ptr @A__align.ogcp1, align 8, !tbaa !19
  %180 = fpext float %15 to double
  %181 = load ptr, ptr @A__align.fgcp1, align 8, !tbaa !19
  %182 = and i64 %27, 4294967295
  br label %190

183:                                              ; preds = %190, %176
  %184 = icmp sgt i32 %31, 0
  br i1 %184, label %185, label %226

185:                                              ; preds = %183
  %186 = load ptr, ptr @A__align.ogcp2, align 8, !tbaa !19
  %187 = fpext float %15 to double
  %188 = load ptr, ptr @A__align.fgcp2, align 8, !tbaa !19
  %189 = and i64 %30, 4294967295
  br label %208

190:                                              ; preds = %190, %178
  %191 = phi i64 [ 0, %178 ], [ %206, %190 ]
  %192 = getelementptr inbounds float, ptr %179, i64 %191
  %193 = load float, ptr %192, align 4, !tbaa !167
  %194 = fpext float %193 to double
  %195 = fsub double 1.000000e+00, %194
  %196 = fmul double %195, 5.000000e-01
  %197 = fmul double %196, %180
  %198 = fptrunc double %197 to float
  store float %198, ptr %192, align 4, !tbaa !167
  %199 = getelementptr inbounds float, ptr %181, i64 %191
  %200 = load float, ptr %199, align 4, !tbaa !167
  %201 = fpext float %200 to double
  %202 = fsub double 1.000000e+00, %201
  %203 = fmul double %202, 5.000000e-01
  %204 = fmul double %203, %180
  %205 = fptrunc double %204 to float
  store float %205, ptr %199, align 4, !tbaa !167
  %206 = add nuw nsw i64 %191, 1
  %207 = icmp eq i64 %206, %182
  br i1 %207, label %183, label %190, !llvm.loop !673

208:                                              ; preds = %208, %185
  %209 = phi i64 [ 0, %185 ], [ %224, %208 ]
  %210 = getelementptr inbounds float, ptr %186, i64 %209
  %211 = load float, ptr %210, align 4, !tbaa !167
  %212 = fpext float %211 to double
  %213 = fsub double 1.000000e+00, %212
  %214 = fmul double %213, 5.000000e-01
  %215 = fmul double %214, %187
  %216 = fptrunc double %215 to float
  store float %216, ptr %210, align 4, !tbaa !167
  %217 = getelementptr inbounds float, ptr %188, i64 %209
  %218 = load float, ptr %217, align 4, !tbaa !167
  %219 = fpext float %218 to double
  %220 = fsub double 1.000000e+00, %219
  %221 = fmul double %220, 5.000000e-01
  %222 = fmul double %221, %187
  %223 = fptrunc double %222 to float
  store float %223, ptr %217, align 4, !tbaa !167
  %224 = add nuw nsw i64 %209, 1
  %225 = icmp eq i64 %224, %189
  br i1 %225, label %226, label %208, !llvm.loop !674

226:                                              ; preds = %208, %183
  %227 = load ptr, ptr @A__align.w1, align 8, !tbaa !19
  %228 = load ptr, ptr @A__align.w2, align 8, !tbaa !19
  %229 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  %230 = load ptr, ptr @A__align.cpmx2, align 8, !tbaa !19
  %231 = load ptr, ptr @A__align.cpmx1, align 8, !tbaa !19
  %232 = load ptr, ptr @A__align.floatwork, align 8, !tbaa !19
  %233 = load ptr, ptr @A__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.336(ptr noundef %229, ptr noundef %230, ptr noundef %231, i32 noundef 0, i32 noundef %28, ptr noundef %232, ptr noundef %233, i32 noundef 1) #39
  %234 = icmp eq ptr %7, null
  br i1 %234, label %271, label %235

235:                                              ; preds = %226
  br i1 %177, label %236, label %251

236:                                              ; preds = %235
  %237 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  %238 = load ptr, ptr @impmtx.337, align 8, !tbaa !19
  %239 = and i64 %27, 4294967295
  br label %240

240:                                              ; preds = %240, %236
  %241 = phi i64 [ 0, %236 ], [ %249, %240 ]
  %242 = phi ptr [ %237, %236 ], [ %246, %240 ]
  %243 = getelementptr inbounds ptr, ptr %238, i64 %241
  %244 = load ptr, ptr %243, align 8, !tbaa !19
  %245 = load float, ptr %244, align 4, !tbaa !167
  %246 = getelementptr inbounds float, ptr %242, i64 1
  %247 = load float, ptr %242, align 4, !tbaa !167
  %248 = fadd float %245, %247
  store float %248, ptr %242, align 4, !tbaa !167
  %249 = add nuw nsw i64 %241, 1
  %250 = icmp eq i64 %249, %239
  br i1 %250, label %251, label %240, !llvm.loop !675

251:                                              ; preds = %240, %235
  %252 = load ptr, ptr @A__align.cpmx1, align 8, !tbaa !19
  %253 = load ptr, ptr @A__align.cpmx2, align 8, !tbaa !19
  %254 = load ptr, ptr @A__align.floatwork, align 8, !tbaa !19
  %255 = load ptr, ptr @A__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.336(ptr noundef %227, ptr noundef %252, ptr noundef %253, i32 noundef 0, i32 noundef %31, ptr noundef %254, ptr noundef %255, i32 noundef 1) #39
  %256 = icmp eq i32 %31, 0
  br i1 %256, label %279, label %257

257:                                              ; preds = %251
  %258 = load ptr, ptr @impmtx.337, align 8, !tbaa !19
  %259 = load ptr, ptr %258, align 8, !tbaa !19
  br label %260

260:                                              ; preds = %260, %257
  %261 = phi ptr [ %265, %260 ], [ %259, %257 ]
  %262 = phi i32 [ %264, %260 ], [ %31, %257 ]
  %263 = phi ptr [ %267, %260 ], [ %227, %257 ]
  %264 = add nsw i32 %262, -1
  %265 = getelementptr inbounds float, ptr %261, i64 1
  %266 = load float, ptr %261, align 4, !tbaa !167
  %267 = getelementptr inbounds float, ptr %263, i64 1
  %268 = load float, ptr %263, align 4, !tbaa !167
  %269 = fadd float %266, %268
  store float %269, ptr %263, align 4, !tbaa !167
  %270 = icmp eq i32 %264, 0
  br i1 %270, label %276, label %260, !llvm.loop !676

271:                                              ; preds = %226
  %272 = load ptr, ptr @A__align.cpmx1, align 8, !tbaa !19
  %273 = load ptr, ptr @A__align.cpmx2, align 8, !tbaa !19
  %274 = load ptr, ptr @A__align.floatwork, align 8, !tbaa !19
  %275 = load ptr, ptr @A__align.intwork, align 8, !tbaa !19
  tail call fastcc void @match_calc.336(ptr noundef %227, ptr noundef %272, ptr noundef %273, i32 noundef 0, i32 noundef %31, ptr noundef %274, ptr noundef %275, i32 noundef 1) #39
  br label %276

276:                                              ; preds = %271, %260
  %277 = load i32, ptr @outgap, align 4, !tbaa !31
  %278 = icmp eq i32 %277, 1
  br i1 %278, label %288, label %282

279:                                              ; preds = %251
  %280 = load i32, ptr @outgap, align 4, !tbaa !31
  %281 = icmp eq i32 %280, 1
  br i1 %281, label %288, label %327

282:                                              ; preds = %276
  %283 = icmp slt i32 %31, 1
  br i1 %283, label %327, label %284

284:                                              ; preds = %282
  %285 = load i32, ptr @offset, align 4, !tbaa !31
  %286 = add i64 %30, 1
  %287 = and i64 %286, 4294967295
  br label %334

288:                                              ; preds = %279, %276
  %289 = icmp slt i32 %28, 1
  br i1 %289, label %296, label %290

290:                                              ; preds = %288
  %291 = load ptr, ptr @A__align.ogcp1, align 8, !tbaa !19
  %292 = load ptr, ptr @A__align.fgcp1, align 8, !tbaa !19
  %293 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  %294 = add i64 %27, 1
  %295 = and i64 %294, 4294967295
  br label %303

296:                                              ; preds = %303, %288
  %297 = icmp slt i32 %31, 1
  br i1 %297, label %380, label %298

298:                                              ; preds = %296
  %299 = load ptr, ptr @A__align.ogcp2, align 8, !tbaa !19
  %300 = load ptr, ptr @A__align.fgcp2, align 8, !tbaa !19
  %301 = add i64 %30, 1
  %302 = and i64 %301, 4294967295
  br label %315

303:                                              ; preds = %303, %290
  %304 = phi i64 [ 1, %290 ], [ %313, %303 ]
  %305 = load float, ptr %291, align 4, !tbaa !167
  %306 = add nsw i64 %304, -1
  %307 = getelementptr inbounds float, ptr %292, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !167
  %309 = fadd float %305, %308
  %310 = getelementptr inbounds float, ptr %293, i64 %304
  %311 = load float, ptr %310, align 4, !tbaa !167
  %312 = fadd float %309, %311
  store float %312, ptr %310, align 4, !tbaa !167
  %313 = add nuw nsw i64 %304, 1
  %314 = icmp eq i64 %313, %295
  br i1 %314, label %296, label %303, !llvm.loop !677

315:                                              ; preds = %315, %298
  %316 = phi i64 [ 1, %298 ], [ %325, %315 ]
  %317 = load float, ptr %299, align 4, !tbaa !167
  %318 = add nsw i64 %316, -1
  %319 = getelementptr inbounds float, ptr %300, i64 %318
  %320 = load float, ptr %319, align 4, !tbaa !167
  %321 = fadd float %317, %320
  %322 = getelementptr inbounds float, ptr %227, i64 %316
  %323 = load float, ptr %322, align 4, !tbaa !167
  %324 = fadd float %323, %321
  store float %324, ptr %322, align 4, !tbaa !167
  %325 = add nuw nsw i64 %316, 1
  %326 = icmp eq i64 %325, %302
  br i1 %326, label %360, label %315, !llvm.loop !678

327:                                              ; preds = %334, %282, %279
  %328 = icmp slt i32 %28, 1
  br i1 %328, label %360, label %329

329:                                              ; preds = %327
  %330 = load i32, ptr @offset, align 4, !tbaa !31
  %331 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  %332 = add i64 %27, 1
  %333 = and i64 %332, 4294967295
  br label %347

334:                                              ; preds = %334, %284
  %335 = phi i64 [ 1, %284 ], [ %345, %334 ]
  %336 = trunc i64 %335 to i32
  %337 = mul nsw i32 %285, %336
  %338 = sitofp i32 %337 to double
  %339 = fmul double %338, 5.000000e-01
  %340 = getelementptr inbounds float, ptr %227, i64 %335
  %341 = load float, ptr %340, align 4, !tbaa !167
  %342 = fpext float %341 to double
  %343 = fsub double %342, %339
  %344 = fptrunc double %343 to float
  store float %344, ptr %340, align 4, !tbaa !167
  %345 = add nuw nsw i64 %335, 1
  %346 = icmp eq i64 %345, %287
  br i1 %346, label %327, label %334, !llvm.loop !679

347:                                              ; preds = %347, %329
  %348 = phi i64 [ 1, %329 ], [ %358, %347 ]
  %349 = trunc i64 %348 to i32
  %350 = mul nsw i32 %330, %349
  %351 = sitofp i32 %350 to double
  %352 = fmul double %351, 5.000000e-01
  %353 = getelementptr inbounds float, ptr %331, i64 %348
  %354 = load float, ptr %353, align 4, !tbaa !167
  %355 = fpext float %354 to double
  %356 = fsub double %355, %352
  %357 = fptrunc double %356 to float
  store float %357, ptr %353, align 4, !tbaa !167
  %358 = add nuw nsw i64 %348, 1
  %359 = icmp eq i64 %358, %333
  br i1 %359, label %360, label %347, !llvm.loop !680

360:                                              ; preds = %347, %327, %315
  %361 = icmp slt i32 %31, 1
  br i1 %361, label %380, label %362

362:                                              ; preds = %360
  %363 = load ptr, ptr @A__align.ogcp1, align 8, !tbaa !19
  %364 = getelementptr inbounds float, ptr %363, i64 1
  %365 = load ptr, ptr @A__align.m, align 8, !tbaa !19
  %366 = load ptr, ptr @A__align.mp, align 8, !tbaa !19
  %367 = add i64 %30, 1
  %368 = and i64 %367, 4294967295
  br label %369

369:                                              ; preds = %369, %362
  %370 = phi i64 [ 1, %362 ], [ %378, %369 ]
  %371 = add nsw i64 %370, -1
  %372 = getelementptr inbounds float, ptr %227, i64 %371
  %373 = load float, ptr %372, align 4, !tbaa !167
  %374 = load float, ptr %364, align 4, !tbaa !167
  %375 = fadd float %373, %374
  %376 = getelementptr inbounds float, ptr %365, i64 %370
  store float %375, ptr %376, align 4, !tbaa !167
  %377 = getelementptr inbounds i32, ptr %366, i64 %370
  store i32 0, ptr %377, align 4, !tbaa !31
  %378 = add nuw nsw i64 %370, 1
  %379 = icmp eq i64 %378, %368
  br i1 %379, label %380, label %369, !llvm.loop !681

380:                                              ; preds = %369, %360, %296
  %381 = phi i1 [ true, %360 ], [ true, %296 ], [ %361, %369 ]
  %382 = icmp eq i32 %31, 0
  br i1 %382, label %383, label %385

383:                                              ; preds = %380
  %384 = load ptr, ptr @A__align.lastverticalw, align 8, !tbaa !19
  store float 0.000000e+00, ptr %384, align 4, !tbaa !167
  br label %392

385:                                              ; preds = %380
  %386 = shl i64 %30, 32
  %387 = add i64 %386, -4294967296
  %388 = ashr exact i64 %387, 32
  %389 = getelementptr inbounds float, ptr %227, i64 %388
  %390 = load float, ptr %389, align 4, !tbaa !167
  %391 = load ptr, ptr @A__align.lastverticalw, align 8, !tbaa !19
  store float %390, ptr %391, align 4, !tbaa !167
  br label %392

392:                                              ; preds = %385, %383
  %393 = phi ptr [ %391, %385 ], [ %384, %383 ]
  %394 = load i32, ptr @outgap, align 4, !tbaa !31
  %395 = icmp ne i32 %394, 0
  %396 = zext i1 %395 to i32
  %397 = add nsw i32 %396, %28
  %398 = icmp sgt i32 %397, 1
  br i1 %398, label %399, label %516

399:                                              ; preds = %392
  %400 = or i1 %234, %382
  %401 = shl i64 %30, 32
  %402 = add i64 %401, -4294967296
  %403 = ashr exact i64 %402, 32
  %404 = zext i32 %397 to i64
  %405 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  br label %406

406:                                              ; preds = %506, %399
  %407 = phi ptr [ %405, %399 ], [ %436, %506 ]
  %408 = phi i64 [ 1, %399 ], [ %512, %506 ]
  %409 = phi float [ 0.000000e+00, %399 ], [ %507, %506 ]
  %410 = phi ptr [ %227, %399 ], [ %411, %506 ]
  %411 = phi ptr [ %228, %399 ], [ %410, %506 ]
  %412 = add nsw i64 %408, -1
  %413 = getelementptr inbounds float, ptr %407, i64 %412
  %414 = load float, ptr %413, align 4, !tbaa !167
  store float %414, ptr %410, align 4, !tbaa !167
  %415 = load ptr, ptr @A__align.cpmx1, align 8, !tbaa !19
  %416 = load ptr, ptr @A__align.cpmx2, align 8, !tbaa !19
  %417 = load ptr, ptr @A__align.floatwork, align 8, !tbaa !19
  %418 = load ptr, ptr @A__align.intwork, align 8, !tbaa !19
  %419 = trunc i64 %408 to i32
  tail call fastcc void @match_calc.336(ptr noundef %411, ptr noundef %415, ptr noundef %416, i32 noundef %419, i32 noundef %31, ptr noundef %417, ptr noundef %418, i32 noundef 0) #39
  br i1 %400, label %435, label %420

420:                                              ; preds = %406
  %421 = load ptr, ptr @impmtx.337, align 8, !tbaa !19
  %422 = getelementptr inbounds ptr, ptr %421, i64 %408
  %423 = load ptr, ptr %422, align 8, !tbaa !19
  br label %424

424:                                              ; preds = %424, %420
  %425 = phi ptr [ %429, %424 ], [ %423, %420 ]
  %426 = phi i32 [ %428, %424 ], [ %31, %420 ]
  %427 = phi ptr [ %431, %424 ], [ %411, %420 ]
  %428 = add nsw i32 %426, -1
  %429 = getelementptr inbounds float, ptr %425, i64 1
  %430 = load float, ptr %425, align 4, !tbaa !167
  %431 = getelementptr inbounds float, ptr %427, i64 1
  %432 = load float, ptr %427, align 4, !tbaa !167
  %433 = fadd float %430, %432
  store float %433, ptr %427, align 4, !tbaa !167
  %434 = icmp eq i32 %428, 0
  br i1 %434, label %435, label %424, !llvm.loop !676

435:                                              ; preds = %424, %406
  %436 = load ptr, ptr @A__align.initverticalw, align 8, !tbaa !19
  %437 = getelementptr inbounds float, ptr %436, i64 %408
  %438 = load float, ptr %437, align 4, !tbaa !167
  store float %438, ptr %411, align 4, !tbaa !167
  %439 = load ptr, ptr @A__align.fgcp1, align 8, !tbaa !19
  %440 = getelementptr inbounds float, ptr %439, i64 %412
  %441 = load float, ptr %440, align 4, !tbaa !167
  %442 = load ptr, ptr @A__align.ogcp1, align 8, !tbaa !19
  %443 = getelementptr inbounds float, ptr %442, i64 %408
  %444 = load float, ptr %443, align 4, !tbaa !167
  br i1 %381, label %506, label %445

445:                                              ; preds = %435
  %446 = load float, ptr %410, align 4, !tbaa !167
  %447 = load ptr, ptr @A__align.ogcp2, align 8, !tbaa !19
  %448 = getelementptr inbounds float, ptr %447, i64 1
  %449 = load float, ptr %448, align 4, !tbaa !167
  %450 = fadd float %446, %449
  %451 = load ptr, ptr @A__align.fgcp2, align 8, !tbaa !19
  %452 = load ptr, ptr @A__align.mp, align 8, !tbaa !19
  %453 = load ptr, ptr @A__align.m, align 8, !tbaa !19
  %454 = load ptr, ptr @A__align.ijp, align 8, !tbaa !19
  %455 = getelementptr inbounds ptr, ptr %454, i64 %408
  %456 = load ptr, ptr %455, align 8, !tbaa !19
  %457 = trunc i64 %412 to i32
  br label %458

458:                                              ; preds = %499, %445
  %459 = phi ptr [ %473, %499 ], [ %411, %445 ]
  %460 = phi ptr [ %472, %499 ], [ %456, %445 ]
  %461 = phi ptr [ %471, %499 ], [ %453, %445 ]
  %462 = phi ptr [ %470, %499 ], [ %452, %445 ]
  %463 = phi ptr [ %469, %499 ], [ %447, %445 ]
  %464 = phi i32 [ %504, %499 ], [ 1, %445 ]
  %465 = phi ptr [ %503, %499 ], [ %451, %445 ]
  %466 = phi ptr [ %502, %499 ], [ %410, %445 ]
  %467 = phi float [ %487, %499 ], [ %450, %445 ]
  %468 = phi i32 [ %486, %499 ], [ 0, %445 ]
  %469 = getelementptr inbounds float, ptr %463, i64 1
  %470 = getelementptr inbounds i32, ptr %462, i64 1
  %471 = getelementptr inbounds float, ptr %461, i64 1
  %472 = getelementptr inbounds i32, ptr %460, i64 1
  %473 = getelementptr inbounds float, ptr %459, i64 1
  %474 = load float, ptr %466, align 4, !tbaa !167
  store i32 0, ptr %472, align 4, !tbaa !31
  %475 = load float, ptr %465, align 4, !tbaa !167
  %476 = fadd float %467, %475
  %477 = fcmp ogt float %476, %474
  br i1 %477, label %478, label %480

478:                                              ; preds = %458
  %479 = sub i32 %468, %464
  store i32 %479, ptr %472, align 4, !tbaa !31
  br label %480

480:                                              ; preds = %478, %458
  %481 = phi float [ %476, %478 ], [ %474, %458 ]
  %482 = load float, ptr %469, align 4, !tbaa !167
  %483 = fadd float %474, %482
  %484 = fcmp ult float %483, %467
  %485 = add nsw i32 %464, -1
  %486 = select i1 %484, i32 %468, i32 %485
  %487 = select i1 %484, float %467, float %483
  %488 = load float, ptr %471, align 4, !tbaa !167
  %489 = fadd float %441, %488
  %490 = fcmp ogt float %489, %481
  br i1 %490, label %491, label %494

491:                                              ; preds = %480
  %492 = load i32, ptr %470, align 4, !tbaa !31
  %493 = sub nsw i32 %419, %492
  store i32 %493, ptr %472, align 4, !tbaa !31
  br label %494

494:                                              ; preds = %491, %480
  %495 = phi float [ %489, %491 ], [ %481, %480 ]
  %496 = fadd float %444, %474
  %497 = fcmp ult float %496, %488
  br i1 %497, label %499, label %498

498:                                              ; preds = %494
  store float %496, ptr %471, align 4, !tbaa !167
  store i32 %457, ptr %470, align 4, !tbaa !31
  br label %499

499:                                              ; preds = %498, %494
  %500 = load float, ptr %473, align 4, !tbaa !167
  %501 = fadd float %495, %500
  store float %501, ptr %473, align 4, !tbaa !167
  %502 = getelementptr inbounds float, ptr %466, i64 1
  %503 = getelementptr inbounds float, ptr %465, i64 1
  %504 = add nuw i32 %464, 1
  %505 = icmp eq i32 %464, %31
  br i1 %505, label %506, label %458, !llvm.loop !682

506:                                              ; preds = %499, %435
  %507 = phi float [ %409, %435 ], [ %495, %499 ]
  %508 = getelementptr inbounds float, ptr %411, i64 %403
  %509 = load float, ptr %508, align 4, !tbaa !167
  %510 = load ptr, ptr @A__align.lastverticalw, align 8, !tbaa !19
  %511 = getelementptr inbounds float, ptr %510, i64 %408
  store float %509, ptr %511, align 4, !tbaa !167
  %512 = add nuw nsw i64 %408, 1
  %513 = icmp eq i64 %512, %404
  br i1 %513, label %514, label %406, !llvm.loop !683

514:                                              ; preds = %506
  %.lcssa4 = phi float [ %507, %506 ]
  %.lcssa3 = phi ptr [ %510, %506 ]
  %.lcssa2 = phi ptr [ %411, %506 ]
  %515 = load i32, ptr @outgap, align 4, !tbaa !31
  br label %516

516:                                              ; preds = %514, %392
  %517 = phi ptr [ %393, %392 ], [ %.lcssa3, %514 ]
  %518 = phi i32 [ %394, %392 ], [ %515, %514 ]
  %519 = phi ptr [ %227, %392 ], [ %.lcssa2, %514 ]
  %520 = phi float [ 0.000000e+00, %392 ], [ %.lcssa4, %514 ]
  %521 = icmp eq i32 %518, 0
  br i1 %521, label %522, label %563

522:                                              ; preds = %516
  br i1 %381, label %527, label %523

523:                                              ; preds = %522
  %524 = load i32, ptr @offset, align 4, !tbaa !31
  %525 = add i64 %30, 1
  %526 = and i64 %525, 4294967295
  br label %536

527:                                              ; preds = %536, %522
  %528 = icmp slt i32 %28, 1
  br i1 %528, label %563, label %529

529:                                              ; preds = %527
  %530 = load i32, ptr @offset, align 4, !tbaa !31
  %531 = sitofp i32 %530 to double
  %532 = sitofp i32 %28 to double
  %533 = fneg double %531
  %534 = add i64 %27, 1
  %535 = and i64 %534, 4294967295
  br label %550

536:                                              ; preds = %536, %523
  %537 = phi i64 [ 1, %523 ], [ %548, %536 ]
  %538 = trunc i64 %537 to i32
  %539 = sub nsw i32 %31, %538
  %540 = mul nsw i32 %524, %539
  %541 = sitofp i32 %540 to double
  %542 = fmul double %541, 5.000000e-01
  %543 = getelementptr inbounds float, ptr %519, i64 %537
  %544 = load float, ptr %543, align 4, !tbaa !167
  %545 = fpext float %544 to double
  %546 = fsub double %545, %542
  %547 = fptrunc double %546 to float
  store float %547, ptr %543, align 4, !tbaa !167
  %548 = add nuw nsw i64 %537, 1
  %549 = icmp eq i64 %548, %526
  br i1 %549, label %527, label %536, !llvm.loop !684

550:                                              ; preds = %550, %529
  %551 = phi i64 [ 1, %529 ], [ %561, %550 ]
  %552 = trunc i64 %551 to i32
  %553 = sitofp i32 %552 to double
  %554 = fmul double %553, 5.000000e-01
  %555 = fsub double %532, %554
  %556 = getelementptr inbounds float, ptr %517, i64 %551
  %557 = load float, ptr %556, align 4, !tbaa !167
  %558 = fpext float %557 to double
  %559 = tail call double @llvm.fmuladd.f64(double %533, double %555, double %558)
  %560 = fptrunc double %559 to float
  store float %560, ptr %556, align 4, !tbaa !167
  %561 = add nuw nsw i64 %551, 1
  %562 = icmp eq i64 %561, %535
  br i1 %562, label %563, label %550, !llvm.loop !685

563:                                              ; preds = %550, %527, %516
  %564 = load ptr, ptr @A__align.mseq1, align 8, !tbaa !19
  %565 = load ptr, ptr @A__align.mseq2, align 8, !tbaa !19
  %566 = load ptr, ptr @A__align.ijp, align 8, !tbaa !19
  br i1 %234, label %801, label %567

567:                                              ; preds = %563
  %568 = load ptr, ptr %0, align 8, !tbaa !19
  %569 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %568) #40
  %570 = trunc i64 %569 to i32
  %571 = load ptr, ptr %1, align 8, !tbaa !19
  %572 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %571) #40
  %573 = trunc i64 %572 to i32
  %574 = add nsw i32 %573, %570
  %575 = add nsw i32 %574, 1
  %576 = tail call ptr @AllocateCharVec(i32 noundef %575) #35
  %577 = tail call ptr @AllocateCharVec(i32 noundef %575) #35
  %578 = load i32, ptr @outgap, align 4, !tbaa !31
  %579 = icmp eq i32 %578, 1
  br i1 %579, label %630, label %580

580:                                              ; preds = %567
  %581 = load float, ptr %517, align 4, !tbaa !167
  %582 = icmp sgt i32 %570, 0
  br i1 %582, label %583, label %590

583:                                              ; preds = %580
  %584 = shl i64 %569, 32
  %585 = ashr exact i64 %584, 32
  %586 = getelementptr inbounds ptr, ptr %566, i64 %585
  %587 = shl i64 %572, 32
  %588 = ashr exact i64 %587, 32
  %589 = and i64 %569, 4294967295
  br label %600

590:                                              ; preds = %611, %580
  %591 = phi float [ %581, %580 ], [ %612, %611 ]
  %592 = icmp sgt i32 %573, 0
  br i1 %592, label %593, label %630

593:                                              ; preds = %590
  %594 = shl i64 %569, 32
  %595 = ashr exact i64 %594, 32
  %596 = getelementptr inbounds ptr, ptr %566, i64 %595
  %597 = shl i64 %572, 32
  %598 = ashr exact i64 %597, 32
  %599 = and i64 %572, 4294967295
  br label %615

600:                                              ; preds = %611, %583
  %601 = phi i64 [ 0, %583 ], [ %613, %611 ]
  %602 = phi float [ %581, %583 ], [ %612, %611 ]
  %603 = getelementptr inbounds float, ptr %517, i64 %601
  %604 = load float, ptr %603, align 4, !tbaa !167
  %605 = fcmp ult float %604, %602
  br i1 %605, label %611, label %606

606:                                              ; preds = %600
  %607 = trunc i64 %601 to i32
  %608 = sub nsw i32 %570, %607
  %609 = load ptr, ptr %586, align 8, !tbaa !19
  %610 = getelementptr inbounds i32, ptr %609, i64 %588
  store i32 %608, ptr %610, align 4, !tbaa !31
  br label %611

611:                                              ; preds = %606, %600
  %612 = phi float [ %604, %606 ], [ %602, %600 ]
  %613 = add nuw nsw i64 %601, 1
  %614 = icmp eq i64 %613, %589
  br i1 %614, label %590, label %600, !llvm.loop !686

615:                                              ; preds = %626, %593
  %616 = phi i64 [ 0, %593 ], [ %628, %626 ]
  %617 = phi float [ %591, %593 ], [ %627, %626 ]
  %618 = getelementptr inbounds float, ptr %519, i64 %616
  %619 = load float, ptr %618, align 4, !tbaa !167
  %620 = fcmp ult float %619, %617
  br i1 %620, label %626, label %621

621:                                              ; preds = %615
  %622 = trunc i64 %616 to i32
  %623 = sub i32 %622, %573
  %624 = load ptr, ptr %596, align 8, !tbaa !19
  %625 = getelementptr inbounds i32, ptr %624, i64 %598
  store i32 %623, ptr %625, align 4, !tbaa !31
  br label %626

626:                                              ; preds = %621, %615
  %627 = phi float [ %619, %621 ], [ %617, %615 ]
  %628 = add nuw nsw i64 %616, 1
  %629 = icmp eq i64 %628, %599
  br i1 %629, label %630, label %615, !llvm.loop !687

630:                                              ; preds = %626, %590, %567
  %631 = icmp slt i32 %570, 0
  br i1 %631, label %635, label %632

632:                                              ; preds = %630
  %633 = add i64 %569, 1
  %634 = and i64 %633, 4294967295
  br label %677

635:                                              ; preds = %677, %630
  %636 = icmp slt i32 %573, 0
  br i1 %636, label %684, label %637

637:                                              ; preds = %635
  %638 = load ptr, ptr %566, align 8, !tbaa !19
  %639 = add i64 %572, 1
  %640 = and i64 %639, 4294967295
  %641 = add nuw nsw i64 %640, 3
  %642 = and i64 %641, 8589934588
  %643 = add nsw i64 %640, -1
  %644 = insertelement <4 x i64> poison, i64 %643, i64 0
  %645 = shufflevector <4 x i64> %644, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %646

646:                                              ; preds = %673, %637
  %647 = phi i64 [ 0, %637 ], [ %674, %673 ]
  %648 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %637 ], [ %675, %673 ]
  %649 = trunc i64 %647 to i32
  %650 = icmp ule <4 x i64> %648, %645
  %651 = extractelement <4 x i1> %650, i64 0
  br i1 %651, label %652, label %655

652:                                              ; preds = %646
  %653 = getelementptr inbounds i32, ptr %638, i64 %647
  %654 = xor i32 %649, -1
  store i32 %654, ptr %653, align 4, !tbaa !31
  br label %655

655:                                              ; preds = %652, %646
  %656 = extractelement <4 x i1> %650, i64 1
  br i1 %656, label %657, label %661

657:                                              ; preds = %655
  %658 = or i64 %647, 1
  %659 = getelementptr inbounds i32, ptr %638, i64 %658
  %660 = xor i32 %649, -2
  store i32 %660, ptr %659, align 4, !tbaa !31
  br label %661

661:                                              ; preds = %657, %655
  %662 = extractelement <4 x i1> %650, i64 2
  br i1 %662, label %663, label %667

663:                                              ; preds = %661
  %664 = or i64 %647, 2
  %665 = getelementptr inbounds i32, ptr %638, i64 %664
  %666 = xor i32 %649, -3
  store i32 %666, ptr %665, align 4, !tbaa !31
  br label %667

667:                                              ; preds = %663, %661
  %668 = extractelement <4 x i1> %650, i64 3
  br i1 %668, label %669, label %673

669:                                              ; preds = %667
  %670 = or i64 %647, 3
  %671 = getelementptr inbounds i32, ptr %638, i64 %670
  %672 = xor i32 %649, -4
  store i32 %672, ptr %671, align 4, !tbaa !31
  br label %673

673:                                              ; preds = %669, %667
  %674 = add i64 %647, 4
  %675 = add <4 x i64> %648, <i64 4, i64 4, i64 4, i64 4>
  %676 = icmp eq i64 %674, %642
  br i1 %676, label %684, label %646, !llvm.loop !688

677:                                              ; preds = %677, %632
  %678 = phi i64 [ 0, %632 ], [ %679, %677 ]
  %679 = add nuw nsw i64 %678, 1
  %680 = getelementptr inbounds ptr, ptr %566, i64 %678
  %681 = load ptr, ptr %680, align 8, !tbaa !19
  %682 = trunc i64 %679 to i32
  store i32 %682, ptr %681, align 4, !tbaa !31
  %683 = icmp eq i64 %679, %634
  br i1 %683, label %635, label %677, !llvm.loop !689

684:                                              ; preds = %673, %635
  %685 = shl i64 %569, 32
  %686 = ashr exact i64 %685, 32
  %687 = getelementptr inbounds i8, ptr %576, i64 %686
  %688 = shl i64 %572, 32
  %689 = ashr exact i64 %688, 32
  %690 = getelementptr inbounds i8, ptr %687, i64 %689
  store i8 0, ptr %690, align 1, !tbaa !17
  %691 = getelementptr inbounds i8, ptr %577, i64 %686
  %692 = getelementptr inbounds i8, ptr %691, i64 %689
  store i8 0, ptr %692, align 1, !tbaa !17
  store float 0.000000e+00, ptr %8, align 4, !tbaa !167
  %693 = icmp slt i32 %574, 0
  br i1 %693, label %776, label %694

694:                                              ; preds = %771, %684
  %695 = phi ptr [ %773, %771 ], [ %692, %684 ]
  %696 = phi ptr [ %772, %771 ], [ %690, %684 ]
  %697 = phi i32 [ %774, %771 ], [ 0, %684 ]
  %698 = phi i32 [ %716, %771 ], [ %570, %684 ]
  %699 = phi i32 [ %718, %771 ], [ %573, %684 ]
  %700 = sext i32 %698 to i64
  %701 = getelementptr inbounds ptr, ptr %566, i64 %700
  %702 = load ptr, ptr %701, align 8, !tbaa !19
  %703 = sext i32 %699 to i64
  %704 = getelementptr inbounds i32, ptr %702, i64 %703
  %705 = load i32, ptr %704, align 4, !tbaa !31
  %706 = icmp slt i32 %705, 0
  br i1 %706, label %707, label %709

707:                                              ; preds = %694
  %708 = add nsw i32 %698, -1
  br label %715

709:                                              ; preds = %694
  %710 = icmp eq i32 %705, 0
  br i1 %710, label %713, label %711

711:                                              ; preds = %709
  %712 = sub nsw i32 %698, %705
  br label %715

713:                                              ; preds = %709
  %714 = add nsw i32 %698, -1
  br label %715

715:                                              ; preds = %713, %711, %707
  %716 = phi i32 [ %708, %707 ], [ %712, %711 ], [ %714, %713 ]
  %717 = phi i32 [ %705, %707 ], [ -1, %711 ], [ -1, %713 ]
  %718 = add nsw i32 %717, %699
  %719 = xor i32 %716, -1
  %720 = add i32 %698, %719
  %721 = icmp eq i32 %720, 0
  br i1 %721, label %735, label %722

722:                                              ; preds = %715
  %723 = add i32 %698, -1
  br label %724

724:                                              ; preds = %724, %722
  %725 = phi i32 [ %730, %724 ], [ %720, %722 ]
  %726 = phi ptr [ %729, %724 ], [ %695, %722 ]
  %727 = phi ptr [ %728, %724 ], [ %696, %722 ]
  %728 = getelementptr inbounds i8, ptr %727, i64 -1
  store i8 111, ptr %728, align 1, !tbaa !17
  %729 = getelementptr inbounds i8, ptr %726, i64 -1
  store i8 45, ptr %729, align 1, !tbaa !17
  %730 = add nsw i32 %725, -1
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %732, label %724, !llvm.loop !690

732:                                              ; preds = %724
  %.lcssa1 = phi ptr [ %728, %724 ]
  %.lcssa = phi ptr [ %729, %724 ]
  %733 = add i32 %723, %697
  %734 = sub i32 %733, %716
  br label %735

735:                                              ; preds = %732, %715
  %736 = phi i32 [ %697, %715 ], [ %734, %732 ]
  %737 = phi ptr [ %696, %715 ], [ %.lcssa1, %732 ]
  %738 = phi ptr [ %695, %715 ], [ %.lcssa, %732 ]
  %739 = icmp eq i32 %717, -1
  br i1 %739, label %752, label %740

740:                                              ; preds = %735
  %741 = xor i32 %717, -1
  br label %742

742:                                              ; preds = %742, %740
  %743 = phi i32 [ %750, %742 ], [ %741, %740 ]
  %744 = phi ptr [ %748, %742 ], [ %738, %740 ]
  %745 = phi ptr [ %747, %742 ], [ %737, %740 ]
  %746 = phi i32 [ %749, %742 ], [ %736, %740 ]
  %747 = getelementptr inbounds i8, ptr %745, i64 -1
  store i8 45, ptr %747, align 1, !tbaa !17
  %748 = getelementptr inbounds i8, ptr %744, i64 -1
  store i8 111, ptr %748, align 1, !tbaa !17
  %749 = add nsw i32 %746, 1
  %750 = add nsw i32 %743, -1
  %751 = icmp eq i32 %750, 0
  br i1 %751, label %752, label %742, !llvm.loop !691

752:                                              ; preds = %742, %735
  %753 = phi i32 [ %736, %735 ], [ %749, %742 ]
  %754 = phi ptr [ %737, %735 ], [ %747, %742 ]
  %755 = phi ptr [ %738, %735 ], [ %748, %742 ]
  %756 = icmp eq i32 %698, %570
  %757 = icmp eq i32 %699, %573
  %758 = or i1 %756, %757
  br i1 %758, label %767, label %759

759:                                              ; preds = %752
  %760 = load ptr, ptr @impmtx.337, align 8, !tbaa !19
  %761 = getelementptr inbounds ptr, ptr %760, i64 %700
  %762 = load ptr, ptr %761, align 8, !tbaa !19
  %763 = getelementptr inbounds float, ptr %762, i64 %703
  %764 = load float, ptr %763, align 4, !tbaa !167
  %765 = load float, ptr %8, align 4, !tbaa !167
  %766 = fadd float %764, %765
  store float %766, ptr %8, align 4, !tbaa !167
  br label %767

767:                                              ; preds = %759, %752
  %768 = icmp slt i32 %698, 1
  %769 = icmp slt i32 %699, 1
  %770 = or i1 %768, %769
  br i1 %770, label %776, label %771

771:                                              ; preds = %767
  %772 = getelementptr inbounds i8, ptr %754, i64 -1
  store i8 111, ptr %772, align 1, !tbaa !17
  %773 = getelementptr inbounds i8, ptr %755, i64 -1
  store i8 111, ptr %773, align 1, !tbaa !17
  %774 = add nsw i32 %753, 2
  %775 = icmp sgt i32 %774, %574
  br i1 %775, label %776, label %694, !llvm.loop !692

776:                                              ; preds = %771, %767, %684
  %777 = phi ptr [ %690, %684 ], [ %772, %771 ], [ %754, %767 ]
  %778 = phi ptr [ %692, %684 ], [ %773, %771 ], [ %755, %767 ]
  br i1 %97, label %779, label %781

779:                                              ; preds = %776
  %780 = zext i32 %4 to i64
  br label %784

781:                                              ; preds = %784, %776
  br i1 %105, label %782, label %800

782:                                              ; preds = %781
  %783 = zext i32 %5 to i64
  br label %792

784:                                              ; preds = %784, %779
  %785 = phi i64 [ 0, %779 ], [ %790, %784 ]
  %786 = getelementptr inbounds ptr, ptr %564, i64 %785
  %787 = load ptr, ptr %786, align 8, !tbaa !19
  %788 = getelementptr inbounds ptr, ptr %0, i64 %785
  %789 = load ptr, ptr %788, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %787, ptr noundef %789, ptr noundef %777) #35
  %790 = add nuw nsw i64 %785, 1
  %791 = icmp eq i64 %790, %780
  br i1 %791, label %781, label %784, !llvm.loop !693

792:                                              ; preds = %792, %782
  %793 = phi i64 [ 0, %782 ], [ %798, %792 ]
  %794 = getelementptr inbounds ptr, ptr %565, i64 %793
  %795 = load ptr, ptr %794, align 8, !tbaa !19
  %796 = getelementptr inbounds ptr, ptr %1, i64 %793
  %797 = load ptr, ptr %796, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %795, ptr noundef %797, ptr noundef %778) #35
  %798 = add nuw nsw i64 %793, 1
  %799 = icmp eq i64 %798, %783
  br i1 %799, label %800, label %792, !llvm.loop !694

800:                                              ; preds = %792, %781
  tail call void @free(ptr noundef %576) #35
  tail call void @free(ptr noundef %577) #35
  br label %802

801:                                              ; preds = %563
  tail call fastcc void @Atracking.338(ptr noundef %519, ptr noundef %517, ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef %564, ptr noundef %565, ptr noundef %566, i32 noundef %4, i32 noundef %5) #39
  br label %802

802:                                              ; preds = %801, %800
  %803 = load ptr, ptr @A__align.mseq1, align 8, !tbaa !19
  %804 = load ptr, ptr %803, align 8, !tbaa !19
  %805 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %804) #40
  %806 = trunc i64 %805 to i32
  %807 = icmp sgt i32 %806, %6
  %808 = icmp sgt i32 %806, 5000000
  %809 = or i1 %807, %808
  br i1 %809, label %810, label %813

810:                                              ; preds = %802
  %811 = load ptr, ptr @stderr, align 8, !tbaa !19
  %812 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %811, ptr noundef nonnull @.str.339, i32 noundef %6, i32 noundef %806, i32 noundef 5000000) #36
  tail call void @ErrorExit(ptr noundef nonnull @.str.1.340) #35
  br label %813

813:                                              ; preds = %810, %802
  br i1 %97, label %814, label %817

814:                                              ; preds = %813
  %815 = load ptr, ptr @A__align.mseq1, align 8, !tbaa !19
  %816 = zext i32 %4 to i64
  br label %821

817:                                              ; preds = %821, %813
  br i1 %105, label %818, label %839

818:                                              ; preds = %817
  %819 = load ptr, ptr @A__align.mseq2, align 8, !tbaa !19
  %820 = zext i32 %5 to i64
  br label %830

821:                                              ; preds = %821, %814
  %822 = phi i64 [ 0, %814 ], [ %828, %821 ]
  %823 = getelementptr inbounds ptr, ptr %0, i64 %822
  %824 = load ptr, ptr %823, align 8, !tbaa !19
  %825 = getelementptr inbounds ptr, ptr %815, i64 %822
  %826 = load ptr, ptr %825, align 8, !tbaa !19
  %827 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %824, ptr noundef nonnull dereferenceable(1) %826) #35
  %828 = add nuw nsw i64 %822, 1
  %829 = icmp eq i64 %828, %816
  br i1 %829, label %817, label %821, !llvm.loop !695

830:                                              ; preds = %830, %818
  %831 = phi i64 [ 0, %818 ], [ %837, %830 ]
  %832 = getelementptr inbounds ptr, ptr %1, i64 %831
  %833 = load ptr, ptr %832, align 8, !tbaa !19
  %834 = getelementptr inbounds ptr, ptr %819, i64 %831
  %835 = load ptr, ptr %834, align 8, !tbaa !19
  %836 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %833, ptr noundef nonnull dereferenceable(1) %835) #35
  %837 = add nuw nsw i64 %831, 1
  %838 = icmp eq i64 %837, %820
  br i1 %838, label %839, label %830, !llvm.loop !696

839:                                              ; preds = %830, %817
  ret float %520
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @match_calc.336(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7) unnamed_addr #16 {
  %9 = alloca [26 x float], align 16
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #34
  %10 = icmp ne i32 %7, 0
  %11 = icmp sgt i32 %4, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %45

13:                                               ; preds = %8
  %14 = zext i32 %4 to i64
  br label %15

15:                                               ; preds = %39, %13
  %16 = phi i64 [ 0, %13 ], [ %43, %39 ]
  %17 = getelementptr inbounds ptr, ptr %5, i64 %16
  %18 = getelementptr inbounds ptr, ptr %6, i64 %16
  br label %19

19:                                               ; preds = %35, %15
  %20 = phi i64 [ 0, %15 ], [ %37, %35 ]
  %21 = phi i32 [ 0, %15 ], [ %36, %35 ]
  %22 = getelementptr inbounds ptr, ptr %2, i64 %20
  %23 = load ptr, ptr %22, align 8, !tbaa !19
  %24 = getelementptr inbounds float, ptr %23, i64 %16
  %25 = load float, ptr %24, align 4, !tbaa !167
  %26 = fcmp une float %25, 0.000000e+00
  br i1 %26, label %27, label %35

27:                                               ; preds = %19
  %28 = load ptr, ptr %17, align 8, !tbaa !19
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds float, ptr %28, i64 %29
  store float %25, ptr %30, align 4, !tbaa !167
  %31 = load ptr, ptr %18, align 8, !tbaa !19
  %32 = getelementptr inbounds i32, ptr %31, i64 %29
  %33 = trunc i64 %20 to i32
  store i32 %33, ptr %32, align 4, !tbaa !31
  %34 = add nsw i32 %21, 1
  br label %35

35:                                               ; preds = %27, %19
  %36 = phi i32 [ %34, %27 ], [ %21, %19 ]
  %37 = add nuw nsw i64 %20, 1
  %38 = icmp eq i64 %37, 26
  br i1 %38, label %39, label %19, !llvm.loop !697

39:                                               ; preds = %35
  %.lcssa1 = phi i32 [ %36, %35 ]
  %40 = load ptr, ptr %18, align 8, !tbaa !19
  %41 = sext i32 %.lcssa1 to i64
  %42 = getelementptr inbounds i32, ptr %40, i64 %41
  store i32 -1, ptr %42, align 4, !tbaa !31
  %43 = add nuw nsw i64 %16, 1
  %44 = icmp eq i64 %43, %14
  br i1 %44, label %45, label %15, !llvm.loop !698

45:                                               ; preds = %39, %8
  %46 = sext i32 %3 to i64
  br label %49

47:                                               ; preds = %64
  %48 = icmp eq i32 %4, 0
  br i1 %48, label %97, label %67

49:                                               ; preds = %64, %45
  %50 = phi i64 [ 0, %45 ], [ %65, %64 ]
  %51 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %50
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i64 [ 0, %49 ], [ %62, %52 ]
  %54 = phi float [ 0.000000e+00, %49 ], [ %61, %52 ]
  %55 = getelementptr inbounds [26 x [26 x float]], ptr @n_dis_consweight_multi, i64 0, i64 %53, i64 %50
  %56 = load float, ptr %55, align 4, !tbaa !167
  %57 = getelementptr inbounds ptr, ptr %1, i64 %53
  %58 = load ptr, ptr %57, align 8, !tbaa !19
  %59 = getelementptr inbounds float, ptr %58, i64 %46
  %60 = load float, ptr %59, align 4, !tbaa !167
  %61 = tail call float @llvm.fmuladd.f32(float %56, float %60, float %54)
  %62 = add nuw nsw i64 %53, 1
  %63 = icmp eq i64 %62, 26
  br i1 %63, label %64, label %52, !llvm.loop !699

64:                                               ; preds = %52
  %.lcssa = phi float [ %61, %52 ]
  store float %.lcssa, ptr %51, align 4, !tbaa !167
  %65 = add nuw nsw i64 %50, 1
  %66 = icmp eq i64 %65, 26
  br i1 %66, label %47, label %49, !llvm.loop !700

67:                                               ; preds = %94, %47
  %68 = phi i32 [ %72, %94 ], [ %4, %47 ]
  %69 = phi ptr [ %73, %94 ], [ %6, %47 ]
  %70 = phi ptr [ %75, %94 ], [ %5, %47 ]
  %71 = phi ptr [ %95, %94 ], [ %0, %47 ]
  %72 = add nsw i32 %68, -1
  store float 0.000000e+00, ptr %71, align 4, !tbaa !167
  %73 = getelementptr inbounds ptr, ptr %69, i64 1
  %74 = load ptr, ptr %69, align 8, !tbaa !19
  %75 = getelementptr inbounds ptr, ptr %70, i64 1
  %76 = load i32, ptr %74, align 4, !tbaa !31
  %77 = icmp sgt i32 %76, -1
  br i1 %77, label %78, label %94

78:                                               ; preds = %67
  %79 = load ptr, ptr %70, align 8, !tbaa !19
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi float [ 0.000000e+00, %78 ], [ %91, %80 ]
  %82 = phi i32 [ %76, %78 ], [ %92, %80 ]
  %83 = phi ptr [ %74, %78 ], [ %85, %80 ]
  %84 = phi ptr [ %79, %78 ], [ %89, %80 ]
  %85 = getelementptr inbounds i32, ptr %83, i64 1
  %86 = zext i32 %82 to i64
  %87 = getelementptr inbounds [26 x float], ptr %9, i64 0, i64 %86
  %88 = load float, ptr %87, align 4, !tbaa !167
  %89 = getelementptr inbounds float, ptr %84, i64 1
  %90 = load float, ptr %84, align 4, !tbaa !167
  %91 = tail call float @llvm.fmuladd.f32(float %88, float %90, float %81)
  store float %91, ptr %71, align 4, !tbaa !167
  %92 = load i32, ptr %85, align 4, !tbaa !31
  %93 = icmp sgt i32 %92, -1
  br i1 %93, label %80, label %94, !llvm.loop !701

94:                                               ; preds = %80, %67
  %95 = getelementptr inbounds float, ptr %71, i64 1
  %96 = icmp eq i32 %72, 0
  br i1 %96, label %97, label %67, !llvm.loop !702

97:                                               ; preds = %94, %47
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #34
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @Atracking.338(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr nocapture noundef readonly %6, i32 noundef %7, i32 noundef %8) unnamed_addr #4 {
  %10 = load ptr, ptr %2, align 8, !tbaa !19
  %11 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %10) #40
  %12 = trunc i64 %11 to i32
  %13 = load ptr, ptr %3, align 8, !tbaa !19
  %14 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %13) #40
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, %12
  %17 = add nsw i32 %16, 1
  %18 = tail call ptr @AllocateCharVec(i32 noundef %17) #35
  %19 = tail call ptr @AllocateCharVec(i32 noundef %17) #35
  %20 = load i32, ptr @outgap, align 4, !tbaa !31
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %72, label %22

22:                                               ; preds = %9
  %23 = load float, ptr %1, align 4, !tbaa !167
  %24 = icmp sgt i32 %12, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %22
  %26 = shl i64 %11, 32
  %27 = ashr exact i64 %26, 32
  %28 = getelementptr inbounds ptr, ptr %6, i64 %27
  %29 = shl i64 %14, 32
  %30 = ashr exact i64 %29, 32
  %31 = and i64 %11, 4294967295
  br label %42

32:                                               ; preds = %53, %22
  %33 = phi float [ %23, %22 ], [ %54, %53 ]
  %34 = icmp sgt i32 %15, 0
  br i1 %34, label %35, label %72

35:                                               ; preds = %32
  %36 = shl i64 %11, 32
  %37 = ashr exact i64 %36, 32
  %38 = getelementptr inbounds ptr, ptr %6, i64 %37
  %39 = shl i64 %14, 32
  %40 = ashr exact i64 %39, 32
  %41 = and i64 %14, 4294967295
  br label %57

42:                                               ; preds = %53, %25
  %43 = phi i64 [ 0, %25 ], [ %55, %53 ]
  %44 = phi float [ %23, %25 ], [ %54, %53 ]
  %45 = getelementptr inbounds float, ptr %1, i64 %43
  %46 = load float, ptr %45, align 4, !tbaa !167
  %47 = fcmp ult float %46, %44
  br i1 %47, label %53, label %48

48:                                               ; preds = %42
  %49 = trunc i64 %43 to i32
  %50 = sub nsw i32 %12, %49
  %51 = load ptr, ptr %28, align 8, !tbaa !19
  %52 = getelementptr inbounds i32, ptr %51, i64 %30
  store i32 %50, ptr %52, align 4, !tbaa !31
  br label %53

53:                                               ; preds = %48, %42
  %54 = phi float [ %46, %48 ], [ %44, %42 ]
  %55 = add nuw nsw i64 %43, 1
  %56 = icmp eq i64 %55, %31
  br i1 %56, label %32, label %42, !llvm.loop !703

57:                                               ; preds = %68, %35
  %58 = phi i64 [ 0, %35 ], [ %70, %68 ]
  %59 = phi float [ %33, %35 ], [ %69, %68 ]
  %60 = getelementptr inbounds float, ptr %0, i64 %58
  %61 = load float, ptr %60, align 4, !tbaa !167
  %62 = fcmp ult float %61, %59
  br i1 %62, label %68, label %63

63:                                               ; preds = %57
  %64 = trunc i64 %58 to i32
  %65 = sub i32 %64, %15
  %66 = load ptr, ptr %38, align 8, !tbaa !19
  %67 = getelementptr inbounds i32, ptr %66, i64 %40
  store i32 %65, ptr %67, align 4, !tbaa !31
  br label %68

68:                                               ; preds = %63, %57
  %69 = phi float [ %61, %63 ], [ %59, %57 ]
  %70 = add nuw nsw i64 %58, 1
  %71 = icmp eq i64 %70, %41
  br i1 %71, label %72, label %57, !llvm.loop !704

72:                                               ; preds = %68, %32, %9
  %73 = icmp slt i32 %12, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %72
  %75 = add i64 %11, 1
  %76 = and i64 %75, 4294967295
  br label %119

77:                                               ; preds = %119, %72
  %78 = icmp slt i32 %15, 0
  br i1 %78, label %126, label %79

79:                                               ; preds = %77
  %80 = load ptr, ptr %6, align 8, !tbaa !19
  %81 = add i64 %14, 1
  %82 = and i64 %81, 4294967295
  %83 = add nuw nsw i64 %82, 3
  %84 = and i64 %83, 8589934588
  %85 = add nsw i64 %82, -1
  %86 = insertelement <4 x i64> poison, i64 %85, i64 0
  %87 = shufflevector <4 x i64> %86, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %88

88:                                               ; preds = %115, %79
  %89 = phi i64 [ 0, %79 ], [ %116, %115 ]
  %90 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %79 ], [ %117, %115 ]
  %91 = trunc i64 %89 to i32
  %92 = icmp ule <4 x i64> %90, %87
  %93 = extractelement <4 x i1> %92, i64 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %88
  %95 = getelementptr inbounds i32, ptr %80, i64 %89
  %96 = xor i32 %91, -1
  store i32 %96, ptr %95, align 4, !tbaa !31
  br label %97

97:                                               ; preds = %94, %88
  %98 = extractelement <4 x i1> %92, i64 1
  br i1 %98, label %99, label %103

99:                                               ; preds = %97
  %100 = or i64 %89, 1
  %101 = getelementptr inbounds i32, ptr %80, i64 %100
  %102 = xor i32 %91, -2
  store i32 %102, ptr %101, align 4, !tbaa !31
  br label %103

103:                                              ; preds = %99, %97
  %104 = extractelement <4 x i1> %92, i64 2
  br i1 %104, label %105, label %109

105:                                              ; preds = %103
  %106 = or i64 %89, 2
  %107 = getelementptr inbounds i32, ptr %80, i64 %106
  %108 = xor i32 %91, -3
  store i32 %108, ptr %107, align 4, !tbaa !31
  br label %109

109:                                              ; preds = %105, %103
  %110 = extractelement <4 x i1> %92, i64 3
  br i1 %110, label %111, label %115

111:                                              ; preds = %109
  %112 = or i64 %89, 3
  %113 = getelementptr inbounds i32, ptr %80, i64 %112
  %114 = xor i32 %91, -4
  store i32 %114, ptr %113, align 4, !tbaa !31
  br label %115

115:                                              ; preds = %111, %109
  %116 = add i64 %89, 4
  %117 = add <4 x i64> %90, <i64 4, i64 4, i64 4, i64 4>
  %118 = icmp eq i64 %116, %84
  br i1 %118, label %126, label %88, !llvm.loop !705

119:                                              ; preds = %119, %74
  %120 = phi i64 [ 0, %74 ], [ %121, %119 ]
  %121 = add nuw nsw i64 %120, 1
  %122 = getelementptr inbounds ptr, ptr %6, i64 %120
  %123 = load ptr, ptr %122, align 8, !tbaa !19
  %124 = trunc i64 %121 to i32
  store i32 %124, ptr %123, align 4, !tbaa !31
  %125 = icmp eq i64 %121, %76
  br i1 %125, label %77, label %119, !llvm.loop !706

126:                                              ; preds = %115, %77
  %127 = shl i64 %11, 32
  %128 = ashr exact i64 %127, 32
  %129 = getelementptr inbounds i8, ptr %18, i64 %128
  %130 = shl i64 %14, 32
  %131 = ashr exact i64 %130, 32
  %132 = getelementptr inbounds i8, ptr %129, i64 %131
  store i8 0, ptr %132, align 1, !tbaa !17
  %133 = getelementptr inbounds i8, ptr %19, i64 %128
  %134 = getelementptr inbounds i8, ptr %133, i64 %131
  store i8 0, ptr %134, align 1, !tbaa !17
  %135 = icmp slt i32 %16, 0
  br i1 %135, label %206, label %136

136:                                              ; preds = %201, %126
  %137 = phi ptr [ %203, %201 ], [ %134, %126 ]
  %138 = phi ptr [ %202, %201 ], [ %132, %126 ]
  %139 = phi i32 [ %204, %201 ], [ 0, %126 ]
  %140 = phi i32 [ %158, %201 ], [ %12, %126 ]
  %141 = phi i32 [ %160, %201 ], [ %15, %126 ]
  %142 = sext i32 %140 to i64
  %143 = getelementptr inbounds ptr, ptr %6, i64 %142
  %144 = load ptr, ptr %143, align 8, !tbaa !19
  %145 = sext i32 %141 to i64
  %146 = getelementptr inbounds i32, ptr %144, i64 %145
  %147 = load i32, ptr %146, align 4, !tbaa !31
  %148 = icmp slt i32 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %136
  %150 = add nsw i32 %140, -1
  br label %157

151:                                              ; preds = %136
  %152 = icmp eq i32 %147, 0
  br i1 %152, label %155, label %153

153:                                              ; preds = %151
  %154 = sub nsw i32 %140, %147
  br label %157

155:                                              ; preds = %151
  %156 = add nsw i32 %140, -1
  br label %157

157:                                              ; preds = %155, %153, %149
  %158 = phi i32 [ %150, %149 ], [ %154, %153 ], [ %156, %155 ]
  %159 = phi i32 [ %147, %149 ], [ -1, %153 ], [ -1, %155 ]
  %160 = add nsw i32 %159, %141
  %161 = xor i32 %158, -1
  %162 = add i32 %140, %161
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %177, label %164

164:                                              ; preds = %157
  %165 = add i32 %140, -1
  %166 = add i32 %165, %139
  br label %167

167:                                              ; preds = %167, %164
  %168 = phi i32 [ %173, %167 ], [ %162, %164 ]
  %169 = phi ptr [ %172, %167 ], [ %137, %164 ]
  %170 = phi ptr [ %171, %167 ], [ %138, %164 ]
  %171 = getelementptr inbounds i8, ptr %170, i64 -1
  store i8 111, ptr %171, align 1, !tbaa !17
  %172 = getelementptr inbounds i8, ptr %169, i64 -1
  store i8 45, ptr %172, align 1, !tbaa !17
  %173 = add nsw i32 %168, -1
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %167, !llvm.loop !707

175:                                              ; preds = %167
  %.lcssa1 = phi ptr [ %171, %167 ]
  %.lcssa = phi ptr [ %172, %167 ]
  %176 = sub i32 %166, %158
  br label %177

177:                                              ; preds = %175, %157
  %178 = phi i32 [ %139, %157 ], [ %176, %175 ]
  %179 = phi ptr [ %138, %157 ], [ %.lcssa1, %175 ]
  %180 = phi ptr [ %137, %157 ], [ %.lcssa, %175 ]
  %181 = icmp eq i32 %159, -1
  br i1 %181, label %194, label %182

182:                                              ; preds = %177
  %183 = xor i32 %159, -1
  br label %184

184:                                              ; preds = %184, %182
  %185 = phi i32 [ %192, %184 ], [ %183, %182 ]
  %186 = phi ptr [ %190, %184 ], [ %180, %182 ]
  %187 = phi ptr [ %189, %184 ], [ %179, %182 ]
  %188 = phi i32 [ %191, %184 ], [ %178, %182 ]
  %189 = getelementptr inbounds i8, ptr %187, i64 -1
  store i8 45, ptr %189, align 1, !tbaa !17
  %190 = getelementptr inbounds i8, ptr %186, i64 -1
  store i8 111, ptr %190, align 1, !tbaa !17
  %191 = add nsw i32 %188, 1
  %192 = add nsw i32 %185, -1
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %184, !llvm.loop !708

194:                                              ; preds = %184, %177
  %195 = phi i32 [ %178, %177 ], [ %191, %184 ]
  %196 = phi ptr [ %179, %177 ], [ %189, %184 ]
  %197 = phi ptr [ %180, %177 ], [ %190, %184 ]
  %198 = icmp slt i32 %140, 1
  %199 = icmp slt i32 %141, 1
  %200 = or i1 %198, %199
  br i1 %200, label %206, label %201

201:                                              ; preds = %194
  %202 = getelementptr inbounds i8, ptr %196, i64 -1
  store i8 111, ptr %202, align 1, !tbaa !17
  %203 = getelementptr inbounds i8, ptr %197, i64 -1
  store i8 111, ptr %203, align 1, !tbaa !17
  %204 = add nsw i32 %195, 2
  %205 = icmp sgt i32 %204, %16
  br i1 %205, label %206, label %136, !llvm.loop !709

206:                                              ; preds = %201, %194, %126
  %207 = phi ptr [ %132, %126 ], [ %196, %194 ], [ %202, %201 ]
  %208 = phi ptr [ %134, %126 ], [ %197, %194 ], [ %203, %201 ]
  %209 = icmp sgt i32 %7, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %206
  %211 = zext i32 %7 to i64
  br label %216

212:                                              ; preds = %216, %206
  %213 = icmp sgt i32 %8, 0
  br i1 %213, label %214, label %232

214:                                              ; preds = %212
  %215 = zext i32 %8 to i64
  br label %224

216:                                              ; preds = %216, %210
  %217 = phi i64 [ 0, %210 ], [ %222, %216 ]
  %218 = getelementptr inbounds ptr, ptr %4, i64 %217
  %219 = load ptr, ptr %218, align 8, !tbaa !19
  %220 = getelementptr inbounds ptr, ptr %2, i64 %217
  %221 = load ptr, ptr %220, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %219, ptr noundef %221, ptr noundef %207) #35
  %222 = add nuw nsw i64 %217, 1
  %223 = icmp eq i64 %222, %211
  br i1 %223, label %212, label %216, !llvm.loop !710

224:                                              ; preds = %224, %214
  %225 = phi i64 [ 0, %214 ], [ %230, %224 ]
  %226 = getelementptr inbounds ptr, ptr %5, i64 %225
  %227 = load ptr, ptr %226, align 8, !tbaa !19
  %228 = getelementptr inbounds ptr, ptr %3, i64 %225
  %229 = load ptr, ptr %228, align 8, !tbaa !19
  tail call void @gapireru(ptr noundef %227, ptr noundef %229, ptr noundef %208) #35
  %230 = add nuw nsw i64 %225, 1
  %231 = icmp eq i64 %230, %215
  br i1 %231, label %232, label %224, !llvm.loop !711

232:                                              ; preds = %224, %212
  tail call void @free(ptr noundef %18) #35
  tail call void @free(ptr noundef %19) #35
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @cpmx_calc(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4) #16 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  br label %14

9:                                                ; preds = %14, %5
  %10 = phi double [ 0.000000e+00, %5 ], [ %19, %14 ]
  %11 = icmp sgt i32 %3, 0
  %12 = zext i32 %3 to i64
  %13 = shl nuw nsw i64 %12, 2
  br label %22

14:                                               ; preds = %14, %7
  %15 = phi i64 [ 0, %7 ], [ %20, %14 ]
  %16 = phi double [ 0.000000e+00, %7 ], [ %19, %14 ]
  %17 = getelementptr inbounds double, ptr %2, i64 %15
  %18 = load double, ptr %17, align 8, !tbaa !7
  %19 = fadd double %16, %18
  %20 = add nuw nsw i64 %15, 1
  %21 = icmp eq i64 %20, %8
  br i1 %21, label %9, label %14, !llvm.loop !712

22:                                               ; preds = %31, %9
  %23 = phi i64 [ 0, %9 ], [ %32, %31 ]
  br i1 %11, label %26, label %33

24:                                               ; preds = %26
  %25 = zext i32 %4 to i64
  br label %36

26:                                               ; preds = %22
  %27 = getelementptr inbounds ptr, ptr %1, i64 %23
  %28 = load ptr, ptr %27, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr align 4 %28, i8 0, i64 %13, i1 false), !tbaa !167
  %29 = add nuw nsw i64 %23, 1
  %30 = icmp eq i64 %29, 26
  br i1 %30, label %24, label %31

31:                                               ; preds = %33, %26
  %32 = phi i64 [ %29, %26 ], [ %34, %33 ]
  br label %22, !llvm.loop !713

33:                                               ; preds = %22
  %34 = add nuw nsw i64 %23, 1
  %35 = icmp eq i64 %34, 26
  br i1 %35, label %65, label %31

36:                                               ; preds = %62, %24
  %37 = phi i64 [ 0, %24 ], [ %63, %62 ]
  br i1 %6, label %38, label %62

38:                                               ; preds = %38, %36
  %39 = phi i64 [ %60, %38 ], [ 0, %36 ]
  %40 = getelementptr inbounds double, ptr %2, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !7
  %42 = fptrunc double %41 to float
  %43 = fpext float %42 to double
  %44 = fdiv double %43, %10
  %45 = getelementptr inbounds ptr, ptr %0, i64 %39
  %46 = load ptr, ptr %45, align 8, !tbaa !19
  %47 = getelementptr inbounds i8, ptr %46, i64 %37
  %48 = load i8, ptr %47, align 1, !tbaa !17
  %49 = sext i8 %48 to i64
  %50 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %49
  %51 = load i32, ptr %50, align 4, !tbaa !31
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds ptr, ptr %1, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !19
  %55 = getelementptr inbounds float, ptr %54, i64 %37
  %56 = load float, ptr %55, align 4, !tbaa !167
  %57 = fpext float %56 to double
  %58 = fadd double %44, %57
  %59 = fptrunc double %58 to float
  store float %59, ptr %55, align 4, !tbaa !167
  %60 = add nuw nsw i64 %39, 1
  %61 = icmp eq i64 %60, %25
  br i1 %61, label %62, label %38, !llvm.loop !714

62:                                               ; preds = %38, %36
  %63 = add nuw nsw i64 %37, 1
  %64 = icmp eq i64 %63, %12
  br i1 %64, label %65, label %36, !llvm.loop !715

65:                                               ; preds = %62, %33
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @cpmx_calc_new(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4) #16 {
  %6 = icmp eq i32 %3, 0
  %7 = zext i32 %3 to i64
  %8 = shl nuw nsw i64 %7, 2
  br label %17

9:                                                ; preds = %21, %17
  %10 = add nsw i32 %18, -1
  %11 = icmp eq i32 %18, 0
  br i1 %11, label %12, label %17, !llvm.loop !716

12:                                               ; preds = %9
  %13 = icmp sgt i32 %4, 0
  br i1 %13, label %14, label %50

14:                                               ; preds = %12
  %15 = icmp sgt i32 %3, 0
  %16 = zext i32 %4 to i64
  br label %23

17:                                               ; preds = %9, %5
  %18 = phi i32 [ 25, %5 ], [ %10, %9 ]
  %19 = phi ptr [ %1, %5 ], [ %20, %9 ]
  %20 = getelementptr inbounds ptr, ptr %19, i64 1
  br i1 %6, label %9, label %21

21:                                               ; preds = %17
  %22 = load ptr, ptr %19, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr align 4 %22, i8 0, i64 %8, i1 false), !tbaa !167
  br label %9

23:                                               ; preds = %47, %14
  %24 = phi i64 [ 0, %14 ], [ %48, %47 ]
  %25 = getelementptr inbounds double, ptr %2, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !7
  %27 = fptrunc double %26 to float
  br i1 %15, label %28, label %47

28:                                               ; preds = %23
  %29 = getelementptr inbounds ptr, ptr %0, i64 %24
  %30 = load ptr, ptr %29, align 8, !tbaa !19
  br label %31

31:                                               ; preds = %31, %28
  %32 = phi i64 [ 0, %28 ], [ %45, %31 ]
  %33 = phi ptr [ %30, %28 ], [ %34, %31 ]
  %34 = getelementptr inbounds i8, ptr %33, i64 1
  %35 = load i8, ptr %33, align 1, !tbaa !17
  %36 = sext i8 %35 to i64
  %37 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !31
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds ptr, ptr %1, i64 %39
  %41 = load ptr, ptr %40, align 8, !tbaa !19
  %42 = getelementptr inbounds float, ptr %41, i64 %32
  %43 = load float, ptr %42, align 4, !tbaa !167
  %44 = fadd float %43, %27
  store float %44, ptr %42, align 4, !tbaa !167
  %45 = add nuw nsw i64 %32, 1
  %46 = icmp eq i64 %45, %7
  br i1 %46, label %47, label %31, !llvm.loop !717

47:                                               ; preds = %31, %23
  %48 = add nuw nsw i64 %24, 1
  %49 = icmp eq i64 %48, %16
  br i1 %49, label %50, label %23, !llvm.loop !718

50:                                               ; preds = %47, %12
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @MScpmx_calc_new(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4) #16 {
  %6 = icmp eq i32 %3, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %11, %5
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %46

9:                                                ; preds = %7
  %10 = zext i32 %4 to i64
  br label %18

11:                                               ; preds = %11, %5
  %12 = phi i32 [ %14, %11 ], [ %3, %5 ]
  %13 = phi ptr [ %16, %11 ], [ %1, %5 ]
  %14 = add nsw i32 %12, -1
  %15 = load ptr, ptr %13, align 8, !tbaa !19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(104) %15, i8 0, i64 104, i1 false), !tbaa !167
  %16 = getelementptr inbounds ptr, ptr %13, i64 1
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %7, label %11, !llvm.loop !719

18:                                               ; preds = %43, %9
  %19 = phi i64 [ 0, %9 ], [ %44, %43 ]
  %20 = getelementptr inbounds double, ptr %2, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !7
  %22 = fptrunc double %21 to float
  br i1 %6, label %43, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds ptr, ptr %0, i64 %19
  %25 = load ptr, ptr %24, align 8, !tbaa !19
  br label %26

26:                                               ; preds = %26, %23
  %27 = phi ptr [ %33, %26 ], [ %25, %23 ]
  %28 = phi ptr [ %31, %26 ], [ %1, %23 ]
  %29 = phi i32 [ %30, %26 ], [ %3, %23 ]
  %30 = add nsw i32 %29, -1
  %31 = getelementptr inbounds ptr, ptr %28, i64 1
  %32 = load ptr, ptr %28, align 8, !tbaa !19
  %33 = getelementptr inbounds i8, ptr %27, i64 1
  %34 = load i8, ptr %27, align 1, !tbaa !17
  %35 = sext i8 %34 to i64
  %36 = getelementptr inbounds [128 x i32], ptr @amino_n, i64 0, i64 %35
  %37 = load i32, ptr %36, align 4, !tbaa !31
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds float, ptr %32, i64 %38
  %40 = load float, ptr %39, align 4, !tbaa !167
  %41 = fadd float %40, %22
  store float %41, ptr %39, align 4, !tbaa !167
  %42 = icmp eq i32 %30, 0
  br i1 %42, label %43, label %26, !llvm.loop !720

43:                                               ; preds = %26, %18
  %44 = add nuw nsw i64 %19, 1
  %45 = icmp eq i64 %44, %10
  br i1 %45, label %46, label %18, !llvm.loop !721

46:                                               ; preds = %43, %7
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @conjuctionfortbfast(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef %4, ptr nocapture noundef readonly %5, ptr noundef %6) #12 {
  %8 = alloca [256 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %8) #34
  store i8 0, ptr %6, align 1, !tbaa !17
  %9 = load i32, ptr @njob, align 4, !tbaa !31
  %10 = icmp sgt i32 %9, %1
  br i1 %10, label %11, label %59

11:                                               ; preds = %7
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds ptr, ptr %0, i64 %12
  br label %18

14:                                               ; preds = %46
  %.lcssa1 = phi i32 [ %48, %46 ]
  %.lcssa = phi double [ %49, %46 ]
  %15 = icmp sgt i32 %.lcssa1, 0
  br i1 %15, label %16, label %59

16:                                               ; preds = %14
  %17 = zext i32 %.lcssa1 to i64
  br label %52

18:                                               ; preds = %46, %11
  %19 = phi i32 [ %9, %11 ], [ %47, %46 ]
  %20 = phi i64 [ %12, %11 ], [ %27, %46 ]
  %21 = phi double [ 0.000000e+00, %11 ], [ %49, %46 ]
  %22 = phi i32 [ 0, %11 ], [ %48, %46 ]
  %23 = load ptr, ptr %13, align 8, !tbaa !19
  %24 = getelementptr inbounds i8, ptr %23, i64 %20
  %25 = load i8, ptr %24, align 1, !tbaa !17
  %26 = icmp eq i8 %25, 0
  %27 = add nsw i64 %20, 1
  br i1 %26, label %46, label %28

28:                                               ; preds = %18
  %29 = trunc i64 %27 to i32
  %30 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %8, ptr noundef nonnull dereferenceable(1) @.str.1.349, i32 noundef %29) #35
  %31 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %6) #40
  %32 = icmp ult i64 %31, 100
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = call ptr @strcat(ptr noundef nonnull dereferenceable(1) %6, ptr noundef nonnull dereferenceable(1) %8) #35
  br label %35

35:                                               ; preds = %33, %28
  %36 = getelementptr inbounds ptr, ptr %2, i64 %20
  %37 = load ptr, ptr %36, align 8, !tbaa !19
  %38 = sext i32 %22 to i64
  %39 = getelementptr inbounds ptr, ptr %3, i64 %38
  store ptr %37, ptr %39, align 8, !tbaa !19
  %40 = getelementptr inbounds double, ptr %5, i64 %20
  %41 = load double, ptr %40, align 8, !tbaa !7
  %42 = getelementptr inbounds double, ptr %4, i64 %38
  store double %41, ptr %42, align 8, !tbaa !7
  %43 = fadd double %21, %41
  %44 = add nsw i32 %22, 1
  %45 = load i32, ptr @njob, align 4, !tbaa !31
  br label %46

46:                                               ; preds = %35, %18
  %47 = phi i32 [ %45, %35 ], [ %19, %18 ]
  %48 = phi i32 [ %44, %35 ], [ %22, %18 ]
  %49 = phi double [ %43, %35 ], [ %21, %18 ]
  %50 = sext i32 %47 to i64
  %51 = icmp slt i64 %27, %50
  br i1 %51, label %18, label %14, !llvm.loop !722

52:                                               ; preds = %52, %16
  %53 = phi i64 [ 0, %16 ], [ %57, %52 ]
  %54 = getelementptr inbounds double, ptr %4, i64 %53
  %55 = load double, ptr %54, align 8, !tbaa !7
  %56 = fdiv double %55, %.lcssa
  store double %56, ptr %54, align 8, !tbaa !7
  %57 = add nuw nsw i64 %53, 1
  %58 = icmp eq i64 %57, %17
  br i1 %58, label %59, label %52, !llvm.loop !723

59:                                               ; preds = %52, %14, %7
  %60 = phi i32 [ %.lcssa1, %14 ], [ 0, %7 ], [ %.lcssa1, %52 ]
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %8) #34
  ret i32 %60
}

attributes #0 = { nofree nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nofree nounwind }
attributes #9 = { mustprogress nofree nounwind optsize willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { nofree nounwind willreturn memory(argmem: read) }
attributes #32 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { mustprogress nofree nounwind optsize willreturn memory(inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { nounwind }
attributes #35 = { nounwind optsize }
attributes #36 = { cold optsize }
attributes #37 = { noreturn nounwind optsize }
attributes #38 = { cold }
attributes #39 = { optsize }
attributes #40 = { nounwind optsize willreturn memory(read) }
attributes #41 = { nounwind optsize allocsize(0,1) }
attributes #42 = { nounwind optsize allocsize(1) }
attributes #43 = { nounwind optsize willreturn memory(none) }
attributes #44 = { nounwind optsize allocsize(0) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !12}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !12}
!16 = distinct !{!16, !12}
!17 = !{!9, !9, i64 0}
!18 = distinct !{!18, !12}
!19 = !{!20, !20, i64 0}
!20 = !{!"any pointer", !9, i64 0}
!21 = distinct !{!21, !12}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !12}
!24 = distinct !{!24, !12}
!25 = distinct !{!25, !12}
!26 = distinct !{!26, !12, !27, !28}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = !{!"llvm.loop.unroll.runtime.disable"}
!29 = distinct !{!29, !12}
!30 = distinct !{!30, !12}
!31 = !{!32, !32, i64 0}
!32 = !{!"int", !9, i64 0}
!33 = distinct !{!33, !12, !27, !28}
!34 = distinct !{!34, !12}
!35 = distinct !{!35, !12}
!36 = distinct !{!36, !12}
!37 = distinct !{!37, !12, !27, !28}
!38 = distinct !{!38, !12}
!39 = distinct !{!39, !12, !27, !28}
!40 = distinct !{!40, !12}
!41 = distinct !{!41, !12, !27, !28}
!42 = distinct !{!42, !12}
!43 = distinct !{!43, !12}
!44 = distinct !{!44, !12}
!45 = distinct !{!45, !12}
!46 = distinct !{!46, !12, !27, !28}
!47 = distinct !{!47, !12}
!48 = distinct !{!48, !12}
!49 = distinct !{!49, !12}
!50 = distinct !{!50, !12}
!51 = distinct !{!51, !12}
!52 = distinct !{!52, !12}
!53 = distinct !{!53, !12}
!54 = distinct !{!54, !12}
!55 = distinct !{!55, !12, !27, !28}
!56 = distinct !{!56, !12}
!57 = distinct !{!57, !12}
!58 = distinct !{!58, !12, !27, !28}
!59 = distinct !{!59, !12}
!60 = distinct !{!60, !12, !27, !28}
!61 = distinct !{!61, !12}
!62 = distinct !{!62, !12}
!63 = distinct !{!63, !12}
!64 = distinct !{!64, !12}
!65 = distinct !{!65, !12}
!66 = distinct !{!66, !12}
!67 = distinct !{!67, !12}
!68 = distinct !{!68, !12}
!69 = distinct !{!69, !12}
!70 = distinct !{!70, !12}
!71 = distinct !{!71, !12}
!72 = distinct !{!72, !12}
!73 = distinct !{!73, !12}
!74 = distinct !{!74, !12}
!75 = distinct !{!75, !12}
!76 = distinct !{!76, !12}
!77 = distinct !{!77, !12}
!78 = distinct !{!78, !12}
!79 = distinct !{!79, !12}
!80 = distinct !{!80, !12, !27, !28}
!81 = distinct !{!81, !12}
!82 = distinct !{!82, !12}
!83 = distinct !{!83, !12}
!84 = distinct !{!84, !12}
!85 = distinct !{!85, !12}
!86 = distinct !{!86, !12, !27, !28}
!87 = distinct !{!87, !12}
!88 = distinct !{!88, !12}
!89 = distinct !{!89, !12, !27, !28}
!90 = distinct !{!90, !12}
!91 = distinct !{!91, !12, !27, !28}
!92 = distinct !{!92, !12}
!93 = distinct !{!93, !12, !27, !28}
!94 = distinct !{!94, !12}
!95 = distinct !{!95, !12, !27, !28}
!96 = distinct !{!96, !12}
!97 = distinct !{!97, !12}
!98 = distinct !{!98, !12}
!99 = distinct !{!99, !12}
!100 = distinct !{!100, !12}
!101 = distinct !{!101, !12}
!102 = distinct !{!102, !12}
!103 = distinct !{!103, !12}
!104 = distinct !{!104, !12}
!105 = distinct !{!105, !12, !27, !28}
!106 = distinct !{!106, !12}
!107 = distinct !{!107, !12}
!108 = distinct !{!108, !12}
!109 = distinct !{!109, !12, !27, !28}
!110 = distinct !{!110, !12}
!111 = distinct !{!111, !12, !27, !28}
!112 = distinct !{!112, !12}
!113 = distinct !{!113, !12}
!114 = distinct !{!114, !12}
!115 = distinct !{!115, !12}
!116 = distinct !{!116, !12}
!117 = distinct !{!117, !12}
!118 = distinct !{!118, !12, !27, !28}
!119 = distinct !{!119, !12}
!120 = distinct !{!120, !12}
!121 = distinct !{!121, !12, !27, !28}
!122 = distinct !{!122, !12}
!123 = distinct !{!123, !12, !27, !28}
!124 = distinct !{!124, !12}
!125 = distinct !{!125, !12}
!126 = distinct !{!126, !12}
!127 = distinct !{!127, !12}
!128 = distinct !{!128, !12}
!129 = distinct !{!129, !12}
!130 = distinct !{!130, !12}
!131 = distinct !{!131, !12}
!132 = distinct !{!132, !12}
!133 = distinct !{!133, !12, !27, !28}
!134 = distinct !{!134, !12}
!135 = distinct !{!135, !12}
!136 = distinct !{!136, !12}
!137 = distinct !{!137, !12}
!138 = distinct !{!138, !12}
!139 = distinct !{!139, !12}
!140 = distinct !{!140, !12}
!141 = distinct !{!141, !12}
!142 = distinct !{!142, !12}
!143 = distinct !{!143, !12}
!144 = distinct !{!144, !12}
!145 = distinct !{!145, !12}
!146 = distinct !{!146, !12}
!147 = distinct !{!147, !12}
!148 = distinct !{!148, !12}
!149 = distinct !{!149, !12, !27, !28}
!150 = distinct !{!150, !12}
!151 = distinct !{!151, !12}
!152 = distinct !{!152, !12, !27, !28}
!153 = distinct !{!153, !12}
!154 = distinct !{!154, !12, !27, !28}
!155 = distinct !{!155, !12}
!156 = distinct !{!156, !12}
!157 = distinct !{!157, !12}
!158 = distinct !{!158, !12}
!159 = distinct !{!159, !12}
!160 = distinct !{!160, !12}
!161 = distinct !{!161, !12}
!162 = distinct !{!162, !12}
!163 = distinct !{!163, !12}
!164 = distinct !{!164, !12, !27, !28}
!165 = distinct !{!165, !12}
!166 = distinct !{!166, !12}
!167 = !{!168, !168, i64 0}
!168 = !{!"float", !9, i64 0}
!169 = distinct !{!169, !12}
!170 = distinct !{!170, !12}
!171 = distinct !{!171, !12}
!172 = distinct !{!172, !12}
!173 = distinct !{!173, !12}
!174 = distinct !{!174, !12}
!175 = distinct !{!175, !12}
!176 = distinct !{!176, !12}
!177 = distinct !{!177, !12}
!178 = distinct !{!178, !12}
!179 = distinct !{!179, !12}
!180 = distinct !{!180, !12}
!181 = distinct !{!181, !12, !27, !28}
!182 = distinct !{!182, !12}
!183 = distinct !{!183, !12}
!184 = distinct !{!184, !12}
!185 = distinct !{!185, !12, !27, !28}
!186 = distinct !{!186, !12, !27, !28}
!187 = distinct !{!187, !12}
!188 = distinct !{!188, !12}
!189 = distinct !{!189, !12, !27, !28}
!190 = distinct !{!190, !12, !27, !28}
!191 = distinct !{!191, !12, !27, !28}
!192 = distinct !{!192, !12}
!193 = distinct !{!193, !12}
!194 = distinct !{!194, !12, !27, !28}
!195 = distinct !{!195, !12}
!196 = distinct !{!196, !12, !27, !28}
!197 = distinct !{!197, !12}
!198 = distinct !{!198, !12}
!199 = distinct !{!199, !12}
!200 = distinct !{!200, !12}
!201 = distinct !{!201, !12, !27, !28}
!202 = distinct !{!202, !12}
!203 = distinct !{!203, !12}
!204 = distinct !{!204, !12}
!205 = distinct !{!205, !12}
!206 = distinct !{!206, !12}
!207 = distinct !{!207, !12}
!208 = distinct !{!208, !12}
!209 = distinct !{!209, !12}
!210 = distinct !{!210, !12}
!211 = distinct !{!211, !12}
!212 = distinct !{!212, !12}
!213 = distinct !{!213, !12}
!214 = distinct !{!214, !12}
!215 = distinct !{!215, !12}
!216 = !{!217, !8, i64 0}
!217 = !{!"_Fukusosuu", !8, i64 0, !8, i64 8}
!218 = distinct !{!218, !12}
!219 = distinct !{!219, !12}
!220 = !{!221, !32, i64 0}
!221 = !{!"_Segment", !32, i64 0, !32, i64 4, !32, i64 8, !8, i64 16, !32, i64 24, !32, i64 28, !20, i64 32, !32, i64 40}
!222 = !{!221, !32, i64 4}
!223 = !{!221, !32, i64 8}
!224 = !{!221, !8, i64 16}
!225 = !{!221, !20, i64 32}
!226 = distinct !{!226, !12}
!227 = distinct !{!227, !12}
!228 = distinct !{!228, !12}
!229 = !{!221, !32, i64 40}
!230 = distinct !{!230, !12}
!231 = distinct !{!231, !12}
!232 = distinct !{!232, !12}
!233 = distinct !{!233, !12}
!234 = distinct !{!234, !12}
!235 = distinct !{!235, !12}
!236 = distinct !{!236, !12}
!237 = distinct !{!237, !12}
!238 = distinct !{!238, !12}
!239 = distinct !{!239, !12}
!240 = distinct !{!240, !12}
!241 = distinct !{!241, !12}
!242 = distinct !{!242, !12}
!243 = distinct !{!243, !12}
!244 = !{!217, !8, i64 8}
!245 = distinct !{!245, !12}
!246 = distinct !{!246, !12}
!247 = distinct !{!247, !12}
!248 = distinct !{!248, !12}
!249 = distinct !{!249, !12}
!250 = distinct !{!250, !12}
!251 = distinct !{!251, !12}
!252 = distinct !{!252, !12}
!253 = distinct !{!253, !12}
!254 = distinct !{!254, !12}
!255 = distinct !{!255, !12}
!256 = distinct !{!256, !12}
!257 = distinct !{!257, !12}
!258 = distinct !{!258, !12}
!259 = distinct !{!259, !12}
!260 = distinct !{!260, !12}
!261 = distinct !{!261, !12}
!262 = distinct !{!262, !12}
!263 = distinct !{!263, !12}
!264 = distinct !{!264, !12}
!265 = distinct !{!265, !12}
!266 = distinct !{!266, !12}
!267 = distinct !{!267, !12}
!268 = distinct !{!268, !12}
!269 = distinct !{!269, !12}
!270 = distinct !{!270, !12}
!271 = distinct !{!271, !12}
!272 = distinct !{!272, !12}
!273 = distinct !{!273, !12}
!274 = distinct !{!274, !12}
!275 = !{!221, !32, i64 24}
!276 = !{!221, !32, i64 28}
!277 = distinct !{!277, !12}
!278 = distinct !{!278, !12}
!279 = distinct !{!279, !12}
!280 = distinct !{!280, !12}
!281 = distinct !{!281, !12}
!282 = distinct !{!282, !12}
!283 = distinct !{!283, !12}
!284 = distinct !{!284, !12}
!285 = distinct !{!285, !12}
!286 = distinct !{!286, !12}
!287 = distinct !{!287, !12}
!288 = distinct !{!288, !12}
!289 = distinct !{!289, !12}
!290 = distinct !{!290, !12}
!291 = distinct !{!291, !12}
!292 = distinct !{!292, !12}
!293 = distinct !{!293, !12, !27, !28}
!294 = distinct !{!294, !12}
!295 = distinct !{!295, !12}
!296 = distinct !{!296, !12}
!297 = distinct !{!297, !12}
!298 = distinct !{!298, !12}
!299 = distinct !{!299, !12}
!300 = distinct !{!300, !12}
!301 = distinct !{!301, !12}
!302 = distinct !{!302, !12}
!303 = distinct !{!303, !12}
!304 = distinct !{!304, !12}
!305 = distinct !{!305, !12}
!306 = distinct !{!306, !12}
!307 = distinct !{!307, !12}
!308 = distinct !{!308, !12}
!309 = distinct !{!309, !12}
!310 = distinct !{!310, !12}
!311 = distinct !{!311, !12}
!312 = distinct !{!312, !12}
!313 = distinct !{!313, !12}
!314 = distinct !{!314, !12}
!315 = distinct !{!315, !12}
!316 = distinct !{!316, !12}
!317 = distinct !{!317, !12}
!318 = distinct !{!318, !12}
!319 = distinct !{!319, !12}
!320 = distinct !{!320, !12}
!321 = distinct !{!321, !12}
!322 = distinct !{!322, !12}
!323 = distinct !{!323, !12}
!324 = distinct !{!324, !12}
!325 = distinct !{!325, !12}
!326 = distinct !{!326, !12}
!327 = distinct !{!327, !12}
!328 = !{!329, !168, i64 4}
!329 = !{!"_Gappattern", !32, i64 0, !168, i64 4}
!330 = distinct !{!330, !12}
!331 = distinct !{!331, !12}
!332 = distinct !{!332, !12}
!333 = distinct !{!333, !12}
!334 = distinct !{!334, !12}
!335 = distinct !{!335, !12}
!336 = distinct !{!336, !12}
!337 = distinct !{!337, !12}
!338 = distinct !{!338, !12}
!339 = distinct !{!339, !12}
!340 = distinct !{!340, !12}
!341 = distinct !{!341, !12, !27, !28}
!342 = distinct !{!342, !12}
!343 = distinct !{!343, !12}
!344 = distinct !{!344, !12}
!345 = distinct !{!345, !12}
!346 = distinct !{!346, !12}
!347 = distinct !{!347, !12}
!348 = distinct !{!348, !12}
!349 = distinct !{!349, !12}
!350 = distinct !{!350, !12, !27, !28}
!351 = distinct !{!351, !12}
!352 = distinct !{!352, !12}
!353 = distinct !{!353, !12}
!354 = distinct !{!354, !12}
!355 = distinct !{!355, !12}
!356 = distinct !{!356, !12}
!357 = distinct !{!357, !12}
!358 = distinct !{!358, !12}
!359 = distinct !{!359, !12}
!360 = distinct !{!360, !12}
!361 = distinct !{!361, !12}
!362 = distinct !{!362, !12}
!363 = distinct !{!363, !12}
!364 = distinct !{!364, !12}
!365 = distinct !{!365, !12}
!366 = distinct !{!366, !12}
!367 = !{!329, !32, i64 0}
!368 = distinct !{!368, !12}
!369 = distinct !{!369, !12}
!370 = distinct !{!370, !12}
!371 = !{!372, !20, i64 8}
!372 = !{!"_LocalHom", !32, i64 0, !20, i64 8, !20, i64 16, !32, i64 24, !32, i64 28, !32, i64 32, !32, i64 36, !8, i64 40, !32, i64 48, !32, i64 52, !8, i64 56, !168, i64 64, !8, i64 72}
!373 = !{!372, !32, i64 24}
!374 = !{!372, !32, i64 32}
!375 = !{!372, !32, i64 28}
!376 = !{!372, !32, i64 36}
!377 = !{!372, !32, i64 48}
!378 = !{!372, !8, i64 40}
!379 = distinct !{!379, !12}
!380 = distinct !{!380, !12}
!381 = distinct !{!381, !12}
!382 = distinct !{!382, !12}
!383 = distinct !{!383, !12}
!384 = distinct !{!384, !12}
!385 = distinct !{!385, !12}
!386 = distinct !{!386, !12}
!387 = distinct !{!387, !12}
!388 = distinct !{!388, !12}
!389 = distinct !{!389, !12}
!390 = !{!391, !391, i64 0}
!391 = !{!"short", !9, i64 0}
!392 = distinct !{!392, !12}
!393 = distinct !{!393, !12}
!394 = !{i32 0, i32 2}
!395 = distinct !{!395, !12}
!396 = distinct !{!396, !12}
!397 = distinct !{!397, !12}
!398 = distinct !{!398, !12}
!399 = distinct !{!399, !12}
!400 = distinct !{!400, !12}
!401 = distinct !{!401, !12}
!402 = distinct !{!402, !12}
!403 = distinct !{!403, !12}
!404 = distinct !{!404, !12}
!405 = distinct !{!405, !12}
!406 = distinct !{!406, !12}
!407 = distinct !{!407, !12}
!408 = distinct !{!408, !12}
!409 = distinct !{!409, !12}
!410 = distinct !{!410, !12}
!411 = distinct !{!411, !12}
!412 = distinct !{!412, !12}
!413 = distinct !{!413, !12}
!414 = distinct !{!414, !12}
!415 = distinct !{!415, !12}
!416 = distinct !{!416, !12, !27, !28}
!417 = distinct !{!417, !12}
!418 = distinct !{!418, !12}
!419 = distinct !{!419, !12}
!420 = distinct !{!420, !12}
!421 = distinct !{!421, !12}
!422 = distinct !{!422, !12}
!423 = distinct !{!423, !12}
!424 = distinct !{!424, !12}
!425 = distinct !{!425, !12}
!426 = distinct !{!426, !12}
!427 = distinct !{!427, !12}
!428 = distinct !{!428, !12}
!429 = distinct !{!429, !12}
!430 = distinct !{!430, !12}
!431 = distinct !{!431, !12}
!432 = distinct !{!432, !12}
!433 = distinct !{!433, !12}
!434 = distinct !{!434, !12}
!435 = distinct !{!435, !12, !27, !28}
!436 = distinct !{!436, !12}
!437 = distinct !{!437, !12}
!438 = distinct !{!438, !12}
!439 = distinct !{!439, !12}
!440 = distinct !{!440, !12}
!441 = distinct !{!441, !12}
!442 = distinct !{!442, !12}
!443 = distinct !{!443, !12}
!444 = distinct !{!444, !12}
!445 = distinct !{!445, !12}
!446 = distinct !{!446, !12}
!447 = distinct !{!447, !12}
!448 = distinct !{!448, !12}
!449 = distinct !{!449, !12}
!450 = distinct !{!450, !12}
!451 = distinct !{!451, !12}
!452 = distinct !{!452, !12}
!453 = distinct !{!453, !12}
!454 = distinct !{!454, !12}
!455 = distinct !{!455, !12}
!456 = distinct !{!456, !12}
!457 = distinct !{!457, !12}
!458 = distinct !{!458, !12}
!459 = distinct !{!459, !12}
!460 = distinct !{!460, !12}
!461 = distinct !{!461, !12}
!462 = distinct !{!462, !12}
!463 = distinct !{!463, !12}
!464 = distinct !{!464, !12}
!465 = distinct !{!465, !12}
!466 = distinct !{!466, !12}
!467 = distinct !{!467, !12}
!468 = distinct !{!468, !12}
!469 = distinct !{!469, !12}
!470 = distinct !{!470, !12}
!471 = distinct !{!471, !12}
!472 = distinct !{!472, !12}
!473 = distinct !{!473, !12}
!474 = distinct !{!474, !12}
!475 = distinct !{!475, !12}
!476 = distinct !{!476, !12}
!477 = distinct !{!477, !12}
!478 = distinct !{!478, !12}
!479 = distinct !{!479, !12}
!480 = distinct !{!480, !12}
!481 = distinct !{!481, !12}
!482 = distinct !{!482, !12}
!483 = distinct !{!483, !12}
!484 = distinct !{!484, !12}
!485 = distinct !{!485, !12}
!486 = distinct !{!486, !12}
!487 = distinct !{!487, !12}
!488 = distinct !{!488, !12}
!489 = distinct !{!489, !12}
!490 = distinct !{!490, !12}
!491 = distinct !{!491, !12}
!492 = distinct !{!492, !12}
!493 = distinct !{!493, !12}
!494 = distinct !{!494, !12}
!495 = distinct !{!495, !12}
!496 = distinct !{!496, !12}
!497 = distinct !{!497, !12}
!498 = distinct !{!498, !12}
!499 = distinct !{!499, !12}
!500 = distinct !{!500, !12}
!501 = distinct !{!501, !12}
!502 = distinct !{!502, !12}
!503 = distinct !{!503, !12}
!504 = distinct !{!504, !12}
!505 = distinct !{!505, !12, !27, !28}
!506 = distinct !{!506, !12}
!507 = distinct !{!507, !12}
!508 = distinct !{!508, !12}
!509 = distinct !{!509, !12}
!510 = distinct !{!510, !12}
!511 = distinct !{!511, !12}
!512 = distinct !{!512, !12}
!513 = distinct !{!513, !12}
!514 = distinct !{!514, !12}
!515 = distinct !{!515, !12}
!516 = distinct !{!516, !12}
!517 = distinct !{!517, !12}
!518 = distinct !{!518, !12}
!519 = distinct !{!519, !12}
!520 = distinct !{!520, !12}
!521 = distinct !{!521, !12}
!522 = distinct !{!522, !12}
!523 = distinct !{!523, !12}
!524 = distinct !{!524, !12}
!525 = distinct !{!525, !12}
!526 = distinct !{!526, !12}
!527 = distinct !{!527, !12}
!528 = distinct !{!528, !12, !27, !28}
!529 = distinct !{!529, !12}
!530 = distinct !{!530, !12}
!531 = distinct !{!531, !12}
!532 = distinct !{!532, !12}
!533 = distinct !{!533, !12}
!534 = distinct !{!534, !12}
!535 = distinct !{!535, !12}
!536 = distinct !{!536, !12}
!537 = distinct !{!537, !12}
!538 = distinct !{!538, !12}
!539 = distinct !{!539, !12}
!540 = distinct !{!540, !12}
!541 = distinct !{!541, !12}
!542 = distinct !{!542, !12}
!543 = distinct !{!543, !12}
!544 = distinct !{!544, !12}
!545 = distinct !{!545, !12}
!546 = distinct !{!546, !12}
!547 = distinct !{!547, !12}
!548 = distinct !{!548, !12}
!549 = distinct !{!549, !12}
!550 = distinct !{!550, !12}
!551 = distinct !{!551, !12}
!552 = distinct !{!552, !12}
!553 = distinct !{!553, !12}
!554 = distinct !{!554, !12}
!555 = distinct !{!555, !12}
!556 = distinct !{!556, !12}
!557 = distinct !{!557, !12}
!558 = distinct !{!558, !12}
!559 = distinct !{!559, !12}
!560 = distinct !{!560, !12}
!561 = distinct !{!561, !12}
!562 = distinct !{!562, !12}
!563 = distinct !{!563, !12}
!564 = distinct !{!564, !12}
!565 = distinct !{!565, !12}
!566 = distinct !{!566, !12}
!567 = distinct !{!567, !12}
!568 = distinct !{!568, !12}
!569 = distinct !{!569, !12}
!570 = distinct !{!570, !12}
!571 = distinct !{!571, !12}
!572 = distinct !{!572, !12}
!573 = distinct !{!573, !12}
!574 = distinct !{!574, !12, !27, !28}
!575 = distinct !{!575, !12}
!576 = !{!372, !32, i64 0}
!577 = distinct !{!577, !12}
!578 = distinct !{!578, !12}
!579 = distinct !{!579, !12}
!580 = distinct !{!580, !12}
!581 = distinct !{!581, !12}
!582 = distinct !{!582, !12}
!583 = distinct !{!583, !12}
!584 = distinct !{!584, !12}
!585 = distinct !{!585, !12}
!586 = distinct !{!586, !12}
!587 = distinct !{!587, !12}
!588 = distinct !{!588, !12}
!589 = distinct !{!589, !12}
!590 = distinct !{!590, !12}
!591 = distinct !{!591, !12}
!592 = distinct !{!592, !12}
!593 = distinct !{!593, !12}
!594 = distinct !{!594, !12}
!595 = distinct !{!595, !12}
!596 = distinct !{!596, !12}
!597 = distinct !{!597, !12}
!598 = distinct !{!598, !12}
!599 = distinct !{!599, !12}
!600 = distinct !{!600, !12}
!601 = distinct !{!601, !12}
!602 = distinct !{!602, !12}
!603 = distinct !{!603, !12}
!604 = distinct !{!604, !12}
!605 = distinct !{!605, !12}
!606 = distinct !{!606, !12}
!607 = distinct !{!607, !12}
!608 = distinct !{!608, !12}
!609 = distinct !{!609, !12}
!610 = distinct !{!610, !12}
!611 = distinct !{!611, !12}
!612 = distinct !{!612, !12}
!613 = distinct !{!613, !12}
!614 = distinct !{!614, !12}
!615 = distinct !{!615, !12}
!616 = distinct !{!616, !12}
!617 = distinct !{!617, !12, !27, !28}
!618 = distinct !{!618, !12}
!619 = distinct !{!619, !12}
!620 = distinct !{!620, !12}
!621 = distinct !{!621, !12}
!622 = distinct !{!622, !12}
!623 = distinct !{!623, !12}
!624 = distinct !{!624, !12}
!625 = distinct !{!625, !12}
!626 = distinct !{!626, !12}
!627 = distinct !{!627, !12}
!628 = distinct !{!628, !12}
!629 = distinct !{!629, !12}
!630 = distinct !{!630, !12}
!631 = distinct !{!631, !12}
!632 = distinct !{!632, !12}
!633 = distinct !{!633, !12}
!634 = distinct !{!634, !12, !27, !28}
!635 = distinct !{!635, !12}
!636 = distinct !{!636, !12}
!637 = distinct !{!637, !12}
!638 = distinct !{!638, !12}
!639 = distinct !{!639, !12}
!640 = distinct !{!640, !12}
!641 = distinct !{!641, !12}
!642 = distinct !{!642, !12}
!643 = distinct !{!643, !12}
!644 = distinct !{!644, !12}
!645 = distinct !{!645, !12}
!646 = distinct !{!646, !12}
!647 = distinct !{!647, !12}
!648 = distinct !{!648, !12}
!649 = distinct !{!649, !12}
!650 = distinct !{!650, !12, !27, !28}
!651 = distinct !{!651, !12}
!652 = distinct !{!652, !12}
!653 = distinct !{!653, !12}
!654 = distinct !{!654, !12}
!655 = distinct !{!655, !12}
!656 = distinct !{!656, !12}
!657 = distinct !{!657, !12}
!658 = distinct !{!658, !12}
!659 = distinct !{!659, !12}
!660 = distinct !{!660, !12}
!661 = distinct !{!661, !12}
!662 = distinct !{!662, !12}
!663 = distinct !{!663, !12}
!664 = distinct !{!664, !12}
!665 = distinct !{!665, !12}
!666 = distinct !{!666, !12}
!667 = distinct !{!667, !12}
!668 = distinct !{!668, !12}
!669 = distinct !{!669, !12}
!670 = distinct !{!670, !12}
!671 = distinct !{!671, !12}
!672 = distinct !{!672, !12}
!673 = distinct !{!673, !12}
!674 = distinct !{!674, !12}
!675 = distinct !{!675, !12}
!676 = distinct !{!676, !12}
!677 = distinct !{!677, !12}
!678 = distinct !{!678, !12}
!679 = distinct !{!679, !12}
!680 = distinct !{!680, !12}
!681 = distinct !{!681, !12}
!682 = distinct !{!682, !12}
!683 = distinct !{!683, !12}
!684 = distinct !{!684, !12}
!685 = distinct !{!685, !12}
!686 = distinct !{!686, !12}
!687 = distinct !{!687, !12}
!688 = distinct !{!688, !12, !27, !28}
!689 = distinct !{!689, !12}
!690 = distinct !{!690, !12}
!691 = distinct !{!691, !12}
!692 = distinct !{!692, !12}
!693 = distinct !{!693, !12}
!694 = distinct !{!694, !12}
!695 = distinct !{!695, !12}
!696 = distinct !{!696, !12}
!697 = distinct !{!697, !12}
!698 = distinct !{!698, !12}
!699 = distinct !{!699, !12}
!700 = distinct !{!700, !12}
!701 = distinct !{!701, !12}
!702 = distinct !{!702, !12}
!703 = distinct !{!703, !12}
!704 = distinct !{!704, !12}
!705 = distinct !{!705, !12, !27, !28}
!706 = distinct !{!706, !12}
!707 = distinct !{!707, !12}
!708 = distinct !{!708, !12}
!709 = distinct !{!709, !12}
!710 = distinct !{!710, !12}
!711 = distinct !{!711, !12}
!712 = distinct !{!712, !12}
!713 = distinct !{!713, !12}
!714 = distinct !{!714, !12}
!715 = distinct !{!715, !12}
!716 = distinct !{!716, !12}
!717 = distinct !{!717, !12}
!718 = distinct !{!718, !12}
!719 = distinct !{!719, !12}
!720 = distinct !{!720, !12}
!721 = distinct !{!721, !12}
!722 = distinct !{!722, !12}
!723 = distinct !{!723, !12}

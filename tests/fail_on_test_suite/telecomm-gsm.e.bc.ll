; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/MiBench/telecomm-gsm/telecomm-gsm.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fmtdesc = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.gsm_state = type { [280 x i16], i16, i64, i32, [8 x i16], [2 x [8 x i16]], i16, i16, [9 x i16], i16, i8, i8 }

@bitoff = internal unnamed_addr constant <{ [128 x i8], [128 x i8] }> <{ [128 x i8] c"\08\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", [128 x i8] zeroinitializer }>, align 16
@Gsm_Coder.e = internal global [50 x i16] zeroinitializer, align 16
@gsm_DLB = internal global [4 x i16] [i16 6554, i16 16384, i16 26214, i16 32767], align 2
@gsm_QLB = internal global [4 x i16] [i16 3277, i16 11469, i16 21299, i16 32767], align 2
@gsm_NRFAC = internal global [8 x i16] [i16 29128, i16 26215, i16 23832, i16 21846, i16 20165, i16 18725, i16 17476, i16 16384], align 16
@gsm_FAC = internal global [8 x i16] [i16 18431, i16 20479, i16 22527, i16 24575, i16 26623, i16 28671, i16 30719, i16 32767], align 16
@f_decode = internal global i32 0, align 4
@f_cat = internal global i32 0, align 4
@f_force = internal global i32 0, align 4
@f_precious = internal global i32 0, align 4
@f_fast = internal global i32 0, align 4
@f_verbose = internal global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"audio\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"8 kHz, 8 bit u-law encoding with Sun audio header\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c".au\00", align 1
@f_audio = internal global %struct.fmtdesc { ptr @.str, ptr @.str.1, ptr @.str.2, ptr @audio_init_input, ptr @audio_init_output, ptr @ulaw_input, ptr @ulaw_output }, align 8
@.str.3 = private unnamed_addr constant [6 x i8] c"u-law\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"plain 8 kHz, 8 bit u-law encoding\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c".u\00", align 1
@f_ulaw = internal global %struct.fmtdesc { ptr @.str.3, ptr @.str.4, ptr @.str.5, ptr @generic_init, ptr @generic_init, ptr @ulaw_input, ptr @ulaw_output }, align 8
@.str.6 = private unnamed_addr constant [6 x i8] c"A-law\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"8 kHz, 8 bit A-law encoding\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c".A\00", align 1
@f_alaw = internal global %struct.fmtdesc { ptr @.str.6, ptr @.str.7, ptr @.str.8, ptr @generic_init, ptr @generic_init, ptr @alaw_input, ptr @alaw_output }, align 8
@.str.9 = private unnamed_addr constant [7 x i8] c"linear\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"16 bit (13 significant) signed 8 kHz signal\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c".l\00", align 1
@f_linear = internal global %struct.fmtdesc { ptr @.str.9, ptr @.str.10, ptr @.str.11, ptr @generic_init, ptr @generic_init, ptr @linear_input, ptr @linear_output }, align 8
@alldescs = internal global [5 x ptr] [ptr @f_audio, ptr @f_alaw, ptr @f_ulaw, ptr @f_linear, ptr null], align 16
@f_format = internal global ptr null, align 8
@.str.12 = private unnamed_addr constant [13 x i8] c"fcdpvhuaslVF\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"Usage: %s [-fcpdhvuaslF] [files...] (-h for help)\0A\00", align 1
@optind = external local_unnamed_addr global i32, align 4
@instat = internal global %struct.stat zeroinitializer, align 8
@outname = internal global ptr null, align 8
@output = internal global ptr null, align 8
@init_input = internal global ptr null, align 8
@init_output = internal global ptr null, align 8
@.str.14 = private unnamed_addr constant [6 x i8] c"toast\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"un\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"cat\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"%s: only one of -[uals] is possible (%s -h for help)\0A\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"%s 1.0, version %s\0A\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"$Id$\00", align 1
@.str.20 = private unnamed_addr constant [37 x i8] c"Usage: %s [-fcpdhvaulsF] [files...]\0A\00", align 1
@.str.33 = private unnamed_addr constant [17 x i8] c"%s: error %s %s\0A\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"writing header to\00", align 1
@.str.35 = private unnamed_addr constant [20 x i8] c"reading header from\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.38 = private unnamed_addr constant [24 x i8] c"%s: error writing \22%s\22\0A\00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@.str.39 = private unnamed_addr constant [30 x i8] c"%s: source \22%s\22 not deleted.\0A\00", align 1
@.str.40 = private unnamed_addr constant [27 x i8] c"%s: could not unlink \22%s\22\0A\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c".gsm\00", align 1
@.str.42 = private unnamed_addr constant [46 x i8] c"%s: %s already has \22%s\22 suffix -- unchanged.\0A\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.44 = private unnamed_addr constant [34 x i8] c"%s: cannot open \22%s\22 for reading\0A\00", align 1
@.str.45 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.46 = private unnamed_addr constant [40 x i8] c"%s: failed to malloc %d bytes -- abort\0A\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"%s: cannot stat \22%s\22\0A\00", align 1
@.str.48 = private unnamed_addr constant [46 x i8] c"%s: \22%s\22 is not a regular file -- unchanged.\0A\00", align 1
@.str.49 = private unnamed_addr constant [44 x i8] c"%s: \22%s\22 has %s other link%s -- unchanged.\0A\00", align 1
@.str.50 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.52 = private unnamed_addr constant [33 x i8] c"%s: can't open \22%s\22 for writing\0A\00", align 1
@.str.54 = private unnamed_addr constant [58 x i8] c"%s already exists; do you wish to overwrite %s (y or n)? \00", align 1
@.str.55 = private unnamed_addr constant [18 x i8] c"\09not overwritten\0A\00", align 1
@.str.56 = private unnamed_addr constant [50 x i8] c"%s: incomplete frame (%d byte%s missing) from %s\0A\00", align 1
@.str.57 = private unnamed_addr constant [21 x i8] c"%s: bad frame in %s\0A\00", align 1
@.str.58 = private unnamed_addr constant [25 x i8] c"%s: error writing to %s\0A\00", align 1
@.str.59 = private unnamed_addr constant [27 x i8] c"%s: error reading from %s\0A\00", align 1
@.str.60 = private unnamed_addr constant [40 x i8] c"%s: could not change file mode of \22%s\22\0A\00", align 1
@str = private unnamed_addr constant [53 x i8] c" -f  force     Replace existing files without asking\00", align 1
@str.61 = private unnamed_addr constant [59 x i8] c" -c  cat       Write to stdout, do not remove source files\00", align 1
@str.62 = private unnamed_addr constant [47 x i8] c" -d  decode    Decode data (default is encode)\00", align 1
@str.63 = private unnamed_addr constant [40 x i8] c" -p  precious  Do not delete the source\00", align 1
@str.64 = private unnamed_addr constant [56 x i8] c" -u  u-law     Force 8 kHz/8 bit u-law in/output format\00", align 1
@str.65 = private unnamed_addr constant [52 x i8] c" -s  sun .au   Force Sun .au u-law in/output format\00", align 1
@str.66 = private unnamed_addr constant [56 x i8] c" -a  A-law     Force 8 kHz/8 bit A-law in/output format\00", align 1
@str.67 = private unnamed_addr constant [52 x i8] c" -l  linear    Force 16 bit linear in/output format\00", align 1
@str.68 = private unnamed_addr constant [52 x i8] c" -F  fast      Sacrifice conformance to performance\00", align 1
@str.69 = private unnamed_addr constant [40 x i8] c" -v  version   Show version information\00", align 1
@str.70 = private unnamed_addr constant [31 x i8] c" -h  help      Print this text\00", align 1
@a2s = internal unnamed_addr constant [256 x i16] [i16 5120, i16 -5376, i16 320, i16 -336, i16 20480, i16 -21504, i16 1280, i16 -1344, i16 2560, i16 -2688, i16 64, i16 -80, i16 10240, i16 -10752, i16 640, i16 -672, i16 7168, i16 -7424, i16 448, i16 -464, i16 28672, i16 -29696, i16 1792, i16 -1856, i16 3584, i16 -3712, i16 192, i16 -208, i16 14336, i16 -14848, i16 896, i16 -928, i16 4096, i16 -4352, i16 256, i16 -272, i16 16384, i16 -17408, i16 1024, i16 -1088, i16 2048, i16 -2176, i16 0, i16 -16, i16 8192, i16 -8704, i16 512, i16 -544, i16 6144, i16 -6400, i16 384, i16 -400, i16 24576, i16 -25600, i16 1536, i16 -1600, i16 3072, i16 -3200, i16 128, i16 -144, i16 12288, i16 -12800, i16 768, i16 -800, i16 5632, i16 -5888, i16 352, i16 -368, i16 22528, i16 -23552, i16 1408, i16 -1472, i16 2816, i16 -2944, i16 96, i16 -112, i16 11264, i16 -11776, i16 704, i16 -736, i16 7680, i16 -7936, i16 480, i16 -496, i16 30720, i16 -31744, i16 1920, i16 -1984, i16 3840, i16 -3968, i16 224, i16 -240, i16 15360, i16 -15872, i16 960, i16 -992, i16 4608, i16 -4864, i16 288, i16 -304, i16 18432, i16 -19456, i16 1152, i16 -1216, i16 2304, i16 -2432, i16 32, i16 -48, i16 9216, i16 -9728, i16 576, i16 -608, i16 6656, i16 -6912, i16 416, i16 -432, i16 26624, i16 -27648, i16 1664, i16 -1728, i16 3328, i16 -3456, i16 160, i16 -176, i16 13312, i16 -13824, i16 832, i16 -864, i16 5376, i16 -5632, i16 336, i16 -352, i16 21504, i16 -22528, i16 1344, i16 -1408, i16 2688, i16 -2816, i16 80, i16 -96, i16 10752, i16 -11264, i16 672, i16 -704, i16 7424, i16 -7680, i16 464, i16 -480, i16 29696, i16 -30720, i16 1856, i16 -1920, i16 3712, i16 -3840, i16 208, i16 -224, i16 14848, i16 -15360, i16 928, i16 -960, i16 4352, i16 -4608, i16 272, i16 -288, i16 17408, i16 -18432, i16 1088, i16 -1152, i16 2176, i16 -2304, i16 16, i16 -32, i16 8704, i16 -9216, i16 544, i16 -576, i16 6400, i16 -6656, i16 400, i16 -416, i16 25600, i16 -26624, i16 1600, i16 -1664, i16 3200, i16 -3328, i16 144, i16 -160, i16 12800, i16 -13312, i16 800, i16 -832, i16 5888, i16 -6144, i16 368, i16 -384, i16 23552, i16 -24576, i16 1472, i16 -1536, i16 2944, i16 -3072, i16 112, i16 -128, i16 11776, i16 -12288, i16 736, i16 -768, i16 7936, i16 -8192, i16 496, i16 -512, i16 31744, i16 -32768, i16 1984, i16 -2048, i16 3968, i16 -4096, i16 240, i16 -256, i16 15872, i16 -16384, i16 992, i16 -1024, i16 4864, i16 -5120, i16 304, i16 -320, i16 19456, i16 -20480, i16 1216, i16 -1280, i16 2432, i16 -2560, i16 48, i16 -64, i16 9728, i16 -10240, i16 608, i16 -640, i16 6912, i16 -7168, i16 432, i16 -448, i16 27648, i16 -28672, i16 1728, i16 -1792, i16 3456, i16 -3584, i16 176, i16 -192, i16 13824, i16 -14336, i16 864, i16 -896], align 16
@s2a = internal unnamed_addr constant [4096 x i8] c"\AA*\EAj\8A\0A\CAJ\BA:\FAz\9A\1A\DAZ\A2\22\E2b\82\02\C2B\B22\F2r\92\12\D2R\AE..\EE\EEnn\8E\8E\0E\0E\CE\CENN\BE\BE>>\FE\FE~~\9E\9E\1E\1E\DE\DE^^\A6\A6&&&&\E6\E6\E6\E6ffff\86\86\86\86\06\06\06\06\C6\C6\C6\C6FFFF\B6\B6\B6\B66666\F6\F6\F6\F6vvvv\96\96\96\96\16\16\16\16\D6\D6\D6\D6VVVV\A8\A8\A8\A8((((((((\E8\E8\E8\E8\E8\E8\E8\E8hhhhhhhh\88\88\88\88\88\88\88\88\08\08\08\08\08\08\08\08\C8\C8\C8\C8\C8\C8\C8\C8HHHHHHHH\B8\B8\B8\B8\B8\B8\B8\B888888888\F8\F8\F8\F8\F8\F8\F8\F8xxxxxxxx\98\98\98\98\98\98\98\98\18\18\18\18\18\18\18\18\D8\D8\D8\D8\D8\D8\D8\D8XXXXXXXX\A0\A0\A0\A0\A0\A0\A0\A0                \E0\E0\E0\E0\E0\E0\E0\E0\E0\E0\E0\E0\E0\E0\E0\E0````````````````\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0\C0@@@@@@@@@@@@@@@@\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B00000000000000000\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0\F0pppppppppppppppp\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0\D0PPPPPPPPPPPPPPPP\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\EC\ECllllllllllllllllllllllllllllllll||||||||||||||||||||||||||||||||\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\DC\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4\E4ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuueeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED\ED--------------------------------\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\ADQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\D1\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91qqqqqqqqqqqqqqqq\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F1\F11111111111111111\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1AAAAAAAAAAAAAAAA\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\C1\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81aaaaaaaaaaaaaaaa\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1\E1!!!!!!!!!!!!!!!!\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1YYYYYYYYYYYYYYYY\D9\D9\D9\D9\D9\D9\D9\D9\19\19\19\19\19\19\19\19\99\99\99\99\99\99\99\99yyyyyyyy\F9\F9\F9\F9\F9\F9\F9\F999999999\B9\B9\B9\B9\B9\B9\B9\B9IIIIIIII\C9\C9\C9\C9\C9\C9\C9\C9\09\09\09\09\09\09\09\09\89\89\89\89\89\89\89\89iiiiiiii\E9\E9\E9\E9\E9\E9\E9\E9))))))))\A9\A9\A9\A9\A9\A9\A9\A9WWWWWWWW\D7\D7\D7\D7\17\17\17\17\97\97\97\97wwww\F7\F7\F7\F77777\B7\B7\B7\B7GGGG\C7\C7\C7\C7\07\07\07\07\87\87\87\87gggg\E7\E7\E7\E7''''\A7\A7\A7\A7____\DF\DF\1F\1F\9F\9F\7F\7F\FF\FF??\BF\BFOO\CF\CF\0F\0F\8F\8Foo\EF\EF//\AF\AFSS\D3\13\93s\F33\B3C\C3\03\83c\E3#\A3[\DB\1B\9B{\FB;\BBK\CB\0B\8Bk\EB+\AB", align 16
@stderr = external local_unnamed_addr global ptr, align 8
@.str.32 = private unnamed_addr constant [100 x i8] c"%s: bad (missing?) header in Sun audio file \22%s\22;\0A\09Try one of -u, -a, -l instead (%s -h for help).\0A\00", align 1
@progname = internal global ptr null, align 8
@inname = internal global ptr null, align 8
@.str.1.31 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@input = internal global ptr null, align 8
@.str.2.33 = private unnamed_addr constant [76 x i8] c"%s: warning: file format #%lu for %s not implemented, defaulting to u-law.\0A\00", align 1
@.str.3.36 = private unnamed_addr constant [5 x i8] c".snd\00", align 1
@in = internal global ptr null, align 8
@u2s = internal unnamed_addr constant [256 x i16] [i16 -32256, i16 -31228, i16 -30200, i16 -29172, i16 -28143, i16 -27115, i16 -26087, i16 -25059, i16 -24031, i16 -23002, i16 -21974, i16 -20946, i16 -19918, i16 -18889, i16 -17861, i16 -16833, i16 -16062, i16 -15548, i16 -15033, i16 -14519, i16 -14005, i16 -13491, i16 -12977, i16 -12463, i16 -11949, i16 -11435, i16 -10920, i16 -10406, i16 -9892, i16 -9378, i16 -8864, i16 -8350, i16 -7964, i16 -7707, i16 -7450, i16 -7193, i16 -6936, i16 -6679, i16 -6422, i16 -6165, i16 -5908, i16 -5651, i16 -5394, i16 -5137, i16 -4880, i16 -4623, i16 -4365, i16 -4108, i16 -3916, i16 -3787, i16 -3659, i16 -3530, i16 -3402, i16 -3273, i16 -3144, i16 -3016, i16 -2887, i16 -2759, i16 -2630, i16 -2502, i16 -2373, i16 -2245, i16 -2116, i16 -1988, i16 -1891, i16 -1827, i16 -1763, i16 -1698, i16 -1634, i16 -1570, i16 -1506, i16 -1441, i16 -1377, i16 -1313, i16 -1249, i16 -1184, i16 -1120, i16 -1056, i16 -992, i16 -927, i16 -879, i16 -847, i16 -815, i16 -783, i16 -751, i16 -718, i16 -686, i16 -654, i16 -622, i16 -590, i16 -558, i16 -526, i16 -494, i16 -461, i16 -429, i16 -397, i16 -373, i16 -357, i16 -341, i16 -325, i16 -309, i16 -293, i16 -277, i16 -261, i16 -245, i16 -228, i16 -212, i16 -196, i16 -180, i16 -164, i16 -148, i16 -132, i16 -120, i16 -112, i16 -104, i16 -96, i16 -88, i16 -80, i16 -72, i16 -64, i16 -56, i16 -48, i16 -40, i16 -32, i16 -24, i16 -16, i16 -8, i16 0, i16 32256, i16 31228, i16 30200, i16 29172, i16 28143, i16 27115, i16 26087, i16 25059, i16 24031, i16 23002, i16 21974, i16 20946, i16 19918, i16 18889, i16 17861, i16 16833, i16 16062, i16 15548, i16 15033, i16 14519, i16 14005, i16 13491, i16 12977, i16 12463, i16 11949, i16 11435, i16 10920, i16 10406, i16 9892, i16 9378, i16 8864, i16 8350, i16 7964, i16 7707, i16 7450, i16 7193, i16 6936, i16 6679, i16 6422, i16 6165, i16 5908, i16 5651, i16 5394, i16 5137, i16 4880, i16 4623, i16 4365, i16 4108, i16 3916, i16 3787, i16 3659, i16 3530, i16 3402, i16 3273, i16 3144, i16 3016, i16 2887, i16 2759, i16 2630, i16 2502, i16 2373, i16 2245, i16 2116, i16 1988, i16 1891, i16 1827, i16 1763, i16 1698, i16 1634, i16 1570, i16 1506, i16 1441, i16 1377, i16 1313, i16 1249, i16 1184, i16 1120, i16 1056, i16 992, i16 927, i16 879, i16 847, i16 815, i16 783, i16 751, i16 718, i16 686, i16 654, i16 622, i16 590, i16 558, i16 526, i16 494, i16 461, i16 429, i16 397, i16 373, i16 357, i16 341, i16 325, i16 309, i16 293, i16 277, i16 261, i16 245, i16 228, i16 212, i16 196, i16 180, i16 164, i16 148, i16 132, i16 120, i16 112, i16 104, i16 96, i16 88, i16 80, i16 72, i16 64, i16 56, i16 48, i16 40, i16 32, i16 24, i16 16, i16 8, i16 0], align 16
@s2u = internal unnamed_addr constant [8192 x i8] c"\FF\FE\FD\FC\FB\FA\F9\F8\F7\F6\F5\F4\F3\F2\F1\F0\EF\EF\EE\EE\ED\ED\EC\EC\EB\EB\EA\EA\E9\E9\E8\E8\E7\E7\E6\E6\E5\E5\E4\E4\E3\E3\E2\E2\E1\E1\E0\E0\DF\DF\DF\DF\DE\DE\DE\DE\DD\DD\DD\DD\DC\DC\DC\DC\DB\DB\DB\DB\DA\DA\DA\DA\D9\D9\D9\D9\D8\D8\D8\D8\D7\D7\D7\D7\D6\D6\D6\D6\D5\D5\D5\D5\D4\D4\D4\D4\D3\D3\D3\D3\D2\D2\D2\D2\D1\D1\D1\D1\D0\D0\D0\D0\CF\CF\CF\CF\CF\CF\CF\CF\CE\CE\CE\CE\CE\CE\CE\CE\CD\CD\CD\CD\CD\CD\CD\CD\CC\CC\CC\CC\CC\CC\CC\CC\CB\CB\CB\CB\CB\CB\CB\CB\CA\CA\CA\CA\CA\CA\CA\CA\C9\C9\C9\C9\C9\C9\C9\C9\C8\C8\C8\C8\C8\C8\C8\C8\C7\C7\C7\C7\C7\C7\C7\C7\C6\C6\C6\C6\C6\C6\C6\C6\C5\C5\C5\C5\C5\C5\C5\C5\C4\C4\C4\C4\C4\C4\C4\C4\C3\C3\C3\C3\C3\C3\C3\C3\C3\C2\C2\C2\C2\C2\C2\C2\C2\C1\C1\C1\C1\C1\C1\C1\C1\C0\C0\C0\C0\C0\C0\C0\C0\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BF\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BE\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BD\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BC\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BB\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\BA\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B9\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B8\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B7\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B6\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B5\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B4\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B3\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B2\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B1\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\B0\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AF\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AE\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AD\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AB\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A9\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A8\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A7\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A6\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A4\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A3\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A2\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A1\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\A0\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9F\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9E\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9D\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9C\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9B\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\9A\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\99\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\98\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\97\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\96\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\95\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\94\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\93\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\92\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\91\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8F\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8E\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8D\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8C\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8B\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\8A\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\89\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\88\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\87\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\86\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\85\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\84\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\83\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\82\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\11\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\12\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\13\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\14\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\15\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\17\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\18\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\19\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1E\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F\1F                                 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22\22################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&'''''''''''''''''''''''''''''''''(((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))********************************++++++++++++++++++++++++++++++++,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,--------------------------------................................/////////////////////////////////0000000000000000111111111111111122222222222222223333333333333333444444444444444455555555555555556666666666666666777777777777777788888888888888889999999999999999::::::::::::::::;;;;;;;;;;;;;;;;<<<<<<<<<<<<<<<<=================>>>>>>>>>>>>>>>>????????????????@@@@@@@@AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJKKKKKKKKLLLLLLLLMMMMMMMMNNNNNNNNOOOOOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ[[[[\\\\\\\\]]]]^^^^____``aabbccddeeffgghhhiijjkkllmmnnoopqrstuvwxyz{|}~", align 16
@out = internal global ptr null, align 8

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable
define internal signext i16 @gsm_add(i16 noundef signext %0, i16 noundef signext %1) #0 {
  %3 = tail call i16 @llvm.sadd.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.sadd.sat.i16(i16, i16) #1

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable
define internal signext i16 @gsm_sub(i16 noundef signext %0, i16 noundef signext %1) #0 {
  %3 = tail call i16 @llvm.ssub.sat.i16(i16 %0, i16 %1)
  ret i16 %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.ssub.sat.i16(i16, i16) #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal signext i16 @gsm_mult(i16 noundef signext %0, i16 noundef signext %1) #2 {
  %3 = icmp eq i16 %0, -32768
  %4 = icmp eq i16 %1, -32768
  %5 = and i1 %3, %4
  %6 = sext i16 %0 to i32
  %7 = sext i16 %1 to i32
  %8 = mul nsw i32 %7, %6
  %9 = lshr i32 %8, 15
  %10 = trunc i32 %9 to i16
  %11 = select i1 %5, i16 32767, i16 %10
  ret i16 %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal signext i16 @gsm_norm(i64 noundef %0) #2 {
  %2 = icmp slt i64 %0, 0
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = icmp ult i64 %0, -1073741823
  br i1 %4, label %32, label %5

5:                                                ; preds = %3
  %6 = xor i64 %0, -1
  br label %7

7:                                                ; preds = %5, %1
  %8 = phi i64 [ %6, %5 ], [ %0, %1 ]
  %9 = and i64 %8, 4294901760
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %7
  %12 = and i64 %8, 4278190080
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %11
  %15 = lshr i64 %8, 24
  br label %24

16:                                               ; preds = %11
  %17 = lshr i64 %8, 16
  br label %24

18:                                               ; preds = %7
  %19 = and i64 %8, 65280
  %20 = icmp eq i64 %19, 0
  %21 = lshr i64 %8, 8
  %22 = select i1 %20, i64 %8, i64 %21
  %23 = select i1 %20, i16 23, i16 15
  br label %24

24:                                               ; preds = %18, %16, %14
  %25 = phi i64 [ %17, %16 ], [ %15, %14 ], [ %22, %18 ]
  %26 = phi i16 [ 7, %16 ], [ -1, %14 ], [ %23, %18 ]
  %27 = and i64 %25, 255
  %28 = getelementptr inbounds [256 x i8], ptr @bitoff, i64 0, i64 %27
  %29 = load i8, ptr %28, align 1, !tbaa !7
  %30 = zext i8 %29 to i16
  %31 = add nsw i16 %26, %30
  br label %32

32:                                               ; preds = %24, %3
  %33 = phi i16 [ 0, %3 ], [ %31, %24 ]
  ret i16 %33
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal signext i16 @gsm_asl(i16 noundef signext %0, i32 noundef %1) #2 {
  %3 = icmp sgt i32 %1, 15
  br i1 %3, label %19, label %4

4:                                                ; preds = %2
  %5 = icmp slt i32 %1, -15
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = ashr i16 %0, 15
  br label %19

8:                                                ; preds = %4
  %9 = icmp slt i32 %1, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = sub nsw i32 0, %1
  %12 = sext i16 %0 to i32
  %13 = ashr i32 %12, %11
  %14 = trunc i32 %13 to i16
  br label %19

15:                                               ; preds = %8
  %16 = zext i16 %0 to i32
  %17 = shl nuw nsw i32 %16, %1
  %18 = trunc i32 %17 to i16
  br label %19

19:                                               ; preds = %15, %10, %6, %2
  %20 = phi i16 [ %7, %6 ], [ %18, %15 ], [ 0, %2 ], [ %14, %10 ]
  ret i16 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal signext i16 @gsm_asr(i16 noundef signext %0, i32 noundef %1) #2 {
  %3 = icmp sgt i32 %1, 15
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = ashr i16 %0, 15
  br label %19

6:                                                ; preds = %2
  %7 = icmp slt i32 %1, -15
  br i1 %7, label %19, label %8

8:                                                ; preds = %6
  %9 = icmp slt i32 %1, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = zext i16 %0 to i32
  %12 = sub nsw i32 0, %1
  %13 = shl nuw nsw i32 %11, %12
  %14 = trunc i32 %13 to i16
  br label %19

15:                                               ; preds = %8
  %16 = sext i16 %0 to i32
  %17 = ashr i32 %16, %1
  %18 = trunc i32 %17 to i16
  br label %19

19:                                               ; preds = %15, %10, %6, %4
  %20 = phi i16 [ %5, %4 ], [ %14, %10 ], [ %18, %15 ], [ 0, %6 ]
  ret i16 %20
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(none) uwtable
define internal signext i16 @gsm_div(i16 noundef signext %0, i16 noundef signext %1) #3 {
  %3 = sext i16 %1 to i64
  %4 = icmp eq i16 %0, 0
  br i1 %4, label %20, label %5

5:                                                ; preds = %2
  %6 = sext i16 %0 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i32 [ %11, %7 ], [ 15, %5 ]
  %9 = phi i16 [ %18, %7 ], [ 0, %5 ]
  %10 = phi i64 [ %16, %7 ], [ %6, %5 ]
  %11 = add nsw i32 %8, -1
  %12 = shl i16 %9, 1
  %13 = shl i64 %10, 1
  %14 = icmp sge i64 %13, %3
  %15 = select i1 %14, i64 %3, i64 0
  %16 = sub nsw i64 %13, %15
  %17 = zext i1 %14 to i16
  %18 = or i16 %12, %17
  %19 = icmp eq i32 %11, 0
  br i1 %19, label %20, label %7, !llvm.loop !10

20:                                               ; preds = %7, %2
  %21 = phi i16 [ 0, %2 ], [ %18, %7 ]
  ret i16 %21
}

; Function Attrs: nounwind optsize uwtable
define internal void @Gsm_Coder(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7) #4 {
  %9 = alloca [160 x i16], align 16
  %10 = getelementptr inbounds i16, ptr %0, i64 120
  call void @llvm.lifetime.start.p0(i64 320, ptr nonnull %9) #31
  call void @Gsm_Preprocess(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %9) #32
  call void @Gsm_LPC_Analysis(ptr noundef %0, ptr noundef nonnull %9, ptr noundef %2) #32
  call void @Gsm_Short_Term_Analysis_Filter(ptr noundef %0, ptr noundef %2, ptr noundef nonnull %9) #32
  br label %11

11:                                               ; preds = %33, %8
  %12 = phi i64 [ 0, %8 ], [ %37, %33 ]
  %13 = phi ptr [ %3, %8 ], [ %21, %33 ]
  %14 = phi ptr [ %10, %8 ], [ %36, %33 ]
  %15 = phi ptr [ %7, %8 ], [ %38, %33 ]
  %16 = phi ptr [ %6, %8 ], [ %22, %33 ]
  %17 = phi ptr [ %5, %8 ], [ %35, %33 ]
  %18 = phi ptr [ %4, %8 ], [ %34, %33 ]
  %19 = mul nuw nsw i64 %12, 40
  %20 = getelementptr inbounds i16, ptr %9, i64 %19
  %21 = getelementptr inbounds i16, ptr %13, i64 1
  call void @Gsm_Long_Term_Predictor(ptr noundef %0, ptr noundef nonnull %20, ptr noundef nonnull %14, ptr noundef nonnull getelementptr inbounds ([50 x i16], ptr @Gsm_Coder.e, i64 0, i64 5), ptr noundef nonnull %14, ptr noundef %13, ptr noundef %18) #32
  %22 = getelementptr inbounds i16, ptr %16, i64 1
  call void @Gsm_RPE_Encoding(ptr noundef %0, ptr noundef nonnull getelementptr inbounds ([50 x i16], ptr @Gsm_Coder.e, i64 0, i64 5), ptr noundef %16, ptr noundef %17, ptr noundef %15) #32
  br label %23

23:                                               ; preds = %23, %11
  %24 = phi i64 [ 0, %11 ], [ %31, %23 ]
  %25 = add nuw nsw i64 %24, 5
  %26 = getelementptr inbounds [50 x i16], ptr @Gsm_Coder.e, i64 0, i64 %25
  %27 = load i16, ptr %26, align 2, !tbaa !12
  %28 = getelementptr inbounds i16, ptr %14, i64 %24
  %29 = load i16, ptr %28, align 2, !tbaa !12
  %30 = call i16 @llvm.sadd.sat.i16(i16 %27, i16 %29)
  store i16 %30, ptr %28, align 2, !tbaa !12
  %31 = add nuw nsw i64 %24, 1
  %32 = icmp eq i64 %31, 40
  br i1 %32, label %33, label %23, !llvm.loop !14

33:                                               ; preds = %23
  %34 = getelementptr inbounds i16, ptr %18, i64 1
  %35 = getelementptr inbounds i16, ptr %17, i64 1
  %36 = getelementptr i16, ptr %14, i64 40
  %37 = add nuw nsw i64 %12, 1
  %38 = getelementptr inbounds i16, ptr %15, i64 13
  %39 = icmp eq i64 %37, 4
  br i1 %39, label %40, label %11, !llvm.loop !15

40:                                               ; preds = %33
  %41 = getelementptr inbounds i16, ptr %0, i64 160
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(240) %0, ptr noundef nonnull align 1 dereferenceable(240) %41, i64 240, i1 false)
  call void @llvm.lifetime.end.p0(i64 320, ptr nonnull %9) #31
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: nounwind optsize uwtable
define internal void @Gsm_Decoder(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr noundef %6, ptr noundef %7) #4 {
  %9 = alloca [40 x i16], align 16
  %10 = alloca [160 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %9) #31
  call void @llvm.lifetime.start.p0(i64 320, ptr nonnull %10) #31
  %11 = getelementptr i16, ptr %0, i64 120
  br label %12

12:                                               ; preds = %12, %8
  %13 = phi i64 [ 0, %8 ], [ %25, %12 ]
  %14 = phi ptr [ %2, %8 ], [ %28, %12 ]
  %15 = phi ptr [ %3, %8 ], [ %27, %12 ]
  %16 = phi ptr [ %6, %8 ], [ %30, %12 ]
  %17 = phi ptr [ %5, %8 ], [ %26, %12 ]
  %18 = phi ptr [ %4, %8 ], [ %29, %12 ]
  %19 = mul nuw nsw i64 %13, 80
  %20 = getelementptr i8, ptr %10, i64 %19
  %21 = load i16, ptr %17, align 2, !tbaa !12
  %22 = load i16, ptr %18, align 2, !tbaa !12
  call void @Gsm_RPE_Decoding(ptr noundef %0, i16 noundef signext %21, i16 noundef signext %22, ptr noundef %16, ptr noundef nonnull %9) #32
  %23 = load i16, ptr %14, align 2, !tbaa !12
  %24 = load i16, ptr %15, align 2, !tbaa !12
  call void @Gsm_Long_Term_Synthesis_Filtering(ptr noundef %0, i16 noundef signext %23, i16 noundef signext %24, ptr noundef nonnull %9, ptr noundef nonnull %11) #32
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(80) %20, ptr noundef nonnull align 2 dereferenceable(80) %11, i64 80, i1 false), !tbaa !12
  %25 = add nuw nsw i64 %13, 1
  %26 = getelementptr inbounds i16, ptr %17, i64 1
  %27 = getelementptr inbounds i16, ptr %15, i64 1
  %28 = getelementptr inbounds i16, ptr %14, i64 1
  %29 = getelementptr inbounds i16, ptr %18, i64 1
  %30 = getelementptr inbounds i16, ptr %16, i64 13
  %31 = icmp eq i64 %25, 4
  br i1 %31, label %32, label %12, !llvm.loop !16

32:                                               ; preds = %12
  call void @Gsm_Short_Term_Synthesis_Filter(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull %10, ptr noundef %7) #32
  %33 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 9
  %34 = load i16, ptr %33, align 2, !tbaa !17
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi ptr [ %7, %32 ], [ %57, %35 ]
  %37 = phi i16 [ %34, %32 ], [ %46, %35 ]
  %38 = phi i32 [ 160, %32 ], [ %39, %35 ]
  %39 = add nsw i32 %38, -1
  %40 = sext i16 %37 to i64
  %41 = load i16, ptr %36, align 2, !tbaa !12
  %42 = mul nsw i64 %40, 242064356802560
  %43 = add nsw i64 %42, 140737488355328
  %44 = lshr i64 %43, 48
  %45 = trunc i64 %44 to i16
  %46 = call i16 @llvm.sadd.sat.i16(i16 %45, i16 %41)
  %47 = zext i16 %46 to i64
  %48 = shl nuw i64 %47, 48
  %49 = ashr exact i64 %48, 47
  %50 = add nsw i64 %49, -32768
  %51 = icmp ult i64 %50, -65536
  %52 = icmp sgt i64 %48, 0
  %53 = select i1 %52, i64 32760, i64 32768
  %54 = select i1 %51, i64 %53, i64 %49
  %55 = trunc i64 %54 to i16
  %56 = and i16 %55, -8
  store i16 %56, ptr %36, align 2, !tbaa !12
  %57 = getelementptr inbounds i16, ptr %36, i64 1
  %58 = icmp eq i32 %39, 0
  br i1 %58, label %59, label %35, !llvm.loop !21

59:                                               ; preds = %35
  %.lcssa = phi i16 [ %46, %35 ]
  store i16 %.lcssa, ptr %33, align 2, !tbaa !17
  call void @llvm.lifetime.end.p0(i64 320, ptr nonnull %10) #31
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %9) #31
  ret void
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable
define internal noalias ptr @gsm_create() #7 {
  %1 = tail call dereferenceable_or_null(656) ptr @calloc(i64 1, i64 656)
  %2 = icmp eq ptr %1, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  %4 = getelementptr inbounds %struct.gsm_state, ptr %1, i64 0, i32 7
  store i16 40, ptr %4, align 2, !tbaa !22
  br label %5

5:                                                ; preds = %3, %0
  ret ptr %1
}

; Function Attrs: nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #8

; Function Attrs: nounwind optsize uwtable
define internal i32 @gsm_decode(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) #4 {
  %4 = alloca [8 x i16], align 16
  %5 = alloca [4 x i16], align 8
  %6 = alloca [4 x i16], align 8
  %7 = alloca [4 x i16], align 8
  %8 = alloca [4 x i16], align 8
  %9 = alloca [52 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #31
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #31
  %10 = load i8, ptr %1, align 1, !tbaa !7
  %11 = and i8 %10, -16
  %12 = icmp eq i8 %11, -48
  br i1 %12, label %13, label %344

13:                                               ; preds = %3
  %14 = getelementptr inbounds i8, ptr %1, i64 1
  %15 = zext i8 %10 to i16
  %16 = shl nuw nsw i16 %15, 2
  %17 = and i16 %16, 60
  %18 = load i8, ptr %14, align 1, !tbaa !7
  %19 = lshr i8 %18, 6
  %20 = zext i8 %19 to i16
  %21 = or i16 %17, %20
  store i16 %21, ptr %4, align 16, !tbaa !12
  %22 = getelementptr inbounds i8, ptr %1, i64 2
  %23 = and i8 %18, 63
  %24 = zext i8 %23 to i16
  %25 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 1
  store i16 %24, ptr %25, align 2, !tbaa !12
  %26 = load i8, ptr %22, align 1, !tbaa !7
  %27 = lshr i8 %26, 3
  %28 = zext i8 %27 to i16
  %29 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 2
  store i16 %28, ptr %29, align 4, !tbaa !12
  %30 = getelementptr inbounds i8, ptr %1, i64 3
  %31 = shl i8 %26, 2
  %32 = and i8 %31, 28
  %33 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 3
  %34 = load i8, ptr %30, align 1, !tbaa !7
  %35 = lshr i8 %34, 6
  %36 = or i8 %35, %32
  %37 = zext i8 %36 to i16
  store i16 %37, ptr %33, align 2, !tbaa !12
  %38 = lshr i8 %34, 2
  %39 = and i8 %38, 15
  %40 = zext i8 %39 to i16
  %41 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 4
  store i16 %40, ptr %41, align 8, !tbaa !12
  %42 = getelementptr inbounds i8, ptr %1, i64 4
  %43 = shl i8 %34, 2
  %44 = and i8 %43, 12
  %45 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 5
  %46 = load i8, ptr %42, align 1, !tbaa !7
  %47 = lshr i8 %46, 6
  %48 = or i8 %47, %44
  %49 = zext i8 %48 to i16
  store i16 %49, ptr %45, align 2, !tbaa !12
  %50 = lshr i8 %46, 3
  %51 = and i8 %50, 7
  %52 = zext i8 %51 to i16
  %53 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 6
  store i16 %52, ptr %53, align 4, !tbaa !12
  %54 = getelementptr inbounds i8, ptr %1, i64 5
  %55 = and i8 %46, 7
  %56 = zext i8 %55 to i16
  %57 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 7
  store i16 %56, ptr %57, align 2, !tbaa !12
  %58 = load i8, ptr %54, align 1, !tbaa !7
  %59 = getelementptr inbounds i8, ptr %1, i64 6
  %60 = load i8, ptr %59, align 1, !tbaa !7
  %61 = getelementptr inbounds i8, ptr %1, i64 7
  %62 = load i8, ptr %61, align 1, !tbaa !7
  %63 = lshr i8 %62, 4
  %64 = and i8 %63, 7
  %65 = zext i8 %64 to i16
  store i16 %65, ptr %9, align 16, !tbaa !12
  %66 = lshr i8 %62, 1
  %67 = and i8 %66, 7
  %68 = zext i8 %67 to i16
  %69 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 1
  store i16 %68, ptr %69, align 2, !tbaa !12
  %70 = getelementptr inbounds i8, ptr %1, i64 8
  %71 = shl i8 %62, 2
  %72 = and i8 %71, 4
  %73 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 2
  %74 = load i8, ptr %70, align 1, !tbaa !7
  %75 = lshr i8 %74, 6
  %76 = or i8 %75, %72
  %77 = zext i8 %76 to i16
  store i16 %77, ptr %73, align 4, !tbaa !12
  %78 = lshr i8 %74, 3
  %79 = and i8 %78, 7
  %80 = zext i8 %79 to i16
  %81 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 3
  store i16 %80, ptr %81, align 2, !tbaa !12
  %82 = getelementptr inbounds i8, ptr %1, i64 9
  %83 = and i8 %74, 7
  %84 = zext i8 %83 to i16
  %85 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 4
  store i16 %84, ptr %85, align 8, !tbaa !12
  %86 = load i8, ptr %82, align 1, !tbaa !7
  %87 = lshr i8 %86, 5
  %88 = zext i8 %87 to i16
  %89 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 5
  store i16 %88, ptr %89, align 2, !tbaa !12
  %90 = lshr i8 %86, 2
  %91 = and i8 %90, 7
  %92 = zext i8 %91 to i16
  %93 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 6
  store i16 %92, ptr %93, align 4, !tbaa !12
  %94 = getelementptr inbounds i8, ptr %1, i64 10
  %95 = shl i8 %86, 1
  %96 = and i8 %95, 6
  %97 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 7
  %98 = load i8, ptr %94, align 1, !tbaa !7
  %99 = lshr i8 %98, 7
  %100 = or i8 %99, %96
  %101 = zext i8 %100 to i16
  store i16 %101, ptr %97, align 2, !tbaa !12
  %102 = lshr i8 %98, 4
  %103 = and i8 %102, 7
  %104 = zext i8 %103 to i16
  %105 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 8
  store i16 %104, ptr %105, align 16, !tbaa !12
  %106 = lshr i8 %98, 1
  %107 = and i8 %106, 7
  %108 = zext i8 %107 to i16
  %109 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 9
  store i16 %108, ptr %109, align 2, !tbaa !12
  %110 = getelementptr inbounds i8, ptr %1, i64 11
  %111 = shl i8 %98, 2
  %112 = and i8 %111, 4
  %113 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 10
  %114 = load i8, ptr %110, align 1, !tbaa !7
  %115 = lshr i8 %114, 6
  %116 = or i8 %115, %112
  %117 = zext i8 %116 to i16
  store i16 %117, ptr %113, align 4, !tbaa !12
  %118 = lshr i8 %114, 3
  %119 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 11
  %120 = getelementptr inbounds i8, ptr %1, i64 12
  %121 = load i8, ptr %120, align 1, !tbaa !7
  %122 = getelementptr inbounds i8, ptr %1, i64 13
  %123 = load i8, ptr %122, align 1, !tbaa !7
  %124 = getelementptr inbounds i8, ptr %1, i64 14
  %125 = load i8, ptr %124, align 1, !tbaa !7
  %126 = lshr i8 %125, 4
  %127 = lshr i8 %125, 1
  %128 = insertelement <4 x i8> poison, i8 %118, i64 0
  %129 = insertelement <4 x i8> %128, i8 %114, i64 1
  %130 = insertelement <4 x i8> %129, i8 %126, i64 2
  %131 = insertelement <4 x i8> %130, i8 %127, i64 3
  %132 = and <4 x i8> %131, <i8 7, i8 7, i8 7, i8 7>
  %133 = zext <4 x i8> %132 to <4 x i16>
  store <4 x i16> %133, ptr %119, align 2, !tbaa !12
  %134 = getelementptr inbounds i8, ptr %1, i64 15
  %135 = shl i8 %125, 2
  %136 = and i8 %135, 4
  %137 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 15
  %138 = load i8, ptr %134, align 1, !tbaa !7
  %139 = lshr i8 %138, 6
  %140 = or i8 %139, %136
  %141 = zext i8 %140 to i16
  store i16 %141, ptr %137, align 2, !tbaa !12
  %142 = lshr i8 %138, 3
  %143 = and i8 %142, 7
  %144 = zext i8 %143 to i16
  %145 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 16
  store i16 %144, ptr %145, align 16, !tbaa !12
  %146 = getelementptr inbounds i8, ptr %1, i64 16
  %147 = and i8 %138, 7
  %148 = zext i8 %147 to i16
  %149 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 17
  store i16 %148, ptr %149, align 2, !tbaa !12
  %150 = load i8, ptr %146, align 1, !tbaa !7
  %151 = lshr i8 %150, 5
  %152 = zext i8 %151 to i16
  %153 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 18
  store i16 %152, ptr %153, align 4, !tbaa !12
  %154 = lshr i8 %150, 2
  %155 = and i8 %154, 7
  %156 = zext i8 %155 to i16
  %157 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 19
  store i16 %156, ptr %157, align 2, !tbaa !12
  %158 = getelementptr inbounds i8, ptr %1, i64 17
  %159 = shl i8 %150, 1
  %160 = and i8 %159, 6
  %161 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 20
  %162 = load i8, ptr %158, align 1, !tbaa !7
  %163 = lshr i8 %162, 7
  %164 = or i8 %163, %160
  %165 = zext i8 %164 to i16
  store i16 %165, ptr %161, align 8, !tbaa !12
  %166 = lshr i8 %162, 4
  %167 = and i8 %166, 7
  %168 = zext i8 %167 to i16
  %169 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 21
  store i16 %168, ptr %169, align 2, !tbaa !12
  %170 = lshr i8 %162, 1
  %171 = and i8 %170, 7
  %172 = zext i8 %171 to i16
  %173 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 22
  store i16 %172, ptr %173, align 4, !tbaa !12
  %174 = getelementptr inbounds i8, ptr %1, i64 18
  %175 = shl i8 %162, 2
  %176 = and i8 %175, 4
  %177 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 23
  %178 = load i8, ptr %174, align 1, !tbaa !7
  %179 = lshr i8 %178, 6
  %180 = or i8 %179, %176
  %181 = zext i8 %180 to i16
  store i16 %181, ptr %177, align 2, !tbaa !12
  %182 = lshr i8 %178, 3
  %183 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 24
  %184 = getelementptr inbounds i8, ptr %1, i64 19
  %185 = load i8, ptr %184, align 1, !tbaa !7
  %186 = getelementptr inbounds i8, ptr %1, i64 20
  %187 = load i8, ptr %186, align 1, !tbaa !7
  %188 = getelementptr inbounds i8, ptr %1, i64 21
  %189 = load i8, ptr %188, align 1, !tbaa !7
  %190 = lshr i8 %189, 4
  %191 = lshr i8 %189, 1
  %192 = insertelement <4 x i8> poison, i8 %182, i64 0
  %193 = insertelement <4 x i8> %192, i8 %178, i64 1
  %194 = insertelement <4 x i8> %193, i8 %190, i64 2
  %195 = insertelement <4 x i8> %194, i8 %191, i64 3
  %196 = and <4 x i8> %195, <i8 7, i8 7, i8 7, i8 7>
  %197 = zext <4 x i8> %196 to <4 x i16>
  store <4 x i16> %197, ptr %183, align 16, !tbaa !12
  %198 = getelementptr inbounds i8, ptr %1, i64 22
  %199 = shl i8 %189, 2
  %200 = and i8 %199, 4
  %201 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 28
  %202 = load i8, ptr %198, align 1, !tbaa !7
  %203 = lshr i8 %202, 6
  %204 = or i8 %203, %200
  %205 = zext i8 %204 to i16
  store i16 %205, ptr %201, align 8, !tbaa !12
  %206 = lshr i8 %202, 3
  %207 = and i8 %206, 7
  %208 = zext i8 %207 to i16
  %209 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 29
  store i16 %208, ptr %209, align 2, !tbaa !12
  %210 = getelementptr inbounds i8, ptr %1, i64 23
  %211 = and i8 %202, 7
  %212 = zext i8 %211 to i16
  %213 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 30
  store i16 %212, ptr %213, align 4, !tbaa !12
  %214 = load i8, ptr %210, align 1, !tbaa !7
  %215 = lshr i8 %214, 5
  %216 = zext i8 %215 to i16
  %217 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 31
  store i16 %216, ptr %217, align 2, !tbaa !12
  %218 = lshr i8 %214, 2
  %219 = and i8 %218, 7
  %220 = zext i8 %219 to i16
  %221 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 32
  store i16 %220, ptr %221, align 16, !tbaa !12
  %222 = getelementptr inbounds i8, ptr %1, i64 24
  %223 = shl i8 %214, 1
  %224 = and i8 %223, 6
  %225 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 33
  %226 = load i8, ptr %222, align 1, !tbaa !7
  %227 = lshr i8 %226, 7
  %228 = or i8 %227, %224
  %229 = zext i8 %228 to i16
  store i16 %229, ptr %225, align 2, !tbaa !12
  %230 = lshr i8 %226, 4
  %231 = and i8 %230, 7
  %232 = zext i8 %231 to i16
  %233 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 34
  store i16 %232, ptr %233, align 4, !tbaa !12
  %234 = lshr i8 %226, 1
  %235 = and i8 %234, 7
  %236 = zext i8 %235 to i16
  %237 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 35
  store i16 %236, ptr %237, align 2, !tbaa !12
  %238 = getelementptr inbounds i8, ptr %1, i64 25
  %239 = shl i8 %226, 2
  %240 = and i8 %239, 4
  %241 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 36
  %242 = load i8, ptr %238, align 1, !tbaa !7
  %243 = lshr i8 %242, 6
  %244 = or i8 %243, %240
  %245 = zext i8 %244 to i16
  store i16 %245, ptr %241, align 8, !tbaa !12
  %246 = lshr i8 %242, 3
  %247 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 37
  %248 = getelementptr inbounds i8, ptr %1, i64 26
  %249 = load i8, ptr %248, align 1, !tbaa !7
  %250 = insertelement <4 x i8> poison, i8 %58, i64 0
  %251 = insertelement <4 x i8> %250, i8 %121, i64 1
  %252 = insertelement <4 x i8> %251, i8 %185, i64 2
  %253 = insertelement <4 x i8> %252, i8 %249, i64 3
  %254 = lshr <4 x i8> %253, <i8 1, i8 1, i8 1, i8 1>
  %255 = zext <4 x i8> %254 to <4 x i16>
  store <4 x i16> %255, ptr %5, align 8, !tbaa !12
  %256 = getelementptr inbounds i8, ptr %1, i64 27
  %257 = load i8, ptr %256, align 1, !tbaa !7
  %258 = shl <4 x i8> %253, <i8 1, i8 1, i8 1, i8 1>
  %259 = and <4 x i8> %258, <i8 2, i8 2, i8 2, i8 2>
  %260 = insertelement <4 x i8> poison, i8 %60, i64 0
  %261 = insertelement <4 x i8> %260, i8 %123, i64 1
  %262 = insertelement <4 x i8> %261, i8 %187, i64 2
  %263 = insertelement <4 x i8> %262, i8 %257, i64 3
  %264 = lshr <4 x i8> %263, <i8 7, i8 7, i8 7, i8 7>
  %265 = or <4 x i8> %264, %259
  %266 = zext <4 x i8> %265 to <4 x i16>
  store <4 x i16> %266, ptr %7, align 8, !tbaa !12
  %267 = lshr <4 x i8> %263, <i8 5, i8 5, i8 5, i8 5>
  %268 = and <4 x i8> %267, <i8 3, i8 3, i8 3, i8 3>
  %269 = zext <4 x i8> %268 to <4 x i16>
  store <4 x i16> %269, ptr %6, align 8, !tbaa !12
  %270 = getelementptr inbounds i8, ptr %1, i64 28
  %271 = load i8, ptr %270, align 1, !tbaa !7
  %272 = shl <4 x i8> %263, <i8 1, i8 1, i8 1, i8 1>
  %273 = and <4 x i8> %272, <i8 62, i8 62, i8 62, i8 62>
  %274 = insertelement <4 x i8> poison, i8 %62, i64 0
  %275 = insertelement <4 x i8> %274, i8 %125, i64 1
  %276 = insertelement <4 x i8> %275, i8 %189, i64 2
  %277 = insertelement <4 x i8> %276, i8 %271, i64 3
  %278 = lshr <4 x i8> %277, <i8 7, i8 7, i8 7, i8 7>
  %279 = or <4 x i8> %278, %273
  %280 = zext <4 x i8> %279 to <4 x i16>
  store <4 x i16> %280, ptr %8, align 8, !tbaa !12
  %281 = lshr i8 %271, 4
  %282 = lshr i8 %271, 1
  %283 = insertelement <4 x i8> poison, i8 %246, i64 0
  %284 = insertelement <4 x i8> %283, i8 %242, i64 1
  %285 = insertelement <4 x i8> %284, i8 %281, i64 2
  %286 = insertelement <4 x i8> %285, i8 %282, i64 3
  %287 = and <4 x i8> %286, <i8 7, i8 7, i8 7, i8 7>
  %288 = zext <4 x i8> %287 to <4 x i16>
  store <4 x i16> %288, ptr %247, align 2, !tbaa !12
  %289 = getelementptr inbounds i8, ptr %1, i64 29
  %290 = shl i8 %271, 2
  %291 = and i8 %290, 4
  %292 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 41
  %293 = load i8, ptr %289, align 1, !tbaa !7
  %294 = lshr i8 %293, 6
  %295 = or i8 %294, %291
  %296 = zext i8 %295 to i16
  store i16 %296, ptr %292, align 2, !tbaa !12
  %297 = lshr i8 %293, 3
  %298 = and i8 %297, 7
  %299 = zext i8 %298 to i16
  %300 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 42
  store i16 %299, ptr %300, align 4, !tbaa !12
  %301 = getelementptr inbounds i8, ptr %1, i64 30
  %302 = and i8 %293, 7
  %303 = zext i8 %302 to i16
  %304 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 43
  store i16 %303, ptr %304, align 2, !tbaa !12
  %305 = load i8, ptr %301, align 1, !tbaa !7
  %306 = lshr i8 %305, 5
  %307 = zext i8 %306 to i16
  %308 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 44
  store i16 %307, ptr %308, align 8, !tbaa !12
  %309 = lshr i8 %305, 2
  %310 = and i8 %309, 7
  %311 = zext i8 %310 to i16
  %312 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 45
  store i16 %311, ptr %312, align 2, !tbaa !12
  %313 = getelementptr inbounds i8, ptr %1, i64 31
  %314 = shl i8 %305, 1
  %315 = and i8 %314, 6
  %316 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 46
  %317 = load i8, ptr %313, align 1, !tbaa !7
  %318 = lshr i8 %317, 7
  %319 = or i8 %318, %315
  %320 = zext i8 %319 to i16
  store i16 %320, ptr %316, align 4, !tbaa !12
  %321 = lshr i8 %317, 4
  %322 = and i8 %321, 7
  %323 = zext i8 %322 to i16
  %324 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 47
  store i16 %323, ptr %324, align 2, !tbaa !12
  %325 = lshr i8 %317, 1
  %326 = and i8 %325, 7
  %327 = zext i8 %326 to i16
  %328 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 48
  store i16 %327, ptr %328, align 16, !tbaa !12
  %329 = getelementptr inbounds i8, ptr %1, i64 32
  %330 = shl i8 %317, 2
  %331 = and i8 %330, 4
  %332 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 49
  %333 = load i8, ptr %329, align 1, !tbaa !7
  %334 = lshr i8 %333, 6
  %335 = or i8 %334, %331
  %336 = zext i8 %335 to i16
  store i16 %336, ptr %332, align 2, !tbaa !12
  %337 = lshr i8 %333, 3
  %338 = and i8 %337, 7
  %339 = zext i8 %338 to i16
  %340 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 50
  store i16 %339, ptr %340, align 4, !tbaa !12
  %341 = and i8 %333, 7
  %342 = zext i8 %341 to i16
  %343 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 51
  store i16 %342, ptr %343, align 2, !tbaa !12
  call void @Gsm_Decoder(ptr noundef %0, ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef %2) #32
  br label %344

344:                                              ; preds = %13, %3
  %345 = phi i32 [ 0, %13 ], [ -1, %3 ]
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #31
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #31
  ret i32 %345
}

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @gsm_destroy(ptr noundef %0) #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #32
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #10

; Function Attrs: nounwind optsize uwtable
define internal void @gsm_encode(ptr noundef %0, ptr noundef %1, ptr nocapture noundef writeonly %2) #4 {
  %4 = alloca [8 x i16], align 16
  %5 = alloca [4 x i16], align 2
  %6 = alloca [4 x i16], align 2
  %7 = alloca [4 x i16], align 2
  %8 = alloca [4 x i16], align 2
  %9 = alloca [52 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #31
  call void @llvm.lifetime.start.p0(i64 104, ptr nonnull %9) #31
  call void @Gsm_Coder(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %8, ptr noundef nonnull %9) #32
  %10 = load i16, ptr %4, align 16, !tbaa !12
  %11 = trunc i16 %10 to i8
  %12 = lshr i8 %11, 2
  %13 = and i8 %12, 15
  %14 = or i8 %13, -48
  %15 = getelementptr inbounds i8, ptr %2, i64 1
  store i8 %14, ptr %2, align 1, !tbaa !7
  %16 = shl i16 %10, 6
  %17 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 1
  %18 = load i16, ptr %17, align 2, !tbaa !12
  %19 = and i16 %18, 63
  %20 = or i16 %19, %16
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds i8, ptr %2, i64 2
  store i8 %21, ptr %15, align 1, !tbaa !7
  %23 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 2
  %24 = load i16, ptr %23, align 4, !tbaa !12
  %25 = shl i16 %24, 3
  %26 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 3
  %27 = load i16, ptr %26, align 2, !tbaa !12
  %28 = lshr i16 %27, 2
  %29 = and i16 %28, 7
  %30 = or i16 %29, %25
  %31 = trunc i16 %30 to i8
  %32 = getelementptr inbounds i8, ptr %2, i64 3
  store i8 %31, ptr %22, align 1, !tbaa !7
  %33 = shl i16 %27, 6
  %34 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 4
  %35 = load i16, ptr %34, align 8, !tbaa !12
  %36 = shl i16 %35, 2
  %37 = and i16 %36, 60
  %38 = or i16 %37, %33
  %39 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 5
  %40 = load i16, ptr %39, align 2, !tbaa !12
  %41 = lshr i16 %40, 2
  %42 = and i16 %41, 3
  %43 = or i16 %38, %42
  %44 = trunc i16 %43 to i8
  %45 = getelementptr inbounds i8, ptr %2, i64 4
  store i8 %44, ptr %32, align 1, !tbaa !7
  %46 = shl i16 %40, 6
  %47 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 6
  %48 = load i16, ptr %47, align 4, !tbaa !12
  %49 = shl i16 %48, 3
  %50 = and i16 %49, 56
  %51 = or i16 %50, %46
  %52 = getelementptr inbounds [8 x i16], ptr %4, i64 0, i64 7
  %53 = load i16, ptr %52, align 2, !tbaa !12
  %54 = and i16 %53, 7
  %55 = or i16 %51, %54
  %56 = trunc i16 %55 to i8
  %57 = getelementptr inbounds i8, ptr %2, i64 5
  store i8 %56, ptr %45, align 1, !tbaa !7
  %58 = load i16, ptr %5, align 2, !tbaa !12
  %59 = shl i16 %58, 1
  %60 = load i16, ptr %7, align 2, !tbaa !12
  %61 = lshr i16 %60, 1
  %62 = and i16 %61, 1
  %63 = or i16 %62, %59
  %64 = trunc i16 %63 to i8
  %65 = getelementptr inbounds i8, ptr %2, i64 6
  store i8 %64, ptr %57, align 1, !tbaa !7
  %66 = shl i16 %60, 7
  %67 = load i16, ptr %6, align 2, !tbaa !12
  %68 = shl i16 %67, 5
  %69 = and i16 %68, 96
  %70 = or i16 %69, %66
  %71 = load i16, ptr %8, align 2, !tbaa !12
  %72 = lshr i16 %71, 1
  %73 = and i16 %72, 31
  %74 = or i16 %70, %73
  %75 = trunc i16 %74 to i8
  %76 = getelementptr inbounds i8, ptr %2, i64 7
  store i8 %75, ptr %65, align 1, !tbaa !7
  %77 = shl i16 %71, 7
  %78 = load i16, ptr %9, align 16, !tbaa !12
  %79 = shl i16 %78, 4
  %80 = and i16 %79, 112
  %81 = or i16 %80, %77
  %82 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 1
  %83 = load i16, ptr %82, align 2, !tbaa !12
  %84 = shl i16 %83, 1
  %85 = and i16 %84, 14
  %86 = or i16 %81, %85
  %87 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 2
  %88 = load i16, ptr %87, align 4, !tbaa !12
  %89 = lshr i16 %88, 2
  %90 = and i16 %89, 1
  %91 = or i16 %86, %90
  %92 = trunc i16 %91 to i8
  %93 = getelementptr inbounds i8, ptr %2, i64 8
  store i8 %92, ptr %76, align 1, !tbaa !7
  %94 = shl i16 %88, 6
  %95 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 3
  %96 = load i16, ptr %95, align 2, !tbaa !12
  %97 = shl i16 %96, 3
  %98 = and i16 %97, 56
  %99 = or i16 %98, %94
  %100 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 4
  %101 = load i16, ptr %100, align 8, !tbaa !12
  %102 = and i16 %101, 7
  %103 = or i16 %99, %102
  %104 = trunc i16 %103 to i8
  %105 = getelementptr inbounds i8, ptr %2, i64 9
  store i8 %104, ptr %93, align 1, !tbaa !7
  %106 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 5
  %107 = load i16, ptr %106, align 2, !tbaa !12
  %108 = shl i16 %107, 5
  %109 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 6
  %110 = load i16, ptr %109, align 4, !tbaa !12
  %111 = shl i16 %110, 2
  %112 = and i16 %111, 28
  %113 = or i16 %112, %108
  %114 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 7
  %115 = load i16, ptr %114, align 2, !tbaa !12
  %116 = lshr i16 %115, 1
  %117 = and i16 %116, 3
  %118 = or i16 %113, %117
  %119 = trunc i16 %118 to i8
  %120 = getelementptr inbounds i8, ptr %2, i64 10
  store i8 %119, ptr %105, align 1, !tbaa !7
  %121 = shl i16 %115, 7
  %122 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 8
  %123 = load i16, ptr %122, align 16, !tbaa !12
  %124 = shl i16 %123, 4
  %125 = and i16 %124, 112
  %126 = or i16 %125, %121
  %127 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 9
  %128 = load i16, ptr %127, align 2, !tbaa !12
  %129 = shl i16 %128, 1
  %130 = and i16 %129, 14
  %131 = or i16 %126, %130
  %132 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 10
  %133 = load i16, ptr %132, align 4, !tbaa !12
  %134 = lshr i16 %133, 2
  %135 = and i16 %134, 1
  %136 = or i16 %131, %135
  %137 = trunc i16 %136 to i8
  %138 = getelementptr inbounds i8, ptr %2, i64 11
  store i8 %137, ptr %120, align 1, !tbaa !7
  %139 = shl i16 %133, 6
  %140 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 11
  %141 = load i16, ptr %140, align 2, !tbaa !12
  %142 = shl i16 %141, 3
  %143 = and i16 %142, 56
  %144 = or i16 %143, %139
  %145 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 12
  %146 = load i16, ptr %145, align 8, !tbaa !12
  %147 = and i16 %146, 7
  %148 = or i16 %144, %147
  %149 = trunc i16 %148 to i8
  %150 = getelementptr inbounds i8, ptr %2, i64 12
  store i8 %149, ptr %138, align 1, !tbaa !7
  %151 = getelementptr inbounds [4 x i16], ptr %5, i64 0, i64 1
  %152 = load i16, ptr %151, align 2, !tbaa !12
  %153 = shl i16 %152, 1
  %154 = getelementptr inbounds [4 x i16], ptr %7, i64 0, i64 1
  %155 = load i16, ptr %154, align 2, !tbaa !12
  %156 = lshr i16 %155, 1
  %157 = and i16 %156, 1
  %158 = or i16 %157, %153
  %159 = trunc i16 %158 to i8
  %160 = getelementptr inbounds i8, ptr %2, i64 13
  store i8 %159, ptr %150, align 1, !tbaa !7
  %161 = shl i16 %155, 7
  %162 = getelementptr inbounds [4 x i16], ptr %6, i64 0, i64 1
  %163 = load i16, ptr %162, align 2, !tbaa !12
  %164 = shl i16 %163, 5
  %165 = and i16 %164, 96
  %166 = or i16 %165, %161
  %167 = getelementptr inbounds [4 x i16], ptr %8, i64 0, i64 1
  %168 = load i16, ptr %167, align 2, !tbaa !12
  %169 = lshr i16 %168, 1
  %170 = and i16 %169, 31
  %171 = or i16 %166, %170
  %172 = trunc i16 %171 to i8
  %173 = getelementptr inbounds i8, ptr %2, i64 14
  store i8 %172, ptr %160, align 1, !tbaa !7
  %174 = shl i16 %168, 7
  %175 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 13
  %176 = load i16, ptr %175, align 2, !tbaa !12
  %177 = shl i16 %176, 4
  %178 = and i16 %177, 112
  %179 = or i16 %178, %174
  %180 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 14
  %181 = load i16, ptr %180, align 4, !tbaa !12
  %182 = shl i16 %181, 1
  %183 = and i16 %182, 14
  %184 = or i16 %179, %183
  %185 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 15
  %186 = load i16, ptr %185, align 2, !tbaa !12
  %187 = lshr i16 %186, 2
  %188 = and i16 %187, 1
  %189 = or i16 %184, %188
  %190 = trunc i16 %189 to i8
  %191 = getelementptr inbounds i8, ptr %2, i64 15
  store i8 %190, ptr %173, align 1, !tbaa !7
  %192 = shl i16 %186, 6
  %193 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 16
  %194 = load i16, ptr %193, align 16, !tbaa !12
  %195 = shl i16 %194, 3
  %196 = and i16 %195, 56
  %197 = or i16 %196, %192
  %198 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 17
  %199 = load i16, ptr %198, align 2, !tbaa !12
  %200 = and i16 %199, 7
  %201 = or i16 %197, %200
  %202 = trunc i16 %201 to i8
  %203 = getelementptr inbounds i8, ptr %2, i64 16
  store i8 %202, ptr %191, align 1, !tbaa !7
  %204 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 18
  %205 = load i16, ptr %204, align 4, !tbaa !12
  %206 = shl i16 %205, 5
  %207 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 19
  %208 = load i16, ptr %207, align 2, !tbaa !12
  %209 = shl i16 %208, 2
  %210 = and i16 %209, 28
  %211 = or i16 %210, %206
  %212 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 20
  %213 = load i16, ptr %212, align 8, !tbaa !12
  %214 = lshr i16 %213, 1
  %215 = and i16 %214, 3
  %216 = or i16 %211, %215
  %217 = trunc i16 %216 to i8
  %218 = getelementptr inbounds i8, ptr %2, i64 17
  store i8 %217, ptr %203, align 1, !tbaa !7
  %219 = shl i16 %213, 7
  %220 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 21
  %221 = load i16, ptr %220, align 2, !tbaa !12
  %222 = shl i16 %221, 4
  %223 = and i16 %222, 112
  %224 = or i16 %223, %219
  %225 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 22
  %226 = load i16, ptr %225, align 4, !tbaa !12
  %227 = shl i16 %226, 1
  %228 = and i16 %227, 14
  %229 = or i16 %224, %228
  %230 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 23
  %231 = load i16, ptr %230, align 2, !tbaa !12
  %232 = lshr i16 %231, 2
  %233 = and i16 %232, 1
  %234 = or i16 %229, %233
  %235 = trunc i16 %234 to i8
  %236 = getelementptr inbounds i8, ptr %2, i64 18
  store i8 %235, ptr %218, align 1, !tbaa !7
  %237 = shl i16 %231, 6
  %238 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 24
  %239 = load i16, ptr %238, align 16, !tbaa !12
  %240 = shl i16 %239, 3
  %241 = and i16 %240, 56
  %242 = or i16 %241, %237
  %243 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 25
  %244 = load i16, ptr %243, align 2, !tbaa !12
  %245 = and i16 %244, 7
  %246 = or i16 %242, %245
  %247 = trunc i16 %246 to i8
  %248 = getelementptr inbounds i8, ptr %2, i64 19
  store i8 %247, ptr %236, align 1, !tbaa !7
  %249 = getelementptr inbounds [4 x i16], ptr %5, i64 0, i64 2
  %250 = load i16, ptr %249, align 2, !tbaa !12
  %251 = shl i16 %250, 1
  %252 = getelementptr inbounds [4 x i16], ptr %7, i64 0, i64 2
  %253 = load i16, ptr %252, align 2, !tbaa !12
  %254 = lshr i16 %253, 1
  %255 = and i16 %254, 1
  %256 = or i16 %255, %251
  %257 = trunc i16 %256 to i8
  %258 = getelementptr inbounds i8, ptr %2, i64 20
  store i8 %257, ptr %248, align 1, !tbaa !7
  %259 = shl i16 %253, 7
  %260 = getelementptr inbounds [4 x i16], ptr %6, i64 0, i64 2
  %261 = load i16, ptr %260, align 2, !tbaa !12
  %262 = shl i16 %261, 5
  %263 = and i16 %262, 96
  %264 = or i16 %263, %259
  %265 = getelementptr inbounds [4 x i16], ptr %8, i64 0, i64 2
  %266 = load i16, ptr %265, align 2, !tbaa !12
  %267 = lshr i16 %266, 1
  %268 = and i16 %267, 31
  %269 = or i16 %264, %268
  %270 = trunc i16 %269 to i8
  %271 = getelementptr inbounds i8, ptr %2, i64 21
  store i8 %270, ptr %258, align 1, !tbaa !7
  %272 = shl i16 %266, 7
  %273 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 26
  %274 = load i16, ptr %273, align 4, !tbaa !12
  %275 = shl i16 %274, 4
  %276 = and i16 %275, 112
  %277 = or i16 %276, %272
  %278 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 27
  %279 = load i16, ptr %278, align 2, !tbaa !12
  %280 = shl i16 %279, 1
  %281 = and i16 %280, 14
  %282 = or i16 %277, %281
  %283 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 28
  %284 = load i16, ptr %283, align 8, !tbaa !12
  %285 = lshr i16 %284, 2
  %286 = and i16 %285, 1
  %287 = or i16 %282, %286
  %288 = trunc i16 %287 to i8
  %289 = getelementptr inbounds i8, ptr %2, i64 22
  store i8 %288, ptr %271, align 1, !tbaa !7
  %290 = shl i16 %284, 6
  %291 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 29
  %292 = load i16, ptr %291, align 2, !tbaa !12
  %293 = shl i16 %292, 3
  %294 = and i16 %293, 56
  %295 = or i16 %294, %290
  %296 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 30
  %297 = load i16, ptr %296, align 4, !tbaa !12
  %298 = and i16 %297, 7
  %299 = or i16 %295, %298
  %300 = trunc i16 %299 to i8
  %301 = getelementptr inbounds i8, ptr %2, i64 23
  store i8 %300, ptr %289, align 1, !tbaa !7
  %302 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 31
  %303 = load i16, ptr %302, align 2, !tbaa !12
  %304 = shl i16 %303, 5
  %305 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 32
  %306 = load i16, ptr %305, align 16, !tbaa !12
  %307 = shl i16 %306, 2
  %308 = and i16 %307, 28
  %309 = or i16 %308, %304
  %310 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 33
  %311 = load i16, ptr %310, align 2, !tbaa !12
  %312 = lshr i16 %311, 1
  %313 = and i16 %312, 3
  %314 = or i16 %309, %313
  %315 = trunc i16 %314 to i8
  %316 = getelementptr inbounds i8, ptr %2, i64 24
  store i8 %315, ptr %301, align 1, !tbaa !7
  %317 = shl i16 %311, 7
  %318 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 34
  %319 = load i16, ptr %318, align 4, !tbaa !12
  %320 = shl i16 %319, 4
  %321 = and i16 %320, 112
  %322 = or i16 %321, %317
  %323 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 35
  %324 = load i16, ptr %323, align 2, !tbaa !12
  %325 = shl i16 %324, 1
  %326 = and i16 %325, 14
  %327 = or i16 %322, %326
  %328 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 36
  %329 = load i16, ptr %328, align 8, !tbaa !12
  %330 = lshr i16 %329, 2
  %331 = and i16 %330, 1
  %332 = or i16 %327, %331
  %333 = trunc i16 %332 to i8
  %334 = getelementptr inbounds i8, ptr %2, i64 25
  store i8 %333, ptr %316, align 1, !tbaa !7
  %335 = shl i16 %329, 6
  %336 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 37
  %337 = load i16, ptr %336, align 2, !tbaa !12
  %338 = shl i16 %337, 3
  %339 = and i16 %338, 56
  %340 = or i16 %339, %335
  %341 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 38
  %342 = load i16, ptr %341, align 4, !tbaa !12
  %343 = and i16 %342, 7
  %344 = or i16 %340, %343
  %345 = trunc i16 %344 to i8
  %346 = getelementptr inbounds i8, ptr %2, i64 26
  store i8 %345, ptr %334, align 1, !tbaa !7
  %347 = getelementptr inbounds [4 x i16], ptr %5, i64 0, i64 3
  %348 = load i16, ptr %347, align 2, !tbaa !12
  %349 = shl i16 %348, 1
  %350 = getelementptr inbounds [4 x i16], ptr %7, i64 0, i64 3
  %351 = load i16, ptr %350, align 2, !tbaa !12
  %352 = lshr i16 %351, 1
  %353 = and i16 %352, 1
  %354 = or i16 %353, %349
  %355 = trunc i16 %354 to i8
  %356 = getelementptr inbounds i8, ptr %2, i64 27
  store i8 %355, ptr %346, align 1, !tbaa !7
  %357 = shl i16 %351, 7
  %358 = getelementptr inbounds [4 x i16], ptr %6, i64 0, i64 3
  %359 = load i16, ptr %358, align 2, !tbaa !12
  %360 = shl i16 %359, 5
  %361 = and i16 %360, 96
  %362 = or i16 %361, %357
  %363 = getelementptr inbounds [4 x i16], ptr %8, i64 0, i64 3
  %364 = load i16, ptr %363, align 2, !tbaa !12
  %365 = lshr i16 %364, 1
  %366 = and i16 %365, 31
  %367 = or i16 %362, %366
  %368 = trunc i16 %367 to i8
  %369 = getelementptr inbounds i8, ptr %2, i64 28
  store i8 %368, ptr %356, align 1, !tbaa !7
  %370 = shl i16 %364, 7
  %371 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 39
  %372 = load i16, ptr %371, align 2, !tbaa !12
  %373 = shl i16 %372, 4
  %374 = and i16 %373, 112
  %375 = or i16 %374, %370
  %376 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 40
  %377 = load i16, ptr %376, align 16, !tbaa !12
  %378 = shl i16 %377, 1
  %379 = and i16 %378, 14
  %380 = or i16 %375, %379
  %381 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 41
  %382 = load i16, ptr %381, align 2, !tbaa !12
  %383 = lshr i16 %382, 2
  %384 = and i16 %383, 1
  %385 = or i16 %380, %384
  %386 = trunc i16 %385 to i8
  %387 = getelementptr inbounds i8, ptr %2, i64 29
  store i8 %386, ptr %369, align 1, !tbaa !7
  %388 = shl i16 %382, 6
  %389 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 42
  %390 = load i16, ptr %389, align 4, !tbaa !12
  %391 = shl i16 %390, 3
  %392 = and i16 %391, 56
  %393 = or i16 %392, %388
  %394 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 43
  %395 = load i16, ptr %394, align 2, !tbaa !12
  %396 = and i16 %395, 7
  %397 = or i16 %393, %396
  %398 = trunc i16 %397 to i8
  %399 = getelementptr inbounds i8, ptr %2, i64 30
  store i8 %398, ptr %387, align 1, !tbaa !7
  %400 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 44
  %401 = load i16, ptr %400, align 8, !tbaa !12
  %402 = shl i16 %401, 5
  %403 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 45
  %404 = load i16, ptr %403, align 2, !tbaa !12
  %405 = shl i16 %404, 2
  %406 = and i16 %405, 28
  %407 = or i16 %406, %402
  %408 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 46
  %409 = load i16, ptr %408, align 4, !tbaa !12
  %410 = lshr i16 %409, 1
  %411 = and i16 %410, 3
  %412 = or i16 %407, %411
  %413 = trunc i16 %412 to i8
  %414 = getelementptr inbounds i8, ptr %2, i64 31
  store i8 %413, ptr %399, align 1, !tbaa !7
  %415 = shl i16 %409, 7
  %416 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 47
  %417 = load i16, ptr %416, align 2, !tbaa !12
  %418 = shl i16 %417, 4
  %419 = and i16 %418, 112
  %420 = or i16 %419, %415
  %421 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 48
  %422 = load i16, ptr %421, align 16, !tbaa !12
  %423 = shl i16 %422, 1
  %424 = and i16 %423, 14
  %425 = or i16 %420, %424
  %426 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 49
  %427 = load i16, ptr %426, align 2, !tbaa !12
  %428 = lshr i16 %427, 2
  %429 = and i16 %428, 1
  %430 = or i16 %425, %429
  %431 = trunc i16 %430 to i8
  %432 = getelementptr inbounds i8, ptr %2, i64 32
  store i8 %431, ptr %414, align 1, !tbaa !7
  %433 = shl i16 %427, 6
  %434 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 50
  %435 = load i16, ptr %434, align 4, !tbaa !12
  %436 = shl i16 %435, 3
  %437 = and i16 %436, 56
  %438 = or i16 %437, %433
  %439 = getelementptr inbounds [52 x i16], ptr %9, i64 0, i64 51
  %440 = load i16, ptr %439, align 2, !tbaa !12
  %441 = and i16 %440, 7
  %442 = or i16 %438, %441
  %443 = trunc i16 %442 to i8
  store i8 %443, ptr %432, align 1, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 104, ptr nonnull %9) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #31
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #31
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gsm_option(ptr nocapture noundef readnone %0, i32 noundef %1, ptr nocapture noundef readnone %2) #2 {
  ret i32 -1
}

; Function Attrs: nounwind optsize uwtable
define internal void @Gsm_Long_Term_Predictor(ptr nocapture noundef readnone %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef %5, ptr nocapture noundef writeonly %6) #4 {
  %8 = alloca [40 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %8) #31
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i64 [ 0, %7 ], [ %20, %9 ]
  %11 = phi <8 x i16> [ zeroinitializer, %7 ], [ %19, %9 ]
  %12 = getelementptr inbounds i16, ptr %1, i64 %10
  %13 = load <8 x i16>, ptr %12, align 2, !tbaa !12
  %14 = icmp slt <8 x i16> %13, zeroinitializer
  %15 = icmp eq <8 x i16> %13, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %16 = sub <8 x i16> zeroinitializer, %13
  %17 = select <8 x i1> %15, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %16
  %18 = select <8 x i1> %14, <8 x i16> %17, <8 x i16> %13
  %19 = tail call <8 x i16> @llvm.smax.v8i16(<8 x i16> %18, <8 x i16> %11)
  %20 = add nuw i64 %10, 8
  %21 = icmp eq i64 %20, 40
  br i1 %21, label %22, label %9, !llvm.loop !23

22:                                               ; preds = %9
  %.lcssa4 = phi <8 x i16> [ %19, %9 ]
  %23 = tail call i16 @llvm.vector.reduce.smax.v8i16(<8 x i16> %.lcssa4)
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %22
  %26 = zext i16 %23 to i64
  %27 = shl nuw nsw i64 %26, 16
  %28 = tail call signext i16 @gsm_norm(i64 noundef %27) #32
  %29 = freeze i16 %28
  %30 = sext i16 %29 to i32
  %31 = icmp sgt i16 %29, 6
  %32 = shl nsw i32 %30, 16
  %33 = sub i32 393216, %32
  %34 = ashr exact i32 %33, 16
  %35 = select i1 %31, i32 0, i32 %34
  br label %36

36:                                               ; preds = %25, %22
  %37 = phi i32 [ 6, %22 ], [ %35, %25 ]
  %38 = insertelement <8 x i32> poison, i32 %37, i64 0
  %39 = shufflevector <8 x i32> %38, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %40

40:                                               ; preds = %40, %36
  %41 = phi i64 [ 0, %36 ], [ %48, %40 ]
  %42 = getelementptr inbounds i16, ptr %1, i64 %41
  %43 = load <8 x i16>, ptr %42, align 2, !tbaa !12
  %44 = sext <8 x i16> %43 to <8 x i32>
  %45 = ashr <8 x i32> %44, %39
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 %41
  store <8 x i16> %46, ptr %47, align 16, !tbaa !12
  %48 = add nuw i64 %41, 8
  %49 = icmp eq i64 %48, 40
  br i1 %49, label %50, label %40, !llvm.loop !26

50:                                               ; preds = %40
  %51 = load i16, ptr %8, align 16, !tbaa !12
  %52 = sext i16 %51 to i64
  %53 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 1
  %54 = load i16, ptr %53, align 2, !tbaa !12
  %55 = sext i16 %54 to i64
  %56 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 2
  %57 = load i16, ptr %56, align 4, !tbaa !12
  %58 = sext i16 %57 to i64
  %59 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 3
  %60 = load i16, ptr %59, align 2, !tbaa !12
  %61 = sext i16 %60 to i64
  %62 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 4
  %63 = load i16, ptr %62, align 8, !tbaa !12
  %64 = sext i16 %63 to i64
  %65 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 5
  %66 = load i16, ptr %65, align 2, !tbaa !12
  %67 = sext i16 %66 to i64
  %68 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 6
  %69 = load i16, ptr %68, align 4, !tbaa !12
  %70 = sext i16 %69 to i64
  %71 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 7
  %72 = load i16, ptr %71, align 2, !tbaa !12
  %73 = sext i16 %72 to i64
  %74 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 8
  %75 = load i16, ptr %74, align 16, !tbaa !12
  %76 = sext i16 %75 to i64
  %77 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 9
  %78 = load i16, ptr %77, align 2, !tbaa !12
  %79 = sext i16 %78 to i64
  %80 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 10
  %81 = load i16, ptr %80, align 4, !tbaa !12
  %82 = sext i16 %81 to i64
  %83 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 11
  %84 = load i16, ptr %83, align 2, !tbaa !12
  %85 = sext i16 %84 to i64
  %86 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 12
  %87 = load i16, ptr %86, align 8, !tbaa !12
  %88 = sext i16 %87 to i64
  %89 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 13
  %90 = load i16, ptr %89, align 2, !tbaa !12
  %91 = sext i16 %90 to i64
  %92 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 14
  %93 = load i16, ptr %92, align 4, !tbaa !12
  %94 = sext i16 %93 to i64
  %95 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 15
  %96 = load i16, ptr %95, align 2, !tbaa !12
  %97 = sext i16 %96 to i64
  %98 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 16
  %99 = load i16, ptr %98, align 16, !tbaa !12
  %100 = sext i16 %99 to i64
  %101 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 17
  %102 = load i16, ptr %101, align 2, !tbaa !12
  %103 = sext i16 %102 to i64
  %104 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 18
  %105 = load i16, ptr %104, align 4, !tbaa !12
  %106 = sext i16 %105 to i64
  %107 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 19
  %108 = load i16, ptr %107, align 2, !tbaa !12
  %109 = sext i16 %108 to i64
  %110 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 20
  %111 = load i16, ptr %110, align 8, !tbaa !12
  %112 = sext i16 %111 to i64
  %113 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 21
  %114 = load i16, ptr %113, align 2, !tbaa !12
  %115 = sext i16 %114 to i64
  %116 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 22
  %117 = load i16, ptr %116, align 4, !tbaa !12
  %118 = sext i16 %117 to i64
  %119 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 23
  %120 = load i16, ptr %119, align 2, !tbaa !12
  %121 = sext i16 %120 to i64
  %122 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 24
  %123 = load i16, ptr %122, align 16, !tbaa !12
  %124 = sext i16 %123 to i64
  %125 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 25
  %126 = load i16, ptr %125, align 2, !tbaa !12
  %127 = sext i16 %126 to i64
  %128 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 26
  %129 = load i16, ptr %128, align 4, !tbaa !12
  %130 = sext i16 %129 to i64
  %131 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 27
  %132 = load i16, ptr %131, align 2, !tbaa !12
  %133 = sext i16 %132 to i64
  %134 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 28
  %135 = load i16, ptr %134, align 8, !tbaa !12
  %136 = sext i16 %135 to i64
  %137 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 29
  %138 = load i16, ptr %137, align 2, !tbaa !12
  %139 = sext i16 %138 to i64
  %140 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 30
  %141 = load i16, ptr %140, align 4, !tbaa !12
  %142 = sext i16 %141 to i64
  %143 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 31
  %144 = load i16, ptr %143, align 2, !tbaa !12
  %145 = sext i16 %144 to i64
  %146 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 32
  %147 = load i16, ptr %146, align 16, !tbaa !12
  %148 = sext i16 %147 to i64
  %149 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 33
  %150 = load i16, ptr %149, align 2, !tbaa !12
  %151 = sext i16 %150 to i64
  %152 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 34
  %153 = load i16, ptr %152, align 4, !tbaa !12
  %154 = sext i16 %153 to i64
  %155 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 35
  %156 = load i16, ptr %155, align 2, !tbaa !12
  %157 = sext i16 %156 to i64
  %158 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 36
  %159 = load i16, ptr %158, align 8, !tbaa !12
  %160 = sext i16 %159 to i64
  %161 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 37
  %162 = load i16, ptr %161, align 2, !tbaa !12
  %163 = sext i16 %162 to i64
  %164 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 38
  %165 = load i16, ptr %164, align 4, !tbaa !12
  %166 = sext i16 %165 to i64
  %167 = getelementptr inbounds [40 x i16], ptr %8, i64 0, i64 39
  %168 = load i16, ptr %167, align 2, !tbaa !12
  %169 = sext i16 %168 to i64
  br label %170

170:                                              ; preds = %170, %50
  %171 = phi i64 [ 40, %50 ], [ %417, %170 ]
  %172 = phi i16 [ 40, %50 ], [ %416, %170 ]
  %173 = phi i64 [ 0, %50 ], [ %415, %170 ]
  %174 = trunc i64 %171 to i16
  %175 = sub nsw i64 0, %171
  %176 = getelementptr inbounds i16, ptr %2, i64 %175
  %177 = load i16, ptr %176, align 2, !tbaa !12
  %178 = sext i16 %177 to i64
  %179 = mul nsw i64 %178, %52
  %180 = sub nsw i64 1, %171
  %181 = getelementptr inbounds i16, ptr %2, i64 %180
  %182 = load i16, ptr %181, align 2, !tbaa !12
  %183 = sext i16 %182 to i64
  %184 = mul nsw i64 %183, %55
  %185 = add nsw i64 %184, %179
  %186 = sub nsw i64 2, %171
  %187 = getelementptr inbounds i16, ptr %2, i64 %186
  %188 = load i16, ptr %187, align 2, !tbaa !12
  %189 = sext i16 %188 to i64
  %190 = mul nsw i64 %189, %58
  %191 = add nsw i64 %185, %190
  %192 = sub nsw i64 3, %171
  %193 = getelementptr inbounds i16, ptr %2, i64 %192
  %194 = load i16, ptr %193, align 2, !tbaa !12
  %195 = sext i16 %194 to i64
  %196 = mul nsw i64 %195, %61
  %197 = add nsw i64 %191, %196
  %198 = sub nsw i64 4, %171
  %199 = getelementptr inbounds i16, ptr %2, i64 %198
  %200 = load i16, ptr %199, align 2, !tbaa !12
  %201 = sext i16 %200 to i64
  %202 = mul nsw i64 %201, %64
  %203 = add nsw i64 %197, %202
  %204 = sub nsw i64 5, %171
  %205 = getelementptr inbounds i16, ptr %2, i64 %204
  %206 = load i16, ptr %205, align 2, !tbaa !12
  %207 = sext i16 %206 to i64
  %208 = mul nsw i64 %207, %67
  %209 = add nsw i64 %203, %208
  %210 = sub nsw i64 6, %171
  %211 = getelementptr inbounds i16, ptr %2, i64 %210
  %212 = load i16, ptr %211, align 2, !tbaa !12
  %213 = sext i16 %212 to i64
  %214 = mul nsw i64 %213, %70
  %215 = add nsw i64 %209, %214
  %216 = sub nsw i64 7, %171
  %217 = getelementptr inbounds i16, ptr %2, i64 %216
  %218 = load i16, ptr %217, align 2, !tbaa !12
  %219 = sext i16 %218 to i64
  %220 = mul nsw i64 %219, %73
  %221 = add nsw i64 %215, %220
  %222 = sub nsw i64 8, %171
  %223 = getelementptr inbounds i16, ptr %2, i64 %222
  %224 = load i16, ptr %223, align 2, !tbaa !12
  %225 = sext i16 %224 to i64
  %226 = mul nsw i64 %225, %76
  %227 = add nsw i64 %221, %226
  %228 = sub nsw i64 9, %171
  %229 = getelementptr inbounds i16, ptr %2, i64 %228
  %230 = load i16, ptr %229, align 2, !tbaa !12
  %231 = sext i16 %230 to i64
  %232 = mul nsw i64 %231, %79
  %233 = add nsw i64 %227, %232
  %234 = sub nsw i64 10, %171
  %235 = getelementptr inbounds i16, ptr %2, i64 %234
  %236 = load i16, ptr %235, align 2, !tbaa !12
  %237 = sext i16 %236 to i64
  %238 = mul nsw i64 %237, %82
  %239 = add nsw i64 %233, %238
  %240 = sub nsw i64 11, %171
  %241 = getelementptr inbounds i16, ptr %2, i64 %240
  %242 = load i16, ptr %241, align 2, !tbaa !12
  %243 = sext i16 %242 to i64
  %244 = mul nsw i64 %243, %85
  %245 = add nsw i64 %239, %244
  %246 = sub nsw i64 12, %171
  %247 = getelementptr inbounds i16, ptr %2, i64 %246
  %248 = load i16, ptr %247, align 2, !tbaa !12
  %249 = sext i16 %248 to i64
  %250 = mul nsw i64 %249, %88
  %251 = add nsw i64 %245, %250
  %252 = sub nsw i64 13, %171
  %253 = getelementptr inbounds i16, ptr %2, i64 %252
  %254 = load i16, ptr %253, align 2, !tbaa !12
  %255 = sext i16 %254 to i64
  %256 = mul nsw i64 %255, %91
  %257 = add nsw i64 %251, %256
  %258 = sub nsw i64 14, %171
  %259 = getelementptr inbounds i16, ptr %2, i64 %258
  %260 = load i16, ptr %259, align 2, !tbaa !12
  %261 = sext i16 %260 to i64
  %262 = mul nsw i64 %261, %94
  %263 = add nsw i64 %257, %262
  %264 = sub nsw i64 15, %171
  %265 = getelementptr inbounds i16, ptr %2, i64 %264
  %266 = load i16, ptr %265, align 2, !tbaa !12
  %267 = sext i16 %266 to i64
  %268 = mul nsw i64 %267, %97
  %269 = add nsw i64 %263, %268
  %270 = sub nsw i64 16, %171
  %271 = getelementptr inbounds i16, ptr %2, i64 %270
  %272 = load i16, ptr %271, align 2, !tbaa !12
  %273 = sext i16 %272 to i64
  %274 = mul nsw i64 %273, %100
  %275 = add nsw i64 %269, %274
  %276 = sub nsw i64 17, %171
  %277 = getelementptr inbounds i16, ptr %2, i64 %276
  %278 = load i16, ptr %277, align 2, !tbaa !12
  %279 = sext i16 %278 to i64
  %280 = mul nsw i64 %279, %103
  %281 = add nsw i64 %275, %280
  %282 = sub nsw i64 18, %171
  %283 = getelementptr inbounds i16, ptr %2, i64 %282
  %284 = load i16, ptr %283, align 2, !tbaa !12
  %285 = sext i16 %284 to i64
  %286 = mul nsw i64 %285, %106
  %287 = add nsw i64 %281, %286
  %288 = sub nsw i64 19, %171
  %289 = getelementptr inbounds i16, ptr %2, i64 %288
  %290 = load i16, ptr %289, align 2, !tbaa !12
  %291 = sext i16 %290 to i64
  %292 = mul nsw i64 %291, %109
  %293 = add nsw i64 %287, %292
  %294 = sub nsw i64 20, %171
  %295 = getelementptr inbounds i16, ptr %2, i64 %294
  %296 = load i16, ptr %295, align 2, !tbaa !12
  %297 = sext i16 %296 to i64
  %298 = mul nsw i64 %297, %112
  %299 = add nsw i64 %293, %298
  %300 = sub nsw i64 21, %171
  %301 = getelementptr inbounds i16, ptr %2, i64 %300
  %302 = load i16, ptr %301, align 2, !tbaa !12
  %303 = sext i16 %302 to i64
  %304 = mul nsw i64 %303, %115
  %305 = add nsw i64 %299, %304
  %306 = sub nsw i64 22, %171
  %307 = getelementptr inbounds i16, ptr %2, i64 %306
  %308 = load i16, ptr %307, align 2, !tbaa !12
  %309 = sext i16 %308 to i64
  %310 = mul nsw i64 %309, %118
  %311 = add nsw i64 %305, %310
  %312 = sub nsw i64 23, %171
  %313 = getelementptr inbounds i16, ptr %2, i64 %312
  %314 = load i16, ptr %313, align 2, !tbaa !12
  %315 = sext i16 %314 to i64
  %316 = mul nsw i64 %315, %121
  %317 = add nsw i64 %311, %316
  %318 = sub nsw i64 24, %171
  %319 = getelementptr inbounds i16, ptr %2, i64 %318
  %320 = load i16, ptr %319, align 2, !tbaa !12
  %321 = sext i16 %320 to i64
  %322 = mul nsw i64 %321, %124
  %323 = add nsw i64 %317, %322
  %324 = sub nsw i64 25, %171
  %325 = getelementptr inbounds i16, ptr %2, i64 %324
  %326 = load i16, ptr %325, align 2, !tbaa !12
  %327 = sext i16 %326 to i64
  %328 = mul nsw i64 %327, %127
  %329 = add nsw i64 %323, %328
  %330 = sub nsw i64 26, %171
  %331 = getelementptr inbounds i16, ptr %2, i64 %330
  %332 = load i16, ptr %331, align 2, !tbaa !12
  %333 = sext i16 %332 to i64
  %334 = mul nsw i64 %333, %130
  %335 = add nsw i64 %329, %334
  %336 = sub nsw i64 27, %171
  %337 = getelementptr inbounds i16, ptr %2, i64 %336
  %338 = load i16, ptr %337, align 2, !tbaa !12
  %339 = sext i16 %338 to i64
  %340 = mul nsw i64 %339, %133
  %341 = add nsw i64 %335, %340
  %342 = sub nsw i64 28, %171
  %343 = getelementptr inbounds i16, ptr %2, i64 %342
  %344 = load i16, ptr %343, align 2, !tbaa !12
  %345 = sext i16 %344 to i64
  %346 = mul nsw i64 %345, %136
  %347 = add nsw i64 %341, %346
  %348 = sub nsw i64 29, %171
  %349 = getelementptr inbounds i16, ptr %2, i64 %348
  %350 = load i16, ptr %349, align 2, !tbaa !12
  %351 = sext i16 %350 to i64
  %352 = mul nsw i64 %351, %139
  %353 = add nsw i64 %347, %352
  %354 = sub nsw i64 30, %171
  %355 = getelementptr inbounds i16, ptr %2, i64 %354
  %356 = load i16, ptr %355, align 2, !tbaa !12
  %357 = sext i16 %356 to i64
  %358 = mul nsw i64 %357, %142
  %359 = add nsw i64 %353, %358
  %360 = sub nsw i64 31, %171
  %361 = getelementptr inbounds i16, ptr %2, i64 %360
  %362 = load i16, ptr %361, align 2, !tbaa !12
  %363 = sext i16 %362 to i64
  %364 = mul nsw i64 %363, %145
  %365 = add nsw i64 %359, %364
  %366 = sub nsw i64 32, %171
  %367 = getelementptr inbounds i16, ptr %2, i64 %366
  %368 = load i16, ptr %367, align 2, !tbaa !12
  %369 = sext i16 %368 to i64
  %370 = mul nsw i64 %369, %148
  %371 = add nsw i64 %365, %370
  %372 = sub nsw i64 33, %171
  %373 = getelementptr inbounds i16, ptr %2, i64 %372
  %374 = load i16, ptr %373, align 2, !tbaa !12
  %375 = sext i16 %374 to i64
  %376 = mul nsw i64 %375, %151
  %377 = add nsw i64 %371, %376
  %378 = sub nsw i64 34, %171
  %379 = getelementptr inbounds i16, ptr %2, i64 %378
  %380 = load i16, ptr %379, align 2, !tbaa !12
  %381 = sext i16 %380 to i64
  %382 = mul nsw i64 %381, %154
  %383 = add nsw i64 %377, %382
  %384 = sub nsw i64 35, %171
  %385 = getelementptr inbounds i16, ptr %2, i64 %384
  %386 = load i16, ptr %385, align 2, !tbaa !12
  %387 = sext i16 %386 to i64
  %388 = mul nsw i64 %387, %157
  %389 = add nsw i64 %383, %388
  %390 = sub nsw i64 36, %171
  %391 = getelementptr inbounds i16, ptr %2, i64 %390
  %392 = load i16, ptr %391, align 2, !tbaa !12
  %393 = sext i16 %392 to i64
  %394 = mul nsw i64 %393, %160
  %395 = add nsw i64 %389, %394
  %396 = sub nsw i64 37, %171
  %397 = getelementptr inbounds i16, ptr %2, i64 %396
  %398 = load i16, ptr %397, align 2, !tbaa !12
  %399 = sext i16 %398 to i64
  %400 = mul nsw i64 %399, %163
  %401 = add nsw i64 %395, %400
  %402 = sub nsw i64 38, %171
  %403 = getelementptr inbounds i16, ptr %2, i64 %402
  %404 = load i16, ptr %403, align 2, !tbaa !12
  %405 = sext i16 %404 to i64
  %406 = mul nsw i64 %405, %166
  %407 = add nsw i64 %401, %406
  %408 = sub nsw i64 39, %171
  %409 = getelementptr inbounds i16, ptr %2, i64 %408
  %410 = load i16, ptr %409, align 2, !tbaa !12
  %411 = sext i16 %410 to i64
  %412 = mul nsw i64 %411, %169
  %413 = add nsw i64 %407, %412
  %414 = icmp sgt i64 %413, %173
  %415 = tail call i64 @llvm.smax.i64(i64 %413, i64 %173)
  %416 = select i1 %414, i16 %174, i16 %172
  %417 = add nuw nsw i64 %171, 1
  %418 = icmp eq i64 %417, 121
  br i1 %418, label %419, label %170, !llvm.loop !27

419:                                              ; preds = %170
  %.lcssa3 = phi i64 [ %415, %170 ]
  %.lcssa2 = phi i16 [ %416, %170 ]
  store i16 %.lcssa2, ptr %5, align 2, !tbaa !12
  %420 = sub nsw i32 6, %37
  %421 = sext i16 %.lcssa2 to i64
  br label %422

422:                                              ; preds = %422, %419
  %423 = phi i64 [ 0, %419 ], [ %432, %422 ]
  %424 = phi <2 x i64> [ zeroinitializer, %419 ], [ %431, %422 ]
  %425 = sub nsw i64 %423, %421
  %426 = getelementptr inbounds i16, ptr %2, i64 %425
  %427 = load <2 x i16>, ptr %426, align 2, !tbaa !12
  %428 = ashr <2 x i16> %427, <i16 3, i16 3>
  %429 = sext <2 x i16> %428 to <2 x i64>
  %430 = mul nsw <2 x i64> %429, %429
  %431 = add <2 x i64> %430, %424
  %432 = add nuw i64 %423, 2
  %433 = icmp eq i64 %432, 40
  br i1 %433, label %434, label %422, !llvm.loop !28

434:                                              ; preds = %422
  %.lcssa1 = phi <2 x i64> [ %431, %422 ]
  %435 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %.lcssa1)
  %436 = zext i32 %420 to i64
  %437 = shl nuw nsw i64 %.lcssa3, 1
  %438 = lshr i64 %437, %436
  %439 = shl nuw i64 %435, 1
  %440 = icmp eq i64 %438, 0
  br i1 %440, label %441, label %443

441:                                              ; preds = %434
  store i16 0, ptr %6, align 2, !tbaa !12
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %8) #31
  %442 = load i16, ptr %5, align 2, !tbaa !12
  br label %478

443:                                              ; preds = %434
  %444 = icmp slt i64 %438, %439
  br i1 %444, label %445, label %465

445:                                              ; preds = %443
  %446 = tail call signext i16 @gsm_norm(i64 noundef %439) #32
  %447 = sext i16 %446 to i64
  %448 = and i64 %447, 4294967295
  %449 = shl i64 %438, %448
  %450 = trunc i64 %449 to i32
  %451 = shl i64 %439, %448
  %452 = lshr i64 %451, 16
  %453 = trunc i64 %452 to i16
  %454 = ashr i32 %450, 16
  br label %455

455:                                              ; preds = %462, %445
  %456 = phi i64 [ 0, %445 ], [ %463, %462 ]
  %457 = getelementptr inbounds [4 x i16], ptr @gsm_DLB, i64 0, i64 %456
  %458 = load i16, ptr %457, align 2, !tbaa !12
  %459 = tail call signext i16 @gsm_mult(i16 noundef signext %453, i16 noundef signext %458) #32
  %460 = sext i16 %459 to i32
  %461 = icmp sgt i32 %454, %460
  br i1 %461, label %462, label %467

462:                                              ; preds = %455
  %463 = add nuw nsw i64 %456, 1
  %464 = icmp eq i64 %463, 3
  br i1 %464, label %465, label %455, !llvm.loop !29

465:                                              ; preds = %462, %443
  store i16 3, ptr %6, align 2, !tbaa !12
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %8) #31
  %466 = load i16, ptr %5, align 2, !tbaa !12
  br label %471

467:                                              ; preds = %455
  %.lcssa = phi i64 [ %456, %455 ]
  %468 = trunc i64 %.lcssa to i16
  store i16 %468, ptr %6, align 2, !tbaa !12
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %8) #31
  %469 = load i16, ptr %5, align 2, !tbaa !12
  %470 = sext i16 %468 to i32
  switch i32 %470, label %549 [
    i32 0, label %478
    i32 1, label %476
    i32 2, label %474
    i32 3, label %471
  ]

471:                                              ; preds = %467, %465
  %472 = phi i16 [ %466, %465 ], [ %469, %467 ]
  %473 = sext i16 %472 to i64
  br label %532

474:                                              ; preds = %467
  %475 = sext i16 %469 to i64
  br label %515

476:                                              ; preds = %467
  %477 = sext i16 %469 to i64
  br label %498

478:                                              ; preds = %467, %441
  %479 = phi i16 [ %442, %441 ], [ %469, %467 ]
  %480 = sext i16 %479 to i64
  br label %481

481:                                              ; preds = %481, %478
  %482 = phi i64 [ 0, %478 ], [ %496, %481 ]
  %483 = sub nsw i64 %482, %480
  %484 = getelementptr inbounds i16, ptr %2, i64 %483
  %485 = load i16, ptr %484, align 2, !tbaa !12
  %486 = sext i16 %485 to i32
  %487 = mul nsw i32 %486, 3277
  %488 = add nsw i32 %487, 16384
  %489 = ashr i32 %488, 15
  %490 = trunc i32 %489 to i16
  %491 = getelementptr inbounds i16, ptr %4, i64 %482
  store i16 %490, ptr %491, align 2, !tbaa !12
  %492 = getelementptr inbounds i16, ptr %1, i64 %482
  %493 = load i16, ptr %492, align 2, !tbaa !12
  %494 = tail call i16 @llvm.ssub.sat.i16(i16 %493, i16 %490)
  %495 = getelementptr inbounds i16, ptr %3, i64 %482
  store i16 %494, ptr %495, align 2, !tbaa !12
  %496 = add nuw nsw i64 %482, 1
  %497 = icmp eq i64 %496, 40
  br i1 %497, label %549, label %481, !llvm.loop !30

498:                                              ; preds = %498, %476
  %499 = phi i64 [ 0, %476 ], [ %513, %498 ]
  %500 = sub nsw i64 %499, %477
  %501 = getelementptr inbounds i16, ptr %2, i64 %500
  %502 = load i16, ptr %501, align 2, !tbaa !12
  %503 = sext i16 %502 to i32
  %504 = mul nsw i32 %503, 11469
  %505 = add nsw i32 %504, 16384
  %506 = lshr i32 %505, 15
  %507 = trunc i32 %506 to i16
  %508 = getelementptr inbounds i16, ptr %4, i64 %499
  store i16 %507, ptr %508, align 2, !tbaa !12
  %509 = getelementptr inbounds i16, ptr %1, i64 %499
  %510 = load i16, ptr %509, align 2, !tbaa !12
  %511 = tail call i16 @llvm.ssub.sat.i16(i16 %510, i16 %507)
  %512 = getelementptr inbounds i16, ptr %3, i64 %499
  store i16 %511, ptr %512, align 2, !tbaa !12
  %513 = add nuw nsw i64 %499, 1
  %514 = icmp eq i64 %513, 40
  br i1 %514, label %549, label %498, !llvm.loop !31

515:                                              ; preds = %515, %474
  %516 = phi i64 [ 0, %474 ], [ %530, %515 ]
  %517 = sub nsw i64 %516, %475
  %518 = getelementptr inbounds i16, ptr %2, i64 %517
  %519 = load i16, ptr %518, align 2, !tbaa !12
  %520 = sext i16 %519 to i64
  %521 = mul nsw i64 %520, 21299
  %522 = add nsw i64 %521, 16384
  %523 = lshr i64 %522, 15
  %524 = trunc i64 %523 to i16
  %525 = getelementptr inbounds i16, ptr %4, i64 %516
  store i16 %524, ptr %525, align 2, !tbaa !12
  %526 = getelementptr inbounds i16, ptr %1, i64 %516
  %527 = load i16, ptr %526, align 2, !tbaa !12
  %528 = tail call i16 @llvm.ssub.sat.i16(i16 %527, i16 %524)
  %529 = getelementptr inbounds i16, ptr %3, i64 %516
  store i16 %528, ptr %529, align 2, !tbaa !12
  %530 = add nuw nsw i64 %516, 1
  %531 = icmp eq i64 %530, 40
  br i1 %531, label %549, label %515, !llvm.loop !32

532:                                              ; preds = %532, %471
  %533 = phi i64 [ 0, %471 ], [ %547, %532 ]
  %534 = sub nsw i64 %533, %473
  %535 = getelementptr inbounds i16, ptr %2, i64 %534
  %536 = load i16, ptr %535, align 2, !tbaa !12
  %537 = sext i16 %536 to i64
  %538 = mul nsw i64 %537, 32767
  %539 = add nsw i64 %538, 16384
  %540 = lshr i64 %539, 15
  %541 = trunc i64 %540 to i16
  %542 = getelementptr inbounds i16, ptr %4, i64 %533
  store i16 %541, ptr %542, align 2, !tbaa !12
  %543 = getelementptr inbounds i16, ptr %1, i64 %533
  %544 = load i16, ptr %543, align 2, !tbaa !12
  %545 = tail call i16 @llvm.ssub.sat.i16(i16 %544, i16 %541)
  %546 = getelementptr inbounds i16, ptr %3, i64 %533
  store i16 %545, ptr %546, align 2, !tbaa !12
  %547 = add nuw nsw i64 %533, 1
  %548 = icmp eq i64 %547, 40
  br i1 %548, label %549, label %532, !llvm.loop !33

549:                                              ; preds = %532, %515, %498, %481, %467
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i16> @llvm.smax.v8i16(<8 x i16>, <8 x i16>) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.smax.v8i16(<8 x i16>) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #1

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @Gsm_Long_Term_Synthesis_Filtering(ptr nocapture noundef %0, i16 noundef signext %1, i16 noundef signext %2, ptr nocapture noundef readonly %3, ptr nocapture noundef %4) #11 {
  %6 = add i16 %1, -121
  %7 = icmp ult i16 %6, -81
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 7
  %10 = load i16, ptr %9, align 2, !tbaa !22
  br label %11

11:                                               ; preds = %8, %5
  %12 = phi i16 [ %10, %8 ], [ %1, %5 ]
  %13 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 7
  store i16 %12, ptr %13, align 2, !tbaa !22
  %14 = sext i16 %2 to i64
  %15 = getelementptr inbounds [4 x i16], ptr @gsm_QLB, i64 0, i64 %14
  %16 = load i16, ptr %15, align 2, !tbaa !12
  %17 = sext i16 %16 to i64
  %18 = shl nsw i64 %17, 33
  %19 = sext i16 %12 to i64
  br label %20

20:                                               ; preds = %20, %11
  %21 = phi i64 [ 0, %11 ], [ %34, %20 ]
  %22 = sub nsw i64 %21, %19
  %23 = getelementptr inbounds i16, ptr %4, i64 %22
  %24 = load i16, ptr %23, align 2, !tbaa !12
  %25 = sext i16 %24 to i64
  %26 = getelementptr inbounds i16, ptr %3, i64 %21
  %27 = load i16, ptr %26, align 2, !tbaa !12
  %28 = mul i64 %18, %25
  %29 = add i64 %28, 140737488355328
  %30 = lshr i64 %29, 48
  %31 = trunc i64 %30 to i16
  %32 = tail call i16 @llvm.sadd.sat.i16(i16 %31, i16 %27)
  %33 = getelementptr inbounds i16, ptr %4, i64 %21
  store i16 %32, ptr %33, align 2, !tbaa !12
  %34 = add nuw nsw i64 %21, 1
  %35 = icmp eq i64 %34, 40
  br i1 %35, label %36, label %20, !llvm.loop !34

36:                                               ; preds = %20
  %37 = getelementptr i8, ptr %4, i64 -240
  %38 = getelementptr i8, ptr %4, i64 -160
  tail call void @llvm.memmove.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(240) %37, ptr noundef nonnull align 2 dereferenceable(240) %38, i64 240, i1 false), !tbaa !12
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind optsize uwtable
define internal void @Gsm_LPC_Analysis(ptr nocapture noundef readnone %0, ptr nocapture noundef %1, ptr nocapture noundef %2) #4 {
  %4 = alloca [9 x i16], align 16
  %5 = alloca [9 x i16], align 16
  %6 = alloca [9 x i16], align 16
  %7 = alloca [9 x i64], align 16
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %7) #31
  br label %8

8:                                                ; preds = %8, %3
  %9 = phi i64 [ 0, %3 ], [ %19, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %3 ], [ %18, %8 ]
  %11 = getelementptr inbounds i16, ptr %1, i64 %9
  %12 = load <8 x i16>, ptr %11, align 2, !tbaa !12
  %13 = icmp slt <8 x i16> %12, zeroinitializer
  %14 = icmp eq <8 x i16> %12, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %15 = sub <8 x i16> zeroinitializer, %12
  %16 = select <8 x i1> %14, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %15
  %17 = select <8 x i1> %13, <8 x i16> %16, <8 x i16> %12
  %18 = tail call <8 x i16> @llvm.umax.v8i16(<8 x i16> %17, <8 x i16> %10)
  %19 = add nuw i64 %9, 8
  %20 = icmp eq i64 %19, 160
  br i1 %20, label %21, label %8, !llvm.loop !35

21:                                               ; preds = %8
  %.lcssa12 = phi <8 x i16> [ %18, %8 ]
  %22 = tail call i16 @llvm.vector.reduce.umax.v8i16(<8 x i16> %.lcssa12)
  %23 = icmp eq i16 %22, 0
  br i1 %23, label %76, label %24

24:                                               ; preds = %21
  %25 = zext i16 %22 to i64
  %26 = shl nuw nsw i64 %25, 16
  %27 = tail call signext i16 @gsm_norm(i64 noundef %26) #32
  %28 = sub i16 4, %27
  %29 = sext i16 %28 to i32
  %30 = icmp sgt i16 %28, 0
  br i1 %30, label %31, label %76

31:                                               ; preds = %24
  switch i32 %29, label %76 [
    i32 1, label %65
    i32 2, label %54
    i32 3, label %43
    i32 4, label %32
  ]

32:                                               ; preds = %32, %31
  %33 = phi i64 [ %41, %32 ], [ 0, %31 ]
  %34 = getelementptr inbounds i16, ptr %1, i64 %33
  %35 = load <8 x i16>, ptr %34, align 2, !tbaa !12
  %36 = sext <8 x i16> %35 to <8 x i32>
  %37 = shl nsw <8 x i32> %36, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %38 = add nsw <8 x i32> %37, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %39 = ashr <8 x i32> %38, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %40 = trunc <8 x i32> %39 to <8 x i16>
  store <8 x i16> %40, ptr %34, align 2, !tbaa !12
  %41 = add nuw i64 %33, 8
  %42 = icmp eq i64 %41, 160
  br i1 %42, label %76, label %32, !llvm.loop !36

43:                                               ; preds = %43, %31
  %44 = phi i64 [ %52, %43 ], [ 0, %31 ]
  %45 = getelementptr inbounds i16, ptr %1, i64 %44
  %46 = load <8 x i16>, ptr %45, align 2, !tbaa !12
  %47 = sext <8 x i16> %46 to <8 x i32>
  %48 = shl nsw <8 x i32> %47, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %49 = add nsw <8 x i32> %48, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %50 = ashr <8 x i32> %49, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %51 = trunc <8 x i32> %50 to <8 x i16>
  store <8 x i16> %51, ptr %45, align 2, !tbaa !12
  %52 = add nuw i64 %44, 8
  %53 = icmp eq i64 %52, 160
  br i1 %53, label %76, label %43, !llvm.loop !37

54:                                               ; preds = %54, %31
  %55 = phi i64 [ %63, %54 ], [ 0, %31 ]
  %56 = getelementptr inbounds i16, ptr %1, i64 %55
  %57 = load <8 x i16>, ptr %56, align 2, !tbaa !12
  %58 = sext <8 x i16> %57 to <8 x i32>
  %59 = shl nsw <8 x i32> %58, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %60 = add nsw <8 x i32> %59, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %61 = ashr <8 x i32> %60, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %62 = trunc <8 x i32> %61 to <8 x i16>
  store <8 x i16> %62, ptr %56, align 2, !tbaa !12
  %63 = add nuw i64 %55, 8
  %64 = icmp eq i64 %63, 160
  br i1 %64, label %76, label %54, !llvm.loop !38

65:                                               ; preds = %65, %31
  %66 = phi i64 [ %74, %65 ], [ 0, %31 ]
  %67 = getelementptr inbounds i16, ptr %1, i64 %66
  %68 = load <8 x i16>, ptr %67, align 2, !tbaa !12
  %69 = sext <8 x i16> %68 to <8 x i32>
  %70 = shl nsw <8 x i32> %69, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %71 = add nsw <8 x i32> %70, <i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384, i32 16384>
  %72 = lshr <8 x i32> %71, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  store <8 x i16> %73, ptr %67, align 2, !tbaa !12
  %74 = add nuw i64 %66, 8
  %75 = icmp eq i64 %74, 160
  br i1 %75, label %76, label %65, !llvm.loop !39

76:                                               ; preds = %65, %54, %43, %32, %31, %24, %21
  %77 = phi i1 [ true, %31 ], [ false, %24 ], [ false, %21 ], [ true, %65 ], [ true, %54 ], [ true, %43 ], [ true, %32 ]
  %78 = phi i32 [ %29, %31 ], [ %29, %24 ], [ 0, %21 ], [ 1, %65 ], [ 2, %54 ], [ 3, %43 ], [ 4, %32 ]
  %79 = load i16, ptr %1, align 2, !tbaa !12
  %80 = getelementptr inbounds i8, ptr %7, i64 32
  %81 = sext i16 %79 to i64
  %82 = mul nsw i64 %81, %81
  %83 = getelementptr inbounds i16, ptr %1, i64 1
  %84 = load i16, ptr %83, align 2, !tbaa !12
  %85 = sext i16 %84 to i64
  %86 = mul nsw i64 %85, %85
  %87 = add nuw nsw i64 %86, %82
  %88 = getelementptr inbounds i64, ptr %7, i64 1
  %89 = getelementptr inbounds i16, ptr %1, i64 2
  %90 = load i16, ptr %89, align 2, !tbaa !12
  %91 = sext i16 %90 to i64
  %92 = mul nsw i64 %91, %91
  %93 = add nuw nsw i64 %87, %92
  %94 = add nsw i64 %91, %81
  %95 = mul nsw i64 %94, %85
  %96 = getelementptr inbounds i64, ptr %7, i64 2
  %97 = getelementptr inbounds i16, ptr %1, i64 3
  %98 = load i16, ptr %97, align 2, !tbaa !12
  %99 = sext i16 %98 to i64
  %100 = mul nsw i64 %99, %99
  %101 = add nuw nsw i64 %93, %100
  %102 = mul nsw i64 %99, %91
  %103 = mul nsw i64 %99, %85
  %104 = mul nsw i64 %99, %81
  %105 = getelementptr inbounds i64, ptr %7, i64 3
  %106 = getelementptr inbounds i16, ptr %1, i64 4
  %107 = load i16, ptr %106, align 2, !tbaa !12
  %108 = sext i16 %107 to i64
  %109 = mul nsw i64 %108, %108
  %110 = add nuw nsw i64 %101, %109
  %111 = add nsw i64 %108, %81
  %112 = mul nsw i64 %111, %91
  %113 = add nsw i64 %112, %103
  %114 = mul nsw i64 %108, %81
  %115 = getelementptr inbounds i16, ptr %1, i64 5
  %116 = load i16, ptr %115, align 2, !tbaa !12
  %117 = sext i16 %116 to i64
  %118 = mul nsw i64 %117, %117
  %119 = add nuw nsw i64 %110, %118
  %120 = add nsw i64 %117, %99
  %121 = mul nsw i64 %120, %108
  %122 = add nsw i64 %102, %95
  %123 = add nsw i64 %122, %121
  %124 = mul nsw i64 %117, %91
  %125 = mul nsw i64 %117, %85
  %126 = add nsw i64 %125, %114
  %127 = mul nsw i64 %117, %81
  %128 = getelementptr inbounds i16, ptr %1, i64 6
  %129 = load i16, ptr %128, align 2, !tbaa !12
  %130 = sext i16 %129 to i64
  %131 = mul nsw i64 %130, %130
  %132 = add nuw nsw i64 %131, %119
  %133 = mul nsw i64 %130, %108
  %134 = mul nsw i64 %130, %99
  %135 = mul nsw i64 %130, %91
  %136 = add nsw i64 %126, %135
  %137 = mul nsw i64 %130, %85
  %138 = add nsw i64 %137, %127
  %139 = mul nsw i64 %130, %81
  %140 = getelementptr inbounds i64, ptr %7, i64 6
  %141 = getelementptr inbounds i16, ptr %1, i64 7
  %142 = load i16, ptr %141, align 2, !tbaa !12
  %143 = sext i16 %142 to i64
  %144 = mul nsw i64 %143, %143
  %145 = add nsw i64 %132, %144
  %146 = add nsw i64 %143, %117
  %147 = mul nsw i64 %146, %130
  %148 = add nsw i64 %147, %123
  %149 = add nsw i64 %143, %99
  %150 = mul nsw i64 %149, %117
  %151 = add nsw i64 %133, %113
  %152 = add nsw i64 %151, %150
  %153 = add nsw i64 %143, %85
  %154 = mul nsw i64 %153, %108
  %155 = add nsw i64 %124, %104
  %156 = add nsw i64 %155, %134
  %157 = add nsw i64 %156, %154
  %158 = mul nsw i64 %143, %99
  %159 = add nsw i64 %136, %158
  %160 = mul nsw i64 %143, %91
  %161 = add nsw i64 %138, %160
  %162 = mul nsw i64 %143, %85
  %163 = add nsw i64 %139, %162
  %164 = mul nsw i64 %143, %81
  %165 = getelementptr inbounds i64, ptr %7, i64 7
  %166 = getelementptr inbounds i64, ptr %7, i64 8
  br label %169

167:                                              ; preds = %169
  %.lcssa11 = phi i64 [ %186, %169 ]
  %.lcssa10 = phi i64 [ %189, %169 ]
  %.lcssa9 = phi i64 [ %194, %169 ]
  %.lcssa8 = phi i64 [ %199, %169 ]
  %.lcssa7 = phi i64 [ %204, %169 ]
  %.lcssa6 = phi i64 [ %209, %169 ]
  %.lcssa5 = phi i64 [ %214, %169 ]
  %.lcssa4 = phi i64 [ %219, %169 ]
  %.lcssa3 = phi i64 [ %224, %169 ]
  %168 = getelementptr inbounds i64, ptr %7, i64 5
  store i64 %.lcssa11, ptr %7, align 16, !tbaa !40
  store i64 %.lcssa10, ptr %88, align 8, !tbaa !40
  store i64 %.lcssa9, ptr %96, align 16, !tbaa !40
  store i64 %.lcssa8, ptr %105, align 8, !tbaa !40
  store i64 %.lcssa7, ptr %80, align 16, !tbaa !40
  store i64 %.lcssa6, ptr %168, align 8, !tbaa !40
  store i64 %.lcssa5, ptr %140, align 16, !tbaa !40
  store i64 %.lcssa4, ptr %165, align 8, !tbaa !40
  store i64 %.lcssa3, ptr %166, align 16, !tbaa !40
  br label %227

169:                                              ; preds = %169, %76
  %170 = phi i16 [ %142, %76 ], [ %183, %169 ]
  %171 = phi ptr [ %141, %76 ], [ %182, %169 ]
  %172 = phi i32 [ 8, %76 ], [ %225, %169 ]
  %173 = phi i64 [ %145, %76 ], [ %186, %169 ]
  %174 = phi i64 [ %148, %76 ], [ %189, %169 ]
  %175 = phi i64 [ %152, %76 ], [ %194, %169 ]
  %176 = phi i64 [ %157, %76 ], [ %199, %169 ]
  %177 = phi i64 [ %159, %76 ], [ %204, %169 ]
  %178 = phi i64 [ %161, %76 ], [ %209, %169 ]
  %179 = phi i64 [ %163, %76 ], [ %214, %169 ]
  %180 = phi i64 [ %164, %76 ], [ %219, %169 ]
  %181 = phi i64 [ 0, %76 ], [ %224, %169 ]
  %182 = getelementptr inbounds i16, ptr %171, i64 1
  %183 = load i16, ptr %182, align 2, !tbaa !12
  %184 = sext i16 %183 to i64
  %185 = mul nsw i64 %184, %184
  %186 = add nsw i64 %185, %173
  %187 = sext i16 %170 to i64
  %188 = mul nsw i64 %184, %187
  %189 = add nsw i64 %188, %174
  %190 = getelementptr inbounds i16, ptr %171, i64 -1
  %191 = load i16, ptr %190, align 2, !tbaa !12
  %192 = sext i16 %191 to i64
  %193 = mul nsw i64 %192, %184
  %194 = add nsw i64 %193, %175
  %195 = getelementptr inbounds i16, ptr %171, i64 -2
  %196 = load i16, ptr %195, align 2, !tbaa !12
  %197 = sext i16 %196 to i64
  %198 = mul nsw i64 %197, %184
  %199 = add nsw i64 %198, %176
  %200 = getelementptr inbounds i16, ptr %171, i64 -3
  %201 = load i16, ptr %200, align 2, !tbaa !12
  %202 = sext i16 %201 to i64
  %203 = mul nsw i64 %202, %184
  %204 = add nsw i64 %203, %177
  %205 = getelementptr inbounds i16, ptr %171, i64 -4
  %206 = load i16, ptr %205, align 2, !tbaa !12
  %207 = sext i16 %206 to i64
  %208 = mul nsw i64 %207, %184
  %209 = add nsw i64 %208, %178
  %210 = getelementptr inbounds i16, ptr %171, i64 -5
  %211 = load i16, ptr %210, align 2, !tbaa !12
  %212 = sext i16 %211 to i64
  %213 = mul nsw i64 %212, %184
  %214 = add nsw i64 %213, %179
  %215 = getelementptr inbounds i16, ptr %171, i64 -6
  %216 = load i16, ptr %215, align 2, !tbaa !12
  %217 = sext i16 %216 to i64
  %218 = mul nsw i64 %217, %184
  %219 = add nsw i64 %218, %180
  %220 = getelementptr inbounds i16, ptr %171, i64 -7
  %221 = load i16, ptr %220, align 2, !tbaa !12
  %222 = sext i16 %221 to i64
  %223 = mul nsw i64 %222, %184
  %224 = add nsw i64 %223, %181
  %225 = add nuw nsw i32 %172, 1
  %226 = icmp eq i32 %225, 160
  br i1 %226, label %167, label %169, !llvm.loop !41

227:                                              ; preds = %227, %167
  %228 = phi i64 [ 9, %167 ], [ %229, %227 ]
  %229 = add nsw i64 %228, -1
  %230 = getelementptr inbounds i64, ptr %7, i64 %229
  %231 = load i64, ptr %230, align 8, !tbaa !40
  %232 = shl i64 %231, 1
  store i64 %232, ptr %230, align 8, !tbaa !40
  %233 = icmp eq i64 %229, 0
  br i1 %233, label %234, label %227, !llvm.loop !42

234:                                              ; preds = %227
  br i1 %77, label %235, label %248

235:                                              ; preds = %234
  %236 = insertelement <8 x i32> poison, i32 %78, i64 0
  %237 = shufflevector <8 x i32> %236, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %238

238:                                              ; preds = %238, %235
  %239 = phi i64 [ 0, %235 ], [ %246, %238 ]
  %240 = shl i64 %239, 1
  %241 = getelementptr i8, ptr %1, i64 %240
  %242 = load <8 x i16>, ptr %241, align 2, !tbaa !12
  %243 = zext <8 x i16> %242 to <8 x i32>
  %244 = shl <8 x i32> %243, %237
  %245 = trunc <8 x i32> %244 to <8 x i16>
  store <8 x i16> %245, ptr %241, align 2, !tbaa !12
  %246 = add nuw i64 %239, 8
  %247 = icmp eq i64 %246, 160
  br i1 %247, label %248, label %238, !llvm.loop !43

248:                                              ; preds = %238, %234
  call void @llvm.lifetime.start.p0(i64 18, ptr nonnull %4) #31
  call void @llvm.lifetime.start.p0(i64 18, ptr nonnull %5) #31
  call void @llvm.lifetime.start.p0(i64 18, ptr nonnull %6) #31
  %249 = load i64, ptr %7, align 16, !tbaa !40
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %252

251:                                              ; preds = %248
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(16) %2, i8 0, i64 16, i1 false), !tbaa !12
  br label %347

252:                                              ; preds = %248
  %253 = tail call signext i16 @gsm_norm(i64 noundef %249) #32
  %254 = sext i16 %253 to i64
  %255 = and i64 %254, 4294967295
  br label %256

256:                                              ; preds = %256, %252
  %257 = phi i64 [ 0, %252 ], [ %264, %256 ]
  %258 = getelementptr inbounds i64, ptr %7, i64 %257
  %259 = load i64, ptr %258, align 8, !tbaa !40
  %260 = shl i64 %259, %255
  %261 = lshr i64 %260, 16
  %262 = trunc i64 %261 to i16
  %263 = getelementptr inbounds [9 x i16], ptr %4, i64 0, i64 %257
  store i16 %262, ptr %263, align 2, !tbaa !12
  %264 = add nuw nsw i64 %257, 1
  %265 = icmp eq i64 %264, 9
  br i1 %265, label %266, label %256, !llvm.loop !44

266:                                              ; preds = %256
  %267 = getelementptr inbounds i8, ptr %6, i64 2
  %268 = getelementptr inbounds i8, ptr %4, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(14) %267, ptr noundef nonnull align 2 dereferenceable(14) %268, i64 14, i1 false), !tbaa !12
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(18) %5, ptr noundef nonnull align 16 dereferenceable(18) %4, i64 18, i1 false), !tbaa !12
  %269 = load i16, ptr %5, align 16, !tbaa !12
  %270 = getelementptr inbounds [9 x i16], ptr %5, i64 0, i64 1
  %271 = load i16, ptr %270, align 2, !tbaa !12
  %272 = icmp slt i16 %271, 0
  %273 = icmp eq i16 %271, -32768
  %274 = sub i16 0, %271
  %275 = select i1 %273, i16 32767, i16 %274
  %276 = select i1 %272, i16 %275, i16 %271
  %277 = icmp slt i16 %269, %276
  br i1 %277, label %283, label %286

278:                                              ; preds = %335
  %.lcssa2 = phi i64 [ %337, %335 ]
  %.lcssa1 = phi ptr [ %338, %335 ]
  %.lcssa = phi i64 [ %339, %335 ]
  %279 = trunc i64 %.lcssa2 to i32
  %280 = icmp ult i32 %279, 9
  %281 = shl nuw i64 %.lcssa, 1
  %282 = sub i64 16, %281
  br i1 %280, label %283, label %347

283:                                              ; preds = %278, %266
  %284 = phi ptr [ %.lcssa1, %278 ], [ %2, %266 ]
  %285 = phi i64 [ %282, %278 ], [ 16, %266 ]
  tail call void @llvm.memset.p0.i64(ptr align 2 %284, i8 0, i64 %285, i1 false), !tbaa !12
  br label %347

286:                                              ; preds = %335, %266
  %287 = phi i16 [ %336, %335 ], [ %271, %266 ]
  %288 = phi i64 [ %346, %335 ], [ 7, %266 ]
  %289 = phi i16 [ %344, %335 ], [ %276, %266 ]
  %290 = phi i16 [ %308, %335 ], [ %269, %266 ]
  %291 = phi ptr [ %338, %335 ], [ %2, %266 ]
  %292 = phi i64 [ %337, %335 ], [ 1, %266 ]
  %293 = phi i64 [ %339, %335 ], [ 0, %266 ]
  %294 = tail call i64 @llvm.umax.i64(i64 %288, i64 1)
  %295 = tail call signext i16 @gsm_div(i16 noundef signext %289, i16 noundef signext %290) #32
  %296 = icmp sgt i16 %287, 0
  %297 = sub i16 0, %295
  %298 = select i1 %296, i16 %297, i16 %295
  store i16 %298, ptr %291, align 2, !tbaa !12
  %299 = icmp eq i64 %292, 8
  br i1 %299, label %347, label %300

300:                                              ; preds = %286
  %301 = sext i16 %287 to i64
  %302 = sext i16 %298 to i64
  %303 = shl nsw i64 %301, 33
  %304 = mul i64 %303, %302
  %305 = add i64 %304, 140737488355328
  %306 = lshr i64 %305, 48
  %307 = trunc i64 %306 to i16
  %308 = tail call i16 @llvm.sadd.sat.i16(i16 %307, i16 %290)
  %309 = icmp ugt i64 %292, 7
  br i1 %309, label %335, label %310

310:                                              ; preds = %300
  %311 = shl nsw i64 %302, 33
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 1, %310 ], [ %317, %312 ]
  %314 = getelementptr inbounds [9 x i16], ptr %6, i64 0, i64 %313
  %315 = load i16, ptr %314, align 2, !tbaa !12
  %316 = sext i16 %315 to i64
  %317 = add nuw nsw i64 %313, 1
  %318 = getelementptr inbounds [9 x i16], ptr %5, i64 0, i64 %317
  %319 = load i16, ptr %318, align 2, !tbaa !12
  %320 = sext i16 %319 to i64
  %321 = mul i64 %311, %316
  %322 = add i64 %321, 140737488355328
  %323 = lshr i64 %322, 48
  %324 = trunc i64 %323 to i16
  %325 = tail call i16 @llvm.sadd.sat.i16(i16 %324, i16 %319)
  %326 = getelementptr inbounds [9 x i16], ptr %5, i64 0, i64 %313
  store i16 %325, ptr %326, align 2, !tbaa !12
  %327 = mul i64 %311, %320
  %328 = add i64 %327, 140737488355328
  %329 = lshr i64 %328, 48
  %330 = trunc i64 %329 to i16
  %331 = tail call i16 @llvm.sadd.sat.i16(i16 %330, i16 %315)
  store i16 %331, ptr %314, align 2, !tbaa !12
  %332 = icmp eq i64 %313, %294
  br i1 %332, label %333, label %312, !llvm.loop !45

333:                                              ; preds = %312
  %334 = load i16, ptr %270, align 2, !tbaa !12
  br label %335

335:                                              ; preds = %333, %300
  %336 = phi i16 [ %334, %333 ], [ %287, %300 ]
  %337 = add nuw nsw i64 %292, 1
  %338 = getelementptr inbounds i16, ptr %291, i64 1
  %339 = add nuw nsw i64 %293, 1
  %340 = icmp slt i16 %336, 0
  %341 = icmp eq i16 %336, -32768
  %342 = sub i16 0, %336
  %343 = select i1 %341, i16 32767, i16 %342
  %344 = select i1 %340, i16 %343, i16 %336
  %345 = icmp slt i16 %308, %344
  %346 = add nsw i64 %288, -1
  br i1 %345, label %278, label %286

347:                                              ; preds = %286, %283, %278, %251
  call void @llvm.lifetime.end.p0(i64 18, ptr nonnull %6) #31
  call void @llvm.lifetime.end.p0(i64 18, ptr nonnull %5) #31
  call void @llvm.lifetime.end.p0(i64 18, ptr nonnull %4) #31
  %348 = load <8 x i16>, ptr %2, align 2, !tbaa !12
  %349 = icmp slt <8 x i16> %348, zeroinitializer
  %350 = icmp eq <8 x i16> %348, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %351 = sub <8 x i16> zeroinitializer, %348
  %352 = select <8 x i1> %350, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %351
  %353 = select <8 x i1> %349, <8 x i16> %352, <8 x i16> %348
  %354 = shl <8 x i16> %353, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %355 = add nsw <8 x i16> %354, <i16 26624, i16 26624, i16 26624, i16 26624, i16 26624, i16 26624, i16 26624, i16 26624>
  %356 = add nsw <8 x i16> %353, <i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059>
  %357 = ashr <8 x i16> %353, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %358 = add <8 x i16> %353, <i16 -22118, i16 -22118, i16 -22118, i16 -22118, i16 -22118, i16 -22118, i16 -22118, i16 -22118>
  %359 = icmp ult <8 x i16> %358, <i16 9012, i16 9012, i16 9012, i16 9012, i16 9012, i16 9012, i16 9012, i16 9012>
  %360 = icmp sgt <8 x i16> %353, <i16 31129, i16 31129, i16 31129, i16 31129, i16 31129, i16 31129, i16 31129, i16 31129>
  %361 = select <8 x i1> %359, <8 x i16> %356, <8 x i16> %357
  %362 = select <8 x i1> %360, <8 x i16> %355, <8 x i16> %361
  %363 = sub nsw <8 x i16> zeroinitializer, %362
  %364 = select <8 x i1> %349, <8 x i16> %363, <8 x i16> %362
  store <8 x i16> %364, ptr %2, align 2, !tbaa !12
  %365 = load <2 x i16>, ptr %2, align 2, !tbaa !12
  %366 = sext <2 x i16> %365 to <2 x i64>
  %367 = getelementptr inbounds i16, ptr %2, i64 2
  %368 = load <2 x i16>, ptr %367, align 2, !tbaa !12
  %369 = sext <2 x i16> %368 to <2 x i64>
  %370 = mul nsw <2 x i64> %369, <i64 175921860444160, i64 175921860444160>
  %371 = getelementptr inbounds i16, ptr %2, i64 4
  %372 = load <2 x i16>, ptr %371, align 2, !tbaa !12
  %373 = sext <2 x i16> %372 to <2 x i64>
  %374 = mul nsw <2 x i64> %373, <i64 119949846642688, i64 131941395333120>
  %375 = getelementptr inbounds i16, ptr %2, i64 6
  %376 = load <2 x i16>, ptr %375, align 2, !tbaa !12
  %377 = sext <2 x i16> %376 to <2 x i64>
  %378 = mul nsw <2 x i64> %377, <i64 73306501808128, i64 77618648973312>
  %379 = shufflevector <2 x i64> %366, <2 x i64> %370, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %380 = shufflevector <2 x i64> %374, <2 x i64> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %381 = shufflevector <8 x i64> %379, <8 x i64> %380, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>
  %382 = shufflevector <2 x i64> %378, <2 x i64> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %383 = shufflevector <8 x i64> %381, <8 x i64> %382, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
  %384 = mul nsw <8 x i64> %383, <i64 175921860444160, i64 175921860444160, i64 poison, i64 poison, i64 poison, i64 poison, i64 poison, i64 poison>
  %385 = add nsw <8 x i64> %383, <i64 poison, i64 poison, i64 576460752303423488, i64 -720575940379279360, i64 26458647810801664, i64 -504403158265495552, i64 -95982967058333696, i64 -322007373356990464>
  %386 = shufflevector <8 x i64> %384, <8 x i64> %385, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %387 = lshr exact <8 x i64> %386, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %388 = trunc <8 x i64> %387 to <8 x i32>
  %389 = add <8 x i32> %388, <i32 16777216, i32 16777216, i32 16777216, i32 16777216, i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %390 = icmp sgt <8 x i32> %389, <i32 1073741823, i32 1073741823, i32 536870911, i32 536870911, i32 268435455, i32 268435455, i32 134217727, i32 134217727>
  %391 = ashr <8 x i32> %389, <i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25>
  %392 = icmp slt <8 x i32> %389, <i32 -1073741824, i32 -1073741824, i32 -536870912, i32 -536870912, i32 -268435456, i32 -268435456, i32 -134217728, i32 -134217728>
  %393 = trunc <8 x i32> %391 to <8 x i16>
  %394 = add nsw <8 x i16> %393, <i16 32, i16 32, i16 16, i16 16, i16 8, i16 8, i16 4, i16 4>
  %395 = select <8 x i1> %392, <8 x i16> zeroinitializer, <8 x i16> %394
  %396 = select <8 x i1> %390, <8 x i16> <i16 63, i16 63, i16 31, i16 31, i16 15, i16 15, i16 7, i16 7>, <8 x i16> %395
  store <8 x i16> %396, ptr %2, align 2, !tbaa !12
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %7) #31
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x i16> @llvm.umax.v8i16(<8 x i16>, <8 x i16>) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.umax.v8i16(<8 x i16>) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #1

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @Gsm_Preprocess(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #13 {
  %4 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !46
  %6 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 2
  %7 = load i64, ptr %6, align 8, !tbaa !47
  %8 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !48
  %10 = zext i32 %9 to i64
  br label %11

11:                                               ; preds = %53, %3
  %12 = phi i32 [ 159, %3 ], [ %70, %53 ]
  %13 = phi ptr [ %1, %3 ], [ %21, %53 ]
  %14 = phi ptr [ %2, %3 ], [ %69, %53 ]
  %15 = phi i16 [ %5, %3 ], [ %20, %53 ]
  %16 = phi i64 [ %7, %3 ], [ %54, %53 ]
  %17 = phi i64 [ %10, %3 ], [ %62, %53 ]
  %18 = load i16, ptr %13, align 2, !tbaa !12
  %19 = ashr i16 %18, 1
  %20 = and i16 %19, -4
  %21 = getelementptr inbounds i16, ptr %13, i64 1
  %22 = sub i16 %20, %15
  %23 = sext i16 %22 to i64
  %24 = shl nsw i64 %23, 15
  %25 = shl i64 %16, 33
  %26 = ashr i64 %25, 48
  %27 = shl i64 %26, 63
  %28 = shl i64 %16, 48
  %29 = sub i64 %28, %27
  %30 = ashr exact i64 %29, 48
  %31 = mul nsw i64 %30, 32735
  %32 = add nsw i64 %31, 16384
  %33 = ashr i64 %32, 15
  %34 = add nsw i64 %24, %33
  %35 = mul nsw i64 %26, 32735
  %36 = icmp slt i64 %25, 0
  br i1 %36, label %37, label %48

37:                                               ; preds = %11
  %38 = icmp sgt i64 %34, -1
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = add nsw i64 %34, %35
  br label %53

41:                                               ; preds = %37
  %42 = xor i64 %35, -1
  %43 = xor i64 %34, -1
  %44 = add nuw nsw i64 %43, %42
  %45 = icmp ugt i64 %44, 2147483646
  %46 = sub nsw i64 -2, %44
  %47 = select i1 %45, i64 -2147483648, i64 %46
  br label %53

48:                                               ; preds = %11
  %49 = icmp slt i64 %34, 1
  %50 = add nsw i64 %34, %35
  br i1 %49, label %53, label %51

51:                                               ; preds = %48
  %52 = tail call i64 @llvm.umin.i64(i64 %50, i64 2147483647)
  br label %53

53:                                               ; preds = %51, %48, %41, %39
  %54 = phi i64 [ %40, %39 ], [ %47, %41 ], [ %52, %51 ], [ %50, %48 ]
  %55 = icmp slt i64 %54, 0
  %56 = add i64 %54, 16384
  %57 = icmp ugt i64 %54, 2147467262
  %58 = select i1 %57, i64 2147467262, i64 %56
  %59 = select i1 %55, i64 %56, i64 %58
  %60 = shl i64 %17, 48
  %61 = ashr exact i64 %60, 48
  %62 = lshr i64 %59, 15
  %63 = mul nsw i64 %61, -242064356802560
  %64 = add nsw i64 %63, 140737488355328
  %65 = lshr i64 %64, 48
  %66 = trunc i64 %62 to i16
  %67 = trunc i64 %65 to i16
  %68 = tail call i16 @llvm.sadd.sat.i16(i16 %66, i16 %67)
  %69 = getelementptr inbounds i16, ptr %14, i64 1
  store i16 %68, ptr %14, align 2, !tbaa !12
  %70 = add nsw i32 %12, -1
  %71 = icmp eq i32 %12, 0
  br i1 %71, label %72, label %11, !llvm.loop !49

72:                                               ; preds = %53
  %.lcssa2 = phi i64 [ %54, %53 ]
  %.lcssa1 = phi i64 [ %62, %53 ]
  %.lcssa = phi i16 [ %20, %53 ]
  %73 = trunc i64 %.lcssa1 to i32
  store i16 %.lcssa, ptr %4, align 8, !tbaa !46
  store i64 %.lcssa2, ptr %6, align 8, !tbaa !47
  %74 = shl i32 %73, 16
  %75 = ashr exact i32 %74, 16
  store i32 %75, ptr %8, align 8, !tbaa !48
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #1

; Function Attrs: nounwind optsize uwtable
define internal void @Gsm_RPE_Encoding(ptr nocapture noundef readnone %0, ptr nocapture noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef %3, ptr nocapture noundef %4) #4 {
  %6 = alloca [40 x i16], align 16
  %7 = alloca [13 x i16], align 16
  %8 = alloca [13 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %6) #31
  call void @llvm.lifetime.start.p0(i64 26, ptr nonnull %7) #31
  call void @llvm.lifetime.start.p0(i64 26, ptr nonnull %8) #31
  %9 = getelementptr inbounds i16, ptr %1, i64 -5
  %10 = load i16, ptr %9, align 2, !tbaa !12
  %11 = getelementptr inbounds i16, ptr %1, i64 -2
  %12 = load i16, ptr %11, align 2, !tbaa !12
  %13 = getelementptr inbounds i16, ptr %1, i64 1
  %14 = load i16, ptr %13, align 2, !tbaa !12
  %15 = getelementptr inbounds i16, ptr %1, i64 4
  %16 = load i16, ptr %15, align 2, !tbaa !12
  br label %17

17:                                               ; preds = %17, %5
  %18 = phi i16 [ %16, %5 ], [ %45, %17 ]
  %19 = phi i16 [ %14, %5 ], [ %40, %17 ]
  %20 = phi i16 [ %12, %5 ], [ %31, %17 ]
  %21 = phi i16 [ %10, %5 ], [ %26, %17 ]
  %22 = phi i64 [ 0, %5 ], [ %24, %17 ]
  %23 = sext i16 %21 to i64
  %24 = add nuw nsw i64 %22, 1
  %25 = getelementptr inbounds i16, ptr %9, i64 %24
  %26 = load i16, ptr %25, align 2, !tbaa !12
  %27 = sext i16 %26 to i64
  %28 = sext i16 %20 to i64
  %29 = add nuw nsw i64 %22, 4
  %30 = getelementptr inbounds i16, ptr %9, i64 %29
  %31 = load i16, ptr %30, align 2, !tbaa !12
  %32 = sext i16 %31 to i64
  %33 = getelementptr inbounds i16, ptr %1, i64 %22
  %34 = load i16, ptr %33, align 2, !tbaa !12
  %35 = sext i16 %34 to i64
  %36 = shl nsw i64 %35, 13
  %37 = sext i16 %19 to i64
  %38 = add nuw nsw i64 %22, 7
  %39 = getelementptr inbounds i16, ptr %9, i64 %38
  %40 = load i16, ptr %39, align 2, !tbaa !12
  %41 = sext i16 %40 to i64
  %42 = sext i16 %18 to i64
  %43 = add nuw nsw i64 %22, 10
  %44 = getelementptr inbounds i16, ptr %9, i64 %43
  %45 = load i16, ptr %44, align 2, !tbaa !12
  %46 = sext i16 %45 to i64
  %47 = add nsw i64 %37, %32
  %48 = mul nsw i64 %47, 5741
  %49 = add nsw i64 %41, %28
  %50 = mul nsw i64 %49, 2054
  %51 = add nsw i64 %42, %27
  %52 = mul nsw i64 %51, -374
  %53 = add nsw i64 %46, %23
  %54 = mul nsw i64 %53, -134
  %55 = or i64 %36, 4096
  %56 = add nsw i64 %55, %48
  %57 = add nsw i64 %56, %50
  %58 = add nsw i64 %57, %52
  %59 = add nsw i64 %58, %54
  %60 = ashr i64 %59, 13
  %61 = tail call i64 @llvm.smin.i64(i64 %60, i64 32767)
  %62 = tail call i64 @llvm.smax.i64(i64 %61, i64 -32768)
  %63 = trunc i64 %62 to i16
  %64 = getelementptr inbounds i16, ptr %6, i64 %22
  store i16 %63, ptr %64, align 2, !tbaa !12
  %65 = icmp eq i64 %24, 40
  br i1 %65, label %66, label %17, !llvm.loop !50

66:                                               ; preds = %17
  %67 = getelementptr inbounds i16, ptr %6, i64 3
  %68 = load i16, ptr %67, align 2, !tbaa !12
  %69 = ashr i16 %68, 2
  %70 = sext i16 %69 to i64
  %71 = mul nsw i64 %70, %70
  %72 = getelementptr inbounds i16, ptr %6, i64 6
  %73 = load i16, ptr %72, align 4, !tbaa !12
  %74 = ashr i16 %73, 2
  %75 = sext i16 %74 to i64
  %76 = mul nsw i64 %75, %75
  %77 = add nuw nsw i64 %76, %71
  %78 = getelementptr inbounds i16, ptr %6, i64 9
  %79 = load i16, ptr %78, align 2, !tbaa !12
  %80 = ashr i16 %79, 2
  %81 = sext i16 %80 to i64
  %82 = mul nsw i64 %81, %81
  %83 = add nuw nsw i64 %77, %82
  %84 = getelementptr inbounds i16, ptr %6, i64 12
  %85 = load i16, ptr %84, align 8, !tbaa !12
  %86 = ashr i16 %85, 2
  %87 = sext i16 %86 to i64
  %88 = mul nsw i64 %87, %87
  %89 = add nuw nsw i64 %83, %88
  %90 = getelementptr inbounds i16, ptr %6, i64 15
  %91 = load i16, ptr %90, align 2, !tbaa !12
  %92 = ashr i16 %91, 2
  %93 = sext i16 %92 to i64
  %94 = mul nsw i64 %93, %93
  %95 = add nuw nsw i64 %89, %94
  %96 = getelementptr inbounds i16, ptr %6, i64 18
  %97 = load i16, ptr %96, align 4, !tbaa !12
  %98 = ashr i16 %97, 2
  %99 = sext i16 %98 to i64
  %100 = mul nsw i64 %99, %99
  %101 = add nuw nsw i64 %95, %100
  %102 = getelementptr inbounds i16, ptr %6, i64 21
  %103 = load i16, ptr %102, align 2, !tbaa !12
  %104 = ashr i16 %103, 2
  %105 = sext i16 %104 to i64
  %106 = mul nsw i64 %105, %105
  %107 = add nuw nsw i64 %101, %106
  %108 = getelementptr inbounds i16, ptr %6, i64 24
  %109 = load i16, ptr %108, align 16, !tbaa !12
  %110 = ashr i16 %109, 2
  %111 = sext i16 %110 to i64
  %112 = mul nsw i64 %111, %111
  %113 = add nsw i64 %107, %112
  %114 = getelementptr inbounds i16, ptr %6, i64 27
  %115 = load i16, ptr %114, align 2, !tbaa !12
  %116 = ashr i16 %115, 2
  %117 = sext i16 %116 to i64
  %118 = mul nsw i64 %117, %117
  %119 = add nsw i64 %113, %118
  %120 = getelementptr inbounds i16, ptr %6, i64 30
  %121 = load i16, ptr %120, align 4, !tbaa !12
  %122 = ashr i16 %121, 2
  %123 = sext i16 %122 to i64
  %124 = mul nsw i64 %123, %123
  %125 = add nsw i64 %119, %124
  %126 = getelementptr inbounds i16, ptr %6, i64 33
  %127 = load i16, ptr %126, align 2, !tbaa !12
  %128 = ashr i16 %127, 2
  %129 = sext i16 %128 to i64
  %130 = mul nsw i64 %129, %129
  %131 = add nsw i64 %125, %130
  %132 = getelementptr inbounds i16, ptr %6, i64 36
  %133 = load i16, ptr %132, align 8, !tbaa !12
  %134 = ashr i16 %133, 2
  %135 = sext i16 %134 to i64
  %136 = mul nsw i64 %135, %135
  %137 = add nsw i64 %131, %136
  %138 = load i16, ptr %6, align 16, !tbaa !12
  %139 = ashr i16 %138, 2
  %140 = sext i16 %139 to i64
  %141 = mul nsw i64 %140, %140
  %142 = add nsw i64 %137, %141
  %143 = shl nsw i64 %142, 1
  %144 = getelementptr inbounds i16, ptr %6, i64 1
  %145 = load i16, ptr %144, align 2, !tbaa !12
  %146 = ashr i16 %145, 2
  %147 = sext i16 %146 to i64
  %148 = mul nsw i64 %147, %147
  %149 = getelementptr inbounds i16, ptr %6, i64 4
  %150 = load i16, ptr %149, align 8, !tbaa !12
  %151 = ashr i16 %150, 2
  %152 = sext i16 %151 to i64
  %153 = mul nsw i64 %152, %152
  %154 = add nuw nsw i64 %153, %148
  %155 = getelementptr inbounds i16, ptr %6, i64 7
  %156 = load i16, ptr %155, align 2, !tbaa !12
  %157 = ashr i16 %156, 2
  %158 = sext i16 %157 to i64
  %159 = mul nsw i64 %158, %158
  %160 = add nuw nsw i64 %154, %159
  %161 = getelementptr inbounds i16, ptr %6, i64 10
  %162 = load i16, ptr %161, align 4, !tbaa !12
  %163 = ashr i16 %162, 2
  %164 = sext i16 %163 to i64
  %165 = mul nsw i64 %164, %164
  %166 = add nuw nsw i64 %160, %165
  %167 = getelementptr inbounds i16, ptr %6, i64 13
  %168 = load i16, ptr %167, align 2, !tbaa !12
  %169 = ashr i16 %168, 2
  %170 = sext i16 %169 to i64
  %171 = mul nsw i64 %170, %170
  %172 = add nuw nsw i64 %166, %171
  %173 = getelementptr inbounds i16, ptr %6, i64 16
  %174 = load i16, ptr %173, align 16, !tbaa !12
  %175 = ashr i16 %174, 2
  %176 = sext i16 %175 to i64
  %177 = mul nsw i64 %176, %176
  %178 = add nuw nsw i64 %172, %177
  %179 = getelementptr inbounds i16, ptr %6, i64 19
  %180 = load i16, ptr %179, align 2, !tbaa !12
  %181 = ashr i16 %180, 2
  %182 = sext i16 %181 to i64
  %183 = mul nsw i64 %182, %182
  %184 = add nuw nsw i64 %178, %183
  %185 = getelementptr inbounds i16, ptr %6, i64 22
  %186 = load i16, ptr %185, align 4, !tbaa !12
  %187 = ashr i16 %186, 2
  %188 = sext i16 %187 to i64
  %189 = mul nsw i64 %188, %188
  %190 = add nsw i64 %184, %189
  %191 = getelementptr inbounds i16, ptr %6, i64 25
  %192 = load i16, ptr %191, align 2, !tbaa !12
  %193 = ashr i16 %192, 2
  %194 = sext i16 %193 to i64
  %195 = mul nsw i64 %194, %194
  %196 = add nsw i64 %190, %195
  %197 = getelementptr inbounds i16, ptr %6, i64 28
  %198 = load i16, ptr %197, align 8, !tbaa !12
  %199 = ashr i16 %198, 2
  %200 = sext i16 %199 to i64
  %201 = mul nsw i64 %200, %200
  %202 = add nsw i64 %196, %201
  %203 = getelementptr inbounds i16, ptr %6, i64 31
  %204 = load i16, ptr %203, align 2, !tbaa !12
  %205 = ashr i16 %204, 2
  %206 = sext i16 %205 to i64
  %207 = mul nsw i64 %206, %206
  %208 = add nsw i64 %202, %207
  %209 = getelementptr inbounds i16, ptr %6, i64 34
  %210 = load i16, ptr %209, align 4, !tbaa !12
  %211 = ashr i16 %210, 2
  %212 = sext i16 %211 to i64
  %213 = mul nsw i64 %212, %212
  %214 = add nsw i64 %208, %213
  %215 = getelementptr inbounds i16, ptr %6, i64 37
  %216 = load i16, ptr %215, align 2, !tbaa !12
  %217 = ashr i16 %216, 2
  %218 = sext i16 %217 to i64
  %219 = mul nsw i64 %218, %218
  %220 = add nsw i64 %214, %219
  %221 = shl nsw i64 %220, 1
  %222 = icmp sgt i64 %221, %143
  %223 = tail call i64 @llvm.smax.i64(i64 %221, i64 %143)
  %224 = zext i1 %222 to i16
  %225 = getelementptr inbounds i16, ptr %6, i64 2
  %226 = load i16, ptr %225, align 4, !tbaa !12
  %227 = ashr i16 %226, 2
  %228 = sext i16 %227 to i64
  %229 = mul nsw i64 %228, %228
  %230 = getelementptr inbounds i16, ptr %6, i64 5
  %231 = load i16, ptr %230, align 2, !tbaa !12
  %232 = ashr i16 %231, 2
  %233 = sext i16 %232 to i64
  %234 = mul nsw i64 %233, %233
  %235 = add nuw nsw i64 %234, %229
  %236 = getelementptr inbounds i16, ptr %6, i64 8
  %237 = load i16, ptr %236, align 16, !tbaa !12
  %238 = ashr i16 %237, 2
  %239 = sext i16 %238 to i64
  %240 = mul nsw i64 %239, %239
  %241 = add nuw nsw i64 %235, %240
  %242 = getelementptr inbounds i16, ptr %6, i64 11
  %243 = load i16, ptr %242, align 2, !tbaa !12
  %244 = ashr i16 %243, 2
  %245 = sext i16 %244 to i64
  %246 = mul nsw i64 %245, %245
  %247 = add nuw nsw i64 %241, %246
  %248 = getelementptr inbounds i16, ptr %6, i64 14
  %249 = load i16, ptr %248, align 4, !tbaa !12
  %250 = ashr i16 %249, 2
  %251 = sext i16 %250 to i64
  %252 = mul nsw i64 %251, %251
  %253 = add nuw nsw i64 %247, %252
  %254 = getelementptr inbounds i16, ptr %6, i64 17
  %255 = load i16, ptr %254, align 2, !tbaa !12
  %256 = ashr i16 %255, 2
  %257 = sext i16 %256 to i64
  %258 = mul nsw i64 %257, %257
  %259 = add nuw nsw i64 %253, %258
  %260 = getelementptr inbounds i16, ptr %6, i64 20
  %261 = load i16, ptr %260, align 8, !tbaa !12
  %262 = ashr i16 %261, 2
  %263 = sext i16 %262 to i64
  %264 = mul nsw i64 %263, %263
  %265 = add nuw nsw i64 %259, %264
  %266 = getelementptr inbounds i16, ptr %6, i64 23
  %267 = load i16, ptr %266, align 2, !tbaa !12
  %268 = ashr i16 %267, 2
  %269 = sext i16 %268 to i64
  %270 = mul nsw i64 %269, %269
  %271 = add nsw i64 %265, %270
  %272 = getelementptr inbounds i16, ptr %6, i64 26
  %273 = load i16, ptr %272, align 4, !tbaa !12
  %274 = ashr i16 %273, 2
  %275 = sext i16 %274 to i64
  %276 = mul nsw i64 %275, %275
  %277 = add nsw i64 %271, %276
  %278 = getelementptr inbounds i16, ptr %6, i64 29
  %279 = load i16, ptr %278, align 2, !tbaa !12
  %280 = ashr i16 %279, 2
  %281 = sext i16 %280 to i64
  %282 = mul nsw i64 %281, %281
  %283 = add nsw i64 %277, %282
  %284 = getelementptr inbounds i16, ptr %6, i64 32
  %285 = load i16, ptr %284, align 16, !tbaa !12
  %286 = ashr i16 %285, 2
  %287 = sext i16 %286 to i64
  %288 = mul nsw i64 %287, %287
  %289 = add nsw i64 %283, %288
  %290 = getelementptr inbounds i16, ptr %6, i64 35
  %291 = load i16, ptr %290, align 2, !tbaa !12
  %292 = ashr i16 %291, 2
  %293 = sext i16 %292 to i64
  %294 = mul nsw i64 %293, %293
  %295 = add nsw i64 %289, %294
  %296 = getelementptr inbounds i16, ptr %6, i64 38
  %297 = load i16, ptr %296, align 4, !tbaa !12
  %298 = ashr i16 %297, 2
  %299 = sext i16 %298 to i64
  %300 = mul nsw i64 %299, %299
  %301 = add nsw i64 %295, %300
  %302 = shl nsw i64 %301, 1
  %303 = icmp sgt i64 %302, %223
  %304 = tail call i64 @llvm.smax.i64(i64 %302, i64 %223)
  %305 = select i1 %303, i16 2, i16 %224
  %306 = getelementptr inbounds i16, ptr %6, i64 39
  %307 = load i16, ptr %306, align 2, !tbaa !12
  %308 = ashr i16 %307, 2
  %309 = sext i16 %308 to i64
  %310 = mul nsw i64 %309, %309
  %311 = add nsw i64 %310, %137
  %312 = shl nsw i64 %311, 1
  %313 = icmp sgt i64 %312, %304
  %314 = select i1 %313, i16 3, i16 %305
  %315 = zext i16 %314 to i64
  br label %316

316:                                              ; preds = %316, %66
  %317 = phi i64 [ 0, %66 ], [ %323, %316 ]
  %318 = mul nuw nsw i64 %317, 3
  %319 = add nuw nsw i64 %318, %315
  %320 = getelementptr inbounds i16, ptr %6, i64 %319
  %321 = load i16, ptr %320, align 2, !tbaa !12
  %322 = getelementptr inbounds i16, ptr %7, i64 %317
  store i16 %321, ptr %322, align 2, !tbaa !12
  %323 = add nuw nsw i64 %317, 1
  %324 = icmp eq i64 %323, 13
  br i1 %324, label %325, label %316, !llvm.loop !51

325:                                              ; preds = %316
  store i16 %314, ptr %3, align 2, !tbaa !12
  br label %326

326:                                              ; preds = %326, %325
  %327 = phi i64 [ 0, %325 ], [ %337, %326 ]
  %328 = phi i16 [ 0, %325 ], [ %336, %326 ]
  %329 = getelementptr inbounds i16, ptr %7, i64 %327
  %330 = load i16, ptr %329, align 2, !tbaa !12
  %331 = icmp slt i16 %330, 0
  %332 = icmp eq i16 %330, -32768
  %333 = sub i16 0, %330
  %334 = select i1 %332, i16 32767, i16 %333
  %335 = select i1 %331, i16 %334, i16 %330
  %336 = tail call i16 @llvm.smax.i16(i16 %335, i16 %328)
  %337 = add nuw nsw i64 %327, 1
  %338 = icmp eq i64 %337, 13
  br i1 %338, label %339, label %326, !llvm.loop !52

339:                                              ; preds = %326
  %.lcssa1 = phi i16 [ %336, %326 ]
  %340 = lshr i16 %.lcssa1, 9
  br label %341

341:                                              ; preds = %341, %339
  %342 = phi i32 [ 0, %339 ], [ %353, %341 ]
  %343 = phi i32 [ 0, %339 ], [ %348, %341 ]
  %344 = phi i16 [ %340, %339 ], [ %349, %341 ]
  %345 = phi i16 [ 0, %339 ], [ %352, %341 ]
  %346 = icmp eq i16 %344, 0
  %347 = zext i1 %346 to i32
  %348 = or i32 %343, %347
  %349 = lshr i16 %344, 1
  %350 = icmp eq i32 %348, 0
  %351 = zext i1 %350 to i16
  %352 = add i16 %345, %351
  %353 = add nuw nsw i32 %342, 1
  %354 = icmp eq i32 %353, 6
  br i1 %354, label %355, label %341, !llvm.loop !53

355:                                              ; preds = %341
  %.lcssa = phi i16 [ %352, %341 ]
  %356 = zext i16 %.lcssa1 to i32
  %357 = add i16 %.lcssa, 5
  %358 = zext i16 %357 to i32
  %359 = lshr i32 %356, %358
  %360 = trunc i32 %359 to i16
  %361 = shl i16 %.lcssa, 3
  %362 = tail call signext i16 @gsm_add(i16 noundef signext %360, i16 noundef signext %361) #32
  %363 = icmp sgt i16 %362, 15
  %364 = lshr i16 %362, 3
  %365 = add nsw i16 %364, -1
  %366 = select i1 %363, i16 %365, i16 0
  %367 = shl i16 %366, 3
  %368 = sub i16 %362, %367
  %369 = icmp eq i16 %368, 0
  br i1 %369, label %383, label %370

370:                                              ; preds = %355
  %371 = icmp slt i16 %368, 8
  br i1 %371, label %372, label %379

372:                                              ; preds = %372, %370
  %373 = phi i16 [ %376, %372 ], [ %368, %370 ]
  %374 = phi i16 [ %377, %372 ], [ %366, %370 ]
  %375 = shl i16 %373, 1
  %376 = or i16 %375, 1
  %377 = add i16 %374, -1
  %378 = icmp slt i16 %376, 8
  br i1 %378, label %372, label %379, !llvm.loop !54

379:                                              ; preds = %372, %370
  %380 = phi i16 [ %366, %370 ], [ %377, %372 ]
  %381 = phi i16 [ %368, %370 ], [ %376, %372 ]
  %382 = add nsw i16 %381, -8
  br label %383

383:                                              ; preds = %379, %355
  %384 = phi i16 [ %380, %379 ], [ -4, %355 ]
  %385 = phi i16 [ %382, %379 ], [ 7, %355 ]
  %386 = sub i16 6, %384
  %387 = zext i16 %385 to i64
  %388 = getelementptr inbounds [8 x i16], ptr @gsm_NRFAC, i64 0, i64 %387
  %389 = load i16, ptr %388, align 2, !tbaa !12
  %390 = zext i16 %386 to i32
  %391 = sext i16 %389 to i64
  br label %392

392:                                              ; preds = %392, %383
  %393 = phi i64 [ 0, %383 ], [ %408, %392 ]
  %394 = getelementptr inbounds i16, ptr %7, i64 %393
  %395 = load i16, ptr %394, align 2, !tbaa !12
  %396 = zext i16 %395 to i32
  %397 = shl i32 %396, %390
  %398 = zext i32 %397 to i64
  %399 = shl i64 %398, 48
  %400 = ashr exact i64 %399, 48
  %401 = mul nsw i64 %400, %391
  %402 = trunc i64 %401 to i32
  %403 = shl i32 %402, 1
  %404 = ashr i32 %403, 28
  %405 = trunc i32 %404 to i16
  %406 = add nsw i16 %405, 4
  %407 = getelementptr inbounds i16, ptr %4, i64 %393
  store i16 %406, ptr %407, align 2, !tbaa !12
  %408 = add nuw nsw i64 %393, 1
  %409 = icmp eq i64 %408, 13
  br i1 %409, label %410, label %392, !llvm.loop !55

410:                                              ; preds = %392
  store i16 %362, ptr %2, align 2, !tbaa !12
  call fastcc void @APCM_inverse_quantization(ptr noundef nonnull %4, i16 noundef signext %385, i16 noundef signext %384, ptr noundef nonnull %8) #33
  %411 = load i16, ptr %3, align 2, !tbaa !12
  call fastcc void @RPE_grid_positioning(i16 noundef signext %411, ptr noundef nonnull %8, ptr noundef %1) #33
  call void @llvm.lifetime.end.p0(i64 26, ptr nonnull %8) #31
  call void @llvm.lifetime.end.p0(i64 26, ptr nonnull %7) #31
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %6) #31
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.smax.i16(i16, i16) #1

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @APCM_inverse_quantization(ptr nocapture noundef readonly %0, i16 noundef signext %1, i16 noundef signext %2, ptr nocapture noundef writeonly %3) unnamed_addr #4 {
  %5 = sext i16 %1 to i64
  %6 = getelementptr inbounds [8 x i16], ptr @gsm_FAC, i64 0, i64 %5
  %7 = load i16, ptr %6, align 2, !tbaa !12
  %8 = tail call signext i16 @gsm_sub(i16 noundef signext 6, i16 noundef signext %2) #32
  %9 = tail call signext i16 @gsm_sub(i16 noundef signext %8, i16 noundef signext 1) #32
  %10 = sext i16 %9 to i32
  %11 = tail call signext i16 @gsm_asl(i16 noundef signext 1, i32 noundef %10) #32
  %12 = sext i16 %7 to i64
  %13 = shl nsw i64 %12, 33
  %14 = sext i16 %8 to i32
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi ptr [ %0, %4 ], [ %20, %15 ]
  %17 = phi ptr [ %3, %4 ], [ %31, %15 ]
  %18 = phi i32 [ 13, %4 ], [ %19, %15 ]
  %19 = add nsw i32 %18, -1
  %20 = getelementptr inbounds i16, ptr %16, i64 1
  %21 = load i16, ptr %16, align 2, !tbaa !12
  %22 = shl i16 %21, 13
  %23 = add i16 %22, -28672
  %24 = sext i16 %23 to i64
  %25 = mul i64 %13, %24
  %26 = add i64 %25, 140737488355328
  %27 = lshr i64 %26, 48
  %28 = trunc i64 %27 to i16
  %29 = tail call i16 @llvm.sadd.sat.i16(i16 %28, i16 %11)
  %30 = tail call signext i16 @gsm_asr(i16 noundef signext %29, i32 noundef %14) #32
  %31 = getelementptr inbounds i16, ptr %17, i64 1
  store i16 %30, ptr %17, align 2, !tbaa !12
  %32 = icmp eq i32 %19, 0
  br i1 %32, label %33, label %15, !llvm.loop !56

33:                                               ; preds = %15
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @RPE_grid_positioning(i16 noundef signext %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) unnamed_addr #13 {
  %4 = sext i16 %0 to i32
  switch i32 %4, label %26 [
    i32 3, label %5
    i32 2, label %7
    i32 1, label %12
    i32 0, label %17
  ]

5:                                                ; preds = %3
  %6 = getelementptr inbounds i16, ptr %2, i64 1
  store i16 0, ptr %2, align 2, !tbaa !12
  br label %7

7:                                                ; preds = %17, %5, %3
  %8 = phi ptr [ %21, %17 ], [ %1, %3 ], [ %1, %5 ]
  %9 = phi ptr [ %23, %17 ], [ %2, %3 ], [ %6, %5 ]
  %10 = phi i32 [ %24, %17 ], [ 13, %3 ], [ 13, %5 ]
  %11 = getelementptr inbounds i16, ptr %9, i64 1
  store i16 0, ptr %9, align 2, !tbaa !12
  br label %12

12:                                               ; preds = %7, %3
  %13 = phi ptr [ %8, %7 ], [ %1, %3 ]
  %14 = phi ptr [ %11, %7 ], [ %2, %3 ]
  %15 = phi i32 [ %10, %7 ], [ 13, %3 ]
  %16 = getelementptr inbounds i16, ptr %14, i64 1
  store i16 0, ptr %14, align 2, !tbaa !12
  br label %17

17:                                               ; preds = %12, %3
  %18 = phi ptr [ %1, %3 ], [ %13, %12 ]
  %19 = phi ptr [ %2, %3 ], [ %16, %12 ]
  %20 = phi i32 [ 13, %3 ], [ %15, %12 ]
  %21 = getelementptr inbounds i16, ptr %18, i64 1
  %22 = load i16, ptr %18, align 2, !tbaa !12
  %23 = getelementptr inbounds i16, ptr %19, i64 1
  store i16 %22, ptr %19, align 2, !tbaa !12
  %24 = add nsw i32 %20, -1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %7, !llvm.loop !57

26:                                               ; preds = %17, %3
  %27 = phi ptr [ %2, %3 ], [ %23, %17 ]
  %28 = add i16 %0, 1
  %29 = icmp slt i16 %28, 4
  br i1 %29, label %30, label %35

30:                                               ; preds = %26
  %31 = sub i16 2, %0
  %32 = zext i16 %31 to i64
  %33 = shl nuw nsw i64 %32, 1
  %34 = add nuw nsw i64 %33, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(1) %27, i8 0, i64 %34, i1 false), !tbaa !12
  br label %35

35:                                               ; preds = %30, %26
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @Gsm_RPE_Decoding(ptr nocapture noundef readnone %0, i16 noundef signext %1, i16 noundef signext %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4) #4 {
  %6 = alloca [13 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 26, ptr nonnull %6) #31
  %7 = icmp sgt i16 %1, 15
  %8 = lshr i16 %1, 3
  %9 = add nsw i16 %8, -1
  %10 = select i1 %7, i16 %9, i16 0
  %11 = shl i16 %10, 3
  %12 = sub i16 %1, %11
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %5
  %15 = icmp slt i16 %12, 8
  br i1 %15, label %16, label %23

16:                                               ; preds = %16, %14
  %17 = phi i16 [ %20, %16 ], [ %12, %14 ]
  %18 = phi i16 [ %21, %16 ], [ %10, %14 ]
  %19 = shl i16 %17, 1
  %20 = or i16 %19, 1
  %21 = add i16 %18, -1
  %22 = icmp slt i16 %20, 8
  br i1 %22, label %16, label %23, !llvm.loop !54

23:                                               ; preds = %16, %14
  %24 = phi i16 [ %10, %14 ], [ %21, %16 ]
  %25 = phi i16 [ %12, %14 ], [ %20, %16 ]
  %26 = add nsw i16 %25, -8
  br label %27

27:                                               ; preds = %23, %5
  %28 = phi i16 [ %24, %23 ], [ -4, %5 ]
  %29 = phi i16 [ %26, %23 ], [ 7, %5 ]
  call fastcc void @APCM_inverse_quantization(ptr noundef %3, i16 noundef signext %29, i16 noundef signext %28, ptr noundef nonnull %6) #33
  call fastcc void @RPE_grid_positioning(i16 noundef signext %2, ptr noundef nonnull %6, ptr noundef %4) #33
  call void @llvm.lifetime.end.p0(i64 26, ptr nonnull %6) #31
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @Gsm_Short_Term_Analysis_Filter(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) #13 {
  %4 = alloca [8 x i16], align 16
  %5 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 6
  %6 = load i16, ptr %5, align 4, !tbaa !58
  %7 = sext i16 %6 to i64
  %8 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 5, i64 %7
  %9 = xor i16 %6, 1
  store i16 %9, ptr %5, align 4, !tbaa !58
  %10 = sext i16 %9 to i64
  %11 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 5, i64 %10
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #31
  tail call fastcc void @Decoding_of_the_coded_Log_Area_Ratios(ptr noundef %1, ptr noundef nonnull %8) #33
  %12 = load <8 x i16>, ptr %11, align 2, !tbaa !12
  %13 = ashr <8 x i16> %12, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14 = load <8 x i16>, ptr %8, align 2, !tbaa !12
  %15 = ashr <8 x i16> %14, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16 = ashr <8 x i16> %12, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17 = add nsw <8 x i16> %16, %13
  %18 = add nsw <8 x i16> %17, %15
  store <8 x i16> %18, ptr %4, align 16, !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %4) #33
  call fastcc void @Short_term_analysis_filtering(ptr noundef %0, ptr noundef nonnull %4, i32 noundef 13, ptr noundef %2) #33
  %19 = load <8 x i16>, ptr %11, align 2, !tbaa !12
  %20 = ashr <8 x i16> %19, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %21 = load <8 x i16>, ptr %8, align 2, !tbaa !12
  %22 = ashr <8 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %23 = add nsw <8 x i16> %22, %20
  store <8 x i16> %23, ptr %4, align 16, !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %4) #33
  %24 = getelementptr inbounds i16, ptr %2, i64 13
  call fastcc void @Short_term_analysis_filtering(ptr noundef %0, ptr noundef nonnull %4, i32 noundef 14, ptr noundef nonnull %24) #33
  %25 = load <8 x i16>, ptr %11, align 2, !tbaa !12
  %26 = ashr <8 x i16> %25, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27 = load <8 x i16>, ptr %8, align 2, !tbaa !12
  %28 = ashr <8 x i16> %27, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29 = add nsw <8 x i16> %28, %26
  %30 = ashr <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %31 = add nsw <8 x i16> %29, %30
  store <8 x i16> %31, ptr %4, align 16, !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %4) #33
  %32 = getelementptr inbounds i16, ptr %2, i64 27
  call fastcc void @Short_term_analysis_filtering(ptr noundef %0, ptr noundef nonnull %4, i32 noundef 13, ptr noundef nonnull %32) #33
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %4, ptr noundef nonnull align 2 dereferenceable(16) %8, i64 16, i1 false), !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %4) #33
  %33 = getelementptr inbounds i16, ptr %2, i64 40
  call fastcc void @Short_term_analysis_filtering(ptr noundef %0, ptr noundef nonnull %4, i32 noundef 120, ptr noundef nonnull %33) #33
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #31
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal fastcc void @Decoding_of_the_coded_Log_Area_Ratios(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) unnamed_addr #14 {
  %3 = getelementptr inbounds i16, ptr %0, i64 1
  %4 = load i16, ptr %0, align 2, !tbaa !12
  %5 = sext i16 %4 to i64
  %6 = add nsw i64 %5, -32800
  %7 = icmp ult i64 %6, -65536
  %8 = icmp sgt i16 %4, 32
  %9 = select i1 %8, i16 63, i16 0
  %10 = add i16 %4, 32
  %11 = select i1 %7, i16 %9, i16 %10
  %12 = shl i16 %11, 10
  %13 = sext i16 %12 to i64
  %14 = mul nsw i64 %13, 112588272697344
  %15 = add nsw i64 %14, 140737488355328
  %16 = lshr i64 %15, 47
  %17 = trunc i64 %16 to i16
  %18 = and i16 %17, -2
  %19 = getelementptr inbounds i16, ptr %1, i64 1
  store i16 %18, ptr %1, align 2, !tbaa !12
  %20 = getelementptr inbounds i16, ptr %0, i64 2
  %21 = load i16, ptr %3, align 2, !tbaa !12
  %22 = sext i16 %21 to i64
  %23 = add nsw i64 %22, -32800
  %24 = icmp ult i64 %23, -65536
  %25 = icmp sgt i16 %21, 32
  %26 = select i1 %25, i16 63, i16 0
  %27 = add i16 %21, 32
  %28 = select i1 %24, i16 %26, i16 %27
  %29 = shl i16 %28, 10
  %30 = sext i16 %29 to i64
  %31 = mul nsw i64 %30, 112588272697344
  %32 = add nsw i64 %31, 140737488355328
  %33 = lshr i64 %32, 47
  %34 = trunc i64 %33 to i16
  %35 = and i16 %34, -2
  %36 = getelementptr inbounds i16, ptr %1, i64 2
  store i16 %35, ptr %19, align 2, !tbaa !12
  %37 = getelementptr inbounds i16, ptr %0, i64 3
  %38 = load i16, ptr %20, align 2, !tbaa !12
  %39 = sext i16 %38 to i64
  %40 = add nsw i64 %39, -32784
  %41 = icmp ult i64 %40, -65536
  %42 = icmp sgt i16 %38, 16
  %43 = select i1 %42, i16 63, i16 0
  %44 = add i16 %38, 48
  %45 = select i1 %41, i16 %43, i16 %44
  %46 = shl i16 %45, 10
  %47 = add i16 %46, -4096
  %48 = icmp slt i16 %46, -28671
  %49 = select i1 %48, i16 -32768, i16 %47
  %50 = sext i16 %49 to i64
  %51 = mul nsw i64 %50, 112588272697344
  %52 = add nsw i64 %51, 140737488355328
  %53 = lshr i64 %52, 47
  %54 = trunc i64 %53 to i16
  %55 = and i16 %54, -2
  %56 = getelementptr inbounds i16, ptr %1, i64 3
  store i16 %55, ptr %36, align 2, !tbaa !12
  %57 = getelementptr inbounds i16, ptr %0, i64 4
  %58 = load i16, ptr %37, align 2, !tbaa !12
  %59 = sext i16 %58 to i64
  %60 = add nsw i64 %59, -32784
  %61 = icmp ult i64 %60, -65536
  %62 = icmp sgt i16 %58, 16
  %63 = select i1 %62, i16 63, i16 0
  %64 = add i16 %58, 48
  %65 = select i1 %61, i16 %63, i16 %64
  %66 = shl i16 %65, 10
  %67 = add i16 %66, 5120
  %68 = icmp sgt i16 %66, 27646
  %69 = select i1 %68, i16 32767, i16 %67
  %70 = sext i16 %69 to i64
  %71 = mul nsw i64 %70, 112588272697344
  %72 = add nsw i64 %71, 140737488355328
  %73 = lshr i64 %72, 47
  %74 = trunc i64 %73 to i16
  %75 = and i16 %74, -2
  %76 = getelementptr inbounds i16, ptr %1, i64 4
  store i16 %75, ptr %56, align 2, !tbaa !12
  %77 = getelementptr inbounds i16, ptr %0, i64 5
  %78 = load i16, ptr %57, align 2, !tbaa !12
  %79 = sext i16 %78 to i64
  %80 = add nsw i64 %79, -32776
  %81 = icmp ult i64 %80, -65536
  %82 = icmp sgt i16 %78, 8
  %83 = select i1 %82, i16 63, i16 0
  %84 = add i16 %78, 56
  %85 = select i1 %81, i16 %83, i16 %84
  %86 = shl i16 %85, 10
  %87 = add i16 %86, -188
  %88 = icmp slt i16 %86, -32579
  %89 = select i1 %88, i16 -32768, i16 %87
  %90 = sext i16 %89 to i64
  %91 = mul nsw i64 %90, 165124312662016
  %92 = add nsw i64 %91, 140737488355328
  %93 = ashr i64 %92, 47
  %94 = and i64 %93, -2
  %95 = add nsw i64 %93, -32768
  %96 = icmp ult i64 %95, -65536
  %97 = icmp sgt i64 %94, 0
  %98 = select i1 %97, i64 32767, i64 32768
  %99 = select i1 %96, i64 %98, i64 %94
  %100 = trunc i64 %99 to i16
  %101 = getelementptr inbounds i16, ptr %1, i64 5
  store i16 %100, ptr %76, align 2, !tbaa !12
  %102 = getelementptr inbounds i16, ptr %0, i64 6
  %103 = load i16, ptr %77, align 2, !tbaa !12
  %104 = sext i16 %103 to i64
  %105 = add nsw i64 %104, -32776
  %106 = icmp ult i64 %105, -65536
  %107 = icmp sgt i16 %103, 8
  %108 = select i1 %107, i16 63, i16 0
  %109 = add i16 %103, 56
  %110 = select i1 %106, i16 %108, i16 %109
  %111 = shl i16 %110, 10
  %112 = add i16 %111, 3584
  %113 = icmp sgt i16 %111, 29182
  %114 = select i1 %113, i16 32767, i16 %112
  %115 = sext i16 %114 to i64
  %116 = mul nsw i64 %115, 150117696929792
  %117 = add nsw i64 %116, 140737488355328
  %118 = ashr i64 %117, 47
  %119 = and i64 %118, -2
  %120 = add nsw i64 %118, -32768
  %121 = icmp ult i64 %120, -65536
  %122 = icmp sgt i64 %119, 0
  %123 = select i1 %122, i64 32767, i64 32768
  %124 = select i1 %121, i64 %123, i64 %119
  %125 = trunc i64 %124 to i16
  %126 = getelementptr inbounds i16, ptr %1, i64 6
  store i16 %125, ptr %101, align 2, !tbaa !12
  %127 = getelementptr inbounds i16, ptr %0, i64 7
  %128 = load i16, ptr %102, align 2, !tbaa !12
  %129 = sext i16 %128 to i64
  %130 = add nsw i64 %129, -32772
  %131 = icmp ult i64 %130, -65536
  %132 = icmp sgt i16 %128, 4
  %133 = select i1 %132, i16 63, i16 0
  %134 = add i16 %128, 60
  %135 = select i1 %131, i16 %133, i16 %134
  %136 = shl i16 %135, 10
  %137 = or i16 %136, 682
  %138 = sext i16 %137 to i64
  %139 = mul nsw i64 %138, 270187802656768
  %140 = add nsw i64 %139, 140737488355328
  %141 = ashr i64 %140, 47
  %142 = and i64 %141, -2
  %143 = add nsw i64 %141, -32768
  %144 = icmp ult i64 %143, -65536
  %145 = icmp sgt i64 %142, 0
  %146 = select i1 %145, i64 32767, i64 32768
  %147 = select i1 %144, i64 %146, i64 %142
  %148 = trunc i64 %147 to i16
  store i16 %148, ptr %126, align 2, !tbaa !12
  %149 = load i16, ptr %127, align 2, !tbaa !12
  %150 = sext i16 %149 to i64
  %151 = add nsw i64 %150, -32772
  %152 = icmp ult i64 %151, -65536
  %153 = icmp sgt i16 %149, 4
  %154 = select i1 %153, i16 63, i16 0
  %155 = add i16 %149, 60
  %156 = select i1 %152, i16 %154, i16 %155
  %157 = shl i16 %156, 10
  %158 = add i16 %157, 2288
  %159 = icmp sgt i16 %157, 30478
  %160 = select i1 %159, i16 32767, i16 %158
  %161 = sext i16 %160 to i64
  %162 = mul nsw i64 %161, 255189776859136
  %163 = add nsw i64 %162, 140737488355328
  %164 = ashr i64 %163, 47
  %165 = and i64 %164, -2
  %166 = add nsw i64 %164, -32768
  %167 = icmp ult i64 %166, -65536
  %168 = icmp sgt i64 %165, 0
  %169 = select i1 %168, i64 32767, i64 32768
  %170 = select i1 %167, i64 %169, i64 %165
  %171 = getelementptr inbounds i16, ptr %1, i64 7
  %172 = trunc i64 %170 to i16
  store i16 %172, ptr %171, align 2, !tbaa !12
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @LARp_to_rp(ptr nocapture noundef %0) unnamed_addr #15 {
  %2 = load <8 x i16>, ptr %0, align 2, !tbaa !12
  %3 = sext <8 x i16> %2 to <8 x i32>
  %4 = icmp slt <8 x i16> %2, zeroinitializer
  %5 = icmp ugt <8 x i16> %2, <i16 20069, i16 20069, i16 20069, i16 20069, i16 20069, i16 20069, i16 20069, i16 20069>
  %6 = icmp ugt <8 x i16> %2, <i16 26623, i16 26623, i16 26623, i16 26623, i16 26623, i16 26623, i16 26623, i16 26623>
  %7 = lshr <8 x i32> %3, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = add nuw nsw <8 x i32> %7, <i32 26112, i32 26112, i32 26112, i32 26112, i32 26112, i32 26112, i32 26112, i32 26112>
  %9 = add nuw nsw <8 x i32> %3, <i32 11059, i32 11059, i32 11059, i32 11059, i32 11059, i32 11059, i32 11059, i32 11059>
  %10 = shl nuw nsw <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %11 = add <8 x i16> %2, <i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059>
  %12 = icmp ult <8 x i16> %11, <i16 9011, i16 9011, i16 9011, i16 9011, i16 9011, i16 9011, i16 9011, i16 9011>
  %13 = xor <8 x i1> %6, %5
  %14 = xor <8 x i1> %4, %6
  %15 = select <8 x i1> %12, <8 x i32> %9, <8 x i32> %10
  %16 = select <8 x i1> %13, <8 x i32> %8, <8 x i32> %15
  %17 = trunc <8 x i32> %16 to <8 x i16>
  %18 = select <8 x i1> %14, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %17
  %19 = icmp eq <8 x i16> %2, <i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %20 = sub <8 x i16> zeroinitializer, %2
  %21 = select <8 x i1> %19, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>, <8 x i16> %20
  %22 = icmp ult <8 x i16> %21, <i16 11059, i16 11059, i16 11059, i16 11059, i16 11059, i16 11059, i16 11059, i16 11059>
  %23 = icmp ult <8 x i16> %21, <i16 20070, i16 20070, i16 20070, i16 20070, i16 20070, i16 20070, i16 20070, i16 20070>
  %24 = icmp ugt <8 x i16> %21, <i16 26623, i16 26623, i16 26623, i16 26623, i16 26623, i16 26623, i16 26623, i16 26623>
  %25 = lshr <8 x i16> %21, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26 = sub nuw nsw <8 x i16> <i16 -26112, i16 -26112, i16 -26112, i16 -26112, i16 -26112, i16 -26112, i16 -26112, i16 -26112>, %25
  %27 = sub nuw nsw <8 x i16> <i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059, i16 -11059>, %21
  %28 = mul nsw <8 x i16> %21, <i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2>
  %29 = select <8 x i1> %4, <8 x i1> %22, <8 x i1> zeroinitializer
  %30 = xor <8 x i1> %22, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %31 = select <8 x i1> %4, <8 x i1> %30, <8 x i1> zeroinitializer
  %32 = select <8 x i1> %31, <8 x i1> %23, <8 x i1> zeroinitializer
  %33 = xor <8 x i1> %23, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %34 = select <8 x i1> %31, <8 x i1> %33, <8 x i1> zeroinitializer
  %35 = xor <8 x i1> %24, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %36 = select <8 x i1> %34, <8 x i1> %35, <8 x i1> zeroinitializer
  %37 = select <8 x i1> %34, <8 x i1> %24, <8 x i1> zeroinitializer
  %38 = select <8 x i1> %29, <8 x i16> %28, <8 x i16> %18
  %39 = select <8 x i1> %32, <8 x i16> %27, <8 x i16> %38
  %40 = select <8 x i1> %36, <8 x i16> %26, <8 x i16> %39
  %41 = select <8 x i1> %37, <8 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767, i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <8 x i16> %40
  store <8 x i16> %41, ptr %0, align 2, !tbaa !12
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @Short_term_analysis_filtering(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef %3) unnamed_addr #13 {
  %5 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %40, label %7

7:                                                ; preds = %36, %4
  %8 = phi i32 [ %37, %36 ], [ %2, %4 ]
  %9 = phi ptr [ %38, %36 ], [ %3, %4 ]
  %10 = load i16, ptr %9, align 2, !tbaa !12
  br label %11

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %34, %11 ]
  %13 = phi i16 [ %10, %7 ], [ %27, %11 ]
  %14 = phi i16 [ %10, %7 ], [ %33, %11 ]
  %15 = getelementptr inbounds i16, ptr %5, i64 %12
  %16 = load i16, ptr %15, align 2, !tbaa !12
  %17 = getelementptr inbounds i16, ptr %1, i64 %12
  %18 = load i16, ptr %17, align 2, !tbaa !12
  store i16 %13, ptr %15, align 2, !tbaa !12
  %19 = sext i16 %18 to i64
  %20 = sext i16 %14 to i64
  %21 = sext i16 %16 to i64
  %22 = shl nsw i64 %20, 33
  %23 = mul i64 %22, %19
  %24 = add i64 %23, 140737488355328
  %25 = lshr i64 %24, 48
  %26 = trunc i64 %25 to i16
  %27 = tail call i16 @llvm.sadd.sat.i16(i16 %26, i16 %16)
  %28 = shl nsw i64 %21, 33
  %29 = mul i64 %28, %19
  %30 = add i64 %29, 140737488355328
  %31 = lshr i64 %30, 48
  %32 = trunc i64 %31 to i16
  %33 = tail call i16 @llvm.sadd.sat.i16(i16 %32, i16 %14)
  %34 = add nuw nsw i64 %12, 1
  %35 = icmp eq i64 %34, 8
  br i1 %35, label %36, label %11, !llvm.loop !59

36:                                               ; preds = %11
  %.lcssa = phi i16 [ %33, %11 ]
  %37 = add nsw i32 %8, -1
  store i16 %.lcssa, ptr %9, align 2, !tbaa !12
  %38 = getelementptr inbounds i16, ptr %9, i64 1
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %40, label %7, !llvm.loop !60

40:                                               ; preds = %36, %4
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @Gsm_Short_Term_Synthesis_Filter(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #13 {
  %5 = alloca [8 x i16], align 16
  %6 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 6
  %7 = load i16, ptr %6, align 4, !tbaa !58
  %8 = sext i16 %7 to i64
  %9 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 5, i64 %8
  %10 = xor i16 %7, 1
  store i16 %10, ptr %6, align 4, !tbaa !58
  %11 = sext i16 %10 to i64
  %12 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 5, i64 %11
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #31
  tail call fastcc void @Decoding_of_the_coded_Log_Area_Ratios(ptr noundef %1, ptr noundef nonnull %9) #33
  %13 = load <8 x i16>, ptr %12, align 2, !tbaa !12
  %14 = ashr <8 x i16> %13, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15 = load <8 x i16>, ptr %9, align 2, !tbaa !12
  %16 = ashr <8 x i16> %15, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17 = ashr <8 x i16> %13, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = add nsw <8 x i16> %17, %14
  %19 = add nsw <8 x i16> %18, %16
  store <8 x i16> %19, ptr %5, align 16, !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %5) #33
  call fastcc void @Short_term_synthesis_filtering(ptr noundef %0, ptr noundef nonnull %5, i32 noundef 13, ptr noundef %2, ptr noundef %3) #33
  %20 = load <8 x i16>, ptr %12, align 2, !tbaa !12
  %21 = ashr <8 x i16> %20, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %22 = load <8 x i16>, ptr %9, align 2, !tbaa !12
  %23 = ashr <8 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = add nsw <8 x i16> %23, %21
  store <8 x i16> %24, ptr %5, align 16, !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %5) #33
  %25 = getelementptr inbounds i16, ptr %2, i64 13
  %26 = getelementptr inbounds i16, ptr %3, i64 13
  call fastcc void @Short_term_synthesis_filtering(ptr noundef %0, ptr noundef nonnull %5, i32 noundef 14, ptr noundef nonnull %25, ptr noundef nonnull %26) #33
  %27 = load <8 x i16>, ptr %12, align 2, !tbaa !12
  %28 = ashr <8 x i16> %27, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29 = load <8 x i16>, ptr %9, align 2, !tbaa !12
  %30 = ashr <8 x i16> %29, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31 = add nsw <8 x i16> %30, %28
  %32 = ashr <8 x i16> %29, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %33 = add nsw <8 x i16> %31, %32
  store <8 x i16> %33, ptr %5, align 16, !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %5) #33
  %34 = getelementptr inbounds i16, ptr %2, i64 27
  %35 = getelementptr inbounds i16, ptr %3, i64 27
  call fastcc void @Short_term_synthesis_filtering(ptr noundef %0, ptr noundef nonnull %5, i32 noundef 13, ptr noundef nonnull %34, ptr noundef nonnull %35) #33
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %5, ptr noundef nonnull align 2 dereferenceable(16) %9, i64 16, i1 false), !tbaa !12
  call fastcc void @LARp_to_rp(ptr noundef nonnull %5) #33
  %36 = getelementptr inbounds i16, ptr %2, i64 40
  %37 = getelementptr inbounds i16, ptr %3, i64 40
  call fastcc void @Short_term_synthesis_filtering(ptr noundef %0, ptr noundef nonnull %5, i32 noundef 120, ptr noundef nonnull %36, ptr noundef nonnull %37) #33
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #31
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @Short_term_synthesis_filtering(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4) unnamed_addr #13 {
  %6 = getelementptr inbounds %struct.gsm_state, ptr %0, i64 0, i32 8
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %53, %5
  %9 = phi i32 [ %12, %53 ], [ %2, %5 ]
  %10 = phi ptr [ %55, %53 ], [ %4, %5 ]
  %11 = phi ptr [ %54, %53 ], [ %3, %5 ]
  %12 = add nsw i32 %9, -1
  %13 = load i16, ptr %11, align 2, !tbaa !12
  br label %14

14:                                               ; preds = %45, %8
  %15 = phi i64 [ 8, %8 ], [ %52, %45 ]
  %16 = phi i64 [ 7, %8 ], [ %50, %45 ]
  %17 = phi i16 [ %13, %8 ], [ %35, %45 ]
  %18 = getelementptr inbounds i16, ptr %1, i64 %16
  %19 = load i16, ptr %18, align 2, !tbaa !12
  %20 = getelementptr inbounds i16, ptr %6, i64 %16
  %21 = load i16, ptr %20, align 2, !tbaa !12
  %22 = icmp eq i16 %19, -32768
  %23 = icmp eq i16 %21, -32768
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %32, label %25

25:                                               ; preds = %14
  %26 = sext i16 %19 to i64
  %27 = sext i16 %21 to i64
  %28 = mul nsw i64 %27, %26
  %29 = add nsw i64 %28, 16384
  %30 = lshr i64 %29, 15
  %31 = and i64 %30, 65535
  br label %32

32:                                               ; preds = %25, %14
  %33 = phi i64 [ %31, %25 ], [ 32767, %14 ]
  %34 = trunc i64 %33 to i16
  %35 = tail call i16 @llvm.ssub.sat.i16(i16 %17, i16 %34)
  %36 = icmp eq i16 %35, -32768
  %37 = select i1 %22, i1 %36, i1 false
  br i1 %37, label %45, label %38

38:                                               ; preds = %32
  %39 = sext i16 %19 to i64
  %40 = sext i16 %35 to i64
  %41 = mul nsw i64 %40, %39
  %42 = add nsw i64 %41, 16384
  %43 = lshr i64 %42, 15
  %44 = and i64 %43, 65535
  br label %45

45:                                               ; preds = %38, %32
  %46 = phi i64 [ %44, %38 ], [ 32767, %32 ]
  %47 = trunc i64 %46 to i16
  %48 = tail call i16 @llvm.sadd.sat.i16(i16 %47, i16 %21)
  %49 = getelementptr inbounds i16, ptr %6, i64 %15
  store i16 %48, ptr %49, align 2, !tbaa !12
  %50 = add nsw i64 %16, -1
  %51 = icmp eq i64 %16, 0
  %52 = add nsw i64 %15, -1
  br i1 %51, label %53, label %14, !llvm.loop !61

53:                                               ; preds = %45
  %.lcssa = phi i16 [ %35, %45 ]
  %54 = getelementptr inbounds i16, ptr %11, i64 1
  store i16 %.lcssa, ptr %6, align 2, !tbaa !12
  %55 = getelementptr inbounds i16, ptr %10, i64 1
  store i16 %.lcssa, ptr %10, align 2, !tbaa !12
  %56 = icmp eq i32 %12, 0
  br i1 %56, label %57, label %8, !llvm.loop !62

57:                                               ; preds = %53, %5
  ret void
}

; Function Attrs: noreturn nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #16 {
  %3 = load ptr, ptr %1, align 8, !tbaa !63
  %4 = icmp eq ptr %3, null
  %5 = select i1 %4, ptr @.str.14, ptr %3
  %6 = tail call ptr @strrchr(ptr noundef nonnull dereferenceable(1) %5, i32 noundef 47) #34
  %7 = icmp eq ptr %6, null
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, ptr %6, i64 1
  %10 = load i8, ptr %9, align 1, !tbaa !7
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, ptr %5, ptr %9
  br label %13

13:                                               ; preds = %8, %2
  %14 = phi ptr [ %5, %2 ], [ %12, %8 ]
  store ptr %14, ptr @progname, align 8, !tbaa !63
  %15 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %14, ptr noundef nonnull dereferenceable(3) @.str.15, i64 noundef 2) #34
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  store i32 1, ptr @f_decode, align 4, !tbaa !65
  br label %18

18:                                               ; preds = %17, %13
  %19 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %14) #34
  %20 = trunc i64 %19 to i32
  %21 = icmp sgt i32 %20, 2
  br i1 %21, label %22, label %29

22:                                               ; preds = %18
  %23 = and i64 %19, 4294967295
  %24 = getelementptr inbounds i8, ptr %14, i64 %23
  %25 = getelementptr inbounds i8, ptr %24, i64 -3
  %26 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %25, ptr noundef nonnull dereferenceable(4) @.str.16) #34
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %22
  store i32 1, ptr @f_decode, align 4, !tbaa !65
  store i32 1, ptr @f_cat, align 4, !tbaa !65
  br label %29

29:                                               ; preds = %28, %22, %18
  br label %30

30:                                               ; preds = %41, %29
  %31 = tail call i32 @getopt(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull @.str.12) #32
  switch i32 %31, label %44 [
    i32 -1, label %48
    i32 100, label %32
    i32 102, label %33
    i32 99, label %34
    i32 112, label %35
    i32 70, label %36
    i32 117, label %37
    i32 108, label %38
    i32 97, label %39
    i32 115, label %40
    i32 118, label %42
    i32 104, label %43
  ]

32:                                               ; preds = %30
  store i32 1, ptr @f_decode, align 4, !tbaa !65
  br label %41

33:                                               ; preds = %30
  store i32 1, ptr @f_force, align 4, !tbaa !65
  br label %41

34:                                               ; preds = %30
  store i32 1, ptr @f_cat, align 4, !tbaa !65
  br label %41

35:                                               ; preds = %30
  store i32 1, ptr @f_precious, align 4, !tbaa !65
  br label %41

36:                                               ; preds = %30
  store i32 1, ptr @f_fast, align 4, !tbaa !65
  br label %41

37:                                               ; preds = %30
  tail call fastcc void @set_format(ptr noundef nonnull @f_ulaw) #33
  br label %41

38:                                               ; preds = %30
  tail call fastcc void @set_format(ptr noundef nonnull @f_linear) #33
  br label %41

39:                                               ; preds = %30
  tail call fastcc void @set_format(ptr noundef nonnull @f_alaw) #33
  br label %41

40:                                               ; preds = %30
  tail call fastcc void @set_format(ptr noundef nonnull @f_audio) #33
  br label %41

41:                                               ; preds = %40, %39, %38, %37, %36, %35, %34, %33, %32
  br label %30, !llvm.loop !66

42:                                               ; preds = %30
  tail call fastcc void @version() #33
  tail call void @exit(i32 noundef 0) #35
  unreachable

43:                                               ; preds = %30
  tail call fastcc void @help() #33
  tail call void @exit(i32 noundef 0) #35
  unreachable

44:                                               ; preds = %30
  %45 = load ptr, ptr @stderr, align 8, !tbaa !63
  %46 = load ptr, ptr @progname, align 8, !tbaa !63
  %47 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %45, ptr noundef nonnull @.str.13, ptr noundef %46) #36
  tail call void @exit(i32 noundef 1) #35
  unreachable

48:                                               ; preds = %30
  %49 = load i32, ptr @f_cat, align 4, !tbaa !65
  %50 = load i32, ptr @f_precious, align 4, !tbaa !65
  %51 = or i32 %50, %49
  store i32 %51, ptr @f_precious, align 4, !tbaa !65
  %52 = load i32, ptr @optind, align 4, !tbaa !65
  %53 = sub nsw i32 %0, %52
  %54 = tail call ptr @signal(i32 noundef 1, ptr noundef nonnull @onintr) #32
  %55 = tail call ptr @signal(i32 noundef 2, ptr noundef nonnull @onintr) #32
  %56 = tail call ptr @signal(i32 noundef 13, ptr noundef nonnull @onintr) #32
  %57 = tail call ptr @signal(i32 noundef 15, ptr noundef nonnull @onintr) #32
  %58 = tail call ptr @signal(i32 noundef 25, ptr noundef nonnull @onintr) #32
  %59 = icmp slt i32 %53, 1
  br i1 %59, label %63, label %60

60:                                               ; preds = %48
  %61 = sext i32 %52 to i64
  %62 = getelementptr inbounds ptr, ptr %1, i64 %61
  br label %64

63:                                               ; preds = %48
  tail call fastcc void @process(ptr noundef null) #33
  br label %71

64:                                               ; preds = %64, %60
  %65 = phi i32 [ %67, %64 ], [ %53, %60 ]
  %66 = phi ptr [ %68, %64 ], [ %62, %60 ]
  %67 = add nsw i32 %65, -1
  %68 = getelementptr inbounds ptr, ptr %66, i64 1
  %69 = load ptr, ptr %66, align 8, !tbaa !63
  tail call fastcc void @process(ptr noundef %69) #33
  %70 = icmp eq i32 %67, 0
  br i1 %70, label %71, label %64, !llvm.loop !67

71:                                               ; preds = %64, %63
  tail call void @exit(i32 noundef 0) #35
  unreachable
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strrchr(ptr noundef, i32 noundef) local_unnamed_addr #17

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #17

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #17

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #17

; Function Attrs: nounwind optsize
declare i32 @getopt(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @set_format(ptr noundef %0) unnamed_addr #4 {
  %2 = load ptr, ptr @f_format, align 8, !tbaa !63
  %3 = icmp eq ptr %2, null
  %4 = icmp eq ptr %2, %0
  %5 = or i1 %3, %4
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = load ptr, ptr @stderr, align 8, !tbaa !63
  %8 = load ptr, ptr @progname, align 8, !tbaa !63
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %7, ptr noundef nonnull @.str.17, ptr noundef %8, ptr noundef %8) #36
  tail call void @exit(i32 noundef 1) #35
  unreachable

10:                                               ; preds = %1
  store ptr %0, ptr @f_format, align 8, !tbaa !63
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @version() unnamed_addr #19 {
  %1 = load ptr, ptr @progname, align 8, !tbaa !63
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.18, ptr noundef %1, ptr noundef nonnull @.str.19) #33
  ret void
}

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #20

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc void @help() unnamed_addr #19 {
  %1 = load ptr, ptr @progname, align 8, !tbaa !63
  %2 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.20, ptr noundef %1) #33
  %3 = tail call i32 @putchar(i32 10)
  %4 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str)
  %5 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.61)
  %6 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.62)
  %7 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.63)
  %8 = tail call i32 @putchar(i32 10)
  %9 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.64)
  %10 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.65)
  %11 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.66)
  %12 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.67)
  %13 = tail call i32 @putchar(i32 10)
  %14 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.68)
  %15 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.69)
  %16 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str.70)
  %17 = tail call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #21

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @onintr() #16 {
  %1 = load ptr, ptr @outname, align 8, !tbaa !63
  store ptr null, ptr @outname, align 8, !tbaa !63
  %2 = icmp eq ptr %1, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  %4 = tail call i32 @unlink(ptr noundef nonnull %1) #32
  br label %5

5:                                                ; preds = %3, %0
  tail call void @exit(i32 noundef 1) #35
  unreachable
}

; Function Attrs: nounwind optsize
declare ptr @signal(i32 noundef, ptr noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @process(ptr noundef %0) unnamed_addr #4 {
  %2 = alloca [2 x i64], align 16
  store ptr null, ptr @out, align 8, !tbaa !63
  store ptr null, ptr @in, align 8, !tbaa !63
  store ptr null, ptr @outname, align 8, !tbaa !63
  store ptr null, ptr @inname, align 8, !tbaa !63
  %3 = load ptr, ptr @f_format, align 8, !tbaa !63
  store i64 0, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 2), align 8, !tbaa !68
  %4 = icmp eq ptr %0, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load ptr, ptr @stdin, align 8, !tbaa !63
  store ptr %6, ptr @in, align 8, !tbaa !63
  br label %98

7:                                                ; preds = %1
  %8 = load i32, ptr @f_decode, align 4, !tbaa !65
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %7
  %11 = tail call fastcc ptr @normalname(ptr noundef nonnull %0, ptr noundef nonnull @.str.41, ptr noundef nonnull @.str.45) #33
  br label %27

12:                                               ; preds = %7
  %13 = load i32, ptr @f_cat, align 4, !tbaa !65
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = tail call fastcc ptr @suffix(ptr noundef nonnull %0, ptr noundef nonnull @.str.41) #33
  %17 = icmp eq ptr %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %15
  %19 = load ptr, ptr @stderr, align 8, !tbaa !63
  %20 = load ptr, ptr @progname, align 8, !tbaa !63
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %19, ptr noundef nonnull @.str.42, ptr noundef %20, ptr noundef nonnull %0, ptr noundef nonnull @.str.41) #36
  br label %298

22:                                               ; preds = %15, %12
  %23 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #34
  %24 = add i64 %23, 1
  %25 = tail call fastcc ptr @emalloc(i64 noundef %24) #33
  %26 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %25, ptr noundef nonnull dereferenceable(1) %0) #32
  br label %27

27:                                               ; preds = %22, %10
  %28 = phi ptr [ %25, %22 ], [ %11, %10 ]
  store ptr %28, ptr @inname, align 8, !tbaa !63
  %29 = tail call noalias ptr @fopen(ptr noundef %28, ptr noundef nonnull @.str.43) #33
  store ptr %29, ptr @in, align 8, !tbaa !63
  %30 = icmp eq ptr %29, null
  %31 = load ptr, ptr @inname, align 8, !tbaa !63
  br i1 %30, label %32, label %37

32:                                               ; preds = %27
  tail call void @perror(ptr noundef %31) #36
  %33 = load ptr, ptr @stderr, align 8, !tbaa !63
  %34 = load ptr, ptr @progname, align 8, !tbaa !63
  %35 = load ptr, ptr @inname, align 8, !tbaa !63
  %36 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %33, ptr noundef nonnull @.str.44, ptr noundef %34, ptr noundef %35) #36
  br label %298

37:                                               ; preds = %27
  %38 = tail call i32 @fileno(ptr noundef nonnull %29) #32
  %39 = tail call i32 @fstat(i32 noundef %38, ptr noundef nonnull @instat) #32
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  tail call void @perror(ptr noundef %31) #36
  %42 = load ptr, ptr @stderr, align 8, !tbaa !63
  %43 = load ptr, ptr @progname, align 8, !tbaa !63
  %44 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %42, ptr noundef nonnull @.str.47, ptr noundef %43, ptr noundef %31) #36
  br label %298

45:                                               ; preds = %37
  %46 = load i32, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 3), align 8, !tbaa !71
  %47 = and i32 %46, 61440
  %48 = icmp eq i32 %47, 32768
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = load ptr, ptr @stderr, align 8, !tbaa !63
  %51 = load ptr, ptr @progname, align 8, !tbaa !63
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %50, ptr noundef nonnull @.str.48, ptr noundef %51, ptr noundef %31) #36
  br label %298

53:                                               ; preds = %45
  %54 = load i64, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 2), align 8, !tbaa !68
  %55 = icmp ult i64 %54, 2
  %56 = load i32, ptr @f_cat, align 4
  %57 = icmp ne i32 %56, 0
  %58 = select i1 %55, i1 true, i1 %57
  %59 = load i32, ptr @f_precious, align 4
  %60 = icmp ne i32 %59, 0
  %61 = select i1 %58, i1 true, i1 %60
  br i1 %61, label %70, label %62

62:                                               ; preds = %53
  %63 = load ptr, ptr @stderr, align 8, !tbaa !63
  %64 = load ptr, ptr @progname, align 8, !tbaa !63
  %65 = add i64 %54, -1
  %66 = icmp ult i64 %54, 3
  %67 = zext i1 %66 to i64
  %68 = getelementptr inbounds i8, ptr @.str.50, i64 %67
  %69 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %63, ptr noundef nonnull @.str.49, ptr noundef %64, ptr noundef %31, i64 noundef %65, ptr noundef nonnull %68) #36
  br label %298

70:                                               ; preds = %53
  %71 = icmp eq ptr %3, null
  br i1 %71, label %72, label %98

72:                                               ; preds = %70
  %73 = load ptr, ptr @inname, align 8, !tbaa !63
  %74 = icmp eq ptr %73, null
  br i1 %74, label %98, label %75

75:                                               ; preds = %72
  %76 = tail call fastcc ptr @normalname(ptr noundef nonnull %73, ptr noundef nonnull @.str.45, ptr noundef nonnull @.str.41) #33
  %77 = load ptr, ptr @alldescs, align 16, !tbaa !63
  %78 = icmp eq ptr %77, null
  br i1 %78, label %97, label %79

79:                                               ; preds = %93, %75
  %80 = phi ptr [ %95, %93 ], [ %77, %75 ]
  %81 = phi ptr [ %94, %93 ], [ @alldescs, %75 ]
  %82 = getelementptr inbounds %struct.fmtdesc, ptr %80, i64 0, i32 2
  %83 = load ptr, ptr %82, align 8, !tbaa !72
  %84 = icmp eq ptr %83, null
  br i1 %84, label %93, label %85

85:                                               ; preds = %79
  %86 = load i8, ptr %83, align 1, !tbaa !7
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %85
  %89 = tail call fastcc ptr @suffix(ptr noundef %76, ptr noundef nonnull %83) #33
  %90 = icmp eq ptr %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %88
  %.lcssa = phi ptr [ %81, %88 ]
  tail call void @free(ptr noundef %76) #32
  %92 = load ptr, ptr %.lcssa, align 8, !tbaa !63
  br label %98

93:                                               ; preds = %88, %85, %79
  %94 = getelementptr inbounds ptr, ptr %81, i64 1
  %95 = load ptr, ptr %94, align 8, !tbaa !63
  %96 = icmp eq ptr %95, null
  br i1 %96, label %97, label %79, !llvm.loop !74

97:                                               ; preds = %93, %75
  tail call void @free(ptr noundef %76) #32
  br label %98

98:                                               ; preds = %97, %91, %72, %70, %5
  %99 = phi ptr [ %3, %70 ], [ %3, %5 ], [ %92, %91 ], [ null, %97 ], [ null, %72 ]
  %100 = icmp eq ptr %99, null
  %101 = select i1 %100, ptr @f_ulaw, ptr %99
  %102 = getelementptr inbounds %struct.fmtdesc, ptr %101, i64 0, i32 6
  %103 = load ptr, ptr %102, align 8, !tbaa !75
  store ptr %103, ptr @output, align 8, !tbaa !63
  %104 = getelementptr inbounds %struct.fmtdesc, ptr %101, i64 0, i32 5
  %105 = load ptr, ptr %104, align 8, !tbaa !76
  store ptr %105, ptr @input, align 8, !tbaa !63
  %106 = getelementptr inbounds %struct.fmtdesc, ptr %101, i64 0, i32 3
  %107 = load ptr, ptr %106, align 8, !tbaa !77
  store ptr %107, ptr @init_input, align 8, !tbaa !63
  %108 = getelementptr inbounds %struct.fmtdesc, ptr %101, i64 0, i32 4
  %109 = load ptr, ptr %108, align 8, !tbaa !78
  store ptr %109, ptr @init_output, align 8, !tbaa !63
  %110 = load i32, ptr @f_cat, align 4
  %111 = icmp ne i32 %110, 0
  %112 = select i1 %4, i1 true, i1 %111
  br i1 %112, label %113, label %115

113:                                              ; preds = %98
  %114 = load ptr, ptr @stdout, align 8, !tbaa !63
  store ptr %114, ptr @out, align 8, !tbaa !63
  br label %168

115:                                              ; preds = %98
  %116 = load i32, ptr @f_decode, align 4, !tbaa !65
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, ptr @codename, ptr @plainname
  %119 = tail call ptr %118(ptr noundef nonnull %0) #32, !callees !79
  %120 = icmp eq ptr %119, null
  br i1 %120, label %298, label %121

121:                                              ; preds = %115
  %122 = tail call i32 (ptr, i32, ...) @open(ptr noundef nonnull %119, i32 noundef 193, i32 noundef 438) #32
  %123 = icmp sgt i32 %122, -1
  br i1 %123, label %124, label %126

124:                                              ; preds = %121
  %125 = tail call noalias ptr @fdopen(i32 noundef %122, ptr noundef nonnull @.str.51) #32
  br label %156

126:                                              ; preds = %121
  %127 = tail call ptr @__errno_location() #37
  %128 = load i32, ptr %127, align 4, !tbaa !65
  %129 = icmp eq i32 %128, 17
  br i1 %129, label %131, label %130

130:                                              ; preds = %126
  store ptr null, ptr @out, align 8, !tbaa !63
  br label %162

131:                                              ; preds = %126
  %132 = load i32, ptr @f_force, align 4, !tbaa !65
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %154

134:                                              ; preds = %131
  %135 = load ptr, ptr @stderr, align 8, !tbaa !63
  %136 = tail call i32 @fileno(ptr noundef %135) #32
  %137 = tail call i32 @isatty(i32 noundef %136) #32
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %298, label %139

139:                                              ; preds = %134
  %140 = load ptr, ptr @stderr, align 8, !tbaa !63
  %141 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %140, ptr noundef nonnull @.str.54, ptr noundef nonnull %119, ptr noundef nonnull %119) #36
  %142 = load ptr, ptr @stderr, align 8, !tbaa !63
  %143 = tail call i32 @fflush(ptr noundef %142) #33
  %144 = tail call i32 @getchar() #33
  br label %145

145:                                              ; preds = %147, %139
  %146 = phi i32 [ %144, %139 ], [ %148, %147 ]
  switch i32 %146, label %147 [
    i32 -1, label %149
    i32 10, label %149
  ]

147:                                              ; preds = %145
  %148 = tail call i32 @getchar() #33
  br label %145, !llvm.loop !80

149:                                              ; preds = %145, %145
  %150 = icmp eq i32 %144, 121
  br i1 %150, label %154, label %151

151:                                              ; preds = %149
  %152 = load ptr, ptr @stderr, align 8, !tbaa !63
  %153 = tail call i64 @fwrite(ptr nonnull @.str.55, i64 17, i64 1, ptr %152) #38
  br label %298

154:                                              ; preds = %149, %131
  %155 = tail call noalias ptr @fopen(ptr noundef nonnull %119, ptr noundef nonnull @.str.51) #33
  br label %156

156:                                              ; preds = %154, %124
  %157 = phi ptr [ %155, %154 ], [ %125, %124 ]
  store ptr %157, ptr @out, align 8, !tbaa !63
  %158 = icmp eq ptr %157, null
  br i1 %158, label %162, label %159

159:                                              ; preds = %156
  %160 = load ptr, ptr @init_output, align 8
  %161 = load ptr, ptr @init_input, align 8
  br label %168

162:                                              ; preds = %156, %130
  tail call void @perror(ptr noundef nonnull %119) #36
  %163 = load ptr, ptr @stderr, align 8, !tbaa !63
  %164 = load ptr, ptr @progname, align 8, !tbaa !63
  %165 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %163, ptr noundef nonnull @.str.52, ptr noundef %164, ptr noundef nonnull %119) #36
  br i1 %123, label %166, label %298

166:                                              ; preds = %162
  %167 = tail call i32 @close(i32 noundef %122) #32
  br label %298

168:                                              ; preds = %159, %113
  %169 = phi ptr [ %107, %113 ], [ %161, %159 ]
  %170 = phi ptr [ %109, %113 ], [ %160, %159 ]
  %171 = phi ptr [ null, %113 ], [ %119, %159 ]
  store ptr %171, ptr @outname, align 8, !tbaa !63
  %172 = load i32, ptr @f_decode, align 4, !tbaa !65
  %173 = icmp eq i32 %172, 0
  %174 = select i1 %173, ptr %169, ptr %170
  %175 = tail call i32 %174() #32
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %194, label %177

177:                                              ; preds = %168
  %178 = load ptr, ptr @stderr, align 8, !tbaa !63
  %179 = load ptr, ptr @progname, align 8, !tbaa !63
  %180 = load i32, ptr @f_decode, align 4, !tbaa !65
  %181 = icmp eq i32 %180, 0
  %182 = select i1 %181, ptr @.str.35, ptr @.str.34
  br i1 %181, label %187, label %183

183:                                              ; preds = %177
  %184 = load ptr, ptr @outname, align 8
  %185 = icmp eq ptr %184, null
  %186 = select i1 %185, ptr @.str.36, ptr %184
  br label %191

187:                                              ; preds = %177
  %188 = load ptr, ptr @inname, align 8
  %189 = icmp eq ptr %188, null
  %190 = select i1 %189, ptr @.str.37, ptr %188
  br label %191

191:                                              ; preds = %187, %183
  %192 = phi ptr [ %186, %183 ], [ %190, %187 ]
  %193 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %178, ptr noundef nonnull @.str.33, ptr noundef %179, ptr noundef nonnull %182, ptr noundef nonnull %192) #36
  br label %298

194:                                              ; preds = %168
  %195 = load i32, ptr @f_decode, align 4, !tbaa !65
  %196 = icmp eq i32 %195, 0
  %197 = select i1 %196, ptr @process_encode, ptr @process_decode
  %198 = tail call i32 %197() #32, !callees !81
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %298

200:                                              ; preds = %194
  %201 = load ptr, ptr @out, align 8, !tbaa !63
  %202 = tail call i32 @fflush(ptr noundef %201) #33
  %203 = icmp slt i32 %202, 0
  br i1 %203, label %208, label %204

204:                                              ; preds = %200
  %205 = load ptr, ptr @out, align 8, !tbaa !63
  %206 = tail call i32 @ferror(ptr noundef %205) #32
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %218, label %208

208:                                              ; preds = %204, %200
  %209 = load ptr, ptr @outname, align 8
  %210 = icmp eq ptr %209, null
  %211 = select i1 %210, ptr @.str.36, ptr %209
  tail call void @perror(ptr noundef nonnull %211) #36
  %212 = load ptr, ptr @stderr, align 8, !tbaa !63
  %213 = load ptr, ptr @progname, align 8, !tbaa !63
  %214 = load ptr, ptr @outname, align 8
  %215 = icmp eq ptr %214, null
  %216 = select i1 %215, ptr @.str.36, ptr %214
  %217 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %212, ptr noundef nonnull @.str.38, ptr noundef %213, ptr noundef nonnull %216) #36
  br label %298

218:                                              ; preds = %204
  %219 = load ptr, ptr @stdout, align 8, !tbaa !63
  %220 = icmp eq ptr %205, %219
  br i1 %220, label %273, label %221

221:                                              ; preds = %218
  %222 = load i64, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 2), align 8, !tbaa !68
  %223 = icmp ne i64 %222, 0
  %224 = load ptr, ptr @outname, align 8
  %225 = icmp ne ptr %224, null
  %226 = select i1 %223, i1 %225, i1 false
  br i1 %226, label %227, label %233

227:                                              ; preds = %221
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #31
  %228 = load i64, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 11), align 8, !tbaa !82
  store i64 %228, ptr %2, align 16, !tbaa !40
  %229 = load i64, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 12), align 8, !tbaa !83
  %230 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 1
  store i64 %229, ptr %230, align 8, !tbaa !40
  %231 = call i32 @utime(ptr noundef nonnull %224, ptr noundef nonnull %2) #32
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #31
  %232 = load i64, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 2), align 8, !tbaa !68
  br label %233

233:                                              ; preds = %227, %221
  %234 = phi i64 [ %222, %221 ], [ %232, %227 ]
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %249, label %236

236:                                              ; preds = %233
  %237 = load ptr, ptr @out, align 8, !tbaa !63
  %238 = tail call i32 @fileno(ptr noundef %237) #32
  %239 = load i32, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 3), align 8, !tbaa !71
  %240 = and i32 %239, 4095
  %241 = tail call i32 @fchmod(i32 noundef %238, i32 noundef %240) #32
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %249, label %243

243:                                              ; preds = %236
  %244 = load ptr, ptr @outname, align 8, !tbaa !63
  tail call void @perror(ptr noundef %244) #36
  %245 = load ptr, ptr @stderr, align 8, !tbaa !63
  %246 = load ptr, ptr @progname, align 8, !tbaa !63
  %247 = load ptr, ptr @outname, align 8, !tbaa !63
  %248 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %245, ptr noundef nonnull @.str.60, ptr noundef %246, ptr noundef %247) #36
  br label %249

249:                                              ; preds = %243, %236, %233
  %250 = load i64, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 2), align 8, !tbaa !68
  %251 = icmp eq i64 %250, 0
  %252 = load ptr, ptr @out, align 8, !tbaa !63
  br i1 %251, label %259, label %253

253:                                              ; preds = %249
  %254 = tail call i32 @fileno(ptr noundef %252) #32
  %255 = load i32, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 4), align 4, !tbaa !84
  %256 = load i32, ptr getelementptr inbounds (%struct.stat, ptr @instat, i64 0, i32 5), align 8, !tbaa !85
  %257 = tail call i32 @fchown(i32 noundef %254, i32 noundef %255, i32 noundef %256) #32
  %258 = load ptr, ptr @out, align 8, !tbaa !63
  br label %259

259:                                              ; preds = %253, %249
  %260 = phi ptr [ %252, %249 ], [ %258, %253 ]
  %261 = tail call i32 @fclose(ptr noundef %260) #33
  %262 = icmp slt i32 %261, 0
  %263 = load ptr, ptr @outname, align 8, !tbaa !63
  br i1 %262, label %264, label %269

264:                                              ; preds = %259
  tail call void @perror(ptr noundef %263) #36
  %265 = load ptr, ptr @stderr, align 8, !tbaa !63
  %266 = load ptr, ptr @progname, align 8, !tbaa !63
  %267 = load ptr, ptr @outname, align 8, !tbaa !63
  %268 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %265, ptr noundef nonnull @.str.38, ptr noundef %266, ptr noundef %267) #36
  br label %298

269:                                              ; preds = %259
  %270 = icmp eq ptr %263, %0
  br i1 %270, label %272, label %271

271:                                              ; preds = %269
  tail call void @free(ptr noundef %263) #32
  br label %272

272:                                              ; preds = %271, %269
  store ptr null, ptr @outname, align 8, !tbaa !63
  br label %273

273:                                              ; preds = %272, %218
  store ptr null, ptr @out, align 8, !tbaa !63
  %274 = load ptr, ptr @in, align 8, !tbaa !63
  %275 = load ptr, ptr @stdin, align 8, !tbaa !63
  %276 = icmp eq ptr %274, %275
  br i1 %276, label %338, label %277

277:                                              ; preds = %273
  %278 = tail call i32 @fclose(ptr noundef %274) #33
  store ptr null, ptr @in, align 8, !tbaa !63
  %279 = load i32, ptr @f_cat, align 4, !tbaa !65
  %280 = icmp ne i32 %279, 0
  %281 = load i32, ptr @f_precious, align 4
  %282 = icmp ne i32 %281, 0
  %283 = select i1 %280, i1 true, i1 %282
  %284 = load ptr, ptr @inname, align 8, !tbaa !63
  br i1 %283, label %294, label %285

285:                                              ; preds = %277
  %286 = tail call i32 @unlink(ptr noundef %284) #32
  %287 = icmp slt i32 %286, 0
  br i1 %287, label %288, label %298

288:                                              ; preds = %285
  %289 = load ptr, ptr @inname, align 8, !tbaa !63
  tail call void @perror(ptr noundef %289) #36
  %290 = load ptr, ptr @stderr, align 8, !tbaa !63
  %291 = load ptr, ptr @progname, align 8, !tbaa !63
  %292 = load ptr, ptr @inname, align 8, !tbaa !63
  %293 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %290, ptr noundef nonnull @.str.39, ptr noundef %291, ptr noundef %292) #36
  br label %298

294:                                              ; preds = %277
  %295 = icmp eq ptr %284, %0
  br i1 %295, label %297, label %296

296:                                              ; preds = %294
  tail call void @free(ptr noundef %284) #32
  br label %297

297:                                              ; preds = %296, %294
  store ptr null, ptr @inname, align 8, !tbaa !63
  br label %338

298:                                              ; preds = %288, %285, %264, %208, %194, %191, %166, %162, %151, %134, %115, %62, %49, %41, %32, %18
  %299 = load ptr, ptr @out, align 8, !tbaa !63
  %300 = icmp eq ptr %299, null
  %301 = load ptr, ptr @stdout, align 8
  %302 = icmp eq ptr %299, %301
  %303 = select i1 %300, i1 true, i1 %302
  br i1 %303, label %318, label %304

304:                                              ; preds = %298
  %305 = tail call i32 @fclose(ptr noundef nonnull %299) #33
  store ptr null, ptr @out, align 8, !tbaa !63
  %306 = load ptr, ptr @outname, align 8, !tbaa !63
  %307 = tail call i32 @unlink(ptr noundef %306) #32
  %308 = icmp slt i32 %307, 0
  br i1 %308, label %309, label %318

309:                                              ; preds = %304
  %310 = tail call ptr @__errno_location() #37
  %311 = load i32, ptr %310, align 4, !tbaa !65
  switch i32 %311, label %312 [
    i32 2, label %318
    i32 4, label %318
  ]

312:                                              ; preds = %309
  %313 = load ptr, ptr @outname, align 8, !tbaa !63
  tail call void @perror(ptr noundef %313) #36
  %314 = load ptr, ptr @stderr, align 8, !tbaa !63
  %315 = load ptr, ptr @progname, align 8, !tbaa !63
  %316 = load ptr, ptr @outname, align 8, !tbaa !63
  %317 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %314, ptr noundef nonnull @.str.40, ptr noundef %315, ptr noundef %316) #36
  br label %318

318:                                              ; preds = %312, %309, %309, %304, %298
  %319 = load ptr, ptr @in, align 8, !tbaa !63
  %320 = icmp eq ptr %319, null
  %321 = load ptr, ptr @stdin, align 8
  %322 = icmp eq ptr %319, %321
  %323 = select i1 %320, i1 true, i1 %322
  br i1 %323, label %326, label %324

324:                                              ; preds = %318
  %325 = tail call i32 @fclose(ptr noundef nonnull %319) #33
  store ptr null, ptr @in, align 8, !tbaa !63
  br label %326

326:                                              ; preds = %324, %318
  %327 = load ptr, ptr @inname, align 8, !tbaa !63
  %328 = icmp eq ptr %327, null
  %329 = icmp eq ptr %327, %0
  %330 = or i1 %328, %329
  br i1 %330, label %332, label %331

331:                                              ; preds = %326
  tail call void @free(ptr noundef nonnull %327) #32
  br label %332

332:                                              ; preds = %331, %326
  %333 = load ptr, ptr @outname, align 8, !tbaa !63
  %334 = icmp eq ptr %333, null
  %335 = icmp eq ptr %333, %0
  %336 = or i1 %334, %335
  br i1 %336, label %338, label %337

337:                                              ; preds = %332
  tail call void @free(ptr noundef nonnull %333) #32
  br label %338

338:                                              ; preds = %337, %332, %297, %273
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc ptr @normalname(ptr noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) unnamed_addr #4 {
  %4 = icmp eq ptr %0, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %3
  %6 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #34
  %7 = add i64 %6, 1
  %8 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #34
  %9 = add i64 %7, %8
  %10 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #34
  %11 = add i64 %9, %10
  %12 = tail call fastcc ptr @emalloc(i64 noundef %11) #33
  %13 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %12, ptr noundef nonnull dereferenceable(1) %0) #32
  %14 = tail call fastcc ptr @suffix(ptr noundef %12, ptr noundef %2) #33
  %15 = icmp eq ptr %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %5
  %17 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %14, ptr noundef nonnull dereferenceable(1) %1) #32
  br label %26

18:                                               ; preds = %5
  %19 = load i8, ptr %1, align 1, !tbaa !7
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = tail call fastcc ptr @suffix(ptr noundef %12, ptr noundef nonnull %1) #33
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = tail call ptr @strcat(ptr noundef nonnull dereferenceable(1) %12, ptr noundef nonnull dereferenceable(1) %1) #32
  br label %26

26:                                               ; preds = %24, %21, %18, %16, %3
  %27 = phi ptr [ null, %3 ], [ %12, %18 ], [ %12, %21 ], [ %12, %24 ], [ %12, %16 ]
  ret ptr %27
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read) uwtable
define internal fastcc ptr @suffix(ptr noundef readonly %0, ptr nocapture noundef readonly %1) unnamed_addr #22 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #34
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #34
  %5 = icmp ne i64 %4, 0
  %6 = icmp ugt i64 %3, %4
  %7 = select i1 %5, i1 %6, i1 false
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = sub i64 %3, %4
  %10 = getelementptr inbounds i8, ptr %0, i64 %9
  %11 = tail call i32 @bcmp(ptr %10, ptr %1, i64 %4)
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, ptr %10, ptr null
  br label %14

14:                                               ; preds = %8, %2
  %15 = phi ptr [ %13, %8 ], [ null, %2 ]
  ret ptr %15
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc noalias ptr @emalloc(i64 noundef %0) unnamed_addr #4 {
  %2 = tail call noalias ptr @malloc(i64 noundef %0) #39
  %3 = icmp eq ptr %2, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = load ptr, ptr @stderr, align 8, !tbaa !63
  %6 = load ptr, ptr @progname, align 8, !tbaa !63
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef nonnull @.str.46, ptr noundef %6, i64 noundef %0) #36
  tail call void @onintr() #33
  unreachable

8:                                                ; preds = %1
  ret ptr %2
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #23

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare void @perror(ptr nocapture noundef readonly) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fileno(ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fstat(i32 noundef, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nounwind optsize uwtable
define internal ptr @codename(ptr noundef %0) unnamed_addr #4 {
  %2 = tail call fastcc ptr @normalname(ptr noundef %0, ptr noundef nonnull @.str.41, ptr noundef nonnull @.str.45) #33
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @plainname(ptr noundef %0) unnamed_addr #4 {
  %2 = tail call fastcc ptr @normalname(ptr noundef %0, ptr noundef nonnull @.str.45, ptr noundef nonnull @.str.41) #33
  ret ptr %2
}

; Function Attrs: nofree optsize
declare noundef i32 @open(ptr nocapture noundef readonly, i32 noundef, ...) local_unnamed_addr #24

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fdopen(i32 noundef, ptr nocapture noundef readonly) local_unnamed_addr #21

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__errno_location() local_unnamed_addr #25

; Function Attrs: nounwind optsize
declare i32 @isatty(i32 noundef) local_unnamed_addr #18

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i32 @getchar() local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: optsize
declare i32 @close(i32 noundef) local_unnamed_addr #26

; Function Attrs: nounwind optsize uwtable
define internal i32 @process_encode() unnamed_addr #4 {
  %1 = alloca [160 x i16], align 16
  %2 = alloca [33 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 320, ptr nonnull %1) #31
  call void @llvm.lifetime.start.p0(i64 33, ptr nonnull %2) #31
  %3 = tail call ptr @gsm_create() #32
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %0
  %6 = load ptr, ptr @progname, align 8, !tbaa !63
  tail call void @perror(ptr noundef %6) #36
  br label %48

7:                                                ; preds = %0
  %8 = tail call i32 @gsm_option(ptr noundef nonnull %3, i32 noundef 2, ptr noundef nonnull @f_fast) #32
  %9 = tail call i32 @gsm_option(ptr noundef nonnull %3, i32 noundef 1, ptr noundef nonnull @f_verbose) #32
  br label %10

10:                                               ; preds = %21, %7
  %11 = load ptr, ptr @input, align 8, !tbaa !63
  %12 = call i32 %11(ptr noundef nonnull %1) #32
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %35

14:                                               ; preds = %10
  %15 = icmp ult i32 %12, 160
  br i1 %15, label %16, label %21

16:                                               ; preds = %14
  %17 = zext i32 %12 to i64
  %18 = getelementptr inbounds i16, ptr %1, i64 %17
  %19 = shl nuw nsw i64 %17, 1
  %20 = sub nuw nsw i64 320, %19
  call void @llvm.memset.p0.i64(ptr nonnull align 2 %18, i8 0, i64 %20, i1 false)
  br label %21

21:                                               ; preds = %16, %14
  call void @gsm_encode(ptr noundef nonnull %3, ptr noundef nonnull %1, ptr noundef nonnull %2) #32
  %22 = load ptr, ptr @out, align 8, !tbaa !63
  %23 = call i64 @fwrite(ptr noundef nonnull %2, i64 noundef 33, i64 noundef 1, ptr noundef %22) #33
  %24 = icmp eq i64 %23, 1
  br i1 %24, label %10, label %25, !llvm.loop !86

25:                                               ; preds = %21
  %26 = load ptr, ptr @outname, align 8
  %27 = icmp eq ptr %26, null
  %28 = select i1 %27, ptr @.str.36, ptr %26
  call void @perror(ptr noundef nonnull %28) #36
  %29 = load ptr, ptr @stderr, align 8, !tbaa !63
  %30 = load ptr, ptr @progname, align 8, !tbaa !63
  %31 = load ptr, ptr @outname, align 8
  %32 = icmp eq ptr %31, null
  %33 = select i1 %32, ptr @.str.36, ptr %31
  %34 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %29, ptr noundef nonnull @.str.58, ptr noundef %30, ptr noundef nonnull %33) #36
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  br label %48

35:                                               ; preds = %10
  %.lcssa = phi i32 [ %12, %10 ]
  %36 = icmp slt i32 %.lcssa, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %35
  %38 = load ptr, ptr @inname, align 8
  %39 = icmp eq ptr %38, null
  %40 = select i1 %39, ptr @.str.37, ptr %38
  call void @perror(ptr noundef nonnull %40) #36
  %41 = load ptr, ptr @stderr, align 8, !tbaa !63
  %42 = load ptr, ptr @progname, align 8, !tbaa !63
  %43 = load ptr, ptr @inname, align 8
  %44 = icmp eq ptr %43, null
  %45 = select i1 %44, ptr @.str.37, ptr %43
  %46 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %41, ptr noundef nonnull @.str.59, ptr noundef %42, ptr noundef nonnull %45) #36
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  br label %48

47:                                               ; preds = %35
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  br label %48

48:                                               ; preds = %47, %37, %25, %5
  %49 = phi i32 [ -1, %25 ], [ -1, %37 ], [ 0, %47 ], [ -1, %5 ]
  call void @llvm.lifetime.end.p0(i64 33, ptr nonnull %2) #31
  call void @llvm.lifetime.end.p0(i64 320, ptr nonnull %1) #31
  ret i32 %49
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @process_decode() unnamed_addr #4 {
  %1 = alloca [33 x i8], align 16
  %2 = alloca [160 x i16], align 16
  call void @llvm.lifetime.start.p0(i64 33, ptr nonnull %1) #31
  call void @llvm.lifetime.start.p0(i64 320, ptr nonnull %2) #31
  %3 = tail call ptr @gsm_create() #32
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %0
  %6 = load ptr, ptr @progname, align 8, !tbaa !63
  tail call void @perror(ptr noundef %6) #36
  br label %64

7:                                                ; preds = %0
  %8 = tail call i32 @gsm_option(ptr noundef nonnull %3, i32 noundef 2, ptr noundef nonnull @f_fast) #32
  %9 = tail call i32 @gsm_option(ptr noundef nonnull %3, i32 noundef 1, ptr noundef nonnull @f_verbose) #32
  br label %10

10:                                               ; preds = %41, %7
  %11 = load ptr, ptr @in, align 8, !tbaa !63
  %12 = call i64 @fread(ptr noundef nonnull %1, i64 noundef 1, i64 noundef 33, ptr noundef %11) #33
  %13 = trunc i64 %12 to i32
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %51

15:                                               ; preds = %10
  %16 = and i64 %12, 4294967295
  %17 = icmp eq i64 %16, 33
  br i1 %17, label %30, label %18

18:                                               ; preds = %15
  %.lcssa4 = phi i64 [ %16, %15 ]
  %19 = load ptr, ptr @stderr, align 8, !tbaa !63
  %20 = load ptr, ptr @progname, align 8, !tbaa !63
  %21 = sub nsw i64 33, %.lcssa4
  %22 = icmp eq i64 %.lcssa4, 32
  %23 = zext i1 %22 to i64
  %24 = getelementptr inbounds i8, ptr @.str.50, i64 %23
  %25 = load ptr, ptr @inname, align 8
  %26 = icmp eq ptr %25, null
  %27 = select i1 %26, ptr @.str.37, ptr %25
  %28 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %19, ptr noundef nonnull @.str.56, ptr noundef %20, i64 noundef %21, ptr noundef nonnull %24, ptr noundef nonnull %27) #36
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  %29 = tail call ptr @__errno_location() #37
  store i32 0, ptr %29, align 4, !tbaa !65
  br label %64

30:                                               ; preds = %15
  %31 = call i32 @gsm_decode(ptr noundef nonnull %3, ptr noundef nonnull %1, ptr noundef nonnull %2) #32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %30
  %34 = load ptr, ptr @stderr, align 8, !tbaa !63
  %35 = load ptr, ptr @progname, align 8, !tbaa !63
  %36 = load ptr, ptr @inname, align 8
  %37 = icmp eq ptr %36, null
  %38 = select i1 %37, ptr @.str.37, ptr %36
  %39 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %34, ptr noundef nonnull @.str.57, ptr noundef %35, ptr noundef nonnull %38) #36
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  %40 = tail call ptr @__errno_location() #37
  store i32 0, ptr %40, align 4, !tbaa !65
  br label %64

41:                                               ; preds = %30
  %42 = load ptr, ptr @output, align 8, !tbaa !63
  %43 = call i32 %42(ptr noundef nonnull %2) #32
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %10, !llvm.loop !87

45:                                               ; preds = %41
  %46 = load ptr, ptr @outname, align 8, !tbaa !63
  call void @perror(ptr noundef %46) #36
  %47 = load ptr, ptr @stderr, align 8, !tbaa !63
  %48 = load ptr, ptr @progname, align 8, !tbaa !63
  %49 = load ptr, ptr @outname, align 8, !tbaa !63
  %50 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %47, ptr noundef nonnull @.str.58, ptr noundef %48, ptr noundef %49) #36
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  br label %64

51:                                               ; preds = %10
  %.lcssa = phi i32 [ %13, %10 ]
  %52 = icmp slt i32 %.lcssa, 0
  br i1 %52, label %53, label %63

53:                                               ; preds = %51
  %54 = load ptr, ptr @inname, align 8
  %55 = icmp eq ptr %54, null
  %56 = select i1 %55, ptr @.str.37, ptr %54
  call void @perror(ptr noundef nonnull %56) #36
  %57 = load ptr, ptr @stderr, align 8, !tbaa !63
  %58 = load ptr, ptr @progname, align 8, !tbaa !63
  %59 = load ptr, ptr @inname, align 8
  %60 = icmp eq ptr %59, null
  %61 = select i1 %60, ptr @.str.37, ptr %59
  %62 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %57, ptr noundef nonnull @.str.59, ptr noundef %58, ptr noundef nonnull %61) #36
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  br label %64

63:                                               ; preds = %51
  call void @gsm_destroy(ptr noundef nonnull %3) #32
  br label %64

64:                                               ; preds = %63, %53, %45, %33, %18, %5
  %65 = phi i32 [ -1, %18 ], [ -1, %33 ], [ -1, %45 ], [ -1, %53 ], [ 0, %63 ], [ -1, %5 ]
  call void @llvm.lifetime.end.p0(i64 320, ptr nonnull %2) #31
  call void @llvm.lifetime.end.p0(i64 33, ptr nonnull %1) #31
  ret i32 %65
}

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef i32 @ferror(ptr nocapture noundef) local_unnamed_addr #27

; Function Attrs: nofree nounwind optsize
declare noundef i32 @utime(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #21

; Function Attrs: nounwind optsize
declare i32 @fchmod(i32 noundef, i32 noundef) local_unnamed_addr #18

; Function Attrs: nounwind optsize
declare i32 @fchown(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #18

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i32 @unlink(ptr nocapture noundef readonly) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #28

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #29

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly) local_unnamed_addr #23

; Function Attrs: nofree nounwind optsize
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #21

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #30

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #30

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @generic_init() #2 {
  ret i32 0
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @alaw_input(ptr nocapture noundef writeonly %0) #19 {
  br label %2

2:                                                ; preds = %7, %1
  %3 = phi i64 [ 0, %1 ], [ %13, %7 ]
  %4 = load ptr, ptr @in, align 8, !tbaa !63
  %5 = tail call i32 @fgetc(ptr noundef %4) #33
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = and i32 %5, 255
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [256 x i16], ptr @a2s, i64 0, i64 %9
  %11 = load i16, ptr %10, align 2, !tbaa !12
  %12 = getelementptr inbounds i16, ptr %0, i64 %3
  store i16 %11, ptr %12, align 2, !tbaa !12
  %13 = add nuw nsw i64 %3, 1
  %14 = icmp eq i64 %13, 160
  br i1 %14, label %20, label %2, !llvm.loop !88

15:                                               ; preds = %2
  %.lcssa = phi i64 [ %3, %2 ]
  %16 = trunc i64 %.lcssa to i32
  %17 = load ptr, ptr @in, align 8, !tbaa !63
  %18 = tail call i32 @ferror(ptr noundef %17) #32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %15, %7
  %21 = phi i32 [ %16, %15 ], [ 160, %7 ]
  br label %22

22:                                               ; preds = %20, %15
  %23 = phi i32 [ %21, %20 ], [ -1, %15 ]
  ret i32 %23
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fgetc(ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @alaw_output(ptr nocapture noundef readonly %0) #19 {
  br label %2

2:                                                ; preds = %14, %1
  %3 = phi i32 [ 0, %1 ], [ %15, %14 ]
  %4 = phi ptr [ %0, %1 ], [ %16, %14 ]
  %5 = load i16, ptr %4, align 2, !tbaa !12
  %6 = lshr i16 %5, 4
  %7 = zext i16 %6 to i64
  %8 = getelementptr inbounds [4096 x i8], ptr @s2a, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !7
  %10 = zext i8 %9 to i32
  %11 = load ptr, ptr @out, align 8, !tbaa !63
  %12 = tail call i32 @fputc(i32 noundef %10, ptr noundef %11) #33
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = add nuw nsw i32 %3, 1
  %16 = getelementptr inbounds i16, ptr %4, i64 1
  %17 = icmp eq i32 %15, 160
  br i1 %17, label %18, label %2, !llvm.loop !89

18:                                               ; preds = %14, %2
  %19 = phi i32 [ -1, %2 ], [ 0, %14 ]
  ret i32 %19
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @audio_init_input() #19 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1) #31
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #31
  %3 = load ptr, ptr @in, align 8, !tbaa !63
  %4 = tail call i32 @fgetc(ptr noundef %3) #33
  %5 = icmp eq i32 %4, 46
  br i1 %5, label %6, label %36

6:                                                ; preds = %0
  %7 = load ptr, ptr @in, align 8, !tbaa !63
  %8 = tail call i32 @fgetc(ptr noundef %7) #33
  %9 = icmp eq i32 %8, 115
  br i1 %9, label %10, label %36

10:                                               ; preds = %6
  %11 = load ptr, ptr @in, align 8, !tbaa !63
  %12 = tail call i32 @fgetc(ptr noundef %11) #33
  %13 = icmp eq i32 %12, 110
  br i1 %13, label %14, label %36

14:                                               ; preds = %10
  %15 = load ptr, ptr @in, align 8, !tbaa !63
  %16 = tail call i32 @fgetc(ptr noundef %15) #33
  %17 = icmp eq i32 %16, 100
  br i1 %17, label %18, label %36

18:                                               ; preds = %14
  %19 = load ptr, ptr @in, align 8, !tbaa !63
  %20 = call fastcc i32 @get_u32(ptr noundef %19, ptr noundef nonnull %1) #33, !range !90
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %18
  %23 = load ptr, ptr @in, align 8, !tbaa !63
  %24 = call fastcc i32 @get_u32(ptr noundef %23, ptr noundef nonnull %2) #33, !range !90
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %22
  %27 = load ptr, ptr @in, align 8, !tbaa !63
  %28 = call fastcc i32 @get_u32(ptr noundef %27, ptr noundef nonnull %2) #33, !range !90
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = load ptr, ptr @in, align 8, !tbaa !63
  %32 = load i64, ptr %1, align 8, !tbaa !40
  %33 = add i64 %32, -16
  %34 = tail call i32 @fseek(ptr noundef %31, i64 noundef %33, i32 noundef 1) #33
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %30, %26, %22, %18, %14, %10, %6, %0
  %37 = load ptr, ptr @stderr, align 8, !tbaa !63
  %38 = load ptr, ptr @progname, align 8, !tbaa !63
  %39 = load ptr, ptr @inname, align 8
  %40 = icmp eq ptr %39, null
  %41 = select i1 %40, ptr @.str.1.31, ptr %39
  %42 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %37, ptr noundef nonnull @.str.32, ptr noundef %38, ptr noundef nonnull %41, ptr noundef %38) #36
  br label %53

43:                                               ; preds = %30
  %44 = load i64, ptr %2, align 8, !tbaa !40
  switch i64 %44, label %48 [
    i64 1, label %45
    i64 2, label %46
    i64 3, label %47
  ]

45:                                               ; preds = %43
  store ptr @ulaw_input, ptr @input, align 8, !tbaa !63
  br label %53

46:                                               ; preds = %43
  store ptr @alaw_input, ptr @input, align 8, !tbaa !63
  br label %53

47:                                               ; preds = %43
  store ptr @linear_input, ptr @input, align 8, !tbaa !63
  br label %53

48:                                               ; preds = %43
  %49 = load ptr, ptr @stderr, align 8, !tbaa !63
  %50 = load ptr, ptr @progname, align 8, !tbaa !63
  %51 = load ptr, ptr @inname, align 8, !tbaa !63
  %52 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %49, ptr noundef nonnull @.str.2.33, ptr noundef %50, i64 noundef %44, ptr noundef %51) #36
  store ptr @ulaw_input, ptr @input, align 8, !tbaa !63
  br label %53

53:                                               ; preds = %48, %47, %46, %45, %36
  %54 = phi i32 [ -1, %36 ], [ 0, %48 ], [ 0, %47 ], [ 0, %46 ], [ 0, %45 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #31
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1) #31
  ret i32 %54
}

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @get_u32(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1) unnamed_addr #19 {
  %3 = tail call i32 @getc(ptr noundef %0) #33
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %25, label %5

5:                                                ; preds = %2
  %6 = tail call i32 @getc(ptr noundef %0) #33
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %25, label %8

8:                                                ; preds = %5
  %9 = tail call i32 @getc(ptr noundef %0) #33
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %25, label %11

11:                                               ; preds = %8
  %12 = tail call i32 @getc(ptr noundef %0) #33
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %25, label %14

14:                                               ; preds = %11
  %15 = shl i32 %3, 24
  %16 = shl i32 %6, 16
  %17 = and i32 %16, 16711680
  %18 = or i32 %17, %15
  %19 = shl i32 %9, 8
  %20 = and i32 %19, 65280
  %21 = or i32 %20, %18
  %22 = and i32 %12, 255
  %23 = or i32 %22, %21
  %24 = zext i32 %23 to i64
  store i64 %24, ptr %1, align 8, !tbaa !40
  br label %25

25:                                               ; preds = %14, %11, %8, %5, %2
  %26 = phi i32 [ 0, %14 ], [ -1, %11 ], [ -1, %8 ], [ -1, %5 ], [ -1, %2 ]
  ret i32 %26
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fseek(ptr nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @audio_init_output() #19 {
  %1 = load ptr, ptr @out, align 8, !tbaa !63
  %2 = tail call i32 @fputs(ptr noundef nonnull @.str.3.36, ptr noundef %1) #33
  %3 = icmp eq i32 %2, -1
  br i1 %3, label %33, label %4

4:                                                ; preds = %0
  %5 = load ptr, ptr @out, align 8, !tbaa !63
  %6 = tail call fastcc i32 @put_u32(ptr noundef %5, i64 noundef 32) #33, !range !90
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %33

8:                                                ; preds = %4
  %9 = load ptr, ptr @out, align 8, !tbaa !63
  %10 = tail call fastcc i32 @put_u32(ptr noundef %9, i64 noundef -1) #33, !range !90
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %33

12:                                               ; preds = %8
  %13 = load ptr, ptr @out, align 8, !tbaa !63
  %14 = tail call fastcc i32 @put_u32(ptr noundef %13, i64 noundef 1) #33, !range !90
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %33

16:                                               ; preds = %12
  %17 = load ptr, ptr @out, align 8, !tbaa !63
  %18 = tail call fastcc i32 @put_u32(ptr noundef %17, i64 noundef 8000) #33, !range !90
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %16
  %21 = load ptr, ptr @out, align 8, !tbaa !63
  %22 = tail call fastcc i32 @put_u32(ptr noundef %21, i64 noundef 1) #33, !range !90
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %33

24:                                               ; preds = %20
  %25 = load ptr, ptr @out, align 8, !tbaa !63
  %26 = tail call fastcc i32 @put_u32(ptr noundef %25, i64 noundef 0) #33, !range !90
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = load ptr, ptr @out, align 8, !tbaa !63
  %30 = tail call fastcc i32 @put_u32(ptr noundef %29, i64 noundef 0) #33, !range !90
  %31 = icmp ne i32 %30, 0
  %32 = sext i1 %31 to i32
  br label %33

33:                                               ; preds = %28, %24, %20, %16, %12, %8, %4, %0
  %34 = phi i32 [ -1, %24 ], [ -1, %20 ], [ -1, %16 ], [ -1, %12 ], [ -1, %8 ], [ -1, %4 ], [ -1, %0 ], [ %32, %28 ]
  ret i32 %34
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fputs(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize uwtable
define internal fastcc i32 @put_u32(ptr nocapture noundef %0, i64 noundef %1) unnamed_addr #19 {
  %3 = trunc i64 %1 to i32
  %4 = ashr i32 %3, 24
  %5 = tail call i32 @putc(i32 noundef %4, ptr noundef %0) #33
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %23, label %7

7:                                                ; preds = %2
  %8 = shl i32 %3, 8
  %9 = ashr i32 %8, 24
  %10 = tail call i32 @putc(i32 noundef %9, ptr noundef %0) #33
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %23, label %12

12:                                               ; preds = %7
  %13 = shl i32 %3, 16
  %14 = ashr i32 %13, 24
  %15 = tail call i32 @putc(i32 noundef %14, ptr noundef %0) #33
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = shl i32 %3, 24
  %19 = ashr exact i32 %18, 24
  %20 = tail call i32 @putc(i32 noundef %19, ptr noundef %0) #33
  %21 = icmp eq i32 %20, -1
  %22 = sext i1 %21 to i32
  br label %23

23:                                               ; preds = %17, %12, %7, %2
  %24 = phi i32 [ -1, %12 ], [ -1, %7 ], [ -1, %2 ], [ %22, %17 ]
  ret i32 %24
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @linear_input(ptr nocapture noundef %0) #19 {
  %2 = load ptr, ptr @in, align 8, !tbaa !63
  %3 = tail call i64 @fread(ptr noundef %0, i64 noundef 2, i64 noundef 160, ptr noundef %2) #33
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @linear_output(ptr nocapture noundef %0) #19 {
  %2 = load ptr, ptr @out, align 8, !tbaa !63
  %3 = tail call i64 @fwrite(ptr noundef %0, i64 noundef 2, i64 noundef 160, ptr noundef %2) #33
  %4 = icmp ne i64 %3, 160
  %5 = sext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @ulaw_input(ptr nocapture noundef writeonly %0) #19 {
  br label %2

2:                                                ; preds = %7, %1
  %3 = phi i64 [ 0, %1 ], [ %13, %7 ]
  %4 = load ptr, ptr @in, align 8, !tbaa !63
  %5 = tail call i32 @fgetc(ptr noundef %4) #33
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = and i32 %5, 255
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [256 x i16], ptr @u2s, i64 0, i64 %9
  %11 = load i16, ptr %10, align 2, !tbaa !12
  %12 = getelementptr inbounds i16, ptr %0, i64 %3
  store i16 %11, ptr %12, align 2, !tbaa !12
  %13 = add nuw nsw i64 %3, 1
  %14 = icmp eq i64 %13, 160
  br i1 %14, label %20, label %2, !llvm.loop !91

15:                                               ; preds = %2
  %.lcssa = phi i64 [ %3, %2 ]
  %16 = trunc i64 %.lcssa to i32
  %17 = load ptr, ptr @in, align 8, !tbaa !63
  %18 = tail call i32 @ferror(ptr noundef %17) #32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %15, %7
  %21 = phi i32 [ %16, %15 ], [ 160, %7 ]
  br label %22

22:                                               ; preds = %20, %15
  %23 = phi i32 [ %21, %20 ], [ -1, %15 ]
  ret i32 %23
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @ulaw_output(ptr nocapture noundef readonly %0) #19 {
  br label %2

2:                                                ; preds = %14, %1
  %3 = phi i32 [ 0, %1 ], [ %15, %14 ]
  %4 = phi ptr [ %0, %1 ], [ %16, %14 ]
  %5 = load i16, ptr %4, align 2, !tbaa !12
  %6 = lshr i16 %5, 3
  %7 = zext i16 %6 to i64
  %8 = getelementptr inbounds [8192 x i8], ptr @s2u, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !7
  %10 = sext i8 %9 to i32
  %11 = load ptr, ptr @out, align 8, !tbaa !63
  %12 = tail call i32 @fputc(i32 noundef %10, ptr noundef %11) #33
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = add nuw nsw i32 %3, 1
  %16 = getelementptr inbounds i16, ptr %4, i64 1
  %17 = icmp eq i32 %15, 160
  br i1 %17, label %18, label %2, !llvm.loop !92

18:                                               ; preds = %14, %2
  %19 = phi i32 [ -1, %2 ], [ 0, %14 ]
  ret i32 %19
}

attributes #0 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree norecurse nosync nounwind optsize memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #9 = { mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #13 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nofree optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nounwind optsize memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { nofree nounwind willreturn memory(argmem: read) }
attributes #30 = { nofree nounwind }
attributes #31 = { nounwind }
attributes #32 = { nounwind optsize }
attributes #33 = { optsize }
attributes #34 = { nounwind optsize willreturn memory(read) }
attributes #35 = { noreturn nounwind optsize }
attributes #36 = { cold optsize }
attributes #37 = { nounwind optsize willreturn memory(none) }
attributes #38 = { cold }
attributes #39 = { nounwind optsize allocsize(0) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!13, !13, i64 0}
!13 = !{!"short", !8, i64 0}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !11}
!17 = !{!18, !13, i64 650}
!18 = !{!"gsm_state", !8, i64 0, !13, i64 560, !19, i64 568, !20, i64 576, !8, i64 580, !8, i64 596, !13, i64 628, !13, i64 630, !8, i64 632, !13, i64 650, !8, i64 652, !8, i64 653}
!19 = !{!"long", !8, i64 0}
!20 = !{!"int", !8, i64 0}
!21 = distinct !{!21, !11}
!22 = !{!18, !13, i64 630}
!23 = distinct !{!23, !11, !24, !25}
!24 = !{!"llvm.loop.isvectorized", i32 1}
!25 = !{!"llvm.loop.unroll.runtime.disable"}
!26 = distinct !{!26, !11, !24, !25}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !11, !24, !25}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !11}
!31 = distinct !{!31, !11}
!32 = distinct !{!32, !11}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !11}
!35 = distinct !{!35, !11, !24, !25}
!36 = distinct !{!36, !11, !24, !25}
!37 = distinct !{!37, !11, !24, !25}
!38 = distinct !{!38, !11, !24, !25}
!39 = distinct !{!39, !11, !24, !25}
!40 = !{!19, !19, i64 0}
!41 = distinct !{!41, !11}
!42 = distinct !{!42, !11}
!43 = distinct !{!43, !11, !24, !25}
!44 = distinct !{!44, !11}
!45 = distinct !{!45, !11}
!46 = !{!18, !13, i64 560}
!47 = !{!18, !19, i64 568}
!48 = !{!18, !20, i64 576}
!49 = distinct !{!49, !11}
!50 = distinct !{!50, !11}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !11}
!53 = distinct !{!53, !11}
!54 = distinct !{!54, !11}
!55 = distinct !{!55, !11}
!56 = distinct !{!56, !11}
!57 = distinct !{!57, !11}
!58 = !{!18, !13, i64 628}
!59 = distinct !{!59, !11}
!60 = distinct !{!60, !11}
!61 = distinct !{!61, !11}
!62 = distinct !{!62, !11}
!63 = !{!64, !64, i64 0}
!64 = !{!"any pointer", !8, i64 0}
!65 = !{!20, !20, i64 0}
!66 = distinct !{!66, !11}
!67 = distinct !{!67, !11}
!68 = !{!69, !19, i64 16}
!69 = !{!"stat", !19, i64 0, !19, i64 8, !19, i64 16, !20, i64 24, !20, i64 28, !20, i64 32, !20, i64 36, !19, i64 40, !19, i64 48, !19, i64 56, !19, i64 64, !70, i64 72, !70, i64 88, !70, i64 104, !8, i64 120}
!70 = !{!"timespec", !19, i64 0, !19, i64 8}
!71 = !{!69, !20, i64 24}
!72 = !{!73, !64, i64 16}
!73 = !{!"fmtdesc", !64, i64 0, !64, i64 8, !64, i64 16, !64, i64 24, !64, i64 32, !64, i64 40, !64, i64 48}
!74 = distinct !{!74, !11}
!75 = !{!73, !64, i64 48}
!76 = !{!73, !64, i64 40}
!77 = !{!73, !64, i64 24}
!78 = !{!73, !64, i64 32}
!79 = !{ptr @codename, ptr @plainname}
!80 = distinct !{!80, !11}
!81 = !{ptr @process_decode, ptr @process_encode}
!82 = !{!69, !19, i64 72}
!83 = !{!69, !19, i64 88}
!84 = !{!69, !20, i64 28}
!85 = !{!69, !20, i64 32}
!86 = distinct !{!86, !11}
!87 = distinct !{!87, !11}
!88 = distinct !{!88, !11}
!89 = distinct !{!89, !11}
!90 = !{i32 -1, i32 1}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !11}

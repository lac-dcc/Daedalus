; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/MallocBench/gs/gs.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.alloc_state_s = type { %struct.alloc_chunk_s, ptr, i32, i32, ptr, ptr, i64, i64, i32, [32 x ptr], ptr, ptr, i32, ptr }
%struct.alloc_chunk_s = type { ptr, ptr, ptr, ptr, i32, ptr }
%struct.ref_s = type { %union.v, i16, i16 }
%union.v = type { i64 }
%struct.stream_procs = type { ptr, ptr, ptr, ptr, ptr, ptr }
%struct.op_def = type { ptr, ptr }
%struct.file_entry_s = type { ptr, i32, %struct.ref_s }
%struct.stream_s = type { ptr, ptr, ptr, i32, i8, i8, i64, %struct.stream_procs, i32, ptr, ptr, i16, i32 }
%struct.int_state_s = type { ptr, %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.ref_s }
%struct.gx_device_procs_s = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.gx_device_s = type { i32, ptr, ptr, i32, i32, float, float, i32, i16, i32, i32 }
%struct.dir_descr = type { i16, i16, i16, i16 }
%struct.gs_matrix_s = type { float, i64, float, i64, float, i64, float, i64, float, i64, float, i64 }
%struct.gx_ht_cache_s = type { ptr, i32, ptr, i32, i32, [25 x %struct.bit_tile_s] }
%struct.bit_tile_s = type { i32, %struct.gx_bitmap_s }
%struct.gx_bitmap_s = type { ptr, i32, i32, i32 }
%struct.gx_path_s = type { %struct.op_def, %struct.gs_fixed_rect_s, ptr, %struct.gs_fixed_rect_s, ptr, ptr, i32, i32, i32, %struct.timeval, i8, i8, i8 }
%struct.gs_fixed_rect_s = type { %struct.timeval, %struct.timeval }
%struct.timeval = type { i64, i64 }
%struct.gx_device_memory_s = type { i32, ptr, ptr, i32, i32, float, float, i32, i16, i32, i32, %struct.gs_matrix_s, i32, ptr, ptr, ptr, i32, i32, ptr }
%struct.timezone = type { i32, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, ptr }
%struct.alloc_block_s = type { ptr, i32, i32, ptr }
%struct.alloc_save_s = type { %struct.alloc_state_s, ptr }
%struct.alloc_change_s = type { ptr, ptr, i32 }
%struct.dict_s = type { %struct.ref_s, %struct.ref_s }
%struct.name_s.4 = type { ptr, i16, i16, ptr, ptr }
%struct.name_table = type { [256 x ptr], [512 x ptr], i32 }
%struct.dynamic_area_s = type { ptr, ptr, i32, i32, i32, ptr }
%struct.gs_color_s = type { i16, i16, i16, i16, i8, i8 }
%struct.vm_save_s = type { ptr, ptr, ptr }
%struct.gs_font_s = type { ptr, ptr, ptr, ptr, ptr, %struct.gs_matrix_s, i32, float, float, float, float, i32, i64, ptr, ptr }
%struct.font_data_s = type { %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.gs_type1_data_s }
%struct.gs_type1_data_s = type { ptr, ptr, ptr, i32 }
%struct.gs_point_s = type { float, float }
%struct.z1_data = type { ptr, ptr, [2 x i64] }
%struct.gs_state_s = type { ptr, %struct.op_def, %struct.gs_matrix_fixed_s, %struct.gs_matrix_s, i32, ptr, ptr, ptr, ptr, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.gs_matrix_s, i32, i8, i8, float, ptr, i32 }
%struct.gs_matrix_fixed_s = type { float, i64, float, i64, float, i64, float, i64, float, i64, float, i64, i64, i64 }
%struct.gs_rect_s = type { %struct.gs_point_s, %struct.gs_point_s }
%struct.gs_show_enum_s = type { ptr, ptr, i32, float, float, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gx_device_memory_s, %struct.device_s, i32, i32, %struct.timeval, ptr, %struct.gs_point_s, i32, i32, ptr }
%struct.device_s = type { ptr, i32, i64, i64 }
%struct.cached_char_s = type { ptr, i32, ptr, i16, i16, i16, %struct.timeval, %struct.timeval, ptr }
%struct.gx_device_color_s = type { i64, i64, i32, ptr }
%struct.gs_screen_enum_s = type { float, float, ptr, i32, i32, %struct.gs_matrix_s, i32, i32, ptr }
%struct.ht_bit_s = type { i16, i16 }
%struct.halftone_s = type { float, float, i32, i32, ptr, i32 }
%struct.gs_font_dir_s = type { ptr, ptr, i64, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [128 x ptr], ptr, i32, ptr, i32, ptr, i32 }
%struct.gs_image_enum_s = type { i32, i32, i32, i32, i32, i64, i64, i64, i64, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, [4 x ptr], i32, i32, i32, i64, i64, i32, [256 x %struct.gx_device_color_s] }
%struct.status = type { %struct.gs_matrix_s, ptr, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32 }
%struct.line_params_s = type { float, i32, i32, float, float, %struct.dash_params_s }
%struct.dash_params_s = type { ptr, i32, float, i32, i32, float }
%struct.segment_s = type { ptr, ptr, i32, %struct.timeval }
%struct.curve_segment = type { ptr, ptr, i32, %struct.timeval, %struct.timeval, %struct.timeval }
%struct.gs_type1_state_s = type { ptr, ptr, ptr, i32, i32, %struct.fixed_coeff, [24 x i64], i32, [11 x %struct.ip_state], i32, i32, %struct.timeval, %struct.timeval, i32 }
%struct.fixed_coeff = type { i64, i64, i64, i64, i32, i32, i64 }
%struct.ip_state = type { ptr, i16 }
%struct.cached_fm_pair_s = type { ptr, float, float, float, float, i32 }
%struct.line_list_s = type { ptr, i32, i16, ptr, ptr, ptr, %struct.active_line_s, i32 }
%struct.active_line_s = type { %struct.timeval, %struct.timeval, i64, i64, i64, ptr, i32, i16, i16, ptr, ptr }
%struct.subpath = type { ptr, ptr, i32, %struct.timeval, ptr, i32, i32, i8 }
%struct.partial_line_s = type { %struct.endpoint_s, %struct.endpoint_s, %struct.timeval, %struct.timeval, i32 }
%struct.endpoint_s = type { %struct.timeval, %struct.timeval, %struct.timeval, %struct.timeval }

@memory_chunk_size = internal global i32 20000, align 4
@.str = private unnamed_addr constant [10 x i8] c".:./fonts\00", align 1
@gs_lib_default_path = internal global ptr @.str, align 8
@gs_lib_env_path = internal global ptr null, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"GS_LIB\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"-I array\00", align 1
@gs_lib_count = internal global i32 0, align 4
@quiet = internal global i32 0, align 4
@user_errors = internal global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"GS.MAP\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"QUIET\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"Usage: -dname, -dname=token, -sname=string\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"-dname= must be followed by a valid token\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.9 = private unnamed_addr constant [64 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/gs.c\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"Out of memory!\0A\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"DEVICEWIDTH\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"DEVICEHEIGHT\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"-M must be between 1 and 64\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"{(\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c")run}execute\00", align 1
@init1_done = internal global i32 0, align 4
@init2_done = internal global i32 0, align 4
@.str.18 = private unnamed_addr constant [9 x i8] c"ghost.ps\00", align 1
@.str.19 = private unnamed_addr constant [40 x i8] c"Can't find file %s (from command line)\0A\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"Reading %s... \00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"%s read.\0A\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"\0AInterp returns %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"ostack\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"estack\00", align 1
@str = private unnamed_addr constant [39 x i8] c"-w and -h must be followed by a number\00", align 1
@proc_reloc = internal global i64 0, align 8
@.str.11 = private unnamed_addr constant [30 x i8] c"Unknown switch %s - ignoring\0A\00", align 1
@.str.2.13 = private unnamed_addr constant [48 x i8] c"Map file %s is apparently missing or malformed\0A\00", align 1
@.str.3.14 = private unnamed_addr constant [15 x i8] c"[T]main = %lx\0A\00", align 1
@.str.4.15 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.5.16 = private unnamed_addr constant [10 x i8] c"-T switch\00", align 1
@.str.6.17 = private unnamed_addr constant [14 x i8] c"%s not found\0A\00", align 1
@str.12 = private unnamed_addr constant [49 x i8] c"Not a debugging configuration, -Z switch ignored\00", align 1
@.str.25 = private unnamed_addr constant [34 x i8] c"Ghostscript: gettimeofday failed:\00", align 1
@.str.1.27 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.26 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@trace_flush_flag = internal global i32 0, align 4
@as_current = internal global %struct.alloc_state_s zeroinitializer, align 8
@.str.40 = private unnamed_addr constant [13 x i8] c"alloc_shrink\00", align 1
@.str.1.41 = private unnamed_addr constant [17 x i8] c"alloc_save_state\00", align 1
@.str.3.42 = private unnamed_addr constant [31 x i8] c"alloc_restore_state(malloc'ed)\00", align 1
@.str.4.43 = private unnamed_addr constant [20 x i8] c"alloc_restore_state\00", align 1
@.str.5.38 = private unnamed_addr constant [12 x i8] c"alloc chunk\00", align 1
@.str.6.39 = private unnamed_addr constant [13 x i8] c"large object\00", align 1
@.str.7.53 = private unnamed_addr constant [5 x i8] c"mark\00", align 1
@.str.9.55 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.15.46 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@debug_dump_refs.ts = internal unnamed_addr constant [16 x ptr] [ptr @.str.16.47, ptr @.str.17.48, ptr @.str.18.49, ptr @.str.19.50, ptr @.str.20.51, ptr @.str.21.52, ptr @.str.7.53, ptr @.str.22.54, ptr @.str.9.55, ptr @.str.23.56, ptr @.str.24.57, ptr @.str.25.58, ptr @.str.26, ptr @.str.27, ptr @.str.28, ptr @.str.29], align 16
@.str.16.47 = private unnamed_addr constant [5 x i8] c"arry\00", align 1
@.str.17.48 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@.str.18.49 = private unnamed_addr constant [5 x i8] c"dict\00", align 1
@.str.19.50 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.20.51 = private unnamed_addr constant [5 x i8] c"font\00", align 1
@.str.21.52 = private unnamed_addr constant [5 x i8] c"int \00", align 1
@.str.22.54 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.23.56 = private unnamed_addr constant [5 x i8] c"oper\00", align 1
@.str.24.57 = private unnamed_addr constant [5 x i8] c"pary\00", align 1
@.str.25.58 = private unnamed_addr constant [5 x i8] c"real\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"save\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"str \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"colr\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"devc\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"xe......wr?????s\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"0x%lx: 0x%02x \00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c" 0x%04x 0x%08lx\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"  =  %g\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"  =  %ld\00", align 1
@.str.59 = private unnamed_addr constant [12 x i8] c"dict_create\00", align 1
@.str.1.60 = private unnamed_addr constant [19 x i8] c"dict_create(pairs)\00", align 1
@.str.2.61 = private unnamed_addr constant [17 x i8] c"dict_resize(old)\00", align 1
@.str.3.62 = private unnamed_addr constant [17 x i8] c"dict_resize(new)\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.66 = private unnamed_addr constant [67 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/iinit.c\00", align 1
@.str.2.67 = private unnamed_addr constant [18 x i8] c"dict_put failed!\0A\00", align 1
@.str.3.70 = private unnamed_addr constant [5 x i8] c"mark\00", align 1
@.str.4.71 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.5.72 = private unnamed_addr constant [10 x i8] c"errordict\00", align 1
@.str.6.73 = private unnamed_addr constant [11 x i8] c"ErrorNames\00", align 1
@.str.78 = private unnamed_addr constant [10 x i8] c"name_init\00", align 1
@the_nt = internal global ptr null, align 8
@.str.1.82 = private unnamed_addr constant [17 x i8] c"name_ref(string)\00", align 1
@.str.2.85 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.3.86 = private unnamed_addr constant [67 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/iname.c\00", align 1
@.str.4.87 = private unnamed_addr constant [23 x i8] c"name_enter failed - %s\00", align 1
@.str.5.79 = private unnamed_addr constant [15 x i8] c"name_alloc_sub\00", align 1
@special_ops = internal global [7 x ptr] [ptr @zadd, ptr @zdup, ptr @zexch, ptr @zifelse, ptr @zle, ptr @zpop, ptr @zsub], align 16
@ostack = internal global [520 x %struct.ref_s] zeroinitializer, align 16
@name_errordict = internal global %struct.ref_s zeroinitializer, align 8
@name_ErrorNames = internal global %struct.ref_s zeroinitializer, align 8
@error_object = internal global %struct.ref_s zeroinitializer, align 8
@.str.104 = private unnamed_addr constant [8 x i8] c"scanner\00", align 1
@.str.1.107 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@left_bracket = internal global %struct.ref_s zeroinitializer, align 8
@.str.2.108 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@right_bracket = internal global %struct.ref_s zeroinitializer, align 8
@.str.3.109 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@empty_name = internal global %struct.ref_s zeroinitializer, align 8
@scan_init.stop_chars = internal unnamed_addr constant [11 x i8] c"()<>[]{}/%\00", align 1
@scan_init.space_chars = internal unnamed_addr constant [6 x i8] c" \0C\09\0A\0D\00", align 1
@.str.4.112 = private unnamed_addr constant [18 x i8] c"scanner(top proc)\00", align 1
@.str.5.113 = private unnamed_addr constant [14 x i8] c"scanner(proc)\00", align 1
@scan_number.powers_10 = internal unnamed_addr constant [7 x float] [float 1.000000e+00, float 1.000000e+01, float 1.000000e+02, float 1.000000e+03, float 1.000000e+04, float 1.000000e+05, float 1.000000e+06], align 16
@.str.6.114 = private unnamed_addr constant [16 x i8] c"scanner(string)\00", align 1
@sread_string.p = internal unnamed_addr constant %struct.stream_procs { ptr @ssread, ptr null, ptr @ssavailable, ptr @ssseek, ptr @snull, ptr @snull }, align 8
@sread_file.p = internal unnamed_addr constant %struct.stream_procs { ptr @sfread, ptr null, ptr @sfavailable, ptr @srseek, ptr @snull, ptr @srclose }, align 8
@swrite_file.p = internal unnamed_addr constant %struct.stream_procs { ptr null, ptr @sfwrite, ptr @snoavailable, ptr @swseek, ptr @swflush, ptr @swclose }, align 8
@sread_decrypt.p = internal unnamed_addr constant %struct.stream_procs { ptr @sxread, ptr null, ptr @sxavailable, ptr null, ptr @snull, ptr @snull }, align 8
@scan_char_array = internal global [257 x i8] zeroinitializer, align 16
@zarith_op_init.my_defs = internal global [12 x %struct.op_def] [%struct.op_def { ptr @.str.127, ptr @zadd }, %struct.op_def { ptr @.str.1.128, ptr @zceiling }, %struct.op_def { ptr @.str.2.129, ptr @zdiv }, %struct.op_def { ptr @.str.3.130, ptr @zidiv }, %struct.op_def { ptr @.str.4.131, ptr @zfloor }, %struct.op_def { ptr @.str.5.132, ptr @zmod }, %struct.op_def { ptr @.str.6.133, ptr @zmul }, %struct.op_def { ptr @.str.7.134, ptr @zneg }, %struct.op_def { ptr @.str.8.135, ptr @zround }, %struct.op_def { ptr @.str.9.136, ptr @zsub }, %struct.op_def { ptr @.str.10.137, ptr @ztruncate }, %struct.op_def zeroinitializer], align 16
@.str.127 = private unnamed_addr constant [5 x i8] c"2add\00", align 1
@.str.1.128 = private unnamed_addr constant [9 x i8] c"1ceiling\00", align 1
@.str.2.129 = private unnamed_addr constant [5 x i8] c"2div\00", align 1
@.str.3.130 = private unnamed_addr constant [6 x i8] c"2idiv\00", align 1
@.str.4.131 = private unnamed_addr constant [7 x i8] c"1floor\00", align 1
@.str.5.132 = private unnamed_addr constant [5 x i8] c"2mod\00", align 1
@.str.6.133 = private unnamed_addr constant [5 x i8] c"2mul\00", align 1
@.str.7.134 = private unnamed_addr constant [5 x i8] c"1neg\00", align 1
@.str.8.135 = private unnamed_addr constant [7 x i8] c"1round\00", align 1
@.str.9.136 = private unnamed_addr constant [5 x i8] c"2sub\00", align 1
@.str.10.137 = private unnamed_addr constant [10 x i8] c"1truncate\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@zarray_op_init.my_defs = internal global [4 x %struct.op_def] [%struct.op_def { ptr @.str.1.141, ptr @zaload }, %struct.op_def { ptr @.str.2.142, ptr @zarray }, %struct.op_def { ptr @.str.3.143, ptr @zastore }, %struct.op_def zeroinitializer], align 16
@.str.1.141 = private unnamed_addr constant [7 x i8] c"1aload\00", align 1
@.str.2.142 = private unnamed_addr constant [7 x i8] c"1array\00", align 1
@.str.3.143 = private unnamed_addr constant [8 x i8] c"1astore\00", align 1
@zcontrol_op_init.my_defs = internal global [13 x %struct.op_def] [%struct.op_def { ptr @.str.148, ptr @zcountexecstack }, %struct.op_def { ptr @.str.1.149, ptr @zexec }, %struct.op_def { ptr @.str.2.150, ptr @zexecstack }, %struct.op_def { ptr @.str.3.151, ptr @zexit }, %struct.op_def { ptr @.str.4.152, ptr @zif }, %struct.op_def { ptr @.str.5.153, ptr @zifelse }, %struct.op_def { ptr @.str.6.154, ptr @zfor }, %struct.op_def { ptr @.str.7.155, ptr @zloop }, %struct.op_def { ptr @.str.8.156, ptr @zquit }, %struct.op_def { ptr @.str.9.157, ptr @zrepeat }, %struct.op_def { ptr @.str.10.158, ptr @zstop }, %struct.op_def { ptr @.str.11.159, ptr @zstopped }, %struct.op_def zeroinitializer], align 16
@.str.148 = private unnamed_addr constant [16 x i8] c"0countexecstack\00", align 1
@.str.1.149 = private unnamed_addr constant [6 x i8] c"1exec\00", align 1
@.str.2.150 = private unnamed_addr constant [11 x i8] c"0execstack\00", align 1
@.str.3.151 = private unnamed_addr constant [6 x i8] c"0exit\00", align 1
@.str.4.152 = private unnamed_addr constant [4 x i8] c"2if\00", align 1
@.str.5.153 = private unnamed_addr constant [8 x i8] c"3ifelse\00", align 1
@.str.6.154 = private unnamed_addr constant [5 x i8] c"4for\00", align 1
@.str.7.155 = private unnamed_addr constant [6 x i8] c"1loop\00", align 1
@.str.8.156 = private unnamed_addr constant [6 x i8] c"0quit\00", align 1
@.str.9.157 = private unnamed_addr constant [8 x i8] c"2repeat\00", align 1
@.str.10.158 = private unnamed_addr constant [6 x i8] c"0stop\00", align 1
@.str.11.159 = private unnamed_addr constant [9 x i8] c"1stopped\00", align 1
@dict_max_size = internal global i32 32766, align 4
@dstop = internal global ptr null, align 8
@zdict_op_init.my_defs = internal global [14 x %struct.op_def] [%struct.op_def { ptr @.str.162, ptr @zbegin }, %struct.op_def { ptr @.str.1.163, ptr @zcountdictstack }, %struct.op_def { ptr @.str.2.164, ptr @zcurrentdict }, %struct.op_def { ptr @.str.3.165, ptr @zdef }, %struct.op_def { ptr @.str.4.166, ptr @zdict }, %struct.op_def { ptr @.str.5.167, ptr @zdictstack }, %struct.op_def { ptr @.str.6.168, ptr @zend }, %struct.op_def { ptr @.str.7.169, ptr @zknown }, %struct.op_def { ptr @.str.8.170, ptr @zload }, %struct.op_def { ptr @.str.9.171, ptr @zmaxlength }, %struct.op_def { ptr @.str.10.172, ptr @zsetmaxlength }, %struct.op_def { ptr @.str.11.173, ptr @zstore }, %struct.op_def { ptr @.str.12.174, ptr @zwhere }, %struct.op_def zeroinitializer], align 16
@.str.162 = private unnamed_addr constant [7 x i8] c"1begin\00", align 1
@.str.1.163 = private unnamed_addr constant [16 x i8] c"0countdictstack\00", align 1
@.str.2.164 = private unnamed_addr constant [13 x i8] c"0currentdict\00", align 1
@.str.3.165 = private unnamed_addr constant [5 x i8] c"2def\00", align 1
@.str.4.166 = private unnamed_addr constant [6 x i8] c"1dict\00", align 1
@.str.5.167 = private unnamed_addr constant [11 x i8] c"0dictstack\00", align 1
@.str.6.168 = private unnamed_addr constant [5 x i8] c"0end\00", align 1
@.str.7.169 = private unnamed_addr constant [7 x i8] c"2known\00", align 1
@.str.8.170 = private unnamed_addr constant [6 x i8] c"1load\00", align 1
@.str.9.171 = private unnamed_addr constant [11 x i8] c"1maxlength\00", align 1
@.str.10.172 = private unnamed_addr constant [14 x i8] c"2setmaxlength\00", align 1
@.str.11.173 = private unnamed_addr constant [7 x i8] c"2store\00", align 1
@.str.12.174 = private unnamed_addr constant [7 x i8] c"1where\00", align 1
@invalid_file_entry = internal global %struct.file_entry_s zeroinitializer, align 8
@std_file_streams = internal global [5 x %struct.stream_s] zeroinitializer, align 16
@std_files = internal global [5 x %struct.file_entry_s] [%struct.file_entry_s { ptr @std_file_streams, i32 0, %struct.ref_s zeroinitializer }, %struct.file_entry_s { ptr getelementptr (i8, ptr @std_file_streams, i64 120), i32 0, %struct.ref_s zeroinitializer }, %struct.file_entry_s { ptr getelementptr (i8, ptr @std_file_streams, i64 240), i32 0, %struct.ref_s zeroinitializer }, %struct.file_entry_s { ptr getelementptr (i8, ptr @std_file_streams, i64 360), i32 -1, %struct.ref_s zeroinitializer }, %struct.file_entry_s { ptr getelementptr (i8, ptr @std_file_streams, i64 480), i32 -1, %struct.ref_s zeroinitializer }], align 16
@.str.181 = private unnamed_addr constant [7 x i8] c"%stdin\00", align 1
@.str.1.182 = private unnamed_addr constant [8 x i8] c"%stdout\00", align 1
@.str.2.183 = private unnamed_addr constant [8 x i8] c"%stderr\00", align 1
@.str.3.184 = private unnamed_addr constant [10 x i8] c"%lineedit\00", align 1
@.str.4.185 = private unnamed_addr constant [15 x i8] c"%statementedit\00", align 1
@std_file_names = internal global [5 x ptr] [ptr @.str.181, ptr @.str.1.182, ptr @.str.2.183, ptr @.str.3.184, ptr @.str.4.185], align 16
@std_file_attrs = internal global [5 x i32] [i32 514, i32 258, i32 258, i32 514, i32 514], align 16
@stdin = external local_unnamed_addr global ptr, align 8
@stdin_buf = internal global [1 x i8] zeroinitializer, align 1
@stdout = external local_unnamed_addr global ptr, align 8
@stdout_buf = internal global [128 x i8] zeroinitializer, align 16
@stderr_buf = internal global [128 x i8] zeroinitializer, align 16
@.str.5.177 = private unnamed_addr constant [11 x i8] c"zfile_init\00", align 1
@.str.6.178 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.7.179 = private unnamed_addr constant [67 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/zfile.c\00", align 1
@.str.8.180 = private unnamed_addr constant [29 x i8] c"alloc failed in zfile_init!\0A\00", align 1
@.str.9.187 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.10.186 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.11.190 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.12.193 = private unnamed_addr constant [11 x i8] c"deletefile\00", align 1
@.str.13.194 = private unnamed_addr constant [17 x i8] c"renamefile(from)\00", align 1
@.str.14.195 = private unnamed_addr constant [15 x i8] c"renamefile(to)\00", align 1
@zfile_op_init.my_defs = internal global [28 x %struct.op_def] [%struct.op_def { ptr @.str.15.200, ptr @zbytesavailable }, %struct.op_def { ptr @.str.16.201, ptr @zclosefile }, %struct.op_def { ptr @.str.17.202, ptr @zcurrentfile }, %struct.op_def { ptr @.str.18.203, ptr @zdeletefile }, %struct.op_def { ptr @.str.19.204, ptr @zecho }, %struct.op_def { ptr @.str.20.205, ptr @zfile }, %struct.op_def { ptr @.str.21.206, ptr @zfilename }, %struct.op_def { ptr @.str.22.207, ptr @zfileposition }, %struct.op_def { ptr @.str.23.208, ptr @zfindlibfile }, %struct.op_def { ptr @.str.24.209, ptr @zflush }, %struct.op_def { ptr @.str.25.210, ptr @zflushfile }, %struct.op_def { ptr @.str.26.211, ptr @zprint }, %struct.op_def { ptr @.str.27.212, ptr @zread }, %struct.op_def { ptr @.str.28.213, ptr @zreadhexstring }, %struct.op_def { ptr @.str.29.214, ptr @zreadline }, %struct.op_def { ptr @.str.30.215, ptr @zreadstring }, %struct.op_def { ptr @.str.31.216, ptr @zrenamefile }, %struct.op_def { ptr @.str.32, ptr @zresetfile }, %struct.op_def { ptr @.str.33.217, ptr @zrun }, %struct.op_def { ptr @.str.34.218, ptr @zsetfileposition }, %struct.op_def { ptr @.str.35.219, ptr @ztype1decryptfile }, %struct.op_def { ptr @.str.36.220, ptr @zunread }, %struct.op_def { ptr @.str.37, ptr @zstatus }, %struct.op_def { ptr @.str.38, ptr @zwrite }, %struct.op_def { ptr @.str.39, ptr @zwritehexstring }, %struct.op_def { ptr @.str.40.221, ptr @zwriteppmfile }, %struct.op_def { ptr @.str.41, ptr @zwritestring }, %struct.op_def zeroinitializer], align 16
@.str.15.200 = private unnamed_addr constant [16 x i8] c"1bytesavailable\00", align 1
@.str.16.201 = private unnamed_addr constant [11 x i8] c"1closefile\00", align 1
@.str.17.202 = private unnamed_addr constant [13 x i8] c"0currentfile\00", align 1
@.str.18.203 = private unnamed_addr constant [12 x i8] c"1deletefile\00", align 1
@.str.19.204 = private unnamed_addr constant [6 x i8] c"1echo\00", align 1
@.str.20.205 = private unnamed_addr constant [6 x i8] c"2file\00", align 1
@.str.21.206 = private unnamed_addr constant [10 x i8] c"1filename\00", align 1
@.str.22.207 = private unnamed_addr constant [14 x i8] c"1fileposition\00", align 1
@.str.23.208 = private unnamed_addr constant [13 x i8] c"1findlibfile\00", align 1
@.str.24.209 = private unnamed_addr constant [7 x i8] c"0flush\00", align 1
@.str.25.210 = private unnamed_addr constant [11 x i8] c"1flushfile\00", align 1
@.str.26.211 = private unnamed_addr constant [7 x i8] c"1print\00", align 1
@.str.27.212 = private unnamed_addr constant [6 x i8] c"1read\00", align 1
@.str.28.213 = private unnamed_addr constant [15 x i8] c"2readhexstring\00", align 1
@.str.29.214 = private unnamed_addr constant [10 x i8] c"2readline\00", align 1
@.str.30.215 = private unnamed_addr constant [12 x i8] c"2readstring\00", align 1
@.str.31.216 = private unnamed_addr constant [12 x i8] c"2renamefile\00", align 1
@.str.32 = private unnamed_addr constant [11 x i8] c"1resetfile\00", align 1
@.str.33.217 = private unnamed_addr constant [5 x i8] c"1run\00", align 1
@.str.34.218 = private unnamed_addr constant [17 x i8] c"2setfileposition\00", align 1
@.str.35.219 = private unnamed_addr constant [18 x i8] c"2type1decryptfile\00", align 1
@.str.36.220 = private unnamed_addr constant [8 x i8] c"2unread\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c"1status\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"2write\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"2writehexstring\00", align 1
@.str.40.221 = private unnamed_addr constant [14 x i8] c"2writeppmfile\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"2writestring\00", align 1
@gs_lib_paths = internal global ptr null, align 8
@gp_file_name_list_separator = internal global i8 58, align 1
@.str.42 = private unnamed_addr constant [22 x i8] c"file_open(file_entry)\00", align 1
@.str.43 = private unnamed_addr constant [18 x i8] c"file_open(buffer)\00", align 1
@.str.44 = private unnamed_addr constant [18 x i8] c"file_open(stream)\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"file_open(file_name)\00", align 1
@.str.46 = private unnamed_addr constant [19 x i8] c"file_close(stream)\00", align 1
@.str.47 = private unnamed_addr constant [19 x i8] c"file_close(buffer)\00", align 1
@lineedit_buf = internal global [160 x i8] zeroinitializer, align 16
@zgeneric_op_init.my_defs = internal global [8 x %struct.op_def] [%struct.op_def { ptr @.str.226, ptr @zcopy }, %struct.op_def { ptr @.str.1.227, ptr @zforall }, %struct.op_def { ptr @.str.2.228, ptr @zget }, %struct.op_def { ptr @.str.3.229, ptr @zgetinterval }, %struct.op_def { ptr @.str.4.230, ptr @zlength }, %struct.op_def { ptr @.str.5.231, ptr @zput }, %struct.op_def { ptr @.str.6.232, ptr @zputinterval }, %struct.op_def zeroinitializer], align 16
@.str.226 = private unnamed_addr constant [6 x i8] c"1copy\00", align 1
@.str.1.227 = private unnamed_addr constant [8 x i8] c"2forall\00", align 1
@.str.2.228 = private unnamed_addr constant [5 x i8] c"2get\00", align 1
@.str.3.229 = private unnamed_addr constant [13 x i8] c"3getinterval\00", align 1
@.str.4.230 = private unnamed_addr constant [8 x i8] c"1length\00", align 1
@.str.5.231 = private unnamed_addr constant [5 x i8] c"3put\00", align 1
@.str.6.232 = private unnamed_addr constant [13 x i8] c"3putinterval\00", align 1
@degrees_to_radians = internal global double 0x3F91DF46A2529D39, align 8
@radians_to_degrees = internal global double 0x404CA5DC1A63C1F8, align 8
@rand_state = internal global i64 0, align 8
@zmath_op_init.my_defs = internal global [13 x %struct.op_def] [%struct.op_def { ptr @.str.237, ptr @zarccos }, %struct.op_def { ptr @.str.1.238, ptr @zarcsin }, %struct.op_def { ptr @.str.2.239, ptr @zatan }, %struct.op_def { ptr @.str.3.240, ptr @zcos }, %struct.op_def { ptr @.str.4.241, ptr @zexp }, %struct.op_def { ptr @.str.5.242, ptr @zln }, %struct.op_def { ptr @.str.6.243, ptr @zlog }, %struct.op_def { ptr @.str.7.244, ptr @zrand }, %struct.op_def { ptr @.str.8.245, ptr @zrrand }, %struct.op_def { ptr @.str.9.246, ptr @zsin }, %struct.op_def { ptr @.str.10.247, ptr @zsqrt }, %struct.op_def { ptr @.str.11.248, ptr @zsrand }, %struct.op_def zeroinitializer], align 16
@.str.237 = private unnamed_addr constant [8 x i8] c"1arccos\00", align 1
@.str.1.238 = private unnamed_addr constant [8 x i8] c"1arcsin\00", align 1
@.str.2.239 = private unnamed_addr constant [6 x i8] c"2atan\00", align 1
@.str.3.240 = private unnamed_addr constant [5 x i8] c"1cos\00", align 1
@.str.4.241 = private unnamed_addr constant [5 x i8] c"2exp\00", align 1
@.str.5.242 = private unnamed_addr constant [4 x i8] c"1ln\00", align 1
@.str.6.243 = private unnamed_addr constant [5 x i8] c"1log\00", align 1
@.str.7.244 = private unnamed_addr constant [6 x i8] c"0rand\00", align 1
@.str.8.245 = private unnamed_addr constant [7 x i8] c"0rrand\00", align 1
@.str.9.246 = private unnamed_addr constant [5 x i8] c"1sin\00", align 1
@.str.10.247 = private unnamed_addr constant [6 x i8] c"1sqrt\00", align 1
@.str.11.248 = private unnamed_addr constant [7 x i8] c"1srand\00", align 1
@.str.249 = private unnamed_addr constant [12 x i8] c"getenv name\00", align 1
@.str.1.250 = private unnamed_addr constant [13 x i8] c"getenv value\00", align 1
@zmisc_op_init.my_defs = internal global [8 x %struct.op_def] [%struct.op_def { ptr @.str.2.253, ptr @zbind }, %struct.op_def { ptr @.str.3.254, ptr @zcurrenttime }, %struct.op_def { ptr @.str.4.255, ptr @zgetenv }, %struct.op_def { ptr @.str.5.256, ptr @zsetdebug }, %struct.op_def { ptr @.str.6.257, ptr @ztype1encrypt }, %struct.op_def { ptr @.str.7.258, ptr @ztype1decrypt }, %struct.op_def { ptr @.str.8.259, ptr @zusertime }, %struct.op_def zeroinitializer], align 16
@.str.2.253 = private unnamed_addr constant [6 x i8] c"1bind\00", align 1
@.str.3.254 = private unnamed_addr constant [13 x i8] c"0currenttime\00", align 1
@.str.4.255 = private unnamed_addr constant [8 x i8] c"1getenv\00", align 1
@.str.5.256 = private unnamed_addr constant [10 x i8] c"2setdebug\00", align 1
@.str.6.257 = private unnamed_addr constant [14 x i8] c"3type1encrypt\00", align 1
@.str.7.258 = private unnamed_addr constant [14 x i8] c"3type1decrypt\00", align 1
@.str.8.259 = private unnamed_addr constant [10 x i8] c"0usertime\00", align 1
@array_packing = internal global i32 0, align 4
@.str.260 = private unnamed_addr constant [12 x i8] c"packedarray\00", align 1
@zpacked_op_init.my_defs = internal global [4 x %struct.op_def] [%struct.op_def { ptr @.str.1.263, ptr @zcurrentpacking }, %struct.op_def { ptr @.str.2.264, ptr @zpackedarray }, %struct.op_def { ptr @.str.3.265, ptr @zsetpacking }, %struct.op_def zeroinitializer], align 16
@.str.1.263 = private unnamed_addr constant [16 x i8] c"0currentpacking\00", align 1
@.str.2.264 = private unnamed_addr constant [13 x i8] c"1packedarray\00", align 1
@.str.3.265 = private unnamed_addr constant [12 x i8] c"1setpacking\00", align 1
@zrelbit_op_init.my_defs = internal global [14 x %struct.op_def] [%struct.op_def { ptr @.str.272, ptr @zand }, %struct.op_def { ptr @.str.1.273, ptr @zbitshift }, %struct.op_def { ptr @.str.2.274, ptr @zeq }, %struct.op_def { ptr @.str.3.275, ptr @zge }, %struct.op_def { ptr @.str.4.276, ptr @zgt }, %struct.op_def { ptr @.str.5.277, ptr @zle }, %struct.op_def { ptr @.str.6.278, ptr @zlt }, %struct.op_def { ptr @.str.7.279, ptr @zmax }, %struct.op_def { ptr @.str.8.280, ptr @zmin }, %struct.op_def { ptr @.str.9.281, ptr @zne }, %struct.op_def { ptr @.str.10.282, ptr @znot }, %struct.op_def { ptr @.str.11.283, ptr @zor }, %struct.op_def { ptr @.str.12.284, ptr @zxor }, %struct.op_def zeroinitializer], align 16
@.str.272 = private unnamed_addr constant [5 x i8] c"2and\00", align 1
@.str.1.273 = private unnamed_addr constant [10 x i8] c"2bitshift\00", align 1
@.str.2.274 = private unnamed_addr constant [4 x i8] c"2eq\00", align 1
@.str.3.275 = private unnamed_addr constant [4 x i8] c"2ge\00", align 1
@.str.4.276 = private unnamed_addr constant [4 x i8] c"2gt\00", align 1
@.str.5.277 = private unnamed_addr constant [4 x i8] c"2le\00", align 1
@.str.6.278 = private unnamed_addr constant [4 x i8] c"2lt\00", align 1
@.str.7.279 = private unnamed_addr constant [5 x i8] c"2max\00", align 1
@.str.8.280 = private unnamed_addr constant [5 x i8] c"2min\00", align 1
@.str.9.281 = private unnamed_addr constant [4 x i8] c"2ne\00", align 1
@.str.10.282 = private unnamed_addr constant [5 x i8] c"1not\00", align 1
@.str.11.283 = private unnamed_addr constant [4 x i8] c"2or\00", align 1
@.str.12.284 = private unnamed_addr constant [5 x i8] c"2xor\00", align 1
@zstack_op_init.my_defs = internal global [10 x %struct.op_def] [%struct.op_def { ptr @.str.293, ptr @zclear_stack }, %struct.op_def { ptr @.str.1.294, ptr @zcleartomark }, %struct.op_def { ptr @.str.2.295, ptr @zcount }, %struct.op_def { ptr @.str.3.296, ptr @zcounttomark }, %struct.op_def { ptr @.str.4.297, ptr @zdup }, %struct.op_def { ptr @.str.5.298, ptr @zexch }, %struct.op_def { ptr @.str.6.299, ptr @zindex }, %struct.op_def { ptr @.str.7.300, ptr @zpop }, %struct.op_def { ptr @.str.8.301, ptr @zroll }, %struct.op_def zeroinitializer], align 16
@.str.293 = private unnamed_addr constant [7 x i8] c"0clear\00", align 1
@.str.1.294 = private unnamed_addr constant [13 x i8] c"0cleartomark\00", align 1
@.str.2.295 = private unnamed_addr constant [7 x i8] c"0count\00", align 1
@.str.3.296 = private unnamed_addr constant [13 x i8] c"0counttomark\00", align 1
@.str.4.297 = private unnamed_addr constant [5 x i8] c"1dup\00", align 1
@.str.5.298 = private unnamed_addr constant [6 x i8] c"2exch\00", align 1
@.str.6.299 = private unnamed_addr constant [7 x i8] c"2index\00", align 1
@.str.7.300 = private unnamed_addr constant [5 x i8] c"1pop\00", align 1
@.str.8.301 = private unnamed_addr constant [6 x i8] c"2roll\00", align 1
@.str.302 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@zstring_op_init.my_defs = internal global [5 x %struct.op_def] [%struct.op_def { ptr @.str.1.305, ptr @zanchorsearch }, %struct.op_def { ptr @.str.2.306, ptr @zsearch }, %struct.op_def { ptr @.str.3.307, ptr @zstring }, %struct.op_def { ptr @.str.4.308, ptr @ztoken }, %struct.op_def zeroinitializer], align 16
@.str.1.305 = private unnamed_addr constant [14 x i8] c"2anchorsearch\00", align 1
@.str.2.306 = private unnamed_addr constant [8 x i8] c"2search\00", align 1
@.str.3.307 = private unnamed_addr constant [8 x i8] c"1string\00", align 1
@.str.4.308 = private unnamed_addr constant [7 x i8] c"1token\00", align 1
@.str.312 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.1.311 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.2.313 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.3.314 = private unnamed_addr constant [13 x i8] c"operator %lx\00", align 1
@.str.4.315 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.str.5.316 = private unnamed_addr constant [16 x i8] c"--nostringval--\00", align 1
@ztype_op_init.my_defs = internal global [15 x %struct.op_def] [%struct.op_def { ptr @.str.6.319, ptr @zcvi }, %struct.op_def { ptr @.str.7.320, ptr @zcvlit }, %struct.op_def { ptr @.str.8.321, ptr @zcvn }, %struct.op_def { ptr @.str.9.322, ptr @zcvr }, %struct.op_def { ptr @.str.10.323, ptr @zcvrs }, %struct.op_def { ptr @.str.11.324, ptr @zcvs }, %struct.op_def { ptr @.str.12.325, ptr @zcvx }, %struct.op_def { ptr @.str.13.326, ptr @zexecuteonly }, %struct.op_def { ptr @.str.14.327, ptr @znoaccess }, %struct.op_def { ptr @.str.15.328, ptr @zrcheck }, %struct.op_def { ptr @.str.16.329, ptr @zreadonly }, %struct.op_def { ptr @.str.17.330, ptr @ztypenumber }, %struct.op_def { ptr @.str.18.331, ptr @zwcheck }, %struct.op_def { ptr @.str.19.332, ptr @zxcheck }, %struct.op_def zeroinitializer], align 16
@.str.6.319 = private unnamed_addr constant [5 x i8] c"1cvi\00", align 1
@.str.7.320 = private unnamed_addr constant [7 x i8] c"1cvlit\00", align 1
@.str.8.321 = private unnamed_addr constant [5 x i8] c"1cvn\00", align 1
@.str.9.322 = private unnamed_addr constant [5 x i8] c"1cvr\00", align 1
@.str.10.323 = private unnamed_addr constant [6 x i8] c"3cvrs\00", align 1
@.str.11.324 = private unnamed_addr constant [5 x i8] c"2cvs\00", align 1
@.str.12.325 = private unnamed_addr constant [5 x i8] c"1cvx\00", align 1
@.str.13.326 = private unnamed_addr constant [13 x i8] c"1executeonly\00", align 1
@.str.14.327 = private unnamed_addr constant [10 x i8] c"1noaccess\00", align 1
@.str.15.328 = private unnamed_addr constant [8 x i8] c"1rcheck\00", align 1
@.str.16.329 = private unnamed_addr constant [10 x i8] c"1readonly\00", align 1
@.str.17.330 = private unnamed_addr constant [13 x i8] c"1.typenumber\00", align 1
@.str.18.331 = private unnamed_addr constant [8 x i8] c"1wcheck\00", align 1
@.str.19.332 = private unnamed_addr constant [8 x i8] c"1xcheck\00", align 1
@.str.333 = private unnamed_addr constant [6 x i8] c"zsave\00", align 1
@osbot = internal global ptr null, align 8
@dsp = internal global ptr null, align 8
@.str.1.334 = private unnamed_addr constant [9 x i8] c"zrestore\00", align 1
@zvmem_op_init.my_defs = internal global [4 x %struct.op_def] [%struct.op_def { ptr @.str.2.337, ptr @zrestore }, %struct.op_def { ptr @.str.3.338, ptr @zsave }, %struct.op_def { ptr @.str.4.339, ptr @zvmstatus }, %struct.op_def zeroinitializer], align 16
@.str.2.337 = private unnamed_addr constant [9 x i8] c"1restore\00", align 1
@.str.3.338 = private unnamed_addr constant [6 x i8] c"0save\00", align 1
@.str.4.339 = private unnamed_addr constant [10 x i8] c"0vmstatus\00", align 1
@.str.342 = private unnamed_addr constant [13 x i8] c"type1addpath\00", align 1
@zchar_op_init.my_defs = internal global [12 x %struct.op_def] [%struct.op_def { ptr @.str.1.345, ptr @zashow }, %struct.op_def { ptr @.str.2.346, ptr @zawidthshow }, %struct.op_def { ptr @.str.3.347, ptr @zcharpath }, %struct.op_def { ptr @.str.4.348, ptr @zkshow }, %struct.op_def { ptr @.str.5.349, ptr @zsetcachedevice }, %struct.op_def { ptr @.str.6.350, ptr @zsetcharwidth }, %struct.op_def { ptr @.str.7.351, ptr @zshow }, %struct.op_def { ptr @.str.8.352, ptr @zstringwidth }, %struct.op_def { ptr @.str.9.353, ptr @ztype1addpath }, %struct.op_def { ptr @.str.10.354, ptr @ztype1imagepath }, %struct.op_def { ptr @.str.11.355, ptr @zwidthshow }, %struct.op_def zeroinitializer], align 16
@.str.1.345 = private unnamed_addr constant [7 x i8] c"3ashow\00", align 1
@.str.2.346 = private unnamed_addr constant [12 x i8] c"6awidthshow\00", align 1
@.str.3.347 = private unnamed_addr constant [10 x i8] c"2charpath\00", align 1
@.str.4.348 = private unnamed_addr constant [7 x i8] c"2kshow\00", align 1
@.str.5.349 = private unnamed_addr constant [16 x i8] c"3setcachedevice\00", align 1
@.str.6.350 = private unnamed_addr constant [14 x i8] c"2setcharwidth\00", align 1
@.str.7.351 = private unnamed_addr constant [6 x i8] c"1show\00", align 1
@.str.8.352 = private unnamed_addr constant [13 x i8] c"1stringwidth\00", align 1
@.str.9.353 = private unnamed_addr constant [14 x i8] c"1type1addpath\00", align 1
@.str.10.354 = private unnamed_addr constant [16 x i8] c"8type1imagepath\00", align 1
@.str.11.355 = private unnamed_addr constant [11 x i8] c"4widthshow\00", align 1
@.str.12.341 = private unnamed_addr constant [11 x i8] c"setup_show\00", align 1
@estack = internal global [150 x %struct.ref_s] zeroinitializer, align 16
@.str.13.340 = private unnamed_addr constant [10 x i8] c"free_show\00", align 1
@zcolor_op_init.my_defs = internal global [3 x %struct.op_def] [%struct.op_def { ptr @.str.359, ptr @zcurrentgscolor }, %struct.op_def { ptr @.str.1.360, ptr @zsetgscolor }, %struct.op_def zeroinitializer], align 16
@.str.359 = private unnamed_addr constant [16 x i8] c"0currentgscolor\00", align 1
@.str.1.360 = private unnamed_addr constant [12 x i8] c"1setgscolor\00", align 1
@.str.2.356 = private unnamed_addr constant [11 x i8] c"make_color\00", align 1
@ifont_dir = internal global ptr null, align 8
@.str.363 = private unnamed_addr constant [14 x i8] c"FontDirectory\00", align 1
@name_FontDirectory = internal global %struct.ref_s zeroinitializer, align 8
@.str.1.364 = private unnamed_addr constant [11 x i8] c"FontMatrix\00", align 1
@name_FontMatrix = internal global %struct.ref_s zeroinitializer, align 8
@.str.2.365 = private unnamed_addr constant [9 x i8] c"FontType\00", align 1
@name_FontType = internal global %struct.ref_s zeroinitializer, align 8
@.str.3.366 = private unnamed_addr constant [9 x i8] c"FontBBox\00", align 1
@name_FontBBox = internal global %struct.ref_s zeroinitializer, align 8
@.str.4.367 = private unnamed_addr constant [9 x i8] c"Encoding\00", align 1
@name_Encoding = internal global %struct.ref_s zeroinitializer, align 8
@.str.5.368 = private unnamed_addr constant [10 x i8] c"PaintType\00", align 1
@name_PaintType = internal global %struct.ref_s zeroinitializer, align 8
@.str.6.369 = private unnamed_addr constant [9 x i8] c"UniqueID\00", align 1
@name_UniqueID = internal global %struct.ref_s zeroinitializer, align 8
@.str.7.370 = private unnamed_addr constant [10 x i8] c"BuildChar\00", align 1
@name_BuildChar = internal global %struct.ref_s zeroinitializer, align 8
@.str.8.371 = private unnamed_addr constant [15 x i8] c"Type1BuildChar\00", align 1
@name_Type1BuildChar = internal global %struct.ref_s zeroinitializer, align 8
@.str.9.372 = private unnamed_addr constant [8 x i8] c"Private\00", align 1
@name_Private = internal global %struct.ref_s zeroinitializer, align 8
@.str.10.373 = private unnamed_addr constant [12 x i8] c"CharStrings\00", align 1
@name_CharStrings = internal global %struct.ref_s zeroinitializer, align 8
@.str.11.374 = private unnamed_addr constant [4 x i8] c"FID\00", align 1
@name_FID = internal global %struct.ref_s zeroinitializer, align 8
@.str.12.375 = private unnamed_addr constant [6 x i8] c"Subrs\00", align 1
@name_Subrs = internal global %struct.ref_s zeroinitializer, align 8
@.str.13.376 = private unnamed_addr constant [6 x i8] c"lenIV\00", align 1
@name_lenIV = internal global %struct.ref_s zeroinitializer, align 8
@zdefinefont.no_subrs = internal global %struct.ref_s zeroinitializer, align 8
@zdefinefont.no_charstrings = internal global %struct.ref_s zeroinitializer, align 8
@dstack = internal global [20 x %struct.ref_s] zeroinitializer, align 16
@.str.14.377 = private unnamed_addr constant [17 x i8] c"definefont(font)\00", align 1
@.str.15.378 = private unnamed_addr constant [17 x i8] c"definefont(data)\00", align 1
@zfont_op_init.my_defs = internal global [10 x %struct.op_def] [%struct.op_def { ptr @.str.16.381, ptr @zcurrentfont }, %struct.op_def { ptr @.str.17.382, ptr @zdefinefont }, %struct.op_def { ptr @.str.18.383, ptr @zmakefont }, %struct.op_def { ptr @.str.19.384, ptr @zscalefont }, %struct.op_def { ptr @.str.20.385, ptr @zsetfont }, %struct.op_def { ptr @.str.21.386, ptr @zcachestatus }, %struct.op_def { ptr @.str.22.387, ptr @zsetcachelimit }, %struct.op_def { ptr @.str.23.388, ptr @zsetcacheparams }, %struct.op_def { ptr @.str.24.389, ptr @zcurrentcacheparams }, %struct.op_def zeroinitializer], align 16
@.str.16.381 = private unnamed_addr constant [13 x i8] c"0currentfont\00", align 1
@.str.17.382 = private unnamed_addr constant [12 x i8] c"2definefont\00", align 1
@.str.18.383 = private unnamed_addr constant [10 x i8] c"2makefont\00", align 1
@.str.19.384 = private unnamed_addr constant [11 x i8] c"2scalefont\00", align 1
@.str.20.385 = private unnamed_addr constant [9 x i8] c"1setfont\00", align 1
@.str.21.386 = private unnamed_addr constant [13 x i8] c"0cachestatus\00", align 1
@.str.22.387 = private unnamed_addr constant [15 x i8] c"1setcachelimit\00", align 1
@.str.23.388 = private unnamed_addr constant [16 x i8] c"1setcacheparams\00", align 1
@.str.24.389 = private unnamed_addr constant [20 x i8] c"0currentcacheparams\00", align 1
@.str.390 = private unnamed_addr constant [11 x i8] c"devicename\00", align 1
@zdevice_op_init.my_defs = internal global [12 x %struct.op_def] [%struct.op_def { ptr @.str.1.395, ptr @zcopypage }, %struct.op_def { ptr @.str.2.396, ptr @zcopyscanlines }, %struct.op_def { ptr @.str.3.397, ptr @zcurrentdevice }, %struct.op_def { ptr @.str.4.398, ptr @zdevicename }, %struct.op_def { ptr @.str.5.399, ptr @zdeviceparams }, %struct.op_def { ptr @.str.6.400, ptr @zflushpage }, %struct.op_def { ptr @.str.7.401, ptr @zgetdevice }, %struct.op_def { ptr @.str.8.402, ptr @zmakedevice }, %struct.op_def { ptr @.str.9.403, ptr @zmakeimagedevice }, %struct.op_def { ptr @.str.10.404, ptr @znulldevice }, %struct.op_def { ptr @.str.11.405, ptr @zsetdevice }, %struct.op_def zeroinitializer], align 16
@.str.1.395 = private unnamed_addr constant [10 x i8] c"0copypage\00", align 1
@.str.2.396 = private unnamed_addr constant [15 x i8] c"3copyscanlines\00", align 1
@.str.3.397 = private unnamed_addr constant [15 x i8] c"0currentdevice\00", align 1
@.str.4.398 = private unnamed_addr constant [12 x i8] c"1devicename\00", align 1
@.str.5.399 = private unnamed_addr constant [14 x i8] c"1deviceparams\00", align 1
@.str.6.400 = private unnamed_addr constant [11 x i8] c"0flushpage\00", align 1
@.str.7.401 = private unnamed_addr constant [11 x i8] c"1getdevice\00", align 1
@.str.8.402 = private unnamed_addr constant [12 x i8] c"4makedevice\00", align 1
@.str.9.403 = private unnamed_addr constant [17 x i8] c"4makeimagedevice\00", align 1
@.str.10.404 = private unnamed_addr constant [13 x i8] c"0.nulldevice\00", align 1
@.str.11.405 = private unnamed_addr constant [12 x i8] c"1.setdevice\00", align 1
@.str.414 = private unnamed_addr constant [6 x i8] c"gsave\00", align 1
@.str.1.417 = private unnamed_addr constant [9 x i8] c"grestore\00", align 1
@.str.2.420 = private unnamed_addr constant [11 x i8] c"restoreall\00", align 1
@.str.3.421 = private unnamed_addr constant [8 x i8] c"setdash\00", align 1
@.str.4.422 = private unnamed_addr constant [12 x i8] c"currentdash\00", align 1
@zgstate_op_init.my_defs = internal global [26 x %struct.op_def] [%struct.op_def { ptr @.str.5.425, ptr @zcurrentdash }, %struct.op_def { ptr @.str.6.426, ptr @zcurrentflat }, %struct.op_def { ptr @.str.7.427, ptr @zcurrentgray }, %struct.op_def { ptr @.str.8.428, ptr @zcurrenthsbcolor }, %struct.op_def { ptr @.str.9.429, ptr @zcurrentlinecap }, %struct.op_def { ptr @.str.10.430, ptr @zcurrentlinejoin }, %struct.op_def { ptr @.str.11.431, ptr @zcurrentlinewidth }, %struct.op_def { ptr @.str.12.432, ptr @zcurrentmiterlimit }, %struct.op_def { ptr @.str.13.433, ptr @zcurrentrgbcolor }, %struct.op_def { ptr @.str.14.434, ptr @zcurrentscreen }, %struct.op_def { ptr @.str.15.435, ptr @zcurrenttransfer }, %struct.op_def { ptr @.str.16.436, ptr @zgrestore }, %struct.op_def { ptr @.str.17.437, ptr @zgrestoreall }, %struct.op_def { ptr @.str.18.438, ptr @zgsave }, %struct.op_def { ptr @.str.19.439, ptr @zinitgraphics }, %struct.op_def { ptr @.str.20.440, ptr @zsetdash }, %struct.op_def { ptr @.str.21.441, ptr @zsetflat }, %struct.op_def { ptr @.str.22.442, ptr @zsetgray }, %struct.op_def { ptr @.str.23.443, ptr @zsethsbcolor }, %struct.op_def { ptr @.str.24.444, ptr @zsetlinecap }, %struct.op_def { ptr @.str.25.445, ptr @zsetlinejoin }, %struct.op_def { ptr @.str.26.446, ptr @zsetlinewidth }, %struct.op_def { ptr @.str.27.447, ptr @zsetmiterlimit }, %struct.op_def { ptr @.str.28.448, ptr @zsetrgbcolor }, %struct.op_def { ptr @.str.29.449, ptr @zsettransfer }, %struct.op_def zeroinitializer], align 16
@.str.5.425 = private unnamed_addr constant [13 x i8] c"0currentdash\00", align 1
@.str.6.426 = private unnamed_addr constant [13 x i8] c"0currentflat\00", align 1
@.str.7.427 = private unnamed_addr constant [13 x i8] c"0currentgray\00", align 1
@.str.8.428 = private unnamed_addr constant [17 x i8] c"0currenthsbcolor\00", align 1
@.str.9.429 = private unnamed_addr constant [16 x i8] c"0currentlinecap\00", align 1
@.str.10.430 = private unnamed_addr constant [17 x i8] c"0currentlinejoin\00", align 1
@.str.11.431 = private unnamed_addr constant [18 x i8] c"0currentlinewidth\00", align 1
@.str.12.432 = private unnamed_addr constant [19 x i8] c"0currentmiterlimit\00", align 1
@.str.13.433 = private unnamed_addr constant [17 x i8] c"0currentrgbcolor\00", align 1
@.str.14.434 = private unnamed_addr constant [15 x i8] c"0currentscreen\00", align 1
@.str.15.435 = private unnamed_addr constant [17 x i8] c"0currenttransfer\00", align 1
@.str.16.436 = private unnamed_addr constant [10 x i8] c"0grestore\00", align 1
@.str.17.437 = private unnamed_addr constant [13 x i8] c"0grestoreall\00", align 1
@.str.18.438 = private unnamed_addr constant [7 x i8] c"0gsave\00", align 1
@.str.19.439 = private unnamed_addr constant [14 x i8] c"0initgraphics\00", align 1
@.str.20.440 = private unnamed_addr constant [9 x i8] c"2setdash\00", align 1
@.str.21.441 = private unnamed_addr constant [9 x i8] c"1setflat\00", align 1
@.str.22.442 = private unnamed_addr constant [10 x i8] c"1.setgray\00", align 1
@.str.23.443 = private unnamed_addr constant [13 x i8] c"3sethsbcolor\00", align 1
@.str.24.444 = private unnamed_addr constant [12 x i8] c"1setlinecap\00", align 1
@.str.25.445 = private unnamed_addr constant [13 x i8] c"1setlinejoin\00", align 1
@.str.26.446 = private unnamed_addr constant [14 x i8] c"1setlinewidth\00", align 1
@.str.27.447 = private unnamed_addr constant [15 x i8] c"1setmiterlimit\00", align 1
@.str.28.448 = private unnamed_addr constant [13 x i8] c"3setrgbcolor\00", align 1
@.str.29.449 = private unnamed_addr constant [13 x i8] c"1settransfer\00", align 1
@.str.450 = private unnamed_addr constant [10 x i8] c"setscreen\00", align 1
@istate = internal global %struct.int_state_s zeroinitializer, align 8
@zht_op_init.my_defs = internal global [2 x %struct.op_def] [%struct.op_def { ptr @.str.1.453, ptr @zsetscreen }, %struct.op_def zeroinitializer], align 16
@.str.1.453 = private unnamed_addr constant [11 x i8] c"3setscreen\00", align 1
@zmatrix_op_init.my_defs = internal global [13 x %struct.op_def] [%struct.op_def { ptr @.str.458, ptr @zconcat }, %struct.op_def { ptr @.str.1.459, ptr @zdtransform }, %struct.op_def { ptr @.str.2.460, ptr @zconcatmatrix }, %struct.op_def { ptr @.str.3.461, ptr @zcurrentmatrix }, %struct.op_def { ptr @.str.4.462, ptr @zidtransform }, %struct.op_def { ptr @.str.5.463, ptr @zinvertmatrix }, %struct.op_def { ptr @.str.6.464, ptr @zitransform }, %struct.op_def { ptr @.str.7.465, ptr @zrotate }, %struct.op_def { ptr @.str.8.466, ptr @zscale }, %struct.op_def { ptr @.str.9.467, ptr @zsetmatrix }, %struct.op_def { ptr @.str.10.468, ptr @ztransform }, %struct.op_def { ptr @.str.11.469, ptr @ztranslate }, %struct.op_def zeroinitializer], align 16
@.str.458 = private unnamed_addr constant [8 x i8] c"1concat\00", align 1
@.str.1.459 = private unnamed_addr constant [12 x i8] c"2dtransform\00", align 1
@.str.2.460 = private unnamed_addr constant [14 x i8] c"3concatmatrix\00", align 1
@.str.3.461 = private unnamed_addr constant [15 x i8] c"1currentmatrix\00", align 1
@.str.4.462 = private unnamed_addr constant [13 x i8] c"2idtransform\00", align 1
@.str.5.463 = private unnamed_addr constant [14 x i8] c"2invertmatrix\00", align 1
@.str.6.464 = private unnamed_addr constant [12 x i8] c"2itransform\00", align 1
@.str.7.465 = private unnamed_addr constant [8 x i8] c"1rotate\00", align 1
@.str.8.466 = private unnamed_addr constant [7 x i8] c"2scale\00", align 1
@.str.9.467 = private unnamed_addr constant [11 x i8] c"1setmatrix\00", align 1
@.str.10.468 = private unnamed_addr constant [11 x i8] c"2transform\00", align 1
@.str.11.469 = private unnamed_addr constant [11 x i8] c"2translate\00", align 1
@.str.470 = private unnamed_addr constant [12 x i8] c"image_setup\00", align 1
@.str.1.471 = private unnamed_addr constant [21 x i8] c"image_continue(quit)\00", align 1
@.str.2.472 = private unnamed_addr constant [25 x i8] c"image_continue(finished)\00", align 1
@zpaint_op_init.my_defs = internal global [8 x %struct.op_def] [%struct.op_def { ptr @.str.3.475, ptr @zeofill }, %struct.op_def { ptr @.str.4.476, ptr @zerasepage }, %struct.op_def { ptr @.str.5.477, ptr @zfill }, %struct.op_def { ptr @.str.6.478, ptr @zcolorimage }, %struct.op_def { ptr @.str.7.479, ptr @zimage }, %struct.op_def { ptr @.str.8.480, ptr @zimagemask }, %struct.op_def { ptr @.str.9.481, ptr @zstroke }, %struct.op_def zeroinitializer], align 16
@.str.3.475 = private unnamed_addr constant [8 x i8] c"0eofill\00", align 1
@.str.4.476 = private unnamed_addr constant [11 x i8] c"0erasepage\00", align 1
@.str.5.477 = private unnamed_addr constant [6 x i8] c"0fill\00", align 1
@.str.6.478 = private unnamed_addr constant [12 x i8] c"7colorimage\00", align 1
@.str.7.479 = private unnamed_addr constant [7 x i8] c"5image\00", align 1
@.str.8.480 = private unnamed_addr constant [11 x i8] c"5imagemask\00", align 1
@.str.9.481 = private unnamed_addr constant [8 x i8] c"0stroke\00", align 1
@zpath_op_init.my_defs = internal global [14 x %struct.op_def] [%struct.op_def { ptr @.str.484, ptr @zarc }, %struct.op_def { ptr @.str.1.485, ptr @zarcn }, %struct.op_def { ptr @.str.2.486, ptr @zarct }, %struct.op_def { ptr @.str.3.487, ptr @zarcto }, %struct.op_def { ptr @.str.4.488, ptr @zclosepath }, %struct.op_def { ptr @.str.5.489, ptr @zcurrentpoint }, %struct.op_def { ptr @.str.6.490, ptr @zcurveto }, %struct.op_def { ptr @.str.7.491, ptr @zlineto }, %struct.op_def { ptr @.str.8.492, ptr @zmoveto }, %struct.op_def { ptr @.str.9.493, ptr @znewpath }, %struct.op_def { ptr @.str.10.494, ptr @zrcurveto }, %struct.op_def { ptr @.str.11.495, ptr @zrlineto }, %struct.op_def { ptr @.str.12.496, ptr @zrmoveto }, %struct.op_def zeroinitializer], align 16
@.str.484 = private unnamed_addr constant [5 x i8] c"5arc\00", align 1
@.str.1.485 = private unnamed_addr constant [6 x i8] c"5arcn\00", align 1
@.str.2.486 = private unnamed_addr constant [6 x i8] c"5arct\00", align 1
@.str.3.487 = private unnamed_addr constant [7 x i8] c"5arcto\00", align 1
@.str.4.488 = private unnamed_addr constant [11 x i8] c"0closepath\00", align 1
@.str.5.489 = private unnamed_addr constant [14 x i8] c"0currentpoint\00", align 1
@.str.6.490 = private unnamed_addr constant [9 x i8] c"6curveto\00", align 1
@.str.7.491 = private unnamed_addr constant [8 x i8] c"2lineto\00", align 1
@.str.8.492 = private unnamed_addr constant [8 x i8] c"2moveto\00", align 1
@.str.9.493 = private unnamed_addr constant [9 x i8] c"0newpath\00", align 1
@.str.10.494 = private unnamed_addr constant [10 x i8] c"6rcurveto\00", align 1
@.str.11.495 = private unnamed_addr constant [9 x i8] c"2rlineto\00", align 1
@.str.12.496 = private unnamed_addr constant [9 x i8] c"2rmoveto\00", align 1
@igs = internal global ptr null, align 8
@osp = internal global ptr null, align 8
@ostop = internal global ptr null, align 8
@osp_nargs = internal global [6 x ptr] zeroinitializer, align 16
@esp = internal global ptr null, align 8
@estop = internal global ptr null, align 8
@.str.497 = private unnamed_addr constant [11 x i8] c"pathforall\00", align 1
@zpath2_op_init.my_defs = internal global [10 x %struct.op_def] [%struct.op_def { ptr @.str.1.500, ptr @zclip }, %struct.op_def { ptr @.str.2.501, ptr @zclippath }, %struct.op_def { ptr @.str.3.502, ptr @zeoclip }, %struct.op_def { ptr @.str.4.503, ptr @zflattenpath }, %struct.op_def { ptr @.str.5.504, ptr @zinitclip }, %struct.op_def { ptr @.str.6.505, ptr @zpathbbox }, %struct.op_def { ptr @.str.7.506, ptr @zpathforall }, %struct.op_def { ptr @.str.8.507, ptr @zreversepath }, %struct.op_def { ptr @.str.9.508, ptr @zstrokepath }, %struct.op_def zeroinitializer], align 16
@.str.1.500 = private unnamed_addr constant [6 x i8] c"0clip\00", align 1
@.str.2.501 = private unnamed_addr constant [10 x i8] c"0clippath\00", align 1
@.str.3.502 = private unnamed_addr constant [8 x i8] c"0eoclip\00", align 1
@.str.4.503 = private unnamed_addr constant [13 x i8] c"0flattenpath\00", align 1
@.str.5.504 = private unnamed_addr constant [10 x i8] c"0initclip\00", align 1
@.str.6.505 = private unnamed_addr constant [10 x i8] c"0pathbbox\00", align 1
@.str.7.506 = private unnamed_addr constant [12 x i8] c"4pathforall\00", align 1
@.str.8.507 = private unnamed_addr constant [13 x i8] c"0reversepath\00", align 1
@.str.9.508 = private unnamed_addr constant [12 x i8] c"0strokepath\00", align 1
@gs_show_enum_sizeof = internal global i32 368, align 4
@gs_screen_enum_sizeof = internal global i32 136, align 4
@gs_color_sizeof = internal global i32 10, align 4
@.str.561 = private unnamed_addr constant [17 x i8] c"halftone samples\00", align 1
@null_procs = internal global %struct.gx_device_procs_s { ptr @gx_default_open_device, ptr @gx_default_get_initial_matrix, ptr @gx_default_sync_output, ptr @gx_default_output_page, ptr @gx_default_close_device, ptr @gx_default_map_rgb_color, ptr @gx_default_map_color_rgb, ptr @null_fill_rectangle, ptr @null_tile_rectangle, ptr @null_copy_mono, ptr @null_copy_color, ptr @null_draw_line, ptr @null_fill_trapezoid, ptr @null_tile_trapezoid }, align 8
@.str.619 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@null_device = internal global %struct.gx_device_s { i32 32, ptr @null_procs, ptr @.str.619, i32 16383, i32 16383, float 1.000000e+00, float 1.000000e+00, i32 0, i16 1, i32 1, i32 1 }, align 8
@gx_device_null_p = internal global ptr @null_device, align 8
@.str.1.610 = private unnamed_addr constant [14 x i8] c"gs_makedevice\00", align 1
@.str.2.613 = private unnamed_addr constant [27 x i8] c"gs_makeimagedevice(device)\00", align 1
@.str.3.614 = private unnamed_addr constant [25 x i8] c"gs_makeimagedevice(bits)\00", align 1
@.str.624 = private unnamed_addr constant [16 x i8] c"ppm file buffer\00", align 1
@.str.1.629 = private unnamed_addr constant [46 x i8] c"P4\0A# Ghostscript 1 bit mono image dump\0A%d %d\0A\00", align 1
@.str.2.626 = private unnamed_addr constant [58 x i8] c"P6\0A# Ghostscript 8 bit mapped color image dump\0A%d %d\0A255\0A\00", align 1
@.str.3.625 = private unnamed_addr constant [56 x i8] c"P5\0A# Ghostscript 8 bit gray scale image dump\0A%d %d\0A255\0A\00", align 1
@.str.4.628 = private unnamed_addr constant [52 x i8] c"P6\0A# Ghostscript 24 bit color image dump\0A%d %d\0A255\0A\00", align 1
@.str.5.627 = private unnamed_addr constant [52 x i8] c"P6\0A# Ghostscript 32 bit color image dump\0A%d %d\0A255\0A\00", align 1
@.str.632 = private unnamed_addr constant [20 x i8] c"font_dir_alloc(dir)\00", align 1
@.str.1.633 = private unnamed_addr constant [22 x i8] c"font_dir_alloc(bdata)\00", align 1
@.str.2.634 = private unnamed_addr constant [22 x i8] c"font_dir_alloc(mdata)\00", align 1
@.str.3.635 = private unnamed_addr constant [22 x i8] c"font_dir_alloc(cdata)\00", align 1
@.str.4.638 = private unnamed_addr constant [12 x i8] c"gs_makefont\00", align 1
@gs_image_enum_sizeof = internal global i32 8376, align 4
@map_4_to_32 = internal global [16 x i32] [i32 0, i32 -16777216, i32 16711680, i32 -65536, i32 65280, i32 -16711936, i32 16776960, i32 -256, i32 255, i32 -16776961, i32 16711935, i32 -65281, i32 65535, i32 -16711681, i32 16777215, i32 -1], align 16
@map_4_to_16 = internal global [16 x i16] [i16 0, i16 21760, i16 -22016, i16 -256, i16 85, i16 21845, i16 -21931, i16 -171, i16 170, i16 21930, i16 -21846, i16 -86, i16 255, i16 22015, i16 -21761, i16 -1], align 16
@.str.659 = private unnamed_addr constant [13 x i8] c"image buffer\00", align 1
@image_init.procs = internal unnamed_addr constant [4 x ptr] [ptr @image_unpack_0, ptr @image_unpack_1, ptr @image_unpack_2, ptr @image_unpack_3], align 16
@image_init.spread_procs = internal unnamed_addr constant [4 x ptr] [ptr @image_unpack_0_spread, ptr @image_unpack_1_spread, ptr @image_unpack_2, ptr @image_unpack_3_spread], align 16
@switch.table.gs_image_init = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 0, i32 3], align 4
@switch.table.gs_image_init.1 = private unnamed_addr constant [9 x i32] [i32 4, i32 3, i32 1, i32 1, i32 1, i32 1, i32 1, i32 3, i32 4], align 4
@switch.table.gs_image_init.2 = private unnamed_addr constant [9 x i32] [i32 4, i32 3, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 4
@.str.668 = private unnamed_addr constant [15 x i8] c"gsim2out cells\00", align 1
@trace_from.nesw = internal unnamed_addr constant [5 x %struct.dir_descr] [%struct.dir_descr { i16 -1, i16 1, i16 0, i16 1 }, %struct.dir_descr { i16 1, i16 1, i16 1, i16 0 }, %struct.dir_descr { i16 1, i16 -1, i16 0, i16 -1 }, %struct.dir_descr { i16 -1, i16 -1, i16 -1, i16 0 }, %struct.dir_descr { i16 -1, i16 1, i16 0, i16 1 }], align 16
@.str.687 = private unnamed_addr constant [13 x i8] c"dash pattern\00", align 1
@gs_identity_matrix = internal global %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, align 8
@.str.722 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.723 = private unnamed_addr constant [68 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/gsmisc.c\00", align 1
@.str.2.724 = private unnamed_addr constant [19 x i8] c"%s: malloc failed\0A\00", align 1
@gs_path_enum_sizeof = internal global i32 16, align 4
@.str.771 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.772 = private unnamed_addr constant [69 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/gspath2.c\00", align 1
@.str.2.773 = private unnamed_addr constant [35 x i8] c"bad type %x in gs_path_enum_next!\0A\00", align 1
@.str.788 = private unnamed_addr constant [15 x i8] c"gs_state_alloc\00", align 1
@.str.2.797 = private unnamed_addr constant [9 x i8] c"gs_gsave\00", align 1
@.str.3.800 = private unnamed_addr constant [12 x i8] c"gs_grestore\00", align 1
@.str.4.791 = private unnamed_addr constant [25 x i8] c"(gs)alloc_state_contents\00", align 1
@.str.5.794 = private unnamed_addr constant [24 x i8] c"(gs)free_state_contents\00", align 1
@gs_type1_state_sizeof = internal global i32 504, align 4
@cached_char_sizeof = internal global i32 72, align 4
@cached_fm_pair_sizeof = internal global i32 32, align 4
@lum = internal unnamed_addr constant [8 x i16] [i16 0, i16 30, i16 59, i16 89, i16 11, i16 41, i16 70, i16 100], align 16
@.str.851 = private unnamed_addr constant [13 x i8] c"active lines\00", align 1
@single_bits8 = internal global [32 x i8] c"\80\00@\00 \00\10\00\08\00\04\00\02\00\01\00\00\80\00@\00 \00\10\00\08\00\04\00\02\00\01", align 16
@mb1 = internal global [2 x i8] c"\FF\FF", align 1
@mb2 = internal global [4 x i8] c"\AA\AAUU", align 1
@mb3 = internal global [6 x i8] c"\92II$$\92", align 1
@mb4 = internal global [8 x i8] c"\88\88DD\22\22\11\11", align 1
@mb5 = internal global [10 x i8] c"\84!B\10!\08\10\84\08B", align 1
@mb6 = internal global [12 x i8] c"\82\08A\04 \82\10A\08 \04\10", align 1
@mb7 = internal global [14 x i8] c"\81\02@\81 @\10 \08\10\04\08\02\04", align 1
@mb8 = internal global [16 x i8] c"\80\80@@  \10\10\08\08\04\04\02\02\01\01", align 16
@multi_bits = internal global [9 x ptr] [ptr null, ptr @mb1, ptr @mb2, ptr @mb3, ptr @mb4, ptr @mb5, ptr @mb6, ptr @mb7, ptr @mb8], align 16
@cache = internal global %struct.gx_ht_cache_s zeroinitializer, align 8
@cache_bits = internal global [1000 x i8] zeroinitializer, align 16
@init_ht.up_to_16 = internal unnamed_addr constant [9 x i32] [i32 0, i32 16, i32 16, i32 15, i32 16, i32 15, i32 12, i32 14, i32 16], align 16
@stderr = external local_unnamed_addr global ptr, align 8
@.str.860 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.861 = private unnamed_addr constant [68 x i8] c"/src/llvm-test-suite/MultiSource/Benchmarks/MallocBench/gs/gxpath.c\00", align 1
@.str.2.862 = private unnamed_addr constant [34 x i8] c"bad type in gx_path_release: %x!\0A\00", align 1
@.str.3.863 = private unnamed_addr constant [16 x i8] c"gx_path_release\00", align 1
@.str.4.866 = private unnamed_addr constant [20 x i8] c"gx_path_new_subpath\00", align 1
@.str.5.873 = private unnamed_addr constant [17 x i8] c"gx_path_add_line\00", align 1
@.str.6.883 = private unnamed_addr constant [18 x i8] c"gx_path_add_curve\00", align 1
@.str.7.880 = private unnamed_addr constant [22 x i8] c"gx_path_close_subpath\00", align 1
@switch.table.gx_path_release = private unnamed_addr constant [4 x i32] [i32 64, i32 40, i32 40, i32 72], align 4
@scaled_flat = internal global i64 0, align 8
@scaled_flat_sq = internal global float 0.000000e+00, align 4
@stroke_path = internal global ptr null, align 8
@stroke_path_body = internal global %struct.gx_path_s zeroinitializer, align 8
@.str.912 = private unnamed_addr constant [7 x i8] c"image(\00", align 1
@mem_mono_procs = internal global %struct.gx_device_procs_s { ptr @mem_open, ptr @mem_get_initial_matrix, ptr @gx_default_sync_output, ptr @gx_default_output_page, ptr @gx_default_close_device, ptr @gx_default_map_rgb_color, ptr @gx_default_map_color_rgb, ptr @mem_mono_fill_rectangle, ptr @gx_default_tile_rectangle, ptr @mem_mono_copy_mono, ptr @mem_mono_copy_color, ptr @gx_default_draw_line, ptr @gx_default_fill_trapezoid, ptr @gx_default_tile_trapezoid }, align 8
@.str.1.919 = private unnamed_addr constant [12 x i8] c"image(mono)\00", align 1
@mem_mono_device = internal global %struct.gx_device_memory_s { i32 200, ptr @mem_mono_procs, ptr @.str.1.919, i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 0, i16 1, i32 1, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, ptr null, ptr null, ptr @mem_no_fault_proc, i32 0, i32 0, ptr null }, align 8
@mem_mapped_procs = internal global %struct.gx_device_procs_s { ptr @mem_open, ptr @mem_get_initial_matrix, ptr @gx_default_sync_output, ptr @gx_default_output_page, ptr @gx_default_close_device, ptr @mem_mapped_map_rgb_color, ptr @mem_mapped_map_color_rgb, ptr @mem_mapped_fill_rectangle, ptr @gx_default_tile_rectangle, ptr @mem_mapped_copy_mono, ptr @mem_mapped_copy_color, ptr @gx_default_draw_line, ptr @gx_default_fill_trapezoid, ptr @gx_default_tile_trapezoid }, align 8
@.str.2.922 = private unnamed_addr constant [9 x i8] c"image(8)\00", align 1
@mem_mapped_color_device = internal global %struct.gx_device_memory_s { i32 200, ptr @mem_mapped_procs, ptr @.str.2.922, i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 1, i16 255, i32 8, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, ptr null, ptr null, ptr @mem_no_fault_proc, i32 0, i32 0, ptr null }, align 8
@mem_true24_procs = internal global %struct.gx_device_procs_s { ptr @mem_open, ptr @mem_get_initial_matrix, ptr @gx_default_sync_output, ptr @gx_default_output_page, ptr @gx_default_close_device, ptr @mem_true_map_rgb_color, ptr @mem_true_map_color_rgb, ptr @mem_true24_fill_rectangle, ptr @gx_default_tile_rectangle, ptr @mem_true24_copy_mono, ptr @mem_true24_copy_color, ptr @gx_default_draw_line, ptr @gx_default_fill_trapezoid, ptr @gx_default_tile_trapezoid }, align 8
@.str.3.925 = private unnamed_addr constant [10 x i8] c"image(24)\00", align 1
@mem_true24_color_device = internal global %struct.gx_device_memory_s { i32 200, ptr @mem_true24_procs, ptr @.str.3.925, i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 1, i16 255, i32 24, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, ptr null, ptr null, ptr @mem_no_fault_proc, i32 0, i32 0, ptr null }, align 8
@mem_true32_procs = internal global %struct.gx_device_procs_s { ptr @mem_open, ptr @mem_get_initial_matrix, ptr @gx_default_sync_output, ptr @gx_default_output_page, ptr @gx_default_close_device, ptr @mem_true_map_rgb_color, ptr @mem_true_map_color_rgb, ptr @mem_true32_fill_rectangle, ptr @gx_default_tile_rectangle, ptr @mem_true32_copy_mono, ptr @mem_true32_copy_color, ptr @gx_default_draw_line, ptr @gx_default_fill_trapezoid, ptr @gx_default_tile_trapezoid }, align 8
@.str.4.928 = private unnamed_addr constant [10 x i8] c"image(32)\00", align 1
@mem_true32_color_device = internal global %struct.gx_device_memory_s { i32 200, ptr @mem_true32_procs, ptr @.str.4.928, i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 1, i16 255, i32 32, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, ptr null, ptr null, ptr @mem_no_fault_proc, i32 0, i32 0, ptr null }, align 8
@gx_device_list = internal global [1 x ptr] zeroinitializer, align 8

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #0 {
  store ptr null, ptr @gs_lib_env_path, align 8, !tbaa !7
  %3 = tail call ptr @getenv(ptr noundef nonnull @.str.1) #62
  %4 = icmp eq ptr %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %3) #63
  %7 = trunc i64 %6 to i32
  %8 = add nsw i32 %7, 1
  %9 = tail call ptr @gs_malloc(i32 noundef %8, i32 noundef 1, ptr noundef nonnull @.str.1) #64
  store ptr %9, ptr @gs_lib_env_path, align 8, !tbaa !7
  %10 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %9, ptr noundef nonnull dereferenceable(1) %3) #64
  br label %11

11:                                               ; preds = %5, %2
  %12 = add nsw i32 %0, 2
  %13 = tail call ptr @gs_malloc(i32 noundef %12, i32 noundef 8, ptr noundef nonnull @.str.2) #64
  store ptr %13, ptr @gs_lib_paths, align 8, !tbaa !7
  store i32 0, ptr @gs_lib_count, align 4, !tbaa !11
  %14 = load ptr, ptr @gs_lib_env_path, align 8, !tbaa !7
  %15 = icmp eq ptr %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds ptr, ptr %13, i64 1
  store ptr %14, ptr %13, align 8, !tbaa !7
  br label %18

18:                                               ; preds = %16, %11
  %19 = phi ptr [ %17, %16 ], [ %13, %11 ]
  %20 = load ptr, ptr @gs_lib_default_path, align 8, !tbaa !7
  %21 = icmp eq ptr %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds ptr, ptr %19, i64 1
  store ptr %20, ptr %19, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %22, %18
  %25 = phi ptr [ %23, %22 ], [ %19, %18 ]
  store ptr null, ptr %25, align 8, !tbaa !7
  store i32 0, ptr @quiet, align 4, !tbaa !11
  store i32 1, ptr @user_errors, align 4, !tbaa !11
  %26 = tail call i32 (i32, ptr, ptr, ptr, ptr, ...) @gs_main(i32 noundef %0, ptr noundef %1, ptr noundef nonnull @.str.3, ptr noundef nonnull @swproc, ptr noundef nonnull @argproc) #64
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  tail call void @init2() #62
  br label %29

29:                                               ; preds = %28, %24
  %30 = tail call i32 (ptr, ...) @zflush(ptr noundef null) #64
  %31 = tail call i32 (ptr, ...) @zflushpage(ptr noundef null) #64
  %32 = tail call i32 (i32, ...) @gs_exit(i32 noundef 0) #64
  ret i32 0
}

; Function Attrs: nofree nounwind optsize memory(read)
declare noundef ptr @getenv(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: nounwind optsize uwtable
define internal i32 @swproc(i8 noundef signext %0, ptr noundef %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  %4 = alloca %struct.ref_s, align 8
  %5 = alloca %struct.stream_s, align 8
  %6 = alloca %struct.stream_s, align 8
  %7 = alloca %struct.ref_s, align 8
  %8 = alloca i32, align 4
  %9 = sext i8 %0 to i32
  switch i32 %9, label %105 [
    i32 73, label %10
    i32 113, label %31
    i32 68, label %34
    i32 100, label %34
    i32 83, label %34
    i32 115, label %34
    i32 119, label %75
    i32 104, label %75
    i32 69, label %92
    i32 77, label %93
  ]

10:                                               ; preds = %2
  %11 = load ptr, ptr @gs_lib_paths, align 8, !tbaa !7
  %12 = load i32, ptr @gs_lib_count, align 4, !tbaa !11
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds ptr, ptr %11, i64 %13
  store ptr %1, ptr %14, align 8, !tbaa !7
  %15 = add nsw i32 %12, 1
  store i32 %15, ptr @gs_lib_count, align 4, !tbaa !11
  %16 = load ptr, ptr @gs_lib_paths, align 8, !tbaa !7
  %17 = sext i32 %15 to i64
  %18 = getelementptr inbounds ptr, ptr %16, i64 %17
  %19 = load ptr, ptr @gs_lib_env_path, align 8, !tbaa !7
  %20 = icmp eq ptr %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds ptr, ptr %18, i64 1
  store ptr %19, ptr %18, align 8, !tbaa !7
  br label %23

23:                                               ; preds = %21, %10
  %24 = phi ptr [ %22, %21 ], [ %18, %10 ]
  %25 = load ptr, ptr @gs_lib_default_path, align 8, !tbaa !7
  %26 = icmp eq ptr %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds ptr, ptr %24, i64 1
  store ptr %25, ptr %24, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %27, %23
  %30 = phi ptr [ %28, %27 ], [ %24, %23 ]
  store ptr null, ptr %30, align 8, !tbaa !7
  br label %105

31:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  store i32 1, ptr @quiet, align 4, !tbaa !11
  tail call void @init1() #62
  store i64 0, ptr %3, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  store i16 32, ptr %32, align 8, !tbaa !14
  %33 = call i32 (ptr, ptr, ...) @initial_enter_name(ptr noundef nonnull @.str.4, ptr noundef nonnull %3) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  br label %105

34:                                               ; preds = %2, %2, %2, %2
  %35 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %1, i32 noundef 61) #63
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  tail call void @init1() #62
  %36 = icmp eq ptr %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  store i64 0, ptr %4, align 8, !tbaa !13
  %38 = getelementptr inbounds %struct.ref_s, ptr %4, i64 0, i32 1
  store i16 32, ptr %38, align 8, !tbaa !14
  br label %73

39:                                               ; preds = %34
  %40 = icmp eq ptr %35, %1
  br i1 %40, label %41, label %44

41:                                               ; preds = %39
  %42 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.5) #62
  %43 = tail call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %73

44:                                               ; preds = %39
  %45 = getelementptr inbounds i8, ptr %35, i64 1
  store i8 0, ptr %35, align 1, !tbaa !13
  %46 = and i8 %0, -33
  %47 = icmp eq i8 %46, 68
  br i1 %47, label %48, label %57

48:                                               ; preds = %44
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %5) #65
  %49 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %45) #63
  %50 = trunc i64 %49 to i32
  call void @sread_string(ptr noundef nonnull %5, ptr noundef nonnull %45, i32 noundef %50) #64
  %51 = call i32 (ptr, i32, ptr, ...) @scan_token(ptr noundef nonnull %5, i32 noundef 0, ptr noundef nonnull %4) #64
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6) #62
  %55 = call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %56

56:                                               ; preds = %53, %48
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %5) #65
  br label %73

57:                                               ; preds = %44
  %58 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %45) #63
  %59 = trunc i64 %58 to i32
  %60 = tail call ptr @gs_malloc(i32 noundef %59, i32 noundef 1, ptr noundef nonnull @.str.7) #64
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %68

62:                                               ; preds = %57
  %63 = load ptr, ptr @stderr, align 8, !tbaa !7
  %64 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %63, ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.9, i32 noundef 153) #66
  %65 = load ptr, ptr @stderr, align 8, !tbaa !7
  %66 = tail call i64 @fwrite(ptr nonnull @.str.10, i64 15, i64 1, ptr %65) #67
  %67 = tail call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %68

68:                                               ; preds = %62, %57
  %69 = tail call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %60, ptr noundef nonnull dereferenceable(1) %45) #64
  store ptr %60, ptr %4, align 8, !tbaa !13
  %70 = getelementptr inbounds %struct.ref_s, ptr %4, i64 0, i32 1
  store i16 566, ptr %70, align 8, !tbaa !14
  %71 = trunc i64 %58 to i16
  %72 = getelementptr inbounds %struct.ref_s, ptr %4, i64 0, i32 2
  store i16 %71, ptr %72, align 2, !tbaa !17
  br label %73

73:                                               ; preds = %68, %56, %41, %37
  %74 = call i32 (ptr, ptr, ...) @initial_enter_name(ptr noundef %1, ptr noundef nonnull %4) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  br label %105

75:                                               ; preds = %2, %2
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %6) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #65
  tail call void @init1() #62
  %76 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #63
  %77 = trunc i64 %76 to i32
  call void @sread_string(ptr noundef nonnull %6, ptr noundef %1, i32 noundef %77) #64
  %78 = call i32 (ptr, i32, ptr, ...) @scan_token(ptr noundef nonnull %6, i32 noundef 0, ptr noundef nonnull %7) #64
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.ref_s, ptr %7, i64 0, i32 1
  %82 = load i16, ptr %81, align 8, !tbaa !14
  %83 = lshr i16 %82, 2
  %84 = and i16 %83, 63
  switch i16 %84, label %85 [
    i16 5, label %88
    i16 11, label %88
  ]

85:                                               ; preds = %80, %75
  %86 = call i32 @puts(ptr nonnull dereferenceable(1) @str)
  %87 = call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %88

88:                                               ; preds = %85, %80, %80
  %89 = icmp eq i8 %0, 119
  %90 = select i1 %89, ptr @.str.12, ptr @.str.13
  %91 = call i32 (ptr, ptr, ...) @initial_enter_name(ptr noundef nonnull %90, ptr noundef nonnull %7) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %6) #65
  br label %105

92:                                               ; preds = %2
  store i32 0, ptr @user_errors, align 4, !tbaa !11
  br label %105

93:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #65
  store i32 0, ptr %8, align 4, !tbaa !11
  %94 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef %1, ptr noundef nonnull @.str.14, ptr noundef nonnull %8) #64
  %95 = load i32, ptr %8, align 4
  %96 = add i32 %95, -64
  %97 = icmp ult i32 %96, -63
  br i1 %97, label %98, label %102

98:                                               ; preds = %93
  %99 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.15) #62
  %100 = call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  %101 = load i32, ptr %8, align 4, !tbaa !11
  br label %102

102:                                              ; preds = %98, %93
  %103 = phi i32 [ %95, %93 ], [ %101, %98 ]
  %104 = shl i32 %103, 10
  store i32 %104, ptr @memory_chunk_size, align 4, !tbaa !11
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #65
  br label %105

105:                                              ; preds = %102, %92, %88, %73, %31, %29, %2
  %106 = phi i32 [ -1, %2 ], [ 0, %102 ], [ 0, %92 ], [ 0, %88 ], [ 0, %73 ], [ 0, %31 ], [ 0, %29 ]
  ret i32 %106
}

; Function Attrs: nounwind optsize uwtable
define internal void @argproc(ptr nocapture noundef readonly %0, i32 %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  %4 = alloca [256 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 256, ptr nonnull %4) #65
  tail call void @init2() #62
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(3) %4, ptr noundef nonnull align 1 dereferenceable(3) @.str.16, i64 3, i1 false) #64
  %5 = call ptr @strcat(ptr noundef nonnull dereferenceable(1) %4, ptr noundef nonnull dereferenceable(1) %0) #64
  %6 = call i64 @strlen(ptr nonnull dereferenceable(1) %4)
  %7 = getelementptr inbounds i8, ptr %4, i64 %6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(13) %7, ptr noundef nonnull align 1 dereferenceable(13) @.str.17, i64 13, i1 false)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  store ptr %4, ptr %3, align 8, !tbaa !13
  %8 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  store i16 567, ptr %8, align 8, !tbaa !14
  %9 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %4) #63
  %10 = trunc i64 %9 to i16
  %11 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 2
  store i16 %10, ptr %11, align 2, !tbaa !17
  %12 = load i32, ptr @user_errors, align 4, !tbaa !11
  %13 = call i32 (ptr, i32, ...) @interpret(ptr noundef nonnull %3, i32 noundef %12) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  %14 = call i32 (ptr, ...) @zflushpage(ptr noundef null) #64
  %15 = icmp eq i32 %13, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  call void @debug_dump_stack(i32 noundef %13) #62
  %17 = call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %18

18:                                               ; preds = %16, %2
  call void @llvm.lifetime.end.p0(i64 256, ptr nonnull %4) #65
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @init2() #0 {
  tail call void @init1() #62
  %1 = load i32, ptr @init2_done, align 4, !tbaa !11
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %12

3:                                                ; preds = %0
  %4 = tail call i32 (...) @gs_init() #64
  %5 = tail call i32 (...) @zfile_init() #64
  %6 = tail call i32 (...) @zfont_init() #64
  %7 = tail call i32 (...) @zmath_init() #64
  %8 = tail call i32 (...) @zmatrix_init() #64
  %9 = tail call i32 (i32, ...) @interp_init(i32 noundef 1) #64
  %10 = tail call i32 (...) @op_init() #64
  %11 = load i32, ptr @user_errors, align 4, !tbaa !11
  tail call void @run_file(ptr noundef nonnull @.str.18, i32 noundef %11) #62
  store i32 1, ptr @init2_done, align 4, !tbaa !11
  br label %12

12:                                               ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @init1() #0 {
  %1 = load i32, ptr @init1_done, align 4, !tbaa !11
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %8

3:                                                ; preds = %0
  %4 = load i32, ptr @memory_chunk_size, align 4, !tbaa !11
  tail call void @alloc_init(ptr noundef nonnull @gs_malloc, ptr noundef nonnull @gs_free, i32 noundef %4) #64
  %5 = tail call i32 (...) @name_init() #64
  %6 = tail call i32 (...) @obj_init() #64
  %7 = tail call i32 (...) @scan_init() #64
  store i32 1, ptr @init1_done, align 4, !tbaa !11
  br label %8

8:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @run_file(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #63
  %5 = call i32 (ptr, i64, ptr, ...) @lib_file_open(ptr noundef %0, i64 noundef %4, ptr noundef nonnull %3) #64
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !7
  %9 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.19, ptr noundef %0) #66
  %10 = call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %11

11:                                               ; preds = %7, %2
  %12 = load i32, ptr @quiet, align 4, !tbaa !11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  %15 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.20, ptr noundef %0) #62
  %16 = load ptr, ptr @stdout, align 8, !tbaa !7
  %17 = call i32 @fflush(ptr noundef %16) #62
  br label %18

18:                                               ; preds = %14, %11
  %19 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = or i16 %20, 3
  store i16 %21, ptr %19, align 8, !tbaa !14
  %22 = call i32 (ptr, i32, ...) @interpret(ptr noundef nonnull %3, i32 noundef %1) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  call void @debug_dump_stack(i32 noundef %22) #62
  %25 = call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %26

26:                                               ; preds = %24, %18
  %27 = load i32, ptr @quiet, align 4, !tbaa !11
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.21, ptr noundef %0) #62
  %31 = load ptr, ptr @stdout, align 8, !tbaa !7
  %32 = call i32 @fflush(ptr noundef %31) #62
  br label %33

33:                                               ; preds = %29, %26
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal void @debug_dump_stack(i32 noundef %0) #0 {
  %2 = load ptr, ptr @osp, align 8, !tbaa !7
  %3 = tail call i32 (ptr, ...) @zflush(ptr noundef %2) #64
  %4 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef %0) #62
  %5 = load ptr, ptr @osbot, align 8, !tbaa !7
  %6 = load ptr, ptr @osp, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.ref_s, ptr %6, i64 1
  %8 = tail call i32 (ptr, ptr, ptr, ...) @debug_dump_refs(ptr noundef %5, ptr noundef nonnull %7, ptr noundef nonnull @.str.23) #64
  %9 = load ptr, ptr @esp, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.ref_s, ptr %9, i64 1
  %11 = tail call i32 (ptr, ptr, ptr, ...) @debug_dump_refs(ptr noundef nonnull @estack, ptr noundef nonnull %10, ptr noundef nonnull @.str.24) #64
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strcat(ptr noalias noundef returned, ptr noalias nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #7

; Function Attrs: nofree nounwind optsize
declare noundef i32 @__isoc99_sscanf(ptr nocapture noundef readonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_main(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) #0 {
  %6 = alloca i32, align 4
  store i64 0, ptr @proc_reloc, align 8, !tbaa !18
  tail call void (...) @gp_init() #64
  %7 = icmp sgt i32 %0, 1
  br i1 %7, label %8, label %71

8:                                                ; preds = %5
  %9 = zext i32 %0 to i64
  br label %10

10:                                               ; preds = %66, %8
  %11 = phi i64 [ 1, %8 ], [ %69, %66 ]
  %12 = phi i32 [ 0, %8 ], [ %68, %66 ]
  %13 = phi ptr [ null, %8 ], [ %67, %66 ]
  %14 = getelementptr inbounds ptr, ptr %1, i64 %11
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = load i8, ptr %15, align 1, !tbaa !13
  %17 = icmp eq i8 %16, 45
  br i1 %17, label %18, label %64

18:                                               ; preds = %10
  %19 = getelementptr inbounds i8, ptr %15, i64 1
  %20 = load i8, ptr %19, align 1, !tbaa !13
  %21 = sext i8 %20 to i32
  switch i32 %21, label %22 [
    i32 90, label %28
    i32 84, label %30
  ]

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, ptr %15, i64 2
  %24 = call i32 %3(i8 noundef signext %20, ptr noundef nonnull %23) #64
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %66

26:                                               ; preds = %22
  %27 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.11, ptr noundef nonnull %15) #62
  br label %66

28:                                               ; preds = %18
  %29 = call i32 @puts(ptr nonnull dereferenceable(1) @str.12)
  br label %66

30:                                               ; preds = %18
  %31 = icmp eq ptr %13, null
  br i1 %31, label %32, label %39

32:                                               ; preds = %30
  %33 = call ptr @trace_open_map(ptr noundef %2, ptr noundef nonnull @proc_reloc) #64
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %32
  %36 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.13, ptr noundef %2) #62
  br label %66

37:                                               ; preds = %32
  %38 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.14, i64 noundef ptrtoint (ptr @main to i64)) #62
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi ptr [ %33, %37 ], [ %13, %30 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #65
  store i32 0, ptr %6, align 4, !tbaa !11
  %41 = call ptr @strchr(ptr noundef nonnull dereferenceable(1) %19, i32 noundef 58) #63
  %42 = icmp eq ptr %41, null
  br i1 %42, label %50, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, ptr %41, i64 1
  %45 = call i32 (ptr, ptr, ...) @__isoc99_sscanf(ptr noundef nonnull %44, ptr noundef nonnull @.str.4.15, ptr noundef nonnull %6) #64
  store i8 0, ptr %41, align 1, !tbaa !13
  %46 = call ptr @strchr(ptr noundef nonnull dereferenceable(1) %44, i32 noundef 58) #63
  %47 = icmp eq ptr %46, null
  %48 = getelementptr inbounds i8, ptr %46, i64 1
  %49 = select i1 %47, ptr null, ptr %48
  br label %50

50:                                               ; preds = %43, %39
  %51 = phi ptr [ null, %39 ], [ %49, %43 ]
  %52 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %19) #63
  %53 = trunc i64 %52 to i32
  %54 = add i32 %53, 1
  %55 = call ptr @gs_malloc(i32 noundef %54, i32 noundef 1, ptr noundef nonnull @.str.5.16) #64
  %56 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %55, ptr noundef nonnull dereferenceable(1) %19) #64
  store i8 95, ptr %55, align 1, !tbaa !13
  %57 = call i32 (ptr, ...) @strupr(ptr noundef nonnull %55) #64
  %58 = load i32, ptr %6, align 4, !tbaa !11
  %59 = call i32 (ptr, ptr, ptr, i32, ...) @trace_name(ptr noundef nonnull %55, ptr noundef nonnull %40, ptr noundef %51, i32 noundef %58) #64
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %50
  %62 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6.17, ptr noundef nonnull %55) #62
  br label %63

63:                                               ; preds = %61, %50
  store i32 1, ptr @trace_flush_flag, align 4, !tbaa !11
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #65
  br label %66

64:                                               ; preds = %10
  %65 = add nsw i32 %12, 1
  call void %4(ptr noundef nonnull %15, i32 noundef %12) #64
  br label %66

66:                                               ; preds = %64, %63, %35, %28, %26, %22
  %67 = phi ptr [ %13, %26 ], [ %13, %22 ], [ null, %35 ], [ %40, %63 ], [ %13, %28 ], [ %13, %64 ]
  %68 = phi i32 [ %12, %26 ], [ %12, %22 ], [ %12, %35 ], [ %12, %63 ], [ %12, %28 ], [ %65, %64 ]
  %69 = add nuw nsw i64 %11, 1
  %70 = icmp eq i64 %69, %9
  br i1 %70, label %71, label %10, !llvm.loop !20

71:                                               ; preds = %66, %5
  %72 = phi i32 [ 0, %5 ], [ %68, %66 ]
  ret i32 %72
}

; Function Attrs: noreturn nounwind optsize uwtable
define internal void @gs_exit(i32 noundef %0) #8 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @stderr, align 8, !tbaa !7
  %5 = tail call i32 @fflush(ptr noundef %4) #62
  br label %6

6:                                                ; preds = %3, %1
  %7 = load ptr, ptr @gx_device_list, align 8, !tbaa !7
  %8 = icmp eq ptr %7, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %21, %6
  %10 = phi ptr [ %23, %21 ], [ %7, %6 ]
  %11 = phi ptr [ %22, %21 ], [ @gx_device_list, %6 ]
  %12 = getelementptr inbounds %struct.gx_device_s, ptr %10, i64 0, i32 10
  %13 = load i32, ptr %12, align 4, !tbaa !22
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.gx_device_s, ptr %10, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !25
  %18 = getelementptr inbounds %struct.gx_device_procs_s, ptr %17, i64 0, i32 4
  %19 = load ptr, ptr %18, align 8, !tbaa !26
  %20 = tail call i32 %19(ptr noundef nonnull %10) #64
  br label %21

21:                                               ; preds = %15, %9
  %22 = getelementptr inbounds ptr, ptr %11, i64 1
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %9, !llvm.loop !28

25:                                               ; preds = %21, %6
  tail call void @exit(i32 noundef %0) #68
  unreachable
}

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal void @gp_init() #10 {
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @gs_get_clock(ptr nocapture noundef writeonly %0) #0 {
  %2 = alloca %struct.timeval, align 8
  %3 = alloca %struct.timezone, align 4
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %4 = call i32 @gettimeofday(ptr noundef nonnull %2, ptr noundef nonnull %3) #64
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  tail call void @perror(ptr noundef nonnull @.str.25) #66
  tail call void @exit(i32 noundef -1) #68
  unreachable

7:                                                ; preds = %1
  %8 = load i64, ptr %2, align 8, !tbaa !29
  %9 = add nsw i64 %8, -315576000
  %10 = load i32, ptr %3, align 4, !tbaa !31
  %11 = mul nsw i32 %10, 60
  %12 = sext i32 %11 to i64
  %13 = sub i64 %9, %12
  %14 = call ptr @localtime(ptr noundef nonnull %2) #64
  %15 = getelementptr inbounds %struct.tm, ptr %14, i64 0, i32 8
  %16 = load i32, ptr %15, align 8, !tbaa !33
  %17 = icmp eq i32 %16, 0
  %18 = add nsw i64 %13, 3600
  %19 = select i1 %17, i64 %13, i64 %18
  %20 = sdiv i64 %19, 86400
  store i64 %20, ptr %0, align 8, !tbaa !18
  %21 = srem i64 %19, 86400
  %22 = mul nsw i64 %21, 1000
  %23 = getelementptr inbounds %struct.timeval, ptr %2, i64 0, i32 1
  %24 = load i64, ptr %23, align 8, !tbaa !35
  %25 = sdiv i64 %24, 1000
  %26 = add nsw i64 %22, %25
  %27 = getelementptr inbounds i64, ptr %0, i64 1
  store i64 %26, ptr %27, align 8, !tbaa !18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @gettimeofday(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare void @perror(ptr nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nounwind optsize
declare ptr @localtime(ptr noundef) local_unnamed_addr #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @gp_file_name_is_absolute(ptr nocapture noundef readonly %0, i32 noundef %1) #12 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = load i8, ptr %0, align 1, !tbaa !13
  %6 = icmp eq i8 %5, 47
  %7 = zext i1 %6 to i32
  br label %8

8:                                                ; preds = %4, %2
  %9 = phi i32 [ 0, %2 ], [ %7, %4 ]
  ret i32 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal nonnull ptr @gp_file_name_concat_string(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readnone %2, i32 noundef %3) #12 {
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = add i32 %1, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, ptr %0, i64 %8
  %10 = load i8, ptr %9, align 1, !tbaa !13
  %11 = icmp eq i8 %10, 47
  br i1 %11, label %13, label %12

12:                                               ; preds = %6, %4
  br label %13

13:                                               ; preds = %12, %6
  %14 = phi ptr [ @.str.2.26, %12 ], [ @.str.1.27, %6 ]
  ret ptr %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal ptr @strupr(ptr noundef readnone returned %0) #10 {
  ret ptr %0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal noalias ptr @trace_open_map(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1) #10 {
  ret ptr null
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @trace_name(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2, i32 noundef %3) #10 {
  ret i32 -1
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable
define internal void @alloc_init(ptr noundef %0, ptr noundef %1, i32 noundef %2) #13 {
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(392) @as_current, i8 0, i64 392, i1 false)
  store i32 %2, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 2), align 8, !tbaa !36
  store i32 8, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 3), align 4, !tbaa !39
  store ptr %0, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 4), align 8, !tbaa !40
  store ptr %1, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 5), align 8, !tbaa !41
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #14

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: write, inaccessiblemem: none) uwtable
define internal void @alloc_status(ptr nocapture noundef writeonly %0, ptr nocapture noundef writeonly %1) #15 {
  %3 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  %4 = load ptr, ptr @as_current, align 8, !tbaa !43
  %5 = ptrtoint ptr %3 to i64
  %6 = ptrtoint ptr %4 to i64
  %7 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 3), align 8, !tbaa !44
  %8 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %9 = ptrtoint ptr %7 to i64
  %10 = ptrtoint ptr %8 to i64
  %11 = load i64, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 6), align 8, !tbaa !46
  %12 = add i64 %5, %9
  %13 = add i64 %6, %10
  %14 = sub i64 %12, %13
  %15 = add nsw i64 %14, %11
  store i64 %15, ptr %0, align 8, !tbaa !18
  %16 = sub i64 %9, %6
  %17 = load i64, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 7), align 8, !tbaa !47
  %18 = add nsw i64 %16, %17
  store i64 %18, ptr %1, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc(i32 noundef %0, i32 noundef %1, ptr noundef %2) #0 {
  %4 = mul i32 %1, %0
  %5 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 3), align 4, !tbaa !39
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 4), align 8, !tbaa !40
  %9 = add i32 %4, 24
  %10 = tail call ptr %8(i32 noundef 1, i32 noundef %9, ptr noundef %2) #64
  %11 = icmp eq ptr %10, null
  br i1 %11, label %19, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  %14 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 10), align 8, !tbaa !48
  store ptr %14, ptr %10, align 8, !tbaa !49
  %15 = getelementptr inbounds %struct.alloc_block_s, ptr %10, i64 0, i32 1
  store i32 %4, ptr %15, align 8, !tbaa !51
  %16 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  %17 = getelementptr inbounds %struct.alloc_block_s, ptr %10, i64 0, i32 2
  store i32 %16, ptr %17, align 4, !tbaa !53
  %18 = getelementptr inbounds %struct.alloc_block_s, ptr %10, i64 0, i32 3
  store ptr @as_current, ptr %18, align 8, !tbaa !54
  store ptr %10, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 10), align 8, !tbaa !48
  br label %53

19:                                               ; preds = %7, %3
  %20 = add i32 %4, 7
  %21 = and i32 %20, -8
  %22 = icmp ult i32 %21, 256
  br i1 %22, label %23, label %31

23:                                               ; preds = %19
  %24 = lshr i32 %20, 3
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.alloc_state_s, ptr @as_current, i64 0, i32 9, i64 %25
  %27 = load ptr, ptr %26, align 8, !tbaa !7
  %28 = icmp eq ptr %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %23
  %30 = load ptr, ptr %27, align 8, !tbaa !7
  store ptr %30, ptr %26, align 8, !tbaa !7
  br label %53

31:                                               ; preds = %23, %19
  %32 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %33 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  %34 = ptrtoint ptr %32 to i64
  %35 = ptrtoint ptr %33 to i64
  %36 = sub i64 %34, %35
  %37 = trunc i64 %36 to i32
  %38 = icmp ugt i32 %21, %37
  br i1 %38, label %39, label %42

39:                                               ; preds = %31
  %40 = tail call i32 @alloc_add_chunk(ptr noundef nonnull @as_current) #62, !range !55
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %53, label %42

42:                                               ; preds = %39, %31
  %43 = icmp eq i32 %1, 1
  br i1 %43, label %44, label %49

44:                                               ; preds = %42
  %45 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %46 = zext i32 %4 to i64
  %47 = sub nsw i64 0, %46
  %48 = getelementptr inbounds i8, ptr %45, i64 %47
  store ptr %48, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  br label %53

49:                                               ; preds = %42
  %50 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  %51 = zext i32 %21 to i64
  %52 = getelementptr inbounds i8, ptr %50, i64 %51
  store ptr %52, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  br label %53

53:                                               ; preds = %49, %44, %39, %29, %12
  %54 = phi ptr [ %48, %44 ], [ %50, %49 ], [ %27, %29 ], [ %13, %12 ], [ null, %39 ]
  ret ptr %54
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @alloc_add_chunk(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %2, align 8, !tbaa !40
  %4 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 2
  %5 = load i32, ptr %4, align 8, !tbaa !36
  %6 = tail call ptr %3(i32 noundef 1, i32 noundef %5, ptr noundef nonnull @.str.5.38) #64
  %7 = icmp eq ptr %6, null
  br i1 %7, label %48, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 6
  %10 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  %12 = load ptr, ptr @as_current, align 8, !tbaa !43
  %13 = ptrtoint ptr %11 to i64
  %14 = ptrtoint ptr %12 to i64
  %15 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 3), align 8, !tbaa !44
  %16 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %17 = ptrtoint ptr %15 to i64
  %18 = ptrtoint ptr %16 to i64
  %19 = load i64, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 6), align 8, !tbaa !46
  %20 = add i64 %13, %17
  %21 = add i64 %14, %18
  %22 = sub i64 %20, %21
  %23 = add nsw i64 %22, %19
  store i64 %23, ptr %9, align 8, !tbaa !18
  %24 = sub i64 %17, %14
  %25 = load i64, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 7), align 8, !tbaa !47
  %26 = add nsw i64 %24, %25
  store i64 %26, ptr %10, align 8, !tbaa !18
  %27 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 8
  %28 = load i32, ptr %27, align 8, !tbaa !56
  %29 = add i32 %28, 1
  store i32 %29, ptr %27, align 8, !tbaa !56
  %30 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !57
  %32 = icmp eq ptr %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %8
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %31, ptr noundef nonnull align 8 dereferenceable(48) %0, i64 48, i1 false), !tbaa.struct !58
  %34 = load ptr, ptr %30, align 8, !tbaa !57
  br label %35

35:                                               ; preds = %33, %8
  %36 = phi ptr [ %34, %33 ], [ null, %8 ]
  %37 = getelementptr inbounds i8, ptr %6, i64 48
  %38 = getelementptr inbounds %struct.alloc_chunk_s, ptr %0, i64 0, i32 1
  store ptr %37, ptr %38, align 8, !tbaa !42
  store ptr %37, ptr %0, align 8, !tbaa !43
  %39 = load i32, ptr %4, align 8, !tbaa !36
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, ptr %6, i64 %40
  %42 = getelementptr inbounds %struct.alloc_chunk_s, ptr %0, i64 0, i32 2
  store ptr %41, ptr %42, align 8, !tbaa !45
  %43 = getelementptr inbounds %struct.alloc_chunk_s, ptr %0, i64 0, i32 3
  store ptr %41, ptr %43, align 8, !tbaa !44
  %44 = getelementptr inbounds %struct.alloc_chunk_s, ptr %0, i64 0, i32 5
  store ptr %36, ptr %44, align 8, !tbaa !59
  %45 = getelementptr inbounds %struct.alloc_state_s, ptr %0, i64 0, i32 12
  %46 = load i32, ptr %45, align 8, !tbaa !52
  %47 = getelementptr inbounds %struct.alloc_chunk_s, ptr %0, i64 0, i32 4
  store i32 %46, ptr %47, align 8, !tbaa !60
  store ptr %6, ptr %30, align 8, !tbaa !57
  br label %48

48:                                               ; preds = %35, %1
  %49 = phi i32 [ 1, %35 ], [ 0, %1 ]
  ret i32 %49
}

; Function Attrs: nounwind optsize uwtable
define internal void @alloc_free(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readnone %3) #0 {
  %5 = mul i32 %2, %1
  %6 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 3), align 4, !tbaa !39
  %7 = icmp ult i32 %5, %6
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @alloc_free_large(ptr noundef %0, i32 noundef %5, ptr poison) #62
  br label %90

9:                                                ; preds = %4
  %10 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %11 = icmp eq ptr %10, %0
  br i1 %11, label %12, label %26

12:                                               ; preds = %9
  %13 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  %14 = icmp ne i32 %13, 0
  %15 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 4), align 8
  %16 = icmp slt i32 %15, %13
  %17 = select i1 %14, i1 %16, i1 false
  br i1 %17, label %18, label %23

18:                                               ; preds = %12
  %19 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 11), align 8, !tbaa !61
  %20 = getelementptr inbounds %struct.alloc_chunk_s, ptr %19, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !62
  %22 = icmp ugt ptr %21, %0
  br i1 %22, label %23, label %90

23:                                               ; preds = %18, %12
  %24 = zext i32 %5 to i64
  %25 = getelementptr inbounds i8, ptr %0, i64 %24
  store ptr %25, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  br label %90

26:                                               ; preds = %9
  %27 = add i32 %5, 7
  %28 = and i32 %27, -8
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, ptr %0, i64 %29
  %31 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  %32 = icmp eq ptr %30, %31
  br i1 %32, label %33, label %45

33:                                               ; preds = %26
  %34 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  %35 = icmp ne i32 %34, 0
  %36 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 4), align 8
  %37 = icmp slt i32 %36, %34
  %38 = select i1 %35, i1 %37, i1 false
  br i1 %38, label %39, label %44

39:                                               ; preds = %33
  %40 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 11), align 8, !tbaa !61
  %41 = getelementptr inbounds %struct.alloc_chunk_s, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !64
  %43 = icmp ugt ptr %42, %0
  br i1 %43, label %90, label %44

44:                                               ; preds = %39, %33
  store ptr %0, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  br label %90

45:                                               ; preds = %26
  %46 = load ptr, ptr @as_current, align 8, !tbaa !43
  %47 = icmp ule ptr %46, %0
  %48 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 3), align 8
  %49 = icmp ugt ptr %48, %0
  %50 = select i1 %47, i1 %49, i1 false
  br i1 %50, label %80, label %51

51:                                               ; preds = %45
  %52 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  %53 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 5), align 8, !tbaa !65
  %54 = icmp eq ptr %53, null
  br i1 %54, label %90, label %55

55:                                               ; preds = %76, %51
  %56 = phi ptr [ %78, %76 ], [ %53, %51 ]
  %57 = getelementptr inbounds %struct.alloc_chunk_s, ptr %56, i64 0, i32 4
  %58 = load i32, ptr %57, align 8, !tbaa !66
  %59 = sub nsw i32 %58, %52
  switch i32 %59, label %90 [
    i32 0, label %60
    i32 -1, label %71
  ]

60:                                               ; preds = %55
  %61 = load ptr, ptr %56, align 8, !tbaa !67
  %62 = icmp ugt ptr %61, %0
  br i1 %62, label %76, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.alloc_chunk_s, ptr %56, i64 0, i32 3
  %65 = load ptr, ptr %64, align 8, !tbaa !68
  %66 = icmp ugt ptr %65, %0
  br i1 %66, label %67, label %76

67:                                               ; preds = %63
  %.lcssa1 = phi ptr [ %56, %63 ]
  %68 = getelementptr inbounds %struct.alloc_chunk_s, ptr %.lcssa1, i64 0, i32 1
  %69 = load ptr, ptr %68, align 8, !tbaa !69
  %70 = icmp ugt ptr %69, %0
  br i1 %70, label %82, label %90

71:                                               ; preds = %55
  %72 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 11), align 8, !tbaa !61
  %73 = getelementptr inbounds %struct.alloc_chunk_s, ptr %72, i64 0, i32 1
  %74 = load ptr, ptr %73, align 8, !tbaa !64
  %75 = icmp ugt ptr %74, %0
  br i1 %75, label %82, label %90

76:                                               ; preds = %63, %60
  %77 = getelementptr inbounds %struct.alloc_chunk_s, ptr %56, i64 0, i32 5
  %78 = load ptr, ptr %77, align 8, !tbaa !65
  %79 = icmp eq ptr %78, null
  br i1 %79, label %90, label %55

80:                                               ; preds = %45
  %81 = icmp ugt ptr %31, %0
  br i1 %81, label %82, label %90

82:                                               ; preds = %80, %71, %67
  %83 = add i32 %28, -1
  %84 = icmp ult i32 %83, 255
  br i1 %84, label %85, label %90

85:                                               ; preds = %82
  %86 = lshr i32 %27, 3
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.alloc_state_s, ptr @as_current, i64 0, i32 9, i64 %87
  %89 = load ptr, ptr %88, align 8, !tbaa !7
  store ptr %89, ptr %0, align 8, !tbaa !7
  store ptr %0, ptr %88, align 8, !tbaa !7
  br label %90

90:                                               ; preds = %85, %82, %80, %76, %71, %67, %55, %51, %44, %39, %23, %18, %8
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @alloc_free_large(ptr noundef readonly %0, i32 noundef %1, ptr nocapture readnone %2) #0 {
  %4 = getelementptr inbounds i8, ptr %0, i64 -8
  %5 = load ptr, ptr %4, align 8, !tbaa !54
  %6 = getelementptr inbounds i8, ptr %0, i64 -12
  %7 = load i32, ptr %6, align 4, !tbaa !53
  %8 = getelementptr inbounds %struct.alloc_state_s, ptr %5, i64 0, i32 12
  %9 = load i32, ptr %8, align 8, !tbaa !52
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %25

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.alloc_state_s, ptr %5, i64 0, i32 10
  br label %13

13:                                               ; preds = %17, %11
  %14 = phi ptr [ %12, %11 ], [ %15, %17 ]
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = icmp eq ptr %15, null
  br i1 %16, label %25, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  %19 = icmp eq ptr %18, %0
  br i1 %19, label %20, label %13, !llvm.loop !70

20:                                               ; preds = %17
  %.lcssa1 = phi ptr [ %14, %17 ]
  %.lcssa = phi ptr [ %15, %17 ]
  %21 = load ptr, ptr %.lcssa, align 8, !tbaa !49
  store ptr %21, ptr %.lcssa1, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.alloc_state_s, ptr %5, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !41
  %24 = add i32 %1, 24
  tail call void %23(ptr noundef nonnull %.lcssa, i32 noundef 1, i32 noundef %24, ptr noundef nonnull @.str.6.39) #64
  br label %25

25:                                               ; preds = %20, %13, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_grow(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4) #0 {
  %6 = mul i32 %3, %1
  %7 = mul i32 %3, %2
  %8 = icmp eq i32 %7, %6
  br i1 %8, label %50, label %9

9:                                                ; preds = %5
  %10 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 3), align 4, !tbaa !39
  %11 = icmp ult i32 %7, %10
  br i1 %11, label %12, label %45

12:                                               ; preds = %9
  %13 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %14 = icmp eq ptr %13, %0
  %15 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  br i1 %14, label %16, label %28

16:                                               ; preds = %12
  %17 = sub i32 %7, %6
  %18 = zext i32 %17 to i64
  %19 = ptrtoint ptr %0 to i64
  %20 = ptrtoint ptr %15 to i64
  %21 = sub i64 %19, %20
  %22 = icmp slt i64 %21, %18
  br i1 %22, label %28, label %23

23:                                               ; preds = %16
  %24 = sub nsw i64 0, %18
  %25 = getelementptr inbounds i8, ptr %0, i64 %24
  store ptr %25, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %26 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %25, ptr align 1 %0, i64 %26, i1 false)
  %27 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  br label %50

28:                                               ; preds = %16, %12
  %29 = add i32 %6, 7
  %30 = and i32 %29, -8
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, ptr %0, i64 %31
  %33 = icmp eq ptr %32, %15
  br i1 %33, label %34, label %45

34:                                               ; preds = %28
  %35 = add i32 %7, 7
  %36 = and i32 %35, -8
  %37 = sub i32 %36, %30
  %38 = zext i32 %37 to i64
  %39 = ptrtoint ptr %13 to i64
  %40 = ptrtoint ptr %15 to i64
  %41 = sub i64 %39, %40
  %42 = icmp slt i64 %41, %38
  br i1 %42, label %45, label %43

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8, ptr %15, i64 %38
  store ptr %44, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 1), align 8, !tbaa !42
  br label %50

45:                                               ; preds = %34, %28, %9
  %46 = tail call ptr @alloc(i32 noundef %2, i32 noundef %3, ptr noundef %4) #62
  %47 = icmp eq ptr %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %45
  %49 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %46, ptr align 1 %0, i64 %49, i1 false)
  tail call void @alloc_free(ptr noundef %0, i32 noundef %1, i32 noundef %3, ptr noundef %4) #62
  br label %50

50:                                               ; preds = %48, %45, %43, %23, %5
  %51 = phi ptr [ %46, %48 ], [ %0, %5 ], [ null, %45 ], [ %0, %43 ], [ %27, %23 ]
  ret ptr %51
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_shrink(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4) #0 {
  %6 = mul i32 %3, %1
  %7 = mul i32 %3, %2
  %8 = icmp eq i32 %7, %6
  br i1 %8, label %44, label %9

9:                                                ; preds = %5
  %10 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 3), align 4, !tbaa !39
  %11 = icmp ult i32 %6, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %9
  %13 = tail call ptr @alloc(i32 noundef %2, i32 noundef %3, ptr noundef %4) #62
  %14 = icmp eq ptr %13, null
  br i1 %14, label %44, label %15

15:                                               ; preds = %12
  %16 = zext i32 %7 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %13, ptr align 1 %0, i64 %16, i1 false)
  tail call void @alloc_free(ptr noundef %0, i32 noundef %1, i32 noundef %3, ptr noundef %4) #62
  br label %44

17:                                               ; preds = %9
  %18 = load ptr, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  %19 = icmp eq ptr %18, %0
  br i1 %19, label %20, label %36

20:                                               ; preds = %17
  %21 = zext i32 %6 to i64
  %22 = getelementptr inbounds i8, ptr %0, i64 %21
  %23 = icmp eq i32 %7, 0
  br i1 %23, label %34, label %24

24:                                               ; preds = %20
  %25 = zext i32 %7 to i64
  %26 = getelementptr inbounds i8, ptr %0, i64 %25
  br label %27

27:                                               ; preds = %27, %24
  %28 = phi ptr [ %32, %27 ], [ %22, %24 ]
  %29 = phi ptr [ %30, %27 ], [ %26, %24 ]
  %30 = getelementptr inbounds i8, ptr %29, i64 -1
  %31 = load i8, ptr %30, align 1, !tbaa !13
  %32 = getelementptr inbounds i8, ptr %28, i64 -1
  store i8 %31, ptr %32, align 1, !tbaa !13
  %33 = icmp ugt ptr %30, %0
  br i1 %33, label %27, label %34, !llvm.loop !71

34:                                               ; preds = %27, %20
  %35 = phi ptr [ %22, %20 ], [ %32, %27 ]
  store ptr %35, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 0, i32 2), align 8, !tbaa !45
  br label %44

36:                                               ; preds = %17
  %37 = add i32 %7, 7
  %38 = and i32 %37, -8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, ptr %0, i64 %39
  %41 = add i32 %6, 7
  %42 = and i32 %41, -8
  %43 = sub i32 %42, %38
  tail call void @alloc_free(ptr noundef %40, i32 noundef 1, i32 noundef %43, ptr noundef nonnull @.str.40) #62
  br label %44

44:                                               ; preds = %36, %34, %15, %12, %5
  %45 = phi ptr [ %0, %5 ], [ %13, %15 ], [ %0, %12 ], [ %35, %34 ], [ %0, %36 ]
  ret ptr %45
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @alloc_save_state() #0 {
  %1 = tail call ptr @alloc(i32 noundef 1, i32 noundef 400, ptr noundef nonnull @.str.1.41) #62
  %2 = icmp eq ptr %1, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %0
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(392) %1, ptr noundef nonnull align 8 dereferenceable(392) @as_current, i64 392, i1 false), !tbaa.struct !72
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(264) getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 9), i8 0, i64 264, i1 false)
  store ptr %1, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 11), align 8, !tbaa !61
  %4 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  %5 = add nsw i32 %4, 1
  store i32 %5, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  store ptr null, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 13), align 8, !tbaa !73
  br label %6

6:                                                ; preds = %3, %0
  ret ptr %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @alloc_save_level() #16 {
  %1 = load i32, ptr getelementptr inbounds (%struct.alloc_state_s, ptr @as_current, i64 0, i32 12), align 8, !tbaa !52
  ret i32 %1
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @alloc_is_since_save(ptr noundef readnone %0, ptr noundef readonly %1) #17 {
  %3 = getelementptr inbounds %struct.alloc_save_s, ptr %1, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !74
  %5 = load ptr, ptr %1, align 8, !tbaa !75
  %6 = icmp ugt ptr %5, %0
  br i1 %6, label %20, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.alloc_chunk_s, ptr %1, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !76
  %10 = icmp ugt ptr %9, %0
  br i1 %10, label %11, label %20

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.alloc_chunk_s, ptr %1, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !64
  %14 = icmp ugt ptr %13, %0
  br i1 %14, label %56, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.alloc_chunk_s, ptr %1, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !62
  %18 = icmp ugt ptr %17, %0
  %19 = zext i1 %18 to i32
  br label %56

20:                                               ; preds = %7, %2
  %21 = getelementptr inbounds %struct.alloc_state_s, ptr %1, i64 0, i32 12
  %22 = load i32, ptr %21, align 8, !tbaa !77
  %23 = getelementptr inbounds %struct.alloc_chunk_s, ptr %4, i64 0, i32 4
  %24 = load i32, ptr %23, align 8, !tbaa !66
  %25 = icmp sgt i32 %24, %22
  br i1 %25, label %28, label %26

26:                                               ; preds = %36, %20
  %27 = icmp eq ptr %4, %1
  br i1 %27, label %56, label %42

28:                                               ; preds = %36, %20
  %29 = phi ptr [ %38, %36 ], [ %4, %20 ]
  %30 = load ptr, ptr %29, align 8, !tbaa !67
  %31 = icmp ugt ptr %30, %0
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.alloc_chunk_s, ptr %29, i64 0, i32 3
  %34 = load ptr, ptr %33, align 8, !tbaa !68
  %35 = icmp ugt ptr %34, %0
  br i1 %35, label %56, label %36

36:                                               ; preds = %32, %28
  %37 = getelementptr inbounds %struct.alloc_chunk_s, ptr %29, i64 0, i32 5
  %38 = load ptr, ptr %37, align 8, !tbaa !65
  %39 = getelementptr inbounds %struct.alloc_chunk_s, ptr %38, i64 0, i32 4
  %40 = load i32, ptr %39, align 8, !tbaa !66
  %41 = icmp sgt i32 %40, %22
  br i1 %41, label %28, label %26, !llvm.loop !78

42:                                               ; preds = %52, %26
  %43 = phi ptr [ %54, %52 ], [ %4, %26 ]
  %44 = getelementptr inbounds %struct.alloc_state_s, ptr %43, i64 0, i32 10
  br label %45

45:                                               ; preds = %49, %42
  %46 = phi ptr [ %44, %42 ], [ %47, %49 ]
  %47 = load ptr, ptr %46, align 8, !tbaa !7
  %48 = icmp eq ptr %47, null
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, ptr %47, i64 24
  %51 = icmp eq ptr %50, %0
  br i1 %51, label %56, label %45, !llvm.loop !79

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.alloc_state_s, ptr %43, i64 0, i32 11
  %54 = load ptr, ptr %53, align 8, !tbaa !61
  %55 = icmp eq ptr %54, %1
  br i1 %55, label %56, label %42, !llvm.loop !80

56:                                               ; preds = %52, %49, %32, %26, %15, %11
  %57 = phi i32 [ 0, %11 ], [ %19, %15 ], [ 0, %26 ], [ 1, %49 ], [ 0, %52 ], [ 1, %32 ]
  ret i32 %57
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @alloc_restore_state_check(ptr noundef readonly %0) #17 {
  %2 = getelementptr inbounds %struct.alloc_save_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !74
  br label %4

4:                                                ; preds = %9, %1
  %5 = phi ptr [ %3, %1 ], [ %7, %9 ]
  %6 = getelementptr inbounds %struct.alloc_state_s, ptr %5, i64 0, i32 11
  %7 = load ptr, ptr %6, align 8, !tbaa !61
  %8 = icmp eq ptr %7, %0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = icmp eq ptr %7, null
  br i1 %10, label %11, label %4, !llvm.loop !81

11:                                               ; preds = %9, %4
  %12 = phi i32 [ -1, %9 ], [ 0, %4 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal void @alloc_restore_state(ptr noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.alloc_save_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !74
  %4 = getelementptr inbounds %struct.alloc_state_s, ptr %3, i64 0, i32 11
  %5 = getelementptr inbounds %struct.alloc_state_s, ptr %3, i64 0, i32 1
  %6 = getelementptr inbounds %struct.alloc_state_s, ptr %3, i64 0, i32 10
  %7 = getelementptr inbounds %struct.alloc_state_s, ptr %3, i64 0, i32 5
  %8 = getelementptr inbounds %struct.alloc_state_s, ptr %3, i64 0, i32 13
  br label %9

9:                                                ; preds = %36, %1
  %10 = load ptr, ptr %4, align 8, !tbaa !61
  %11 = load ptr, ptr %5, align 8, !tbaa !57
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %11, ptr noundef nonnull align 8 dereferenceable(48) %3, i64 48, i1 false), !tbaa.struct !58
  %12 = load ptr, ptr %6, align 8, !tbaa !48
  %13 = icmp eq ptr %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %14, %9
  %15 = phi ptr [ %21, %14 ], [ %12, %9 ]
  %16 = load ptr, ptr %15, align 8, !tbaa !49
  store ptr %16, ptr %6, align 8, !tbaa !48
  %17 = load ptr, ptr %7, align 8, !tbaa !41
  %18 = getelementptr inbounds %struct.alloc_block_s, ptr %15, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !51
  %20 = add i32 %19, 24
  tail call void %17(ptr noundef nonnull %15, i32 noundef 1, i32 noundef %20, ptr noundef nonnull @.str.3.42) #64
  %21 = load ptr, ptr %6, align 8, !tbaa !48
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %14, !llvm.loop !82

23:                                               ; preds = %14, %9
  %24 = load ptr, ptr %8, align 8, !tbaa !7
  %25 = icmp eq ptr %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %26, %23
  %27 = phi ptr [ %34, %26 ], [ %24, %23 ]
  %28 = getelementptr inbounds %struct.alloc_change_s, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !83
  %30 = getelementptr inbounds i8, ptr %27, i64 24
  %31 = getelementptr inbounds %struct.alloc_change_s, ptr %27, i64 0, i32 2
  %32 = load i32, ptr %31, align 8, !tbaa !85
  %33 = zext i32 %32 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %29, ptr nonnull align 1 %30, i64 %33, i1 false)
  %34 = load ptr, ptr %27, align 8, !tbaa !7
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %26, !llvm.loop !86

36:                                               ; preds = %26, %23
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(392) %3, ptr noundef nonnull align 8 dereferenceable(392) %10, i64 392, i1 false), !tbaa.struct !72
  tail call void @alloc_free(ptr noundef %10, i32 noundef 1, i32 noundef 400, ptr noundef nonnull @.str.4.43) #62
  %37 = icmp eq ptr %10, %0
  br i1 %37, label %38, label %9, !llvm.loop !87

38:                                               ; preds = %36
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal void @debug_dump_refs(ptr noundef %0, ptr noundef readnone %1, ptr noundef %2) #18 {
  %4 = icmp ult ptr %0, %1
  br i1 %4, label %5, label %52

5:                                                ; preds = %3
  %6 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.15.46, ptr noundef %2) #62
  br label %7

7:                                                ; preds = %48, %5
  %8 = phi ptr [ %50, %48 ], [ %0, %5 ]
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = zext i16 %10 to i32
  %12 = lshr i32 %11, 2
  %13 = and i32 %12, 63
  %14 = icmp ugt i32 %13, 15
  %15 = select i1 %14, i32 9, i32 %13
  %16 = ptrtoint ptr %8 to i64
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.31, i64 noundef %16, i32 noundef %13) #62
  %18 = zext i32 %15 to i64
  %19 = getelementptr inbounds [16 x ptr], ptr @debug_dump_refs.ts, i64 0, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !7
  %21 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.33, ptr noundef %20) #62
  br label %22

22:                                               ; preds = %32, %7
  %23 = phi i32 [ %11, %7 ], [ %34, %32 ]
  %24 = phi ptr [ @.str.30, %7 ], [ %33, %32 ]
  %25 = load i8, ptr %24, align 1, !tbaa !13
  switch i8 %25, label %26 [
    i8 0, label %35
    i8 46, label %32
  ]

26:                                               ; preds = %22
  %27 = sext i8 %25 to i32
  %28 = and i32 %23, 1
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i32 45, i32 %27
  %31 = tail call i32 @putchar(i32 noundef %30) #62
  br label %32

32:                                               ; preds = %26, %22
  %33 = getelementptr inbounds i8, ptr %24, i64 1
  %34 = lshr i32 %23, 1
  br label %22, !llvm.loop !88

35:                                               ; preds = %22
  %36 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 2
  %37 = load i16, ptr %36, align 2, !tbaa !17
  %38 = zext i16 %37 to i32
  %39 = load i64, ptr %8, align 8, !tbaa !18
  %40 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.34, i32 noundef %38, i64 noundef %39) #62
  switch i32 %15, label %48 [
    i32 11, label %41
    i32 5, label %45
  ]

41:                                               ; preds = %35
  %42 = load float, ptr %8, align 8, !tbaa !13
  %43 = fpext float %42 to double
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.35, double noundef %43) #62
  br label %48

45:                                               ; preds = %35
  %46 = load i64, ptr %8, align 8, !tbaa !13
  %47 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.36, i64 noundef %46) #62
  br label %48

48:                                               ; preds = %45, %41, %35
  %49 = tail call i32 @putchar(i32 10)
  %50 = getelementptr inbounds %struct.ref_s, ptr %8, i64 1
  %51 = icmp ult ptr %50, %1
  br i1 %51, label %7, label %52, !llvm.loop !89

52:                                               ; preds = %48, %3
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @dict_create(i32 noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = tail call i32 @llvm.umax.i32(i32 %0, i32 1)
  %4 = add i32 %3, 1
  %5 = tail call ptr @alloc(i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.59) #64
  %6 = icmp eq ptr %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %2
  %8 = tail call ptr @alloc(i32 noundef %4, i32 noundef 32, ptr noundef nonnull @.str.1.60) #64
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  tail call void @alloc_free(ptr noundef nonnull %5, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.59) #64
  br label %30

11:                                               ; preds = %7
  store i64 0, ptr %5, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  store i16 20, ptr %12, align 8, !tbaa !90
  %13 = getelementptr inbounds %struct.dict_s, ptr %5, i64 0, i32 1
  store ptr %8, ptr %13, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.dict_s, ptr %5, i64 0, i32 1, i32 1
  store i16 770, ptr %14, align 8, !tbaa !92
  %15 = trunc i32 %4 to i16
  %16 = shl i16 %15, 1
  %17 = getelementptr inbounds %struct.dict_s, ptr %5, i64 0, i32 1, i32 2
  store i16 %16, ptr %17, align 2, !tbaa !93
  store ptr %5, ptr %1, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 778, ptr %18, align 8, !tbaa !14
  %19 = icmp eq i32 %4, 0
  br i1 %19, label %30, label %20

20:                                               ; preds = %11
  %21 = load ptr, ptr %13, align 8, !tbaa !13
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi ptr [ %28, %22 ], [ %21, %20 ]
  %24 = phi i32 [ %25, %22 ], [ %4, %20 ]
  %25 = add i32 %24, -1
  %26 = getelementptr inbounds %struct.dict_s, ptr %23, i64 0, i32 1, i32 1
  store i16 32, ptr %26, align 8, !tbaa !94
  %27 = getelementptr inbounds %struct.ref_s, ptr %23, i64 0, i32 1
  store i16 32, ptr %27, align 8, !tbaa !96
  %28 = getelementptr inbounds %struct.dict_s, ptr %23, i64 1
  %29 = icmp eq i32 %25, 0
  br i1 %29, label %30, label %22, !llvm.loop !97

30:                                               ; preds = %22, %11, %10, %2
  %31 = phi i32 [ -25, %10 ], [ -25, %2 ], [ 0, %11 ], [ 0, %22 ]
  ret i32 %31
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #19

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal nonnull ptr @dict_access_ref(ptr nocapture noundef readonly %0) #12 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = getelementptr inbounds %struct.dict_s, ptr %2, i64 0, i32 1
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @dict_lookup(ptr noundef readnone %0, ptr noundef readonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = alloca %struct.ref_s, align 8
  %6 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = lshr i16 %7, 2
  %9 = and i16 %8, 63
  %10 = zext i16 %9 to i32
  switch i32 %10, label %27 [
    i32 7, label %11
    i32 13, label %19
  ]

11:                                               ; preds = %4
  %12 = load ptr, ptr %2, align 8, !tbaa !13
  br label %13

13:                                               ; preds = %19, %11
  %14 = phi ptr [ %26, %19 ], [ %12, %11 ]
  %15 = getelementptr inbounds %struct.name_s.4, ptr %14, i64 0, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !98
  %17 = zext i16 %16 to i32
  %18 = mul nuw nsw i32 %17, 40503
  br label %31

19:                                               ; preds = %4
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #65
  %20 = load ptr, ptr %2, align 8, !tbaa !13
  %21 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 2
  %22 = load i16, ptr %21, align 2, !tbaa !17
  %23 = zext i16 %22 to i32
  %24 = call i32 @name_ref(ptr noundef %20, i32 noundef %23, ptr noundef nonnull %5, i32 noundef 1) #64
  %25 = icmp sgt i32 %24, -1
  %26 = load ptr, ptr %5, align 8
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #65
  br i1 %25, label %13, label %89

27:                                               ; preds = %4
  %28 = icmp ugt i16 %9, 15
  %29 = mul nuw nsw i32 %10, 99
  %30 = select i1 %28, i32 891, i32 %29
  br label %31

31:                                               ; preds = %27, %13
  %32 = phi ptr [ undef, %27 ], [ %14, %13 ]
  %33 = phi i32 [ -1, %27 ], [ 7, %13 ]
  %34 = phi i32 [ %30, %27 ], [ %18, %13 ]
  br label %35

35:                                               ; preds = %83, %31
  %36 = phi i32 [ 1, %31 ], [ %84, %83 ]
  %37 = phi ptr [ %1, %31 ], [ %85, %83 ]
  %38 = load ptr, ptr %37, align 8, !tbaa !13
  %39 = getelementptr inbounds %struct.dict_s, ptr %38, i64 0, i32 1
  %40 = getelementptr inbounds %struct.dict_s, ptr %38, i64 0, i32 1, i32 2
  %41 = load i16, ptr %40, align 2, !tbaa !93
  %42 = lshr i16 %41, 1
  %43 = zext i16 %42 to i32
  %44 = add nsw i32 %43, -1
  %45 = load ptr, ptr %39, align 8, !tbaa !13
  %46 = urem i32 %34, %44
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.dict_s, ptr %45, i64 %47
  %49 = getelementptr inbounds %struct.dict_s, ptr %48, i64 2
  %50 = zext i16 %42 to i64
  %51 = getelementptr inbounds %struct.dict_s, ptr %45, i64 %50
  br label %52

52:                                               ; preds = %71, %35
  %53 = phi ptr [ %51, %71 ], [ %49, %35 ]
  %54 = phi i1 [ false, %71 ], [ true, %35 ]
  br label %55

55:                                               ; preds = %78, %52
  %56 = phi ptr [ %53, %52 ], [ %57, %78 ]
  %57 = getelementptr inbounds %struct.dict_s, ptr %56, i64 -1
  %58 = getelementptr %struct.dict_s, ptr %56, i64 -1, i32 0, i32 1
  %59 = load i16, ptr %58, align 8, !tbaa !96
  %60 = lshr i16 %59, 2
  %61 = and i16 %60, 63
  %62 = zext i16 %61 to i32
  %63 = icmp eq i32 %33, %62
  br i1 %63, label %64, label %67

64:                                               ; preds = %55
  %65 = load ptr, ptr %57, align 8, !tbaa !13
  %66 = icmp eq ptr %65, %32
  br i1 %66, label %87, label %78

67:                                               ; preds = %55
  %68 = icmp eq i16 %61, 8
  br i1 %68, label %69, label %75

69:                                               ; preds = %67
  %.lcssa2 = phi ptr [ %56, %67 ]
  %.lcssa = phi ptr [ %57, %67 ]
  %70 = icmp eq ptr %.lcssa, %45
  br i1 %70, label %71, label %79

71:                                               ; preds = %69
  br i1 %54, label %52, label %72

72:                                               ; preds = %71
  %73 = icmp sgt i32 %36, 0
  %74 = select i1 %73, i32 -2, i32 %36
  br label %83

75:                                               ; preds = %67
  %76 = call i32 (ptr, ptr, ...) @obj_eq(ptr noundef nonnull %57, ptr noundef %2) #64
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %87

78:                                               ; preds = %75, %64
  br label %55

79:                                               ; preds = %69
  %.lcssa2.lcssa = phi ptr [ %.lcssa2, %69 ]
  %80 = icmp sgt i32 %36, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %79
  %82 = getelementptr %struct.dict_s, ptr %.lcssa2.lcssa, i64 -1, i32 1
  store ptr %82, ptr %3, align 8, !tbaa !7
  br label %83

83:                                               ; preds = %81, %79, %72
  %84 = phi i32 [ %36, %79 ], [ 0, %81 ], [ %74, %72 ]
  %85 = getelementptr inbounds %struct.ref_s, ptr %37, i64 -1
  %86 = icmp ult ptr %85, %0
  br i1 %86, label %89, label %35, !llvm.loop !100

87:                                               ; preds = %75, %64
  %.lcssa3 = phi ptr [ %56, %75 ], [ %56, %64 ]
  %88 = getelementptr %struct.dict_s, ptr %.lcssa3, i64 -1, i32 1
  store ptr %88, ptr %3, align 8, !tbaa !7
  br label %89

89:                                               ; preds = %87, %83, %19
  %90 = phi i32 [ %24, %19 ], [ 1, %87 ], [ %84, %83 ]
  ret i32 %90
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @dict_put(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2) #0 {
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  %5 = call i32 @dict_lookup(ptr noundef %0, ptr noundef %0, ptr noundef %1, ptr noundef nonnull %4) #62
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = load ptr, ptr %4, align 8, !tbaa !7
  br label %40

9:                                                ; preds = %3
  %10 = load ptr, ptr %0, align 8, !tbaa !13
  %11 = load i64, ptr %10, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.dict_s, ptr %10, i64 0, i32 1, i32 2
  %13 = load i16, ptr %12, align 2, !tbaa !93
  %14 = lshr i16 %13, 1
  %15 = zext i16 %14 to i64
  %16 = add nsw i64 %15, -1
  %17 = icmp eq i64 %11, %16
  br i1 %17, label %42, label %18

18:                                               ; preds = %9
  %19 = add nsw i64 %11, 1
  store i64 %19, ptr %10, align 8, !tbaa !13
  %20 = load ptr, ptr %4, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.ref_s, ptr %20, i64 -1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !101
  %22 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  %23 = load i16, ptr %22, align 8, !tbaa !14
  %24 = and i16 %23, 252
  %25 = icmp eq i16 %24, 28
  br i1 %25, label %26, label %40

26:                                               ; preds = %18
  %27 = load ptr, ptr %1, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.name_s.4, ptr %27, i64 0, i32 4
  %29 = load ptr, ptr %28, align 8, !tbaa !104
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %38

31:                                               ; preds = %26
  %32 = load ptr, ptr @dstack, align 8, !tbaa !13
  %33 = icmp eq ptr %10, %32
  br i1 %33, label %37, label %34

34:                                               ; preds = %31
  %35 = load ptr, ptr getelementptr inbounds ([0 x %struct.ref_s], ptr @dstack, i64 0, i64 1), align 8, !tbaa !13
  %36 = icmp eq ptr %10, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %34, %31
  br label %38

38:                                               ; preds = %37, %34, %26
  %39 = phi ptr [ %20, %37 ], [ inttoptr (i64 1 to ptr), %34 ], [ inttoptr (i64 1 to ptr), %26 ]
  store ptr %39, ptr %28, align 8, !tbaa !104
  br label %40

40:                                               ; preds = %38, %18, %7
  %41 = phi ptr [ %8, %7 ], [ %20, %38 ], [ %20, %18 ]
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %41, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %42

42:                                               ; preds = %40, %9
  %43 = phi i32 [ 0, %40 ], [ -2, %9 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  ret i32 %43
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @dict_length(ptr nocapture noundef readonly %0) #20 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = load i64, ptr %2, align 8, !tbaa !13
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @dict_maxlength(ptr nocapture noundef readonly %0) #20 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = getelementptr inbounds %struct.dict_s, ptr %2, i64 0, i32 1, i32 2
  %4 = load i16, ptr %3, align 2, !tbaa !93
  %5 = lshr i16 %4, 1
  %6 = zext i16 %5 to i32
  %7 = add nsw i32 %6, -1
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @dict_copy(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.dict_s, ptr %3, i64 0, i32 1, i32 2
  %5 = load i16, ptr %4, align 2, !tbaa !93
  %6 = icmp ult i16 %5, 2
  br i1 %6, label %27, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.dict_s, ptr %3, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !13
  %10 = lshr i16 %5, 1
  %11 = zext i16 %10 to i32
  br label %12

12:                                               ; preds = %24, %7
  %13 = phi i32 [ %15, %24 ], [ %11, %7 ]
  %14 = phi ptr [ %25, %24 ], [ %9, %7 ]
  %15 = add nsw i32 %13, -1
  %16 = getelementptr inbounds %struct.ref_s, ptr %14, i64 0, i32 1
  %17 = load i16, ptr %16, align 8, !tbaa !96
  %18 = and i16 %17, 252
  %19 = icmp eq i16 %18, 32
  br i1 %19, label %24, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.dict_s, ptr %14, i64 0, i32 1
  %22 = tail call i32 @dict_put(ptr noundef %1, ptr noundef nonnull %14, ptr noundef nonnull %21) #62, !range !105
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %20, %12
  %25 = getelementptr inbounds %struct.dict_s, ptr %14, i64 1
  %26 = icmp eq i32 %15, 0
  br i1 %26, label %27, label %12, !llvm.loop !106

27:                                               ; preds = %24, %20, %2
  %28 = phi i32 [ 0, %2 ], [ 0, %24 ], [ %22, %20 ]
  ret i32 %28
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @dict_resize(ptr nocapture noundef readonly %0, i32 noundef %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  %4 = load ptr, ptr %0, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %5 = call i32 @dict_create(i32 noundef %1, ptr noundef nonnull %3) #62, !range !107
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2
  %8 = call i32 @dict_copy(ptr noundef nonnull %0, ptr noundef nonnull %3) #62
  %9 = getelementptr inbounds %struct.dict_s, ptr %4, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !13
  %11 = load ptr, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.dict_s, ptr %11, i64 0, i32 1, i32 2
  %13 = load i16, ptr %12, align 2, !tbaa !93
  %14 = lshr i16 %13, 1
  %15 = zext i16 %14 to i32
  %16 = add nsw i32 %15, -1
  call void @alloc_free(ptr noundef %10, i32 noundef %16, i32 noundef 32, ptr noundef nonnull @.str.2.61) #64
  %17 = load ptr, ptr %3, align 8, !tbaa !13
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(32) %17, i64 32, i1 false), !tbaa.struct !108
  call void @alloc_free(ptr noundef %17, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.3.62) #64
  br label %18

18:                                               ; preds = %7, %2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @dict_first(ptr nocapture noundef readonly %0) #20 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  %3 = getelementptr inbounds %struct.dict_s, ptr %2, i64 0, i32 1, i32 2
  %4 = load i16, ptr %3, align 2, !tbaa !93
  %5 = lshr i16 %4, 1
  %6 = zext i16 %5 to i32
  ret i32 %6
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @dict_next(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef writeonly %2) #21 {
  %4 = load ptr, ptr %0, align 8, !tbaa !13
  %5 = getelementptr inbounds %struct.dict_s, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %struct.dict_s, ptr %6, i64 %7
  br label %9

9:                                                ; preds = %13, %3
  %10 = phi i32 [ %1, %3 ], [ %14, %13 ]
  %11 = phi ptr [ %8, %3 ], [ %15, %13 ]
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = add nsw i32 %10, -1
  %15 = getelementptr inbounds %struct.dict_s, ptr %11, i64 -1
  %16 = getelementptr %struct.dict_s, ptr %11, i64 -1, i32 0, i32 1
  %17 = load i16, ptr %16, align 8, !tbaa !96
  %18 = and i16 %17, 252
  %19 = icmp eq i16 %18, 32
  br i1 %19, label %9, label %20, !llvm.loop !109

20:                                               ; preds = %13
  %.lcssa3 = phi i32 [ %14, %13 ]
  %.lcssa2 = phi ptr [ %15, %13 ]
  %.lcssa1 = phi ptr [ %11, %13 ]
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa2, i64 16, i1 false), !tbaa.struct !101
  %21 = getelementptr inbounds %struct.ref_s, ptr %2, i64 1
  %22 = getelementptr %struct.dict_s, ptr %.lcssa1, i64 -1, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(16) %22, i64 16, i1 false), !tbaa.struct !101
  br label %23

23:                                               ; preds = %20, %9
  %24 = phi i32 [ %.lcssa3, %20 ], [ -1, %9 ]
  ret i32 %24
}

; Function Attrs: nounwind optsize uwtable
define internal void @initial_enter_name(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %4 = call i32 (ptr, ptr, ...) @name_enter(ptr noundef %0, ptr noundef nonnull %3) #64
  %5 = call i32 @dict_put(ptr noundef nonnull @dstack, ptr noundef nonnull %3, ptr noundef %1) #64
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !7
  %9 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.65, ptr noundef nonnull @.str.1.66, i32 noundef 43) #66
  %10 = load ptr, ptr @stderr, align 8, !tbaa !7
  %11 = call i64 @fwrite(ptr nonnull @.str.2.67, i64 17, i64 1, ptr %10) #67
  call void @exit(i32 noundef 1) #68
  unreachable

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @obj_init() #0 {
  %1 = alloca %struct.ref_s, align 8
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %1) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  store i64 0, ptr %1, align 8, !tbaa !13
  %3 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 24, ptr %3, align 8, !tbaa !14
  store i64 0, ptr %2, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  store i16 32, ptr %4, align 8, !tbaa !14
  %5 = tail call i32 @dict_create(i32 noundef 401, ptr noundef nonnull @dstack) #64
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds ([0 x %struct.ref_s], ptr @dstack, i64 0, i64 1), ptr noundef nonnull align 8 dereferenceable(16) @dstack, i64 16, i1 false), !tbaa.struct !101
  call void @initial_enter_name(ptr noundef nonnull @.str.3.70, ptr noundef nonnull %1) #62
  call void @initial_enter_name(ptr noundef nonnull @.str.4.71, ptr noundef nonnull %2) #62
  %6 = call i32 (ptr, ptr, ...) @name_enter(ptr noundef nonnull @.str.5.72, ptr noundef nonnull @name_errordict) #64
  %7 = call i32 (ptr, ptr, ...) @name_enter(ptr noundef nonnull @.str.6.73, ptr noundef nonnull @name_ErrorNames) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %1) #65
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @op_init() #0 {
  tail call void (...) @zarith_op_init() #64
  tail call void (...) @zarray_op_init() #64
  tail call void (...) @zcontrol_op_init() #64
  tail call void (...) @zdict_op_init() #64
  tail call void (...) @zfile_op_init() #64
  tail call void (...) @zgeneric_op_init() #64
  tail call void (...) @zmath_op_init() #64
  tail call void (...) @zmisc_op_init() #64
  tail call void (...) @zpacked_op_init() #64
  tail call void (...) @zrelbit_op_init() #64
  tail call void (...) @zstack_op_init() #64
  tail call void (...) @zstring_op_init() #64
  tail call void (...) @ztype_op_init() #64
  tail call void (...) @zvmem_op_init() #64
  tail call void (...) @zchar_op_init() #64
  tail call void (...) @zcolor_op_init() #64
  tail call void (...) @zdevice_op_init() #64
  tail call void (...) @zfont_op_init() #64
  tail call void (...) @zgstate_op_init() #64
  tail call void (...) @zht_op_init() #64
  tail call void (...) @zmatrix_op_init() #64
  tail call void (...) @zpaint_op_init() #64
  tail call void (...) @zpath_op_init() #64
  tail call void (...) @zpath2_op_init() #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @z_op_init(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  %3 = load ptr, ptr %0, align 8, !tbaa !110
  %4 = icmp eq ptr %3, null
  br i1 %4, label %21, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  %7 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 2
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi ptr [ %3, %5 ], [ %19, %8 ]
  %10 = phi ptr [ %0, %5 ], [ %18, %8 ]
  %11 = getelementptr inbounds %struct.op_def, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !112
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  store ptr %12, ptr %2, align 8, !tbaa !13
  store i16 37, ptr %6, align 8, !tbaa !14
  %13 = load i8, ptr %9, align 1, !tbaa !13
  %14 = sext i8 %13 to i16
  %15 = add nsw i16 %14, -48
  store i16 %15, ptr %7, align 2, !tbaa !17
  %16 = call i32 (ptr, ...) @interp_fix_op(ptr noundef nonnull %2) #64
  %17 = getelementptr inbounds i8, ptr %9, i64 1
  call void @initial_enter_name(ptr noundef nonnull %17, ptr noundef nonnull %2) #62
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  %18 = getelementptr inbounds %struct.op_def, ptr %10, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !110
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %8, !llvm.loop !113

21:                                               ; preds = %8, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @name_init() #0 {
  %1 = tail call ptr @alloc(i32 noundef 1, i32 noundef 6152, ptr noundef nonnull @.str.78) #64
  store ptr %1, ptr @the_nt, align 8, !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(6152) %1, i8 0, i64 6152, i1 false)
  br label %2

2:                                                ; preds = %14, %0
  %3 = phi i1 [ true, %0 ], [ false, %14 ]
  %4 = phi i32 [ 0, %0 ], [ 128, %14 ]
  %5 = load ptr, ptr @the_nt, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.name_table, ptr %5, i64 0, i32 2
  store i32 %4, ptr %6, align 8, !tbaa !114
  %7 = tail call ptr @alloc(i32 noundef 1, i32 noundef 4096, ptr noundef nonnull @.str.5.79) #64
  %8 = icmp eq ptr %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(4096) %7, i8 0, i64 4096, i1 false)
  %10 = load i32, ptr %6, align 8, !tbaa !114
  %11 = lshr i32 %10, 7
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.name_table, ptr %5, i64 0, i32 1, i64 %12
  store ptr %7, ptr %13, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %9, %2
  br i1 %3, label %2, label %15, !llvm.loop !116

15:                                               ; preds = %14
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @name_ref(ptr noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2, i32 noundef %3) #0 {
  %5 = trunc i32 %1 to i16
  %6 = and i32 %1, 65535
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %27

8:                                                ; preds = %4
  %9 = load ptr, ptr @the_nt, align 8, !tbaa !7
  %10 = load i8, ptr %0, align 1, !tbaa !13
  %11 = zext i8 %10 to i32
  %12 = lshr i32 %11, 7
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %struct.name_table, ptr %9, i64 0, i32 1, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !7
  %16 = and i32 %11, 127
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.name_s.4, ptr %15, i64 %17
  %19 = getelementptr inbounds %struct.name_s.4, ptr %15, i64 %17, i32 2
  %20 = load i16, ptr %19, align 2, !tbaa !117
  %21 = icmp eq i16 %20, 0
  br i1 %21, label %22, label %97

22:                                               ; preds = %8
  %23 = icmp slt i32 %3, 0
  br i1 %23, label %100, label %24

24:                                               ; preds = %22
  %25 = zext i8 %10 to i16
  %26 = getelementptr inbounds %struct.name_s.4, ptr %15, i64 %17, i32 1
  store i16 %25, ptr %26, align 8, !tbaa !98
  br label %84

27:                                               ; preds = %4
  %28 = tail call i32 (ptr, i32, ...) @string_hash(ptr noundef %0, i32 noundef %6) #64
  %29 = load ptr, ptr @the_nt, align 8, !tbaa !7
  %30 = and i32 %28, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds ptr, ptr %29, i64 %31
  %33 = load ptr, ptr %32, align 8, !tbaa !7
  %34 = icmp eq ptr %33, null
  br i1 %34, label %50, label %35

35:                                               ; preds = %27
  %36 = zext i32 %6 to i64
  br label %37

37:                                               ; preds = %47, %35
  %38 = phi ptr [ %33, %35 ], [ %48, %47 ]
  %39 = getelementptr inbounds %struct.name_s.4, ptr %38, i64 0, i32 2
  %40 = load i16, ptr %39, align 2, !tbaa !117
  %41 = icmp eq i16 %40, %5
  br i1 %41, label %42, label %47

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.name_s.4, ptr %38, i64 0, i32 3
  %44 = load ptr, ptr %43, align 8, !tbaa !118
  %45 = tail call i32 @bcmp(ptr %0, ptr %44, i64 %36)
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %97, label %47

47:                                               ; preds = %42, %37
  %48 = load ptr, ptr %38, align 8, !tbaa !7
  %49 = icmp eq ptr %48, null
  br i1 %49, label %50, label %37, !llvm.loop !119

50:                                               ; preds = %47, %27
  %51 = phi ptr [ %32, %27 ], [ %38, %47 ]
  %52 = icmp slt i32 %3, 0
  br i1 %52, label %100, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.name_table, ptr %29, i64 0, i32 2
  %55 = load i32, ptr %54, align 8, !tbaa !114
  %56 = and i32 %55, 127
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %53
  %59 = tail call ptr @alloc(i32 noundef 1, i32 noundef 4096, ptr noundef nonnull @.str.5.79) #64
  %60 = icmp eq ptr %59, null
  br i1 %60, label %100, label %61

61:                                               ; preds = %58
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(4096) %59, i8 0, i64 4096, i1 false)
  %62 = load i32, ptr %54, align 8, !tbaa !114
  %63 = lshr i32 %62, 7
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %struct.name_table, ptr %29, i64 0, i32 1, i64 %64
  store ptr %59, ptr %65, align 8, !tbaa !7
  %66 = load ptr, ptr @the_nt, align 8, !tbaa !7
  %67 = getelementptr inbounds %struct.name_table, ptr %66, i64 0, i32 2
  %68 = load i32, ptr %67, align 8, !tbaa !114
  %69 = and i32 %68, 127
  br label %70

70:                                               ; preds = %61, %53
  %71 = phi i32 [ %56, %53 ], [ %69, %61 ]
  %72 = phi i32 [ %55, %53 ], [ %68, %61 ]
  %73 = phi ptr [ %29, %53 ], [ %66, %61 ]
  %74 = getelementptr inbounds %struct.name_table, ptr %73, i64 0, i32 2
  %75 = lshr i32 %72, 7
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %struct.name_table, ptr %73, i64 0, i32 1, i64 %76
  %78 = load ptr, ptr %77, align 8, !tbaa !7
  %79 = zext i32 %71 to i64
  %80 = getelementptr inbounds %struct.name_s.4, ptr %78, i64 %79
  %81 = add i32 %72, 1
  store i32 %81, ptr %74, align 8, !tbaa !114
  %82 = trunc i32 %72 to i16
  %83 = getelementptr inbounds %struct.name_s.4, ptr %78, i64 %79, i32 1
  store i16 %82, ptr %83, align 8, !tbaa !98
  store ptr %80, ptr %51, align 8, !tbaa !7
  br label %84

84:                                               ; preds = %70, %24
  %85 = phi ptr [ %18, %24 ], [ %80, %70 ]
  %86 = icmp eq i32 %3, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %84
  %88 = tail call ptr @alloc(i32 noundef %6, i32 noundef 1, ptr noundef nonnull @.str.1.82) #64
  %89 = icmp eq ptr %88, null
  br i1 %89, label %100, label %90

90:                                               ; preds = %87
  %91 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %88, ptr align 1 %0, i64 %91, i1 false)
  br label %92

92:                                               ; preds = %90, %84
  %93 = phi ptr [ %88, %90 ], [ %0, %84 ]
  %94 = getelementptr inbounds %struct.name_s.4, ptr %85, i64 0, i32 2
  store i16 %5, ptr %94, align 2, !tbaa !117
  %95 = getelementptr inbounds %struct.name_s.4, ptr %85, i64 0, i32 3
  store ptr %93, ptr %95, align 8, !tbaa !118
  store ptr null, ptr %85, align 8, !tbaa !120
  %96 = getelementptr inbounds %struct.name_s.4, ptr %85, i64 0, i32 4
  store ptr null, ptr %96, align 8, !tbaa !104
  br label %97

97:                                               ; preds = %92, %42, %8
  %98 = phi ptr [ %85, %92 ], [ %18, %8 ], [ %38, %42 ]
  store ptr %98, ptr %2, align 8, !tbaa !13
  %99 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  store i16 28, ptr %99, align 8, !tbaa !14
  br label %100

100:                                              ; preds = %97, %87, %58, %50, %22
  %101 = phi i32 [ -21, %22 ], [ -25, %87 ], [ -25, %58 ], [ -21, %50 ], [ 0, %97 ]
  ret i32 %101
}

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #22

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @name_string_ref(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #23 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.name_s.4, ptr %3, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !118
  store ptr %5, ptr %1, align 8, !tbaa !13
  %6 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 566, ptr %6, align 8, !tbaa !14
  %7 = getelementptr inbounds %struct.name_s.4, ptr %3, i64 0, i32 2
  %8 = load i16, ptr %7, align 2, !tbaa !117
  %9 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 2
  store i16 %8, ptr %9, align 2, !tbaa !17
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @name_enter(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #63
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @name_ref(ptr noundef %0, i32 noundef %4, ptr noundef %1, i32 noundef 0) #62
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = load ptr, ptr @stderr, align 8, !tbaa !7
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef nonnull @.str.2.85, ptr noundef nonnull @.str.3.86, i32 noundef 135) #66
  %10 = load ptr, ptr @stderr, align 8, !tbaa !7
  %11 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %10, ptr noundef nonnull @.str.4.87, ptr noundef %0) #66
  tail call void @exit(i32 noundef 1) #68
  unreachable

12:                                               ; preds = %2
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(write, inaccessiblemem: none) uwtable
define internal void @interp_init(i32 noundef %0) #24 {
  store ptr getelementptr inbounds ([520 x %struct.ref_s], ptr @ostack, i64 0, i64 10), ptr @osbot, align 8, !tbaa !7
  store ptr getelementptr inbounds ([520 x %struct.ref_s], ptr @ostack, i64 0, i64 9), ptr @osp, align 8, !tbaa !7
  store ptr getelementptr inbounds ([520 x %struct.ref_s], ptr @ostack, i64 0, i64 509), ptr @ostop, align 8, !tbaa !7
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi ptr [ @ostack, %1 ], [ %5, %2 ]
  store i16 0, ptr %3, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  store i16 -4, ptr %4, align 8, !tbaa !14
  %5 = getelementptr inbounds %struct.ref_s, ptr %3, i64 1
  %6 = icmp ult ptr %5, getelementptr inbounds ([520 x %struct.ref_s], ptr @ostack, i64 0, i64 10)
  br i1 %6, label %2, label %7, !llvm.loop !121

7:                                                ; preds = %7, %2
  %8 = phi i64 [ %11, %7 ], [ 1, %2 ]
  %9 = getelementptr %struct.ref_s, ptr getelementptr inbounds ([520 x %struct.ref_s], ptr @ostack, i64 0, i64 9), i64 %8
  %10 = getelementptr inbounds [6 x ptr], ptr @osp_nargs, i64 0, i64 %8
  store ptr %9, ptr %10, align 8, !tbaa !7
  %11 = add nuw nsw i64 %8, 1
  %12 = icmp eq i64 %11, 6
  br i1 %12, label %13, label %7, !llvm.loop !122

13:                                               ; preds = %7
  store ptr getelementptr inbounds ([150 x %struct.ref_s], ptr @estack, i64 -1, i64 149), ptr @esp, align 8, !tbaa !7
  store ptr getelementptr inbounds ([150 x %struct.ref_s], ptr @estack, i64 0, i64 149), ptr @estop, align 8, !tbaa !7
  %14 = sext i32 %0 to i64
  %15 = getelementptr inbounds %struct.ref_s, ptr @dstack, i64 %14
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 -1
  store ptr %16, ptr @dsp, align 8, !tbaa !7
  store ptr getelementptr inbounds ([20 x %struct.ref_s], ptr @dstack, i64 0, i64 19), ptr @dstop, align 8, !tbaa !7
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @interp_fix_op(ptr nocapture noundef %0) #25 {
  %2 = load ptr, ptr %0, align 8, !tbaa !13
  br label %3

3:                                                ; preds = %6, %1
  %4 = phi i64 [ %7, %6 ], [ 7, %1 ]
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3
  %7 = add nsw i64 %4, -1
  %8 = and i64 %7, 4294967295
  %9 = getelementptr inbounds [7 x ptr], ptr @special_ops, i64 0, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !7
  %11 = icmp eq ptr %2, %10
  br i1 %11, label %12, label %3, !llvm.loop !123

12:                                               ; preds = %6
  %.lcssa1 = phi i64 [ %4, %6 ]
  %13 = trunc i64 %.lcssa1 to i16
  %14 = shl i16 %13, 2
  %15 = add i16 %14, 61
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 %15, ptr %16, align 8, !tbaa !14
  br label %17

17:                                               ; preds = %12, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @interpret(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca %struct.ref_s, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  store ptr %0, ptr %3, align 8, !tbaa !7
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #65
  %7 = load ptr, ptr @esp, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.ref_s, ptr %7, i64 1
  store ptr %8, ptr @esp, align 8, !tbaa !7
  store ptr @interp_exit, ptr %8, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %7, i64 1, i32 1
  store i16 37, ptr %9, align 8, !tbaa !14
  %10 = icmp eq i32 %1, 0
  br label %11

11:                                               ; preds = %47, %2
  %12 = phi ptr [ %4, %47 ], [ %0, %2 ]
  %13 = call i32 @interp(ptr noundef %12) #62
  %14 = icmp eq i32 %13, -100
  br i1 %14, label %51, label %15

15:                                               ; preds = %11
  %16 = load ptr, ptr @osp, align 8, !tbaa !7
  %17 = load ptr, ptr @osbot, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  %19 = icmp ult ptr %16, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  store ptr %18, ptr @osp, align 8, !tbaa !7
  br label %21

21:                                               ; preds = %20, %15
  br i1 %10, label %51, label %22

22:                                               ; preds = %21
  %23 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef nonnull @dstack, ptr noundef nonnull @name_errordict, ptr noundef nonnull %5) #64
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %51, label %25

25:                                               ; preds = %22
  %26 = load ptr, ptr %5, align 8, !tbaa !7
  %27 = call i32 @dict_lookup(ptr noundef %26, ptr noundef %26, ptr noundef nonnull @name_ErrorNames, ptr noundef nonnull %6) #64
  %28 = icmp slt i32 %27, 1
  br i1 %28, label %51, label %29

29:                                               ; preds = %25
  switch i32 %13, label %30 [
    i32 -3, label %51
    i32 -5, label %51
    i32 -16, label %51
    i32 -25, label %51
  ]

30:                                               ; preds = %29
  %31 = icmp sgt i32 %13, -2
  br i1 %31, label %51, label %32

32:                                               ; preds = %30
  %33 = sub nsw i32 0, %13
  %34 = load ptr, ptr %6, align 8, !tbaa !7
  %35 = getelementptr inbounds %struct.ref_s, ptr %34, i64 0, i32 2
  %36 = load i16, ptr %35, align 2, !tbaa !17
  %37 = zext i16 %36 to i32
  %38 = icmp ugt i32 %33, %37
  br i1 %38, label %51, label %39

39:                                               ; preds = %32
  %40 = load ptr, ptr %5, align 8, !tbaa !7
  %41 = load ptr, ptr %34, align 8, !tbaa !13
  %42 = xor i32 %13, -1
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.ref_s, ptr %41, i64 %43
  %45 = call i32 @dict_lookup(ptr noundef %40, ptr noundef %40, ptr noundef %44, ptr noundef nonnull %3) #64
  %46 = icmp slt i32 %45, 1
  br i1 %46, label %51, label %47

47:                                               ; preds = %39
  %48 = load ptr, ptr %3, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, ptr noundef nonnull align 8 dereferenceable(16) %48, i64 16, i1 false), !tbaa.struct !101
  store ptr %4, ptr %3, align 8, !tbaa !7
  %49 = load ptr, ptr @osp, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.ref_s, ptr %49, i64 1
  store ptr %50, ptr @osp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %50, ptr noundef nonnull align 8 dereferenceable(16) @error_object, i64 16, i1 false), !tbaa.struct !101
  br label %11

51:                                               ; preds = %39, %32, %30, %29, %29, %29, %29, %25, %22, %21, %11
  %52 = phi i32 [ 0, %11 ], [ %13, %21 ], [ %13, %25 ], [ %13, %22 ], [ %13, %29 ], [ %13, %29 ], [ %13, %29 ], [ %13, %29 ], [ %13, %32 ], [ %13, %30 ], [ %13, %39 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  ret i32 %52
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @interp_exit(ptr nocapture readnone %0) #10 {
  ret i32 -100
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @interp(ptr noundef %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %struct.stream_s, align 8
  %6 = load ptr, ptr @osp, align 8, !tbaa !7
  %7 = load ptr, ptr @esp, align 8, !tbaa !7
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %8 = load ptr, ptr @estop, align 8, !tbaa !7
  %9 = icmp ult ptr %7, %8
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %355

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.ref_s, ptr %7, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %13 = getelementptr inbounds %struct.stream_s, ptr %5, i64 0, i32 2
  %14 = getelementptr inbounds %struct.stream_s, ptr %5, i64 0, i32 3
  br label %313

15:                                               ; preds = %350, %187
  %16 = phi i32 [ %351, %350 ], [ %188, %187 ]
  %17 = phi ptr [ %352, %350 ], [ %189, %187 ]
  %18 = phi ptr [ %353, %350 ], [ %190, %187 ]
  %19 = phi ptr [ %354, %350 ], [ %191, %187 ]
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 0, i32 1
  %21 = load i16, ptr %20, align 8, !tbaa !14
  %22 = trunc i16 %21 to i8
  switch i8 %22, label %307 [
    i8 0, label %23
    i8 1, label %23
    i8 8, label %23
    i8 9, label %23
    i8 12, label %23
    i8 13, label %23
    i8 40, label %23
    i8 41, label %23
    i8 52, label %23
    i8 53, label %23
    i8 55, label %273
    i8 15, label %249
    i8 29, label %152
    i8 37, label %125
    i8 33, label %205
    i8 89, label %115
    i8 85, label %105
    i8 81, label %93
    i8 77, label %54
    i8 73, label %44
    i8 69, label %34
    i8 65, label %24
  ]

23:                                               ; preds = %15, %15, %15, %15, %15, %15, %15, %15, %15, %15
  %.lcssa39 = phi ptr [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ], [ %18, %15 ]
  %.lcssa15 = phi ptr [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ], [ %19, %15 ]
  store ptr %.lcssa39, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa15, i64 16, i1 false), !tbaa.struct !101
  br label %355

24:                                               ; preds = %15
  %25 = call i32 @zadd(ptr noundef %17) #64
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  %.lcssa41 = phi ptr [ %18, %24 ]
  %.lcssa17 = phi ptr [ %19, %24 ]
  %.lcssa = phi i32 [ %25, %24 ]
  store ptr %.lcssa41, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa17, i64 16, i1 false), !tbaa.struct !101
  br label %355

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  %30 = add nsw i32 %16, -1
  %31 = icmp sgt i32 %16, 1
  br i1 %31, label %32, label %322

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

34:                                               ; preds = %15
  %35 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 1), align 8, !tbaa !7
  %36 = icmp ult ptr %17, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  %.lcssa42 = phi ptr [ %18, %34 ]
  %.lcssa18 = phi ptr [ %19, %34 ]
  store ptr %.lcssa42, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa18, i64 16, i1 false), !tbaa.struct !101
  br label %355

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.ref_s, ptr %17, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %39, ptr noundef nonnull align 8 dereferenceable(16) %17, i64 16, i1 false), !tbaa.struct !101
  %40 = add nsw i32 %16, -1
  %41 = icmp sgt i32 %16, 1
  br i1 %41, label %42, label %322

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

44:                                               ; preds = %15
  %45 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 2), align 16, !tbaa !7
  %46 = icmp ult ptr %17, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  %.lcssa43 = phi ptr [ %18, %44 ]
  %.lcssa19 = phi ptr [ %19, %44 ]
  store ptr %.lcssa43, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa19, i64 16, i1 false), !tbaa.struct !101
  br label %355

48:                                               ; preds = %44
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %17, i64 16, i1 false), !tbaa.struct !101
  %49 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %17, ptr noundef nonnull align 8 dereferenceable(16) %49, i64 16, i1 false), !tbaa.struct !101
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %49, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %50 = add nsw i32 %16, -1
  %51 = icmp sgt i32 %16, 1
  br i1 %51, label %52, label %322

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

54:                                               ; preds = %15
  %55 = getelementptr %struct.ref_s, ptr %17, i64 -2, i32 1
  %56 = load i16, ptr %55, align 8, !tbaa !14
  %57 = and i16 %56, 252
  %58 = icmp eq i16 %57, 4
  br i1 %58, label %60, label %59

59:                                               ; preds = %54
  %.lcssa44 = phi ptr [ %18, %54 ]
  %.lcssa20 = phi ptr [ %19, %54 ]
  store ptr %.lcssa44, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa20, i64 16, i1 false), !tbaa.struct !101
  br label %355

60:                                               ; preds = %54
  %61 = load ptr, ptr @estop, align 8, !tbaa !7
  %62 = icmp ult ptr %18, %61
  br i1 %62, label %64, label %63

63:                                               ; preds = %60
  %.lcssa45 = phi ptr [ %18, %60 ]
  %.lcssa21 = phi ptr [ %19, %60 ]
  store ptr %.lcssa45, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa21, i64 16, i1 false), !tbaa.struct !101
  br label %355

64:                                               ; preds = %60
  %65 = icmp sgt i32 %16, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %64
  %67 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr %67, ptr %18, align 8, !tbaa !13
  %68 = trunc i32 %16 to i16
  %69 = getelementptr inbounds %struct.ref_s, ptr %18, i64 0, i32 2
  store i16 %68, ptr %69, align 2, !tbaa !17
  br label %70

70:                                               ; preds = %66, %64
  %71 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -3
  %72 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -2
  %73 = load i16, ptr %72, align 8, !tbaa !13
  %74 = icmp ne i16 %73, 0
  %75 = sext i1 %74 to i64
  %76 = getelementptr inbounds %struct.ref_s, ptr %17, i64 %75
  %77 = getelementptr inbounds %struct.ref_s, ptr %17, i64 %75, i32 1
  %78 = load i16, ptr %77, align 8, !tbaa !14
  %79 = trunc i16 %78 to i8
  switch i8 %79, label %80 [
    i8 3, label %82
    i8 43, label %82
  ]

80:                                               ; preds = %70
  %81 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %81, ptr noundef nonnull align 8 dereferenceable(16) %76, i64 16, i1 false), !tbaa.struct !101
  br label %187

82:                                               ; preds = %70, %70
  %83 = load ptr, ptr %76, align 8, !tbaa !13
  %84 = getelementptr inbounds %struct.ref_s, ptr %17, i64 %75, i32 2
  %85 = load i16, ptr %84, align 2, !tbaa !17
  %86 = zext i16 %85 to i32
  %87 = add nsw i32 %86, -1
  %88 = icmp ult i16 %85, 2
  br i1 %88, label %89, label %91

89:                                               ; preds = %82
  %90 = icmp eq i16 %85, 0
  br i1 %90, label %246, label %187

91:                                               ; preds = %82
  %92 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %92, ptr noundef nonnull align 8 dereferenceable(16) %76, i64 16, i1 false), !tbaa.struct !101
  br label %187

93:                                               ; preds = %15
  %94 = call i32 (ptr, i32, ...) @obj_compare(ptr noundef %17, i32 noundef 3) #64
  %95 = icmp slt i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %93
  %.lcssa46 = phi ptr [ %18, %93 ]
  %.lcssa22 = phi ptr [ %19, %93 ]
  %.lcssa1 = phi i32 [ %94, %93 ]
  store ptr %.lcssa46, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa22, i64 16, i1 false), !tbaa.struct !101
  br label %355

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  %99 = trunc i32 %94 to i16
  store i16 %99, ptr %98, align 8, !tbaa !13
  %100 = getelementptr %struct.ref_s, ptr %17, i64 -1, i32 1
  store i16 4, ptr %100, align 8, !tbaa !14
  %101 = add nsw i32 %16, -1
  %102 = icmp sgt i32 %16, 1
  br i1 %102, label %103, label %322

103:                                              ; preds = %97
  %104 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

105:                                              ; preds = %15
  %106 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 1), align 8, !tbaa !7
  %107 = icmp ult ptr %17, %106
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  %.lcssa47 = phi ptr [ %18, %105 ]
  %.lcssa23 = phi ptr [ %19, %105 ]
  store ptr %.lcssa47, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa23, i64 16, i1 false), !tbaa.struct !101
  br label %355

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  %111 = add nsw i32 %16, -1
  %112 = icmp sgt i32 %16, 1
  br i1 %112, label %113, label %322

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

115:                                              ; preds = %15
  %116 = call i32 @zsub(ptr noundef %17) #64
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  %.lcssa48 = phi ptr [ %18, %115 ]
  %.lcssa24 = phi ptr [ %19, %115 ]
  %.lcssa2 = phi i32 [ %116, %115 ]
  store ptr %.lcssa48, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa24, i64 16, i1 false), !tbaa.struct !101
  br label %355

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  %121 = add nsw i32 %16, -1
  %122 = icmp sgt i32 %16, 1
  br i1 %122, label %123, label %322

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

125:                                              ; preds = %15
  store ptr %18, ptr @esp, align 8, !tbaa !7
  store ptr %17, ptr @osp, align 8, !tbaa !7
  %126 = load ptr, ptr %19, align 8, !tbaa !13
  %127 = call i32 %126(ptr noundef %17) #64
  %128 = load ptr, ptr @osp, align 8, !tbaa !7
  switch i32 %127, label %145 [
    i32 0, label %147
    i32 1, label %129
    i32 -20, label %136
  ]

129:                                              ; preds = %125
  %.lcssa98 = phi i32 [ %16, %125 ]
  %.lcssa74 = phi ptr [ %17, %125 ]
  %.lcssa50 = phi ptr [ %18, %125 ]
  %.lcssa26 = phi ptr [ %19, %125 ]
  %.lcssa4 = phi ptr [ %128, %125 ]
  %130 = load ptr, ptr @esp, align 8, !tbaa !7
  %131 = icmp ugt ptr %130, %.lcssa50
  br i1 %131, label %132, label %134

132:                                              ; preds = %129
  %133 = icmp sgt i32 %.lcssa98, 0
  br i1 %133, label %237, label %246

134:                                              ; preds = %129
  %135 = icmp eq ptr %130, %.lcssa50
  br i1 %135, label %205, label %246

136:                                              ; preds = %125
  %.lcssa99 = phi i32 [ %16, %125 ]
  %.lcssa75 = phi ptr [ %17, %125 ]
  %.lcssa51 = phi ptr [ %18, %125 ]
  %.lcssa27 = phi ptr [ %19, %125 ]
  %.lcssa5 = phi ptr [ %128, %125 ]
  %137 = load ptr, ptr @osbot, align 8, !tbaa !7
  %138 = getelementptr inbounds %struct.ref_s, ptr %137, i64 -1
  %139 = getelementptr inbounds %struct.ref_s, ptr %.lcssa27, i64 0, i32 2
  %140 = load i16, ptr %139, align 2, !tbaa !17
  %141 = zext i16 %140 to i64
  %142 = getelementptr inbounds %struct.ref_s, ptr %138, i64 %141
  %143 = icmp ult ptr %.lcssa5, %142
  %144 = select i1 %143, i32 -17, i32 -20
  br label %145

145:                                              ; preds = %136, %125
  %.lcssa49 = phi ptr [ %.lcssa51, %136 ], [ %18, %125 ]
  %.lcssa25 = phi ptr [ %.lcssa27, %136 ], [ %19, %125 ]
  %146 = phi i32 [ %144, %136 ], [ %127, %125 ]
  store ptr %.lcssa49, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa25, i64 16, i1 false), !tbaa.struct !101
  br label %355

147:                                              ; preds = %125
  %148 = add nsw i32 %16, -1
  %149 = icmp sgt i32 %16, 1
  br i1 %149, label %150, label %322

150:                                              ; preds = %147
  %151 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br label %187

152:                                              ; preds = %15
  %153 = load ptr, ptr %19, align 8, !tbaa !13
  %154 = getelementptr inbounds %struct.name_s.4, ptr %153, i64 0, i32 4
  %155 = load ptr, ptr %154, align 8, !tbaa !104
  %156 = icmp ugt ptr %155, inttoptr (i64 1 to ptr)
  br i1 %156, label %164, label %157

157:                                              ; preds = %152
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %158 = load ptr, ptr @dsp, align 8, !tbaa !7
  %159 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef %158, ptr noundef nonnull %19, ptr noundef nonnull %3) #64
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %157
  %162 = load ptr, ptr %3, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  br label %164

163:                                              ; preds = %157
  %.lcssa52 = phi ptr [ %18, %157 ]
  %.lcssa28 = phi ptr [ %19, %157 ]
  store ptr %.lcssa52, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa28, i64 16, i1 false), !tbaa.struct !101
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  br label %355

164:                                              ; preds = %161, %152
  %165 = phi ptr [ %155, %152 ], [ %162, %161 ]
  %166 = getelementptr inbounds %struct.ref_s, ptr %165, i64 0, i32 1
  %167 = load i16, ptr %166, align 8, !tbaa !14
  %168 = trunc i16 %167 to i8
  switch i8 %168, label %231 [
    i8 3, label %169
    i8 43, label %169
    i8 37, label %194
    i8 2, label %222
    i8 4, label %222
    i8 20, label %222
    i8 42, label %222
    i8 44, label %222
    i8 54, label %222
  ]

169:                                              ; preds = %164, %164
  %170 = icmp sgt i32 %16, 0
  br i1 %170, label %171, label %175

171:                                              ; preds = %169
  %172 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr %172, ptr %18, align 8, !tbaa !13
  %173 = trunc i32 %16 to i16
  %174 = getelementptr inbounds %struct.ref_s, ptr %18, i64 0, i32 2
  store i16 %173, ptr %174, align 2, !tbaa !17
  br label %175

175:                                              ; preds = %171, %169
  %176 = load ptr, ptr @estop, align 8, !tbaa !7
  %177 = icmp ult ptr %18, %176
  br i1 %177, label %179, label %178

178:                                              ; preds = %175
  %.lcssa57 = phi ptr [ %18, %175 ]
  %.lcssa13 = phi ptr [ %165, %175 ]
  store ptr %.lcssa57, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa13, i64 16, i1 false), !tbaa.struct !101
  br label %355

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %180, ptr noundef nonnull align 8 dereferenceable(16) %165, i64 16, i1 false), !tbaa.struct !101
  %181 = load ptr, ptr %165, align 8, !tbaa !13
  %182 = getelementptr inbounds %struct.ref_s, ptr %165, i64 0, i32 2
  %183 = load i16, ptr %182, align 2, !tbaa !17
  %184 = zext i16 %183 to i32
  %185 = add nsw i32 %184, -1
  %186 = icmp ult i16 %183, 2
  br i1 %186, label %192, label %187

187:                                              ; preds = %288, %264, %233, %231, %226, %218, %192, %179, %150, %123, %113, %103, %91, %89, %80, %52, %42, %32
  %188 = phi i32 [ %30, %32 ], [ %40, %42 ], [ %50, %52 ], [ %101, %103 ], [ %111, %113 ], [ %121, %123 ], [ %148, %150 ], [ 0, %264 ], [ 0, %288 ], [ 0, %80 ], [ %87, %89 ], [ %87, %91 ], [ %228, %226 ], [ %219, %218 ], [ 0, %233 ], [ 0, %231 ], [ %185, %192 ], [ %185, %179 ]
  %189 = phi ptr [ %29, %32 ], [ %39, %42 ], [ %17, %52 ], [ %98, %103 ], [ %110, %113 ], [ %120, %123 ], [ %128, %150 ], [ %17, %264 ], [ %17, %288 ], [ %71, %80 ], [ %71, %89 ], [ %71, %91 ], [ %227, %226 ], [ %197, %218 ], [ %17, %233 ], [ %17, %231 ], [ %17, %192 ], [ %17, %179 ]
  %190 = phi ptr [ %18, %32 ], [ %18, %42 ], [ %18, %52 ], [ %18, %103 ], [ %18, %113 ], [ %18, %123 ], [ %18, %150 ], [ %265, %264 ], [ %289, %288 ], [ %18, %80 ], [ %18, %89 ], [ %92, %91 ], [ %18, %226 ], [ %18, %218 ], [ %18, %233 ], [ %18, %231 ], [ %18, %192 ], [ %180, %179 ]
  %191 = phi ptr [ %33, %32 ], [ %43, %42 ], [ %53, %52 ], [ %104, %103 ], [ %114, %113 ], [ %124, %123 ], [ %151, %150 ], [ %2, %264 ], [ %2, %288 ], [ %81, %80 ], [ %83, %89 ], [ %83, %91 ], [ %230, %226 ], [ %221, %218 ], [ %165, %233 ], [ %165, %231 ], [ %181, %192 ], [ %181, %179 ]
  br label %15

192:                                              ; preds = %179
  %193 = icmp eq i16 %183, 0
  br i1 %193, label %246, label %187

194:                                              ; preds = %164
  store ptr %18, ptr @esp, align 8, !tbaa !7
  store ptr %17, ptr @osp, align 8, !tbaa !7
  %195 = load ptr, ptr %165, align 8, !tbaa !13
  %196 = call i32 %195(ptr noundef %17) #64
  %197 = load ptr, ptr @osp, align 8, !tbaa !7
  switch i32 %196, label %216 [
    i32 0, label %218
    i32 1, label %198
    i32 -20, label %207
  ]

198:                                              ; preds = %194
  %.lcssa103 = phi i32 [ %16, %194 ]
  %.lcssa79 = phi ptr [ %17, %194 ]
  %.lcssa55 = phi ptr [ %18, %194 ]
  %.lcssa31 = phi ptr [ %19, %194 ]
  %.lcssa7 = phi ptr [ %197, %194 ]
  %199 = load ptr, ptr @esp, align 8, !tbaa !7
  %200 = icmp ugt ptr %199, %.lcssa55
  br i1 %200, label %201, label %203

201:                                              ; preds = %198
  %202 = icmp sgt i32 %.lcssa103, 0
  br i1 %202, label %237, label %246

203:                                              ; preds = %198
  %204 = icmp eq ptr %199, %.lcssa55
  br i1 %204, label %205, label %246

205:                                              ; preds = %311, %306, %272, %203, %134, %15
  %.lcssa88 = phi i32 [ %.lcssa86, %311 ], [ %.lcssa109, %306 ], [ %.lcssa107, %272 ], [ %.lcssa103, %203 ], [ %.lcssa98, %134 ], [ %16, %15 ]
  %.lcssa40 = phi ptr [ %.lcssa38, %311 ], [ %.lcssa61, %306 ], [ %.lcssa59, %272 ], [ %.lcssa55, %203 ], [ %.lcssa50, %134 ], [ %18, %15 ]
  %.lcssa16 = phi ptr [ %.lcssa14, %311 ], [ %.lcssa37, %306 ], [ %.lcssa35, %272 ], [ %.lcssa31, %203 ], [ %.lcssa26, %134 ], [ %19, %15 ]
  %206 = phi ptr [ %.lcssa7, %203 ], [ %.lcssa83, %272 ], [ %.lcssa85, %306 ], [ %312, %311 ], [ %.lcssa4, %134 ], [ %17, %15 ]
  br label %313

207:                                              ; preds = %194
  %.lcssa104 = phi i32 [ %16, %194 ]
  %.lcssa80 = phi ptr [ %17, %194 ]
  %.lcssa56 = phi ptr [ %18, %194 ]
  %.lcssa32 = phi ptr [ %19, %194 ]
  %.lcssa12 = phi ptr [ %165, %194 ]
  %.lcssa8 = phi ptr [ %197, %194 ]
  %208 = load ptr, ptr @osbot, align 8, !tbaa !7
  %209 = getelementptr inbounds %struct.ref_s, ptr %208, i64 -1
  %210 = getelementptr inbounds %struct.ref_s, ptr %.lcssa12, i64 0, i32 2
  %211 = load i16, ptr %210, align 2, !tbaa !17
  %212 = zext i16 %211 to i64
  %213 = getelementptr inbounds %struct.ref_s, ptr %209, i64 %212
  %214 = icmp ult ptr %.lcssa8, %213
  %215 = select i1 %214, i32 -17, i32 -20
  br label %216

216:                                              ; preds = %207, %194
  %.lcssa54 = phi ptr [ %.lcssa56, %207 ], [ %18, %194 ]
  %.lcssa10 = phi ptr [ %.lcssa12, %207 ], [ %165, %194 ]
  %217 = phi i32 [ %215, %207 ], [ %196, %194 ]
  store ptr %.lcssa54, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa10, i64 16, i1 false), !tbaa.struct !101
  br label %355

218:                                              ; preds = %194
  %219 = add nsw i32 %16, -1
  %220 = icmp sgt i32 %16, 1
  %221 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br i1 %220, label %187, label %322

222:                                              ; preds = %164, %164, %164, %164, %164, %164
  %223 = load ptr, ptr @ostop, align 8, !tbaa !7
  %224 = icmp ult ptr %17, %223
  br i1 %224, label %226, label %225

225:                                              ; preds = %222
  %.lcssa53 = phi ptr [ %18, %222 ]
  %.lcssa9 = phi ptr [ %165, %222 ]
  store ptr %.lcssa53, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa9, i64 16, i1 false), !tbaa.struct !101
  br label %355

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.ref_s, ptr %17, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %227, ptr noundef nonnull align 8 dereferenceable(16) %165, i64 16, i1 false), !tbaa.struct !101
  %228 = add nsw i32 %16, -1
  %229 = icmp sgt i32 %16, 1
  %230 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  br i1 %229, label %187, label %322

231:                                              ; preds = %164
  %232 = icmp sgt i32 %16, 0
  br i1 %232, label %233, label %187

233:                                              ; preds = %231
  %234 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr %234, ptr %18, align 8, !tbaa !13
  %235 = trunc i32 %16 to i16
  %236 = getelementptr inbounds %struct.ref_s, ptr %18, i64 0, i32 2
  store i16 %235, ptr %236, align 2, !tbaa !17
  br label %187

237:                                              ; preds = %201, %132
  %238 = phi i32 [ %.lcssa98, %132 ], [ %.lcssa103, %201 ]
  %239 = phi ptr [ %.lcssa50, %132 ], [ %.lcssa55, %201 ]
  %240 = phi ptr [ %.lcssa26, %132 ], [ %.lcssa31, %201 ]
  %241 = phi ptr [ %.lcssa4, %132 ], [ %.lcssa7, %201 ]
  %242 = getelementptr inbounds %struct.ref_s, ptr %240, i64 1
  store ptr %242, ptr %239, align 8, !tbaa !13
  %243 = trunc i32 %238 to i16
  %244 = getelementptr inbounds %struct.ref_s, ptr %239, i64 0, i32 2
  store i16 %243, ptr %244, align 2, !tbaa !17
  %245 = load ptr, ptr @esp, align 8, !tbaa !7
  br label %246

246:                                              ; preds = %322, %237, %203, %201, %192, %134, %132, %89
  %247 = phi ptr [ %324, %322 ], [ %.lcssa4, %134 ], [ %.lcssa4, %132 ], [ %.lcssa7, %203 ], [ %.lcssa7, %201 ], [ %241, %237 ], [ %17, %192 ], [ %71, %89 ]
  %248 = phi ptr [ %325, %322 ], [ %130, %134 ], [ %130, %132 ], [ %199, %203 ], [ %199, %201 ], [ %245, %237 ], [ %180, %192 ], [ %18, %89 ]
  br label %331

249:                                              ; preds = %15
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  %250 = call i32 (ptr, ptr, ...) @file_check_read(ptr noundef nonnull %19, ptr noundef nonnull %4) #64
  %251 = icmp slt i32 %250, 0
  br i1 %251, label %270, label %252

252:                                              ; preds = %249
  store ptr %17, ptr @osp, align 8, !tbaa !7
  %253 = load ptr, ptr %4, align 8, !tbaa !7
  %254 = call i32 (ptr, i32, ptr, ...) @scan_token(ptr noundef %253, i32 noundef 0, ptr noundef nonnull %2) #64
  switch i32 %254, label %270 [
    i32 0, label %255
    i32 1, label %266
  ]

255:                                              ; preds = %252
  %256 = icmp sgt i32 %16, 0
  br i1 %256, label %257, label %261

257:                                              ; preds = %255
  %258 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr %258, ptr %18, align 8, !tbaa !13
  %259 = trunc i32 %16 to i16
  %260 = getelementptr inbounds %struct.ref_s, ptr %18, i64 0, i32 2
  store i16 %259, ptr %260, align 2, !tbaa !17
  br label %261

261:                                              ; preds = %257, %255
  %262 = load ptr, ptr @estop, align 8, !tbaa !7
  %263 = icmp ult ptr %18, %262
  br i1 %263, label %264, label %270

264:                                              ; preds = %261
  %265 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %265, ptr noundef nonnull align 8 dereferenceable(16) %19, i64 16, i1 false), !tbaa.struct !101
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  br label %187

266:                                              ; preds = %252
  %.lcssa107 = phi i32 [ %16, %252 ]
  %.lcssa83 = phi ptr [ %17, %252 ]
  %.lcssa59 = phi ptr [ %18, %252 ]
  %.lcssa35 = phi ptr [ %19, %252 ]
  %267 = load ptr, ptr %4, align 8, !tbaa !7
  %268 = call i32 (ptr, ptr, ...) @file_close(ptr noundef nonnull %.lcssa35, ptr noundef %267) #64
  %269 = icmp slt i32 %268, 0
  br i1 %269, label %270, label %272

270:                                              ; preds = %266, %261, %252, %249
  %.lcssa58 = phi ptr [ %.lcssa59, %266 ], [ %18, %261 ], [ %18, %252 ], [ %18, %249 ]
  %.lcssa34 = phi ptr [ %.lcssa35, %266 ], [ %19, %261 ], [ %19, %252 ], [ %19, %249 ]
  %271 = phi i32 [ %250, %249 ], [ -5, %261 ], [ %254, %252 ], [ %268, %266 ]
  store ptr %.lcssa58, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa34, i64 16, i1 false)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  br label %355

272:                                              ; preds = %266
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  br label %205

273:                                              ; preds = %15
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %5) #65
  %274 = load ptr, ptr %19, align 8, !tbaa !13
  %275 = getelementptr inbounds %struct.ref_s, ptr %19, i64 0, i32 2
  %276 = load i16, ptr %275, align 2, !tbaa !17
  %277 = zext i16 %276 to i32
  call void @sread_string(ptr noundef nonnull %5, ptr noundef %274, i32 noundef %277) #64
  store ptr %17, ptr @osp, align 8, !tbaa !7
  %278 = call i32 (ptr, i32, ptr, ...) @scan_token(ptr noundef nonnull %5, i32 noundef 1, ptr noundef nonnull %2) #64
  switch i32 %278, label %304 [
    i32 0, label %279
    i32 1, label %306
  ]

279:                                              ; preds = %273
  %280 = icmp sgt i32 %16, 0
  br i1 %280, label %281, label %285

281:                                              ; preds = %279
  %282 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr %282, ptr %18, align 8, !tbaa !13
  %283 = trunc i32 %16 to i16
  %284 = getelementptr inbounds %struct.ref_s, ptr %18, i64 0, i32 2
  store i16 %283, ptr %284, align 2, !tbaa !17
  br label %285

285:                                              ; preds = %281, %279
  %286 = load ptr, ptr @estop, align 8, !tbaa !7
  %287 = icmp ult ptr %18, %286
  br i1 %287, label %288, label %304

288:                                              ; preds = %285
  %289 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  %290 = load i16, ptr %20, align 8, !tbaa !14
  %291 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1, i32 1
  store i16 %290, ptr %291, align 8, !tbaa !14
  %292 = load ptr, ptr %5, align 8, !tbaa !124
  %293 = getelementptr inbounds i8, ptr %292, i64 1
  store ptr %293, ptr %289, align 8, !tbaa !13
  %294 = load ptr, ptr %13, align 8, !tbaa !127
  %295 = load i32, ptr %14, align 8, !tbaa !128
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i8, ptr %294, i64 %296
  %298 = ptrtoint ptr %297 to i64
  %299 = ptrtoint ptr %292 to i64
  %300 = xor i64 %299, -1
  %301 = add i64 %298, %300
  %302 = trunc i64 %301 to i16
  %303 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1, i32 2
  store i16 %302, ptr %303, align 2, !tbaa !17
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %5) #65
  br label %187

304:                                              ; preds = %285, %273
  %.lcssa60 = phi ptr [ %18, %285 ], [ %18, %273 ]
  %.lcssa36 = phi ptr [ %19, %285 ], [ %19, %273 ]
  %305 = phi i32 [ -5, %285 ], [ %278, %273 ]
  store ptr %.lcssa60, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa36, i64 16, i1 false)
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %5) #65
  br label %355

306:                                              ; preds = %273
  %.lcssa109 = phi i32 [ %16, %273 ]
  %.lcssa85 = phi ptr [ %17, %273 ]
  %.lcssa61 = phi ptr [ %18, %273 ]
  %.lcssa37 = phi ptr [ %19, %273 ]
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %5) #65
  br label %205

307:                                              ; preds = %15
  %.lcssa86 = phi i32 [ %16, %15 ]
  %.lcssa62 = phi ptr [ %17, %15 ]
  %.lcssa38 = phi ptr [ %18, %15 ]
  %.lcssa14 = phi ptr [ %19, %15 ]
  %308 = load ptr, ptr @ostop, align 8, !tbaa !7
  %309 = icmp ult ptr %.lcssa62, %308
  br i1 %309, label %311, label %310

310:                                              ; preds = %307
  %.lcssa38.lcssa = phi ptr [ %.lcssa38, %307 ]
  %.lcssa14.lcssa = phi ptr [ %.lcssa14, %307 ]
  store ptr %.lcssa38.lcssa, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @error_object, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa14.lcssa, i64 16, i1 false), !tbaa.struct !101
  br label %355

311:                                              ; preds = %307
  %312 = getelementptr inbounds %struct.ref_s, ptr %.lcssa62, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %312, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa14, i64 16, i1 false), !tbaa.struct !101
  br label %205

313:                                              ; preds = %205, %11
  %314 = phi i32 [ 0, %11 ], [ %.lcssa88, %205 ]
  %315 = phi ptr [ %6, %11 ], [ %206, %205 ]
  %316 = phi ptr [ %12, %11 ], [ %.lcssa40, %205 ]
  %317 = phi ptr [ %0, %11 ], [ %.lcssa16, %205 ]
  %318 = add nsw i32 %314, -1
  %319 = icmp sgt i32 %314, 1
  br i1 %319, label %320, label %322

320:                                              ; preds = %313
  %321 = getelementptr inbounds %struct.ref_s, ptr %317, i64 1
  br label %350

322:                                              ; preds = %313, %226, %218, %147, %119, %109, %97, %48, %38, %28
  %323 = phi i32 [ %318, %313 ], [ %219, %218 ], [ %228, %226 ], [ %148, %147 ], [ %121, %119 ], [ %111, %109 ], [ %101, %97 ], [ %50, %48 ], [ %40, %38 ], [ %30, %28 ]
  %324 = phi ptr [ %315, %313 ], [ %197, %218 ], [ %227, %226 ], [ %128, %147 ], [ %120, %119 ], [ %110, %109 ], [ %98, %97 ], [ %17, %48 ], [ %39, %38 ], [ %29, %28 ]
  %325 = phi ptr [ %316, %313 ], [ %18, %28 ], [ %18, %38 ], [ %18, %48 ], [ %18, %97 ], [ %18, %109 ], [ %18, %119 ], [ %18, %147 ], [ %18, %218 ], [ %18, %226 ]
  %326 = phi ptr [ %317, %313 ], [ %19, %28 ], [ %19, %38 ], [ %19, %48 ], [ %19, %97 ], [ %19, %109 ], [ %19, %119 ], [ %19, %147 ], [ %19, %218 ], [ %19, %226 ]
  %327 = icmp eq i32 %323, 0
  br i1 %327, label %328, label %246

328:                                              ; preds = %322
  %329 = getelementptr inbounds %struct.ref_s, ptr %325, i64 -1
  %330 = getelementptr inbounds %struct.ref_s, ptr %326, i64 1
  br label %350

331:                                              ; preds = %342, %246
  %332 = phi ptr [ %343, %342 ], [ %248, %246 ]
  %333 = getelementptr inbounds %struct.ref_s, ptr %332, i64 0, i32 1
  %334 = load i16, ptr %333, align 8, !tbaa !14
  %335 = trunc i16 %334 to i8
  switch i8 %335, label %336 [
    i8 3, label %338
    i8 43, label %338
  ]

336:                                              ; preds = %331
  %.lcssa110 = phi ptr [ %332, %331 ]
  %337 = getelementptr inbounds %struct.ref_s, ptr %.lcssa110, i64 -1
  br label %350

338:                                              ; preds = %331, %331
  %339 = getelementptr inbounds %struct.ref_s, ptr %332, i64 0, i32 2
  %340 = load i16, ptr %339, align 2, !tbaa !17
  %341 = icmp ult i16 %340, 2
  br i1 %341, label %342, label %345

342:                                              ; preds = %338
  %343 = getelementptr inbounds %struct.ref_s, ptr %332, i64 -1
  %344 = icmp eq i16 %340, 0
  br i1 %344, label %331, label %345

345:                                              ; preds = %342, %338
  %.lcssa112 = phi i16 [ %340, %342 ], [ %340, %338 ]
  %.lcssa111 = phi ptr [ %332, %342 ], [ %332, %338 ]
  %346 = phi ptr [ %343, %342 ], [ %332, %338 ]
  %347 = load ptr, ptr %.lcssa111, align 8, !tbaa !13
  %348 = zext i16 %.lcssa112 to i32
  %349 = add nsw i32 %348, -1
  br label %350

350:                                              ; preds = %345, %336, %328, %320
  %351 = phi i32 [ %318, %320 ], [ 0, %336 ], [ %349, %345 ], [ 0, %328 ]
  %352 = phi ptr [ %315, %320 ], [ %247, %336 ], [ %247, %345 ], [ %324, %328 ]
  %353 = phi ptr [ %316, %320 ], [ %337, %336 ], [ %346, %345 ], [ %329, %328 ]
  %354 = phi ptr [ %321, %320 ], [ %.lcssa110, %336 ], [ %347, %345 ], [ %330, %328 ]
  br label %15

355:                                              ; preds = %310, %304, %270, %225, %216, %178, %163, %145, %118, %108, %96, %63, %59, %47, %37, %27, %23, %10
  %356 = phi i32 [ -5, %10 ], [ -16, %310 ], [ %.lcssa, %27 ], [ -17, %37 ], [ -17, %47 ], [ -20, %59 ], [ -5, %63 ], [ %.lcssa1, %96 ], [ -17, %108 ], [ %.lcssa2, %118 ], [ %146, %145 ], [ -7, %23 ], [ %271, %270 ], [ %305, %304 ], [ -21, %163 ], [ -5, %178 ], [ %217, %216 ], [ -16, %225 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %356
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @dynamic_grow(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.dynamic_area_s, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 8, !tbaa !129
  %4 = getelementptr inbounds %struct.dynamic_area_s, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 4, !tbaa !131
  %6 = mul i32 %5, %3
  %7 = getelementptr inbounds %struct.dynamic_area_s, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !132
  %9 = load ptr, ptr %0, align 8, !tbaa !133
  %10 = ptrtoint ptr %8 to i64
  %11 = ptrtoint ptr %9 to i64
  %12 = sub i64 %10, %11
  %13 = icmp ult i32 %6, 10
  %14 = zext i32 %6 to i64
  %15 = icmp ugt i32 %6, 2147483646
  %16 = shl nuw nsw i64 %14, 1
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = select i1 %13, i64 20, i64 %17
  %19 = zext i32 %5 to i64
  %20 = udiv i64 %18, %19
  %21 = getelementptr inbounds %struct.dynamic_area_s, ptr %0, i64 0, i32 4
  %22 = load i32, ptr %21, align 8, !tbaa !134
  %23 = icmp eq i32 %22, 0
  %24 = trunc i64 %20 to i32
  br i1 %23, label %31, label %25

25:                                               ; preds = %1
  %26 = tail call ptr @alloc_grow(ptr noundef %9, i32 noundef %3, i32 noundef %24, i32 noundef %5, ptr noundef nonnull @.str.104) #64
  store ptr %26, ptr %0, align 8, !tbaa !133
  %27 = icmp eq ptr %26, null
  br i1 %27, label %46, label %28

28:                                               ; preds = %25
  store i32 %24, ptr %2, align 8, !tbaa !129
  %29 = getelementptr inbounds i8, ptr %26, i64 %18
  %30 = getelementptr inbounds %struct.dynamic_area_s, ptr %0, i64 0, i32 5
  store ptr %29, ptr %30, align 8, !tbaa !135
  br label %42

31:                                               ; preds = %1
  store i32 %24, ptr %2, align 8, !tbaa !129
  %32 = tail call ptr @alloc(i32 noundef %24, i32 noundef %5, ptr noundef nonnull @.str.104) #64
  store ptr %32, ptr %0, align 8, !tbaa !133
  %33 = load i32, ptr %4, align 4, !tbaa !131
  %34 = zext i32 %33 to i64
  %35 = mul i64 %20, %34
  %36 = getelementptr inbounds i8, ptr %32, i64 %35
  %37 = getelementptr inbounds %struct.dynamic_area_s, ptr %0, i64 0, i32 5
  store ptr %36, ptr %37, align 8, !tbaa !135
  store i32 1, ptr %21, align 8, !tbaa !134
  store ptr %32, ptr %7, align 8, !tbaa !132
  %38 = icmp eq ptr %32, null
  br i1 %38, label %46, label %39

39:                                               ; preds = %31
  %40 = and i64 %18, 4294967295
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %32, ptr align 1 %9, i64 %40, i1 false)
  store i32 1, ptr %21, align 8, !tbaa !134
  %41 = load ptr, ptr %0, align 8, !tbaa !133
  br label %42

42:                                               ; preds = %39, %28
  %43 = phi ptr [ %41, %39 ], [ %26, %28 ]
  %44 = and i64 %12, 4294967295
  %45 = getelementptr inbounds i8, ptr %43, i64 %44
  store ptr %45, ptr %7, align 8, !tbaa !132
  br label %46

46:                                               ; preds = %42, %31, %25
  %47 = phi i32 [ 1, %42 ], [ 0, %25 ], [ 0, %31 ]
  ret i32 %47
}

; Function Attrs: nounwind optsize uwtable
define internal void @scan_init() #0 {
  %1 = tail call i32 @name_ref(ptr noundef nonnull @.str.1.107, i32 noundef 1, ptr noundef nonnull @left_bracket, i32 noundef 0) #64
  %2 = tail call i32 @name_ref(ptr noundef nonnull @.str.2.108, i32 noundef 1, ptr noundef nonnull @right_bracket, i32 noundef 0) #64
  %3 = tail call i32 @name_ref(ptr noundef nonnull @.str.3.109, i32 noundef 0, ptr noundef nonnull @empty_name, i32 noundef 0) #64
  store i8 103, ptr @scan_char_array, align 16, !tbaa !13
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(256) getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 2), i8 100, i64 255, i1 false)
  br label %4

4:                                                ; preds = %4, %0
  %5 = phi i8 [ 32, %0 ], [ %10, %4 ]
  %6 = phi ptr [ @scan_init.space_chars, %0 ], [ %9, %4 ]
  %7 = sext i8 %5 to i64
  %8 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %7
  store i8 101, ptr %8, align 1, !tbaa !13
  %9 = getelementptr inbounds i8, ptr %6, i64 1
  %10 = load i8, ptr %9, align 1, !tbaa !13
  %11 = icmp eq ptr %9, getelementptr inbounds ([6 x i8], ptr @scan_init.space_chars, i64 0, i64 5)
  br i1 %11, label %12, label %4, !llvm.loop !136

12:                                               ; preds = %4
  store i8 101, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 27), align 1, !tbaa !13
  store i8 101, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 12), align 4, !tbaa !13
  store i8 101, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), align 1, !tbaa !13
  br label %13

13:                                               ; preds = %13, %12
  %14 = phi i8 [ 40, %12 ], [ %19, %13 ]
  %15 = phi ptr [ @scan_init.stop_chars, %12 ], [ %18, %13 ]
  %16 = sext i8 %14 to i64
  %17 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %16
  store i8 102, ptr %17, align 1, !tbaa !13
  %18 = getelementptr inbounds i8, ptr %15, i64 1
  %19 = load i8, ptr %18, align 1, !tbaa !13
  %20 = icmp eq ptr %18, getelementptr inbounds ([11 x i8], ptr @scan_init.stop_chars, i64 0, i64 10)
  br i1 %20, label %21, label %13, !llvm.loop !137

21:                                               ; preds = %36, %13
  %22 = phi i64 [ %37, %36 ], [ 0, %13 ]
  %23 = phi <2 x i64> [ %38, %36 ], [ <i64 0, i64 1>, %13 ]
  %24 = trunc i64 %22 to i8
  %25 = icmp ult <2 x i64> %23, <i64 10, i64 10>
  %26 = extractelement <2 x i1> %25, i64 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = add nuw nsw i64 %22, 48
  %29 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %28
  store i8 %24, ptr %29, align 1, !tbaa !13
  br label %30

30:                                               ; preds = %27, %21
  %31 = extractelement <2 x i1> %25, i64 1
  br i1 %31, label %32, label %36

32:                                               ; preds = %30
  %33 = add i64 %22, 49
  %34 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %33
  %35 = or i8 %24, 1
  store i8 %35, ptr %34, align 2, !tbaa !13
  br label %36

36:                                               ; preds = %32, %30
  %37 = add i64 %22, 2
  %38 = add <2 x i64> %23, <i64 2, i64 2>
  %39 = icmp eq i64 %37, 10
  br i1 %39, label %40, label %21, !llvm.loop !138

40:                                               ; preds = %40, %36
  %41 = phi i64 [ %48, %40 ], [ 0, %36 ]
  %42 = trunc i64 %41 to i8
  %43 = add nuw nsw i8 %42, 10
  %44 = add nuw nsw i64 %41, 97
  %45 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %44
  store i8 %43, ptr %45, align 1, !tbaa !13
  %46 = add nuw nsw i64 %41, 65
  %47 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %46
  store i8 %43, ptr %47, align 1, !tbaa !13
  %48 = add nuw nsw i64 %41, 1
  %49 = icmp eq i64 %48, 26
  br i1 %49, label %50, label %40, !llvm.loop !141

50:                                               ; preds = %40
  store i32 0, ptr @array_packing, align 4, !tbaa !11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @scan_token(ptr noundef %0, i32 noundef %1, ptr noundef %2) #0 {
  %4 = alloca %struct.dynamic_area_s, align 8
  %5 = alloca %struct.dynamic_area_s, align 8
  %6 = alloca %struct.stream_s, align 8
  %7 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %4) #65
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %10 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 5
  %11 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 4
  %12 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 3
  %13 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 2
  %14 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 1
  %15 = getelementptr inbounds %struct.dynamic_area_s, ptr %5, i64 0, i32 4
  %16 = getelementptr inbounds %struct.dynamic_area_s, ptr %5, i64 0, i32 5
  %17 = getelementptr inbounds %struct.dynamic_area_s, ptr %5, i64 0, i32 1
  %18 = getelementptr inbounds %struct.dynamic_area_s, ptr %5, i64 0, i32 2
  %19 = getelementptr inbounds %struct.dynamic_area_s, ptr %5, i64 0, i32 3
  br label %20

20:                                               ; preds = %379, %3
  %21 = phi i32 [ %362, %379 ], [ 0, %3 ]
  %22 = phi i32 [ %363, %379 ], [ 0, %3 ]
  %23 = phi ptr [ %381, %379 ], [ %2, %3 ]
  br label %24

24:                                               ; preds = %78, %20
  %25 = phi i32 [ %22, %20 ], [ %87, %78 ]
  %26 = phi ptr [ %23, %20 ], [ %82, %78 ]
  br label %27

27:                                               ; preds = %210, %24
  %28 = load ptr, ptr %0, align 8, !tbaa !124
  %29 = load ptr, ptr %8, align 8, !tbaa !142
  %30 = icmp ult ptr %28, %29
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = getelementptr inbounds i8, ptr %28, i64 1
  store ptr %32, ptr %0, align 8, !tbaa !124
  %33 = load i8, ptr %32, align 1, !tbaa !13
  %34 = zext i8 %33 to i32
  br label %38

35:                                               ; preds = %27
  %36 = load ptr, ptr %9, align 8, !tbaa !143
  %37 = call i32 %36(ptr noundef nonnull %0) #64
  br label %38

38:                                               ; preds = %35, %31
  %39 = phi i32 [ %34, %31 ], [ %37, %35 ]
  switch i32 %39, label %218 [
    i32 32, label %210
    i32 12, label %210
    i32 9, label %210
    i32 10, label %210
    i32 13, label %210
    i32 0, label %210
    i32 11, label %210
    i32 26, label %210
    i32 91, label %40
    i32 93, label %44
    i32 60, label %48
    i32 40, label %50
    i32 123, label %52
    i32 62, label %382
    i32 41, label %382
    i32 125, label %88
    i32 47, label %128
    i32 37, label %184
    i32 -1, label %214
    i32 48, label %217
    i32 49, label %217
    i32 50, label %217
    i32 51, label %217
    i32 52, label %217
    i32 53, label %217
    i32 54, label %217
    i32 55, label %217
    i32 56, label %217
    i32 57, label %217
    i32 46, label %217
    i32 43, label %217
    i32 45, label %217
  ]

40:                                               ; preds = %38
  %.lcssa12 = phi i32 [ %25, %38 ]
  %.lcssa1 = phi ptr [ %26, %38 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa1, ptr noundef nonnull align 8 dereferenceable(16) @left_bracket, i64 16, i1 false), !tbaa.struct !101
  %41 = getelementptr inbounds %struct.ref_s, ptr %.lcssa1, i64 0, i32 1
  %42 = load i16, ptr %41, align 8, !tbaa !14
  %43 = or i16 %42, 1
  store i16 %43, ptr %41, align 8, !tbaa !14
  br label %359

44:                                               ; preds = %38
  %.lcssa13 = phi i32 [ %25, %38 ]
  %.lcssa2 = phi ptr [ %26, %38 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa2, ptr noundef nonnull align 8 dereferenceable(16) @right_bracket, i64 16, i1 false), !tbaa.struct !101
  %45 = getelementptr inbounds %struct.ref_s, ptr %.lcssa2, i64 0, i32 1
  %46 = load i16, ptr %45, align 8, !tbaa !14
  %47 = or i16 %46, 1
  store i16 %47, ptr %45, align 8, !tbaa !14
  br label %359

48:                                               ; preds = %38
  %.lcssa14 = phi i32 [ %25, %38 ]
  %.lcssa3 = phi ptr [ %26, %38 ]
  %49 = call i32 @scan_hex_string(ptr noundef nonnull %0, ptr noundef %.lcssa3) #62, !range !107
  br label %359

50:                                               ; preds = %38
  %.lcssa15 = phi i32 [ %25, %38 ]
  %.lcssa4 = phi ptr [ %26, %38 ]
  %51 = call i32 @scan_string(ptr noundef nonnull %0, i32 noundef 0, ptr noundef %.lcssa4) #62
  br label %359

52:                                               ; preds = %38
  %53 = icmp eq i32 %25, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  %55 = load ptr, ptr %10, align 8, !tbaa !135
  br label %66

56:                                               ; preds = %52
  %57 = load ptr, ptr @osp, align 8, !tbaa !7
  %58 = getelementptr inbounds %struct.ref_s, ptr %57, i64 1
  store ptr %58, ptr %4, align 8, !tbaa !133
  %59 = load ptr, ptr @ostop, align 8, !tbaa !7
  %60 = getelementptr inbounds %struct.ref_s, ptr %59, i64 1
  store ptr %60, ptr %10, align 8, !tbaa !135
  store i32 0, ptr %11, align 8, !tbaa !134
  store i32 16, ptr %12, align 4, !tbaa !131
  %61 = ptrtoint ptr %59 to i64
  %62 = ptrtoint ptr %57 to i64
  %63 = sub i64 %61, %62
  %64 = lshr exact i64 %63, 4
  %65 = trunc i64 %64 to i32
  store i32 %65, ptr %13, align 8, !tbaa !129
  br label %66

66:                                               ; preds = %56, %54
  %67 = phi ptr [ %60, %56 ], [ %55, %54 ]
  %68 = phi ptr [ %58, %56 ], [ %26, %54 ]
  %69 = ptrtoint ptr %67 to i64
  %70 = ptrtoint ptr %68 to i64
  %71 = sub i64 %69, %70
  %72 = icmp ult i64 %71, 32
  br i1 %72, label %73, label %78

73:                                               ; preds = %66
  store ptr %68, ptr %14, align 8, !tbaa !132
  %74 = call i32 @dynamic_grow(ptr noundef nonnull %4) #62, !range !55
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %382, label %76

76:                                               ; preds = %73
  %77 = load ptr, ptr %14, align 8, !tbaa !132
  br label %78

78:                                               ; preds = %76, %66
  %79 = phi ptr [ %77, %76 ], [ %68, %66 ]
  %80 = trunc i32 %25 to i16
  %81 = getelementptr inbounds %struct.ref_s, ptr %79, i64 0, i32 2
  store i16 %80, ptr %81, align 2, !tbaa !17
  %82 = getelementptr inbounds %struct.ref_s, ptr %79, i64 1
  %83 = load ptr, ptr %4, align 8, !tbaa !133
  %84 = ptrtoint ptr %82 to i64
  %85 = ptrtoint ptr %83 to i64
  %86 = sub i64 %84, %85
  %87 = trunc i64 %86 to i32
  br label %24

88:                                               ; preds = %38
  %.lcssa17 = phi i32 [ %25, %38 ]
  %.lcssa6 = phi ptr [ %26, %38 ]
  %89 = icmp eq i32 %.lcssa17, 0
  br i1 %89, label %382, label %90

90:                                               ; preds = %88
  %91 = load ptr, ptr %4, align 8, !tbaa !133
  %92 = sext i32 %.lcssa17 to i64
  %93 = getelementptr inbounds i8, ptr %91, i64 %92
  %94 = ptrtoint ptr %.lcssa6 to i64
  %95 = ptrtoint ptr %93 to i64
  %96 = sub i64 %94, %95
  %97 = lshr exact i64 %96, 4
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds %struct.ref_s, ptr %93, i64 -1
  %100 = getelementptr %struct.ref_s, ptr %93, i64 -1, i32 2
  %101 = load i16, ptr %100, align 2, !tbaa !17
  %102 = zext i16 %101 to i32
  %103 = icmp eq i16 %101, 0
  %104 = load i32, ptr %11, align 8
  %105 = icmp ne i32 %104, 0
  %106 = select i1 %103, i1 %105, i1 false
  br i1 %106, label %107, label %112

107:                                              ; preds = %90
  %108 = and i64 %96, 68719476720
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %99, ptr nonnull align 8 %93, i64 %108, i1 false)
  %109 = load i32, ptr %13, align 8, !tbaa !129
  %110 = call ptr @alloc_shrink(ptr noundef nonnull %99, i32 noundef %109, i32 noundef %98, i32 noundef 16, ptr noundef nonnull @.str.4.112) #64
  %111 = icmp eq ptr %110, null
  br i1 %111, label %382, label %118

112:                                              ; preds = %90
  %113 = call ptr @alloc(i32 noundef %98, i32 noundef 16, ptr noundef nonnull @.str.5.113) #64
  %114 = icmp eq ptr %113, null
  br i1 %114, label %382, label %115

115:                                              ; preds = %112
  %116 = and i64 %96, 68719476720
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %113, ptr nonnull align 8 %93, i64 %116, i1 false)
  %117 = select i1 %103, ptr %2, ptr %99
  br label %118

118:                                              ; preds = %115, %107
  %119 = phi ptr [ %110, %107 ], [ %113, %115 ]
  %120 = phi ptr [ %2, %107 ], [ %117, %115 ]
  %121 = load i32, ptr @array_packing, align 4, !tbaa !11
  %122 = icmp eq i32 %121, 0
  store ptr %119, ptr %120, align 8, !tbaa !13
  %123 = getelementptr inbounds %struct.ref_s, ptr %120, i64 0, i32 1
  %124 = trunc i64 %97 to i16
  %125 = getelementptr inbounds %struct.ref_s, ptr %120, i64 0, i32 2
  br i1 %122, label %127, label %126

126:                                              ; preds = %118
  store i16 555, ptr %123, align 8, !tbaa !14
  store i16 %124, ptr %125, align 2, !tbaa !17
  br label %359

127:                                              ; preds = %118
  store i16 771, ptr %123, align 8, !tbaa !14
  store i16 %124, ptr %125, align 2, !tbaa !17
  br label %359

128:                                              ; preds = %38
  %.lcssa18 = phi i32 [ %25, %38 ]
  %.lcssa7 = phi ptr [ %26, %38 ]
  %129 = load ptr, ptr %0, align 8, !tbaa !124
  %130 = load ptr, ptr %8, align 8, !tbaa !142
  %131 = icmp ult ptr %129, %130
  br i1 %131, label %132, label %136

132:                                              ; preds = %128
  %133 = getelementptr inbounds i8, ptr %129, i64 1
  store ptr %133, ptr %0, align 8, !tbaa !124
  %134 = load i8, ptr %133, align 1, !tbaa !13
  %135 = zext i8 %134 to i32
  br label %139

136:                                              ; preds = %128
  %137 = load ptr, ptr %9, align 8, !tbaa !143
  %138 = call i32 %137(ptr noundef nonnull %0) #64
  br label %139

139:                                              ; preds = %136, %132
  %140 = phi i32 [ %135, %132 ], [ %138, %136 ]
  %141 = icmp eq i32 %140, 47
  br i1 %141, label %142, label %153

142:                                              ; preds = %139
  %143 = load ptr, ptr %0, align 8, !tbaa !124
  %144 = load ptr, ptr %8, align 8, !tbaa !142
  %145 = icmp ult ptr %143, %144
  br i1 %145, label %146, label %150

146:                                              ; preds = %142
  %147 = getelementptr inbounds i8, ptr %143, i64 1
  store ptr %147, ptr %0, align 8, !tbaa !124
  %148 = load i8, ptr %147, align 1, !tbaa !13
  %149 = zext i8 %148 to i32
  br label %153

150:                                              ; preds = %142
  %151 = load ptr, ptr %9, align 8, !tbaa !143
  %152 = call i32 %151(ptr noundef nonnull %0) #64
  br label %153

153:                                              ; preds = %150, %146, %139
  %154 = phi i32 [ 2, %150 ], [ 2, %146 ], [ 1, %139 ]
  %155 = phi i32 [ %152, %150 ], [ %149, %146 ], [ %140, %139 ]
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %156
  %158 = load i8, ptr %157, align 1, !tbaa !13
  switch i8 %158, label %218 [
    i8 101, label %166
    i8 103, label %159
    i8 102, label %160
  ]

159:                                              ; preds = %153
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa7, ptr noundef nonnull align 8 dereferenceable(16) @empty_name, i64 16, i1 false), !tbaa.struct !101
  br label %338

160:                                              ; preds = %153
  switch i32 %155, label %163 [
    i32 91, label %161
    i32 93, label %162
  ]

161:                                              ; preds = %160
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa7, ptr noundef nonnull align 8 dereferenceable(16) @left_bracket, i64 16, i1 false), !tbaa.struct !101
  br label %338

162:                                              ; preds = %160
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa7, ptr noundef nonnull align 8 dereferenceable(16) @right_bracket, i64 16, i1 false), !tbaa.struct !101
  br label %338

163:                                              ; preds = %160
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa7, ptr noundef nonnull align 8 dereferenceable(16) @empty_name, i64 16, i1 false), !tbaa.struct !101
  %164 = load ptr, ptr %0, align 8, !tbaa !124
  %165 = getelementptr inbounds i8, ptr %164, i64 -1
  store ptr %165, ptr %0, align 8, !tbaa !124
  br label %338

166:                                              ; preds = %153
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %.lcssa7, ptr noundef nonnull align 8 dereferenceable(16) @empty_name, i64 16, i1 false), !tbaa.struct !101
  %167 = icmp eq i32 %155, 13
  br i1 %167, label %168, label %338

168:                                              ; preds = %166
  %169 = load ptr, ptr %0, align 8, !tbaa !124
  %170 = load ptr, ptr %8, align 8, !tbaa !142
  %171 = icmp ult ptr %169, %170
  br i1 %171, label %172, label %176

172:                                              ; preds = %168
  %173 = getelementptr inbounds i8, ptr %169, i64 1
  store ptr %173, ptr %0, align 8, !tbaa !124
  %174 = load i8, ptr %173, align 1, !tbaa !13
  %175 = zext i8 %174 to i32
  br label %179

176:                                              ; preds = %168
  %177 = load ptr, ptr %9, align 8, !tbaa !143
  %178 = call i32 %177(ptr noundef nonnull %0) #64
  br label %179

179:                                              ; preds = %176, %172
  %180 = phi i32 [ %175, %172 ], [ %178, %176 ]
  switch i32 %180, label %181 [
    i32 -1, label %338
    i32 10, label %338
  ]

181:                                              ; preds = %179
  %182 = load ptr, ptr %0, align 8, !tbaa !124
  %183 = getelementptr inbounds i8, ptr %182, i64 -1
  store ptr %183, ptr %0, align 8, !tbaa !124
  br label %338

184:                                              ; preds = %195, %38
  %185 = load ptr, ptr %0, align 8, !tbaa !124
  %186 = load ptr, ptr %8, align 8, !tbaa !142
  %187 = icmp ult ptr %185, %186
  br i1 %187, label %188, label %192

188:                                              ; preds = %184
  %189 = getelementptr inbounds i8, ptr %185, i64 1
  store ptr %189, ptr %0, align 8, !tbaa !124
  %190 = load i8, ptr %189, align 1, !tbaa !13
  %191 = zext i8 %190 to i32
  br label %195

192:                                              ; preds = %184
  %193 = load ptr, ptr %9, align 8, !tbaa !143
  %194 = call i32 %193(ptr noundef nonnull %0) #64
  br label %195

195:                                              ; preds = %192, %188
  %196 = phi i32 [ %191, %188 ], [ %194, %192 ]
  switch i32 %196, label %184 [
    i32 13, label %197
    i32 -1, label %214
    i32 10, label %210
    i32 12, label %210
  ]

197:                                              ; preds = %195
  %198 = load ptr, ptr %0, align 8, !tbaa !124
  %199 = load ptr, ptr %8, align 8, !tbaa !142
  %200 = icmp ult ptr %198, %199
  br i1 %200, label %201, label %205

201:                                              ; preds = %197
  %202 = getelementptr inbounds i8, ptr %198, i64 1
  store ptr %202, ptr %0, align 8, !tbaa !124
  %203 = load i8, ptr %202, align 1, !tbaa !13
  %204 = zext i8 %203 to i32
  br label %208

205:                                              ; preds = %197
  %206 = load ptr, ptr %9, align 8, !tbaa !143
  %207 = call i32 %206(ptr noundef nonnull %0) #64
  br label %208

208:                                              ; preds = %205, %201
  %209 = phi i32 [ %204, %201 ], [ %207, %205 ]
  switch i32 %209, label %211 [
    i32 -1, label %210
    i32 10, label %210
  ]

210:                                              ; preds = %211, %208, %208, %195, %195, %38, %38, %38, %38, %38, %38, %38, %38
  br label %27

211:                                              ; preds = %208
  %212 = load ptr, ptr %0, align 8, !tbaa !124
  %213 = getelementptr inbounds i8, ptr %212, i64 -1
  store ptr %213, ptr %0, align 8, !tbaa !124
  br label %210

214:                                              ; preds = %195, %38
  %.lcssa19 = phi i32 [ %25, %195 ], [ %25, %38 ]
  %.lcssa8 = phi ptr [ %26, %195 ], [ %26, %38 ]
  %215 = icmp eq i32 %.lcssa19, 0
  %216 = select i1 %215, i32 1, i32 -18
  br label %359

217:                                              ; preds = %38, %38, %38, %38, %38, %38, %38, %38, %38, %38, %38, %38, %38
  %.lcssa20 = phi i32 [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ], [ %25, %38 ]
  %.lcssa9 = phi ptr [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ]
  br label %218

218:                                              ; preds = %217, %153, %38
  %.lcssa11 = phi i32 [ %.lcssa20, %217 ], [ %.lcssa18, %153 ], [ %25, %38 ]
  %.lcssa = phi ptr [ %.lcssa9, %217 ], [ %.lcssa7, %153 ], [ %26, %38 ]
  %219 = phi i32 [ %154, %153 ], [ 0, %217 ], [ 0, %38 ]
  %220 = phi i1 [ true, %153 ], [ false, %217 ], [ true, %38 ]
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %5) #65
  %221 = load ptr, ptr %0, align 8, !tbaa !124
  %222 = load ptr, ptr %8, align 8, !tbaa !142
  store ptr %221, ptr %5, align 8, !tbaa !133
  store i32 0, ptr %15, align 8, !tbaa !134
  br label %223

223:                                              ; preds = %236, %218
  %224 = phi ptr [ %221, %218 ], [ %225, %236 ]
  %225 = getelementptr inbounds i8, ptr %224, i64 1
  %226 = icmp ult ptr %225, %222
  br i1 %226, label %236, label %227

227:                                              ; preds = %223
  %.lcssa24 = phi ptr [ %224, %223 ]
  %.lcssa22 = phi ptr [ %225, %223 ]
  store ptr %.lcssa24, ptr %0, align 8, !tbaa !124
  store ptr %.lcssa22, ptr %16, align 8, !tbaa !135
  store ptr %.lcssa22, ptr %17, align 8, !tbaa !132
  %228 = ptrtoint ptr %.lcssa22 to i64
  %229 = ptrtoint ptr %221 to i64
  %230 = sub i64 %228, %229
  %231 = trunc i64 %230 to i32
  store i32 %231, ptr %18, align 8, !tbaa !129
  store i32 1, ptr %19, align 4, !tbaa !131
  %232 = call i32 @dynamic_grow(ptr noundef nonnull %5) #62, !range !55
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %337, label %234

234:                                              ; preds = %227
  %235 = load ptr, ptr %17, align 8, !tbaa !132
  br label %247

236:                                              ; preds = %223
  %237 = load i8, ptr %225, align 1, !tbaa !13
  %238 = zext i8 %237 to i64
  %239 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %238
  %240 = load i8, ptr %239, align 1, !tbaa !13
  %241 = icmp ult i8 %240, 101
  br i1 %241, label %223, label %242, !llvm.loop !144

242:                                              ; preds = %236
  %.lcssa26 = phi i8 [ %237, %236 ]
  %.lcssa23 = phi ptr [ %225, %236 ]
  %243 = zext i8 %.lcssa26 to i32
  store ptr %.lcssa23, ptr %0, align 8, !tbaa !124
  %244 = zext i8 %.lcssa26 to i64
  %245 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %244
  %246 = load i8, ptr %245, align 1, !tbaa !13
  br label %277

247:                                              ; preds = %273, %234
  %248 = phi ptr [ %235, %234 ], [ %276, %273 ]
  %249 = load ptr, ptr %0, align 8, !tbaa !124
  %250 = load ptr, ptr %8, align 8, !tbaa !142
  %251 = icmp ult ptr %249, %250
  br i1 %251, label %252, label %256

252:                                              ; preds = %247
  %253 = getelementptr inbounds i8, ptr %249, i64 1
  store ptr %253, ptr %0, align 8, !tbaa !124
  %254 = load i8, ptr %253, align 1, !tbaa !13
  %255 = zext i8 %254 to i32
  br label %259

256:                                              ; preds = %247
  %257 = load ptr, ptr %9, align 8, !tbaa !143
  %258 = call i32 %257(ptr noundef nonnull %0) #64
  br label %259

259:                                              ; preds = %256, %252
  %260 = phi i32 [ %255, %252 ], [ %258, %256 ]
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %261
  %263 = load i8, ptr %262, align 1, !tbaa !13
  %264 = icmp ult i8 %263, 101
  br i1 %264, label %265, label %277

265:                                              ; preds = %259
  %266 = load ptr, ptr %16, align 8, !tbaa !135
  %267 = icmp eq ptr %248, %266
  br i1 %267, label %268, label %273

268:                                              ; preds = %265
  store ptr %248, ptr %17, align 8, !tbaa !132
  %269 = call i32 @dynamic_grow(ptr noundef nonnull %5) #62, !range !55
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %337, label %271

271:                                              ; preds = %268
  %272 = load ptr, ptr %17, align 8, !tbaa !132
  br label %273

273:                                              ; preds = %271, %265
  %274 = phi ptr [ %272, %271 ], [ %248, %265 ]
  %275 = trunc i32 %260 to i8
  %276 = getelementptr inbounds i8, ptr %274, i64 1
  store i8 %275, ptr %274, align 1, !tbaa !13
  br label %247, !llvm.loop !145

277:                                              ; preds = %259, %242
  %278 = phi i8 [ %246, %242 ], [ %263, %259 ]
  %279 = phi i32 [ %243, %242 ], [ %260, %259 ]
  %280 = phi ptr [ %.lcssa23, %242 ], [ %248, %259 ]
  switch i8 %278, label %302 [
    i8 102, label %281
    i8 101, label %284
  ]

281:                                              ; preds = %277
  %282 = load ptr, ptr %0, align 8, !tbaa !124
  %283 = getelementptr inbounds i8, ptr %282, i64 -1
  store ptr %283, ptr %0, align 8, !tbaa !124
  br label %284

284:                                              ; preds = %281, %277
  %285 = icmp eq i32 %279, 13
  br i1 %285, label %286, label %302

286:                                              ; preds = %284
  %287 = load ptr, ptr %0, align 8, !tbaa !124
  %288 = load ptr, ptr %8, align 8, !tbaa !142
  %289 = icmp ult ptr %287, %288
  br i1 %289, label %290, label %294

290:                                              ; preds = %286
  %291 = getelementptr inbounds i8, ptr %287, i64 1
  store ptr %291, ptr %0, align 8, !tbaa !124
  %292 = load i8, ptr %291, align 1, !tbaa !13
  %293 = zext i8 %292 to i32
  br label %297

294:                                              ; preds = %286
  %295 = load ptr, ptr %9, align 8, !tbaa !143
  %296 = call i32 %295(ptr noundef nonnull %0) #64
  br label %297

297:                                              ; preds = %294, %290
  %298 = phi i32 [ %293, %290 ], [ %296, %294 ]
  switch i32 %298, label %299 [
    i32 -1, label %302
    i32 10, label %302
  ]

299:                                              ; preds = %297
  %300 = load ptr, ptr %0, align 8, !tbaa !124
  %301 = getelementptr inbounds i8, ptr %300, i64 -1
  store ptr %301, ptr %0, align 8, !tbaa !124
  br label %302

302:                                              ; preds = %299, %297, %297, %284, %277
  %303 = load ptr, ptr %5, align 8, !tbaa !133
  br i1 %220, label %304, label %306

304:                                              ; preds = %302
  %305 = ptrtoint ptr %280 to i64
  br label %323

306:                                              ; preds = %302
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %6) #65
  %307 = ptrtoint ptr %280 to i64
  %308 = ptrtoint ptr %303 to i64
  %309 = sub i64 %307, %308
  %310 = trunc i64 %309 to i32
  call void @sread_string(ptr noundef nonnull %6, ptr noundef %303, i32 noundef %310) #64
  %311 = call i32 @scan_number(ptr noundef nonnull %6, ptr noundef %.lcssa) #62
  %312 = icmp eq i32 %311, -18
  br i1 %312, label %321, label %313

313:                                              ; preds = %306
  %314 = load i32, ptr %15, align 8, !tbaa !134
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %320, label %316

316:                                              ; preds = %313
  %317 = load ptr, ptr %5, align 8, !tbaa !133
  %318 = load i32, ptr %18, align 8, !tbaa !129
  %319 = load i32, ptr %19, align 4, !tbaa !131
  call void @alloc_free(ptr noundef %317, i32 noundef %318, i32 noundef %319, ptr noundef nonnull @.str.104) #64
  br label %320

320:                                              ; preds = %316, %313
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %6) #65
  br label %335

321:                                              ; preds = %306
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %6) #65
  %322 = load ptr, ptr %5, align 8, !tbaa !133
  br label %323

323:                                              ; preds = %321, %304
  %324 = phi i64 [ %305, %304 ], [ %307, %321 ]
  %325 = phi ptr [ %303, %304 ], [ %322, %321 ]
  %326 = ptrtoint ptr %325 to i64
  %327 = sub i64 %324, %326
  %328 = trunc i64 %327 to i32
  %329 = call i32 @name_ref(ptr noundef %325, i32 noundef %328, ptr noundef %.lcssa, i32 noundef 1) #64
  %330 = load i32, ptr %15, align 8, !tbaa !134
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %335, label %332

332:                                              ; preds = %323
  %333 = load i32, ptr %18, align 8, !tbaa !129
  %334 = load i32, ptr %19, align 4, !tbaa !131
  call void @alloc_free(ptr noundef %325, i32 noundef %333, i32 noundef %334, ptr noundef nonnull @.str.104) #64
  br label %335

335:                                              ; preds = %332, %323, %320
  %336 = phi i32 [ %311, %320 ], [ %329, %323 ], [ %329, %332 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %5) #65
  br label %338

337:                                              ; preds = %268, %227
  %.lcssa11.lcssa = phi i32 [ %.lcssa11, %268 ], [ %.lcssa11, %227 ]
  %.lcssa.lcssa = phi ptr [ %.lcssa, %268 ], [ %.lcssa, %227 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %5) #65
  br label %382

338:                                              ; preds = %335, %181, %179, %179, %166, %163, %162, %161, %159
  %339 = phi i32 [ %.lcssa18, %163 ], [ %.lcssa18, %162 ], [ %.lcssa18, %161 ], [ %.lcssa18, %159 ], [ %.lcssa18, %181 ], [ %.lcssa18, %179 ], [ %.lcssa18, %166 ], [ %.lcssa18, %179 ], [ %.lcssa11, %335 ]
  %340 = phi ptr [ %.lcssa7, %163 ], [ %.lcssa7, %162 ], [ %.lcssa7, %161 ], [ %.lcssa7, %159 ], [ %.lcssa7, %181 ], [ %.lcssa7, %179 ], [ %.lcssa7, %166 ], [ %.lcssa7, %179 ], [ %.lcssa, %335 ]
  %341 = phi i32 [ %154, %163 ], [ %154, %162 ], [ %154, %161 ], [ %154, %159 ], [ %154, %181 ], [ %154, %179 ], [ %154, %166 ], [ %154, %179 ], [ %219, %335 ]
  %342 = phi i32 [ %21, %163 ], [ %21, %162 ], [ %21, %161 ], [ %21, %159 ], [ %21, %181 ], [ %21, %179 ], [ %21, %166 ], [ %21, %179 ], [ %336, %335 ]
  %343 = icmp slt i32 %342, 0
  br i1 %343, label %382, label %344

344:                                              ; preds = %338
  switch i32 %341, label %359 [
    i32 0, label %345
    i32 2, label %352
  ]

345:                                              ; preds = %344
  %346 = getelementptr inbounds %struct.ref_s, ptr %340, i64 0, i32 1
  %347 = load i16, ptr %346, align 8, !tbaa !14
  %348 = and i16 %347, 252
  %349 = icmp eq i16 %348, 28
  br i1 %349, label %350, label %359

350:                                              ; preds = %345
  %351 = or i16 %347, 1
  store i16 %351, ptr %346, align 8, !tbaa !14
  br label %359

352:                                              ; preds = %344
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #65
  %353 = load ptr, ptr @dsp, align 8, !tbaa !7
  %354 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef %353, ptr noundef %340, ptr noundef nonnull %7) #64
  %355 = icmp sgt i32 %354, 0
  br i1 %355, label %356, label %358

356:                                              ; preds = %352
  %357 = load ptr, ptr %7, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %340, ptr noundef nonnull align 8 dereferenceable(16) %357, i64 16, i1 false), !tbaa.struct !101
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #65
  br label %359

358:                                              ; preds = %352
  %.lcssa21 = phi i32 [ %339, %352 ]
  %.lcssa10 = phi ptr [ %340, %352 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #65
  br label %382

359:                                              ; preds = %356, %350, %345, %344, %214, %127, %126, %50, %48, %44, %40
  %360 = phi i32 [ %339, %344 ], [ %339, %350 ], [ %339, %345 ], [ %.lcssa19, %214 ], [ %.lcssa15, %50 ], [ %.lcssa14, %48 ], [ %.lcssa13, %44 ], [ %.lcssa12, %40 ], [ %339, %356 ], [ %.lcssa17, %127 ], [ %.lcssa17, %126 ]
  %361 = phi ptr [ %340, %344 ], [ %340, %350 ], [ %340, %345 ], [ %.lcssa8, %214 ], [ %.lcssa4, %50 ], [ %.lcssa3, %48 ], [ %.lcssa2, %44 ], [ %.lcssa1, %40 ], [ %340, %356 ], [ %.lcssa6, %127 ], [ %.lcssa6, %126 ]
  %362 = phi i32 [ %342, %344 ], [ %342, %350 ], [ %342, %345 ], [ %216, %214 ], [ %51, %50 ], [ %49, %48 ], [ %21, %44 ], [ %21, %40 ], [ %342, %356 ], [ %21, %127 ], [ %21, %126 ]
  %363 = phi i32 [ %339, %344 ], [ %339, %350 ], [ %339, %345 ], [ %.lcssa19, %214 ], [ %.lcssa15, %50 ], [ %.lcssa14, %48 ], [ %.lcssa13, %44 ], [ %.lcssa12, %40 ], [ %339, %356 ], [ %102, %127 ], [ %102, %126 ]
  %364 = phi ptr [ %340, %344 ], [ %340, %350 ], [ %340, %345 ], [ %.lcssa8, %214 ], [ %.lcssa4, %50 ], [ %.lcssa3, %48 ], [ %.lcssa2, %44 ], [ %.lcssa1, %40 ], [ %340, %356 ], [ %120, %127 ], [ %120, %126 ]
  %365 = icmp eq i32 %363, 0
  %366 = icmp slt i32 %362, 0
  %367 = select i1 %365, i1 true, i1 %366
  br i1 %367, label %382, label %368

368:                                              ; preds = %359
  %369 = load ptr, ptr %10, align 8, !tbaa !135
  %370 = ptrtoint ptr %369 to i64
  %371 = ptrtoint ptr %364 to i64
  %372 = sub i64 %370, %371
  %373 = icmp ult i64 %372, 32
  br i1 %373, label %374, label %379

374:                                              ; preds = %368
  store ptr %364, ptr %14, align 8, !tbaa !132
  %375 = call i32 @dynamic_grow(ptr noundef nonnull %4) #62, !range !55
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %382, label %377

377:                                              ; preds = %374
  %378 = load ptr, ptr %14, align 8, !tbaa !132
  br label %379

379:                                              ; preds = %377, %368
  %380 = phi ptr [ %378, %377 ], [ %364, %368 ]
  %381 = getelementptr inbounds %struct.ref_s, ptr %380, i64 1
  br label %20

382:                                              ; preds = %374, %359, %358, %338, %337, %112, %107, %88, %73, %38, %38
  %383 = phi i32 [ -25, %337 ], [ -21, %358 ], [ -18, %38 ], [ -18, %38 ], [ -25, %73 ], [ %342, %338 ], [ %362, %359 ], [ -25, %374 ], [ -25, %107 ], [ -25, %112 ], [ -18, %88 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %4) #65
  ret i32 %383
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @scan_hex_string(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = alloca %struct.dynamic_area_s, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.dynamic_area_s, ptr %3, i64 0, i32 2
  store i32 100, ptr %4, align 8, !tbaa !129
  %5 = getelementptr inbounds %struct.dynamic_area_s, ptr %3, i64 0, i32 3
  store i32 1, ptr %5, align 4, !tbaa !131
  %6 = tail call ptr @alloc(i32 noundef 100, i32 noundef 1, ptr noundef nonnull @.str.104) #64
  store ptr %6, ptr %3, align 8, !tbaa !133
  %7 = getelementptr inbounds i8, ptr %6, i64 100
  %8 = getelementptr inbounds %struct.dynamic_area_s, ptr %3, i64 0, i32 5
  store ptr %7, ptr %8, align 8, !tbaa !135
  %9 = getelementptr inbounds %struct.dynamic_area_s, ptr %3, i64 0, i32 4
  store i32 1, ptr %9, align 8, !tbaa !134
  %10 = getelementptr inbounds %struct.dynamic_area_s, ptr %3, i64 0, i32 1
  %11 = icmp eq ptr %6, null
  br i1 %11, label %98, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %14 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  br label %15

15:                                               ; preds = %59, %12
  %16 = phi ptr [ %63, %59 ], [ %6, %12 ]
  br label %17

17:                                               ; preds = %80, %15
  %18 = load ptr, ptr %0, align 8, !tbaa !124
  %19 = load ptr, ptr %13, align 8, !tbaa !142
  %20 = icmp ult ptr %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, ptr %18, i64 1
  store ptr %22, ptr %0, align 8, !tbaa !124
  %23 = load i8, ptr %22, align 1, !tbaa !13
  %24 = zext i8 %23 to i32
  br label %28

25:                                               ; preds = %17
  %26 = load ptr, ptr %14, align 8, !tbaa !143
  %27 = tail call i32 %26(ptr noundef nonnull %0) #64
  br label %28

28:                                               ; preds = %25, %21
  %29 = phi i32 [ %24, %21 ], [ %27, %25 ]
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %30
  %32 = load i8, ptr %31, align 1, !tbaa !13
  %33 = icmp ult i8 %32, 16
  br i1 %33, label %34, label %80

34:                                               ; preds = %64, %28
  %.lcssa3 = phi i32 [ %.lcssa3, %64 ], [ %29, %28 ]
  %.lcssa = phi i8 [ %.lcssa, %64 ], [ %32, %28 ]
  %35 = load ptr, ptr %0, align 8, !tbaa !124
  %36 = load ptr, ptr %13, align 8, !tbaa !142
  %37 = icmp ult ptr %35, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, ptr %35, i64 1
  store ptr %39, ptr %0, align 8, !tbaa !124
  %40 = load i8, ptr %39, align 1, !tbaa !13
  %41 = zext i8 %40 to i32
  br label %45

42:                                               ; preds = %34
  %43 = load ptr, ptr %14, align 8, !tbaa !143
  %44 = tail call i32 %43(ptr noundef nonnull %0) #64
  br label %45

45:                                               ; preds = %42, %38
  %46 = phi i32 [ %41, %38 ], [ %44, %42 ]
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !13
  %50 = icmp ult i8 %49, 16
  br i1 %50, label %51, label %64

51:                                               ; preds = %45
  %.lcssa5 = phi i8 [ %49, %45 ]
  %.lcssa.lcssa = phi i8 [ %.lcssa, %45 ]
  %52 = load ptr, ptr %8, align 8, !tbaa !135
  %53 = icmp eq ptr %16, %52
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  store ptr %16, ptr %10, align 8, !tbaa !132
  %55 = call i32 @dynamic_grow(ptr noundef nonnull %3) #62, !range !55
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %98, label %57

57:                                               ; preds = %54
  %58 = load ptr, ptr %10, align 8, !tbaa !132
  br label %59

59:                                               ; preds = %57, %51
  %60 = phi ptr [ %58, %57 ], [ %16, %51 ]
  %61 = shl i8 %.lcssa.lcssa, 4
  %62 = add nuw i8 %.lcssa5, %61
  %63 = getelementptr inbounds i8, ptr %60, i64 1
  store i8 %62, ptr %60, align 1, !tbaa !13
  br label %15

64:                                               ; preds = %45
  %65 = icmp eq i8 %49, 101
  br i1 %65, label %34, label %66, !llvm.loop !146

66:                                               ; preds = %64
  %.lcssa10 = phi ptr [ %16, %64 ]
  %.lcssa8 = phi i32 [ %46, %64 ]
  %.lcssa.lcssa2 = phi i8 [ %.lcssa, %64 ]
  %67 = icmp eq i32 %.lcssa8, 62
  br i1 %67, label %68, label %98

68:                                               ; preds = %66
  %69 = load ptr, ptr %8, align 8, !tbaa !135
  %70 = icmp eq ptr %.lcssa10, %69
  br i1 %70, label %71, label %76

71:                                               ; preds = %68
  store ptr %.lcssa10, ptr %10, align 8, !tbaa !132
  %72 = call i32 @dynamic_grow(ptr noundef nonnull %3) #62, !range !55
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %98, label %74

74:                                               ; preds = %71
  %75 = load ptr, ptr %10, align 8, !tbaa !132
  br label %76

76:                                               ; preds = %74, %68
  %77 = phi ptr [ %75, %74 ], [ %.lcssa10, %68 ]
  %78 = shl i8 %.lcssa.lcssa2, 4
  %79 = getelementptr inbounds i8, ptr %77, i64 1
  store i8 %78, ptr %77, align 1, !tbaa !13
  br label %84

80:                                               ; preds = %28
  %81 = icmp eq i8 %32, 101
  br i1 %81, label %17, label %82, !llvm.loop !147

82:                                               ; preds = %80
  %.lcssa9 = phi ptr [ %16, %80 ]
  %.lcssa4 = phi i32 [ %29, %80 ]
  %83 = icmp eq i32 %.lcssa4, 62
  br i1 %83, label %84, label %98

84:                                               ; preds = %82, %76
  %85 = phi ptr [ %79, %76 ], [ %.lcssa9, %82 ]
  %86 = load ptr, ptr %3, align 8, !tbaa !133
  %87 = ptrtoint ptr %85 to i64
  %88 = ptrtoint ptr %86 to i64
  %89 = sub i64 %87, %88
  %90 = trunc i64 %89 to i32
  %91 = load i32, ptr %4, align 8, !tbaa !129
  %92 = tail call ptr @alloc_shrink(ptr noundef %86, i32 noundef %91, i32 noundef %90, i32 noundef 1, ptr noundef nonnull @.str.6.114) #64
  %93 = icmp eq ptr %92, null
  br i1 %93, label %98, label %94

94:                                               ; preds = %84
  store ptr %92, ptr %1, align 8, !tbaa !13
  %95 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 822, ptr %95, align 8, !tbaa !14
  %96 = trunc i64 %89 to i16
  %97 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 2
  store i16 %96, ptr %97, align 2, !tbaa !17
  br label %98

98:                                               ; preds = %94, %84, %82, %71, %66, %54, %2
  %99 = phi i32 [ -25, %2 ], [ -18, %66 ], [ -25, %71 ], [ -18, %82 ], [ 0, %94 ], [ -25, %84 ], [ -25, %54 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %3) #65
  ret i32 %99
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @scan_string(ptr noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = alloca %struct.dynamic_area_s, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 2
  store i32 100, ptr %5, align 8, !tbaa !129
  %6 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 3
  store i32 1, ptr %6, align 4, !tbaa !131
  %7 = tail call ptr @alloc(i32 noundef 100, i32 noundef 1, ptr noundef nonnull @.str.104) #64
  store ptr %7, ptr %4, align 8, !tbaa !133
  %8 = getelementptr inbounds i8, ptr %7, i64 100
  %9 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 5
  store ptr %8, ptr %9, align 8, !tbaa !135
  %10 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 4
  store i32 1, ptr %10, align 8, !tbaa !134
  %11 = getelementptr inbounds %struct.dynamic_area_s, ptr %4, i64 0, i32 1
  %12 = icmp eq ptr %7, null
  br i1 %12, label %132, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %16 = icmp ne i32 %1, 0
  br label %17

17:                                               ; preds = %115, %13
  %18 = phi ptr [ %7, %13 ], [ %118, %115 ]
  %19 = phi i32 [ 0, %13 ], [ %107, %115 ]
  br label %20

20:                                               ; preds = %52, %17
  %21 = load ptr, ptr %0, align 8, !tbaa !124
  %22 = load ptr, ptr %14, align 8, !tbaa !142
  %23 = icmp ult ptr %21, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, ptr %21, i64 1
  store ptr %25, ptr %0, align 8, !tbaa !124
  %26 = load i8, ptr %25, align 1, !tbaa !13
  %27 = zext i8 %26 to i32
  br label %31

28:                                               ; preds = %20
  %29 = load ptr, ptr %15, align 8, !tbaa !143
  %30 = tail call i32 %29(ptr noundef nonnull %0) #64
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi i32 [ %27, %24 ], [ %30, %28 ]
  switch i32 %32, label %38 [
    i32 -1, label %132
    i32 40, label %33
    i32 41, label %35
  ]

33:                                               ; preds = %31
  %34 = add nsw i32 %19, 1
  br label %105

35:                                               ; preds = %31
  %36 = add nsw i32 %19, -1
  %37 = icmp slt i32 %19, 1
  br i1 %37, label %119, label %105

38:                                               ; preds = %31
  %39 = icmp ne i32 %32, 92
  %40 = or i1 %16, %39
  br i1 %40, label %103, label %41

41:                                               ; preds = %38
  %42 = load ptr, ptr %0, align 8, !tbaa !124
  %43 = load ptr, ptr %14, align 8, !tbaa !142
  %44 = icmp ult ptr %42, %43
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = getelementptr inbounds i8, ptr %42, i64 1
  store ptr %46, ptr %0, align 8, !tbaa !124
  %47 = load i8, ptr %46, align 1, !tbaa !13
  %48 = zext i8 %47 to i32
  br label %52

49:                                               ; preds = %41
  %50 = load ptr, ptr %15, align 8, !tbaa !143
  %51 = tail call i32 %50(ptr noundef nonnull %0) #64
  br label %52

52:                                               ; preds = %49, %45
  %53 = phi i32 [ %48, %45 ], [ %51, %49 ]
  switch i32 %53, label %103 [
    i32 110, label %105
    i32 114, label %54
    i32 116, label %55
    i32 98, label %56
    i32 102, label %57
    i32 10, label %20
    i32 48, label %58
    i32 49, label %58
    i32 50, label %58
    i32 51, label %58
    i32 52, label %58
    i32 53, label %58
    i32 54, label %58
    i32 55, label %58
  ]

54:                                               ; preds = %52
  br label %105

55:                                               ; preds = %52
  br label %105

56:                                               ; preds = %52
  br label %105

57:                                               ; preds = %52
  br label %105

58:                                               ; preds = %52, %52, %52, %52, %52, %52, %52, %52
  %.lcssa4 = phi i32 [ %53, %52 ], [ %53, %52 ], [ %53, %52 ], [ %53, %52 ], [ %53, %52 ], [ %53, %52 ], [ %53, %52 ], [ %53, %52 ]
  %59 = load ptr, ptr %0, align 8, !tbaa !124
  %60 = load ptr, ptr %14, align 8, !tbaa !142
  %61 = icmp ult ptr %59, %60
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, ptr %59, i64 1
  store ptr %63, ptr %0, align 8, !tbaa !124
  %64 = load i8, ptr %63, align 1, !tbaa !13
  %65 = zext i8 %64 to i32
  br label %69

66:                                               ; preds = %58
  %67 = load ptr, ptr %15, align 8, !tbaa !143
  %68 = tail call i32 %67(ptr noundef nonnull %0) #64
  br label %69

69:                                               ; preds = %66, %62
  %70 = phi i32 [ %65, %62 ], [ %68, %66 ]
  %71 = add nsw i32 %.lcssa4, -48
  %72 = and i32 %70, -8
  %73 = icmp eq i32 %72, 48
  br i1 %73, label %74, label %96

74:                                               ; preds = %69
  %75 = shl nuw nsw i32 %71, 3
  %76 = add nsw i32 %75, -48
  %77 = add nsw i32 %76, %70
  %78 = load ptr, ptr %0, align 8, !tbaa !124
  %79 = load ptr, ptr %14, align 8, !tbaa !142
  %80 = icmp ult ptr %78, %79
  br i1 %80, label %81, label %85

81:                                               ; preds = %74
  %82 = getelementptr inbounds i8, ptr %78, i64 1
  store ptr %82, ptr %0, align 8, !tbaa !124
  %83 = load i8, ptr %82, align 1, !tbaa !13
  %84 = zext i8 %83 to i32
  br label %88

85:                                               ; preds = %74
  %86 = load ptr, ptr %15, align 8, !tbaa !143
  %87 = tail call i32 %86(ptr noundef nonnull %0) #64
  br label %88

88:                                               ; preds = %85, %81
  %89 = phi i32 [ %84, %81 ], [ %87, %85 ]
  %90 = and i32 %89, -8
  %91 = icmp eq i32 %90, 48
  br i1 %91, label %92, label %96

92:                                               ; preds = %88
  %93 = shl nuw nsw i32 %77, 3
  %94 = add nsw i32 %93, -48
  %95 = add nsw i32 %94, %89
  br label %105

96:                                               ; preds = %88, %69
  %97 = phi i32 [ %77, %88 ], [ %71, %69 ]
  %98 = phi i32 [ %89, %88 ], [ %70, %69 ]
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %132, label %100

100:                                              ; preds = %96
  %101 = load ptr, ptr %0, align 8, !tbaa !124
  %102 = getelementptr inbounds i8, ptr %101, i64 -1
  store ptr %102, ptr %0, align 8, !tbaa !124
  br label %105

103:                                              ; preds = %52, %38
  %104 = phi i32 [ %53, %52 ], [ %32, %38 ]
  br label %105

105:                                              ; preds = %103, %100, %92, %57, %56, %55, %54, %52, %35, %33
  %106 = phi i32 [ 40, %33 ], [ 41, %35 ], [ 12, %57 ], [ 8, %56 ], [ 9, %55 ], [ 13, %54 ], [ %97, %100 ], [ %95, %92 ], [ %104, %103 ], [ 10, %52 ]
  %107 = phi i32 [ %34, %33 ], [ %36, %35 ], [ %19, %57 ], [ %19, %56 ], [ %19, %55 ], [ %19, %54 ], [ %19, %100 ], [ %19, %92 ], [ %19, %103 ], [ %19, %52 ]
  %108 = load ptr, ptr %9, align 8, !tbaa !135
  %109 = icmp eq ptr %18, %108
  br i1 %109, label %110, label %115

110:                                              ; preds = %105
  store ptr %18, ptr %11, align 8, !tbaa !132
  %111 = call i32 @dynamic_grow(ptr noundef nonnull %4) #62, !range !55
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %132, label %113

113:                                              ; preds = %110
  %114 = load ptr, ptr %11, align 8, !tbaa !132
  br label %115

115:                                              ; preds = %113, %105
  %116 = phi ptr [ %114, %113 ], [ %18, %105 ]
  %117 = trunc i32 %106 to i8
  %118 = getelementptr inbounds i8, ptr %116, i64 1
  store i8 %117, ptr %116, align 1, !tbaa !13
  br label %17

119:                                              ; preds = %35
  %.lcssa = phi ptr [ %18, %35 ]
  %120 = load ptr, ptr %4, align 8, !tbaa !133
  %121 = ptrtoint ptr %.lcssa to i64
  %122 = ptrtoint ptr %120 to i64
  %123 = sub i64 %121, %122
  %124 = trunc i64 %123 to i32
  %125 = load i32, ptr %5, align 8, !tbaa !129
  %126 = tail call ptr @alloc_shrink(ptr noundef %120, i32 noundef %125, i32 noundef %124, i32 noundef 1, ptr noundef nonnull @.str.6.114) #64
  %127 = icmp eq ptr %126, null
  br i1 %127, label %132, label %128

128:                                              ; preds = %119
  store ptr %126, ptr %2, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  store i16 822, ptr %129, align 8, !tbaa !14
  %130 = trunc i64 %123 to i16
  %131 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 2
  store i16 %130, ptr %131, align 2, !tbaa !17
  br label %132

132:                                              ; preds = %128, %119, %110, %96, %31, %3
  %133 = phi i32 [ -25, %3 ], [ 0, %128 ], [ -25, %119 ], [ -18, %31 ], [ -25, %110 ], [ -18, %96 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %4) #65
  ret i32 %133
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @scan_number(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  %6 = load ptr, ptr %0, align 8, !tbaa !124
  %7 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !142
  %9 = icmp ult ptr %6, %8
  br i1 %9, label %10, label %14

10:                                               ; preds = %2
  %11 = getelementptr inbounds i8, ptr %6, i64 1
  store ptr %11, ptr %0, align 8, !tbaa !124
  %12 = load i8, ptr %11, align 1, !tbaa !13
  %13 = zext i8 %12 to i32
  br label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %16 = load ptr, ptr %15, align 8, !tbaa !143
  %17 = tail call i32 %16(ptr noundef nonnull %0) #64
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i32 [ %13, %10 ], [ %17, %14 ]
  switch i32 %19, label %44 [
    i32 43, label %20
    i32 45, label %32
  ]

20:                                               ; preds = %18
  %21 = load ptr, ptr %0, align 8, !tbaa !124
  %22 = load ptr, ptr %7, align 8, !tbaa !142
  %23 = icmp ult ptr %21, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, ptr %21, i64 1
  store ptr %25, ptr %0, align 8, !tbaa !124
  %26 = load i8, ptr %25, align 1, !tbaa !13
  %27 = zext i8 %26 to i32
  br label %44

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %30 = load ptr, ptr %29, align 8, !tbaa !143
  %31 = tail call i32 %30(ptr noundef nonnull %0) #64
  br label %44

32:                                               ; preds = %18
  %33 = load ptr, ptr %0, align 8, !tbaa !124
  %34 = load ptr, ptr %7, align 8, !tbaa !142
  %35 = icmp ult ptr %33, %34
  br i1 %35, label %36, label %40

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, ptr %33, i64 1
  store ptr %37, ptr %0, align 8, !tbaa !124
  %38 = load i8, ptr %37, align 1, !tbaa !13
  %39 = zext i8 %38 to i32
  br label %44

40:                                               ; preds = %32
  %41 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %42 = load ptr, ptr %41, align 8, !tbaa !143
  %43 = tail call i32 %42(ptr noundef nonnull %0) #64
  br label %44

44:                                               ; preds = %40, %36, %28, %24, %18
  %45 = phi i1 [ false, %18 ], [ false, %28 ], [ false, %24 ], [ true, %40 ], [ true, %36 ]
  %46 = phi i1 [ false, %18 ], [ true, %28 ], [ true, %24 ], [ true, %40 ], [ true, %36 ]
  %47 = phi i32 [ %19, %18 ], [ %31, %28 ], [ %27, %24 ], [ %43, %40 ], [ %39, %36 ]
  %48 = tail call ptr @__ctype_b_loc() #69
  %49 = load ptr, ptr %48, align 8, !tbaa !7
  %50 = sext i32 %47 to i64
  %51 = getelementptr inbounds i16, ptr %49, i64 %50
  %52 = load i16, ptr %51, align 2, !tbaa !102
  %53 = and i16 %52, 2048
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %55, label %78

55:                                               ; preds = %44
  %56 = icmp eq i32 %47, 46
  br i1 %56, label %57, label %373

57:                                               ; preds = %55
  %58 = load ptr, ptr %0, align 8, !tbaa !124
  %59 = load ptr, ptr %7, align 8, !tbaa !142
  %60 = icmp ult ptr %58, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, ptr %58, i64 1
  store ptr %62, ptr %0, align 8, !tbaa !124
  %63 = load i8, ptr %62, align 1, !tbaa !13
  %64 = zext i8 %63 to i32
  br label %69

65:                                               ; preds = %57
  %66 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %67 = load ptr, ptr %66, align 8, !tbaa !143
  %68 = tail call i32 %67(ptr noundef nonnull %0) #64
  br label %69

69:                                               ; preds = %65, %61
  %70 = phi i32 [ %64, %61 ], [ %68, %65 ]
  %71 = load ptr, ptr %48, align 8, !tbaa !7
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds i16, ptr %71, i64 %72
  %74 = load i16, ptr %73, align 2, !tbaa !102
  %75 = and i16 %74, 2048
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %373, label %77

77:                                               ; preds = %69
  store i64 0, ptr %3, align 8, !tbaa !18
  br label %169

78:                                               ; preds = %44
  %79 = load ptr, ptr %0, align 8, !tbaa !124
  %80 = getelementptr inbounds i8, ptr %79, i64 -1
  store ptr %80, ptr %0, align 8, !tbaa !124
  %81 = call i32 @scan_int(ptr noundef nonnull %0, i32 noundef 10, ptr noundef nonnull %3, ptr noundef nonnull %4) #62, !range !148
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %117, label %83

83:                                               ; preds = %78
  %84 = icmp slt i32 %81, 0
  br i1 %84, label %373, label %85

85:                                               ; preds = %83
  %86 = load ptr, ptr %0, align 8, !tbaa !124
  %87 = load ptr, ptr %7, align 8, !tbaa !142
  %88 = icmp ult ptr %86, %87
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = getelementptr inbounds i8, ptr %86, i64 1
  store ptr %90, ptr %0, align 8, !tbaa !124
  %91 = load i8, ptr %90, align 1, !tbaa !13
  %92 = zext i8 %91 to i32
  br label %97

93:                                               ; preds = %85
  %94 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %95 = load ptr, ptr %94, align 8, !tbaa !143
  %96 = call i32 %95(ptr noundef nonnull %0) #64
  br label %97

97:                                               ; preds = %93, %89
  %98 = phi i32 [ %92, %89 ], [ %96, %93 ]
  switch i32 %98, label %373 [
    i32 46, label %99
    i32 -1, label %111
  ]

99:                                               ; preds = %97
  %100 = load ptr, ptr %0, align 8, !tbaa !124
  %101 = load ptr, ptr %7, align 8, !tbaa !142
  %102 = icmp ult ptr %100, %101
  br i1 %102, label %103, label %107

103:                                              ; preds = %99
  %104 = getelementptr inbounds i8, ptr %100, i64 1
  store ptr %104, ptr %0, align 8, !tbaa !124
  %105 = load i8, ptr %104, align 1, !tbaa !13
  %106 = zext i8 %105 to i32
  br label %231

107:                                              ; preds = %99
  %108 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %109 = load ptr, ptr %108, align 8, !tbaa !143
  %110 = call i32 %109(ptr noundef nonnull %0) #64
  br label %231

111:                                              ; preds = %97
  %112 = load double, ptr %4, align 8
  %113 = fneg double %112
  %114 = select i1 %45, double %113, double %112
  %115 = fptrunc double %114 to float
  store float %115, ptr %1, align 8, !tbaa !13
  %116 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 44, ptr %116, align 8, !tbaa !14
  br label %373

117:                                              ; preds = %78
  %118 = load ptr, ptr %0, align 8, !tbaa !124
  %119 = load ptr, ptr %7, align 8, !tbaa !142
  %120 = icmp ult ptr %118, %119
  br i1 %120, label %121, label %125

121:                                              ; preds = %117
  %122 = getelementptr inbounds i8, ptr %118, i64 1
  store ptr %122, ptr %0, align 8, !tbaa !124
  %123 = load i8, ptr %122, align 1, !tbaa !13
  %124 = zext i8 %123 to i32
  br label %129

125:                                              ; preds = %117
  %126 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %127 = load ptr, ptr %126, align 8, !tbaa !143
  %128 = call i32 %127(ptr noundef nonnull %0) #64
  br label %129

129:                                              ; preds = %125, %121
  %130 = phi i32 [ %124, %121 ], [ %128, %125 ]
  switch i32 %130, label %373 [
    i32 46, label %131
    i32 35, label %143
    i32 -1, label %164
  ]

131:                                              ; preds = %129
  %132 = load ptr, ptr %0, align 8, !tbaa !124
  %133 = load ptr, ptr %7, align 8, !tbaa !142
  %134 = icmp ult ptr %132, %133
  br i1 %134, label %135, label %139

135:                                              ; preds = %131
  %136 = getelementptr inbounds i8, ptr %132, i64 1
  store ptr %136, ptr %0, align 8, !tbaa !124
  %137 = load i8, ptr %136, align 1, !tbaa !13
  %138 = zext i8 %137 to i32
  br label %169

139:                                              ; preds = %131
  %140 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %141 = load ptr, ptr %140, align 8, !tbaa !143
  %142 = call i32 %141(ptr noundef nonnull %0) #64
  br label %169

143:                                              ; preds = %129
  %144 = load i64, ptr %3, align 8
  %145 = icmp slt i64 %144, 2
  %146 = select i1 %46, i1 true, i1 %145
  %147 = icmp sgt i64 %144, 36
  %148 = select i1 %146, i1 true, i1 %147
  br i1 %148, label %373, label %149

149:                                              ; preds = %143
  %150 = trunc i64 %144 to i32
  %151 = call i32 @scan_int(ptr noundef nonnull %0, i32 noundef %150, ptr noundef nonnull %3, ptr noundef null) #62, !range !148
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %373

153:                                              ; preds = %149
  %154 = load ptr, ptr %0, align 8, !tbaa !124
  %155 = load ptr, ptr %7, align 8, !tbaa !142
  %156 = icmp ult ptr %154, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %153
  %158 = getelementptr inbounds i8, ptr %154, i64 1
  store ptr %158, ptr %0, align 8, !tbaa !124
  br label %373

159:                                              ; preds = %153
  %160 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %161 = load ptr, ptr %160, align 8, !tbaa !143
  %162 = call i32 %161(ptr noundef nonnull %0) #64
  %163 = icmp eq i32 %162, -1
  br i1 %163, label %164, label %373

164:                                              ; preds = %159, %129
  %165 = load i64, ptr %3, align 8
  %166 = sub nsw i64 0, %165
  %167 = select i1 %45, i64 %166, i64 %165
  store i64 %167, ptr %1, align 8, !tbaa !13
  %168 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 20, ptr %168, align 8, !tbaa !14
  br label %373

169:                                              ; preds = %139, %135, %77
  %170 = phi i32 [ %70, %77 ], [ %138, %135 ], [ %142, %139 ]
  %171 = load i64, ptr %3, align 8, !tbaa !18
  %172 = load ptr, ptr %48, align 8, !tbaa !7
  %173 = sext i32 %170 to i64
  %174 = getelementptr inbounds i16, ptr %172, i64 %173
  %175 = load i16, ptr %174, align 2, !tbaa !102
  %176 = and i16 %175, 2048
  %177 = icmp eq i16 %176, 0
  br i1 %177, label %211, label %178

178:                                              ; preds = %169
  %179 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  br label %180

180:                                              ; preds = %202, %178
  %181 = phi i32 [ %170, %178 ], [ %203, %202 ]
  %182 = phi i32 [ 0, %178 ], [ %204, %202 ]
  %183 = phi i64 [ %171, %178 ], [ %191, %202 ]
  %184 = icmp ugt i64 %183, 922337203685477578
  br i1 %184, label %185, label %187

185:                                              ; preds = %180
  %.lcssa2 = phi i32 [ %181, %180 ]
  %.lcssa1 = phi i32 [ %182, %180 ]
  %.lcssa = phi i64 [ %183, %180 ]
  %186 = sitofp i64 %.lcssa to double
  store double %186, ptr %4, align 8, !tbaa !149
  br label %231

187:                                              ; preds = %180
  %188 = mul nuw nsw i64 %183, 10
  %189 = add nsw i32 %181, -48
  %190 = sext i32 %189 to i64
  %191 = add nsw i64 %188, %190
  %192 = load ptr, ptr %0, align 8, !tbaa !124
  %193 = load ptr, ptr %7, align 8, !tbaa !142
  %194 = icmp ult ptr %192, %193
  br i1 %194, label %195, label %199

195:                                              ; preds = %187
  %196 = getelementptr inbounds i8, ptr %192, i64 1
  store ptr %196, ptr %0, align 8, !tbaa !124
  %197 = load i8, ptr %196, align 1, !tbaa !13
  %198 = zext i8 %197 to i32
  br label %202

199:                                              ; preds = %187
  %200 = load ptr, ptr %179, align 8, !tbaa !143
  %201 = call i32 %200(ptr noundef nonnull %0) #64
  br label %202

202:                                              ; preds = %199, %195
  %203 = phi i32 [ %198, %195 ], [ %201, %199 ]
  %204 = add nsw i32 %182, -1
  %205 = load ptr, ptr %48, align 8, !tbaa !7
  %206 = sext i32 %203 to i64
  %207 = getelementptr inbounds i16, ptr %205, i64 %206
  %208 = load i16, ptr %207, align 2, !tbaa !102
  %209 = and i16 %208, 2048
  %210 = icmp eq i16 %209, 0
  br i1 %210, label %211, label %180, !llvm.loop !151

211:                                              ; preds = %202, %169
  %212 = phi i64 [ %171, %169 ], [ %191, %202 ]
  %213 = phi i32 [ 0, %169 ], [ %204, %202 ]
  %214 = phi i32 [ %170, %169 ], [ %203, %202 ]
  %215 = sub nsw i64 0, %212
  %216 = select i1 %45, i64 %215, i64 %212
  %217 = and i32 %214, -33
  %218 = icmp eq i32 %217, 69
  %219 = icmp slt i32 %213, -6
  %220 = select i1 %218, i1 true, i1 %219
  br i1 %220, label %229, label %221

221:                                              ; preds = %211
  %222 = sitofp i64 %216 to float
  %223 = sub nsw i32 0, %213
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [7 x float], ptr @scan_number.powers_10, i64 0, i64 %224
  %226 = load float, ptr %225, align 4, !tbaa !103
  %227 = fdiv float %222, %226
  store float %227, ptr %1, align 8, !tbaa !13
  %228 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 44, ptr %228, align 8, !tbaa !14
  br label %373

229:                                              ; preds = %211
  %230 = sitofp i64 %216 to double
  store double %230, ptr %4, align 8, !tbaa !149
  br label %274

231:                                              ; preds = %185, %107, %103
  %232 = phi i32 [ %.lcssa1, %185 ], [ 0, %107 ], [ 0, %103 ]
  %233 = phi i32 [ %.lcssa2, %185 ], [ %110, %107 ], [ %106, %103 ]
  %234 = load ptr, ptr %48, align 8, !tbaa !7
  %235 = sext i32 %233 to i64
  %236 = getelementptr inbounds i16, ptr %234, i64 %235
  %237 = load i16, ptr %236, align 2, !tbaa !102
  %238 = and i16 %237, 2048
  %239 = icmp eq i16 %238, 0
  br i1 %239, label %268, label %240

240:                                              ; preds = %231
  %241 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  br label %242

242:                                              ; preds = %259, %240
  %243 = phi i32 [ %233, %240 ], [ %260, %259 ]
  %244 = phi i32 [ %232, %240 ], [ %261, %259 ]
  %245 = load double, ptr %4, align 8, !tbaa !149
  %246 = add nsw i32 %243, -48
  %247 = sitofp i32 %246 to double
  %248 = call double @llvm.fmuladd.f64(double %245, double 1.000000e+01, double %247)
  store double %248, ptr %4, align 8, !tbaa !149
  %249 = load ptr, ptr %0, align 8, !tbaa !124
  %250 = load ptr, ptr %7, align 8, !tbaa !142
  %251 = icmp ult ptr %249, %250
  br i1 %251, label %252, label %256

252:                                              ; preds = %242
  %253 = getelementptr inbounds i8, ptr %249, i64 1
  store ptr %253, ptr %0, align 8, !tbaa !124
  %254 = load i8, ptr %253, align 1, !tbaa !13
  %255 = zext i8 %254 to i32
  br label %259

256:                                              ; preds = %242
  %257 = load ptr, ptr %241, align 8, !tbaa !143
  %258 = call i32 %257(ptr noundef nonnull %0) #64
  br label %259

259:                                              ; preds = %256, %252
  %260 = phi i32 [ %255, %252 ], [ %258, %256 ]
  %261 = add nsw i32 %244, -1
  %262 = load ptr, ptr %48, align 8, !tbaa !7
  %263 = sext i32 %260 to i64
  %264 = getelementptr inbounds i16, ptr %262, i64 %263
  %265 = load i16, ptr %264, align 2, !tbaa !102
  %266 = and i16 %265, 2048
  %267 = icmp eq i16 %266, 0
  br i1 %267, label %268, label %242, !llvm.loop !152

268:                                              ; preds = %259, %231
  %269 = phi i32 [ %232, %231 ], [ %261, %259 ]
  %270 = phi i32 [ %233, %231 ], [ %260, %259 ]
  br i1 %45, label %271, label %274

271:                                              ; preds = %268
  %272 = load double, ptr %4, align 8, !tbaa !149
  %273 = fneg double %272
  store double %273, ptr %4, align 8, !tbaa !149
  br label %274

274:                                              ; preds = %271, %268, %229
  %275 = phi i32 [ %269, %271 ], [ %269, %268 ], [ %213, %229 ]
  %276 = phi i32 [ %270, %271 ], [ %270, %268 ], [ %214, %229 ]
  %277 = and i32 %276, -33
  %278 = icmp eq i32 %277, 69
  br i1 %278, label %279, label %326

279:                                              ; preds = %274
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  %280 = load ptr, ptr %0, align 8, !tbaa !124
  %281 = load ptr, ptr %7, align 8, !tbaa !142
  %282 = icmp ult ptr %280, %281
  br i1 %282, label %283, label %287

283:                                              ; preds = %279
  %284 = getelementptr inbounds i8, ptr %280, i64 1
  store ptr %284, ptr %0, align 8, !tbaa !124
  %285 = load i8, ptr %284, align 1, !tbaa !13
  %286 = zext i8 %285 to i32
  br label %291

287:                                              ; preds = %279
  %288 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %289 = load ptr, ptr %288, align 8, !tbaa !143
  %290 = call i32 %289(ptr noundef nonnull %0) #64
  br label %291

291:                                              ; preds = %287, %283
  %292 = phi i32 [ %286, %283 ], [ %290, %287 ]
  switch i32 %292, label %294 [
    i32 43, label %297
    i32 45, label %293
  ]

293:                                              ; preds = %291
  br label %297

294:                                              ; preds = %291
  %295 = load ptr, ptr %0, align 8, !tbaa !124
  %296 = getelementptr inbounds i8, ptr %295, i64 -1
  store ptr %296, ptr %0, align 8, !tbaa !124
  br label %297

297:                                              ; preds = %294, %293, %291
  %298 = phi i1 [ true, %294 ], [ false, %293 ], [ true, %291 ]
  %299 = call i32 @scan_int(ptr noundef nonnull %0, i32 noundef 10, ptr noundef nonnull %5, ptr noundef null) #62, !range !148
  %300 = icmp slt i32 %299, 0
  br i1 %300, label %324, label %301

301:                                              ; preds = %297
  %302 = icmp ne i32 %299, 0
  %303 = load i64, ptr %5, align 8
  %304 = icmp sgt i64 %303, 999
  %305 = select i1 %302, i1 true, i1 %304
  br i1 %305, label %324, label %306

306:                                              ; preds = %301
  %307 = trunc i64 %303 to i32
  %308 = sub i32 0, %307
  %309 = select i1 %298, i32 %307, i32 %308
  %310 = add i32 %309, %275
  %311 = load ptr, ptr %0, align 8, !tbaa !124
  %312 = load ptr, ptr %7, align 8, !tbaa !142
  %313 = icmp ult ptr %311, %312
  br i1 %313, label %314, label %318

314:                                              ; preds = %306
  %315 = getelementptr inbounds i8, ptr %311, i64 1
  store ptr %315, ptr %0, align 8, !tbaa !124
  %316 = load i8, ptr %315, align 1, !tbaa !13
  %317 = zext i8 %316 to i32
  br label %322

318:                                              ; preds = %306
  %319 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %320 = load ptr, ptr %319, align 8, !tbaa !143
  %321 = call i32 %320(ptr noundef nonnull %0) #64
  br label %322

322:                                              ; preds = %318, %314
  %323 = phi i32 [ %321, %318 ], [ %317, %314 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  br label %326

324:                                              ; preds = %301, %297
  %325 = phi i32 [ %299, %297 ], [ -13, %301 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  br label %373

326:                                              ; preds = %322, %274
  %327 = phi i32 [ %275, %274 ], [ %310, %322 ]
  %328 = phi i32 [ %276, %274 ], [ %323, %322 ]
  %329 = icmp eq i32 %328, -1
  br i1 %329, label %330, label %373

330:                                              ; preds = %326
  %331 = icmp sgt i32 %327, 0
  br i1 %331, label %332, label %349

332:                                              ; preds = %330
  %333 = load double, ptr %4, align 8, !tbaa !149
  %334 = icmp ugt i32 %327, 6
  br i1 %334, label %335, label %341

335:                                              ; preds = %335, %332
  %336 = phi i32 [ %339, %335 ], [ %327, %332 ]
  %337 = phi double [ %338, %335 ], [ %333, %332 ]
  %338 = fmul double %337, 1.000000e+06
  %339 = add nsw i32 %336, -6
  %340 = icmp ugt i32 %336, 12
  br i1 %340, label %335, label %341, !llvm.loop !153

341:                                              ; preds = %335, %332
  %342 = phi double [ %333, %332 ], [ %338, %335 ]
  %343 = phi i32 [ %327, %332 ], [ %339, %335 ]
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds [7 x float], ptr @scan_number.powers_10, i64 0, i64 %344
  %346 = load float, ptr %345, align 4, !tbaa !103
  %347 = fpext float %346 to double
  %348 = fmul double %342, %347
  br label %369

349:                                              ; preds = %330
  %350 = icmp slt i32 %327, 0
  %351 = load double, ptr %4, align 8, !tbaa !149
  br i1 %350, label %352, label %369

352:                                              ; preds = %349
  %353 = icmp ult i32 %327, -6
  br i1 %353, label %354, label %360

354:                                              ; preds = %354, %352
  %355 = phi i32 [ %358, %354 ], [ %327, %352 ]
  %356 = phi double [ %357, %354 ], [ %351, %352 ]
  %357 = fdiv double %356, 1.000000e+06
  %358 = add nuw nsw i32 %355, 6
  %359 = icmp ult i32 %355, -12
  br i1 %359, label %354, label %360, !llvm.loop !154

360:                                              ; preds = %354, %352
  %361 = phi double [ %351, %352 ], [ %357, %354 ]
  %362 = phi i32 [ %327, %352 ], [ %358, %354 ]
  %363 = sub nsw i32 0, %362
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds [7 x float], ptr @scan_number.powers_10, i64 0, i64 %364
  %366 = load float, ptr %365, align 4, !tbaa !103
  %367 = fpext float %366 to double
  %368 = fdiv double %361, %367
  br label %369

369:                                              ; preds = %360, %349, %341
  %370 = phi double [ %351, %349 ], [ %368, %360 ], [ %348, %341 ]
  %371 = fptrunc double %370 to float
  store float %371, ptr %1, align 8, !tbaa !13
  %372 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 44, ptr %372, align 8, !tbaa !14
  br label %373

373:                                              ; preds = %369, %326, %324, %221, %164, %159, %157, %149, %143, %129, %111, %97, %83, %69, %55
  %374 = phi i32 [ 0, %111 ], [ 0, %369 ], [ %325, %324 ], [ 0, %164 ], [ 0, %221 ], [ -18, %55 ], [ -18, %69 ], [ %81, %83 ], [ -18, %97 ], [ -18, %129 ], [ -18, %143 ], [ %151, %149 ], [ -18, %157 ], [ -18, %159 ], [ -18, %326 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  ret i32 %374
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #26

; Function Attrs: nounwind optsize uwtable
define internal i32 @scan_int(ptr noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2, ptr noundef writeonly %3) #0 {
  %5 = icmp eq i32 %1, 10
  br i1 %5, label %9, label %6

6:                                                ; preds = %4
  %7 = udiv i32 2147483647, %1
  %8 = urem i32 2147483647, %1
  br label %9

9:                                                ; preds = %6, %4
  %10 = phi i32 [ %7, %6 ], [ 214748364, %4 ]
  %11 = phi i32 [ %8, %6 ], [ 7, %4 ]
  %12 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  br label %14

14:                                               ; preds = %46, %9
  %15 = phi i32 [ 0, %9 ], [ %48, %46 ]
  %16 = load ptr, ptr %0, align 8, !tbaa !124
  %17 = load ptr, ptr %12, align 8, !tbaa !142
  %18 = icmp ult ptr %16, %17
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = getelementptr inbounds i8, ptr %16, i64 1
  store ptr %20, ptr %0, align 8, !tbaa !124
  %21 = load i8, ptr %20, align 1, !tbaa !13
  %22 = zext i8 %21 to i32
  br label %26

23:                                               ; preds = %14
  %24 = load ptr, ptr %13, align 8, !tbaa !143
  %25 = tail call i32 %24(ptr noundef nonnull %0) #64
  br label %26

26:                                               ; preds = %23, %19
  %27 = phi i32 [ %22, %19 ], [ %25, %23 ]
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !13
  %31 = zext i8 %30 to i32
  %32 = icmp slt i32 %31, %1
  br i1 %32, label %40, label %33

33:                                               ; preds = %26
  %.lcssa6 = phi i32 [ %27, %26 ]
  %.lcssa2 = phi i32 [ %15, %26 ]
  %34 = icmp eq i32 %.lcssa6, -1
  br i1 %34, label %38, label %35

35:                                               ; preds = %33
  %36 = load ptr, ptr %0, align 8, !tbaa !124
  %37 = getelementptr inbounds i8, ptr %36, i64 -1
  store ptr %37, ptr %0, align 8, !tbaa !124
  br label %38

38:                                               ; preds = %35, %33
  %39 = sext i32 %.lcssa2 to i64
  store i64 %39, ptr %2, align 8, !tbaa !18
  br label %82

40:                                               ; preds = %26
  %41 = icmp slt i32 %15, %10
  br i1 %41, label %46, label %42

42:                                               ; preds = %40
  %43 = icmp sgt i32 %15, %10
  %44 = icmp ult i32 %11, %31
  %45 = or i1 %43, %44
  br i1 %45, label %49, label %46

46:                                               ; preds = %42, %40
  %47 = mul nsw i32 %15, %1
  %48 = add nsw i32 %47, %31
  br label %14

49:                                               ; preds = %42
  %.lcssa5 = phi i8 [ %30, %42 ]
  %.lcssa3 = phi i32 [ %15, %42 ]
  %50 = icmp eq ptr %3, null
  br i1 %50, label %82, label %51

51:                                               ; preds = %49
  %52 = sitofp i32 %.lcssa3 to double
  %53 = sitofp i32 %1 to double
  br label %54

54:                                               ; preds = %69, %51
  %55 = phi i8 [ %.lcssa5, %51 ], [ %73, %69 ]
  %56 = phi double [ %52, %51 ], [ %58, %69 ]
  %57 = uitofp i8 %55 to double
  %58 = tail call double @llvm.fmuladd.f64(double %56, double %53, double %57)
  %59 = load ptr, ptr %0, align 8, !tbaa !124
  %60 = load ptr, ptr %12, align 8, !tbaa !142
  %61 = icmp ult ptr %59, %60
  br i1 %61, label %62, label %66

62:                                               ; preds = %54
  %63 = getelementptr inbounds i8, ptr %59, i64 1
  store ptr %63, ptr %0, align 8, !tbaa !124
  %64 = load i8, ptr %63, align 1, !tbaa !13
  %65 = zext i8 %64 to i32
  br label %69

66:                                               ; preds = %54
  %67 = load ptr, ptr %13, align 8, !tbaa !143
  %68 = tail call i32 %67(ptr noundef nonnull %0) #64
  br label %69

69:                                               ; preds = %66, %62
  %70 = phi i32 [ %65, %62 ], [ %68, %66 ]
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %71
  %73 = load i8, ptr %72, align 1, !tbaa !13
  %74 = zext i8 %73 to i32
  %75 = icmp slt i32 %74, %1
  br i1 %75, label %54, label %76

76:                                               ; preds = %69
  %.lcssa1 = phi i32 [ %70, %69 ]
  %.lcssa = phi double [ %58, %69 ]
  %77 = icmp eq i32 %.lcssa1, -1
  br i1 %77, label %81, label %78

78:                                               ; preds = %76
  %79 = load ptr, ptr %0, align 8, !tbaa !124
  %80 = getelementptr inbounds i8, ptr %79, i64 -1
  store ptr %80, ptr %0, align 8, !tbaa !124
  br label %81

81:                                               ; preds = %78, %76
  store double %.lcssa, ptr %3, align 8, !tbaa !149
  br label %82

82:                                               ; preds = %81, %49, %38
  %83 = phi i32 [ 0, %38 ], [ 1, %81 ], [ -13, %49 ]
  ret i32 %83
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #19

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @refcpy(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) #21 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %9, %5 ], [ %2, %3 ]
  %7 = phi ptr [ %11, %5 ], [ %1, %3 ]
  %8 = phi ptr [ %10, %5 ], [ %0, %3 ]
  %9 = add i32 %6, -1
  %10 = getelementptr inbounds %struct.ref_s, ptr %8, i64 1
  %11 = getelementptr inbounds %struct.ref_s, ptr %7, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, ptr noundef nonnull align 8 dereferenceable(16) %7, i64 16, i1 false), !tbaa.struct !101
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %13, label %5, !llvm.loop !155

13:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @obj_eq(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = lshr i16 %5, 2
  %7 = and i16 %6, 63
  %8 = icmp ugt i16 %7, 15
  %9 = zext i16 %7 to i32
  %10 = select i1 %8, i32 9, i32 %9
  %11 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = lshr i16 %12, 2
  %14 = and i16 %13, 63
  %15 = icmp ugt i16 %14, 15
  %16 = select i1 %15, i16 9, i16 %14
  %17 = zext i16 %16 to i32
  %18 = icmp eq i32 %10, %17
  br i1 %18, label %47, label %19

19:                                               ; preds = %2
  switch i32 %9, label %149 [
    i32 5, label %20
    i32 11, label %28
    i32 7, label %36
    i32 13, label %39
  ]

20:                                               ; preds = %19
  %21 = and i16 %12, 252
  %22 = icmp eq i16 %21, 44
  br i1 %22, label %23, label %149

23:                                               ; preds = %20
  %24 = load float, ptr %1, align 8, !tbaa !13
  %25 = load i64, ptr %0, align 8, !tbaa !13
  %26 = sitofp i64 %25 to float
  %27 = fcmp oeq float %24, %26
  br label %149

28:                                               ; preds = %19
  %29 = and i16 %12, 252
  %30 = icmp eq i16 %29, 20
  br i1 %30, label %31, label %149

31:                                               ; preds = %28
  %32 = load i64, ptr %1, align 8, !tbaa !13
  %33 = sitofp i64 %32 to float
  %34 = load float, ptr %0, align 8, !tbaa !13
  %35 = fcmp oeq float %34, %33
  br label %149

36:                                               ; preds = %19
  %37 = and i16 %12, 252
  %38 = icmp eq i16 %37, 52
  br i1 %38, label %42, label %149

39:                                               ; preds = %19
  %40 = and i16 %12, 252
  %41 = icmp eq i16 %40, 28
  br i1 %41, label %42, label %149

42:                                               ; preds = %39, %36
  %43 = phi ptr [ %0, %36 ], [ %1, %39 ]
  %44 = phi ptr [ %1, %36 ], [ %3, %39 ]
  %45 = phi ptr [ %3, %36 ], [ %0, %39 ]
  %46 = call ptr @name_string_ref(ptr noundef nonnull %43, ptr noundef nonnull %3) #64
  br label %47

47:                                               ; preds = %42, %2
  %48 = phi ptr [ %1, %2 ], [ %44, %42 ]
  %49 = phi ptr [ %0, %2 ], [ %45, %42 ]
  %50 = getelementptr inbounds %struct.ref_s, ptr %49, i64 0, i32 1
  %51 = load i16, ptr %50, align 8, !tbaa !14
  %52 = lshr i16 %51, 2
  %53 = and i16 %52, 63
  %54 = icmp ugt i16 %53, 15
  %55 = select i1 %54, i16 9, i16 %53
  switch i16 %55, label %148 [
    i16 0, label %56
    i16 10, label %56
    i16 1, label %66
    i16 2, label %70
    i16 3, label %74
    i16 4, label %78
    i16 5, label %82
    i16 6, label %149
    i16 8, label %149
    i16 7, label %86
    i16 9, label %90
    i16 11, label %94
    i16 12, label %98
    i16 13, label %102
    i16 14, label %126
    i16 15, label %144
  ]

56:                                               ; preds = %47, %47
  %57 = load ptr, ptr %49, align 8, !tbaa !13
  %58 = load ptr, ptr %48, align 8, !tbaa !13
  %59 = icmp eq ptr %57, %58
  br i1 %59, label %60, label %149

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.ref_s, ptr %49, i64 0, i32 2
  %62 = load i16, ptr %61, align 2, !tbaa !17
  %63 = getelementptr inbounds %struct.ref_s, ptr %48, i64 0, i32 2
  %64 = load i16, ptr %63, align 2, !tbaa !17
  %65 = icmp eq i16 %62, %64
  br label %149

66:                                               ; preds = %47
  %67 = load i16, ptr %49, align 8, !tbaa !13
  %68 = load i16, ptr %48, align 8, !tbaa !13
  %69 = icmp eq i16 %67, %68
  br label %149

70:                                               ; preds = %47
  %71 = load ptr, ptr %49, align 8, !tbaa !13
  %72 = load ptr, ptr %48, align 8, !tbaa !13
  %73 = icmp eq ptr %71, %72
  br label %149

74:                                               ; preds = %47
  %75 = load ptr, ptr %49, align 8, !tbaa !13
  %76 = load ptr, ptr %48, align 8, !tbaa !13
  %77 = icmp eq ptr %75, %76
  br label %149

78:                                               ; preds = %47
  %79 = load ptr, ptr %49, align 8, !tbaa !13
  %80 = load ptr, ptr %48, align 8, !tbaa !13
  %81 = icmp eq ptr %79, %80
  br label %149

82:                                               ; preds = %47
  %83 = load i64, ptr %49, align 8, !tbaa !13
  %84 = load i64, ptr %48, align 8, !tbaa !13
  %85 = icmp eq i64 %83, %84
  br label %149

86:                                               ; preds = %47
  %87 = load ptr, ptr %49, align 8, !tbaa !13
  %88 = load ptr, ptr %48, align 8, !tbaa !13
  %89 = icmp eq ptr %87, %88
  br label %149

90:                                               ; preds = %47
  %91 = load ptr, ptr %49, align 8, !tbaa !13
  %92 = load ptr, ptr %48, align 8, !tbaa !13
  %93 = icmp eq ptr %91, %92
  br label %149

94:                                               ; preds = %47
  %95 = load float, ptr %49, align 8, !tbaa !13
  %96 = load float, ptr %48, align 8, !tbaa !13
  %97 = fcmp oeq float %95, %96
  br label %149

98:                                               ; preds = %47
  %99 = load ptr, ptr %49, align 8, !tbaa !13
  %100 = load ptr, ptr %48, align 8, !tbaa !13
  %101 = icmp eq ptr %99, %100
  br label %149

102:                                              ; preds = %47
  %103 = load ptr, ptr %49, align 8, !tbaa !13
  %104 = getelementptr inbounds %struct.ref_s, ptr %49, i64 0, i32 2
  %105 = load i16, ptr %104, align 2, !tbaa !17
  %106 = load ptr, ptr %48, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.ref_s, ptr %48, i64 0, i32 2
  %108 = load i16, ptr %107, align 2, !tbaa !17
  %109 = call i16 @llvm.umin.i16(i16 %108, i16 %105)
  %110 = zext i16 %109 to i32
  br label %111

111:                                              ; preds = %116, %102
  %112 = phi i32 [ %110, %102 ], [ %117, %116 ]
  %113 = phi ptr [ %103, %102 ], [ %118, %116 ]
  %114 = phi ptr [ %106, %102 ], [ %120, %116 ]
  %115 = icmp eq i32 %112, 0
  br i1 %115, label %123, label %116

116:                                              ; preds = %111
  %117 = add nsw i32 %112, -1
  %118 = getelementptr inbounds i8, ptr %113, i64 1
  %119 = load i8, ptr %113, align 1, !tbaa !13
  %120 = getelementptr inbounds i8, ptr %114, i64 1
  %121 = load i8, ptr %114, align 1, !tbaa !13
  %122 = icmp eq i8 %119, %121
  br i1 %122, label %111, label %123, !llvm.loop !156

123:                                              ; preds = %116, %111
  %.lcssa = phi i1 [ %115, %116 ], [ %115, %111 ]
  %124 = icmp eq i16 %105, %108
  %125 = select i1 %.lcssa, i1 %124, i1 false
  br label %149

126:                                              ; preds = %47
  %127 = load ptr, ptr %49, align 8, !tbaa !13
  %128 = load ptr, ptr %48, align 8, !tbaa !13
  %129 = load i16, ptr %127, align 2, !tbaa !157
  %130 = load i16, ptr %128, align 2, !tbaa !157
  %131 = icmp eq i16 %129, %130
  br i1 %131, label %132, label %149

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.gs_color_s, ptr %127, i64 0, i32 1
  %134 = load i16, ptr %133, align 2, !tbaa !159
  %135 = getelementptr inbounds %struct.gs_color_s, ptr %128, i64 0, i32 1
  %136 = load i16, ptr %135, align 2, !tbaa !159
  %137 = icmp eq i16 %134, %136
  br i1 %137, label %138, label %149

138:                                              ; preds = %132
  %139 = getelementptr inbounds %struct.gs_color_s, ptr %127, i64 0, i32 2
  %140 = load i16, ptr %139, align 2, !tbaa !160
  %141 = getelementptr inbounds %struct.gs_color_s, ptr %128, i64 0, i32 2
  %142 = load i16, ptr %141, align 2, !tbaa !160
  %143 = icmp eq i16 %140, %142
  br label %149

144:                                              ; preds = %47
  %145 = load ptr, ptr %49, align 8, !tbaa !13
  %146 = load ptr, ptr %48, align 8, !tbaa !13
  %147 = icmp eq ptr %145, %146
  br label %149

148:                                              ; preds = %47
  br label %149

149:                                              ; preds = %148, %144, %138, %132, %126, %123, %98, %94, %90, %86, %82, %78, %74, %70, %66, %60, %56, %47, %47, %39, %36, %31, %28, %23, %20, %19
  %150 = phi i1 [ false, %148 ], [ %147, %144 ], [ %125, %123 ], [ %101, %98 ], [ %97, %94 ], [ %93, %90 ], [ %89, %86 ], [ %85, %82 ], [ %81, %78 ], [ %77, %74 ], [ %73, %70 ], [ %69, %66 ], [ false, %20 ], [ %27, %23 ], [ false, %28 ], [ %35, %31 ], [ false, %36 ], [ false, %39 ], [ false, %19 ], [ false, %56 ], [ %65, %60 ], [ true, %47 ], [ true, %47 ], [ false, %132 ], [ false, %126 ], [ %143, %138 ]
  %151 = zext i1 %150 to i32
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  ret i32 %151
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.umin.i16(i16, i16) #19

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @bytes_compare(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3) #27 {
  %5 = tail call i32 @llvm.umin.i32(i32 %3, i32 %1)
  br label %6

6:                                                ; preds = %11, %4
  %7 = phi i32 [ %5, %4 ], [ %12, %11 ]
  %8 = phi ptr [ %0, %4 ], [ %13, %11 ]
  %9 = phi ptr [ %2, %4 ], [ %15, %11 ]
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %6
  %12 = add i32 %7, -1
  %13 = getelementptr inbounds i8, ptr %8, i64 1
  %14 = load i8, ptr %8, align 1, !tbaa !13
  %15 = getelementptr inbounds i8, ptr %9, i64 1
  %16 = load i8, ptr %9, align 1, !tbaa !13
  %17 = icmp eq i8 %14, %16
  br i1 %17, label %6, label %18, !llvm.loop !156

18:                                               ; preds = %11
  %.lcssa3 = phi i8 [ %14, %11 ]
  %.lcssa2 = phi i8 [ %16, %11 ]
  %.lcssa1 = phi i1 [ %10, %11 ]
  %19 = icmp ult i8 %.lcssa3, %.lcssa2
  %20 = select i1 %19, i32 -1, i32 1
  br label %21

21:                                               ; preds = %18, %6
  %.lcssa = phi i1 [ %.lcssa1, %18 ], [ %10, %6 ]
  %22 = phi i32 [ %20, %18 ], [ undef, %6 ]
  %23 = icmp eq i32 %1, %3
  %24 = icmp ult i32 %1, %3
  %25 = select i1 %24, i32 -1, i32 1
  %26 = select i1 %23, i32 0, i32 %25
  %27 = select i1 %.lcssa, i32 %26, i32 %22
  ret i32 %27
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #19

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @string_hash(ptr nocapture noundef readonly %0, i32 noundef %1) #17 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %15, label %4

4:                                                ; preds = %4, %2
  %5 = phi i32 [ %8, %4 ], [ %1, %2 ]
  %6 = phi i32 [ %13, %4 ], [ 0, %2 ]
  %7 = phi ptr [ %10, %4 ], [ %0, %2 ]
  %8 = add i32 %5, -1
  %9 = mul i32 %6, 19
  %10 = getelementptr inbounds i8, ptr %7, i64 1
  %11 = load i8, ptr %7, align 1, !tbaa !13
  %12 = zext i8 %11 to i32
  %13 = add i32 %9, %12
  %14 = icmp eq i32 %8, 0
  br i1 %14, label %15, label %4, !llvm.loop !161

15:                                               ; preds = %4, %2
  %16 = phi i32 [ 0, %2 ], [ %13, %4 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @string_to_ref(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr noundef %2) #0 {
  %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #63
  %5 = trunc i64 %4 to i32
  %6 = tail call ptr @alloc(i32 noundef %5, i32 noundef 1, ptr noundef %2) #64
  %7 = icmp eq ptr %6, null
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = and i64 %4, 4294967295
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %6, ptr align 1 %0, i64 %9, i1 false)
  store ptr %6, ptr %1, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 1
  store i16 822, ptr %10, align 8, !tbaa !14
  %11 = trunc i64 %4 to i16
  %12 = getelementptr inbounds %struct.ref_s, ptr %1, i64 0, i32 2
  store i16 %11, ptr %12, align 2, !tbaa !17
  br label %13

13:                                               ; preds = %8, %3
  %14 = phi i32 [ 0, %8 ], [ -25, %3 ]
  ret i32 %14
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @ref_to_string(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %4 = load i16, ptr %3, align 2, !tbaa !17
  %5 = zext i16 %4 to i32
  %6 = add nuw nsw i32 %5, 1
  %7 = tail call ptr @alloc(i32 noundef %6, i32 noundef 1, ptr noundef %1) #64
  %8 = icmp eq ptr %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = load ptr, ptr %0, align 8, !tbaa !13
  %11 = zext i16 %4 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %7, ptr align 1 %10, i64 %11, i1 false)
  %12 = getelementptr inbounds i8, ptr %7, i64 %11
  store i8 0, ptr %12, align 1, !tbaa !13
  br label %13

13:                                               ; preds = %9, %2
  ret ptr %7
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @num_params(ptr nocapture noundef readonly %0, i32 noundef %1, ptr noundef writeonly %2) #25 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %36

5:                                                ; preds = %3
  %6 = icmp eq ptr %2, null
  %7 = zext i32 %1 to i64
  br label %8

8:                                                ; preds = %32, %5
  %9 = phi i64 [ %7, %5 ], [ %12, %32 ]
  %10 = phi i32 [ 0, %5 ], [ %33, %32 ]
  %11 = phi ptr [ %0, %5 ], [ %34, %32 ]
  %12 = add nsw i64 %9, -1
  %13 = shl i32 %10, 1
  %14 = getelementptr inbounds %struct.ref_s, ptr %11, i64 0, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = lshr i16 %15, 2
  %17 = and i16 %16, 63
  %18 = zext i16 %17 to i32
  switch i32 %18, label %36 [
    i32 11, label %19
    i32 5, label %24
  ]

19:                                               ; preds = %8
  br i1 %6, label %32, label %20

20:                                               ; preds = %19
  %21 = load float, ptr %11, align 8, !tbaa !13
  %22 = and i64 %12, 4294967295
  %23 = getelementptr inbounds float, ptr %2, i64 %22
  store float %21, ptr %23, align 4, !tbaa !103
  br label %32

24:                                               ; preds = %8
  br i1 %6, label %30, label %25

25:                                               ; preds = %24
  %26 = load i64, ptr %11, align 8, !tbaa !13
  %27 = sitofp i64 %26 to float
  %28 = and i64 %12, 4294967295
  %29 = getelementptr inbounds float, ptr %2, i64 %28
  store float %27, ptr %29, align 4, !tbaa !103
  br label %30

30:                                               ; preds = %25, %24
  %31 = or i32 %13, 1
  br label %32

32:                                               ; preds = %30, %20, %19
  %33 = phi i32 [ %31, %30 ], [ %13, %20 ], [ %13, %19 ]
  %34 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -1
  %35 = icmp ugt i64 %9, 1
  br i1 %35, label %8, label %36, !llvm.loop !162

36:                                               ; preds = %32, %8, %3
  %37 = phi i32 [ 0, %3 ], [ %33, %32 ], [ -20, %8 ]
  ret i32 %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @real_param(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, i32 noundef %2) #28 {
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = lshr i16 %5, 2
  %7 = and i16 %6, 63
  %8 = zext i16 %7 to i32
  switch i32 %8, label %28 [
    i32 5, label %9
    i32 11, label %12
  ]

9:                                                ; preds = %3
  %10 = load i64, ptr %0, align 8, !tbaa !13
  %11 = sitofp i64 %10 to float
  br label %14

12:                                               ; preds = %3
  %13 = load float, ptr %0, align 8, !tbaa !13
  br label %14

14:                                               ; preds = %12, %9
  %15 = phi float [ %13, %12 ], [ %11, %9 ]
  %16 = icmp eq i32 %2, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %14
  %18 = fpext float %15 to double
  %19 = fcmp olt float %15, 0.000000e+00
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = fcmp olt double %18, -1.000000e-05
  br i1 %21, label %28, label %26

22:                                               ; preds = %17
  %23 = fcmp ogt float %15, 1.000000e+00
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = fcmp ogt double %18, 1.000010e+00
  br i1 %25, label %28, label %26

26:                                               ; preds = %24, %22, %20, %14
  %27 = phi float [ %15, %22 ], [ %15, %14 ], [ 0.000000e+00, %20 ], [ 1.000000e+00, %24 ]
  store float %27, ptr %1, align 4, !tbaa !103
  br label %28

28:                                               ; preds = %26, %24, %20, %3
  %29 = phi i32 [ 0, %26 ], [ -20, %3 ], [ -15, %20 ], [ -15, %24 ]
  ret i32 %29
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @read_matrix(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #21 {
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = lshr i16 %4, 2
  %6 = and i16 %5, 63
  %7 = zext i16 %6 to i32
  switch i32 %7, label %32 [
    i32 0, label %8
    i32 10, label %8
  ]

8:                                                ; preds = %2, %2
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %10 = load i16, ptr %9, align 2, !tbaa !17
  %11 = icmp eq i16 %10, 6
  br i1 %11, label %12, label %32

12:                                               ; preds = %8
  %13 = and i16 %4, 512
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %12
  %16 = load ptr, ptr %0, align 8, !tbaa !13
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %1, ptr noundef nonnull align 8 dereferenceable(96) %16, i64 96, i1 false), !tbaa.struct !163
  br label %17

17:                                               ; preds = %28, %15
  %18 = phi i32 [ 0, %15 ], [ %30, %28 ]
  %19 = phi ptr [ %1, %15 ], [ %29, %28 ]
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 0, i32 1
  %21 = load i16, ptr %20, align 8, !tbaa !14
  %22 = lshr i16 %21, 2
  %23 = and i16 %22, 63
  %24 = zext i16 %23 to i32
  switch i32 %24, label %32 [
    i32 5, label %25
    i32 11, label %28
  ]

25:                                               ; preds = %17
  %26 = load i64, ptr %19, align 8, !tbaa !13
  %27 = sitofp i64 %26 to float
  store float %27, ptr %19, align 8, !tbaa !13
  store i16 44, ptr %20, align 8, !tbaa !14
  br label %28

28:                                               ; preds = %25, %17
  %29 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  %30 = add nuw nsw i32 %18, 1
  %31 = icmp eq i32 %30, 6
  br i1 %31, label %32, label %17, !llvm.loop !164

32:                                               ; preds = %28, %17, %12, %8, %2
  %33 = phi i32 [ -20, %2 ], [ -15, %8 ], [ -7, %12 ], [ -20, %17 ], [ 0, %28 ]
  ret i32 %33
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @write_matrix(ptr nocapture noundef readonly %0) #29 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %9 = load i16, ptr %8, align 2, !tbaa !17
  %10 = icmp eq i16 %9, 6
  br i1 %10, label %11, label %29

11:                                               ; preds = %7
  %12 = and i32 %4, 256
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  br label %16

16:                                               ; preds = %25, %14
  %17 = phi i32 [ 5, %14 ], [ %26, %25 ]
  %18 = phi ptr [ %15, %14 ], [ %27, %25 ]
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 0, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = lshr i16 %20, 2
  %22 = and i16 %21, 63
  %23 = zext i16 %22 to i32
  switch i32 %23, label %24 [
    i32 11, label %25
    i32 5, label %25
  ]

24:                                               ; preds = %16
  store i64 0, ptr %18, align 8, !tbaa !13
  store i16 20, ptr %19, align 8, !tbaa !14
  br label %25

25:                                               ; preds = %24, %16, %16
  %26 = add nsw i32 %17, -1
  %27 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  %28 = icmp eq i32 %17, 0
  br i1 %28, label %29, label %16, !llvm.loop !165

29:                                               ; preds = %25, %11, %7, %1
  %30 = phi i32 [ -20, %1 ], [ -15, %7 ], [ -7, %11 ], [ 0, %25 ]
  ret i32 %30
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @sread_string(ptr nocapture noundef writeonly %0, ptr noundef %1, i32 noundef %2) #30 {
  %4 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  store ptr %1, ptr %4, align 8, !tbaa !127
  %5 = getelementptr inbounds i8, ptr %1, i64 -1
  store ptr %5, ptr %0, align 8, !tbaa !124
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds i8, ptr %5, i64 %6
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %7, ptr %8, align 8, !tbaa !142
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  store i32 %2, ptr %9, align 8, !tbaa !128
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  store i8 1, ptr %10, align 1, !tbaa !166
  %11 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  store i64 0, ptr %11, align 8, !tbaa !167
  %12 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %12, ptr noundef nonnull align 8 dereferenceable(48) @sread_string.p, i64 48, i1 false), !tbaa.struct !168
  %13 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 4
  store i8 0, ptr %13, align 4, !tbaa !169
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @ssread(ptr nocapture noundef %0) #28 {
  %2 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !142
  store ptr %3, ptr %0, align 8, !tbaa !124
  ret i32 -1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @ssavailable(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !142
  %5 = load ptr, ptr %0, align 8, !tbaa !124
  %6 = ptrtoint ptr %4 to i64
  %7 = ptrtoint ptr %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq ptr %4, %5
  %10 = select i1 %9, i64 -1, i64 %8
  store i64 %10, ptr %1, align 8, !tbaa !18
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @ssseek(ptr nocapture noundef %0, i64 noundef %1) #28 {
  %3 = icmp slt i64 %1, 0
  br i1 %3, label %14, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !128
  %7 = zext i32 %6 to i64
  %8 = icmp ult i64 %7, %1
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !127
  %12 = getelementptr inbounds i8, ptr %11, i64 %1
  %13 = getelementptr inbounds i8, ptr %12, i64 -1
  store ptr %13, ptr %0, align 8, !tbaa !124
  br label %14

14:                                               ; preds = %9, %4, %2
  %15 = phi i32 [ 0, %9 ], [ -1, %4 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @snull(ptr nocapture readnone %0) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @snoavailable(ptr nocapture readnone %0, ptr nocapture readnone %1) #10 {
  ret i32 -1
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @sread_file(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #30 {
  %5 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  store ptr %2, ptr %5, align 8, !tbaa !127
  %6 = getelementptr inbounds i8, ptr %2, i64 -1
  store ptr %6, ptr %0, align 8, !tbaa !124
  %7 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  store i32 %3, ptr %7, align 8, !tbaa !128
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  store ptr %1, ptr %8, align 8, !tbaa !170
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %6, ptr %9, align 8, !tbaa !142
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  store i8 0, ptr %10, align 1, !tbaa !166
  %11 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %11, ptr noundef nonnull align 8 dereferenceable(48) @sread_file.p, i64 48, i1 false), !tbaa.struct !168
  %12 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 4
  store i8 0, ptr %12, align 4, !tbaa !169
  %13 = load ptr, ptr @stdin, align 8, !tbaa !7
  %14 = icmp eq ptr %13, %1
  %15 = sext i1 %14 to i64
  %16 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  store i64 %15, ptr %16, align 8, !tbaa !167
  ret void
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @sfread(ptr nocapture noundef %0) #18 {
  %2 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  %3 = load i8, ptr %2, align 1, !tbaa !166
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !142
  store ptr %7, ptr %0, align 8, !tbaa !124
  br label %45

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  %10 = load i64, ptr %9, align 8, !tbaa !167
  %11 = icmp sgt i64 %10, -1
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %14 = load ptr, ptr %13, align 8, !tbaa !170
  %15 = tail call i64 @ftell(ptr noundef %14) #62
  store i64 %15, ptr %9, align 8, !tbaa !167
  br label %16

16:                                               ; preds = %12, %8
  %17 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !127
  %19 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  %20 = load i32, ptr %19, align 8, !tbaa !128
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %23 = load ptr, ptr %22, align 8, !tbaa !170
  %24 = tail call i64 @fread(ptr noundef %18, i64 noundef 1, i64 noundef %21, ptr noundef %23) #62
  %25 = trunc i64 %24 to i32
  %26 = load ptr, ptr %17, align 8, !tbaa !127
  %27 = getelementptr inbounds i8, ptr %26, i64 -1
  store ptr %27, ptr %0, align 8, !tbaa !124
  %28 = load ptr, ptr %22, align 8, !tbaa !170
  %29 = tail call i32 @feof(ptr noundef %28) #64
  %30 = trunc i32 %29 to i8
  store i8 %30, ptr %2, align 1, !tbaa !166
  %31 = icmp sgt i32 %25, 0
  br i1 %31, label %32, label %40

32:                                               ; preds = %16
  %33 = load ptr, ptr %0, align 8, !tbaa !124
  %34 = and i64 %24, 4294967295
  %35 = getelementptr inbounds i8, ptr %33, i64 %34
  %36 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %35, ptr %36, align 8, !tbaa !142
  %37 = getelementptr inbounds i8, ptr %33, i64 1
  store ptr %37, ptr %0, align 8, !tbaa !124
  %38 = load i8, ptr %37, align 1, !tbaa !13
  %39 = zext i8 %38 to i32
  br label %45

40:                                               ; preds = %16
  %41 = icmp eq i32 %25, 0
  %42 = load ptr, ptr %0, align 8, !tbaa !124
  %43 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %42, ptr %43, align 8, !tbaa !142
  br i1 %41, label %44, label %45

44:                                               ; preds = %40
  store i8 1, ptr %2, align 1, !tbaa !166
  br label %45

45:                                               ; preds = %44, %40, %32, %5
  %46 = phi i32 [ -1, %5 ], [ %39, %32 ], [ -1, %44 ], [ 0, %40 ]
  ret i32 %46
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @sfavailable(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #18 {
  %3 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !142
  %5 = load ptr, ptr %0, align 8, !tbaa !124
  %6 = ptrtoint ptr %4 to i64
  %7 = ptrtoint ptr %5 to i64
  %8 = sub i64 %6, %7
  store i64 %8, ptr %1, align 8, !tbaa !18
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  %10 = load i64, ptr %9, align 8, !tbaa !167
  %11 = icmp sgt i64 %10, -1
  br i1 %11, label %12, label %31

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %14 = load ptr, ptr %13, align 8, !tbaa !170
  %15 = tail call i64 @ftell(ptr noundef %14) #62
  %16 = load ptr, ptr %13, align 8, !tbaa !170
  %17 = tail call i32 @fseek(ptr noundef %16, i64 noundef 0, i32 noundef 2) #62
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %40

19:                                               ; preds = %12
  %20 = load ptr, ptr %13, align 8, !tbaa !170
  %21 = tail call i64 @ftell(ptr noundef %20) #62
  %22 = load ptr, ptr %13, align 8, !tbaa !170
  %23 = tail call i32 @fseek(ptr noundef %22, i64 noundef %15, i32 noundef 0) #62
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %40

25:                                               ; preds = %19
  %26 = sub nsw i64 %21, %15
  %27 = load i64, ptr %1, align 8, !tbaa !18
  %28 = add nsw i64 %27, %26
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %29, i64 -1, i64 %28
  br label %38

31:                                               ; preds = %2
  %32 = icmp eq ptr %4, %5
  br i1 %32, label %33, label %40

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %35 = load ptr, ptr %34, align 8, !tbaa !170
  %36 = tail call i32 @feof(ptr noundef %35) #64
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %33, %25
  %39 = phi i64 [ %30, %25 ], [ -1, %33 ]
  store i64 %39, ptr %1, align 8, !tbaa !18
  br label %40

40:                                               ; preds = %38, %33, %31, %19, %12
  %41 = phi i32 [ 0, %31 ], [ 0, %33 ], [ -1, %12 ], [ -1, %19 ], [ 0, %38 ]
  ret i32 %41
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @srseek(ptr nocapture noundef %0, i64 noundef %1) #18 {
  %3 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !127
  %6 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  %7 = load i64, ptr %6, align 8, !tbaa !167
  %8 = sub nsw i64 %1, %7
  %9 = icmp sgt i64 %8, -1
  br i1 %9, label %10, label %21

10:                                               ; preds = %2
  %11 = load ptr, ptr %3, align 8, !tbaa !142
  %12 = ptrtoint ptr %11 to i64
  %13 = ptrtoint ptr %5 to i64
  %14 = sub i64 %12, %13
  %15 = add i64 %14, 1
  %16 = and i64 %15, 4294967295
  %17 = icmp ugt i64 %8, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds i8, ptr %5, i64 %8
  %20 = getelementptr inbounds i8, ptr %19, i64 -1
  store ptr %20, ptr %0, align 8, !tbaa !124
  br label %30

21:                                               ; preds = %10, %2
  %22 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %23 = load ptr, ptr %22, align 8, !tbaa !170
  %24 = tail call i32 @fseek(ptr noundef %23, i64 noundef %1, i32 noundef 0) #62
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  %27 = load ptr, ptr %4, align 8, !tbaa !127
  %28 = getelementptr inbounds i8, ptr %27, i64 -1
  store ptr %28, ptr %0, align 8, !tbaa !124
  store ptr %28, ptr %3, align 8, !tbaa !142
  %29 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  store i8 0, ptr %29, align 1, !tbaa !166
  br label %30

30:                                               ; preds = %26, %21, %18
  %31 = phi i32 [ 0, %18 ], [ 0, %26 ], [ -1, %21 ]
  ret i32 %31
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @srclose(ptr nocapture noundef readonly %0) #18 {
  %2 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %3 = load ptr, ptr %2, align 8, !tbaa !170
  %4 = tail call i32 @fclose(ptr noundef %3) #62
  ret i32 %4
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fseek(ptr nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i64 @ftell(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i32 @feof(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @swrite_file(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #30 {
  %5 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  store ptr %2, ptr %5, align 8, !tbaa !127
  %6 = getelementptr inbounds i8, ptr %2, i64 -1
  store ptr %6, ptr %0, align 8, !tbaa !124
  %7 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  store i32 %3, ptr %7, align 8, !tbaa !128
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  store ptr %1, ptr %8, align 8, !tbaa !170
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %6, ptr %9, align 8, !tbaa !142
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  store i8 0, ptr %10, align 1, !tbaa !166
  %11 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %11, ptr noundef nonnull align 8 dereferenceable(48) @swrite_file.p, i64 48, i1 false), !tbaa.struct !168
  %12 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 4
  store i8 1, ptr %12, align 4, !tbaa !169
  %13 = load ptr, ptr @stdout, align 8, !tbaa !7
  %14 = icmp eq ptr %13, %1
  %15 = load ptr, ptr @stderr, align 8
  %16 = icmp eq ptr %15, %1
  %17 = select i1 %14, i1 true, i1 %16
  %18 = sext i1 %17 to i64
  %19 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  store i64 %18, ptr %19, align 8, !tbaa !167
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sfwrite(ptr noundef %0, i8 noundef zeroext %1) #0 {
  %3 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !127
  %5 = load ptr, ptr %0, align 8, !tbaa !124
  %6 = getelementptr inbounds i8, ptr %5, i64 1
  %7 = ptrtoint ptr %6 to i64
  %8 = ptrtoint ptr %4 to i64
  %9 = sub i64 %7, %8
  %10 = and i64 %9, 4294967295
  %11 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %12 = load ptr, ptr %11, align 8, !tbaa !170
  %13 = tail call i64 @fwrite(ptr noundef %4, i64 noundef 1, i64 noundef %10, ptr noundef %12) #62
  %14 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  %15 = load i64, ptr %14, align 8, !tbaa !167
  %16 = icmp sgt i64 %15, -1
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = load ptr, ptr %11, align 8, !tbaa !170
  %19 = tail call i64 @ftell(ptr noundef %18) #62
  store i64 %19, ptr %14, align 8, !tbaa !167
  br label %20

20:                                               ; preds = %17, %2
  %21 = load ptr, ptr %3, align 8, !tbaa !127
  %22 = getelementptr inbounds i8, ptr %21, i64 -1
  store ptr %22, ptr %0, align 8, !tbaa !124
  %23 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  %24 = load i32, ptr %23, align 8, !tbaa !128
  %25 = zext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = getelementptr inbounds i8, ptr %21, i64 %26
  %28 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %27, ptr %28, align 8, !tbaa !142
  %29 = icmp eq i32 %24, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %20
  store ptr %21, ptr %0, align 8, !tbaa !124
  store i8 %1, ptr %21, align 1, !tbaa !13
  %31 = zext i8 %1 to i32
  br label %36

32:                                               ; preds = %20
  %33 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !171
  %35 = tail call i32 %34(ptr noundef nonnull %0, i8 noundef zeroext %1) #64
  br label %36

36:                                               ; preds = %32, %30
  %37 = phi i32 [ %31, %30 ], [ %35, %32 ]
  ret i32 %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @swseek(ptr nocapture readnone %0, i64 %1) #10 {
  ret i32 -1
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @swflush(ptr nocapture noundef %0) #18 {
  %2 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !127
  %4 = load ptr, ptr %0, align 8, !tbaa !124
  %5 = getelementptr inbounds i8, ptr %4, i64 1
  %6 = ptrtoint ptr %5 to i64
  %7 = ptrtoint ptr %3 to i64
  %8 = sub i64 %6, %7
  %9 = and i64 %8, 4294967295
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %11 = load ptr, ptr %10, align 8, !tbaa !170
  %12 = tail call i64 @fwrite(ptr noundef %3, i64 noundef 1, i64 noundef %9, ptr noundef %11) #62
  %13 = trunc i64 %12 to i32
  %14 = load ptr, ptr %10, align 8, !tbaa !170
  %15 = tail call i32 @fflush(ptr noundef %14) #62
  %16 = load ptr, ptr %10, align 8, !tbaa !170
  %17 = tail call i64 @ftell(ptr noundef %16) #62
  %18 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  store i64 %17, ptr %18, align 8, !tbaa !167
  %19 = load ptr, ptr %2, align 8, !tbaa !127
  %20 = getelementptr inbounds i8, ptr %19, i64 -1
  store ptr %20, ptr %0, align 8, !tbaa !124
  %21 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  %22 = load i32, ptr %21, align 8, !tbaa !128
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, ptr %20, i64 %23
  %25 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %24, ptr %25, align 8, !tbaa !142
  ret i32 %13
}

; Function Attrs: nofree nounwind optsize uwtable
define internal i32 @swclose(ptr nocapture noundef readonly %0) #18 {
  %2 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !127
  %4 = load ptr, ptr %0, align 8, !tbaa !124
  %5 = getelementptr inbounds i8, ptr %4, i64 1
  %6 = ptrtoint ptr %5 to i64
  %7 = ptrtoint ptr %3 to i64
  %8 = sub i64 %6, %7
  %9 = and i64 %8, 4294967295
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  %11 = load ptr, ptr %10, align 8, !tbaa !170
  %12 = tail call i64 @fwrite(ptr noundef %3, i64 noundef 1, i64 noundef %9, ptr noundef %11) #62
  %13 = load ptr, ptr %10, align 8, !tbaa !170
  %14 = tail call i32 @fclose(ptr noundef %13) #62
  ret i32 %14
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @sread_decrypt(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i16 noundef zeroext %4) #30 {
  %6 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  store ptr %2, ptr %6, align 8, !tbaa !127
  %7 = getelementptr inbounds i8, ptr %2, i64 -1
  store ptr %7, ptr %0, align 8, !tbaa !124
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  store i32 %3, ptr %8, align 8, !tbaa !128
  %9 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 9
  store ptr null, ptr %9, align 8, !tbaa !170
  %10 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %7, ptr %10, align 8, !tbaa !142
  %11 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  store i8 0, ptr %11, align 1, !tbaa !166
  %12 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %12, ptr noundef nonnull align 8 dereferenceable(48) @sread_decrypt.p, i64 48, i1 false), !tbaa.struct !168
  %13 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 4
  store i8 0, ptr %13, align 4, !tbaa !169
  %14 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 6
  store i64 -1, ptr %14, align 8, !tbaa !167
  %15 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 10
  store ptr %1, ptr %15, align 8, !tbaa !172
  %16 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 11
  store i16 %4, ptr %16, align 8, !tbaa !173
  %17 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 12
  store i32 -1, ptr %17, align 4, !tbaa !174
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sxread(ptr noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.stream_s, align 8
  %4 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !127
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %6 = getelementptr inbounds i8, ptr %5, i64 -1
  store ptr %6, ptr %0, align 8, !tbaa !124
  %7 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 10
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 2
  %10 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 1
  %11 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 3
  %12 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 5
  %13 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 6
  %14 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 7
  %15 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 4
  %16 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 12
  br label %17

17:                                               ; preds = %42, %1
  %18 = load ptr, ptr %7, align 8, !tbaa !172
  %19 = load i32, ptr %8, align 8, !tbaa !128
  %20 = call i32 @sgets(ptr noundef %18, ptr noundef %5, i32 noundef %19) #62
  store i32 %20, ptr %2, align 4, !tbaa !11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = load ptr, ptr %0, align 8, !tbaa !124
  %24 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %23, ptr %24, align 8, !tbaa !142
  %25 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  store i8 1, ptr %25, align 1, !tbaa !166
  br label %43

26:                                               ; preds = %17
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %3) #65
  store ptr %5, ptr %9, align 8, !tbaa !127
  store ptr %6, ptr %3, align 8, !tbaa !124
  %27 = zext i32 %20 to i64
  %28 = getelementptr inbounds i8, ptr %6, i64 %27
  store ptr %28, ptr %10, align 8, !tbaa !142
  store i32 %20, ptr %11, align 8, !tbaa !128
  store i8 1, ptr %12, align 1, !tbaa !166
  store i64 0, ptr %13, align 8, !tbaa !167
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %14, ptr noundef nonnull align 8 dereferenceable(48) @sread_string.p, i64 48, i1 false), !tbaa.struct !168
  store i8 0, ptr %15, align 4, !tbaa !169
  %29 = call i32 @sreadhex(ptr noundef nonnull %3, ptr noundef %5, i32 noundef %20, ptr noundef nonnull %2, ptr noundef nonnull %16) #62, !range !55
  %30 = load i32, ptr %2, align 4, !tbaa !11
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %42, label %32

32:                                               ; preds = %26
  %.lcssa = phi i32 [ %30, %26 ]
  %33 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 11
  %34 = call i32 @gs_type1_decrypt(ptr noundef %5, ptr noundef %5, i32 noundef %.lcssa, ptr noundef nonnull %33) #64
  %35 = load ptr, ptr %0, align 8, !tbaa !124
  %36 = zext i32 %.lcssa to i64
  %37 = getelementptr inbounds i8, ptr %35, i64 %36
  %38 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  store ptr %37, ptr %38, align 8, !tbaa !142
  %39 = getelementptr inbounds i8, ptr %35, i64 1
  store ptr %39, ptr %0, align 8, !tbaa !124
  %40 = load i8, ptr %39, align 1, !tbaa !13
  %41 = zext i8 %40 to i32
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %3) #65
  br label %43

42:                                               ; preds = %26
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %3) #65
  br label %17

43:                                               ; preds = %32, %22
  %44 = phi i32 [ -1, %22 ], [ %41, %32 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %44
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sxavailable(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 10
  %4 = load ptr, ptr %3, align 8, !tbaa !172
  %5 = getelementptr inbounds %struct.stream_s, ptr %4, i64 0, i32 7, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !175
  %7 = tail call i32 %6(ptr noundef %4, ptr noundef %1) #64
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = load i64, ptr %1, align 8, !tbaa !18
  %11 = icmp sgt i64 %10, -1
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = lshr i64 %10, 1
  store i64 %13, ptr %1, align 8, !tbaa !18
  br label %14

14:                                               ; preds = %12, %9, %2
  %15 = phi i32 [ -1, %2 ], [ 0, %12 ], [ 0, %9 ]
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sgets(ptr noundef %0, ptr nocapture noundef writeonly %1, i32 noundef %2) #0 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %50, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  br label %9

9:                                                ; preds = %46, %5
  %10 = phi i32 [ %2, %5 ], [ %48, %46 ]
  %11 = phi ptr [ %1, %5 ], [ %47, %46 ]
  %12 = load ptr, ptr %6, align 8, !tbaa !142
  %13 = load ptr, ptr %0, align 8, !tbaa !124
  %14 = ptrtoint ptr %12 to i64
  %15 = ptrtoint ptr %13 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %9
  %20 = tail call i32 @llvm.umin.i32(i32 %10, i32 %17)
  %21 = getelementptr inbounds i8, ptr %13, i64 1
  %22 = zext i32 %20 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %11, ptr nonnull align 1 %21, i64 %22, i1 false)
  %23 = load ptr, ptr %0, align 8, !tbaa !124
  %24 = getelementptr inbounds i8, ptr %23, i64 %22
  store ptr %24, ptr %0, align 8, !tbaa !124
  %25 = getelementptr inbounds i8, ptr %11, i64 %22
  %26 = sub i32 %10, %20
  br label %46

27:                                               ; preds = %9
  %28 = icmp ult ptr %13, %12
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = getelementptr inbounds i8, ptr %13, i64 1
  store ptr %30, ptr %0, align 8, !tbaa !124
  %31 = load i8, ptr %30, align 1, !tbaa !13
  %32 = zext i8 %31 to i32
  br label %36

33:                                               ; preds = %27
  %34 = load ptr, ptr %7, align 8, !tbaa !143
  %35 = tail call i32 %34(ptr noundef nonnull %0) #64
  br label %36

36:                                               ; preds = %33, %29
  %37 = phi i32 [ %32, %29 ], [ %35, %33 ]
  %38 = load i8, ptr %8, align 1, !tbaa !166
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %36
  %41 = trunc i32 %37 to i8
  %42 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 %41, ptr %11, align 1, !tbaa !13
  %43 = add i32 %10, -1
  br label %46

44:                                               ; preds = %36
  %.lcssa = phi i32 [ %10, %36 ]
  %45 = sub i32 %2, %.lcssa
  br label %50

46:                                               ; preds = %40, %19
  %47 = phi ptr [ %25, %19 ], [ %42, %40 ]
  %48 = phi i32 [ %26, %19 ], [ %43, %40 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %9, !llvm.loop !176

50:                                               ; preds = %46, %44, %3
  %51 = phi i32 [ %45, %44 ], [ 0, %3 ], [ %2, %46 ]
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sreadhex(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef %4) #0 {
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds i8, ptr %1, i64 %6
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %75, label %9

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4, !tbaa !11
  %11 = trunc i32 %10 to i8
  %12 = and i32 %10, 240
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %37, label %14

14:                                               ; preds = %63, %9
  %15 = phi ptr [ %66, %63 ], [ %1, %9 ]
  %16 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %17 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  br label %18

18:                                               ; preds = %35, %14
  %19 = load ptr, ptr %0, align 8, !tbaa !124
  %20 = load ptr, ptr %16, align 8, !tbaa !142
  %21 = icmp ult ptr %19, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, ptr %19, i64 1
  store ptr %23, ptr %0, align 8, !tbaa !124
  %24 = load i8, ptr %23, align 1, !tbaa !13
  %25 = zext i8 %24 to i32
  br label %29

26:                                               ; preds = %18
  %27 = load ptr, ptr %17, align 8, !tbaa !143
  %28 = tail call i32 %27(ptr noundef nonnull %0) #64
  br label %29

29:                                               ; preds = %26, %22
  %30 = phi i32 [ %25, %22 ], [ %28, %26 ]
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !13
  %34 = icmp ugt i8 %33, 15
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = icmp eq i8 %33, 103
  br i1 %36, label %68, label %18, !llvm.loop !177

37:                                               ; preds = %29, %9
  %38 = phi i8 [ %11, %9 ], [ %33, %29 ]
  %39 = phi ptr [ %1, %9 ], [ %15, %29 ]
  %40 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %41 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7
  br label %42

42:                                               ; preds = %59, %37
  %43 = load ptr, ptr %0, align 8, !tbaa !124
  %44 = load ptr, ptr %40, align 8, !tbaa !142
  %45 = icmp ult ptr %43, %44
  br i1 %45, label %46, label %50

46:                                               ; preds = %42
  %47 = getelementptr inbounds i8, ptr %43, i64 1
  store ptr %47, ptr %0, align 8, !tbaa !124
  %48 = load i8, ptr %47, align 1, !tbaa !13
  %49 = zext i8 %48 to i32
  br label %53

50:                                               ; preds = %42
  %51 = load ptr, ptr %41, align 8, !tbaa !143
  %52 = tail call i32 %51(ptr noundef nonnull %0) #64
  br label %53

53:                                               ; preds = %50, %46
  %54 = phi i32 [ %49, %46 ], [ %52, %50 ]
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, ptr getelementptr inbounds ([257 x i8], ptr @scan_char_array, i64 0, i64 1), i64 %55
  %57 = load i8, ptr %56, align 1, !tbaa !13
  %58 = icmp ugt i8 %57, 15
  br i1 %58, label %59, label %63

59:                                               ; preds = %53
  %60 = icmp eq i8 %57, 103
  br i1 %60, label %61, label %42, !llvm.loop !178

61:                                               ; preds = %59
  %62 = zext i8 %38 to i32
  br label %68

63:                                               ; preds = %53
  %.lcssa = phi i8 [ %57, %53 ]
  %64 = shl i8 %38, 4
  %65 = add nuw i8 %.lcssa, %64
  %66 = getelementptr inbounds i8, ptr %39, i64 1
  store i8 %65, ptr %39, align 1, !tbaa !13
  %67 = icmp ult ptr %66, %7
  br i1 %67, label %14, label %75

68:                                               ; preds = %61, %35
  %69 = phi i32 [ %62, %61 ], [ -1, %35 ]
  %70 = phi ptr [ %39, %61 ], [ %15, %35 ]
  store i32 %69, ptr %4, align 4, !tbaa !11
  %71 = ptrtoint ptr %70 to i64
  %72 = ptrtoint ptr %1 to i64
  %73 = sub i64 %71, %72
  %74 = trunc i64 %73 to i32
  br label %75

75:                                               ; preds = %68, %63, %5
  %76 = phi i32 [ %74, %68 ], [ 0, %5 ], [ %2, %63 ]
  %77 = phi i32 [ 1, %68 ], [ 0, %5 ], [ 0, %63 ]
  store i32 %76, ptr %3, align 4, !tbaa !11
  ret i32 %77
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @sungetc(ptr nocapture noundef %0, i8 noundef zeroext %1) #31 {
  %3 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 4
  %4 = load i8, ptr %3, align 4, !tbaa !169
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = load ptr, ptr %0, align 8, !tbaa !124
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !127
  %10 = icmp ult ptr %7, %9
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds i8, ptr %7, i64 -1
  store ptr %12, ptr %0, align 8, !tbaa !124
  store i8 %1, ptr %7, align 1, !tbaa !13
  br label %13

13:                                               ; preds = %11, %6, %2
  %14 = phi i32 [ 0, %11 ], [ -1, %6 ], [ -1, %2 ]
  ret i32 %14
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @sputs(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2) #0 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %46, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 7, i32 1
  %8 = getelementptr inbounds %struct.stream_s, ptr %0, i64 0, i32 5
  br label %9

9:                                                ; preds = %40, %5
  %10 = phi i32 [ %2, %5 ], [ %42, %40 ]
  %11 = phi ptr [ %1, %5 ], [ %41, %40 ]
  %12 = load ptr, ptr %6, align 8, !tbaa !142
  %13 = load ptr, ptr %0, align 8, !tbaa !124
  %14 = ptrtoint ptr %12 to i64
  %15 = ptrtoint ptr %13 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %9
  %20 = tail call i32 @llvm.umin.i32(i32 %10, i32 %17)
  %21 = getelementptr inbounds i8, ptr %13, i64 1
  %22 = zext i32 %20 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %21, ptr align 1 %11, i64 %22, i1 false)
  %23 = load ptr, ptr %0, align 8, !tbaa !124
  %24 = getelementptr inbounds i8, ptr %23, i64 %22
  store ptr %24, ptr %0, align 8, !tbaa !124
  %25 = getelementptr inbounds i8, ptr %11, i64 %22
  %26 = sub i32 %10, %20
  br label %40

27:                                               ; preds = %9
  %28 = getelementptr inbounds i8, ptr %11, i64 1
  %29 = load i8, ptr %11, align 1, !tbaa !13
  %30 = icmp ult ptr %13, %12
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds i8, ptr %13, i64 1
  store ptr %32, ptr %0, align 8, !tbaa !124
  store i8 %29, ptr %32, align 1, !tbaa !13
  br label %36

33:                                               ; preds = %27
  %34 = load ptr, ptr %7, align 8, !tbaa !171
  %35 = tail call i32 %34(ptr noundef nonnull %0, i8 noundef zeroext %29) #64
  br label %36

36:                                               ; preds = %33, %31
  %37 = load i8, ptr %8, align 1, !tbaa !166
  %38 = icmp eq i8 %37, 0
  %39 = add i32 %10, -1
  br i1 %38, label %40, label %44

40:                                               ; preds = %36, %19
  %41 = phi ptr [ %25, %19 ], [ %28, %36 ]
  %42 = phi i32 [ %26, %19 ], [ %39, %36 ]
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %9, !llvm.loop !179

44:                                               ; preds = %36
  %.lcssa = phi i32 [ %10, %36 ]
  %45 = sub i32 %2, %.lcssa
  br label %46

46:                                               ; preds = %44, %40, %3
  %47 = phi i32 [ %45, %44 ], [ 0, %3 ], [ %2, %40 ]
  ret i32 %47
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zadd(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %51 [
    i32 11, label %7
    i32 5, label %23
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %9 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = lshr i16 %10, 2
  %12 = and i16 %11, 63
  %13 = zext i16 %12 to i32
  switch i32 %13, label %51 [
    i32 11, label %14
    i32 5, label %18
  ]

14:                                               ; preds = %7
  %15 = load float, ptr %0, align 8, !tbaa !13
  %16 = load float, ptr %8, align 8, !tbaa !13
  %17 = fadd float %15, %16
  store float %17, ptr %8, align 8, !tbaa !13
  br label %48

18:                                               ; preds = %7
  %19 = load i64, ptr %8, align 8, !tbaa !13
  %20 = sitofp i64 %19 to float
  %21 = load float, ptr %0, align 8, !tbaa !13
  %22 = fadd float %21, %20
  store float %22, ptr %8, align 8, !tbaa !13
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %48

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %25 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %26 = load i16, ptr %25, align 8, !tbaa !14
  %27 = lshr i16 %26, 2
  %28 = and i16 %27, 63
  %29 = zext i16 %28 to i32
  switch i32 %29, label %51 [
    i32 11, label %30
    i32 5, label %35
  ]

30:                                               ; preds = %23
  %31 = load i64, ptr %0, align 8, !tbaa !13
  %32 = sitofp i64 %31 to float
  %33 = load float, ptr %24, align 8, !tbaa !13
  %34 = fadd float %33, %32
  store float %34, ptr %24, align 8, !tbaa !13
  br label %48

35:                                               ; preds = %23
  %36 = load i64, ptr %0, align 8, !tbaa !13
  %37 = load i64, ptr %24, align 8, !tbaa !13
  %38 = add nsw i64 %37, %36
  store i64 %38, ptr %24, align 8, !tbaa !13
  %39 = xor i64 %38, %36
  %40 = icmp slt i64 %39, 0
  %41 = xor i64 %37, %36
  %42 = icmp sgt i64 %41, -1
  %43 = and i1 %42, %40
  br i1 %43, label %44, label %48

44:                                               ; preds = %35
  %45 = sitofp i64 %38 to float
  %46 = sitofp i64 %36 to float
  %47 = fsub float %45, %46
  store float %47, ptr %24, align 8, !tbaa !13
  store i16 44, ptr %25, align 8, !tbaa !14
  br label %48

48:                                               ; preds = %44, %35, %30, %18, %14
  %49 = load ptr, ptr @osp, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.ref_s, ptr %49, i64 -1
  store ptr %50, ptr @osp, align 8, !tbaa !7
  br label %51

51:                                               ; preds = %48, %23, %7, %1
  %52 = phi i32 [ 0, %48 ], [ -20, %1 ], [ -20, %7 ], [ -20, %23 ]
  ret i32 %52
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zdiv(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = lshr i16 %4, 2
  %6 = and i16 %5, 63
  %7 = zext i16 %6 to i32
  switch i32 %7, label %45 [
    i32 11, label %8
    i32 5, label %24
  ]

8:                                                ; preds = %1
  %9 = load float, ptr %0, align 8, !tbaa !13
  %10 = fcmp oeq float %9, 0.000000e+00
  br i1 %10, label %45, label %11

11:                                               ; preds = %8
  %12 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %13 = load i16, ptr %12, align 8, !tbaa !14
  %14 = lshr i16 %13, 2
  %15 = and i16 %14, 63
  %16 = zext i16 %15 to i32
  switch i32 %16, label %45 [
    i32 11, label %17
    i32 5, label %20
  ]

17:                                               ; preds = %11
  %18 = load float, ptr %2, align 8, !tbaa !13
  %19 = fdiv float %18, %9
  store float %19, ptr %2, align 8, !tbaa !13
  br label %42

20:                                               ; preds = %11
  %21 = load i64, ptr %2, align 8, !tbaa !13
  %22 = sitofp i64 %21 to float
  %23 = fdiv float %22, %9
  store float %23, ptr %2, align 8, !tbaa !13
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %42

24:                                               ; preds = %1
  %25 = load i64, ptr %0, align 8, !tbaa !13
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %45, label %27

27:                                               ; preds = %24
  %28 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %29 = load i16, ptr %28, align 8, !tbaa !14
  %30 = lshr i16 %29, 2
  %31 = and i16 %30, 63
  %32 = zext i16 %31 to i32
  switch i32 %32, label %45 [
    i32 11, label %33
    i32 5, label %37
  ]

33:                                               ; preds = %27
  %34 = sitofp i64 %25 to float
  %35 = load float, ptr %2, align 8, !tbaa !13
  %36 = fdiv float %35, %34
  store float %36, ptr %2, align 8, !tbaa !13
  br label %42

37:                                               ; preds = %27
  %38 = load i64, ptr %2, align 8, !tbaa !13
  %39 = sitofp i64 %38 to float
  %40 = sitofp i64 %25 to float
  %41 = fdiv float %39, %40
  store float %41, ptr %2, align 8, !tbaa !13
  store i16 44, ptr %28, align 8, !tbaa !14
  br label %42

42:                                               ; preds = %37, %33, %20, %17
  %43 = load ptr, ptr @osp, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.ref_s, ptr %43, i64 -1
  store ptr %44, ptr @osp, align 8, !tbaa !7
  br label %45

45:                                               ; preds = %42, %27, %24, %11, %8, %1
  %46 = phi i32 [ 0, %42 ], [ -20, %1 ], [ -23, %8 ], [ -20, %11 ], [ -23, %24 ], [ -20, %27 ]
  ret i32 %46
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zmul(ptr nocapture noundef %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %62 [
    i32 11, label %7
    i32 5, label %23
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %9 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = lshr i16 %10, 2
  %12 = and i16 %11, 63
  %13 = zext i16 %12 to i32
  switch i32 %13, label %62 [
    i32 11, label %14
    i32 5, label %18
  ]

14:                                               ; preds = %7
  %15 = load float, ptr %0, align 8, !tbaa !13
  %16 = load float, ptr %8, align 8, !tbaa !13
  %17 = fmul float %15, %16
  store float %17, ptr %8, align 8, !tbaa !13
  br label %59

18:                                               ; preds = %7
  %19 = load i64, ptr %8, align 8, !tbaa !13
  %20 = sitofp i64 %19 to float
  %21 = load float, ptr %0, align 8, !tbaa !13
  %22 = fmul float %21, %20
  store float %22, ptr %8, align 8, !tbaa !13
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %59

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %25 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %26 = load i16, ptr %25, align 8, !tbaa !14
  %27 = lshr i16 %26, 2
  %28 = and i16 %27, 63
  %29 = zext i16 %28 to i32
  switch i32 %29, label %62 [
    i32 11, label %30
    i32 5, label %35
  ]

30:                                               ; preds = %23
  %31 = load i64, ptr %0, align 8, !tbaa !13
  %32 = sitofp i64 %31 to float
  %33 = load float, ptr %24, align 8, !tbaa !13
  %34 = fmul float %33, %32
  store float %34, ptr %24, align 8, !tbaa !13
  br label %59

35:                                               ; preds = %23
  %36 = load i64, ptr %24, align 8, !tbaa !13
  %37 = load i64, ptr %0, align 8, !tbaa !13
  %38 = tail call i64 @llvm.abs.i64(i64 %36, i1 true)
  %39 = tail call i64 @llvm.abs.i64(i64 %37, i1 true)
  %40 = icmp ugt i64 %38, 32767
  %41 = icmp ugt i64 %39, 32767
  %42 = select i1 %40, i1 true, i1 %41
  %43 = icmp ne i64 %36, 0
  %44 = select i1 %42, i1 %43, i1 false
  br i1 %44, label %45, label %57

45:                                               ; preds = %35
  %46 = udiv i64 2147483647, %38
  %47 = icmp ugt i64 %39, %46
  br i1 %47, label %48, label %57

48:                                               ; preds = %45
  %49 = sitofp i64 %36 to float
  %50 = sitofp i64 %37 to float
  %51 = fmul float %49, %50
  %52 = mul nsw i64 %37, %36
  %53 = icmp ne i64 %52, -2147483648
  %54 = fcmp une float %51, 0xC1E0000000000000
  %55 = select i1 %53, i1 true, i1 %54
  br i1 %55, label %56, label %57

56:                                               ; preds = %48
  store float %51, ptr %24, align 8, !tbaa !13
  store i16 44, ptr %25, align 8, !tbaa !14
  br label %59

57:                                               ; preds = %48, %45, %35
  %58 = mul nsw i64 %37, %36
  store i64 %58, ptr %24, align 8, !tbaa !13
  br label %59

59:                                               ; preds = %57, %56, %30, %18, %14
  %60 = load ptr, ptr @osp, align 8, !tbaa !7
  %61 = getelementptr inbounds %struct.ref_s, ptr %60, i64 -1
  store ptr %61, ptr @osp, align 8, !tbaa !7
  br label %62

62:                                               ; preds = %59, %23, %7, %1
  %63 = phi i32 [ 0, %59 ], [ -20, %1 ], [ -20, %7 ], [ -20, %23 ]
  ret i32 %63
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #19

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zsub(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %50 [
    i32 11, label %7
    i32 5, label %23
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %9 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = lshr i16 %10, 2
  %12 = and i16 %11, 63
  %13 = zext i16 %12 to i32
  switch i32 %13, label %50 [
    i32 11, label %14
    i32 5, label %18
  ]

14:                                               ; preds = %7
  %15 = load float, ptr %0, align 8, !tbaa !13
  %16 = load float, ptr %8, align 8, !tbaa !13
  %17 = fsub float %16, %15
  store float %17, ptr %8, align 8, !tbaa !13
  br label %47

18:                                               ; preds = %7
  %19 = load i64, ptr %8, align 8, !tbaa !13
  %20 = sitofp i64 %19 to float
  %21 = load float, ptr %0, align 8, !tbaa !13
  %22 = fsub float %20, %21
  store float %22, ptr %8, align 8, !tbaa !13
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %47

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %25 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %26 = load i16, ptr %25, align 8, !tbaa !14
  %27 = lshr i16 %26, 2
  %28 = and i16 %27, 63
  %29 = zext i16 %28 to i32
  switch i32 %29, label %50 [
    i32 11, label %30
    i32 5, label %35
  ]

30:                                               ; preds = %23
  %31 = load i64, ptr %0, align 8, !tbaa !13
  %32 = sitofp i64 %31 to float
  %33 = load float, ptr %24, align 8, !tbaa !13
  %34 = fsub float %33, %32
  store float %34, ptr %24, align 8, !tbaa !13
  br label %47

35:                                               ; preds = %23
  %36 = load i64, ptr %24, align 8, !tbaa !13
  %37 = load i64, ptr %0, align 8, !tbaa !13
  %38 = sub nsw i64 %36, %37
  store i64 %38, ptr %24, align 8, !tbaa !13
  %39 = xor i64 %38, %36
  %40 = xor i64 %37, %36
  %41 = and i64 %39, %40
  %42 = icmp sgt i64 %41, -1
  br i1 %42, label %47, label %43

43:                                               ; preds = %35
  %44 = sitofp i64 %36 to float
  %45 = sitofp i64 %37 to float
  %46 = fsub float %44, %45
  store float %46, ptr %24, align 8, !tbaa !13
  store i16 44, ptr %25, align 8, !tbaa !14
  br label %47

47:                                               ; preds = %43, %35, %30, %18, %14
  %48 = load ptr, ptr @osp, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.ref_s, ptr %48, i64 -1
  store ptr %49, ptr @osp, align 8, !tbaa !7
  br label %50

50:                                               ; preds = %47, %23, %7, %1
  %51 = phi i32 [ 0, %47 ], [ -20, %1 ], [ -20, %7 ], [ -20, %23 ]
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zidiv(ptr noundef %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  %4 = tail call i32 @zdiv(ptr noundef %0) #62, !range !180
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = tail call i32 (ptr, ...) @zcvi(ptr noundef nonnull %3) #64
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %9, %6, %1
  %11 = phi i32 [ %4, %1 ], [ %7, %9 ], [ %7, %6 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  ret i32 %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zmod(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 20
  br i1 %6, label %7, label %20

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = and i16 %9, 252
  %11 = icmp eq i16 %10, 20
  br i1 %11, label %12, label %20

12:                                               ; preds = %7
  %13 = load i64, ptr %0, align 8, !tbaa !13
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %12
  %16 = load i64, ptr %2, align 8, !tbaa !13
  %17 = srem i64 %16, %13
  store i64 %17, ptr %2, align 8, !tbaa !13
  %18 = load ptr, ptr @osp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -1
  store ptr %19, ptr @osp, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %15, %12, %7, %1
  %21 = phi i32 [ 0, %15 ], [ -20, %1 ], [ -20, %7 ], [ -23, %12 ]
  ret i32 %21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @zneg(ptr nocapture noundef %0) #28 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %16 [
    i32 11, label %7
    i32 5, label %10
  ]

7:                                                ; preds = %1
  %8 = load float, ptr %0, align 8, !tbaa !13
  %9 = fneg float %8
  store float %9, ptr %0, align 8, !tbaa !13
  br label %16

10:                                               ; preds = %1
  %11 = load i64, ptr %0, align 8, !tbaa !13
  %12 = icmp eq i64 %11, -2147483648
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  store float 0x41E0000000000000, ptr %0, align 8, !tbaa !13
  store i16 44, ptr %2, align 8, !tbaa !14
  br label %16

14:                                               ; preds = %10
  %15 = sub nsw i64 0, %11
  store i64 %15, ptr %0, align 8, !tbaa !13
  br label %16

16:                                               ; preds = %14, %13, %7, %1
  %17 = phi i32 [ -20, %1 ], [ 0, %13 ], [ 0, %14 ], [ 0, %7 ]
  ret i32 %17
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @zceiling(ptr nocapture noundef %0) #33 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %11 [
    i32 11, label %7
    i32 5, label %10
  ]

7:                                                ; preds = %1
  %8 = load float, ptr %0, align 8, !tbaa !13
  %9 = tail call float @llvm.ceil.f32(float %8)
  store float %9, ptr %0, align 8, !tbaa !13
  br label %10

10:                                               ; preds = %7, %1
  br label %11

11:                                               ; preds = %10, %1
  %12 = phi i32 [ 0, %10 ], [ -20, %1 ]
  ret i32 %12
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.ceil.f32(float) #19

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @zfloor(ptr nocapture noundef %0) #33 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %11 [
    i32 11, label %7
    i32 5, label %10
  ]

7:                                                ; preds = %1
  %8 = load float, ptr %0, align 8, !tbaa !13
  %9 = tail call float @llvm.floor.f32(float %8)
  store float %9, ptr %0, align 8, !tbaa !13
  br label %10

10:                                               ; preds = %7, %1
  br label %11

11:                                               ; preds = %10, %1
  %12 = phi i32 [ 0, %10 ], [ -20, %1 ]
  ret i32 %12
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #19

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @zround(ptr nocapture noundef %0) #33 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %14 [
    i32 11, label %7
    i32 5, label %13
  ]

7:                                                ; preds = %1
  %8 = load float, ptr %0, align 8, !tbaa !13
  %9 = fpext float %8 to double
  %10 = fadd double %9, 5.000000e-01
  %11 = tail call double @llvm.floor.f64(double %10)
  %12 = fptrunc double %11 to float
  store float %12, ptr %0, align 8, !tbaa !13
  br label %13

13:                                               ; preds = %7, %1
  br label %14

14:                                               ; preds = %13, %1
  %15 = phi i32 [ 0, %13 ], [ -20, %1 ]
  ret i32 %15
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #19

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @ztruncate(ptr nocapture noundef %0) #33 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %19 [
    i32 11, label %7
    i32 5, label %18
  ]

7:                                                ; preds = %1
  %8 = load float, ptr %0, align 8, !tbaa !13
  %9 = fpext float %8 to double
  %10 = fcmp olt float %8, 0.000000e+00
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = tail call double @llvm.ceil.f64(double %9)
  br label %15

13:                                               ; preds = %7
  %14 = tail call double @llvm.floor.f64(double %9)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi double [ %12, %11 ], [ %14, %13 ]
  %17 = fptrunc double %16 to float
  store float %17, ptr %0, align 8, !tbaa !13
  br label %18

18:                                               ; preds = %15, %1
  br label %19

19:                                               ; preds = %18, %1
  %20 = phi i32 [ 0, %18 ], [ -20, %1 ]
  ret i32 %20
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #19

; Function Attrs: nounwind optsize uwtable
define internal void @zarith_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zarith_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarray(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @make_array(ptr noundef %0, i32 noundef 0, i32 noundef 770, ptr noundef nonnull @.str.138) #62, !range !107
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %17, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %6 = load i16, ptr %5, align 2, !tbaa !17
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %4
  %9 = load ptr, ptr %0, align 8, !tbaa !13
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi ptr [ %14, %10 ], [ %9, %8 ]
  %12 = phi i16 [ %13, %10 ], [ %6, %8 ]
  %13 = add i16 %12, -1
  %14 = getelementptr inbounds %struct.ref_s, ptr %11, i64 1
  %15 = getelementptr inbounds %struct.ref_s, ptr %11, i64 0, i32 1
  store i16 32, ptr %15, align 8, !tbaa !14
  %16 = icmp eq i16 %13, 0
  br i1 %16, label %17, label %10, !llvm.loop !181

17:                                               ; preds = %10, %4, %1
  %18 = phi i32 [ %2, %1 ], [ 0, %4 ], [ 0, %10 ]
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @make_array(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 20
  br i1 %8, label %9, label %22

9:                                                ; preds = %4
  %10 = load i64, ptr %0, align 8, !tbaa !13
  %11 = icmp ugt i64 %10, 268435454
  br i1 %11, label %22, label %12

12:                                               ; preds = %9
  %13 = trunc i64 %10 to i32
  %14 = tail call ptr @alloc(i32 noundef %13, i32 noundef 16, ptr noundef %3) #64
  %15 = icmp eq ptr %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  store ptr %14, ptr %0, align 8, !tbaa !13
  %17 = shl i32 %1, 2
  %18 = add nsw i32 %17, %2
  %19 = trunc i32 %18 to i16
  store i16 %19, ptr %5, align 8, !tbaa !14
  %20 = trunc i64 %10 to i16
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  store i16 %20, ptr %21, align 2, !tbaa !17
  br label %22

22:                                               ; preds = %16, %12, %9, %4
  %23 = phi i32 [ 0, %16 ], [ -20, %4 ], [ -15, %9 ], [ -25, %12 ]
  ret i32 %23
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zaload(ptr noundef %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %33 [
    i32 0, label %7
    i32 10, label %7
  ]

7:                                                ; preds = %1, %1
  %8 = and i16 %3, 512
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %33, label %10

10:                                               ; preds = %7
  %11 = load ptr, ptr %0, align 8, !tbaa.struct !101
  %12 = getelementptr inbounds i8, ptr %0, i64 10
  %13 = load i16, ptr %12, align 2, !tbaa.struct !182
  %14 = getelementptr inbounds i8, ptr %0, i64 12
  %15 = load i32, ptr %14, align 4, !tbaa.struct !183
  %16 = zext i16 %13 to i64
  %17 = load ptr, ptr @ostop, align 8, !tbaa !7
  %18 = ptrtoint ptr %17 to i64
  %19 = ptrtoint ptr %0 to i64
  %20 = sub i64 %18, %19
  %21 = ashr exact i64 %20, 4
  %22 = icmp slt i64 %21, %16
  br i1 %22, label %33, label %23

23:                                               ; preds = %10
  %24 = shl nuw nsw i64 %16, 4
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %0, ptr align 1 %11, i64 %24, i1 false)
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %16
  store ptr %25, ptr @osp, align 8, !tbaa !7
  %26 = load ptr, ptr @ostop, align 8, !tbaa !7
  %27 = icmp ugt ptr %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %33

29:                                               ; preds = %23
  store ptr %11, ptr %25, align 8, !tbaa.struct !101
  %30 = getelementptr inbounds i8, ptr %25, i64 8
  store i16 %3, ptr %30, align 8, !tbaa.struct !184
  %31 = getelementptr inbounds i8, ptr %25, i64 10
  store i16 %13, ptr %31, align 2, !tbaa.struct !182
  %32 = getelementptr inbounds i8, ptr %25, i64 12
  store i32 %15, ptr %32, align 4, !tbaa.struct !183
  br label %33

33:                                               ; preds = %29, %28, %10, %7, %1
  %34 = phi i32 [ -16, %28 ], [ 0, %29 ], [ -20, %1 ], [ -7, %7 ], [ -15, %10 ]
  ret i32 %34
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zastore(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %1
  %8 = and i32 %4, 256
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %27, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %12 = load i16, ptr %11, align 2, !tbaa !17
  %13 = zext i16 %12 to i64
  %14 = load ptr, ptr @osbot, align 8, !tbaa !7
  %15 = ptrtoint ptr %0 to i64
  %16 = ptrtoint ptr %14 to i64
  %17 = sub i64 %15, %16
  %18 = ashr exact i64 %17, 4
  %19 = icmp ult i64 %18, %13
  br i1 %19, label %27, label %20

20:                                               ; preds = %10
  %21 = load ptr, ptr %0, align 8, !tbaa !13
  %22 = sub nsw i64 0, %13
  %23 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %22
  %24 = tail call i32 (ptr, ptr, i64, ...) @refcpy(ptr noundef %21, ptr noundef nonnull %23, i64 noundef %13) #64
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %23, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %25 = load ptr, ptr @osp, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.ref_s, ptr %25, i64 %22
  store ptr %26, ptr @osp, align 8, !tbaa !7
  br label %27

27:                                               ; preds = %20, %10, %7, %1
  %28 = phi i32 [ 0, %20 ], [ -20, %1 ], [ -7, %7 ], [ -17, %10 ]
  ret i32 %28
}

; Function Attrs: nounwind optsize uwtable
define internal void @zarray_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zarray_op_init.my_defs) #64
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zexec(ptr noundef readonly %0) #30 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @esp, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 1
  %7 = load ptr, ptr @estop, align 8, !tbaa !7
  %8 = icmp ugt ptr %6, %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  store ptr %6, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %10 = load ptr, ptr @osp, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 -1
  store ptr %11, ptr @osp, align 8, !tbaa !7
  br label %12

12:                                               ; preds = %9, %4, %1
  %13 = phi i32 [ 1, %9 ], [ -17, %1 ], [ -5, %4 ]
  ret i32 %13
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zif(ptr nocapture noundef readonly %0) #30 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 4
  br i1 %5, label %6, label %19

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load i16, ptr %7, align 8, !tbaa !13
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr @esp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 1
  %13 = load ptr, ptr @estop, align 8, !tbaa !7
  %14 = icmp ugt ptr %12, %13
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  store ptr %12, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %16

16:                                               ; preds = %15, %6
  %17 = load ptr, ptr @osp, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -2
  store ptr %18, ptr @osp, align 8, !tbaa !7
  br label %19

19:                                               ; preds = %16, %10, %1
  %20 = phi i32 [ 1, %16 ], [ -20, %1 ], [ -5, %10 ]
  ret i32 %20
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zifelse(ptr nocapture noundef readonly %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 4
  br i1 %6, label %7, label %19

7:                                                ; preds = %1
  %8 = load ptr, ptr @esp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 1
  %10 = load ptr, ptr @estop, align 8, !tbaa !7
  %11 = icmp ugt ptr %9, %10
  br i1 %11, label %19, label %12

12:                                               ; preds = %7
  store ptr %9, ptr @esp, align 8, !tbaa !7
  %13 = load i16, ptr %2, align 8, !tbaa !13
  %14 = icmp ne i16 %13, 0
  %15 = sext i1 %14 to i64
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %15
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef nonnull align 8 dereferenceable(16) %16, i64 16, i1 false)
  %17 = load ptr, ptr @osp, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -3
  store ptr %18, ptr @osp, align 8, !tbaa !7
  br label %19

19:                                               ; preds = %12, %7, %1
  %20 = phi i32 [ 1, %12 ], [ -20, %1 ], [ -5, %7 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zfor(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = tail call i32 @num_params(ptr noundef nonnull %2, i32 noundef 3, ptr noundef null) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %50, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @esp, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.ref_s, ptr %6, i64 7
  %8 = load ptr, ptr @estop, align 8, !tbaa !7
  %9 = icmp ugt ptr %7, %8
  br i1 %9, label %50, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.ref_s, ptr %6, i64 1
  store i16 2, ptr %11, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %6, i64 1, i32 1
  store i16 33, ptr %12, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.ref_s, ptr %6, i64 2
  store ptr %13, ptr @esp, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %13, ptr noundef nonnull align 8 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !101
  %15 = getelementptr inbounds %struct.ref_s, ptr %6, i64 3
  store ptr %15, ptr @esp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %15, ptr noundef nonnull align 8 dereferenceable(16) %16, i64 16, i1 false), !tbaa.struct !101
  %17 = getelementptr inbounds %struct.ref_s, ptr %6, i64 4
  store ptr %17, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %17, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %18 = getelementptr inbounds %struct.ref_s, ptr %6, i64 5
  store ptr %18, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %19 = load ptr, ptr @osp, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 -4
  store ptr %20, ptr @osp, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -4
  %22 = icmp eq i32 %3, 7
  br i1 %22, label %23, label %25

23:                                               ; preds = %10
  %24 = tail call i32 @for_int_continue(ptr noundef nonnull %21) #62, !range !185
  br label %50

25:                                               ; preds = %10
  %26 = and i32 %3, 1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %25
  %29 = load i64, ptr %13, align 8, !tbaa !13
  %30 = sitofp i64 %29 to float
  store float %30, ptr %13, align 8, !tbaa !13
  %31 = getelementptr %struct.ref_s, ptr %6, i64 2, i32 1
  store i16 44, ptr %31, align 8, !tbaa !14
  br label %32

32:                                               ; preds = %28, %25
  %33 = and i32 %3, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.ref_s, ptr %6, i64 3
  %37 = load i64, ptr %36, align 8, !tbaa !13
  %38 = sitofp i64 %37 to float
  store float %38, ptr %36, align 8, !tbaa !13
  %39 = getelementptr %struct.ref_s, ptr %6, i64 3, i32 1
  store i16 44, ptr %39, align 8, !tbaa !14
  br label %40

40:                                               ; preds = %35, %32
  %41 = and i32 %3, 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.ref_s, ptr %6, i64 4
  %45 = load i64, ptr %44, align 8, !tbaa !13
  %46 = sitofp i64 %45 to float
  store float %46, ptr %44, align 8, !tbaa !13
  %47 = getelementptr %struct.ref_s, ptr %6, i64 4, i32 1
  store i16 44, ptr %47, align 8, !tbaa !14
  br label %48

48:                                               ; preds = %43, %40
  %49 = tail call i32 @for_real_continue(ptr noundef nonnull %21) #62, !range !185
  br label %50

50:                                               ; preds = %48, %23, %5, %1
  %51 = phi i32 [ %24, %23 ], [ %49, %48 ], [ %3, %1 ], [ -5, %5 ]
  ret i32 %51
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @for_int_continue(ptr noundef %0) #30 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -3
  %5 = load i64, ptr %4, align 8, !tbaa !13
  %6 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -2
  %7 = load i64, ptr %6, align 8, !tbaa !13
  %8 = icmp sgt i64 %7, -1
  %9 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -1
  %10 = load i64, ptr %9, align 8, !tbaa !13
  br i1 %8, label %11, label %13

11:                                               ; preds = %1
  %12 = icmp sgt i64 %5, %10
  br i1 %12, label %15, label %17

13:                                               ; preds = %1
  %14 = icmp slt i64 %5, %10
  br i1 %14, label %15, label %17

15:                                               ; preds = %13, %11
  %16 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -5
  store ptr %16, ptr @esp, align 8, !tbaa !7
  br label %29

17:                                               ; preds = %13, %11
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %18, ptr @osp, align 8, !tbaa !7
  %19 = load ptr, ptr @ostop, align 8, !tbaa !7
  %20 = icmp ugt ptr %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %29

22:                                               ; preds = %17
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !101
  %23 = add nsw i64 %7, %5
  store i64 %23, ptr %4, align 8, !tbaa !13
  %24 = load ptr, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %24, i64 16, i1 false), !tbaa.struct !101
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 1
  store ptr @for_int_continue, ptr %25, align 8, !tbaa !13
  %26 = getelementptr inbounds %struct.ref_s, ptr %24, i64 1, i32 1
  store i16 37, ptr %26, align 8, !tbaa !14
  %27 = getelementptr inbounds %struct.ref_s, ptr %24, i64 1, i32 2
  store i16 0, ptr %27, align 2, !tbaa !17
  %28 = getelementptr inbounds %struct.ref_s, ptr %24, i64 2
  store ptr %28, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %28, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %29

29:                                               ; preds = %22, %21, %15
  %30 = phi i32 [ 1, %15 ], [ -16, %21 ], [ 1, %22 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  ret i32 %30
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @for_real_continue(ptr noundef %0) #30 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -3
  %5 = load float, ptr %4, align 8, !tbaa !13
  %6 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -2
  %7 = load float, ptr %6, align 8, !tbaa !13
  %8 = fcmp ult float %7, 0.000000e+00
  %9 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -1
  %10 = load float, ptr %9, align 8, !tbaa !13
  br i1 %8, label %13, label %11

11:                                               ; preds = %1
  %12 = fcmp ogt float %5, %10
  br i1 %12, label %15, label %17

13:                                               ; preds = %1
  %14 = fcmp olt float %5, %10
  br i1 %14, label %15, label %17

15:                                               ; preds = %13, %11
  %16 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -5
  store ptr %16, ptr @esp, align 8, !tbaa !7
  br label %29

17:                                               ; preds = %13, %11
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %18, ptr @osp, align 8, !tbaa !7
  %19 = load ptr, ptr @ostop, align 8, !tbaa !7
  %20 = icmp ugt ptr %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %29

22:                                               ; preds = %17
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(16) %4, i64 16, i1 false), !tbaa.struct !101
  %23 = fadd float %5, %7
  store float %23, ptr %4, align 8, !tbaa !13
  %24 = load ptr, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %24, i64 16, i1 false), !tbaa.struct !101
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 1
  store ptr @for_real_continue, ptr %25, align 8, !tbaa !13
  %26 = getelementptr inbounds %struct.ref_s, ptr %24, i64 1, i32 1
  store i16 37, ptr %26, align 8, !tbaa !14
  %27 = getelementptr inbounds %struct.ref_s, ptr %24, i64 1, i32 2
  store i16 0, ptr %27, align 2, !tbaa !17
  %28 = getelementptr inbounds %struct.ref_s, ptr %24, i64 2
  store ptr %28, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %28, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %29

29:                                               ; preds = %22, %21, %15
  %30 = phi i32 [ 1, %15 ], [ -16, %21 ], [ 1, %22 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  ret i32 %30
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zrepeat(ptr nocapture noundef readonly %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 20
  br i1 %6, label %7, label %31

7:                                                ; preds = %1
  %8 = load i64, ptr %2, align 8, !tbaa !13
  %9 = icmp slt i64 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %7
  %11 = load ptr, ptr @esp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 5
  %13 = load ptr, ptr @estop, align 8, !tbaa !7
  %14 = icmp ugt ptr %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.ref_s, ptr %11, i64 1
  store i16 2, ptr %16, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %11, i64 1, i32 1
  store i16 33, ptr %17, align 8, !tbaa !14
  %18 = getelementptr inbounds %struct.ref_s, ptr %11, i64 2
  store ptr %18, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %19 = getelementptr inbounds %struct.ref_s, ptr %11, i64 3
  store ptr %19, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %19, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %20 = load ptr, ptr @osp, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.ref_s, ptr %20, i64 -2
  store ptr %21, ptr @osp, align 8, !tbaa !7
  %22 = load i64, ptr %18, align 8, !tbaa !13
  %23 = add nsw i64 %22, -1
  store i64 %23, ptr %18, align 8, !tbaa !13
  %24 = icmp sgt i64 %22, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %15
  %26 = getelementptr inbounds %struct.ref_s, ptr %11, i64 4
  store ptr @repeat_continue, ptr %26, align 8, !tbaa !13
  %27 = getelementptr inbounds %struct.ref_s, ptr %11, i64 4, i32 1
  store i16 37, ptr %27, align 8, !tbaa !14
  %28 = getelementptr inbounds %struct.ref_s, ptr %11, i64 4, i32 2
  store i16 0, ptr %28, align 2, !tbaa !17
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, ptr noundef nonnull align 8 dereferenceable(16) %19, i64 16, i1 false)
  br label %29

29:                                               ; preds = %25, %15
  %30 = phi ptr [ %12, %25 ], [ %11, %15 ]
  store ptr %30, ptr @esp, align 8
  br label %31

31:                                               ; preds = %29, %10, %7, %1
  %32 = phi i32 [ 1, %29 ], [ -20, %1 ], [ -15, %7 ], [ -5, %10 ]
  ret i32 %32
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @repeat_continue(ptr nocapture readnone %0) #30 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  %4 = getelementptr inbounds %struct.ref_s, ptr %3, i64 -1
  %5 = load i64, ptr %4, align 8, !tbaa !13
  %6 = add nsw i64 %5, -1
  store i64 %6, ptr %4, align 8, !tbaa !13
  %7 = icmp sgt i64 %5, 0
  %8 = load ptr, ptr @esp, align 8, !tbaa !7
  br i1 %7, label %9, label %14

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.ref_s, ptr %8, i64 1
  store ptr @repeat_continue, ptr %10, align 8, !tbaa !13
  %11 = getelementptr inbounds %struct.ref_s, ptr %8, i64 1, i32 1
  store i16 37, ptr %11, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.ref_s, ptr %8, i64 1, i32 2
  store i16 0, ptr %12, align 2, !tbaa !17
  %13 = getelementptr inbounds %struct.ref_s, ptr %8, i64 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %13, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %16

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -3
  br label %16

16:                                               ; preds = %14, %9
  %17 = phi ptr [ %13, %9 ], [ %15, %14 ]
  store ptr %17, ptr @esp, align 8
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  ret i32 1
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zloop(ptr noundef readonly %0) #30 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %18, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @esp, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 4
  %7 = load ptr, ptr @estop, align 8, !tbaa !7
  %8 = icmp ugt ptr %6, %7
  br i1 %8, label %18, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.ref_s, ptr %5, i64 1
  store i16 2, ptr %10, align 8, !tbaa !13
  %11 = getelementptr inbounds %struct.ref_s, ptr %5, i64 1, i32 1
  store i16 33, ptr %11, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.ref_s, ptr %5, i64 2
  store ptr %12, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %13 = load ptr, ptr @osp, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.ref_s, ptr %13, i64 -1
  store ptr %14, ptr @osp, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.ref_s, ptr %5, i64 3
  store ptr @loop_continue, ptr %15, align 8, !tbaa !13
  %16 = getelementptr inbounds %struct.ref_s, ptr %5, i64 3, i32 1
  store i16 37, ptr %16, align 8, !tbaa !14
  %17 = getelementptr inbounds %struct.ref_s, ptr %5, i64 3, i32 2
  store i16 0, ptr %17, align 2, !tbaa !17
  store ptr %6, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, ptr noundef nonnull align 8 dereferenceable(16) %12, i64 16, i1 false)
  br label %18

18:                                               ; preds = %9, %4, %1
  %19 = phi i32 [ 1, %9 ], [ -17, %1 ], [ -5, %4 ]
  ret i32 %19
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @loop_continue(ptr nocapture readnone %0) #30 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  %4 = getelementptr inbounds %struct.ref_s, ptr %3, i64 1
  store ptr @loop_continue, ptr %4, align 8, !tbaa !13
  %5 = getelementptr inbounds %struct.ref_s, ptr %3, i64 1, i32 1
  store i16 37, ptr %5, align 8, !tbaa !14
  %6 = getelementptr inbounds %struct.ref_s, ptr %3, i64 1, i32 2
  store i16 0, ptr %6, align 2, !tbaa !17
  %7 = getelementptr inbounds %struct.ref_s, ptr %3, i64 2
  store ptr %7, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  ret i32 1
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @zexit(ptr nocapture readnone %0) #34 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = icmp ult ptr %2, @estack
  br i1 %3, label %16, label %4

4:                                                ; preds = %14, %1
  %5 = phi ptr [ %10, %14 ], [ %2, %1 ]
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 32
  %10 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  br i1 %9, label %11, label %14

11:                                               ; preds = %4
  %12 = load i16, ptr %5, align 8, !tbaa !13
  switch i16 %12, label %14 [
    i16 2, label %13
    i16 3, label %16
  ]

13:                                               ; preds = %11
  %.lcssa = phi ptr [ %10, %11 ]
  store ptr %.lcssa, ptr @esp, align 8, !tbaa !7
  br label %16

14:                                               ; preds = %11, %4
  %15 = icmp ult ptr %10, @estack
  br i1 %15, label %16, label %4, !llvm.loop !186

16:                                               ; preds = %14, %13, %11, %1
  %17 = phi i32 [ 1, %13 ], [ -8, %1 ], [ -8, %14 ], [ -8, %11 ]
  ret i32 %17
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zstop(ptr noundef %0) #29 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = icmp ult ptr %2, @estack
  br i1 %3, label %24, label %4

4:                                                ; preds = %21, %1
  %5 = phi ptr [ %22, %21 ], [ %2, %1 ]
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 32
  br i1 %9, label %10, label %21

10:                                               ; preds = %4
  %11 = load i16, ptr %5, align 8, !tbaa !13
  %12 = icmp eq i16 %11, 3
  br i1 %12, label %13, label %21

13:                                               ; preds = %10
  %.lcssa = phi ptr [ %5, %10 ]
  %14 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 -1
  store ptr %14, ptr @esp, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %15, ptr @osp, align 8, !tbaa !7
  %16 = load ptr, ptr @ostop, align 8, !tbaa !7
  %17 = icmp ugt ptr %15, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %24

19:                                               ; preds = %13
  store i16 1, ptr %15, align 8, !tbaa !13
  %20 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %20, align 8, !tbaa !14
  br label %24

21:                                               ; preds = %10, %4
  %22 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  %23 = icmp ult ptr %22, @estack
  br i1 %23, label %24, label %4, !llvm.loop !187

24:                                               ; preds = %21, %19, %18, %1
  %25 = phi i32 [ -16, %18 ], [ 1, %19 ], [ -8, %1 ], [ -8, %21 ]
  ret i32 %25
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zstopped(ptr noundef readonly %0) #30 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %16, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @esp, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 3
  %7 = load ptr, ptr @estop, align 8, !tbaa !7
  %8 = icmp ugt ptr %6, %7
  br i1 %8, label %16, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.ref_s, ptr %5, i64 1
  store i16 3, ptr %10, align 8, !tbaa !13
  %11 = getelementptr inbounds %struct.ref_s, ptr %5, i64 1, i32 1
  store i16 33, ptr %11, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.ref_s, ptr %5, i64 2
  store i16 0, ptr %12, align 8, !tbaa !13
  %13 = getelementptr inbounds %struct.ref_s, ptr %5, i64 2, i32 1
  store i16 4, ptr %13, align 8, !tbaa !14
  store ptr %6, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %14 = load ptr, ptr @osp, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.ref_s, ptr %14, i64 -1
  store ptr %15, ptr @osp, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %9, %4, %1
  %17 = phi i32 [ 1, %9 ], [ -17, %1 ], [ -5, %4 ]
  ret i32 %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal i32 @zcountexecstack(ptr noundef %0) #35 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %13

6:                                                ; preds = %1
  %7 = load ptr, ptr @esp, align 8, !tbaa !7
  %8 = ptrtoint ptr %7 to i64
  %9 = sub i64 %8, ptrtoint (ptr @estack to i64)
  %10 = ashr exact i64 %9, 4
  %11 = add nsw i64 %10, 1
  store i64 %11, ptr %2, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %6, %5
  %14 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zexecstack(ptr nocapture noundef %0) #32 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = ptrtoint ptr %2 to i64
  %4 = sub i64 %3, ptrtoint (ptr @estack to i64)
  %5 = lshr exact i64 %4, 4
  %6 = trunc i64 %5 to i32
  %7 = add i32 %6, 1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %30

13:                                               ; preds = %1
  %14 = and i32 %10, 256
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %30, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %18 = load i16, ptr %17, align 2, !tbaa !17
  %19 = zext i16 %18 to i32
  %20 = icmp sgt i32 %7, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %16
  %22 = load ptr, ptr @estop, align 8, !tbaa !7
  %23 = icmp ugt ptr %22, @estack
  br i1 %23, label %24, label %30

24:                                               ; preds = %21
  %25 = trunc i32 %7 to i16
  store i16 %25, ptr %17, align 2, !tbaa !17
  %26 = or i16 %9, -32768
  store i16 %26, ptr %8, align 8, !tbaa !14
  %27 = getelementptr inbounds %struct.ref_s, ptr %2, i64 1
  store ptr %27, ptr @esp, align 8, !tbaa !7
  store ptr @continue_execstack, ptr %27, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.ref_s, ptr %2, i64 1, i32 1
  store i16 37, ptr %28, align 8, !tbaa !14
  %29 = getelementptr inbounds %struct.ref_s, ptr %2, i64 1, i32 2
  store i16 0, ptr %29, align 2, !tbaa !17
  br label %30

30:                                               ; preds = %24, %21, %16, %13, %1
  %31 = phi i32 [ 1, %24 ], [ -20, %1 ], [ -7, %13 ], [ -15, %16 ], [ -5, %21 ]
  ret i32 %31
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @continue_execstack(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %3 = load i16, ptr %2, align 2, !tbaa !17
  %4 = zext i16 %3 to i32
  %5 = load ptr, ptr %0, align 8, !tbaa !13
  %6 = tail call i32 (ptr, ptr, i32, ...) @refcpy(ptr noundef %5, ptr noundef nonnull @estack, i32 noundef %4) #64
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zquit(ptr nocapture readnone %0) #0 {
  %2 = tail call i32 (i32, ...) @gs_exit(i32 noundef 0) #64
  ret i32 undef
}

; Function Attrs: nounwind optsize uwtable
define internal void @zcontrol_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zcontrol_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdict(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  %8 = icmp slt i64 %7, 0
  %9 = load i32, ptr @dict_max_size, align 4
  %10 = zext i32 %9 to i64
  %11 = icmp sgt i64 %7, %10
  %12 = select i1 %8, i1 true, i1 %11
  br i1 %12, label %16, label %13

13:                                               ; preds = %6
  %14 = trunc i64 %7 to i32
  %15 = tail call i32 @dict_create(i32 noundef %14, ptr noundef nonnull %0) #64
  br label %16

16:                                               ; preds = %13, %6, %1
  %17 = phi i32 [ %15, %13 ], [ -20, %1 ], [ -15, %6 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmaxlength(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 8
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %8 = getelementptr inbounds %struct.ref_s, ptr %7, i64 0, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = and i16 %9, 512
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %6
  %13 = tail call i32 @dict_maxlength(ptr noundef nonnull %0) #64
  %14 = zext i32 %13 to i64
  store i64 %14, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %2, align 8, !tbaa !14
  br label %15

15:                                               ; preds = %12, %6, %1
  %16 = phi i32 [ 0, %12 ], [ -20, %1 ], [ -7, %6 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetmaxlength(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 8
  br i1 %6, label %7, label %35

7:                                                ; preds = %1
  %8 = tail call ptr @dict_access_ref(ptr noundef nonnull %2) #64
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = and i16 %10, 256
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %35, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = and i16 %15, 252
  %17 = icmp eq i16 %16, 20
  br i1 %17, label %18, label %35

18:                                               ; preds = %13
  %19 = load i64, ptr %0, align 8, !tbaa !13
  %20 = icmp slt i64 %19, 0
  %21 = load i32, ptr @dict_max_size, align 4
  %22 = zext i32 %21 to i64
  %23 = icmp sgt i64 %19, %22
  %24 = select i1 %20, i1 true, i1 %23
  br i1 %24, label %35, label %25

25:                                               ; preds = %18
  %26 = trunc i64 %19 to i32
  %27 = tail call i32 @dict_length(ptr noundef nonnull %2) #64
  %28 = icmp ugt i32 %27, %26
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = tail call i32 @dict_resize(ptr noundef nonnull %2, i32 noundef %26) #64
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load ptr, ptr @osp, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.ref_s, ptr %33, i64 -2
  store ptr %34, ptr @osp, align 8, !tbaa !7
  br label %35

35:                                               ; preds = %32, %29, %25, %18, %13, %7, %1
  %36 = phi i32 [ -20, %1 ], [ -7, %7 ], [ -20, %13 ], [ -15, %18 ], [ -2, %25 ], [ %30, %32 ], [ %30, %29 ]
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zbegin(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 8
  br i1 %5, label %6, label %20

6:                                                ; preds = %1
  %7 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %8 = getelementptr inbounds %struct.ref_s, ptr %7, i64 0, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = and i16 %9, 512
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %6
  %13 = load ptr, ptr @dsp, align 8, !tbaa !7
  %14 = load ptr, ptr @dstop, align 8, !tbaa !7
  %15 = icmp eq ptr %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.ref_s, ptr %13, i64 1
  store ptr %17, ptr @dsp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %17, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %18 = load ptr, ptr @osp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -1
  store ptr %19, ptr @osp, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %16, %12, %6, %1
  %21 = phi i32 [ 0, %16 ], [ -20, %1 ], [ -7, %6 ], [ -3, %12 ]
  ret i32 %21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @zend(ptr nocapture readnone %0) #36 {
  %2 = load ptr, ptr @dsp, align 8, !tbaa !7
  %3 = icmp eq ptr %2, getelementptr inbounds ([0 x %struct.ref_s], ptr @dstack, i64 0, i64 1)
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -1
  store ptr %5, ptr @dsp, align 8, !tbaa !7
  br label %6

6:                                                ; preds = %4, %1
  %7 = phi i32 [ 0, %4 ], [ -4, %1 ]
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdef(ptr noundef %0) #0 {
  %2 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 1), align 8, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %24, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %6 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 32
  br i1 %9, label %24, label %10

10:                                               ; preds = %4
  %11 = load ptr, ptr @dsp, align 8, !tbaa !7
  %12 = tail call ptr @dict_access_ref(ptr noundef %11) #64
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 0, i32 1
  %14 = load i16, ptr %13, align 8, !tbaa !14
  %15 = and i16 %14, 256
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %24, label %17

17:                                               ; preds = %10
  %18 = load ptr, ptr @dsp, align 8, !tbaa !7
  %19 = tail call i32 @dict_put(ptr noundef %18, ptr noundef nonnull %5, ptr noundef nonnull %0) #64
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = load ptr, ptr @osp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %22, i64 -2
  store ptr %23, ptr @osp, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %21, %17, %10, %4, %1
  %25 = phi i32 [ -17, %1 ], [ -20, %4 ], [ -7, %10 ], [ 0, %21 ], [ %19, %17 ]
  ret i32 %25
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zload(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %4 = icmp ugt ptr %3, %0
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 32
  br i1 %9, label %16, label %10

10:                                               ; preds = %5
  %11 = load ptr, ptr @dsp, align 8, !tbaa !7
  %12 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef %11, ptr noundef nonnull %0, ptr noundef nonnull %2) #64
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = load ptr, ptr %2, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !101
  br label %16

16:                                               ; preds = %14, %10, %5, %1
  %17 = phi i32 [ 0, %14 ], [ -17, %1 ], [ -20, %5 ], [ -21, %10 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zstore(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 1), align 8, !tbaa !7
  %4 = icmp ugt ptr %3, %0
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %7 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = and i16 %8, 252
  %10 = icmp eq i16 %9, 32
  br i1 %10, label %24, label %11

11:                                               ; preds = %5
  %12 = load ptr, ptr @dsp, align 8, !tbaa !7
  %13 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef %12, ptr noundef nonnull %6, ptr noundef nonnull %2) #64
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = load ptr, ptr @dsp, align 8, !tbaa !7
  %17 = call i32 @dict_put(ptr noundef %16, ptr noundef nonnull %6, ptr noundef nonnull %0) #64
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %24

19:                                               ; preds = %11
  %20 = load ptr, ptr %2, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %20, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %21

21:                                               ; preds = %19, %15
  %22 = load ptr, ptr @osp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %22, i64 -2
  store ptr %23, ptr @osp, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %21, %15, %5, %1
  %25 = phi i32 [ 0, %21 ], [ -17, %1 ], [ -20, %5 ], [ %17, %15 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %25
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zknown(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 8
  br i1 %7, label %8, label %27

8:                                                ; preds = %1
  %9 = tail call ptr @dict_access_ref(ptr noundef nonnull %3) #64
  %10 = getelementptr inbounds %struct.ref_s, ptr %9, i64 0, i32 1
  %11 = load i16, ptr %10, align 8, !tbaa !14
  %12 = and i16 %11, 512
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !14
  %17 = and i16 %16, 252
  %18 = icmp eq i16 %17, 32
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = call i32 @dict_lookup(ptr noundef nonnull %3, ptr noundef nonnull %3, ptr noundef nonnull %0, ptr noundef nonnull %2) #64
  %21 = icmp sgt i32 %20, 0
  %22 = zext i1 %21 to i16
  br label %23

23:                                               ; preds = %19, %14
  %24 = phi i16 [ %22, %19 ], [ 0, %14 ]
  store i16 %24, ptr %3, align 8, !tbaa !13
  store i16 4, ptr %4, align 8, !tbaa !14
  %25 = load ptr, ptr @osp, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.ref_s, ptr %25, i64 -1
  store ptr %26, ptr @osp, align 8, !tbaa !7
  br label %27

27:                                               ; preds = %23, %8, %1
  %28 = phi i32 [ 0, %23 ], [ -20, %1 ], [ -7, %8 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %28
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwhere(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = load ptr, ptr @dsp, align 8, !tbaa !7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %4 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %5 = icmp ugt ptr %4, %0
  br i1 %5, label %33, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = and i16 %8, 252
  %10 = icmp eq i16 %9, 32
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %7, align 8, !tbaa !14
  br label %33

12:                                               ; preds = %22, %6
  %13 = phi ptr [ %23, %22 ], [ %3, %6 ]
  %14 = call ptr @dict_access_ref(ptr noundef %13) #64
  %15 = getelementptr inbounds %struct.ref_s, ptr %14, i64 0, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !14
  %17 = and i16 %16, 512
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %33, label %19

19:                                               ; preds = %12
  %20 = call i32 @dict_lookup(ptr noundef %13, ptr noundef %13, ptr noundef %0, ptr noundef nonnull %2) #64
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.ref_s, ptr %13, i64 -1
  %24 = icmp ult ptr %23, @dstack
  br i1 %24, label %25, label %12

25:                                               ; preds = %22
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %7, align 8, !tbaa !14
  br label %33

26:                                               ; preds = %19
  %.lcssa = phi ptr [ %13, %19 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa, i64 16, i1 false), !tbaa.struct !101
  %27 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %27, ptr @osp, align 8, !tbaa !7
  %28 = load ptr, ptr @ostop, align 8, !tbaa !7
  %29 = icmp ugt ptr %27, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %33

31:                                               ; preds = %26
  store i16 1, ptr %27, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %32, align 8, !tbaa !14
  br label %33

33:                                               ; preds = %31, %30, %25, %12, %11, %1
  %34 = phi i32 [ 0, %11 ], [ -16, %30 ], [ 0, %31 ], [ 0, %25 ], [ -17, %1 ], [ -7, %12 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %34
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcopy_dict(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 8
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = tail call ptr @dict_access_ref(ptr noundef nonnull %2) #64
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = and i16 %10, 512
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %30, label %13

13:                                               ; preds = %7
  %14 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %15 = getelementptr inbounds %struct.ref_s, ptr %14, i64 0, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !14
  %17 = and i16 %16, 256
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %13
  %20 = tail call i32 @dict_length(ptr noundef nonnull %0) #64
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %30

22:                                               ; preds = %19
  %23 = tail call i32 @dict_maxlength(ptr noundef nonnull %0) #64
  %24 = tail call i32 @dict_maxlength(ptr noundef nonnull %2) #64
  %25 = icmp ult i32 %23, %24
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = tail call i32 @dict_copy(ptr noundef nonnull %2, ptr noundef nonnull %0) #64
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %28 = load ptr, ptr @osp, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.ref_s, ptr %28, i64 -1
  store ptr %29, ptr @osp, align 8, !tbaa !7
  br label %30

30:                                               ; preds = %26, %22, %19, %13, %7, %1
  %31 = phi i32 [ 0, %26 ], [ -20, %1 ], [ -7, %7 ], [ -7, %13 ], [ -15, %22 ], [ -15, %19 ]
  ret i32 %31
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zcurrentdict(ptr noundef %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %8

6:                                                ; preds = %1
  %7 = load ptr, ptr @dsp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %7, i64 16, i1 false), !tbaa.struct !101
  br label %8

8:                                                ; preds = %6, %5
  %9 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal i32 @zcountdictstack(ptr noundef %0) #35 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %13

6:                                                ; preds = %1
  %7 = load ptr, ptr @dsp, align 8, !tbaa !7
  %8 = ptrtoint ptr %7 to i64
  %9 = sub i64 %8, ptrtoint (ptr @dstack to i64)
  %10 = ashr exact i64 %9, 4
  %11 = add nsw i64 %10, 1
  store i64 %11, ptr %2, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %6, %5
  %14 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %14
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdictstack(ptr nocapture noundef %0) #0 {
  %2 = load ptr, ptr @dsp, align 8, !tbaa !7
  %3 = ptrtoint ptr %2 to i64
  %4 = sub i64 %3, ptrtoint (ptr @dstack to i64)
  %5 = lshr exact i64 %4, 4
  %6 = trunc i64 %5 to i32
  %7 = add i32 %6, 1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %26

13:                                               ; preds = %1
  %14 = and i32 %10, 256
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %18 = load i16, ptr %17, align 2, !tbaa !17
  %19 = zext i16 %18 to i32
  %20 = icmp sgt i32 %7, %19
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = trunc i32 %7 to i16
  store i16 %22, ptr %17, align 2, !tbaa !17
  %23 = or i16 %9, -32768
  store i16 %23, ptr %8, align 8, !tbaa !14
  %24 = load ptr, ptr %0, align 8, !tbaa !13
  %25 = tail call i32 (ptr, ptr, i32, ...) @refcpy(ptr noundef %24, ptr noundef nonnull @dstack, i32 noundef %7) #64
  br label %26

26:                                               ; preds = %21, %16, %13, %1
  %27 = phi i32 [ 0, %21 ], [ -20, %1 ], [ -7, %13 ], [ -15, %16 ]
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal void @zdict_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zdict_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @zfile_init() #0 {
  %1 = load ptr, ptr @std_files, align 16, !tbaa !188
  %2 = load ptr, ptr @stdin, align 8, !tbaa !7
  tail call void @sread_file(ptr noundef %1, ptr noundef %2, ptr noundef nonnull @stdin_buf, i32 noundef 1) #64
  %3 = load ptr, ptr getelementptr inbounds ([5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 1), align 16, !tbaa !188
  %4 = load ptr, ptr @stdout, align 8, !tbaa !7
  tail call void @swrite_file(ptr noundef %3, ptr noundef %4, ptr noundef nonnull @stdout_buf, i32 noundef 128) #64
  %5 = load ptr, ptr getelementptr inbounds ([5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 2), align 16, !tbaa !188
  %6 = load ptr, ptr @stderr, align 8, !tbaa !7
  tail call void @swrite_file(ptr noundef %5, ptr noundef %6, ptr noundef nonnull @stderr_buf, i32 noundef 128) #64
  br label %7

7:                                                ; preds = %21, %0
  %8 = phi i64 [ 0, %0 ], [ %22, %21 ]
  %9 = getelementptr inbounds [5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 %8, i32 2
  store i64 0, ptr %9, align 16, !tbaa !13
  %10 = getelementptr inbounds [5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 %8, i32 2, i32 1
  store i16 32, ptr %10, align 8, !tbaa !14
  %11 = getelementptr inbounds [5 x ptr], ptr @std_file_names, i64 0, i64 %8
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = tail call i32 (ptr, ptr, ptr, ...) @string_to_ref(ptr noundef %12, ptr noundef nonnull %9, ptr noundef nonnull @.str.5.177) #64
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %7
  %16 = load ptr, ptr @stderr, align 8, !tbaa !7
  %17 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %16, ptr noundef nonnull @.str.6.178, ptr noundef nonnull @.str.7.179, i32 noundef 149) #66
  %18 = load ptr, ptr @stderr, align 8, !tbaa !7
  %19 = tail call i64 @fwrite(ptr nonnull @.str.8.180, i64 28, i64 1, ptr %18) #67
  %20 = tail call i32 (i32, ...) @gs_exit(i32 noundef 1) #64
  br label %21

21:                                               ; preds = %15, %7
  %22 = add nuw nsw i64 %8, 1
  %23 = icmp eq i64 %22, 5
  br i1 %23, label %24, label %7, !llvm.loop !190

24:                                               ; preds = %21
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zfile(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = load ptr, ptr %2, align 8, !tbaa.struct !101
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa.struct !184
  %6 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %7 = load i16, ptr %6, align 2, !tbaa.struct !182
  %8 = and i16 %5, 252
  %9 = icmp eq i16 %8, 52
  br i1 %9, label %10, label %34

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 252
  %14 = icmp eq i16 %13, 52
  br i1 %14, label %15, label %34

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %17 = load i16, ptr %16, align 2, !tbaa !17
  %18 = icmp eq i16 %17, 1
  br i1 %18, label %19, label %34

19:                                               ; preds = %15
  %20 = load ptr, ptr %0, align 8, !tbaa !13
  %21 = load i8, ptr %20, align 1, !tbaa !13
  switch i8 %21, label %34 [
    i8 114, label %23
    i8 119, label %22
  ]

22:                                               ; preds = %19
  br label %23

23:                                               ; preds = %22, %19
  %24 = phi ptr [ @.str.10.186, %22 ], [ @.str.9.187, %19 ]
  %25 = tail call i32 @open_std_file(ptr noundef nonnull %2, ptr noundef nonnull %24, ptr noundef nonnull %2) #62, !range !191
  switch i32 %25, label %34 [
    i32 0, label %30
    i32 -22, label %26
  ]

26:                                               ; preds = %23
  %27 = zext i16 %7 to i32
  %28 = tail call i32 @file_open(ptr noundef %3, i32 noundef %27, ptr noundef nonnull %24, ptr noundef nonnull %2) #62
  %29 = icmp sgt i32 %28, -1
  br i1 %29, label %30, label %34

30:                                               ; preds = %26, %23
  %31 = phi i32 [ %25, %23 ], [ %28, %26 ]
  %32 = load ptr, ptr @osp, align 8, !tbaa !7
  %33 = getelementptr inbounds %struct.ref_s, ptr %32, i64 -1
  store ptr %33, ptr @osp, align 8, !tbaa !7
  br label %34

34:                                               ; preds = %30, %26, %23, %19, %15, %10, %1
  %35 = phi i32 [ -20, %1 ], [ -20, %10 ], [ -9, %15 ], [ -9, %19 ], [ %25, %23 ], [ %28, %26 ], [ %31, %30 ]
  ret i32 %35
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @open_std_file(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  br label %6

6:                                                ; preds = %40, %3
  %7 = phi i64 [ 0, %3 ], [ %41, %40 ]
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = load i16, ptr %5, align 2, !tbaa !17
  %10 = zext i16 %9 to i32
  %11 = getelementptr inbounds [5 x ptr], ptr @std_file_names, i64 0, i64 %7
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %12) #63
  %14 = tail call i32 (ptr, i32, ptr, i64, ...) @bytes_compare(ptr noundef %8, i32 noundef %10, ptr noundef %12, i64 noundef %13) #64
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %40

16:                                               ; preds = %6
  %.lcssa = phi i64 [ %7, %6 ]
  %17 = load i8, ptr %1, align 1, !tbaa !13
  %18 = icmp eq i8 %17, 114
  %19 = select i1 %18, i32 514, i32 258
  %20 = getelementptr inbounds [5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 %.lcssa
  %21 = getelementptr inbounds [5 x i32], ptr @std_file_attrs, i64 0, i64 %.lcssa
  %22 = load i32, ptr %21, align 4, !tbaa !11
  %23 = icmp eq i32 %19, %22
  br i1 %23, label %24, label %43

24:                                               ; preds = %16
  %25 = trunc i64 %.lcssa to i32
  store ptr %20, ptr %2, align 8, !tbaa !13
  %26 = trunc i32 %19 to i16
  %27 = or i16 %26, 12
  %28 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  store i16 %27, ptr %28, align 8, !tbaa !14
  %29 = add nsw i32 %25, -3
  %30 = icmp ult i32 %29, 2
  br i1 %30, label %31, label %43

31:                                               ; preds = %24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #65
  %32 = load ptr, ptr @std_files, align 16, !tbaa !188
  %33 = call i32 @zreadline_from(ptr noundef nonnull @lineedit_buf, i32 noundef 160, ptr noundef nonnull %4, ptr noundef %32) #62, !range !192
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds [5 x %struct.stream_s], ptr @std_file_streams, i64 0, i64 %.lcssa
  store ptr %36, ptr %20, align 16, !tbaa !188
  %37 = load i32, ptr %4, align 4, !tbaa !11
  tail call void @sread_string(ptr noundef nonnull %36, ptr noundef nonnull @lineedit_buf, i32 noundef %37) #64
  br label %38

38:                                               ; preds = %35, %31
  %39 = phi i32 [ 0, %35 ], [ %33, %31 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #65
  br label %43

40:                                               ; preds = %6
  %41 = add nuw nsw i64 %7, 1
  %42 = icmp eq i64 %41, 5
  br i1 %42, label %43, label %6, !llvm.loop !193

43:                                               ; preds = %40, %38, %24, %16
  %44 = phi i32 [ %39, %38 ], [ -7, %16 ], [ 0, %24 ], [ -22, %40 ]
  ret i32 %44
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @file_open(ptr noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = icmp ugt i32 %1, 511
  br i1 %5, label %44, label %6

6:                                                ; preds = %4
  %7 = tail call ptr @alloc(i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.42) #64
  %8 = icmp eq ptr %7, null
  br i1 %8, label %44, label %9

9:                                                ; preds = %6
  %10 = tail call ptr @alloc(i32 noundef 512, i32 noundef 1, ptr noundef nonnull @.str.43) #64
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  tail call void @alloc_free(ptr noundef nonnull %7, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.42) #64
  br label %44

13:                                               ; preds = %9
  %14 = tail call ptr @alloc(i32 noundef 1, i32 noundef 120, ptr noundef nonnull @.str.44) #64
  %15 = icmp eq ptr %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  tail call void @alloc_free(ptr noundef nonnull %10, i32 noundef 512, i32 noundef 1, ptr noundef nonnull @.str.43) #64
  tail call void @alloc_free(ptr noundef nonnull %7, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.42) #64
  br label %44

17:                                               ; preds = %13
  %18 = icmp eq ptr %0, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %17
  %20 = zext i32 %1 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %10, ptr nonnull align 1 %0, i64 %20, i1 false)
  %21 = getelementptr inbounds i8, ptr %10, i64 %20
  store i8 0, ptr %21, align 1, !tbaa !13
  %22 = tail call noalias ptr @fopen(ptr noundef nonnull %10, ptr noundef %2) #62
  %23 = icmp eq ptr %22, null
  br i1 %23, label %33, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.file_entry_s, ptr %7, i64 0, i32 2
  %26 = tail call i32 (ptr, ptr, ptr, ...) @string_to_ref(ptr noundef nonnull %10, ptr noundef nonnull %25, ptr noundef nonnull @.str.45) #64
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = load i8, ptr %2, align 1, !tbaa !13
  %30 = icmp eq i8 %29, 114
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  tail call void @sread_file(ptr noundef nonnull %14, ptr noundef nonnull %22, ptr noundef nonnull %10, i32 noundef 512) #64
  br label %38

32:                                               ; preds = %28
  tail call void @swrite_file(ptr noundef nonnull %14, ptr noundef nonnull %22, ptr noundef nonnull %10, i32 noundef 512) #64
  br label %38

33:                                               ; preds = %24, %19
  %34 = phi i32 [ -22, %19 ], [ %26, %24 ]
  tail call void @alloc_free(ptr noundef nonnull %14, i32 noundef 1, i32 noundef 120, ptr noundef nonnull @.str.44) #64
  tail call void @alloc_free(ptr noundef nonnull %10, i32 noundef 512, i32 noundef 1, ptr noundef nonnull @.str.43) #64
  tail call void @alloc_free(ptr noundef nonnull %7, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.42) #64
  br label %44

35:                                               ; preds = %17
  %36 = getelementptr inbounds %struct.stream_s, ptr %14, i64 0, i32 2
  store ptr %10, ptr %36, align 8, !tbaa !127
  %37 = getelementptr inbounds %struct.stream_s, ptr %14, i64 0, i32 3
  store i32 512, ptr %37, align 8, !tbaa !128
  br label %38

38:                                               ; preds = %35, %32, %31
  store ptr %14, ptr %7, align 8, !tbaa !188
  %39 = getelementptr inbounds %struct.file_entry_s, ptr %7, i64 0, i32 1
  store i32 1, ptr %39, align 8, !tbaa !194
  store ptr %7, ptr %3, align 8, !tbaa !13
  %40 = load i8, ptr %2, align 1, !tbaa !13
  %41 = icmp eq i8 %40, 114
  %42 = select i1 %41, i16 526, i16 270
  %43 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  store i16 %42, ptr %43, align 8, !tbaa !14
  br label %44

44:                                               ; preds = %38, %33, %16, %12, %6, %4
  %45 = phi i32 [ -25, %12 ], [ -25, %16 ], [ 0, %38 ], [ %34, %33 ], [ -13, %4 ], [ -25, %6 ]
  ret i32 %45
}

; Function Attrs: nofree nounwind optsize
declare noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @zreadline_from(ptr nocapture noundef writeonly %0, i32 noundef %1, ptr nocapture noundef writeonly %2, ptr noundef %3) #0 {
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 1
  %8 = getelementptr inbounds %struct.stream_s, ptr %3, i64 0, i32 7
  br label %9

9:                                                ; preds = %40, %6
  %10 = phi i32 [ 0, %6 ], [ %43, %40 ]
  %11 = phi ptr [ %0, %6 ], [ %42, %40 ]
  %12 = load ptr, ptr %3, align 8, !tbaa !124
  %13 = load ptr, ptr %7, align 8, !tbaa !142
  %14 = icmp ult ptr %12, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %9
  %16 = getelementptr inbounds i8, ptr %12, i64 1
  store ptr %16, ptr %3, align 8, !tbaa !124
  %17 = load i8, ptr %16, align 1, !tbaa !13
  %18 = zext i8 %17 to i32
  br label %22

19:                                               ; preds = %9
  %20 = load ptr, ptr %8, align 8, !tbaa !143
  %21 = tail call i32 %20(ptr noundef nonnull %3) #64
  br label %22

22:                                               ; preds = %19, %15
  %23 = phi i32 [ %18, %15 ], [ %21, %19 ]
  switch i32 %23, label %40 [
    i32 13, label %24
    i32 10, label %46
    i32 -1, label %45
  ]

24:                                               ; preds = %22
  %.lcssa = phi i32 [ %10, %22 ]
  %25 = load ptr, ptr %3, align 8, !tbaa !124
  %26 = load ptr, ptr %7, align 8, !tbaa !142
  %27 = icmp ult ptr %25, %26
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, ptr %25, i64 1
  store ptr %29, ptr %3, align 8, !tbaa !124
  %30 = load i8, ptr %29, align 1, !tbaa !13
  %31 = zext i8 %30 to i32
  br label %35

32:                                               ; preds = %24
  %33 = load ptr, ptr %8, align 8, !tbaa !143
  %34 = tail call i32 %33(ptr noundef nonnull %3) #64
  br label %35

35:                                               ; preds = %32, %28
  %36 = phi i32 [ %31, %28 ], [ %34, %32 ]
  switch i32 %36, label %37 [
    i32 -1, label %46
    i32 10, label %46
  ]

37:                                               ; preds = %35
  %38 = load ptr, ptr %3, align 8, !tbaa !124
  %39 = getelementptr inbounds i8, ptr %38, i64 -1
  store ptr %39, ptr %3, align 8, !tbaa !124
  br label %46

40:                                               ; preds = %22
  %41 = trunc i32 %23 to i8
  %42 = getelementptr inbounds i8, ptr %11, i64 1
  store i8 %41, ptr %11, align 1, !tbaa !13
  %43 = add nuw i32 %10, 1
  %44 = icmp eq i32 %43, %1
  br i1 %44, label %48, label %9, !llvm.loop !195

45:                                               ; preds = %22
  %.lcssa2 = phi i32 [ %10, %22 ]
  br label %46

46:                                               ; preds = %45, %37, %35, %35, %22
  %.lcssa1 = phi i32 [ %.lcssa2, %45 ], [ %.lcssa, %37 ], [ %.lcssa, %35 ], [ %.lcssa, %35 ], [ %10, %22 ]
  %47 = phi i32 [ 1, %35 ], [ 1, %35 ], [ 1, %37 ], [ 0, %45 ], [ 1, %22 ]
  store i32 %.lcssa1, ptr %2, align 4, !tbaa !11
  br label %48

48:                                               ; preds = %46, %40, %4
  %49 = phi i32 [ -15, %4 ], [ %47, %46 ], [ -15, %40 ]
  ret i32 %49
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zclosefile(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %35

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !188
  %9 = icmp eq ptr %8, null
  br i1 %9, label %35, label %10

10:                                               ; preds = %6
  %11 = tail call i32 @file_close(ptr noundef nonnull %0, ptr noundef nonnull %8) #62, !range !196
  %12 = icmp sgt i32 %11, -1
  br i1 %12, label %13, label %35

13:                                               ; preds = %10
  %14 = load ptr, ptr @esp, align 8, !tbaa !7
  %15 = icmp ult ptr %14, @estack
  br i1 %15, label %32, label %16

16:                                               ; preds = %22, %13
  %17 = phi ptr [ %23, %22 ], [ %14, %13 ]
  %18 = getelementptr inbounds %struct.ref_s, ptr %17, i64 0, i32 1
  %19 = load i16, ptr %18, align 8, !tbaa !14
  %20 = and i16 %19, 253
  %21 = icmp eq i16 %20, 13
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  %24 = icmp ult ptr %23, @estack
  br i1 %24, label %32, label %16, !llvm.loop !197

25:                                               ; preds = %16
  %.lcssa = phi ptr [ %17, %16 ]
  %26 = load ptr, ptr %.lcssa, align 8, !tbaa !13
  %27 = load ptr, ptr %0, align 8, !tbaa !13
  %28 = icmp eq ptr %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 0, i32 1
  store ptr null, ptr %.lcssa, align 8, !tbaa !13
  store i16 3, ptr %30, align 8, !tbaa !14
  %31 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 0, i32 2
  store i16 0, ptr %31, align 2, !tbaa !17
  br label %32

32:                                               ; preds = %29, %25, %22, %13
  %33 = load ptr, ptr @osp, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.ref_s, ptr %33, i64 -1
  store ptr %34, ptr @osp, align 8, !tbaa !7
  br label %35

35:                                               ; preds = %32, %10, %6, %1
  %36 = phi i32 [ -7, %6 ], [ -20, %1 ], [ %11, %32 ], [ %11, %10 ]
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @file_close(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.stream_s, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !127
  %6 = getelementptr inbounds %struct.file_entry_s, ptr %3, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !194
  switch i32 %7, label %12 [
    i32 0, label %19
    i32 -1, label %8
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.stream_s, ptr %1, i64 0, i32 7, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !198
  %11 = tail call i32 %10(ptr noundef nonnull %1) #64
  br label %18

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.stream_s, ptr %1, i64 0, i32 7, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !198
  %15 = tail call i32 %14(ptr noundef nonnull %1) #64
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  tail call void @alloc_free(ptr noundef nonnull %1, i32 noundef 1, i32 noundef 120, ptr noundef nonnull @.str.46) #64
  tail call void @alloc_free(ptr noundef %5, i32 noundef 512, i32 noundef 1, ptr noundef nonnull @.str.47) #64
  br label %18

18:                                               ; preds = %17, %8
  store ptr null, ptr %3, align 8, !tbaa !188
  br label %19

19:                                               ; preds = %18, %12, %2
  %20 = phi i32 [ 0, %18 ], [ -7, %2 ], [ -12, %12 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zread(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %41

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !188
  %9 = icmp eq ptr %8, null
  br i1 %9, label %41, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 4
  %12 = load i8, ptr %11, align 4, !tbaa !169
  %13 = icmp ne i8 %12, 0
  %14 = and i16 %3, 512
  %15 = icmp eq i16 %14, 0
  %16 = or i1 %15, %13
  br i1 %16, label %41, label %17

17:                                               ; preds = %10
  %18 = load ptr, ptr %8, align 8, !tbaa !124
  %19 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !142
  %21 = icmp ult ptr %18, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = getelementptr inbounds i8, ptr %18, i64 1
  store ptr %23, ptr %8, align 8, !tbaa !124
  %24 = load i8, ptr %23, align 1, !tbaa !13
  %25 = zext i8 %24 to i32
  br label %32

26:                                               ; preds = %17
  %27 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 7
  %28 = load ptr, ptr %27, align 8, !tbaa !143
  %29 = tail call i32 %28(ptr noundef nonnull %8) #64
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %2, align 8, !tbaa !14
  br label %41

32:                                               ; preds = %26, %22
  %33 = phi i32 [ %25, %22 ], [ %29, %26 ]
  %34 = sext i32 %33 to i64
  store i64 %34, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %2, align 8, !tbaa !14
  %35 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %35, ptr @osp, align 8, !tbaa !7
  %36 = load ptr, ptr @ostop, align 8, !tbaa !7
  %37 = icmp ugt ptr %35, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %32
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %41

39:                                               ; preds = %32
  store i16 1, ptr %35, align 8, !tbaa !13
  %40 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %40, align 8, !tbaa !14
  br label %41

41:                                               ; preds = %39, %38, %31, %10, %6, %1
  %42 = phi i32 [ -16, %38 ], [ -20, %1 ], [ -7, %6 ], [ -7, %10 ], [ 0, %39 ], [ 0, %31 ]
  ret i32 %42
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zunread(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %30

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %30, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %17 = load i16, ptr %16, align 8, !tbaa !14
  %18 = and i16 %17, 252
  %19 = icmp eq i16 %18, 20
  br i1 %19, label %20, label %30

20:                                               ; preds = %15
  %21 = load i64, ptr %0, align 8, !tbaa !13
  %22 = icmp ugt i64 %21, 255
  br i1 %22, label %30, label %23

23:                                               ; preds = %20
  %24 = trunc i64 %21 to i8
  %25 = tail call i32 @sungetc(ptr noundef nonnull %9, i8 noundef zeroext %24) #64
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = load ptr, ptr @osp, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.ref_s, ptr %28, i64 -2
  store ptr %29, ptr @osp, align 8, !tbaa !7
  br label %30

30:                                               ; preds = %27, %23, %20, %15, %11, %6, %1
  %31 = phi i32 [ 0, %27 ], [ -20, %1 ], [ -7, %6 ], [ -7, %11 ], [ -20, %15 ], [ -15, %20 ], [ -12, %23 ]
  ret i32 %31
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwrite(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %42

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %42, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp eq i8 %13, 0
  %15 = and i16 %3, 256
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %42, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = and i16 %20, 252
  %22 = icmp eq i16 %21, 20
  br i1 %22, label %23, label %42

23:                                               ; preds = %18
  %24 = load i64, ptr %0, align 8, !tbaa !13
  %25 = icmp ugt i64 %24, 255
  br i1 %25, label %42, label %26

26:                                               ; preds = %23
  %27 = load ptr, ptr %9, align 8, !tbaa !124
  %28 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !142
  %30 = icmp ult ptr %27, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %26
  %32 = trunc i64 %24 to i8
  %33 = getelementptr inbounds i8, ptr %27, i64 1
  store ptr %33, ptr %9, align 8, !tbaa !124
  store i8 %32, ptr %33, align 1, !tbaa !13
  br label %39

34:                                               ; preds = %26
  %35 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 7, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !171
  %37 = trunc i64 %24 to i8
  %38 = tail call i32 %36(ptr noundef nonnull %9, i8 noundef zeroext %37) #64
  br label %39

39:                                               ; preds = %34, %31
  %40 = load ptr, ptr @osp, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.ref_s, ptr %40, i64 -2
  store ptr %41, ptr @osp, align 8, !tbaa !7
  br label %42

42:                                               ; preds = %39, %23, %18, %11, %6, %1
  %43 = phi i32 [ 0, %39 ], [ -20, %1 ], [ -7, %6 ], [ -7, %11 ], [ -20, %18 ], [ -15, %23 ]
  ret i32 %43
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zreadhexstring(ptr noundef %0) #0 {
  %2 = alloca %struct.stream_s, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %2) #65
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #65
  store i32 -1, ptr %3, align 4, !tbaa !11
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #65
  %6 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = lshr i16 %7, 2
  %9 = and i16 %8, 63
  %10 = zext i16 %9 to i32
  switch i32 %10, label %80 [
    i32 3, label %11
    i32 13, label %22
  ]

11:                                               ; preds = %1
  %12 = load ptr, ptr %5, align 8, !tbaa !13
  %13 = load ptr, ptr %12, align 8, !tbaa !188
  %14 = icmp eq ptr %13, null
  br i1 %14, label %80, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.stream_s, ptr %13, i64 0, i32 4
  %17 = load i8, ptr %16, align 4, !tbaa !169
  %18 = icmp ne i8 %17, 0
  %19 = and i16 %7, 512
  %20 = icmp eq i16 %19, 0
  %21 = or i1 %20, %18
  br i1 %21, label %80, label %27

22:                                               ; preds = %1
  %23 = load ptr, ptr %5, align 8, !tbaa !13
  %24 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %25 = load i16, ptr %24, align 2, !tbaa !17
  %26 = zext i16 %25 to i32
  call void @sread_string(ptr noundef nonnull %2, ptr noundef %23, i32 noundef %26) #64
  br label %27

27:                                               ; preds = %22, %15
  %28 = phi ptr [ %2, %22 ], [ %13, %15 ]
  %29 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %30 = load i16, ptr %29, align 8, !tbaa !14
  %31 = zext i16 %30 to i32
  %32 = and i32 %31, 252
  %33 = icmp eq i32 %32, 52
  br i1 %33, label %34, label %80

34:                                               ; preds = %27
  %35 = and i32 %31, 256
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %80, label %37

37:                                               ; preds = %34
  %38 = load ptr, ptr %0, align 8, !tbaa !13
  %39 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %40 = load i16, ptr %39, align 2, !tbaa !17
  %41 = zext i16 %40 to i32
  %42 = call i32 @sreadhex(ptr noundef nonnull %28, ptr noundef %38, i32 noundef %41, ptr noundef nonnull %4, ptr noundef nonnull %3) #64
  switch i32 %42, label %80 [
    i32 1, label %43
    i32 0, label %48
  ]

43:                                               ; preds = %37
  %44 = load i32, ptr %4, align 4, !tbaa !11
  %45 = trunc i32 %44 to i16
  store i16 %45, ptr %39, align 2, !tbaa !17
  %46 = load i16, ptr %29, align 8, !tbaa !14
  %47 = or i16 %46, -32768
  store i16 %47, ptr %29, align 8, !tbaa !14
  br label %48

48:                                               ; preds = %43, %37
  %49 = icmp eq ptr %28, %2
  br i1 %49, label %50, label %74

50:                                               ; preds = %48
  %51 = load ptr, ptr %2, align 8, !tbaa !124
  %52 = getelementptr inbounds i8, ptr %51, i64 1
  %53 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 2
  %54 = load ptr, ptr %53, align 8, !tbaa !127
  %55 = ptrtoint ptr %52 to i64
  %56 = ptrtoint ptr %54 to i64
  %57 = sub i64 %55, %56
  %58 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 6
  %59 = load i64, ptr %58, align 8, !tbaa !167
  %60 = add nsw i64 %57, %59
  %61 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %62 = load i16, ptr %61, align 2, !tbaa !17
  %63 = trunc i64 %60 to i16
  %64 = sub i16 %62, %63
  store i16 %64, ptr %61, align 2, !tbaa !17
  %65 = load ptr, ptr %5, align 8, !tbaa !13
  %66 = and i64 %60, 4294967295
  %67 = getelementptr inbounds i8, ptr %65, i64 %66
  store ptr %67, ptr %5, align 8, !tbaa !13
  %68 = load i16, ptr %6, align 8, !tbaa !14
  %69 = or i16 %68, -32768
  store i16 %69, ptr %6, align 8, !tbaa !14
  %70 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  %71 = load ptr, ptr @ostop, align 8, !tbaa !7
  %72 = icmp ugt ptr %70, %71
  %73 = select i1 %72, ptr %0, ptr %70
  store ptr %73, ptr @osp, align 8
  br i1 %72, label %80, label %75

74:                                               ; preds = %48
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %75

75:                                               ; preds = %74, %50
  %76 = phi ptr [ %70, %50 ], [ %0, %74 ]
  %77 = trunc i32 %42 to i16
  %78 = sub nuw nsw i16 1, %77
  store i16 %78, ptr %76, align 8, !tbaa !13
  %79 = getelementptr inbounds %struct.ref_s, ptr %76, i64 0, i32 1
  store i16 4, ptr %79, align 8, !tbaa !14
  br label %80

80:                                               ; preds = %75, %50, %37, %34, %27, %15, %11, %1
  %81 = phi i32 [ 0, %75 ], [ -16, %50 ], [ -20, %1 ], [ -7, %11 ], [ -7, %15 ], [ -20, %27 ], [ -7, %34 ], [ -12, %37 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %2) #65
  ret i32 %81
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwritehexstring(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %80

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %80, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp eq i8 %13, 0
  %15 = and i16 %3, 256
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %80, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 252
  %23 = icmp eq i32 %22, 52
  br i1 %23, label %24, label %80

24:                                               ; preds = %18
  %25 = and i32 %21, 512
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %80, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %29 = load i16, ptr %28, align 2, !tbaa !17
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %77, label %31

31:                                               ; preds = %27
  %32 = zext i16 %29 to i32
  %33 = load ptr, ptr %0, align 8, !tbaa !13
  %34 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 1
  %35 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 7, i32 1
  br label %36

36:                                               ; preds = %75, %31
  %37 = phi i32 [ %32, %31 ], [ %39, %75 ]
  %38 = phi ptr [ %33, %31 ], [ %40, %75 ]
  %39 = add nsw i32 %37, -1
  %40 = getelementptr inbounds i8, ptr %38, i64 1
  %41 = load i8, ptr %38, align 1, !tbaa !13
  %42 = load ptr, ptr %9, align 8, !tbaa !124
  %43 = load ptr, ptr %34, align 8, !tbaa !142
  %44 = icmp ult ptr %42, %43
  br i1 %44, label %45, label %51

45:                                               ; preds = %36
  %46 = lshr i8 %41, 4
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds i8, ptr @.str.11.190, i64 %47
  %49 = load i8, ptr %48, align 1, !tbaa !13
  %50 = getelementptr inbounds i8, ptr %42, i64 1
  store ptr %50, ptr %9, align 8, !tbaa !124
  store i8 %49, ptr %50, align 1, !tbaa !13
  br label %58

51:                                               ; preds = %36
  %52 = load ptr, ptr %35, align 8, !tbaa !171
  %53 = lshr i8 %41, 4
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds i8, ptr @.str.11.190, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !13
  %57 = tail call i32 %52(ptr noundef nonnull %9, i8 noundef zeroext %56) #64
  br label %58

58:                                               ; preds = %51, %45
  %59 = load ptr, ptr %9, align 8, !tbaa !124
  %60 = load ptr, ptr %34, align 8, !tbaa !142
  %61 = icmp ult ptr %59, %60
  br i1 %61, label %62, label %68

62:                                               ; preds = %58
  %63 = and i8 %41, 15
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds i8, ptr @.str.11.190, i64 %64
  %66 = load i8, ptr %65, align 1, !tbaa !13
  %67 = getelementptr inbounds i8, ptr %59, i64 1
  store ptr %67, ptr %9, align 8, !tbaa !124
  store i8 %66, ptr %67, align 1, !tbaa !13
  br label %75

68:                                               ; preds = %58
  %69 = load ptr, ptr %35, align 8, !tbaa !171
  %70 = and i8 %41, 15
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds i8, ptr @.str.11.190, i64 %71
  %73 = load i8, ptr %72, align 1, !tbaa !13
  %74 = tail call i32 %69(ptr noundef nonnull %9, i8 noundef zeroext %73) #64
  br label %75

75:                                               ; preds = %68, %62
  %76 = icmp eq i32 %39, 0
  br i1 %76, label %77, label %36, !llvm.loop !199

77:                                               ; preds = %75, %27
  %78 = load ptr, ptr @osp, align 8, !tbaa !7
  %79 = getelementptr inbounds %struct.ref_s, ptr %78, i64 -2
  store ptr %79, ptr @osp, align 8, !tbaa !7
  br label %80

80:                                               ; preds = %77, %24, %18, %11, %6, %1
  %81 = phi i32 [ 0, %77 ], [ -20, %1 ], [ -7, %6 ], [ -7, %11 ], [ -20, %18 ], [ -7, %24 ]
  ret i32 %81
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zreadstring(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 12
  br i1 %6, label %7, label %38

7:                                                ; preds = %1
  %8 = load ptr, ptr %2, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %38, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp ne i8 %13, 0
  %15 = and i16 %4, 512
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %38, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 252
  %23 = icmp eq i32 %22, 52
  br i1 %23, label %24, label %38

24:                                               ; preds = %18
  %25 = and i32 %21, 256
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %38, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %29 = load i16, ptr %28, align 2, !tbaa !17
  %30 = zext i16 %29 to i32
  %31 = load ptr, ptr %0, align 8, !tbaa !13
  %32 = tail call i32 @sgets(ptr noundef nonnull %9, ptr noundef %31, i32 noundef %30) #64
  %33 = trunc i32 %32 to i16
  store i16 %33, ptr %28, align 2, !tbaa !17
  %34 = load i16, ptr %19, align 8, !tbaa !14
  %35 = or i16 %34, -32768
  store i16 %35, ptr %19, align 8, !tbaa !14
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %36 = icmp eq i32 %32, %30
  %37 = zext i1 %36 to i16
  store i16 %37, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %19, align 8, !tbaa !14
  br label %38

38:                                               ; preds = %27, %24, %18, %11, %7, %1
  %39 = phi i32 [ 0, %27 ], [ -20, %1 ], [ -7, %7 ], [ -7, %11 ], [ -20, %18 ], [ -7, %24 ]
  ret i32 %39
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwritestring(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %24

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %24, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp eq i8 %13, 0
  %15 = and i16 %3, 256
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %24, label %18

18:                                               ; preds = %11
  %19 = tail call i32 @write_string(ptr noundef nonnull %0, ptr noundef nonnull %9) #62, !range !200
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = load ptr, ptr @osp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %22, i64 -2
  store ptr %23, ptr @osp, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %21, %18, %11, %6, %1
  %25 = phi i32 [ -20, %1 ], [ -7, %6 ], [ -7, %11 ], [ 0, %21 ], [ %19, %18 ]
  ret i32 %25
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @write_string(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = zext i16 %4 to i32
  %6 = and i32 %5, 252
  %7 = icmp eq i32 %6, 52
  br i1 %7, label %8, label %19

8:                                                ; preds = %2
  %9 = and i32 %5, 512
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %13 = load i16, ptr %12, align 2, !tbaa !17
  %14 = zext i16 %13 to i32
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = tail call i32 @sputs(ptr noundef %1, ptr noundef %15, i32 noundef %14) #64
  %17 = icmp eq i32 %16, %14
  %18 = select i1 %17, i32 0, i32 -12
  br label %19

19:                                               ; preds = %11, %8, %2
  %20 = phi i32 [ -20, %2 ], [ -7, %8 ], [ %18, %11 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zreadline(ptr nocapture noundef %0) #0 {
  %2 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 12
  br i1 %7, label %8, label %41

8:                                                ; preds = %1
  %9 = load ptr, ptr %3, align 8, !tbaa !13
  %10 = load ptr, ptr %9, align 8, !tbaa !188
  %11 = icmp eq ptr %10, null
  br i1 %11, label %41, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.stream_s, ptr %10, i64 0, i32 4
  %14 = load i8, ptr %13, align 4, !tbaa !169
  %15 = icmp ne i8 %14, 0
  %16 = and i16 %5, 512
  %17 = icmp eq i16 %16, 0
  %18 = or i1 %17, %15
  br i1 %18, label %41, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %21 = load i16, ptr %20, align 8, !tbaa !14
  %22 = zext i16 %21 to i32
  %23 = and i32 %22, 252
  %24 = icmp eq i32 %23, 52
  br i1 %24, label %25, label %41

25:                                               ; preds = %19
  %26 = and i32 %22, 256
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %25
  %29 = load ptr, ptr %0, align 8, !tbaa !13
  %30 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %31 = load i16, ptr %30, align 2, !tbaa !17
  %32 = zext i16 %31 to i32
  %33 = call i32 @zreadline_from(ptr noundef %29, i32 noundef %32, ptr noundef nonnull %2, ptr noundef nonnull %10) #62, !range !192
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %28
  %36 = load i32, ptr %2, align 4, !tbaa !11
  %37 = trunc i32 %36 to i16
  store i16 %37, ptr %30, align 2, !tbaa !17
  %38 = load i16, ptr %20, align 8, !tbaa !14
  %39 = or i16 %38, -32768
  store i16 %39, ptr %20, align 8, !tbaa !14
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %40 = trunc i32 %33 to i16
  store i16 %40, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %20, align 8, !tbaa !14
  br label %41

41:                                               ; preds = %35, %28, %25, %19, %12, %8, %1
  %42 = phi i32 [ 0, %35 ], [ -20, %1 ], [ -7, %8 ], [ -7, %12 ], [ -20, %19 ], [ -7, %25 ], [ %33, %28 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %42
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztoken_file(ptr noundef %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 12
  br i1 %6, label %7, label %28

7:                                                ; preds = %1
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp ne i8 %13, 0
  %15 = and i16 %4, 512
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %28, label %18

18:                                               ; preds = %11
  %19 = call i32 (ptr, i32, ptr, ...) @scan_token(ptr noundef nonnull %9, i32 noundef 0, ptr noundef nonnull %2) #64
  switch i32 %19, label %28 [
    i32 0, label %20
    i32 1, label %27
  ]

20:                                               ; preds = %18
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %21, ptr @osp, align 8, !tbaa !7
  %22 = load ptr, ptr @ostop, align 8, !tbaa !7
  %23 = icmp ugt ptr %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %28

25:                                               ; preds = %20
  store i16 1, ptr %21, align 8, !tbaa !13
  %26 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %26, align 8, !tbaa !14
  br label %28

27:                                               ; preds = %18
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %3, align 8, !tbaa !14
  br label %28

28:                                               ; preds = %27, %25, %24, %18, %11, %7, %1
  %29 = phi i32 [ 0, %27 ], [ -16, %24 ], [ 0, %25 ], [ -20, %1 ], [ -7, %7 ], [ -7, %11 ], [ %19, %18 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %29
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zbytesavailable(ptr nocapture noundef %0) #0 {
  %2 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 12
  br i1 %6, label %7, label %22

7:                                                ; preds = %1
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 7, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !175
  %18 = call i32 %17(ptr noundef nonnull %9, ptr noundef nonnull %2) #64
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %15
  %21 = load i64, ptr %2, align 8, !tbaa !18
  store i64 %21, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %3, align 8, !tbaa !14
  br label %22

22:                                               ; preds = %20, %15, %11, %7, %1
  %23 = phi i32 [ 0, %20 ], [ -20, %1 ], [ -7, %7 ], [ -7, %11 ], [ -12, %15 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %23
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zflush(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr getelementptr inbounds ([5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 1), align 16, !tbaa !188
  %3 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 7, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !201
  %5 = tail call i32 %4(ptr noundef %2) #64
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zflushfile(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %24

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !188
  %9 = icmp eq ptr %8, null
  br i1 %9, label %24, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 7, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !201
  %13 = tail call i32 %12(ptr noundef nonnull %8) #64
  %14 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 4
  %15 = load i8, ptr %14, align 4, !tbaa !169
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 9
  %19 = load ptr, ptr %18, align 8, !tbaa !170
  %20 = tail call i32 @fseek(ptr noundef %19, i64 noundef 0, i32 noundef 2) #62
  br label %21

21:                                               ; preds = %17, %10
  %22 = load ptr, ptr @osp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %22, i64 -1
  store ptr %23, ptr @osp, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %21, %6, %1
  %25 = phi i32 [ 0, %21 ], [ -7, %6 ], [ -20, %1 ]
  ret i32 %25
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @zresetfile(ptr nocapture readnone %0) #10 {
  ret i32 -21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @zstatus(ptr nocapture noundef %0) #23 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !188
  %9 = icmp ne ptr %8, null
  %10 = zext i1 %9 to i16
  store i16 %10, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %2, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i32 [ 0, %6 ], [ -20, %1 ]
  ret i32 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @zrun(ptr nocapture readnone %0) #10 {
  ret i32 -21
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zcurrentfile(ptr noundef %0) #21 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %26

6:                                                ; preds = %1
  %7 = load ptr, ptr @esp, align 8, !tbaa !7
  %8 = icmp ult ptr %7, @estack
  br i1 %8, label %18, label %9

9:                                                ; preds = %15, %6
  %10 = phi ptr [ %16, %15 ], [ %7, %6 ]
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 253
  %14 = icmp eq i16 %13, 13
  br i1 %14, label %19, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.ref_s, ptr %10, i64 -1
  %17 = icmp ult ptr %16, @estack
  br i1 %17, label %18, label %9, !llvm.loop !197

18:                                               ; preds = %15, %6
  store ptr @invalid_file_entry, ptr %2, align 8, !tbaa !13
  br label %23

19:                                               ; preds = %9
  %.lcssa = phi ptr [ %10, %9 ]
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %.lcssa, i64 16, i1 false), !tbaa.struct !101
  %20 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  %21 = load i16, ptr %20, align 8, !tbaa !14
  %22 = and i16 %21, -2
  br label %23

23:                                               ; preds = %19, %18
  %24 = phi i16 [ %22, %19 ], [ 12, %18 ]
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 %24, ptr %25, align 8, !tbaa !14
  br label %26

26:                                               ; preds = %23, %5
  %27 = phi i32 [ -16, %5 ], [ 0, %23 ]
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zprint(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr getelementptr inbounds ([5 x %struct.file_entry_s], ptr @std_files, i64 0, i64 1), align 16, !tbaa !188
  %3 = tail call i32 @write_string(ptr noundef %0, ptr noundef %2) #62, !range !200
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load ptr, ptr @osp, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.ref_s, ptr %6, i64 -1
  store ptr %7, ptr @osp, align 8, !tbaa !7
  br label %8

8:                                                ; preds = %5, %1
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @zecho(ptr nocapture noundef readonly %0) #37 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 4
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = load ptr, ptr @osp, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.ref_s, ptr %7, i64 -1
  store ptr %8, ptr @osp, align 8, !tbaa !7
  br label %9

9:                                                ; preds = %6, %1
  %10 = phi i32 [ 0, %6 ], [ -20, %1 ]
  ret i32 %10
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetfileposition(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %25

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %25, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %13 = load i16, ptr %12, align 8, !tbaa !14
  %14 = and i16 %13, 252
  %15 = icmp eq i16 %14, 20
  br i1 %15, label %16, label %25

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 7, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !202
  %19 = load i64, ptr %0, align 8, !tbaa !13
  %20 = tail call i32 %18(ptr noundef nonnull %9, i64 noundef %19) #64
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = load ptr, ptr @osp, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.ref_s, ptr %23, i64 -2
  store ptr %24, ptr @osp, align 8, !tbaa !7
  br label %25

25:                                               ; preds = %22, %16, %11, %6, %1
  %26 = phi i32 [ 0, %22 ], [ -7, %6 ], [ -20, %1 ], [ -20, %11 ], [ -12, %16 ]
  ret i32 %26
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @zfileposition(ptr nocapture noundef %0) #23 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %23

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !188
  %9 = icmp eq ptr %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 6
  %12 = load i64, ptr %11, align 8, !tbaa !167
  %13 = icmp sgt i64 %12, -1
  br i1 %13, label %14, label %23

14:                                               ; preds = %10
  %15 = load ptr, ptr %8, align 8, !tbaa !124
  %16 = getelementptr inbounds i8, ptr %15, i64 1
  %17 = getelementptr inbounds %struct.stream_s, ptr %8, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !127
  %19 = ptrtoint ptr %16 to i64
  %20 = ptrtoint ptr %18 to i64
  %21 = sub i64 %12, %20
  %22 = add i64 %21, %19
  store i64 %22, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %2, align 8, !tbaa !14
  br label %23

23:                                               ; preds = %14, %10, %6, %1
  %24 = phi i32 [ 0, %14 ], [ -7, %6 ], [ -20, %1 ], [ -12, %10 ]
  ret i32 %24
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdeletefile(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 52
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = and i32 %4, 512
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %7
  %11 = tail call ptr @ref_to_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.12.193) #64
  %12 = icmp eq ptr %11, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %10
  %14 = tail call i32 (ptr, ...) @unlink(ptr noundef nonnull %11) #64
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %16 = load i16, ptr %15, align 2, !tbaa !17
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %17, 1
  tail call void @alloc_free(ptr noundef nonnull %11, i32 noundef %18, i32 noundef 1, ptr noundef nonnull @.str.12.193) #64
  %19 = icmp eq i32 %14, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %13
  %21 = load ptr, ptr @osp, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.ref_s, ptr %21, i64 -1
  store ptr %22, ptr @osp, align 8, !tbaa !7
  br label %23

23:                                               ; preds = %20, %13, %10, %7, %1
  %24 = phi i32 [ 0, %20 ], [ -20, %1 ], [ -7, %7 ], [ -25, %10 ], [ -12, %13 ]
  ret i32 %24
}

; Function Attrs: optsize
declare i32 @unlink(...) local_unnamed_addr #38

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrenamefile(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 52
  br i1 %6, label %7, label %44

7:                                                ; preds = %1
  %8 = and i32 %4, 512
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %44, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %12 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %13 = load i16, ptr %12, align 8, !tbaa !14
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 252
  %16 = icmp eq i32 %15, 52
  br i1 %16, label %17, label %44

17:                                               ; preds = %10
  %18 = and i32 %14, 512
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %44, label %20

20:                                               ; preds = %17
  %21 = tail call ptr @ref_to_string(ptr noundef nonnull %11, ptr noundef nonnull @.str.13.194) #64
  %22 = tail call ptr @ref_to_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.14.195) #64
  %23 = icmp ne ptr %21, null
  %24 = icmp ne ptr %22, null
  %25 = select i1 %23, i1 %24, i1 false
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = tail call i32 @rename(ptr noundef nonnull %21, ptr noundef nonnull %22) #64
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = load ptr, ptr @osp, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.ref_s, ptr %30, i64 -2
  store ptr %31, ptr @osp, align 8, !tbaa !7
  br label %33

32:                                               ; preds = %20
  br i1 %23, label %33, label %38

33:                                               ; preds = %32, %29, %26
  %34 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %35 = load i16, ptr %34, align 2, !tbaa !17
  %36 = zext i16 %35 to i32
  %37 = add nuw nsw i32 %36, 1
  tail call void @alloc_free(ptr noundef nonnull %21, i32 noundef %37, i32 noundef 1, ptr noundef nonnull @.str.13.194) #64
  br label %38

38:                                               ; preds = %33, %32
  br i1 %24, label %39, label %44

39:                                               ; preds = %38
  %40 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %41 = load i16, ptr %40, align 2, !tbaa !17
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %42, 1
  tail call void @alloc_free(ptr noundef nonnull %22, i32 noundef %43, i32 noundef 1, ptr noundef nonnull @.str.14.195) #64
  br label %44

44:                                               ; preds = %39, %38, %17, %10, %7, %1
  %45 = phi i32 [ -20, %1 ], [ -7, %7 ], [ -20, %10 ], [ -7, %17 ], [ 0, %39 ], [ 0, %38 ]
  ret i32 %45
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @rename(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zfilename(ptr nocapture noundef %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !188
  %9 = icmp eq ptr %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.file_entry_s, ptr %7, i64 0, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %11, i64 16, i1 false), !tbaa.struct !101
  br label %12

12:                                               ; preds = %10, %6, %1
  %13 = phi i32 [ 0, %10 ], [ -7, %6 ], [ -20, %1 ]
  ret i32 %13
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zfindlibfile(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 52
  br i1 %5, label %6, label %29

6:                                                ; preds = %1
  %7 = tail call i32 @open_std_file(ptr noundef nonnull %0, ptr noundef nonnull @.str.9.187, ptr noundef nonnull %0) #62, !range !191
  switch i32 %7, label %29 [
    i32 0, label %8
    i32 -22, label %15
  ]

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  %10 = load ptr, ptr @ostop, align 8, !tbaa !7
  %11 = icmp ugt ptr %9, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %29

13:                                               ; preds = %8
  store i16 1, ptr %9, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %14, align 8, !tbaa !14
  br label %29

15:                                               ; preds = %6
  %16 = load ptr, ptr %0, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %18 = load i16, ptr %17, align 2, !tbaa !17
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @lib_file_open(ptr noundef %16, i32 noundef %19, ptr noundef nonnull %0) #62
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %21, ptr @osp, align 8, !tbaa !7
  %22 = load ptr, ptr @ostop, align 8, !tbaa !7
  %23 = icmp ugt ptr %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %15
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %29

25:                                               ; preds = %15
  %26 = icmp sgt i32 %20, -1
  %27 = zext i1 %26 to i16
  store i16 %27, ptr %21, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %28, align 8, !tbaa !14
  br label %29

29:                                               ; preds = %25, %24, %13, %12, %6, %1
  %30 = phi i32 [ -16, %24 ], [ 0, %25 ], [ -16, %12 ], [ -20, %1 ], [ %7, %6 ], [ 0, %13 ]
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @lib_file_open(ptr noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = alloca [4096 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %4) #65
  %5 = tail call i32 @file_open(ptr noundef %0, i32 noundef %1, ptr noundef nonnull @.str.9.187, ptr noundef %2) #62
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %60, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @gp_file_name_is_absolute(ptr noundef %0, i32 noundef %1) #64
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %60

10:                                               ; preds = %7
  %11 = load ptr, ptr @gs_lib_paths, align 8, !tbaa !7
  %12 = load ptr, ptr %11, align 8, !tbaa !7
  %13 = icmp eq ptr %12, null
  br i1 %13, label %60, label %14

14:                                               ; preds = %10
  %15 = zext i32 %1 to i64
  %16 = sub nsw i64 0, %15
  %17 = getelementptr i8, ptr %4, i64 %16
  br label %18

18:                                               ; preds = %56, %14
  %19 = phi ptr [ %12, %14 ], [ %58, %56 ]
  %20 = phi i32 [ %5, %14 ], [ %.lcssa2, %56 ]
  %21 = phi ptr [ %11, %14 ], [ %57, %56 ]
  br label %22

22:                                               ; preds = %52, %18
  %23 = phi ptr [ %.lcssa, %52 ], [ %19, %18 ]
  %24 = phi i32 [ %53, %52 ], [ %20, %18 ]
  %25 = load i8, ptr @gp_file_name_list_separator, align 1
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi ptr [ %23, %22 ], [ %32, %26 ]
  %28 = load i8, ptr %27, align 1, !tbaa !13
  %29 = icmp eq i8 %28, 0
  %30 = icmp eq i8 %28, %25
  %31 = select i1 %29, i1 true, i1 %30
  %32 = getelementptr inbounds i8, ptr %27, i64 1
  br i1 %31, label %33, label %26, !llvm.loop !203

33:                                               ; preds = %26
  %.lcssa1 = phi ptr [ %27, %26 ]
  %.lcssa = phi ptr [ %32, %26 ]
  %34 = ptrtoint ptr %.lcssa1 to i64
  %35 = ptrtoint ptr %23 to i64
  %36 = sub i64 %34, %35
  %37 = trunc i64 %36 to i32
  %38 = call ptr @gp_file_name_concat_string(ptr noundef %23, i32 noundef %37, ptr noundef %0, i32 noundef %1) #64
  %39 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %38) #63
  %40 = add i64 %39, %36
  %41 = trunc i64 %40 to i32
  %42 = add i32 %41, %1
  %43 = icmp slt i32 %42, 4097
  br i1 %43, label %44, label %52

44:                                               ; preds = %33
  %45 = and i64 %36, 4294967295
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %4, ptr align 1 %23, i64 %45, i1 false)
  %46 = getelementptr inbounds i8, ptr %4, i64 %45
  %47 = call ptr @strcpy(ptr noundef nonnull dereferenceable(1) %46, ptr noundef nonnull dereferenceable(1) %38) #64
  %48 = sext i32 %42 to i64
  %49 = getelementptr i8, ptr %17, i64 %48
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %49, ptr align 1 %0, i64 %15, i1 false)
  %50 = call i32 @file_open(ptr noundef nonnull %4, i32 noundef %42, ptr noundef nonnull @.str.9.187, ptr noundef %2) #62
  %51 = icmp sgt i32 %50, -1
  br i1 %51, label %60, label %52

52:                                               ; preds = %44, %33
  %53 = phi i32 [ %50, %44 ], [ %24, %33 ]
  %54 = load i8, ptr %.lcssa1, align 1, !tbaa !13
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %22

56:                                               ; preds = %52
  %.lcssa2 = phi i32 [ %53, %52 ]
  %57 = getelementptr inbounds ptr, ptr %21, i64 1
  %58 = load ptr, ptr %57, align 8, !tbaa !7
  %59 = icmp eq ptr %58, null
  br i1 %59, label %60, label %18, !llvm.loop !204

60:                                               ; preds = %56, %44, %10, %7, %3
  %61 = phi i32 [ 0, %3 ], [ -22, %7 ], [ %5, %10 ], [ 0, %44 ], [ %.lcssa2, %56 ]
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %4) #65
  ret i32 %61
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwriteppmfile(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 12
  br i1 %5, label %6, label %39

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = load ptr, ptr %8, align 8, !tbaa !188
  %10 = icmp eq ptr %9, null
  br i1 %10, label %39, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 4
  %13 = load i8, ptr %12, align 4, !tbaa !169
  %14 = icmp eq i8 %13, 0
  %15 = and i16 %3, 256
  %16 = icmp eq i16 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %39, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = and i16 %20, 252
  %22 = icmp eq i16 %21, 60
  br i1 %22, label %23, label %39

23:                                               ; preds = %18
  %24 = load ptr, ptr %0, align 8, !tbaa !13
  %25 = tail call i32 @gs_device_is_memory(ptr noundef %24) #64
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 7, i32 4
  %29 = load ptr, ptr %28, align 8, !tbaa !201
  %30 = tail call i32 %29(ptr noundef nonnull %9) #64
  %31 = load ptr, ptr %0, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.stream_s, ptr %9, i64 0, i32 9
  %33 = load ptr, ptr %32, align 8, !tbaa !170
  %34 = tail call i32 (ptr, ptr, ...) @gs_writeppmfile(ptr noundef %31, ptr noundef %33) #64
  %35 = icmp sgt i32 %34, -1
  br i1 %35, label %36, label %39

36:                                               ; preds = %27
  %37 = load ptr, ptr @osp, align 8, !tbaa !7
  %38 = getelementptr inbounds %struct.ref_s, ptr %37, i64 -2
  store ptr %38, ptr @osp, align 8, !tbaa !7
  br label %39

39:                                               ; preds = %36, %27, %23, %18, %11, %6, %1
  %40 = phi i32 [ -20, %1 ], [ -7, %6 ], [ -7, %11 ], [ -20, %18 ], [ -20, %23 ], [ %34, %36 ], [ %34, %27 ]
  ret i32 %40
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztype1decryptfile(ptr nocapture noundef %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 20
  br i1 %7, label %8, label %39

8:                                                ; preds = %1
  %9 = load i64, ptr %3, align 8, !tbaa !13
  %10 = trunc i64 %9 to i16
  %11 = icmp ult i64 %9, 65536
  br i1 %11, label %12, label %39

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %14 = load i16, ptr %13, align 8, !tbaa !14
  %15 = and i16 %14, 252
  %16 = icmp eq i16 %15, 12
  br i1 %16, label %17, label %39

17:                                               ; preds = %12
  %18 = load ptr, ptr %0, align 8, !tbaa !13
  %19 = load ptr, ptr %18, align 8, !tbaa !188
  %20 = icmp eq ptr %19, null
  br i1 %20, label %39, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.stream_s, ptr %19, i64 0, i32 4
  %23 = load i8, ptr %22, align 4, !tbaa !169
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %39

25:                                               ; preds = %21
  %26 = call i32 @file_open(ptr noundef null, i32 noundef 0, ptr noundef nonnull @.str.9.187, ptr noundef nonnull %2) #62
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %39, label %28

28:                                               ; preds = %25
  %29 = load ptr, ptr %2, align 8, !tbaa !13
  %30 = load ptr, ptr %29, align 8, !tbaa !188
  %31 = load ptr, ptr %0, align 8, !tbaa !13
  %32 = load ptr, ptr %31, align 8, !tbaa !188
  %33 = getelementptr inbounds %struct.stream_s, ptr %30, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !127
  %35 = getelementptr inbounds %struct.stream_s, ptr %30, i64 0, i32 3
  %36 = load i32, ptr %35, align 8, !tbaa !128
  tail call void @sread_decrypt(ptr noundef %30, ptr noundef %32, ptr noundef %34, i32 noundef %36, i16 noundef zeroext %10) #64
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %37 = load ptr, ptr @osp, align 8, !tbaa !7
  %38 = getelementptr inbounds %struct.ref_s, ptr %37, i64 -1
  store ptr %38, ptr @osp, align 8, !tbaa !7
  br label %39

39:                                               ; preds = %28, %25, %21, %17, %12, %8, %1
  %40 = phi i32 [ 0, %28 ], [ -20, %1 ], [ -15, %8 ], [ -20, %12 ], [ -7, %17 ], [ -7, %21 ], [ %26, %25 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %40
}

; Function Attrs: nounwind optsize uwtable
define internal void @zfile_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zfile_op_init.my_defs) #64
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @file_check_read(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #23 {
  %3 = load ptr, ptr %0, align 8, !tbaa !13
  %4 = load ptr, ptr %3, align 8, !tbaa !188
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.stream_s, ptr %4, i64 0, i32 4
  %8 = load i8, ptr %7, align 4, !tbaa !169
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store ptr %4, ptr %1, align 8, !tbaa !7
  br label %11

11:                                               ; preds = %10, %6, %2
  %12 = phi i32 [ 0, %10 ], [ -7, %2 ], [ -7, %6 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcopy(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %48 [
    i32 5, label %7
    i32 0, label %33
    i32 10, label %33
    i32 13, label %33
    i32 2, label %37
  ]

7:                                                ; preds = %1
  %8 = load i64, ptr %0, align 8, !tbaa !13
  %9 = load ptr, ptr @osbot, align 8, !tbaa !7
  %10 = ptrtoint ptr %0 to i64
  %11 = ptrtoint ptr %9 to i64
  %12 = sub i64 %10, %11
  %13 = ashr exact i64 %12, 4
  %14 = icmp ugt i64 %8, %13
  br i1 %14, label %48, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %17 = shl i64 %8, 32
  %18 = ashr exact i64 %17, 32
  %19 = getelementptr inbounds %struct.ref_s, ptr %16, i64 %18
  %20 = load ptr, ptr @ostop, align 8, !tbaa !7
  %21 = icmp ugt ptr %19, %20
  br i1 %21, label %48, label %22

22:                                               ; preds = %15
  %23 = sub nsw i64 0, %18
  %24 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %23
  %25 = ashr exact i64 %17, 28
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %0, ptr nonnull align 1 %24, i64 %25, i1 false)
  %26 = add i64 %17, -4294967296
  %27 = ashr exact i64 %26, 32
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %27
  %29 = load ptr, ptr @ostop, align 8, !tbaa !7
  %30 = icmp ugt ptr %28, %29
  %31 = select i1 %30, ptr %0, ptr %28
  store ptr %31, ptr @osp, align 8
  %32 = select i1 %30, i32 -16, i32 0
  br label %48

33:                                               ; preds = %1, %1, %1
  %34 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %35 = tail call i32 @copy_interval(ptr noundef nonnull %0, i32 noundef 0, ptr noundef nonnull %34) #62, !range !200
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %48

37:                                               ; preds = %1
  %38 = tail call i32 (ptr, ...) @zcopy_dict(ptr noundef nonnull %0) #64
  br label %48

39:                                               ; preds = %33
  %40 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %41 = load i16, ptr %40, align 2, !tbaa !17
  %42 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  store i16 %41, ptr %42, align 2, !tbaa !17
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %34, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %43 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %44 = load i16, ptr %43, align 8, !tbaa !14
  %45 = or i16 %44, -32768
  store i16 %45, ptr %43, align 8, !tbaa !14
  %46 = load ptr, ptr @osp, align 8, !tbaa !7
  %47 = getelementptr inbounds %struct.ref_s, ptr %46, i64 -1
  store ptr %47, ptr @osp, align 8, !tbaa !7
  br label %48

48:                                               ; preds = %39, %37, %33, %22, %15, %7, %1
  %49 = phi i32 [ %38, %37 ], [ 0, %39 ], [ -15, %7 ], [ -16, %15 ], [ -20, %1 ], [ %35, %33 ], [ %32, %22 ]
  ret i32 %49
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @copy_interval(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2) #0 {
  %4 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = zext i16 %5 to i32
  %7 = lshr i32 %6, 2
  %8 = and i32 %7, 63
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = zext i16 %10 to i32
  %12 = lshr i32 %11, 2
  %13 = and i32 %12, 63
  %14 = icmp eq i32 %8, %13
  br i1 %14, label %15, label %43

15:                                               ; preds = %3
  %16 = and i32 %6, 512
  %17 = icmp eq i32 %16, 0
  %18 = and i32 %11, 256
  %19 = icmp eq i32 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %43, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 2
  %23 = load i16, ptr %22, align 2, !tbaa !17
  %24 = zext i16 %23 to i32
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %26 = load i16, ptr %25, align 2, !tbaa !17
  %27 = zext i16 %26 to i32
  %28 = sub i32 %27, %1
  %29 = icmp ult i32 %28, %24
  br i1 %29, label %43, label %30

30:                                               ; preds = %21
  switch i32 %8, label %43 [
    i32 0, label %31
    i32 10, label %31
    i32 13, label %37
  ]

31:                                               ; preds = %30, %30
  %32 = load ptr, ptr %0, align 8, !tbaa !13
  %33 = zext i32 %1 to i64
  %34 = getelementptr inbounds %struct.ref_s, ptr %32, i64 %33
  %35 = load ptr, ptr %2, align 8, !tbaa !13
  %36 = tail call i32 (ptr, ptr, i32, ...) @refcpy(ptr noundef %34, ptr noundef %35, i32 noundef %24) #64
  br label %43

37:                                               ; preds = %30
  %38 = load ptr, ptr %0, align 8, !tbaa !13
  %39 = zext i32 %1 to i64
  %40 = getelementptr inbounds i8, ptr %38, i64 %39
  %41 = load ptr, ptr %2, align 8, !tbaa !13
  %42 = zext i16 %23 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %42, i1 false)
  br label %43

43:                                               ; preds = %37, %31, %30, %21, %15, %3
  %44 = phi i32 [ -20, %3 ], [ -7, %15 ], [ -15, %21 ], [ 0, %37 ], [ 0, %30 ], [ 0, %31 ]
  ret i32 %44
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zlength(ptr noundef %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = lshr i16 %4, 2
  %6 = and i16 %5, 63
  %7 = zext i16 %6 to i32
  switch i32 %7, label %29 [
    i32 0, label %8
    i32 10, label %8
    i32 13, label %8
    i32 2, label %15
    i32 7, label %24
  ]

8:                                                ; preds = %1, %1, %1
  %9 = and i16 %4, 512
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %29, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %13 = load i16, ptr %12, align 2, !tbaa !17
  %14 = zext i16 %13 to i64
  store i64 %14, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %3, align 8, !tbaa !14
  br label %29

15:                                               ; preds = %1
  %16 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %17 = getelementptr inbounds %struct.ref_s, ptr %16, i64 0, i32 1
  %18 = load i16, ptr %17, align 8, !tbaa !14
  %19 = and i16 %18, 512
  %20 = icmp eq i16 %19, 0
  br i1 %20, label %29, label %21

21:                                               ; preds = %15
  %22 = tail call i32 @dict_length(ptr noundef nonnull %0) #64
  %23 = zext i32 %22 to i64
  store i64 %23, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %3, align 8, !tbaa !14
  br label %29

24:                                               ; preds = %1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %25 = call i32 (ptr, ptr, ...) @name_string_ref(ptr noundef nonnull %0, ptr noundef nonnull %2) #64
  %26 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 2
  %27 = load i16, ptr %26, align 2, !tbaa !17
  %28 = zext i16 %27 to i64
  store i64 %28, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %3, align 8, !tbaa !14
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  br label %29

29:                                               ; preds = %24, %21, %15, %11, %8, %1
  %30 = phi i32 [ 0, %24 ], [ 0, %21 ], [ 0, %11 ], [ -7, %8 ], [ -7, %15 ], [ -20, %1 ]
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zget(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = zext i16 %5 to i32
  %7 = lshr i32 %6, 2
  %8 = and i32 %7, 63
  switch i32 %8, label %63 [
    i32 2, label %9
    i32 0, label %20
    i32 10, label %20
    i32 13, label %38
  ]

9:                                                ; preds = %1
  %10 = tail call ptr @dict_access_ref(ptr noundef nonnull %3) #64
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 512
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %63, label %15

15:                                               ; preds = %9
  %16 = call i32 @dict_lookup(ptr noundef nonnull %3, ptr noundef nonnull %3, ptr noundef nonnull %0, ptr noundef nonnull %2) #64
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %63, label %18

18:                                               ; preds = %15
  %19 = load ptr, ptr %2, align 8, !tbaa !7
  br label %58

20:                                               ; preds = %1, %1
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %22 = load i16, ptr %21, align 8, !tbaa !14
  %23 = and i16 %22, 252
  %24 = icmp eq i16 %23, 20
  br i1 %24, label %25, label %63

25:                                               ; preds = %20
  %26 = and i16 %5, 512
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %63, label %28

28:                                               ; preds = %25
  %29 = load i64, ptr %0, align 8, !tbaa !13
  %30 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %31 = load i16, ptr %30, align 2, !tbaa !17
  %32 = zext i16 %31 to i64
  %33 = icmp ult i64 %29, %32
  br i1 %33, label %34, label %63

34:                                               ; preds = %28
  %35 = load ptr, ptr %3, align 8, !tbaa !13
  %36 = and i64 %29, 4294967295
  %37 = getelementptr inbounds %struct.ref_s, ptr %35, i64 %36
  br label %58

38:                                               ; preds = %1
  %39 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %40 = load i16, ptr %39, align 8, !tbaa !14
  %41 = and i16 %40, 252
  %42 = icmp eq i16 %41, 20
  br i1 %42, label %43, label %63

43:                                               ; preds = %38
  %44 = and i32 %6, 512
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %63, label %46

46:                                               ; preds = %43
  %47 = load i64, ptr %0, align 8, !tbaa !13
  %48 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %49 = load i16, ptr %48, align 2, !tbaa !17
  %50 = zext i16 %49 to i64
  %51 = icmp ult i64 %47, %50
  br i1 %51, label %52, label %63

52:                                               ; preds = %46
  %53 = load ptr, ptr %3, align 8, !tbaa !13
  %54 = and i64 %47, 4294967295
  %55 = getelementptr inbounds i8, ptr %53, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !13
  %57 = zext i8 %56 to i64
  store i64 %57, ptr %3, align 8, !tbaa !13
  store i16 20, ptr %4, align 8, !tbaa !14
  br label %60

58:                                               ; preds = %34, %18
  %59 = phi ptr [ %19, %18 ], [ %37, %34 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %59, i64 16, i1 false), !tbaa.struct !101
  br label %60

60:                                               ; preds = %58, %52
  %61 = load ptr, ptr @osp, align 8, !tbaa !7
  %62 = getelementptr inbounds %struct.ref_s, ptr %61, i64 -1
  store ptr %62, ptr @osp, align 8, !tbaa !7
  br label %63

63:                                               ; preds = %60, %46, %43, %38, %28, %25, %20, %15, %9, %1
  %64 = phi i32 [ -7, %9 ], [ -21, %15 ], [ -20, %20 ], [ -7, %25 ], [ -15, %28 ], [ -20, %38 ], [ -7, %43 ], [ -15, %46 ], [ -20, %1 ], [ 0, %60 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %64
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zput(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = zext i16 %5 to i32
  %7 = lshr i32 %6, 2
  %8 = and i32 %7, 63
  switch i32 %8, label %67 [
    i32 2, label %9
    i32 0, label %18
    i32 10, label %71
    i32 13, label %38
  ]

9:                                                ; preds = %1
  %10 = tail call ptr @dict_access_ref(ptr noundef nonnull %3) #64
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 256
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %71, label %15

15:                                               ; preds = %9
  %16 = tail call i32 @dict_put(ptr noundef nonnull %3, ptr noundef nonnull %2, ptr noundef nonnull %0) #64
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %68, label %71

18:                                               ; preds = %1
  %19 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %20 = load i16, ptr %19, align 8, !tbaa !14
  %21 = and i16 %20, 252
  %22 = icmp eq i16 %21, 20
  br i1 %22, label %23, label %71

23:                                               ; preds = %18
  %24 = and i32 %6, 256
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %71, label %26

26:                                               ; preds = %23
  %27 = load i64, ptr %2, align 8, !tbaa !13
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %71, label %29

29:                                               ; preds = %26
  %30 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 2
  %31 = load i16, ptr %30, align 2, !tbaa !17
  %32 = zext i16 %31 to i64
  %33 = icmp ult i64 %27, %32
  br i1 %33, label %34, label %71

34:                                               ; preds = %29
  %35 = load ptr, ptr %3, align 8, !tbaa !13
  %36 = and i64 %27, 4294967295
  %37 = getelementptr inbounds %struct.ref_s, ptr %35, i64 %36
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %37, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %68

38:                                               ; preds = %1
  %39 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %40 = load i16, ptr %39, align 8, !tbaa !14
  %41 = and i16 %40, 252
  %42 = icmp eq i16 %41, 20
  br i1 %42, label %43, label %71

43:                                               ; preds = %38
  %44 = and i32 %6, 256
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %71, label %46

46:                                               ; preds = %43
  %47 = load i64, ptr %2, align 8, !tbaa !13
  %48 = icmp slt i64 %47, 0
  br i1 %48, label %71, label %49

49:                                               ; preds = %46
  %50 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 2
  %51 = load i16, ptr %50, align 2, !tbaa !17
  %52 = zext i16 %51 to i64
  %53 = icmp ult i64 %47, %52
  br i1 %53, label %54, label %71

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %56 = load i16, ptr %55, align 8, !tbaa !14
  %57 = and i16 %56, 252
  %58 = icmp eq i16 %57, 20
  br i1 %58, label %59, label %71

59:                                               ; preds = %54
  %60 = load i64, ptr %0, align 8, !tbaa !13
  %61 = icmp ugt i64 %60, 255
  br i1 %61, label %71, label %62

62:                                               ; preds = %59
  %63 = trunc i64 %60 to i8
  %64 = load ptr, ptr %3, align 8, !tbaa !13
  %65 = and i64 %47, 4294967295
  %66 = getelementptr inbounds i8, ptr %64, i64 %65
  store i8 %63, ptr %66, align 1, !tbaa !13
  br label %68

67:                                               ; preds = %1
  br label %71

68:                                               ; preds = %62, %34, %15
  %69 = load ptr, ptr @osp, align 8, !tbaa !7
  %70 = getelementptr inbounds %struct.ref_s, ptr %69, i64 -3
  store ptr %70, ptr @osp, align 8, !tbaa !7
  br label %71

71:                                               ; preds = %68, %67, %59, %54, %49, %46, %43, %38, %29, %26, %23, %18, %15, %9, %1
  %72 = phi i32 [ -20, %67 ], [ 0, %68 ], [ %16, %15 ], [ -7, %9 ], [ -20, %18 ], [ -7, %23 ], [ -15, %29 ], [ -15, %26 ], [ -7, %1 ], [ -20, %38 ], [ -7, %43 ], [ -15, %49 ], [ -15, %46 ], [ -20, %54 ], [ -15, %59 ]
  ret i32 %72
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zgetinterval(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 20
  br i1 %7, label %8, label %52

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = and i16 %10, 252
  %12 = icmp eq i16 %11, 20
  br i1 %12, label %13, label %52

13:                                               ; preds = %8
  %14 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = lshr i16 %15, 2
  %17 = and i16 %16, 63
  %18 = zext i16 %17 to i32
  switch i32 %18, label %52 [
    i32 0, label %19
    i32 10, label %19
    i32 13, label %19
  ]

19:                                               ; preds = %13, %13, %13
  %20 = zext i16 %15 to i32
  %21 = and i32 %20, 512
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %52, label %23

23:                                               ; preds = %19
  %24 = load i64, ptr %2, align 8, !tbaa !13
  %25 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 2
  %26 = load i16, ptr %25, align 2, !tbaa !17
  %27 = zext i16 %26 to i64
  %28 = icmp ugt i64 %24, %27
  br i1 %28, label %52, label %29

29:                                               ; preds = %23
  %30 = load i64, ptr %0, align 8, !tbaa !13
  %31 = sub i64 %27, %24
  %32 = and i64 %31, 4294967295
  %33 = icmp ugt i64 %30, %32
  br i1 %33, label %52, label %34

34:                                               ; preds = %29
  %35 = lshr i32 %20, 2
  %36 = and i32 %35, 63
  switch i32 %36, label %47 [
    i32 0, label %37
    i32 10, label %37
    i32 13, label %41
  ]

37:                                               ; preds = %34, %34
  %38 = load ptr, ptr %3, align 8, !tbaa !13
  %39 = and i64 %24, 4294967295
  %40 = getelementptr inbounds %struct.ref_s, ptr %38, i64 %39
  br label %45

41:                                               ; preds = %34
  %42 = load ptr, ptr %3, align 8, !tbaa !13
  %43 = and i64 %24, 4294967295
  %44 = getelementptr inbounds i8, ptr %42, i64 %43
  br label %45

45:                                               ; preds = %41, %37
  %46 = phi ptr [ %44, %41 ], [ %40, %37 ]
  store ptr %46, ptr %3, align 8, !tbaa !13
  br label %47

47:                                               ; preds = %45, %34
  %48 = trunc i64 %30 to i16
  store i16 %48, ptr %25, align 2, !tbaa !17
  %49 = or i16 %15, -32768
  store i16 %49, ptr %14, align 8, !tbaa !14
  %50 = load ptr, ptr @osp, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.ref_s, ptr %50, i64 -2
  store ptr %51, ptr @osp, align 8, !tbaa !7
  br label %52

52:                                               ; preds = %47, %29, %23, %19, %13, %8, %1
  %53 = phi i32 [ 0, %47 ], [ -20, %1 ], [ -20, %8 ], [ -20, %13 ], [ -7, %19 ], [ -15, %23 ], [ -15, %29 ]
  ret i32 %53
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zputinterval(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 20
  br i1 %7, label %8, label %31

8:                                                ; preds = %1
  %9 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = lshr i16 %10, 2
  %12 = and i16 %11, 63
  %13 = zext i16 %12 to i32
  switch i32 %13, label %31 [
    i32 10, label %14
    i32 0, label %15
    i32 13, label %15
  ]

14:                                               ; preds = %8
  br label %31

15:                                               ; preds = %8, %8
  %16 = and i16 %10, 256
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %15
  %19 = load i64, ptr %2, align 8, !tbaa !13
  %20 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 2
  %21 = load i16, ptr %20, align 2, !tbaa !17
  %22 = zext i16 %21 to i64
  %23 = icmp ugt i64 %19, %22
  br i1 %23, label %31, label %24

24:                                               ; preds = %18
  %25 = trunc i64 %19 to i32
  %26 = tail call i32 @copy_interval(ptr noundef nonnull %3, i32 noundef %25, ptr noundef nonnull %0) #62, !range !200
  %27 = icmp sgt i32 %26, -1
  br i1 %27, label %28, label %31

28:                                               ; preds = %24
  %29 = load ptr, ptr @osp, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.ref_s, ptr %29, i64 -3
  store ptr %30, ptr @osp, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %28, %24, %18, %15, %14, %8, %1
  %32 = phi i32 [ -7, %14 ], [ -20, %1 ], [ -20, %8 ], [ -7, %15 ], [ -15, %18 ], [ 0, %28 ], [ 0, %24 ]
  ret i32 %32
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zforall(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = zext i16 %4 to i32
  %6 = lshr i32 %5, 2
  %7 = and i32 %6, 63
  switch i32 %7, label %41 [
    i32 0, label %8
    i32 10, label %8
    i32 13, label %11
    i32 2, label %14
  ]

8:                                                ; preds = %1, %1
  %9 = and i16 %4, 512
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %41, label %23

11:                                               ; preds = %1
  %12 = and i32 %5, 512
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %41, label %23

14:                                               ; preds = %1
  %15 = tail call ptr @dict_access_ref(ptr noundef nonnull %2) #64
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 0, i32 1
  %17 = load i16, ptr %16, align 8, !tbaa !14
  %18 = and i16 %17, 512
  %19 = icmp eq i16 %18, 0
  br i1 %19, label %41, label %20

20:                                               ; preds = %14
  %21 = tail call i32 @dict_first(ptr noundef nonnull %2) #64
  %22 = zext i32 %21 to i64
  br label %23

23:                                               ; preds = %20, %11, %8
  %24 = phi ptr [ @dict_continue, %20 ], [ @array_continue, %8 ], [ @string_continue, %11 ]
  %25 = phi i64 [ %22, %20 ], [ 0, %8 ], [ 0, %11 ]
  %26 = load ptr, ptr @esp, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.ref_s, ptr %26, i64 6
  %28 = load ptr, ptr @estop, align 8, !tbaa !7
  %29 = icmp ugt ptr %27, %28
  br i1 %29, label %41, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.ref_s, ptr %26, i64 1
  store i16 2, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.ref_s, ptr %26, i64 1, i32 1
  store i16 33, ptr %32, align 8, !tbaa !14
  %33 = getelementptr inbounds %struct.ref_s, ptr %26, i64 2
  store ptr %33, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %33, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %34 = getelementptr inbounds %struct.ref_s, ptr %26, i64 3
  store i64 %25, ptr %34, align 8, !tbaa !13
  %35 = getelementptr inbounds %struct.ref_s, ptr %26, i64 3, i32 1
  store i16 20, ptr %35, align 8, !tbaa !14
  %36 = getelementptr inbounds %struct.ref_s, ptr %26, i64 4
  store ptr %36, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %36, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %37 = load ptr, ptr @osp, align 8, !tbaa !7
  %38 = getelementptr inbounds %struct.ref_s, ptr %37, i64 -2
  store ptr %38, ptr @osp, align 8, !tbaa !7
  %39 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %40 = tail call i32 %24(ptr noundef nonnull %39) #64, !callees !205
  br label %41

41:                                               ; preds = %30, %23, %14, %11, %8, %1
  %42 = phi i32 [ %40, %30 ], [ -20, %1 ], [ -7, %8 ], [ -7, %11 ], [ -7, %14 ], [ -5, %23 ]
  ret i32 %42
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @dict_continue(ptr noundef %0) #0 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -1
  %4 = load i64, ptr %3, align 8, !tbaa !13
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %5, ptr @osp, align 8, !tbaa !7
  %6 = load ptr, ptr @ostop, align 8, !tbaa !7
  %7 = icmp ugt ptr %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %29

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -2
  %11 = trunc i64 %4 to i32
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  %13 = tail call i32 @dict_next(ptr noundef nonnull %10, i32 noundef %11, ptr noundef nonnull %12) #64
  %14 = icmp sgt i32 %13, -1
  br i1 %14, label %15, label %24

15:                                               ; preds = %9
  %16 = zext i32 %13 to i64
  %17 = load ptr, ptr @esp, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.ref_s, ptr %17, i64 -1
  store i64 %16, ptr %18, align 8, !tbaa !13
  %19 = load ptr, ptr @esp, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr @dict_continue, ptr %20, align 8, !tbaa !13
  %21 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1, i32 1
  store i16 37, ptr %21, align 8, !tbaa !14
  %22 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1, i32 2
  store i16 0, ptr %22, align 2, !tbaa !17
  %23 = getelementptr inbounds %struct.ref_s, ptr %19, i64 2
  store ptr %23, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %23, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %29

24:                                               ; preds = %9
  %25 = load ptr, ptr @osp, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.ref_s, ptr %25, i64 -2
  store ptr %26, ptr @osp, align 8, !tbaa !7
  %27 = load ptr, ptr @esp, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.ref_s, ptr %27, i64 -4
  store ptr %28, ptr @esp, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %24, %15, %8
  %30 = phi i32 [ -16, %8 ], [ 1, %24 ], [ 1, %15 ]
  ret i32 %30
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @array_continue(ptr noundef %0) #30 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -2
  %4 = getelementptr %struct.ref_s, ptr %2, i64 -2, i32 2
  %5 = load i16, ptr %4, align 2, !tbaa !17
  %6 = add i16 %5, -1
  store i16 %6, ptr %4, align 2, !tbaa !17
  %7 = icmp eq i16 %5, 0
  br i1 %7, label %22, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  %10 = load ptr, ptr @ostop, align 8, !tbaa !7
  %11 = icmp ugt ptr %9, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %24

13:                                               ; preds = %8
  %14 = load ptr, ptr %3, align 8, !tbaa !13
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef nonnull align 8 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !101
  %15 = load ptr, ptr %3, align 8, !tbaa !13
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 1
  store ptr %16, ptr %3, align 8, !tbaa !13
  %17 = load ptr, ptr @esp, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.ref_s, ptr %17, i64 1
  store ptr @array_continue, ptr %18, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.ref_s, ptr %17, i64 1, i32 1
  store i16 37, ptr %19, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.ref_s, ptr %17, i64 1, i32 2
  store i16 0, ptr %20, align 2, !tbaa !17
  %21 = getelementptr inbounds %struct.ref_s, ptr %17, i64 2
  store ptr %21, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %24

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -4
  store ptr %23, ptr @esp, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %22, %13, %12
  %25 = phi i32 [ -16, %12 ], [ 1, %22 ], [ 1, %13 ]
  ret i32 %25
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @string_continue(ptr noundef %0) #30 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -2
  %4 = getelementptr %struct.ref_s, ptr %2, i64 -2, i32 2
  %5 = load i16, ptr %4, align 2, !tbaa !17
  %6 = add i16 %5, -1
  store i16 %6, ptr %4, align 2, !tbaa !17
  %7 = icmp eq i16 %5, 0
  br i1 %7, label %25, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  %10 = load ptr, ptr @ostop, align 8, !tbaa !7
  %11 = icmp ugt ptr %9, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %27

13:                                               ; preds = %8
  %14 = load ptr, ptr %3, align 8, !tbaa !13
  %15 = load i8, ptr %14, align 1, !tbaa !13
  %16 = zext i8 %15 to i64
  store i64 %16, ptr %9, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %17, align 8, !tbaa !14
  %18 = load ptr, ptr %3, align 8, !tbaa !13
  %19 = getelementptr inbounds i8, ptr %18, i64 1
  store ptr %19, ptr %3, align 8, !tbaa !13
  %20 = load ptr, ptr @esp, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.ref_s, ptr %20, i64 1
  store ptr @string_continue, ptr %21, align 8, !tbaa !13
  %22 = getelementptr inbounds %struct.ref_s, ptr %20, i64 1, i32 1
  store i16 37, ptr %22, align 8, !tbaa !14
  %23 = getelementptr inbounds %struct.ref_s, ptr %20, i64 1, i32 2
  store i16 0, ptr %23, align 2, !tbaa !17
  %24 = getelementptr inbounds %struct.ref_s, ptr %20, i64 2
  store ptr %24, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %24, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %27

25:                                               ; preds = %1
  %26 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -4
  store ptr %26, ptr @esp, align 8, !tbaa !7
  br label %27

27:                                               ; preds = %25, %13, %12
  %28 = phi i32 [ -16, %12 ], [ 1, %25 ], [ 1, %13 ]
  ret i32 %28
}

; Function Attrs: nounwind optsize uwtable
define internal void @zgeneric_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zgeneric_op_init.my_defs) #64
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable
define internal void @zmath_init() #39 {
  store i64 1, ptr @rand_state, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsqrt(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fcmp olt float %6, 0.000000e+00
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = call float @sqrtf(float noundef %6) #40
  store float %9, ptr %0, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %10, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %8, %5, %1
  %12 = phi i32 [ 0, %8 ], [ %3, %1 ], [ -15, %5 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %12
}

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarccos(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fpext float %6 to double
  %8 = call double @acos(double noundef %7) #64
  %9 = load double, ptr @radians_to_degrees, align 8, !tbaa !149
  %10 = fmul double %8, %9
  %11 = fptrunc double %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %5, %1
  %14 = phi i32 [ 0, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @acos(double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarcsin(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fpext float %6 to double
  %8 = call double @asin(double noundef %7) #64
  %9 = load double, ptr @radians_to_degrees, align 8, !tbaa !149
  %10 = fmul double %8, %9
  %11 = fptrunc double %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %5, %1
  %14 = phi i32 [ 0, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @asin(double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zatan(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %47, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fcmp oeq float %6, 0.000000e+00
  br i1 %7, label %8, label %15

8:                                                ; preds = %5
  %9 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fcmp oeq float %10, 0.000000e+00
  br i1 %11, label %47, label %12

12:                                               ; preds = %8
  %13 = fcmp olt float %10, 0.000000e+00
  %14 = select i1 %13, float 1.800000e+02, float 0.000000e+00
  br label %41

15:                                               ; preds = %5
  %16 = fpext float %6 to double
  %17 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %18 = load float, ptr %17, align 4, !tbaa !103
  %19 = fpext float %18 to double
  %20 = call double @atan2(double noundef %16, double noundef %19) #64
  %21 = load double, ptr @radians_to_degrees, align 8, !tbaa !149
  %22 = fmul double %20, %21
  %23 = fptrunc double %22 to float
  %24 = fcmp olt float %23, 0.000000e+00
  br i1 %24, label %27, label %25

25:                                               ; preds = %15
  %26 = fcmp ult float %23, 1.800000e+02
  br i1 %26, label %35, label %31

27:                                               ; preds = %27, %15
  %28 = phi float [ %29, %27 ], [ %23, %15 ]
  %29 = fadd float %28, 1.800000e+02
  %30 = fcmp olt float %29, 0.000000e+00
  br i1 %30, label %27, label %35, !llvm.loop !206

31:                                               ; preds = %31, %25
  %32 = phi float [ %33, %31 ], [ %23, %25 ]
  %33 = fadd float %32, -1.800000e+02
  %34 = fcmp ult float %33, 1.800000e+02
  br i1 %34, label %35, label %31, !llvm.loop !207

35:                                               ; preds = %31, %27, %25
  %36 = phi float [ %23, %25 ], [ %29, %27 ], [ %33, %31 ]
  %37 = load float, ptr %2, align 4, !tbaa !103
  %38 = fcmp olt float %37, 0.000000e+00
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = fadd float %36, 1.800000e+02
  br label %41

41:                                               ; preds = %39, %35, %12
  %42 = phi float [ %14, %12 ], [ %40, %39 ], [ %36, %35 ]
  %43 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store float %42, ptr %43, align 8, !tbaa !13
  %44 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 44, ptr %44, align 8, !tbaa !14
  %45 = load ptr, ptr @osp, align 8, !tbaa !7
  %46 = getelementptr inbounds %struct.ref_s, ptr %45, i64 -1
  store ptr %46, ptr @osp, align 8, !tbaa !7
  br label %47

47:                                               ; preds = %41, %8, %1
  %48 = phi i32 [ 0, %41 ], [ %3, %1 ], [ -23, %8 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %48
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @atan2(double noundef, double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcos(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fpext float %6 to double
  %8 = load double, ptr @degrees_to_radians, align 8, !tbaa !149
  %9 = fmul double %8, %7
  %10 = call double @cos(double noundef %9) #64
  %11 = fptrunc double %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %5, %1
  %14 = phi i32 [ 0, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @cos(double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsin(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fpext float %6 to double
  %8 = load double, ptr @degrees_to_radians, align 8, !tbaa !149
  %9 = fmul double %8, %7
  %10 = call double @sin(double noundef %9) #64
  %11 = fptrunc double %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %5, %1
  %14 = phi i32 [ 0, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sin(double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zexp(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  %3 = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %4 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %27, label %6

6:                                                ; preds = %1
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fcmp oeq float %7, 0.000000e+00
  %9 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4
  %11 = fcmp oeq float %10, 0.000000e+00
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %27, label %13

13:                                               ; preds = %6
  %14 = fcmp olt float %7, 0.000000e+00
  %15 = fpext float %10 to double
  br i1 %14, label %16, label %19

16:                                               ; preds = %13
  %17 = call double @modf(double noundef %15, ptr noundef nonnull %3) #64
  %18 = fcmp une double %17, 0.000000e+00
  br i1 %18, label %27, label %19

19:                                               ; preds = %16, %13
  %20 = fpext float %7 to double
  %21 = call double @pow(double noundef %20, double noundef %15) #64
  %22 = fptrunc double %21 to float
  %23 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store float %22, ptr %23, align 8, !tbaa !13
  %24 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 44, ptr %24, align 8, !tbaa !14
  %25 = load ptr, ptr @osp, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.ref_s, ptr %25, i64 -1
  store ptr %26, ptr @osp, align 8, !tbaa !7
  br label %27

27:                                               ; preds = %19, %16, %6, %1
  %28 = phi i32 [ 0, %19 ], [ %4, %1 ], [ -23, %6 ], [ -23, %16 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %28
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: write)
declare double @modf(double noundef, ptr nocapture noundef) local_unnamed_addr #41

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @pow(double noundef, double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zln(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fcmp ugt float %6, 0.000000e+00
  br i1 %7, label %8, label %13

8:                                                ; preds = %5
  %9 = fpext float %6 to double
  %10 = call double @log(double noundef %9) #64
  %11 = fptrunc double %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %8, %5, %1
  %14 = phi i32 [ 0, %8 ], [ %3, %1 ], [ -15, %5 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @zlog(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 4, !tbaa !103
  %7 = fcmp ugt float %6, 0.000000e+00
  br i1 %7, label %8, label %13

8:                                                ; preds = %5
  %9 = fpext float %6 to double
  %10 = call double @log10(double noundef %9) #64
  %11 = fptrunc double %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %8, %5, %1
  %14 = phi i32 [ 0, %8 ], [ %3, %1 ], [ -15, %5 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @log10(double noundef) local_unnamed_addr #40

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal i32 @zrand(ptr noundef %0) #35 {
  %2 = load i64, ptr @rand_state, align 8, !tbaa !18
  %3 = mul i64 %2, 1103515245
  %4 = add i64 %3, 12345
  %5 = mul i64 %4, 1103515245
  %6 = add i64 %5, 12345
  %7 = mul i64 %6, 1103515245
  %8 = add i64 %7, 12345
  store i64 %8, ptr @rand_state, align 8, !tbaa !18
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  %10 = load ptr, ptr @ostop, align 8, !tbaa !7
  %11 = icmp ugt ptr %9, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %21

13:                                               ; preds = %1
  %14 = shl i64 %4, 21
  %15 = shl i64 %6, 10
  %16 = add i64 %15, %14
  %17 = lshr i64 %8, 3
  %18 = add i64 %16, %17
  %19 = and i64 %18, 2147483647
  store i64 %19, ptr %9, align 8, !tbaa !13
  %20 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %20, align 8, !tbaa !14
  br label %21

21:                                               ; preds = %13, %12
  %22 = phi i32 [ -16, %12 ], [ 0, %13 ]
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @zsrand(ptr nocapture noundef readonly %0) #37 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  store i64 %7, ptr @rand_state, align 8, !tbaa !18
  %8 = load ptr, ptr @osp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %6, %1
  %11 = phi i32 [ 0, %6 ], [ -20, %1 ]
  ret i32 %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal i32 @zrrand(ptr noundef %0) #35 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %9

6:                                                ; preds = %1
  %7 = load i64, ptr @rand_state, align 8, !tbaa !18
  store i64 %7, ptr %2, align 8, !tbaa !13
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %8, align 8, !tbaa !14
  br label %9

9:                                                ; preds = %6, %5
  %10 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %10
}

; Function Attrs: nounwind optsize uwtable
define internal void @zmath_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zmath_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zbind(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = lshr i16 %4, 2
  %6 = and i16 %5, 63
  %7 = zext i16 %6 to i32
  switch i32 %7, label %69 [
    i32 0, label %8
    i32 10, label %8
  ]

8:                                                ; preds = %1, %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %10

10:                                               ; preds = %65, %8
  %11 = phi ptr [ %9, %8 ], [ %67, %65 ]
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 0, i32 2
  %13 = load i16, ptr %12, align 2, !tbaa !17
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %65, label %15

15:                                               ; preds = %60, %10
  %16 = phi i16 [ %63, %60 ], [ %13, %10 ]
  %17 = phi ptr [ %62, %60 ], [ %12, %10 ]
  %18 = phi ptr [ %61, %60 ], [ %11, %10 ]
  %19 = load ptr, ptr %18, align 8, !tbaa !13
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 1
  store ptr %20, ptr %18, align 8, !tbaa !13
  %21 = add i16 %16, -1
  store i16 %21, ptr %17, align 2, !tbaa !17
  %22 = getelementptr inbounds %struct.ref_s, ptr %19, i64 0, i32 1
  %23 = load i16, ptr %22, align 8, !tbaa !14
  %24 = zext i16 %23 to i32
  %25 = lshr i32 %24, 2
  %26 = and i32 %25, 63
  switch i32 %26, label %60 [
    i32 7, label %27
    i32 0, label %48
    i32 10, label %51
  ]

27:                                               ; preds = %15
  %28 = and i32 %24, 1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %60, label %30

30:                                               ; preds = %27
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %31 = load ptr, ptr @dsp, align 8, !tbaa !7
  %32 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef %31, ptr noundef nonnull %19, ptr noundef nonnull %2) #64
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %47

34:                                               ; preds = %30
  %35 = load ptr, ptr %2, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.ref_s, ptr %35, i64 0, i32 1
  %37 = load i16, ptr %36, align 8, !tbaa !14
  %38 = lshr i16 %37, 2
  %39 = and i16 %38, 63
  %40 = icmp ult i16 %39, 16
  %41 = icmp ne i16 %39, 9
  %42 = and i1 %40, %41
  %43 = and i16 %37, 1
  %44 = icmp eq i16 %43, 0
  %45 = or i1 %44, %42
  br i1 %45, label %47, label %46

46:                                               ; preds = %34
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %19, ptr noundef nonnull align 8 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !101
  br label %47

47:                                               ; preds = %46, %34, %30
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  br label %60

48:                                               ; preds = %15
  %49 = and i32 %24, 256
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %60, label %51

51:                                               ; preds = %48, %15
  %52 = and i16 %23, 1
  %53 = icmp ne i16 %52, 0
  %54 = load ptr, ptr @ostop, align 8
  %55 = icmp ult ptr %18, %54
  %56 = select i1 %53, i1 %55, i1 false
  br i1 %56, label %57, label %60

57:                                               ; preds = %51
  %58 = and i16 %23, -257
  store i16 %58, ptr %22, align 8, !tbaa !14
  %59 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %59, ptr noundef nonnull align 8 dereferenceable(16) %19, i64 16, i1 false), !tbaa.struct !101
  br label %60

60:                                               ; preds = %57, %51, %48, %47, %27, %15
  %61 = phi ptr [ %18, %15 ], [ %18, %51 ], [ %59, %57 ], [ %18, %48 ], [ %18, %27 ], [ %18, %47 ]
  %62 = getelementptr inbounds %struct.ref_s, ptr %61, i64 0, i32 2
  %63 = load i16, ptr %62, align 2, !tbaa !17
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %65, label %15, !llvm.loop !208

65:                                               ; preds = %60, %10
  %66 = phi ptr [ %11, %10 ], [ %61, %60 ]
  %67 = getelementptr inbounds %struct.ref_s, ptr %66, i64 -1
  %68 = icmp ugt ptr %67, %0
  br i1 %68, label %10, label %69, !llvm.loop !209

69:                                               ; preds = %65, %1
  %70 = phi i32 [ -20, %1 ], [ 0, %65 ]
  ret i32 %70
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrenttime(ptr noundef %0) #0 {
  %2 = alloca [2 x i64], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = call i32 (ptr, ...) @gs_get_clock(ptr noundef nonnull %2) #64
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %4, ptr @osp, align 8, !tbaa !7
  %5 = load ptr, ptr @ostop, align 8, !tbaa !7
  %6 = icmp ugt ptr %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %18

8:                                                ; preds = %1
  %9 = load i64, ptr %2, align 16, !tbaa !18
  %10 = sitofp i64 %9 to double
  %11 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 1
  %12 = load i64, ptr %11, align 8, !tbaa !18
  %13 = sitofp i64 %12 to double
  %14 = fdiv double %13, 6.000000e+04
  %15 = call double @llvm.fmuladd.f64(double %10, double 1.440000e+03, double %14)
  %16 = fptrunc double %15 to float
  store float %16, ptr %4, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %17, align 8, !tbaa !14
  br label %18

18:                                               ; preds = %8, %7
  %19 = phi i32 [ -16, %7 ], [ 0, %8 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zgetenv(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 52
  br i1 %6, label %7, label %31

7:                                                ; preds = %1
  %8 = and i32 %4, 512
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %7
  %11 = tail call ptr @ref_to_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.249) #64
  %12 = icmp eq ptr %11, null
  br i1 %12, label %31, label %13

13:                                               ; preds = %10
  %14 = tail call ptr @getenv(ptr noundef nonnull %11) #62
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %16 = load i16, ptr %15, align 2, !tbaa !17
  %17 = zext i16 %16 to i32
  %18 = add nuw nsw i32 %17, 1
  tail call void @alloc_free(ptr noundef nonnull %11, i32 noundef %18, i32 noundef 1, ptr noundef nonnull @.str.249) #64
  %19 = icmp eq ptr %14, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %13
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %2, align 8, !tbaa !14
  br label %31

21:                                               ; preds = %13
  %22 = tail call i32 (ptr, ptr, ptr, ...) @string_to_ref(ptr noundef nonnull %14, ptr noundef nonnull %0, ptr noundef nonnull @.str.1.250) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %25, ptr @osp, align 8, !tbaa !7
  %26 = load ptr, ptr @ostop, align 8, !tbaa !7
  %27 = icmp ugt ptr %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %31

29:                                               ; preds = %24
  store i16 1, ptr %25, align 8, !tbaa !13
  %30 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %30, align 8, !tbaa !14
  br label %31

31:                                               ; preds = %29, %28, %21, %20, %10, %7, %1
  %32 = phi i32 [ 0, %20 ], [ -16, %28 ], [ 0, %29 ], [ -20, %1 ], [ -7, %7 ], [ -25, %10 ], [ %22, %21 ]
  ret i32 %32
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @zsetdebug(ptr nocapture noundef readonly %0) #37 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 52
  br i1 %6, label %7, label %18

7:                                                ; preds = %1
  %8 = and i32 %4, 512
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 252
  %14 = icmp eq i16 %13, 4
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = load ptr, ptr @osp, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.ref_s, ptr %16, i64 -2
  store ptr %17, ptr @osp, align 8, !tbaa !7
  br label %18

18:                                               ; preds = %15, %10, %7, %1
  %19 = phi i32 [ 0, %15 ], [ -20, %1 ], [ -7, %7 ], [ -20, %10 ]
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztype1encrypt(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @type1crypt(ptr noundef %0, ptr noundef nonnull @gs_type1_encrypt) #62, !range !200
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @type1crypt(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = alloca i16, align 2
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %5 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 20
  br i1 %8, label %9, label %50

9:                                                ; preds = %2
  %10 = load i64, ptr %4, align 8, !tbaa !13
  %11 = trunc i64 %10 to i16
  store i16 %11, ptr %3, align 2, !tbaa !102
  %12 = icmp ult i64 %10, 65536
  br i1 %12, label %13, label %50

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %15 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !14
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 252
  %19 = icmp eq i32 %18, 52
  br i1 %19, label %20, label %50

20:                                               ; preds = %13
  %21 = and i32 %17, 512
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %50, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %25 = load i16, ptr %24, align 8, !tbaa !14
  %26 = zext i16 %25 to i32
  %27 = and i32 %26, 252
  %28 = icmp eq i32 %27, 52
  br i1 %28, label %29, label %50

29:                                               ; preds = %23
  %30 = and i32 %26, 256
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %50, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %34 = load i16, ptr %33, align 2, !tbaa !17
  %35 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %36 = load i16, ptr %35, align 2, !tbaa !17
  %37 = icmp ult i16 %34, %36
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = zext i16 %36 to i32
  %40 = load ptr, ptr %0, align 8, !tbaa !13
  %41 = load ptr, ptr %14, align 8, !tbaa !13
  %42 = call i32 %1(ptr noundef %40, ptr noundef %41, i32 noundef %39, ptr noundef nonnull %3) #64
  %43 = load i16, ptr %3, align 2, !tbaa !102
  %44 = zext i16 %43 to i64
  store i64 %44, ptr %4, align 8, !tbaa !13
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %14, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %45 = load i16, ptr %33, align 2, !tbaa !17
  store i16 %45, ptr %35, align 2, !tbaa !17
  %46 = load i16, ptr %15, align 8, !tbaa !14
  %47 = or i16 %46, -32768
  store i16 %47, ptr %15, align 8, !tbaa !14
  %48 = load ptr, ptr @osp, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.ref_s, ptr %48, i64 -1
  store ptr %49, ptr @osp, align 8, !tbaa !7
  br label %50

50:                                               ; preds = %38, %32, %29, %23, %20, %13, %9, %2
  %51 = phi i32 [ 0, %38 ], [ -20, %2 ], [ -15, %9 ], [ -20, %13 ], [ -7, %20 ], [ -20, %23 ], [ -7, %29 ], [ -15, %32 ]
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %3) #65
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztype1decrypt(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @type1crypt(ptr noundef %0, ptr noundef nonnull @gs_type1_decrypt) #62, !range !200
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zusertime(ptr noundef %0) #0 {
  %2 = alloca [2 x i64], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = call i32 (ptr, ...) @gs_get_clock(ptr noundef nonnull %2) #64
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %4, ptr @osp, align 8, !tbaa !7
  %5 = load ptr, ptr @ostop, align 8, !tbaa !7
  %6 = icmp ugt ptr %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %15

8:                                                ; preds = %1
  %9 = load i64, ptr %2, align 16, !tbaa !18
  %10 = mul nsw i64 %9, 86400000
  %11 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 1
  %12 = load i64, ptr %11, align 8, !tbaa !18
  %13 = add nsw i64 %10, %12
  store i64 %13, ptr %4, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %14, align 8, !tbaa !14
  br label %15

15:                                               ; preds = %8, %7
  %16 = phi i32 [ -16, %7 ], [ 0, %8 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal void @zmisc_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zmisc_op_init.my_defs) #64
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal i32 @zcurrentpacking(ptr noundef %0) #35 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

6:                                                ; preds = %1
  %7 = load i32, ptr @array_packing, align 4, !tbaa !11
  %8 = trunc i32 %7 to i16
  store i16 %8, ptr %2, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %9, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %6, %5
  %11 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zpackedarray(ptr noundef %0) #0 {
  %2 = tail call i32 @make_array(ptr noundef %0, i32 noundef 10, i32 noundef 514, ptr noundef nonnull @.str.260) #64
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %21, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %6 = load i16, ptr %5, align 2, !tbaa !17
  %7 = zext i16 %6 to i64
  %8 = load ptr, ptr @osbot, align 8, !tbaa !7
  %9 = ptrtoint ptr %0 to i64
  %10 = ptrtoint ptr %8 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 4
  %13 = icmp ult i64 %12, %7
  br i1 %13, label %21, label %14

14:                                               ; preds = %4
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = sub nsw i64 0, %7
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %16
  %18 = tail call i32 (ptr, ptr, i64, ...) @refcpy(ptr noundef %15, ptr noundef nonnull %17, i64 noundef %7) #64
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %17, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %19 = load ptr, ptr @osp, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 %16
  store ptr %20, ptr @osp, align 8, !tbaa !7
  br label %21

21:                                               ; preds = %14, %4, %1
  %22 = phi i32 [ %2, %1 ], [ -17, %4 ], [ 0, %14 ]
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @zsetpacking(ptr nocapture noundef readonly %0) #37 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 4
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = load i16, ptr %0, align 8, !tbaa !13
  %8 = zext i16 %7 to i32
  store i32 %8, ptr @array_packing, align 4, !tbaa !11
  %9 = load ptr, ptr @osp, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.ref_s, ptr %9, i64 -1
  store ptr %10, ptr @osp, align 8, !tbaa !7
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i32 [ 0, %6 ], [ -20, %1 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal void @zpacked_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zpacked_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zeq(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = lshr i16 %4, 2
  %6 = and i16 %5, 63
  %7 = zext i16 %6 to i32
  switch i32 %7, label %17 [
    i32 13, label %8
    i32 0, label %8
    i32 10, label %8
    i32 2, label %11
  ]

8:                                                ; preds = %1, %1, %1
  %9 = and i16 %4, 512
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %38, label %17

11:                                               ; preds = %1
  %12 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 0, i32 1
  %14 = load i16, ptr %13, align 8, !tbaa !14
  %15 = and i16 %14, 512
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %38, label %17

17:                                               ; preds = %11, %8, %1
  %18 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %19 = load i16, ptr %18, align 8, !tbaa !14
  %20 = lshr i16 %19, 2
  %21 = and i16 %20, 63
  %22 = zext i16 %21 to i32
  switch i32 %22, label %32 [
    i32 13, label %23
    i32 0, label %23
    i32 10, label %23
    i32 2, label %26
  ]

23:                                               ; preds = %17, %17, %17
  %24 = and i16 %19, 512
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %38, label %32

26:                                               ; preds = %17
  %27 = tail call ptr @dict_access_ref(ptr noundef nonnull %2) #64
  %28 = getelementptr inbounds %struct.ref_s, ptr %27, i64 0, i32 1
  %29 = load i16, ptr %28, align 8, !tbaa !14
  %30 = and i16 %29, 512
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %38, label %32

32:                                               ; preds = %26, %23, %17
  %33 = tail call i32 (ptr, ptr, ...) @obj_eq(ptr noundef nonnull %2, ptr noundef nonnull %0) #64
  %34 = icmp ne i32 %33, 0
  %35 = zext i1 %34 to i16
  store i16 %35, ptr %2, align 8, !tbaa !13
  store i16 4, ptr %18, align 8, !tbaa !14
  %36 = load ptr, ptr @osp, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.ref_s, ptr %36, i64 -1
  store ptr %37, ptr @osp, align 8, !tbaa !7
  br label %38

38:                                               ; preds = %32, %26, %23, %11, %8
  %39 = phi i32 [ 0, %32 ], [ -7, %8 ], [ -7, %11 ], [ -7, %23 ], [ -7, %26 ]
  ret i32 %39
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zne(ptr noundef %0) #0 {
  %2 = tail call i32 @zeq(ptr noundef %0) #62, !range !210
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %6 = load i16, ptr %5, align 8, !tbaa !13
  %7 = xor i16 %6, 1
  store i16 %7, ptr %5, align 8, !tbaa !13
  br label %8

8:                                                ; preds = %4, %1
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zge(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @obj_compare(ptr noundef %0, i32 noundef 6) #62, !range !211
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = trunc i32 %2 to i16
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store i16 %5, ptr %6, align 8, !tbaa !13
  %7 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 4, ptr %7, align 8, !tbaa !14
  %8 = load ptr, ptr @osp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %4, %1
  %11 = phi i32 [ 0, %4 ], [ %2, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @obj_compare(ptr nocapture noundef readonly %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = zext i16 %5 to i32
  %7 = lshr i32 %6, 2
  %8 = and i32 %7, 63
  switch i32 %8, label %78 [
    i32 5, label %9
    i32 11, label %28
    i32 13, label %40
  ]

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %11 = load i16, ptr %10, align 8, !tbaa !14
  %12 = lshr i16 %11, 2
  %13 = and i16 %12, 63
  %14 = zext i16 %13 to i32
  switch i32 %14, label %78 [
    i32 5, label %15
    i32 11, label %24
  ]

15:                                               ; preds = %9
  %16 = load i64, ptr %3, align 8, !tbaa !13
  %17 = load i64, ptr %0, align 8, !tbaa !13
  %18 = icmp sgt i64 %16, %17
  %19 = icmp eq i64 %16, %17
  %20 = zext i1 %19 to i32
  %21 = select i1 %18, i32 2, i32 %20
  %22 = lshr i32 %1, %21
  %23 = and i32 %22, 1
  br label %78

24:                                               ; preds = %9
  %25 = load i64, ptr %3, align 8, !tbaa !13
  %26 = sitofp i64 %25 to float
  %27 = load float, ptr %0, align 8, !tbaa !13
  br label %65

28:                                               ; preds = %2
  %29 = load float, ptr %3, align 8, !tbaa !13
  %30 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %31 = load i16, ptr %30, align 8, !tbaa !14
  %32 = lshr i16 %31, 2
  %33 = and i16 %32, 63
  %34 = zext i16 %33 to i32
  switch i32 %34, label %78 [
    i32 5, label %35
    i32 11, label %38
  ]

35:                                               ; preds = %28
  %36 = load i64, ptr %0, align 8, !tbaa !13
  %37 = sitofp i64 %36 to float
  br label %65

38:                                               ; preds = %28
  %39 = load float, ptr %0, align 8, !tbaa !13
  br label %65

40:                                               ; preds = %2
  %41 = and i32 %6, 512
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %78, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %45 = load i16, ptr %44, align 8, !tbaa !14
  %46 = zext i16 %45 to i32
  %47 = and i32 %46, 252
  %48 = icmp eq i32 %47, 52
  br i1 %48, label %49, label %78

49:                                               ; preds = %43
  %50 = and i32 %46, 512
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %78, label %52

52:                                               ; preds = %49
  %53 = load ptr, ptr %3, align 8, !tbaa !13
  %54 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %55 = load i16, ptr %54, align 2, !tbaa !17
  %56 = zext i16 %55 to i32
  %57 = load ptr, ptr %0, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %59 = load i16, ptr %58, align 2, !tbaa !17
  %60 = zext i16 %59 to i32
  %61 = tail call i32 (ptr, i32, ptr, i32, ...) @bytes_compare(ptr noundef %53, i32 noundef %56, ptr noundef %57, i32 noundef %60) #64
  %62 = add nsw i32 %61, 1
  %63 = lshr i32 %1, %62
  %64 = and i32 %63, 1
  br label %78

65:                                               ; preds = %38, %35, %24
  %66 = phi float [ %29, %38 ], [ %29, %35 ], [ %26, %24 ]
  %67 = phi float [ %39, %38 ], [ %37, %35 ], [ %27, %24 ]
  %68 = fcmp ogt float %66, %67
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = ashr i32 %1, 2
  br label %75

71:                                               ; preds = %65
  %72 = fcmp oeq float %66, %67
  br i1 %72, label %73, label %75

73:                                               ; preds = %71
  %74 = ashr i32 %1, 1
  br label %75

75:                                               ; preds = %73, %71, %69
  %76 = phi i32 [ %70, %69 ], [ %74, %73 ], [ %1, %71 ]
  %77 = and i32 %76, 1
  br label %78

78:                                               ; preds = %75, %52, %49, %43, %40, %28, %15, %9, %2
  %79 = phi i32 [ %64, %52 ], [ %77, %75 ], [ %23, %15 ], [ -20, %9 ], [ -20, %28 ], [ -7, %40 ], [ -20, %43 ], [ -7, %49 ], [ -20, %2 ]
  ret i32 %79
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zgt(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @obj_compare(ptr noundef %0, i32 noundef 4) #62, !range !211
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = trunc i32 %2 to i16
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store i16 %5, ptr %6, align 8, !tbaa !13
  %7 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 4, ptr %7, align 8, !tbaa !14
  %8 = load ptr, ptr @osp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %4, %1
  %11 = phi i32 [ 0, %4 ], [ %2, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zle(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @obj_compare(ptr noundef %0, i32 noundef 3) #62, !range !211
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = trunc i32 %2 to i16
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store i16 %5, ptr %6, align 8, !tbaa !13
  %7 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 4, ptr %7, align 8, !tbaa !14
  %8 = load ptr, ptr @osp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %4, %1
  %11 = phi i32 [ 0, %4 ], [ %2, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zlt(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @obj_compare(ptr noundef %0, i32 noundef 1) #62, !range !211
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = trunc i32 %2 to i16
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store i16 %5, ptr %6, align 8, !tbaa !13
  %7 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 4, ptr %7, align 8, !tbaa !14
  %8 = load ptr, ptr @osp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -1
  store ptr %9, ptr @osp, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %4, %1
  %11 = phi i32 [ 0, %4 ], [ %2, %1 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmax(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @obj_compare(ptr noundef %0, i32 noundef 1) #62, !range !211
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %8

8:                                                ; preds = %6, %4
  %9 = load ptr, ptr @osp, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.ref_s, ptr %9, i64 -1
  store ptr %10, ptr @osp, align 8, !tbaa !7
  br label %11

11:                                               ; preds = %8, %1
  %12 = phi i32 [ 0, %8 ], [ %2, %1 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmin(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @obj_compare(ptr noundef %0, i32 noundef 4) #62, !range !211
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %8

8:                                                ; preds = %6, %4
  %9 = load ptr, ptr @osp, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.ref_s, ptr %9, i64 -1
  store ptr %10, ptr @osp, align 8, !tbaa !7
  br label %11

11:                                               ; preds = %8, %1
  %12 = phi i32 [ 0, %8 ], [ %2, %1 ]
  ret i32 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zand(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  %12 = shl nuw nsw i32 %11, 2
  %13 = icmp eq i32 %12, %6
  br i1 %13, label %14, label %26

14:                                               ; preds = %1
  switch i32 %11, label %26 [
    i32 1, label %15
    i32 5, label %19
  ]

15:                                               ; preds = %14
  %16 = load i16, ptr %0, align 8, !tbaa !13
  %17 = load i16, ptr %2, align 8, !tbaa !13
  %18 = and i16 %17, %16
  store i16 %18, ptr %2, align 8, !tbaa !13
  br label %23

19:                                               ; preds = %14
  %20 = load i64, ptr %0, align 8, !tbaa !13
  %21 = load i64, ptr %2, align 8, !tbaa !13
  %22 = and i64 %21, %20
  store i64 %22, ptr %2, align 8, !tbaa !13
  br label %23

23:                                               ; preds = %19, %15
  %24 = load ptr, ptr @osp, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 -1
  store ptr %25, ptr @osp, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %23, %14, %1
  %27 = phi i32 [ 0, %23 ], [ -20, %1 ], [ -20, %14 ]
  ret i32 %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @znot(ptr nocapture noundef %0) #28 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %14 [
    i32 1, label %7
    i32 5, label %11
  ]

7:                                                ; preds = %1
  %8 = load i16, ptr %0, align 8, !tbaa !13
  %9 = icmp eq i16 %8, 0
  %10 = zext i1 %9 to i16
  store i16 %10, ptr %0, align 8, !tbaa !13
  br label %14

11:                                               ; preds = %1
  %12 = load i64, ptr %0, align 8, !tbaa !13
  %13 = xor i64 %12, -1
  store i64 %13, ptr %0, align 8, !tbaa !13
  br label %14

14:                                               ; preds = %11, %7, %1
  %15 = phi i32 [ -20, %1 ], [ 0, %11 ], [ 0, %7 ]
  ret i32 %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zor(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  %12 = shl nuw nsw i32 %11, 2
  %13 = icmp eq i32 %12, %6
  br i1 %13, label %14, label %26

14:                                               ; preds = %1
  switch i32 %11, label %26 [
    i32 1, label %15
    i32 5, label %19
  ]

15:                                               ; preds = %14
  %16 = load i16, ptr %0, align 8, !tbaa !13
  %17 = load i16, ptr %2, align 8, !tbaa !13
  %18 = or i16 %17, %16
  store i16 %18, ptr %2, align 8, !tbaa !13
  br label %23

19:                                               ; preds = %14
  %20 = load i64, ptr %0, align 8, !tbaa !13
  %21 = load i64, ptr %2, align 8, !tbaa !13
  %22 = or i64 %21, %20
  store i64 %22, ptr %2, align 8, !tbaa !13
  br label %23

23:                                               ; preds = %19, %15
  %24 = load ptr, ptr @osp, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 -1
  store ptr %25, ptr @osp, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %23, %14, %1
  %27 = phi i32 [ 0, %23 ], [ -20, %1 ], [ -20, %14 ]
  ret i32 %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zxor(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  %12 = shl nuw nsw i32 %11, 2
  %13 = icmp eq i32 %12, %6
  br i1 %13, label %14, label %26

14:                                               ; preds = %1
  switch i32 %11, label %26 [
    i32 1, label %15
    i32 5, label %19
  ]

15:                                               ; preds = %14
  %16 = load i16, ptr %0, align 8, !tbaa !13
  %17 = load i16, ptr %2, align 8, !tbaa !13
  %18 = xor i16 %17, %16
  store i16 %18, ptr %2, align 8, !tbaa !13
  br label %23

19:                                               ; preds = %14
  %20 = load i64, ptr %0, align 8, !tbaa !13
  %21 = load i64, ptr %2, align 8, !tbaa !13
  %22 = xor i64 %21, %20
  store i64 %22, ptr %2, align 8, !tbaa !13
  br label %23

23:                                               ; preds = %19, %15
  %24 = load ptr, ptr @osp, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 -1
  store ptr %25, ptr @osp, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %23, %14, %1
  %27 = phi i32 [ 0, %23 ], [ -20, %1 ], [ -20, %14 ]
  ret i32 %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zbitshift(ptr nocapture noundef %0) #32 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 20
  br i1 %6, label %7, label %29

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = and i16 %9, 252
  %11 = icmp eq i16 %10, 20
  br i1 %11, label %12, label %29

12:                                               ; preds = %7
  %13 = load i64, ptr %0, align 8, !tbaa !13
  %14 = add i64 %13, -32
  %15 = icmp ult i64 %14, -63
  br i1 %15, label %25, label %16

16:                                               ; preds = %12
  %17 = and i64 %13, 2147483648
  %18 = icmp eq i64 %17, 0
  %19 = load i64, ptr %2, align 8, !tbaa !13
  br i1 %18, label %23, label %20

20:                                               ; preds = %16
  %21 = sub nsw i64 0, %13
  %22 = lshr i64 %19, %21
  br label %25

23:                                               ; preds = %16
  %24 = shl i64 %19, %13
  br label %25

25:                                               ; preds = %23, %20, %12
  %26 = phi i64 [ %22, %20 ], [ %24, %23 ], [ 0, %12 ]
  store i64 %26, ptr %2, align 8, !tbaa !13
  %27 = load ptr, ptr @osp, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.ref_s, ptr %27, i64 -1
  store ptr %28, ptr @osp, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %25, %7, %1
  %30 = phi i32 [ 0, %25 ], [ -20, %1 ], [ -20, %7 ]
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal void @zrelbit_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zrelbit_op_init.my_defs) #64
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @zpop(ptr noundef readnone %0) #36 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @osp, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  store ptr %6, ptr @osp, align 8, !tbaa !7
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi i32 [ 0, %4 ], [ -17, %1 ]
  ret i32 %8
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @zexch(ptr noundef %0) #42 {
  %2 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %3 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 1), align 8, !tbaa !7
  %4 = icmp ugt ptr %3, %0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %6, i64 16, i1 false), !tbaa.struct !101
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  br label %7

7:                                                ; preds = %5, %1
  %8 = phi i32 [ 0, %5 ], [ -17, %1 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  ret i32 %8
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zdup(ptr noundef %0) #30 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %5, ptr @osp, align 8, !tbaa !7
  %6 = load ptr, ptr @ostop, align 8, !tbaa !7
  %7 = icmp ugt ptr %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %4
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

9:                                                ; preds = %4
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %10

10:                                               ; preds = %9, %8, %1
  %11 = phi i32 [ -16, %8 ], [ 0, %9 ], [ -17, %1 ]
  ret i32 %11
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @zindex(ptr noundef %0) #42 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %19

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr @osbot, align 8, !tbaa !7
  %9 = ptrtoint ptr %0 to i64
  %10 = ptrtoint ptr %8 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 4
  %13 = icmp ult i64 %7, %12
  br i1 %13, label %14, label %19

14:                                               ; preds = %6
  %15 = xor i64 %7, -1
  %16 = shl i64 %15, 32
  %17 = ashr exact i64 %16, 32
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %17
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %18, i64 16, i1 false), !tbaa.struct !101
  br label %19

19:                                               ; preds = %14, %6, %1
  %20 = phi i32 [ 0, %14 ], [ -20, %1 ], [ -15, %6 ]
  ret i32 %20
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zroll(ptr noundef %0) #21 {
  %2 = alloca %struct.ref_s, align 8
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 20
  br i1 %7, label %8, label %79

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = and i16 %10, 252
  %12 = icmp eq i16 %11, 20
  br i1 %12, label %13, label %79

13:                                               ; preds = %8
  %14 = load i64, ptr %3, align 8, !tbaa !13
  %15 = load ptr, ptr @osbot, align 8, !tbaa !7
  %16 = ptrtoint ptr %3 to i64
  %17 = ptrtoint ptr %15 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 4
  %20 = icmp ugt i64 %14, %19
  br i1 %20, label %79, label %21

21:                                               ; preds = %13
  %22 = trunc i64 %14 to i32
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = load ptr, ptr @osp, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.ref_s, ptr %25, i64 -2
  store ptr %26, ptr @osp, align 8, !tbaa !7
  br label %79

27:                                               ; preds = %21
  %28 = load i64, ptr %0, align 8, !tbaa !13
  %29 = shl i64 %14, 32
  %30 = ashr exact i64 %29, 32
  %31 = srem i64 %28, %30
  %32 = trunc i64 %31 to i32
  %33 = load ptr, ptr @osp, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.ref_s, ptr %33, i64 -2
  store ptr %34, ptr @osp, align 8, !tbaa !7
  %35 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %36 = icmp slt i32 %32, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %27
  %38 = add nsw i32 %32, %22
  br label %41

39:                                               ; preds = %27
  %40 = icmp eq i32 %32, 0
  br i1 %40, label %79, label %41

41:                                               ; preds = %39, %37
  %42 = phi i32 [ %38, %37 ], [ %32, %39 ]
  %43 = sub i32 %22, %42
  %44 = sub nsw i64 0, %30
  %45 = getelementptr inbounds %struct.ref_s, ptr %35, i64 %44
  %46 = getelementptr inbounds %struct.ref_s, ptr %45, i64 1
  br label %47

47:                                               ; preds = %73, %41
  %48 = phi i64 [ 0, %41 ], [ %77, %73 ]
  %49 = phi i32 [ %22, %41 ], [ %75, %73 ]
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  %50 = getelementptr inbounds %struct.ref_s, ptr %46, i64 %48
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) %50, i64 16, i1 false), !tbaa.struct !101
  %51 = add nsw i32 %49, -1
  %52 = trunc i64 %48 to i32
  %53 = add nsw i32 %43, %52
  %54 = srem i32 %53, %22
  %55 = zext i32 %54 to i64
  %56 = icmp eq i64 %48, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %47
  %58 = shl i64 %48, 32
  %59 = ashr exact i64 %58, 32
  br label %73

60:                                               ; preds = %60, %47
  %61 = phi i32 [ %70, %60 ], [ %54, %47 ]
  %62 = phi i32 [ %68, %60 ], [ %51, %47 ]
  %63 = phi i32 [ %61, %60 ], [ %52, %47 ]
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.ref_s, ptr %46, i64 %64
  %66 = sext i32 %61 to i64
  %67 = getelementptr inbounds %struct.ref_s, ptr %46, i64 %66
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %65, ptr noundef nonnull align 8 dereferenceable(16) %67, i64 16, i1 false), !tbaa.struct !101
  %68 = add nsw i32 %62, -1
  %69 = add nsw i32 %43, %61
  %70 = srem i32 %69, %22
  %71 = zext i32 %70 to i64
  %72 = icmp eq i64 %48, %71
  br i1 %72, label %73, label %60, !llvm.loop !212

73:                                               ; preds = %60, %57
  %74 = phi i64 [ %59, %57 ], [ %66, %60 ]
  %75 = phi i32 [ %51, %57 ], [ %68, %60 ]
  %76 = getelementptr inbounds %struct.ref_s, ptr %46, i64 %74
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %76, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %77 = add nuw i64 %48, 1
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  %78 = icmp eq i32 %75, 0
  br i1 %78, label %79, label %47, !llvm.loop !213

79:                                               ; preds = %73, %39, %24, %13, %8, %1
  %80 = phi i32 [ 0, %24 ], [ -20, %1 ], [ -20, %8 ], [ -15, %13 ], [ 0, %39 ], [ 0, %73 ]
  ret i32 %80
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal i32 @zclear_stack(ptr nocapture readnone %0) #36 {
  %2 = load ptr, ptr @osbot, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -1
  store ptr %3, ptr @osp, align 8, !tbaa !7
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable
define internal i32 @zcount(ptr noundef %0) #35 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %13

6:                                                ; preds = %1
  %7 = load ptr, ptr @osbot, align 8, !tbaa !7
  %8 = ptrtoint ptr %2 to i64
  %9 = ptrtoint ptr %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 4
  store i64 %11, ptr %2, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %12, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %6, %5
  %14 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %14
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal i32 @zcleartomark(ptr noundef %0) #34 {
  %2 = load ptr, ptr @osbot, align 8, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %14, label %4

4:                                                ; preds = %12, %1
  %5 = phi ptr [ %10, %12 ], [ %0, %1 ]
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 24
  %10 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  br i1 %9, label %11, label %12

11:                                               ; preds = %4
  %.lcssa = phi ptr [ %10, %4 ]
  store ptr %.lcssa, ptr @osp, align 8, !tbaa !7
  br label %14

12:                                               ; preds = %4
  %13 = icmp ult ptr %10, %2
  br i1 %13, label %14, label %4, !llvm.loop !214

14:                                               ; preds = %12, %11, %1
  %15 = phi i32 [ 0, %11 ], [ -24, %1 ], [ -24, %12 ]
  ret i32 %15
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zcounttomark(ptr noundef %0) #29 {
  %2 = load ptr, ptr @osbot, align 8, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %25, label %4

4:                                                ; preds = %22, %1
  %5 = phi ptr [ %23, %22 ], [ %0, %1 ]
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 24
  br i1 %9, label %10, label %22

10:                                               ; preds = %4
  %.lcssa = phi ptr [ %5, %4 ]
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %11, ptr @osp, align 8, !tbaa !7
  %12 = load ptr, ptr @ostop, align 8, !tbaa !7
  %13 = icmp ugt ptr %11, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %25

15:                                               ; preds = %10
  %16 = ptrtoint ptr %11 to i64
  %17 = ptrtoint ptr %.lcssa to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 4
  %20 = add nsw i64 %19, -1
  store i64 %20, ptr %11, align 8, !tbaa !13
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %21, align 8, !tbaa !14
  br label %25

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  %24 = icmp ult ptr %23, %2
  br i1 %24, label %25, label %4, !llvm.loop !215

25:                                               ; preds = %22, %15, %14, %1
  %26 = phi i32 [ -16, %14 ], [ 0, %15 ], [ -24, %1 ], [ -24, %22 ]
  ret i32 %26
}

; Function Attrs: nounwind optsize uwtable
define internal void @zstack_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zstack_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zstring(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  %8 = icmp ugt i64 %7, 4294967295
  br i1 %8, label %16, label %9

9:                                                ; preds = %6
  %10 = trunc i64 %7 to i32
  %11 = tail call ptr @alloc(i32 noundef %10, i32 noundef 1, ptr noundef nonnull @.str.302) #64
  %12 = icmp eq ptr %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  store ptr %11, ptr %0, align 8, !tbaa !13
  store i16 822, ptr %2, align 8, !tbaa !14
  %14 = trunc i64 %7 to i16
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  store i16 %14, ptr %15, align 2, !tbaa !17
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %11, i8 0, i64 %7, i1 false)
  br label %16

16:                                               ; preds = %13, %9, %6, %1
  %17 = phi i32 [ 0, %13 ], [ -20, %1 ], [ -15, %6 ], [ -25, %9 ]
  ret i32 %17
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zanchorsearch(ptr noundef %0) #43 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %4 = load i16, ptr %3, align 2, !tbaa !17
  %5 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 52
  br i1 %9, label %10, label %43

10:                                               ; preds = %1
  %11 = and i32 %7, 512
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %43, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 252
  %18 = icmp eq i32 %17, 52
  br i1 %18, label %19, label %43

19:                                               ; preds = %13
  %20 = and i32 %16, 512
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %19
  %23 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %24 = load i16, ptr %23, align 2, !tbaa !17
  %25 = icmp ugt i16 %4, %24
  br i1 %25, label %42, label %26

26:                                               ; preds = %22
  %27 = load ptr, ptr %2, align 8, !tbaa !13
  %28 = load ptr, ptr %0, align 8, !tbaa !13
  %29 = zext i16 %4 to i64
  %30 = tail call i32 @bcmp(ptr %27, ptr %28, i64 %29)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %26
  %33 = or i16 %6, -32768
  store i16 %33, ptr %5, align 8, !tbaa !14
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  store i16 %4, ptr %3, align 2, !tbaa !17
  %34 = getelementptr inbounds i8, ptr %27, i64 %29
  store ptr %34, ptr %2, align 8, !tbaa !13
  %35 = sub i16 %24, %4
  store i16 %35, ptr %23, align 2, !tbaa !17
  %36 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %36, ptr @osp, align 8, !tbaa !7
  %37 = load ptr, ptr @ostop, align 8, !tbaa !7
  %38 = icmp ugt ptr %36, %37
  br i1 %38, label %39, label %40

39:                                               ; preds = %32
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %43

40:                                               ; preds = %32
  store i16 1, ptr %36, align 8, !tbaa !13
  %41 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 4, ptr %41, align 8, !tbaa !14
  br label %43

42:                                               ; preds = %26, %22
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %14, align 8, !tbaa !14
  br label %43

43:                                               ; preds = %42, %40, %39, %19, %13, %10, %1
  %44 = phi i32 [ -16, %39 ], [ -20, %1 ], [ -7, %10 ], [ -20, %13 ], [ -7, %19 ], [ 0, %42 ], [ 0, %40 ]
  ret i32 %44
}

; Function Attrs: nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zsearch(ptr noundef %0) #44 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %4 = load i16, ptr %3, align 2, !tbaa !17
  %5 = zext i16 %4 to i32
  %6 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 52
  br i1 %10, label %11, label %65

11:                                               ; preds = %1
  %12 = and i32 %8, 512
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !14
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 252
  %19 = icmp eq i32 %18, 52
  br i1 %19, label %20, label %65

20:                                               ; preds = %14
  %21 = and i32 %17, 512
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %65, label %23

23:                                               ; preds = %20
  %24 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %25 = load i16, ptr %24, align 2, !tbaa !17
  %26 = icmp ugt i16 %4, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %15, align 8, !tbaa !14
  br label %65

28:                                               ; preds = %23
  %29 = zext i16 %25 to i32
  %30 = sub nsw i32 %29, %5
  %31 = load ptr, ptr %2, align 8, !tbaa !13
  %32 = load ptr, ptr %0, align 8, !tbaa !13
  %33 = zext i16 %4 to i64
  br label %34

34:                                               ; preds = %60, %28
  %35 = phi i32 [ %30, %28 ], [ %62, %60 ]
  %36 = phi ptr [ %31, %28 ], [ %61, %60 ]
  %37 = tail call i32 @bcmp(ptr %36, ptr %32, i64 %33)
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %60

39:                                               ; preds = %34
  %.lcssa2 = phi i32 [ %35, %34 ]
  %.lcssa = phi ptr [ %36, %34 ]
  %40 = or i16 %7, -32768
  store i16 %40, ptr %15, align 8, !tbaa !14
  store ptr %.lcssa, ptr %0, align 8, !tbaa !13
  %41 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %41, ptr @osp, align 8, !tbaa !7
  %42 = load ptr, ptr @ostop, align 8, !tbaa !7
  %43 = icmp ugt ptr %41, %42
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %65

45:                                               ; preds = %39
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %41, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %46 = load ptr, ptr %41, align 8, !tbaa !13
  %47 = ptrtoint ptr %.lcssa to i64
  %48 = ptrtoint ptr %46 to i64
  %49 = sub i64 %47, %48
  %50 = trunc i64 %49 to i16
  %51 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 2
  store i16 %50, ptr %51, align 2, !tbaa !17
  %52 = getelementptr inbounds i8, ptr %.lcssa, i64 %33
  store ptr %52, ptr %2, align 8, !tbaa !13
  %53 = trunc i32 %.lcssa2 to i16
  store i16 %53, ptr %24, align 2, !tbaa !17
  %54 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %54, ptr @osp, align 8, !tbaa !7
  %55 = load ptr, ptr @ostop, align 8, !tbaa !7
  %56 = icmp ugt ptr %54, %55
  br i1 %56, label %57, label %58

57:                                               ; preds = %45
  store ptr %41, ptr @osp, align 8, !tbaa !7
  br label %65

58:                                               ; preds = %45
  store i16 1, ptr %54, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 4, ptr %59, align 8, !tbaa !14
  br label %65

60:                                               ; preds = %34
  %61 = getelementptr inbounds i8, ptr %36, i64 1
  %62 = add i32 %35, -1
  %63 = icmp eq i32 %35, 0
  br i1 %63, label %64, label %34, !llvm.loop !216

64:                                               ; preds = %60
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %15, align 8, !tbaa !14
  br label %65

65:                                               ; preds = %64, %58, %57, %44, %27, %20, %14, %11, %1
  %66 = phi i32 [ 0, %27 ], [ 0, %64 ], [ -16, %44 ], [ -16, %57 ], [ 0, %58 ], [ -20, %1 ], [ -7, %11 ], [ -20, %14 ], [ -7, %20 ]
  ret i32 %66
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztoken(ptr noundef %0) #0 {
  %2 = alloca %struct.stream_s, align 8
  %3 = alloca %struct.ref_s, align 8
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = zext i16 %5 to i32
  %7 = lshr i32 %6, 2
  %8 = and i32 %7, 63
  switch i32 %8, label %47 [
    i32 3, label %9
    i32 13, label %11
  ]

9:                                                ; preds = %1
  %10 = tail call i32 (ptr, ...) @ztoken_file(ptr noundef nonnull %0) #64
  br label %47

11:                                               ; preds = %1
  %12 = and i32 %6, 512
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %47, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %17 = load i16, ptr %16, align 2, !tbaa !17
  %18 = zext i16 %17 to i32
  call void @sread_string(ptr noundef nonnull %2, ptr noundef %15, i32 noundef %18) #64
  %19 = call i32 (ptr, i32, ptr, ...) @scan_token(ptr noundef nonnull %2, i32 noundef 1, ptr noundef nonnull %3) #64
  switch i32 %19, label %47 [
    i32 0, label %20
    i32 1, label %46
  ]

20:                                               ; preds = %14
  %21 = load ptr, ptr %2, align 8, !tbaa !124
  %22 = getelementptr inbounds i8, ptr %21, i64 1
  %23 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !127
  %25 = ptrtoint ptr %22 to i64
  %26 = ptrtoint ptr %24 to i64
  %27 = sub i64 %25, %26
  %28 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 6
  %29 = load i64, ptr %28, align 8, !tbaa !167
  %30 = add nsw i64 %27, %29
  %31 = trunc i64 %30 to i16
  %32 = load ptr, ptr %0, align 8, !tbaa !13
  %33 = and i64 %30, 4294967295
  %34 = getelementptr inbounds i8, ptr %32, i64 %33
  store ptr %34, ptr %0, align 8, !tbaa !13
  %35 = load i16, ptr %16, align 2, !tbaa !17
  %36 = sub i16 %35, %31
  store i16 %36, ptr %16, align 2, !tbaa !17
  %37 = load i16, ptr %4, align 8, !tbaa !14
  %38 = or i16 %37, -32768
  store i16 %38, ptr %4, align 8, !tbaa !14
  %39 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %39, ptr @osp, align 8, !tbaa !7
  %40 = load ptr, ptr @ostop, align 8, !tbaa !7
  %41 = icmp ugt ptr %39, %40
  br i1 %41, label %42, label %43

42:                                               ; preds = %20
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %47

43:                                               ; preds = %20
  %44 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %44, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  store i16 1, ptr %39, align 8, !tbaa !13
  %45 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 4, ptr %45, align 8, !tbaa !14
  br label %47

46:                                               ; preds = %14
  store i16 0, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %4, align 8, !tbaa !14
  br label %47

47:                                               ; preds = %46, %43, %42, %14, %11, %9, %1
  %48 = phi i32 [ 0, %46 ], [ -16, %42 ], [ 0, %43 ], [ %10, %9 ], [ -20, %1 ], [ -7, %11 ], [ %19, %14 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %2) #65
  ret i32 %48
}

; Function Attrs: nounwind optsize uwtable
define internal void @zstring_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zstring_op_init.my_defs) #64
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @ztypenumber(ptr noundef %0) #23 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = lshr i16 %6, 2
  %8 = and i16 %7, 63
  %9 = icmp ugt i16 %8, 15
  %10 = select i1 %9, i16 9, i16 %8
  %11 = zext i16 %10 to i64
  store i64 %11, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %5, align 8, !tbaa !14
  br label %12

12:                                               ; preds = %4, %1
  %13 = phi i32 [ 0, %4 ], [ -17, %1 ]
  ret i32 %13
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcvlit(ptr noundef %0) #0 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %18, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 8
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %9, %4
  %14 = phi i16 [ %12, %9 ], [ %6, %4 ]
  %15 = phi ptr [ %10, %9 ], [ %0, %4 ]
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 0, i32 1
  %17 = and i16 %14, -2
  store i16 %17, ptr %16, align 8, !tbaa !14
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi i32 [ 0, %13 ], [ -17, %1 ]
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcvx(ptr noundef %0) #0 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %18, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 8
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %9, %4
  %14 = phi i16 [ %12, %9 ], [ %6, %4 ]
  %15 = phi ptr [ %10, %9 ], [ %0, %4 ]
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 0, i32 1
  %17 = or i16 %14, 1
  store i16 %17, ptr %16, align 8, !tbaa !14
  br label %18

18:                                               ; preds = %13, %1
  %19 = phi i32 [ 0, %13 ], [ -17, %1 ]
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zxcheck(ptr noundef %0) #0 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %16, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 8
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  br label %13

13:                                               ; preds = %9, %4
  %14 = phi i16 [ %12, %9 ], [ %6, %4 ]
  %15 = and i16 %14, 1
  store i16 %15, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %5, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %13, %1
  %17 = phi i32 [ 0, %13 ], [ -17, %1 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zexecuteonly(ptr noundef %0) #0 {
  %2 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 8
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = tail call i32 @access_check(ptr noundef nonnull %0, i32 noundef 2, i32 noundef 1) #62, !range !211
  br label %11

11:                                               ; preds = %9, %4, %1
  %12 = phi i32 [ %10, %9 ], [ -17, %1 ], [ -20, %4 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @access_check(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = lshr i16 %5, 2
  %7 = and i16 %6, 63
  %8 = zext i16 %7 to i32
  switch i32 %8, label %29 [
    i32 2, label %9
    i32 0, label %11
    i32 3, label %11
    i32 10, label %11
    i32 13, label %11
  ]

9:                                                ; preds = %3
  %10 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  br label %11

11:                                               ; preds = %9, %3, %3, %3, %3
  %12 = phi ptr [ %0, %3 ], [ %0, %3 ], [ %0, %3 ], [ %0, %3 ], [ %10, %9 ]
  %13 = icmp eq i32 %2, 0
  %14 = getelementptr inbounds %struct.ref_s, ptr %12, i64 0, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = zext i16 %15 to i32
  br i1 %13, label %25, label %17

17:                                               ; preds = %11
  %18 = xor i32 %16, -1
  %19 = and i32 %18, %1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = and i16 %15, -771
  %23 = trunc i32 %1 to i16
  %24 = or i16 %22, %23
  store i16 %24, ptr %14, align 8, !tbaa !14
  br label %29

25:                                               ; preds = %11
  %26 = and i32 %16, %1
  %27 = icmp eq i32 %26, %1
  %28 = zext i1 %27 to i32
  br label %29

29:                                               ; preds = %25, %21, %17, %3
  %30 = phi i32 [ 0, %21 ], [ %28, %25 ], [ -20, %3 ], [ -7, %17 ]
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @znoaccess(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %16 [
    i32 2, label %7
    i32 0, label %11
    i32 3, label %11
    i32 10, label %11
    i32 13, label %11
  ]

7:                                                ; preds = %1
  %8 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %7, %1, %1, %1, %1
  %12 = phi i16 [ %3, %1 ], [ %3, %1 ], [ %3, %1 ], [ %3, %1 ], [ %10, %7 ]
  %13 = phi ptr [ %0, %1 ], [ %0, %1 ], [ %0, %1 ], [ %0, %1 ], [ %8, %7 ]
  %14 = getelementptr inbounds %struct.ref_s, ptr %13, i64 0, i32 1
  %15 = and i16 %12, -771
  store i16 %15, ptr %14, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %11, %1
  %17 = phi i32 [ 0, %11 ], [ -20, %1 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zreadonly(ptr noundef %0) #0 {
  %2 = tail call i32 @access_check(ptr noundef %0, i32 noundef 514, i32 noundef 1) #62, !range !211
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrcheck(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %16 [
    i32 2, label %7
    i32 0, label %11
    i32 3, label %11
    i32 10, label %11
    i32 13, label %11
  ]

7:                                                ; preds = %1
  %8 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %7, %1, %1, %1, %1
  %12 = phi i16 [ %3, %1 ], [ %3, %1 ], [ %3, %1 ], [ %3, %1 ], [ %10, %7 ]
  %13 = lshr i16 %12, 9
  %14 = and i16 %13, 1
  %15 = zext i16 %14 to i32
  store i16 %14, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %2, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %11, %1
  %17 = phi i32 [ %15, %11 ], [ -20, %1 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwcheck(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %16 [
    i32 2, label %7
    i32 0, label %11
    i32 3, label %11
    i32 10, label %11
    i32 13, label %11
  ]

7:                                                ; preds = %1
  %8 = tail call ptr @dict_access_ref(ptr noundef nonnull %0) #64
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %7, %1, %1, %1, %1
  %12 = phi i16 [ %3, %1 ], [ %3, %1 ], [ %3, %1 ], [ %3, %1 ], [ %10, %7 ]
  %13 = lshr i16 %12, 8
  %14 = and i16 %13, 1
  %15 = zext i16 %14 to i32
  store i16 %14, ptr %0, align 8, !tbaa !13
  store i16 4, ptr %2, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %11, %1
  %17 = phi i32 [ %15, %11 ], [ -20, %1 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcvi(ptr nocapture noundef %0) #0 {
  %2 = alloca %struct.stream_s, align 8
  %3 = alloca %struct.ref_s, align 8
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = lshr i16 %5, 2
  %7 = and i16 %6, 63
  %8 = zext i16 %7 to i32
  switch i32 %8, label %11 [
    i32 5, label %50
    i32 11, label %9
    i32 13, label %12
  ]

9:                                                ; preds = %1
  %10 = load float, ptr %0, align 8, !tbaa !13
  br label %42

11:                                               ; preds = %1
  br label %50

12:                                               ; preds = %1
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %13 = and i16 %5, 512
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %38, label %15

15:                                               ; preds = %12
  %16 = load ptr, ptr %0, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %18 = load i16, ptr %17, align 2, !tbaa !17
  %19 = zext i16 %18 to i32
  call void @sread_string(ptr noundef nonnull %2, ptr noundef %16, i32 noundef %19) #64
  %20 = call i32 (ptr, ptr, ...) @scan_number(ptr noundef nonnull %2, ptr noundef nonnull %3) #64
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %38

22:                                               ; preds = %15
  %23 = load ptr, ptr %2, align 8, !tbaa !124
  %24 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !142
  %26 = icmp ult ptr %23, %25
  br i1 %26, label %38, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 7
  %29 = load ptr, ptr %28, align 8, !tbaa !143
  %30 = call i32 %29(ptr noundef nonnull %2) #64
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %38

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  %34 = load i16, ptr %33, align 8, !tbaa !14
  %35 = and i16 %34, 252
  %36 = icmp eq i16 %35, 20
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  br label %38

38:                                               ; preds = %37, %27, %22, %15, %12
  %39 = phi i32 [ -18, %27 ], [ %20, %15 ], [ -7, %12 ], [ 0, %37 ], [ -18, %22 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %2) #65
  br label %50

40:                                               ; preds = %32
  %41 = load float, ptr %3, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %2) #65
  br label %42

42:                                               ; preds = %40, %9
  %43 = phi float [ %41, %40 ], [ %10, %9 ]
  %44 = fpext float %43 to double
  %45 = fcmp ugt double %44, 0xC1E0000000200000
  %46 = fcmp ult float %43, 0x41E0000000000000
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %50

48:                                               ; preds = %42
  %49 = fptosi float %43 to i64
  store i64 %49, ptr %0, align 8, !tbaa !13
  store i16 20, ptr %4, align 8, !tbaa !14
  br label %50

50:                                               ; preds = %48, %42, %38, %11, %1
  %51 = phi i32 [ -20, %11 ], [ 0, %48 ], [ 0, %1 ], [ -15, %42 ], [ %39, %38 ]
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcvn(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = zext i16 %3 to i32
  %5 = and i32 %4, 252
  %6 = icmp eq i32 %5, 52
  br i1 %6, label %7, label %21

7:                                                ; preds = %1
  %8 = and i32 %4, 512
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %21, label %10

10:                                               ; preds = %7
  %11 = load ptr, ptr %0, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %13 = load i16, ptr %12, align 2, !tbaa !17
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @name_ref(ptr noundef %11, i32 noundef %14, ptr noundef nonnull %0, i32 noundef 1) #64
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %10
  %18 = and i16 %3, 1
  %19 = load i16, ptr %2, align 8, !tbaa !14
  %20 = or i16 %19, %18
  store i16 %20, ptr %2, align 8, !tbaa !14
  br label %21

21:                                               ; preds = %17, %10, %7, %1
  %22 = phi i32 [ 0, %17 ], [ -20, %1 ], [ -7, %7 ], [ %15, %10 ]
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcvr(ptr nocapture noundef %0) #0 {
  %2 = alloca %struct.stream_s, align 8
  %3 = alloca %struct.ref_s, align 8
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = lshr i16 %5, 2
  %7 = and i16 %6, 63
  %8 = zext i16 %7 to i32
  switch i32 %8, label %12 [
    i32 5, label %9
    i32 11, label %44
    i32 13, label %13
  ]

9:                                                ; preds = %1
  %10 = load i64, ptr %0, align 8, !tbaa !13
  %11 = sitofp i64 %10 to float
  store float %11, ptr %0, align 8, !tbaa !13
  store i16 44, ptr %4, align 8, !tbaa !14
  br label %44

12:                                               ; preds = %1
  br label %44

13:                                               ; preds = %1
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %14 = and i16 %5, 512
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %42, label %16

16:                                               ; preds = %13
  %17 = load ptr, ptr %0, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %19 = load i16, ptr %18, align 2, !tbaa !17
  %20 = zext i16 %19 to i32
  call void @sread_string(ptr noundef nonnull %2, ptr noundef %17, i32 noundef %20) #64
  %21 = call i32 (ptr, ptr, ...) @scan_number(ptr noundef nonnull %2, ptr noundef nonnull %3) #64
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %42

23:                                               ; preds = %16
  %24 = load ptr, ptr %2, align 8, !tbaa !124
  %25 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !142
  %27 = icmp ult ptr %24, %26
  br i1 %27, label %42, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.stream_s, ptr %2, i64 0, i32 7
  %30 = load ptr, ptr %29, align 8, !tbaa !143
  %31 = call i32 %30(ptr noundef nonnull %2) #64
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %42

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  %35 = load i16, ptr %34, align 8, !tbaa !14
  %36 = and i16 %35, 252
  %37 = icmp eq i16 %36, 44
  br i1 %37, label %38, label %39

38:                                               ; preds = %33
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  br label %42

39:                                               ; preds = %33
  %40 = load i64, ptr %3, align 8, !tbaa !13
  %41 = sitofp i64 %40 to float
  store float %41, ptr %0, align 8, !tbaa !13
  store i16 44, ptr %4, align 8, !tbaa !14
  br label %42

42:                                               ; preds = %39, %38, %28, %23, %16, %13
  %43 = phi i32 [ 0, %38 ], [ 0, %39 ], [ -7, %13 ], [ %21, %16 ], [ -18, %28 ], [ -18, %23 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %2) #65
  br label %44

44:                                               ; preds = %42, %12, %9, %1
  %45 = phi i32 [ -20, %12 ], [ %43, %42 ], [ 0, %1 ], [ 0, %9 ]
  ret i32 %45
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zcvrs(ptr nocapture noundef %0) #21 {
  %2 = alloca [31 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 31, ptr nonnull %2) #65
  %3 = getelementptr inbounds [31 x i8], ptr %2, i64 0, i64 31
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 20
  br i1 %7, label %8, label %64

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %10 = load i64, ptr %9, align 8, !tbaa !13
  %11 = add i64 %10, -37
  %12 = icmp ult i64 %11, -35
  br i1 %12, label %64, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 252
  %18 = icmp eq i32 %17, 52
  br i1 %18, label %19, label %64

19:                                               ; preds = %13
  %20 = and i32 %16, 256
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %64, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %24 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %25 = load i16, ptr %24, align 8, !tbaa !14
  %26 = and i16 %25, 252
  %27 = icmp eq i16 %26, 20
  br i1 %27, label %28, label %64

28:                                               ; preds = %22
  %29 = load i64, ptr %23, align 8, !tbaa !13
  %30 = tail call i64 @llvm.abs.i64(i64 %29, i1 true)
  br label %31

31:                                               ; preds = %31, %28
  %32 = phi i64 [ %30, %28 ], [ %41, %31 ]
  %33 = phi ptr [ %3, %28 ], [ %40, %31 ]
  %34 = urem i64 %32, %10
  %35 = trunc i64 %34 to i32
  %36 = icmp slt i32 %35, 10
  %37 = select i1 %36, i32 48, i32 55
  %38 = add nuw nsw i32 %37, %35
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds i8, ptr %33, i64 -1
  store i8 %39, ptr %40, align 1, !tbaa !13
  %41 = udiv i64 %32, %10
  %42 = icmp ugt i64 %10, %32
  br i1 %42, label %43, label %31, !llvm.loop !217

43:                                               ; preds = %31
  %.lcssa1 = phi ptr [ %33, %31 ]
  %.lcssa = phi ptr [ %40, %31 ]
  %44 = icmp slt i64 %29, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = getelementptr inbounds i8, ptr %.lcssa1, i64 -2
  store i8 45, ptr %46, align 1, !tbaa !13
  br label %47

47:                                               ; preds = %45, %43
  %48 = phi ptr [ %46, %45 ], [ %.lcssa, %43 ]
  %49 = ptrtoint ptr %3 to i64
  %50 = ptrtoint ptr %48 to i64
  %51 = sub i64 %49, %50
  %52 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %53 = load i16, ptr %52, align 2, !tbaa !17
  %54 = zext i16 %53 to i64
  %55 = icmp sgt i64 %51, %54
  br i1 %55, label %64, label %56

56:                                               ; preds = %47
  %57 = load ptr, ptr %0, align 8, !tbaa !13
  %58 = and i64 %51, 4294967295
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %57, ptr nonnull align 1 %48, i64 %58, i1 false)
  %59 = trunc i64 %51 to i16
  store i16 %59, ptr %52, align 2, !tbaa !17
  %60 = load i16, ptr %14, align 8, !tbaa !14
  %61 = or i16 %60, -32768
  store i16 %61, ptr %14, align 8, !tbaa !14
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %23, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %62 = load ptr, ptr @osp, align 8, !tbaa !7
  %63 = getelementptr inbounds %struct.ref_s, ptr %62, i64 -2
  store ptr %63, ptr @osp, align 8, !tbaa !7
  br label %64

64:                                               ; preds = %56, %47, %22, %19, %13, %8, %1
  %65 = phi i32 [ 0, %56 ], [ -20, %1 ], [ -15, %8 ], [ -20, %13 ], [ -7, %19 ], [ -20, %22 ], [ -15, %47 ]
  call void @llvm.lifetime.end.p0(i64 31, ptr nonnull %2) #65
  ret i32 %65
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcvs(ptr noundef %0) #0 {
  %2 = alloca [25 x i8], align 16
  %3 = alloca %struct.ref_s, align 8
  %4 = alloca [2 x %struct.ref_s], align 16
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.lifetime.start.p0(i64 25, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 52
  br i1 %10, label %11, label %84

11:                                               ; preds = %1
  %12 = and i32 %8, 256
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %84, label %14

14:                                               ; preds = %11
  store ptr %2, ptr %3, align 8, !tbaa !13
  %15 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %16 = load i16, ptr %15, align 8, !tbaa !14
  %17 = lshr i16 %16, 2
  %18 = and i16 %17, 63
  %19 = icmp ugt i16 %18, 15
  %20 = select i1 %19, i16 9, i16 %18
  switch i16 %20, label %59 [
    i16 1, label %21
    i16 5, label %25
    i16 7, label %28
    i16 9, label %29
    i16 11, label %51
    i16 13, label %55
  ]

21:                                               ; preds = %14
  %22 = load i16, ptr %5, align 8, !tbaa !13
  %23 = icmp eq i16 %22, 0
  %24 = select i1 %23, ptr @.str.1.311, ptr @.str.312
  store ptr %24, ptr %3, align 8, !tbaa !13
  br label %63

25:                                               ; preds = %14
  %26 = load i64, ptr %5, align 8, !tbaa !13
  %27 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.2.313, i64 noundef %26) #64
  br label %63

28:                                               ; preds = %14
  call void @name_string_ref(ptr noundef nonnull %5, ptr noundef nonnull %3) #64
  br label %68

29:                                               ; preds = %14
  %30 = call i32 @dict_first(ptr noundef nonnull @dstack) #64
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #65
  %31 = getelementptr inbounds [2 x %struct.ref_s], ptr %4, i64 0, i64 1
  %32 = getelementptr inbounds %struct.ref_s, ptr %4, i64 0, i32 1
  br label %33

33:                                               ; preds = %45, %29
  %34 = phi i32 [ %30, %29 ], [ %35, %45 ]
  %35 = call i32 @dict_next(ptr noundef nonnull @dstack, i32 noundef %34, ptr noundef nonnull %4) #64
  %36 = icmp sgt i32 %35, -1
  br i1 %36, label %37, label %47

37:                                               ; preds = %33
  %38 = load ptr, ptr %5, align 8, !tbaa !13
  %39 = load ptr, ptr %31, align 16, !tbaa !13
  %40 = icmp eq ptr %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  %42 = load i16, ptr %32, align 8, !tbaa !14
  %43 = and i16 %42, 252
  %44 = icmp eq i16 %43, 28
  br i1 %44, label %46, label %45

45:                                               ; preds = %41, %37
  br label %33, !llvm.loop !218

46:                                               ; preds = %41
  call void @name_string_ref(ptr noundef nonnull %4, ptr noundef nonnull %3) #64
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #65
  br label %68

47:                                               ; preds = %33
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #65
  %48 = load ptr, ptr %5, align 8, !tbaa !13
  %49 = ptrtoint ptr %48 to i64
  %50 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.3.314, i64 noundef %49) #64
  br label %63

51:                                               ; preds = %14
  %52 = load float, ptr %5, align 8, !tbaa !13
  %53 = fpext float %52 to double
  %54 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %2, ptr noundef nonnull dereferenceable(1) @.str.4.315, double noundef %53) #64
  br label %63

55:                                               ; preds = %14
  %56 = and i16 %16, 512
  %57 = icmp eq i16 %56, 0
  br i1 %57, label %84, label %58

58:                                               ; preds = %55
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !101
  br label %68

59:                                               ; preds = %14
  %60 = load ptr, ptr @osp_nargs, align 16, !tbaa !7
  %61 = icmp ugt ptr %60, %0
  br i1 %61, label %84, label %62

62:                                               ; preds = %59
  store ptr @.str.5.316, ptr %3, align 8, !tbaa !13
  br label %63

63:                                               ; preds = %62, %51, %47, %25, %21
  %64 = phi ptr [ @.str.5.316, %62 ], [ %2, %51 ], [ %2, %47 ], [ %2, %25 ], [ %24, %21 ]
  %65 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %64) #63
  %66 = trunc i64 %65 to i16
  %67 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 2
  store i16 %66, ptr %67, align 2, !tbaa !17
  br label %68

68:                                               ; preds = %63, %58, %46, %28
  %69 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 2
  %70 = load i16, ptr %69, align 2, !tbaa !17
  %71 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %72 = load i16, ptr %71, align 2, !tbaa !17
  %73 = icmp ugt i16 %70, %72
  br i1 %73, label %84, label %74

74:                                               ; preds = %68
  %75 = load ptr, ptr %0, align 8, !tbaa !13
  %76 = load ptr, ptr %3, align 8, !tbaa !13
  %77 = zext i16 %70 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %75, ptr align 1 %76, i64 %77, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %78 = load i16, ptr %69, align 2, !tbaa !17
  %79 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  store i16 %78, ptr %79, align 2, !tbaa !17
  %80 = load i16, ptr %15, align 8, !tbaa !14
  %81 = or i16 %80, -32768
  store i16 %81, ptr %15, align 8, !tbaa !14
  %82 = load ptr, ptr @osp, align 8, !tbaa !7
  %83 = getelementptr inbounds %struct.ref_s, ptr %82, i64 -1
  store ptr %83, ptr @osp, align 8, !tbaa !7
  br label %84

84:                                               ; preds = %74, %68, %59, %55, %11, %1
  %85 = phi i32 [ 0, %74 ], [ -20, %1 ], [ -7, %11 ], [ -7, %55 ], [ -17, %59 ], [ -15, %68 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 25, ptr nonnull %2) #65
  ret i32 %85
}

; Function Attrs: nofree nounwind optsize
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nounwind optsize uwtable
define internal void @ztype_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @ztype_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsave(ptr noundef %0) #0 {
  %2 = tail call i32 (ptr, ...) @zgsave(ptr noundef %0) #64
  %3 = tail call ptr @alloc(i32 noundef 1, i32 noundef 24, ptr noundef nonnull @.str.333) #64
  %4 = tail call ptr @alloc_save_state() #64
  %5 = icmp slt i32 %2, 0
  br i1 %5, label %22, label %6

6:                                                ; preds = %1
  %7 = icmp eq ptr %3, null
  %8 = icmp eq ptr %4, null
  %9 = select i1 %7, i1 true, i1 %8
  br i1 %9, label %22, label %10

10:                                               ; preds = %6
  store ptr %4, ptr %3, align 8, !tbaa !219
  %11 = load ptr, ptr @istate, align 8, !tbaa !221
  %12 = getelementptr inbounds %struct.vm_save_s, ptr %3, i64 0, i32 1
  store ptr %11, ptr %12, align 8, !tbaa !223
  store ptr null, ptr @istate, align 8, !tbaa !221
  %13 = load ptr, ptr @igs, align 8, !tbaa !7
  %14 = tail call ptr @gs_state_swap_saved(ptr noundef %13, ptr noundef null) #64
  %15 = getelementptr inbounds %struct.vm_save_s, ptr %3, i64 0, i32 2
  store ptr %14, ptr %15, align 8, !tbaa !224
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %16, ptr @osp, align 8, !tbaa !7
  %17 = load ptr, ptr @ostop, align 8, !tbaa !7
  %18 = icmp ugt ptr %16, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %22

20:                                               ; preds = %10
  store ptr %3, ptr %16, align 8, !tbaa !13
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 48, ptr %21, align 8, !tbaa !14
  br label %22

22:                                               ; preds = %20, %19, %6, %1
  %23 = phi i32 [ -16, %19 ], [ 0, %20 ], [ %2, %1 ], [ -25, %6 ]
  ret i32 %23
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrestore(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 48
  br i1 %5, label %6, label %38

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = load ptr, ptr %7, align 8, !tbaa !219
  %9 = load ptr, ptr @osbot, align 8, !tbaa !7
  %10 = tail call i32 @restore_check_stack(ptr noundef %9, ptr noundef nonnull %0, ptr noundef %8) #62
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %38, label %12

12:                                               ; preds = %6
  %13 = load ptr, ptr @esp, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.ref_s, ptr %13, i64 1
  %15 = tail call i32 @restore_check_stack(ptr noundef nonnull @estack, ptr noundef nonnull %14, ptr noundef %8) #62
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %38, label %17

17:                                               ; preds = %12
  %18 = load ptr, ptr @dsp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 1
  %20 = tail call i32 @restore_check_stack(ptr noundef nonnull @dstack, ptr noundef nonnull %19, ptr noundef %8) #62
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %22, label %38

22:                                               ; preds = %17
  %23 = tail call i32 @alloc_restore_state_check(ptr noundef %8) #64
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %22
  %26 = tail call i32 (ptr, ...) @zgrestoreall(ptr noundef nonnull %0) #64
  tail call void @alloc_restore_state(ptr noundef %8) #64
  %27 = getelementptr inbounds %struct.vm_save_s, ptr %7, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !223
  store ptr %28, ptr @istate, align 8, !tbaa !221
  %29 = load ptr, ptr @igs, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.vm_save_s, ptr %7, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !224
  %32 = tail call ptr @gs_state_swap_saved(ptr noundef %29, ptr noundef %31) #64
  %33 = tail call i32 (ptr, ...) @zgrestore(ptr noundef nonnull %0) #64
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %25
  tail call void @alloc_free(ptr noundef nonnull %7, i32 noundef 1, i32 noundef 24, ptr noundef nonnull @.str.1.334) #64
  %36 = load ptr, ptr @osp, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.ref_s, ptr %36, i64 -1
  store ptr %37, ptr @osp, align 8, !tbaa !7
  br label %38

38:                                               ; preds = %35, %25, %22, %17, %12, %6, %1
  %39 = phi i32 [ 0, %35 ], [ %20, %17 ], [ -20, %1 ], [ -11, %22 ], [ %33, %25 ], [ %15, %12 ], [ %10, %6 ]
  ret i32 %39
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @restore_check_stack(ptr noundef readonly %0, ptr noundef readnone %1, ptr noundef %2) #0 {
  %4 = icmp ult ptr %0, %1
  br i1 %4, label %5, label %19

5:                                                ; preds = %16, %3
  %6 = phi ptr [ %17, %16 ], [ %0, %3 ]
  %7 = getelementptr inbounds %struct.ref_s, ptr %6, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  switch i32 %11, label %16 [
    i32 0, label %12
    i32 10, label %12
    i32 2, label %12
    i32 4, label %12
    i32 7, label %12
    i32 12, label %12
    i32 13, label %12
    i32 14, label %12
    i32 15, label %12
  ]

12:                                               ; preds = %5, %5, %5, %5, %5, %5, %5, %5, %5
  %13 = load ptr, ptr %6, align 8, !tbaa !13
  %14 = tail call i32 @alloc_is_since_save(ptr noundef %13, ptr noundef %2) #64
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %12, %5
  %17 = getelementptr inbounds %struct.ref_s, ptr %6, i64 1
  %18 = icmp ult ptr %17, %1
  br i1 %18, label %5, label %19, !llvm.loop !225

19:                                               ; preds = %16, %12, %3
  %20 = phi i32 [ 0, %3 ], [ -11, %12 ], [ 0, %16 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zvmstatus(ptr noundef %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  call void @alloc_status(ptr noundef nonnull %2, ptr noundef nonnull %3) #64
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  store ptr %4, ptr @osp, align 8, !tbaa !7
  %5 = load ptr, ptr @ostop, align 8, !tbaa !7
  %6 = icmp ugt ptr %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %18

8:                                                ; preds = %1
  %9 = call i32 @alloc_save_level() #64
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store i64 %10, ptr %11, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %12, align 8, !tbaa !14
  %13 = load i64, ptr %2, align 8, !tbaa !18
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store i64 %13, ptr %14, align 8, !tbaa !13
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 20, ptr %15, align 8, !tbaa !14
  %16 = load i64, ptr %3, align 8, !tbaa !18
  store i64 %16, ptr %4, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3, i32 1
  store i16 20, ptr %17, align 8, !tbaa !14
  br label %18

18:                                               ; preds = %8, %7
  %19 = phi i32 [ -16, %7 ], [ 0, %8 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal void @zvmem_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zvmem_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zshow(ptr noundef %0) #0 {
  %2 = tail call i32 @setup_show(ptr noundef %0, ptr noundef nonnull @finish_show) #62, !range !226
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %25, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @esp, align 8, !tbaa !7
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %10 = load i16, ptr %9, align 2, !tbaa !17
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @gs_show_n_init(ptr noundef %6, ptr noundef %7, ptr noundef %8, i32 noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %4
  %15 = load ptr, ptr @esp, align 8, !tbaa !7
  %16 = load ptr, ptr %15, align 8, !tbaa !13
  %17 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %16, i32 noundef 1, i32 noundef %17, ptr noundef nonnull @.str.13.340) #64
  %18 = load ptr, ptr @esp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -4
  store ptr %19, ptr @esp, align 8, !tbaa !7
  br label %25

20:                                               ; preds = %4
  %21 = load ptr, ptr @osp, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.ref_s, ptr %21, i64 -1
  store ptr %22, ptr @osp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %24 = tail call i32 @show_continue(ptr noundef nonnull %23) #62
  br label %25

25:                                               ; preds = %20, %14, %1
  %26 = phi i32 [ %12, %14 ], [ %24, %20 ], [ %2, %1 ]
  ret i32 %26
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @finish_show(ptr nocapture readnone %0) #10 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @setup_show(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = zext i16 %4 to i32
  %6 = and i32 %5, 252
  %7 = icmp eq i32 %6, 52
  br i1 %7, label %8, label %34

8:                                                ; preds = %2
  %9 = and i32 %5, 512
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %34, label %11

11:                                               ; preds = %8
  %12 = load ptr, ptr @esp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 6
  %14 = load ptr, ptr @estop, align 8, !tbaa !7
  %15 = icmp ugt ptr %13, %14
  br i1 %15, label %34, label %16

16:                                               ; preds = %11
  %17 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  %18 = tail call ptr @alloc(i32 noundef 1, i32 noundef %17, ptr noundef nonnull @.str.12.341) #64
  %19 = icmp eq ptr %18, null
  br i1 %19, label %34, label %20

20:                                               ; preds = %16
  %21 = load ptr, ptr @esp, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.ref_s, ptr %21, i64 1
  store i16 1, ptr %22, align 8, !tbaa !13
  %23 = getelementptr inbounds %struct.ref_s, ptr %21, i64 1, i32 1
  store i16 33, ptr %23, align 8, !tbaa !14
  %24 = getelementptr inbounds %struct.ref_s, ptr %21, i64 2
  store ptr %1, ptr %24, align 8, !tbaa !13
  %25 = getelementptr inbounds %struct.ref_s, ptr %21, i64 2, i32 1
  store i16 37, ptr %25, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.ref_s, ptr %21, i64 2, i32 2
  store i16 0, ptr %26, align 2, !tbaa !17
  %27 = getelementptr inbounds %struct.ref_s, ptr %21, i64 3
  store i16 0, ptr %27, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.ref_s, ptr %21, i64 3, i32 1
  store i16 32, ptr %28, align 8, !tbaa !14
  %29 = getelementptr inbounds %struct.ref_s, ptr %21, i64 4
  store ptr %29, ptr @esp, align 8, !tbaa !7
  store ptr %18, ptr %29, align 8, !tbaa !13
  %30 = getelementptr inbounds %struct.ref_s, ptr %21, i64 4, i32 1
  store i16 52, ptr %30, align 8, !tbaa !14
  %31 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  %32 = trunc i32 %31 to i16
  %33 = getelementptr inbounds %struct.ref_s, ptr %21, i64 4, i32 2
  store i16 %32, ptr %33, align 2, !tbaa !17
  br label %34

34:                                               ; preds = %20, %16, %11, %8, %2
  %35 = phi i32 [ 1, %20 ], [ -20, %2 ], [ -7, %8 ], [ -5, %11 ], [ -25, %16 ]
  ret i32 %35
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @show_continue(ptr noundef %0) #0 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = load ptr, ptr %2, align 8, !tbaa !13
  %4 = tail call i32 @gs_show_next(ptr noundef %3) #64
  switch i32 %4, label %57 [
    i32 0, label %5
    i32 2, label %17
    i32 1, label %37
  ]

5:                                                ; preds = %1
  %6 = load ptr, ptr @esp, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.ref_s, ptr %6, i64 -2
  %8 = load ptr, ptr %7, align 8, !tbaa !13
  %9 = tail call i32 %8(ptr noundef %0) #64
  %10 = load ptr, ptr @esp, align 8, !tbaa !7
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %11, i32 noundef 1, i32 noundef %12, ptr noundef nonnull @.str.13.340) #64
  %13 = load ptr, ptr @esp, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.ref_s, ptr %13, i64 -4
  store ptr %14, ptr @esp, align 8, !tbaa !7
  %15 = icmp sgt i32 %9, -1
  %16 = select i1 %15, i32 1, i32 %9
  br label %63

17:                                               ; preds = %1
  %18 = load ptr, ptr @esp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %19, ptr @osp, align 8, !tbaa !7
  %20 = load ptr, ptr @ostop, align 8, !tbaa !7
  %21 = icmp ugt ptr %19, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %17
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %63

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -1
  %25 = tail call zeroext i8 @gs_kshow_previous_char(ptr noundef %3) #64
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store i64 %26, ptr %27, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %28, align 8, !tbaa !14
  %29 = tail call zeroext i8 @gs_kshow_next_char(ptr noundef %3) #64
  %30 = zext i8 %29 to i64
  store i64 %30, ptr %19, align 8, !tbaa !13
  %31 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 20, ptr %31, align 8, !tbaa !14
  %32 = load ptr, ptr @esp, align 8, !tbaa !7
  %33 = getelementptr inbounds %struct.ref_s, ptr %32, i64 1
  store ptr @show_continue, ptr %33, align 8, !tbaa !13
  %34 = getelementptr inbounds %struct.ref_s, ptr %32, i64 1, i32 1
  store i16 37, ptr %34, align 8, !tbaa !14
  %35 = getelementptr inbounds %struct.ref_s, ptr %32, i64 1, i32 2
  store i16 0, ptr %35, align 2, !tbaa !17
  %36 = getelementptr inbounds %struct.ref_s, ptr %32, i64 2
  store ptr %36, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %36, ptr noundef nonnull align 8 dereferenceable(16) %24, i64 16, i1 false), !tbaa.struct !101
  br label %63

37:                                               ; preds = %1
  %38 = load ptr, ptr @igs, align 8, !tbaa !7
  %39 = tail call ptr @gs_currentfont(ptr noundef %38) #64
  %40 = getelementptr inbounds %struct.gs_font_s, ptr %39, i64 0, i32 4
  %41 = load ptr, ptr %40, align 8, !tbaa !227
  %42 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %42, ptr @osp, align 8, !tbaa !7
  %43 = load ptr, ptr @ostop, align 8, !tbaa !7
  %44 = icmp ugt ptr %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %63

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, ptr noundef nonnull align 8 dereferenceable(16) %41, i64 16, i1 false), !tbaa.struct !101
  %48 = tail call zeroext i8 @gs_show_current_char(ptr noundef %3) #64
  %49 = zext i8 %48 to i64
  store i64 %49, ptr %42, align 8, !tbaa !13
  %50 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 20, ptr %50, align 8, !tbaa !14
  %51 = load ptr, ptr @esp, align 8, !tbaa !7
  %52 = getelementptr inbounds %struct.ref_s, ptr %51, i64 1
  store ptr @show_continue, ptr %52, align 8, !tbaa !13
  %53 = getelementptr inbounds %struct.ref_s, ptr %51, i64 1, i32 1
  store i16 37, ptr %53, align 8, !tbaa !14
  %54 = getelementptr inbounds %struct.ref_s, ptr %51, i64 1, i32 2
  store i16 0, ptr %54, align 2, !tbaa !17
  %55 = getelementptr inbounds %struct.ref_s, ptr %51, i64 2
  store ptr %55, ptr @esp, align 8, !tbaa !7
  %56 = getelementptr inbounds %struct.font_data_s, ptr %41, i64 0, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %55, ptr noundef nonnull align 8 dereferenceable(16) %56, i64 16, i1 false), !tbaa.struct !101
  br label %63

57:                                               ; preds = %1
  %58 = load ptr, ptr @esp, align 8, !tbaa !7
  %59 = load ptr, ptr %58, align 8, !tbaa !13
  %60 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %59, i32 noundef 1, i32 noundef %60, ptr noundef nonnull @.str.13.340) #64
  %61 = load ptr, ptr @esp, align 8, !tbaa !7
  %62 = getelementptr inbounds %struct.ref_s, ptr %61, i64 -4
  store ptr %62, ptr @esp, align 8, !tbaa !7
  br label %63

63:                                               ; preds = %57, %46, %45, %23, %22, %5
  %64 = phi i32 [ %4, %57 ], [ %16, %5 ], [ 1, %23 ], [ -16, %22 ], [ 1, %46 ], [ -16, %45 ]
  ret i32 %64
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zashow(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %3, i32 noundef 2, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %35, label %6

6:                                                ; preds = %1
  %7 = call i32 @setup_show(ptr noundef %0, ptr noundef nonnull @finish_show) #62, !range !226
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %35, label %9

9:                                                ; preds = %6
  %10 = load ptr, ptr @esp, align 8, !tbaa !7
  %11 = load ptr, ptr %10, align 8, !tbaa !13
  %12 = load ptr, ptr @igs, align 8, !tbaa !7
  %13 = load float, ptr %2, align 4, !tbaa !103
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %16 = load float, ptr %15, align 4, !tbaa !103
  %17 = fpext float %16 to double
  %18 = load ptr, ptr %0, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %20 = load i16, ptr %19, align 2, !tbaa !17
  %21 = zext i16 %20 to i32
  %22 = call i32 @gs_ashow_n_init(ptr noundef %11, ptr noundef %12, double noundef %14, double noundef %17, ptr noundef %18, i32 noundef %21) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %9
  %25 = load ptr, ptr @esp, align 8, !tbaa !7
  %26 = load ptr, ptr %25, align 8, !tbaa !13
  %27 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef %26, i32 noundef 1, i32 noundef %27, ptr noundef nonnull @.str.13.340) #64
  %28 = load ptr, ptr @esp, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.ref_s, ptr %28, i64 -4
  store ptr %29, ptr @esp, align 8, !tbaa !7
  br label %35

30:                                               ; preds = %9
  %31 = load ptr, ptr @osp, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.ref_s, ptr %31, i64 -3
  store ptr %32, ptr @osp, align 8, !tbaa !7
  %33 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  %34 = call i32 @show_continue(ptr noundef nonnull %33) #62
  br label %35

35:                                               ; preds = %30, %24, %6, %1
  %36 = phi i32 [ %22, %24 ], [ %34, %30 ], [ %4, %1 ], [ %7, %6 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zwidthshow(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 20
  br i1 %7, label %8, label %46

8:                                                ; preds = %1
  %9 = load i64, ptr %3, align 8, !tbaa !13
  %10 = icmp ugt i64 %9, 255
  br i1 %10, label %46, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %13 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %12, i32 noundef 2, ptr noundef nonnull %2) #64
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %46, label %15

15:                                               ; preds = %11
  %16 = call i32 @setup_show(ptr noundef nonnull %0, ptr noundef nonnull @finish_show) #62, !range !226
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %46, label %18

18:                                               ; preds = %15
  %19 = load ptr, ptr @esp, align 8, !tbaa !7
  %20 = load ptr, ptr %19, align 8, !tbaa !13
  %21 = load ptr, ptr @igs, align 8, !tbaa !7
  %22 = load float, ptr %2, align 4, !tbaa !103
  %23 = fpext float %22 to double
  %24 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !103
  %26 = fpext float %25 to double
  %27 = load i64, ptr %3, align 8, !tbaa !13
  %28 = trunc i64 %27 to i8
  %29 = load ptr, ptr %0, align 8, !tbaa !13
  %30 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %31 = load i16, ptr %30, align 2, !tbaa !17
  %32 = zext i16 %31 to i32
  %33 = call i32 @gs_widthshow_n_init(ptr noundef %20, ptr noundef %21, double noundef %23, double noundef %26, i8 noundef signext %28, ptr noundef %29, i32 noundef %32) #64
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %18
  %36 = load ptr, ptr @esp, align 8, !tbaa !7
  %37 = load ptr, ptr %36, align 8, !tbaa !13
  %38 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef %37, i32 noundef 1, i32 noundef %38, ptr noundef nonnull @.str.13.340) #64
  %39 = load ptr, ptr @esp, align 8, !tbaa !7
  %40 = getelementptr inbounds %struct.ref_s, ptr %39, i64 -4
  store ptr %40, ptr @esp, align 8, !tbaa !7
  br label %46

41:                                               ; preds = %18
  %42 = load ptr, ptr @osp, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.ref_s, ptr %42, i64 -4
  store ptr %43, ptr @osp, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -4
  %45 = call i32 @show_continue(ptr noundef nonnull %44) #62
  br label %46

46:                                               ; preds = %41, %35, %15, %11, %8, %1
  %47 = phi i32 [ %33, %35 ], [ %45, %41 ], [ -20, %1 ], [ -15, %8 ], [ %13, %11 ], [ %16, %15 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %47
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zawidthshow(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  %3 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  %5 = getelementptr %struct.ref_s, ptr %0, i64 -3, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 20
  br i1 %8, label %9, label %56

9:                                                ; preds = %1
  %10 = load i64, ptr %4, align 8, !tbaa !13
  %11 = icmp ugt i64 %10, 255
  br i1 %11, label %56, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -4
  %14 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %13, i32 noundef 2, ptr noundef nonnull %2) #64
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %56, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %18 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %17, i32 noundef 2, ptr noundef nonnull %3) #64
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %56, label %20

20:                                               ; preds = %16
  %21 = call i32 @setup_show(ptr noundef nonnull %0, ptr noundef nonnull @finish_show) #62, !range !226
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %56, label %23

23:                                               ; preds = %20
  %24 = load ptr, ptr @esp, align 8, !tbaa !7
  %25 = load ptr, ptr %24, align 8, !tbaa !13
  %26 = load ptr, ptr @igs, align 8, !tbaa !7
  %27 = load float, ptr %2, align 4, !tbaa !103
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %30 = load float, ptr %29, align 4, !tbaa !103
  %31 = fpext float %30 to double
  %32 = load i64, ptr %4, align 8, !tbaa !13
  %33 = trunc i64 %32 to i8
  %34 = load float, ptr %3, align 4, !tbaa !103
  %35 = fpext float %34 to double
  %36 = getelementptr inbounds [2 x float], ptr %3, i64 0, i64 1
  %37 = load float, ptr %36, align 4, !tbaa !103
  %38 = fpext float %37 to double
  %39 = load ptr, ptr %0, align 8, !tbaa !13
  %40 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %41 = load i16, ptr %40, align 2, !tbaa !17
  %42 = zext i16 %41 to i32
  %43 = call i32 @gs_awidthshow_n_init(ptr noundef %25, ptr noundef %26, double noundef %28, double noundef %31, i8 noundef signext %33, double noundef %35, double noundef %38, ptr noundef %39, i32 noundef %42) #64
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %23
  %46 = load ptr, ptr @esp, align 8, !tbaa !7
  %47 = load ptr, ptr %46, align 8, !tbaa !13
  %48 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef %47, i32 noundef 1, i32 noundef %48, ptr noundef nonnull @.str.13.340) #64
  %49 = load ptr, ptr @esp, align 8, !tbaa !7
  %50 = getelementptr inbounds %struct.ref_s, ptr %49, i64 -4
  store ptr %50, ptr @esp, align 8, !tbaa !7
  br label %56

51:                                               ; preds = %23
  %52 = load ptr, ptr @osp, align 8, !tbaa !7
  %53 = getelementptr inbounds %struct.ref_s, ptr %52, i64 -6
  store ptr %53, ptr @osp, align 8, !tbaa !7
  %54 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -6
  %55 = call i32 @show_continue(ptr noundef nonnull %54) #62
  br label %56

56:                                               ; preds = %51, %45, %20, %16, %12, %9, %1
  %57 = phi i32 [ %43, %45 ], [ %55, %51 ], [ -20, %1 ], [ -15, %9 ], [ %14, %12 ], [ %18, %16 ], [ %21, %20 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %57
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zkshow(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %3 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = lshr i16 %4, 2
  %6 = and i16 %5, 63
  %7 = zext i16 %6 to i32
  switch i32 %7, label %36 [
    i32 0, label %8
    i32 10, label %8
  ]

8:                                                ; preds = %1, %1
  %9 = and i16 %4, 3
  %10 = icmp eq i16 %9, 3
  br i1 %10, label %11, label %36

11:                                               ; preds = %8
  %12 = tail call i32 @setup_show(ptr noundef nonnull %0, ptr noundef nonnull @finish_show) #62, !range !226
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %36, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr @esp, align 8, !tbaa !7
  %16 = load ptr, ptr %15, align 8, !tbaa !13
  %17 = load ptr, ptr @igs, align 8, !tbaa !7
  %18 = load ptr, ptr %0, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %20 = load i16, ptr %19, align 2, !tbaa !17
  %21 = zext i16 %20 to i32
  %22 = tail call i32 @gs_kshow_n_init(ptr noundef %16, ptr noundef %17, ptr noundef %18, i32 noundef %21) #64
  %23 = icmp slt i32 %22, 0
  %24 = load ptr, ptr @esp, align 8, !tbaa !7
  br i1 %23, label %25, label %30

25:                                               ; preds = %14
  %26 = load ptr, ptr %24, align 8, !tbaa !13
  %27 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %26, i32 noundef 1, i32 noundef %27, ptr noundef nonnull @.str.13.340) #64
  %28 = load ptr, ptr @esp, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.ref_s, ptr %28, i64 -4
  store ptr %29, ptr @esp, align 8, !tbaa !7
  br label %36

30:                                               ; preds = %14
  %31 = getelementptr inbounds %struct.ref_s, ptr %24, i64 -1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %31, ptr noundef nonnull align 8 dereferenceable(16) %2, i64 16, i1 false), !tbaa.struct !101
  %32 = load ptr, ptr @osp, align 8, !tbaa !7
  %33 = getelementptr inbounds %struct.ref_s, ptr %32, i64 -2
  store ptr %33, ptr @osp, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %35 = tail call i32 @show_continue(ptr noundef nonnull %34) #62
  br label %36

36:                                               ; preds = %30, %25, %11, %8, %1
  %37 = phi i32 [ %22, %25 ], [ %35, %30 ], [ -20, %1 ], [ -7, %8 ], [ %12, %11 ]
  ret i32 %37
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zstringwidth(ptr noundef %0) #0 {
  %2 = tail call i32 @setup_show(ptr noundef %0, ptr noundef nonnull @finish_stringwidth) #62, !range !226
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %25, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @esp, align 8, !tbaa !7
  %6 = load ptr, ptr %5, align 8, !tbaa !13
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %10 = load i16, ptr %9, align 2, !tbaa !17
  %11 = zext i16 %10 to i32
  %12 = tail call i32 @gs_stringwidth_n_init(ptr noundef %6, ptr noundef %7, ptr noundef %8, i32 noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %4
  %15 = load ptr, ptr @esp, align 8, !tbaa !7
  %16 = load ptr, ptr %15, align 8, !tbaa !13
  %17 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %16, i32 noundef 1, i32 noundef %17, ptr noundef nonnull @.str.13.340) #64
  %18 = load ptr, ptr @esp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -4
  store ptr %19, ptr @esp, align 8, !tbaa !7
  br label %25

20:                                               ; preds = %4
  %21 = load ptr, ptr @osp, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.ref_s, ptr %21, i64 -1
  store ptr %22, ptr @osp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %24 = tail call i32 @show_continue(ptr noundef nonnull %23) #62
  br label %25

25:                                               ; preds = %20, %14, %1
  %26 = phi i32 [ %12, %14 ], [ %24, %20 ], [ %2, %1 ]
  ret i32 %26
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @finish_stringwidth(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_point_s, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  call void @gs_show_width(ptr noundef %4, ptr noundef nonnull %2) #64
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %5, ptr @osp, align 8, !tbaa !7
  %6 = load ptr, ptr @ostop, align 8, !tbaa !7
  %7 = icmp ugt ptr %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %16

9:                                                ; preds = %1
  %10 = load float, ptr %2, align 4, !tbaa !230
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %10, ptr %11, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.gs_point_s, ptr %2, i64 0, i32 1
  %14 = load float, ptr %13, align 4, !tbaa !232
  store float %14, ptr %5, align 8, !tbaa !13
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %15, align 8, !tbaa !14
  br label %16

16:                                               ; preds = %9, %8
  %17 = phi i32 [ -16, %8 ], [ 0, %9 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcharpath(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 4
  br i1 %5, label %6, label %33

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %8 = tail call i32 @setup_show(ptr noundef nonnull %7, ptr noundef nonnull @finish_show) #62, !range !226
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %33, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr @esp, align 8, !tbaa !7
  %12 = load ptr, ptr %11, align 8, !tbaa !13
  %13 = load ptr, ptr @igs, align 8, !tbaa !7
  %14 = load ptr, ptr %7, align 8, !tbaa !13
  %15 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %16 = load i16, ptr %15, align 2, !tbaa !17
  %17 = zext i16 %16 to i32
  %18 = load i16, ptr %0, align 8, !tbaa !13
  %19 = zext i16 %18 to i32
  %20 = tail call i32 @gs_charpath_n_init(ptr noundef %12, ptr noundef %13, ptr noundef %14, i32 noundef %17, i32 noundef %19) #64
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %10
  %23 = load ptr, ptr @esp, align 8, !tbaa !7
  %24 = load ptr, ptr %23, align 8, !tbaa !13
  %25 = load i32, ptr @gs_show_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %24, i32 noundef 1, i32 noundef %25, ptr noundef nonnull @.str.13.340) #64
  %26 = load ptr, ptr @esp, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.ref_s, ptr %26, i64 -4
  store ptr %27, ptr @esp, align 8, !tbaa !7
  br label %33

28:                                               ; preds = %10
  %29 = load ptr, ptr @osp, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.ref_s, ptr %29, i64 -2
  store ptr %30, ptr @osp, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %32 = tail call i32 @show_continue(ptr noundef nonnull %31) #62
  br label %33

33:                                               ; preds = %28, %22, %6, %1
  %34 = phi i32 [ %20, %22 ], [ %32, %28 ], [ -20, %1 ], [ %8, %6 ]
  ret i32 %34
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetcachedevice(ptr noundef %0) #0 {
  %2 = alloca [6 x float], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #65
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  br label %4

4:                                                ; preds = %13, %1
  %5 = phi ptr [ %3, %1 ], [ %14, %13 ]
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 32
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = load i16, ptr %5, align 8, !tbaa !13
  %12 = icmp eq i16 %11, 1
  br i1 %12, label %18, label %13

13:                                               ; preds = %10, %4
  %14 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  %15 = icmp ult ptr %14, @estack
  br i1 %15, label %16, label %4, !llvm.loop !233

16:                                               ; preds = %13
  %17 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef %0, i32 noundef 6, ptr noundef nonnull %2) #64
  br label %69

18:                                               ; preds = %10
  %.lcssa = phi ptr [ %5, %10 ]
  %19 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 3
  %20 = load ptr, ptr %19, align 8, !tbaa !13
  %21 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef %0, i32 noundef 6, ptr noundef nonnull %2) #64
  %22 = icmp eq ptr %20, null
  br i1 %22, label %69, label %23

23:                                               ; preds = %18
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %25, label %45

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %27 = load i16, ptr %26, align 8, !tbaa !14
  %28 = lshr i16 %27, 2
  %29 = and i16 %28, 63
  %30 = zext i16 %29 to i32
  switch i32 %30, label %69 [
    i32 0, label %31
    i32 10, label %31
  ]

31:                                               ; preds = %25, %25
  %32 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %33 = load i16, ptr %32, align 2, !tbaa !17
  %34 = icmp eq i16 %33, 4
  br i1 %34, label %35, label %69

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %37 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %36, i32 noundef 2, ptr noundef nonnull %2) #64
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %69, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %0, align 8, !tbaa !13
  %41 = getelementptr inbounds %struct.ref_s, ptr %40, i64 3
  %42 = getelementptr inbounds float, ptr %2, i64 2
  %43 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %41, i32 noundef 4, ptr noundef nonnull %42) #64
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %69, label %45

45:                                               ; preds = %39, %23
  %46 = phi i64 [ -6, %23 ], [ -3, %39 ]
  %47 = load float, ptr %2, align 16, !tbaa !103
  %48 = fpext float %47 to double
  %49 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 1
  %50 = load float, ptr %49, align 4, !tbaa !103
  %51 = fpext float %50 to double
  %52 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 2
  %53 = load float, ptr %52, align 8, !tbaa !103
  %54 = fpext float %53 to double
  %55 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 3
  %56 = load float, ptr %55, align 4, !tbaa !103
  %57 = fpext float %56 to double
  %58 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 4
  %59 = load float, ptr %58, align 16, !tbaa !103
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 5
  %62 = load float, ptr %61, align 4, !tbaa !103
  %63 = fpext float %62 to double
  %64 = call i32 @gs_setcachedevice(ptr noundef nonnull %20, double noundef %48, double noundef %51, double noundef %54, double noundef %57, double noundef %60, double noundef %63) #64
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %45
  %67 = load ptr, ptr @osp, align 8, !tbaa !7
  %68 = getelementptr inbounds %struct.ref_s, ptr %67, i64 %46
  store ptr %68, ptr @osp, align 8, !tbaa !7
  br label %69

69:                                               ; preds = %66, %45, %39, %35, %31, %25, %18, %16
  %70 = phi i32 [ 0, %66 ], [ -21, %18 ], [ -20, %25 ], [ %21, %39 ], [ %21, %35 ], [ %21, %31 ], [ %64, %45 ], [ -21, %16 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #65
  ret i32 %70
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetcharwidth(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  br label %4

4:                                                ; preds = %13, %1
  %5 = phi ptr [ %3, %1 ], [ %14, %13 ]
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 0, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 32
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = load i16, ptr %5, align 8, !tbaa !13
  %12 = icmp eq i16 %11, 1
  br i1 %12, label %18, label %13

13:                                               ; preds = %10, %4
  %14 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -1
  %15 = icmp ult ptr %14, @estack
  br i1 %15, label %16, label %4, !llvm.loop !233

16:                                               ; preds = %13
  %17 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  br label %36

18:                                               ; preds = %10
  %.lcssa = phi ptr [ %5, %10 ]
  %19 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 3
  %20 = load ptr, ptr %19, align 8, !tbaa !13
  %21 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %22 = icmp eq ptr %20, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %18
  %24 = icmp slt i32 %21, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %23
  %26 = load float, ptr %2, align 4, !tbaa !103
  %27 = fpext float %26 to double
  %28 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %29 = load float, ptr %28, align 4, !tbaa !103
  %30 = fpext float %29 to double
  %31 = call i32 @gs_setcharwidth(ptr noundef nonnull %20, double noundef %27, double noundef %30) #64
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %25
  %34 = load ptr, ptr @osp, align 8, !tbaa !7
  %35 = getelementptr inbounds %struct.ref_s, ptr %34, i64 -2
  store ptr %35, ptr @osp, align 8, !tbaa !7
  br label %36

36:                                               ; preds = %33, %25, %23, %18, %16
  %37 = phi i32 [ 0, %33 ], [ -21, %18 ], [ %21, %23 ], [ %31, %25 ], [ -21, %16 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %37
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztype1addpath(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.timeval, align 8
  %4 = alloca %struct.timeval, align 8
  %5 = alloca %struct.gs_type1_data_s, align 8
  %6 = alloca %struct.z1_data, align 8
  %7 = alloca ptr, align 8
  %8 = load ptr, ptr @esp, align 8, !tbaa !7
  br label %9

9:                                                ; preds = %18, %1
  %10 = phi ptr [ %8, %1 ], [ %19, %18 ]
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 0, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 252
  %14 = icmp eq i16 %13, 32
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = load i16, ptr %10, align 8, !tbaa !13
  %17 = icmp eq i16 %16, 1
  br i1 %17, label %21, label %18

18:                                               ; preds = %15, %9
  %19 = getelementptr inbounds %struct.ref_s, ptr %10, i64 -1
  %20 = icmp ult ptr %19, @estack
  br i1 %20, label %24, label %9, !llvm.loop !233

21:                                               ; preds = %15
  %.lcssa5 = phi ptr [ %10, %15 ]
  %22 = getelementptr inbounds %struct.ref_s, ptr %.lcssa5, i64 3
  %23 = load ptr, ptr %22, align 8, !tbaa !13
  br label %24

24:                                               ; preds = %21, %18
  %25 = phi ptr [ %23, %21 ], [ null, %18 ]
  %26 = load ptr, ptr @igs, align 8, !tbaa !7
  %27 = tail call ptr @gs_currentfont(ptr noundef %26) #64
  %28 = getelementptr inbounds %struct.gs_font_s, ptr %27, i64 0, i32 4
  %29 = load ptr, ptr %28, align 8, !tbaa !227
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #65
  %30 = icmp eq ptr %25, null
  br i1 %30, label %135, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %33 = load i16, ptr %32, align 8, !tbaa !14
  %34 = and i16 %33, 252
  %35 = icmp eq i16 %34, 52
  br i1 %35, label %36, label %135

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.font_data_s, ptr %29, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(32) %37, i64 32, i1 false), !tbaa.struct !234
  store ptr %29, ptr %6, align 8, !tbaa !235
  %38 = getelementptr inbounds %struct.z1_data, ptr %6, i64 0, i32 2
  %39 = getelementptr inbounds %struct.z1_data, ptr %6, i64 0, i32 1
  store ptr %38, ptr %39, align 8, !tbaa !237
  %40 = getelementptr inbounds %struct.gs_type1_data_s, ptr %5, i64 0, i32 2
  store ptr %6, ptr %40, align 8, !tbaa !238
  %41 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %42 = load i16, ptr %41, align 2, !tbaa !17
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds %struct.gs_type1_data_s, ptr %5, i64 0, i32 3
  %45 = load i32, ptr %44, align 8, !tbaa !240
  %46 = icmp slt i32 %45, %43
  br i1 %46, label %50, label %47

47:                                               ; preds = %36
  %48 = load ptr, ptr @osp, align 8, !tbaa !7
  %49 = getelementptr inbounds %struct.ref_s, ptr %48, i64 -1
  store ptr %49, ptr @osp, align 8, !tbaa !7
  br label %135

50:                                               ; preds = %36
  %51 = load i32, ptr @gs_type1_state_sizeof, align 4, !tbaa !11
  %52 = call ptr @alloc(i32 noundef 1, i32 noundef %51, ptr noundef nonnull @.str.342) #64
  %53 = icmp eq ptr %52, null
  br i1 %53, label %135, label %54

54:                                               ; preds = %50
  %55 = call i32 @gs_show_in_charpath(ptr noundef nonnull %25) #64
  %56 = getelementptr inbounds %struct.gs_font_s, ptr %27, i64 0, i32 11
  %57 = load i32, ptr %56, align 4, !tbaa !241
  %58 = load ptr, ptr %0, align 8, !tbaa !13
  %59 = call i32 @gs_type1_init(ptr noundef nonnull %52, ptr noundef nonnull %25, i32 noundef %55, i32 noundef %57, ptr noundef %58, ptr noundef nonnull %5) #64
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.font_data_s, ptr %29, i64 0, i32 2, i32 2
  %63 = getelementptr inbounds %struct.font_data_s, ptr %29, i64 0, i32 2
  %64 = getelementptr inbounds %struct.font_data_s, ptr %29, i64 0, i32 3
  %65 = getelementptr inbounds %struct.z1_data, ptr %6, i64 0, i32 2, i64 1
  %66 = getelementptr inbounds %struct.timeval, ptr %3, i64 0, i32 1
  %67 = getelementptr inbounds %struct.timeval, ptr %4, i64 0, i32 1
  %68 = getelementptr inbounds %struct.z1_data, ptr %6, i64 1
  br label %122

69:                                               ; preds = %54
  %70 = load i32, ptr @gs_type1_state_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef nonnull %52, i32 noundef 1, i32 noundef %70, ptr noundef nonnull @.str.342) #64
  br label %135

71:                                               ; preds = %128, %97
  %72 = phi ptr [ %98, %97 ], [ null, %128 ]
  %73 = call i32 @gs_type1_interpret(ptr noundef nonnull %52, ptr noundef %72) #64
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %129

75:                                               ; preds = %71
  %76 = and i32 %73, 1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %99, label %78

78:                                               ; preds = %75
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #65
  %79 = lshr i32 %73, 1
  %80 = load i16, ptr %62, align 2, !tbaa !242
  %81 = zext i16 %80 to i32
  %82 = icmp ult i32 %79, %81
  br i1 %82, label %83, label %95

83:                                               ; preds = %78
  %84 = load ptr, ptr %63, align 8, !tbaa !13
  %85 = zext i32 %79 to i64
  %86 = getelementptr inbounds %struct.ref_s, ptr %84, i64 %85
  %87 = call i32 @dict_lookup(ptr noundef nonnull %64, ptr noundef nonnull %64, ptr noundef %86, ptr noundef nonnull %7) #64
  %88 = icmp slt i32 %87, 1
  br i1 %88, label %95, label %89

89:                                               ; preds = %83
  %90 = load ptr, ptr %7, align 8, !tbaa !7
  %91 = getelementptr inbounds %struct.ref_s, ptr %90, i64 0, i32 1
  %92 = load i16, ptr %91, align 8, !tbaa !14
  %93 = and i16 %92, 252
  %94 = icmp eq i16 %93, 52
  br i1 %94, label %97, label %95

95:                                               ; preds = %89, %83, %78
  %96 = phi i32 [ -10, %89 ], [ -21, %83 ], [ -15, %78 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #65
  br label %135

97:                                               ; preds = %89
  %98 = load ptr, ptr %90, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #65
  br label %71

99:                                               ; preds = %75
  %.lcssa1 = phi i32 [ %73, %75 ]
  %100 = load ptr, ptr @igs, align 8, !tbaa !7
  %101 = getelementptr inbounds %struct.gs_state_s, ptr %100, i64 0, i32 7
  %102 = load ptr, ptr %101, align 8, !tbaa !244
  %103 = call i32 @gs_type1_pop(ptr noundef nonnull %52, ptr noundef nonnull %2) #64
  %104 = lshr i32 %.lcssa1, 1
  switch i32 %104, label %126 [
    i32 1, label %106
    i32 2, label %118
    i32 3, label %105
    i32 4, label %124
  ]

105:                                              ; preds = %124, %106, %99
  br label %128

106:                                              ; preds = %99
  %107 = call i32 @gx_path_current_point(ptr noundef %102, ptr noundef nonnull %4) #64
  %108 = load i64, ptr %3, align 8, !tbaa !247
  %109 = load i64, ptr %66, align 8, !tbaa !249
  %110 = call i32 @gx_path_add_point(ptr noundef %102, i64 noundef %108, i64 noundef %109) #64
  %111 = getelementptr inbounds %struct.gx_path_s, ptr %102, i64 0, i32 11
  store i8 %123, ptr %111, align 1, !tbaa !250
  %112 = load i64, ptr %4, align 8, !tbaa !247
  %113 = load i64, ptr %67, align 8, !tbaa !249
  %114 = call i32 @gx_path_add_line(ptr noundef %102, i64 noundef %112, i64 noundef %113) #64
  %115 = call i32 @gs_type1_pop(ptr noundef nonnull %52, ptr noundef nonnull %38) #64
  %116 = call i32 @gs_type1_pop(ptr noundef nonnull %52, ptr noundef nonnull %65) #64
  %117 = call i32 @gs_type1_pop(ptr noundef nonnull %52, ptr noundef nonnull %2) #64
  store ptr %68, ptr %39, align 8, !tbaa !237
  br label %105

118:                                              ; preds = %99
  %.lcssa4 = phi ptr [ %102, %99 ]
  %119 = call i32 @gx_path_current_point(ptr noundef %.lcssa4, ptr noundef nonnull %3) #64
  %120 = getelementptr inbounds %struct.gx_path_s, ptr %.lcssa4, i64 0, i32 11
  %121 = load i8, ptr %120, align 1, !tbaa !250
  br label %122

122:                                              ; preds = %118, %61
  %123 = phi i8 [ %121, %118 ], [ undef, %61 ]
  br label %128

124:                                              ; preds = %99
  %125 = call i32 @gs_type1_pop(ptr noundef nonnull %52, ptr noundef nonnull %2) #64
  store i64 12288, ptr %38, align 8, !tbaa !18
  store ptr %65, ptr %39, align 8, !tbaa !237
  br label %105

126:                                              ; preds = %99
  %127 = load i32, ptr @gs_type1_state_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef nonnull %52, i32 noundef 1, i32 noundef %127, ptr noundef nonnull @.str.342) #64
  br label %135

128:                                              ; preds = %122, %105
  br label %71

129:                                              ; preds = %71
  %.lcssa = phi i32 [ %73, %71 ]
  %130 = load i32, ptr @gs_type1_state_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef nonnull %52, i32 noundef 1, i32 noundef %130, ptr noundef nonnull @.str.342) #64
  %131 = icmp sgt i32 %.lcssa, -1
  br i1 %131, label %132, label %135

132:                                              ; preds = %129
  %133 = load ptr, ptr @osp, align 8, !tbaa !7
  %134 = getelementptr inbounds %struct.ref_s, ptr %133, i64 -1
  store ptr %134, ptr @osp, align 8, !tbaa !7
  br label %135

135:                                              ; preds = %132, %129, %126, %95, %69, %50, %47, %31, %24
  %136 = phi i32 [ 0, %47 ], [ %59, %69 ], [ -21, %24 ], [ -20, %31 ], [ -25, %50 ], [ 0, %132 ], [ %.lcssa, %129 ], [ %96, %95 ], [ -15, %126 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %136
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztype1imagepath(ptr noundef %0) #0 {
  %2 = alloca [4 x float], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -7
  %4 = getelementptr %struct.ref_s, ptr %0, i64 -7, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 52
  br i1 %7, label %8, label %62

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -6
  %10 = getelementptr %struct.ref_s, ptr %0, i64 -6, i32 1
  %11 = load i16, ptr %10, align 8, !tbaa !14
  %12 = and i16 %11, 252
  %13 = icmp eq i16 %12, 20
  br i1 %13, label %14, label %62

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -5
  %16 = getelementptr %struct.ref_s, ptr %0, i64 -5, i32 1
  %17 = load i16, ptr %16, align 8, !tbaa !14
  %18 = and i16 %17, 252
  %19 = icmp eq i16 %18, 20
  br i1 %19, label %20, label %62

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %22 = call i32 (ptr, i32, ptr, ...) @num_params(ptr noundef nonnull %21, i32 noundef 4, ptr noundef nonnull %2) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %62, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %26 = load i16, ptr %25, align 8, !tbaa !14
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, 252
  %29 = icmp eq i32 %28, 52
  br i1 %29, label %30, label %62

30:                                               ; preds = %24
  %31 = and i32 %27, 256
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %62, label %33

33:                                               ; preds = %30
  %34 = load ptr, ptr @igs, align 8, !tbaa !7
  %35 = load ptr, ptr %3, align 8, !tbaa !13
  %36 = load i64, ptr %9, align 8, !tbaa !13
  %37 = trunc i64 %36 to i32
  %38 = load i64, ptr %15, align 8, !tbaa !13
  %39 = trunc i64 %38 to i32
  %40 = load float, ptr %2, align 16, !tbaa !103
  %41 = fpext float %40 to double
  %42 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %43 = load float, ptr %42, align 4, !tbaa !103
  %44 = fpext float %43 to double
  %45 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %46 = load float, ptr %45, align 8, !tbaa !103
  %47 = fpext float %46 to double
  %48 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 3
  %49 = load float, ptr %48, align 4, !tbaa !103
  %50 = fpext float %49 to double
  %51 = load ptr, ptr %0, align 8, !tbaa !13
  %52 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %53 = load i16, ptr %52, align 2, !tbaa !17
  %54 = zext i16 %53 to i32
  %55 = call i32 @gs_type1imagepath(ptr noundef %34, ptr noundef %35, i32 noundef %37, i32 noundef %39, double noundef %41, double noundef %44, double noundef %47, double noundef %50, ptr noundef %51, i32 noundef %54) #64
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %33
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %58 = trunc i32 %55 to i16
  %59 = getelementptr %struct.ref_s, ptr %0, i64 -7, i32 2
  store i16 %58, ptr %59, align 2, !tbaa !17
  %60 = load ptr, ptr @osp, align 8, !tbaa !7
  %61 = getelementptr inbounds %struct.ref_s, ptr %60, i64 -7
  store ptr %61, ptr @osp, align 8, !tbaa !7
  br label %62

62:                                               ; preds = %57, %33, %30, %24, %20, %14, %8, %1
  %63 = phi i32 [ 0, %57 ], [ -20, %1 ], [ -20, %8 ], [ -20, %14 ], [ %22, %20 ], [ -20, %24 ], [ -7, %30 ], [ %55, %33 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %63
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @z1_subr_proc(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef writeonly %2) #23 {
  %4 = icmp slt i32 %1, 0
  br i1 %4, label %24, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.gs_type1_data_s, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !238
  %8 = load ptr, ptr %7, align 8, !tbaa !235
  %9 = getelementptr inbounds %struct.font_data_s, ptr %8, i64 0, i32 4, i32 2
  %10 = load i16, ptr %9, align 2, !tbaa !253
  %11 = zext i16 %10 to i32
  %12 = icmp ugt i32 %11, %1
  br i1 %12, label %13, label %24

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.font_data_s, ptr %8, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !13
  %16 = zext i32 %1 to i64
  %17 = getelementptr inbounds %struct.ref_s, ptr %15, i64 %16, i32 1
  %18 = load i16, ptr %17, align 8, !tbaa !14
  %19 = and i16 %18, 252
  %20 = icmp eq i16 %19, 52
  br i1 %20, label %21, label %24

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.ref_s, ptr %15, i64 %16
  %23 = load ptr, ptr %22, align 8, !tbaa !13
  store ptr %23, ptr %2, align 8, !tbaa !7
  br label %24

24:                                               ; preds = %21, %13, %5, %3
  %25 = phi i32 [ 0, %21 ], [ -15, %5 ], [ -15, %3 ], [ -20, %13 ]
  ret i32 %25
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @z1_pop_proc(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #32 {
  %3 = getelementptr inbounds %struct.gs_type1_data_s, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !238
  %5 = getelementptr inbounds %struct.z1_data, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !237
  %7 = getelementptr inbounds i64, ptr %6, i64 -1
  store ptr %7, ptr %5, align 8, !tbaa !237
  %8 = load i64, ptr %7, align 8, !tbaa !18
  store i64 %8, ptr %1, align 8, !tbaa !18
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal void @zchar_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zchar_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentgscolor(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr @gs_color_sizeof, align 4, !tbaa !11
  %7 = tail call ptr @alloc(i32 noundef 1, i32 noundef %6, ptr noundef nonnull @.str.2.356) #64
  %8 = icmp eq ptr %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  store ptr %7, ptr %2, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 56, ptr %10, align 8, !tbaa !14
  %11 = load ptr, ptr @igs, align 8, !tbaa !7
  %12 = tail call i32 @gs_currentgscolor(ptr noundef %11, ptr noundef nonnull %7) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %9, %5
  %15 = phi i32 [ %12, %9 ], [ -25, %5 ]
  %16 = load ptr, ptr @osp, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.ref_s, ptr %16, i64 -1
  br label %18

18:                                               ; preds = %14, %1
  %19 = phi ptr [ %17, %14 ], [ %0, %1 ]
  %20 = phi i32 [ %15, %14 ], [ -16, %1 ]
  store ptr %19, ptr @osp, align 8, !tbaa !7
  br label %21

21:                                               ; preds = %18, %9
  %22 = phi i32 [ %12, %9 ], [ %20, %18 ]
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetgscolor(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 56
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = tail call i32 @gs_setgscolor(ptr noundef %7, ptr noundef %8) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = load ptr, ptr @osp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 -1
  store ptr %13, ptr @osp, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %11, %6, %1
  %15 = phi i32 [ 0, %11 ], [ -20, %1 ], [ %9, %6 ]
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal void @zcolor_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zcolor_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @zfont_init() #0 {
  %1 = tail call ptr @gs_font_dir_alloc(ptr noundef nonnull @alloc, ptr noundef nonnull @alloc_free) #64
  store ptr %1, ptr @ifont_dir, align 8, !tbaa !7
  tail call void @name_enter(ptr noundef nonnull @.str.363, ptr noundef nonnull @name_FontDirectory) #64
  tail call void @name_enter(ptr noundef nonnull @.str.1.364, ptr noundef nonnull @name_FontMatrix) #64
  tail call void @name_enter(ptr noundef nonnull @.str.2.365, ptr noundef nonnull @name_FontType) #64
  tail call void @name_enter(ptr noundef nonnull @.str.3.366, ptr noundef nonnull @name_FontBBox) #64
  tail call void @name_enter(ptr noundef nonnull @.str.4.367, ptr noundef nonnull @name_Encoding) #64
  tail call void @name_enter(ptr noundef nonnull @.str.5.368, ptr noundef nonnull @name_PaintType) #64
  tail call void @name_enter(ptr noundef nonnull @.str.6.369, ptr noundef nonnull @name_UniqueID) #64
  tail call void @name_enter(ptr noundef nonnull @.str.7.370, ptr noundef nonnull @name_BuildChar) #64
  tail call void @name_enter(ptr noundef nonnull @.str.8.371, ptr noundef nonnull @name_Type1BuildChar) #64
  tail call void @name_enter(ptr noundef nonnull @.str.9.372, ptr noundef nonnull @name_Private) #64
  tail call void @name_enter(ptr noundef nonnull @.str.10.373, ptr noundef nonnull @name_CharStrings) #64
  tail call void @name_enter(ptr noundef nonnull @.str.11.374, ptr noundef nonnull @name_FID) #64
  tail call void @name_enter(ptr noundef nonnull @.str.12.375, ptr noundef nonnull @name_Subrs) #64
  tail call void @name_enter(ptr noundef nonnull @.str.13.376, ptr noundef nonnull @name_lenIV) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdefinefont(ptr noundef %0) #0 {
  %2 = alloca %struct.ref_s, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca %struct.gs_matrix_s, align 8
  %15 = alloca [4 x float], align 16
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #65
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %14) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15) #65
  %18 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 1), align 8, !tbaa !7
  %19 = icmp ugt ptr %18, %0
  br i1 %19, label %247, label %20

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %22 = load i16, ptr %21, align 8, !tbaa !14
  %23 = and i16 %22, 252
  %24 = icmp eq i16 %23, 8
  br i1 %24, label %25, label %247

25:                                               ; preds = %20
  %26 = call i32 @dict_lookup(ptr noundef nonnull @dstack, ptr noundef nonnull @dstack, ptr noundef nonnull @name_FontDirectory, ptr noundef nonnull %3) #64
  %27 = icmp slt i32 %26, 1
  br i1 %27, label %247, label %28

28:                                               ; preds = %25
  %29 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_FontMatrix, ptr noundef nonnull %5) #64
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %247, label %31

31:                                               ; preds = %28
  %32 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_FontType, ptr noundef nonnull %6) #64
  %33 = icmp slt i32 %32, 1
  br i1 %33, label %247, label %34

34:                                               ; preds = %31
  %35 = load ptr, ptr %6, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.ref_s, ptr %35, i64 0, i32 1
  %37 = load i16, ptr %36, align 8, !tbaa !14
  %38 = and i16 %37, 252
  %39 = icmp eq i16 %38, 20
  br i1 %39, label %40, label %247

40:                                               ; preds = %34
  %41 = load i64, ptr %35, align 8, !tbaa !13
  %42 = icmp ugt i64 %41, 255
  br i1 %42, label %247, label %43

43:                                               ; preds = %40
  %44 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_FontBBox, ptr noundef nonnull %7) #64
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %247, label %46

46:                                               ; preds = %43
  %47 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_Encoding, ptr noundef nonnull %8) #64
  %48 = icmp slt i32 %47, 1
  br i1 %48, label %247, label %49

49:                                               ; preds = %46
  %50 = load ptr, ptr %5, align 8, !tbaa !7
  %51 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef %50, ptr noundef nonnull %14) #64
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %247, label %53

53:                                               ; preds = %49
  %54 = load ptr, ptr %7, align 8, !tbaa !7
  %55 = getelementptr inbounds %struct.ref_s, ptr %54, i64 0, i32 1
  %56 = load i16, ptr %55, align 8, !tbaa !14
  %57 = lshr i16 %56, 2
  %58 = and i16 %57, 63
  %59 = zext i16 %58 to i32
  switch i32 %59, label %247 [
    i32 0, label %60
    i32 10, label %60
  ]

60:                                               ; preds = %53, %53
  %61 = load ptr, ptr %8, align 8, !tbaa !7
  %62 = getelementptr inbounds %struct.ref_s, ptr %61, i64 0, i32 1
  %63 = load i16, ptr %62, align 8, !tbaa !14
  %64 = lshr i16 %63, 2
  %65 = and i16 %64, 63
  %66 = zext i16 %65 to i32
  switch i32 %66, label %247 [
    i32 0, label %67
    i32 10, label %67
  ]

67:                                               ; preds = %60, %60
  %68 = getelementptr inbounds %struct.ref_s, ptr %54, i64 0, i32 2
  %69 = load i16, ptr %68, align 2, !tbaa !17
  %70 = icmp eq i16 %69, 4
  br i1 %70, label %71, label %247

71:                                               ; preds = %67
  %72 = load ptr, ptr %54, align 8, !tbaa !13
  %73 = getelementptr inbounds %struct.ref_s, ptr %72, i64 3
  %74 = call i32 @num_params(ptr noundef nonnull %73, i32 noundef 4, ptr noundef nonnull %15) #64
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %247, label %76

76:                                               ; preds = %71
  %77 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_PaintType, ptr noundef nonnull %10) #64
  %78 = icmp slt i32 %77, 1
  br i1 %78, label %90, label %79

79:                                               ; preds = %76
  %80 = load ptr, ptr %10, align 8, !tbaa !7
  %81 = getelementptr inbounds %struct.ref_s, ptr %80, i64 0, i32 1
  %82 = load i16, ptr %81, align 8, !tbaa !14
  %83 = and i16 %82, 252
  %84 = icmp eq i16 %83, 20
  br i1 %84, label %85, label %247

85:                                               ; preds = %79
  %86 = load i64, ptr %80, align 8, !tbaa !13
  %87 = icmp ugt i64 %86, 65535
  br i1 %87, label %247, label %88

88:                                               ; preds = %85
  %89 = trunc i64 %86 to i32
  br label %90

90:                                               ; preds = %88, %76
  %91 = phi i32 [ %89, %88 ], [ -1, %76 ]
  %92 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_UniqueID, ptr noundef nonnull %11) #64
  %93 = icmp slt i32 %92, 1
  br i1 %93, label %103, label %94

94:                                               ; preds = %90
  %95 = load ptr, ptr %11, align 8, !tbaa !7
  %96 = getelementptr inbounds %struct.ref_s, ptr %95, i64 0, i32 1
  %97 = load i16, ptr %96, align 8, !tbaa !14
  %98 = and i16 %97, 252
  %99 = icmp eq i16 %98, 20
  br i1 %99, label %100, label %247

100:                                              ; preds = %94
  %101 = load i64, ptr %95, align 8, !tbaa !13
  %102 = icmp ugt i64 %101, 16777215
  br i1 %102, label %247, label %103

103:                                              ; preds = %100, %90
  %104 = phi i64 [ -1, %90 ], [ %101, %100 ]
  %105 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_BuildChar, ptr noundef nonnull %12) #64
  store ptr null, ptr @zdefinefont.no_subrs, align 8, !tbaa !13
  store i16 52, ptr getelementptr inbounds (%struct.ref_s, ptr @zdefinefont.no_subrs, i64 0, i32 1), align 8, !tbaa !14
  store i16 0, ptr getelementptr inbounds (%struct.ref_s, ptr @zdefinefont.no_subrs, i64 0, i32 2), align 2, !tbaa !17
  store ptr @zdefinefont.no_subrs, ptr %13, align 8, !tbaa !7
  store i64 0, ptr @zdefinefont.no_charstrings, align 8, !tbaa !13
  store i16 32, ptr getelementptr inbounds (%struct.ref_s, ptr @zdefinefont.no_charstrings, i64 0, i32 1), align 8, !tbaa !14
  store ptr @zdefinefont.no_charstrings, ptr %9, align 8, !tbaa !7
  %106 = load ptr, ptr %6, align 8, !tbaa !7
  %107 = load i64, ptr %106, align 8, !tbaa !13
  %108 = icmp eq i64 %107, 1
  br i1 %108, label %109, label %176

109:                                              ; preds = %103
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #65
  %110 = icmp sgt i32 %105, 0
  br i1 %110, label %171, label %111

111:                                              ; preds = %109
  %112 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_CharStrings, ptr noundef nonnull %9) #64
  %113 = icmp slt i32 %112, 1
  br i1 %113, label %171, label %114

114:                                              ; preds = %111
  %115 = load ptr, ptr %9, align 8, !tbaa !7
  %116 = getelementptr inbounds %struct.ref_s, ptr %115, i64 0, i32 1
  %117 = load i16, ptr %116, align 8, !tbaa !14
  %118 = and i16 %117, 252
  %119 = icmp eq i16 %118, 8
  br i1 %119, label %120, label %171

120:                                              ; preds = %114
  %121 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_Private, ptr noundef nonnull %16) #64
  %122 = icmp slt i32 %121, 1
  br i1 %122, label %171, label %123

123:                                              ; preds = %120
  %124 = load ptr, ptr %16, align 8, !tbaa !7
  %125 = getelementptr inbounds %struct.ref_s, ptr %124, i64 0, i32 1
  %126 = load i16, ptr %125, align 8, !tbaa !14
  %127 = and i16 %126, 252
  %128 = icmp eq i16 %127, 8
  br i1 %128, label %129, label %171

129:                                              ; preds = %123
  %130 = call i32 @dict_lookup(ptr noundef nonnull %124, ptr noundef nonnull %124, ptr noundef nonnull @name_Subrs, ptr noundef nonnull %13) #64
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %132, label %139

132:                                              ; preds = %129
  %133 = load ptr, ptr %13, align 8, !tbaa !7
  %134 = getelementptr inbounds %struct.ref_s, ptr %133, i64 0, i32 1
  %135 = load i16, ptr %134, align 8, !tbaa !14
  %136 = lshr i16 %135, 2
  %137 = and i16 %136, 63
  %138 = zext i16 %137 to i32
  switch i32 %138, label %171 [
    i32 0, label %139
    i32 10, label %139
  ]

139:                                              ; preds = %132, %132, %129
  %140 = load ptr, ptr %16, align 8, !tbaa !7
  %141 = call i32 @dict_lookup(ptr noundef %140, ptr noundef %140, ptr noundef nonnull @name_lenIV, ptr noundef nonnull %17) #64
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %154

143:                                              ; preds = %139
  %144 = load ptr, ptr %17, align 8, !tbaa !7
  %145 = getelementptr inbounds %struct.ref_s, ptr %144, i64 0, i32 1
  %146 = load i16, ptr %145, align 8, !tbaa !14
  %147 = and i16 %146, 252
  %148 = icmp eq i16 %147, 20
  br i1 %148, label %149, label %171

149:                                              ; preds = %143
  %150 = load i64, ptr %144, align 8, !tbaa !13
  %151 = icmp ugt i64 %150, 255
  br i1 %151, label %171, label %152

152:                                              ; preds = %149
  %153 = trunc i64 %150 to i32
  br label %154

154:                                              ; preds = %152, %139
  %155 = phi i32 [ %153, %152 ], [ 4, %139 ]
  %156 = icmp sgt i64 %104, -1
  br i1 %156, label %157, label %172

157:                                              ; preds = %154
  %158 = load ptr, ptr %16, align 8, !tbaa !7
  %159 = call i32 @dict_lookup(ptr noundef %158, ptr noundef %158, ptr noundef nonnull @name_UniqueID, ptr noundef nonnull %11) #64
  %160 = icmp slt i32 %159, 1
  br i1 %160, label %170, label %161

161:                                              ; preds = %157
  %162 = load ptr, ptr %11, align 8, !tbaa !7
  %163 = getelementptr inbounds %struct.ref_s, ptr %162, i64 0, i32 1
  %164 = load i16, ptr %163, align 8, !tbaa !14
  %165 = and i16 %164, 252
  %166 = icmp eq i16 %165, 20
  br i1 %166, label %167, label %170

167:                                              ; preds = %161
  %168 = load i64, ptr %162, align 8, !tbaa !13
  %169 = icmp eq i64 %168, %104
  br i1 %169, label %172, label %170

170:                                              ; preds = %167, %161, %157
  br label %172

171:                                              ; preds = %149, %143, %132, %123, %120, %114, %111, %109
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #65
  br label %247

172:                                              ; preds = %170, %167, %154
  %173 = phi i64 [ -1, %170 ], [ %104, %167 ], [ -1, %154 ]
  store ptr @name_Type1BuildChar, ptr %12, align 8, !tbaa !7
  %174 = load i16, ptr getelementptr inbounds (%struct.ref_s, ptr @name_Type1BuildChar, i64 0, i32 1), align 8, !tbaa !14
  %175 = or i16 %174, 1
  store i16 %175, ptr getelementptr inbounds (%struct.ref_s, ptr @name_Type1BuildChar, i64 0, i32 1), align 8, !tbaa !14
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #65
  br label %188

176:                                              ; preds = %103
  %177 = icmp slt i32 %105, 1
  br i1 %177, label %247, label %178

178:                                              ; preds = %176
  %179 = load ptr, ptr %12, align 8, !tbaa !7
  %180 = getelementptr inbounds %struct.ref_s, ptr %179, i64 0, i32 1
  %181 = load i16, ptr %180, align 8, !tbaa !14
  %182 = lshr i16 %181, 2
  %183 = and i16 %182, 63
  %184 = zext i16 %183 to i32
  switch i32 %184, label %247 [
    i32 0, label %185
    i32 10, label %185
  ]

185:                                              ; preds = %178, %178
  %186 = and i16 %181, 3
  %187 = icmp eq i16 %186, 3
  br i1 %187, label %188, label %247

188:                                              ; preds = %185, %172
  %189 = phi i64 [ %173, %172 ], [ %104, %185 ]
  %190 = phi i32 [ %155, %172 ], [ undef, %185 ]
  %191 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_FID, ptr noundef nonnull %4) #64
  %192 = load i16, ptr %21, align 8, !tbaa !14
  %193 = and i16 %192, 256
  %194 = icmp eq i16 %193, 0
  br i1 %194, label %235, label %195

195:                                              ; preds = %188
  %196 = icmp sgt i32 %191, 0
  br i1 %196, label %247, label %197

197:                                              ; preds = %195
  %198 = call ptr @alloc(i32 noundef 1, i32 noundef 184, ptr noundef nonnull @.str.14.377) #64
  %199 = icmp eq ptr %198, null
  br i1 %199, label %247, label %200

200:                                              ; preds = %197
  %201 = call ptr @alloc(i32 noundef 1, i32 noundef 112, ptr noundef nonnull @.str.15.378) #64
  %202 = icmp eq ptr %201, null
  br i1 %202, label %247, label %203

203:                                              ; preds = %200
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  store ptr %198, ptr %2, align 8, !tbaa !13
  %204 = getelementptr inbounds %struct.ref_s, ptr %2, i64 0, i32 1
  store i16 16, ptr %204, align 8, !tbaa !14
  %205 = call i32 @dict_put(ptr noundef nonnull %0, ptr noundef nonnull @name_FID, ptr noundef nonnull %2) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  %206 = icmp slt i32 %205, 0
  br i1 %206, label %247, label %207

207:                                              ; preds = %203
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %201, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %208 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 1
  %209 = load ptr, ptr %12, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %208, ptr noundef nonnull align 8 dereferenceable(16) %209, i64 16, i1 false), !tbaa.struct !101
  %210 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 2
  %211 = load ptr, ptr %8, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %210, ptr noundef nonnull align 8 dereferenceable(16) %211, i64 16, i1 false), !tbaa.struct !101
  %212 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 3
  %213 = load ptr, ptr %9, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %212, ptr noundef nonnull align 8 dereferenceable(16) %213, i64 16, i1 false), !tbaa.struct !101
  %214 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 4
  %215 = load ptr, ptr %13, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %214, ptr noundef nonnull align 8 dereferenceable(16) %215, i64 16, i1 false), !tbaa.struct !101
  %216 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 5
  store ptr @z1_subr_proc, ptr %216, align 8, !tbaa !254
  %217 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 5, i32 1
  store ptr @z1_pop_proc, ptr %217, align 8, !tbaa !255
  %218 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 5, i32 2
  store ptr %201, ptr %218, align 8, !tbaa !256
  %219 = getelementptr inbounds %struct.font_data_s, ptr %201, i64 0, i32 5, i32 3
  store i32 %190, ptr %219, align 8, !tbaa !257
  %220 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 2
  store ptr %198, ptr %220, align 8, !tbaa !258
  %221 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %222 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 3
  store ptr %221, ptr %222, align 8, !tbaa !259
  %223 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 4
  store ptr %201, ptr %223, align 8, !tbaa !227
  %224 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %224, ptr noundef nonnull align 8 dereferenceable(96) %14, i64 96, i1 false), !tbaa.struct !163
  %225 = load ptr, ptr %6, align 8, !tbaa !7
  %226 = load i64, ptr %225, align 8, !tbaa !13
  %227 = trunc i64 %226 to i32
  %228 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 6
  store i32 %227, ptr %228, align 8, !tbaa !260
  %229 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 7
  %230 = load <4 x float>, ptr %15, align 16, !tbaa !103
  store <4 x float> %230, ptr %229, align 4, !tbaa !103
  %231 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 13
  store ptr @gs_no_build_char_proc, ptr %231, align 8, !tbaa !261
  %232 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 11
  store i32 %91, ptr %232, align 4, !tbaa !241
  %233 = getelementptr inbounds %struct.gs_font_s, ptr %198, i64 0, i32 12
  store i64 %189, ptr %233, align 8, !tbaa !262
  %234 = load i16, ptr %21, align 8, !tbaa !14
  br label %237

235:                                              ; preds = %188
  %236 = icmp slt i32 %191, 1
  br i1 %236, label %247, label %237

237:                                              ; preds = %235, %207
  %238 = phi i16 [ %234, %207 ], [ %192, %235 ]
  %239 = and i16 %238, -257
  store i16 %239, ptr %21, align 8, !tbaa !14
  %240 = load ptr, ptr %3, align 8, !tbaa !7
  %241 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %242 = call i32 @dict_put(ptr noundef %240, ptr noundef nonnull %241, ptr noundef nonnull %0) #64
  %243 = icmp slt i32 %242, 0
  br i1 %243, label %247, label %244

244:                                              ; preds = %237
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %241, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %245 = load ptr, ptr @osp, align 8, !tbaa !7
  %246 = getelementptr inbounds %struct.ref_s, ptr %245, i64 -1
  store ptr %246, ptr @osp, align 8, !tbaa !7
  br label %247

247:                                              ; preds = %244, %237, %235, %203, %200, %197, %195, %185, %178, %176, %171, %100, %94, %85, %79, %71, %67, %60, %53, %49, %46, %43, %40, %34, %31, %28, %25, %20, %1
  %248 = phi i32 [ 0, %244 ], [ -17, %1 ], [ -20, %20 ], [ -10, %25 ], [ -10, %49 ], [ -10, %46 ], [ -10, %43 ], [ -10, %40 ], [ -10, %34 ], [ -10, %31 ], [ -10, %28 ], [ -10, %53 ], [ -10, %60 ], [ -10, %71 ], [ -10, %67 ], [ -10, %85 ], [ -10, %79 ], [ -10, %100 ], [ -10, %94 ], [ -10, %176 ], [ -20, %178 ], [ -7, %185 ], [ -10, %235 ], [ %242, %237 ], [ -10, %171 ], [ %205, %203 ], [ -25, %197 ], [ -25, %200 ], [ -10, %195 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %14) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  ret i32 %248
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zscalefont(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %3) #65
  %4 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = call i32 @gs_make_scaling(double noundef %8, double noundef %8, ptr noundef nonnull %3) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = call i32 @make_font(ptr noundef %0, ptr noundef nonnull %3) #62, !range !263
  br label %13

13:                                               ; preds = %11, %6, %1
  %14 = phi i32 [ %12, %11 ], [ %4, %1 ], [ %9, %6 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @make_font(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.ref_s, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %struct.ref_s, align 8
  %8 = alloca %struct.ref_s, align 8
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #65
  store i64 6, ptr %8, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.ref_s, ptr %8, i64 0, i32 1
  store i16 20, ptr %10, align 8, !tbaa !14
  %11 = call i32 @font_param(ptr noundef nonnull %9, ptr noundef nonnull %4) #62, !range !263
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %45, label %13

13:                                               ; preds = %2
  %14 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %15 = load ptr, ptr %4, align 8, !tbaa !7
  %16 = call i32 @gs_makefont(ptr noundef %14, ptr noundef %15, ptr noundef %1, ptr noundef nonnull %5, ptr noundef nonnull %6) #64
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %45, label %18

18:                                               ; preds = %13
  %19 = call i32 @dict_maxlength(ptr noundef nonnull %9) #64
  %20 = call i32 @dict_create(i32 noundef %19, ptr noundef nonnull %7) #64
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %45, label %22

22:                                               ; preds = %18
  %23 = call i32 @dict_copy(ptr noundef nonnull %9, ptr noundef nonnull %7) #64
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %22
  %26 = call i32 (ptr, ...) @zarray(ptr noundef nonnull %8) #64
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %45, label %28

28:                                               ; preds = %25
  %29 = call i32 @dict_put(ptr noundef nonnull %7, ptr noundef nonnull @name_FontMatrix, ptr noundef nonnull %8) #64
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %45, label %31

31:                                               ; preds = %28
  %32 = load ptr, ptr %5, align 8, !tbaa !7
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  store ptr %32, ptr %3, align 8, !tbaa !13
  %33 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  store i16 16, ptr %33, align 8, !tbaa !14
  %34 = call i32 @dict_put(ptr noundef nonnull %7, ptr noundef nonnull @name_FID, ptr noundef nonnull %3) #64
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %31
  %37 = load ptr, ptr %8, align 8, !tbaa !13
  %38 = load ptr, ptr %5, align 8, !tbaa !7
  %39 = getelementptr inbounds %struct.gs_font_s, ptr %38, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %37, ptr noundef nonnull align 8 dereferenceable(96) %39, i64 96, i1 false), !tbaa.struct !163
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef nonnull align 8 dereferenceable(16) %7, i64 16, i1 false), !tbaa.struct !101
  %40 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %41 = load i16, ptr %40, align 8, !tbaa !14
  %42 = and i16 %41, -257
  store i16 %42, ptr %40, align 8, !tbaa !14
  %43 = load ptr, ptr @osp, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.ref_s, ptr %43, i64 -1
  store ptr %44, ptr @osp, align 8, !tbaa !7
  br label %45

45:                                               ; preds = %36, %31, %28, %25, %22, %18, %13, %2
  %46 = phi i32 [ 0, %36 ], [ %11, %2 ], [ %16, %13 ], [ %20, %18 ], [ %23, %22 ], [ %26, %25 ], [ %29, %28 ], [ %34, %31 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  ret i32 %46
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @font_param(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 8
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = call i32 @dict_lookup(ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef nonnull @name_FID, ptr noundef nonnull %3) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %8
  %12 = load ptr, ptr %3, align 8, !tbaa !7
  %13 = load ptr, ptr %12, align 8, !tbaa !13
  store ptr %13, ptr %1, align 8, !tbaa !7
  %14 = icmp eq ptr %13, null
  %15 = select i1 %14, i32 -10, i32 0
  br label %16

16:                                               ; preds = %11, %8, %2
  %17 = phi i32 [ -20, %2 ], [ %9, %8 ], [ %15, %11 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmakefont(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  %3 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef %0, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = call i32 @make_font(ptr noundef %0, ptr noundef nonnull %2) #62, !range !263
  br label %7

7:                                                ; preds = %5, %1
  %8 = phi i32 [ %6, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetfont(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = call i32 @font_param(ptr noundef %0, ptr noundef nonnull %2) #62, !range !263
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load ptr, ptr %2, align 8, !tbaa !7
  %8 = tail call i32 @gs_setfont(ptr noundef %6, ptr noundef %7) #64
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %5
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 4), ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %11 = load ptr, ptr @osp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -1
  store ptr %12, ptr @osp, align 8, !tbaa !7
  br label %13

13:                                               ; preds = %10, %5, %1
  %14 = phi i32 [ %8, %10 ], [ %3, %1 ], [ %8, %5 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %14
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zcurrentfont(ptr noundef %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %7

6:                                                ; preds = %1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 4), i64 16, i1 false), !tbaa.struct !101
  br label %7

7:                                                ; preds = %6, %5
  %8 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcachestatus(ptr noundef %0) #0 {
  %2 = alloca [7 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %2) #65
  %3 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  call void @gs_cachestatus(ptr noundef %3, ptr noundef nonnull %2) #64
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 7
  store ptr %4, ptr @osp, align 8, !tbaa !7
  %5 = load ptr, ptr @ostop, align 8, !tbaa !7
  %6 = icmp ugt ptr %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %19

8:                                                ; preds = %8, %1
  %9 = phi i32 [ %16, %8 ], [ 0, %1 ]
  %10 = phi ptr [ %12, %8 ], [ %0, %1 ]
  %11 = phi ptr [ %17, %8 ], [ %2, %1 ]
  %12 = getelementptr inbounds %struct.ref_s, ptr %10, i64 1
  %13 = load i32, ptr %11, align 4, !tbaa !11
  %14 = zext i32 %13 to i64
  store i64 %14, ptr %12, align 8, !tbaa !13
  %15 = getelementptr inbounds %struct.ref_s, ptr %10, i64 1, i32 1
  store i16 20, ptr %15, align 8, !tbaa !14
  %16 = add nuw nsw i32 %9, 1
  %17 = getelementptr inbounds i32, ptr %11, i64 1
  %18 = icmp eq i32 %16, 7
  br i1 %18, label %19, label %8, !llvm.loop !264

19:                                               ; preds = %8, %7
  %20 = phi i32 [ -16, %7 ], [ 0, %8 ]
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %2) #65
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetcachelimit(ptr noundef %0) #0 {
  %2 = tail call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef null) #64
  %3 = icmp eq i32 %2, 1
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = icmp slt i32 %2, 0
  %6 = select i1 %5, i32 %2, i32 -20
  br label %16

7:                                                ; preds = %1
  %8 = load i64, ptr %0, align 8, !tbaa !13
  %9 = icmp ugt i64 %8, 4294967295
  br i1 %9, label %16, label %10

10:                                               ; preds = %7
  %11 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %12 = trunc i64 %8 to i32
  %13 = tail call i32 @gs_setcachelimit(ptr noundef %11, i32 noundef %12) #64
  %14 = load ptr, ptr @osp, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.ref_s, ptr %14, i64 -1
  store ptr %15, ptr @osp, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %10, %7, %4
  %17 = phi i32 [ %6, %4 ], [ 0, %10 ], [ -15, %7 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetcacheparams(ptr noundef %0) #0 {
  %2 = alloca [2 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  br label %3

3:                                                ; preds = %21, %1
  %4 = phi i1 [ true, %1 ], [ false, %21 ]
  %5 = phi i64 [ 0, %1 ], [ 1, %21 ]
  %6 = sub nsw i64 0, %5
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %6, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = and i16 %8, 252
  %10 = icmp eq i16 %9, 24
  br i1 %10, label %24, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %6
  %13 = tail call i32 @num_params(ptr noundef %12, i32 noundef 1, ptr noundef null) #64
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %.lcssa4 = phi i32 [ %13, %11 ]
  %.lcssa1 = phi i1 [ %4, %11 ]
  %16 = icmp slt i32 %.lcssa4, 0
  %17 = select i1 %16, i32 %.lcssa4, i32 -20
  br label %40

18:                                               ; preds = %11
  %19 = load i64, ptr %12, align 8, !tbaa !13
  %20 = icmp ugt i64 %19, 4294967295
  br i1 %20, label %40, label %21

21:                                               ; preds = %18
  %22 = trunc i64 %19 to i32
  %23 = getelementptr inbounds [2 x i32], ptr %2, i64 0, i64 %5
  store i32 %22, ptr %23, align 4, !tbaa !11
  br i1 %4, label %3, label %25, !llvm.loop !265

24:                                               ; preds = %3
  %.lcssa = phi i1 [ %4, %3 ]
  br i1 %.lcssa, label %37, label %31

25:                                               ; preds = %21
  %.lcssa3 = phi i1 [ %4, %21 ]
  %26 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %27 = getelementptr inbounds [2 x i32], ptr %2, i64 0, i64 1
  %28 = load i32, ptr %27, align 4, !tbaa !11
  %29 = tail call i32 @gs_setcachelower(ptr noundef %26, i32 noundef %28) #64
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %25, %24
  %32 = phi i1 [ %.lcssa3, %25 ], [ %.lcssa, %24 ]
  %33 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %34 = load i32, ptr %2, align 4, !tbaa !11
  %35 = tail call i32 @gs_setcacheupper(ptr noundef %33, i32 noundef %34) #64
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %31, %24
  %38 = phi i1 [ %32, %31 ], [ %.lcssa, %24 ]
  %39 = tail call i32 (ptr, ...) @zcleartomark(ptr noundef nonnull %0) #64
  br label %40

40:                                               ; preds = %37, %31, %25, %18, %15
  %41 = phi i32 [ %39, %37 ], [ %29, %25 ], [ %35, %31 ], [ %17, %15 ], [ -15, %18 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %41
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentcacheparams(ptr noundef %0) #0 {
  %2 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %3 = tail call i32 @gs_currentcachelower(ptr noundef %2) #64
  %4 = load ptr, ptr @ifont_dir, align 8, !tbaa !7
  %5 = tail call i32 @gs_currentcacheupper(ptr noundef %4) #64
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  store ptr %6, ptr @osp, align 8, !tbaa !7
  %7 = load ptr, ptr @ostop, align 8, !tbaa !7
  %8 = icmp ugt ptr %6, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %19

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store i64 0, ptr %11, align 8, !tbaa !13
  %12 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 24, ptr %12, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  %14 = zext i32 %3 to i64
  store i64 %14, ptr %13, align 8, !tbaa !13
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 20, ptr %15, align 8, !tbaa !14
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  %17 = zext i32 %5 to i64
  store i64 %17, ptr %16, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3, i32 1
  store i16 20, ptr %18, align 8, !tbaa !14
  br label %19

19:                                               ; preds = %10, %9
  %20 = phi i32 [ -16, %9 ], [ 0, %10 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal void @zfont_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zfont_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcopypage(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_copypage(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcopyscanlines(ptr nocapture noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %5 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 60
  br i1 %8, label %9, label %48

9:                                                ; preds = %1
  %10 = load ptr, ptr %4, align 8, !tbaa !13
  %11 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 252
  %14 = icmp eq i16 %13, 20
  br i1 %14, label %15, label %48

15:                                               ; preds = %9
  %16 = load i64, ptr %3, align 8, !tbaa !13
  %17 = icmp slt i64 %16, 0
  br i1 %17, label %48, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.gx_device_s, ptr %10, i64 0, i32 4
  %20 = load i32, ptr %19, align 4, !tbaa !266
  %21 = sext i32 %20 to i64
  %22 = icmp sgt i64 %16, %21
  br i1 %22, label %48, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %25 = load i16, ptr %24, align 8, !tbaa !14
  %26 = zext i16 %25 to i32
  %27 = and i32 %26, 252
  %28 = icmp eq i32 %27, 52
  br i1 %28, label %29, label %48

29:                                               ; preds = %23
  %30 = and i32 %26, 256
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %29
  %33 = trunc i64 %16 to i32
  %34 = load ptr, ptr %0, align 8, !tbaa !13
  %35 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %36 = load i16, ptr %35, align 2, !tbaa !17
  %37 = zext i16 %36 to i32
  %38 = call i32 @gs_copyscanlines(ptr noundef nonnull %10, i32 noundef %33, ptr noundef %34, i32 noundef %37, ptr noundef null, ptr noundef nonnull %2) #64
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %32
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %41 = load i32, ptr %2, align 4, !tbaa !11
  %42 = trunc i32 %41 to i16
  %43 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 2
  store i16 %42, ptr %43, align 2, !tbaa !17
  %44 = load i16, ptr %5, align 8, !tbaa !14
  %45 = or i16 %44, -32768
  store i16 %45, ptr %5, align 8, !tbaa !14
  %46 = load ptr, ptr @osp, align 8, !tbaa !7
  %47 = getelementptr inbounds %struct.ref_s, ptr %46, i64 -2
  store ptr %47, ptr @osp, align 8, !tbaa !7
  br label %48

48:                                               ; preds = %40, %32, %29, %23, %18, %15, %9, %1
  %49 = phi i32 [ 0, %40 ], [ -20, %1 ], [ -20, %9 ], [ -15, %18 ], [ -15, %15 ], [ -20, %23 ], [ -7, %29 ], [ -20, %32 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %49
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentdevice(ptr noundef %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call ptr @gs_currentdevice(ptr noundef %2) #64
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %4, ptr @osp, align 8, !tbaa !7
  %5 = load ptr, ptr @ostop, align 8, !tbaa !7
  %6 = icmp ugt ptr %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

8:                                                ; preds = %1
  store ptr %3, ptr %4, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 60, ptr %9, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %8, %7
  %11 = phi i32 [ -16, %7 ], [ 0, %8 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdevicename(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 60
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = load ptr, ptr %0, align 8, !tbaa !13
  %8 = tail call ptr @gs_devicename(ptr noundef %7) #64
  %9 = tail call i32 (ptr, ptr, ptr, ...) @string_to_ref(ptr noundef %8, ptr noundef nonnull %0, ptr noundef nonnull @.str.390) #64
  %10 = tail call i32 @llvm.smin.i32(i32 %9, i32 0)
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i32 [ -20, %1 ], [ %10, %6 ]
  ret i32 %12
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #19

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdeviceparams(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = tail call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #65
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %1
  %8 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %9 = load i16, ptr %8, align 8, !tbaa !14
  %10 = and i16 %9, 252
  %11 = icmp eq i16 %10, 60
  br i1 %11, label %12, label %50

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %14 = load ptr, ptr %13, align 8, !tbaa !13
  call void @gs_deviceparams(ptr noundef %14, ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef nonnull %4) #64
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = load float, ptr %2, align 8, !tbaa !267
  store float %16, ptr %15, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %15, i64 0, i32 1
  store i16 44, ptr %17, align 8, !tbaa !14
  %18 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  %19 = load float, ptr %18, align 8, !tbaa !268
  %20 = getelementptr inbounds %struct.ref_s, ptr %15, i64 1
  store float %19, ptr %20, align 8, !tbaa !13
  %21 = getelementptr inbounds %struct.ref_s, ptr %15, i64 1, i32 1
  store i16 44, ptr %21, align 8, !tbaa !14
  %22 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  %23 = load float, ptr %22, align 8, !tbaa !269
  %24 = getelementptr inbounds %struct.ref_s, ptr %15, i64 2
  store float %23, ptr %24, align 8, !tbaa !13
  %25 = getelementptr inbounds %struct.ref_s, ptr %15, i64 2, i32 1
  store i16 44, ptr %25, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  %27 = load float, ptr %26, align 8, !tbaa !270
  %28 = getelementptr inbounds %struct.ref_s, ptr %15, i64 3
  store float %27, ptr %28, align 8, !tbaa !13
  %29 = getelementptr inbounds %struct.ref_s, ptr %15, i64 3, i32 1
  store i16 44, ptr %29, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  %31 = load float, ptr %30, align 8, !tbaa !271
  %32 = getelementptr inbounds %struct.ref_s, ptr %15, i64 4
  store float %31, ptr %32, align 8, !tbaa !13
  %33 = getelementptr inbounds %struct.ref_s, ptr %15, i64 4, i32 1
  store i16 44, ptr %33, align 8, !tbaa !14
  %34 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  %35 = load float, ptr %34, align 8, !tbaa !272
  %36 = getelementptr inbounds %struct.ref_s, ptr %15, i64 5
  store float %35, ptr %36, align 8, !tbaa !13
  %37 = getelementptr inbounds %struct.ref_s, ptr %15, i64 5, i32 1
  store i16 44, ptr %37, align 8, !tbaa !14
  %38 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %38, ptr @osp, align 8, !tbaa !7
  %39 = load ptr, ptr @ostop, align 8, !tbaa !7
  %40 = icmp ugt ptr %38, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %12
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %50

42:                                               ; preds = %12
  store i64 0, ptr %13, align 8, !tbaa !13
  store i16 24, ptr %8, align 8, !tbaa !14
  %43 = load i32, ptr %3, align 4, !tbaa !11
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store i64 %44, ptr %45, align 8, !tbaa !13
  %46 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %46, align 8, !tbaa !14
  %47 = load i32, ptr %4, align 4, !tbaa !11
  %48 = sext i32 %47 to i64
  store i64 %48, ptr %38, align 8, !tbaa !13
  %49 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 20, ptr %49, align 8, !tbaa !14
  br label %50

50:                                               ; preds = %42, %41, %7, %1
  %51 = phi i32 [ -16, %41 ], [ 0, %42 ], [ %5, %1 ], [ -20, %7 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %51
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zflushpage(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_flushpage(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zgetdevice(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  %8 = add i64 %7, 2147483648
  %9 = icmp ult i64 %8, 4294967296
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = trunc i64 %7 to i32
  %12 = tail call ptr @gs_getdevice(i32 noundef %11) #64
  %13 = icmp eq ptr %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  store ptr %12, ptr %0, align 8, !tbaa !13
  store i16 60, ptr %2, align 8, !tbaa !14
  br label %15

15:                                               ; preds = %14, %10, %6, %1
  %16 = phi i32 [ 0, %14 ], [ -20, %1 ], [ -15, %6 ], [ -15, %10 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmakedevice(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  %3 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  %5 = getelementptr %struct.ref_s, ptr %0, i64 -3, i32 1
  %6 = load i16, ptr %5, align 8, !tbaa !14
  %7 = and i16 %6, 252
  %8 = icmp eq i16 %7, 60
  br i1 %8, label %9, label %42

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %11 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %12 = load i16, ptr %11, align 8, !tbaa !14
  %13 = and i16 %12, 252
  %14 = icmp eq i16 %13, 20
  br i1 %14, label %15, label %42

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %17 = load i16, ptr %16, align 8, !tbaa !14
  %18 = and i16 %17, 252
  %19 = icmp eq i16 %18, 20
  br i1 %19, label %20, label %42

20:                                               ; preds = %15
  %21 = load i64, ptr %10, align 8, !tbaa !13
  %22 = icmp ugt i64 %21, 2147483647
  br i1 %22, label %42, label %23

23:                                               ; preds = %20
  %24 = load i64, ptr %0, align 8, !tbaa !13
  %25 = icmp ugt i64 %24, 2147483647
  br i1 %25, label %42, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %28 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %27, ptr noundef nonnull %2) #64
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %26
  %31 = load ptr, ptr %4, align 8, !tbaa !13
  %32 = load i64, ptr %10, align 8, !tbaa !13
  %33 = trunc i64 %32 to i32
  %34 = load i64, ptr %0, align 8, !tbaa !13
  %35 = trunc i64 %34 to i32
  %36 = call i32 @gs_makedevice(ptr noundef nonnull %3, ptr noundef %31, ptr noundef nonnull %2, i32 noundef %33, i32 noundef %35, ptr noundef nonnull @alloc) #64
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %30
  %39 = load ptr, ptr %3, align 8, !tbaa !7
  store ptr %39, ptr %4, align 8, !tbaa !13
  store i16 60, ptr %5, align 8, !tbaa !14
  %40 = load ptr, ptr @osp, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.ref_s, ptr %40, i64 -3
  store ptr %41, ptr @osp, align 8, !tbaa !7
  br label %42

42:                                               ; preds = %38, %30, %26, %23, %20, %15, %9, %1
  %43 = phi i32 [ -20, %1 ], [ -20, %9 ], [ -20, %15 ], [ -15, %23 ], [ -15, %20 ], [ %28, %26 ], [ 0, %38 ], [ %36, %30 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %43
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmakeimagedevice(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  %3 = alloca ptr, align 8
  %4 = alloca [768 x float], align 16
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 3072, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %6 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %7 = load i16, ptr %6, align 8, !tbaa !14
  %8 = and i16 %7, 252
  %9 = icmp eq i16 %8, 20
  br i1 %9, label %10, label %74

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %12 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %13 = load i16, ptr %12, align 8, !tbaa !14
  %14 = and i16 %13, 252
  %15 = icmp eq i16 %14, 20
  br i1 %15, label %16, label %74

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %18 = load i16, ptr %17, align 8, !tbaa !14
  %19 = lshr i16 %18, 2
  %20 = and i16 %19, 63
  %21 = icmp eq i16 %20, 8
  br i1 %21, label %28, label %22

22:                                               ; preds = %16
  %23 = zext i16 %20 to i32
  switch i32 %23, label %74 [
    i32 0, label %24
    i32 10, label %24
  ]

24:                                               ; preds = %22, %22
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %26 = load i16, ptr %25, align 2, !tbaa !17
  %27 = zext i16 %26 to i32
  br label %28

28:                                               ; preds = %24, %16
  %29 = phi i32 [ %27, %24 ], [ -24, %16 ]
  %30 = load i64, ptr %5, align 8, !tbaa !13
  %31 = icmp ugt i64 %30, 2147483647
  br i1 %31, label %74, label %32

32:                                               ; preds = %28
  %33 = load i64, ptr %11, align 8, !tbaa !13
  %34 = icmp ugt i64 %33, 2147483647
  %35 = icmp sgt i32 %29, 256
  %36 = select i1 %34, i1 true, i1 %35
  br i1 %36, label %74, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  %39 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %38, ptr noundef nonnull %2) #64
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %74, label %41

41:                                               ; preds = %37
  %42 = icmp sgt i32 %29, 0
  br i1 %42, label %43, label %62

43:                                               ; preds = %41
  %44 = load ptr, ptr %0, align 8, !tbaa !13
  br label %45

45:                                               ; preds = %57, %43
  %46 = phi ptr [ %60, %57 ], [ %4, %43 ]
  %47 = phi ptr [ %59, %57 ], [ %44, %43 ]
  %48 = phi i32 [ %58, %57 ], [ 0, %43 ]
  %49 = getelementptr inbounds %struct.ref_s, ptr %47, i64 0, i32 1
  %50 = load i16, ptr %49, align 8, !tbaa !14
  %51 = and i16 %50, 252
  %52 = icmp eq i16 %51, 56
  br i1 %52, label %53, label %74

53:                                               ; preds = %45
  %54 = load ptr, ptr %47, align 8, !tbaa !13
  %55 = call i32 (ptr, ptr, ...) @gs_colorrgb(ptr noundef %54, ptr noundef nonnull %46) #64
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %74, label %57

57:                                               ; preds = %53
  %58 = add nuw nsw i32 %48, 1
  %59 = getelementptr inbounds %struct.ref_s, ptr %47, i64 1
  %60 = getelementptr inbounds float, ptr %46, i64 3
  %61 = icmp eq i32 %58, %29
  br i1 %61, label %62, label %45, !llvm.loop !273

62:                                               ; preds = %57, %41
  %63 = load i64, ptr %5, align 8, !tbaa !13
  %64 = trunc i64 %63 to i32
  %65 = load i64, ptr %11, align 8, !tbaa !13
  %66 = trunc i64 %65 to i32
  %67 = call i32 @gs_makeimagedevice(ptr noundef nonnull %3, ptr noundef nonnull %2, i32 noundef %64, i32 noundef %66, ptr noundef nonnull %4, i32 noundef %29, ptr noundef nonnull @alloc) #64
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %62
  %70 = load ptr, ptr %3, align 8, !tbaa !7
  store ptr %70, ptr %38, align 8, !tbaa !13
  %71 = getelementptr %struct.ref_s, ptr %0, i64 -3, i32 1
  store i16 60, ptr %71, align 8, !tbaa !14
  %72 = load ptr, ptr @osp, align 8, !tbaa !7
  %73 = getelementptr inbounds %struct.ref_s, ptr %72, i64 -3
  store ptr %73, ptr @osp, align 8, !tbaa !7
  br label %74

74:                                               ; preds = %69, %62, %53, %45, %37, %32, %28, %22, %10, %1
  %75 = phi i32 [ -20, %1 ], [ -20, %10 ], [ -20, %22 ], [ -15, %32 ], [ -15, %28 ], [ %39, %37 ], [ 0, %69 ], [ %67, %62 ], [ -20, %45 ], [ %55, %53 ]
  call void @llvm.lifetime.end.p0(i64 3072, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %75
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @znulldevice(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  tail call void @gs_nulldevice(ptr noundef %2) #64
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetdevice(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 60
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = load ptr, ptr %0, align 8, !tbaa !13
  %9 = tail call i32 @gs_setdevice(ptr noundef %7, ptr noundef %8) #64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = load ptr, ptr @osp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 -1
  store ptr %13, ptr @osp, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %11, %6, %1
  %15 = phi i32 [ -20, %1 ], [ 0, %11 ], [ %9, %6 ]
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal void @zdevice_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zdevice_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @gs_init() #0 {
  %1 = tail call ptr @gs_state_alloc(ptr noundef nonnull @alloc, ptr noundef nonnull @alloc_free) #64
  store ptr %1, ptr @igs, align 8, !tbaa !7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @istate, i8 0, i64 16, i1 false)
  store i16 32, ptr getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 1, i32 1), align 8, !tbaa !274
  store i64 0, ptr getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 2), align 8, !tbaa !13
  store i16 32, ptr getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 2, i32 1), align 8, !tbaa !275
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zgsave(ptr nocapture readnone %0) #0 {
  %2 = tail call ptr @alloc(i32 noundef 1, i32 noundef 72, ptr noundef nonnull @.str.414) #64
  %3 = load ptr, ptr @igs, align 8, !tbaa !7
  %4 = tail call i32 @gs_gsave(ptr noundef %3) #64
  %5 = icmp slt i32 %4, 0
  %6 = icmp eq ptr %2, null
  %7 = select i1 %5, i1 true, i1 %6
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %2, ptr noundef nonnull align 8 dereferenceable(72) @istate, i64 72, i1 false), !tbaa.struct !276
  store ptr %2, ptr @istate, align 8, !tbaa !221
  br label %9

9:                                                ; preds = %8, %1
  %10 = phi i32 [ 0, %8 ], [ -13, %1 ]
  ret i32 %10
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zgrestore(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_grestore(ptr noundef %2) #64
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load ptr, ptr @istate, align 8, !tbaa !221
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) @istate, ptr noundef nonnull align 8 dereferenceable(72) %6, i64 72, i1 false), !tbaa.struct !276
  tail call void @alloc_free(ptr noundef %6, i32 noundef 1, i32 noundef 72, ptr noundef nonnull @.str.1.417) #64
  br label %7

7:                                                ; preds = %5, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zgrestoreall(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_grestoreall(ptr noundef %2) #64
  %4 = load ptr, ptr @istate, align 8, !tbaa !221
  %5 = icmp eq ptr %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %6, %1
  %7 = phi ptr [ %8, %6 ], [ %4, %1 ]
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) @istate, ptr noundef nonnull align 8 dereferenceable(72) %7, i64 72, i1 false), !tbaa.struct !276
  tail call void @alloc_free(ptr noundef nonnull %7, i32 noundef 1, i32 noundef 72, ptr noundef nonnull @.str.2.420) #64
  %8 = load ptr, ptr @istate, align 8, !tbaa !221
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %6, !llvm.loop !277

10:                                               ; preds = %6, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zinitgraphics(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_initgraphics(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetlinewidth(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @real_param(ptr noundef %0, ptr noundef nonnull %2, i32 noundef 0) #64
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = call i32 @gs_setlinewidth(ptr noundef %6, double noundef %8) #64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = load ptr, ptr @osp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 -1
  store ptr %13, ptr @osp, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %11, %5, %1
  %15 = phi i32 [ 0, %11 ], [ %9, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentlinewidth(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = tail call float @gs_currentlinewidth(ptr noundef %7) #64
  store float %8, ptr %2, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %6, %5
  %11 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetlinecap(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  %8 = icmp ugt i64 %7, 2
  br i1 %8, label %15, label %9

9:                                                ; preds = %6
  %10 = trunc i64 %7 to i32
  %11 = load ptr, ptr @osp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -1
  store ptr %12, ptr @osp, align 8, !tbaa !7
  %13 = load ptr, ptr @igs, align 8, !tbaa !7
  %14 = tail call i32 @gs_setlinecap(ptr noundef %13, i32 noundef %10) #64
  br label %15

15:                                               ; preds = %9, %6, %1
  %16 = phi i32 [ %14, %9 ], [ -15, %6 ], [ -20, %1 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentlinecap(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %11

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = tail call i32 @gs_currentlinecap(ptr noundef %7) #64
  %9 = sext i32 %8 to i64
  store i64 %9, ptr %2, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %10, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %6, %5
  %12 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetlinejoin(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = load i64, ptr %0, align 8, !tbaa !13
  %8 = icmp ugt i64 %7, 2
  br i1 %8, label %15, label %9

9:                                                ; preds = %6
  %10 = trunc i64 %7 to i32
  %11 = load ptr, ptr @osp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -1
  store ptr %12, ptr @osp, align 8, !tbaa !7
  %13 = load ptr, ptr @igs, align 8, !tbaa !7
  %14 = tail call i32 @gs_setlinejoin(ptr noundef %13, i32 noundef %10) #64
  br label %15

15:                                               ; preds = %9, %6, %1
  %16 = phi i32 [ %14, %9 ], [ -15, %6 ], [ -20, %1 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentlinejoin(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %11

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = tail call i32 @gs_currentlinejoin(ptr noundef %7) #64
  %9 = sext i32 %8 to i64
  store i64 %9, ptr %2, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 20, ptr %10, align 8, !tbaa !14
  br label %11

11:                                               ; preds = %6, %5
  %12 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetmiterlimit(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @real_param(ptr noundef %0, ptr noundef nonnull %2, i32 noundef 0) #64
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = call i32 @gs_setmiterlimit(ptr noundef %6, double noundef %8) #64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = load ptr, ptr @osp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 -1
  store ptr %13, ptr @osp, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %11, %5, %1
  %15 = phi i32 [ 0, %11 ], [ %9, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentmiterlimit(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = tail call float @gs_currentmiterlimit(ptr noundef %7) #64
  store float %8, ptr %2, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %6, %5
  %11 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetdash(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @real_param(ptr noundef %0, ptr noundef nonnull %2, i32 noundef 0) #64
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %52

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %7 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  switch i32 %11, label %52 [
    i32 0, label %12
    i32 10, label %12
  ]

12:                                               ; preds = %5, %5
  %13 = and i16 %8, 512
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %52, label %15

15:                                               ; preds = %12
  %16 = load ptr, ptr %6, align 8, !tbaa !13
  %17 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 2
  %18 = load i16, ptr %17, align 2, !tbaa !17
  %19 = zext i16 %18 to i32
  %20 = call ptr @alloc(i32 noundef %19, i32 noundef 4, ptr noundef nonnull @.str.3.421) #64
  %21 = icmp eq i16 %18, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %38, %15
  %23 = phi i32 [ %26, %38 ], [ %19, %15 ]
  %24 = phi ptr [ %40, %38 ], [ %20, %15 ]
  %25 = phi ptr [ %41, %38 ], [ %16, %15 ]
  %26 = add nsw i32 %23, -1
  %27 = getelementptr inbounds %struct.ref_s, ptr %25, i64 0, i32 1
  %28 = load i16, ptr %27, align 8, !tbaa !14
  %29 = lshr i16 %28, 2
  %30 = and i16 %29, 63
  %31 = zext i16 %30 to i32
  switch i32 %31, label %37 [
    i32 5, label %32
    i32 11, label %35
  ]

32:                                               ; preds = %22
  %33 = load i64, ptr %25, align 8, !tbaa !13
  %34 = sitofp i64 %33 to float
  br label %38

35:                                               ; preds = %22
  %36 = load float, ptr %25, align 8, !tbaa !13
  br label %38

37:                                               ; preds = %22
  %.lcssa = phi ptr [ %24, %22 ]
  call void @alloc_free(ptr noundef %.lcssa, i32 noundef %19, i32 noundef 4, ptr noundef nonnull @.str.3.421) #64
  br label %52

38:                                               ; preds = %35, %32
  %39 = phi float [ %36, %35 ], [ %34, %32 ]
  %40 = getelementptr inbounds float, ptr %24, i64 1
  store float %39, ptr %24, align 4, !tbaa !103
  %41 = getelementptr inbounds %struct.ref_s, ptr %25, i64 1
  %42 = icmp eq i32 %26, 0
  br i1 %42, label %43, label %22, !llvm.loop !278

43:                                               ; preds = %38, %15
  %44 = load ptr, ptr @igs, align 8, !tbaa !7
  %45 = load float, ptr %2, align 4, !tbaa !103
  %46 = fpext float %45 to double
  %47 = call i32 @gs_setdash(ptr noundef %44, ptr noundef %20, i32 noundef %19, double noundef %46) #64
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = load ptr, ptr @osp, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.ref_s, ptr %50, i64 -2
  store ptr %51, ptr @osp, align 8, !tbaa !7
  br label %52

52:                                               ; preds = %49, %43, %37, %12, %5, %1
  %53 = phi i32 [ -20, %37 ], [ %3, %1 ], [ -20, %5 ], [ -7, %12 ], [ 0, %49 ], [ %47, %43 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %53
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentdash(ptr noundef %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_currentdash_length(ptr noundef %2) #64
  %4 = tail call ptr @alloc(i32 noundef %3, i32 noundef 16, ptr noundef nonnull @.str.4.422) #64
  %5 = sext i32 %3 to i64
  %6 = mul nsw i64 %5, 12
  %7 = getelementptr inbounds i8, ptr %4, i64 %6
  %8 = load ptr, ptr @igs, align 8, !tbaa !7
  %9 = tail call i32 @gs_currentdash_pattern(ptr noundef %8, ptr noundef %7) #64
  %10 = icmp eq i32 %3, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %11, %1
  %12 = phi ptr [ %19, %11 ], [ %7, %1 ]
  %13 = phi ptr [ %18, %11 ], [ %4, %1 ]
  %14 = phi i32 [ %15, %11 ], [ %3, %1 ]
  %15 = add nsw i32 %14, -1
  %16 = load float, ptr %12, align 4, !tbaa !103
  store float %16, ptr %13, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %13, i64 0, i32 1
  store i16 44, ptr %17, align 8, !tbaa !14
  %18 = getelementptr inbounds %struct.ref_s, ptr %13, i64 1
  %19 = getelementptr inbounds float, ptr %12, i64 1
  %20 = icmp eq i32 %15, 0
  br i1 %20, label %21, label %11, !llvm.loop !279

21:                                               ; preds = %11, %1
  %22 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %22, ptr @osp, align 8, !tbaa !7
  %23 = load ptr, ptr @ostop, align 8, !tbaa !7
  %24 = icmp ugt ptr %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %34

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %4, ptr %27, align 8, !tbaa !13
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 770, ptr %28, align 8, !tbaa !14
  %29 = trunc i32 %3 to i16
  %30 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 2
  store i16 %29, ptr %30, align 2, !tbaa !17
  %31 = load ptr, ptr @igs, align 8, !tbaa !7
  %32 = tail call float @gs_currentdash_offset(ptr noundef %31) #64
  store float %32, ptr %22, align 8, !tbaa !13
  %33 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %33, align 8, !tbaa !14
  br label %34

34:                                               ; preds = %26, %25
  %35 = phi i32 [ -16, %25 ], [ 0, %26 ]
  ret i32 %35
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetflat(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @real_param(ptr noundef %0, ptr noundef nonnull %2, i32 noundef 0) #64
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = call i32 @gs_setflat(ptr noundef %6, double noundef %8) #64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = load ptr, ptr @osp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 -1
  store ptr %13, ptr @osp, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %11, %5, %1
  %15 = phi i32 [ 0, %11 ], [ %9, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentflat(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = tail call float @gs_currentflat(ptr noundef %7) #64
  store float %8, ptr %2, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %6, %5
  %11 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetgray(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @real_param(ptr noundef %0, ptr noundef nonnull %2, i32 noundef 0) #64
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = call i32 @gs_setgray(ptr noundef %6, double noundef %8) #64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = load ptr, ptr @osp, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.ref_s, ptr %12, i64 -1
  store ptr %13, ptr @osp, align 8, !tbaa !7
  br label %14

14:                                               ; preds = %11, %5, %1
  %15 = phi i32 [ 0, %11 ], [ %9, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentgray(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %10

6:                                                ; preds = %1
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = tail call float @gs_currentgray(ptr noundef %7) #64
  store float %8, ptr %2, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %9, align 8, !tbaa !14
  br label %10

10:                                               ; preds = %6, %5
  %11 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsethsbcolor(ptr noundef %0) #0 {
  %2 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 3, ptr noundef nonnull %2) #64
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %20

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [3 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [3 x float], ptr %2, i64 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !103
  %14 = fpext float %13 to double
  %15 = call i32 @gs_sethsbcolor(ptr noundef %6, double noundef %8, double noundef %11, double noundef %14) #64
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %17, label %20

17:                                               ; preds = %5
  %18 = load ptr, ptr @osp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -3
  store ptr %19, ptr @osp, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %17, %5, %1
  %21 = phi i32 [ %15, %17 ], [ %15, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %2) #65
  ret i32 %21
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrenthsbcolor(ptr noundef %0) #0 {
  %2 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %2) #65
  %3 = load ptr, ptr @igs, align 8, !tbaa !7
  %4 = call i32 @gs_currenthsbcolor(ptr noundef %3, ptr noundef nonnull %2) #64
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  store ptr %5, ptr @osp, align 8, !tbaa !7
  %6 = load ptr, ptr @ostop, align 8, !tbaa !7
  %7 = icmp ugt ptr %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %20

9:                                                ; preds = %1
  %10 = load float, ptr %2, align 4, !tbaa !103
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %10, ptr %11, align 8, !tbaa !13
  %12 = getelementptr %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  %13 = getelementptr inbounds float, ptr %2, i64 1
  %14 = load float, ptr %13, align 4, !tbaa !103
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store float %14, ptr %15, align 8, !tbaa !13
  %16 = getelementptr %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %16, align 8, !tbaa !14
  %17 = getelementptr inbounds float, ptr %2, i64 2
  %18 = load float, ptr %17, align 4, !tbaa !103
  store float %18, ptr %5, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3, i32 1
  store i16 44, ptr %19, align 8, !tbaa !14
  br label %20

20:                                               ; preds = %9, %8
  %21 = phi i32 [ -16, %8 ], [ 0, %9 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %2) #65
  ret i32 %21
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetrgbcolor(ptr noundef %0) #0 {
  %2 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 3, ptr noundef nonnull %2) #64
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %20

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [3 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [3 x float], ptr %2, i64 0, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !103
  %14 = fpext float %13 to double
  %15 = call i32 @gs_setrgbcolor(ptr noundef %6, double noundef %8, double noundef %11, double noundef %14) #64
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %17, label %20

17:                                               ; preds = %5
  %18 = load ptr, ptr @osp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -3
  store ptr %19, ptr @osp, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %17, %5, %1
  %21 = phi i32 [ %15, %17 ], [ %15, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %2) #65
  ret i32 %21
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentrgbcolor(ptr noundef %0) #0 {
  %2 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %2) #65
  %3 = load ptr, ptr @igs, align 8, !tbaa !7
  %4 = call i32 @gs_currentrgbcolor(ptr noundef %3, ptr noundef nonnull %2) #64
  %5 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  store ptr %5, ptr @osp, align 8, !tbaa !7
  %6 = load ptr, ptr @ostop, align 8, !tbaa !7
  %7 = icmp ugt ptr %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %20

9:                                                ; preds = %1
  %10 = load float, ptr %2, align 4, !tbaa !103
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %10, ptr %11, align 8, !tbaa !13
  %12 = getelementptr %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  %13 = getelementptr inbounds float, ptr %2, i64 1
  %14 = load float, ptr %13, align 4, !tbaa !103
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store float %14, ptr %15, align 8, !tbaa !13
  %16 = getelementptr %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %16, align 8, !tbaa !14
  %17 = getelementptr inbounds float, ptr %2, i64 2
  %18 = load float, ptr %17, align 4, !tbaa !103
  store float %18, ptr %5, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3, i32 1
  store i16 44, ptr %19, align 8, !tbaa !14
  br label %20

20:                                               ; preds = %9, %8
  %21 = phi i32 [ -16, %8 ], [ 0, %9 ]
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %2) #65
  ret i32 %21
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zsettransfer(ptr nocapture noundef readonly %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = lshr i16 %3, 2
  %5 = and i16 %4, 63
  %6 = zext i16 %5 to i32
  switch i32 %6, label %13 [
    i32 0, label %7
    i32 10, label %7
  ]

7:                                                ; preds = %1, %1
  %8 = and i16 %3, 3
  %9 = icmp eq i16 %8, 3
  br i1 %9, label %10, label %13

10:                                               ; preds = %7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 2), ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %11 = load ptr, ptr @osp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -1
  store ptr %12, ptr @osp, align 8, !tbaa !7
  br label %13

13:                                               ; preds = %10, %7, %1
  %14 = phi i32 [ 0, %10 ], [ -20, %1 ], [ -7, %7 ]
  ret i32 %14
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @zcurrenttransfer(ptr noundef %0) #30 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store ptr %2, ptr @osp, align 8, !tbaa !7
  %3 = load ptr, ptr @ostop, align 8, !tbaa !7
  %4 = icmp ugt ptr %2, %3
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %7

6:                                                ; preds = %1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 2), i64 16, i1 false), !tbaa.struct !101
  br label %7

7:                                                ; preds = %6, %5
  %8 = phi i32 [ -16, %5 ], [ 0, %6 ]
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentscreen(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  %3 = alloca float, align 4
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  %5 = load ptr, ptr @igs, align 8, !tbaa !7
  %6 = call i32 @gs_currentscreen(ptr noundef %5, ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef nonnull %4) #64
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  store ptr %7, ptr @osp, align 8, !tbaa !7
  %8 = load ptr, ptr @ostop, align 8, !tbaa !7
  %9 = icmp ugt ptr %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %18

11:                                               ; preds = %1
  %12 = load float, ptr %2, align 4, !tbaa !103
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %12, ptr %13, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %14, align 8, !tbaa !14
  %15 = load float, ptr %3, align 4, !tbaa !103
  %16 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store float %15, ptr %16, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %17, align 8, !tbaa !14
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 1), i64 16, i1 false), !tbaa.struct !101
  br label %18

18:                                               ; preds = %11, %10
  %19 = phi i32 [ -16, %10 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal void @zgstate_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zgstate_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetscreen(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = call i32 @num_params(ptr noundef nonnull %3, i32 noundef 2, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %47, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  switch i32 %11, label %47 [
    i32 0, label %12
    i32 10, label %12
  ]

12:                                               ; preds = %6, %6
  %13 = and i16 %8, 3
  %14 = icmp eq i16 %13, 3
  br i1 %14, label %15, label %47

15:                                               ; preds = %12
  %16 = load i32, ptr @gs_screen_enum_sizeof, align 4, !tbaa !11
  %17 = call ptr @alloc(i32 noundef 1, i32 noundef %16, ptr noundef nonnull @.str.450) #64
  %18 = icmp eq ptr %17, null
  br i1 %18, label %47, label %19

19:                                               ; preds = %15
  %20 = load ptr, ptr @igs, align 8, !tbaa !7
  %21 = load float, ptr %2, align 4, !tbaa !103
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %24 = load float, ptr %23, align 4, !tbaa !103
  %25 = fpext float %24 to double
  %26 = call i32 @gs_screen_init(ptr noundef nonnull %17, ptr noundef %20, double noundef %22, double noundef %25) #64
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %19
  %29 = load i32, ptr @gs_screen_enum_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef nonnull %17, i32 noundef 1, i32 noundef %29, ptr noundef nonnull @.str.450) #64
  br label %47

30:                                               ; preds = %19
  %31 = load ptr, ptr @esp, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.ref_s, ptr %31, i64 3
  %33 = load ptr, ptr @estop, align 8, !tbaa !7
  %34 = icmp ugt ptr %32, %33
  br i1 %34, label %47, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.ref_s, ptr %31, i64 1
  store i16 0, ptr %36, align 8, !tbaa !13
  %37 = getelementptr inbounds %struct.ref_s, ptr %31, i64 1, i32 1
  store i16 33, ptr %37, align 8, !tbaa !14
  %38 = getelementptr inbounds %struct.ref_s, ptr %31, i64 2
  store ptr %38, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %38, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  store ptr %32, ptr @esp, align 8, !tbaa !7
  store ptr %17, ptr %32, align 8, !tbaa !13
  %39 = getelementptr inbounds %struct.ref_s, ptr %31, i64 3, i32 1
  store i16 52, ptr %39, align 8, !tbaa !14
  %40 = load i32, ptr @gs_screen_enum_sizeof, align 4, !tbaa !11
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds %struct.ref_s, ptr %31, i64 3, i32 2
  store i16 %41, ptr %42, align 2, !tbaa !17
  %43 = load ptr, ptr @osp, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.ref_s, ptr %43, i64 -3
  store ptr %44, ptr @osp, align 8, !tbaa !7
  %45 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  %46 = call i32 @screen_sample(ptr noundef nonnull %45) #62, !range !280
  br label %47

47:                                               ; preds = %35, %30, %28, %15, %12, %6, %1
  %48 = phi i32 [ %26, %28 ], [ %46, %35 ], [ %4, %1 ], [ -20, %6 ], [ -7, %12 ], [ -25, %15 ], [ -5, %30 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %48
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @screen_sample(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_point_s, align 4
  %3 = alloca %struct.ref_s, align 8
  %4 = load ptr, ptr @esp, align 8, !tbaa !7
  %5 = load ptr, ptr %4, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %6 = call i32 @gs_screen_currentpoint(ptr noundef %5, ptr noundef nonnull %2) #64
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3)
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %1
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = load ptr, ptr @esp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) getelementptr inbounds (%struct.int_state_s, ptr @istate, i64 0, i32 1), ptr noundef nonnull align 8 dereferenceable(16) %12, i64 16, i1 false), !tbaa.struct !101
  %13 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -3
  store ptr %13, ptr @esp, align 8, !tbaa !7
  br label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %15, ptr @osp, align 8, !tbaa !7
  %16 = load ptr, ptr @ostop, align 8, !tbaa !7
  %17 = icmp ugt ptr %15, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %32

19:                                               ; preds = %14
  %20 = load float, ptr %2, align 4, !tbaa !230
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %20, ptr %21, align 8, !tbaa !13
  %22 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %22, align 8, !tbaa !14
  %23 = getelementptr inbounds %struct.gs_point_s, ptr %2, i64 0, i32 1
  %24 = load float, ptr %23, align 4, !tbaa !232
  store float %24, ptr %15, align 8, !tbaa !13
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %25, align 8, !tbaa !14
  %26 = load ptr, ptr @esp, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.ref_s, ptr %26, i64 -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %27, i64 16, i1 false), !tbaa.struct !101
  %28 = getelementptr inbounds %struct.ref_s, ptr %26, i64 1
  store ptr @set_screen_continue, ptr %28, align 8, !tbaa !13
  %29 = getelementptr inbounds %struct.ref_s, ptr %26, i64 1, i32 1
  store i16 37, ptr %29, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.ref_s, ptr %26, i64 1, i32 2
  store i16 0, ptr %30, align 2, !tbaa !17
  %31 = getelementptr inbounds %struct.ref_s, ptr %26, i64 2
  store ptr %31, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %31, ptr noundef nonnull align 8 dereferenceable(16) %3, i64 16, i1 false), !tbaa.struct !101
  br label %32

32:                                               ; preds = %19, %18, %10, %1
  %33 = phi i32 [ 1, %10 ], [ -16, %18 ], [ 1, %19 ], [ %6, %1 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %33
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @set_screen_continue(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @esp, align 8, !tbaa !7
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = load float, ptr %2, align 4, !tbaa !103
  %9 = fpext float %8 to double
  %10 = call i32 @gs_screen_next(ptr noundef %7, double noundef %9) #64
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %5
  %13 = load ptr, ptr @osp, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.ref_s, ptr %13, i64 -1
  store ptr %14, ptr @osp, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %16 = call i32 @screen_sample(ptr noundef nonnull %15) #62, !range !280
  br label %17

17:                                               ; preds = %12, %5, %1
  %18 = phi i32 [ %16, %12 ], [ %3, %1 ], [ %10, %5 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal void @zht_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zht_op_init.my_defs) #64
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(write, inaccessiblemem: none) uwtable
define internal void @zmatrix_init() #24 {
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i32 [ 0, %0 ], [ %5, %1 ]
  %3 = phi ptr [ @gs_identity_matrix, %0 ], [ %6, %1 ]
  %4 = getelementptr inbounds %struct.ref_s, ptr %3, i64 0, i32 1
  store i16 44, ptr %4, align 8, !tbaa !14
  %5 = add nuw nsw i32 %2, 1
  %6 = getelementptr inbounds %struct.ref_s, ptr %3, i64 1
  %7 = icmp eq i32 %5, 6
  br i1 %7, label %8, label %1, !llvm.loop !281

8:                                                ; preds = %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentmatrix(ptr noundef %0) #0 {
  %2 = tail call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @igs, align 8, !tbaa !7
  %6 = load ptr, ptr %0, align 8, !tbaa !13
  %7 = tail call i32 @gs_currentmatrix(ptr noundef %5, ptr noundef %6) #64
  br label %8

8:                                                ; preds = %4, %1
  %9 = phi i32 [ 0, %4 ], [ %2, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zsetmatrix(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  %3 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef %0, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = call i32 @gs_setmatrix(ptr noundef %6, ptr noundef nonnull %2) #64
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = load ptr, ptr @osp, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 -1
  store ptr %11, ptr @osp, align 8, !tbaa !7
  br label %12

12:                                               ; preds = %9, %5, %1
  %13 = phi i32 [ 0, %9 ], [ %3, %1 ], [ %7, %5 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %13
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztranslate(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  %3 = tail call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %1
  %6 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %35, label %8

8:                                                ; preds = %5
  %9 = load ptr, ptr @igs, align 8, !tbaa !7
  %10 = load float, ptr %2, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %13 = load float, ptr %12, align 4, !tbaa !103
  %14 = fpext float %13 to double
  %15 = call i32 @gs_translate(ptr noundef %9, double noundef %11, double noundef %14) #64
  br label %29

16:                                               ; preds = %1
  %17 = load ptr, ptr %0, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %19 = call i32 @num_params(ptr noundef nonnull %18, i32 noundef 2, ptr noundef nonnull %2) #64
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %21, label %35

21:                                               ; preds = %16
  %22 = load float, ptr %2, align 4, !tbaa !103
  %23 = fpext float %22 to double
  %24 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !103
  %26 = fpext float %25 to double
  %27 = call i32 @gs_make_translation(double noundef %23, double noundef %26, ptr noundef %17) #64
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %28, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %29

29:                                               ; preds = %21, %8
  %30 = phi i32 [ %15, %8 ], [ %27, %21 ]
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load ptr, ptr @osp, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.ref_s, ptr %33, i64 -2
  store ptr %34, ptr @osp, align 8, !tbaa !7
  br label %35

35:                                               ; preds = %32, %29, %16, %5
  %36 = phi i32 [ %6, %5 ], [ %30, %32 ], [ %30, %29 ], [ %19, %16 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zscale(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = tail call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %1
  %6 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %35, label %8

8:                                                ; preds = %5
  %9 = load ptr, ptr @igs, align 8, !tbaa !7
  %10 = load float, ptr %2, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %13 = load float, ptr %12, align 4, !tbaa !103
  %14 = fpext float %13 to double
  %15 = call i32 @gs_scale(ptr noundef %9, double noundef %11, double noundef %14) #64
  br label %29

16:                                               ; preds = %1
  %17 = load ptr, ptr %0, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %19 = call i32 @num_params(ptr noundef nonnull %18, i32 noundef 2, ptr noundef nonnull %2) #64
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %21, label %35

21:                                               ; preds = %16
  %22 = load float, ptr %2, align 4, !tbaa !103
  %23 = fpext float %22 to double
  %24 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %25 = load float, ptr %24, align 4, !tbaa !103
  %26 = fpext float %25 to double
  %27 = call i32 @gs_make_scaling(double noundef %23, double noundef %26, ptr noundef %17) #64
  %28 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %28, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %29

29:                                               ; preds = %21, %8
  %30 = phi i32 [ %15, %8 ], [ %27, %21 ]
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load ptr, ptr @osp, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.ref_s, ptr %33, i64 -2
  store ptr %34, ptr @osp, align 8, !tbaa !7
  br label %35

35:                                               ; preds = %32, %29, %16, %5
  %36 = phi i32 [ %6, %5 ], [ %30, %32 ], [ %30, %29 ], [ %19, %16 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrotate(ptr noundef %0) #0 {
  %2 = alloca float, align 4
  %3 = tail call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = call i32 @num_params(ptr noundef %0, i32 noundef 1, ptr noundef nonnull %2) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %28, label %8

8:                                                ; preds = %5
  %9 = load ptr, ptr @igs, align 8, !tbaa !7
  %10 = load float, ptr %2, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = call i32 @gs_rotate(ptr noundef %9, double noundef %11) #64
  br label %22

13:                                               ; preds = %1
  %14 = load ptr, ptr %0, align 8, !tbaa !13
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %16 = call i32 @num_params(ptr noundef nonnull %15, i32 noundef 1, ptr noundef nonnull %2) #64
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = load float, ptr %2, align 4, !tbaa !103
  %20 = fpext float %19 to double
  %21 = call i32 @gs_make_rotation(double noundef %20, ptr noundef %14) #64
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %15, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %22

22:                                               ; preds = %18, %8
  %23 = phi i32 [ %12, %8 ], [ %21, %18 ]
  %24 = icmp sgt i32 %23, -1
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = load ptr, ptr @osp, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.ref_s, ptr %26, i64 -1
  store ptr %27, ptr @osp, align 8, !tbaa !7
  br label %28

28:                                               ; preds = %25, %22, %13, %5
  %29 = phi i32 [ %6, %5 ], [ %23, %25 ], [ %23, %22 ], [ %16, %13 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 %29
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zconcat(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  %3 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef %0, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = call i32 @gs_concat(ptr noundef %6, ptr noundef nonnull %2) #64
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = load ptr, ptr @osp, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.ref_s, ptr %10, i64 -1
  store ptr %11, ptr @osp, align 8, !tbaa !7
  br label %12

12:                                               ; preds = %9, %5, %1
  %13 = phi i32 [ 0, %9 ], [ %3, %1 ], [ %7, %5 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %13
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zconcatmatrix(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  %3 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %5 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %4, ptr noundef nonnull %2) #64
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %9 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %8, ptr noundef nonnull %3) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %7
  %12 = call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %11
  %15 = load ptr, ptr %0, align 8, !tbaa !13
  %16 = call i32 @gs_matrix_multiply(ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef %15) #64
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %19 = load ptr, ptr @osp, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 -2
  store ptr %20, ptr @osp, align 8, !tbaa !7
  br label %21

21:                                               ; preds = %18, %14, %11, %7, %1
  %22 = phi i32 [ %16, %18 ], [ %5, %1 ], [ %9, %7 ], [ %12, %11 ], [ %16, %14 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @ztransform(ptr noundef %0) #0 {
  %2 = tail call i32 @common_transform(ptr noundef %0, ptr noundef nonnull @gs_transform, ptr noundef nonnull @gs_point_transform) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @common_transform(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #0 {
  %4 = alloca [2 x float], align 4
  %5 = alloca %struct.gs_point_s, align 4
  %6 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %8 = load i16, ptr %7, align 8, !tbaa !14
  %9 = lshr i16 %8, 2
  %10 = and i16 %9, 63
  %11 = zext i16 %10 to i32
  switch i32 %11, label %65 [
    i32 11, label %12
    i32 5, label %14
    i32 0, label %17
    i32 10, label %17
  ]

12:                                               ; preds = %3
  %13 = load float, ptr %0, align 8, !tbaa !13
  br label %37

14:                                               ; preds = %3
  %15 = load i64, ptr %0, align 8, !tbaa !13
  %16 = sitofp i64 %15 to float
  br label %37

17:                                               ; preds = %3, %3
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %6) #65
  %18 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %0, ptr noundef nonnull %6) #64
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %32, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %22 = call i32 @num_params(ptr noundef nonnull %21, i32 noundef 2, ptr noundef nonnull %4) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %32, label %24

24:                                               ; preds = %20
  %25 = load float, ptr %4, align 4, !tbaa !103
  %26 = fpext float %25 to double
  %27 = getelementptr inbounds [2 x float], ptr %4, i64 0, i64 1
  %28 = load float, ptr %27, align 4, !tbaa !103
  %29 = fpext float %28 to double
  %30 = call i32 %2(double noundef %26, double noundef %29, ptr noundef nonnull %6, ptr noundef nonnull %5) #64
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %24, %20, %17
  %33 = phi i32 [ %30, %24 ], [ %22, %20 ], [ %18, %17 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %6) #65
  br label %65

34:                                               ; preds = %24
  %35 = load ptr, ptr @osp, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.ref_s, ptr %35, i64 -1
  store ptr %36, ptr @osp, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %6) #65
  br label %57

37:                                               ; preds = %14, %12
  %38 = phi float [ %16, %14 ], [ %13, %12 ]
  %39 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %40 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %41 = load i16, ptr %40, align 8, !tbaa !14
  %42 = lshr i16 %41, 2
  %43 = and i16 %42, 63
  %44 = zext i16 %43 to i32
  switch i32 %44, label %65 [
    i32 11, label %45
    i32 5, label %47
  ]

45:                                               ; preds = %37
  %46 = load float, ptr %39, align 8, !tbaa !13
  br label %50

47:                                               ; preds = %37
  %48 = load i64, ptr %39, align 8, !tbaa !13
  %49 = sitofp i64 %48 to float
  br label %50

50:                                               ; preds = %47, %45
  %51 = phi float [ %49, %47 ], [ %46, %45 ]
  %52 = load ptr, ptr @igs, align 8, !tbaa !7
  %53 = fpext float %51 to double
  %54 = fpext float %38 to double
  %55 = call i32 %1(ptr noundef %52, double noundef %53, double noundef %54, ptr noundef nonnull %5) #64
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %50, %34
  %58 = phi ptr [ %21, %34 ], [ %0, %50 ]
  %59 = load float, ptr %5, align 4, !tbaa !230
  %60 = getelementptr inbounds %struct.ref_s, ptr %58, i64 -1
  store float %59, ptr %60, align 8, !tbaa !13
  %61 = getelementptr %struct.ref_s, ptr %58, i64 -1, i32 1
  store i16 44, ptr %61, align 8, !tbaa !14
  %62 = getelementptr inbounds %struct.gs_point_s, ptr %5, i64 0, i32 1
  %63 = load float, ptr %62, align 4, !tbaa !232
  store float %63, ptr %58, align 8, !tbaa !13
  %64 = getelementptr inbounds %struct.ref_s, ptr %58, i64 0, i32 1
  store i16 44, ptr %64, align 8, !tbaa !14
  br label %65

65:                                               ; preds = %57, %50, %37, %32, %3
  %66 = phi i32 [ 0, %57 ], [ -20, %3 ], [ -20, %37 ], [ %55, %50 ], [ %33, %32 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  ret i32 %66
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zdtransform(ptr noundef %0) #0 {
  %2 = tail call i32 @common_transform(ptr noundef %0, ptr noundef nonnull @gs_dtransform, ptr noundef nonnull @gs_distance_transform) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zitransform(ptr noundef %0) #0 {
  %2 = tail call i32 @common_transform(ptr noundef %0, ptr noundef nonnull @gs_itransform, ptr noundef nonnull @gs_point_transform_inverse) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zidtransform(ptr noundef %0) #0 {
  %2 = tail call i32 @common_transform(ptr noundef %0, ptr noundef nonnull @gs_idtransform, ptr noundef nonnull @gs_distance_transform_inverse) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zinvertmatrix(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %4 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %3, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = call i32 (ptr, ...) @write_matrix(ptr noundef %0) #64
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %6
  %10 = load ptr, ptr %0, align 8, !tbaa !13
  %11 = call i32 @gs_matrix_invert(ptr noundef nonnull %2, ptr noundef %10) #64
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %14 = load ptr, ptr @osp, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.ref_s, ptr %14, i64 -1
  store ptr %15, ptr @osp, align 8, !tbaa !7
  br label %16

16:                                               ; preds = %13, %9, %6, %1
  %17 = phi i32 [ %11, %13 ], [ %4, %1 ], [ %7, %6 ], [ %11, %9 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %2) #65
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal void @zmatrix_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zmatrix_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zerasepage(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_erasepage(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zfill(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_fill(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zeofill(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_eofill(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zstroke(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_stroke(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcolorimage(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %3 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 8, !tbaa !14
  %5 = and i16 %4, 252
  %6 = icmp eq i16 %5, 20
  br i1 %6, label %7, label %52

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %9 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  %10 = load i16, ptr %9, align 8, !tbaa !14
  %11 = and i16 %10, 252
  %12 = icmp eq i16 %11, 4
  br i1 %12, label %13, label %52

13:                                               ; preds = %7
  %14 = load i64, ptr %0, align 8, !tbaa !13
  %15 = icmp ugt i64 %14, 4
  br i1 %15, label %52, label %16

16:                                               ; preds = %13
  %17 = trunc i64 %14 to i32
  switch i32 %17, label %52 [
    i32 1, label %18
    i32 3, label %22
    i32 4, label %22
  ]

18:                                               ; preds = %16
  %19 = load ptr, ptr @osp, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.ref_s, ptr %19, i64 -2
  store ptr %20, ptr @osp, align 8, !tbaa !7
  %21 = tail call i32 @zimage(ptr noundef nonnull %0) #62, !range !280
  br label %52

22:                                               ; preds = %16, %16
  %23 = load i16, ptr %8, align 8, !tbaa !13
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %33, label %25

25:                                               ; preds = %22
  %26 = sub nuw nsw i64 -6, %14
  %27 = shl nuw nsw i64 %14, 32
  %28 = add nsw i64 %27, -4294967296
  %29 = ashr exact i64 %28, 32
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds %struct.ref_s, ptr %2, i64 %30
  %32 = sub nsw i32 0, %17
  br label %33

33:                                               ; preds = %25, %22
  %34 = phi i32 [ %32, %25 ], [ %17, %22 ]
  %35 = phi i64 [ %26, %25 ], [ -7, %22 ]
  %36 = phi ptr [ %31, %25 ], [ %2, %22 ]
  %37 = getelementptr %struct.ref_s, ptr %36, i64 -2, i32 1
  %38 = load i16, ptr %37, align 8, !tbaa !14
  %39 = and i16 %38, 252
  %40 = icmp eq i16 %39, 20
  br i1 %40, label %41, label %52

41:                                               ; preds = %33
  %42 = getelementptr inbounds %struct.ref_s, ptr %36, i64 -2
  %43 = load i64, ptr %42, align 8, !tbaa !13
  %44 = icmp ugt i64 %43, 8
  br i1 %44, label %52, label %45

45:                                               ; preds = %41
  %46 = trunc i64 %43 to i32
  %47 = tail call i32 @image_setup(ptr noundef nonnull %36, i32 noundef %46, i32 noundef %34) #62, !range !280
  %48 = icmp sgt i32 %47, -1
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = load ptr, ptr @osp, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.ref_s, ptr %50, i64 %35
  store ptr %51, ptr @osp, align 8, !tbaa !7
  br label %52

52:                                               ; preds = %49, %45, %41, %33, %18, %16, %13, %7, %1
  %53 = phi i32 [ %21, %18 ], [ -20, %1 ], [ -20, %7 ], [ -15, %13 ], [ -15, %16 ], [ -20, %33 ], [ -15, %41 ], [ %47, %49 ], [ %47, %45 ]
  ret i32 %53
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zimage(ptr noundef %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 20
  br i1 %5, label %6, label %17

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %8 = load i64, ptr %7, align 8, !tbaa !13
  %9 = icmp ugt i64 %8, 8
  br i1 %9, label %17, label %10

10:                                               ; preds = %6
  %11 = trunc i64 %8 to i32
  %12 = tail call i32 @image_setup(ptr noundef nonnull %0, i32 noundef %11, i32 noundef 1) #62, !range !280
  %13 = icmp sgt i32 %12, -1
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  %15 = load ptr, ptr @osp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 -5
  store ptr %16, ptr @osp, align 8, !tbaa !7
  br label %17

17:                                               ; preds = %14, %10, %6, %1
  %18 = phi i32 [ -20, %1 ], [ -15, %6 ], [ %12, %14 ], [ %12, %10 ]
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @image_setup(ptr noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %4) #65
  %5 = icmp slt i32 %2, 0
  %6 = xor i32 %2, -1
  %7 = select i1 %5, i32 %6, i32 0
  %8 = load ptr, ptr @esp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 9
  %10 = load ptr, ptr @estop, align 8, !tbaa !7
  %11 = icmp ugt ptr %9, %10
  br i1 %11, label %105, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -4
  %14 = getelementptr %struct.ref_s, ptr %0, i64 -4, i32 1
  %15 = load i16, ptr %14, align 8, !tbaa !14
  %16 = and i16 %15, 252
  %17 = icmp eq i16 %16, 20
  br i1 %17, label %18, label %105

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  %20 = getelementptr %struct.ref_s, ptr %0, i64 -3, i32 1
  %21 = load i16, ptr %20, align 8, !tbaa !14
  %22 = and i16 %21, 252
  %23 = icmp eq i16 %22, 20
  br i1 %23, label %24, label %105

24:                                               ; preds = %18
  %25 = icmp slt i32 %7, 0
  br i1 %25, label %44, label %26

26:                                               ; preds = %24
  %27 = add nuw i32 %7, 1
  %28 = zext i32 %27 to i64
  br label %29

29:                                               ; preds = %41, %26
  %30 = phi i64 [ 0, %26 ], [ %42, %41 ]
  %31 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %30, i32 1
  %32 = load i16, ptr %31, align 8, !tbaa !14
  %33 = lshr i16 %32, 2
  %34 = and i16 %33, 63
  %35 = icmp eq i16 %34, 13
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = zext i16 %34 to i32
  switch i32 %37, label %105 [
    i32 0, label %38
    i32 10, label %38
  ]

38:                                               ; preds = %36, %36
  %39 = and i16 %32, 3
  %40 = icmp eq i16 %39, 3
  br i1 %40, label %41, label %105

41:                                               ; preds = %38, %29
  %42 = add nuw nsw i64 %30, 1
  %43 = icmp eq i64 %42, %28
  br i1 %43, label %44, label %29, !llvm.loop !282

44:                                               ; preds = %41, %24
  %45 = load i64, ptr %13, align 8, !tbaa !13
  %46 = icmp slt i64 %45, 1
  br i1 %46, label %105, label %47

47:                                               ; preds = %44
  %48 = load i64, ptr %19, align 8, !tbaa !13
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %105, label %50

50:                                               ; preds = %47
  %51 = icmp eq i64 %48, 0
  br i1 %51, label %105, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  %54 = call i32 (ptr, ptr, ...) @read_matrix(ptr noundef nonnull %53, ptr noundef nonnull %4) #64
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %105, label %56

56:                                               ; preds = %52
  %57 = load i32, ptr @gs_image_enum_sizeof, align 4, !tbaa !11
  %58 = call ptr @alloc(i32 noundef 1, i32 noundef %57, ptr noundef nonnull @.str.470) #64
  %59 = icmp eq ptr %58, null
  br i1 %59, label %105, label %60

60:                                               ; preds = %56
  %61 = icmp eq i32 %2, 0
  %62 = load ptr, ptr @igs, align 8, !tbaa !7
  %63 = load i64, ptr %13, align 8, !tbaa !13
  %64 = trunc i64 %63 to i32
  %65 = load i64, ptr %19, align 8, !tbaa !13
  %66 = trunc i64 %65 to i32
  br i1 %61, label %67, label %69

67:                                               ; preds = %60
  %68 = call i32 @gs_imagemask_init(ptr noundef nonnull %58, ptr noundef %62, i32 noundef %64, i32 noundef %66, i32 noundef %1, ptr noundef nonnull %4) #64
  br label %71

69:                                               ; preds = %60
  %70 = call i32 @gs_image_init(ptr noundef nonnull %58, ptr noundef %62, i32 noundef %64, i32 noundef %66, i32 noundef %1, i32 noundef %2, ptr noundef nonnull %4) #64
  br label %71

71:                                               ; preds = %69, %67
  %72 = phi i32 [ %68, %67 ], [ %70, %69 ]
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %105, label %74

74:                                               ; preds = %71
  %75 = load ptr, ptr @esp, align 8, !tbaa !7
  %76 = getelementptr inbounds %struct.ref_s, ptr %75, i64 1
  store i16 0, ptr %76, align 8, !tbaa !13
  %77 = getelementptr inbounds %struct.ref_s, ptr %75, i64 1, i32 1
  store i16 33, ptr %77, align 8, !tbaa !14
  %78 = getelementptr inbounds %struct.ref_s, ptr %75, i64 2
  store ptr %78, ptr @esp, align 8, !tbaa !7
  %79 = sext i32 %7 to i64
  br label %80

80:                                               ; preds = %88, %74
  %81 = phi ptr [ %78, %74 ], [ %89, %88 ]
  %82 = phi i64 [ 0, %74 ], [ %90, %88 ]
  %83 = icmp sgt i64 %82, %79
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.ref_s, ptr %0, i64 %82
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %81, ptr noundef nonnull align 8 dereferenceable(16) %85, i64 16, i1 false), !tbaa.struct !101
  br label %88

86:                                               ; preds = %80
  store i64 0, ptr %81, align 8, !tbaa !13
  %87 = getelementptr inbounds %struct.ref_s, ptr %81, i64 0, i32 1
  store i16 32, ptr %87, align 8, !tbaa !14
  br label %88

88:                                               ; preds = %86, %84
  %89 = getelementptr inbounds %struct.ref_s, ptr %81, i64 1
  store ptr %89, ptr @esp, align 8, !tbaa !7
  %90 = add nuw nsw i64 %82, 1
  %91 = icmp eq i64 %90, 4
  br i1 %91, label %92, label %80, !llvm.loop !283

92:                                               ; preds = %88
  %.lcssa1 = phi ptr [ %89, %88 ]
  %.lcssa = phi ptr [ %81, %88 ]
  store i64 0, ptr %.lcssa1, align 8, !tbaa !13
  %93 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 1, i32 1
  store i16 20, ptr %93, align 8, !tbaa !14
  %94 = trunc i32 %7 to i16
  %95 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 1, i32 2
  store i16 %94, ptr %95, align 2, !tbaa !17
  %96 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 2
  store ptr %58, ptr %96, align 8, !tbaa !13
  %97 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 2, i32 1
  store i16 52, ptr %97, align 8, !tbaa !14
  %98 = load i32, ptr @gs_image_enum_sizeof, align 4, !tbaa !11
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 2, i32 2
  store i16 %99, ptr %100, align 2, !tbaa !17
  %101 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 3
  store ptr @image_continue, ptr %101, align 8, !tbaa !13
  %102 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 3, i32 1
  store i16 37, ptr %102, align 8, !tbaa !14
  %103 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 3, i32 2
  store i16 0, ptr %103, align 2, !tbaa !17
  %104 = getelementptr inbounds %struct.ref_s, ptr %.lcssa, i64 4
  store ptr %104, ptr @esp, align 8, !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %104, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  br label %105

105:                                              ; preds = %92, %71, %56, %52, %50, %47, %44, %38, %36, %18, %12, %3
  %106 = phi i32 [ 1, %92 ], [ -5, %3 ], [ -20, %12 ], [ -20, %18 ], [ -23, %47 ], [ -23, %44 ], [ 0, %50 ], [ %54, %52 ], [ -25, %56 ], [ %72, %71 ], [ -7, %38 ], [ -20, %36 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %4) #65
  ret i32 %106
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @image_continue(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr @esp, align 8, !tbaa !7
  %3 = load ptr, ptr %2, align 8, !tbaa !13
  %4 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 1
  %5 = load i16, ptr %4, align 8, !tbaa !14
  %6 = and i16 %5, 252
  %7 = icmp eq i16 %6, 52
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ref_s, ptr %2, i64 -7
  store ptr %9, ptr @esp, align 8, !tbaa !7
  %10 = load i32, ptr @gs_image_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %3, i32 noundef 1, i32 noundef %10, ptr noundef nonnull @.str.1.471) #64
  br label %52

11:                                               ; preds = %1
  %12 = load ptr, ptr %0, align 8, !tbaa !13
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 0, i32 2
  %14 = load i16, ptr %13, align 2, !tbaa !17
  %15 = zext i16 %14 to i32
  %16 = tail call i32 @gs_image_next(ptr noundef %3, ptr noundef %12, i32 noundef %15) #64
  %17 = load i16, ptr %13, align 2, !tbaa !17
  %18 = icmp eq i16 %17, 0
  %19 = icmp sgt i32 %16, 0
  %20 = select i1 %18, i1 true, i1 %19
  %21 = load ptr, ptr @esp, align 8, !tbaa !7
  br i1 %20, label %22, label %25

22:                                               ; preds = %11
  %23 = getelementptr inbounds %struct.ref_s, ptr %21, i64 -7
  store ptr %23, ptr @esp, align 8, !tbaa !7
  %24 = load i32, ptr @gs_image_enum_sizeof, align 4, !tbaa !11
  tail call void @alloc_free(ptr noundef %3, i32 noundef 1, i32 noundef %24, ptr noundef nonnull @.str.2.472) #64
  br label %49

25:                                               ; preds = %11
  %26 = getelementptr inbounds %struct.ref_s, ptr %21, i64 -1
  %27 = load i64, ptr %26, align 8, !tbaa !13
  %28 = add nsw i64 %27, 1
  store i64 %28, ptr %26, align 8, !tbaa !13
  %29 = trunc i64 %28 to i32
  %30 = load ptr, ptr @esp, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.ref_s, ptr %30, i64 -5
  %32 = getelementptr %struct.ref_s, ptr %30, i64 -1, i32 2
  %33 = load i16, ptr %32, align 2, !tbaa !17
  %34 = zext i16 %33 to i32
  %35 = icmp sgt i32 %29, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %25
  %37 = getelementptr inbounds %struct.ref_s, ptr %30, i64 -1
  store i64 0, ptr %37, align 8, !tbaa !13
  %38 = load ptr, ptr @esp, align 8, !tbaa !7
  br label %39

39:                                               ; preds = %36, %25
  %40 = phi ptr [ %38, %36 ], [ %30, %25 ]
  %41 = phi i64 [ 0, %36 ], [ %28, %25 ]
  %42 = getelementptr inbounds %struct.ref_s, ptr %40, i64 1
  store ptr @image_continue, ptr %42, align 8, !tbaa !13
  %43 = getelementptr inbounds %struct.ref_s, ptr %40, i64 1, i32 1
  store i16 37, ptr %43, align 8, !tbaa !14
  %44 = getelementptr inbounds %struct.ref_s, ptr %40, i64 1, i32 2
  store i16 0, ptr %44, align 2, !tbaa !17
  %45 = getelementptr inbounds %struct.ref_s, ptr %40, i64 2
  store ptr %45, ptr @esp, align 8, !tbaa !7
  %46 = shl i64 %41, 32
  %47 = ashr exact i64 %46, 32
  %48 = getelementptr inbounds %struct.ref_s, ptr %31, i64 %47
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %45, ptr noundef nonnull align 8 dereferenceable(16) %48, i64 16, i1 false), !tbaa.struct !101
  br label %49

49:                                               ; preds = %39, %22
  %50 = load ptr, ptr @osp, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.ref_s, ptr %50, i64 -1
  store ptr %51, ptr @osp, align 8, !tbaa !7
  br label %52

52:                                               ; preds = %49, %8
  %53 = phi i32 [ -20, %8 ], [ 1, %49 ]
  ret i32 %53
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zimagemask(ptr noundef %0) #0 {
  %2 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  %3 = load i16, ptr %2, align 8, !tbaa !14
  %4 = and i16 %3, 252
  %5 = icmp eq i16 %4, 4
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  %8 = load i16, ptr %7, align 8, !tbaa !13
  %9 = zext i16 %8 to i32
  %10 = tail call i32 @image_setup(ptr noundef nonnull %0, i32 noundef %9, i32 noundef 0) #62, !range !280
  %11 = icmp sgt i32 %10, -1
  br i1 %11, label %12, label %15

12:                                               ; preds = %6
  %13 = load ptr, ptr @osp, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.ref_s, ptr %13, i64 -5
  store ptr %14, ptr @osp, align 8, !tbaa !7
  br label %15

15:                                               ; preds = %12, %6, %1
  %16 = phi i32 [ -20, %1 ], [ %10, %12 ], [ %10, %6 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal void @zpaint_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zpaint_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @znewpath(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_newpath(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurrentpoint(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_point_s, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = load ptr, ptr @igs, align 8, !tbaa !7
  %4 = call i32 @gs_currentpoint(ptr noundef %3, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store ptr %7, ptr @osp, align 8, !tbaa !7
  %8 = load ptr, ptr @ostop, align 8, !tbaa !7
  %9 = icmp ugt ptr %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %18

11:                                               ; preds = %6
  %12 = load float, ptr %2, align 4, !tbaa !230
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %12, ptr %13, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %14, align 8, !tbaa !14
  %15 = getelementptr inbounds %struct.gs_point_s, ptr %2, i64 0, i32 1
  %16 = load float, ptr %15, align 4, !tbaa !232
  store float %16, ptr %7, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %17, align 8, !tbaa !14
  br label %18

18:                                               ; preds = %11, %10, %1
  %19 = phi i32 [ -16, %10 ], [ 0, %11 ], [ %4, %1 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %19
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zmoveto(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = call i32 @gs_moveto(ptr noundef %6, double noundef %8, double noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load ptr, ptr @osp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 -2
  store ptr %16, ptr @osp, align 8, !tbaa !7
  br label %17

17:                                               ; preds = %14, %5, %1
  %18 = phi i32 [ 0, %14 ], [ %3, %1 ], [ %12, %5 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrmoveto(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = call i32 @gs_rmoveto(ptr noundef %6, double noundef %8, double noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load ptr, ptr @osp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 -2
  store ptr %16, ptr @osp, align 8, !tbaa !7
  br label %17

17:                                               ; preds = %14, %5, %1
  %18 = phi i32 [ 0, %14 ], [ %3, %1 ], [ %12, %5 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zlineto(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = call i32 @gs_lineto(ptr noundef %6, double noundef %8, double noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load ptr, ptr @osp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 -2
  store ptr %16, ptr @osp, align 8, !tbaa !7
  br label %17

17:                                               ; preds = %14, %5, %1
  %18 = phi i32 [ 0, %14 ], [ %3, %1 ], [ %12, %5 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrlineto(ptr noundef %0) #0 {
  %2 = alloca [2 x float], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 2, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 4, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [2 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = call i32 @gs_rlineto(ptr noundef %6, double noundef %8, double noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load ptr, ptr @osp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 -2
  store ptr %16, ptr @osp, align 8, !tbaa !7
  br label %17

17:                                               ; preds = %14, %5, %1
  %18 = phi i32 [ 0, %14 ], [ %3, %1 ], [ %12, %5 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  ret i32 %18
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarc(ptr noundef %0) #0 {
  %2 = alloca [5 x float], align 16
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 5, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 16, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 2
  %13 = load float, ptr %12, align 8, !tbaa !103
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 3
  %16 = load float, ptr %15, align 4, !tbaa !103
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 4
  %19 = load float, ptr %18, align 16, !tbaa !103
  %20 = fpext float %19 to double
  %21 = call i32 @gs_arc(ptr noundef %6, double noundef %8, double noundef %11, double noundef %14, double noundef %17, double noundef %20) #64
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %26

23:                                               ; preds = %5
  %24 = load ptr, ptr @osp, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 -5
  store ptr %25, ptr @osp, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %23, %5, %1
  %27 = phi i32 [ %3, %1 ], [ %21, %23 ], [ %21, %5 ]
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %2) #65
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarcn(ptr noundef %0) #0 {
  %2 = alloca [5 x float], align 16
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 5, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 16, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 2
  %13 = load float, ptr %12, align 8, !tbaa !103
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 3
  %16 = load float, ptr %15, align 4, !tbaa !103
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds [5 x float], ptr %2, i64 0, i64 4
  %19 = load float, ptr %18, align 16, !tbaa !103
  %20 = fpext float %19 to double
  %21 = call i32 @gs_arcn(ptr noundef %6, double noundef %8, double noundef %11, double noundef %14, double noundef %17, double noundef %20) #64
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %26

23:                                               ; preds = %5
  %24 = load ptr, ptr @osp, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.ref_s, ptr %24, i64 -5
  store ptr %25, ptr @osp, align 8, !tbaa !7
  br label %26

26:                                               ; preds = %23, %5, %1
  %27 = phi i32 [ %3, %1 ], [ %21, %23 ], [ %21, %5 ]
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %2) #65
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarct(ptr noundef %0) #0 {
  %2 = tail call i32 @common_arct(ptr noundef %0, ptr noundef null) #62
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @osp, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 -5
  store ptr %6, ptr @osp, align 8, !tbaa !7
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi i32 [ 0, %4 ], [ %2, %1 ]
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @common_arct(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca [5 x float], align 16
  call void @llvm.lifetime.start.p0(i64 20, ptr nonnull %3) #65
  %4 = call i32 @num_params(ptr noundef %0, i32 noundef 5, ptr noundef nonnull %3) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = load ptr, ptr @igs, align 8, !tbaa !7
  %8 = load float, ptr %3, align 16, !tbaa !103
  %9 = fpext float %8 to double
  %10 = getelementptr inbounds [5 x float], ptr %3, i64 0, i64 1
  %11 = load float, ptr %10, align 4, !tbaa !103
  %12 = fpext float %11 to double
  %13 = getelementptr inbounds [5 x float], ptr %3, i64 0, i64 2
  %14 = load float, ptr %13, align 8, !tbaa !103
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds [5 x float], ptr %3, i64 0, i64 3
  %17 = load float, ptr %16, align 4, !tbaa !103
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds [5 x float], ptr %3, i64 0, i64 4
  %20 = load float, ptr %19, align 16, !tbaa !103
  %21 = fpext float %20 to double
  %22 = call i32 @gs_arcto(ptr noundef %7, double noundef %9, double noundef %12, double noundef %15, double noundef %18, double noundef %21, ptr noundef %1) #64
  br label %23

23:                                               ; preds = %6, %2
  %24 = phi i32 [ %22, %6 ], [ %4, %2 ]
  call void @llvm.lifetime.end.p0(i64 20, ptr nonnull %3) #65
  ret i32 %24
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zarcto(ptr noundef %0) #0 {
  %2 = alloca [4 x float], align 16
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = call i32 @common_arct(ptr noundef %0, ptr noundef nonnull %2) #62
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %1
  %6 = load float, ptr %2, align 16, !tbaa !103
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -4
  store float %6, ptr %7, align 8, !tbaa !13
  %8 = getelementptr %struct.ref_s, ptr %0, i64 -4, i32 1
  store i16 44, ptr %8, align 8, !tbaa !14
  %9 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  store float %10, ptr %11, align 8, !tbaa !13
  %12 = getelementptr %struct.ref_s, ptr %0, i64 -3, i32 1
  store i16 44, ptr %12, align 8, !tbaa !14
  %13 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 2
  %14 = load float, ptr %13, align 8, !tbaa !103
  %15 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  store float %14, ptr %15, align 8, !tbaa !13
  %16 = getelementptr %struct.ref_s, ptr %0, i64 -2, i32 1
  store i16 44, ptr %16, align 8, !tbaa !14
  %17 = getelementptr inbounds [4 x float], ptr %2, i64 0, i64 3
  %18 = load float, ptr %17, align 4, !tbaa !103
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  store float %18, ptr %19, align 8, !tbaa !13
  %20 = getelementptr %struct.ref_s, ptr %0, i64 -1, i32 1
  store i16 44, ptr %20, align 8, !tbaa !14
  %21 = load ptr, ptr @osp, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.ref_s, ptr %21, i64 -1
  store ptr %22, ptr @osp, align 8, !tbaa !7
  br label %23

23:                                               ; preds = %5, %1
  %24 = phi i32 [ 0, %5 ], [ %3, %1 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %24
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zcurveto(ptr noundef %0) #0 {
  %2 = alloca [6 x float], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 6, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %29, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 16, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 2
  %13 = load float, ptr %12, align 8, !tbaa !103
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 3
  %16 = load float, ptr %15, align 4, !tbaa !103
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 4
  %19 = load float, ptr %18, align 16, !tbaa !103
  %20 = fpext float %19 to double
  %21 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 5
  %22 = load float, ptr %21, align 4, !tbaa !103
  %23 = fpext float %22 to double
  %24 = call i32 @gs_curveto(ptr noundef %6, double noundef %8, double noundef %11, double noundef %14, double noundef %17, double noundef %20, double noundef %23) #64
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %29

26:                                               ; preds = %5
  %27 = load ptr, ptr @osp, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.ref_s, ptr %27, i64 -6
  store ptr %28, ptr @osp, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %26, %5, %1
  %30 = phi i32 [ %3, %1 ], [ %24, %26 ], [ %24, %5 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #65
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zrcurveto(ptr noundef %0) #0 {
  %2 = alloca [6 x float], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #65
  %3 = call i32 @num_params(ptr noundef %0, i32 noundef 6, ptr noundef nonnull %2) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %29, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @igs, align 8, !tbaa !7
  %7 = load float, ptr %2, align 16, !tbaa !103
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !103
  %11 = fpext float %10 to double
  %12 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 2
  %13 = load float, ptr %12, align 8, !tbaa !103
  %14 = fpext float %13 to double
  %15 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 3
  %16 = load float, ptr %15, align 4, !tbaa !103
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 4
  %19 = load float, ptr %18, align 16, !tbaa !103
  %20 = fpext float %19 to double
  %21 = getelementptr inbounds [6 x float], ptr %2, i64 0, i64 5
  %22 = load float, ptr %21, align 4, !tbaa !103
  %23 = fpext float %22 to double
  %24 = call i32 @gs_rcurveto(ptr noundef %6, double noundef %8, double noundef %11, double noundef %14, double noundef %17, double noundef %20, double noundef %23) #64
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %29

26:                                               ; preds = %5
  %27 = load ptr, ptr @osp, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.ref_s, ptr %27, i64 -6
  store ptr %28, ptr @osp, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %26, %5, %1
  %30 = phi i32 [ %3, %1 ], [ %24, %26 ], [ %24, %5 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #65
  ret i32 %30
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zclosepath(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_closepath(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal void @zpath_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zpath_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zflattenpath(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_flattenpath(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zreversepath(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_reversepath(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zstrokepath(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_strokepath(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zclippath(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_clippath(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zpathbbox(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_rect_s, align 4
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #65
  %3 = load ptr, ptr @igs, align 8, !tbaa !7
  %4 = call i32 @gs_pathbbox(ptr noundef %3, ptr noundef nonnull %2) #64
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %26, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.ref_s, ptr %0, i64 4
  store ptr %7, ptr @osp, align 8, !tbaa !7
  %8 = load ptr, ptr @ostop, align 8, !tbaa !7
  %9 = icmp ugt ptr %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store ptr %0, ptr @osp, align 8, !tbaa !7
  br label %26

11:                                               ; preds = %6
  %12 = load float, ptr %2, align 4, !tbaa !284
  %13 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %12, ptr %13, align 8, !tbaa !13
  %14 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %14, align 8, !tbaa !14
  %15 = getelementptr inbounds %struct.gs_point_s, ptr %2, i64 0, i32 1
  %16 = load float, ptr %15, align 4, !tbaa !286
  %17 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2
  store float %16, ptr %17, align 8, !tbaa !13
  %18 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %18, align 8, !tbaa !14
  %19 = getelementptr inbounds %struct.gs_rect_s, ptr %2, i64 0, i32 1
  %20 = load float, ptr %19, align 4, !tbaa !287
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3
  store float %20, ptr %21, align 8, !tbaa !13
  %22 = getelementptr inbounds %struct.ref_s, ptr %0, i64 3, i32 1
  store i16 44, ptr %22, align 8, !tbaa !14
  %23 = getelementptr inbounds %struct.gs_rect_s, ptr %2, i64 0, i32 1, i32 1
  %24 = load float, ptr %23, align 4, !tbaa !288
  store float %24, ptr %7, align 8, !tbaa !13
  %25 = getelementptr inbounds %struct.ref_s, ptr %0, i64 4, i32 1
  store i16 44, ptr %25, align 8, !tbaa !14
  br label %26

26:                                               ; preds = %11, %10, %1
  %27 = phi i32 [ -16, %10 ], [ 0, %11 ], [ %4, %1 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #65
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zpathforall(ptr noundef %0) #0 {
  %2 = load ptr, ptr getelementptr inbounds ([6 x ptr], ptr @osp_nargs, i64 0, i64 3), align 8, !tbaa !7
  %3 = icmp ugt ptr %2, %0
  br i1 %3, label %31, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr @esp, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.ref_s, ptr %5, i64 8
  %7 = load ptr, ptr @estop, align 8, !tbaa !7
  %8 = icmp ugt ptr %6, %7
  br i1 %8, label %31, label %9

9:                                                ; preds = %4
  %10 = load i32, ptr @gs_path_enum_sizeof, align 4, !tbaa !11
  %11 = tail call ptr @alloc(i32 noundef 1, i32 noundef %10, ptr noundef nonnull @.str.497) #64
  %12 = icmp eq ptr %11, null
  br i1 %12, label %31, label %13

13:                                               ; preds = %9
  %14 = load ptr, ptr @igs, align 8, !tbaa !7
  tail call void @gs_path_enum_init(ptr noundef nonnull %11, ptr noundef %14) #64
  %15 = load ptr, ptr @esp, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.ref_s, ptr %15, i64 1
  store i16 2, ptr %16, align 8, !tbaa !13
  %17 = getelementptr inbounds %struct.ref_s, ptr %15, i64 1, i32 1
  store i16 33, ptr %17, align 8, !tbaa !14
  %18 = getelementptr inbounds %struct.ref_s, ptr %15, i64 2
  store ptr %18, ptr @esp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(16) %19, i64 16, i1 false), !tbaa.struct !101
  %20 = getelementptr inbounds %struct.ref_s, ptr %15, i64 3
  store ptr %20, ptr @esp, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %20, ptr noundef nonnull align 8 dereferenceable(16) %21, i64 16, i1 false), !tbaa.struct !101
  %22 = getelementptr inbounds %struct.ref_s, ptr %15, i64 4
  store ptr %22, ptr @esp, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %22, ptr noundef nonnull align 8 dereferenceable(16) %23, i64 16, i1 false), !tbaa.struct !101
  %24 = getelementptr inbounds %struct.ref_s, ptr %15, i64 5
  store ptr %24, ptr @esp, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %24, ptr noundef nonnull align 8 dereferenceable(16) %0, i64 16, i1 false), !tbaa.struct !101
  %25 = getelementptr inbounds %struct.ref_s, ptr %15, i64 6
  store ptr %25, ptr @esp, align 8, !tbaa !7
  store ptr %11, ptr %25, align 8, !tbaa !13
  %26 = getelementptr inbounds %struct.ref_s, ptr %15, i64 6, i32 1
  store i16 20, ptr %26, align 8, !tbaa !14
  %27 = load ptr, ptr @osp, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.ref_s, ptr %27, i64 -4
  store ptr %28, ptr @osp, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.ref_s, ptr %0, i64 -4
  %30 = tail call i32 @path_continue(ptr noundef nonnull %29) #62
  br label %31

31:                                               ; preds = %13, %9, %4, %1
  %32 = phi i32 [ %30, %13 ], [ -17, %1 ], [ -5, %4 ], [ -25, %9 ]
  ret i32 %32
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @path_continue(ptr noundef %0) #0 {
  %2 = alloca [3 x %struct.gs_point_s], align 16
  %3 = load ptr, ptr @esp, align 8, !tbaa !7
  %4 = load ptr, ptr %3, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #65
  %5 = call i32 @gs_path_enum_next(ptr noundef %4, ptr noundef nonnull %2) #64
  switch i32 %5, label %71 [
    i32 0, label %6
    i32 1, label %10
    i32 2, label %17
    i32 3, label %24
    i32 4, label %45
  ]

6:                                                ; preds = %1
  %7 = load i32, ptr @gs_path_enum_sizeof, align 4, !tbaa !11
  call void @alloc_free(ptr noundef %4, i32 noundef 1, i32 noundef %7, ptr noundef nonnull @.str.497) #64
  %8 = load ptr, ptr @esp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.ref_s, ptr %8, i64 -6
  br label %69

10:                                               ; preds = %1
  %11 = load ptr, ptr @esp, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.ref_s, ptr %11, i64 2
  %13 = getelementptr inbounds %struct.ref_s, ptr %11, i64 -4
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %12, ptr noundef nonnull align 8 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !101
  %14 = load ptr, ptr @ostop, align 8, !tbaa !7
  %15 = getelementptr i8, ptr %0, i64 32
  %16 = icmp ugt ptr %15, %14
  br i1 %16, label %57, label %49

17:                                               ; preds = %1
  %18 = load ptr, ptr @esp, align 8, !tbaa !7
  %19 = getelementptr inbounds %struct.ref_s, ptr %18, i64 2
  %20 = getelementptr inbounds %struct.ref_s, ptr %18, i64 -3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %19, ptr noundef nonnull align 8 dereferenceable(16) %20, i64 16, i1 false), !tbaa.struct !101
  %21 = load ptr, ptr @ostop, align 8, !tbaa !7
  %22 = getelementptr i8, ptr %0, i64 32
  %23 = icmp ugt ptr %22, %21
  br i1 %23, label %57, label %49

24:                                               ; preds = %1
  %25 = load ptr, ptr @esp, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.ref_s, ptr %25, i64 2
  %27 = getelementptr inbounds %struct.ref_s, ptr %25, i64 -2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %26, ptr noundef nonnull align 8 dereferenceable(16) %27, i64 16, i1 false), !tbaa.struct !101
  %28 = load ptr, ptr @ostop, align 8, !tbaa !7
  br label %29

29:                                               ; preds = %35, %24
  %30 = phi i32 [ 3, %24 ], [ %36, %35 ]
  %31 = phi ptr [ %0, %24 ], [ %33, %35 ]
  %32 = phi ptr [ %2, %24 ], [ %43, %35 ]
  %33 = getelementptr inbounds %struct.ref_s, ptr %31, i64 2
  %34 = icmp ugt ptr %33, %28
  br i1 %34, label %57, label %35

35:                                               ; preds = %29
  %36 = add nsw i32 %30, -1
  %37 = load float, ptr %32, align 4, !tbaa !230
  %38 = getelementptr inbounds %struct.ref_s, ptr %31, i64 1
  store float %37, ptr %38, align 8, !tbaa !13
  %39 = getelementptr inbounds %struct.ref_s, ptr %31, i64 1, i32 1
  store i16 44, ptr %39, align 8, !tbaa !14
  %40 = getelementptr inbounds %struct.gs_point_s, ptr %32, i64 0, i32 1
  %41 = load float, ptr %40, align 4, !tbaa !232
  store float %41, ptr %33, align 8, !tbaa !13
  %42 = getelementptr inbounds %struct.ref_s, ptr %31, i64 2, i32 1
  store i16 44, ptr %42, align 8, !tbaa !14
  %43 = getelementptr inbounds %struct.gs_point_s, ptr %32, i64 1
  %44 = icmp eq i32 %36, 0
  br i1 %44, label %57, label %29, !llvm.loop !289

45:                                               ; preds = %1
  %46 = load ptr, ptr @esp, align 8, !tbaa !7
  %47 = getelementptr inbounds %struct.ref_s, ptr %46, i64 2
  %48 = getelementptr inbounds %struct.ref_s, ptr %46, i64 -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, ptr noundef nonnull align 8 dereferenceable(16) %48, i64 16, i1 false), !tbaa.struct !101
  br label %63

49:                                               ; preds = %17, %10
  %50 = phi ptr [ %15, %10 ], [ %22, %17 ]
  %51 = load float, ptr %2, align 16, !tbaa !230
  %52 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1
  store float %51, ptr %52, align 8, !tbaa !13
  %53 = getelementptr inbounds %struct.ref_s, ptr %0, i64 1, i32 1
  store i16 44, ptr %53, align 8, !tbaa !14
  %54 = getelementptr inbounds %struct.gs_point_s, ptr %2, i64 0, i32 1
  %55 = load float, ptr %54, align 4, !tbaa !232
  store float %55, ptr %50, align 8, !tbaa !13
  %56 = getelementptr inbounds %struct.ref_s, ptr %0, i64 2, i32 1
  store i16 44, ptr %56, align 8, !tbaa !14
  br label %57

57:                                               ; preds = %49, %35, %29, %17, %10
  %58 = phi ptr [ %0, %10 ], [ %0, %17 ], [ %50, %49 ], [ %31, %29 ], [ %33, %35 ]
  %59 = phi i1 [ true, %10 ], [ true, %17 ], [ false, %49 ], [ %34, %29 ], [ %34, %35 ]
  %60 = phi i32 [ -16, %10 ], [ -16, %17 ], [ 0, %49 ], [ -16, %29 ], [ 0, %35 ]
  store ptr %58, ptr @osp, align 8, !tbaa !7
  br i1 %59, label %71, label %61

61:                                               ; preds = %57
  %62 = load ptr, ptr @esp, align 8, !tbaa !7
  br label %63

63:                                               ; preds = %61, %45
  %64 = phi ptr [ %62, %61 ], [ %46, %45 ]
  %65 = getelementptr inbounds %struct.ref_s, ptr %64, i64 1
  store ptr @path_continue, ptr %65, align 8, !tbaa !13
  %66 = getelementptr inbounds %struct.ref_s, ptr %64, i64 1, i32 1
  store i16 37, ptr %66, align 8, !tbaa !14
  %67 = getelementptr inbounds %struct.ref_s, ptr %64, i64 1, i32 2
  store i16 0, ptr %67, align 2, !tbaa !17
  %68 = getelementptr inbounds %struct.ref_s, ptr %64, i64 2
  br label %69

69:                                               ; preds = %63, %6
  %70 = phi ptr [ %68, %63 ], [ %9, %6 ]
  store ptr %70, ptr @esp, align 8, !tbaa !7
  br label %71

71:                                               ; preds = %69, %57, %1
  %72 = phi i32 [ %5, %1 ], [ %60, %57 ], [ 1, %69 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #65
  ret i32 %72
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zinitclip(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_initclip(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zclip(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_clip(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @zeoclip(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @igs, align 8, !tbaa !7
  %3 = tail call i32 @gs_eoclip(ptr noundef %2) #64
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal void @zpath2_op_init() #0 {
  %1 = tail call i32 (ptr, ...) @z_op_init(ptr noundef nonnull @zpath2_op_init.my_defs) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @show_setup(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca %struct.gs_fixed_rect_s, align 16
  store ptr %1, ptr %0, align 8, !tbaa !290
  %5 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  store ptr %2, ptr %5, align 8, !tbaa !294
  %6 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 5
  store i32 256, ptr %6, align 4, !tbaa !295
  %7 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 8
  store i32 0, ptr %7, align 8, !tbaa !296
  %8 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 9
  store i32 0, ptr %8, align 4, !tbaa !297
  %9 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 11
  store i32 0, ptr %9, align 4, !tbaa !298
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 19
  store i32 0, ptr %10, align 8, !tbaa !299
  %11 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  store i32 0, ptr %11, align 4, !tbaa !300
  %12 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 26
  store ptr @continue_show, ptr %12, align 8, !tbaa !301
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 18
  %14 = load i32, ptr %13, align 8, !tbaa !302
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %25

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 17
  tail call void @gs_make_identity(ptr noundef nonnull %17) #64
  %18 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 16
  %19 = load ptr, ptr %18, align 8, !tbaa !303
  %20 = getelementptr inbounds %struct.gs_font_s, ptr %19, i64 0, i32 5
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 2
  %22 = tail call i32 @gs_matrix_multiply(ptr noundef nonnull %20, ptr noundef nonnull %21, ptr noundef nonnull %17) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %59, label %24

24:                                               ; preds = %16
  store i32 1, ptr %13, align 8, !tbaa !302
  br label %25

25:                                               ; preds = %24, %3
  %26 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 17, i32 2
  %27 = load i64, ptr %26, align 8, !tbaa !18
  %28 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 17, i32 4
  %29 = load i64, ptr %28, align 8, !tbaa !18
  %30 = or i64 %29, %27
  %31 = and i64 %30, 9223372036854775807
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %43, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 17
  %35 = load i64, ptr %34, align 8, !tbaa !18
  %36 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 17, i32 6
  %37 = load i64, ptr %36, align 8, !tbaa !18
  %38 = or i64 %37, %35
  %39 = and i64 %38, 9223372036854775807
  %40 = icmp eq i64 %39, 0
  %41 = zext i1 %40 to i32
  %42 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 12
  store i32 %41, ptr %42, align 8, !tbaa !304
  br i1 %40, label %45, label %59

43:                                               ; preds = %25
  %44 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 12
  store i32 1, ptr %44, align 8, !tbaa !304
  br label %45

45:                                               ; preds = %43, %33
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #65
  %46 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 8
  %47 = load ptr, ptr %46, align 8, !tbaa !305
  %48 = call i32 @gx_cpath_box_for_check(ptr noundef %47, ptr noundef nonnull %4) #64
  %49 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 13
  %50 = load <2 x i64>, ptr %4, align 16, !tbaa !18
  %51 = add nsw <2 x i64> %50, <i64 4095, i64 4095>
  %52 = lshr <2 x i64> %51, <i64 12, i64 12>
  %53 = trunc <2 x i64> %52 to <2 x i32>
  store <2 x i32> %53, ptr %49, align 4, !tbaa !11
  %54 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %4, i64 0, i32 1
  %55 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 15
  %56 = load <2 x i64>, ptr %54, align 16, !tbaa !18
  %57 = lshr <2 x i64> %56, <i64 12, i64 12>
  %58 = trunc <2 x i64> %57 to <2 x i32>
  store <2 x i32> %58, ptr %55, align 4, !tbaa !11
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #65
  br label %59

59:                                               ; preds = %45, %33, %16
  %60 = phi i32 [ %22, %16 ], [ 0, %45 ], [ 0, %33 ]
  ret i32 %60
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @continue_show(ptr noundef %0) #0 {
  %2 = tail call i32 @show_proceed(ptr noundef %0) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @show_proceed(ptr noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !290
  %3 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !294
  %5 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 25
  store i32 0, ptr %5, align 4, !tbaa !306
  %6 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 12
  %7 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %8 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  %9 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 10
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 21
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 7
  %12 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 11
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 20
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 17
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2, i32 12
  %16 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2, i32 8
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2, i32 10
  %18 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 24
  %19 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 26
  %20 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 16
  br label %21

21:                                               ; preds = %133, %1
  %22 = phi ptr [ null, %1 ], [ %83, %133 ]
  %23 = load i32, ptr %6, align 8, !tbaa !304
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %72, label %25

25:                                               ; preds = %21
  %26 = icmp eq ptr %22, null
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = tail call ptr @gx_lookup_fm_pair(ptr noundef %2) #64
  br label %29

29:                                               ; preds = %27, %25
  %30 = phi ptr [ %28, %27 ], [ %22, %25 ]
  %31 = load i32, ptr %7, align 4, !tbaa !300
  %32 = add i32 %31, 1
  store i32 %32, ptr %7, align 4, !tbaa !300
  %33 = load i32, ptr %8, align 8, !tbaa !307
  %34 = icmp eq i32 %31, %33
  br i1 %34, label %136, label %35

35:                                               ; preds = %67, %29
  %36 = phi i32 [ %68, %67 ], [ %31, %29 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, ptr %4, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !13
  %40 = zext i8 %39 to i32
  %41 = tail call ptr @gx_lookup_cached_char(ptr noundef %2, ptr noundef %30, i32 noundef %40) #64
  %42 = icmp eq ptr %41, null
  br i1 %42, label %81, label %43

43:                                               ; preds = %35
  %44 = tail call i32 @gx_copy_cached_char(ptr noundef nonnull %0, ptr noundef nonnull %41) #64
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %136, label %46

46:                                               ; preds = %43
  %47 = icmp eq i32 %44, 0
  br i1 %47, label %48, label %81

48:                                               ; preds = %46
  %49 = load i32, ptr %9, align 8, !tbaa !308
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %48
  %52 = load ptr, ptr %11, align 8, !tbaa !244
  %53 = getelementptr inbounds %struct.gx_path_s, ptr %52, i64 0, i32 10
  %54 = load i8, ptr %53, align 8, !tbaa !309
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %136, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.cached_char_s, ptr %41, i64 0, i32 6
  %58 = getelementptr inbounds %struct.gx_path_s, ptr %52, i64 0, i32 9
  %59 = load <2 x i64>, ptr %57, align 8, !tbaa !18
  %60 = load <2 x i64>, ptr %58, align 8, !tbaa !18
  %61 = add nsw <2 x i64> %60, %59
  store <2 x i64> %61, ptr %58, align 8, !tbaa !18
  %62 = getelementptr inbounds %struct.gx_path_s, ptr %52, i64 0, i32 11
  store i8 0, ptr %62, align 1, !tbaa !250
  br label %67

63:                                               ; preds = %48
  %64 = getelementptr inbounds %struct.cached_char_s, ptr %41, i64 0, i32 6
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %10, ptr noundef nonnull align 8 dereferenceable(16) %64, i64 16, i1 false), !tbaa.struct !310
  %65 = tail call i32 @show_move(ptr noundef nonnull %0) #62, !range !311
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %136

67:                                               ; preds = %63, %56
  %68 = load i32, ptr %7, align 4, !tbaa !300
  %69 = add i32 %68, 1
  store i32 %69, ptr %7, align 4, !tbaa !300
  %70 = load i32, ptr %8, align 8, !tbaa !307
  %71 = icmp eq i32 %68, %70
  br i1 %71, label %136, label %35

72:                                               ; preds = %21
  %73 = load i32, ptr %7, align 4, !tbaa !300
  %74 = add i32 %73, 1
  store i32 %74, ptr %7, align 4, !tbaa !300
  %75 = load i32, ptr %8, align 8, !tbaa !307
  %76 = icmp eq i32 %73, %75
  br i1 %76, label %136, label %77

77:                                               ; preds = %72
  %78 = zext i32 %73 to i64
  %79 = getelementptr inbounds i8, ptr %4, i64 %78
  %80 = load i8, ptr %79, align 1, !tbaa !13
  br label %81

81:                                               ; preds = %77, %46, %35
  %82 = phi i8 [ %80, %77 ], [ %39, %35 ], [ %39, %46 ]
  %83 = phi ptr [ %22, %77 ], [ %30, %35 ], [ %30, %46 ]
  %84 = tail call i32 @gs_gsave(ptr noundef %2) #64
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %136, label %86

86:                                               ; preds = %81
  %87 = load i32, ptr %12, align 4, !tbaa !298
  %88 = trunc i32 %87 to i8
  store i8 %88, ptr %13, align 1, !tbaa !312
  %89 = load ptr, ptr %11, align 8, !tbaa !244
  %90 = getelementptr inbounds %struct.gx_path_s, ptr %89, i64 0, i32 10
  %91 = load i8, ptr %90, align 8, !tbaa !309
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %136, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.gx_path_s, ptr %89, i64 0, i32 9
  %95 = load i64, ptr %94, align 8, !tbaa !313
  %96 = getelementptr inbounds %struct.gx_path_s, ptr %89, i64 0, i32 9, i32 1
  %97 = load i64, ptr %96, align 8, !tbaa !314
  %98 = tail call i32 @gx_path_is_void(ptr noundef nonnull %89) #64
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %93
  %101 = load i32, ptr %12, align 4, !tbaa !298
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %100
  %104 = tail call i32 (ptr, ...) @gs_newpath(ptr noundef nonnull %2) #64
  %105 = tail call i32 @gx_path_add_point(ptr noundef nonnull %89, i64 noundef %95, i64 noundef %97) #64
  br label %106

106:                                              ; preds = %103, %100, %93
  %107 = tail call i32 (ptr, ptr, ...) @gs_setmatrix(ptr noundef nonnull %2, ptr noundef nonnull %14) #64
  %108 = tail call i32 (ptr, i64, i64, ...) @gs_translate_to_fixed(ptr noundef nonnull %2, i64 noundef %95, i64 noundef %97) #64
  %109 = load <2 x i64>, ptr %15, align 8, !tbaa !18
  %110 = add nsw <2 x i64> %109, <i64 2048, i64 2048>
  %111 = and <2 x i64> %110, <i64 -4096, i64 -4096>
  %112 = extractelement <2 x i64> %111, i64 0
  %113 = sitofp i64 %112 to double
  %114 = fmul double %113, 0x3F30000000000000
  %115 = fptrunc double %114 to float
  store float %115, ptr %16, align 8, !tbaa !315
  store <2 x i64> %111, ptr %15, align 8, !tbaa !18
  %116 = extractelement <2 x i64> %111, i64 1
  %117 = sitofp i64 %116 to double
  %118 = fmul double %117, 0x3F30000000000000
  %119 = fptrunc double %118 to float
  store float %119, ptr %17, align 8, !tbaa !316
  store i32 0, ptr %18, align 8, !tbaa !317
  store ptr @continue_show_update, ptr %19, align 8, !tbaa !301
  %120 = load ptr, ptr %20, align 8, !tbaa !303
  %121 = getelementptr inbounds %struct.gs_font_s, ptr %120, i64 0, i32 13
  %122 = load ptr, ptr %121, align 8, !tbaa !261
  %123 = zext i8 %82 to i32
  %124 = getelementptr inbounds %struct.gs_font_s, ptr %120, i64 0, i32 14
  %125 = load ptr, ptr %124, align 8, !tbaa !318
  %126 = tail call i32 %122(ptr noundef nonnull %0, ptr noundef nonnull %2, ptr noundef %120, i32 noundef %123, ptr noundef %125) #64
  %127 = icmp slt i32 %126, 0
  br i1 %127, label %136, label %128

128:                                              ; preds = %106
  %129 = icmp eq i32 %126, 0
  br i1 %129, label %130, label %136

130:                                              ; preds = %128
  %131 = tail call i32 @show_update(ptr noundef nonnull %0) #62
  %132 = icmp slt i32 %131, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %130
  store i32 0, ptr %5, align 4, !tbaa !306
  %134 = tail call i32 @show_move(ptr noundef nonnull %0) #62, !range !311
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %21, label %136

136:                                              ; preds = %133, %130, %128, %106, %86, %81, %72, %67, %63, %51, %43, %29
  %137 = phi i32 [ 0, %67 ], [ %44, %43 ], [ %65, %63 ], [ -14, %51 ], [ 0, %29 ], [ %126, %106 ], [ %131, %130 ], [ %134, %133 ], [ -14, %86 ], [ 1, %128 ], [ %84, %81 ], [ 0, %72 ]
  ret i32 %137
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @show_move(ptr nocapture noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !290
  %3 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 8
  %4 = load i32, ptr %3, align 8, !tbaa !296
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 6
  %8 = load float, ptr %7, align 8, !tbaa !319
  %9 = fpext float %8 to double
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 7
  %11 = load float, ptr %10, align 4, !tbaa !320
  %12 = fpext float %11 to double
  %13 = tail call i32 (ptr, double, double, ...) @gs_rmoveto(ptr noundef %2, double noundef %9, double noundef %12) #64
  br label %14

14:                                               ; preds = %6, %1
  %15 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !294
  %17 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %18 = load i32, ptr %17, align 4, !tbaa !300
  %19 = add i32 %18, -1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, ptr %16, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !13
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 5
  %25 = load i32, ptr %24, align 4, !tbaa !295
  %26 = icmp eq i32 %25, %23
  br i1 %26, label %27, label %35

27:                                               ; preds = %14
  %28 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 3
  %29 = load float, ptr %28, align 4, !tbaa !321
  %30 = fpext float %29 to double
  %31 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 4
  %32 = load float, ptr %31, align 8, !tbaa !322
  %33 = fpext float %32 to double
  %34 = tail call i32 (ptr, double, double, ...) @gs_rmoveto(ptr noundef %2, double noundef %30, double noundef %33) #64
  br label %35

35:                                               ; preds = %27, %14
  %36 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 7
  %37 = load ptr, ptr %36, align 8, !tbaa !244
  %38 = getelementptr inbounds %struct.gx_path_s, ptr %37, i64 0, i32 10
  %39 = load i8, ptr %38, align 8, !tbaa !309
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %58, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 21
  %43 = getelementptr inbounds %struct.gx_path_s, ptr %37, i64 0, i32 9
  %44 = load <2 x i64>, ptr %42, align 8, !tbaa !18
  %45 = load <2 x i64>, ptr %43, align 8, !tbaa !18
  %46 = add nsw <2 x i64> %45, %44
  store <2 x i64> %46, ptr %43, align 8, !tbaa !18
  %47 = getelementptr inbounds %struct.gx_path_s, ptr %37, i64 0, i32 11
  store i8 0, ptr %47, align 1, !tbaa !250
  %48 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 9
  %49 = load i32, ptr %48, align 4, !tbaa !297
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %41
  %52 = load i32, ptr %17, align 4, !tbaa !300
  %53 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  %54 = load i32, ptr %53, align 8, !tbaa !307
  %55 = icmp ult i32 %52, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 26
  store ptr @continue_show, ptr %57, align 8, !tbaa !301
  br label %58

58:                                               ; preds = %56, %51, %41, %35
  %59 = phi i32 [ 2, %56 ], [ 0, %51 ], [ 0, %41 ], [ -14, %35 ]
  ret i32 %59
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @continue_show_update(ptr noundef %0) #0 {
  %2 = tail call i32 @show_update(ptr noundef %0) #62
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %9, label %4

4:                                                ; preds = %1
  %5 = tail call i32 @show_move(ptr noundef %0) #62, !range !311
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i32 @show_proceed(ptr noundef %0) #62
  br label %9

9:                                                ; preds = %7, %4, %1
  %10 = phi i32 [ %8, %7 ], [ %2, %1 ], [ %5, %4 ]
  ret i32 %10
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @show_update(ptr noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !290
  %3 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 24
  %4 = load i32, ptr %3, align 8, !tbaa !317
  switch i32 %4, label %17 [
    i32 0, label %19
    i32 1, label %5
  ]

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 22
  %7 = load ptr, ptr %6, align 8, !tbaa !323
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 16
  %9 = load ptr, ptr %8, align 8, !tbaa !303
  %10 = getelementptr inbounds %struct.gs_font_s, ptr %9, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !259
  %12 = tail call ptr @gx_lookup_fm_pair(ptr noundef %2) #64
  tail call void @gx_add_cached_char(ptr noundef %11, ptr noundef %7, ptr noundef %12) #64
  %13 = tail call i32 @gs_grestore(ptr noundef %2) #64
  %14 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 25
  store i32 0, ptr %14, align 4, !tbaa !306
  %15 = tail call i32 @gx_copy_cached_char(ptr noundef nonnull %0, ptr noundef %7) #64
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %17, label %19

17:                                               ; preds = %5, %1
  %18 = tail call i32 @gs_grestore(ptr noundef %2) #64
  br label %19

19:                                               ; preds = %17, %5, %1
  %20 = phi i32 [ 0, %17 ], [ %15, %5 ], [ -23, %1 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_show_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %3, ptr %5, align 8, !tbaa !307
  %6 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 10
  store i32 0, ptr %6, align 8, !tbaa !308
  %7 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %2) #62, !range !263
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_ashow_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, double noundef %2, double noundef %3, ptr noundef %4, i32 noundef %5) #0 {
  %7 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %5, ptr %7, align 8, !tbaa !307
  %8 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %4) #62, !range !263
  %9 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 8
  store i32 1, ptr %9, align 8, !tbaa !296
  %10 = insertelement <2 x double> poison, double %2, i64 0
  %11 = insertelement <2 x double> %10, double %3, i64 1
  %12 = fptrunc <2 x double> %11 to <2 x float>
  %13 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 6
  store <2 x float> %12, ptr %13, align 8, !tbaa !103
  %14 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 10
  store i32 1, ptr %14, align 8, !tbaa !308
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_widthshow_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, double noundef %2, double noundef %3, i8 noundef signext %4, ptr noundef %5, i32 noundef %6) #0 {
  %8 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %6, ptr %8, align 8, !tbaa !307
  %9 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %5) #62, !range !263
  %10 = sext i8 %4 to i32
  %11 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 5
  store i32 %10, ptr %11, align 4, !tbaa !295
  %12 = insertelement <2 x double> poison, double %2, i64 0
  %13 = insertelement <2 x double> %12, double %3, i64 1
  %14 = fptrunc <2 x double> %13 to <2 x float>
  %15 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 3
  store <2 x float> %14, ptr %15, align 4, !tbaa !103
  %16 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 10
  store i32 1, ptr %16, align 8, !tbaa !308
  ret i32 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_awidthshow_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, double noundef %2, double noundef %3, i8 noundef signext %4, double noundef %5, double noundef %6, ptr noundef %7, i32 noundef %8) #0 {
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %8, ptr %10, align 8, !tbaa !307
  %11 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %7) #62, !range !263
  %12 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 8
  store i32 1, ptr %12, align 8, !tbaa !296
  %13 = insertelement <2 x double> poison, double %5, i64 0
  %14 = insertelement <2 x double> %13, double %6, i64 1
  %15 = fptrunc <2 x double> %14 to <2 x float>
  %16 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 6
  store <2 x float> %15, ptr %16, align 8, !tbaa !103
  %17 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 10
  %18 = sext i8 %4 to i32
  %19 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 5
  store i32 %18, ptr %19, align 4, !tbaa !295
  %20 = insertelement <2 x double> poison, double %2, i64 0
  %21 = insertelement <2 x double> %20, double %3, i64 1
  %22 = fptrunc <2 x double> %21 to <2 x float>
  %23 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 3
  store <2 x float> %22, ptr %23, align 4, !tbaa !103
  store i32 1, ptr %17, align 8, !tbaa !308
  ret i32 %11
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_kshow_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %3, ptr %5, align 8, !tbaa !307
  %6 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %2) #62, !range !263
  %7 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 10
  store i32 1, ptr %7, align 8, !tbaa !308
  %8 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 9
  store i32 1, ptr %8, align 4, !tbaa !297
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @stringwidth_setup(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca %struct.timeval, align 8
  %5 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %2) #62, !range !263
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 26
  store ptr @continue_stringwidth, ptr %8, align 8, !tbaa !301
  %9 = tail call i32 @gs_gsave(ptr noundef %1) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %7
  %12 = tail call i32 (ptr, ...) @gx_device_no_output(ptr noundef %1) #64
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 7
  %14 = load ptr, ptr %13, align 8, !tbaa !244
  %15 = call i32 @gx_path_current_point(ptr noundef %14, ptr noundef nonnull %4) #64
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %11
  %18 = load ptr, ptr %13, align 8, !tbaa !244
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 2, i32 12
  %20 = load i64, ptr %19, align 8, !tbaa !324
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 2, i32 13
  %22 = load i64, ptr %21, align 8, !tbaa !325
  %23 = call i32 @gx_path_add_point(ptr noundef %18, i64 noundef %20, i64 noundef %22) #64
  br label %24

24:                                               ; preds = %17, %11, %7, %3
  %25 = phi i32 [ %5, %3 ], [ %9, %7 ], [ 0, %17 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  ret i32 %25
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @continue_stringwidth(ptr noundef %0) #0 {
  %2 = tail call i32 @stringwidth_proceed(ptr noundef %0) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @stringwidth_proceed(ptr noundef %0) #0 {
  %2 = alloca %struct.gs_point_s, align 8
  %3 = alloca %struct.gs_point_s, align 8
  %4 = load ptr, ptr %0, align 8, !tbaa !290
  %5 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !294
  %7 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %8 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  %9 = load i32, ptr %7, align 4, !tbaa !300
  %10 = add i32 %9, 1
  store i32 %10, ptr %7, align 4, !tbaa !300
  %11 = load i32, ptr %8, align 8, !tbaa !307
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %21, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 12
  %15 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 21
  %16 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 24
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 7
  %18 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 17
  %19 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 26
  %20 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 16
  br label %33

21:                                               ; preds = %58, %1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %22 = call i32 (ptr, ptr, ...) @gs_currentpoint(ptr noundef %4, ptr noundef nonnull %2) #64
  %23 = call i32 @gs_grestore(ptr noundef %4) #64
  %24 = call i32 (ptr, ptr, ...) @gs_currentpoint(ptr noundef %4, ptr noundef nonnull %3) #64
  %25 = icmp eq i32 %24, -14
  %26 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 23
  %27 = load <2 x float>, ptr %3, align 8
  %28 = insertelement <2 x i1> poison, i1 %25, i64 0
  %29 = shufflevector <2 x i1> %28, <2 x i1> poison, <2 x i32> zeroinitializer
  %30 = select <2 x i1> %29, <2 x float> zeroinitializer, <2 x float> %27
  %31 = load <2 x float>, ptr %2, align 8, !tbaa !103
  %32 = fsub <2 x float> %31, %30
  store <2 x float> %32, ptr %26, align 8, !tbaa !103
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #65
  br label %106

33:                                               ; preds = %58, %13
  %34 = phi i32 [ %9, %13 ], [ %66, %58 ]
  %35 = phi ptr [ null, %13 ], [ %60, %58 ]
  %36 = zext i32 %34 to i64
  %37 = getelementptr inbounds i8, ptr %6, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !13
  %39 = load i32, ptr %14, align 8, !tbaa !304
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %70, label %41

41:                                               ; preds = %33
  %42 = icmp eq ptr %35, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = tail call ptr @gx_lookup_fm_pair(ptr noundef %4) #64
  br label %45

45:                                               ; preds = %43, %41
  %46 = phi ptr [ %44, %43 ], [ %35, %41 ]
  %47 = zext i8 %38 to i32
  %48 = tail call ptr @gx_lookup_cached_char(ptr noundef %4, ptr noundef %46, i32 noundef %47) #64
  %49 = icmp eq ptr %48, null
  br i1 %49, label %70, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.cached_char_s, ptr %48, i64 0, i32 6
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %15, ptr noundef nonnull align 8 dereferenceable(16) %51, i64 16, i1 false), !tbaa.struct !310
  store i32 2, ptr %16, align 8, !tbaa !317
  %52 = load ptr, ptr %0, align 8, !tbaa !290
  %53 = getelementptr inbounds %struct.gs_state_s, ptr %52, i64 0, i32 7
  %54 = load ptr, ptr %53, align 8, !tbaa !244
  %55 = getelementptr inbounds %struct.gx_path_s, ptr %54, i64 0, i32 10
  %56 = load i8, ptr %55, align 8, !tbaa !309
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %106, label %58

58:                                               ; preds = %99, %50
  %59 = phi ptr [ %102, %99 ], [ %54, %50 ]
  %60 = phi ptr [ %71, %99 ], [ %46, %50 ]
  %61 = getelementptr inbounds %struct.gx_path_s, ptr %59, i64 0, i32 9
  %62 = load <2 x i64>, ptr %15, align 8, !tbaa !18
  %63 = load <2 x i64>, ptr %61, align 8, !tbaa !18
  %64 = add nsw <2 x i64> %63, %62
  store <2 x i64> %64, ptr %61, align 8, !tbaa !18
  %65 = getelementptr inbounds %struct.gx_path_s, ptr %59, i64 0, i32 11
  store i8 0, ptr %65, align 1, !tbaa !250
  %66 = load i32, ptr %7, align 4, !tbaa !300
  %67 = add i32 %66, 1
  store i32 %67, ptr %7, align 4, !tbaa !300
  %68 = load i32, ptr %8, align 8, !tbaa !307
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %21, label %33

70:                                               ; preds = %45, %33
  %71 = phi ptr [ %35, %33 ], [ %46, %45 ]
  %72 = tail call i32 @gs_gsave(ptr noundef %4) #64
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %106, label %74

74:                                               ; preds = %70
  %75 = load ptr, ptr %17, align 8, !tbaa !244
  %76 = getelementptr inbounds %struct.gx_path_s, ptr %75, i64 0, i32 10
  %77 = load i8, ptr %76, align 8, !tbaa !309
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %106, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.gx_path_s, ptr %75, i64 0, i32 9
  %81 = load i64, ptr %80, align 8, !tbaa !313
  %82 = getelementptr inbounds %struct.gx_path_s, ptr %75, i64 0, i32 9, i32 1
  %83 = load i64, ptr %82, align 8, !tbaa !314
  %84 = tail call i32 (ptr, ptr, ...) @gs_setmatrix(ptr noundef nonnull %4, ptr noundef nonnull %18) #64
  %85 = tail call i32 (ptr, i64, i64, ...) @gs_translate_to_fixed(ptr noundef nonnull %4, i64 noundef %81, i64 noundef %83) #64
  store i32 0, ptr %16, align 8, !tbaa !317
  store ptr @continue_stringwidth_update, ptr %19, align 8, !tbaa !301
  %86 = load ptr, ptr %20, align 8, !tbaa !303
  %87 = getelementptr inbounds %struct.gs_font_s, ptr %86, i64 0, i32 13
  %88 = load ptr, ptr %87, align 8, !tbaa !261
  %89 = zext i8 %38 to i32
  %90 = getelementptr inbounds %struct.gs_font_s, ptr %86, i64 0, i32 14
  %91 = load ptr, ptr %90, align 8, !tbaa !318
  %92 = tail call i32 %88(ptr noundef nonnull %0, ptr noundef nonnull %4, ptr noundef %86, i32 noundef %89, ptr noundef %91) #64
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %106, label %94

94:                                               ; preds = %79
  %95 = icmp eq i32 %92, 0
  br i1 %95, label %96, label %106

96:                                               ; preds = %94
  %97 = tail call i32 @stringwidth_update(ptr noundef nonnull %0) #62, !range !180
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %106, label %99

99:                                               ; preds = %96
  %100 = load ptr, ptr %0, align 8, !tbaa !290
  %101 = getelementptr inbounds %struct.gs_state_s, ptr %100, i64 0, i32 7
  %102 = load ptr, ptr %101, align 8, !tbaa !244
  %103 = getelementptr inbounds %struct.gx_path_s, ptr %102, i64 0, i32 10
  %104 = load i8, ptr %103, align 8, !tbaa !309
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %106, label %58

106:                                              ; preds = %99, %96, %94, %79, %74, %70, %50, %21
  %107 = phi i32 [ 0, %21 ], [ -14, %99 ], [ -14, %50 ], [ %92, %79 ], [ %97, %96 ], [ -14, %74 ], [ 1, %94 ], [ %72, %70 ]
  ret i32 %107
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @continue_stringwidth_update(ptr noundef %0) #0 {
  %2 = tail call i32 @stringwidth_update(ptr noundef %0) #62, !range !180
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %19, label %4

4:                                                ; preds = %1
  %5 = load ptr, ptr %0, align 8, !tbaa !290
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !244
  %8 = getelementptr inbounds %struct.gx_path_s, ptr %7, i64 0, i32 10
  %9 = load i8, ptr %8, align 8, !tbaa !309
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 21
  %13 = getelementptr inbounds %struct.gx_path_s, ptr %7, i64 0, i32 9
  %14 = load <2 x i64>, ptr %12, align 8, !tbaa !18
  %15 = load <2 x i64>, ptr %13, align 8, !tbaa !18
  %16 = add nsw <2 x i64> %15, %14
  store <2 x i64> %16, ptr %13, align 8, !tbaa !18
  %17 = getelementptr inbounds %struct.gx_path_s, ptr %7, i64 0, i32 11
  store i8 0, ptr %17, align 1, !tbaa !250
  %18 = tail call i32 @stringwidth_proceed(ptr noundef nonnull %0) #62
  br label %19

19:                                               ; preds = %11, %4, %1
  %20 = phi i32 [ %18, %11 ], [ %2, %1 ], [ -14, %4 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @stringwidth_update(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !290
  %3 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 24
  %4 = load i32, ptr %3, align 8, !tbaa !317
  switch i32 %4, label %14 [
    i32 0, label %16
    i32 1, label %5
  ]

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 16
  %7 = load ptr, ptr %6, align 8, !tbaa !303
  %8 = getelementptr inbounds %struct.gs_font_s, ptr %7, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !259
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 22
  %11 = load ptr, ptr %10, align 8, !tbaa !323
  %12 = tail call ptr @gx_lookup_fm_pair(ptr noundef %2) #64
  tail call void @gx_add_cached_char(ptr noundef %9, ptr noundef %11, ptr noundef %12) #64
  %13 = tail call i32 @gs_grestore(ptr noundef %2) #64
  br label %14

14:                                               ; preds = %5, %1
  %15 = tail call i32 @gs_grestore(ptr noundef %2) #64
  br label %16

16:                                               ; preds = %14, %1
  %17 = phi i32 [ 0, %14 ], [ -23, %1 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_stringwidth_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %3, ptr %5, align 8, !tbaa !307
  %6 = tail call i32 @stringwidth_setup(ptr noundef %0, ptr noundef %1, ptr noundef %2) #62, !range !263
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_charpath_n_init(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 2
  store i32 %3, ptr %6, align 8, !tbaa !307
  %7 = tail call i32 @show_setup(ptr noundef %0, ptr noundef %1, ptr noundef %2) #62, !range !263
  %8 = icmp eq i32 %4, 0
  %9 = select i1 %8, i32 1, i32 2
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 11
  store i32 %9, ptr %10, align 4, !tbaa !298
  %11 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 12
  store i32 0, ptr %11, align 8, !tbaa !304
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_setcachedevice(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, double noundef %6) #0 {
  %8 = alloca %struct.timeval, align 16
  %9 = alloca %struct.timeval, align 16
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 24
  %11 = load i32, ptr %10, align 8, !tbaa !317
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %124

13:                                               ; preds = %7
  %14 = load ptr, ptr %0, align 8, !tbaa !290
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %14, i64 0, i32 2
  %16 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 21
  %17 = tail call i32 @gs_distance_transform2fixed(ptr noundef nonnull %15, double noundef %1, double noundef %2, ptr noundef nonnull %16) #64
  store i32 2, ptr %10, align 8, !tbaa !317
  %18 = load ptr, ptr %0, align 8, !tbaa !290
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 19
  %20 = load i8, ptr %19, align 4, !tbaa !326
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %124

22:                                               ; preds = %13
  store i8 1, ptr %19, align 4, !tbaa !326
  %23 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 12
  %24 = load i32, ptr %23, align 8, !tbaa !304
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %124, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 18
  %28 = load i32, ptr %27, align 8, !tbaa !302
  %29 = icmp eq i32 %28, 0
  %30 = fcmp ogt double %3, %5
  %31 = or i1 %30, %29
  %32 = fcmp ogt double %4, %6
  %33 = or i1 %32, %31
  br i1 %33, label %124, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 16
  %36 = load ptr, ptr %35, align 8, !tbaa !303
  %37 = getelementptr inbounds %struct.gs_font_s, ptr %36, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !259
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #65
  %39 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 2
  %40 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %39, double noundef %3, double noundef %4, ptr noundef nonnull %8) #64
  %41 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %39, double noundef %5, double noundef %6, ptr noundef nonnull %9) #64
  %42 = load i64, ptr %9, align 16, !tbaa !247
  %43 = load i64, ptr %8, align 16, !tbaa !247
  %44 = sub nsw i64 %42, %43
  %45 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %46 = load i64, ptr %45, align 8, !tbaa !249
  %47 = getelementptr inbounds %struct.timeval, ptr %8, i64 0, i32 1
  %48 = load i64, ptr %47, align 8, !tbaa !249
  %49 = sub nsw i64 %46, %48
  %50 = call i64 @llvm.abs.i64(i64 %44, i1 true)
  %51 = call i64 @llvm.abs.i64(i64 %49, i1 true)
  %52 = lshr i64 %50, 12
  %53 = add nuw nsw i64 %52, 2
  %54 = lshr i64 %51, 12
  %55 = add nuw nsw i64 %54, 2
  %56 = trunc i64 %53 to i16
  %57 = icmp ult i64 %50, 268427264
  br i1 %57, label %58, label %120

58:                                               ; preds = %34
  %59 = trunc i64 %55 to i16
  %60 = icmp ult i64 %51, 268427264
  br i1 %60, label %61, label %120

61:                                               ; preds = %58
  %62 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 19
  %63 = load i32, ptr %62, align 8, !tbaa !299
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %71

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 18
  %67 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(200) %67, ptr noundef nonnull align 8 dereferenceable(200) @mem_mono_device, i64 200, i1 false), !tbaa.struct !327
  store ptr %67, ptr %66, align 8, !tbaa !328
  %68 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 18, i32 1
  store i32 0, ptr %68, align 8, !tbaa !329
  %69 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 18, i32 2
  store i64 1, ptr %69, align 8, !tbaa !330
  %70 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 18, i32 3
  store i64 1, ptr %70, align 8, !tbaa !331
  store i32 1, ptr %62, align 8, !tbaa !299
  br label %71

71:                                               ; preds = %65, %61
  %72 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 17
  %73 = call ptr @gx_alloc_char_bits(ptr noundef %38, ptr noundef nonnull %72, i16 noundef zeroext %56, i16 noundef zeroext %59) #64
  %74 = icmp eq ptr %73, null
  br i1 %74, label %120, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.cached_char_s, ptr %73, i64 0, i32 7
  %77 = getelementptr inbounds %struct.cached_char_s, ptr %73, i64 0, i32 7, i32 1
  %78 = load <2 x i64>, ptr %8, align 16
  %79 = load <2 x i64>, ptr %9, align 16
  %80 = call <2 x i64> @llvm.smin.v2i64(<2 x i64> %78, <2 x i64> %79)
  %81 = sub <2 x i64> <i64 2048, i64 2048>, %80
  %82 = and <2 x i64> %81, <i64 -4096, i64 -4096>
  store <2 x i64> %82, ptr %76, align 8, !tbaa !18
  %83 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 13
  %84 = load ptr, ptr %83, align 8, !tbaa !332
  %85 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 14
  %86 = load ptr, ptr %85, align 8, !tbaa !333
  %87 = call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %84, ptr noundef %86, ptr noundef nonnull %18) #64
  %88 = load ptr, ptr %85, align 8, !tbaa !333
  %89 = getelementptr inbounds %struct.gx_device_color_s, ptr %88, i64 0, i32 2
  %90 = load i32, ptr %89, align 8, !tbaa !334
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %118

92:                                               ; preds = %75
  %93 = call i32 @gs_gsave(ptr noundef nonnull %18) #64
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %118, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 22
  store ptr %73, ptr %96, align 8, !tbaa !323
  %97 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !294
  %99 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %100 = load i32, ptr %99, align 4, !tbaa !300
  %101 = add i32 %100, -1
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, ptr %98, i64 %102
  %104 = load i8, ptr %103, align 1, !tbaa !13
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds %struct.cached_char_s, ptr %73, i64 0, i32 1
  store i32 %105, ptr %106, align 8, !tbaa !336
  %107 = getelementptr inbounds %struct.cached_char_s, ptr %73, i64 0, i32 6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %107, ptr noundef nonnull align 8 dereferenceable(16) %16, i64 16, i1 false), !tbaa.struct !310
  %108 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 18
  %109 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 22
  store ptr %108, ptr %109, align 8, !tbaa !338
  %110 = getelementptr inbounds %struct.gs_state_s, ptr %18, i64 0, i32 23
  store i32 1, ptr %110, align 8, !tbaa !339
  %111 = load i64, ptr %76, align 8, !tbaa !340
  %112 = load i64, ptr %77, align 8, !tbaa !341
  %113 = call i32 (ptr, i64, i64, ...) @gs_translate_to_fixed(ptr noundef nonnull %18, i64 noundef %111, i64 noundef %112) #64
  %114 = shl nuw nsw i64 %53, 12
  %115 = shl nuw nsw i64 %55, 12
  %116 = call i32 (ptr, i64, i64, i64, i64, ...) @gx_clip_to_rectangle(ptr noundef nonnull %18, i64 noundef 0, i64 noundef 0, i64 noundef %114, i64 noundef %115) #64
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %120, label %122

118:                                              ; preds = %92, %75
  %119 = phi i32 [ 0, %75 ], [ %93, %92 ]
  call void @gx_unalloc_cached_char(ptr noundef %38, ptr noundef nonnull %73) #64
  br label %120

120:                                              ; preds = %118, %95, %71, %58, %34
  %121 = phi i32 [ %116, %95 ], [ 0, %71 ], [ 0, %34 ], [ 0, %58 ], [ %119, %118 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #65
  br label %124

122:                                              ; preds = %95
  store i8 0, ptr %19, align 4, !tbaa !326
  %123 = call i32 @gs_setgray(ptr noundef nonnull %18, double noundef 0.000000e+00) #64
  store i8 1, ptr %19, align 4, !tbaa !326
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #65
  store i32 1, ptr %10, align 8, !tbaa !317
  br label %124

124:                                              ; preds = %122, %120, %26, %22, %13, %7
  %125 = phi i32 [ 0, %122 ], [ 0, %13 ], [ 0, %26 ], [ 0, %22 ], [ %121, %120 ], [ -21, %7 ]
  ret i32 %125
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i64> @llvm.smin.v2i64(<2 x i64>, <2 x i64>) #19

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_setcharwidth(ptr noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 24
  %5 = load i32, ptr %4, align 8, !tbaa !317
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = load ptr, ptr %0, align 8, !tbaa !290
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %8, i64 0, i32 2
  %10 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 21
  %11 = tail call i32 @gs_distance_transform2fixed(ptr noundef nonnull %9, double noundef %1, double noundef %2, ptr noundef nonnull %10) #64
  store i32 2, ptr %4, align 8, !tbaa !317
  br label %12

12:                                               ; preds = %7, %3
  %13 = phi i32 [ 0, %7 ], [ -21, %3 ]
  ret i32 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal zeroext i8 @gs_show_current_char(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !294
  %4 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %5 = load i32, ptr %4, align 4, !tbaa !300
  %6 = add i32 %5, -1
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i8, ptr %3, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !13
  ret i8 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_show_next(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 26
  %3 = load ptr, ptr %2, align 8, !tbaa !301
  %4 = tail call i32 %3(ptr noundef %0) #64
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal zeroext i8 @gs_kshow_previous_char(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !294
  %4 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %5 = load i32, ptr %4, align 4, !tbaa !300
  %6 = add i32 %5, -1
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds i8, ptr %3, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !13
  ret i8 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal zeroext i8 @gs_kshow_next_char(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !294
  %4 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 20
  %5 = load i32, ptr %4, align 4, !tbaa !300
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i8, ptr %3, i64 %6
  %8 = load i8, ptr %7, align 1, !tbaa !13
  ret i8 %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gs_show_width(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 23
  %4 = load i64, ptr %3, align 8
  store i64 %4, ptr %1, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @gs_show_in_charpath(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 11
  %3 = load i32, ptr %2, align 4, !tbaa !298
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_setgray(ptr nocapture noundef readonly %0, double noundef %1) #31 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %4 = load ptr, ptr %3, align 8, !tbaa !332
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 19
  %6 = load i8, ptr %5, align 4, !tbaa !326
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = fcmp olt double %1, 0.000000e+00
  br i1 %9, label %16, label %10

10:                                               ; preds = %8
  %11 = fcmp ogt double %1, 1.000000e+00
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = fptrunc double %1 to float
  %14 = fmul float %13, 6.553500e+04
  %15 = fptoui float %14 to i16
  br label %16

16:                                               ; preds = %12, %10, %8
  %17 = phi i16 [ %15, %12 ], [ 0, %8 ], [ -1, %10 ]
  %18 = insertelement <4 x i16> poison, i16 %17, i64 0
  %19 = shufflevector <4 x i16> %18, <4 x i16> poison, <4 x i32> zeroinitializer
  store <4 x i16> %19, ptr %4, align 2, !tbaa !102
  %20 = getelementptr inbounds %struct.gs_color_s, ptr %4, i64 0, i32 5
  store i8 1, ptr %20, align 1, !tbaa !342
  %21 = getelementptr inbounds %struct.gs_color_s, ptr %4, i64 0, i32 4
  store i8 1, ptr %21, align 2, !tbaa !343
  br label %22

22:                                               ; preds = %16, %2
  %23 = phi i32 [ 0, %16 ], [ -21, %2 ]
  ret i32 %23
}

; Function Attrs: nounwind optsize uwtable
define internal float @gs_currentgray(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %3 = load ptr, ptr %2, align 8, !tbaa !332
  %4 = getelementptr inbounds %struct.gs_color_s, ptr %3, i64 0, i32 5
  %5 = load i8, ptr %4, align 1, !tbaa !342
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.gs_color_s, ptr %3, i64 0, i32 3
  %9 = load i16, ptr %8, align 2, !tbaa !344
  br label %12

10:                                               ; preds = %1
  %11 = tail call zeroext i16 @gx_color_luminance(ptr noundef nonnull %3) #64
  br label %12

12:                                               ; preds = %10, %7
  %13 = phi i16 [ %9, %7 ], [ %11, %10 ]
  %14 = uitofp i16 %13 to float
  %15 = fdiv float %14, 6.553500e+04
  ret float %15
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_setgscolor(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #30 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 19
  %4 = load i8, ptr %3, align 4, !tbaa !326
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %8 = load ptr, ptr %7, align 8, !tbaa !332
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(10) %8, ptr noundef nonnull align 2 dereferenceable(10) %1, i64 10, i1 false), !tbaa.struct !345
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi i32 [ 0, %6 ], [ -21, %2 ]
  ret i32 %10
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_currentgscolor(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #30 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %4 = load ptr, ptr %3, align 8, !tbaa !332
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(10) %1, ptr noundef nonnull align 2 dereferenceable(10) %4, i64 10, i1 false), !tbaa.struct !345
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_sethsbcolor(ptr nocapture noundef readonly %0, double noundef %1, double noundef %2, double noundef %3) #0 {
  %5 = alloca [3 x i16], align 2
  call void @llvm.lifetime.start.p0(i64 6, ptr nonnull %5) #65
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 19
  %7 = load i8, ptr %6, align 4, !tbaa !326
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %18

9:                                                ; preds = %4
  %10 = call i32 @tri_param(double noundef %1, double noundef %2, double noundef %3, ptr noundef nonnull %5) #62
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %12 = load ptr, ptr %11, align 8, !tbaa !332
  %13 = load i16, ptr %5, align 2, !tbaa !102
  %14 = getelementptr inbounds [3 x i16], ptr %5, i64 0, i64 1
  %15 = load i16, ptr %14, align 2, !tbaa !102
  %16 = getelementptr inbounds [3 x i16], ptr %5, i64 0, i64 2
  %17 = load i16, ptr %16, align 2, !tbaa !102
  tail call void @gx_color_from_hsb(ptr noundef %12, i16 noundef zeroext %13, i16 noundef zeroext %15, i16 noundef zeroext %17) #64
  br label %18

18:                                               ; preds = %9, %4
  %19 = phi i32 [ 0, %9 ], [ -21, %4 ]
  call void @llvm.lifetime.end.p0(i64 6, ptr nonnull %5) #65
  ret i32 %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @tri_param(double noundef %0, double noundef %1, double noundef %2, ptr nocapture noundef writeonly %3) #45 {
  %5 = fcmp olt double %0, 0.000000e+00
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = fcmp ogt double %0, 1.000000e+00
  br i1 %7, label %12, label %8

8:                                                ; preds = %6
  %9 = fptrunc double %0 to float
  %10 = fmul float %9, 6.553500e+04
  %11 = fptoui float %10 to i16
  br label %12

12:                                               ; preds = %8, %6, %4
  %13 = phi i16 [ %11, %8 ], [ 0, %4 ], [ -1, %6 ]
  %14 = fcmp olt double %1, 0.000000e+00
  br i1 %14, label %21, label %15

15:                                               ; preds = %12
  %16 = fcmp ogt double %1, 1.000000e+00
  br i1 %16, label %21, label %17

17:                                               ; preds = %15
  %18 = fptrunc double %1 to float
  %19 = fmul float %18, 6.553500e+04
  %20 = fptoui float %19 to i16
  br label %21

21:                                               ; preds = %17, %15, %12
  %22 = phi i16 [ %20, %17 ], [ 0, %12 ], [ -1, %15 ]
  %23 = fcmp olt double %2, 0.000000e+00
  br i1 %23, label %30, label %24

24:                                               ; preds = %21
  %25 = fcmp ogt double %2, 1.000000e+00
  br i1 %25, label %30, label %26

26:                                               ; preds = %24
  %27 = fptrunc double %2 to float
  %28 = fmul float %27, 6.553500e+04
  %29 = fptoui float %28 to i16
  br label %30

30:                                               ; preds = %26, %24, %21
  %31 = phi i16 [ %29, %26 ], [ 0, %21 ], [ -1, %24 ]
  store i16 %13, ptr %3, align 2, !tbaa !102
  %32 = getelementptr inbounds i16, ptr %3, i64 1
  store i16 %22, ptr %32, align 2, !tbaa !102
  %33 = getelementptr inbounds i16, ptr %3, i64 2
  store i16 %31, ptr %33, align 2, !tbaa !102
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_currenthsbcolor(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = alloca [3 x i16], align 4
  call void @llvm.lifetime.start.p0(i64 6, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %5 = load ptr, ptr %4, align 8, !tbaa !332
  call void @gx_color_to_hsb(ptr noundef %5, ptr noundef nonnull %3) #64
  %6 = getelementptr inbounds [3 x i16], ptr %3, i64 0, i64 2
  %7 = load i16, ptr %6, align 4, !tbaa !102
  %8 = load <2 x i16>, ptr %3, align 4, !tbaa !102
  %9 = uitofp <2 x i16> %8 to <2 x float>
  %10 = fdiv <2 x float> %9, <float 6.553500e+04, float 6.553500e+04>
  store <2 x float> %10, ptr %1, align 4, !tbaa !103
  %11 = uitofp i16 %7 to float
  %12 = fdiv float %11, 6.553500e+04
  %13 = getelementptr inbounds float, ptr %1, i64 2
  store float %12, ptr %13, align 4, !tbaa !103
  call void @llvm.lifetime.end.p0(i64 6, ptr nonnull %3) #65
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_setrgbcolor(ptr nocapture noundef readonly %0, double noundef %1, double noundef %2, double noundef %3) #0 {
  %5 = alloca [3 x i16], align 4
  call void @llvm.lifetime.start.p0(i64 6, ptr nonnull %5) #65
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 19
  %7 = load i8, ptr %6, align 4, !tbaa !326
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = call i32 @tri_param(double noundef %1, double noundef %2, double noundef %3, ptr noundef nonnull %5) #62
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %12 = load ptr, ptr %11, align 8, !tbaa !332
  %13 = load <2 x i16>, ptr %5, align 4, !tbaa !102
  store <2 x i16> %13, ptr %12, align 2, !tbaa !102
  %14 = getelementptr inbounds [3 x i16], ptr %5, i64 0, i64 2
  %15 = load i16, ptr %14, align 4, !tbaa !102
  %16 = getelementptr inbounds %struct.gs_color_s, ptr %12, i64 0, i32 2
  store i16 %15, ptr %16, align 2, !tbaa !160
  tail call void @gx_color_from_rgb(ptr noundef nonnull %12) #64
  br label %17

17:                                               ; preds = %9, %4
  %18 = phi i32 [ 0, %9 ], [ -21, %4 ]
  call void @llvm.lifetime.end.p0(i64 6, ptr nonnull %5) #65
  ret i32 %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_currentrgbcolor(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #23 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %4 = load ptr, ptr %3, align 8, !tbaa !332
  %5 = getelementptr inbounds %struct.gs_color_s, ptr %4, i64 0, i32 2
  %6 = load i16, ptr %5, align 2, !tbaa !160
  %7 = load <2 x i16>, ptr %4, align 2, !tbaa !102
  %8 = uitofp <2 x i16> %7 to <2 x float>
  %9 = fdiv <2 x float> %8, <float 6.553500e+04, float 6.553500e+04>
  store <2 x float> %9, ptr %1, align 4, !tbaa !103
  %10 = uitofp i16 %6 to float
  %11 = fdiv float %10, 6.553500e+04
  %12 = getelementptr inbounds float, ptr %1, i64 2
  store float %11, ptr %12, align 4, !tbaa !103
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_colorrgb(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  %4 = load i16, ptr %3, align 2, !tbaa !160
  %5 = load <2 x i16>, ptr %0, align 2, !tbaa !102
  %6 = uitofp <2 x i16> %5 to <2 x float>
  %7 = fdiv <2 x float> %6, <float 6.553500e+04, float 6.553500e+04>
  store <2 x float> %7, ptr %1, align 4, !tbaa !103
  %8 = uitofp i16 %4 to float
  %9 = fdiv float %8, 6.553500e+04
  %10 = getelementptr inbounds float, ptr %1, i64 2
  store float %9, ptr %10, align 4, !tbaa !103
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_screen_init(ptr noundef %0, ptr noundef %1, double noundef %2, double noundef %3) #0 {
  %5 = alloca %struct.gs_point_s, align 8
  %6 = alloca %struct.gs_matrix_s, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_matrix_s, align 8
  %10 = fcmp olt double %2, 0.000000e+00
  br i1 %10, label %62, label %11

11:                                               ; preds = %4
  %12 = fdiv double 7.200000e+01, %2
  %13 = fptrunc double %12 to float
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %6) #65
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %6, i8 0, i64 96, i1 false)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #65
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #65
  %14 = tail call ptr @gs_currentdevice(ptr noundef %1) #64
  call void @gs_deviceparams(ptr noundef %14, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #64
  %15 = fpext float %13 to double
  %16 = call i32 @gs_distance_transform(double noundef %15, double noundef %15, ptr noundef nonnull %6, ptr noundef nonnull %5) #64
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %19, label %18

18:                                               ; preds = %11
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  br label %62

19:                                               ; preds = %11
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %6) #65
  %20 = load <2 x float>, ptr %5, align 8, !tbaa !103
  %21 = fcmp olt <2 x float> %20, zeroinitializer
  %22 = fptosi <2 x float> %20 to <2 x i32>
  %23 = sub nsw <2 x i32> zeroinitializer, %22
  %24 = select <2 x i1> %21, <2 x i32> %23, <2 x i32> %22
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  %25 = call <2 x i32> @llvm.umax.v2i32(<2 x i32> %24, <2 x i32> <i32 1, i32 1>)
  %26 = extractelement <2 x i32> %25, i64 1
  %27 = sdiv i32 65535, %26
  %28 = extractelement <2 x i32> %25, i64 0
  %29 = icmp sgt i32 %28, %27
  br i1 %29, label %62, label %30

30:                                               ; preds = %19
  %31 = mul nsw i32 %26, %28
  %32 = call ptr @gs_malloc(i32 noundef %31, i32 noundef 4, ptr noundef nonnull @.str.561) #64
  %33 = icmp eq ptr %32, null
  br i1 %33, label %62, label %34

34:                                               ; preds = %30
  %35 = insertelement <2 x double> poison, double %2, i64 0
  %36 = insertelement <2 x double> %35, double %3, i64 1
  %37 = fptrunc <2 x double> %36 to <2 x float>
  store <2 x float> %37, ptr %0, align 8, !tbaa !103
  %38 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 2
  store ptr %32, ptr %38, align 8, !tbaa !346
  %39 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 3
  store <2 x i32> %25, ptr %39, align 8, !tbaa !11
  %40 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 7
  store i32 0, ptr %40, align 4, !tbaa !348
  %41 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 6
  store i32 0, ptr %41, align 8, !tbaa !349
  %42 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 8
  store ptr %1, ptr %42, align 8, !tbaa !350
  %43 = sitofp i32 %28 to double
  %44 = fdiv double 2.000000e+00, %43
  %45 = fptrunc double %44 to float
  %46 = sitofp i32 %26 to double
  %47 = fdiv double 2.000000e+00, %46
  %48 = fptrunc double %47 to float
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %9) #65
  call void @gs_make_identity(ptr noundef nonnull %9) #64
  store float %45, ptr %9, align 8, !tbaa !267
  %49 = getelementptr inbounds %struct.gs_matrix_s, ptr %9, i64 0, i32 6
  store float %48, ptr %49, align 8, !tbaa !270
  %50 = fpext float %45 to double
  %51 = call double @llvm.fmuladd.f64(double %50, double 5.000000e-01, double -1.000000e+00)
  %52 = fptrunc double %51 to float
  %53 = getelementptr inbounds %struct.gs_matrix_s, ptr %9, i64 0, i32 8
  store float %52, ptr %53, align 8, !tbaa !271
  %54 = fpext float %48 to double
  %55 = call double @llvm.fmuladd.f64(double %54, double 5.000000e-01, double -1.000000e+00)
  %56 = fptrunc double %55 to float
  %57 = getelementptr inbounds %struct.gs_matrix_s, ptr %9, i64 0, i32 10
  store float %56, ptr %57, align 8, !tbaa !272
  %58 = fneg double %3
  %59 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 5
  %60 = call i32 @gs_matrix_rotate(ptr noundef nonnull %9, double noundef %58, ptr noundef nonnull %59) #64
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %9) #65
  %61 = call i32 @llvm.smin.i32(i32 %60, i32 0)
  br label %62

62:                                               ; preds = %34, %30, %19, %18, %4
  %63 = phi i32 [ %16, %18 ], [ -15, %4 ], [ -15, %19 ], [ -25, %30 ], [ %61, %34 ]
  ret i32 %63
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.umax.v2i32(<2 x i32>, <2 x i32>) #19

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_screen_currentpoint(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = alloca %struct.gs_point_s, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 7
  %5 = load i32, ptr %4, align 4, !tbaa !348
  %6 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 4
  %7 = load i32, ptr %6, align 4, !tbaa !351
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = tail call i32 @gx_screen_finish(ptr noundef nonnull %0) #62, !range !280
  br label %39

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 6
  %13 = load i32, ptr %12, align 8, !tbaa !349
  %14 = sitofp i32 %13 to double
  %15 = sitofp i32 %5 to double
  %16 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 5
  %17 = call i32 @gs_point_transform(double noundef %14, double noundef %15, ptr noundef nonnull %16, ptr noundef nonnull %3) #64
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %39, label %19

19:                                               ; preds = %11
  %20 = load float, ptr %3, align 8, !tbaa !230
  %21 = fcmp olt float %20, -1.000000e+00
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = fadd float %20, 2.000000e+00
  store float %23, ptr %3, align 8, !tbaa !230
  br label %28

24:                                               ; preds = %19
  %25 = fcmp ogt float %20, 1.000000e+00
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = fadd float %20, -2.000000e+00
  store float %27, ptr %3, align 8, !tbaa !230
  br label %28

28:                                               ; preds = %26, %24, %22
  %29 = getelementptr inbounds %struct.gs_point_s, ptr %3, i64 0, i32 1
  %30 = load float, ptr %29, align 4, !tbaa !232
  %31 = fcmp olt float %30, -1.000000e+00
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = fcmp ogt float %30, 1.000000e+00
  br i1 %33, label %34, label %37

34:                                               ; preds = %32, %28
  %35 = phi float [ 2.000000e+00, %28 ], [ -2.000000e+00, %32 ]
  %36 = fadd float %30, %35
  store float %36, ptr %29, align 4, !tbaa !232
  br label %37

37:                                               ; preds = %34, %32
  %38 = load i64, ptr %3, align 8
  store i64 %38, ptr %1, align 4
  br label %39

39:                                               ; preds = %37, %11, %9
  %40 = phi i32 [ %10, %9 ], [ 0, %37 ], [ %17, %11 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  ret i32 %40
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_screen_finish(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !346
  %4 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 3
  %5 = load i32, ptr %4, align 8, !tbaa !352
  %6 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 4
  %7 = load i32, ptr %6, align 4, !tbaa !351
  %8 = mul nsw i32 %7, %5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %71, label %10

10:                                               ; preds = %1
  %11 = zext i32 %8 to i64
  %12 = add nuw nsw i64 %11, 7
  %13 = and i64 %12, 8589934584
  %14 = add nsw i64 %11, -1
  %15 = insertelement <8 x i64> poison, i64 %14, i64 0
  %16 = shufflevector <8 x i64> %15, <8 x i64> poison, <8 x i32> zeroinitializer
  br label %17

17:                                               ; preds = %67, %10
  %18 = phi i64 [ 0, %10 ], [ %68, %67 ]
  %19 = phi <8 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>, %10 ], [ %69, %67 ]
  %20 = trunc i64 %18 to i16
  %21 = icmp ule <8 x i64> %19, %16
  %22 = extractelement <8 x i1> %21, i64 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %18
  store i16 %20, ptr %24, align 2, !tbaa !353
  br label %25

25:                                               ; preds = %23, %17
  %26 = extractelement <8 x i1> %21, i64 1
  br i1 %26, label %27, label %31

27:                                               ; preds = %25
  %28 = or i64 %18, 1
  %29 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %28
  %30 = or i16 %20, 1
  store i16 %30, ptr %29, align 2, !tbaa !353
  br label %31

31:                                               ; preds = %27, %25
  %32 = extractelement <8 x i1> %21, i64 2
  br i1 %32, label %33, label %37

33:                                               ; preds = %31
  %34 = or i64 %18, 2
  %35 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %34
  %36 = or i16 %20, 2
  store i16 %36, ptr %35, align 2, !tbaa !353
  br label %37

37:                                               ; preds = %33, %31
  %38 = extractelement <8 x i1> %21, i64 3
  br i1 %38, label %39, label %43

39:                                               ; preds = %37
  %40 = or i64 %18, 3
  %41 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %40
  %42 = or i16 %20, 3
  store i16 %42, ptr %41, align 2, !tbaa !353
  br label %43

43:                                               ; preds = %39, %37
  %44 = extractelement <8 x i1> %21, i64 4
  br i1 %44, label %45, label %49

45:                                               ; preds = %43
  %46 = or i64 %18, 4
  %47 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %46
  %48 = or i16 %20, 4
  store i16 %48, ptr %47, align 2, !tbaa !353
  br label %49

49:                                               ; preds = %45, %43
  %50 = extractelement <8 x i1> %21, i64 5
  br i1 %50, label %51, label %55

51:                                               ; preds = %49
  %52 = or i64 %18, 5
  %53 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %52
  %54 = or i16 %20, 5
  store i16 %54, ptr %53, align 2, !tbaa !353
  br label %55

55:                                               ; preds = %51, %49
  %56 = extractelement <8 x i1> %21, i64 6
  br i1 %56, label %57, label %61

57:                                               ; preds = %55
  %58 = or i64 %18, 6
  %59 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %58
  %60 = or i16 %20, 6
  store i16 %60, ptr %59, align 2, !tbaa !353
  br label %61

61:                                               ; preds = %57, %55
  %62 = extractelement <8 x i1> %21, i64 7
  br i1 %62, label %63, label %67

63:                                               ; preds = %61
  %64 = or i64 %18, 7
  %65 = getelementptr inbounds %struct.ht_bit_s, ptr %3, i64 %64
  %66 = or i16 %20, 7
  store i16 %66, ptr %65, align 2, !tbaa !353
  br label %67

67:                                               ; preds = %63, %61
  %68 = add i64 %18, 8
  %69 = add <8 x i64> %19, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %70 = icmp eq i64 %68, %13
  br i1 %70, label %71, label %17, !llvm.loop !355

71:                                               ; preds = %67, %1
  tail call void @gx_sort_ht_order(ptr noundef %3, i32 noundef %8) #64
  %72 = load ptr, ptr %2, align 8, !tbaa !346
  %73 = load i32, ptr %4, align 8, !tbaa !352
  %74 = load i32, ptr %6, align 4, !tbaa !351
  %75 = tail call i32 (ptr, i32, i32, ...) @gx_ht_construct_order(ptr noundef %72, i32 noundef %73, i32 noundef %74) #64
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %91, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 8
  %79 = load ptr, ptr %78, align 8, !tbaa !350
  %80 = getelementptr inbounds %struct.gs_state_s, ptr %79, i64 0, i32 11
  %81 = load ptr, ptr %80, align 8, !tbaa !356
  %82 = load <2 x float>, ptr %0, align 8, !tbaa !103
  store <2 x float> %82, ptr %81, align 8, !tbaa !103
  %83 = load i32, ptr %4, align 8, !tbaa !352
  %84 = getelementptr inbounds %struct.halftone_s, ptr %81, i64 0, i32 2
  store i32 %83, ptr %84, align 8, !tbaa !357
  %85 = load i32, ptr %6, align 4, !tbaa !351
  %86 = getelementptr inbounds %struct.halftone_s, ptr %81, i64 0, i32 3
  store i32 %85, ptr %86, align 4, !tbaa !359
  %87 = load ptr, ptr %2, align 8, !tbaa !346
  %88 = getelementptr inbounds %struct.halftone_s, ptr %81, i64 0, i32 4
  store ptr %87, ptr %88, align 8, !tbaa !360
  %89 = mul nsw i32 %85, %83
  %90 = getelementptr inbounds %struct.halftone_s, ptr %81, i64 0, i32 5
  store i32 %89, ptr %90, align 8, !tbaa !361
  br label %91

91:                                               ; preds = %77, %71
  %92 = phi i32 [ 1, %77 ], [ %75, %71 ]
  ret i32 %92
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_screen_next(ptr nocapture noundef %0, double noundef %1) #31 {
  %3 = fcmp olt double %1, -1.000000e+00
  %4 = fcmp ogt double %1, 1.000000e+00
  %5 = or i1 %3, %4
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !346
  %9 = fmul double %1, 3.276700e+04
  %10 = fptoui double %9 to i16
  %11 = add i16 %10, 32767
  %12 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 7
  %13 = load i32, ptr %12, align 4, !tbaa !348
  %14 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 3
  %15 = load i32, ptr %14, align 8, !tbaa !352
  %16 = mul nsw i32 %15, %13
  %17 = getelementptr inbounds %struct.gs_screen_enum_s, ptr %0, i64 0, i32 6
  %18 = load i32, ptr %17, align 8, !tbaa !349
  %19 = add nsw i32 %16, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.ht_bit_s, ptr %8, i64 %20, i32 1
  store i16 %11, ptr %21, align 2, !tbaa !362
  %22 = add nsw i32 %18, 1
  store i32 %22, ptr %17, align 8, !tbaa !349
  %23 = icmp slt i32 %22, %15
  br i1 %23, label %26, label %24

24:                                               ; preds = %6
  store i32 0, ptr %17, align 8, !tbaa !349
  %25 = add nsw i32 %13, 1
  store i32 %25, ptr %12, align 4, !tbaa !348
  br label %26

26:                                               ; preds = %24, %6, %2
  %27 = phi i32 [ -15, %2 ], [ 0, %24 ], [ 0, %6 ]
  ret i32 %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_currentscreen(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) #23 {
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 11
  %6 = load ptr, ptr %5, align 8, !tbaa !356
  %7 = load float, ptr %6, align 8, !tbaa !363
  store float %7, ptr %1, align 4, !tbaa !103
  %8 = getelementptr inbounds %struct.halftone_s, ptr %6, i64 0, i32 1
  %9 = load float, ptr %8, align 4, !tbaa !364
  store float %9, ptr %2, align 4, !tbaa !103
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 12
  %11 = load ptr, ptr %10, align 8, !tbaa !365
  store ptr %11, ptr %3, align 8, !tbaa !7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_initmatrix(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  %4 = load ptr, ptr %3, align 8, !tbaa !328
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.gx_device_procs_s, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !366
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  tail call void %8(ptr noundef %4, ptr noundef nonnull %9) #64
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 8
  %11 = load float, ptr %10, align 8, !tbaa !315
  %12 = fmul float %11, 4.096000e+03
  %13 = fptosi float %12 to i64
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 12
  store i64 %13, ptr %14, align 8, !tbaa !324
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 10
  %16 = load float, ptr %15, align 8, !tbaa !316
  %17 = fmul float %16, 4.096000e+03
  %18 = fptosi float %17 to i64
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 13
  store i64 %18, ptr %19, align 8, !tbaa !325
  %20 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %20, align 8, !tbaa !367
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %21, align 8, !tbaa !302
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_currentmatrix(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #33 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %1, ptr noundef nonnull align 8 dereferenceable(96) %3, i64 96, i1 false), !tbaa.struct !163
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_setmatrix(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #33 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %3, ptr noundef nonnull align 8 dereferenceable(96) %1, i64 96, i1 false), !tbaa.struct !163
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 8
  %5 = load float, ptr %4, align 8, !tbaa !315
  %6 = fmul float %5, 4.096000e+03
  %7 = fptosi float %6 to i64
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 12
  store i64 %7, ptr %8, align 8, !tbaa !324
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 10
  %10 = load float, ptr %9, align 8, !tbaa !316
  %11 = fmul float %10, 4.096000e+03
  %12 = fptosi float %11 to i64
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 13
  store i64 %12, ptr %13, align 8, !tbaa !325
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %14, align 8, !tbaa !367
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %15, align 8, !tbaa !302
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_translate(ptr noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.gs_point_s, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %6 = call i32 @gs_distance_transform(double noundef %1, double noundef %2, ptr noundef nonnull %5, ptr noundef nonnull %4) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %25, label %8

8:                                                ; preds = %3
  %9 = load float, ptr %4, align 4, !tbaa !230
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 8
  %11 = load float, ptr %10, align 8, !tbaa !315
  %12 = fadd float %9, %11
  store float %12, ptr %10, align 8, !tbaa !315
  %13 = getelementptr inbounds %struct.gs_point_s, ptr %4, i64 0, i32 1
  %14 = load float, ptr %13, align 4, !tbaa !232
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 10
  %16 = load float, ptr %15, align 8, !tbaa !316
  %17 = fadd float %14, %16
  store float %17, ptr %15, align 8, !tbaa !316
  %18 = fmul float %12, 4.096000e+03
  %19 = fptosi float %18 to i64
  %20 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 12
  store i64 %19, ptr %20, align 8, !tbaa !324
  %21 = fmul float %17, 4.096000e+03
  %22 = fptosi float %21 to i64
  %23 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 13
  store i64 %22, ptr %23, align 8, !tbaa !325
  %24 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %24, align 8, !tbaa !367
  br label %25

25:                                               ; preds = %8, %3
  %26 = phi i32 [ 0, %8 ], [ %6, %3 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  ret i32 %26
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_scale(ptr nocapture noundef %0, double noundef %1, double noundef %2) #28 {
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %5 = load float, ptr %4, align 8, !tbaa !368
  %6 = fpext float %5 to double
  %7 = fmul double %6, %1
  %8 = fptrunc double %7 to float
  store float %8, ptr %4, align 8, !tbaa !368
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 2
  %10 = load float, ptr %9, align 8, !tbaa !369
  %11 = fpext float %10 to double
  %12 = fmul double %11, %1
  %13 = fptrunc double %12 to float
  store float %13, ptr %9, align 8, !tbaa !369
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 4
  %15 = load float, ptr %14, align 8, !tbaa !370
  %16 = fpext float %15 to double
  %17 = fmul double %16, %2
  %18 = fptrunc double %17 to float
  store float %18, ptr %14, align 8, !tbaa !370
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 6
  %20 = load float, ptr %19, align 8, !tbaa !371
  %21 = fpext float %20 to double
  %22 = fmul double %21, %2
  %23 = fptrunc double %22 to float
  store float %23, ptr %19, align 8, !tbaa !371
  %24 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %24, align 8, !tbaa !367
  %25 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %25, align 8, !tbaa !302
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_rotate(ptr noundef %0, double noundef %1) #0 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %4 = tail call i32 @gs_matrix_rotate(ptr noundef nonnull %3, double noundef %1, ptr noundef nonnull %3) #64
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %5, align 8, !tbaa !367
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %6, align 8, !tbaa !302
  ret i32 %4
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_concat(ptr noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %4 = tail call i32 @gs_matrix_multiply(ptr noundef %1, ptr noundef nonnull %3, ptr noundef nonnull %3) #64
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 8
  %6 = load float, ptr %5, align 8, !tbaa !315
  %7 = fmul float %6, 4.096000e+03
  %8 = fptosi float %7 to i64
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 12
  store i64 %8, ptr %9, align 8, !tbaa !324
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 10
  %11 = load float, ptr %10, align 8, !tbaa !316
  %12 = fmul float %11, 4.096000e+03
  %13 = fptosi float %12 to i64
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 13
  store i64 %13, ptr %14, align 8, !tbaa !325
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %15, align 8, !tbaa !367
  %16 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %16, align 8, !tbaa !302
  ret i32 %4
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_transform(ptr noundef %0, double noundef %1, double noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %6 = tail call i32 @gs_point_transform(double noundef %1, double noundef %2, ptr noundef nonnull %5, ptr noundef %3) #64
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_dtransform(ptr noundef %0, double noundef %1, double noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %6 = tail call i32 @gs_distance_transform(double noundef %1, double noundef %2, ptr noundef nonnull %5, ptr noundef %3) #64
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_itransform(ptr noundef %0, double noundef %1, double noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  %6 = load i32, ptr %5, align 8, !tbaa !367
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 3
  %11 = tail call i32 @gs_matrix_invert(ptr noundef nonnull %9, ptr noundef nonnull %10) #64
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %21, label %13

13:                                               ; preds = %8
  store i32 1, ptr %5, align 8, !tbaa !367
  br label %14

14:                                               ; preds = %13, %4
  %15 = fptrunc double %1 to float
  %16 = fpext float %15 to double
  %17 = fptrunc double %2 to float
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 3
  %20 = tail call i32 @gs_point_transform(double noundef %16, double noundef %18, ptr noundef nonnull %19, ptr noundef %3) #64
  br label %21

21:                                               ; preds = %14, %8
  %22 = phi i32 [ %20, %14 ], [ %11, %8 ]
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_idtransform(ptr noundef %0, double noundef %1, double noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  %6 = load i32, ptr %5, align 8, !tbaa !367
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 3
  %11 = tail call i32 @gs_matrix_invert(ptr noundef nonnull %9, ptr noundef nonnull %10) #64
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %21, label %13

13:                                               ; preds = %8
  store i32 1, ptr %5, align 8, !tbaa !367
  br label %14

14:                                               ; preds = %13, %4
  %15 = fptrunc double %1 to float
  %16 = fpext float %15 to double
  %17 = fptrunc double %2 to float
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 3
  %20 = tail call i32 @gs_distance_transform(double noundef %16, double noundef %18, ptr noundef nonnull %19, ptr noundef %3) #64
  br label %21

21:                                               ; preds = %14, %8
  %22 = phi i32 [ %20, %14 ], [ %11, %8 ]
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gs_translate_to_fixed(ptr nocapture noundef writeonly %0, i64 noundef %1, i64 noundef %2) #45 {
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 12
  store i64 %1, ptr %4, align 8, !tbaa !324
  %5 = sitofp i64 %1 to double
  %6 = fmul double %5, 0x3F30000000000000
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 8
  store float %7, ptr %8, align 8, !tbaa !315
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 13
  store i64 %2, ptr %9, align 8, !tbaa !325
  %10 = sitofp i64 %2 to double
  %11 = fmul double %10, 0x3F30000000000000
  %12 = fptrunc double %11 to float
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2, i32 10
  store float %12, ptr %13, align 8, !tbaa !316
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 4
  store i32 0, ptr %14, align 8, !tbaa !367
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 1, ptr %15, align 8, !tbaa !302
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gx_default_open_device(ptr nocapture readnone %0) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gx_default_get_initial_matrix(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 5
  %4 = load float, ptr %3, align 8, !tbaa !372
  %5 = fdiv float %4, 7.200000e+01
  store float %5, ptr %1, align 8, !tbaa !267
  %6 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 2
  store float 0.000000e+00, ptr %6, align 8, !tbaa !268
  %7 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 4
  store float 0.000000e+00, ptr %7, align 8, !tbaa !269
  %8 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 6
  %9 = load float, ptr %8, align 4, !tbaa !373
  %10 = fdiv float %9, -7.200000e+01
  %11 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 6
  store float %10, ptr %11, align 8, !tbaa !270
  %12 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 8
  store float 0.000000e+00, ptr %12, align 8, !tbaa !271
  %13 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 4
  %14 = load i32, ptr %13, align 4, !tbaa !266
  %15 = sitofp i32 %14 to float
  %16 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 10
  store float %15, ptr %16, align 8, !tbaa !272
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gx_default_sync_output(ptr nocapture readnone %0) #10 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_default_output_page(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !25
  %4 = getelementptr inbounds %struct.gx_device_procs_s, ptr %3, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !374
  %6 = tail call i32 %5(ptr noundef %0) #64
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gx_default_close_device(ptr nocapture readnone %0) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable
define internal i64 @gx_default_map_rgb_color(ptr nocapture readnone %0, i16 noundef zeroext %1, i16 noundef zeroext %2, i16 noundef zeroext %3) #46 {
  %5 = tail call i16 @llvm.umax.i16(i16 %1, i16 %2)
  %6 = tail call i16 @llvm.umax.i16(i16 %5, i16 %3)
  %7 = zext i16 %6 to i64
  ret i64 %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.umax.i16(i16, i16) #19

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gx_default_map_color_rgb(ptr nocapture readnone %0, i64 noundef %1, ptr nocapture noundef writeonly %2) #45 {
  %4 = trunc i64 %1 to i16
  %5 = getelementptr inbounds i16, ptr %2, i64 2
  store i16 %4, ptr %5, align 2, !tbaa !102
  %6 = getelementptr inbounds i16, ptr %2, i64 1
  store i16 %4, ptr %6, align 2, !tbaa !102
  store i16 %4, ptr %2, align 2, !tbaa !102
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_fill_rectangle(ptr nocapture readnone %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_tile_rectangle(ptr nocapture readnone %0, ptr nocapture readnone %1, i32 %2, i32 %3, i32 %4, i32 %5, i64 %6, i64 %7) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_copy_mono(ptr nocapture readnone %0, ptr nocapture readnone %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_copy_color(ptr nocapture readnone %0, ptr nocapture readnone %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_draw_line(ptr nocapture readnone %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_fill_trapezoid(ptr nocapture readnone %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i64 %7) #10 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @null_tile_trapezoid(ptr nocapture readnone %0, ptr nocapture readnone %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #10 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_flushpage(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  %4 = load ptr, ptr %3, align 8, !tbaa !328
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.gx_device_procs_s, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !374
  %9 = tail call i32 %8(ptr noundef %4) #64
  ret i32 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_copypage(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  %4 = load ptr, ptr %3, align 8, !tbaa !328
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.gx_device_procs_s, ptr %6, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !375
  %9 = tail call i32 %8(ptr noundef %4) #64
  ret i32 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_copyscanlines(ptr noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef writeonly %4, ptr noundef writeonly %5) #0 {
  %7 = tail call i32 @gs_device_is_memory(ptr noundef %0) #64
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %6
  %10 = tail call i32 @mem_copy_scan_lines(ptr noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3) #64
  %11 = icmp eq ptr %4, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %9
  store i32 %10, ptr %4, align 4, !tbaa !11
  br label %13

13:                                               ; preds = %12, %9
  %14 = icmp eq ptr %5, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = tail call i32 @mem_bytes_per_scan_line(ptr noundef %0) #64
  %17 = mul nsw i32 %16, %10
  store i32 %17, ptr %5, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %15, %13, %6
  %19 = phi i32 [ -21, %6 ], [ 0, %15 ], [ 0, %13 ]
  ret i32 %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal ptr @gs_currentdevice(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  %4 = load ptr, ptr %3, align 8, !tbaa !328
  ret ptr %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal ptr @gs_devicename(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !376
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal void @gs_deviceparams(ptr noundef %0, ptr noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.gx_device_procs_s, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !366
  tail call void %8(ptr noundef %0, ptr noundef %1) #64
  %9 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !377
  store i32 %10, ptr %2, align 4, !tbaa !11
  %11 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 4
  %12 = load i32, ptr %11, align 4, !tbaa !266
  store i32 %12, ptr %3, align 4, !tbaa !11
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal ptr @gs_getdevice(i32 noundef %0) #47 {
  %2 = zext i32 %0 to i64
  br label %3

3:                                                ; preds = %3, %1
  %4 = phi i64 [ %10, %3 ], [ 0, %1 ]
  %5 = getelementptr inbounds [0 x ptr], ptr @gx_device_list, i64 0, i64 %4
  %6 = load ptr, ptr %5, align 8, !tbaa !7
  %7 = icmp eq ptr %6, null
  %8 = icmp eq i64 %4, %2
  %9 = or i1 %8, %7
  %10 = add nuw nsw i64 %4, 1
  br i1 %9, label %11, label %3, !llvm.loop !378

11:                                               ; preds = %3
  %.lcssa = phi ptr [ %6, %3 ]
  ret ptr %.lcssa
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_makedevice(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readnone %2, i32 noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5) #0 {
  %7 = load i32, ptr %1, align 8, !tbaa !379
  %8 = tail call ptr %5(i32 noundef 1, i32 noundef %7, ptr noundef nonnull @.str.1.610) #64
  %9 = icmp eq ptr %8, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = icmp eq i32 %3, 0
  %12 = icmp eq i32 %4, 0
  %13 = or i1 %11, %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = load i32, ptr %1, align 8, !tbaa !379
  %16 = sext i32 %15 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %8, ptr nonnull align 8 %1, i64 %16, i1 false)
  %17 = getelementptr inbounds %struct.gx_device_s, ptr %8, i64 0, i32 3
  store i32 %3, ptr %17, align 8, !tbaa !377
  %18 = getelementptr inbounds %struct.gx_device_s, ptr %8, i64 0, i32 4
  store i32 %4, ptr %18, align 4, !tbaa !266
  %19 = getelementptr inbounds %struct.gx_device_s, ptr %8, i64 0, i32 10
  store i32 0, ptr %19, align 4, !tbaa !22
  store ptr %8, ptr %0, align 8, !tbaa !7
  br label %20

20:                                               ; preds = %14, %10, %6
  %21 = phi i32 [ 0, %14 ], [ -25, %6 ], [ -15, %10 ]
  ret i32 %21
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_makeimagedevice(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef readonly %4, i32 noundef %5, ptr nocapture noundef readonly %6) #0 {
  %8 = alloca [768 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 768, ptr nonnull %8) #65
  %9 = icmp eq i32 %2, 0
  %10 = icmp eq i32 %3, 0
  %11 = or i1 %9, %10
  br i1 %11, label %96, label %12

12:                                               ; preds = %7
  switch i32 %5, label %96 [
    i32 2, label %15
    i32 -32, label %14
    i32 -24, label %63
    i32 256, label %13
  ]

13:                                               ; preds = %12
  br label %15

14:                                               ; preds = %12
  br label %63

15:                                               ; preds = %13, %12
  %16 = phi ptr [ @mem_mapped_color_device, %13 ], [ @mem_mono_device, %12 ]
  %17 = phi i32 [ 8, %13 ], [ 1, %12 ]
  %18 = mul nuw nsw i32 %5, 3
  br label %19

19:                                               ; preds = %51, %15
  %20 = phi i32 [ %55, %51 ], [ 0, %15 ]
  %21 = phi ptr [ %57, %51 ], [ %8, %15 ]
  %22 = phi ptr [ %56, %51 ], [ %4, %15 ]
  %23 = phi i32 [ %54, %51 ], [ 0, %15 ]
  %24 = phi i32 [ %53, %51 ], [ -1, %15 ]
  %25 = phi i32 [ %52, %51 ], [ -1, %15 ]
  %26 = load float, ptr %22, align 4, !tbaa !103
  %27 = fpext float %26 to double
  %28 = fcmp olt double %27, -1.000000e-03
  %29 = fcmp ogt double %27, 1.001000e+00
  %30 = or i1 %28, %29
  br i1 %30, label %96, label %31

31:                                               ; preds = %19
  %32 = fmul float %26, 2.550000e+02
  %33 = fpext float %32 to double
  %34 = fadd double %33, 5.000000e-01
  %35 = fptoui double %34 to i8
  store i8 %35, ptr %21, align 1, !tbaa !13
  %36 = urem i32 %20, 3
  %37 = icmp eq i32 %36, 2
  br i1 %37, label %38, label %51

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, ptr %21, i64 -1
  %40 = load i8, ptr %39, align 1, !tbaa !13
  %41 = icmp eq i8 %40, %35
  br i1 %41, label %42, label %51

42:                                               ; preds = %38
  %43 = getelementptr inbounds i8, ptr %21, i64 -2
  %44 = load i8, ptr %43, align 1, !tbaa !13
  %45 = icmp eq i8 %44, %35
  br i1 %45, label %46, label %51

46:                                               ; preds = %42
  switch i8 %35, label %51 [
    i8 0, label %47
    i8 -1, label %49
  ]

47:                                               ; preds = %46
  %48 = add nsw i32 %20, -2
  br label %51

49:                                               ; preds = %46
  %50 = add nsw i32 %20, -2
  br label %51

51:                                               ; preds = %49, %47, %46, %42, %38, %31
  %52 = phi i32 [ %25, %47 ], [ %50, %49 ], [ %25, %31 ], [ %25, %46 ], [ %25, %42 ], [ %25, %38 ]
  %53 = phi i32 [ %48, %47 ], [ %24, %49 ], [ %24, %31 ], [ %24, %46 ], [ %24, %42 ], [ %24, %38 ]
  %54 = phi i32 [ %23, %47 ], [ %23, %49 ], [ %23, %31 ], [ %23, %46 ], [ 1, %42 ], [ 1, %38 ]
  %55 = add nuw i32 %20, 1
  %56 = getelementptr inbounds float, ptr %22, i64 1
  %57 = getelementptr inbounds i8, ptr %21, i64 1
  %58 = icmp eq i32 %55, %18
  br i1 %58, label %59, label %19, !llvm.loop !380

59:                                               ; preds = %51
  %.lcssa2 = phi i32 [ %52, %51 ]
  %.lcssa1 = phi i32 [ %53, %51 ]
  %.lcssa = phi i32 [ %54, %51 ]
  %60 = icmp sgt i32 %.lcssa2, -1
  %61 = icmp sgt i32 %.lcssa1, -1
  %62 = select i1 %60, i1 %61, i1 false
  br i1 %62, label %63, label %96

63:                                               ; preds = %59, %14, %12
  %64 = phi i32 [ %18, %59 ], [ 0, %14 ], [ 0, %12 ]
  %65 = phi i32 [ %17, %59 ], [ 32, %14 ], [ 24, %12 ]
  %66 = phi ptr [ %16, %59 ], [ @mem_true32_color_device, %14 ], [ @mem_true24_color_device, %12 ]
  %67 = phi i32 [ %5, %59 ], [ 0, %14 ], [ 0, %12 ]
  %68 = phi i32 [ %.lcssa1, %59 ], [ -1, %14 ], [ -1, %12 ]
  %69 = phi i32 [ %.lcssa, %59 ], [ 1, %14 ], [ 1, %12 ]
  %70 = load i32, ptr %66, align 8, !tbaa !381
  %71 = tail call ptr %6(i32 noundef 1, i32 noundef %70, ptr noundef nonnull @.str.2.613) #64
  %72 = icmp eq ptr %71, null
  br i1 %72, label %96, label %73

73:                                               ; preds = %63
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(200) %71, ptr noundef nonnull align 8 dereferenceable(200) %66, i64 200, i1 false), !tbaa.struct !327
  %74 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 11
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %74, ptr noundef nonnull align 8 dereferenceable(96) %1, i64 96, i1 false), !tbaa.struct !163
  %75 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 3
  store i32 %2, ptr %75, align 8, !tbaa !382
  %76 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 4
  store i32 %3, ptr %76, align 4, !tbaa !383
  %77 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 7
  store i32 %69, ptr %77, align 8, !tbaa !384
  %78 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 9
  store i32 %65, ptr %78, align 8, !tbaa !385
  %79 = tail call i64 @gx_device_memory_bitmap_size(ptr noundef nonnull %71) #64
  %80 = icmp ugt i64 %79, 4294967295
  br i1 %80, label %96, label %81

81:                                               ; preds = %73
  %82 = trunc i64 %79 to i32
  %83 = add i32 %64, %82
  %84 = tail call ptr %6(i32 noundef 1, i32 noundef %83, ptr noundef nonnull @.str.3.614) #64
  %85 = icmp eq ptr %84, null
  br i1 %85, label %96, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 13
  store ptr %84, ptr %87, align 8, !tbaa !386
  %88 = icmp ne i32 %68, 0
  %89 = sext i1 %88 to i32
  %90 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 16
  store i32 %89, ptr %90, align 8, !tbaa !387
  %91 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 17
  store i32 %67, ptr %91, align 4, !tbaa !388
  %92 = getelementptr inbounds i8, ptr %84, i64 %79
  %93 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 18
  store ptr %92, ptr %93, align 8, !tbaa !389
  %94 = zext i32 %64 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %92, ptr nonnull align 16 %8, i64 %94, i1 false)
  %95 = getelementptr inbounds %struct.gx_device_memory_s, ptr %71, i64 0, i32 10
  store i32 0, ptr %95, align 4, !tbaa !390
  store ptr %71, ptr %0, align 8, !tbaa !7
  br label %96

96:                                               ; preds = %86, %81, %73, %63, %59, %19, %12, %7
  %97 = phi i32 [ 0, %86 ], [ -15, %59 ], [ -15, %7 ], [ -15, %12 ], [ -25, %63 ], [ -13, %73 ], [ -25, %81 ], [ -15, %19 ]
  call void @llvm.lifetime.end.p0(i64 768, ptr nonnull %8) #65
  ret i32 %97
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_setdevice(ptr noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %4 = load ptr, ptr %3, align 8, !tbaa !338
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %1, i64 0, i32 10
  %6 = load i32, ptr %5, align 4, !tbaa !22
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.gx_device_s, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !25
  %11 = load ptr, ptr %10, align 8, !tbaa !391
  %12 = tail call i32 %11(ptr noundef nonnull %1) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %39, label %14

14:                                               ; preds = %8
  store i32 1, ptr %5, align 4, !tbaa !22
  br label %15

15:                                               ; preds = %14, %2
  %16 = getelementptr inbounds %struct.gx_device_s, ptr %1, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !25
  %18 = getelementptr inbounds %struct.gx_device_procs_s, ptr %17, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !392
  %20 = tail call i64 %19(ptr noundef nonnull %1, i16 noundef zeroext 0, i16 noundef zeroext 0, i16 noundef zeroext 0) #64
  %21 = getelementptr inbounds %struct.device_s, ptr %4, i64 0, i32 3
  store i64 %20, ptr %21, align 8, !tbaa !331
  %22 = load ptr, ptr %16, align 8, !tbaa !25
  %23 = getelementptr inbounds %struct.gx_device_procs_s, ptr %22, i64 0, i32 5
  %24 = load ptr, ptr %23, align 8, !tbaa !392
  %25 = getelementptr inbounds %struct.gx_device_s, ptr %1, i64 0, i32 8
  %26 = load i16, ptr %25, align 4, !tbaa !393
  %27 = tail call i64 %24(ptr noundef nonnull %1, i16 noundef zeroext %26, i16 noundef zeroext %26, i16 noundef zeroext %26) #64
  %28 = getelementptr inbounds %struct.device_s, ptr %4, i64 0, i32 2
  store i64 %27, ptr %28, align 8, !tbaa !330
  store ptr %1, ptr %4, align 8, !tbaa !328
  %29 = tail call i32 (ptr, ...) @gs_initmatrix(ptr noundef nonnull %0) #64
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %39, label %31

31:                                               ; preds = %15
  %32 = tail call i32 (ptr, ...) @gs_initclip(ptr noundef nonnull %0) #64
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %31
  br i1 %7, label %35, label %38

35:                                               ; preds = %34
  %36 = tail call i32 (ptr, ...) @gs_erasepage(ptr noundef nonnull %0) #64
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %35, %34
  br label %39

39:                                               ; preds = %38, %35, %31, %15, %8
  %40 = phi i32 [ 0, %38 ], [ %12, %8 ], [ %29, %15 ], [ %32, %31 ], [ %36, %35 ]
  ret i32 %40
}

; Function Attrs: nounwind optsize uwtable
define internal void @gs_nulldevice(ptr noundef %0) #0 {
  %2 = load ptr, ptr @gx_device_null_p, align 8, !tbaa !7
  %3 = tail call i32 @gs_setdevice(ptr noundef %0, ptr noundef %2) #62, !range !263
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @gx_device_no_output(ptr nocapture noundef readonly %0) #31 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  store ptr @null_device, ptr %3, align 8, !tbaa !328
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_writeppmfile(ptr noundef %0, ptr nocapture noundef %1) #0 {
  %3 = tail call i32 @mem_bytes_per_scan_line(ptr noundef %0) #64
  %4 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %5 = load i32, ptr %4, align 4, !tbaa !383
  %6 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 9
  %7 = load i32, ptr %6, align 8, !tbaa !385
  %8 = mul nsw i32 %3, 3
  %9 = tail call ptr @gs_malloc(i32 noundef %8, i32 noundef 1, ptr noundef nonnull @.str.624) #64
  %10 = icmp eq ptr %9, null
  br i1 %10, label %100, label %11

11:                                               ; preds = %2
  switch i32 %7, label %98 [
    i32 1, label %19
    i32 8, label %12
    i32 24, label %17
    i32 32, label %18
  ]

12:                                               ; preds = %11
  %13 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 7
  %14 = load i32, ptr %13, align 8, !tbaa !384
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, ptr @.str.3.625, ptr @.str.2.626
  br label %19

17:                                               ; preds = %11
  br label %19

18:                                               ; preds = %11
  br label %19

19:                                               ; preds = %18, %17, %12, %11
  %20 = phi ptr [ @.str.5.627, %18 ], [ @.str.4.628, %17 ], [ %16, %12 ], [ @.str.1.629, %11 ]
  %21 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %22 = load i32, ptr %21, align 8, !tbaa !382
  %23 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef nonnull %20, i32 noundef %22, i32 noundef %5) #62
  %24 = icmp sgt i32 %5, 0
  br i1 %24, label %25, label %98

25:                                               ; preds = %19
  %26 = sext i32 %3 to i64
  %27 = getelementptr inbounds i8, ptr %9, i64 %26
  %28 = icmp sgt i32 %3, 0
  %29 = ptrtoint ptr %9 to i64
  %30 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 7
  %31 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 18
  %32 = getelementptr inbounds i8, ptr %27, i64 %26
  %33 = getelementptr inbounds i8, ptr %32, i64 %26
  br label %37

34:                                               ; preds = %93
  %35 = add nuw nsw i32 %38, 1
  %36 = icmp eq i32 %35, %5
  br i1 %36, label %98, label %37, !llvm.loop !394

37:                                               ; preds = %34, %25
  %38 = phi i32 [ 0, %25 ], [ %35, %34 ]
  %39 = tail call i32 @mem_copy_scan_lines(ptr noundef %0, i32 noundef %38, ptr noundef nonnull %9, i32 noundef %3) #64
  switch i32 %7, label %93 [
    i32 8, label %40
    i32 32, label %72
  ]

40:                                               ; preds = %37
  %41 = load i32, ptr %30, align 8, !tbaa !384
  %42 = icmp eq i32 %41, 0
  %43 = load ptr, ptr %31, align 8, !tbaa !389
  br i1 %42, label %62, label %44

44:                                               ; preds = %40
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %32, ptr nonnull align 1 %9, i64 %26, i1 false)
  br i1 %28, label %45, label %93

45:                                               ; preds = %45, %44
  %46 = phi ptr [ %60, %45 ], [ %9, %44 ]
  %47 = phi ptr [ %48, %45 ], [ %32, %44 ]
  %48 = getelementptr inbounds i8, ptr %47, i64 1
  %49 = load i8, ptr %47, align 1, !tbaa !13
  %50 = zext i8 %49 to i64
  %51 = mul nuw nsw i64 %50, 3
  %52 = getelementptr inbounds i8, ptr %43, i64 %51
  %53 = getelementptr inbounds i8, ptr %52, i64 1
  %54 = load i8, ptr %52, align 1, !tbaa !13
  %55 = getelementptr inbounds i8, ptr %46, i64 1
  store i8 %54, ptr %46, align 1, !tbaa !13
  %56 = getelementptr inbounds i8, ptr %52, i64 2
  %57 = load i8, ptr %53, align 1, !tbaa !13
  %58 = getelementptr inbounds i8, ptr %46, i64 2
  store i8 %57, ptr %55, align 1, !tbaa !13
  %59 = load i8, ptr %56, align 1, !tbaa !13
  %60 = getelementptr inbounds i8, ptr %46, i64 3
  store i8 %59, ptr %58, align 1, !tbaa !13
  %61 = icmp ult ptr %48, %33
  br i1 %61, label %45, label %93, !llvm.loop !395

62:                                               ; preds = %40
  br i1 %28, label %63, label %93

63:                                               ; preds = %63, %62
  %64 = phi ptr [ %65, %63 ], [ %9, %62 ]
  %65 = getelementptr i8, ptr %64, i64 1
  %66 = load i8, ptr %64, align 1, !tbaa !13
  %67 = zext i8 %66 to i64
  %68 = mul nuw nsw i64 %67, 3
  %69 = getelementptr inbounds i8, ptr %43, i64 %68
  %70 = load i8, ptr %69, align 1, !tbaa !13
  store i8 %70, ptr %64, align 1, !tbaa !13
  %71 = icmp ult ptr %65, %27
  br i1 %71, label %63, label %93, !llvm.loop !396

72:                                               ; preds = %37
  br i1 %28, label %73, label %89

73:                                               ; preds = %73, %72
  %74 = phi ptr [ %85, %73 ], [ %9, %72 ]
  %75 = phi ptr [ %83, %73 ], [ %9, %72 ]
  %76 = getelementptr inbounds i8, ptr %75, i64 1
  %77 = getelementptr inbounds i8, ptr %75, i64 2
  %78 = load i8, ptr %76, align 1, !tbaa !13
  %79 = getelementptr inbounds i8, ptr %74, i64 1
  store i8 %78, ptr %74, align 1, !tbaa !13
  %80 = getelementptr inbounds i8, ptr %75, i64 3
  %81 = load i8, ptr %77, align 1, !tbaa !13
  %82 = getelementptr inbounds i8, ptr %74, i64 2
  store i8 %81, ptr %79, align 1, !tbaa !13
  %83 = getelementptr inbounds i8, ptr %75, i64 4
  %84 = load i8, ptr %80, align 1, !tbaa !13
  %85 = getelementptr inbounds i8, ptr %74, i64 3
  store i8 %84, ptr %82, align 1, !tbaa !13
  %86 = icmp ult ptr %83, %27
  br i1 %86, label %73, label %87, !llvm.loop !397

87:                                               ; preds = %73
  %.lcssa = phi ptr [ %85, %73 ]
  %88 = ptrtoint ptr %.lcssa to i64
  br label %89

89:                                               ; preds = %87, %72
  %90 = phi i64 [ %88, %87 ], [ %29, %72 ]
  %91 = sub i64 %90, %29
  %92 = trunc i64 %91 to i32
  br label %93

93:                                               ; preds = %89, %63, %62, %45, %44, %37
  %94 = phi i32 [ %92, %89 ], [ %3, %37 ], [ %3, %62 ], [ %8, %44 ], [ %3, %63 ], [ %8, %45 ]
  %95 = sext i32 %94 to i64
  %96 = tail call i64 @fwrite(ptr noundef nonnull %9, i64 noundef 1, i64 noundef %95, ptr noundef %1) #62
  %97 = icmp ult i64 %96, %95
  br i1 %97, label %98, label %34

98:                                               ; preds = %93, %34, %19, %11
  %99 = phi i32 [ -23, %11 ], [ 0, %19 ], [ 0, %34 ], [ -12, %93 ]
  tail call void @gs_free(ptr noundef nonnull %9, i32 noundef %8, i32 noundef 1, ptr noundef nonnull @.str.624) #64
  br label %100

100:                                              ; preds = %98, %2
  %101 = phi i32 [ %99, %98 ], [ -25, %2 ]
  ret i32 %101
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @gs_font_dir_alloc(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr @gs_font_dir_alloc_limits(ptr noundef %0, ptr noundef %1, i32 noundef 10, i32 noundef 20000, i32 noundef 20, i32 noundef 500, i32 noundef 100) #62
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @gs_font_dir_alloc_limits(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) #0 {
  %8 = tail call ptr %0(i32 noundef 1, i32 noundef 1144, ptr noundef nonnull @.str.632) #64
  %9 = icmp eq ptr %8, null
  br i1 %9, label %43, label %10

10:                                               ; preds = %7
  %11 = tail call ptr %0(i32 noundef %3, i32 noundef 1, ptr noundef nonnull @.str.1.633) #64
  %12 = load i32, ptr @cached_fm_pair_sizeof, align 4, !tbaa !11
  %13 = tail call ptr %0(i32 noundef %4, i32 noundef %12, ptr noundef nonnull @.str.2.634) #64
  %14 = load i32, ptr @cached_char_sizeof, align 4, !tbaa !11
  %15 = tail call ptr %0(i32 noundef %5, i32 noundef %14, ptr noundef nonnull @.str.3.635) #64
  %16 = icmp eq ptr %11, null
  %17 = icmp eq ptr %13, null
  %18 = select i1 %16, i1 true, i1 %17
  %19 = icmp eq ptr %15, null
  %20 = select i1 %18, i1 true, i1 %19
  br i1 %20, label %21, label %30

21:                                               ; preds = %10
  br i1 %19, label %24, label %22

22:                                               ; preds = %21
  %23 = load i32, ptr @cached_char_sizeof, align 4, !tbaa !11
  tail call void %1(ptr noundef nonnull %15, i32 noundef %5, i32 noundef %23, ptr noundef nonnull @.str.3.635) #64
  br label %24

24:                                               ; preds = %22, %21
  br i1 %17, label %27, label %25

25:                                               ; preds = %24
  %26 = load i32, ptr @cached_fm_pair_sizeof, align 4, !tbaa !11
  tail call void %1(ptr noundef nonnull %13, i32 noundef %4, i32 noundef %26, ptr noundef nonnull @.str.2.634) #64
  br label %27

27:                                               ; preds = %25, %24
  br i1 %16, label %29, label %28

28:                                               ; preds = %27
  tail call void %1(ptr noundef nonnull %11, i32 noundef %3, i32 noundef 1, ptr noundef nonnull @.str.1.633) #64
  br label %29

29:                                               ; preds = %28, %27
  tail call void %1(ptr noundef nonnull %8, i32 noundef 1, i32 noundef 1144, ptr noundef nonnull @.str.632) #64
  br label %43

30:                                               ; preds = %10
  %31 = getelementptr inbounds i8, ptr %8, i64 16
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1144) %31, i8 0, i64 1128, i1 false)
  store ptr %0, ptr %8, align 8, !tbaa !398
  %32 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 1
  store ptr %1, ptr %32, align 8, !tbaa !400
  %33 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 5
  store i32 %2, ptr %33, align 4, !tbaa !401
  %34 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 7
  store i32 %3, ptr %34, align 4, !tbaa !402
  %35 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 9
  store i32 %4, ptr %35, align 4, !tbaa !403
  %36 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 11
  store i32 %5, ptr %36, align 4, !tbaa !404
  %37 = udiv i32 %6, 10
  %38 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 12
  store i32 %37, ptr %38, align 8, !tbaa !405
  %39 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 13
  store i32 %6, ptr %39, align 4, !tbaa !406
  %40 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 15
  store ptr %11, ptr %40, align 8, !tbaa !407
  %41 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 17
  store ptr %13, ptr %41, align 8, !tbaa !408
  %42 = getelementptr inbounds %struct.gs_font_dir_s, ptr %8, i64 0, i32 19
  store ptr %15, ptr %42, align 8, !tbaa !409
  br label %43

43:                                               ; preds = %30, %29, %7
  %44 = phi ptr [ null, %29 ], [ %8, %30 ], [ null, %7 ]
  ret ptr %44
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_makefont(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) #0 {
  %6 = alloca %struct.gs_matrix_s, align 8
  %7 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !410
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %6) #65
  store ptr null, ptr %4, align 8, !tbaa !7
  call void @gs_make_identity(ptr noundef nonnull %6) #64
  %9 = getelementptr inbounds %struct.gs_font_s, ptr %1, i64 0, i32 5
  %10 = call i32 @gs_matrix_multiply(ptr noundef nonnull %9, ptr noundef %2, ptr noundef nonnull %6) #64
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %96, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.gs_font_s, ptr %1, i64 0, i32 12
  %14 = load i64, ptr %13, align 8, !tbaa !262
  %15 = icmp ne i64 %14, -1
  %16 = icmp ne ptr %8, null
  %17 = select i1 %15, i1 %16, i1 false
  br i1 %17, label %18, label %56

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.gs_font_s, ptr %1, i64 0, i32 6
  %20 = load float, ptr %6, align 8
  %21 = getelementptr inbounds %struct.gs_matrix_s, ptr %6, i64 0, i32 2
  %22 = load float, ptr %21, align 8
  %23 = getelementptr inbounds %struct.gs_matrix_s, ptr %6, i64 0, i32 4
  %24 = load float, ptr %23, align 8
  %25 = getelementptr inbounds %struct.gs_matrix_s, ptr %6, i64 0, i32 6
  %26 = load float, ptr %25, align 8
  br label %27

27:                                               ; preds = %53, %18
  %28 = phi ptr [ %54, %53 ], [ %8, %18 ]
  %29 = getelementptr inbounds %struct.gs_font_s, ptr %28, i64 0, i32 12
  %30 = load i64, ptr %29, align 8, !tbaa !262
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %53

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.gs_font_s, ptr %28, i64 0, i32 6
  %34 = load i32, ptr %33, align 8, !tbaa !260
  %35 = load i32, ptr %19, align 8, !tbaa !260
  %36 = icmp eq i32 %34, %35
  br i1 %36, label %37, label %53

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.gs_font_s, ptr %28, i64 0, i32 5
  %39 = load float, ptr %38, align 8, !tbaa !411
  %40 = fcmp oeq float %39, %20
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.gs_font_s, ptr %28, i64 0, i32 5, i32 2
  %43 = load float, ptr %42, align 8, !tbaa !412
  %44 = fcmp oeq float %43, %22
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.gs_font_s, ptr %28, i64 0, i32 5, i32 4
  %47 = load float, ptr %46, align 8, !tbaa !413
  %48 = fcmp oeq float %47, %24
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.gs_font_s, ptr %28, i64 0, i32 5, i32 6
  %51 = load float, ptr %50, align 8, !tbaa !414
  %52 = fcmp oeq float %51, %26
  br i1 %52, label %93, label %53

53:                                               ; preds = %49, %45, %41, %37, %32, %27
  %54 = load ptr, ptr %28, align 8, !tbaa !415
  %55 = icmp eq ptr %54, null
  br i1 %55, label %56, label %27

56:                                               ; preds = %53, %12
  %57 = phi ptr [ null, %12 ], [ %28, %53 ]
  %58 = load ptr, ptr %0, align 8, !tbaa !398
  %59 = call ptr %58(i32 noundef 1, i32 noundef 184, ptr noundef nonnull @.str.4.638) #64
  %60 = icmp eq ptr %59, null
  br i1 %60, label %96, label %61

61:                                               ; preds = %56
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(184) %59, ptr noundef nonnull align 8 dereferenceable(184) %1, i64 184, i1 false), !tbaa.struct !416
  %62 = getelementptr inbounds %struct.gs_font_s, ptr %59, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %62, ptr noundef nonnull align 8 dereferenceable(96) %6, i64 96, i1 false), !tbaa.struct !163
  %63 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 4
  %64 = load i32, ptr %63, align 8, !tbaa !417
  %65 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 5
  %66 = load i32, ptr %65, align 4, !tbaa !401
  %67 = icmp eq i32 %64, %66
  br i1 %67, label %68, label %80

68:                                               ; preds = %61
  %69 = icmp eq ptr %57, null
  br i1 %69, label %70, label %76

70:                                               ; preds = %68
  %71 = load ptr, ptr %7, align 8, !tbaa !410
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi ptr [ %71, %70 ], [ %74, %72 ]
  %74 = load ptr, ptr %73, align 8, !tbaa !415
  %75 = icmp eq ptr %74, null
  br i1 %75, label %76, label %72, !llvm.loop !418

76:                                               ; preds = %72, %68
  %77 = phi ptr [ %57, %68 ], [ %73, %72 ]
  store ptr %77, ptr %4, align 8, !tbaa !7
  %78 = getelementptr inbounds %struct.gs_font_s, ptr %77, i64 0, i32 1
  %79 = load ptr, ptr %78, align 8, !tbaa !419
  store ptr null, ptr %79, align 8, !tbaa !415
  br label %82

80:                                               ; preds = %61
  %81 = add i32 %64, 1
  store i32 %81, ptr %63, align 8, !tbaa !417
  br label %82

82:                                               ; preds = %80, %76
  %83 = load ptr, ptr %7, align 8, !tbaa !410
  store ptr %83, ptr %59, align 8, !tbaa !415
  %84 = icmp eq ptr %83, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.gs_font_s, ptr %83, i64 0, i32 1
  store ptr %59, ptr %86, align 8, !tbaa !419
  br label %87

87:                                               ; preds = %85, %82
  %88 = getelementptr inbounds %struct.gs_font_s, ptr %59, i64 0, i32 1
  store ptr null, ptr %88, align 8, !tbaa !419
  store ptr %59, ptr %7, align 8, !tbaa !410
  %89 = getelementptr inbounds %struct.gs_font_s, ptr %1, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !258
  %91 = getelementptr inbounds %struct.gs_font_s, ptr %59, i64 0, i32 2
  store ptr %90, ptr %91, align 8, !tbaa !258
  %92 = getelementptr inbounds %struct.gs_font_s, ptr %59, i64 0, i32 3
  store ptr %0, ptr %92, align 8, !tbaa !259
  br label %93

93:                                               ; preds = %87, %49
  %94 = phi ptr [ %59, %87 ], [ %28, %49 ]
  %95 = phi i32 [ 1, %87 ], [ 0, %49 ]
  store ptr %94, ptr %3, align 8, !tbaa !7
  br label %96

96:                                               ; preds = %93, %56, %5
  %97 = phi i32 [ %10, %5 ], [ -25, %56 ], [ %95, %93 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %6) #65
  ret i32 %97
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gs_setfont(ptr nocapture noundef writeonly %0, ptr noundef %1) #45 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 16
  store ptr %1, ptr %3, align 8, !tbaa !303
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %4, align 8, !tbaa !302
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal ptr @gs_currentfont(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 16
  %3 = load ptr, ptr %2, align 8, !tbaa !303
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gs_cachestatus(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 6
  %4 = load i32, ptr %3, align 8, !tbaa !420
  store i32 %4, ptr %1, align 4, !tbaa !11
  %5 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 7
  %6 = load i32, ptr %5, align 4, !tbaa !402
  %7 = getelementptr inbounds i32, ptr %1, i64 1
  store i32 %6, ptr %7, align 4, !tbaa !11
  %8 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 8
  %9 = load i32, ptr %8, align 8, !tbaa !421
  %10 = getelementptr inbounds i32, ptr %1, i64 2
  store i32 %9, ptr %10, align 4, !tbaa !11
  %11 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 9
  %12 = load i32, ptr %11, align 4, !tbaa !403
  %13 = getelementptr inbounds i32, ptr %1, i64 3
  store i32 %12, ptr %13, align 4, !tbaa !11
  %14 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 10
  %15 = load i32, ptr %14, align 8, !tbaa !422
  %16 = getelementptr inbounds i32, ptr %1, i64 4
  store i32 %15, ptr %16, align 4, !tbaa !11
  %17 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 11
  %18 = load i32, ptr %17, align 4, !tbaa !404
  %19 = getelementptr inbounds i32, ptr %1, i64 5
  store i32 %18, ptr %19, align 4, !tbaa !11
  %20 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 13
  %21 = load i32, ptr %20, align 4, !tbaa !406
  %22 = getelementptr inbounds i32, ptr %1, i64 6
  store i32 %21, ptr %22, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gs_setcachelimit(ptr nocapture noundef writeonly %0, i32 noundef %1) #45 {
  %3 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 13
  store i32 %1, ptr %3, align 4, !tbaa !406
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gs_setcachelower(ptr nocapture noundef writeonly %0, i32 noundef %1) #45 {
  %3 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 12
  store i32 %1, ptr %3, align 8, !tbaa !405
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gs_setcacheupper(ptr nocapture noundef writeonly %0, i32 noundef %1) #45 {
  %3 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 13
  store i32 %1, ptr %3, align 4, !tbaa !406
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @gs_currentcachelower(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 12
  %3 = load i32, ptr %2, align 8, !tbaa !405
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @gs_currentcacheupper(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 4, !tbaa !406
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gs_no_build_char_proc(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2, i32 noundef %3, ptr nocapture noundef readnone %4) #10 {
  ret i32 1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_image_init(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr noundef %6) #0 {
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 19
  %9 = load i8, ptr %8, align 4, !tbaa !326
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %44

11:                                               ; preds = %7
  %12 = add i32 %4, -1
  %13 = icmp ult i32 %12, 8
  br i1 %13, label %14, label %44

14:                                               ; preds = %11
  %15 = trunc i32 %12 to i8
  %16 = lshr i8 -117, %15
  %17 = and i8 %16, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %44, label %19

19:                                               ; preds = %14
  %20 = sext i32 %12 to i64
  %21 = getelementptr inbounds [8 x i32], ptr @switch.table.gs_image_init, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4
  %23 = add i32 %5, 4
  %24 = icmp ult i32 %23, 9
  br i1 %24, label %25, label %44

25:                                               ; preds = %19
  %26 = trunc i32 %23 to i16
  %27 = lshr i16 419, %26
  %28 = and i16 %27, 1
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %44, label %30

30:                                               ; preds = %25
  %31 = sext i32 %23 to i64
  %32 = getelementptr inbounds [9 x i32], ptr @switch.table.gs_image_init.1, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4
  %34 = sext i32 %23 to i64
  %35 = getelementptr inbounds [9 x i32], ptr @switch.table.gs_image_init.2, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 22
  %38 = load ptr, ptr %37, align 8, !tbaa !338
  %39 = getelementptr inbounds %struct.device_s, ptr %38, i64 0, i32 3
  %40 = load i64, ptr %39, align 8, !tbaa !331
  %41 = getelementptr inbounds %struct.device_s, ptr %38, i64 0, i32 2
  %42 = load i64, ptr %41, align 8, !tbaa !330
  %43 = tail call i32 @image_init(ptr noundef %0, i32 noundef %2, i32 noundef %3, i32 noundef %22, i32 noundef %33, i32 noundef %36, ptr noundef %6, ptr noundef nonnull %1, i64 noundef %40, i64 noundef %42) #62, !range !263
  br label %44

44:                                               ; preds = %30, %25, %19, %14, %11, %7
  %45 = phi i32 [ %43, %30 ], [ -21, %7 ], [ -15, %11 ], [ -15, %19 ], [ -15, %14 ], [ -15, %25 ]
  ret i32 %45
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @image_init(ptr noundef writeonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr noundef %6, ptr noundef %7, i64 noundef %8, i64 noundef %9) #0 {
  %11 = alloca %struct.gs_matrix_s, align 8
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %11) #65
  %12 = add nsw i32 %1, 8
  %13 = mul nsw i32 %12, %4
  %14 = icmp slt i32 %1, 1
  %15 = icmp slt i32 %2, 0
  %16 = or i1 %14, %15
  br i1 %16, label %229, label %17

17:                                               ; preds = %10
  %18 = icmp eq i32 %2, 0
  br i1 %18, label %229, label %19

19:                                               ; preds = %17
  %20 = call i32 @gs_matrix_invert(ptr noundef %6, ptr noundef nonnull %11) #64
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %229, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 2
  %24 = call i32 @gs_matrix_multiply(ptr noundef nonnull %11, ptr noundef nonnull %23, ptr noundef nonnull %11) #64
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %229, label %26

26:                                               ; preds = %22
  %27 = call ptr @gs_malloc(i32 noundef 1, i32 noundef %13, ptr noundef nonnull @.str.659) #64
  %28 = icmp eq ptr %27, null
  br i1 %28, label %229, label %29

29:                                               ; preds = %26
  store i32 %1, ptr %0, align 8, !tbaa !423
  %30 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 1
  store i32 %2, ptr %30, align 4, !tbaa !425
  %31 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 2
  store i32 %3, ptr %31, align 8, !tbaa !426
  %32 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 3
  store i32 %4, ptr %32, align 4, !tbaa !427
  %33 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 4
  store i32 %5, ptr %33, align 8, !tbaa !428
  %34 = load float, ptr %11, align 8, !tbaa !267
  %35 = fmul float %34, 4.096000e+03
  %36 = fptosi float %35 to i64
  %37 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 5
  store i64 %36, ptr %37, align 8, !tbaa !429
  %38 = getelementptr inbounds %struct.gs_matrix_s, ptr %11, i64 0, i32 6
  %39 = load float, ptr %38, align 8, !tbaa !270
  %40 = fmul float %39, 4.096000e+03
  %41 = fptosi float %40 to i64
  %42 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 8
  store i64 %41, ptr %42, align 8, !tbaa !430
  %43 = getelementptr inbounds %struct.gs_matrix_s, ptr %11, i64 0, i32 2
  %44 = load i64, ptr %43, align 8
  %45 = getelementptr inbounds %struct.gs_matrix_s, ptr %11, i64 0, i32 4
  %46 = load i64, ptr %45, align 8
  %47 = or i64 %46, %44
  %48 = and i64 %47, 9223372036854775807
  %49 = icmp ne i64 %48, 0
  %50 = zext i1 %49 to i32
  %51 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 16
  store i32 %50, ptr %51, align 4, !tbaa !431
  %52 = trunc i64 %44 to i32
  %53 = bitcast i32 %52 to float
  %54 = trunc i64 %46 to i32
  %55 = bitcast i32 %54 to float
  %56 = fmul float %53, 4.096000e+03
  %57 = fptosi float %56 to i64
  %58 = fmul float %55, 4.096000e+03
  %59 = fptosi float %58 to i64
  %60 = select i1 %49, i64 %57, i64 0
  %61 = select i1 %49, i64 %59, i64 0
  %62 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 6
  store i64 %60, ptr %62, align 8
  %63 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 7
  store i64 %61, ptr %63, align 8
  %64 = getelementptr inbounds %struct.gs_matrix_s, ptr %11, i64 0, i32 8
  %65 = load float, ptr %64, align 8, !tbaa !271
  %66 = fmul float %65, 4.096000e+03
  %67 = fptosi float %66 to i64
  %68 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 22
  store i64 %67, ptr %68, align 8, !tbaa !432
  %69 = getelementptr inbounds %struct.gs_matrix_s, ptr %11, i64 0, i32 10
  %70 = load float, ptr %69, align 8, !tbaa !272
  %71 = fmul float %70, 4.096000e+03
  %72 = fptosi float %71 to i64
  %73 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 23
  store i64 %72, ptr %73, align 8, !tbaa !433
  %74 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 11
  store ptr %7, ptr %74, align 8, !tbaa !434
  %75 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 12
  store ptr %27, ptr %75, align 8, !tbaa !435
  %76 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 13
  store i32 %13, ptr %76, align 8, !tbaa !436
  %77 = zext i32 %1 to i64
  %78 = zext i32 %3 to i64
  %79 = shl i64 %77, %78
  %80 = sext i32 %4 to i64
  %81 = mul i64 %79, %80
  %82 = sext i32 %5 to i64
  %83 = udiv i64 %81, %82
  %84 = add i64 %83, 7
  %85 = lshr i64 %84, 3
  %86 = trunc i64 %85 to i32
  %87 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 14
  store i32 %86, ptr %87, align 4, !tbaa !437
  %88 = icmp eq i32 %4, 1
  br i1 %88, label %89, label %123

89:                                               ; preds = %29
  switch i32 %3, label %118 [
    i32 3, label %90
    i32 2, label %102
    i32 1, label %115
  ]

90:                                               ; preds = %89
  %91 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi i32 [ 64, %90 ], [ %100, %92 ]
  %94 = phi ptr [ %91, %90 ], [ %99, %92 ]
  %95 = getelementptr inbounds %struct.gx_device_color_s, ptr %94, i64 3, i32 2
  store i32 -1, ptr %95, align 8, !tbaa !334
  %96 = getelementptr inbounds %struct.gx_device_color_s, ptr %94, i64 2, i32 2
  store i32 -1, ptr %96, align 8, !tbaa !334
  %97 = getelementptr inbounds %struct.gx_device_color_s, ptr %94, i64 1, i32 2
  store i32 -1, ptr %97, align 8, !tbaa !334
  %98 = getelementptr inbounds %struct.gx_device_color_s, ptr %94, i64 0, i32 2
  store i32 -1, ptr %98, align 8, !tbaa !334
  %99 = getelementptr inbounds %struct.gx_device_color_s, ptr %94, i64 4
  %100 = add nsw i32 %93, -1
  %101 = icmp ugt i32 %93, 1
  br i1 %101, label %92, label %118, !llvm.loop !438

102:                                              ; preds = %89
  %103 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 238, i32 2
  store i32 -1, ptr %103, align 8, !tbaa !334
  %104 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 221, i32 2
  store i32 -1, ptr %104, align 8, !tbaa !334
  %105 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 204, i32 2
  store i32 -1, ptr %105, align 8, !tbaa !334
  %106 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 187, i32 2
  store i32 -1, ptr %106, align 8, !tbaa !334
  %107 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 153, i32 2
  store i32 -1, ptr %107, align 8, !tbaa !334
  %108 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 136, i32 2
  store i32 -1, ptr %108, align 8, !tbaa !334
  %109 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 119, i32 2
  store i32 -1, ptr %109, align 8, !tbaa !334
  %110 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 102, i32 2
  store i32 -1, ptr %110, align 8, !tbaa !334
  %111 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 68, i32 2
  store i32 -1, ptr %111, align 8, !tbaa !334
  %112 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 51, i32 2
  store i32 -1, ptr %112, align 8, !tbaa !334
  %113 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 34, i32 2
  store i32 -1, ptr %113, align 8, !tbaa !334
  %114 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 17, i32 2
  store i32 -1, ptr %114, align 8, !tbaa !334
  br label %115

115:                                              ; preds = %102, %89
  %116 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 170, i32 2
  store i32 -1, ptr %116, align 8, !tbaa !334
  %117 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 85, i32 2
  store i32 -1, ptr %117, align 8, !tbaa !334
  br label %118

118:                                              ; preds = %115, %92, %89
  %119 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25
  store i64 %8, ptr %119, align 8, !tbaa !439
  %120 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 0, i32 2
  store i32 0, ptr %120, align 8, !tbaa !334
  %121 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 255
  store i64 %9, ptr %121, align 8, !tbaa !439
  %122 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 255, i32 2
  store i32 0, ptr %122, align 8, !tbaa !334
  br label %123

123:                                              ; preds = %118, %29
  %124 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 8
  %125 = load ptr, ptr %124, align 8, !tbaa !305
  %126 = getelementptr inbounds %struct.gx_path_s, ptr %125, i64 0, i32 3
  %127 = load i64, ptr %126, align 8, !tbaa !440
  %128 = getelementptr inbounds %struct.gx_path_s, ptr %125, i64 0, i32 3, i32 0, i32 1
  %129 = load i64, ptr %128, align 8, !tbaa !441
  %130 = getelementptr inbounds %struct.gx_path_s, ptr %125, i64 0, i32 3, i32 1
  %131 = load i64, ptr %130, align 8, !tbaa !442
  %132 = getelementptr inbounds %struct.gx_path_s, ptr %125, i64 0, i32 3, i32 1, i32 1
  %133 = load i64, ptr %132, align 8, !tbaa !443
  %134 = mul nsw i64 %36, %77
  %135 = zext i32 %2 to i64
  %136 = mul nsw i64 %41, %135
  br i1 %49, label %137, label %146

137:                                              ; preds = %123
  %138 = fmul float %55, 4.096000e+03
  %139 = fptosi float %138 to i64
  %140 = mul nsw i64 %139, %135
  %141 = add nsw i64 %140, %134
  %142 = fmul float %53, 4.096000e+03
  %143 = fptosi float %142 to i64
  %144 = mul nsw i64 %143, %77
  %145 = add nsw i64 %144, %136
  br label %146

146:                                              ; preds = %137, %123
  %147 = phi i64 [ %141, %137 ], [ %134, %123 ]
  %148 = phi i64 [ %145, %137 ], [ %136, %123 ]
  %149 = icmp slt i64 %147, 0
  br i1 %149, label %150, label %155

150:                                              ; preds = %146
  %151 = add nsw i64 %147, %67
  %152 = icmp slt i64 %151, %127
  %153 = icmp slt i64 %131, %67
  %154 = select i1 %152, i1 true, i1 %153
  br i1 %154, label %189, label %160

155:                                              ; preds = %146
  %156 = icmp sgt i64 %127, %67
  %157 = add nsw i64 %147, %67
  %158 = icmp sgt i64 %157, %131
  %159 = select i1 %156, i1 true, i1 %158
  br i1 %159, label %189, label %160

160:                                              ; preds = %155, %150
  %161 = icmp slt i64 %148, 0
  br i1 %161, label %162, label %167

162:                                              ; preds = %160
  %163 = add nsw i64 %148, %72
  %164 = icmp sge i64 %163, %129
  %165 = icmp sge i64 %133, %72
  %166 = select i1 %164, i1 %165, i1 false
  br label %173

167:                                              ; preds = %160
  %168 = icmp sgt i64 %129, %72
  %169 = add nsw i64 %148, %72
  %170 = icmp sle i64 %169, %133
  br i1 %168, label %171, label %173

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 15
  store i32 0, ptr %172, align 8, !tbaa !444
  br label %191

173:                                              ; preds = %167, %162
  %174 = phi i1 [ %166, %162 ], [ %170, %167 ]
  %175 = zext i1 %174 to i32
  %176 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 15
  store i32 %175, ptr %176, align 8, !tbaa !444
  %177 = xor i1 %174, true
  %178 = or i1 %49, %177
  br i1 %178, label %191, label %179

179:                                              ; preds = %173
  %180 = icmp eq i64 %8, -1
  %181 = icmp eq i64 %9, -1
  %182 = or i1 %180, %181
  br i1 %182, label %183, label %191

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 14
  %185 = load ptr, ptr %184, align 8, !tbaa !333
  %186 = getelementptr inbounds %struct.gx_device_color_s, ptr %185, i64 0, i32 2
  %187 = load i32, ptr %186, align 8, !tbaa !334
  %188 = icmp ne i32 %187, 0
  br label %191

189:                                              ; preds = %155, %150
  %190 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 15
  store i32 0, ptr %190, align 8, !tbaa !444
  br label %191

191:                                              ; preds = %189, %183, %179, %173, %171
  %192 = phi i1 [ true, %173 ], [ %188, %183 ], [ false, %179 ], [ true, %189 ], [ true, %171 ]
  %193 = zext i1 %192 to i32
  %194 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 17
  store i32 %193, ptr %194, align 8, !tbaa !445
  %195 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 20
  %196 = load i8, ptr %195, align 1, !tbaa !312
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %198, label %213

198:                                              ; preds = %191
  %199 = icmp sgt i32 %4, 1
  br i1 %199, label %213, label %200

200:                                              ; preds = %198
  %201 = icmp ne i32 %3, 0
  %202 = select i1 %201, i1 true, i1 %192
  br i1 %202, label %213, label %203

203:                                              ; preds = %200
  %204 = add i64 %134, 2048
  %205 = add i64 %204, %67
  %206 = ashr i64 %205, 12
  %207 = ashr i64 %67, 12
  %208 = sub nsw i64 %206, %207
  %209 = icmp eq i64 %208, %77
  br i1 %209, label %210, label %213

210:                                              ; preds = %203
  %211 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 10
  store ptr @image_render_direct, ptr %211, align 8, !tbaa !446
  %212 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 9
  store ptr @image_unpack_3, ptr %212, align 8, !tbaa !447
  br label %225

213:                                              ; preds = %203, %200, %198, %191
  %214 = phi ptr [ @image_render_mono, %203 ], [ @image_render_mono, %200 ], [ @image_render_color, %198 ], [ @image_render_skip, %191 ]
  %215 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 10
  store ptr %214, ptr %215, align 8, !tbaa !446
  %216 = icmp eq i32 %5, 1
  %217 = sext i32 %3 to i64
  %218 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 9
  br i1 %216, label %222, label %219

219:                                              ; preds = %213
  %220 = getelementptr inbounds [4 x ptr], ptr @image_init.spread_procs, i64 0, i64 %217
  %221 = load ptr, ptr %220, align 8, !tbaa !7
  store ptr %221, ptr %218, align 8, !tbaa !447
  br label %225

222:                                              ; preds = %213
  %223 = getelementptr inbounds [4 x ptr], ptr @image_init.procs, i64 0, i64 %217
  %224 = load ptr, ptr %223, align 8, !tbaa !7
  store ptr %224, ptr %218, align 8, !tbaa !447
  br label %225

225:                                              ; preds = %222, %219, %210
  %226 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 19
  store i32 0, ptr %226, align 8, !tbaa !448
  %227 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 21
  store i32 0, ptr %227, align 8, !tbaa !449
  %228 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 24
  store i32 0, ptr %228, align 8, !tbaa !450
  br label %229

229:                                              ; preds = %225, %26, %22, %19, %17, %10
  %230 = phi i32 [ 0, %225 ], [ -23, %10 ], [ 0, %17 ], [ %20, %19 ], [ %24, %22 ], [ -25, %26 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %11) #65
  ret i32 %230
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @image_render_direct(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 22
  %6 = load i64, ptr %5, align 8, !tbaa !432
  %7 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 23
  %8 = load i64, ptr %7, align 8, !tbaa !433
  %9 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 8
  %10 = load i64, ptr %9, align 8, !tbaa !430
  %11 = add nsw i64 %10, %8
  %12 = lshr i64 %6, 12
  %13 = trunc i64 %12 to i32
  %14 = lshr i64 %8, 12
  %15 = trunc i64 %14 to i32
  %16 = lshr i64 %11, 12
  %17 = trunc i64 %16 to i32
  %18 = sub nsw i32 %17, %15
  %19 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 11
  %20 = load ptr, ptr %19, align 8, !tbaa !434
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %20, i64 0, i32 22
  %22 = load ptr, ptr %21, align 8, !tbaa !338
  %23 = load ptr, ptr %22, align 8, !tbaa !328
  %24 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !25
  %26 = getelementptr inbounds %struct.gx_device_procs_s, ptr %25, i64 0, i32 9
  %27 = load ptr, ptr %26, align 8, !tbaa !451
  %28 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25
  %29 = load i64, ptr %28, align 8, !tbaa !439
  %30 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 255
  %31 = load i64, ptr %30, align 8, !tbaa !439
  %32 = icmp eq i32 %18, 1
  br i1 %32, label %33, label %37

33:                                               ; preds = %4
  %34 = add i32 %2, 7
  %35 = lshr i32 %34, 3
  %36 = tail call i32 %27(ptr noundef nonnull %23, ptr noundef %1, i32 noundef 0, i32 noundef %35, i32 noundef %13, i32 noundef %15, i32 noundef %2, i32 noundef %3, i64 noundef %29, i64 noundef %31) #64
  br label %52

37:                                               ; preds = %4
  %38 = icmp slt i32 %18, 0
  %39 = select i1 %38, i32 %17, i32 %15
  %40 = icmp eq i32 %17, %15
  br i1 %40, label %52, label %41

41:                                               ; preds = %37
  %42 = tail call i32 @llvm.abs.i32(i32 %18, i1 true)
  %43 = add i32 %2, 7
  %44 = lshr i32 %43, 3
  %45 = tail call i32 @llvm.umax.i32(i32 %42, i32 1)
  br label %46

46:                                               ; preds = %46, %41
  %47 = phi i32 [ 0, %41 ], [ %50, %46 ]
  %48 = add nsw i32 %47, %39
  %49 = tail call i32 %27(ptr noundef %23, ptr noundef %1, i32 noundef 0, i32 noundef %44, i32 noundef %13, i32 noundef %48, i32 noundef %2, i32 noundef 1, i64 noundef %29, i64 noundef %31) #64
  %50 = add nuw i32 %47, 1
  %51 = icmp eq i32 %50, %45
  br i1 %51, label %52, label %46, !llvm.loop !452

52:                                               ; preds = %46, %37, %33
  %53 = phi i32 [ %3, %33 ], [ 1, %37 ], [ 1, %46 ]
  ret i32 %53
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @image_unpack_3(ptr nocapture readnone %0, ptr noundef writeonly %1, ptr noundef readonly %2, i32 noundef %3) #33 {
  %5 = icmp eq ptr %2, %1
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr align 1 %2, i64 %7, i1 false)
  br label %8

8:                                                ; preds = %6, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @image_render_mono(ptr noundef %0, ptr nocapture noundef %1, i32 noundef %2, i32 %3) #0 {
  %5 = alloca %struct.gs_color_s, align 8
  %6 = alloca %struct.gx_path_s, align 8
  %7 = alloca %struct.gs_fixed_rect_s, align 8
  %8 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25
  %9 = load i64, ptr %8, align 8, !tbaa !439
  %10 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 255
  %11 = load i64, ptr %10, align 8, !tbaa !439
  %12 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 11
  %13 = load ptr, ptr %12, align 8, !tbaa !434
  %14 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 5
  %15 = load i64, ptr %14, align 8, !tbaa !429
  %16 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 6
  %17 = load i64, ptr %16, align 8, !tbaa !453
  %18 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 7
  %19 = load i64, ptr %18, align 8, !tbaa !454
  %20 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 8
  %21 = load i64, ptr %20, align 8, !tbaa !430
  %22 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 16
  %23 = load i32, ptr %22, align 4, !tbaa !431
  %24 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 22
  %25 = load i64, ptr %24, align 8, !tbaa !432
  %26 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 23
  %27 = load i64, ptr %26, align 8, !tbaa !433
  call void @llvm.lifetime.start.p0(i64 10, ptr nonnull %5) #65
  %28 = getelementptr inbounds %struct.gs_state_s, ptr %13, i64 0, i32 14
  %29 = load ptr, ptr %28, align 8, !tbaa !333
  %30 = load i8, ptr %1, align 1, !tbaa !13
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds %struct.gs_state_s, ptr %13, i64 0, i32 22
  %33 = load ptr, ptr %32, align 8, !tbaa !338
  %34 = load ptr, ptr %33, align 8, !tbaa !328
  %35 = getelementptr inbounds %struct.gx_device_s, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !25
  %37 = getelementptr inbounds %struct.gx_device_procs_s, ptr %36, i64 0, i32 7
  %38 = load ptr, ptr %37, align 8, !tbaa !455
  %39 = getelementptr inbounds %struct.gs_state_s, ptr %13, i64 0, i32 8
  %40 = load ptr, ptr %39, align 8, !tbaa !305
  %41 = getelementptr inbounds %struct.gx_path_s, ptr %40, i64 0, i32 1
  %42 = load i64, ptr %41, align 8, !tbaa.struct !456
  %43 = getelementptr inbounds %struct.gx_path_s, ptr %40, i64 0, i32 1, i32 0, i32 1
  %44 = load i64, ptr %43, align 8, !tbaa.struct !457
  %45 = getelementptr inbounds %struct.gx_path_s, ptr %40, i64 0, i32 1, i32 1
  %46 = load i64, ptr %45, align 8, !tbaa.struct !310
  %47 = getelementptr inbounds %struct.gx_path_s, ptr %40, i64 0, i32 1, i32 1, i32 1
  %48 = load i64, ptr %47, align 8, !tbaa.struct !458
  %49 = icmp eq i32 %23, 0
  br i1 %49, label %50, label %77

50:                                               ; preds = %4
  %51 = add i64 %27, 2048
  %52 = add i64 %51, %21
  %53 = and i64 %52, -4096
  %54 = and i64 %51, -4096
  %55 = lshr i64 %51, 12
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %52, 12
  %58 = trunc i64 %57 to i32
  %59 = sub nsw i32 %58, %56
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %50
  %62 = icmp slt i32 %59, 0
  br i1 %62, label %63, label %264

63:                                               ; preds = %61
  %64 = sub nsw i32 0, %59
  br label %65

65:                                               ; preds = %63, %50
  %66 = phi i32 [ %64, %63 ], [ %59, %50 ]
  %67 = phi i32 [ %59, %63 ], [ 0, %50 ]
  %68 = icmp sgt i64 %21, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %65
  %70 = icmp slt i64 %54, %48
  %71 = icmp sgt i64 %53, %44
  %72 = select i1 %70, i1 %71, i1 false
  br i1 %72, label %77, label %264

73:                                               ; preds = %65
  %74 = icmp slt i64 %53, %48
  %75 = icmp sgt i64 %54, %44
  %76 = select i1 %74, i1 %75, i1 false
  br i1 %76, label %77, label %264

77:                                               ; preds = %73, %69, %4
  %78 = phi i32 [ undef, %4 ], [ %66, %69 ], [ %66, %73 ]
  %79 = phi i32 [ undef, %4 ], [ %67, %69 ], [ %67, %73 ]
  %80 = phi i32 [ undef, %4 ], [ %56, %69 ], [ %56, %73 ]
  %81 = phi i64 [ undef, %4 ], [ %53, %69 ], [ %53, %73 ]
  %82 = phi i64 [ %27, %4 ], [ %54, %69 ], [ %54, %73 ]
  %83 = add i32 %2, -1
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i8, ptr %1, i64 %84
  %86 = load i8, ptr %85, align 1, !tbaa !13
  %87 = xor i8 %86, -1
  %88 = zext i32 %2 to i64
  %89 = getelementptr inbounds i8, ptr %1, i64 %88
  store i8 %87, ptr %89, align 1, !tbaa !13
  %90 = getelementptr inbounds %struct.gs_color_s, ptr %5, i64 0, i32 5
  store i8 1, ptr %90, align 1, !tbaa !342
  %91 = getelementptr inbounds %struct.gs_color_s, ptr %5, i64 0, i32 4
  store i8 1, ptr %91, align 8, !tbaa !343
  %92 = icmp sgt i32 %2, -1
  br i1 %92, label %93, label %264

93:                                               ; preds = %77
  %94 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 17
  %95 = icmp eq i64 %11, -1
  %96 = icmp eq i64 %9, -1
  %97 = getelementptr inbounds %struct.gs_state_s, ptr %13, i64 0, i32 1
  %98 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %7, i64 0, i32 1
  %99 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %7, i64 0, i32 1, i32 1
  %100 = getelementptr inbounds %struct.timeval, ptr %7, i64 0, i32 1
  %101 = icmp sgt i64 %15, -1
  %102 = add nsw i32 %80, %79
  br label %103

103:                                              ; preds = %255, %93
  %104 = phi i32 [ %2, %93 ], [ %113, %255 ]
  %105 = phi i64 [ %82, %93 ], [ %262, %255 ]
  %106 = phi i32 [ -2, %93 ], [ %260, %255 ]
  %107 = phi i32 [ %31, %93 ], [ %259, %255 ]
  %108 = phi i64 [ %27, %93 ], [ %258, %255 ]
  %109 = phi i64 [ %25, %93 ], [ %257, %255 ]
  %110 = phi ptr [ %1, %93 ], [ %114, %255 ]
  %111 = phi i64 [ %25, %93 ], [ %261, %255 ]
  %112 = phi ptr [ %29, %93 ], [ %256, %255 ]
  %113 = add nsw i32 %104, -1
  %114 = getelementptr inbounds i8, ptr %110, i64 1
  %115 = load i8, ptr %110, align 1, !tbaa !13
  %116 = zext i8 %115 to i32
  %117 = icmp eq i32 %107, %116
  br i1 %117, label %255, label %118

118:                                              ; preds = %103
  %119 = load i32, ptr %94, align 8, !tbaa !445
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %208, label %121

121:                                              ; preds = %118
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %6) #65
  %122 = icmp eq i32 %107, %106
  br i1 %122, label %143, label %123

123:                                              ; preds = %121
  %124 = icmp eq i32 %107, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %123
  br i1 %96, label %203, label %129

126:                                              ; preds = %123
  %127 = icmp eq i32 %107, 255
  %128 = select i1 %127, i1 %95, i1 false
  br i1 %128, label %203, label %129

129:                                              ; preds = %126, %125
  %130 = zext i32 %107 to i64
  %131 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 %130
  %132 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 %130, i32 2
  %133 = load i32, ptr %132, align 8, !tbaa !334
  %134 = icmp slt i32 %133, 0
  br i1 %134, label %135, label %141

135:                                              ; preds = %129
  %136 = trunc i32 %107 to i16
  %137 = mul nuw i16 %136, 257
  %138 = insertelement <4 x i16> poison, i16 %137, i64 0
  %139 = shufflevector <4 x i16> %138, <4 x i16> poison, <4 x i32> zeroinitializer
  store <4 x i16> %139, ptr %5, align 8, !tbaa !102
  %140 = call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef nonnull %5, ptr noundef nonnull %131, ptr noundef %13) #64
  br label %143

141:                                              ; preds = %129
  %142 = call i32 (ptr, ptr, ...) @gx_color_load(ptr noundef nonnull %131, ptr noundef %13) #64
  br label %143

143:                                              ; preds = %141, %135, %121
  %144 = phi ptr [ %131, %135 ], [ %131, %141 ], [ %112, %121 ]
  %145 = phi i32 [ %107, %135 ], [ %107, %141 ], [ %106, %121 ]
  br i1 %49, label %146, label %164

146:                                              ; preds = %143
  %147 = add nsw i64 %111, 2048
  %148 = and i64 %147, -4096
  %149 = add nsw i64 %109, 2048
  %150 = and i64 %149, -4096
  %151 = icmp eq i64 %150, %148
  br i1 %151, label %203, label %152

152:                                              ; preds = %146
  br i1 %101, label %153, label %157

153:                                              ; preds = %152
  %154 = icmp slt i64 %150, %46
  %155 = icmp sgt i64 %148, %42
  %156 = select i1 %154, i1 %155, i1 false
  br i1 %156, label %161, label %203

157:                                              ; preds = %152
  %158 = icmp slt i64 %148, %46
  %159 = icmp sgt i64 %150, %42
  %160 = select i1 %158, i1 %159, i1 false
  br i1 %160, label %161, label %203

161:                                              ; preds = %157, %153
  call void @gx_path_init(ptr noundef nonnull %6, ptr noundef nonnull %97) #64
  %162 = call i32 @gx_path_add_pgram(ptr noundef nonnull %6, i64 noundef %150, i64 noundef %105, i64 noundef %148, i64 noundef %105, i64 noundef %148, i64 noundef %81) #64
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %206, label %200

164:                                              ; preds = %143
  call void @gx_path_init(ptr noundef nonnull %6, ptr noundef nonnull %97) #64
  %165 = add nsw i64 %111, %19
  %166 = add nsw i64 %105, %21
  %167 = call i32 @gx_path_add_pgram(ptr noundef nonnull %6, i64 noundef %109, i64 noundef %108, i64 noundef %111, i64 noundef %105, i64 noundef %165, i64 noundef %166) #64
  %168 = icmp slt i32 %167, 0
  br i1 %168, label %206, label %169

169:                                              ; preds = %164
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #65
  %170 = call i32 @gx_path_bbox(ptr noundef nonnull %6, ptr noundef nonnull %7) #64
  %171 = load i64, ptr %98, align 8, !tbaa !459
  %172 = icmp sgt i64 %171, %42
  br i1 %172, label %173, label %198

173:                                              ; preds = %169
  %174 = load i64, ptr %7, align 8, !tbaa !460
  %175 = icmp slt i64 %174, %46
  br i1 %175, label %176, label %198

176:                                              ; preds = %173
  %177 = add nsw i64 %174, 2048
  %178 = lshr i64 %177, 12
  %179 = trunc i64 %178 to i32
  %180 = add nsw i64 %171, 2048
  %181 = lshr i64 %180, 12
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %179, %182
  br i1 %183, label %198, label %184

184:                                              ; preds = %176
  %185 = load i64, ptr %99, align 8, !tbaa !461
  %186 = icmp sgt i64 %185, %44
  br i1 %186, label %187, label %198

187:                                              ; preds = %184
  %188 = load i64, ptr %100, align 8, !tbaa !462
  %189 = icmp slt i64 %188, %48
  br i1 %189, label %190, label %198

190:                                              ; preds = %187
  %191 = add nsw i64 %188, 2048
  %192 = lshr i64 %191, 12
  %193 = trunc i64 %192 to i32
  %194 = add nsw i64 %185, 2048
  %195 = lshr i64 %194, 12
  %196 = trunc i64 %195 to i32
  %197 = icmp eq i32 %193, %196
  br i1 %197, label %198, label %199

198:                                              ; preds = %190, %187, %184, %176, %173, %169
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #65
  br label %202

199:                                              ; preds = %190
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #65
  br label %200

200:                                              ; preds = %199, %161
  %201 = call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef nonnull %6, ptr noundef %144, ptr noundef %13, i32 noundef -1, i64 noundef 0) #64
  br label %202

202:                                              ; preds = %200, %198
  call void @gx_path_release(ptr noundef nonnull %6) #64
  br label %203

203:                                              ; preds = %202, %157, %153, %146, %126, %125
  %204 = phi ptr [ %112, %126 ], [ %144, %202 ], [ %112, %125 ], [ %144, %146 ], [ %144, %153 ], [ %144, %157 ]
  %205 = phi i32 [ 255, %126 ], [ %145, %202 ], [ 0, %125 ], [ %145, %146 ], [ %145, %153 ], [ %145, %157 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #65
  br label %250

206:                                              ; preds = %164, %161
  %207 = phi i32 [ %167, %164 ], [ %162, %161 ]
  call void @gx_path_release(ptr noundef nonnull %6) #64
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #65
  br label %264

208:                                              ; preds = %118
  %209 = add nsw i64 %109, 2048
  %210 = lshr i64 %209, 12
  %211 = trunc i64 %210 to i32
  %212 = add nsw i64 %111, 2048
  %213 = lshr i64 %212, 12
  %214 = trunc i64 %213 to i32
  %215 = sub nsw i32 %214, %211
  %216 = icmp slt i32 %215, 1
  br i1 %216, label %217, label %221

217:                                              ; preds = %208
  %218 = icmp eq i32 %215, 0
  br i1 %218, label %250, label %219

219:                                              ; preds = %217
  %220 = sub nsw i32 0, %215
  br label %221

221:                                              ; preds = %219, %208
  %222 = phi i32 [ %214, %219 ], [ %211, %208 ]
  %223 = phi i32 [ %220, %219 ], [ %215, %208 ]
  switch i32 %107, label %230 [
    i32 0, label %225
    i32 255, label %224
  ]

224:                                              ; preds = %221
  br label %225

225:                                              ; preds = %224, %221
  %226 = phi i64 [ %11, %224 ], [ %9, %221 ]
  %227 = icmp eq i64 %226, -1
  br i1 %227, label %250, label %228

228:                                              ; preds = %225
  %229 = call i32 %38(ptr noundef %34, i32 noundef %222, i32 noundef %102, i32 noundef %223, i32 noundef %78, i64 noundef %226) #64
  br label %250

230:                                              ; preds = %221
  %231 = icmp eq i32 %107, %106
  br i1 %231, label %246, label %232

232:                                              ; preds = %230
  %233 = zext i32 %107 to i64
  %234 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 %233
  %235 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 25, i64 %233, i32 2
  %236 = load i32, ptr %235, align 8, !tbaa !334
  %237 = icmp slt i32 %236, 0
  br i1 %237, label %238, label %244

238:                                              ; preds = %232
  %239 = trunc i32 %107 to i16
  %240 = mul nuw i16 %239, 257
  %241 = insertelement <4 x i16> poison, i16 %240, i64 0
  %242 = shufflevector <4 x i16> %241, <4 x i16> poison, <4 x i32> zeroinitializer
  store <4 x i16> %242, ptr %5, align 8, !tbaa !102
  %243 = call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef nonnull %5, ptr noundef nonnull %234, ptr noundef %13) #64
  br label %246

244:                                              ; preds = %232
  %245 = call i32 (ptr, ptr, ...) @gx_color_load(ptr noundef nonnull %234, ptr noundef %13) #64
  br label %246

246:                                              ; preds = %244, %238, %230
  %247 = phi ptr [ %112, %230 ], [ %234, %244 ], [ %234, %238 ]
  %248 = phi i32 [ %106, %230 ], [ %107, %244 ], [ %107, %238 ]
  %249 = call i32 (i32, i32, i32, i32, ptr, ptr, ...) @gz_fill_rectangle(i32 noundef %222, i32 noundef %102, i32 noundef %223, i32 noundef %78, ptr noundef %247, ptr noundef %13) #64
  br label %250

250:                                              ; preds = %246, %228, %225, %217, %203
  %251 = phi ptr [ %112, %217 ], [ %247, %246 ], [ %112, %228 ], [ %112, %225 ], [ %204, %203 ]
  %252 = phi i32 [ %106, %217 ], [ %248, %246 ], [ %106, %228 ], [ %106, %225 ], [ %205, %203 ]
  %253 = load i8, ptr %110, align 1, !tbaa !13
  %254 = zext i8 %253 to i32
  br label %255

255:                                              ; preds = %250, %103
  %256 = phi ptr [ %251, %250 ], [ %112, %103 ]
  %257 = phi i64 [ %111, %250 ], [ %109, %103 ]
  %258 = phi i64 [ %105, %250 ], [ %108, %103 ]
  %259 = phi i32 [ %254, %250 ], [ %107, %103 ]
  %260 = phi i32 [ %252, %250 ], [ %106, %103 ]
  %261 = add nsw i64 %111, %15
  %262 = add nsw i64 %105, %17
  %263 = icmp eq i32 %104, 0
  br i1 %263, label %264, label %103, !llvm.loop !463

264:                                              ; preds = %255, %206, %77, %73, %69, %61
  %265 = phi i32 [ %207, %206 ], [ 1, %61 ], [ 1, %69 ], [ 1, %73 ], [ 1, %77 ], [ 1, %255 ]
  call void @llvm.lifetime.end.p0(i64 10, ptr nonnull %5) #65
  ret i32 %265
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @image_render_color(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, i32 %3) #0 {
  %5 = alloca %struct.gs_color_s, align 2
  %6 = alloca %struct.gx_device_color_s, align 8
  %7 = alloca %struct.gx_device_color_s, align 8
  %8 = alloca %struct.gx_path_s, align 8
  %9 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 11
  %10 = load ptr, ptr %9, align 8, !tbaa !434
  %11 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 5
  %12 = load i64, ptr %11, align 8, !tbaa !429
  %13 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 6
  %14 = load i64, ptr %13, align 8, !tbaa !453
  %15 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 7
  %16 = load i64, ptr %15, align 8, !tbaa !454
  %17 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 8
  %18 = load i64, ptr %17, align 8, !tbaa !430
  %19 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 16
  %20 = load i32, ptr %19, align 4, !tbaa !431
  %21 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 22
  %22 = load i64, ptr %21, align 8, !tbaa !432
  %23 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 23
  %24 = load i64, ptr %23, align 8, !tbaa !433
  call void @llvm.lifetime.start.p0(i64 10, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #65
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #65
  %25 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 3
  %26 = load i32, ptr %25, align 4, !tbaa !427
  %27 = zext i32 %2 to i64
  %28 = getelementptr inbounds i8, ptr %1, i64 %27
  %29 = sub nsw i32 0, %26
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, ptr %28, i64 %30
  %32 = load i8, ptr %31, align 1, !tbaa !13
  %33 = xor i8 %32, -1
  store i8 %33, ptr %28, align 1, !tbaa !13
  %34 = icmp eq i32 %20, 0
  br i1 %34, label %35, label %45

35:                                               ; preds = %4
  %36 = add i64 %24, 2048
  %37 = lshr i64 %36, 12
  %38 = trunc i64 %37 to i32
  %39 = add i64 %36, %18
  %40 = lshr i64 %39, 12
  %41 = trunc i64 %40 to i32
  %42 = sub nsw i32 %41, %38
  %43 = tail call i32 @llvm.abs.i32(i32 %42, i1 true)
  %44 = tail call i32 @llvm.smin.i32(i32 %42, i32 0)
  br label %45

45:                                               ; preds = %35, %4
  %46 = phi i32 [ undef, %4 ], [ %43, %35 ]
  %47 = phi i32 [ undef, %4 ], [ %44, %35 ]
  %48 = phi i32 [ undef, %4 ], [ %38, %35 ]
  %49 = getelementptr inbounds %struct.gs_color_s, ptr %5, i64 0, i32 2
  store i16 0, ptr %49, align 2, !tbaa !160
  %50 = getelementptr inbounds %struct.gs_color_s, ptr %5, i64 0, i32 1
  store i16 0, ptr %50, align 2, !tbaa !159
  store i16 0, ptr %5, align 2, !tbaa !157
  %51 = call i32 (ptr, ...) @gx_color_from_rgb(ptr noundef nonnull %5) #64
  %52 = call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef %10) #64
  %53 = icmp eq i32 %26, 4
  %54 = getelementptr inbounds %struct.gx_device_color_s, ptr %6, i64 0, i32 2
  %55 = getelementptr inbounds %struct.gx_device_color_s, ptr %7, i64 0, i32 2
  %56 = getelementptr inbounds %struct.gx_device_color_s, ptr %6, i64 0, i32 1
  %57 = getelementptr inbounds %struct.gx_device_color_s, ptr %7, i64 0, i32 1
  %58 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 17
  %59 = getelementptr inbounds %struct.gs_state_s, ptr %10, i64 0, i32 1
  %60 = add nsw i32 %48, %47
  br label %61

61:                                               ; preds = %167, %45
  %62 = phi i64 [ %24, %45 ], [ %174, %167 ]
  %63 = phi ptr [ %6, %45 ], [ %172, %167 ]
  %64 = phi ptr [ %7, %45 ], [ %171, %167 ]
  %65 = phi i64 [ 0, %45 ], [ %170, %167 ]
  %66 = phi i64 [ %24, %45 ], [ %169, %167 ]
  %67 = phi i64 [ %22, %45 ], [ %168, %167 ]
  %68 = phi ptr [ %1, %45 ], [ %109, %167 ]
  %69 = phi i64 [ %22, %45 ], [ %173, %167 ]
  br i1 %53, label %70, label %98

70:                                               ; preds = %61
  %71 = getelementptr inbounds i8, ptr %68, i64 3
  %72 = load i8, ptr %71, align 1, !tbaa !13
  %73 = xor i8 %72, -1
  %74 = zext i8 %73 to i32
  %75 = load i8, ptr %68, align 1, !tbaa !13
  %76 = xor i8 %75, -1
  %77 = zext i8 %76 to i32
  %78 = mul nuw nsw i32 %77, %74
  %79 = trunc i32 %78 to i16
  %80 = udiv i16 %79, 255
  %81 = trunc i16 %80 to i8
  %82 = getelementptr inbounds i8, ptr %68, i64 1
  %83 = load i8, ptr %82, align 1, !tbaa !13
  %84 = xor i8 %83, -1
  %85 = zext i8 %84 to i32
  %86 = mul nuw nsw i32 %85, %74
  %87 = trunc i32 %86 to i16
  %88 = udiv i16 %87, 255
  %89 = trunc i16 %88 to i8
  %90 = getelementptr inbounds i8, ptr %68, i64 2
  %91 = load i8, ptr %90, align 1, !tbaa !13
  %92 = xor i8 %91, -1
  %93 = zext i8 %92 to i32
  %94 = mul nuw nsw i32 %93, %74
  %95 = trunc i32 %94 to i16
  %96 = udiv i16 %95, 255
  %97 = trunc i16 %96 to i8
  br label %104

98:                                               ; preds = %61
  %99 = load i8, ptr %68, align 1, !tbaa !13
  %100 = getelementptr inbounds i8, ptr %68, i64 1
  %101 = load i8, ptr %100, align 1, !tbaa !13
  %102 = getelementptr inbounds i8, ptr %68, i64 2
  %103 = load i8, ptr %102, align 1, !tbaa !13
  br label %104

104:                                              ; preds = %98, %70
  %105 = phi i64 [ 3, %98 ], [ 4, %70 ]
  %106 = phi i8 [ %103, %98 ], [ %97, %70 ]
  %107 = phi i8 [ %101, %98 ], [ %89, %70 ]
  %108 = phi i8 [ %99, %98 ], [ %81, %70 ]
  %109 = getelementptr inbounds i8, ptr %68, i64 %105
  %110 = zext i8 %106 to i64
  %111 = shl nuw nsw i64 %110, 16
  %112 = zext i8 %107 to i64
  %113 = shl nuw nsw i64 %112, 8
  %114 = or i64 %113, %111
  %115 = zext i8 %108 to i64
  %116 = or i64 %114, %115
  %117 = icmp eq i64 %116, %65
  br i1 %117, label %167, label %118

118:                                              ; preds = %104
  %119 = zext i8 %108 to i16
  %120 = mul nuw i16 %119, 257
  store i16 %120, ptr %5, align 2, !tbaa !157
  %121 = zext i8 %107 to i16
  %122 = mul nuw i16 %121, 257
  store i16 %122, ptr %50, align 2, !tbaa !159
  %123 = zext i8 %106 to i16
  %124 = mul nuw i16 %123, 257
  store i16 %124, ptr %49, align 2, !tbaa !160
  %125 = call i32 (ptr, ...) @gx_color_from_rgb(ptr noundef nonnull %5) #64
  %126 = call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef nonnull %5, ptr noundef %64, ptr noundef %10) #64
  %127 = load i64, ptr %6, align 8, !tbaa !439
  %128 = load i64, ptr %7, align 8, !tbaa !439
  %129 = icmp eq i64 %127, %128
  br i1 %129, label %130, label %144

130:                                              ; preds = %118
  %131 = load i32, ptr %54, align 8, !tbaa !334
  %132 = load i32, ptr %55, align 8, !tbaa !334
  %133 = icmp eq i32 %131, %132
  br i1 %133, label %134, label %144

134:                                              ; preds = %130
  %135 = icmp eq i32 %131, 0
  br i1 %135, label %142, label %136

136:                                              ; preds = %134
  %137 = load i64, ptr %56, align 8, !tbaa !464
  %138 = load i64, ptr %57, align 8, !tbaa !464
  %139 = icmp ne i64 %137, %138
  %140 = icmp ugt ptr %109, %28
  %141 = select i1 %139, i1 true, i1 %140
  br i1 %141, label %144, label %167

142:                                              ; preds = %134
  %143 = icmp ugt ptr %109, %28
  br i1 %143, label %144, label %167

144:                                              ; preds = %142, %136, %130, %118
  %145 = load i32, ptr %58, align 8, !tbaa !445
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %144
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %8) #65
  call void @gx_path_init(ptr noundef nonnull %8, ptr noundef nonnull %59) #64
  %148 = add nsw i64 %69, %16
  %149 = add nsw i64 %62, %18
  %150 = call i32 @gx_path_add_pgram(ptr noundef nonnull %8, i64 noundef %67, i64 noundef %66, i64 noundef %69, i64 noundef %62, i64 noundef %148, i64 noundef %149) #64
  %151 = icmp sgt i32 %150, -1
  br i1 %151, label %152, label %166

152:                                              ; preds = %147
  %153 = call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef nonnull %8, ptr noundef %63, ptr noundef %10, i32 noundef -1, i64 noundef 0) #64
  call void @gx_path_release(ptr noundef nonnull %8) #64
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %8) #65
  br label %167

154:                                              ; preds = %144
  %155 = add nsw i64 %67, 2048
  %156 = lshr i64 %155, 12
  %157 = trunc i64 %156 to i32
  %158 = add nsw i64 %69, 2048
  %159 = lshr i64 %158, 12
  %160 = trunc i64 %159 to i32
  %161 = sub nsw i32 %160, %157
  %162 = icmp slt i32 %161, 0
  %163 = select i1 %162, i32 %160, i32 %157
  %164 = call i32 @llvm.abs.i32(i32 %161, i1 true)
  %165 = call i32 (i32, i32, i32, i32, ptr, ptr, ...) @gz_fill_rectangle(i32 noundef %163, i32 noundef %60, i32 noundef %164, i32 noundef %46, ptr noundef %63, ptr noundef %10) #64
  br label %167

166:                                              ; preds = %147
  %.lcssa = phi i32 [ %150, %147 ]
  call void @gx_path_release(ptr noundef nonnull %8) #64
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %8) #65
  br label %176

167:                                              ; preds = %154, %152, %142, %136, %104
  %168 = phi i64 [ %67, %104 ], [ %67, %142 ], [ %67, %136 ], [ %69, %152 ], [ %69, %154 ]
  %169 = phi i64 [ %66, %104 ], [ %66, %142 ], [ %66, %136 ], [ %62, %152 ], [ %62, %154 ]
  %170 = phi i64 [ %65, %104 ], [ %116, %142 ], [ %116, %136 ], [ %116, %152 ], [ %116, %154 ]
  %171 = phi ptr [ %64, %104 ], [ %64, %142 ], [ %64, %136 ], [ %63, %152 ], [ %63, %154 ]
  %172 = phi ptr [ %63, %104 ], [ %63, %142 ], [ %63, %136 ], [ %64, %152 ], [ %64, %154 ]
  %173 = add nsw i64 %69, %12
  %174 = add nsw i64 %62, %14
  %175 = icmp ugt ptr %109, %28
  br i1 %175, label %176, label %61, !llvm.loop !465

176:                                              ; preds = %167, %166
  %177 = phi i32 [ %.lcssa, %166 ], [ 1, %167 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 10, ptr nonnull %5) #65
  ret i32 %177
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @image_render_skip(ptr nocapture readnone %0, ptr nocapture readnone %1, i32 %2, i32 noundef returned %3) #10 {
  ret i32 %3
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @image_unpack_0(ptr nocapture readnone %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #29 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %6, %4
  %7 = phi ptr [ %11, %6 ], [ %2, %4 ]
  %8 = phi i32 [ %10, %6 ], [ %3, %4 ]
  %9 = phi ptr [ %23, %6 ], [ %1, %4 ]
  %10 = add nsw i32 %8, -1
  %11 = getelementptr inbounds i8, ptr %7, i64 1
  %12 = load i8, ptr %7, align 1, !tbaa !13
  %13 = zext i8 %12 to i32
  %14 = lshr i32 %13, 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [16 x i32], ptr @map_4_to_32, i64 0, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !11
  %18 = getelementptr inbounds i32, ptr %9, i64 1
  store i32 %17, ptr %9, align 4, !tbaa !11
  %19 = and i32 %13, 15
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [16 x i32], ptr @map_4_to_32, i64 0, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !11
  %23 = getelementptr inbounds i32, ptr %9, i64 2
  store i32 %22, ptr %18, align 4, !tbaa !11
  %24 = icmp eq i32 %10, 0
  br i1 %24, label %25, label %6, !llvm.loop !466

25:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @image_unpack_1(ptr nocapture readnone %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #29 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %6, %4
  %7 = phi ptr [ %11, %6 ], [ %2, %4 ]
  %8 = phi i32 [ %10, %6 ], [ %3, %4 ]
  %9 = phi ptr [ %23, %6 ], [ %1, %4 ]
  %10 = add nsw i32 %8, -1
  %11 = getelementptr inbounds i8, ptr %7, i64 1
  %12 = load i8, ptr %7, align 1, !tbaa !13
  %13 = zext i8 %12 to i32
  %14 = lshr i32 %13, 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [16 x i16], ptr @map_4_to_16, i64 0, i64 %15
  %17 = load i16, ptr %16, align 2, !tbaa !102
  %18 = getelementptr inbounds i16, ptr %9, i64 1
  store i16 %17, ptr %9, align 2, !tbaa !102
  %19 = and i32 %13, 15
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [16 x i16], ptr @map_4_to_16, i64 0, i64 %20
  %22 = load i16, ptr %21, align 2, !tbaa !102
  %23 = getelementptr inbounds i16, ptr %9, i64 2
  store i16 %22, ptr %18, align 2, !tbaa !102
  %24 = icmp eq i32 %10, 0
  br i1 %24, label %25, label %6, !llvm.loop !467

25:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @image_unpack_2(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #29 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !428
  %9 = sext i32 %8 to i64
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi ptr [ %1, %6 ], [ %23, %10 ]
  %12 = phi i32 [ %3, %6 ], [ %14, %10 ]
  %13 = phi ptr [ %2, %6 ], [ %15, %10 ]
  %14 = add nsw i32 %12, -1
  %15 = getelementptr inbounds i8, ptr %13, i64 1
  %16 = load i8, ptr %13, align 1, !tbaa !13
  %17 = and i8 %16, -16
  %18 = lshr i8 %16, 4
  %19 = or i8 %17, %18
  store i8 %19, ptr %11, align 1, !tbaa !13
  %20 = getelementptr inbounds i8, ptr %11, i64 %9
  %21 = and i8 %16, 15
  %22 = mul nuw i8 %21, 17
  store i8 %22, ptr %20, align 1, !tbaa !13
  %23 = getelementptr inbounds i8, ptr %20, i64 %9
  %24 = icmp eq i32 %14, 0
  br i1 %24, label %25, label %10, !llvm.loop !468

25:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @image_unpack_0_spread(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #29 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !428
  %9 = sext i32 %8 to i64
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi ptr [ %1, %6 ], [ %46, %10 ]
  %12 = phi i32 [ %3, %6 ], [ %14, %10 ]
  %13 = phi ptr [ %2, %6 ], [ %15, %10 ]
  %14 = add nsw i32 %12, -1
  %15 = getelementptr inbounds i8, ptr %13, i64 1
  %16 = load i8, ptr %13, align 1, !tbaa !13
  %17 = zext i8 %16 to i32
  %18 = ashr i8 %16, 7
  store i8 %18, ptr %11, align 1, !tbaa !13
  %19 = getelementptr inbounds i8, ptr %11, i64 %9
  %20 = shl i32 %17, 25
  %21 = ashr i32 %20, 31
  %22 = trunc i32 %21 to i8
  store i8 %22, ptr %19, align 1, !tbaa !13
  %23 = getelementptr inbounds i8, ptr %19, i64 %9
  %24 = shl i32 %17, 26
  %25 = ashr i32 %24, 31
  %26 = trunc i32 %25 to i8
  store i8 %26, ptr %23, align 1, !tbaa !13
  %27 = getelementptr inbounds i8, ptr %23, i64 %9
  %28 = shl i32 %17, 27
  %29 = ashr i32 %28, 31
  %30 = trunc i32 %29 to i8
  store i8 %30, ptr %27, align 1, !tbaa !13
  %31 = getelementptr inbounds i8, ptr %27, i64 %9
  %32 = shl i32 %17, 28
  %33 = ashr i32 %32, 31
  %34 = trunc i32 %33 to i8
  store i8 %34, ptr %31, align 1, !tbaa !13
  %35 = getelementptr inbounds i8, ptr %31, i64 %9
  %36 = shl i32 %17, 29
  %37 = ashr i32 %36, 31
  %38 = trunc i32 %37 to i8
  store i8 %38, ptr %35, align 1, !tbaa !13
  %39 = getelementptr inbounds i8, ptr %35, i64 %9
  %40 = shl i32 %17, 30
  %41 = ashr i32 %40, 31
  %42 = trunc i32 %41 to i8
  store i8 %42, ptr %39, align 1, !tbaa !13
  %43 = getelementptr inbounds i8, ptr %39, i64 %9
  %44 = and i8 %16, 1
  %45 = sub nsw i8 0, %44
  store i8 %45, ptr %43, align 1, !tbaa !13
  %46 = getelementptr inbounds i8, ptr %43, i64 %9
  %47 = icmp eq i32 %14, 0
  br i1 %47, label %48, label %10, !llvm.loop !469

48:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @image_unpack_1_spread(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #29 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !428
  %9 = sext i32 %8 to i64
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi ptr [ %1, %6 ], [ %35, %10 ]
  %12 = phi ptr [ %2, %6 ], [ %15, %10 ]
  %13 = phi i32 [ %3, %6 ], [ %14, %10 ]
  %14 = add nsw i32 %13, -1
  %15 = getelementptr inbounds i8, ptr %12, i64 1
  %16 = load i8, ptr %12, align 1, !tbaa !13
  %17 = zext i8 %16 to i32
  %18 = lshr i32 %17, 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [16 x i16], ptr @map_4_to_16, i64 0, i64 %19
  %21 = load i16, ptr %20, align 2, !tbaa !102
  %22 = lshr i16 %21, 8
  %23 = trunc i16 %22 to i8
  store i8 %23, ptr %11, align 1, !tbaa !13
  %24 = getelementptr inbounds i8, ptr %11, i64 %9
  %25 = trunc i16 %21 to i8
  store i8 %25, ptr %24, align 1, !tbaa !13
  %26 = getelementptr inbounds i8, ptr %24, i64 %9
  %27 = and i32 %17, 15
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [16 x i16], ptr @map_4_to_16, i64 0, i64 %28
  %30 = load i16, ptr %29, align 2, !tbaa !102
  %31 = lshr i16 %30, 8
  %32 = trunc i16 %31 to i8
  store i8 %32, ptr %26, align 1, !tbaa !13
  %33 = getelementptr inbounds i8, ptr %26, i64 %9
  %34 = trunc i16 %30 to i8
  store i8 %34, ptr %33, align 1, !tbaa !13
  %35 = getelementptr inbounds i8, ptr %33, i64 %9
  %36 = icmp eq i32 %14, 0
  br i1 %36, label %37, label %10, !llvm.loop !470

37:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @image_unpack_3_spread(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) #29 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 4
  %8 = load i32, ptr %7, align 8, !tbaa !428
  %9 = sext i32 %8 to i64
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %3, %6 ], [ %14, %10 ]
  %12 = phi ptr [ %1, %6 ], [ %17, %10 ]
  %13 = phi ptr [ %2, %6 ], [ %15, %10 ]
  %14 = add nsw i32 %11, -1
  %15 = getelementptr inbounds i8, ptr %13, i64 1
  %16 = load i8, ptr %13, align 1, !tbaa !13
  store i8 %16, ptr %12, align 1, !tbaa !13
  %17 = getelementptr inbounds i8, ptr %12, i64 %9
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %19, label %10, !llvm.loop !471

19:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #19

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_imagemask_init(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, ptr noundef %5) #0 {
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 13
  %8 = load ptr, ptr %7, align 8, !tbaa !332
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 14
  %10 = load ptr, ptr %9, align 8, !tbaa !333
  %11 = tail call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %8, ptr noundef %10, ptr noundef %1) #64
  %12 = icmp eq i32 %4, 0
  %13 = load ptr, ptr %9, align 8, !tbaa !333
  %14 = load i64, ptr %13, align 8, !tbaa !439
  %15 = select i1 %12, i64 %14, i64 -1
  %16 = select i1 %12, i64 -1, i64 %14
  %17 = tail call i32 @image_init(ptr noundef %0, i32 noundef %2, i32 noundef %3, i32 noundef 0, i32 noundef 1, i32 noundef 1, ptr noundef %5, ptr noundef nonnull %1, i64 noundef %15, i64 noundef %16) #62, !range !263
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_image_next(ptr noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 14
  %5 = load i32, ptr %4, align 4, !tbaa !437
  %6 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 21
  %7 = load i32, ptr %6, align 8, !tbaa !449
  %8 = load i32, ptr %0, align 8, !tbaa !423
  %9 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 19
  %10 = load i32, ptr %9, align 8, !tbaa !448
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 20
  br i1 %11, label %13, label %14

13:                                               ; preds = %3
  store i32 %2, ptr %12, align 4, !tbaa !472
  br label %17

14:                                               ; preds = %3
  %15 = load i32, ptr %12, align 4, !tbaa !472
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %17, label %95

17:                                               ; preds = %14, %13
  %18 = sext i32 %10 to i64
  %19 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 18, i64 %18
  store ptr %1, ptr %19, align 8, !tbaa !7
  %20 = add nsw i32 %10, 1
  store i32 %20, ptr %9, align 8, !tbaa !448
  %21 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 4
  %22 = load i32, ptr %21, align 8, !tbaa !428
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %24, label %95

24:                                               ; preds = %17
  store i32 0, ptr %9, align 8, !tbaa !448
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %88, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 12
  %28 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 2
  %29 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 9
  %30 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 10
  %31 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 3
  %32 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 24
  %33 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 1
  %34 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 7
  %35 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 22
  br label %36

36:                                               ; preds = %85, %26
  %37 = phi i32 [ %7, %26 ], [ %86, %85 ]
  %38 = phi i32 [ 0, %26 ], [ %66, %85 ]
  %39 = phi i32 [ %2, %26 ], [ %67, %85 ]
  %40 = sub i32 %5, %37
  %41 = tail call i32 @llvm.umin.i32(i32 %39, i32 %40)
  %42 = load ptr, ptr %27, align 8, !tbaa !435
  %43 = load i32, ptr %28, align 8, !tbaa !426
  %44 = sub nsw i32 3, %43
  %45 = shl i32 %37, %44
  %46 = load i32, ptr %21, align 8, !tbaa !428
  %47 = mul i32 %45, %46
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, ptr %42, i64 %48
  %50 = icmp sgt i32 %46, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %36
  %52 = zext i32 %38 to i64
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %60, %53 ]
  %55 = load ptr, ptr %29, align 8, !tbaa !447
  %56 = getelementptr inbounds i8, ptr %49, i64 %54
  %57 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 18, i64 %54
  %58 = load ptr, ptr %57, align 8, !tbaa !7
  %59 = getelementptr inbounds i8, ptr %58, i64 %52
  tail call void %55(ptr noundef nonnull %0, ptr noundef %56, ptr noundef %59, i32 noundef %41) #64
  %60 = add nuw nsw i64 %54, 1
  %61 = load i32, ptr %21, align 8, !tbaa !428
  %62 = sext i32 %61 to i64
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %53, label %64, !llvm.loop !473

64:                                               ; preds = %53, %36
  %65 = add i32 %41, %37
  %66 = add i32 %41, %38
  %67 = sub i32 %39, %41
  %68 = icmp eq i32 %65, %5
  br i1 %68, label %69, label %85

69:                                               ; preds = %64
  %70 = load ptr, ptr %30, align 8, !tbaa !446
  %71 = load ptr, ptr %27, align 8, !tbaa !435
  %72 = load i32, ptr %31, align 4, !tbaa !427
  %73 = mul nsw i32 %72, %8
  %74 = tail call i32 %70(ptr noundef nonnull %0, ptr noundef %71, i32 noundef %73, i32 noundef 1) #64
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %90, label %76

76:                                               ; preds = %69
  %77 = load i32, ptr %32, align 8, !tbaa !450
  %78 = add nsw i32 %77, 1
  store i32 %78, ptr %32, align 8, !tbaa !450
  %79 = load i32, ptr %33, align 4, !tbaa !425
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %90, label %81

81:                                               ; preds = %76
  %82 = load <2 x i64>, ptr %34, align 8, !tbaa !18
  %83 = load <2 x i64>, ptr %35, align 8, !tbaa !18
  %84 = add nsw <2 x i64> %83, %82
  store <2 x i64> %84, ptr %35, align 8, !tbaa !18
  br label %85

85:                                               ; preds = %81, %64
  %86 = phi i32 [ 0, %81 ], [ %65, %64 ]
  %87 = icmp eq i32 %67, 0
  br i1 %87, label %88, label %36

88:                                               ; preds = %85, %24
  %89 = phi i32 [ %7, %24 ], [ %86, %85 ]
  store i32 %89, ptr %6, align 8, !tbaa !449
  br label %95

90:                                               ; preds = %76, %69
  %91 = phi i32 [ 1, %76 ], [ %74, %69 ]
  %92 = load ptr, ptr %27, align 8, !tbaa !435
  %93 = getelementptr inbounds %struct.gs_image_enum_s, ptr %0, i64 0, i32 13
  %94 = load i32, ptr %93, align 8, !tbaa !436
  tail call void @gs_free(ptr noundef %92, i32 noundef %94, i32 noundef 1, ptr noundef nonnull @.str.659) #64
  br label %95

95:                                               ; preds = %90, %88, %17, %14
  %96 = phi i32 [ %91, %90 ], [ 0, %88 ], [ -23, %14 ], [ 0, %17 ]
  ret i32 %96
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_type1imagepath(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3, double noundef %4, double noundef %5, double noundef %6, double noundef %7, ptr noundef %8, i32 noundef %9) #0 {
  %11 = alloca %struct.status, align 8
  %12 = alloca %struct.gs_matrix_s, align 8
  %13 = alloca %struct.gs_point_s, align 4
  %14 = alloca %struct.gs_point_s, align 4
  %15 = alloca %struct.gs_point_s, align 4
  call void @llvm.lifetime.start.p0(i64 152, ptr nonnull %11) #65
  %16 = shl nsw i32 %3, 2
  %17 = sitofp i32 %16 to float
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %12) #65
  %18 = call i32 @gs_currentmatrix(ptr noundef %0, ptr noundef nonnull %11) #64
  %19 = fpext float %17 to double
  %20 = call i32 @gs_make_scaling(double noundef %19, double noundef %19, ptr noundef nonnull %12) #64
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %10
  %23 = call i32 @gs_matrix_multiply(ptr noundef nonnull %12, ptr noundef nonnull %11, ptr noundef nonnull %11) #64
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %22, %10
  %26 = phi i32 [ %23, %22 ], [ %20, %10 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %12) #65
  br label %188

27:                                               ; preds = %22
  %28 = call i32 @gs_matrix_invert(ptr noundef nonnull %11, ptr noundef nonnull %11) #64
  %29 = icmp sgt i32 %28, -1
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %12) #65
  br i1 %29, label %30, label %188

30:                                               ; preds = %27
  %31 = add nsw i32 %2, 2
  %32 = add nsw i32 %3, 2
  %33 = mul nsw i32 %32, %31
  %34 = call ptr @gs_malloc(i32 noundef %33, i32 noundef 1, ptr noundef nonnull @.str.668) #64
  %35 = icmp eq ptr %34, null
  br i1 %35, label %188, label %36

36:                                               ; preds = %30
  call void @fill_cells(ptr noundef nonnull %34, ptr noundef %1, i32 noundef %2, i32 noundef %3) #62
  %37 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 4
  store ptr %8, ptr %37, align 8, !tbaa !474
  %38 = zext i32 %9 to i64
  %39 = getelementptr inbounds i8, ptr %8, i64 %38
  %40 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 1
  store ptr %39, ptr %40, align 8, !tbaa !476
  %41 = icmp sgt i32 %2, 0
  br i1 %41, label %42, label %63

42:                                               ; preds = %36
  %43 = icmp slt i32 %3, 1
  %44 = add i32 %3, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %61, %42
  %47 = phi i32 [ 0, %42 ], [ %48, %61 ]
  %48 = add nuw nsw i32 %47, 1
  br i1 %43, label %61, label %52

49:                                               ; preds = %52
  %50 = add nuw nsw i64 %53, 1
  %51 = icmp eq i64 %50, %45
  br i1 %51, label %61, label %52, !llvm.loop !477

52:                                               ; preds = %49, %46
  %53 = phi i64 [ %50, %49 ], [ 1, %46 ]
  %54 = trunc i64 %53 to i32
  %55 = mul i32 %31, %54
  %56 = add i32 %48, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, ptr %34, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !13
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %49, label %63

61:                                               ; preds = %49, %46
  %62 = icmp eq i32 %48, %2
  br i1 %62, label %63, label %46, !llvm.loop !478

63:                                               ; preds = %61, %52, %36
  %64 = phi i32 [ 0, %36 ], [ %47, %52 ], [ %2, %61 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #65
  %65 = fmul double %6, 4.000000e+00
  %66 = fmul double %7, 4.000000e+00
  %67 = call i32 @gs_distance_transform(double noundef %65, double noundef %66, ptr noundef nonnull %11, ptr noundef nonnull %13) #64
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %161, label %69

69:                                               ; preds = %63
  %70 = fmul double %4, 4.000000e+00
  %71 = fmul double %5, 4.000000e+00
  %72 = call i32 @gs_distance_transform(double noundef %70, double noundef %71, ptr noundef nonnull %11, ptr noundef nonnull %14) #64
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %161, label %74

74:                                               ; preds = %69
  %75 = sitofp i32 %64 to double
  %76 = fsub double %75, %6
  %77 = fmul double %76, 4.000000e+00
  %78 = call i32 @gs_distance_transform(double noundef %77, double noundef 0.000000e+00, ptr noundef nonnull %11, ptr noundef nonnull %15) #64
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %161, label %80

80:                                               ; preds = %74
  %81 = load float, ptr %13, align 4, !tbaa !230
  %82 = fpext float %81 to double
  %83 = fadd double %82, 5.000000e-01
  %84 = fptosi double %83 to i64
  %85 = call i64 @llvm.smax.i64(i64 %84, i64 -32767)
  %86 = call i64 @llvm.smin.i64(i64 %85, i64 32767)
  %87 = trunc i64 %86 to i32
  %88 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 2
  store i32 %87, ptr %88, align 8, !tbaa !479
  %89 = getelementptr inbounds %struct.gs_point_s, ptr %13, i64 0, i32 1
  %90 = load float, ptr %89, align 4, !tbaa !232
  %91 = fpext float %90 to double
  %92 = fadd double %91, 5.000000e-01
  %93 = fptosi double %92 to i64
  %94 = call i64 @llvm.smax.i64(i64 %93, i64 -32767)
  %95 = call i64 @llvm.smin.i64(i64 %94, i64 32767)
  %96 = trunc i64 %95 to i32
  %97 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 3
  store i32 %96, ptr %97, align 4, !tbaa !480
  %98 = load float, ptr %14, align 4, !tbaa !230
  %99 = fpext float %98 to double
  %100 = fadd double %99, 5.000000e-01
  %101 = fptosi double %100 to i64
  %102 = call i64 @llvm.smax.i64(i64 %101, i64 -32767)
  %103 = call i64 @llvm.smin.i64(i64 %102, i64 32767)
  %104 = trunc i64 %103 to i32
  %105 = getelementptr inbounds %struct.gs_point_s, ptr %14, i64 0, i32 1
  %106 = load float, ptr %105, align 4, !tbaa !232
  %107 = fpext float %106 to double
  %108 = fadd double %107, 5.000000e-01
  %109 = fptosi double %108 to i64
  %110 = call i64 @llvm.smax.i64(i64 %109, i64 -32767)
  %111 = call i64 @llvm.smin.i64(i64 %110, i64 32767)
  %112 = trunc i64 %111 to i32
  %113 = load float, ptr %15, align 4, !tbaa !230
  %114 = fpext float %113 to double
  %115 = fadd double %114, 5.000000e-01
  %116 = fptosi double %115 to i64
  %117 = call i64 @llvm.smax.i64(i64 %116, i64 -32767)
  %118 = call i64 @llvm.smin.i64(i64 %117, i64 32767)
  %119 = trunc i64 %118 to i32
  %120 = getelementptr inbounds %struct.gs_point_s, ptr %15, i64 0, i32 1
  %121 = load float, ptr %120, align 4, !tbaa !232
  %122 = fpext float %121 to double
  %123 = fadd double %122, 5.000000e-01
  %124 = fptosi double %123 to i64
  %125 = call i64 @llvm.smax.i64(i64 %124, i64 -32767)
  %126 = call i64 @llvm.smin.i64(i64 %125, i64 32767)
  %127 = trunc i64 %126 to i32
  %128 = call i32 @put_int(ptr noundef nonnull %11, i32 noundef %119) #62, !range !481
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %161, label %130

130:                                              ; preds = %80
  %131 = icmp ne i32 %112, 0
  %132 = icmp ne i32 %127, 0
  %133 = select i1 %131, i1 true, i1 %132
  br i1 %133, label %134, label %152

134:                                              ; preds = %130
  %135 = call i32 @put_int(ptr noundef nonnull %11, i32 noundef %127) #62, !range !481
  %136 = icmp slt i32 %135, 0
  br i1 %136, label %161, label %137

137:                                              ; preds = %134
  %138 = call i32 @put_int(ptr noundef nonnull %11, i32 noundef %104) #62, !range !481
  %139 = icmp slt i32 %138, 0
  br i1 %139, label %161, label %140

140:                                              ; preds = %137
  %141 = call i32 @put_int(ptr noundef nonnull %11, i32 noundef %112) #62, !range !481
  %142 = icmp slt i32 %141, 0
  br i1 %142, label %161, label %143

143:                                              ; preds = %140
  %144 = load ptr, ptr %37, align 8, !tbaa !474
  %145 = getelementptr inbounds i8, ptr %144, i64 2
  %146 = load ptr, ptr %40, align 8, !tbaa !476
  %147 = icmp ugt ptr %145, %146
  br i1 %147, label %161, label %148

148:                                              ; preds = %143
  %149 = getelementptr inbounds i8, ptr %144, i64 1
  store ptr %149, ptr %37, align 8, !tbaa !474
  store i8 12, ptr %144, align 1, !tbaa !13
  %150 = load ptr, ptr %37, align 8, !tbaa !474
  %151 = getelementptr inbounds i8, ptr %150, i64 1
  store ptr %151, ptr %37, align 8, !tbaa !474
  store i8 7, ptr %150, align 1, !tbaa !13
  br label %163

152:                                              ; preds = %130
  %153 = call i32 @put_int(ptr noundef nonnull %11, i32 noundef %104) #62, !range !481
  %154 = icmp slt i32 %153, 0
  br i1 %154, label %161, label %155

155:                                              ; preds = %152
  %156 = load ptr, ptr %37, align 8, !tbaa !474
  %157 = getelementptr inbounds i8, ptr %156, i64 1
  %158 = load ptr, ptr %40, align 8, !tbaa !476
  %159 = icmp ugt ptr %157, %158
  br i1 %159, label %161, label %160

160:                                              ; preds = %155
  store ptr %157, ptr %37, align 8, !tbaa !474
  store i8 13, ptr %156, align 1, !tbaa !13
  br label %163

161:                                              ; preds = %155, %152, %143, %140, %137, %134, %80, %74, %69, %63
  %162 = phi i32 [ -13, %155 ], [ %153, %152 ], [ -13, %143 ], [ %141, %140 ], [ %138, %137 ], [ %135, %134 ], [ %128, %80 ], [ %78, %74 ], [ %72, %69 ], [ %67, %63 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #65
  br label %188

163:                                              ; preds = %160, %148
  %164 = phi i32 [ 0, %160 ], [ %127, %148 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #65
  %165 = shl nsw i32 %64, 2
  %166 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 5
  store i32 %165, ptr %166, align 8, !tbaa !482
  %167 = fptosi double %66 to i32
  %168 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 6
  store i32 %167, ptr %168, align 4, !tbaa !483
  %169 = load i32, ptr %88, align 8, !tbaa !479
  %170 = add nsw i32 %169, %119
  %171 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 7
  store i32 %170, ptr %171, align 8, !tbaa !484
  %172 = load i32, ptr %97, align 4, !tbaa !480
  %173 = add nsw i32 %172, %164
  %174 = getelementptr inbounds %struct.status, ptr %11, i64 0, i32 8
  store i32 %173, ptr %174, align 4, !tbaa !485
  %175 = call i32 @trace_cells(ptr noundef nonnull %34, i32 noundef %2, i32 noundef %3, ptr noundef nonnull %11) #62
  call void @gs_free(ptr noundef nonnull %34, i32 noundef %33, i32 noundef 1, ptr noundef nonnull @.str.668) #64
  %176 = icmp slt i32 %175, 0
  br i1 %176, label %188, label %177

177:                                              ; preds = %163
  %178 = load ptr, ptr %37, align 8, !tbaa !474
  %179 = load ptr, ptr %40, align 8, !tbaa !476
  %180 = icmp ult ptr %178, %179
  br i1 %180, label %181, label %188

181:                                              ; preds = %177
  %182 = getelementptr inbounds i8, ptr %178, i64 1
  store ptr %182, ptr %37, align 8, !tbaa !474
  store i8 14, ptr %178, align 1, !tbaa !13
  %183 = load ptr, ptr %37, align 8, !tbaa !474
  %184 = ptrtoint ptr %183 to i64
  %185 = ptrtoint ptr %8 to i64
  %186 = sub i64 %184, %185
  %187 = trunc i64 %186 to i32
  br label %188

188:                                              ; preds = %181, %177, %163, %161, %30, %27, %25
  %189 = phi i32 [ %187, %181 ], [ %28, %27 ], [ -25, %30 ], [ %175, %163 ], [ -13, %177 ], [ %26, %25 ], [ %162, %161 ]
  call void @llvm.lifetime.end.p0(i64 152, ptr nonnull %11) #65
  ret i32 %189
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @fill_cells(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3) #21 {
  %5 = add nsw i32 %2, 2
  %6 = add nsw i32 %3, 2
  %7 = mul nsw i32 %6, %5
  %8 = sext i32 %7 to i64
  tail call void @llvm.memset.p0.i64(ptr align 1 %0, i8 0, i64 %8, i1 false)
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %55

10:                                               ; preds = %4
  %11 = mul nsw i32 %5, %3
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, ptr %0, i64 %12
  %14 = getelementptr inbounds i8, ptr %13, i64 1
  %15 = getelementptr inbounds i8, ptr %1, i64 -1
  %16 = icmp sgt i32 %2, 0
  %17 = shl nsw i32 %2, 1
  %18 = sub nuw nsw i32 -2, %17
  %19 = sext i32 %18 to i64
  br label %20

20:                                               ; preds = %48, %10
  %21 = phi i32 [ undef, %10 ], [ %51, %48 ]
  %22 = phi ptr [ %14, %10 ], [ %52, %48 ]
  %23 = phi ptr [ %15, %10 ], [ %49, %48 ]
  %24 = phi i32 [ 0, %10 ], [ %53, %48 ]
  br i1 %16, label %25, label %48

25:                                               ; preds = %43, %20
  %26 = phi i32 [ %44, %43 ], [ 0, %20 ]
  %27 = phi i32 [ %39, %43 ], [ %21, %20 ]
  %28 = phi i32 [ %45, %43 ], [ 0, %20 ]
  %29 = phi ptr [ %46, %43 ], [ %22, %20 ]
  %30 = phi ptr [ %37, %43 ], [ %23, %20 ]
  %31 = icmp eq i32 %28, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %25
  %33 = getelementptr inbounds i8, ptr %30, i64 1
  %34 = load i8, ptr %33, align 1, !tbaa !13
  %35 = zext i8 %34 to i32
  br label %36

36:                                               ; preds = %32, %25
  %37 = phi ptr [ %33, %32 ], [ %30, %25 ]
  %38 = phi i32 [ 128, %32 ], [ %28, %25 ]
  %39 = phi i32 [ %35, %32 ], [ %27, %25 ]
  %40 = and i32 %39, %38
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %36
  store i8 1, ptr %29, align 1, !tbaa !13
  br label %43

43:                                               ; preds = %42, %36
  %44 = add nuw nsw i32 %26, 1
  %45 = lshr i32 %38, 1
  %46 = getelementptr inbounds i8, ptr %29, i64 1
  %47 = icmp eq i32 %44, %2
  br i1 %47, label %48, label %25, !llvm.loop !486

48:                                               ; preds = %43, %20
  %49 = phi ptr [ %23, %20 ], [ %37, %43 ]
  %50 = phi ptr [ %22, %20 ], [ %46, %43 ]
  %51 = phi i32 [ %21, %20 ], [ %39, %43 ]
  %52 = getelementptr inbounds i8, ptr %50, i64 %19
  %53 = add nuw nsw i32 %24, 1
  %54 = icmp eq i32 %53, %3
  br i1 %54, label %55, label %20, !llvm.loop !487

55:                                               ; preds = %48, %4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #19

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #19

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @put_int(ptr nocapture noundef %0, i32 noundef %1) #31 {
  %3 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !474
  %5 = getelementptr inbounds i8, ptr %4, i64 5
  %6 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !476
  %8 = icmp ugt ptr %5, %7
  br i1 %8, label %51, label %9

9:                                                ; preds = %2
  %10 = add i32 %1, 107
  %11 = icmp ult i32 %10, 215
  br i1 %11, label %12, label %16

12:                                               ; preds = %9
  %13 = trunc i32 %1 to i8
  %14 = add i8 %13, -117
  %15 = getelementptr inbounds i8, ptr %4, i64 1
  store i8 %14, ptr %4, align 1, !tbaa !13
  br label %49

16:                                               ; preds = %9
  %17 = add i32 %1, -108
  %18 = icmp ult i32 %17, 1024
  br i1 %18, label %19, label %26

19:                                               ; preds = %16
  %20 = lshr i32 %17, 8
  %21 = trunc i32 %20 to i8
  %22 = add nuw nsw i8 %21, -9
  %23 = getelementptr inbounds i8, ptr %4, i64 1
  store i8 %22, ptr %4, align 1, !tbaa !13
  %24 = trunc i32 %17 to i8
  %25 = getelementptr inbounds i8, ptr %4, i64 2
  store i8 %24, ptr %23, align 1, !tbaa !13
  br label %49

26:                                               ; preds = %16
  %27 = add i32 %1, 1131
  %28 = icmp ult i32 %27, 1024
  br i1 %28, label %29, label %37

29:                                               ; preds = %26
  %30 = sub nuw nsw i32 -108, %1
  %31 = lshr i32 %30, 8
  %32 = trunc i32 %31 to i8
  %33 = add nuw nsw i8 %32, -5
  %34 = getelementptr inbounds i8, ptr %4, i64 1
  store i8 %33, ptr %4, align 1, !tbaa !13
  %35 = trunc i32 %30 to i8
  %36 = getelementptr inbounds i8, ptr %4, i64 2
  store i8 %35, ptr %34, align 1, !tbaa !13
  br label %49

37:                                               ; preds = %26
  %38 = getelementptr inbounds i8, ptr %4, i64 1
  store i8 -1, ptr %4, align 1, !tbaa !13
  %39 = lshr i32 %1, 24
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, ptr %4, i64 2
  store i8 %40, ptr %38, align 1, !tbaa !13
  %42 = lshr i32 %1, 16
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, ptr %4, i64 3
  store i8 %43, ptr %41, align 1, !tbaa !13
  %45 = lshr i32 %1, 8
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds i8, ptr %4, i64 4
  store i8 %46, ptr %44, align 1, !tbaa !13
  %48 = trunc i32 %1 to i8
  store i8 %48, ptr %47, align 1, !tbaa !13
  br label %49

49:                                               ; preds = %37, %29, %19, %12
  %50 = phi ptr [ %15, %12 ], [ %25, %19 ], [ %36, %29 ], [ %5, %37 ]
  store ptr %50, ptr %3, align 8, !tbaa !474
  br label %51

51:                                               ; preds = %49, %2
  %52 = phi i32 [ 0, %49 ], [ -13, %2 ]
  ret i32 %52
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @trace_cells(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3) #0 {
  %5 = add nsw i32 %1, 2
  %6 = add nsw i32 %2, 1
  %7 = mul nsw i32 %6, %5
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, ptr %0, i64 %8
  %10 = getelementptr inbounds i8, ptr %9, i64 -2
  %11 = getelementptr inbounds %struct.status, ptr %3, i64 0, i32 11
  %12 = getelementptr inbounds %struct.status, ptr %3, i64 0, i32 4
  %13 = icmp ult ptr %10, %0
  br i1 %13, label %59, label %14

14:                                               ; preds = %4
  %15 = sub nsw i32 -2, %1
  %16 = sext i32 %15 to i64
  %17 = ptrtoint ptr %0 to i64
  %18 = sext i32 %5 to i64
  %19 = getelementptr inbounds %struct.status, ptr %3, i64 0, i32 5
  %20 = getelementptr inbounds %struct.status, ptr %3, i64 0, i32 6
  %21 = getelementptr inbounds %struct.status, ptr %3, i64 0, i32 1
  br label %22

22:                                               ; preds = %56, %14
  %23 = phi ptr [ %10, %14 ], [ %57, %56 ]
  %24 = load i8, ptr %23, align 1, !tbaa !13
  %25 = icmp eq i8 %24, 1
  br i1 %25, label %26, label %56

26:                                               ; preds = %22
  %27 = getelementptr inbounds i8, ptr %23, i64 %16
  %28 = load i8, ptr %27, align 1, !tbaa !13
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %56

30:                                               ; preds = %26
  %31 = ptrtoint ptr %23 to i64
  %32 = sub i64 %31, %17
  %33 = srem i64 %32, %18
  %34 = trunc i64 %33 to i32
  %35 = sdiv i64 %32, %18
  %36 = trunc i64 %35 to i32
  %37 = shl i32 %34, 2
  %38 = add i32 %37, -3
  %39 = load i32, ptr %19, align 8, !tbaa !482
  %40 = sub i32 %38, %39
  %41 = shl i32 %36, 2
  %42 = add i32 %41, -4
  %43 = load i32, ptr %20, align 4, !tbaa !483
  %44 = sub i32 %42, %43
  %45 = tail call i32 @put_dxdy(ptr noundef %3, i32 noundef %40, i32 noundef %44, i32 noundef 1) #62, !range !263
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %30
  store i32 0, ptr %11, align 8, !tbaa !488
  %48 = tail call i32 @trace_from(ptr noundef nonnull %3, ptr noundef nonnull %23, i32 noundef %1) #62
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %59, label %50

50:                                               ; preds = %47
  %51 = load ptr, ptr %12, align 8, !tbaa !474
  %52 = load ptr, ptr %21, align 8, !tbaa !476
  %53 = icmp ult ptr %51, %52
  br i1 %53, label %54, label %59

54:                                               ; preds = %50
  %55 = getelementptr inbounds i8, ptr %51, i64 1
  store ptr %55, ptr %12, align 8, !tbaa !474
  store i8 9, ptr %51, align 1, !tbaa !13
  br label %56

56:                                               ; preds = %54, %26, %22
  %57 = getelementptr inbounds i8, ptr %23, i64 -1
  %58 = icmp ult ptr %57, %0
  br i1 %58, label %59, label %22, !llvm.loop !489

59:                                               ; preds = %56, %50, %47, %30, %4
  %60 = phi i32 [ 0, %4 ], [ -13, %50 ], [ %48, %47 ], [ %45, %30 ], [ 0, %56 ]
  ret i32 %60
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @put_dxdy(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = alloca %struct.gs_point_s, align 4
  %6 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 5
  %7 = load i32, ptr %6, align 8, !tbaa !482
  %8 = add nsw i32 %7, %1
  %9 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 6
  %10 = load i32, ptr %9, align 4, !tbaa !483
  %11 = add nsw i32 %10, %2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  %12 = sitofp i32 %8 to double
  %13 = sitofp i32 %11 to double
  %14 = call i32 @gs_distance_transform(double noundef %12, double noundef %13, ptr noundef %0, ptr noundef nonnull %5) #64
  %15 = load float, ptr %5, align 4, !tbaa !230
  %16 = fpext float %15 to double
  %17 = fadd double %16, 5.000000e-01
  %18 = fptosi double %17 to i64
  %19 = call i64 @llvm.smax.i64(i64 %18, i64 -32767)
  %20 = call i64 @llvm.smin.i64(i64 %19, i64 32767)
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds %struct.gs_point_s, ptr %5, i64 0, i32 1
  %23 = load float, ptr %22, align 4, !tbaa !232
  %24 = fpext float %23 to double
  %25 = fadd double %24, 5.000000e-01
  %26 = fptosi double %25 to i64
  %27 = call i64 @llvm.smax.i64(i64 %26, i64 -32767)
  %28 = call i64 @llvm.smin.i64(i64 %27, i64 32767)
  %29 = trunc i64 %28 to i32
  %30 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 7
  %31 = load i32, ptr %30, align 8, !tbaa !484
  %32 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 8
  %33 = load i32, ptr %32, align 4, !tbaa !485
  %34 = sub nsw i32 %29, %33
  %35 = icmp ne i32 %31, %21
  %36 = icmp eq i32 %33, %29
  %37 = select i1 %35, i1 true, i1 %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %4
  %39 = sub nsw i32 %21, %31
  %40 = call i32 @put_int(ptr noundef nonnull %0, i32 noundef %39) #62, !range !481
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %73, label %42

42:                                               ; preds = %38, %4
  br i1 %36, label %46, label %43

43:                                               ; preds = %42
  %44 = call i32 @put_int(ptr noundef nonnull %0, i32 noundef %34) #62, !range !481
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %73, label %52

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 4
  %48 = load ptr, ptr %47, align 8, !tbaa !474
  %49 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !476
  %51 = icmp eq ptr %48, %50
  br i1 %51, label %73, label %58

52:                                               ; preds = %43
  %53 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 4
  %54 = load ptr, ptr %53, align 8, !tbaa !474
  %55 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !476
  %57 = icmp eq ptr %54, %56
  br i1 %57, label %73, label %61

58:                                               ; preds = %46
  %59 = icmp eq i32 %3, 0
  %60 = select i1 %59, i8 6, i8 22
  br label %68

61:                                               ; preds = %52
  %62 = icmp eq i32 %31, %21
  %63 = icmp eq i32 %3, 0
  br i1 %62, label %64, label %66

64:                                               ; preds = %61
  %65 = select i1 %63, i8 7, i8 4
  br label %68

66:                                               ; preds = %61
  %67 = select i1 %63, i8 5, i8 21
  br label %68

68:                                               ; preds = %66, %64, %58
  %69 = phi ptr [ %47, %58 ], [ %53, %64 ], [ %53, %66 ]
  %70 = phi ptr [ %48, %58 ], [ %54, %64 ], [ %54, %66 ]
  %71 = phi i8 [ %60, %58 ], [ %65, %64 ], [ %67, %66 ]
  %72 = getelementptr inbounds i8, ptr %70, i64 1
  store ptr %72, ptr %69, align 8, !tbaa !474
  store i8 %71, ptr %70, align 1, !tbaa !13
  store i32 %8, ptr %6, align 8, !tbaa !482
  store i32 %11, ptr %9, align 4, !tbaa !483
  store i32 %21, ptr %30, align 8, !tbaa !484
  store i32 %29, ptr %32, align 4, !tbaa !485
  br label %73

73:                                               ; preds = %68, %52, %46, %43, %38
  %74 = phi i32 [ 0, %68 ], [ %40, %38 ], [ %44, %43 ], [ -13, %46 ], [ -13, %52 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  ret i32 %74
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @trace_from(ptr noundef %0, ptr nocapture noundef %1, i32 noundef %2) #0 {
  %4 = add nsw i32 %2, 2
  br label %5

5:                                                ; preds = %49, %3
  %6 = phi i32 [ 1, %3 ], [ %50, %49 ]
  %7 = phi i32 [ 3, %3 ], [ %53, %49 ]
  %8 = phi ptr [ %1, %3 ], [ %52, %49 ]
  %9 = zext i32 %7 to i64
  %10 = getelementptr inbounds [5 x %struct.dir_descr], ptr @trace_from.nesw, i64 0, i64 %9
  %11 = getelementptr inbounds [5 x %struct.dir_descr], ptr @trace_from.nesw, i64 0, i64 %9, i32 2
  %12 = load i16, ptr %11, align 4, !tbaa !490
  %13 = sext i16 %12 to i32
  %14 = getelementptr inbounds [5 x %struct.dir_descr], ptr @trace_from.nesw, i64 0, i64 %9, i32 3
  %15 = load i16, ptr %14, align 2, !tbaa !492
  %16 = sext i16 %15 to i32
  %17 = icmp eq i32 %7, 3
  %18 = getelementptr inbounds [5 x %struct.dir_descr], ptr @trace_from.nesw, i64 0, i64 %9, i32 1
  %19 = mul nsw i32 %4, %16
  %20 = add nsw i32 %19, %13
  %21 = sext i32 %20 to i64
  br label %22

22:                                               ; preds = %75, %5
  %23 = phi ptr [ %55, %75 ], [ %8, %5 ]
  br i1 %17, label %24, label %28

24:                                               ; preds = %22
  %25 = load i8, ptr %23, align 1, !tbaa !13
  %26 = icmp eq i8 %25, 2
  br i1 %26, label %78, label %27

27:                                               ; preds = %24
  store i8 2, ptr %23, align 1, !tbaa !13
  br label %28

28:                                               ; preds = %27, %22
  %29 = load i16, ptr %18, align 2, !tbaa !493
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %4, %30
  %32 = load i16, ptr %10, align 8, !tbaa !494
  %33 = sext i16 %32 to i32
  %34 = add nsw i32 %31, %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, ptr %23, i64 %35
  %37 = load i8, ptr %36, align 1, !tbaa !13
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %54, label %39

39:                                               ; preds = %28
  %.lcssa7 = phi ptr [ %23, %28 ]
  %.lcssa4 = phi i32 [ %30, %28 ]
  %.lcssa2 = phi i32 [ %33, %28 ]
  %.lcssa = phi i64 [ %35, %28 ]
  %40 = getelementptr inbounds i8, ptr %.lcssa7, i64 %.lcssa
  %41 = sub nsw i32 1, %6
  %42 = tail call i32 @add_dxdy(ptr noundef %0, i32 noundef %13, i32 noundef %16, i32 noundef %41) #62, !range !263
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %78, label %44

44:                                               ; preds = %39
  %45 = tail call i32 @add_dxdy(ptr noundef %0, i32 noundef %.lcssa2, i32 noundef %.lcssa4, i32 noundef 3) #62, !range !263
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %78, label %47

47:                                               ; preds = %44
  %48 = add nuw nsw i32 %7, 3
  br label %49

49:                                               ; preds = %73, %47
  %50 = phi i32 [ 1, %73 ], [ 3, %47 ]
  %51 = phi i32 [ %74, %73 ], [ %48, %47 ]
  %52 = phi ptr [ %.lcssa8, %73 ], [ %40, %47 ]
  %53 = and i32 %51, 3
  br label %5

54:                                               ; preds = %28
  %55 = getelementptr inbounds i8, ptr %23, i64 %21
  %56 = load i8, ptr %55, align 1, !tbaa !13
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %75

58:                                               ; preds = %54
  %.lcssa8 = phi ptr [ %23, %54 ]
  %59 = xor i32 %6, 3
  %60 = tail call i32 @add_dxdy(ptr noundef %0, i32 noundef %13, i32 noundef %16, i32 noundef %59) #62, !range !263
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %78, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.dir_descr, ptr %10, i64 1, i32 2
  %64 = load i16, ptr %63, align 4, !tbaa !490
  %65 = sext i16 %64 to i32
  %66 = add nsw i32 %65, %13
  %67 = getelementptr inbounds %struct.dir_descr, ptr %10, i64 1, i32 3
  %68 = load i16, ptr %67, align 2, !tbaa !492
  %69 = sext i16 %68 to i32
  %70 = add nsw i32 %69, %16
  %71 = tail call i32 @add_dxdy(ptr noundef %0, i32 noundef %66, i32 noundef %70, i32 noundef 1) #62, !range !263
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %78, label %73

73:                                               ; preds = %62
  %74 = add nuw nsw i32 %7, 1
  br label %49

75:                                               ; preds = %54
  %76 = tail call i32 @add_dxdy(ptr noundef %0, i32 noundef %13, i32 noundef %16, i32 noundef 4) #62, !range !263
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %22

78:                                               ; preds = %75, %62, %58, %44, %39, %24
  %79 = phi i32 [ %76, %75 ], [ 0, %24 ], [ %42, %39 ], [ %45, %44 ], [ %60, %58 ], [ %71, %62 ]
  ret i32 %79
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @add_dxdy(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #0 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %31, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 9
  %8 = load i32, ptr %7, align 8, !tbaa !495
  %9 = icmp eq i32 %8, %1
  br i1 %9, label %10, label %18

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 10
  %12 = load i32, ptr %11, align 4, !tbaa !496
  %13 = icmp eq i32 %12, %2
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 11
  %16 = load i32, ptr %15, align 8, !tbaa !488
  %17 = add nsw i32 %16, %3
  store i32 %17, ptr %15, align 8, !tbaa !488
  br label %31

18:                                               ; preds = %10, %6
  %19 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 11
  %20 = load i32, ptr %19, align 8, !tbaa !488
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %18
  %23 = mul nsw i32 %20, %8
  %24 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 10
  %25 = load i32, ptr %24, align 4, !tbaa !496
  %26 = mul nsw i32 %25, %20
  %27 = tail call i32 @put_dxdy(ptr noundef nonnull %0, i32 noundef %23, i32 noundef %26, i32 noundef 0) #62, !range !263
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %22, %18
  store i32 %1, ptr %7, align 8, !tbaa !495
  %30 = getelementptr inbounds %struct.status, ptr %0, i64 0, i32 10
  store i32 %2, ptr %30, align 4, !tbaa !496
  store i32 %3, ptr %19, align 8, !tbaa !488
  br label %31

31:                                               ; preds = %29, %22, %14, %4
  %32 = phi i32 [ %27, %22 ], [ 0, %14 ], [ 0, %29 ], [ 0, %4 ]
  ret i32 %32
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_setlinewidth(ptr nocapture noundef readonly %0, double noundef %1) #31 {
  %3 = fcmp olt double %1, 0.000000e+00
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = fmul double %1, 5.000000e-01
  %6 = fptrunc double %5 to float
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %8 = load ptr, ptr %7, align 8, !tbaa !497
  store float %6, ptr %8, align 8, !tbaa !498
  br label %9

9:                                                ; preds = %4, %2
  %10 = phi i32 [ 0, %4 ], [ -15, %2 ]
  ret i32 %10
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal float @gs_currentlinewidth(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !497
  %4 = load float, ptr %3, align 8, !tbaa !498
  %5 = fmul float %4, 2.000000e+00
  ret float %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_setlinecap(ptr nocapture noundef readonly %0, i32 noundef %1) #31 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %4 = load ptr, ptr %3, align 8, !tbaa !497
  %5 = getelementptr inbounds %struct.line_params_s, ptr %4, i64 0, i32 1
  store i32 %1, ptr %5, align 4, !tbaa !501
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @gs_currentlinecap(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !497
  %4 = getelementptr inbounds %struct.line_params_s, ptr %3, i64 0, i32 1
  %5 = load i32, ptr %4, align 4, !tbaa !501
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_setlinejoin(ptr nocapture noundef readonly %0, i32 noundef %1) #31 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %4 = load ptr, ptr %3, align 8, !tbaa !497
  %5 = getelementptr inbounds %struct.line_params_s, ptr %4, i64 0, i32 2
  store i32 %1, ptr %5, align 8, !tbaa !502
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @gs_currentlinejoin(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !497
  %4 = getelementptr inbounds %struct.line_params_s, ptr %3, i64 0, i32 2
  %5 = load i32, ptr %4, align 8, !tbaa !502
  ret i32 %5
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite) uwtable
define internal i32 @gs_setmiterlimit(ptr nocapture noundef readonly %0, double noundef %1) #48 {
  %3 = fcmp olt double %1, 1.000000e+00
  br i1 %3, label %25, label %4

4:                                                ; preds = %2
  %5 = fptrunc double %1 to float
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %7 = load ptr, ptr %6, align 8, !tbaa !497
  %8 = getelementptr inbounds %struct.line_params_s, ptr %7, i64 0, i32 3
  store float %5, ptr %8, align 4, !tbaa !503
  %9 = fmul double %1, %1
  %10 = fcmp olt double %9, 2.000100e+00
  %11 = fcmp ogt double %9, 1.999900e+00
  %12 = and i1 %10, %11
  br i1 %12, label %21, label %13

13:                                               ; preds = %4
  %14 = fadd double %9, -1.000000e+00
  %15 = tail call double @sqrt(double noundef %14) #64
  %16 = fmul double %15, 2.000000e+00
  %17 = fadd double %9, -2.000000e+00
  %18 = fdiv double %16, %17
  %19 = fptrunc double %18 to float
  %20 = load ptr, ptr %6, align 8, !tbaa !497
  br label %21

21:                                               ; preds = %13, %4
  %22 = phi ptr [ %20, %13 ], [ %7, %4 ]
  %23 = phi float [ %19, %13 ], [ 1.000000e+06, %4 ]
  %24 = getelementptr inbounds %struct.line_params_s, ptr %22, i64 0, i32 4
  store float %23, ptr %24, align 8, !tbaa !504
  br label %25

25:                                               ; preds = %21, %2
  %26 = phi i32 [ 0, %21 ], [ -15, %2 ]
  ret i32 %26
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sqrt(double noundef) local_unnamed_addr #40

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal float @gs_currentmiterlimit(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !497
  %4 = getelementptr inbounds %struct.line_params_s, ptr %3, i64 0, i32 3
  %5 = load float, ptr %4, align 4, !tbaa !503
  ret float %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_setdash(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, double noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %6 = load ptr, ptr %5, align 8, !tbaa !497
  %7 = getelementptr inbounds %struct.line_params_s, ptr %6, i64 0, i32 5
  br label %8

8:                                                ; preds = %13, %4
  %9 = phi ptr [ %1, %4 ], [ %15, %13 ]
  %10 = phi float [ 0.000000e+00, %4 ], [ %18, %13 ]
  %11 = phi i32 [ %2, %4 ], [ %14, %13 ]
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13

13:                                               ; preds = %8
  %14 = add i32 %11, -1
  %15 = getelementptr inbounds float, ptr %9, i64 1
  %16 = load float, ptr %9, align 4, !tbaa !103
  %17 = fcmp uge float %16, 0.000000e+00
  %18 = fadd float %10, %16
  br i1 %17, label %8, label %67, !llvm.loop !505

19:                                               ; preds = %8
  %.lcssa3 = phi float [ %10, %8 ]
  %20 = icmp eq i32 %2, 0
  br i1 %20, label %54, label %21

21:                                               ; preds = %19
  %22 = fcmp oeq float %.lcssa3, 0.000000e+00
  br i1 %22, label %67, label %23

23:                                               ; preds = %21
  %24 = fpext float %.lcssa3 to double
  %25 = fdiv double %3, %24
  %26 = tail call double @llvm.floor.f64(double %25)
  %27 = fneg double %26
  %28 = tail call double @llvm.fmuladd.f64(double %27, double %24, double %3)
  %29 = fptrunc double %28 to float
  %30 = load float, ptr %1, align 4, !tbaa !103
  %31 = fsub float %29, %30
  %32 = fcmp ult float %31, 0.000000e+00
  br i1 %32, label %45, label %33

33:                                               ; preds = %33, %23
  %34 = phi i64 [ %38, %33 ], [ 0, %23 ]
  %35 = phi float [ %41, %33 ], [ %31, %23 ]
  %36 = phi i8 [ %37, %33 ], [ 1, %23 ]
  %37 = xor i8 %36, 1
  %38 = add nuw nsw i64 %34, 1
  %39 = getelementptr inbounds float, ptr %1, i64 %38
  %40 = load float, ptr %39, align 4, !tbaa !103
  %41 = fsub float %35, %40
  %42 = fcmp ult float %41, 0.000000e+00
  br i1 %42, label %43, label %33, !llvm.loop !506

43:                                               ; preds = %33
  %.lcssa2 = phi i8 [ %37, %33 ]
  %.lcssa1 = phi i64 [ %38, %33 ]
  %.lcssa = phi float [ %41, %33 ]
  %44 = trunc i64 %.lcssa1 to i32
  br label %45

45:                                               ; preds = %43, %23
  %46 = phi i8 [ 1, %23 ], [ %.lcssa2, %43 ]
  %47 = phi i32 [ 0, %23 ], [ %44, %43 ]
  %48 = phi float [ %31, %23 ], [ %.lcssa, %43 ]
  %49 = tail call ptr @gs_malloc(i32 noundef %2, i32 noundef 4, ptr noundef nonnull @.str.687) #64
  %50 = icmp eq ptr %49, null
  br i1 %50, label %67, label %51

51:                                               ; preds = %45
  %52 = zext i32 %2 to i64
  %53 = shl nuw nsw i64 %52, 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %49, ptr nonnull align 4 %1, i64 %53, i1 false)
  br label %54

54:                                               ; preds = %51, %19
  %55 = phi i8 [ %46, %51 ], [ 1, %19 ]
  %56 = phi i32 [ %47, %51 ], [ 0, %19 ]
  %57 = phi float [ %48, %51 ], [ 0.000000e+00, %19 ]
  %58 = phi ptr [ %49, %51 ], [ null, %19 ]
  store ptr %58, ptr %7, align 8, !tbaa !507
  %59 = getelementptr inbounds %struct.line_params_s, ptr %6, i64 0, i32 5, i32 1
  store i32 %2, ptr %59, align 8, !tbaa !508
  %60 = fptrunc double %3 to float
  %61 = getelementptr inbounds %struct.line_params_s, ptr %6, i64 0, i32 5, i32 2
  store float %60, ptr %61, align 4, !tbaa !509
  %62 = zext i8 %55 to i32
  %63 = getelementptr inbounds %struct.line_params_s, ptr %6, i64 0, i32 5, i32 3
  store i32 %62, ptr %63, align 8, !tbaa !510
  %64 = getelementptr inbounds %struct.line_params_s, ptr %6, i64 0, i32 5, i32 4
  store i32 %56, ptr %64, align 4, !tbaa !511
  %65 = fneg float %57
  %66 = getelementptr inbounds %struct.line_params_s, ptr %6, i64 0, i32 5, i32 5
  store float %65, ptr %66, align 8, !tbaa !512
  br label %67

67:                                               ; preds = %54, %45, %21, %13
  %68 = phi i32 [ 0, %54 ], [ -15, %21 ], [ -25, %45 ], [ -15, %13 ]
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @gs_currentdash_length(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !497
  %4 = getelementptr inbounds %struct.line_params_s, ptr %3, i64 0, i32 5, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !513
  ret i32 %5
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_currentdash_pattern(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #30 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %4 = load ptr, ptr %3, align 8, !tbaa !497
  %5 = getelementptr inbounds %struct.line_params_s, ptr %4, i64 0, i32 5
  %6 = load ptr, ptr %5, align 8, !tbaa !514
  %7 = getelementptr inbounds %struct.line_params_s, ptr %4, i64 0, i32 5, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !513
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 4 %6, i64 %10, i1 false)
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable
define internal float @gs_currentdash_offset(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !497
  %4 = getelementptr inbounds %struct.line_params_s, ptr %3, i64 0, i32 5, i32 2
  %5 = load float, ptr %4, align 4, !tbaa !515
  ret float %5
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @gs_make_identity(ptr nocapture noundef writeonly %0) #30 {
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %0, ptr noundef nonnull align 8 dereferenceable(96) @gs_identity_matrix, i64 96, i1 false), !tbaa.struct !163
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_make_translation(double noundef %0, double noundef %1, ptr nocapture noundef writeonly %2) #30 {
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %2, ptr noundef nonnull align 8 dereferenceable(96) @gs_identity_matrix, i64 96, i1 false), !tbaa.struct !163
  %4 = fptrunc double %0 to float
  %5 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  store float %4, ptr %5, align 8, !tbaa !271
  %6 = fptrunc double %1 to float
  %7 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  store float %6, ptr %7, align 8, !tbaa !272
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_make_scaling(double noundef %0, double noundef %1, ptr nocapture noundef writeonly %2) #30 {
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %2, ptr noundef nonnull align 8 dereferenceable(96) @gs_identity_matrix, i64 96, i1 false), !tbaa.struct !163
  %4 = fptrunc double %0 to float
  store float %4, ptr %2, align 8, !tbaa !267
  %5 = fptrunc double %1 to float
  %6 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  store float %5, ptr %6, align 8, !tbaa !270
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(readwrite, inaccessiblemem: write) uwtable
define internal i32 @gs_make_rotation(double noundef %0, ptr nocapture noundef writeonly %1) #49 {
  %3 = fmul double %0, 0x3F91DF46A2529D39
  %4 = fptrunc double %3 to float
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %1, ptr noundef nonnull align 8 dereferenceable(96) @gs_identity_matrix, i64 96, i1 false), !tbaa.struct !163
  %5 = fpext float %4 to double
  %6 = tail call double @cos(double noundef %5) #64
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 6
  store float %7, ptr %8, align 8, !tbaa !270
  store float %7, ptr %1, align 8, !tbaa !267
  %9 = tail call double @sin(double noundef %5) #64
  %10 = fptrunc double %9 to float
  %11 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 2
  store float %10, ptr %11, align 8, !tbaa !268
  %12 = fneg float %10
  %13 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 4
  store float %12, ptr %13, align 8, !tbaa !269
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_matrix_multiply(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #33 {
  %4 = alloca float, align 8
  %5 = alloca float, align 8
  %6 = load float, ptr %0, align 8, !tbaa !267
  %7 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 6
  %8 = load float, ptr %7, align 8, !tbaa !270
  %9 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 8
  %10 = load float, ptr %9, align 8, !tbaa !271
  %11 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 10
  %12 = load float, ptr %11, align 8, !tbaa !272
  %13 = load float, ptr %1, align 8, !tbaa !267
  %14 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 6
  %15 = load float, ptr %14, align 8, !tbaa !270
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  %16 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 2
  %17 = load float, ptr %16, align 8, !tbaa !268
  store float %17, ptr %4, align 8, !tbaa !103
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  %18 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 4
  %19 = load float, ptr %18, align 8, !tbaa !269
  store float %19, ptr %5, align 8, !tbaa !103
  %20 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 2
  %21 = load i64, ptr %20, align 8
  %22 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 4
  %23 = load i64, ptr %22, align 8
  %24 = or i64 %23, %21
  %25 = and i64 %24, 9223372036854775807
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %61

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 8
  %29 = load float, ptr %28, align 8, !tbaa !271
  %30 = tail call float @llvm.fmuladd.f32(float %10, float %13, float %29)
  %31 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  store float %30, ptr %31, align 8, !tbaa !271
  %32 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 10
  %33 = load float, ptr %32, align 8, !tbaa !272
  %34 = tail call float @llvm.fmuladd.f32(float %12, float %15, float %33)
  %35 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  store float %34, ptr %35, align 8, !tbaa !272
  %36 = load i64, ptr %4, align 8
  %37 = and i64 %36, 9223372036854775807
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %27
  %40 = trunc i64 %36 to i32
  %41 = bitcast i32 %40 to float
  %42 = fmul float %6, %41
  %43 = tail call float @llvm.fmuladd.f32(float %10, float %41, float %34)
  store float %43, ptr %35, align 8, !tbaa !272
  br label %44

44:                                               ; preds = %39, %27
  %45 = phi float [ %42, %39 ], [ 0.000000e+00, %27 ]
  %46 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  store float %45, ptr %46, align 8
  %47 = fmul float %6, %13
  store float %47, ptr %2, align 8, !tbaa !267
  %48 = load i64, ptr %5, align 8
  %49 = and i64 %48, 9223372036854775807
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %44
  %52 = trunc i64 %48 to i32
  %53 = bitcast i32 %52 to float
  %54 = fmul float %8, %53
  %55 = tail call float @llvm.fmuladd.f32(float %12, float %53, float %30)
  store float %55, ptr %31, align 8, !tbaa !271
  br label %56

56:                                               ; preds = %51, %44
  %57 = phi float [ %54, %51 ], [ 0.000000e+00, %44 ]
  %58 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  store float %57, ptr %58, align 8
  %59 = fmul float %8, %15
  %60 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  store float %59, ptr %60, align 8, !tbaa !270
  br label %89

61:                                               ; preds = %3
  %62 = trunc i64 %23 to i32
  %63 = bitcast i32 %62 to float
  %64 = trunc i64 %21 to i32
  %65 = bitcast i32 %64 to float
  %66 = fmul float %19, %65
  %67 = tail call float @llvm.fmuladd.f32(float %6, float %13, float %66)
  store float %67, ptr %2, align 8, !tbaa !267
  %68 = fmul float %15, %65
  %69 = tail call float @llvm.fmuladd.f32(float %6, float %17, float %68)
  %70 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  store float %69, ptr %70, align 8, !tbaa !268
  %71 = fmul float %8, %15
  %72 = tail call float @llvm.fmuladd.f32(float %63, float %17, float %71)
  %73 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  store float %72, ptr %73, align 8, !tbaa !270
  %74 = fmul float %8, %19
  %75 = tail call float @llvm.fmuladd.f32(float %63, float %13, float %74)
  %76 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  store float %75, ptr %76, align 8, !tbaa !269
  %77 = fmul float %12, %19
  %78 = tail call float @llvm.fmuladd.f32(float %10, float %13, float %77)
  %79 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 8
  %80 = load float, ptr %79, align 8, !tbaa !271
  %81 = fadd float %78, %80
  %82 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  store float %81, ptr %82, align 8, !tbaa !271
  %83 = fmul float %12, %15
  %84 = tail call float @llvm.fmuladd.f32(float %10, float %17, float %83)
  %85 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 10
  %86 = load float, ptr %85, align 8, !tbaa !272
  %87 = fadd float %84, %86
  %88 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  store float %87, ptr %88, align 8, !tbaa !272
  br label %89

89:                                               ; preds = %61, %56
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #19

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_matrix_invert(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #33 {
  %3 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %3, align 8
  %5 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 4
  %6 = load i64, ptr %5, align 8
  %7 = or i64 %6, %4
  %8 = and i64 %7, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = trunc i64 %6 to i32
  %11 = bitcast i32 %10 to float
  br i1 %9, label %12, label %40

12:                                               ; preds = %2
  %13 = load i64, ptr %0, align 8
  %14 = and i64 %13, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = trunc i64 %13 to i32
  %17 = bitcast i32 %16 to float
  br i1 %15, label %73, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 6
  %20 = load i64, ptr %19, align 8
  %21 = and i64 %20, 9223372036854775807
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %73, label %23

23:                                               ; preds = %18
  %24 = trunc i64 %20 to i32
  %25 = bitcast i32 %24 to float
  %26 = fdiv float 1.000000e+00, %17
  store float %26, ptr %1, align 8, !tbaa !267
  %27 = fneg float %26
  %28 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 8
  %29 = load float, ptr %28, align 8, !tbaa !271
  %30 = fmul float %29, %27
  %31 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 8
  store float %30, ptr %31, align 8, !tbaa !271
  %32 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 2
  store float 0.000000e+00, ptr %32, align 8, !tbaa !268
  %33 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 4
  store float 0.000000e+00, ptr %33, align 8, !tbaa !269
  %34 = fdiv float 1.000000e+00, %25
  %35 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 6
  store float %34, ptr %35, align 8, !tbaa !270
  %36 = fneg float %34
  %37 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 10
  %38 = load float, ptr %37, align 8, !tbaa !272
  %39 = fmul float %38, %36
  br label %70

40:                                               ; preds = %2
  %41 = trunc i64 %4 to i32
  %42 = bitcast i32 %41 to float
  %43 = load float, ptr %0, align 8, !tbaa !267
  %44 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 6
  %45 = load float, ptr %44, align 8, !tbaa !270
  %46 = fneg float %42
  %47 = fmul float %11, %46
  %48 = tail call float @llvm.fmuladd.f32(float %43, float %45, float %47)
  %49 = fcmp oeq float %48, 0.000000e+00
  br i1 %49, label %73, label %50

50:                                               ; preds = %40
  %51 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 8
  %52 = load float, ptr %51, align 8, !tbaa !271
  %53 = fdiv float %45, %48
  store float %53, ptr %1, align 8, !tbaa !267
  %54 = fdiv float %46, %48
  %55 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 2
  store float %54, ptr %55, align 8, !tbaa !268
  %56 = fneg float %11
  %57 = fdiv float %56, %48
  %58 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 4
  store float %57, ptr %58, align 8, !tbaa !269
  %59 = fdiv float %43, %48
  %60 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 6
  store float %59, ptr %60, align 8, !tbaa !270
  %61 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 10
  %62 = load float, ptr %61, align 8, !tbaa !272
  %63 = fmul float %57, %62
  %64 = tail call float @llvm.fmuladd.f32(float %52, float %53, float %63)
  %65 = fneg float %64
  %66 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 8
  store float %65, ptr %66, align 8, !tbaa !271
  %67 = fmul float %59, %62
  %68 = tail call float @llvm.fmuladd.f32(float %52, float %54, float %67)
  %69 = fneg float %68
  br label %70

70:                                               ; preds = %50, %23
  %71 = phi float [ %39, %23 ], [ %69, %50 ]
  %72 = getelementptr inbounds %struct.gs_matrix_s, ptr %1, i64 0, i32 10
  store float %71, ptr %72, align 8, !tbaa !272
  br label %73

73:                                               ; preds = %70, %40, %18, %12
  %74 = phi i32 [ -23, %18 ], [ -23, %12 ], [ -23, %40 ], [ 0, %70 ]
  ret i32 %74
}

; Function Attrs: nofree nounwind optsize memory(write, argmem: readwrite) uwtable
define internal i32 @gs_matrix_rotate(ptr nocapture noundef readonly %0, double noundef %1, ptr nocapture noundef writeonly %2) #50 {
  %4 = fcmp oge double %1, -3.600000e+02
  %5 = fcmp ole double %1, 3.600000e+02
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = fptosi double %1 to i32
  %9 = sdiv i32 %8, 90
  %10 = mul nsw i32 %9, 90
  %11 = sitofp i32 %10 to double
  %12 = fcmp oeq double %11, %1
  br i1 %12, label %13, label %29

13:                                               ; preds = %7
  %14 = and i32 %9, 3
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %16, %13
  %17 = phi i32 [ %20, %16 ], [ %14, %13 ]
  %18 = phi i32 [ %21, %16 ], [ 1, %13 ]
  %19 = phi i32 [ %18, %16 ], [ 0, %13 ]
  %20 = add nsw i32 %17, -1
  %21 = sub nsw i32 0, %19
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %23, label %16, !llvm.loop !516

23:                                               ; preds = %16
  %.lcssa1 = phi i32 [ %18, %16 ]
  %.lcssa = phi i32 [ %21, %16 ]
  %24 = sitofp i32 %.lcssa to float
  br label %25

25:                                               ; preds = %23, %13
  %26 = phi i32 [ 0, %13 ], [ %.lcssa1, %23 ]
  %27 = phi float [ 1.000000e+00, %13 ], [ %24, %23 ]
  %28 = sitofp i32 %26 to float
  br label %37

29:                                               ; preds = %7, %3
  %30 = fmul double %1, 0x3F91DF46A2529D39
  %31 = fptrunc double %30 to float
  %32 = fpext float %31 to double
  %33 = tail call double @sin(double noundef %32) #64
  %34 = fptrunc double %33 to float
  %35 = tail call double @cos(double noundef %32) #64
  %36 = fptrunc double %35 to float
  br label %37

37:                                               ; preds = %29, %25
  %38 = phi float [ %27, %25 ], [ %36, %29 ]
  %39 = phi float [ %28, %25 ], [ %34, %29 ]
  %40 = load float, ptr %0, align 8, !tbaa !267
  %41 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 2
  %42 = load float, ptr %41, align 8, !tbaa !268
  %43 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 4
  %44 = load float, ptr %43, align 8, !tbaa !269
  %45 = fmul float %39, %44
  %46 = tail call float @llvm.fmuladd.f32(float %38, float %40, float %45)
  store float %46, ptr %2, align 8, !tbaa !267
  %47 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 6
  %48 = load float, ptr %47, align 8, !tbaa !270
  %49 = fmul float %39, %48
  %50 = tail call float @llvm.fmuladd.f32(float %38, float %42, float %49)
  %51 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  store float %50, ptr %51, align 8, !tbaa !268
  %52 = fneg float %39
  %53 = fmul float %40, %52
  %54 = tail call float @llvm.fmuladd.f32(float %38, float %44, float %53)
  %55 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  store float %54, ptr %55, align 8, !tbaa !269
  %56 = fmul float %42, %52
  %57 = tail call float @llvm.fmuladd.f32(float %38, float %48, float %56)
  %58 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  store float %57, ptr %58, align 8, !tbaa !270
  %59 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 8
  %60 = load float, ptr %59, align 8, !tbaa !271
  %61 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  store float %60, ptr %61, align 8, !tbaa !271
  %62 = getelementptr inbounds %struct.gs_matrix_s, ptr %0, i64 0, i32 10
  %63 = load float, ptr %62, align 8, !tbaa !272
  %64 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  store float %63, ptr %64, align 8, !tbaa !272
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_point_transform(double noundef %0, double noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #33 {
  %5 = load float, ptr %2, align 8, !tbaa !267
  %6 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  %7 = load float, ptr %6, align 8, !tbaa !271
  %8 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  %9 = load float, ptr %8, align 8, !tbaa !270
  %10 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  %11 = load float, ptr %10, align 8, !tbaa !272
  %12 = getelementptr inbounds %struct.gs_point_s, ptr %3, i64 0, i32 1
  %13 = insertelement <2 x float> poison, float %5, i64 0
  %14 = insertelement <2 x float> %13, float %9, i64 1
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = insertelement <2 x float> poison, float %7, i64 0
  %17 = insertelement <2 x float> %16, float %11, i64 1
  %18 = fpext <2 x float> %17 to <2 x double>
  %19 = insertelement <2 x double> poison, double %0, i64 0
  %20 = insertelement <2 x double> %19, double %1, i64 1
  %21 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %20, <2 x double> %15, <2 x double> %18)
  %22 = fptrunc <2 x double> %21 to <2 x float>
  store <2 x float> %22, ptr %3, align 4, !tbaa !103
  %23 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 9223372036854775807
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %4
  %28 = trunc i64 %24 to i32
  %29 = bitcast i32 %28 to float
  %30 = fpext float %29 to double
  %31 = extractelement <2 x float> %22, i64 0
  %32 = fpext float %31 to double
  %33 = tail call double @llvm.fmuladd.f64(double %1, double %30, double %32)
  %34 = fptrunc double %33 to float
  store float %34, ptr %3, align 4, !tbaa !230
  br label %35

35:                                               ; preds = %27, %4
  %36 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  %37 = load i64, ptr %36, align 8
  %38 = and i64 %37, 9223372036854775807
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = trunc i64 %37 to i32
  %42 = bitcast i32 %41 to float
  %43 = fpext float %42 to double
  %44 = extractelement <2 x float> %22, i64 1
  %45 = fpext float %44 to double
  %46 = tail call double @llvm.fmuladd.f64(double %0, double %43, double %45)
  %47 = fptrunc double %46 to float
  store float %47, ptr %12, align 4, !tbaa !232
  br label %48

48:                                               ; preds = %40, %35
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #19

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_point_transform_inverse(double noundef %0, double noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #33 {
  %5 = alloca %struct.gs_matrix_s, align 8
  %6 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  %7 = load i64, ptr %6, align 8, !tbaa !18
  %8 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  %9 = load i64, ptr %8, align 8, !tbaa !18
  %10 = or i64 %9, %7
  %11 = and i64 %10, 9223372036854775807
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %32

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 8
  %15 = load float, ptr %14, align 8, !tbaa !271
  %16 = load float, ptr %2, align 8, !tbaa !267
  %17 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 10
  %18 = load float, ptr %17, align 8, !tbaa !272
  %19 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  %20 = load float, ptr %19, align 8, !tbaa !270
  %21 = insertelement <2 x float> poison, float %15, i64 0
  %22 = insertelement <2 x float> %21, float %18, i64 1
  %23 = fpext <2 x float> %22 to <2 x double>
  %24 = insertelement <2 x double> poison, double %0, i64 0
  %25 = insertelement <2 x double> %24, double %1, i64 1
  %26 = fsub <2 x double> %25, %23
  %27 = insertelement <2 x float> poison, float %16, i64 0
  %28 = insertelement <2 x float> %27, float %20, i64 1
  %29 = fpext <2 x float> %28 to <2 x double>
  %30 = fdiv <2 x double> %26, %29
  %31 = fptrunc <2 x double> %30 to <2 x float>
  store <2 x float> %31, ptr %3, align 4, !tbaa !103
  br label %38

32:                                               ; preds = %4
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %5) #65
  %33 = call i32 @gs_matrix_invert(ptr noundef nonnull %2, ptr noundef nonnull %5) #62, !range !180
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %32
  %36 = call i32 @gs_point_transform(double noundef %0, double noundef %1, ptr noundef nonnull %5, ptr noundef %3) #62
  br label %37

37:                                               ; preds = %35, %32
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %5) #65
  br label %38

38:                                               ; preds = %37, %13
  %39 = phi i32 [ 0, %13 ], [ %33, %37 ]
  ret i32 %39
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_distance_transform(double noundef %0, double noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #33 {
  %5 = load float, ptr %2, align 8, !tbaa !267
  %6 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  %7 = load float, ptr %6, align 8, !tbaa !270
  %8 = getelementptr inbounds %struct.gs_point_s, ptr %3, i64 0, i32 1
  %9 = insertelement <2 x float> poison, float %5, i64 0
  %10 = insertelement <2 x float> %9, float %7, i64 1
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = insertelement <2 x double> poison, double %0, i64 0
  %13 = insertelement <2 x double> %12, double %1, i64 1
  %14 = fmul <2 x double> %13, %11
  %15 = fptrunc <2 x double> %14 to <2 x float>
  store <2 x float> %15, ptr %3, align 4, !tbaa !103
  %16 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %17, 9223372036854775807
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %4
  %21 = trunc i64 %17 to i32
  %22 = bitcast i32 %21 to float
  %23 = fpext float %22 to double
  %24 = extractelement <2 x float> %15, i64 0
  %25 = fpext float %24 to double
  %26 = tail call double @llvm.fmuladd.f64(double %1, double %23, double %25)
  %27 = fptrunc double %26 to float
  store float %27, ptr %3, align 4, !tbaa !230
  br label %28

28:                                               ; preds = %20, %4
  %29 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 9223372036854775807
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %28
  %34 = trunc i64 %30 to i32
  %35 = bitcast i32 %34 to float
  %36 = fpext float %35 to double
  %37 = extractelement <2 x float> %15, i64 1
  %38 = fpext float %37 to double
  %39 = tail call double @llvm.fmuladd.f64(double %0, double %36, double %38)
  %40 = fptrunc double %39 to float
  store float %40, ptr %8, align 4, !tbaa !232
  br label %41

41:                                               ; preds = %33, %28
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_distance_transform_inverse(double noundef %0, double noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #33 {
  %5 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 2
  %6 = load i64, ptr %5, align 8
  %7 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 4
  %8 = load i64, ptr %7, align 8
  %9 = or i64 %8, %6
  %10 = and i64 %9, 9223372036854775807
  %11 = icmp eq i64 %10, 0
  %12 = trunc i64 %6 to i32
  %13 = bitcast i32 %12 to float
  %14 = trunc i64 %8 to i32
  %15 = bitcast i32 %14 to float
  %16 = load float, ptr %2, align 8, !tbaa !267
  br i1 %11, label %17, label %25

17:                                               ; preds = %4
  %18 = fpext float %16 to double
  %19 = fdiv double %0, %18
  %20 = fptrunc double %19 to float
  store float %20, ptr %3, align 4, !tbaa !230
  %21 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  %22 = load float, ptr %21, align 8, !tbaa !270
  %23 = fpext float %22 to double
  %24 = fdiv double %1, %23
  br label %47

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.gs_matrix_s, ptr %2, i64 0, i32 6
  %27 = load float, ptr %26, align 8, !tbaa !270
  %28 = fneg float %13
  %29 = fmul float %15, %28
  %30 = tail call float @llvm.fmuladd.f32(float %16, float %27, float %29)
  %31 = fcmp oeq float %30, 0.000000e+00
  br i1 %31, label %51, label %32

32:                                               ; preds = %25
  %33 = fpext float %30 to double
  %34 = fpext float %27 to double
  %35 = fpext float %15 to double
  %36 = fneg double %35
  %37 = fmul double %36, %1
  %38 = tail call double @llvm.fmuladd.f64(double %0, double %34, double %37)
  %39 = fdiv double %38, %33
  %40 = fptrunc double %39 to float
  store float %40, ptr %3, align 4, !tbaa !230
  %41 = fpext float %16 to double
  %42 = fpext float %13 to double
  %43 = fneg double %42
  %44 = fmul double %43, %0
  %45 = tail call double @llvm.fmuladd.f64(double %1, double %41, double %44)
  %46 = fdiv double %45, %33
  br label %47

47:                                               ; preds = %32, %17
  %48 = phi double [ %24, %17 ], [ %46, %32 ]
  %49 = fptrunc double %48 to float
  %50 = getelementptr inbounds %struct.gs_point_s, ptr %3, i64 0, i32 1
  store float %49, ptr %50, align 4, !tbaa !232
  br label %51

51:                                               ; preds = %47, %25
  %52 = phi i32 [ -23, %25 ], [ 0, %47 ]
  ret i32 %52
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_bbox_transform_inverse(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #33 {
  %4 = alloca %struct.gs_point_s, align 8
  %5 = alloca %struct.gs_point_s, align 8
  %6 = alloca %struct.gs_point_s, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #65
  %7 = load float, ptr %0, align 4, !tbaa !284
  %8 = fpext float %7 to double
  %9 = getelementptr inbounds %struct.gs_point_s, ptr %0, i64 0, i32 1
  %10 = load float, ptr %9, align 4, !tbaa !286
  %11 = fpext float %10 to double
  %12 = call i32 @gs_point_transform_inverse(double noundef %8, double noundef %11, ptr noundef %1, ptr noundef nonnull %4) #62, !range !263
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %45, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.gs_rect_s, ptr %0, i64 0, i32 1
  %16 = load float, ptr %15, align 4, !tbaa !287
  %17 = fsub float %16, %7
  %18 = fpext float %17 to double
  %19 = call i32 @gs_distance_transform_inverse(double noundef %18, double noundef 0.000000e+00, ptr noundef %1, ptr noundef nonnull %5) #62, !range !180
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %45, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.gs_rect_s, ptr %0, i64 0, i32 1, i32 1
  %23 = load float, ptr %22, align 4, !tbaa !288
  %24 = fsub float %23, %10
  %25 = fpext float %24 to double
  %26 = call i32 @gs_distance_transform_inverse(double noundef 0.000000e+00, double noundef %25, ptr noundef %1, ptr noundef nonnull %6) #62, !range !180
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %45, label %28

28:                                               ; preds = %21
  %29 = load <2 x float>, ptr %4, align 8, !tbaa !103
  %30 = load <2 x float>, ptr %5, align 8, !tbaa !103
  %31 = fcmp olt <2 x float> %30, zeroinitializer
  %32 = shufflevector <2 x i1> %31, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %33 = fadd <2 x float> %29, %30
  %34 = shufflevector <2 x float> %33, <2 x float> %29, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %35 = shufflevector <2 x float> %33, <2 x float> %29, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %36 = select <4 x i1> %32, <4 x float> %34, <4 x float> %35
  %37 = load <2 x float>, ptr %6, align 8, !tbaa !103
  %38 = fcmp olt <2 x float> %37, zeroinitializer
  %39 = shufflevector <2 x i1> %38, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %40 = shufflevector <2 x float> %37, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %41 = shufflevector <4 x float> %40, <4 x float> <float poison, float poison, float -0.000000e+00, float -0.000000e+00>, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %42 = shufflevector <4 x float> <float -0.000000e+00, float -0.000000e+00, float poison, float poison>, <4 x float> %40, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %43 = select <4 x i1> %39, <4 x float> %41, <4 x float> %42
  %44 = fadd <4 x float> %36, %43
  store <4 x float> %44, ptr %2, align 4, !tbaa !103
  br label %45

45:                                               ; preds = %28, %21, %14, %3
  %46 = phi i32 [ 0, %28 ], [ %12, %3 ], [ %19, %14 ], [ %26, %21 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  ret i32 %46
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_point_transform2fixed(ptr nocapture noundef readonly %0, double noundef %1, double noundef %2, ptr nocapture noundef writeonly %3) #28 {
  %5 = load float, ptr %0, align 8, !tbaa !517
  %6 = fpext float %5 to double
  %7 = fmul double %6, %1
  %8 = fmul double %7, 4.096000e+03
  %9 = fptosi double %8 to i64
  %10 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 12
  %11 = load i64, ptr %10, align 8, !tbaa !518
  %12 = add nsw i64 %11, %9
  store i64 %12, ptr %3, align 8, !tbaa !247
  %13 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 6
  %14 = load float, ptr %13, align 8, !tbaa !519
  %15 = fpext float %14 to double
  %16 = fmul double %15, %2
  %17 = fmul double %16, 4.096000e+03
  %18 = fptosi double %17 to i64
  %19 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 13
  %20 = load i64, ptr %19, align 8, !tbaa !520
  %21 = add nsw i64 %20, %18
  %22 = getelementptr inbounds %struct.timeval, ptr %3, i64 0, i32 1
  store i64 %21, ptr %22, align 8, !tbaa !249
  %23 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 4
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 9223372036854775807
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %4
  %28 = trunc i64 %24 to i32
  %29 = bitcast i32 %28 to float
  %30 = fpext float %29 to double
  %31 = fmul double %30, %2
  %32 = fmul double %31, 4.096000e+03
  %33 = fptosi double %32 to i64
  %34 = add nsw i64 %12, %33
  store i64 %34, ptr %3, align 8, !tbaa !247
  br label %35

35:                                               ; preds = %27, %4
  %36 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 2
  %37 = load i64, ptr %36, align 8
  %38 = and i64 %37, 9223372036854775807
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = trunc i64 %37 to i32
  %42 = bitcast i32 %41 to float
  %43 = fpext float %42 to double
  %44 = fmul double %43, %1
  %45 = fmul double %44, 4.096000e+03
  %46 = fptosi double %45 to i64
  %47 = add nsw i64 %21, %46
  store i64 %47, ptr %22, align 8, !tbaa !249
  br label %48

48:                                               ; preds = %40, %35
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_distance_transform2fixed(ptr nocapture noundef readonly %0, double noundef %1, double noundef %2, ptr nocapture noundef writeonly %3) #28 {
  %5 = load float, ptr %0, align 8, !tbaa !517
  %6 = fpext float %5 to double
  %7 = fmul double %6, %1
  %8 = fmul double %7, 4.096000e+03
  %9 = fptosi double %8 to i64
  store i64 %9, ptr %3, align 8, !tbaa !247
  %10 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 6
  %11 = load float, ptr %10, align 8, !tbaa !519
  %12 = fpext float %11 to double
  %13 = fmul double %12, %2
  %14 = fmul double %13, 4.096000e+03
  %15 = fptosi double %14 to i64
  %16 = getelementptr inbounds %struct.timeval, ptr %3, i64 0, i32 1
  store i64 %15, ptr %16, align 8, !tbaa !249
  %17 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 4
  %18 = load i64, ptr %17, align 8
  %19 = and i64 %18, 9223372036854775807
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %29, label %21

21:                                               ; preds = %4
  %22 = trunc i64 %18 to i32
  %23 = bitcast i32 %22 to float
  %24 = fpext float %23 to double
  %25 = fmul double %24, %2
  %26 = fmul double %25, 4.096000e+03
  %27 = fptosi double %26 to i64
  %28 = add nsw i64 %27, %9
  store i64 %28, ptr %3, align 8, !tbaa !247
  br label %29

29:                                               ; preds = %21, %4
  %30 = getelementptr inbounds %struct.gs_matrix_fixed_s, ptr %0, i64 0, i32 2
  %31 = load i64, ptr %30, align 8
  %32 = and i64 %31, 9223372036854775807
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = trunc i64 %31 to i32
  %36 = bitcast i32 %35 to float
  %37 = fpext float %36 to double
  %38 = fmul double %37, %1
  %39 = fmul double %38, 4.096000e+03
  %40 = fptosi double %39 to i64
  %41 = add nsw i64 %40, %15
  store i64 %41, ptr %16, align 8, !tbaa !249
  br label %42

42:                                               ; preds = %34, %29
  ret i32 0
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @gs_malloc(i32 noundef %0, i32 noundef %1, ptr noundef %2) #18 {
  %4 = mul i32 %1, %0
  %5 = zext i32 %4 to i64
  %6 = tail call noalias ptr @malloc(i64 noundef %5) #70
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = load ptr, ptr @stderr, align 8, !tbaa !7
  %10 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef nonnull @.str.722, ptr noundef nonnull @.str.1.723, i32 noundef 42) #66
  %11 = load ptr, ptr @stderr, align 8, !tbaa !7
  %12 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %11, ptr noundef nonnull @.str.2.724, ptr noundef %2) #66
  br label %13

13:                                               ; preds = %8, %3
  ret ptr %6
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #51

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @gs_free(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readnone %3) #52 {
  tail call void @free(ptr noundef %0) #64
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #53

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_erasepage(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  %4 = load ptr, ptr %3, align 8, !tbaa !328
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !25
  %7 = getelementptr inbounds %struct.gx_device_procs_s, ptr %6, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !455
  %9 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !377
  %11 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 4
  %12 = load i32, ptr %11, align 4, !tbaa !266
  %13 = getelementptr inbounds %struct.device_s, ptr %3, i64 0, i32 2
  %14 = load i64, ptr %13, align 8, !tbaa !330
  %15 = tail call i32 %8(ptr noundef %4, i32 noundef 0, i32 noundef 0, i32 noundef %10, i32 noundef %12, i64 noundef %14) #64
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_fill(ptr noundef %0) #0 {
  %2 = tail call i32 @gs_fill_trim(ptr noundef %0, i64 noundef 0) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_fill_trim(ptr noundef %0, i64 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 20
  %4 = load i8, ptr %3, align 1, !tbaa !312
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !244
  %9 = load ptr, ptr %0, align 8, !tbaa !521
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %9, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8, !tbaa !244
  %12 = tail call i32 @gx_path_merge(ptr noundef %8, ptr noundef %11) #64
  br label %23

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %15 = load ptr, ptr %14, align 8, !tbaa !332
  %16 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 14
  %17 = load ptr, ptr %16, align 8, !tbaa !333
  %18 = tail call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %15, ptr noundef %17, ptr noundef nonnull %0) #64
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8, !tbaa !244
  %21 = load ptr, ptr %16, align 8, !tbaa !333
  %22 = tail call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef %20, ptr noundef %21, ptr noundef nonnull %0, i32 noundef -1, i64 noundef %1) #64
  br label %23

23:                                               ; preds = %13, %6
  %24 = phi i32 [ %12, %6 ], [ %22, %13 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %23
  %27 = tail call i32 (ptr, ...) @gs_newpath(ptr noundef nonnull %0) #64
  br label %28

28:                                               ; preds = %26, %23
  ret i32 %24
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_eofill(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %3 = load ptr, ptr %2, align 8, !tbaa !332
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 14
  %5 = load ptr, ptr %4, align 8, !tbaa !333
  %6 = tail call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %3, ptr noundef %5, ptr noundef %0) #64
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 20
  %8 = load i8, ptr %7, align 1, !tbaa !312
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8, !tbaa !244
  %13 = load ptr, ptr %0, align 8, !tbaa !521
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %13, i64 0, i32 7
  %15 = load ptr, ptr %14, align 8, !tbaa !244
  %16 = tail call i32 @gx_path_merge(ptr noundef %12, ptr noundef %15) #64
  br label %25

17:                                               ; preds = %1
  %18 = load ptr, ptr %2, align 8, !tbaa !332
  %19 = load ptr, ptr %4, align 8, !tbaa !333
  %20 = tail call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %18, ptr noundef %19, ptr noundef nonnull %0) #64
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %22 = load ptr, ptr %21, align 8, !tbaa !244
  %23 = load ptr, ptr %4, align 8, !tbaa !333
  %24 = tail call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef %22, ptr noundef %23, ptr noundef nonnull %0, i32 noundef 1, i64 noundef 0) #64
  br label %25

25:                                               ; preds = %17, %10
  %26 = phi i32 [ %16, %10 ], [ %24, %17 ]
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = tail call i32 (ptr, ...) @gs_newpath(ptr noundef nonnull %0) #64
  br label %30

30:                                               ; preds = %28, %25
  ret i32 %26
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_stroke(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 20
  %3 = load i8, ptr %2, align 1, !tbaa !312
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !244
  %8 = load ptr, ptr %0, align 8, !tbaa !521
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %8, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !244
  %11 = tail call i32 @gx_path_merge(ptr noundef %7, ptr noundef %10) #64
  br label %21

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %14 = load ptr, ptr %13, align 8, !tbaa !332
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 14
  %16 = load ptr, ptr %15, align 8, !tbaa !333
  %17 = tail call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %14, ptr noundef %16, ptr noundef nonnull %0) #64
  %18 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %19 = load ptr, ptr %18, align 8, !tbaa !244
  %20 = tail call i32 (ptr, ptr, ...) @gx_stroke_fill(ptr noundef %19, ptr noundef nonnull %0) #64
  br label %21

21:                                               ; preds = %12, %5
  %22 = phi i32 [ %11, %5 ], [ %20, %12 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = tail call i32 (ptr, ...) @gs_newpath(ptr noundef nonnull %0) #64
  br label %26

26:                                               ; preds = %24, %21
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_strokepath(ptr noundef %0) #0 {
  %2 = alloca %struct.gx_path_s, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 1
  call void @gx_path_init(ptr noundef nonnull %2, ptr noundef nonnull %3) #64
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !244
  %6 = call i32 (ptr, ptr, ptr, ...) @gx_stroke_add(ptr noundef %5, ptr noundef nonnull %2, ptr noundef %0) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = load ptr, ptr %4, align 8, !tbaa !244
  call void @gx_path_release(ptr noundef %9) #64
  %10 = load ptr, ptr %4, align 8, !tbaa !244
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %10, ptr noundef nonnull align 8 dereferenceable(144) %2, i64 144, i1 false), !tbaa.struct !522
  br label %11

11:                                               ; preds = %8, %1
  %12 = phi i32 [ 0, %8 ], [ %6, %1 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #65
  ret i32 %12
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_imagemask(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = alloca %struct.gs_image_enum_s, align 8
  call void @llvm.lifetime.start.p0(i64 8376, ptr nonnull %7) #65
  %8 = call i32 @gs_imagemask_init(ptr noundef nonnull %7, ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4) #64
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %6
  %11 = add i32 %1, 7
  %12 = lshr i32 %11, 3
  %13 = mul i32 %12, %2
  %14 = call i32 @gs_image_next(ptr noundef nonnull %7, ptr noundef %5, i32 noundef %13) #64
  %15 = call i32 @llvm.smin.i32(i32 %14, i32 0)
  br label %16

16:                                               ; preds = %10, %6
  %17 = phi i32 [ %15, %10 ], [ %8, %6 ]
  call void @llvm.lifetime.end.p0(i64 8376, ptr nonnull %7) #65
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_newpath(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8, !tbaa !244
  tail call void @gx_path_release(ptr noundef %3) #64
  %4 = load ptr, ptr %2, align 8, !tbaa !244
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 1
  tail call void @gx_path_init(ptr noundef %4, ptr noundef nonnull %5) #64
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_closepath(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %3 = load ptr, ptr %2, align 8, !tbaa !244
  %4 = tail call i32 @gx_path_close_subpath(ptr noundef %3) #64
  ret i32 %4
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_currentpoint(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !244
  %6 = call i32 @gx_path_current_point(ptr noundef %5, ptr noundef nonnull %3) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = load i64, ptr %3, align 8, !tbaa !247
  %10 = sitofp i64 %9 to double
  %11 = fmul double %10, 0x3F30000000000000
  %12 = fptrunc double %11 to float
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds %struct.timeval, ptr %3, i64 0, i32 1
  %15 = load i64, ptr %14, align 8, !tbaa !249
  %16 = sitofp i64 %15 to double
  %17 = fmul double %16, 0x3F30000000000000
  %18 = fptrunc double %17 to float
  %19 = fpext float %18 to double
  %20 = call i32 (ptr, double, double, ptr, ...) @gs_itransform(ptr noundef nonnull %0, double noundef %13, double noundef %19, ptr noundef %1) #64
  br label %21

21:                                               ; preds = %8, %2
  %22 = phi i32 [ %20, %8 ], [ %6, %2 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #65
  ret i32 %22
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_moveto(ptr noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %6 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %5, double noundef %1, double noundef %2, ptr noundef nonnull %4) #64
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %8, label %15

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !244
  %11 = load i64, ptr %4, align 8, !tbaa !247
  %12 = getelementptr inbounds %struct.timeval, ptr %4, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !249
  %14 = call i32 @gx_path_add_point(ptr noundef %10, i64 noundef %11, i64 noundef %13) #64
  br label %15

15:                                               ; preds = %8, %3
  %16 = phi i32 [ %14, %8 ], [ %6, %3 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_rmoveto(ptr noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %6 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %5, double noundef %1, double noundef %2, ptr noundef nonnull %4) #64
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %8, label %15

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !244
  %11 = load i64, ptr %4, align 8, !tbaa !247
  %12 = getelementptr inbounds %struct.timeval, ptr %4, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !249
  %14 = call i32 @gx_path_add_relative_point(ptr noundef %10, i64 noundef %11, i64 noundef %13) #64
  br label %15

15:                                               ; preds = %8, %3
  %16 = phi i32 [ %14, %8 ], [ %6, %3 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_lineto(ptr noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %6 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %5, double noundef %1, double noundef %2, ptr noundef nonnull %4) #64
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %8, label %15

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !244
  %11 = load i64, ptr %4, align 8, !tbaa !247
  %12 = getelementptr inbounds %struct.timeval, ptr %4, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !249
  %14 = call i32 @gx_path_add_line(ptr noundef %10, i64 noundef %11, i64 noundef %13) #64
  br label %15

15:                                               ; preds = %8, %3
  %16 = phi i32 [ %14, %8 ], [ %6, %3 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_rlineto(ptr noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.timeval, align 8
  %5 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #65
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !244
  %8 = call i32 @gx_path_current_point(ptr noundef %7, ptr noundef nonnull %4) #64
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %25, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %12 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %11, double noundef %1, double noundef %2, ptr noundef nonnull %5) #64
  %13 = icmp sgt i32 %12, -1
  br i1 %13, label %14, label %25

14:                                               ; preds = %10
  %15 = load ptr, ptr %6, align 8, !tbaa !244
  %16 = load i64, ptr %4, align 8, !tbaa !247
  %17 = load i64, ptr %5, align 8, !tbaa !247
  %18 = add nsw i64 %17, %16
  %19 = getelementptr inbounds %struct.timeval, ptr %4, i64 0, i32 1
  %20 = load i64, ptr %19, align 8, !tbaa !249
  %21 = getelementptr inbounds %struct.timeval, ptr %5, i64 0, i32 1
  %22 = load i64, ptr %21, align 8, !tbaa !249
  %23 = add nsw i64 %22, %20
  %24 = call i32 @gx_path_add_line(ptr noundef %15, i64 noundef %18, i64 noundef %23) #64
  br label %25

25:                                               ; preds = %14, %10, %3
  %26 = phi i32 [ %8, %3 ], [ %24, %14 ], [ %12, %10 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  ret i32 %26
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_arc(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5) #0 {
  %7 = tail call i32 @arc_either(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, i32 noundef 0) #62
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @arc_either(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, i32 noundef %6) #0 {
  %8 = fmul double %4, 4.096000e+03
  %9 = fptosi double %8 to i64
  %10 = fmul double %5, 4.096000e+03
  %11 = fptosi double %10 to i64
  %12 = fcmp olt double %3, 0.000000e+00
  br i1 %12, label %156, label %13

13:                                               ; preds = %7
  %14 = icmp eq i64 %9, %11
  br i1 %14, label %27, label %15

15:                                               ; preds = %13
  %16 = srem i64 %9, 1474560
  %17 = srem i64 %11, 1474560
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = icmp slt i64 %17, %16
  %21 = add nsw i64 %16, 1474560
  %22 = select i1 %20, i64 %16, i64 %21
  br label %27

23:                                               ; preds = %15
  %24 = icmp sgt i64 %17, %16
  %25 = add nsw i64 %17, 1474560
  %26 = select i1 %24, i64 %17, i64 %25
  br label %27

27:                                               ; preds = %23, %19, %13
  %28 = phi i64 [ %9, %13 ], [ %17, %19 ], [ %26, %23 ]
  %29 = phi i64 [ %9, %13 ], [ %22, %19 ], [ %16, %23 ]
  %30 = sitofp i64 %29 to double
  %31 = fmul double %30, 0x3F30000000000000
  %32 = fptrunc double %31 to float
  %33 = fpext float %32 to double
  %34 = fmul double %33, 0x3F91DF46A2529D39
  %35 = fptrunc double %34 to float
  %36 = fpext float %35 to double
  %37 = tail call double @sin(double noundef %36) #64
  %38 = tail call double @cos(double noundef %36) #64
  %39 = insertelement <2 x double> poison, double %38, i64 0
  %40 = insertelement <2 x double> %39, double %37, i64 1
  %41 = insertelement <2 x double> poison, double %3, i64 0
  %42 = shufflevector <2 x double> %41, <2 x double> poison, <2 x i32> zeroinitializer
  %43 = fmul <2 x double> %40, %42
  %44 = fptrunc <2 x double> %43 to <2 x float>
  %45 = fpext <2 x float> %44 to <2 x double>
  %46 = insertelement <2 x double> poison, double %1, i64 0
  %47 = insertelement <2 x double> %46, double %2, i64 1
  %48 = fadd <2 x double> %47, %45
  %49 = fptrunc <2 x double> %48 to <2 x float>
  %50 = icmp eq i32 %6, 0
  %51 = sub nsw i64 %28, %29
  br i1 %50, label %56, label %52

52:                                               ; preds = %27
  %53 = icmp slt i64 %51, -368640
  %54 = extractelement <2 x float> %44, i64 0
  %55 = extractelement <2 x float> %44, i64 1
  br i1 %53, label %64, label %120

56:                                               ; preds = %27
  %57 = icmp sgt i64 %51, 368640
  %58 = extractelement <2 x float> %44, i64 0
  %59 = extractelement <2 x float> %44, i64 1
  br i1 %57, label %94, label %120

60:                                               ; preds = %64
  %61 = add nsw i64 %65, -368640
  %62 = sub nsw i64 %28, %61
  %63 = icmp slt i64 %62, -368640
  br i1 %63, label %64, label %120, !llvm.loop !523

64:                                               ; preds = %60, %52
  %65 = phi i64 [ %61, %60 ], [ %29, %52 ]
  %66 = phi i32 [ 0, %60 ], [ 1, %52 ]
  %67 = phi float [ %68, %60 ], [ %54, %52 ]
  %68 = phi float [ %70, %60 ], [ %55, %52 ]
  %69 = phi <2 x float> [ %75, %60 ], [ %49, %52 ]
  %70 = fneg float %67
  %71 = insertelement <2 x float> poison, float %68, i64 0
  %72 = insertelement <2 x float> %71, float %70, i64 1
  %73 = fpext <2 x float> %72 to <2 x double>
  %74 = fadd <2 x double> %47, %73
  %75 = fptrunc <2 x double> %74 to <2 x float>
  %76 = extractelement <2 x float> %69, i64 0
  %77 = fpext float %76 to double
  %78 = extractelement <2 x float> %69, i64 1
  %79 = fpext float %78 to double
  %80 = extractelement <2 x float> %75, i64 0
  %81 = fpext float %80 to double
  %82 = extractelement <2 x float> %75, i64 1
  %83 = fpext float %82 to double
  %84 = fadd float %76, %68
  %85 = fpext float %84 to double
  %86 = fsub float %78, %67
  %87 = fpext float %86 to double
  %88 = tail call i32 @arc_add(ptr noundef %0, double noundef %77, double noundef %79, double noundef %81, double noundef %83, double noundef %85, double noundef %87, i32 noundef %66) #62
  %89 = icmp sgt i32 %88, -1
  br i1 %89, label %60, label %156

90:                                               ; preds = %94
  %91 = add nsw i64 %95, 368640
  %92 = sub nsw i64 %28, %91
  %93 = icmp sgt i64 %92, 368640
  br i1 %93, label %94, label %120, !llvm.loop !524

94:                                               ; preds = %90, %56
  %95 = phi i64 [ %91, %90 ], [ %29, %56 ]
  %96 = phi i32 [ 0, %90 ], [ 1, %56 ]
  %97 = phi float [ %100, %90 ], [ %58, %56 ]
  %98 = phi float [ %97, %90 ], [ %59, %56 ]
  %99 = phi <2 x float> [ %105, %90 ], [ %49, %56 ]
  %100 = fneg float %98
  %101 = insertelement <2 x float> poison, float %100, i64 0
  %102 = insertelement <2 x float> %101, float %97, i64 1
  %103 = fpext <2 x float> %102 to <2 x double>
  %104 = fadd <2 x double> %47, %103
  %105 = fptrunc <2 x double> %104 to <2 x float>
  %106 = extractelement <2 x float> %99, i64 0
  %107 = fpext float %106 to double
  %108 = extractelement <2 x float> %99, i64 1
  %109 = fpext float %108 to double
  %110 = extractelement <2 x float> %105, i64 0
  %111 = fpext float %110 to double
  %112 = extractelement <2 x float> %105, i64 1
  %113 = fpext float %112 to double
  %114 = fsub float %106, %98
  %115 = fpext float %114 to double
  %116 = fadd float %108, %97
  %117 = fpext float %116 to double
  %118 = tail call i32 @arc_add(ptr noundef %0, double noundef %107, double noundef %109, double noundef %111, double noundef %113, double noundef %115, double noundef %117, i32 noundef %96) #62
  %119 = icmp sgt i32 %118, -1
  br i1 %119, label %90, label %156

120:                                              ; preds = %90, %60, %56, %52
  %121 = phi float [ %59, %56 ], [ %55, %52 ], [ %97, %90 ], [ %70, %60 ]
  %122 = phi float [ %58, %56 ], [ %54, %52 ], [ %100, %90 ], [ %68, %60 ]
  %123 = phi i32 [ 1, %56 ], [ 1, %52 ], [ 0, %90 ], [ 0, %60 ]
  %124 = phi i64 [ %51, %56 ], [ %51, %52 ], [ %92, %90 ], [ %62, %60 ]
  %125 = phi <2 x float> [ %49, %56 ], [ %49, %52 ], [ %105, %90 ], [ %75, %60 ]
  %126 = icmp eq i64 %124, 0
  br i1 %126, label %156, label %127

127:                                              ; preds = %120
  %128 = sitofp i64 %124 to double
  %129 = fmul double %128, 0x3F30000000000000
  %130 = fptrunc double %129 to float
  %131 = fpext float %130 to double
  %132 = fmul double %131, 0x3F81DF46A2529D39
  %133 = tail call double @tan(double noundef %132) #64
  %134 = fptrunc double %133 to float
  %135 = sitofp i64 %28 to double
  %136 = fmul double %135, 0x3F30000000000000
  %137 = fptrunc double %136 to float
  %138 = fpext float %137 to double
  %139 = fmul double %138, 0x3F91DF46A2529D39
  %140 = fptrunc double %139 to float
  %141 = extractelement <2 x float> %125, i64 0
  %142 = fpext float %141 to double
  %143 = extractelement <2 x float> %125, i64 1
  %144 = fpext float %143 to double
  %145 = fpext float %140 to double
  %146 = tail call double @cos(double noundef %145) #64
  %147 = tail call double @llvm.fmuladd.f64(double %3, double %146, double %1)
  %148 = tail call double @sin(double noundef %145) #64
  %149 = tail call double @llvm.fmuladd.f64(double %3, double %148, double %2)
  %150 = fneg float %134
  %151 = tail call float @llvm.fmuladd.f32(float %150, float %121, float %141)
  %152 = fpext float %151 to double
  %153 = tail call float @llvm.fmuladd.f32(float %134, float %122, float %143)
  %154 = fpext float %153 to double
  %155 = tail call i32 @arc_add(ptr noundef %0, double noundef %142, double noundef %144, double noundef %147, double noundef %149, double noundef %152, double noundef %154, i32 noundef %123) #62
  br label %156

156:                                              ; preds = %127, %120, %94, %64, %7
  %157 = phi i32 [ %155, %127 ], [ -15, %7 ], [ 0, %120 ], [ %118, %94 ], [ %88, %64 ]
  ret i32 %157
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @arc_add(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, double noundef %6, i32 noundef %7) #0 {
  %9 = alloca %struct.timeval, align 8
  %10 = alloca %struct.timeval, align 8
  %11 = alloca %struct.timeval, align 8
  %12 = alloca %struct.timeval, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %14 = load ptr, ptr %13, align 8, !tbaa !244
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %10) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12) #65
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %16 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %15, double noundef %1, double noundef %2, ptr noundef nonnull %9) #64
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %50, label %18

18:                                               ; preds = %8
  %19 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %15, double noundef %3, double noundef %4, ptr noundef nonnull %10) #64
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %50, label %21

21:                                               ; preds = %18
  %22 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %15, double noundef %5, double noundef %6, ptr noundef nonnull %11) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %50, label %24

24:                                               ; preds = %21
  %25 = icmp eq i32 %7, 0
  br i1 %25, label %39, label %26

26:                                               ; preds = %24
  %27 = call i32 @gx_path_current_point(ptr noundef %14, ptr noundef nonnull %12) #64
  %28 = icmp sgt i32 %27, -1
  %29 = load i64, ptr %9, align 8, !tbaa !247
  %30 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !249
  br i1 %28, label %32, label %34

32:                                               ; preds = %26
  %33 = call i32 @gx_path_add_line(ptr noundef %14, i64 noundef %29, i64 noundef %31) #64
  br label %36

34:                                               ; preds = %26
  %35 = call i32 @gx_path_add_point(ptr noundef %14, i64 noundef %29, i64 noundef %31) #64
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi i32 [ %33, %32 ], [ %35, %34 ]
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %50, label %39

39:                                               ; preds = %36, %24
  %40 = load i64, ptr %9, align 8, !tbaa !247
  %41 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %42 = load i64, ptr %41, align 8, !tbaa !249
  %43 = load i64, ptr %10, align 8, !tbaa !247
  %44 = getelementptr inbounds %struct.timeval, ptr %10, i64 0, i32 1
  %45 = load i64, ptr %44, align 8, !tbaa !249
  %46 = load i64, ptr %11, align 8, !tbaa !247
  %47 = getelementptr inbounds %struct.timeval, ptr %11, i64 0, i32 1
  %48 = load i64, ptr %47, align 8, !tbaa !249
  %49 = call i32 @gx_path_add_arc(ptr noundef %14, i64 noundef %40, i64 noundef %42, i64 noundef %43, i64 noundef %45, i64 noundef %46, i64 noundef %48) #64
  br label %50

50:                                               ; preds = %39, %36, %21, %18, %8
  %51 = phi i32 [ %49, %39 ], [ %16, %8 ], [ %19, %18 ], [ %22, %21 ], [ %37, %36 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #65
  ret i32 %51
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @tan(double noundef) local_unnamed_addr #40

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_arcn(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5) #0 {
  %7 = tail call i32 @arc_either(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, i32 noundef 1) #62
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_arcto(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, ptr noundef writeonly %6) #0 {
  %8 = alloca %struct.gs_point_s, align 4
  %9 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #65
  %10 = fcmp olt double %5, 0.000000e+00
  br i1 %10, label %97, label %11

11:                                               ; preds = %7
  %12 = call i32 @gs_currentpoint(ptr noundef %0, ptr noundef nonnull %8) #62
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %97, label %14

14:                                               ; preds = %11
  %15 = load float, ptr %8, align 4, !tbaa !230
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %struct.gs_point_s, ptr %8, i64 0, i32 1
  %18 = load float, ptr %17, align 4, !tbaa !232
  %19 = fpext float %18 to double
  %20 = insertelement <4 x double> poison, double %16, i64 0
  %21 = insertelement <4 x double> %20, double %19, i64 1
  %22 = insertelement <4 x double> %21, double %3, i64 2
  %23 = insertelement <4 x double> %22, double %4, i64 3
  %24 = insertelement <4 x double> poison, double %1, i64 0
  %25 = insertelement <4 x double> %24, double %2, i64 1
  %26 = shufflevector <4 x double> %25, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %27 = fsub <4 x double> %23, %26
  %28 = fptrunc <4 x double> %27 to <4 x float>
  %29 = fmul <4 x float> %28, %28
  %30 = shufflevector <4 x float> %29, <4 x float> poison, <2 x i32> <i32 1, i32 3>
  %31 = shufflevector <4 x float> %28, <4 x float> poison, <2 x i32> <i32 0, i32 2>
  %32 = call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %31, <2 x float> %31, <2 x float> %30)
  %33 = fpext <2 x float> %32 to <2 x double>
  %34 = extractelement <4 x float> %28, i64 3
  %35 = fneg float %34
  %36 = extractelement <4 x float> %28, i64 0
  %37 = fmul float %36, %35
  %38 = extractelement <4 x float> %28, i64 1
  %39 = extractelement <4 x float> %28, i64 2
  %40 = call float @llvm.fmuladd.f32(float %38, float %39, float %37)
  %41 = fpext float %40 to double
  %42 = shufflevector <2 x double> %33, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %43 = fmul <2 x double> %42, %33
  %44 = extractelement <2 x double> %43, i64 0
  %45 = call double @sqrt(double noundef %44) #64
  %46 = fmul float %34, %38
  %47 = call float @llvm.fmuladd.f32(float %36, float %39, float %46)
  %48 = fpext float %47 to double
  %49 = fsub double %45, %48
  %50 = call double @llvm.fabs.f64(double %41)
  %51 = fcmp olt double %50, 0x3EB0C6F7A0B5ED8D
  %52 = call double @llvm.fabs.f64(double %49)
  %53 = fcmp olt double %52, 0x3EB0C6F7A0B5ED8D
  %54 = select i1 %51, i1 true, i1 %53
  br i1 %54, label %55, label %71

55:                                               ; preds = %14
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #65
  %56 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %57 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %56, double noundef %1, double noundef %2, ptr noundef nonnull %9) #64
  %58 = icmp sgt i32 %57, -1
  br i1 %58, label %59, label %66

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %61 = load ptr, ptr %60, align 8, !tbaa !244
  %62 = load i64, ptr %9, align 8, !tbaa !247
  %63 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %64 = load i64, ptr %63, align 8, !tbaa !249
  %65 = call i32 @gx_path_add_line(ptr noundef %61, i64 noundef %62, i64 noundef %64) #64
  br label %66

66:                                               ; preds = %59, %55
  %67 = phi i32 [ %65, %59 ], [ %57, %55 ]
  %68 = shufflevector <4 x double> %25, <4 x double> poison, <2 x i32> <i32 0, i32 1>
  %69 = fptrunc <2 x double> %68 to <2 x float>
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #65
  br label %92

71:                                               ; preds = %14
  %72 = fmul double %41, %5
  %73 = fdiv double %72, %49
  %74 = call double @llvm.fabs.f64(double %73)
  %75 = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %33)
  %76 = fpext <4 x float> %28 to <4 x double>
  %77 = insertelement <2 x double> poison, double %74, i64 0
  %78 = shufflevector <2 x double> %77, <2 x double> poison, <2 x i32> zeroinitializer
  %79 = fdiv <2 x double> %78, %75
  %80 = shufflevector <2 x double> %79, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %81 = call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %76, <4 x double> %80, <4 x double> %26)
  %82 = fptrunc <4 x double> %81 to <4 x float>
  %83 = extractelement <4 x float> %82, i64 0
  %84 = fpext float %83 to double
  %85 = extractelement <4 x float> %82, i64 1
  %86 = fpext float %85 to double
  %87 = extractelement <4 x float> %82, i64 2
  %88 = fpext float %87 to double
  %89 = extractelement <4 x float> %82, i64 3
  %90 = fpext float %89 to double
  %91 = call i32 @arc_add(ptr noundef %0, double noundef %84, double noundef %86, double noundef %88, double noundef %90, double noundef %1, double noundef %2, i32 noundef 1) #62
  br label %92

92:                                               ; preds = %71, %66
  %93 = phi i32 [ %67, %66 ], [ %91, %71 ]
  %94 = phi <4 x float> [ %70, %66 ], [ %82, %71 ]
  %95 = icmp eq ptr %6, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %92
  store <4 x float> %94, ptr %6, align 4, !tbaa !103
  br label %97

97:                                               ; preds = %96, %92, %11, %7
  %98 = phi i32 [ -23, %7 ], [ %12, %11 ], [ %93, %96 ], [ %93, %92 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #65
  ret i32 %98
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fmuladd.v2f32(<2 x float>, <2 x float>, <2 x float>) #19

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #19

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.sqrt.v2f64(<2 x double>) #19

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x double> @llvm.fmuladd.v4f64(<4 x double>, <4 x double>, <4 x double>) #19

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_curveto(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, double noundef %6) #0 {
  %8 = alloca %struct.timeval, align 8
  %9 = alloca %struct.timeval, align 8
  %10 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %10) #65
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %12 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %11, double noundef %1, double noundef %2, ptr noundef nonnull %8) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %33, label %14

14:                                               ; preds = %7
  %15 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %11, double noundef %3, double noundef %4, ptr noundef nonnull %9) #64
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %14
  %18 = call i32 @gs_point_transform2fixed(ptr noundef nonnull %11, double noundef %5, double noundef %6, ptr noundef nonnull %10) #64
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %33, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %22 = load ptr, ptr %21, align 8, !tbaa !244
  %23 = load i64, ptr %8, align 8, !tbaa !247
  %24 = getelementptr inbounds %struct.timeval, ptr %8, i64 0, i32 1
  %25 = load i64, ptr %24, align 8, !tbaa !249
  %26 = load i64, ptr %9, align 8, !tbaa !247
  %27 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %28 = load i64, ptr %27, align 8, !tbaa !249
  %29 = load i64, ptr %10, align 8, !tbaa !247
  %30 = getelementptr inbounds %struct.timeval, ptr %10, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !249
  %32 = call i32 @gx_path_add_curve(ptr noundef %22, i64 noundef %23, i64 noundef %25, i64 noundef %26, i64 noundef %28, i64 noundef %29, i64 noundef %31) #64
  br label %33

33:                                               ; preds = %20, %17, %14, %7
  %34 = phi i32 [ %32, %20 ], [ %12, %7 ], [ %15, %14 ], [ %18, %17 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #65
  ret i32 %34
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_rcurveto(ptr noundef %0, double noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5, double noundef %6) #0 {
  %8 = alloca %struct.timeval, align 8
  %9 = alloca %struct.timeval, align 8
  %10 = alloca %struct.timeval, align 8
  %11 = alloca %struct.timeval, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %10) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11) #65
  %12 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %13 = load ptr, ptr %12, align 8, !tbaa !244
  %14 = call i32 @gx_path_current_point(ptr noundef %13, ptr noundef nonnull %8) #64
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %47, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %18 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %17, double noundef %1, double noundef %2, ptr noundef nonnull %9) #64
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %47, label %20

20:                                               ; preds = %16
  %21 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %17, double noundef %3, double noundef %4, ptr noundef nonnull %10) #64
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %47, label %23

23:                                               ; preds = %20
  %24 = call i32 @gs_distance_transform2fixed(ptr noundef nonnull %17, double noundef %5, double noundef %6, ptr noundef nonnull %11) #64
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %47, label %26

26:                                               ; preds = %23
  %27 = load ptr, ptr %12, align 8, !tbaa !244
  %28 = load i64, ptr %8, align 8, !tbaa !247
  %29 = load i64, ptr %9, align 8, !tbaa !247
  %30 = add nsw i64 %29, %28
  %31 = getelementptr inbounds %struct.timeval, ptr %8, i64 0, i32 1
  %32 = load i64, ptr %31, align 8, !tbaa !249
  %33 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %34 = load i64, ptr %33, align 8, !tbaa !249
  %35 = add nsw i64 %34, %32
  %36 = load i64, ptr %10, align 8, !tbaa !247
  %37 = add nsw i64 %36, %28
  %38 = getelementptr inbounds %struct.timeval, ptr %10, i64 0, i32 1
  %39 = load i64, ptr %38, align 8, !tbaa !249
  %40 = add nsw i64 %39, %32
  %41 = load i64, ptr %11, align 8, !tbaa !247
  %42 = add nsw i64 %41, %28
  %43 = getelementptr inbounds %struct.timeval, ptr %11, i64 0, i32 1
  %44 = load i64, ptr %43, align 8, !tbaa !249
  %45 = add nsw i64 %44, %32
  %46 = call i32 @gx_path_add_curve(ptr noundef %27, i64 noundef %30, i64 noundef %35, i64 noundef %37, i64 noundef %40, i64 noundef %42, i64 noundef %45) #64
  br label %47

47:                                               ; preds = %26, %23, %20, %16, %7
  %48 = phi i32 [ %46, %26 ], [ %14, %7 ], [ %18, %16 ], [ %21, %20 ], [ %24, %23 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8) #65
  ret i32 %48
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_flattenpath(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca %struct.gx_path_s, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %2) #65
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8, !tbaa !244
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %4, i64 0, i32 8
  %6 = load i32, ptr %5, align 8, !tbaa !525
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 21
  %10 = load float, ptr %9, align 8, !tbaa !526
  %11 = fpext float %10 to double
  %12 = call i32 @gx_path_flatten(ptr noundef nonnull %4, ptr noundef nonnull %2, double noundef %11) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %8
  %15 = load ptr, ptr %3, align 8, !tbaa !244
  call void @gx_path_release(ptr noundef %15) #64
  %16 = load ptr, ptr %3, align 8, !tbaa !244
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %16, ptr noundef nonnull align 8 dereferenceable(144) %2, i64 144, i1 false), !tbaa.struct !522
  br label %17

17:                                               ; preds = %14, %8, %1
  %18 = phi i32 [ 0, %14 ], [ 0, %1 ], [ %12, %8 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #65
  ret i32 %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gs_reversepath(ptr nocapture noundef readnone %0) #10 {
  ret i32 -21
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_pathbbox(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.gs_fixed_rect_s, align 8
  %4 = alloca %struct.gs_rect_s, align 16
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4) #65
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !244
  %7 = call i32 @gx_path_bbox(ptr noundef %6, ptr noundef nonnull %3) #64
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %2
  %10 = load <4 x i64>, ptr %3, align 8, !tbaa !18
  %11 = sitofp <4 x i64> %10 to <4 x double>
  %12 = fmul <4 x double> %11, <double 0x3F30000000000000, double 0x3F30000000000000, double 0x3F30000000000000, double 0x3F30000000000000>
  %13 = fptrunc <4 x double> %12 to <4 x float>
  store <4 x float> %13, ptr %4, align 16, !tbaa !103
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 2
  %15 = call i32 @gs_bbox_transform_inverse(ptr noundef nonnull %4, ptr noundef nonnull %14, ptr noundef %1) #64
  br label %16

16:                                               ; preds = %9, %2
  %17 = phi i32 [ %15, %9 ], [ %7, %2 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4) #65
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #65
  ret i32 %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @gs_path_enum_init(ptr nocapture noundef writeonly %0, ptr noundef %1) #23 {
  %3 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 7
  %4 = load ptr, ptr %3, align 8, !tbaa !244
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %4, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !527
  store ptr %6, ptr %0, align 8, !tbaa !528
  %7 = getelementptr inbounds %struct.op_def, ptr %0, i64 0, i32 1
  store ptr %1, ptr %7, align 8, !tbaa !530
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_path_enum_next(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = alloca %struct.gs_point_s, align 8
  %4 = load ptr, ptr %0, align 8, !tbaa !528
  %5 = getelementptr inbounds %struct.op_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !530
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #65
  %7 = icmp eq ptr %4, null
  br i1 %7, label %75, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.segment_s, ptr %4, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !531
  store ptr %10, ptr %0, align 8, !tbaa !528
  %11 = getelementptr inbounds %struct.segment_s, ptr %4, i64 0, i32 2
  %12 = load i32, ptr %11, align 8, !tbaa !533
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %75, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.segment_s, ptr %4, i64 0, i32 3
  %16 = load i64, ptr %15, align 8, !tbaa !534
  %17 = sitofp i64 %16 to double
  %18 = fmul double %17, 0x3F30000000000000
  %19 = fptrunc double %18 to float
  %20 = fpext float %19 to double
  %21 = getelementptr inbounds %struct.segment_s, ptr %4, i64 0, i32 3, i32 1
  %22 = load i64, ptr %21, align 8, !tbaa !535
  %23 = sitofp i64 %22 to double
  %24 = fmul double %23, 0x3F30000000000000
  %25 = fptrunc double %24 to float
  %26 = fpext float %25 to double
  %27 = call i32 (ptr, double, double, ptr, ...) @gs_itransform(ptr noundef %6, double noundef %20, double noundef %26, ptr noundef nonnull %3) #64
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %75, label %29

29:                                               ; preds = %14
  %30 = load i32, ptr %11, align 8, !tbaa !533
  switch i32 %30, label %69 [
    i32 0, label %31
    i32 1, label %33
    i32 3, label %35
  ]

31:                                               ; preds = %29
  %32 = load i64, ptr %3, align 8
  store i64 %32, ptr %1, align 4
  br label %75

33:                                               ; preds = %29
  %34 = load i64, ptr %3, align 8
  store i64 %34, ptr %1, align 4
  br label %75

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.curve_segment, ptr %4, i64 0, i32 4
  %37 = load i64, ptr %36, align 8, !tbaa !536
  %38 = sitofp i64 %37 to double
  %39 = fmul double %38, 0x3F30000000000000
  %40 = fptrunc double %39 to float
  %41 = fpext float %40 to double
  %42 = getelementptr inbounds %struct.curve_segment, ptr %4, i64 0, i32 4, i32 1
  %43 = load i64, ptr %42, align 8, !tbaa !538
  %44 = sitofp i64 %43 to double
  %45 = fmul double %44, 0x3F30000000000000
  %46 = fptrunc double %45 to float
  %47 = fpext float %46 to double
  %48 = call i32 (ptr, double, double, ptr, ...) @gs_itransform(ptr noundef %6, double noundef %41, double noundef %47, ptr noundef %1) #64
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %75, label %50

50:                                               ; preds = %35
  %51 = getelementptr inbounds %struct.curve_segment, ptr %4, i64 0, i32 5
  %52 = load i64, ptr %51, align 8, !tbaa !539
  %53 = sitofp i64 %52 to double
  %54 = fmul double %53, 0x3F30000000000000
  %55 = fptrunc double %54 to float
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds %struct.curve_segment, ptr %4, i64 0, i32 5, i32 1
  %58 = load i64, ptr %57, align 8, !tbaa !540
  %59 = sitofp i64 %58 to double
  %60 = fmul double %59, 0x3F30000000000000
  %61 = fptrunc double %60 to float
  %62 = fpext float %61 to double
  %63 = getelementptr inbounds %struct.gs_point_s, ptr %1, i64 1
  %64 = call i32 (ptr, double, double, ptr, ...) @gs_itransform(ptr noundef %6, double noundef %56, double noundef %62, ptr noundef nonnull %63) #64
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %50
  %67 = getelementptr inbounds %struct.gs_point_s, ptr %1, i64 2
  %68 = load i64, ptr %3, align 8
  store i64 %68, ptr %67, align 4
  br label %75

69:                                               ; preds = %29
  %70 = load ptr, ptr @stderr, align 8, !tbaa !7
  %71 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %70, ptr noundef nonnull @.str.771, ptr noundef nonnull @.str.1.772, i32 noundef 125) #66
  %72 = load ptr, ptr @stderr, align 8, !tbaa !7
  %73 = load i32, ptr %11, align 8, !tbaa !533
  %74 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %72, ptr noundef nonnull @.str.2.773, i32 noundef %73) #66
  call void @exit(i32 noundef 1) #68
  unreachable

75:                                               ; preds = %66, %50, %35, %33, %31, %14, %8, %2
  %76 = phi i32 [ 3, %66 ], [ 2, %33 ], [ 1, %31 ], [ 0, %2 ], [ 4, %8 ], [ %27, %14 ], [ 0, %50 ], [ 0, %35 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #65
  ret i32 %76
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_clippath(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 8
  %3 = load ptr, ptr %2, align 8, !tbaa !305
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !244
  %6 = tail call i32 @gx_path_copy(ptr noundef %3, ptr noundef %5) #64
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_initclip(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %3 = load ptr, ptr %2, align 8, !tbaa !338
  %4 = load ptr, ptr %3, align 8, !tbaa !328
  %5 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !377
  %7 = sext i32 %6 to i64
  %8 = shl nsw i64 %7, 12
  %9 = getelementptr inbounds %struct.gx_device_s, ptr %4, i64 0, i32 4
  %10 = load i32, ptr %9, align 4, !tbaa !266
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 12
  %13 = tail call i32 @gx_clip_to_rectangle(ptr noundef %0, i64 noundef 0, i64 noundef 0, i64 noundef %8, i64 noundef %12) #62, !range !263
  ret i32 %13
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_clip_to_rectangle(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4) #0 {
  %6 = alloca %struct.gx_path_s, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %6) #65
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 1
  call void @gx_path_init(ptr noundef nonnull %6, ptr noundef nonnull %7) #64
  %8 = call i32 @gx_path_add_rectangle(ptr noundef nonnull %6, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4) #64
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %5
  call void @gx_path_release(ptr noundef nonnull %6) #64
  br label %15

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 8
  %13 = load ptr, ptr %12, align 8, !tbaa !305
  call void @gx_path_release(ptr noundef %13) #64
  %14 = call i32 @set_clip_path(ptr noundef %0, ptr noundef nonnull %6, i32 noundef -1) #62
  br label %15

15:                                               ; preds = %11, %10
  %16 = phi i32 [ %8, %10 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #65
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @set_clip_path(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = getelementptr inbounds %struct.gx_path_s, ptr %1, i64 0, i32 3
  %5 = tail call i32 @gx_path_is_rectangle(ptr noundef %1, ptr noundef nonnull %4) #64
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, i8 0, i64 32, i1 false)
  br label %8

8:                                                ; preds = %7, %3
  %9 = getelementptr inbounds %struct.gx_path_s, ptr %1, i64 0, i32 1
  %10 = tail call i32 @gx_path_bbox(ptr noundef %1, ptr noundef nonnull %9) #64
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 8
  %12 = load ptr, ptr %11, align 8, !tbaa !305
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %12, ptr noundef nonnull align 8 dereferenceable(144) %1, i64 144, i1 false), !tbaa.struct !522
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 9
  store i32 %2, ptr %13, align 8, !tbaa !541
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_clip(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @common_clip(ptr noundef %0, i32 noundef -1) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @common_clip(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.gx_path_s, align 8
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !244
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 21
  %7 = load float, ptr %6, align 8, !tbaa !526
  %8 = fpext float %7 to double
  %9 = call i32 @gx_path_flatten(ptr noundef %5, ptr noundef nonnull %3, double noundef %8) #64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = call i32 @set_clip_path(ptr noundef nonnull %0, ptr noundef nonnull %3, i32 noundef %1) #62
  br label %13

13:                                               ; preds = %11, %2
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %3) #65
  ret i32 %9
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_eoclip(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @common_clip(ptr noundef %0, i32 noundef 1) #62
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @gs_state_alloc(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr %0(i32 noundef 1, i32 noundef 464, ptr noundef nonnull @.str.788) #64
  %4 = icmp eq ptr %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %2
  %6 = tail call i32 @alloc_state_contents(ptr noundef nonnull %3, ptr noundef %0) #62, !range !542
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %28, label %8

8:                                                ; preds = %5
  store ptr null, ptr %3, align 8, !tbaa !521
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 1
  store ptr %0, ptr %9, align 8, !tbaa !543
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 1, i32 1
  store ptr %1, ptr %10, align 8, !tbaa !544
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8, !tbaa !244
  %13 = getelementptr inbounds %struct.gx_path_s, ptr %12, i64 0, i32 4
  store ptr null, ptr %13, align 8, !tbaa !527
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 8
  %15 = load ptr, ptr %14, align 8, !tbaa !305
  %16 = getelementptr inbounds %struct.gx_path_s, ptr %15, i64 0, i32 4
  store ptr null, ptr %16, align 8, !tbaa !527
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 11
  %18 = load ptr, ptr %17, align 8, !tbaa !356
  %19 = getelementptr inbounds %struct.halftone_s, ptr %18, i64 0, i32 5
  store i32 0, ptr %19, align 8, !tbaa !361
  %20 = getelementptr inbounds %struct.halftone_s, ptr %18, i64 0, i32 3
  store i32 0, ptr %20, align 4, !tbaa !359
  %21 = getelementptr inbounds %struct.halftone_s, ptr %18, i64 0, i32 2
  store i32 0, ptr %21, align 8, !tbaa !357
  tail call void @gs_nulldevice(ptr noundef nonnull %3) #64
  %22 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 21
  store float 1.000000e+00, ptr %22, align 8, !tbaa !526
  %23 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 20
  store i8 0, ptr %23, align 1, !tbaa !312
  %24 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 19
  store i8 0, ptr %24, align 4, !tbaa !326
  %25 = tail call i32 @gs_initgraphics(ptr noundef nonnull %3) #62, !range !263
  %26 = icmp slt i32 %25, 0
  %27 = select i1 %26, ptr null, ptr %3
  br label %28

28:                                               ; preds = %8, %5, %2
  %29 = phi ptr [ null, %2 ], [ null, %5 ], [ %27, %8 ]
  ret ptr %29
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @alloc_state_contents(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = tail call ptr %1(i32 noundef 1, i32 noundef 144, ptr noundef nonnull @.str.4.791) #64
  %4 = icmp eq ptr %3, null
  br i1 %4, label %32, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  store ptr %3, ptr %6, align 8, !tbaa !244
  %7 = tail call ptr %1(i32 noundef 1, i32 noundef 144, ptr noundef nonnull @.str.4.791) #64
  %8 = icmp eq ptr %7, null
  br i1 %8, label %32, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 8
  store ptr %7, ptr %10, align 8, !tbaa !305
  %11 = tail call ptr %1(i32 noundef 1, i32 noundef 56, ptr noundef nonnull @.str.4.791) #64
  %12 = icmp eq ptr %11, null
  br i1 %12, label %32, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  store ptr %11, ptr %14, align 8, !tbaa !497
  %15 = tail call ptr %1(i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.4.791) #64
  %16 = icmp eq ptr %15, null
  br i1 %16, label %32, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 11
  store ptr %15, ptr %18, align 8, !tbaa !356
  %19 = tail call ptr %1(i32 noundef 1, i32 noundef 10, ptr noundef nonnull @.str.4.791) #64
  %20 = icmp eq ptr %19, null
  br i1 %20, label %32, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  store ptr %19, ptr %22, align 8, !tbaa !332
  %23 = tail call ptr %1(i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.4.791) #64
  %24 = icmp eq ptr %23, null
  br i1 %24, label %32, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 14
  store ptr %23, ptr %26, align 8, !tbaa !333
  %27 = tail call ptr %1(i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.4.791) #64
  %28 = icmp eq ptr %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  store ptr %27, ptr %30, align 8, !tbaa !338
  %31 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 23
  store i32 0, ptr %31, align 8, !tbaa !339
  br label %32

32:                                               ; preds = %29, %25, %21, %17, %13, %9, %5, %2
  %33 = phi i32 [ 0, %29 ], [ -1, %2 ], [ -1, %5 ], [ -1, %9 ], [ -1, %13 ], [ -1, %17 ], [ -1, %21 ], [ -1, %25 ]
  ret i32 %33
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_initgraphics(ptr noundef %0) #0 {
  %2 = tail call i32 (ptr, ...) @gs_initmatrix(ptr noundef %0) #64
  %3 = tail call i32 (ptr, ...) @gs_newpath(ptr noundef %0) #64
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = tail call i32 (ptr, ...) @gs_initclip(ptr noundef %0) #64
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %26, label %8

8:                                                ; preds = %5
  %9 = tail call i32 @gs_setlinewidth(ptr noundef %0, double noundef 1.000000e+00) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %8
  %12 = tail call i32 @gs_setlinecap(ptr noundef %0, i32 noundef 0) #64
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %11
  %15 = tail call i32 @gs_setlinejoin(ptr noundef %0, i32 noundef 0) #64
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %14
  %18 = tail call i32 @gs_setdash(ptr noundef %0, ptr noundef null, i32 noundef 0, double noundef 0.000000e+00) #64
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %17
  %21 = tail call i32 @gs_setgray(ptr noundef %0, double noundef 0.000000e+00) #64
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = tail call i32 @gs_setmiterlimit(ptr noundef %0, double noundef 1.000000e+01) #64
  %25 = tail call i32 @llvm.smin.i32(i32 %24, i32 0)
  br label %26

26:                                               ; preds = %23, %20, %17, %14, %11, %8, %5, %1
  %27 = phi i32 [ %3, %1 ], [ %6, %5 ], [ %9, %8 ], [ %12, %11 ], [ %15, %14 ], [ %18, %17 ], [ %21, %20 ], [ %25, %23 ]
  ret i32 %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gs_setflat(ptr nocapture noundef writeonly %0, double noundef %1) #45 {
  %3 = fcmp ugt double %1, 0.000000e+00
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = fptrunc double %1 to float
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 21
  store float %5, ptr %6, align 8, !tbaa !526
  br label %7

7:                                                ; preds = %4, %2
  %8 = phi i32 [ 0, %4 ], [ -15, %2 ]
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal void @free_state_contents(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 1, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !544
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 8
  %5 = load ptr, ptr %4, align 8, !tbaa !305
  tail call void @gx_path_release(ptr noundef %5) #64
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !244
  tail call void @gx_path_release(ptr noundef %7) #64
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 23
  %9 = load i32, ptr %8, align 8, !tbaa !339
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %13 = load ptr, ptr %12, align 8, !tbaa !338
  tail call void %3(ptr noundef %13, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.5.794) #64
  br label %14

14:                                               ; preds = %11, %1
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 14
  %16 = load ptr, ptr %15, align 8, !tbaa !333
  tail call void %3(ptr noundef %16, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.5.794) #64
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %18 = load ptr, ptr %17, align 8, !tbaa !332
  tail call void %3(ptr noundef %18, i32 noundef 1, i32 noundef 10, ptr noundef nonnull @.str.5.794) #64
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 11
  %20 = load ptr, ptr %19, align 8, !tbaa !356
  tail call void %3(ptr noundef %20, i32 noundef 1, i32 noundef 32, ptr noundef nonnull @.str.5.794) #64
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %22 = load ptr, ptr %21, align 8, !tbaa !497
  tail call void %3(ptr noundef %22, i32 noundef 1, i32 noundef 56, ptr noundef nonnull @.str.5.794) #64
  %23 = load ptr, ptr %4, align 8, !tbaa !305
  tail call void %3(ptr noundef %23, i32 noundef 1, i32 noundef 144, ptr noundef nonnull @.str.5.794) #64
  %24 = load ptr, ptr %6, align 8, !tbaa !244
  tail call void %3(ptr noundef %24, i32 noundef 1, i32 noundef 144, ptr noundef nonnull @.str.5.794) #64
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_gsave(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !543
  %4 = tail call ptr %3(i32 noundef 1, i32 noundef 464, ptr noundef nonnull @.str.2.797) #64
  %5 = icmp eq ptr %4, null
  br i1 %5, label %41, label %6

6:                                                ; preds = %1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(464) %4, ptr noundef nonnull align 8 dereferenceable(464) %0, i64 464, i1 false), !tbaa.struct !545
  %7 = load ptr, ptr %2, align 8, !tbaa !543
  %8 = tail call i32 @alloc_state_contents(ptr noundef nonnull %0, ptr noundef %7) #62, !range !542
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %41, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8, !tbaa !244
  %13 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 7
  %14 = load ptr, ptr %13, align 8, !tbaa !244
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %12, ptr noundef nonnull align 8 dereferenceable(144) %14, i64 144, i1 false), !tbaa.struct !522
  %15 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 8
  %16 = load ptr, ptr %15, align 8, !tbaa !305
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 8
  %18 = load ptr, ptr %17, align 8, !tbaa !305
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %16, ptr noundef nonnull align 8 dereferenceable(144) %18, i64 144, i1 false), !tbaa.struct !522
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 10
  %20 = load ptr, ptr %19, align 8, !tbaa !497
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 10
  %22 = load ptr, ptr %21, align 8, !tbaa !497
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %20, ptr noundef nonnull align 8 dereferenceable(56) %22, i64 56, i1 false), !tbaa.struct !546
  %23 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 11
  %24 = load ptr, ptr %23, align 8, !tbaa !356
  %25 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 11
  %26 = load ptr, ptr %25, align 8, !tbaa !356
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %24, ptr noundef nonnull align 8 dereferenceable(32) %26, i64 32, i1 false), !tbaa.struct !547
  %27 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 13
  %28 = load ptr, ptr %27, align 8, !tbaa !332
  %29 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 13
  %30 = load ptr, ptr %29, align 8, !tbaa !332
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(10) %28, ptr noundef nonnull align 2 dereferenceable(10) %30, i64 10, i1 false), !tbaa.struct !345
  %31 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 14
  %32 = load ptr, ptr %31, align 8, !tbaa !333
  %33 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 14
  %34 = load ptr, ptr %33, align 8, !tbaa !333
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %32, ptr noundef nonnull align 8 dereferenceable(32) %34, i64 32, i1 false), !tbaa.struct !548
  %35 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 22
  %36 = load ptr, ptr %35, align 8, !tbaa !338
  %37 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 22
  %38 = load ptr, ptr %37, align 8, !tbaa !338
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 8 dereferenceable(32) %38, i64 32, i1 false), !tbaa.struct !549
  %39 = load ptr, ptr %11, align 8, !tbaa !244
  tail call void @gx_path_share(ptr noundef %39) #64
  %40 = load ptr, ptr %15, align 8, !tbaa !305
  tail call void @gx_path_share(ptr noundef %40) #64
  store ptr %4, ptr %0, align 8, !tbaa !521
  br label %41

41:                                               ; preds = %10, %6, %1
  %42 = phi i32 [ 0, %10 ], [ -25, %1 ], [ -25, %6 ]
  ret i32 %42
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_grestore(ptr nocapture noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !521
  %3 = icmp eq ptr %2, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  tail call void @free_state_contents(ptr noundef nonnull %0) #62
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(464) %0, ptr noundef nonnull align 8 dereferenceable(464) %2, i64 464, i1 false), !tbaa.struct !545
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 1, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !544
  tail call void %6(ptr noundef nonnull %2, i32 noundef 1, i32 noundef 464, ptr noundef nonnull @.str.3.800) #64
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi i32 [ 0, %4 ], [ -23, %1 ]
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_grestoreall(ptr nocapture noundef %0) #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = tail call i32 @gs_grestore(ptr noundef %0) #62, !range !180
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %2, label %5, !llvm.loop !550

5:                                                ; preds = %2
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal ptr @gs_state_swap_saved(ptr nocapture noundef %0, ptr noundef %1) #28 {
  %3 = load ptr, ptr %0, align 8, !tbaa !521
  store ptr %1, ptr %0, align 8, !tbaa !521
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal float @gs_currentflat(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 21
  %3 = load float, ptr %2, align 8, !tbaa !526
  ret float %3
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_type1_encrypt(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef %3) #29 {
  %5 = load i16, ptr %3, align 2, !tbaa !102
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %7, %4
  %8 = phi i32 [ %22, %7 ], [ %2, %4 ]
  %9 = phi ptr [ %21, %7 ], [ %0, %4 ]
  %10 = phi ptr [ %20, %7 ], [ %1, %4 ]
  %11 = phi i16 [ %19, %7 ], [ %5, %4 ]
  %12 = load i8, ptr %10, align 1, !tbaa !13
  %13 = lshr i16 %11, 8
  %14 = trunc i16 %13 to i8
  %15 = xor i8 %12, %14
  store i8 %15, ptr %9, align 1, !tbaa !13
  %16 = zext i8 %15 to i16
  %17 = add i16 %11, %16
  %18 = mul i16 %17, -12691
  %19 = add i16 %18, 22719
  %20 = getelementptr inbounds i8, ptr %10, i64 1
  %21 = getelementptr inbounds i8, ptr %9, i64 1
  %22 = add i32 %8, -1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %7, !llvm.loop !551

24:                                               ; preds = %7, %4
  %25 = phi i16 [ %5, %4 ], [ %19, %7 ]
  store i16 %25, ptr %3, align 2, !tbaa !102
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gs_type1_decrypt(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, i32 noundef %2, ptr nocapture noundef %3) #29 {
  %5 = load i16, ptr %3, align 2, !tbaa !102
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %7, %4
  %8 = phi i16 [ %20, %7 ], [ %5, %4 ]
  %9 = phi i32 [ %22, %7 ], [ %2, %4 ]
  %10 = phi ptr [ %21, %7 ], [ %0, %4 ]
  %11 = phi ptr [ %12, %7 ], [ %1, %4 ]
  %12 = getelementptr inbounds i8, ptr %11, i64 1
  %13 = load i8, ptr %11, align 1, !tbaa !13
  %14 = zext i8 %13 to i16
  %15 = lshr i16 %8, 8
  %16 = trunc i16 %15 to i8
  %17 = xor i8 %13, %16
  store i8 %17, ptr %10, align 1, !tbaa !13
  %18 = add i16 %8, %14
  %19 = mul i16 %18, -12691
  %20 = add i16 %19, 22719
  %21 = getelementptr inbounds i8, ptr %10, i64 1
  %22 = add i32 %9, -1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %7, !llvm.loop !552

24:                                               ; preds = %7, %4
  %25 = phi i16 [ %5, %4 ], [ %20, %7 ]
  store i16 %25, ptr %3, align 2, !tbaa !102
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal i32 @gs_type1_init_matrix(ptr nocapture noundef %0) #54 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #65
  store i32 -10000, ptr %2, align 4, !tbaa !11
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #65
  %4 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !553
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 2
  %7 = load i32, ptr %6, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 28
  %9 = load i32, ptr %8, align 4
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 2, i32 2
  %11 = load i32, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %5, i64 44
  %13 = load i32, ptr %12, align 4
  %14 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 2, i32 4
  %15 = load i32, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %5, i64 60
  %17 = load i32, ptr %16, align 4
  %18 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 2, i32 6
  %19 = load i32, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %5, i64 76
  %21 = load i32, ptr %20, align 4
  %22 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5
  %23 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 4
  store i32 0, ptr %23, align 8, !tbaa !556
  %24 = zext i32 %9 to i64
  %25 = zext i32 %7 to i64
  %26 = shl i64 %24, 33
  %27 = shl nuw nsw i64 %25, 1
  %28 = or i64 %26, %27
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %1
  %31 = bitcast i32 %7 to float
  %32 = fpext float %31 to double
  %33 = call double @frexp(double noundef %32, ptr noundef nonnull %2) #64
  %34 = load i32, ptr %2, align 4, !tbaa !11
  br label %35

35:                                               ; preds = %30, %1
  %36 = phi i32 [ %34, %30 ], [ -10000, %1 ]
  %37 = zext i32 %13 to i64
  %38 = zext i32 %11 to i64
  %39 = shl i64 %37, 33
  %40 = shl nuw nsw i64 %38, 1
  %41 = or i64 %39, %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %35
  %44 = bitcast i32 %11 to float
  %45 = fpext float %44 to double
  %46 = call double @frexp(double noundef %45, ptr noundef nonnull %3) #64
  %47 = load i32, ptr %3, align 4, !tbaa !11
  %48 = tail call i32 @llvm.smax.i32(i32 %47, i32 %36)
  store i32 1, ptr %23, align 8, !tbaa !556
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i32 [ %48, %43 ], [ %36, %35 ]
  %51 = zext i32 %17 to i64
  %52 = zext i32 %15 to i64
  %53 = shl i64 %51, 33
  %54 = shl nuw nsw i64 %52, 1
  %55 = or i64 %53, %54
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %49
  %58 = bitcast i32 %15 to float
  %59 = fpext float %58 to double
  %60 = call double @frexp(double noundef %59, ptr noundef nonnull %3) #64
  %61 = load i32, ptr %3, align 4, !tbaa !11
  %62 = tail call i32 @llvm.smax.i32(i32 %61, i32 %50)
  store i32 1, ptr %23, align 8, !tbaa !556
  br label %63

63:                                               ; preds = %57, %49
  %64 = phi i32 [ %62, %57 ], [ %50, %49 ]
  %65 = zext i32 %21 to i64
  %66 = zext i32 %19 to i64
  %67 = shl i64 %65, 33
  %68 = shl nuw nsw i64 %66, 1
  %69 = or i64 %67, %68
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %77, label %71

71:                                               ; preds = %63
  %72 = bitcast i32 %19 to float
  %73 = fpext float %72 to double
  %74 = call double @frexp(double noundef %73, ptr noundef nonnull %3) #64
  %75 = load i32, ptr %3, align 4, !tbaa !11
  %76 = tail call i32 @llvm.smax.i32(i32 %75, i32 %64)
  br label %77

77:                                               ; preds = %71, %63
  %78 = phi i32 [ %76, %71 ], [ %64, %63 ]
  %79 = sub nsw i32 20, %78
  br i1 %29, label %85, label %80

80:                                               ; preds = %77
  %81 = bitcast i32 %7 to float
  %82 = fpext float %81 to double
  %83 = tail call double @ldexp(double noundef %82, i32 noundef %79) #64
  %84 = fptosi double %83 to i64
  br label %85

85:                                               ; preds = %80, %77
  %86 = phi i64 [ %84, %80 ], [ 0, %77 ]
  store i64 %86, ptr %22, align 8, !tbaa !557
  br i1 %70, label %92, label %87

87:                                               ; preds = %85
  %88 = bitcast i32 %19 to float
  %89 = fpext float %88 to double
  %90 = tail call double @ldexp(double noundef %89, i32 noundef %79) #64
  %91 = fptosi double %90 to i64
  br label %92

92:                                               ; preds = %87, %85
  %93 = phi i64 [ %91, %87 ], [ 0, %85 ]
  %94 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 3
  store i64 %93, ptr %94, align 8, !tbaa !558
  %95 = load i32, ptr %23, align 8, !tbaa !556
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %114, label %97

97:                                               ; preds = %92
  br i1 %42, label %103, label %98

98:                                               ; preds = %97
  %99 = bitcast i32 %11 to float
  %100 = fpext float %99 to double
  %101 = tail call double @ldexp(double noundef %100, i32 noundef %79) #64
  %102 = fptosi double %101 to i64
  br label %103

103:                                              ; preds = %98, %97
  %104 = phi i64 [ %102, %98 ], [ 0, %97 ]
  %105 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 1
  store i64 %104, ptr %105, align 8, !tbaa !559
  br i1 %56, label %111, label %106

106:                                              ; preds = %103
  %107 = bitcast i32 %15 to float
  %108 = fpext float %107 to double
  %109 = tail call double @ldexp(double noundef %108, i32 noundef %79) #64
  %110 = fptosi double %109 to i64
  br label %111

111:                                              ; preds = %106, %103
  %112 = phi i64 [ %110, %106 ], [ 0, %103 ]
  %113 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 2
  store i64 %112, ptr %113, align 8, !tbaa !560
  br label %116

114:                                              ; preds = %92
  %115 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %115, i8 0, i64 16, i1 false)
  br label %116

116:                                              ; preds = %114, %111
  %117 = sub i32 8, %78
  %118 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 5
  store i32 %117, ptr %118, align 4, !tbaa !561
  %119 = icmp slt i32 %78, 8
  %120 = sub i32 7, %78
  %121 = zext i32 %120 to i64
  %122 = shl nuw i64 1, %121
  %123 = select i1 %119, i64 %122, i64 0
  %124 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 6
  store i64 %123, ptr %124, align 8, !tbaa !562
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #65
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #65
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: write)
declare double @frexp(double noundef, ptr nocapture noundef) local_unnamed_addr #41

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #19

; Function Attrs: mustprogress nofree nounwind optsize willreturn
declare double @ldexp(double noundef, i32 noundef) local_unnamed_addr #55

; Function Attrs: mustprogress nofree nounwind optsize willreturn uwtable
define internal i32 @gs_type1_init(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5) #54 {
  %7 = load ptr, ptr %1, align 8, !tbaa !290
  store ptr %1, ptr %0, align 8, !tbaa !563
  %8 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 1
  store ptr %7, ptr %8, align 8, !tbaa !553
  %9 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 2
  store ptr %5, ptr %9, align 8, !tbaa !564
  %10 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 3
  store i32 %2, ptr %10, align 8, !tbaa !565
  %11 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 4
  store i32 %3, ptr %11, align 4, !tbaa !566
  %12 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 7
  store i32 0, ptr %12, align 8, !tbaa !567
  %13 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 8
  store ptr %4, ptr %13, align 8, !tbaa !568
  %14 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 8, i64 0, i32 1
  store i16 4330, ptr %14, align 8, !tbaa !570
  %15 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 9
  store i32 1, ptr %15, align 8, !tbaa !571
  %16 = getelementptr inbounds %struct.gs_type1_data_s, ptr %5, i64 0, i32 3
  %17 = load i32, ptr %16, align 8, !tbaa !240
  %18 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 10
  store i32 %17, ptr %18, align 4, !tbaa !572
  %19 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 13
  store i32 -1, ptr %19, align 8, !tbaa !573
  %20 = tail call i32 @gs_type1_init_matrix(ptr noundef nonnull %0) #62
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 7
  %22 = load ptr, ptr %21, align 8, !tbaa !244
  %23 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 2, i32 12
  %24 = getelementptr inbounds %struct.gx_path_s, ptr %22, i64 0, i32 9
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !18
  store <2 x i64> %25, ptr %24, align 8, !tbaa !18
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gs_type1_interpret(ptr noundef %0, ptr noundef %1) #0 {
  %3 = alloca [24 x i64], align 16
  %4 = alloca ptr, align 8
  %5 = alloca %struct.gs_rect_s, align 16
  %6 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !553
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8, !tbaa !244
  %10 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !564
  call void @llvm.lifetime.start.p0(i64 192, ptr nonnull %3) #65
  %12 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 8
  %13 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 9
  %14 = load i32, ptr %13, align 8, !tbaa !571
  %15 = add nsw i32 %14, -1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 8, i64 %16
  %18 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 10
  %19 = load i32, ptr %18, align 4, !tbaa !572
  %20 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 2, i32 12
  %21 = load i64, ptr %20, align 8, !tbaa !324
  %22 = getelementptr inbounds %struct.gs_state_s, ptr %7, i64 0, i32 2, i32 13
  %23 = load i64, ptr %22, align 8, !tbaa !325
  %24 = getelementptr inbounds %struct.gx_path_s, ptr %9, i64 0, i32 9
  %25 = load i64, ptr %24, align 8, !tbaa !313
  %26 = getelementptr inbounds %struct.gx_path_s, ptr %9, i64 0, i32 9, i32 1
  %27 = load i64, ptr %26, align 8, !tbaa !314
  %28 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5
  %29 = load i64, ptr %28, align 8, !tbaa.struct !574
  %30 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa.struct !575
  %32 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 2
  %33 = load i64, ptr %32, align 8, !tbaa.struct !576
  %34 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 3
  %35 = load i64, ptr %34, align 8, !tbaa.struct !577
  %36 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 4
  %37 = load i32, ptr %36, align 8, !tbaa.struct !578
  %38 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 5
  %39 = load i32, ptr %38, align 4, !tbaa.struct !579
  %40 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 5, i32 6
  %41 = load i64, ptr %40, align 8, !tbaa.struct !458
  %42 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 7
  %43 = load i32, ptr %42, align 8, !tbaa !567
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %2
  %46 = getelementptr inbounds i64, ptr %3, i64 -1
  br label %54

47:                                               ; preds = %2
  %48 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 6
  %49 = sext i32 %43 to i64
  %50 = shl nsw i64 %49, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 %3, ptr nonnull align 8 %48, i64 %50, i1 false)
  %51 = add nsw i32 %43, -1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [24 x i64], ptr %3, i64 0, i64 %52
  br label %54

54:                                               ; preds = %47, %45
  %55 = phi ptr [ %46, %45 ], [ %53, %47 ]
  %56 = icmp eq ptr %1, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  store ptr %1, ptr %17, align 8, !tbaa !568
  br label %58

58:                                               ; preds = %57, %54
  %59 = icmp sgt i32 %39, -1
  %60 = sub nsw i32 0, %39
  %61 = zext i32 %60 to i64
  %62 = icmp eq i32 %37, 0
  %63 = zext i32 %39 to i64
  %64 = getelementptr inbounds [24 x i64], ptr %3, i64 0, i64 1
  %65 = getelementptr inbounds [24 x i64], ptr %3, i64 0, i64 2
  %66 = getelementptr inbounds [24 x i64], ptr %3, i64 0, i64 3
  %67 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 11
  %68 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 11, i32 1
  %69 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 12
  %70 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 12, i32 1
  %71 = getelementptr inbounds %struct.gs_type1_data_s, ptr %11, i64 0, i32 1
  %72 = getelementptr inbounds i64, ptr %3, i64 -1
  %73 = getelementptr inbounds [24 x i64], ptr %3, i64 0, i64 4
  %74 = getelementptr inbounds [24 x i64], ptr %3, i64 0, i64 5
  br label %75

75:                                               ; preds = %435, %58
  %76 = phi i64 [ %25, %58 ], [ %.lcssa30, %435 ]
  %77 = phi i64 [ %27, %58 ], [ %.lcssa24, %435 ]
  %78 = phi i32 [ %19, %58 ], [ %.lcssa42, %435 ]
  %79 = phi ptr [ %17, %58 ], [ %436, %435 ]
  %80 = phi ptr [ %55, %58 ], [ %.lcssa18, %435 ]
  %81 = load ptr, ptr %79, align 8, !tbaa !568
  %82 = getelementptr inbounds %struct.ip_state, ptr %79, i64 0, i32 1
  %83 = load i16, ptr %82, align 8, !tbaa !570
  br label %84

84:                                               ; preds = %427, %75
  %85 = phi i64 [ %76, %75 ], [ %.lcssa29, %427 ]
  %86 = phi i64 [ %77, %75 ], [ %.lcssa23, %427 ]
  %87 = phi i16 [ %83, %75 ], [ 4330, %427 ]
  %88 = phi ptr [ %81, %75 ], [ %431, %427 ]
  %89 = phi i32 [ %78, %75 ], [ %434, %427 ]
  %90 = phi ptr [ %79, %75 ], [ %430, %427 ]
  %91 = phi ptr [ %80, %75 ], [ %428, %427 ]
  %92 = icmp sgt i32 %89, 0
  br i1 %92, label %93, label %99

93:                                               ; preds = %84
  %94 = add nsw i32 %89, -1
  %95 = zext i32 %94 to i64
  br label %103

96:                                               ; preds = %103
  %.lcssa = phi i16 [ %111, %103 ]
  %97 = getelementptr i8, ptr %88, i64 1
  %98 = getelementptr i8, ptr %97, i64 %95
  br label %99

99:                                               ; preds = %96, %84
  %100 = phi i16 [ %87, %84 ], [ %.lcssa, %96 ]
  %101 = phi ptr [ %88, %84 ], [ %98, %96 ]
  %102 = phi i32 [ %89, %84 ], [ 0, %96 ]
  br label %115

103:                                              ; preds = %103, %93
  %104 = phi i32 [ %113, %103 ], [ %89, %93 ]
  %105 = phi ptr [ %112, %103 ], [ %88, %93 ]
  %106 = phi i16 [ %111, %103 ], [ %87, %93 ]
  %107 = load i8, ptr %105, align 1, !tbaa !13
  %108 = zext i8 %107 to i16
  %109 = add i16 %106, %108
  %110 = mul i16 %109, -12691
  %111 = add i16 %110, 22719
  %112 = getelementptr inbounds i8, ptr %105, i64 1
  %113 = add nsw i32 %104, -1
  %114 = icmp ugt i32 %104, 1
  br i1 %114, label %103, label %96, !llvm.loop !580

115:                                              ; preds = %447, %99
  %116 = phi i64 [ %85, %99 ], [ %448, %447 ]
  %117 = phi i64 [ %86, %99 ], [ %449, %447 ]
  %118 = phi i16 [ %100, %99 ], [ %450, %447 ]
  %119 = phi ptr [ %101, %99 ], [ %451, %447 ]
  %120 = phi ptr [ %91, %99 ], [ %452, %447 ]
  %121 = load i8, ptr %119, align 1, !tbaa !13
  %122 = lshr i16 %118, 8
  %123 = zext i8 %121 to i16
  %124 = xor i16 %122, %123
  %125 = add i16 %118, %123
  %126 = mul i16 %125, -12691
  %127 = add i16 %126, 22719
  %128 = getelementptr inbounds i8, ptr %119, i64 1
  %129 = trunc i16 %124 to i8
  switch i8 %129, label %1002 [
    i8 1, label %447
    i8 3, label %447
    i8 4, label %130
    i8 5, label %153
    i8 6, label %207
    i8 7, label %230
    i8 8, label %253
    i8 9, label %416
    i8 10, label %419
    i8 11, label %435
    i8 12, label %437
    i8 13, label %568
    i8 14, label %620
    i8 21, label %714
    i8 22, label %763
    i8 30, label %786
    i8 31, label %894
    i8 0, label %1077
    i8 2, label %1077
    i8 15, label %1077
    i8 16, label %1077
    i8 17, label %1077
    i8 18, label %1077
    i8 19, label %1077
    i8 20, label %1077
    i8 23, label %1077
    i8 24, label %1077
    i8 25, label %1077
    i8 26, label %1077
    i8 27, label %1077
    i8 28, label %1077
    i8 29, label %1077
  ]

130:                                              ; preds = %115
  %131 = load i64, ptr %3, align 16, !tbaa !18
  %132 = shl i64 %131, 20
  %133 = ashr i64 %132, 32
  %134 = mul nsw i64 %133, %35
  br i1 %59, label %135, label %139

135:                                              ; preds = %130
  %136 = add nsw i64 %134, %41
  %137 = ashr i64 %136, %63
  %138 = add nsw i64 %137, %117
  br i1 %62, label %759, label %142

139:                                              ; preds = %130
  %140 = shl i64 %134, %61
  %141 = add nsw i64 %140, %117
  br i1 %62, label %759, label %146

142:                                              ; preds = %135
  %143 = mul nsw i64 %133, %33
  %144 = add nsw i64 %143, %41
  %145 = ashr i64 %144, %63
  br label %149

146:                                              ; preds = %139
  %147 = mul nsw i64 %133, %33
  %148 = shl i64 %147, %61
  br label %149

149:                                              ; preds = %146, %142
  %150 = phi i64 [ %138, %142 ], [ %141, %146 ]
  %151 = phi i64 [ %145, %142 ], [ %148, %146 ]
  %152 = add nsw i64 %151, %116
  br label %759

153:                                              ; preds = %115
  %154 = load i64, ptr %3, align 16, !tbaa !18
  %155 = shl i64 %154, 20
  %156 = ashr i64 %155, 32
  %157 = mul nsw i64 %156, %29
  br i1 %59, label %158, label %169

158:                                              ; preds = %153
  %159 = add nsw i64 %157, %41
  %160 = ashr i64 %159, %63
  %161 = add nsw i64 %160, %116
  %162 = load i64, ptr %64, align 8, !tbaa !18
  %163 = shl i64 %162, 20
  %164 = ashr i64 %163, 32
  %165 = mul nsw i64 %164, %35
  %166 = add nsw i64 %165, %41
  %167 = ashr i64 %166, %63
  %168 = add nsw i64 %167, %117
  br i1 %62, label %198, label %178

169:                                              ; preds = %153
  %170 = shl i64 %157, %61
  %171 = add nsw i64 %170, %116
  %172 = load i64, ptr %64, align 8, !tbaa !18
  %173 = shl i64 %172, 20
  %174 = ashr i64 %173, 32
  %175 = mul nsw i64 %174, %35
  %176 = shl i64 %175, %61
  %177 = add nsw i64 %176, %117
  br i1 %62, label %198, label %186

178:                                              ; preds = %158
  %179 = mul nsw i64 %156, %31
  %180 = add nsw i64 %179, %41
  %181 = ashr i64 %180, %63
  %182 = add nsw i64 %181, %168
  %183 = mul nsw i64 %164, %33
  %184 = add nsw i64 %183, %41
  %185 = ashr i64 %184, %63
  br label %193

186:                                              ; preds = %169
  %187 = mul nsw i64 %156, %31
  %188 = add i64 %175, %187
  %189 = shl i64 %188, %61
  %190 = add i64 %189, %117
  %191 = mul nsw i64 %174, %33
  %192 = shl i64 %191, %61
  br label %193

193:                                              ; preds = %186, %178
  %194 = phi i64 [ %182, %178 ], [ %190, %186 ]
  %195 = phi i64 [ %161, %178 ], [ %171, %186 ]
  %196 = phi i64 [ %185, %178 ], [ %192, %186 ]
  %197 = add nsw i64 %196, %195
  br label %198

198:                                              ; preds = %249, %239, %235, %226, %216, %212, %193, %169, %158
  %199 = phi i64 [ %252, %249 ], [ %116, %235 ], [ %227, %226 ], [ %215, %212 ], [ %197, %193 ], [ %161, %158 ], [ %171, %169 ], [ %218, %216 ], [ %116, %239 ]
  %200 = phi i64 [ %250, %249 ], [ %238, %235 ], [ %229, %226 ], [ %117, %212 ], [ %194, %193 ], [ %168, %158 ], [ %177, %169 ], [ %117, %216 ], [ %241, %239 ]
  %201 = call i32 @gx_path_add_line(ptr noundef %9, i64 noundef %199, i64 noundef %200) #64
  br label %202

202:                                              ; preds = %759, %408, %198
  %203 = phi i64 [ %409, %408 ], [ %760, %759 ], [ %199, %198 ]
  %204 = phi i64 [ %410, %408 ], [ %761, %759 ], [ %200, %198 ]
  %205 = phi i32 [ %415, %408 ], [ %762, %759 ], [ %201, %198 ]
  %206 = icmp slt i32 %205, 0
  br i1 %206, label %1077, label %447

207:                                              ; preds = %115
  %208 = load i64, ptr %3, align 16, !tbaa !18
  %209 = shl i64 %208, 20
  %210 = ashr i64 %209, 32
  %211 = mul nsw i64 %210, %29
  br i1 %59, label %212, label %216

212:                                              ; preds = %207
  %213 = add nsw i64 %211, %41
  %214 = ashr i64 %213, %63
  %215 = add nsw i64 %214, %116
  br i1 %62, label %198, label %219

216:                                              ; preds = %207
  %217 = shl i64 %211, %61
  %218 = add nsw i64 %217, %116
  br i1 %62, label %198, label %223

219:                                              ; preds = %212
  %220 = mul nsw i64 %210, %31
  %221 = add nsw i64 %220, %41
  %222 = ashr i64 %221, %63
  br label %226

223:                                              ; preds = %216
  %224 = mul nsw i64 %210, %31
  %225 = shl i64 %224, %61
  br label %226

226:                                              ; preds = %223, %219
  %227 = phi i64 [ %215, %219 ], [ %218, %223 ]
  %228 = phi i64 [ %222, %219 ], [ %225, %223 ]
  %229 = add nsw i64 %228, %117
  br label %198

230:                                              ; preds = %115
  %231 = load i64, ptr %3, align 16, !tbaa !18
  %232 = shl i64 %231, 20
  %233 = ashr i64 %232, 32
  %234 = mul nsw i64 %233, %35
  br i1 %59, label %235, label %239

235:                                              ; preds = %230
  %236 = add nsw i64 %234, %41
  %237 = ashr i64 %236, %63
  %238 = add nsw i64 %237, %117
  br i1 %62, label %198, label %242

239:                                              ; preds = %230
  %240 = shl i64 %234, %61
  %241 = add nsw i64 %240, %117
  br i1 %62, label %198, label %246

242:                                              ; preds = %235
  %243 = mul nsw i64 %233, %33
  %244 = add nsw i64 %243, %41
  %245 = ashr i64 %244, %63
  br label %249

246:                                              ; preds = %239
  %247 = mul nsw i64 %233, %33
  %248 = shl i64 %247, %61
  br label %249

249:                                              ; preds = %246, %242
  %250 = phi i64 [ %238, %242 ], [ %241, %246 ]
  %251 = phi i64 [ %245, %242 ], [ %248, %246 ]
  %252 = add nsw i64 %251, %116
  br label %198

253:                                              ; preds = %115
  %254 = load i64, ptr %3, align 16, !tbaa !18
  %255 = shl i64 %254, 20
  %256 = ashr i64 %255, 32
  %257 = mul nsw i64 %256, %29
  br i1 %59, label %258, label %269

258:                                              ; preds = %253
  %259 = add nsw i64 %257, %41
  %260 = ashr i64 %259, %63
  %261 = add nsw i64 %260, %116
  %262 = load i64, ptr %64, align 8, !tbaa !18
  %263 = shl i64 %262, 20
  %264 = ashr i64 %263, 32
  %265 = mul nsw i64 %264, %35
  %266 = add nsw i64 %265, %41
  %267 = ashr i64 %266, %63
  %268 = add nsw i64 %267, %117
  br i1 %62, label %292, label %283

269:                                              ; preds = %253
  %270 = load i64, ptr %64, align 8, !tbaa !18
  %271 = shl i64 %270, 20
  %272 = ashr i64 %271, 32
  %273 = mul nsw i64 %272, %35
  br i1 %62, label %274, label %318

274:                                              ; preds = %269
  %275 = load i64, ptr %65, align 16, !tbaa !18
  %276 = load i64, ptr %66, align 8, !tbaa !18
  %277 = shl i64 %275, 20
  %278 = ashr i64 %277, 32
  %279 = mul nsw i64 %278, %29
  %280 = shl i64 %276, 20
  %281 = ashr i64 %280, 32
  %282 = mul nsw i64 %281, %35
  br label %352

283:                                              ; preds = %258
  %284 = mul nsw i64 %256, %31
  %285 = add nsw i64 %284, %41
  %286 = ashr i64 %285, %63
  %287 = add nsw i64 %286, %268
  %288 = mul nsw i64 %264, %33
  %289 = add nsw i64 %288, %41
  %290 = ashr i64 %289, %63
  %291 = add nsw i64 %290, %261
  br label %292

292:                                              ; preds = %283, %258
  %293 = phi i64 [ %287, %283 ], [ %268, %258 ]
  %294 = phi i64 [ %291, %283 ], [ %261, %258 ]
  %295 = load i64, ptr %65, align 16, !tbaa !18
  %296 = load i64, ptr %66, align 8, !tbaa !18
  %297 = shl i64 %295, 20
  %298 = ashr i64 %297, 32
  %299 = mul nsw i64 %298, %29
  %300 = add nsw i64 %299, %41
  %301 = ashr i64 %300, %63
  %302 = add nsw i64 %301, %294
  %303 = shl i64 %296, 20
  %304 = ashr i64 %303, 32
  %305 = mul nsw i64 %304, %35
  %306 = add nsw i64 %305, %41
  %307 = ashr i64 %306, %63
  %308 = add nsw i64 %307, %293
  br i1 %62, label %335, label %309

309:                                              ; preds = %292
  %310 = mul nsw i64 %298, %31
  %311 = add nsw i64 %310, %41
  %312 = ashr i64 %311, %63
  %313 = add nsw i64 %312, %308
  %314 = mul nsw i64 %304, %33
  %315 = add nsw i64 %314, %41
  %316 = ashr i64 %315, %63
  %317 = add nsw i64 %316, %302
  br label %335

318:                                              ; preds = %269
  %319 = mul nsw i64 %256, %31
  %320 = add i64 %273, %319
  %321 = mul nsw i64 %272, %33
  %322 = add i64 %257, %321
  %323 = load i64, ptr %65, align 16, !tbaa !18
  %324 = load i64, ptr %66, align 8, !tbaa !18
  %325 = shl i64 %323, 20
  %326 = ashr i64 %325, 32
  %327 = mul nsw i64 %326, %29
  %328 = shl i64 %324, 20
  %329 = ashr i64 %328, 32
  %330 = mul nsw i64 %329, %35
  %331 = mul nsw i64 %326, %31
  %332 = add i64 %330, %331
  %333 = mul nsw i64 %329, %33
  %334 = add i64 %327, %333
  br label %352

335:                                              ; preds = %309, %292
  %336 = phi i64 [ %313, %309 ], [ %308, %292 ]
  %337 = phi i64 [ %317, %309 ], [ %302, %292 ]
  %338 = load i64, ptr %73, align 16, !tbaa !18
  %339 = shl i64 %338, 20
  %340 = ashr i64 %339, 32
  %341 = mul nsw i64 %340, %29
  %342 = add nsw i64 %341, %41
  %343 = ashr i64 %342, %63
  %344 = add nsw i64 %343, %337
  %345 = load i64, ptr %74, align 8, !tbaa !18
  %346 = shl i64 %345, 20
  %347 = ashr i64 %346, 32
  %348 = mul nsw i64 %347, %35
  %349 = add nsw i64 %348, %41
  %350 = ashr i64 %349, %63
  %351 = add nsw i64 %350, %336
  br i1 %62, label %408, label %383

352:                                              ; preds = %318, %274
  %353 = phi i64 [ %322, %318 ], [ %257, %274 ]
  %354 = phi i64 [ %320, %318 ], [ %273, %274 ]
  %355 = phi i64 [ %332, %318 ], [ %282, %274 ]
  %356 = phi i64 [ %334, %318 ], [ %279, %274 ]
  %357 = shl i64 %354, %61
  %358 = add i64 %357, %117
  %359 = shl i64 %353, %61
  %360 = add i64 %359, %116
  %361 = add i64 %353, %356
  %362 = shl i64 %361, %61
  %363 = add i64 %362, %116
  %364 = add i64 %354, %355
  %365 = shl i64 %364, %61
  %366 = add i64 %365, %117
  %367 = load i64, ptr %73, align 16, !tbaa !18
  %368 = shl i64 %367, 20
  %369 = ashr i64 %368, 32
  %370 = mul nsw i64 %369, %29
  %371 = add i64 %356, %370
  %372 = add i64 %353, %371
  %373 = shl i64 %372, %61
  %374 = add i64 %373, %116
  %375 = load i64, ptr %74, align 8, !tbaa !18
  %376 = shl i64 %375, 20
  %377 = ashr i64 %376, 32
  %378 = mul nsw i64 %377, %35
  %379 = add i64 %355, %378
  %380 = add i64 %354, %379
  %381 = shl i64 %380, %61
  %382 = add i64 %381, %117
  br i1 %62, label %408, label %391

383:                                              ; preds = %335
  %384 = mul nsw i64 %340, %31
  %385 = add nsw i64 %384, %41
  %386 = ashr i64 %385, %63
  %387 = add nsw i64 %386, %351
  %388 = mul nsw i64 %347, %33
  %389 = add nsw i64 %388, %41
  %390 = ashr i64 %389, %63
  br label %399

391:                                              ; preds = %352
  %392 = mul nsw i64 %369, %31
  %393 = add i64 %379, %392
  %394 = add i64 %354, %393
  %395 = shl i64 %394, %61
  %396 = add i64 %395, %117
  %397 = mul nsw i64 %377, %33
  %398 = shl i64 %397, %61
  br label %399

399:                                              ; preds = %391, %383
  %400 = phi i64 [ %387, %383 ], [ %396, %391 ]
  %401 = phi i64 [ %336, %383 ], [ %366, %391 ]
  %402 = phi i64 [ %337, %383 ], [ %363, %391 ]
  %403 = phi i64 [ %294, %383 ], [ %360, %391 ]
  %404 = phi i64 [ %293, %383 ], [ %358, %391 ]
  %405 = phi i64 [ %344, %383 ], [ %374, %391 ]
  %406 = phi i64 [ %390, %383 ], [ %398, %391 ]
  %407 = add nsw i64 %406, %405
  br label %408

408:                                              ; preds = %994, %971, %961, %886, %863, %853, %399, %352, %335
  %409 = phi i64 [ %1001, %994 ], [ %977, %971 ], [ %891, %886 ], [ %878, %863 ], [ %407, %399 ], [ %374, %352 ], [ %344, %335 ], [ %862, %853 ], [ %963, %961 ]
  %410 = phi i64 [ %999, %994 ], [ %986, %971 ], [ %893, %886 ], [ %871, %863 ], [ %400, %399 ], [ %382, %352 ], [ %351, %335 ], [ %854, %853 ], [ %970, %961 ]
  %411 = phi i64 [ %997, %994 ], [ %905, %971 ], [ %890, %886 ], [ %864, %863 ], [ %403, %399 ], [ %360, %352 ], [ %294, %335 ], [ %813, %853 ], [ %902, %961 ]
  %412 = phi i64 [ %998, %994 ], [ %972, %971 ], [ %889, %886 ], [ %797, %863 ], [ %404, %399 ], [ %358, %352 ], [ %293, %335 ], [ %794, %853 ], [ %921, %961 ]
  %413 = phi i64 [ %996, %994 ], [ %977, %971 ], [ %888, %886 ], [ %868, %863 ], [ %402, %399 ], [ %363, %352 ], [ %337, %335 ], [ %855, %853 ], [ %963, %961 ]
  %414 = phi i64 [ %995, %994 ], [ %979, %971 ], [ %887, %886 ], [ %871, %863 ], [ %401, %399 ], [ %366, %352 ], [ %336, %335 ], [ %854, %853 ], [ %962, %961 ]
  %415 = call i32 @gx_path_add_curve(ptr noundef %9, i64 noundef %411, i64 noundef %412, i64 noundef %413, i64 noundef %414, i64 noundef %409, i64 noundef %410) #64
  br label %202

416:                                              ; preds = %115
  %417 = call i32 @gx_path_close_subpath(ptr noundef %9) #64
  %418 = icmp slt i32 %417, 0
  br i1 %418, label %1077, label %759

419:                                              ; preds = %115
  %.lcssa29 = phi i64 [ %116, %115 ]
  %.lcssa23 = phi i64 [ %117, %115 ]
  %.lcssa17 = phi ptr [ %120, %115 ]
  %.lcssa11 = phi i16 [ %127, %115 ]
  %.lcssa5 = phi ptr [ %128, %115 ]
  %420 = load i64, ptr %.lcssa17, align 8, !tbaa !18
  %421 = lshr i64 %420, 12
  %422 = trunc i64 %421 to i32
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #65
  %423 = load ptr, ptr %11, align 8, !tbaa !581
  %424 = call i32 %423(ptr noundef nonnull %11, i32 noundef %422, ptr noundef nonnull %4) #64
  %425 = icmp sgt i32 %424, -1
  br i1 %425, label %427, label %426

426:                                              ; preds = %419
  %.lcssa47 = phi i32 [ %102, %419 ]
  %.lcssa41 = phi ptr [ %90, %419 ]
  %.lcssa35 = phi i32 [ %424, %419 ]
  %.lcssa29.lcssa = phi i64 [ %.lcssa29, %419 ]
  %.lcssa23.lcssa = phi i64 [ %.lcssa23, %419 ]
  %.lcssa17.lcssa = phi ptr [ %.lcssa17, %419 ]
  %.lcssa11.lcssa = phi i16 [ %.lcssa11, %419 ]
  %.lcssa5.lcssa = phi ptr [ %.lcssa5, %419 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  br label %1077

427:                                              ; preds = %419
  %428 = getelementptr inbounds i64, ptr %.lcssa17, i64 -1
  store ptr %.lcssa5, ptr %90, align 8, !tbaa !568
  %429 = getelementptr inbounds %struct.ip_state, ptr %90, i64 0, i32 1
  store i16 %.lcssa11, ptr %429, align 8, !tbaa !570
  %430 = getelementptr inbounds %struct.ip_state, ptr %90, i64 1
  %431 = load ptr, ptr %4, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #65
  %432 = load ptr, ptr %10, align 8, !tbaa !564
  %433 = getelementptr inbounds %struct.gs_type1_data_s, ptr %432, i64 0, i32 3
  %434 = load i32, ptr %433, align 8, !tbaa !240
  br label %84

435:                                              ; preds = %115
  %.lcssa42 = phi i32 [ %102, %115 ]
  %.lcssa36 = phi ptr [ %90, %115 ]
  %.lcssa30 = phi i64 [ %116, %115 ]
  %.lcssa24 = phi i64 [ %117, %115 ]
  %.lcssa18 = phi ptr [ %120, %115 ]
  %436 = getelementptr inbounds %struct.ip_state, ptr %.lcssa36, i64 -1
  br label %75

437:                                              ; preds = %115
  %438 = load i8, ptr %128, align 1, !tbaa !13
  %439 = lshr i16 %127, 8
  %440 = zext i8 %438 to i16
  %441 = add i16 %127, %440
  %442 = mul i16 %441, -12691
  %443 = add i16 %442, 22719
  %444 = getelementptr inbounds i8, ptr %119, i64 2
  %445 = trunc i16 %439 to i8
  %446 = xor i8 %438, %445
  switch i8 %446, label %1077 [
    i8 0, label %447
    i8 1, label %447
    i8 2, label %447
    i8 6, label %453
    i8 7, label %513
    i8 12, label %516
    i8 15, label %525
    i8 16, label %538
    i8 17, label %563
    i8 33, label %571
  ]

447:                                              ; preds = %1038, %1030, %1020, %1005, %615, %591, %580, %563, %536, %516, %437, %437, %437, %202, %115, %115
  %448 = phi i64 [ %116, %1005 ], [ %116, %563 ], [ %116, %536 ], [ %116, %516 ], [ %116, %1020 ], [ %116, %1038 ], [ %116, %1030 ], [ %116, %115 ], [ %203, %202 ], [ %619, %615 ], [ %583, %580 ], [ %593, %591 ], [ %116, %437 ], [ %116, %115 ], [ %116, %437 ], [ %116, %437 ]
  %449 = phi i64 [ %117, %1005 ], [ %117, %563 ], [ %117, %536 ], [ %117, %516 ], [ %117, %1020 ], [ %117, %1038 ], [ %117, %1030 ], [ %117, %115 ], [ %204, %202 ], [ %616, %615 ], [ %590, %580 ], [ %599, %591 ], [ %117, %437 ], [ %117, %115 ], [ %117, %437 ], [ %117, %437 ]
  %450 = phi i16 [ %127, %1005 ], [ %443, %563 ], [ %443, %536 ], [ %443, %516 ], [ %1017, %1020 ], [ %1064, %1038 ], [ %1017, %1030 ], [ %127, %115 ], [ %127, %202 ], [ %574, %615 ], [ %574, %580 ], [ %574, %591 ], [ %443, %437 ], [ %127, %115 ], [ %443, %437 ], [ %443, %437 ]
  %451 = phi ptr [ %128, %1005 ], [ %444, %563 ], [ %444, %536 ], [ %444, %516 ], [ %1018, %1020 ], [ %1065, %1038 ], [ %1018, %1030 ], [ %128, %115 ], [ %128, %202 ], [ %575, %615 ], [ %575, %580 ], [ %575, %591 ], [ %444, %437 ], [ %128, %115 ], [ %444, %437 ], [ %444, %437 ]
  %452 = phi ptr [ %1003, %1005 ], [ %564, %563 ], [ %537, %536 ], [ %517, %516 ], [ %1003, %1020 ], [ %1003, %1038 ], [ %1003, %1030 ], [ %72, %115 ], [ %72, %202 ], [ %72, %615 ], [ %72, %580 ], [ %72, %591 ], [ %72, %437 ], [ %72, %115 ], [ %72, %437 ], [ %72, %437 ]
  br label %115

453:                                              ; preds = %437
  %.lcssa45 = phi i32 [ %102, %437 ]
  %.lcssa39 = phi ptr [ %90, %437 ]
  %.lcssa33 = phi i64 [ %116, %437 ]
  %.lcssa27 = phi i64 [ %117, %437 ]
  %.lcssa21 = phi ptr [ %120, %437 ]
  %.lcssa15 = phi i16 [ %127, %437 ]
  %.lcssa9 = phi ptr [ %128, %437 ]
  %454 = load i64, ptr %66, align 8, !tbaa !18
  %455 = trunc i64 %454 to i32
  %456 = lshr i32 %455, 12
  %457 = and i32 %456, 255
  %458 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 13
  store i32 %457, ptr %458, align 8, !tbaa !573
  %459 = load i64, ptr %3, align 16, !tbaa !18
  %460 = load i64, ptr %64, align 8, !tbaa !18
  %461 = sub nsw i64 %460, %459
  %462 = shl i64 %461, 20
  %463 = ashr i64 %462, 32
  %464 = mul nsw i64 %463, %29
  br i1 %59, label %465, label %476

465:                                              ; preds = %453
  %466 = add nsw i64 %464, %41
  %467 = ashr i64 %466, %63
  %468 = add nsw i64 %467, %21
  %469 = load i64, ptr %65, align 16, !tbaa !18
  %470 = shl i64 %469, 20
  %471 = ashr i64 %470, 32
  %472 = mul nsw i64 %471, %35
  %473 = add nsw i64 %472, %41
  %474 = ashr i64 %473, %63
  %475 = add nsw i64 %474, %23
  br i1 %62, label %505, label %485

476:                                              ; preds = %453
  %477 = shl i64 %464, %61
  %478 = add nsw i64 %477, %21
  %479 = load i64, ptr %65, align 16, !tbaa !18
  %480 = shl i64 %479, 20
  %481 = ashr i64 %480, 32
  %482 = mul nsw i64 %481, %35
  %483 = shl i64 %482, %61
  %484 = add nsw i64 %483, %23
  br i1 %62, label %505, label %493

485:                                              ; preds = %465
  %486 = mul nsw i64 %463, %31
  %487 = add nsw i64 %486, %41
  %488 = ashr i64 %487, %63
  %489 = add nsw i64 %475, %488
  %490 = mul nsw i64 %471, %33
  %491 = add nsw i64 %490, %41
  %492 = ashr i64 %491, %63
  br label %500

493:                                              ; preds = %476
  %494 = mul nsw i64 %463, %31
  %495 = add i64 %482, %494
  %496 = shl i64 %495, %61
  %497 = add i64 %496, %23
  %498 = mul nsw i64 %481, %33
  %499 = shl i64 %498, %61
  br label %500

500:                                              ; preds = %493, %485
  %501 = phi i64 [ %489, %485 ], [ %497, %493 ]
  %502 = phi i64 [ %468, %485 ], [ %478, %493 ]
  %503 = phi i64 [ %492, %485 ], [ %499, %493 ]
  %504 = add nsw i64 %503, %502
  br label %505

505:                                              ; preds = %500, %476, %465
  %506 = phi i64 [ %504, %500 ], [ %468, %465 ], [ %478, %476 ]
  %507 = phi i64 [ %501, %500 ], [ %475, %465 ], [ %484, %476 ]
  store i64 %506, ptr %24, align 8, !tbaa !313
  store i64 %507, ptr %26, align 8, !tbaa !314
  %508 = load i64, ptr %73, align 16, !tbaa !18
  %509 = trunc i64 %508 to i32
  %510 = lshr i32 %509, 11
  %511 = and i32 %510, 510
  %512 = or i32 %511, 1
  br label %1077

513:                                              ; preds = %437
  %514 = load <2 x i64>, ptr %3, align 16, !tbaa !18
  store <2 x i64> %514, ptr %67, align 8, !tbaa !18
  %515 = load <2 x i64>, ptr %65, align 16, !tbaa !18
  store <2 x i64> %515, ptr %69, align 8, !tbaa !18
  br label %571

516:                                              ; preds = %437
  %517 = getelementptr inbounds i64, ptr %120, i64 -1
  %518 = load i64, ptr %517, align 8, !tbaa !18
  %519 = sitofp i64 %518 to float
  %520 = load i64, ptr %120, align 8, !tbaa !18
  %521 = sitofp i64 %520 to float
  %522 = fdiv float %519, %521
  %523 = fmul float %522, 4.096000e+03
  %524 = fptosi float %523 to i64
  store i64 %524, ptr %517, align 8, !tbaa !18
  br label %447

525:                                              ; preds = %437
  %526 = getelementptr inbounds i64, ptr %120, i64 -2
  %527 = load i64, ptr %526, align 8, !tbaa !18
  %528 = getelementptr inbounds i64, ptr %120, i64 -1
  %529 = load i64, ptr %528, align 8, !tbaa !18
  %530 = icmp sgt i64 %527, %529
  br i1 %530, label %531, label %536

531:                                              ; preds = %525
  %532 = load i64, ptr %120, align 8, !tbaa !18
  %533 = getelementptr inbounds i64, ptr %120, i64 -3
  %534 = load i64, ptr %533, align 8, !tbaa !18
  %535 = add nsw i64 %534, %532
  store i64 %535, ptr %533, align 8, !tbaa !18
  br label %536

536:                                              ; preds = %531, %525
  %537 = getelementptr inbounds i64, ptr %120, i64 -3
  br label %447

538:                                              ; preds = %437
  %.lcssa46 = phi i32 [ %102, %437 ]
  %.lcssa40 = phi ptr [ %90, %437 ]
  %.lcssa34 = phi i64 [ %116, %437 ]
  %.lcssa28 = phi i64 [ %117, %437 ]
  %.lcssa22 = phi ptr [ %120, %437 ]
  %.lcssa16 = phi i16 [ %127, %437 ]
  %.lcssa10 = phi ptr [ %128, %437 ]
  %.lcssa4 = phi i16 [ %443, %437 ]
  %.lcssa2 = phi ptr [ %444, %437 ]
  %539 = load i64, ptr %.lcssa22, align 8, !tbaa !18
  %540 = ptrtoint ptr %.lcssa22 to i64
  %541 = ptrtoint ptr %3 to i64
  %542 = sub i64 %540, %541
  %543 = lshr exact i64 %542, 3
  %544 = trunc i64 %543 to i32
  store ptr %.lcssa2, ptr %.lcssa40, align 8, !tbaa !568
  %545 = getelementptr inbounds %struct.ip_state, ptr %.lcssa40, i64 0, i32 1
  store i16 %.lcssa4, ptr %545, align 8, !tbaa !570
  store i32 %544, ptr %42, align 8, !tbaa !567
  %546 = ptrtoint ptr %.lcssa40 to i64
  %547 = ptrtoint ptr %12 to i64
  %548 = sub i64 %546, %547
  %549 = lshr exact i64 %548, 4
  %550 = trunc i64 %549 to i32
  %551 = add i32 %550, 1
  store i32 %551, ptr %13, align 8, !tbaa !571
  store i32 0, ptr %18, align 4, !tbaa !572
  %552 = icmp eq i32 %544, 0
  br i1 %552, label %558, label %553

553:                                              ; preds = %538
  %554 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 6
  %555 = shl i64 %542, 29
  %556 = ashr exact i64 %555, 29
  %557 = and i64 %556, -8
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %554, ptr nonnull align 16 %3, i64 %557, i1 false)
  br label %558

558:                                              ; preds = %553, %538
  %559 = lshr i64 %539, 11
  %560 = trunc i64 %559 to i32
  %561 = and i32 %560, -2
  %562 = add i32 %561, 2
  br label %1077

563:                                              ; preds = %437
  %564 = getelementptr inbounds i64, ptr %120, i64 1
  %565 = load ptr, ptr %71, align 8, !tbaa !582
  %566 = call i32 %565(ptr noundef %11, ptr noundef nonnull %564) #64
  %567 = icmp slt i32 %566, 0
  br i1 %567, label %1077, label %447

568:                                              ; preds = %115
  %569 = load i64, ptr %3, align 16, !tbaa !18
  store i64 %569, ptr %67, align 8, !tbaa !583
  store i64 0, ptr %68, align 8, !tbaa !584
  %570 = load i64, ptr %64, align 8, !tbaa !18
  store i64 %570, ptr %69, align 8, !tbaa !585
  store i64 0, ptr %70, align 8, !tbaa !586
  store i64 0, ptr %64, align 8, !tbaa !18
  br label %571

571:                                              ; preds = %568, %513, %437
  %572 = phi i64 [ %116, %568 ], [ %116, %513 ], [ %21, %437 ]
  %573 = phi i64 [ %117, %568 ], [ %117, %513 ], [ %23, %437 ]
  %574 = phi i16 [ %127, %568 ], [ %443, %513 ], [ %443, %437 ]
  %575 = phi ptr [ %128, %568 ], [ %444, %513 ], [ %444, %437 ]
  %576 = load i64, ptr %3, align 16, !tbaa !18
  %577 = shl i64 %576, 20
  %578 = ashr i64 %577, 32
  %579 = mul nsw i64 %578, %29
  br i1 %59, label %580, label %591

580:                                              ; preds = %571
  %581 = add nsw i64 %579, %41
  %582 = ashr i64 %581, %63
  %583 = add nsw i64 %582, %572
  %584 = load i64, ptr %64, align 8, !tbaa !18
  %585 = shl i64 %584, 20
  %586 = ashr i64 %585, 32
  %587 = mul nsw i64 %586, %35
  %588 = add nsw i64 %587, %41
  %589 = ashr i64 %588, %63
  %590 = add nsw i64 %589, %573
  br i1 %62, label %447, label %600

591:                                              ; preds = %571
  %592 = shl i64 %579, %61
  %593 = add nsw i64 %592, %572
  %594 = load i64, ptr %64, align 8, !tbaa !18
  %595 = shl i64 %594, 20
  %596 = ashr i64 %595, 32
  %597 = mul nsw i64 %596, %35
  %598 = shl i64 %597, %61
  %599 = add nsw i64 %598, %573
  br i1 %62, label %447, label %608

600:                                              ; preds = %580
  %601 = mul nsw i64 %578, %31
  %602 = add nsw i64 %601, %41
  %603 = ashr i64 %602, %63
  %604 = add nsw i64 %603, %590
  %605 = mul nsw i64 %586, %33
  %606 = add nsw i64 %605, %41
  %607 = ashr i64 %606, %63
  br label %615

608:                                              ; preds = %591
  %609 = mul nsw i64 %578, %31
  %610 = add i64 %597, %609
  %611 = shl i64 %610, %61
  %612 = add i64 %611, %573
  %613 = mul nsw i64 %596, %33
  %614 = shl i64 %613, %61
  br label %615

615:                                              ; preds = %608, %600
  %616 = phi i64 [ %604, %600 ], [ %612, %608 ]
  %617 = phi i64 [ %583, %600 ], [ %593, %608 ]
  %618 = phi i64 [ %607, %600 ], [ %614, %608 ]
  %619 = add nsw i64 %618, %617
  br label %447

620:                                              ; preds = %115
  %.lcssa43 = phi i32 [ %102, %115 ]
  %.lcssa37 = phi ptr [ %90, %115 ]
  %.lcssa31 = phi i64 [ %116, %115 ]
  %.lcssa25 = phi i64 [ %117, %115 ]
  %.lcssa19 = phi ptr [ %120, %115 ]
  %.lcssa13 = phi i16 [ %127, %115 ]
  %.lcssa7 = phi ptr [ %128, %115 ]
  %621 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 13
  %622 = load i32, ptr %621, align 8, !tbaa !573
  %623 = icmp sgt i32 %622, -1
  br i1 %623, label %624, label %628

624:                                              ; preds = %620
  store i32 -1, ptr %621, align 8, !tbaa !573
  %625 = load <2 x i64>, ptr %20, align 8, !tbaa !18
  store <2 x i64> %625, ptr %24, align 8, !tbaa !18
  %626 = shl nuw i32 %622, 1
  %627 = or i32 %626, 1
  br label %1077

628:                                              ; preds = %620
  %629 = load i64, ptr %20, align 8, !tbaa !324
  %630 = load i64, ptr %22, align 8, !tbaa !325
  %631 = call i32 @gx_path_add_point(ptr noundef %9, i64 noundef %629, i64 noundef %630) #64
  %632 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 3
  %633 = load i32, ptr %632, align 8, !tbaa !565
  %634 = icmp eq i32 %633, 0
  br i1 %634, label %654, label %635

635:                                              ; preds = %628
  %636 = load ptr, ptr %0, align 8, !tbaa !563
  %637 = load i64, ptr %69, align 8, !tbaa !585
  %638 = sitofp i64 %637 to double
  %639 = fmul double %638, 0x3F30000000000000
  %640 = fptrunc double %639 to float
  %641 = fpext float %640 to double
  %642 = load i64, ptr %70, align 8, !tbaa !586
  %643 = sitofp i64 %642 to double
  %644 = fmul double %643, 0x3F30000000000000
  %645 = fptrunc double %644 to float
  %646 = fpext float %645 to double
  %647 = call i32 @gs_setcharwidth(ptr noundef %636, double noundef %641, double noundef %646) #64
  %648 = icmp slt i32 %647, 0
  br i1 %648, label %1077, label %649

649:                                              ; preds = %635
  %650 = load ptr, ptr %7, align 8, !tbaa !521
  %651 = getelementptr inbounds %struct.gs_state_s, ptr %650, i64 0, i32 7
  %652 = load ptr, ptr %651, align 8, !tbaa !244
  %653 = call i32 @gx_path_merge(ptr noundef %9, ptr noundef %652) #64
  br label %1077

654:                                              ; preds = %628
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #65
  %655 = call i32 (ptr, ptr, ...) @gs_pathbbox(ptr noundef nonnull %7, ptr noundef nonnull %5) #64
  %656 = call i32 @gx_path_add_point(ptr noundef %9, i64 noundef %21, i64 noundef %23) #64
  %657 = icmp slt i32 %655, 0
  br i1 %657, label %658, label %659

658:                                              ; preds = %654
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  br label %659

659:                                              ; preds = %658, %654
  %660 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 4
  %661 = load i32, ptr %660, align 4, !tbaa !566
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %663, label %665

663:                                              ; preds = %659
  %664 = load <4 x float>, ptr %5, align 16, !tbaa !103
  br label %675

665:                                              ; preds = %659
  %666 = call float @gs_currentlinewidth(ptr noundef nonnull %7) #64
  %667 = fcmp oeq float %666, 0.000000e+00
  %668 = select i1 %667, float 1.000000e+00, float %666
  %669 = load <4 x float>, ptr %5, align 16, !tbaa !103
  %670 = insertelement <4 x float> poison, float %668, i64 0
  %671 = shufflevector <4 x float> %670, <4 x float> poison, <4 x i32> zeroinitializer
  %672 = fadd <4 x float> %669, %671
  %673 = fsub <4 x float> %669, %671
  %674 = shufflevector <4 x float> %673, <4 x float> %672, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  store <4 x float> %674, ptr %5, align 16, !tbaa !103
  br label %675

675:                                              ; preds = %665, %663
  %676 = phi <4 x float> [ %664, %663 ], [ %674, %665 ]
  %677 = load ptr, ptr %0, align 8, !tbaa !563
  %678 = load i64, ptr %69, align 8, !tbaa !585
  %679 = sitofp i64 %678 to double
  %680 = fmul double %679, 0x3F30000000000000
  %681 = fptrunc double %680 to float
  %682 = fpext float %681 to double
  %683 = load i64, ptr %70, align 8, !tbaa !586
  %684 = sitofp i64 %683 to double
  %685 = fmul double %684, 0x3F30000000000000
  %686 = fptrunc double %685 to float
  %687 = fpext float %686 to double
  %688 = extractelement <4 x float> %676, i64 0
  %689 = fpext float %688 to double
  %690 = extractelement <4 x float> %676, i64 1
  %691 = fpext float %690 to double
  %692 = extractelement <4 x float> %676, i64 2
  %693 = fpext float %692 to double
  %694 = extractelement <4 x float> %676, i64 3
  %695 = fpext float %694 to double
  %696 = call i32 @gs_setcachedevice(ptr noundef %677, double noundef %682, double noundef %687, double noundef %689, double noundef %691, double noundef %693, double noundef %695) #64
  %697 = icmp sgt i32 %696, -1
  br i1 %697, label %698, label %713

698:                                              ; preds = %675
  %699 = load ptr, ptr %8, align 8, !tbaa !244
  %700 = load i64, ptr %20, align 8, !tbaa !324
  %701 = sub nsw i64 %700, %21
  %702 = load i64, ptr %22, align 8, !tbaa !325
  %703 = sub nsw i64 %702, %23
  %704 = call i32 @gx_path_translate(ptr noundef %699, i64 noundef %701, i64 noundef %703) #64
  %705 = load i32, ptr %660, align 4, !tbaa !566
  %706 = icmp eq i32 %705, 0
  br i1 %706, label %709, label %707

707:                                              ; preds = %698
  %708 = call i32 (ptr, ...) @gs_stroke(ptr noundef nonnull %7) #64
  br label %711

709:                                              ; preds = %698
  %710 = call i32 (ptr, i64, ...) @gs_fill_trim(ptr noundef nonnull %7, i64 noundef 819) #64
  br label %711

711:                                              ; preds = %709, %707
  %712 = phi i32 [ %710, %709 ], [ %708, %707 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #65
  br label %1077

713:                                              ; preds = %675
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #65
  br label %1077

714:                                              ; preds = %115
  %715 = load i64, ptr %3, align 16, !tbaa !18
  %716 = shl i64 %715, 20
  %717 = ashr i64 %716, 32
  %718 = mul nsw i64 %717, %29
  br i1 %59, label %719, label %730

719:                                              ; preds = %714
  %720 = add nsw i64 %718, %41
  %721 = ashr i64 %720, %63
  %722 = add nsw i64 %721, %116
  %723 = load i64, ptr %64, align 8, !tbaa !18
  %724 = shl i64 %723, 20
  %725 = ashr i64 %724, 32
  %726 = mul nsw i64 %725, %35
  %727 = add nsw i64 %726, %41
  %728 = ashr i64 %727, %63
  %729 = add nsw i64 %728, %117
  br i1 %62, label %759, label %739

730:                                              ; preds = %714
  %731 = shl i64 %718, %61
  %732 = add nsw i64 %731, %116
  %733 = load i64, ptr %64, align 8, !tbaa !18
  %734 = shl i64 %733, 20
  %735 = ashr i64 %734, 32
  %736 = mul nsw i64 %735, %35
  %737 = shl i64 %736, %61
  %738 = add nsw i64 %737, %117
  br i1 %62, label %759, label %747

739:                                              ; preds = %719
  %740 = mul nsw i64 %717, %31
  %741 = add nsw i64 %740, %41
  %742 = ashr i64 %741, %63
  %743 = add nsw i64 %742, %729
  %744 = mul nsw i64 %725, %33
  %745 = add nsw i64 %744, %41
  %746 = ashr i64 %745, %63
  br label %754

747:                                              ; preds = %730
  %748 = mul nsw i64 %717, %31
  %749 = add i64 %736, %748
  %750 = shl i64 %749, %61
  %751 = add i64 %750, %117
  %752 = mul nsw i64 %735, %33
  %753 = shl i64 %752, %61
  br label %754

754:                                              ; preds = %747, %739
  %755 = phi i64 [ %743, %739 ], [ %751, %747 ]
  %756 = phi i64 [ %722, %739 ], [ %732, %747 ]
  %757 = phi i64 [ %746, %739 ], [ %753, %747 ]
  %758 = add nsw i64 %757, %756
  br label %759

759:                                              ; preds = %782, %772, %768, %754, %730, %719, %416, %149, %139, %135
  %760 = phi i64 [ %783, %782 ], [ %771, %768 ], [ %758, %754 ], [ %722, %719 ], [ %116, %416 ], [ %152, %149 ], [ %116, %135 ], [ %116, %139 ], [ %732, %730 ], [ %774, %772 ]
  %761 = phi i64 [ %785, %782 ], [ %117, %768 ], [ %755, %754 ], [ %729, %719 ], [ %117, %416 ], [ %150, %149 ], [ %138, %135 ], [ %141, %139 ], [ %738, %730 ], [ %117, %772 ]
  %762 = call i32 @gx_path_add_point(ptr noundef %9, i64 noundef %760, i64 noundef %761) #64
  br label %202

763:                                              ; preds = %115
  %764 = load i64, ptr %3, align 16, !tbaa !18
  %765 = shl i64 %764, 20
  %766 = ashr i64 %765, 32
  %767 = mul nsw i64 %766, %29
  br i1 %59, label %768, label %772

768:                                              ; preds = %763
  %769 = add nsw i64 %767, %41
  %770 = ashr i64 %769, %63
  %771 = add nsw i64 %770, %116
  br i1 %62, label %759, label %775

772:                                              ; preds = %763
  %773 = shl i64 %767, %61
  %774 = add nsw i64 %773, %116
  br i1 %62, label %759, label %779

775:                                              ; preds = %768
  %776 = mul nsw i64 %766, %31
  %777 = add nsw i64 %776, %41
  %778 = ashr i64 %777, %63
  br label %782

779:                                              ; preds = %772
  %780 = mul nsw i64 %766, %31
  %781 = shl i64 %780, %61
  br label %782

782:                                              ; preds = %779, %775
  %783 = phi i64 [ %771, %775 ], [ %774, %779 ]
  %784 = phi i64 [ %778, %775 ], [ %781, %779 ]
  %785 = add nsw i64 %784, %117
  br label %759

786:                                              ; preds = %115
  %787 = load i64, ptr %3, align 16, !tbaa !18
  %788 = shl i64 %787, 20
  %789 = ashr i64 %788, 32
  %790 = mul nsw i64 %789, %35
  br i1 %59, label %791, label %795

791:                                              ; preds = %786
  %792 = add nsw i64 %790, %41
  %793 = ashr i64 %792, %63
  %794 = add nsw i64 %793, %117
  br i1 %62, label %812, label %807

795:                                              ; preds = %786
  %796 = shl i64 %790, %61
  %797 = add nsw i64 %796, %117
  br i1 %62, label %798, label %837

798:                                              ; preds = %795
  %799 = load i64, ptr %64, align 8, !tbaa !18
  %800 = load i64, ptr %65, align 16, !tbaa !18
  %801 = shl i64 %799, 20
  %802 = ashr i64 %801, 32
  %803 = mul nsw i64 %802, %29
  %804 = shl i64 %800, 20
  %805 = ashr i64 %804, 32
  %806 = mul nsw i64 %805, %35
  br label %863

807:                                              ; preds = %791
  %808 = mul nsw i64 %789, %33
  %809 = add nsw i64 %808, %41
  %810 = ashr i64 %809, %63
  %811 = add nsw i64 %810, %116
  br label %812

812:                                              ; preds = %807, %791
  %813 = phi i64 [ %811, %807 ], [ %116, %791 ]
  %814 = load i64, ptr %64, align 8, !tbaa !18
  %815 = load i64, ptr %65, align 16, !tbaa !18
  %816 = shl i64 %814, 20
  %817 = ashr i64 %816, 32
  %818 = mul nsw i64 %817, %29
  %819 = add nsw i64 %818, %41
  %820 = ashr i64 %819, %63
  %821 = add nsw i64 %820, %813
  %822 = shl i64 %815, 20
  %823 = ashr i64 %822, 32
  %824 = mul nsw i64 %823, %35
  %825 = add nsw i64 %824, %41
  %826 = ashr i64 %825, %63
  %827 = add nsw i64 %826, %794
  br i1 %62, label %853, label %828

828:                                              ; preds = %812
  %829 = mul nsw i64 %817, %31
  %830 = add nsw i64 %829, %41
  %831 = ashr i64 %830, %63
  %832 = add nsw i64 %831, %827
  %833 = mul nsw i64 %823, %33
  %834 = add nsw i64 %833, %41
  %835 = ashr i64 %834, %63
  %836 = add nsw i64 %835, %821
  br label %853

837:                                              ; preds = %795
  %838 = mul nsw i64 %789, %33
  %839 = shl i64 %838, %61
  %840 = add nsw i64 %839, %116
  %841 = load i64, ptr %64, align 8, !tbaa !18
  %842 = load i64, ptr %65, align 16, !tbaa !18
  %843 = shl i64 %841, 20
  %844 = ashr i64 %843, 32
  %845 = mul nsw i64 %844, %29
  %846 = shl i64 %842, 20
  %847 = ashr i64 %846, 32
  %848 = mul nsw i64 %847, %35
  %849 = mul nsw i64 %844, %31
  %850 = add i64 %848, %849
  %851 = mul nsw i64 %847, %33
  %852 = add i64 %845, %851
  br label %863

853:                                              ; preds = %828, %812
  %854 = phi i64 [ %832, %828 ], [ %827, %812 ]
  %855 = phi i64 [ %836, %828 ], [ %821, %812 ]
  %856 = load i64, ptr %66, align 8, !tbaa !18
  %857 = shl i64 %856, 20
  %858 = ashr i64 %857, 32
  %859 = mul nsw i64 %858, %29
  %860 = add nsw i64 %859, %41
  %861 = ashr i64 %860, %63
  %862 = add nsw i64 %861, %855
  br i1 %62, label %408, label %879

863:                                              ; preds = %837, %798
  %864 = phi i64 [ %840, %837 ], [ %116, %798 ]
  %865 = phi i64 [ %850, %837 ], [ %806, %798 ]
  %866 = phi i64 [ %852, %837 ], [ %803, %798 ]
  %867 = shl i64 %866, %61
  %868 = add i64 %867, %864
  %869 = add i64 %790, %865
  %870 = shl i64 %869, %61
  %871 = add i64 %870, %117
  %872 = load i64, ptr %66, align 8, !tbaa !18
  %873 = shl i64 %872, 20
  %874 = ashr i64 %873, 32
  %875 = mul nsw i64 %874, %29
  %876 = add i64 %866, %875
  %877 = shl i64 %876, %61
  %878 = add i64 %877, %864
  br i1 %62, label %408, label %883

879:                                              ; preds = %853
  %880 = mul nsw i64 %858, %31
  %881 = add nsw i64 %880, %41
  %882 = ashr i64 %881, %63
  br label %886

883:                                              ; preds = %863
  %884 = mul nsw i64 %874, %31
  %885 = shl i64 %884, %61
  br label %886

886:                                              ; preds = %883, %879
  %887 = phi i64 [ %854, %879 ], [ %871, %883 ]
  %888 = phi i64 [ %855, %879 ], [ %868, %883 ]
  %889 = phi i64 [ %794, %879 ], [ %797, %883 ]
  %890 = phi i64 [ %813, %879 ], [ %864, %883 ]
  %891 = phi i64 [ %862, %879 ], [ %878, %883 ]
  %892 = phi i64 [ %882, %879 ], [ %885, %883 ]
  %893 = add nsw i64 %892, %887
  br label %408

894:                                              ; preds = %115
  %895 = load i64, ptr %3, align 16, !tbaa !18
  %896 = shl i64 %895, 20
  %897 = ashr i64 %896, 32
  %898 = mul nsw i64 %897, %29
  br i1 %59, label %899, label %903

899:                                              ; preds = %894
  %900 = add nsw i64 %898, %41
  %901 = ashr i64 %900, %63
  %902 = add nsw i64 %901, %116
  br i1 %62, label %920, label %915

903:                                              ; preds = %894
  %904 = shl i64 %898, %61
  %905 = add nsw i64 %904, %116
  br i1 %62, label %906, label %945

906:                                              ; preds = %903
  %907 = load i64, ptr %64, align 8, !tbaa !18
  %908 = load i64, ptr %65, align 16, !tbaa !18
  %909 = shl i64 %907, 20
  %910 = ashr i64 %909, 32
  %911 = mul nsw i64 %910, %29
  %912 = shl i64 %908, 20
  %913 = ashr i64 %912, 32
  %914 = mul nsw i64 %913, %35
  br label %971

915:                                              ; preds = %899
  %916 = mul nsw i64 %897, %31
  %917 = add nsw i64 %916, %41
  %918 = ashr i64 %917, %63
  %919 = add nsw i64 %918, %117
  br label %920

920:                                              ; preds = %915, %899
  %921 = phi i64 [ %919, %915 ], [ %117, %899 ]
  %922 = load i64, ptr %64, align 8, !tbaa !18
  %923 = load i64, ptr %65, align 16, !tbaa !18
  %924 = shl i64 %922, 20
  %925 = ashr i64 %924, 32
  %926 = mul nsw i64 %925, %29
  %927 = add nsw i64 %926, %41
  %928 = ashr i64 %927, %63
  %929 = add nsw i64 %928, %902
  %930 = shl i64 %923, 20
  %931 = ashr i64 %930, 32
  %932 = mul nsw i64 %931, %35
  %933 = add nsw i64 %932, %41
  %934 = ashr i64 %933, %63
  %935 = add nsw i64 %934, %921
  br i1 %62, label %961, label %936

936:                                              ; preds = %920
  %937 = mul nsw i64 %925, %31
  %938 = add nsw i64 %937, %41
  %939 = ashr i64 %938, %63
  %940 = add nsw i64 %939, %935
  %941 = mul nsw i64 %931, %33
  %942 = add nsw i64 %941, %41
  %943 = ashr i64 %942, %63
  %944 = add nsw i64 %943, %929
  br label %961

945:                                              ; preds = %903
  %946 = mul nsw i64 %897, %31
  %947 = shl i64 %946, %61
  %948 = add nsw i64 %947, %117
  %949 = load i64, ptr %64, align 8, !tbaa !18
  %950 = load i64, ptr %65, align 16, !tbaa !18
  %951 = shl i64 %949, 20
  %952 = ashr i64 %951, 32
  %953 = mul nsw i64 %952, %29
  %954 = shl i64 %950, 20
  %955 = ashr i64 %954, 32
  %956 = mul nsw i64 %955, %35
  %957 = mul nsw i64 %952, %31
  %958 = add i64 %956, %957
  %959 = mul nsw i64 %955, %33
  %960 = add i64 %953, %959
  br label %971

961:                                              ; preds = %936, %920
  %962 = phi i64 [ %940, %936 ], [ %935, %920 ]
  %963 = phi i64 [ %944, %936 ], [ %929, %920 ]
  %964 = load i64, ptr %66, align 8, !tbaa !18
  %965 = shl i64 %964, 20
  %966 = ashr i64 %965, 32
  %967 = mul nsw i64 %966, %35
  %968 = add nsw i64 %967, %41
  %969 = ashr i64 %968, %63
  %970 = add nsw i64 %969, %962
  br i1 %62, label %408, label %987

971:                                              ; preds = %945, %906
  %972 = phi i64 [ %948, %945 ], [ %117, %906 ]
  %973 = phi i64 [ %958, %945 ], [ %914, %906 ]
  %974 = phi i64 [ %960, %945 ], [ %911, %906 ]
  %975 = add i64 %898, %974
  %976 = shl i64 %975, %61
  %977 = add i64 %976, %116
  %978 = shl i64 %973, %61
  %979 = add i64 %978, %972
  %980 = load i64, ptr %66, align 8, !tbaa !18
  %981 = shl i64 %980, 20
  %982 = ashr i64 %981, 32
  %983 = mul nsw i64 %982, %35
  %984 = add i64 %973, %983
  %985 = shl i64 %984, %61
  %986 = add i64 %985, %972
  br i1 %62, label %408, label %991

987:                                              ; preds = %961
  %988 = mul nsw i64 %966, %33
  %989 = add nsw i64 %988, %41
  %990 = ashr i64 %989, %63
  br label %994

991:                                              ; preds = %971
  %992 = mul nsw i64 %982, %33
  %993 = shl i64 %992, %61
  br label %994

994:                                              ; preds = %991, %987
  %995 = phi i64 [ %962, %987 ], [ %979, %991 ]
  %996 = phi i64 [ %963, %987 ], [ %977, %991 ]
  %997 = phi i64 [ %902, %987 ], [ %905, %991 ]
  %998 = phi i64 [ %921, %987 ], [ %972, %991 ]
  %999 = phi i64 [ %970, %987 ], [ %986, %991 ]
  %1000 = phi i64 [ %990, %987 ], [ %993, %991 ]
  %1001 = add nsw i64 %1000, %996
  br label %408

1002:                                             ; preds = %115
  %1003 = getelementptr inbounds i64, ptr %120, i64 1
  %1004 = icmp ult i16 %124, 247
  br i1 %1004, label %1005, label %1009

1005:                                             ; preds = %1002
  %1006 = zext i16 %124 to i64
  %1007 = shl nuw nsw i64 %1006, 12
  %1008 = add nsw i64 %1007, -569344
  store i64 %1008, ptr %1003, align 8, !tbaa !18
  br label %447

1009:                                             ; preds = %1002
  %1010 = load i8, ptr %128, align 1, !tbaa !13
  %1011 = zext i8 %1010 to i16
  %1012 = lshr i16 %127, 8
  %1013 = trunc i16 %1012 to i8
  %1014 = xor i8 %1010, %1013
  %1015 = add i16 %127, %1011
  %1016 = mul i16 %1015, -12691
  %1017 = add i16 %1016, 22719
  %1018 = getelementptr inbounds i8, ptr %119, i64 2
  %1019 = icmp ult i16 %124, 251
  br i1 %1019, label %1020, label %1028

1020:                                             ; preds = %1009
  %1021 = shl nuw i16 %124, 8
  %1022 = add nsw i16 %1021, 2304
  %1023 = zext i8 %1014 to i16
  %1024 = or i16 %1022, %1023
  %1025 = zext i16 %1024 to i64
  %1026 = shl nuw nsw i64 %1025, 12
  %1027 = add nuw nsw i64 %1026, 442368
  store i64 %1027, ptr %1003, align 8, !tbaa !18
  br label %447

1028:                                             ; preds = %1009
  %1029 = icmp eq i16 %124, 255
  br i1 %1029, label %1038, label %1030

1030:                                             ; preds = %1028
  %1031 = shl nuw i16 %124, 8
  %1032 = add nsw i16 %1031, 1280
  %1033 = zext i8 %1014 to i16
  %1034 = or i16 %1032, %1033
  %1035 = zext i16 %1034 to i64
  %1036 = shl nuw nsw i64 %1035, 12
  %1037 = sub nuw nsw i64 -442368, %1036
  store i64 %1037, ptr %1003, align 8, !tbaa !18
  br label %447

1038:                                             ; preds = %1028
  %1039 = load i8, ptr %1018, align 1, !tbaa !13
  %1040 = zext i8 %1039 to i16
  %1041 = lshr i16 %1017, 8
  %1042 = trunc i16 %1041 to i8
  %1043 = xor i8 %1039, %1042
  %1044 = add i16 %1017, %1040
  %1045 = mul i16 %1044, -12691
  %1046 = add i16 %1045, 22719
  %1047 = getelementptr inbounds i8, ptr %119, i64 3
  %1048 = load i8, ptr %1047, align 1, !tbaa !13
  %1049 = zext i8 %1048 to i16
  %1050 = lshr i16 %1046, 8
  %1051 = trunc i16 %1050 to i8
  %1052 = xor i8 %1048, %1051
  %1053 = add i16 %1046, %1049
  %1054 = mul i16 %1053, -12691
  %1055 = add i16 %1054, 22719
  %1056 = getelementptr inbounds i8, ptr %119, i64 4
  %1057 = load i8, ptr %1056, align 1, !tbaa !13
  %1058 = lshr i16 %1055, 8
  %1059 = zext i8 %1057 to i16
  %1060 = xor i16 %1058, %1059
  %1061 = zext i16 %1060 to i64
  %1062 = add i16 %1055, %1059
  %1063 = mul i16 %1062, -12691
  %1064 = add i16 %1063, 22719
  %1065 = getelementptr inbounds i8, ptr %119, i64 5
  %1066 = zext i8 %1014 to i64
  %1067 = zext i8 %1043 to i64
  %1068 = zext i8 %1052 to i64
  %1069 = shl nuw nsw i64 %1068, 20
  %1070 = shl nuw nsw i64 %1067, 28
  %1071 = shl nuw nsw i64 %1066, 36
  %1072 = shl nuw nsw i64 %1061, 12
  %1073 = or i64 %1072, %1071
  %1074 = or i64 %1073, %1070
  %1075 = or i64 %1074, %1069
  store i64 %1075, ptr %1003, align 8, !tbaa !18
  %1076 = icmp sgt i8 %1014, -1
  br i1 %1076, label %447, label %1077

1077:                                             ; preds = %1038, %713, %711, %649, %635, %624, %563, %558, %505, %437, %426, %416, %202, %115, %115, %115, %115, %115, %115, %115, %115, %115, %115, %115, %115, %115, %115, %115
  %1078 = phi i32 [ %627, %624 ], [ %696, %713 ], [ %562, %558 ], [ %512, %505 ], [ %.lcssa35, %426 ], [ %647, %635 ], [ %653, %649 ], [ %712, %711 ], [ -15, %1038 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %115 ], [ -10, %437 ], [ %566, %563 ], [ %417, %416 ], [ %205, %202 ]
  call void @llvm.lifetime.end.p0(i64 192, ptr nonnull %3) #65
  ret i32 %1078
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gs_type1_pop(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 7
  %4 = load i32, ptr %3, align 8, !tbaa !567
  %5 = add nsw i32 %4, -1
  store i32 %5, ptr %3, align 8, !tbaa !567
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.gs_type1_state_s, ptr %0, i64 0, i32 6, i64 %6
  %8 = load i64, ptr %7, align 8, !tbaa !18
  store i64 %8, ptr %1, align 8, !tbaa !18
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @gx_alloc_char_bits(ptr nocapture noundef %0, ptr noundef %1, i16 noundef zeroext %2, i16 noundef zeroext %3) #0 {
  %5 = zext i16 %2 to i32
  %6 = getelementptr inbounds %struct.gx_device_memory_s, ptr %1, i64 0, i32 3
  store i32 %5, ptr %6, align 8, !tbaa !382
  %7 = zext i16 %3 to i32
  %8 = getelementptr inbounds %struct.gx_device_memory_s, ptr %1, i64 0, i32 4
  store i32 %7, ptr %8, align 4, !tbaa !383
  %9 = tail call i64 @gx_device_memory_bitmap_size(ptr noundef %1) #64
  %10 = getelementptr inbounds %struct.gx_device_memory_s, ptr %1, i64 0, i32 12
  %11 = load i32, ptr %10, align 8, !tbaa !587
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 13
  %15 = load i32, ptr %14, align 4, !tbaa !406
  %16 = udiv i32 %15, %11
  %17 = icmp ult i32 %16, %7
  br i1 %17, label %85, label %18

18:                                               ; preds = %13, %4
  %19 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 10
  %20 = load i32, ptr %19, align 8, !tbaa !422
  %21 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 11
  %22 = load i32, ptr %21, align 4, !tbaa !404
  %23 = icmp ult i32 %20, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 7
  %26 = load i32, ptr %25, align 4, !tbaa !402
  %27 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 6
  %28 = load i32, ptr %27, align 8, !tbaa !420
  %29 = sub i32 %26, %28
  %30 = zext i32 %29 to i64
  %31 = icmp ugt i64 %9, %30
  br i1 %31, label %42, label %32

32:                                               ; preds = %24
  %33 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 20
  %34 = load i32, ptr %33, align 8, !tbaa !588
  %35 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 16
  %36 = load i32, ptr %35, align 8, !tbaa !589
  br label %51

37:                                               ; preds = %18
  %38 = icmp eq i32 %22, 0
  br i1 %38, label %85, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 7
  %41 = load i32, ptr %40, align 4, !tbaa !402
  br label %42

42:                                               ; preds = %39, %24
  %43 = phi i32 [ %41, %39 ], [ %26, %24 ]
  %44 = zext i32 %43 to i64
  %45 = icmp ugt i64 %9, %44
  br i1 %45, label %85, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 6
  store i32 0, ptr %47, align 8, !tbaa !420
  %48 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 8
  store i32 0, ptr %48, align 8, !tbaa !421
  store i32 0, ptr %19, align 8, !tbaa !422
  %49 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 18
  store i32 0, ptr %49, align 8, !tbaa !590
  %50 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 14
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1024) %50, i8 0, i64 1024, i1 false)
  br label %51

51:                                               ; preds = %46, %32
  %52 = phi i32 [ %36, %32 ], [ 0, %46 ]
  %53 = phi i32 [ %34, %32 ], [ 0, %46 ]
  %54 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 19
  %55 = load ptr, ptr %54, align 8, !tbaa !409
  %56 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 20
  %57 = add i32 %53, 1
  store i32 %57, ptr %56, align 8, !tbaa !588
  %58 = zext i32 %53 to i64
  %59 = getelementptr inbounds %struct.cached_char_s, ptr %55, i64 %58
  %60 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 15
  %61 = load ptr, ptr %60, align 8, !tbaa !407
  %62 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 16
  %63 = zext i32 %52 to i64
  %64 = getelementptr inbounds i8, ptr %61, i64 %63
  %65 = getelementptr inbounds %struct.cached_char_s, ptr %55, i64 %58, i32 8
  store ptr %64, ptr %65, align 8, !tbaa !591
  %66 = trunc i64 %9 to i32
  %67 = add i32 %52, %66
  store i32 %67, ptr %62, align 8, !tbaa !589
  %68 = and i64 %9, 4294967295
  tail call void @llvm.memset.p0.i64(ptr align 1 %64, i8 0, i64 %68, i1 false)
  %69 = getelementptr inbounds %struct.cached_char_s, ptr %55, i64 %58, i32 5
  store i16 %2, ptr %69, align 4, !tbaa !592
  %70 = getelementptr inbounds %struct.cached_char_s, ptr %55, i64 %58, i32 4
  store i16 %3, ptr %70, align 2, !tbaa !593
  %71 = load i32, ptr %10, align 8, !tbaa !587
  %72 = trunc i32 %71 to i16
  %73 = getelementptr inbounds %struct.cached_char_s, ptr %55, i64 %58, i32 3
  store i16 %72, ptr %73, align 8, !tbaa !594
  %74 = load ptr, ptr %65, align 8, !tbaa !591
  %75 = getelementptr inbounds %struct.gx_device_memory_s, ptr %1, i64 0, i32 13
  store ptr %74, ptr %75, align 8, !tbaa !386
  %76 = getelementptr inbounds %struct.gx_device_memory_s, ptr %1, i64 0, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !595
  %78 = load ptr, ptr %77, align 8, !tbaa !391
  %79 = tail call i32 %78(ptr noundef nonnull %1) #64
  %80 = load i32, ptr %19, align 8, !tbaa !422
  %81 = add i32 %80, 1
  store i32 %81, ptr %19, align 8, !tbaa !422
  %82 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 6
  %83 = load i32, ptr %82, align 8, !tbaa !420
  %84 = add i32 %83, %66
  store i32 %84, ptr %82, align 8, !tbaa !420
  br label %85

85:                                               ; preds = %51, %42, %37, %13
  %86 = phi ptr [ %59, %51 ], [ null, %13 ], [ null, %42 ], [ null, %37 ]
  ret ptr %86
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gx_unalloc_cached_char(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #28 {
  %3 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 3
  %4 = load i16, ptr %3, align 8, !tbaa !594
  %5 = zext i16 %4 to i32
  %6 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 4
  %7 = load i16, ptr %6, align 2, !tbaa !593
  %8 = zext i16 %7 to i32
  %9 = mul nuw nsw i32 %8, %5
  %10 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 20
  %11 = load i32, ptr %10, align 8, !tbaa !588
  %12 = add i32 %11, -1
  store i32 %12, ptr %10, align 8, !tbaa !588
  %13 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 16
  %14 = load i32, ptr %13, align 8, !tbaa !589
  %15 = sub i32 %14, %9
  store i32 %15, ptr %13, align 8, !tbaa !589
  %16 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 10
  %17 = load i32, ptr %16, align 8, !tbaa !422
  %18 = add i32 %17, -1
  store i32 %18, ptr %16, align 8, !tbaa !422
  %19 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 6
  %20 = load i32, ptr %19, align 8, !tbaa !420
  %21 = sub i32 %20, %9
  store i32 %21, ptr %19, align 8, !tbaa !420
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal ptr @gx_lookup_fm_pair(ptr nocapture noundef readonly %0) #21 {
  %2 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 17
  %3 = load float, ptr %2, align 8, !tbaa !596
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 17, i32 2
  %5 = load float, ptr %4, align 8, !tbaa !597
  %6 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 17, i32 4
  %7 = load float, ptr %6, align 8, !tbaa !598
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 17, i32 6
  %9 = load float, ptr %8, align 8, !tbaa !599
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 16
  %11 = load ptr, ptr %10, align 8, !tbaa !303
  %12 = getelementptr inbounds %struct.gs_font_s, ptr %11, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !259
  %14 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 17
  %15 = load ptr, ptr %14, align 8, !tbaa !408
  %16 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 18
  %17 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 8
  %18 = load i32, ptr %17, align 8, !tbaa !421
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %58, label %20

20:                                               ; preds = %1
  %21 = load i32, ptr %16, align 8, !tbaa !590
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %22
  %24 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 9
  br label %25

25:                                               ; preds = %56, %20
  %26 = phi i32 [ %18, %20 ], [ %28, %56 ]
  %27 = phi ptr [ %23, %20 ], [ %37, %56 ]
  %28 = add nsw i32 %26, -1
  %29 = icmp eq ptr %27, %15
  br i1 %29, label %30, label %34

30:                                               ; preds = %25
  %31 = load i32, ptr %24, align 4, !tbaa !403
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %32
  br label %36

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %27, i64 -1
  br label %36

36:                                               ; preds = %34, %30
  %37 = phi ptr [ %33, %30 ], [ %35, %34 ]
  %38 = load ptr, ptr %37, align 8, !tbaa !600
  %39 = icmp eq ptr %38, %11
  br i1 %39, label %40, label %56

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %37, i64 0, i32 1
  %42 = load float, ptr %41, align 8, !tbaa !602
  %43 = fcmp oeq float %42, %3
  br i1 %43, label %44, label %56

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %37, i64 0, i32 2
  %46 = load float, ptr %45, align 4, !tbaa !603
  %47 = fcmp oeq float %46, %5
  br i1 %47, label %48, label %56

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %37, i64 0, i32 3
  %50 = load float, ptr %49, align 8, !tbaa !604
  %51 = fcmp oeq float %50, %7
  br i1 %51, label %52, label %56

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %37, i64 0, i32 4
  %54 = load float, ptr %53, align 4, !tbaa !605
  %55 = fcmp oeq float %54, %9
  br i1 %55, label %84, label %56

56:                                               ; preds = %52, %48, %44, %40, %36
  %57 = icmp eq i32 %28, 0
  br i1 %57, label %58, label %25, !llvm.loop !606

58:                                               ; preds = %56, %1
  %59 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 9
  %60 = load i32, ptr %59, align 4, !tbaa !403
  %61 = icmp eq i32 %18, %60
  br i1 %61, label %65, label %62

62:                                               ; preds = %58
  %63 = load i32, ptr %16, align 8, !tbaa !590
  %64 = add i32 %18, 1
  br label %71

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 6
  store i32 0, ptr %66, align 8, !tbaa !420
  %67 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 10
  store i32 0, ptr %67, align 8, !tbaa !422
  %68 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 16
  store i32 0, ptr %68, align 8, !tbaa !589
  %69 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 20
  store i32 0, ptr %69, align 8, !tbaa !588
  %70 = getelementptr inbounds %struct.gs_font_dir_s, ptr %13, i64 0, i32 14
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1024) %70, i8 0, i64 1024, i1 false)
  br label %71

71:                                               ; preds = %65, %62
  %72 = phi i32 [ 0, %65 ], [ %63, %62 ]
  %73 = phi i32 [ 1, %65 ], [ %64, %62 ]
  store i32 %73, ptr %17, align 8, !tbaa !421
  %74 = zext i32 %72 to i64
  %75 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %74
  %76 = add i32 %72, 1
  %77 = icmp eq i32 %76, %60
  %78 = select i1 %77, i32 0, i32 %76
  store i32 %78, ptr %16, align 8
  store ptr %11, ptr %75, align 8, !tbaa !600
  %79 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %74, i32 1
  store float %3, ptr %79, align 8, !tbaa !602
  %80 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %74, i32 2
  store float %5, ptr %80, align 4, !tbaa !603
  %81 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %74, i32 3
  store float %7, ptr %81, align 8, !tbaa !604
  %82 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %74, i32 4
  store float %9, ptr %82, align 4, !tbaa !605
  %83 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %15, i64 %74, i32 5
  store i32 0, ptr %83, align 8, !tbaa !607
  br label %84

84:                                               ; preds = %71, %52
  %85 = phi ptr [ %75, %71 ], [ %37, %52 ]
  ret ptr %85
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @gx_add_cached_char(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) #29 {
  %4 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !336
  %6 = and i32 %5, 127
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.gs_font_dir_s, ptr %0, i64 0, i32 14, i64 %7
  br label %9

9:                                                ; preds = %9, %3
  %10 = phi ptr [ %8, %3 ], [ %11, %9 ]
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %9, !llvm.loop !608

13:                                               ; preds = %9
  %.lcssa = phi ptr [ %10, %9 ]
  store ptr %1, ptr %.lcssa, align 8, !tbaa !7
  store ptr null, ptr %1, align 8, !tbaa !609
  %14 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 2
  store ptr %2, ptr %14, align 8, !tbaa !610
  %15 = getelementptr inbounds %struct.cached_fm_pair_s, ptr %2, i64 0, i32 5
  %16 = load i32, ptr %15, align 8, !tbaa !607
  %17 = add nsw i32 %16, 1
  store i32 %17, ptr %15, align 8, !tbaa !607
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal ptr @gx_lookup_cached_char(ptr nocapture noundef readonly %0, ptr noundef readnone %1, i32 noundef %2) #17 {
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %0, i64 0, i32 16
  %5 = load ptr, ptr %4, align 8, !tbaa !303
  %6 = getelementptr inbounds %struct.gs_font_s, ptr %5, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !259
  %8 = and i32 %2, 127
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.gs_font_dir_s, ptr %7, i64 0, i32 14, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !7
  %12 = icmp eq ptr %11, null
  br i1 %12, label %25, label %13

13:                                               ; preds = %22, %3
  %14 = phi ptr [ %23, %22 ], [ %11, %3 ]
  %15 = getelementptr inbounds %struct.cached_char_s, ptr %14, i64 0, i32 1
  %16 = load i32, ptr %15, align 8, !tbaa !336
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %18, label %22

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.cached_char_s, ptr %14, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !610
  %21 = icmp eq ptr %20, %1
  br i1 %21, label %25, label %22

22:                                               ; preds = %18, %13
  %23 = load ptr, ptr %14, align 8, !tbaa !7
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %13, !llvm.loop !611

25:                                               ; preds = %22, %18, %3
  %26 = phi ptr [ null, %3 ], [ null, %22 ], [ %14, %18 ]
  ret ptr %26
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_copy_cached_char(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = alloca %struct.gs_matrix_s, align 8
  %4 = load ptr, ptr %0, align 8, !tbaa !290
  %5 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !244
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %6, i64 0, i32 10
  %8 = load i8, ptr %7, align 8, !tbaa !309
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %105, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.gx_path_s, ptr %6, i64 0, i32 9
  %12 = load i64, ptr %11, align 8, !tbaa !313
  %13 = getelementptr inbounds %struct.gx_path_s, ptr %6, i64 0, i32 9, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !314
  %15 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 25
  %16 = load i32, ptr %15, align 4, !tbaa !306
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %28

18:                                               ; preds = %10
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 14
  %20 = load ptr, ptr %19, align 8, !tbaa !333
  %21 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 13
  %22 = load ptr, ptr %21, align 8, !tbaa !332
  %23 = tail call i32 (ptr, ptr, ptr, ...) @gx_color_render(ptr noundef %22, ptr noundef %20, ptr noundef nonnull %4) #64
  %24 = getelementptr inbounds %struct.gx_device_color_s, ptr %20, i64 0, i32 2
  %25 = load i32, ptr %24, align 8, !tbaa !334
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %105

27:                                               ; preds = %18
  store i32 1, ptr %15, align 4, !tbaa !306
  br label %28

28:                                               ; preds = %27, %10
  %29 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 7
  %30 = load i64, ptr %29, align 8, !tbaa !340
  %31 = sub nsw i64 %12, %30
  %32 = add nsw i64 %31, 2048
  %33 = lshr i64 %32, 12
  %34 = trunc i64 %33 to i32
  %35 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 7, i32 1
  %36 = load i64, ptr %35, align 8, !tbaa !341
  %37 = sub nsw i64 %14, %36
  %38 = add nsw i64 %37, 2048
  %39 = lshr i64 %38, 12
  %40 = trunc i64 %39 to i32
  %41 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 5
  %42 = load i16, ptr %41, align 4, !tbaa !592
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 4
  %45 = load i16, ptr %44, align 2, !tbaa !593
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 13
  %48 = load i32, ptr %47, align 4, !tbaa !612
  %49 = icmp sgt i32 %48, %34
  br i1 %49, label %64, label %50

50:                                               ; preds = %28
  %51 = add nsw i32 %34, %43
  %52 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 15
  %53 = load i32, ptr %52, align 4, !tbaa !613
  %54 = icmp sgt i32 %51, %53
  br i1 %54, label %64, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 14
  %57 = load i32, ptr %56, align 8, !tbaa !614
  %58 = icmp sgt i32 %57, %40
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = add nsw i32 %40, %46
  %61 = getelementptr inbounds %struct.gs_show_enum_s, ptr %0, i64 0, i32 16
  %62 = load i32, ptr %61, align 8, !tbaa !615
  %63 = icmp sgt i32 %60, %62
  br i1 %63, label %64, label %85

64:                                               ; preds = %59, %55, %50, %28
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %3) #65
  %65 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 2
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %3, ptr noundef nonnull align 8 dereferenceable(96) %65, i64 96, i1 false), !tbaa.struct !163
  %66 = sitofp i64 %31 to double
  %67 = fmul double %66, 0x3F30000000000000
  %68 = fptrunc double %67 to float
  %69 = getelementptr inbounds %struct.gs_matrix_s, ptr %3, i64 0, i32 8
  %70 = load float, ptr %69, align 8, !tbaa !271
  %71 = fsub float %70, %68
  store float %71, ptr %69, align 8, !tbaa !271
  %72 = sitofp i64 %37 to double
  %73 = fmul double %72, 0x3F30000000000000
  %74 = fptrunc double %73 to float
  %75 = getelementptr inbounds %struct.gs_matrix_s, ptr %3, i64 0, i32 10
  %76 = load float, ptr %75, align 8, !tbaa !272
  %77 = fsub float %76, %74
  store float %77, ptr %75, align 8, !tbaa !272
  %78 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 3
  %79 = load i16, ptr %78, align 8, !tbaa !594
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 3
  %82 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 8
  %83 = load ptr, ptr %82, align 8, !tbaa !591
  %84 = call i32 @gs_imagemask(ptr noundef nonnull %4, i32 noundef %81, i32 noundef %46, i32 noundef 1, ptr noundef nonnull %3, ptr noundef %83) #64
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %3) #65
  br label %102

85:                                               ; preds = %59
  %86 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 22
  %87 = load ptr, ptr %86, align 8, !tbaa !338
  %88 = load ptr, ptr %87, align 8, !tbaa !328
  %89 = getelementptr inbounds %struct.gx_device_s, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !25
  %91 = getelementptr inbounds %struct.gx_device_procs_s, ptr %90, i64 0, i32 9
  %92 = load ptr, ptr %91, align 8, !tbaa !451
  %93 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 8
  %94 = load ptr, ptr %93, align 8, !tbaa !591
  %95 = getelementptr inbounds %struct.cached_char_s, ptr %1, i64 0, i32 3
  %96 = load i16, ptr %95, align 8, !tbaa !594
  %97 = zext i16 %96 to i32
  %98 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 14
  %99 = load ptr, ptr %98, align 8, !tbaa !333
  %100 = load i64, ptr %99, align 8, !tbaa !439
  %101 = tail call i32 %92(ptr noundef %88, ptr noundef %94, i32 noundef 0, i32 noundef %97, i32 noundef %34, i32 noundef %40, i32 noundef %43, i32 noundef %46, i64 noundef -1, i64 noundef %100) #64
  br label %102

102:                                              ; preds = %85, %64
  %103 = phi i32 [ %84, %64 ], [ %101, %85 ]
  %104 = call i32 @llvm.smin.i32(i32 %103, i32 0)
  br label %105

105:                                              ; preds = %102, %18, %2
  %106 = phi i32 [ %104, %102 ], [ 1, %18 ], [ -14, %2 ]
  ret i32 %106
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gx_color_from_rgb(ptr nocapture noundef %0) #28 {
  %2 = load i16, ptr %0, align 2, !tbaa !157
  %3 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  %4 = load i16, ptr %3, align 2, !tbaa !159
  %5 = icmp eq i16 %2, %4
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  %8 = load i16, ptr %7, align 2, !tbaa !160
  %9 = icmp eq i16 %2, %8
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 3
  store i16 %2, ptr %11, align 2, !tbaa !344
  br label %12

12:                                               ; preds = %10, %6, %1
  %13 = phi i8 [ 1, %10 ], [ 0, %6 ], [ 0, %1 ]
  %14 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 5
  store i8 %13, ptr %14, align 1, !tbaa !342
  %15 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 4
  store i8 %13, ptr %15, align 2, !tbaa !343
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal zeroext i16 @gx_color_luminance(ptr nocapture noundef %0) #28 {
  %2 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 5
  %3 = load i8, ptr %2, align 1, !tbaa !342
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 3
  %7 = load i16, ptr %6, align 2, !tbaa !344
  br label %26

8:                                                ; preds = %1
  %9 = load i16, ptr %0, align 2, !tbaa !157
  %10 = zext i16 %9 to i32
  %11 = mul nuw nsw i32 %10, 30
  %12 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  %13 = load i16, ptr %12, align 2, !tbaa !159
  %14 = zext i16 %13 to i32
  %15 = mul nuw nsw i32 %14, 59
  %16 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  %17 = load i16, ptr %16, align 2, !tbaa !160
  %18 = zext i16 %17 to i32
  %19 = mul nuw nsw i32 %18, 11
  %20 = add nuw nsw i32 %11, 50
  %21 = add nuw nsw i32 %20, %15
  %22 = add nuw nsw i32 %21, %19
  %23 = udiv i32 %22, 100
  %24 = trunc i32 %23 to i16
  %25 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 3
  store i16 %24, ptr %25, align 2, !tbaa !344
  store i8 1, ptr %2, align 1, !tbaa !342
  br label %26

26:                                               ; preds = %8, %5
  %27 = phi i16 [ %7, %5 ], [ %24, %8 ]
  ret i16 %27
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gx_color_to_hsb(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #33 {
  %3 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 4
  %4 = load i8, ptr %3, align 2, !tbaa !343
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  store i16 0, ptr %1, align 2, !tbaa !102
  %7 = getelementptr inbounds i16, ptr %1, i64 1
  store i16 0, ptr %7, align 2, !tbaa !102
  %8 = load i16, ptr %0, align 2, !tbaa !157
  br label %56

9:                                                ; preds = %2
  %10 = load i16, ptr %0, align 2, !tbaa !157
  %11 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  %12 = load i16, ptr %11, align 2, !tbaa !159
  %13 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  %14 = load i16, ptr %13, align 2, !tbaa !160
  %15 = zext i16 %10 to i32
  %16 = zext i16 %12 to i32
  %17 = tail call i16 @llvm.umax.i16(i16 %10, i16 %12)
  %18 = zext i16 %14 to i32
  %19 = tail call i16 @llvm.umax.i16(i16 %14, i16 %17)
  %20 = tail call i16 @llvm.umin.i16(i16 %10, i16 %12)
  %21 = tail call i16 @llvm.umin.i16(i16 %14, i16 %20)
  %22 = zext i16 %19 to i64
  %23 = zext i16 %21 to i64
  %24 = sub nsw i64 %22, %23
  %25 = icmp eq i16 %19, %10
  br i1 %25, label %26, label %31

26:                                               ; preds = %9
  %27 = sub nsw i32 %16, %18
  %28 = sext i32 %27 to i64
  %29 = mul nsw i64 %28, 65535
  %30 = sdiv i64 %29, %24
  br label %45

31:                                               ; preds = %9
  %32 = icmp eq i16 %19, %12
  br i1 %32, label %33, label %39

33:                                               ; preds = %31
  %34 = sub nsw i32 %18, %15
  %35 = sext i32 %34 to i64
  %36 = mul nsw i64 %35, 65535
  %37 = sdiv i64 %36, %24
  %38 = add nsw i64 %37, 131070
  br label %45

39:                                               ; preds = %31
  %40 = sub nsw i32 %15, %16
  %41 = sext i32 %40 to i64
  %42 = mul nsw i64 %41, 65535
  %43 = sdiv i64 %42, %24
  %44 = add nsw i64 %43, 262140
  br label %45

45:                                               ; preds = %39, %33, %26
  %46 = phi i64 [ %30, %26 ], [ %38, %33 ], [ %44, %39 ]
  %47 = icmp slt i64 %46, 0
  %48 = add nsw i64 %46, 393210
  %49 = select i1 %47, i64 %48, i64 %46
  %50 = sdiv i64 %49, 6
  %51 = trunc i64 %50 to i16
  store i16 %51, ptr %1, align 2, !tbaa !102
  %52 = mul nsw i64 %24, 65535
  %53 = sdiv i64 %52, %22
  %54 = trunc i64 %53 to i16
  %55 = getelementptr inbounds i16, ptr %1, i64 1
  store i16 %54, ptr %55, align 2, !tbaa !102
  br label %56

56:                                               ; preds = %45, %6
  %57 = phi i16 [ %19, %45 ], [ %8, %6 ]
  %58 = getelementptr inbounds i16, ptr %1, i64 2
  store i16 %57, ptr %58, align 2, !tbaa !102
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal void @gx_color_from_hsb(ptr nocapture noundef writeonly %0, i16 noundef zeroext %1, i16 noundef zeroext %2, i16 noundef zeroext %3) #56 {
  %5 = icmp eq i16 %2, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  store i16 %3, ptr %7, align 2, !tbaa !160
  %8 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  store i16 %3, ptr %8, align 2, !tbaa !159
  store i16 %3, ptr %0, align 2, !tbaa !157
  br label %49

9:                                                ; preds = %4
  %10 = insertelement <2 x i16> poison, i16 %3, i64 0
  %11 = insertelement <2 x i16> %10, i16 %2, i64 1
  %12 = uitofp <2 x i16> %11 to <2 x float>
  %13 = fdiv <2 x float> %12, <float 6.553500e+04, float 6.553500e+04>
  %14 = udiv i16 %1, 10923
  %15 = zext i16 %14 to i32
  %16 = urem i16 %1, 10923
  %17 = uitofp i16 %16 to float
  %18 = fdiv float %17, 1.092300e+04
  %19 = extractelement <2 x float> %13, i64 1
  %20 = fsub float 1.000000e+00, %19
  %21 = extractelement <2 x float> %13, i64 0
  %22 = fmul float %21, %20
  %23 = fneg float %19
  %24 = tail call float @llvm.fmuladd.f32(float %23, float %18, float 1.000000e+00)
  %25 = fmul float %21, %24
  %26 = fsub float 1.000000e+00, %18
  %27 = tail call float @llvm.fmuladd.f32(float %23, float %26, float 1.000000e+00)
  %28 = fmul float %21, %27
  switch i32 %15, label %34 [
    i32 1, label %29
    i32 2, label %30
    i32 3, label %31
    i32 4, label %32
    i32 5, label %33
  ]

29:                                               ; preds = %9
  br label %34

30:                                               ; preds = %9
  br label %34

31:                                               ; preds = %9
  br label %34

32:                                               ; preds = %9
  br label %34

33:                                               ; preds = %9
  br label %34

34:                                               ; preds = %33, %32, %31, %30, %29, %9
  %35 = phi float [ %21, %33 ], [ %28, %32 ], [ %22, %31 ], [ %22, %30 ], [ %25, %29 ], [ %21, %9 ]
  %36 = phi float [ %22, %33 ], [ %22, %32 ], [ %25, %31 ], [ %21, %30 ], [ %21, %29 ], [ %28, %9 ]
  %37 = phi float [ %25, %33 ], [ %21, %32 ], [ %21, %31 ], [ %28, %30 ], [ %22, %29 ], [ %22, %9 ]
  %38 = fmul float %35, 6.553500e+04
  %39 = fptoui float %38 to i16
  store i16 %39, ptr %0, align 2, !tbaa !157
  %40 = fmul float %36, 6.553500e+04
  %41 = fptoui float %40 to i16
  %42 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  store i16 %41, ptr %42, align 2, !tbaa !159
  %43 = fmul float %37, 6.553500e+04
  %44 = fptoui float %43 to i16
  %45 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  store i16 %44, ptr %45, align 2, !tbaa !160
  %46 = icmp eq i16 %39, %41
  %47 = icmp eq i16 %41, %44
  %48 = select i1 %46, i1 %47, i1 false
  br i1 %48, label %49, label %52

49:                                               ; preds = %34, %6
  %50 = phi i16 [ %3, %6 ], [ %44, %34 ]
  %51 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 3
  store i16 %50, ptr %51, align 2, !tbaa !344
  br label %52

52:                                               ; preds = %49, %34
  %53 = phi i8 [ 1, %49 ], [ 0, %34 ]
  %54 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 5
  store i8 %53, ptr %54, align 1, !tbaa !342
  %55 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 4
  store i8 %53, ptr %55, align 2, !tbaa !343
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @gx_sort_ht_order(ptr nocapture noundef %0, i32 noundef %1) #57 {
  %3 = icmp ult i32 %1, 2
  br i1 %3, label %66, label %4

4:                                                ; preds = %2
  %5 = add i32 %1, -1
  %6 = lshr i32 %1, 1
  br label %7

7:                                                ; preds = %57, %4
  %8 = phi i32 [ %30, %57 ], [ %5, %4 ]
  %9 = phi i32 [ %33, %57 ], [ %6, %4 ]
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %7
  %12 = add nsw i32 %9, -1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %13
  %15 = load i16, ptr %14, align 2, !tbaa.struct !184
  %16 = getelementptr inbounds i8, ptr %14, i64 2
  %17 = load i16, ptr %16, align 2, !tbaa.struct !182
  br label %29

18:                                               ; preds = %7
  %19 = zext i32 %8 to i64
  %20 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %19
  %21 = load i16, ptr %20, align 2, !tbaa.struct !184
  %22 = getelementptr inbounds i8, ptr %20, i64 2
  %23 = load i16, ptr %22, align 2, !tbaa.struct !182
  %24 = load i32, ptr %0, align 2
  store i32 %24, ptr %20, align 2
  %25 = add i32 %8, -1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %.lcssa2 = phi i16 [ %21, %18 ]
  %.lcssa1 = phi i16 [ %23, %18 ]
  store i16 %.lcssa2, ptr %0, align 2, !tbaa.struct !184
  %28 = getelementptr inbounds i8, ptr %0, i64 2
  store i16 %.lcssa1, ptr %28, align 2, !tbaa.struct !182
  br label %66

29:                                               ; preds = %18, %11
  %30 = phi i32 [ %8, %11 ], [ %25, %18 ]
  %31 = phi i16 [ %17, %11 ], [ %23, %18 ]
  %32 = phi i16 [ %15, %11 ], [ %21, %18 ]
  %33 = phi i32 [ %12, %11 ], [ 0, %18 ]
  br label %34

34:                                               ; preds = %61, %29
  %35 = phi i32 [ %33, %29 ], [ %50, %61 ]
  %36 = shl i32 %35, 1
  %37 = or i32 %36, 1
  %38 = icmp ult i32 %37, %30
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = zext i32 %37 to i64
  %41 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %40, i32 1
  %42 = load i16, ptr %41, align 2, !tbaa !362
  %43 = add i32 %36, 2
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %44, i32 1
  %46 = load i16, ptr %45, align 2, !tbaa !362
  %47 = icmp ult i16 %42, %46
  %48 = select i1 %47, i32 %43, i32 %37
  br label %49

49:                                               ; preds = %39, %34
  %50 = phi i32 [ %37, %34 ], [ %48, %39 ]
  %51 = icmp ugt i32 %50, %30
  br i1 %51, label %57, label %52

52:                                               ; preds = %49
  %53 = zext i32 %50 to i64
  %54 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %53, i32 1
  %55 = load i16, ptr %54, align 2, !tbaa !362
  %56 = icmp ult i16 %31, %55
  br i1 %56, label %61, label %57

57:                                               ; preds = %52, %49
  %.lcssa = phi i32 [ %35, %52 ], [ %35, %49 ]
  %58 = zext i32 %.lcssa to i64
  %59 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %58
  store i16 %32, ptr %59, align 2, !tbaa.struct !184
  %60 = getelementptr inbounds i8, ptr %59, i64 2
  store i16 %31, ptr %60, align 2, !tbaa.struct !182
  br label %7

61:                                               ; preds = %52
  %62 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %53
  %63 = zext i32 %35 to i64
  %64 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %63
  %65 = load i32, ptr %62, align 2
  store i32 %65, ptr %64, align 2
  br label %34

66:                                               ; preds = %27, %2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @gx_color_render(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 22
  %5 = load ptr, ptr %4, align 8, !tbaa !338
  %6 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 4
  %7 = load i8, ptr %6, align 2, !tbaa !343
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 3
  %11 = load i16, ptr %10, align 2, !tbaa !344
  switch i16 %11, label %22 [
    i16 0, label %12
    i16 -1, label %17
  ]

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.device_s, ptr %5, i64 0, i32 3
  %14 = load i64, ptr %13, align 8, !tbaa !331
  store i64 %14, ptr %1, align 8, !tbaa !439
  %15 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %14, ptr %15, align 8, !tbaa !464
  %16 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 2
  store i32 0, ptr %16, align 8, !tbaa !334
  br label %270

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.device_s, ptr %5, i64 0, i32 2
  %19 = load i64, ptr %18, align 8, !tbaa !330
  store i64 %19, ptr %1, align 8, !tbaa !439
  %20 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %19, ptr %20, align 8, !tbaa !464
  %21 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 2
  store i32 0, ptr %21, align 8, !tbaa !334
  br label %270

22:                                               ; preds = %9, %3
  %23 = load ptr, ptr %5, align 8, !tbaa !328
  %24 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 8
  %25 = load i16, ptr %24, align 4, !tbaa !393
  %26 = zext i16 %25 to i64
  %27 = icmp ugt i16 %25, 254
  br i1 %27, label %28, label %54

28:                                               ; preds = %22
  %29 = add nuw nsw i64 %26, 1
  %30 = load i16, ptr %0, align 2, !tbaa !157
  %31 = zext i16 %30 to i64
  %32 = mul nuw nsw i64 %29, %31
  %33 = lshr i64 %32, 16
  %34 = trunc i64 %33 to i16
  %35 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  %36 = load i16, ptr %35, align 2, !tbaa !159
  %37 = zext i16 %36 to i64
  %38 = mul nuw nsw i64 %29, %37
  %39 = lshr i64 %38, 16
  %40 = trunc i64 %39 to i16
  %41 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  %42 = load i16, ptr %41, align 2, !tbaa !160
  %43 = zext i16 %42 to i64
  %44 = mul nuw nsw i64 %29, %43
  %45 = lshr i64 %44, 16
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !25
  %49 = getelementptr inbounds %struct.gx_device_procs_s, ptr %48, i64 0, i32 5
  %50 = load ptr, ptr %49, align 8, !tbaa !392
  %51 = tail call i64 %50(ptr noundef nonnull %23, i16 noundef zeroext %34, i16 noundef zeroext %40, i16 noundef zeroext %46) #64
  store i64 %51, ptr %1, align 8, !tbaa !439
  %52 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %51, ptr %52, align 8, !tbaa !464
  %53 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 2
  store i32 0, ptr %53, align 8, !tbaa !334
  br label %270

54:                                               ; preds = %22
  %55 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 11
  %56 = load ptr, ptr %55, align 8, !tbaa !356
  %57 = getelementptr inbounds %struct.halftone_s, ptr %56, i64 0, i32 5
  %58 = load i32, ptr %57, align 8, !tbaa !361
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 7
  %61 = load i32, ptr %60, align 8, !tbaa !616
  %62 = icmp eq i32 %61, 0
  %63 = or i1 %8, %62
  br i1 %63, label %64, label %101

64:                                               ; preds = %54
  %65 = mul nuw nsw i64 %59, %26
  %66 = add nuw nsw i64 %65, 1
  %67 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 5
  %68 = load i8, ptr %67, align 1, !tbaa !342
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 3
  %72 = load i16, ptr %71, align 2, !tbaa !344
  br label %75

73:                                               ; preds = %64
  %74 = tail call zeroext i16 @gx_color_luminance(ptr noundef nonnull %0) #64
  br label %75

75:                                               ; preds = %73, %70
  %76 = phi i16 [ %72, %70 ], [ %74, %73 ]
  %77 = zext i16 %76 to i64
  %78 = mul nuw i64 %66, %77
  %79 = lshr i64 %78, 16
  %80 = udiv i64 %79, %59
  %81 = trunc i64 %80 to i16
  %82 = urem i64 %79, %59
  %83 = trunc i64 %82 to i32
  %84 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 2
  store i32 %83, ptr %84, align 8, !tbaa !334
  %85 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !25
  %87 = getelementptr inbounds %struct.gx_device_procs_s, ptr %86, i64 0, i32 5
  %88 = load ptr, ptr %87, align 8, !tbaa !392
  %89 = tail call i64 %88(ptr noundef nonnull %23, i16 noundef zeroext %81, i16 noundef zeroext %81, i16 noundef zeroext %81) #64
  store i64 %89, ptr %1, align 8, !tbaa !439
  %90 = load i32, ptr %84, align 8, !tbaa !334
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %75
  %93 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %89, ptr %93, align 8, !tbaa !464
  br label %270

94:                                               ; preds = %75
  %95 = add i16 %81, 1
  %96 = load ptr, ptr %85, align 8, !tbaa !25
  %97 = getelementptr inbounds %struct.gx_device_procs_s, ptr %96, i64 0, i32 5
  %98 = load ptr, ptr %97, align 8, !tbaa !392
  %99 = tail call i64 %98(ptr noundef nonnull %23, i16 noundef zeroext %95, i16 noundef zeroext %95, i16 noundef zeroext %95) #64
  %100 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %99, ptr %100, align 8, !tbaa !464
  tail call void @gx_color_load(ptr noundef nonnull %1, ptr noundef nonnull %2) #64
  br label %270

101:                                              ; preds = %54
  %102 = load i16, ptr %0, align 2, !tbaa !157
  %103 = zext i16 %102 to i64
  %104 = mul nuw nsw i64 %103, %26
  %105 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 1
  %106 = load i16, ptr %105, align 2, !tbaa !159
  %107 = zext i16 %106 to i64
  %108 = mul nuw nsw i64 %107, %26
  %109 = getelementptr inbounds %struct.gs_color_s, ptr %0, i64 0, i32 2
  %110 = load i16, ptr %109, align 2, !tbaa !160
  %111 = zext i16 %110 to i64
  %112 = mul nuw nsw i64 %111, %26
  %113 = trunc i64 %104 to i32
  %114 = udiv i32 %113, 65535
  %115 = trunc i32 %114 to i16
  %116 = trunc i64 %108 to i32
  %117 = udiv i32 %116, 65535
  %118 = trunc i32 %117 to i16
  %119 = trunc i64 %112 to i32
  %120 = udiv i32 %119, 65535
  %121 = trunc i32 %120 to i16
  %122 = trunc i64 %104 to i16
  %123 = add i16 %115, %122
  %124 = trunc i64 %108 to i16
  %125 = add i16 %118, %124
  %126 = trunc i64 %112 to i16
  %127 = add i16 %121, %126
  %128 = or i16 %125, %123
  %129 = or i16 %128, %127
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %131, label %139

131:                                              ; preds = %101
  %132 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 1
  %133 = load ptr, ptr %132, align 8, !tbaa !25
  %134 = getelementptr inbounds %struct.gx_device_procs_s, ptr %133, i64 0, i32 5
  %135 = load ptr, ptr %134, align 8, !tbaa !392
  %136 = tail call i64 %135(ptr noundef nonnull %23, i16 noundef zeroext %115, i16 noundef zeroext %118, i16 noundef zeroext %121) #64
  store i64 %136, ptr %1, align 8, !tbaa !439
  %137 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %136, ptr %137, align 8, !tbaa !464
  %138 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 2
  store i32 0, ptr %138, align 8, !tbaa !334
  br label %270

139:                                              ; preds = %101
  %140 = icmp slt i16 %123, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %139
  %142 = xor i16 %123, -1
  %143 = add nuw nsw i16 %115, 1
  br label %144

144:                                              ; preds = %141, %139
  %145 = phi i16 [ %142, %141 ], [ %123, %139 ]
  %146 = phi i16 [ -1, %141 ], [ 1, %139 ]
  %147 = phi i16 [ 30, %141 ], [ 0, %139 ]
  %148 = phi i16 [ %143, %141 ], [ %115, %139 ]
  %149 = icmp slt i16 %125, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %144
  %151 = xor i16 %125, -1
  %152 = add nuw nsw i16 %118, 1
  %153 = add nuw nsw i16 %147, 59
  br label %154

154:                                              ; preds = %150, %144
  %155 = phi i16 [ %152, %150 ], [ %118, %144 ]
  %156 = phi i16 [ %151, %150 ], [ %125, %144 ]
  %157 = phi i16 [ -1, %150 ], [ 1, %144 ]
  %158 = phi i16 [ %153, %150 ], [ %147, %144 ]
  %159 = icmp slt i16 %127, 0
  br i1 %159, label %160, label %164

160:                                              ; preds = %154
  %161 = xor i16 %127, -1
  %162 = add nuw nsw i16 %121, 1
  %163 = add nuw nsw i16 %158, 11
  br label %164

164:                                              ; preds = %160, %154
  %165 = phi i16 [ %162, %160 ], [ %121, %154 ]
  %166 = phi i16 [ %161, %160 ], [ %127, %154 ]
  %167 = phi i16 [ -1, %160 ], [ 1, %154 ]
  %168 = phi i16 [ %163, %160 ], [ %158, %154 ]
  %169 = getelementptr inbounds %struct.gx_device_s, ptr %23, i64 0, i32 1
  %170 = load ptr, ptr %169, align 8, !tbaa !25
  %171 = getelementptr inbounds %struct.gx_device_procs_s, ptr %170, i64 0, i32 5
  %172 = load ptr, ptr %171, align 8, !tbaa !392
  %173 = tail call i64 %172(ptr noundef nonnull %23, i16 noundef zeroext %148, i16 noundef zeroext %155, i16 noundef zeroext %165) #64
  store i64 %173, ptr %1, align 8, !tbaa !439
  %174 = icmp ugt i16 %156, %145
  br i1 %174, label %175, label %189

175:                                              ; preds = %164
  %176 = icmp ugt i16 %166, %156
  %177 = tail call i16 @llvm.umax.i16(i16 %166, i16 %156)
  %178 = select i1 %176, i32 4, i32 2
  %179 = icmp ugt i16 %166, %145
  br i1 %179, label %180, label %185

180:                                              ; preds = %175
  %181 = zext i16 %156 to i64
  %182 = zext i16 %166 to i64
  %183 = add nuw nsw i64 %182, %181
  %184 = zext i16 %145 to i64
  br label %203

185:                                              ; preds = %175
  %186 = zext i16 %145 to i64
  %187 = zext i16 %156 to i64
  %188 = add nuw nsw i64 %187, %186
  br label %203

189:                                              ; preds = %164
  %190 = icmp ugt i16 %166, %145
  %191 = tail call i16 @llvm.umax.i16(i16 %166, i16 %145)
  %192 = select i1 %190, i32 4, i32 1
  %193 = icmp ugt i16 %166, %156
  br i1 %193, label %194, label %199

194:                                              ; preds = %189
  %195 = zext i16 %166 to i64
  %196 = zext i16 %145 to i64
  %197 = add nuw nsw i64 %195, %196
  %198 = zext i16 %156 to i64
  br label %203

199:                                              ; preds = %189
  %200 = zext i16 %145 to i64
  %201 = zext i16 %156 to i64
  %202 = add nuw nsw i64 %201, %200
  br label %203

203:                                              ; preds = %199, %194, %185, %180
  %204 = phi i64 [ %198, %194 ], [ %201, %199 ], [ %181, %180 ], [ %187, %185 ]
  %205 = phi i64 [ %196, %194 ], [ %200, %199 ], [ %184, %180 ], [ %186, %185 ]
  %206 = phi i16 [ %191, %194 ], [ %191, %199 ], [ %177, %180 ], [ %177, %185 ]
  %207 = phi i64 [ %197, %194 ], [ %202, %199 ], [ %183, %180 ], [ %188, %185 ]
  %208 = phi i32 [ %192, %194 ], [ %192, %199 ], [ %178, %180 ], [ %178, %185 ]
  %209 = phi i32 [ 5, %194 ], [ 3, %199 ], [ 6, %180 ], [ 3, %185 ]
  %210 = zext i16 %206 to i64
  %211 = mul nuw nsw i64 %210, 100
  %212 = mul nuw nsw i64 %207, 71
  %213 = add nuw nsw i64 %204, %205
  %214 = zext i16 %166 to i64
  %215 = add nuw nsw i64 %213, %214
  %216 = icmp ugt i64 %211, %212
  %217 = mul nuw nsw i64 %215, 62
  br i1 %216, label %218, label %223

218:                                              ; preds = %203
  %219 = icmp ugt i64 %217, %211
  %220 = select i1 %219, i64 %215, i64 %210
  %221 = select i1 %219, i64 196605, i64 65535
  %222 = select i1 %219, i32 7, i32 %208
  br label %228

223:                                              ; preds = %203
  %224 = icmp ugt i64 %217, %212
  %225 = select i1 %224, i64 %215, i64 %207
  %226 = select i1 %224, i64 196605, i64 131070
  %227 = select i1 %224, i32 7, i32 %209
  br label %228

228:                                              ; preds = %223, %218
  %229 = phi i64 [ %220, %218 ], [ %225, %223 ]
  %230 = phi i64 [ %221, %218 ], [ %226, %223 ]
  %231 = phi i32 [ %222, %218 ], [ %227, %223 ]
  %232 = mul nuw nsw i64 %229, %59
  %233 = udiv i64 %232, %230
  %234 = trunc i64 %233 to i32
  %235 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 2
  store i32 %234, ptr %235, align 8, !tbaa !334
  %236 = icmp eq i32 %234, 0
  br i1 %236, label %237, label %239

237:                                              ; preds = %228
  %238 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %173, ptr %238, align 8, !tbaa !464
  br label %270

239:                                              ; preds = %228
  %240 = and i32 %231, 1
  %241 = icmp eq i32 %240, 0
  %242 = select i1 %241, i16 0, i16 %146
  %243 = add i16 %242, %148
  %244 = and i32 %231, 2
  %245 = icmp eq i32 %244, 0
  %246 = select i1 %245, i16 0, i16 %157
  %247 = add i16 %246, %155
  %248 = and i32 %231, 4
  %249 = icmp eq i32 %248, 0
  %250 = select i1 %249, i16 0, i16 %167
  %251 = add i16 %250, %165
  %252 = zext i32 %231 to i64
  %253 = getelementptr inbounds [8 x i16], ptr @lum, i64 0, i64 %252
  %254 = load i16, ptr %253, align 2, !tbaa !102
  %255 = icmp ult i16 %254, %168
  br i1 %255, label %256, label %263

256:                                              ; preds = %239
  %257 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %173, ptr %257, align 8, !tbaa !464
  %258 = load ptr, ptr %169, align 8, !tbaa !25
  %259 = getelementptr inbounds %struct.gx_device_procs_s, ptr %258, i64 0, i32 5
  %260 = load ptr, ptr %259, align 8, !tbaa !392
  %261 = tail call i64 %260(ptr noundef nonnull %23, i16 noundef zeroext %243, i16 noundef zeroext %247, i16 noundef zeroext %251) #64
  store i64 %261, ptr %1, align 8, !tbaa !439
  %262 = sub i32 %58, %234
  store i32 %262, ptr %235, align 8, !tbaa !334
  br label %269

263:                                              ; preds = %239
  %264 = load ptr, ptr %169, align 8, !tbaa !25
  %265 = getelementptr inbounds %struct.gx_device_procs_s, ptr %264, i64 0, i32 5
  %266 = load ptr, ptr %265, align 8, !tbaa !392
  %267 = tail call i64 %266(ptr noundef nonnull %23, i16 noundef zeroext %243, i16 noundef zeroext %247, i16 noundef zeroext %251) #64
  %268 = getelementptr inbounds %struct.gx_device_color_s, ptr %1, i64 0, i32 1
  store i64 %267, ptr %268, align 8, !tbaa !464
  br label %269

269:                                              ; preds = %263, %256
  tail call void @gx_color_load(ptr noundef nonnull %1, ptr noundef nonnull %2) #64
  br label %270

270:                                              ; preds = %269, %237, %131, %94, %92, %28, %17, %12
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gz_fill_rectangle(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) #0 {
  %7 = load i64, ptr %4, align 8, !tbaa !439
  %8 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 22
  %9 = load ptr, ptr %8, align 8, !tbaa !338
  %10 = load ptr, ptr %9, align 8, !tbaa !328
  %11 = getelementptr inbounds %struct.gx_device_color_s, ptr %4, i64 0, i32 2
  %12 = load i32, ptr %11, align 8, !tbaa !334
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.gx_device_s, ptr %10, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !25
  %17 = getelementptr inbounds %struct.gx_device_procs_s, ptr %16, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !455
  %19 = tail call i32 %18(ptr noundef %10, i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i64 noundef %7) #64
  br label %70

20:                                               ; preds = %6
  %21 = getelementptr inbounds %struct.gx_device_color_s, ptr %4, i64 0, i32 1
  %22 = load i64, ptr %21, align 8, !tbaa !464
  %23 = getelementptr inbounds %struct.gx_device_color_s, ptr %4, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !617
  %25 = getelementptr inbounds %struct.gx_bitmap_s, ptr %24, i64 0, i32 2
  %26 = load i32, ptr %25, align 4, !tbaa !618
  %27 = icmp slt i32 %26, %2
  br i1 %27, label %58, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %struct.gx_bitmap_s, ptr %24, i64 0, i32 3
  %30 = load i32, ptr %29, align 8, !tbaa !620
  %31 = icmp slt i32 %30, %3
  br i1 %31, label %58, label %32

32:                                               ; preds = %28
  %33 = srem i32 %0, %26
  %34 = add nsw i32 %33, %2
  %35 = icmp sgt i32 %34, %26
  br i1 %35, label %58, label %36

36:                                               ; preds = %32
  %37 = srem i32 %1, %30
  %38 = add nsw i32 %37, %3
  %39 = icmp sgt i32 %38, %30
  br i1 %39, label %58, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.gx_bitmap_s, ptr %24, i64 0, i32 1
  %42 = load i32, ptr %41, align 8, !tbaa !621
  %43 = load ptr, ptr %24, align 8, !tbaa !622
  %44 = mul nsw i32 %42, %37
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, ptr %43, i64 %45
  %47 = icmp slt i32 %12, 0
  %48 = getelementptr inbounds %struct.gx_device_s, ptr %10, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !25
  br i1 %47, label %50, label %54

50:                                               ; preds = %40
  %51 = getelementptr inbounds %struct.gx_device_procs_s, ptr %49, i64 0, i32 10
  %52 = load ptr, ptr %51, align 8, !tbaa !623
  %53 = tail call i32 %52(ptr noundef %10, ptr noundef %46, i32 noundef %33, i32 noundef %42, i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #64
  br label %70

54:                                               ; preds = %40
  %55 = getelementptr inbounds %struct.gx_device_procs_s, ptr %49, i64 0, i32 9
  %56 = load ptr, ptr %55, align 8, !tbaa !451
  %57 = tail call i32 %56(ptr noundef %10, ptr noundef %46, i32 noundef %33, i32 noundef %42, i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i64 noundef %7, i64 noundef %22) #64
  br label %70

58:                                               ; preds = %36, %32, %28, %20
  %59 = icmp slt i32 %12, 0
  %60 = select i1 %59, i64 -1, i64 %22
  %61 = select i1 %59, i64 -1, i64 %7
  %62 = getelementptr inbounds %struct.gx_device_s, ptr %10, i64 0, i32 1
  %63 = load ptr, ptr %62, align 8, !tbaa !25
  %64 = getelementptr inbounds %struct.gx_device_procs_s, ptr %63, i64 0, i32 8
  %65 = load ptr, ptr %64, align 8, !tbaa !624
  %66 = tail call i32 %65(ptr noundef %10, ptr noundef nonnull %24, i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i64 noundef %61, i64 noundef %60) #64
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %58
  %69 = tail call i32 @gx_default_tile_rectangle(ptr noundef nonnull %10, ptr noundef nonnull %24, i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i64 noundef %61, i64 noundef %60) #62
  br label %70

70:                                               ; preds = %68, %58, %54, %50, %14
  %71 = phi i32 [ %19, %14 ], [ 0, %68 ], [ %66, %58 ], [ %53, %50 ], [ %57, %54 ]
  ret i32 %71
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_default_tile_rectangle(ptr noundef %0, ptr nocapture noundef readonly %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i64 noundef %6, i64 noundef %7) #0 {
  %9 = getelementptr inbounds %struct.gx_bitmap_s, ptr %1, i64 0, i32 2
  %10 = load i32, ptr %9, align 4, !tbaa !618
  %11 = getelementptr inbounds %struct.gx_bitmap_s, ptr %1, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !620
  %13 = getelementptr inbounds %struct.gx_bitmap_s, ptr %1, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !621
  %15 = add nsw i32 %4, %2
  %16 = add nsw i32 %5, %3
  %17 = sub nsw i32 %15, %10
  %18 = sub nsw i32 %16, %12
  %19 = tail call i32 @llvm.ctpop.i32(i32 %10), !range !625
  %20 = icmp ult i32 %19, 2
  br i1 %20, label %21, label %24

21:                                               ; preds = %8
  %22 = add nsw i32 %10, -1
  %23 = and i32 %22, %2
  br label %26

24:                                               ; preds = %8
  %25 = srem i32 %2, %10
  br label %26

26:                                               ; preds = %24, %21
  %27 = phi i32 [ %23, %21 ], [ %25, %24 ]
  %28 = srem i32 %3, %12
  %29 = sub nsw i32 %10, %27
  %30 = sub nsw i32 %12, %28
  %31 = load ptr, ptr %1, align 8, !tbaa !622
  %32 = mul nsw i32 %28, %14
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, ptr %31, i64 %33
  %35 = and i64 %7, %6
  %36 = icmp eq i64 %35, -1
  %37 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !25
  br i1 %36, label %39, label %42

39:                                               ; preds = %26
  %40 = getelementptr inbounds %struct.gx_device_procs_s, ptr %38, i64 0, i32 10
  %41 = load ptr, ptr %40, align 8, !tbaa !623
  br label %45

42:                                               ; preds = %26
  %43 = getelementptr inbounds %struct.gx_device_procs_s, ptr %38, i64 0, i32 9
  %44 = load ptr, ptr %43, align 8, !tbaa !451
  br label %45

45:                                               ; preds = %42, %39
  %46 = phi ptr [ undef, %39 ], [ %44, %42 ]
  %47 = phi ptr [ %41, %39 ], [ undef, %42 ]
  %48 = tail call i32 @llvm.smin.i32(i32 %29, i32 %4)
  %49 = icmp sgt i32 %5, 0
  br i1 %49, label %50, label %88

50:                                               ; preds = %45
  %51 = tail call i32 @llvm.smin.i32(i32 %30, i32 %5)
  %52 = add nsw i32 %48, %2
  %53 = icmp sgt i32 %52, %17
  br label %54

54:                                               ; preds = %81, %50
  %55 = phi i32 [ %3, %50 ], [ %82, %81 ]
  %56 = phi ptr [ %34, %50 ], [ %86, %81 ]
  %57 = phi i32 [ %51, %50 ], [ %85, %81 ]
  br i1 %36, label %58, label %60

58:                                               ; preds = %54
  %59 = tail call i32 %47(ptr noundef %0, ptr noundef %56, i32 noundef %27, i32 noundef %14, i32 noundef %2, i32 noundef %55, i32 noundef %48, i32 noundef %57) #64
  br label %62

60:                                               ; preds = %54
  %61 = tail call i32 %46(ptr noundef %0, ptr noundef %56, i32 noundef %27, i32 noundef %14, i32 noundef %2, i32 noundef %55, i32 noundef %48, i32 noundef %57, i64 noundef %6, i64 noundef %7) #64
  br label %62

62:                                               ; preds = %60, %58
  br i1 %53, label %72, label %63

63:                                               ; preds = %69, %62
  %64 = phi i32 [ %70, %69 ], [ %52, %62 ]
  br i1 %36, label %65, label %67

65:                                               ; preds = %63
  %66 = tail call i32 %47(ptr noundef %0, ptr noundef %56, i32 noundef 0, i32 noundef %14, i32 noundef %64, i32 noundef %55, i32 noundef %10, i32 noundef %57) #64
  br label %69

67:                                               ; preds = %63
  %68 = tail call i32 %46(ptr noundef %0, ptr noundef %56, i32 noundef 0, i32 noundef %14, i32 noundef %64, i32 noundef %55, i32 noundef %10, i32 noundef %57, i64 noundef %6, i64 noundef %7) #64
  br label %69

69:                                               ; preds = %67, %65
  %70 = add nsw i32 %64, %10
  %71 = icmp sgt i32 %70, %17
  br i1 %71, label %72, label %63, !llvm.loop !626

72:                                               ; preds = %69, %62
  %73 = phi i32 [ %52, %62 ], [ %70, %69 ]
  %74 = icmp slt i32 %73, %15
  br i1 %74, label %75, label %81

75:                                               ; preds = %72
  %76 = sub nsw i32 %15, %73
  br i1 %36, label %77, label %79

77:                                               ; preds = %75
  %78 = tail call i32 %47(ptr noundef %0, ptr noundef %56, i32 noundef 0, i32 noundef %14, i32 noundef %73, i32 noundef %55, i32 noundef %76, i32 noundef %57) #64
  br label %81

79:                                               ; preds = %75
  %80 = tail call i32 %46(ptr noundef %0, ptr noundef %56, i32 noundef 0, i32 noundef %14, i32 noundef %73, i32 noundef %55, i32 noundef %76, i32 noundef %57, i64 noundef %6, i64 noundef %7) #64
  br label %81

81:                                               ; preds = %79, %77, %72
  %82 = add nsw i32 %55, %57
  %83 = icmp sgt i32 %82, %18
  %84 = sub nsw i32 %16, %82
  %85 = select i1 %83, i32 %84, i32 %12
  %86 = load ptr, ptr %1, align 8, !tbaa !622
  %87 = icmp slt i32 %82, %16
  br i1 %87, label %54, label %88, !llvm.loop !627

88:                                               ; preds = %81, %45
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctpop.i32(i32) #19

; Function Attrs: nounwind optsize uwtable
define internal i32 @gz_fill_trapezoid_fixed(i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i32 noundef %6, ptr nocapture noundef readonly %7, ptr nocapture noundef readonly %8) #0 {
  %10 = lshr i64 %0, 12
  %11 = trunc i64 %10 to i32
  %12 = add i64 %0, 4095
  %13 = add i64 %12, %1
  %14 = lshr i64 %13, 12
  %15 = trunc i64 %14 to i32
  %16 = sub nsw i32 %15, %11
  %17 = lshr i64 %2, 12
  %18 = trunc i64 %17 to i32
  %19 = lshr i64 %3, 12
  %20 = trunc i64 %19 to i32
  %21 = add i64 %3, 4095
  %22 = add i64 %21, %4
  %23 = lshr i64 %22, 12
  %24 = trunc i64 %23 to i32
  %25 = sub nsw i32 %24, %20
  %26 = add i64 %2, 4095
  %27 = add i64 %26, %5
  %28 = lshr i64 %27, 12
  %29 = trunc i64 %28 to i32
  %30 = sub nsw i32 %29, %18
  %31 = icmp eq i32 %15, %11
  %32 = icmp eq i32 %24, %20
  %33 = and i1 %31, %32
  %34 = icmp slt i32 %30, 1
  %35 = select i1 %33, i1 true, i1 %34
  br i1 %35, label %161, label %36

36:                                               ; preds = %9
  %37 = icmp eq i32 %6, 0
  br i1 %37, label %38, label %53

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.gx_device_color_s, ptr %7, i64 0, i32 2
  %40 = load i32, ptr %39, align 8, !tbaa !334
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.gs_state_s, ptr %8, i64 0, i32 22
  %44 = load ptr, ptr %43, align 8, !tbaa !338
  %45 = load ptr, ptr %44, align 8, !tbaa !328
  %46 = getelementptr inbounds %struct.gx_device_s, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !25
  %48 = getelementptr inbounds %struct.gx_device_procs_s, ptr %47, i64 0, i32 12
  %49 = load ptr, ptr %48, align 8, !tbaa !628
  %50 = load i64, ptr %7, align 8, !tbaa !439
  %51 = tail call i32 %49(ptr noundef %45, i32 noundef %11, i32 noundef %18, i32 noundef %16, i32 noundef %20, i32 noundef %29, i32 noundef %25, i64 noundef %50) #64
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %161

53:                                               ; preds = %42, %38, %36
  %54 = sub nsw i32 %20, %11
  %55 = sub nsw i32 %24, %15
  %56 = icmp sgt i32 %54, -1
  br i1 %56, label %57, label %64

57:                                               ; preds = %53
  %58 = icmp ult i32 %54, %30
  br i1 %58, label %74, label %59

59:                                               ; preds = %57
  %60 = udiv i32 %54, %30
  %61 = add nuw nsw i32 %60, 1
  %62 = mul nsw i32 %60, %30
  %63 = urem i32 %54, %30
  br label %74

64:                                               ; preds = %53
  %65 = sub nsw i32 0, %30
  %66 = icmp ugt i32 %54, %65
  %67 = sub i32 0, %54
  br i1 %66, label %74, label %68

68:                                               ; preds = %64
  %69 = udiv i32 %67, %30
  %70 = sub i32 0, %69
  %71 = xor i32 %69, -1
  %72 = mul nsw i32 %30, %70
  %73 = sub nsw i32 %72, %54
  br label %74

74:                                               ; preds = %68, %64, %59, %57
  %75 = phi i32 [ %60, %59 ], [ %70, %68 ], [ 0, %57 ], [ 0, %64 ]
  %76 = phi i32 [ %61, %59 ], [ %71, %68 ], [ 1, %57 ], [ -1, %64 ]
  %77 = phi i32 [ %63, %59 ], [ %73, %68 ], [ %54, %57 ], [ %67, %64 ]
  %78 = icmp sgt i32 %55, -1
  br i1 %78, label %79, label %97

79:                                               ; preds = %74
  %80 = icmp ult i32 %55, %30
  br i1 %80, label %86, label %81

81:                                               ; preds = %79
  %82 = udiv i32 %55, %30
  %83 = add nuw nsw i32 %82, 1
  %84 = mul nsw i32 %82, %30
  %85 = urem i32 %55, %30
  br label %107

86:                                               ; preds = %79
  %87 = icmp eq i32 %75, 0
  %88 = icmp eq i32 %77, 0
  %89 = select i1 %87, i1 %88, i1 false
  %90 = icmp eq i32 %55, 0
  %91 = select i1 %89, i1 %90, i1 false
  br i1 %91, label %92, label %107

92:                                               ; preds = %86
  br i1 %37, label %95, label %93

93:                                               ; preds = %92
  %94 = tail call i32 @gz_fill_rectangle(i32 noundef %18, i32 noundef %11, i32 noundef %30, i32 noundef %16, ptr noundef %7, ptr noundef %8) #62
  br label %161

95:                                               ; preds = %92
  %96 = tail call i32 @gz_fill_rectangle(i32 noundef %11, i32 noundef %18, i32 noundef %16, i32 noundef %30, ptr noundef %7, ptr noundef %8) #62
  br label %161

97:                                               ; preds = %74
  %98 = sub nsw i32 0, %30
  %99 = icmp ugt i32 %55, %98
  %100 = sub i32 0, %55
  br i1 %99, label %107, label %101

101:                                              ; preds = %97
  %102 = udiv i32 %100, %30
  %103 = sub i32 0, %102
  %104 = xor i32 %102, -1
  %105 = mul nsw i32 %30, %103
  %106 = sub nsw i32 %105, %55
  br label %107

107:                                              ; preds = %101, %97, %86, %81
  %108 = phi i32 [ %82, %81 ], [ %103, %101 ], [ 0, %86 ], [ 0, %97 ]
  %109 = phi i32 [ %83, %81 ], [ %104, %101 ], [ 1, %86 ], [ -1, %97 ]
  %110 = phi i32 [ %85, %81 ], [ %106, %101 ], [ %55, %86 ], [ %100, %97 ]
  %111 = ashr i32 %77, 1
  %112 = ashr i32 %110, 1
  br label %113

113:                                              ; preds = %134, %107
  %114 = phi i32 [ %11, %107 ], [ %141, %134 ]
  %115 = phi i32 [ %111, %107 ], [ %140, %134 ]
  %116 = phi i32 [ %15, %107 ], [ %147, %134 ]
  %117 = phi i32 [ %112, %107 ], [ %146, %134 ]
  %118 = phi i32 [ %18, %107 ], [ %148, %134 ]
  %119 = phi i32 [ %11, %107 ], [ %114, %134 ]
  %120 = phi i32 [ %15, %107 ], [ %116, %134 ]
  %121 = phi i32 [ %18, %107 ], [ %135, %134 ]
  %122 = icmp eq i32 %114, %119
  %123 = icmp eq i32 %116, %120
  %124 = select i1 %122, i1 %123, i1 false
  br i1 %124, label %134, label %125

125:                                              ; preds = %113
  br i1 %37, label %130, label %126

126:                                              ; preds = %125
  %127 = sub nsw i32 %118, %121
  %128 = sub nsw i32 %120, %119
  %129 = tail call i32 @gz_fill_rectangle(i32 noundef %121, i32 noundef %119, i32 noundef %127, i32 noundef %128, ptr noundef %7, ptr noundef %8) #62
  br label %134

130:                                              ; preds = %125
  %131 = sub nsw i32 %120, %119
  %132 = sub nsw i32 %118, %121
  %133 = tail call i32 @gz_fill_rectangle(i32 noundef %119, i32 noundef %121, i32 noundef %131, i32 noundef %132, ptr noundef %7, ptr noundef %8) #62
  br label %134

134:                                              ; preds = %130, %126, %113
  %135 = phi i32 [ %121, %113 ], [ %118, %130 ], [ %118, %126 ]
  %136 = add nsw i32 %115, %77
  %137 = icmp slt i32 %136, %30
  %138 = select i1 %137, i32 %75, i32 %76
  %139 = select i1 %137, i32 0, i32 %30
  %140 = sub nsw i32 %136, %139
  %141 = add nsw i32 %138, %114
  %142 = add nsw i32 %117, %110
  %143 = icmp slt i32 %142, %30
  %144 = select i1 %143, i32 %108, i32 %109
  %145 = select i1 %143, i32 0, i32 %30
  %146 = sub nsw i32 %142, %145
  %147 = add nsw i32 %144, %116
  %148 = add nsw i32 %118, 1
  %149 = icmp slt i32 %148, %29
  br i1 %149, label %113, label %150, !llvm.loop !629

150:                                              ; preds = %134
  %.lcssa3 = phi i32 [ %135, %134 ]
  %.lcssa2 = phi i32 [ %148, %134 ]
  %.lcssa1 = phi i32 [ %114, %134 ]
  %.lcssa = phi i32 [ %116, %134 ]
  %151 = icmp eq i32 %.lcssa2, %.lcssa3
  br i1 %151, label %161, label %152

152:                                              ; preds = %150
  br i1 %37, label %157, label %153

153:                                              ; preds = %152
  %154 = sub nsw i32 %.lcssa2, %.lcssa3
  %155 = sub nsw i32 %.lcssa, %.lcssa1
  %156 = tail call i32 @gz_fill_rectangle(i32 noundef %.lcssa3, i32 noundef %.lcssa1, i32 noundef %154, i32 noundef %155, ptr noundef %7, ptr noundef %8) #62
  br label %161

157:                                              ; preds = %152
  %158 = sub nsw i32 %.lcssa, %.lcssa1
  %159 = sub nsw i32 %.lcssa2, %.lcssa3
  %160 = tail call i32 @gz_fill_rectangle(i32 noundef %.lcssa1, i32 noundef %.lcssa3, i32 noundef %158, i32 noundef %159, ptr noundef %7, ptr noundef %8) #62
  br label %161

161:                                              ; preds = %157, %153, %150, %95, %93, %42, %9
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gz_draw_line_fixed(i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) #0 {
  %7 = lshr i64 %0, 12
  %8 = trunc i64 %7 to i32
  %9 = lshr i64 %1, 12
  %10 = trunc i64 %9 to i32
  %11 = lshr i64 %2, 12
  %12 = trunc i64 %11 to i32
  %13 = lshr i64 %3, 12
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %14, %10
  br i1 %15, label %16, label %30

16:                                               ; preds = %6
  %17 = icmp sgt i32 %8, %12
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nsw i64 %2, 4095
  %20 = lshr i64 %19, 12
  %21 = trunc i64 %20 to i32
  %22 = sub nsw i32 %21, %8
  %23 = tail call i32 @gz_fill_rectangle(i32 noundef %8, i32 noundef %10, i32 noundef %22, i32 noundef 1, ptr noundef %4, ptr noundef %5) #62
  br label %71

24:                                               ; preds = %16
  %25 = add nsw i64 %0, 4095
  %26 = lshr i64 %25, 12
  %27 = trunc i64 %26 to i32
  %28 = sub nsw i32 %27, %12
  %29 = tail call i32 @gz_fill_rectangle(i32 noundef %12, i32 noundef %10, i32 noundef %28, i32 noundef 1, ptr noundef %4, ptr noundef %5) #62
  br label %71

30:                                               ; preds = %6
  %31 = getelementptr inbounds %struct.gx_device_color_s, ptr %4, i64 0, i32 2
  %32 = load i32, ptr %31, align 8, !tbaa !334
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %45

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.gs_state_s, ptr %5, i64 0, i32 22
  %36 = load ptr, ptr %35, align 8, !tbaa !338
  %37 = load ptr, ptr %36, align 8, !tbaa !328
  %38 = getelementptr inbounds %struct.gx_device_s, ptr %37, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !25
  %40 = getelementptr inbounds %struct.gx_device_procs_s, ptr %39, i64 0, i32 11
  %41 = load ptr, ptr %40, align 8, !tbaa !630
  %42 = load i64, ptr %4, align 8, !tbaa !439
  %43 = tail call i32 %41(ptr noundef %37, i32 noundef %8, i32 noundef %10, i32 noundef %12, i32 noundef %14, i64 noundef %42) #64
  %44 = icmp sgt i32 %43, -1
  br i1 %44, label %71, label %45

45:                                               ; preds = %34, %30
  %46 = sub nsw i64 %3, %1
  %47 = sub nsw i64 %2, %0
  %48 = icmp slt i64 %47, 0
  %49 = sub nsw i64 0, %47
  %50 = select i1 %48, i64 %49, i64 %47
  %51 = icmp slt i64 %46, 0
  %52 = sub nsw i64 0, %46
  %53 = select i1 %51, i64 %52, i64 %46
  %54 = icmp sgt i64 %50, %53
  br i1 %54, label %63, label %55

55:                                               ; preds = %45
  br i1 %51, label %56, label %57

56:                                               ; preds = %55
  br label %57

57:                                               ; preds = %56, %55
  %58 = phi i64 [ %0, %56 ], [ %2, %55 ]
  %59 = phi i64 [ %3, %56 ], [ %1, %55 ]
  %60 = phi i64 [ %2, %56 ], [ %0, %55 ]
  %61 = phi i64 [ %52, %56 ], [ %46, %55 ]
  %62 = tail call i32 @gz_fill_trapezoid_fixed(i64 noundef %60, i64 noundef 1, i64 noundef %59, i64 noundef %58, i64 noundef 1, i64 noundef %61, i32 noundef 0, ptr noundef nonnull %4, ptr noundef %5) #62
  br label %71

63:                                               ; preds = %45
  br i1 %48, label %64, label %65

64:                                               ; preds = %63
  br label %65

65:                                               ; preds = %64, %63
  %66 = phi i64 [ %1, %64 ], [ %3, %63 ]
  %67 = phi i64 [ %3, %64 ], [ %1, %63 ]
  %68 = phi i64 [ %2, %64 ], [ %0, %63 ]
  %69 = phi i64 [ %49, %64 ], [ %47, %63 ]
  %70 = tail call i32 @gz_fill_trapezoid_fixed(i64 noundef %67, i64 noundef 1, i64 noundef %68, i64 noundef %66, i64 noundef 1, i64 noundef %69, i32 noundef 1, ptr noundef nonnull %4, ptr noundef %5) #62
  br label %71

71:                                               ; preds = %65, %57, %34, %24, %18
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gx_default_draw_line(ptr nocapture noundef readnone %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5) #10 {
  ret i32 -1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gx_default_fill_trapezoid(ptr nocapture noundef readnone %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i64 noundef %7) #10 {
  ret i32 -1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @gx_default_tile_trapezoid(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9) #10 {
  ret i32 -1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_fill_path(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i64 noundef %4) #0 {
  %6 = alloca %struct.gx_path_s, align 8
  %7 = alloca %struct.line_list_s, align 8
  %8 = alloca %struct.gs_fixed_rect_s, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 8
  %10 = load ptr, ptr %9, align 8, !tbaa !305
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %6) #65
  call void @llvm.lifetime.start.p0(i64 136, ptr nonnull %7) #65
  %11 = tail call i32 @gx_path_close_subpath(ptr noundef %0) #64
  %12 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 8
  %13 = load i32, ptr %12, align 8, !tbaa !525
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 21
  %17 = load float, ptr %16, align 8, !tbaa !526
  %18 = fpext float %17 to double
  %19 = call i32 @gx_path_flatten(ptr noundef nonnull %0, ptr noundef nonnull %6, double noundef %18) #64
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %109, label %21

21:                                               ; preds = %15, %5
  %22 = phi ptr [ %0, %5 ], [ %6, %15 ]
  %23 = getelementptr inbounds %struct.gx_path_s, ptr %22, i64 0, i32 7
  %24 = load i32, ptr %23, align 4, !tbaa !631
  %25 = getelementptr inbounds %struct.gx_path_s, ptr %22, i64 0, i32 6
  %26 = load i32, ptr %25, align 8, !tbaa !632
  %27 = add nsw i32 %26, %24
  %28 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 7
  %29 = load i32, ptr %28, align 4, !tbaa !631
  %30 = add nsw i32 %27, %29
  %31 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 6
  %32 = load i32, ptr %31, align 8, !tbaa !632
  %33 = add nsw i32 %30, %32
  %34 = getelementptr inbounds %struct.line_list_s, ptr %7, i64 0, i32 1
  store i32 %33, ptr %34, align 8, !tbaa !633
  %35 = call ptr @gs_malloc(i32 noundef %33, i32 noundef 88, ptr noundef nonnull @.str.851) #64
  store ptr %35, ptr %7, align 8, !tbaa !636
  %36 = icmp eq ptr %35, null
  br i1 %36, label %105, label %37

37:                                               ; preds = %21
  %38 = getelementptr inbounds %struct.line_list_s, ptr %7, i64 0, i32 3
  store ptr %35, ptr %38, align 8, !tbaa !637
  %39 = getelementptr inbounds %struct.line_list_s, ptr %7, i64 0, i32 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %39, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %8) #65
  %40 = call i32 @gx_path_bbox(ptr noundef nonnull %22, ptr noundef nonnull %8) #64
  %41 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %8, i64 0, i32 1
  %42 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %8, i64 0, i32 1, i32 1
  %43 = load i64, ptr %42, align 8, !tbaa !461
  %44 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 3
  %45 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 3, i32 1, i32 1
  %46 = load i64, ptr %45, align 8, !tbaa !443
  %47 = icmp sgt i64 %43, %46
  br i1 %47, label %65, label %48

48:                                               ; preds = %37
  %49 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 3, i32 1
  %50 = load i64, ptr %41, align 8, !tbaa !459
  %51 = load i64, ptr %49, align 8, !tbaa !442
  %52 = icmp sgt i64 %50, %51
  br i1 %52, label %65, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.timeval, ptr %8, i64 0, i32 1
  %55 = load i64, ptr %54, align 8, !tbaa !462
  %56 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 3, i32 0, i32 1
  %57 = load i64, ptr %56, align 8, !tbaa !441
  %58 = icmp slt i64 %55, %57
  br i1 %58, label %65, label %59

59:                                               ; preds = %53
  %60 = load i64, ptr %8, align 8, !tbaa !460
  %61 = load i64, ptr %44, align 8, !tbaa !440
  %62 = icmp slt i64 %60, %61
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.line_list_s, ptr %7, i64 0, i32 7
  store i32 1, ptr %64, align 8, !tbaa !638
  br label %99

65:                                               ; preds = %59, %53, %48, %37
  %66 = getelementptr inbounds %struct.line_list_s, ptr %7, i64 0, i32 7
  store i32 0, ptr %66, align 8, !tbaa !638
  %67 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !639
  %69 = load i64, ptr %8, align 8, !tbaa !460
  %70 = icmp sgt i64 %68, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %65
  store i64 %68, ptr %8, align 8, !tbaa !460
  br label %72

72:                                               ; preds = %71, %65
  %73 = phi i64 [ %68, %71 ], [ %69, %65 ]
  %74 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 1, i32 0, i32 1
  %75 = load i64, ptr %74, align 8, !tbaa !640
  %76 = getelementptr inbounds %struct.timeval, ptr %8, i64 0, i32 1
  %77 = load i64, ptr %76, align 8, !tbaa !462
  %78 = icmp sgt i64 %75, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %72
  store i64 %75, ptr %76, align 8, !tbaa !462
  br label %80

80:                                               ; preds = %79, %72
  %81 = phi i64 [ %75, %79 ], [ %77, %72 ]
  %82 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 1, i32 1
  %83 = load i64, ptr %82, align 8, !tbaa !641
  %84 = load i64, ptr %41, align 8, !tbaa !459
  %85 = icmp slt i64 %83, %84
  br i1 %85, label %86, label %87

86:                                               ; preds = %80
  store i64 %83, ptr %41, align 8, !tbaa !459
  br label %87

87:                                               ; preds = %86, %80
  %88 = phi i64 [ %83, %86 ], [ %84, %80 ]
  %89 = getelementptr inbounds %struct.gx_path_s, ptr %10, i64 0, i32 1, i32 1, i32 1
  %90 = load i64, ptr %89, align 8, !tbaa !642
  %91 = icmp slt i64 %90, %43
  br i1 %91, label %92, label %93

92:                                               ; preds = %87
  store i64 %90, ptr %42, align 8, !tbaa !461
  br label %93

93:                                               ; preds = %92, %87
  %94 = phi i64 [ %90, %92 ], [ %43, %87 ]
  %95 = icmp slt i64 %73, %88
  %96 = icmp slt i64 %81, %94
  %97 = and i1 %95, %96
  br i1 %97, label %98, label %102

98:                                               ; preds = %93
  call void @add_y_list(ptr noundef nonnull %10, i16 noundef signext 1, ptr noundef nonnull %7, ptr noundef nonnull %8) #62
  br label %99

99:                                               ; preds = %98, %63
  call void @add_y_list(ptr noundef nonnull %22, i16 noundef signext 0, ptr noundef nonnull %7, ptr noundef nonnull %8) #62
  call void @fill_loop(ptr noundef %1, i32 noundef %3, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %2, i64 noundef %4) #62
  %100 = load ptr, ptr %7, align 8, !tbaa !636
  %101 = load i32, ptr %34, align 8, !tbaa !633
  br label %102

102:                                              ; preds = %99, %93
  %103 = phi i32 [ %33, %93 ], [ %101, %99 ]
  %104 = phi ptr [ %35, %93 ], [ %100, %99 ]
  call void @gs_free(ptr noundef %104, i32 noundef %103, i32 noundef 88, ptr noundef nonnull @.str.851) #64
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %8) #65
  br label %105

105:                                              ; preds = %102, %21
  %106 = phi i32 [ 0, %102 ], [ -25, %21 ]
  %107 = icmp eq ptr %22, %0
  br i1 %107, label %109, label %108

108:                                              ; preds = %105
  call void @gx_path_release(ptr noundef nonnull %22) #64
  br label %109

109:                                              ; preds = %108, %105, %15
  %110 = phi i32 [ %19, %15 ], [ %106, %108 ], [ %106, %105 ]
  call void @llvm.lifetime.end.p0(i64 136, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #65
  ret i32 %110
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @add_y_list(ptr nocapture noundef readonly %0, i16 noundef signext %1, ptr nocapture noundef %2, ptr nocapture noundef readonly %3) #21 {
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !527
  %7 = getelementptr inbounds %struct.timeval, ptr %3, i64 0, i32 1
  %8 = load i64, ptr %7, align 8, !tbaa !462
  %9 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %3, i64 0, i32 1
  %10 = load i64, ptr %9, align 8, !tbaa !459
  %11 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %3, i64 0, i32 1, i32 1
  %12 = load i64, ptr %11, align 8, !tbaa !461
  %13 = getelementptr inbounds %struct.line_list_s, ptr %2, i64 0, i32 2
  store i16 %1, ptr %13, align 4, !tbaa !643
  %14 = icmp eq ptr %6, null
  br i1 %14, label %115, label %15

15:                                               ; preds = %108, %4
  %16 = phi ptr [ %113, %108 ], [ %6, %4 ]
  %17 = phi ptr [ %111, %108 ], [ undef, %4 ]
  %18 = phi ptr [ %110, %108 ], [ undef, %4 ]
  %19 = phi i32 [ %109, %108 ], [ undef, %4 ]
  %20 = phi ptr [ %16, %108 ], [ undef, %4 ]
  %21 = getelementptr inbounds %struct.segment_s, ptr %16, i64 0, i32 2
  %22 = load i32, ptr %21, align 8, !tbaa !533
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.subpath, ptr %16, i64 0, i32 4
  %26 = load ptr, ptr %25, align 8, !tbaa !644
  br label %108

27:                                               ; preds = %15
  %28 = getelementptr inbounds %struct.segment_s, ptr %16, i64 0, i32 3
  %29 = getelementptr inbounds %struct.segment_s, ptr %16, i64 0, i32 3, i32 1
  %30 = load i64, ptr %29, align 8, !tbaa !535
  %31 = getelementptr inbounds %struct.segment_s, ptr %20, i64 0, i32 3
  %32 = getelementptr inbounds %struct.segment_s, ptr %20, i64 0, i32 3, i32 1
  %33 = load i64, ptr %32, align 8, !tbaa !535
  %34 = load i64, ptr %31, align 8, !tbaa !534
  %35 = icmp sgt i64 %34, %10
  br i1 %35, label %36, label %39

36:                                               ; preds = %27
  %37 = load i64, ptr %28, align 8, !tbaa !534
  %38 = icmp sgt i64 %37, %10
  br i1 %38, label %54, label %39

39:                                               ; preds = %36, %27
  %40 = sub nsw i64 %30, %33
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = icmp sgt i64 %30, %8
  %44 = icmp slt i64 %33, %12
  %45 = select i1 %43, i1 %44, i1 false
  %46 = zext i1 %45 to i32
  br label %54

47:                                               ; preds = %39
  %48 = icmp slt i64 %40, 0
  br i1 %48, label %49, label %54

49:                                               ; preds = %47
  %50 = icmp sgt i64 %33, %8
  %51 = icmp slt i64 %30, %12
  %52 = select i1 %50, i1 %51, i1 false
  %53 = sext i1 %52 to i32
  br label %54

54:                                               ; preds = %49, %47, %42, %36
  %55 = phi i32 [ 0, %36 ], [ %46, %42 ], [ %53, %49 ], [ 0, %47 ]
  %56 = icmp sgt i32 %55, %19
  br i1 %56, label %57, label %64

57:                                               ; preds = %54
  %58 = icmp eq i32 %19, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %57
  %60 = load ptr, ptr %20, align 8, !tbaa !646
  tail call void @add_y_line(ptr noundef %60, ptr noundef nonnull %20, i32 noundef -1, ptr noundef %2) #62
  br label %61

61:                                               ; preds = %59, %57
  %62 = icmp eq i32 %55, 0
  br i1 %62, label %64, label %63

63:                                               ; preds = %61
  tail call void @add_y_line(ptr noundef nonnull %20, ptr noundef nonnull %16, i32 noundef 1, ptr noundef %2) #62
  br label %64

64:                                               ; preds = %63, %61, %54
  %65 = icmp eq ptr %16, %18
  br i1 %65, label %66, label %108

66:                                               ; preds = %64
  %67 = load i32, ptr %21, align 8, !tbaa !533
  %68 = icmp eq i32 %67, 2
  br i1 %68, label %105, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %struct.subpath, ptr %17, i64 0, i32 3, i32 1
  %71 = load i64, ptr %70, align 8, !tbaa !647
  %72 = load i64, ptr %28, align 8, !tbaa !534
  %73 = icmp sgt i64 %72, %10
  br i1 %73, label %74, label %78

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.subpath, ptr %17, i64 0, i32 3
  %76 = load i64, ptr %75, align 8, !tbaa !648
  %77 = icmp sgt i64 %76, %10
  br i1 %77, label %93, label %78

78:                                               ; preds = %74, %69
  %79 = sub nsw i64 %71, %30
  %80 = icmp sgt i64 %79, 0
  br i1 %80, label %81, label %86

81:                                               ; preds = %78
  %82 = icmp sgt i64 %71, %8
  %83 = icmp slt i64 %30, %12
  %84 = select i1 %82, i1 %83, i1 false
  %85 = zext i1 %84 to i32
  br label %93

86:                                               ; preds = %78
  %87 = icmp slt i64 %79, 0
  br i1 %87, label %88, label %93

88:                                               ; preds = %86
  %89 = icmp sgt i64 %30, %8
  %90 = icmp slt i64 %71, %12
  %91 = select i1 %89, i1 %90, i1 false
  %92 = sext i1 %91 to i32
  br label %93

93:                                               ; preds = %88, %86, %81, %74
  %94 = phi i32 [ 0, %74 ], [ %85, %81 ], [ %92, %88 ], [ 0, %86 ]
  %95 = icmp sgt i32 %94, %55
  %96 = icmp ne i32 %55, 0
  %97 = and i1 %96, %95
  br i1 %97, label %98, label %99

98:                                               ; preds = %93
  tail call void @add_y_line(ptr noundef nonnull %20, ptr noundef nonnull %16, i32 noundef %55, ptr noundef %2) #62
  br label %99

99:                                               ; preds = %98, %93
  %100 = icmp ne i32 %94, 0
  %101 = and i1 %95, %100
  %102 = icmp slt i32 %94, 0
  %103 = or i1 %102, %101
  br i1 %103, label %104, label %108

104:                                              ; preds = %99
  tail call void @add_y_line(ptr noundef nonnull %16, ptr noundef nonnull %17, i32 noundef %94, ptr noundef %2) #62
  br label %108

105:                                              ; preds = %66
  %106 = icmp slt i32 %55, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %105
  tail call void @add_y_line(ptr noundef nonnull %20, ptr noundef nonnull %16, i32 noundef -1, ptr noundef %2) #62
  br label %108

108:                                              ; preds = %107, %105, %104, %99, %64, %24
  %109 = phi i32 [ 0, %24 ], [ %55, %104 ], [ %55, %99 ], [ -1, %107 ], [ %55, %105 ], [ %55, %64 ]
  %110 = phi ptr [ %26, %24 ], [ %16, %104 ], [ %16, %99 ], [ %16, %107 ], [ %16, %105 ], [ %18, %64 ]
  %111 = phi ptr [ %16, %24 ], [ %17, %104 ], [ %17, %99 ], [ %17, %107 ], [ %17, %105 ], [ %17, %64 ]
  %112 = getelementptr inbounds %struct.segment_s, ptr %16, i64 0, i32 1
  %113 = load ptr, ptr %112, align 8, !tbaa !531
  %114 = icmp eq ptr %113, null
  br i1 %114, label %115, label %15, !llvm.loop !649

115:                                              ; preds = %108, %4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @fill_loop(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr noundef %4, i64 noundef %5) #0 {
  %7 = alloca [2 x i32], align 4
  %8 = getelementptr inbounds %struct.line_list_s, ptr %2, i64 0, i32 4
  %9 = load ptr, ptr %8, align 8, !tbaa !650
  %10 = icmp eq ptr %9, null
  br i1 %10, label %336, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %3, i64 0, i32 1, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa.struct !458
  %14 = getelementptr inbounds %struct.timeval, ptr %9, i64 0, i32 1
  %15 = load i64, ptr %14, align 8, !tbaa !651
  %16 = getelementptr inbounds %struct.line_list_s, ptr %2, i64 0, i32 6, i32 10
  store ptr null, ptr %16, align 8, !tbaa !652
  %17 = getelementptr inbounds %struct.line_list_s, ptr %2, i64 0, i32 6, i32 8
  store i16 -4, ptr %17, align 2, !tbaa !653
  %18 = icmp slt i64 %15, %13
  br i1 %18, label %19, label %336

19:                                               ; preds = %11
  %20 = getelementptr inbounds %struct.line_list_s, ptr %2, i64 0, i32 7
  %21 = getelementptr inbounds [2 x i32], ptr %7, i64 0, i64 1
  %22 = getelementptr inbounds %struct.gs_state_s, ptr %4, i64 0, i32 9
  %23 = mul i64 %5, -2
  br label %24

24:                                               ; preds = %329, %19
  %25 = phi ptr [ %9, %19 ], [ %330, %329 ]
  %26 = phi i64 [ %15, %19 ], [ %334, %329 ]
  %27 = phi i64 [ undef, %19 ], [ %333, %329 ]
  %28 = phi i64 [ undef, %19 ], [ %332, %329 ]
  %29 = phi ptr [ undef, %19 ], [ %331, %329 ]
  %30 = icmp eq ptr %25, null
  br i1 %30, label %40, label %31

31:                                               ; preds = %36, %24
  %32 = phi ptr [ %38, %36 ], [ %25, %24 ]
  %33 = getelementptr inbounds %struct.timeval, ptr %32, i64 0, i32 1
  %34 = load i64, ptr %33, align 8, !tbaa !651
  %35 = icmp eq i64 %34, %26
  br i1 %35, label %36, label %43

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.active_line_s, ptr %32, i64 0, i32 10
  %38 = load ptr, ptr %37, align 8, !tbaa !654
  tail call void @insert_x_new(ptr noundef nonnull %32, ptr noundef %2) #62
  %39 = icmp eq ptr %38, null
  br i1 %39, label %40, label %31, !llvm.loop !655

40:                                               ; preds = %36, %24
  %41 = load ptr, ptr %16, align 8, !tbaa !654
  %42 = icmp eq ptr %41, null
  br i1 %42, label %336, label %46

43:                                               ; preds = %31
  %.lcssa1 = phi ptr [ %32, %31 ]
  %.lcssa = phi i64 [ %34, %31 ]
  %44 = load ptr, ptr %16, align 8, !tbaa !654
  %45 = icmp eq ptr %44, null
  br i1 %45, label %329, label %46

46:                                               ; preds = %43, %40
  %47 = phi ptr [ null, %40 ], [ %.lcssa1, %43 ]
  %48 = phi ptr [ %41, %40 ], [ %44, %43 ]
  %49 = phi i64 [ 2147483647, %40 ], [ %.lcssa, %43 ]
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi ptr [ %57, %50 ], [ %48, %46 ]
  %52 = phi i64 [ %55, %50 ], [ %49, %46 ]
  %53 = getelementptr inbounds %struct.active_line_s, ptr %51, i64 0, i32 1, i32 1
  %54 = load i64, ptr %53, align 8, !tbaa !656
  %55 = tail call i64 @llvm.smin.i64(i64 %54, i64 %52)
  %56 = getelementptr inbounds %struct.active_line_s, ptr %51, i64 0, i32 10
  %57 = load ptr, ptr %56, align 8, !tbaa !654
  %58 = icmp eq ptr %57, null
  br i1 %58, label %61, label %50, !llvm.loop !657

59:                                               ; preds = %197
  %.lcssa8 = phi ptr [ %199, %197 ]
  %.lcssa7 = phi i32 [ %200, %197 ]
  %.lcssa6 = phi i64 [ %202, %197 ]
  %.lcssa5 = phi ptr [ %66, %197 ]
  %60 = icmp eq ptr %48, %.lcssa8
  br i1 %60, label %250, label %207

61:                                               ; preds = %197, %50
  %62 = phi i64 [ %202, %197 ], [ %55, %50 ]
  %63 = phi i32 [ %200, %197 ], [ 0, %50 ]
  %64 = phi i64 [ %201, %197 ], [ -2147483648, %50 ]
  %65 = phi ptr [ %199, %197 ], [ %48, %50 ]
  %66 = phi ptr [ %205, %197 ], [ %48, %50 ]
  %67 = phi ptr [ %66, %197 ], [ %29, %50 ]
  %68 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 1
  %69 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 1, i32 1
  %70 = load i64, ptr %69, align 8, !tbaa !656
  %71 = icmp eq i64 %62, %70
  br i1 %71, label %97, label %72

72:                                               ; preds = %61
  %73 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 2
  %74 = load i64, ptr %73, align 8, !tbaa !658
  %75 = icmp sgt i64 %62, %74
  %76 = getelementptr inbounds %struct.timeval, ptr %66, i64 0, i32 1
  %77 = load i64, ptr %76, align 8, !tbaa !651
  %78 = sub nsw i64 %62, %77
  br i1 %75, label %86, label %79

79:                                               ; preds = %72
  %80 = load i64, ptr %68, align 8, !tbaa !659
  %81 = load i64, ptr %66, align 8, !tbaa !660
  %82 = sub nsw i64 %80, %81
  %83 = mul nsw i64 %82, %78
  %84 = sub nsw i64 %70, %77
  %85 = sdiv i64 %83, %84
  br label %101

86:                                               ; preds = %72
  %87 = sitofp i64 %78 to double
  %88 = load i64, ptr %68, align 8, !tbaa !659
  %89 = load i64, ptr %66, align 8, !tbaa !660
  %90 = sub nsw i64 %88, %89
  %91 = sitofp i64 %90 to double
  %92 = fmul double %87, %91
  %93 = sub nsw i64 %70, %77
  %94 = sitofp i64 %93 to double
  %95 = fdiv double %92, %94
  %96 = fptosi double %95 to i64
  br label %101

97:                                               ; preds = %61
  %98 = load i64, ptr %68, align 8, !tbaa !659
  %99 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 4
  store i64 %98, ptr %99, align 8, !tbaa !661
  %100 = icmp slt i64 %98, %64
  br i1 %100, label %108, label %195

101:                                              ; preds = %86, %79
  %102 = phi i64 [ %80, %79 ], [ %88, %86 ]
  %103 = phi i64 [ %81, %79 ], [ %89, %86 ]
  %104 = phi i64 [ %85, %79 ], [ %96, %86 ]
  %105 = add nsw i64 %103, %104
  %106 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 4
  store i64 %105, ptr %106, align 8, !tbaa !661
  %107 = icmp slt i64 %105, %64
  br i1 %107, label %108, label %197

108:                                              ; preds = %101, %97
  %109 = phi i64 [ %102, %101 ], [ %98, %97 ]
  %110 = phi ptr [ %106, %101 ], [ %99, %97 ]
  %111 = tail call i64 @find_cross_y(ptr noundef %67, ptr noundef nonnull %66) #62
  %112 = getelementptr inbounds %struct.active_line_s, ptr %67, i64 0, i32 1
  %113 = getelementptr inbounds %struct.active_line_s, ptr %67, i64 0, i32 1, i32 1
  %114 = load i64, ptr %113, align 8, !tbaa !656
  %115 = getelementptr inbounds %struct.active_line_s, ptr %67, i64 0, i32 2
  %116 = getelementptr inbounds %struct.timeval, ptr %67, i64 0, i32 1
  %117 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 2
  %118 = getelementptr inbounds %struct.timeval, ptr %66, i64 0, i32 1
  br label %119

119:                                              ; preds = %182, %108
  %120 = phi i64 [ %109, %108 ], [ %183, %182 ]
  %121 = phi i64 [ %109, %108 ], [ %184, %182 ]
  %122 = phi i64 [ %111, %108 ], [ %187, %182 ]
  %123 = icmp eq i64 %122, %114
  br i1 %123, label %124, label %126

124:                                              ; preds = %119
  %125 = load i64, ptr %112, align 8, !tbaa !659
  br label %153

126:                                              ; preds = %119
  %127 = load i64, ptr %115, align 8, !tbaa !658
  %128 = icmp sgt i64 %122, %127
  %129 = load i64, ptr %116, align 8, !tbaa !651
  %130 = sub nsw i64 %122, %129
  br i1 %128, label %138, label %131

131:                                              ; preds = %126
  %132 = load i64, ptr %112, align 8, !tbaa !659
  %133 = load i64, ptr %67, align 8, !tbaa !660
  %134 = sub nsw i64 %132, %133
  %135 = mul nsw i64 %134, %130
  %136 = sub nsw i64 %114, %129
  %137 = sdiv i64 %135, %136
  br label %149

138:                                              ; preds = %126
  %139 = sitofp i64 %130 to double
  %140 = load i64, ptr %112, align 8, !tbaa !659
  %141 = load i64, ptr %67, align 8, !tbaa !660
  %142 = sub nsw i64 %140, %141
  %143 = sitofp i64 %142 to double
  %144 = fmul double %139, %143
  %145 = sub nsw i64 %114, %129
  %146 = sitofp i64 %145 to double
  %147 = fdiv double %144, %146
  %148 = fptosi double %147 to i64
  br label %149

149:                                              ; preds = %138, %131
  %150 = phi i64 [ %133, %131 ], [ %141, %138 ]
  %151 = phi i64 [ %137, %131 ], [ %148, %138 ]
  %152 = add nsw i64 %150, %151
  br label %153

153:                                              ; preds = %149, %124
  %154 = phi i64 [ %125, %124 ], [ %152, %149 ]
  %155 = icmp eq i64 %122, %70
  br i1 %155, label %182, label %156

156:                                              ; preds = %153
  %157 = load i64, ptr %117, align 8, !tbaa !658
  %158 = icmp sgt i64 %122, %157
  %159 = load i64, ptr %118, align 8, !tbaa !651
  %160 = sub nsw i64 %122, %159
  br i1 %158, label %167, label %161

161:                                              ; preds = %156
  %162 = load i64, ptr %66, align 8, !tbaa !660
  %163 = sub nsw i64 %121, %162
  %164 = mul nsw i64 %163, %160
  %165 = sub nsw i64 %70, %159
  %166 = sdiv i64 %164, %165
  br label %177

167:                                              ; preds = %156
  %168 = sitofp i64 %160 to double
  %169 = load i64, ptr %66, align 8, !tbaa !660
  %170 = sub nsw i64 %120, %169
  %171 = sitofp i64 %170 to double
  %172 = fmul double %168, %171
  %173 = sub nsw i64 %70, %159
  %174 = sitofp i64 %173 to double
  %175 = fdiv double %172, %174
  %176 = fptosi double %175 to i64
  br label %177

177:                                              ; preds = %167, %161
  %178 = phi i64 [ %162, %161 ], [ %169, %167 ]
  %179 = phi i64 [ %121, %161 ], [ %120, %167 ]
  %180 = phi i64 [ %166, %161 ], [ %176, %167 ]
  %181 = add nsw i64 %178, %180
  br label %182

182:                                              ; preds = %177, %153
  %183 = phi i64 [ %120, %177 ], [ %109, %153 ]
  %184 = phi i64 [ %179, %177 ], [ %109, %153 ]
  %185 = phi i64 [ %181, %177 ], [ %109, %153 ]
  %186 = icmp sgt i64 %185, %154
  %187 = add nsw i64 %122, 1
  br i1 %186, label %119, label %188

188:                                              ; preds = %182
  %.lcssa4 = phi i64 [ %185, %182 ]
  %.lcssa3 = phi i64 [ %154, %182 ]
  %.lcssa2 = phi i64 [ %122, %182 ]
  %189 = getelementptr inbounds %struct.active_line_s, ptr %67, i64 0, i32 4
  store i64 %.lcssa3, ptr %189, align 8, !tbaa !661
  store i64 %.lcssa4, ptr %110, align 8, !tbaa !661
  %190 = add nsw i32 %63, 4
  %191 = trunc i32 %63 to i16
  %192 = add i16 %191, 7
  %193 = getelementptr inbounds %struct.active_line_s, ptr %67, i64 0, i32 8
  store i16 %192, ptr %193, align 2, !tbaa !662
  %194 = add i16 %191, 5
  br label %197

195:                                              ; preds = %97
  %196 = trunc i32 %63 to i16
  br label %197

197:                                              ; preds = %195, %188, %101
  %198 = phi i16 [ %196, %195 ], [ %194, %188 ], [ -2, %101 ]
  %199 = phi ptr [ %65, %195 ], [ %67, %188 ], [ %65, %101 ]
  %200 = phi i32 [ %63, %195 ], [ %190, %188 ], [ %63, %101 ]
  %201 = phi i64 [ %98, %195 ], [ %.lcssa4, %188 ], [ %105, %101 ]
  %202 = phi i64 [ %62, %195 ], [ %.lcssa2, %188 ], [ %62, %101 ]
  %203 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 8
  store i16 %198, ptr %203, align 2, !tbaa !662
  %204 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 10
  %205 = load ptr, ptr %204, align 8, !tbaa !654
  %206 = icmp eq ptr %205, null
  br i1 %206, label %59, label %61, !llvm.loop !663

207:                                              ; preds = %244, %59
  %208 = phi ptr [ %248, %244 ], [ %48, %59 ]
  %209 = getelementptr inbounds %struct.active_line_s, ptr %208, i64 0, i32 1
  %210 = getelementptr inbounds %struct.active_line_s, ptr %208, i64 0, i32 1, i32 1
  %211 = load i64, ptr %210, align 8, !tbaa !656
  %212 = icmp eq i64 %.lcssa6, %211
  br i1 %212, label %213, label %215

213:                                              ; preds = %207
  %214 = load i64, ptr %209, align 8, !tbaa !659
  br label %244

215:                                              ; preds = %207
  %216 = getelementptr inbounds %struct.active_line_s, ptr %208, i64 0, i32 2
  %217 = load i64, ptr %216, align 8, !tbaa !658
  %218 = icmp sgt i64 %.lcssa6, %217
  %219 = getelementptr inbounds %struct.timeval, ptr %208, i64 0, i32 1
  %220 = load i64, ptr %219, align 8, !tbaa !651
  %221 = sub nsw i64 %.lcssa6, %220
  br i1 %218, label %229, label %222

222:                                              ; preds = %215
  %223 = load i64, ptr %209, align 8, !tbaa !659
  %224 = load i64, ptr %208, align 8, !tbaa !660
  %225 = sub nsw i64 %223, %224
  %226 = mul nsw i64 %225, %221
  %227 = sub nsw i64 %211, %220
  %228 = sdiv i64 %226, %227
  br label %240

229:                                              ; preds = %215
  %230 = sitofp i64 %221 to double
  %231 = load i64, ptr %209, align 8, !tbaa !659
  %232 = load i64, ptr %208, align 8, !tbaa !660
  %233 = sub nsw i64 %231, %232
  %234 = sitofp i64 %233 to double
  %235 = fmul double %230, %234
  %236 = sub nsw i64 %211, %220
  %237 = sitofp i64 %236 to double
  %238 = fdiv double %235, %237
  %239 = fptosi double %238 to i64
  br label %240

240:                                              ; preds = %229, %222
  %241 = phi i64 [ %224, %222 ], [ %232, %229 ]
  %242 = phi i64 [ %228, %222 ], [ %239, %229 ]
  %243 = add nsw i64 %241, %242
  br label %244

244:                                              ; preds = %240, %213
  %245 = phi i64 [ %214, %213 ], [ %243, %240 ]
  %246 = getelementptr inbounds %struct.active_line_s, ptr %208, i64 0, i32 4
  store i64 %245, ptr %246, align 8, !tbaa !661
  %247 = getelementptr inbounds %struct.active_line_s, ptr %208, i64 0, i32 10
  %248 = load ptr, ptr %247, align 8, !tbaa !654
  %249 = icmp eq ptr %248, %.lcssa8
  br i1 %249, label %250, label %207, !llvm.loop !664

250:                                              ; preds = %244, %59
  %251 = sub nsw i64 %.lcssa6, %26
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #65
  store i32 0, ptr %7, align 4, !tbaa !11
  %252 = load i32, ptr %20, align 8, !tbaa !638
  store i32 %252, ptr %21, align 4, !tbaa !11
  br label %253

253:                                              ; preds = %326, %250
  %254 = phi i32 [ %315, %326 ], [ 0, %250 ]
  %255 = phi i64 [ %317, %326 ], [ %27, %250 ]
  %256 = phi i64 [ %316, %326 ], [ %28, %250 ]
  %257 = phi ptr [ %263, %326 ], [ %48, %250 ]
  %258 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 3
  %259 = load i64, ptr %258, align 8, !tbaa !665
  %260 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 4
  %261 = load i64, ptr %260, align 8, !tbaa !661
  %262 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 10
  %263 = load ptr, ptr %262, align 8, !tbaa !654
  %264 = and i32 %254, %1
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %295, label %266

266:                                              ; preds = %253
  %267 = load i32, ptr %21, align 4, !tbaa !11
  %268 = load i32, ptr %22, align 8, !tbaa !541
  %269 = and i32 %268, %267
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %295, label %271

271:                                              ; preds = %266
  %272 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 6
  %273 = load i32, ptr %272, align 8, !tbaa !666
  %274 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 7
  %275 = load i16, ptr %274, align 4, !tbaa !667
  %276 = sext i16 %275 to i64
  %277 = getelementptr inbounds [2 x i32], ptr %7, i64 0, i64 %276
  %278 = load i32, ptr %277, align 4, !tbaa !11
  %279 = add nsw i32 %278, %273
  store i32 %279, ptr %277, align 4, !tbaa !11
  %280 = load i32, ptr %7, align 4, !tbaa !11
  %281 = and i32 %280, %1
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %287, label %283

283:                                              ; preds = %271
  %284 = load i32, ptr %21, align 4, !tbaa !11
  %285 = and i32 %284, %268
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %314

287:                                              ; preds = %283, %271
  %288 = add nsw i64 %256, %5
  %289 = sub i64 %23, %256
  %290 = add i64 %289, %259
  %291 = add nsw i64 %255, %5
  %292 = sub i64 %23, %255
  %293 = add i64 %292, %261
  %294 = tail call i32 (i64, i64, i64, i64, i64, i64, i32, ptr, ptr, ...) @gz_fill_trapezoid_fixed(i64 noundef %288, i64 noundef %290, i64 noundef %26, i64 noundef %291, i64 noundef %293, i64 noundef %251, i32 noundef 0, ptr noundef %0, ptr noundef nonnull %4) #64
  br label %314

295:                                              ; preds = %266, %253
  %296 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 6
  %297 = load i32, ptr %296, align 8, !tbaa !666
  %298 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 7
  %299 = load i16, ptr %298, align 4, !tbaa !667
  %300 = sext i16 %299 to i64
  %301 = getelementptr inbounds [2 x i32], ptr %7, i64 0, i64 %300
  %302 = load i32, ptr %301, align 4, !tbaa !11
  %303 = add nsw i32 %302, %297
  store i32 %303, ptr %301, align 4, !tbaa !11
  %304 = load i32, ptr %7, align 4, !tbaa !11
  %305 = and i32 %304, %1
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %314, label %307

307:                                              ; preds = %295
  %308 = load i32, ptr %21, align 4, !tbaa !11
  %309 = load i32, ptr %22, align 8, !tbaa !541
  %310 = and i32 %309, %308
  %311 = icmp eq i32 %310, 0
  %312 = select i1 %311, i64 %256, i64 %259
  %313 = select i1 %311, i64 %255, i64 %261
  br label %314

314:                                              ; preds = %307, %295, %287, %283
  %315 = phi i32 [ %280, %283 ], [ %280, %287 ], [ %304, %295 ], [ %304, %307 ]
  %316 = phi i64 [ %256, %283 ], [ %256, %287 ], [ %256, %295 ], [ %312, %307 ]
  %317 = phi i64 [ %255, %283 ], [ %255, %287 ], [ %255, %295 ], [ %313, %307 ]
  store i64 %261, ptr %258, align 8, !tbaa !665
  %318 = getelementptr inbounds %struct.active_line_s, ptr %257, i64 0, i32 8
  %319 = load i16, ptr %318, align 2, !tbaa !662
  %320 = sext i16 %319 to i32
  %321 = icmp sgt i32 %.lcssa7, %320
  br i1 %321, label %326, label %322

322:                                              ; preds = %314
  %323 = and i32 %320, 3
  switch i32 %323, label %326 [
    i32 1, label %324
    i32 0, label %325
  ]

324:                                              ; preds = %322
  tail call void @swap_group(ptr noundef nonnull %257) #62
  br label %326

325:                                              ; preds = %322
  tail call void @ended_line(ptr noundef nonnull %257) #62
  br label %326

326:                                              ; preds = %325, %324, %322, %314
  %327 = icmp eq ptr %263, null
  br i1 %327, label %328, label %253, !llvm.loop !668

328:                                              ; preds = %326
  %.lcssa10 = phi i64 [ %316, %326 ]
  %.lcssa9 = phi i64 [ %317, %326 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #65
  br label %329

329:                                              ; preds = %328, %43
  %330 = phi ptr [ %47, %328 ], [ %.lcssa1, %43 ]
  %331 = phi ptr [ %.lcssa5, %328 ], [ %29, %43 ]
  %332 = phi i64 [ %.lcssa10, %328 ], [ %28, %43 ]
  %333 = phi i64 [ %.lcssa9, %328 ], [ %27, %43 ]
  %334 = phi i64 [ %.lcssa6, %328 ], [ %.lcssa, %43 ]
  %335 = icmp slt i64 %334, %13
  br i1 %335, label %24, label %336

336:                                              ; preds = %329, %40, %11, %6
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @insert_x_new(ptr noundef %0, ptr noundef %1) #29 {
  %3 = getelementptr inbounds %struct.line_list_s, ptr %1, i64 0, i32 6
  %4 = load i64, ptr %0, align 8, !tbaa !660
  %5 = getelementptr inbounds %struct.line_list_s, ptr %1, i64 0, i32 6, i32 10
  %6 = load ptr, ptr %5, align 8, !tbaa !654
  %7 = icmp eq ptr %6, null
  br i1 %7, label %33, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 1
  br label %10

10:                                               ; preds = %26, %8
  %11 = phi ptr [ %6, %8 ], [ %28, %26 ]
  %12 = phi ptr [ %3, %8 ], [ %11, %26 ]
  %13 = getelementptr inbounds %struct.active_line_s, ptr %11, i64 0, i32 3
  %14 = load i64, ptr %13, align 8, !tbaa !665
  %15 = icmp slt i64 %14, %4
  br i1 %15, label %26, label %16

16:                                               ; preds = %10
  %17 = icmp eq i64 %14, %4
  br i1 %17, label %18, label %30

18:                                               ; preds = %16
  %19 = load i64, ptr %11, align 8, !tbaa !660
  %20 = icmp sgt i64 %19, %4
  br i1 %20, label %26, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.active_line_s, ptr %11, i64 0, i32 1
  %23 = load i64, ptr %22, align 8, !tbaa !659
  %24 = load i64, ptr %9, align 8, !tbaa !659
  %25 = icmp slt i64 %23, %24
  br i1 %25, label %26, label %30

26:                                               ; preds = %21, %18, %10
  %27 = getelementptr inbounds %struct.active_line_s, ptr %11, i64 0, i32 10
  %28 = load ptr, ptr %27, align 8, !tbaa !654
  %29 = icmp eq ptr %28, null
  br i1 %29, label %33, label %10, !llvm.loop !669

30:                                               ; preds = %21, %16
  %.lcssa1 = phi ptr [ %11, %21 ], [ %11, %16 ]
  %.lcssa = phi ptr [ %12, %21 ], [ %12, %16 ]
  %31 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 10
  store ptr %.lcssa1, ptr %31, align 8, !tbaa !654
  %32 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 9
  store ptr %.lcssa, ptr %32, align 8, !tbaa !670
  br label %36

33:                                               ; preds = %26, %2
  %34 = phi ptr [ %3, %2 ], [ %11, %26 ]
  %35 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 10
  store ptr null, ptr %35, align 8, !tbaa !654
  br label %36

36:                                               ; preds = %33, %30
  %37 = phi ptr [ %0, %33 ], [ %.lcssa1, %30 ]
  %38 = phi ptr [ %34, %33 ], [ %0, %30 ]
  %39 = phi ptr [ %34, %33 ], [ %.lcssa, %30 ]
  %40 = getelementptr inbounds %struct.active_line_s, ptr %37, i64 0, i32 9
  store ptr %38, ptr %40, align 8, !tbaa !670
  %41 = getelementptr inbounds %struct.active_line_s, ptr %39, i64 0, i32 10
  store ptr %0, ptr %41, align 8, !tbaa !654
  %42 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 3
  store i64 %4, ptr %42, align 8, !tbaa !665
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i64 @find_cross_y(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #58 {
  %3 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 1, i32 1
  %5 = load i64, ptr %4, align 8, !tbaa !656
  %6 = getelementptr inbounds %struct.timeval, ptr %0, i64 0, i32 1
  %7 = load i64, ptr %6, align 8, !tbaa !651
  %8 = sub nsw i64 %5, %7
  %9 = sitofp i64 %8 to double
  %10 = getelementptr inbounds %struct.active_line_s, ptr %1, i64 0, i32 1
  %11 = getelementptr inbounds %struct.active_line_s, ptr %1, i64 0, i32 1, i32 1
  %12 = load i64, ptr %11, align 8, !tbaa !656
  %13 = getelementptr inbounds %struct.timeval, ptr %1, i64 0, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !651
  %15 = sub nsw i64 %12, %14
  %16 = sitofp i64 %15 to double
  %17 = load i64, ptr %0, align 8, !tbaa !660
  %18 = sitofp i64 %17 to double
  %19 = sitofp i64 %5 to double
  %20 = sitofp i64 %7 to double
  %21 = load i64, ptr %3, align 8, !tbaa !659
  %22 = sitofp i64 %21 to double
  %23 = fneg double %20
  %24 = fmul double %23, %22
  %25 = tail call double @llvm.fmuladd.f64(double %18, double %19, double %24)
  %26 = load i64, ptr %1, align 8, !tbaa !660
  %27 = sitofp i64 %26 to double
  %28 = sitofp i64 %12 to double
  %29 = sitofp i64 %14 to double
  %30 = load i64, ptr %10, align 8, !tbaa !659
  %31 = sitofp i64 %30 to double
  %32 = fneg double %29
  %33 = fmul double %32, %31
  %34 = tail call double @llvm.fmuladd.f64(double %27, double %28, double %33)
  %35 = fneg double %34
  %36 = fmul double %9, %35
  %37 = tail call double @llvm.fmuladd.f64(double %25, double %16, double %36)
  %38 = sub nsw i64 %30, %26
  %39 = sitofp i64 %38 to double
  %40 = sub nsw i64 %21, %17
  %41 = sitofp i64 %40 to double
  %42 = fneg double %41
  %43 = fmul double %16, %42
  %44 = tail call double @llvm.fmuladd.f64(double %39, double %9, double %43)
  %45 = fdiv double %37, %44
  %46 = fptosi double %45 to i64
  ret i64 %46
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @swap_group(ptr noundef %0) #29 {
  %2 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 10
  %3 = load ptr, ptr %2, align 8, !tbaa !654
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi ptr [ %0, %1 ], [ %7, %4 ]
  %6 = getelementptr inbounds %struct.active_line_s, ptr %5, i64 0, i32 9
  %7 = load ptr, ptr %6, align 8, !tbaa !670
  %8 = getelementptr inbounds %struct.active_line_s, ptr %7, i64 0, i32 8
  %9 = load i16, ptr %8, align 2, !tbaa !662
  %10 = and i16 %9, 3
  %11 = icmp eq i16 %10, 3
  br i1 %11, label %4, label %12, !llvm.loop !671

12:                                               ; preds = %4
  %.lcssa1 = phi ptr [ %5, %4 ]
  %.lcssa = phi ptr [ %7, %4 ]
  %13 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa1, i64 0, i32 9
  %14 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa, i64 0, i32 10
  store ptr %0, ptr %14, align 8, !tbaa !654
  %15 = icmp eq ptr %3, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.active_line_s, ptr %3, i64 0, i32 9
  store ptr %.lcssa1, ptr %17, align 8, !tbaa !670
  br label %18

18:                                               ; preds = %16, %12
  store ptr %3, ptr %13, align 8, !tbaa !670
  store ptr %.lcssa, ptr %2, align 8, !tbaa !654
  br label %19

19:                                               ; preds = %19, %18
  %20 = phi ptr [ %.lcssa1, %18 ], [ %22, %19 ]
  %21 = getelementptr inbounds %struct.active_line_s, ptr %20, i64 0, i32 10
  %22 = load ptr, ptr %21, align 8, !tbaa !654
  %23 = getelementptr inbounds %struct.active_line_s, ptr %20, i64 0, i32 9
  %24 = load ptr, ptr %23, align 8, !tbaa !670
  store ptr %24, ptr %21, align 8, !tbaa !654
  store ptr %22, ptr %23, align 8, !tbaa !670
  %25 = icmp eq ptr %22, %.lcssa
  br i1 %25, label %26, label %19, !llvm.loop !672

26:                                               ; preds = %19
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @ended_line(ptr nocapture noundef %0) #30 {
  %2 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 5
  %3 = load ptr, ptr %2, align 8, !tbaa !673
  %4 = getelementptr inbounds %struct.segment_s, ptr %3, i64 0, i32 3, i32 1
  %5 = load i64, ptr %4, align 8, !tbaa !535
  %6 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 6
  %7 = load i32, ptr %6, align 8, !tbaa !666
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %18

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.segment_s, ptr %3, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !531
  %12 = icmp eq ptr %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.segment_s, ptr %11, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !533
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %13, %9
  br label %24

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.segment_s, ptr %3, i64 0, i32 2
  %20 = load i32, ptr %19, align 8, !tbaa !533
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = load ptr, ptr %3, align 8, !tbaa !646
  br label %24

24:                                               ; preds = %22, %18, %17, %13
  %25 = phi ptr [ %3, %17 ], [ %11, %13 ], [ %23, %22 ], [ %3, %18 ]
  %26 = getelementptr inbounds %struct.segment_s, ptr %25, i64 0, i32 3, i32 1
  %27 = load i64, ptr %26, align 8, !tbaa !535
  %28 = icmp sgt i64 %27, %5
  br i1 %28, label %38, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 10
  %31 = load ptr, ptr %30, align 8, !tbaa !654
  %32 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 9
  %33 = load ptr, ptr %32, align 8, !tbaa !670
  %34 = getelementptr inbounds %struct.active_line_s, ptr %33, i64 0, i32 10
  store ptr %31, ptr %34, align 8, !tbaa !654
  %35 = icmp eq ptr %31, null
  br i1 %35, label %51, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.active_line_s, ptr %31, i64 0, i32 9
  store ptr %33, ptr %37, align 8, !tbaa !670
  br label %51

38:                                               ; preds = %24
  %39 = getelementptr inbounds %struct.segment_s, ptr %25, i64 0, i32 3
  store ptr %25, ptr %2, align 8, !tbaa !673
  %40 = load i64, ptr %39, align 8, !tbaa !534
  %41 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 1
  %42 = load i64, ptr %41, align 8, !tbaa !659
  %43 = sub nsw i64 %40, %42
  %44 = tail call i64 @llvm.abs.i64(i64 %43, i1 true)
  %45 = or i64 %44, 1
  %46 = udiv i64 2147483647, %45
  %47 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 1, i32 1
  %48 = load i64, ptr %47, align 8, !tbaa !656
  %49 = add nsw i64 %48, %46
  %50 = getelementptr inbounds %struct.active_line_s, ptr %0, i64 0, i32 2
  store i64 %49, ptr %50, align 8, !tbaa !658
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %41, i64 16, i1 false), !tbaa.struct !310
  store i64 %40, ptr %41, align 8, !tbaa.struct !310
  store i64 %27, ptr %47, align 8, !tbaa.struct !458
  br label %51

51:                                               ; preds = %38, %36, %29
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @add_y_line(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef %3) #21 {
  %5 = getelementptr inbounds %struct.line_list_s, ptr %3, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !637
  %7 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 1
  store ptr %7, ptr %5, align 8, !tbaa !637
  %8 = getelementptr inbounds %struct.segment_s, ptr %1, i64 0, i32 3
  %9 = load i64, ptr %8, align 8, !tbaa !534
  %10 = getelementptr inbounds %struct.segment_s, ptr %1, i64 0, i32 3, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !535
  %12 = getelementptr inbounds %struct.segment_s, ptr %0, i64 0, i32 3
  %13 = load i64, ptr %12, align 8, !tbaa !534
  %14 = getelementptr inbounds %struct.segment_s, ptr %0, i64 0, i32 3, i32 1
  %15 = load i64, ptr %14, align 8, !tbaa !535
  %16 = getelementptr inbounds %struct.line_list_s, ptr %3, i64 0, i32 2
  %17 = load i16, ptr %16, align 4, !tbaa !643
  %18 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 7
  store i16 %17, ptr %18, align 4, !tbaa !667
  %19 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 6
  store i32 %2, ptr %19, align 8, !tbaa !666
  %20 = icmp sgt i32 %2, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %4
  %22 = sub nsw i64 %9, %13
  br label %25

23:                                               ; preds = %4
  %24 = sub nsw i64 %13, %9
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi i64 [ %24, %23 ], [ %22, %21 ]
  %27 = phi i64 [ %11, %23 ], [ %15, %21 ]
  %28 = phi i64 [ %9, %23 ], [ %13, %21 ]
  %29 = phi i64 [ %13, %23 ], [ %9, %21 ]
  %30 = phi i64 [ %15, %23 ], [ %11, %21 ]
  %31 = phi ptr [ %0, %23 ], [ %1, %21 ]
  %32 = tail call i64 @llvm.abs.i64(i64 %26, i1 true)
  %33 = or i64 %32, 1
  %34 = udiv i64 2147483647, %33
  %35 = add nsw i64 %34, %27
  %36 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 2
  store i64 %35, ptr %36, align 8
  store i64 %28, ptr %6, align 8
  %37 = getelementptr inbounds i8, ptr %6, i64 8
  store i64 %27, ptr %37, align 8
  %38 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 1
  store i64 %29, ptr %38, align 8
  %39 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 1, i32 1
  store i64 %30, ptr %39, align 8
  %40 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 5
  store ptr %31, ptr %40, align 8
  %41 = getelementptr inbounds %struct.line_list_s, ptr %3, i64 0, i32 5
  %42 = load ptr, ptr %41, align 8, !tbaa !674
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %47

44:                                               ; preds = %25
  %45 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 9
  %46 = getelementptr inbounds %struct.line_list_s, ptr %3, i64 0, i32 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %45, i8 0, i64 16, i1 false)
  br label %88

47:                                               ; preds = %25
  %48 = getelementptr inbounds %struct.timeval, ptr %42, i64 0, i32 1
  %49 = load i64, ptr %48, align 8, !tbaa !651
  %50 = icmp slt i64 %27, %49
  br i1 %50, label %65, label %51

51:                                               ; preds = %56, %47
  %52 = phi ptr [ %54, %56 ], [ %42, %47 ]
  %53 = getelementptr inbounds %struct.active_line_s, ptr %52, i64 0, i32 10
  %54 = load ptr, ptr %53, align 8, !tbaa !654
  %55 = icmp eq ptr %54, null
  br i1 %55, label %84, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.timeval, ptr %54, i64 0, i32 1
  %58 = load i64, ptr %57, align 8, !tbaa !651
  %59 = icmp sgt i64 %27, %58
  br i1 %59, label %51, label %60, !llvm.loop !675

60:                                               ; preds = %56
  %.lcssa6 = phi ptr [ %52, %56 ]
  %.lcssa4 = phi ptr [ %54, %56 ]
  %61 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa6, i64 0, i32 10
  %62 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 10
  store ptr %.lcssa4, ptr %62, align 8, !tbaa !654
  %63 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 9
  store ptr %.lcssa6, ptr %63, align 8, !tbaa !670
  store ptr %6, ptr %61, align 8, !tbaa !654
  %64 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa4, i64 0, i32 9
  br label %88

65:                                               ; preds = %70, %47
  %66 = phi ptr [ %68, %70 ], [ %42, %47 ]
  %67 = getelementptr inbounds %struct.active_line_s, ptr %66, i64 0, i32 9
  %68 = load ptr, ptr %67, align 8, !tbaa !670
  %69 = icmp eq ptr %68, null
  br i1 %69, label %79, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.timeval, ptr %68, i64 0, i32 1
  %72 = load i64, ptr %71, align 8, !tbaa !651
  %73 = icmp slt i64 %27, %72
  br i1 %73, label %65, label %74, !llvm.loop !676

74:                                               ; preds = %70
  %.lcssa3 = phi ptr [ %66, %70 ]
  %.lcssa1 = phi ptr [ %68, %70 ]
  %75 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa3, i64 0, i32 9
  %76 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 9
  store ptr %.lcssa1, ptr %76, align 8, !tbaa !670
  %77 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 10
  store ptr %.lcssa3, ptr %77, align 8, !tbaa !654
  store ptr %6, ptr %75, align 8, !tbaa !670
  %78 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa1, i64 0, i32 10
  br label %88

79:                                               ; preds = %65
  %.lcssa2 = phi ptr [ %66, %65 ]
  %80 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa2, i64 0, i32 9
  %81 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 9
  store ptr null, ptr %81, align 8, !tbaa !670
  %82 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 10
  store ptr %.lcssa2, ptr %82, align 8, !tbaa !654
  store ptr %6, ptr %80, align 8, !tbaa !670
  %83 = getelementptr inbounds %struct.line_list_s, ptr %3, i64 0, i32 4
  br label %88

84:                                               ; preds = %51
  %.lcssa5 = phi ptr [ %52, %51 ]
  %85 = getelementptr inbounds %struct.active_line_s, ptr %.lcssa5, i64 0, i32 10
  %86 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 10
  store ptr null, ptr %86, align 8, !tbaa !654
  %87 = getelementptr inbounds %struct.active_line_s, ptr %6, i64 0, i32 9
  store ptr %.lcssa5, ptr %87, align 8, !tbaa !670
  br label %88

88:                                               ; preds = %84, %79, %74, %60, %44
  %89 = phi ptr [ %85, %84 ], [ %64, %60 ], [ %83, %79 ], [ %78, %74 ], [ %46, %44 ]
  store ptr %6, ptr %89, align 8, !tbaa !7
  store ptr %6, ptr %41, align 8, !tbaa !674
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gx_ht_construct_order(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #29 {
  %4 = mul i32 %2, %1
  %5 = sub nsw i32 0, %1
  %6 = and i32 %5, 31
  %7 = add nsw i32 %6, %1
  %8 = sdiv i32 %7, 8
  %9 = mul nsw i32 %8, %2
  %10 = icmp sgt i32 %9, 1000
  br i1 %10, label %40, label %11

11:                                               ; preds = %3
  store ptr null, ptr getelementptr inbounds (%struct.gx_ht_cache_s, ptr @cache, i64 0, i32 2), align 8, !tbaa !677
  store ptr @cache_bits, ptr @cache, align 8, !tbaa !679
  store i32 1000, ptr getelementptr inbounds (%struct.gx_ht_cache_s, ptr @cache, i64 0, i32 1), align 8, !tbaa !680
  %12 = icmp eq i32 %4, 0
  br i1 %12, label %40, label %13

13:                                               ; preds = %11
  %14 = icmp slt i32 %1, 9
  %15 = sext i32 %1 to i64
  %16 = getelementptr inbounds [9 x ptr], ptr @multi_bits, i64 0, i64 %15
  %17 = zext i32 %4 to i64
  br label %18

18:                                               ; preds = %31, %13
  %19 = phi i64 [ 0, %13 ], [ %38, %31 ]
  %20 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %19
  %21 = load i16, ptr %20, align 2, !tbaa !353
  %22 = zext i16 %21 to i32
  %23 = sdiv i32 %22, %1
  %24 = mul nsw i32 %23, %6
  %25 = add nsw i32 %24, %22
  %26 = lshr i32 %25, 3
  %27 = trunc i32 %26 to i16
  %28 = and i16 %27, -2
  store i16 %28, ptr %20, align 2, !tbaa !353
  br i1 %14, label %29, label %31

29:                                               ; preds = %18
  %30 = load ptr, ptr %16, align 8, !tbaa !7
  br label %31

31:                                               ; preds = %29, %18
  %32 = phi ptr [ %30, %29 ], [ @single_bits8, %18 ]
  %33 = and i32 %25, 15
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i16, ptr %32, i64 %34
  %36 = load i16, ptr %35, align 2, !tbaa !102
  %37 = getelementptr inbounds %struct.ht_bit_s, ptr %0, i64 %19, i32 1
  store i16 %36, ptr %37, align 2, !tbaa !362
  %38 = add nuw nsw i64 %19, 1
  %39 = icmp eq i64 %38, %17
  br i1 %39, label %40, label %18, !llvm.loop !681

40:                                               ; preds = %31, %11, %3
  %41 = phi i32 [ -13, %3 ], [ 0, %11 ], [ 0, %31 ]
  ret i32 %41
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @gx_color_load(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #21 {
  %3 = getelementptr inbounds %struct.gx_device_color_s, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 8, !tbaa !334
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !356
  %9 = load ptr, ptr getelementptr inbounds (%struct.gx_ht_cache_s, ptr @cache, i64 0, i32 2), align 8, !tbaa !677
  %10 = getelementptr inbounds %struct.halftone_s, ptr %8, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !360
  %12 = icmp eq ptr %9, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %6
  tail call void @init_ht(ptr noundef nonnull @cache, ptr noundef nonnull %8) #62
  br label %14

14:                                               ; preds = %13, %6
  %15 = load i32, ptr getelementptr inbounds (%struct.gx_ht_cache_s, ptr @cache, i64 0, i32 4), align 4, !tbaa !682
  %16 = sdiv i32 %4, %15
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.gx_ht_cache_s, ptr @cache, i64 0, i32 5, i64 %17
  %19 = load i32, ptr %18, align 8, !tbaa !683
  %20 = icmp eq i32 %19, %4
  br i1 %20, label %22, label %21

21:                                               ; preds = %14
  tail call void @render_ht(ptr noundef nonnull %18, i32 noundef %4, ptr noundef nonnull %8) #62
  br label %22

22:                                               ; preds = %21, %14
  %23 = getelementptr inbounds %struct.gx_ht_cache_s, ptr @cache, i64 0, i32 5, i64 %17, i32 1
  %24 = getelementptr inbounds %struct.gx_device_color_s, ptr %0, i64 0, i32 3
  store ptr %23, ptr %24, align 8, !tbaa !617
  br label %25

25:                                               ; preds = %22, %2
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal void @init_ht(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #59 {
  %3 = getelementptr inbounds %struct.halftone_s, ptr %1, i64 0, i32 2
  %4 = load i32, ptr %3, align 8, !tbaa !357
  %5 = getelementptr inbounds %struct.halftone_s, ptr %1, i64 0, i32 3
  %6 = load i32, ptr %5, align 4, !tbaa !359
  %7 = mul nsw i32 %6, %4
  %8 = icmp slt i32 %4, 9
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = sext i32 %4 to i64
  %11 = getelementptr inbounds [9 x i32], ptr @init_ht.up_to_16, i64 0, i64 %10
  %12 = load i32, ptr %11, align 4, !tbaa !11
  br label %13

13:                                               ; preds = %9, %2
  %14 = phi i32 [ %12, %9 ], [ %4, %2 ]
  %15 = add nsw i32 %4, 31
  %16 = ashr i32 %15, 3
  %17 = and i32 %16, -4
  %18 = mul i32 %17, %6
  %19 = udiv i32 1000, %18
  %20 = tail call i32 @llvm.smin.i32(i32 %19, i32 %7)
  %21 = tail call i32 @llvm.smin.i32(i32 %20, i32 25)
  %22 = icmp sgt i32 %20, 0
  br i1 %22, label %23, label %39

23:                                               ; preds = %13
  %24 = load ptr, ptr %0, align 8, !tbaa !679
  %25 = zext i32 %18 to i64
  %26 = tail call i32 @llvm.smax.i32(i32 %21, i32 1)
  %27 = zext i32 %26 to i64
  br label %28

28:                                               ; preds = %28, %23
  %29 = phi i64 [ 0, %23 ], [ %37, %28 ]
  %30 = phi ptr [ %24, %23 ], [ %36, %28 ]
  %31 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 5, i64 %29
  store i32 -1, ptr %31, align 8, !tbaa !683
  %32 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 5, i64 %29, i32 1
  store ptr %30, ptr %32, align 8, !tbaa !685
  %33 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 5, i64 %29, i32 1, i32 1
  store i32 %17, ptr %33, align 8, !tbaa !686
  %34 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 5, i64 %29, i32 1, i32 2
  store i32 %14, ptr %34, align 4, !tbaa !687
  %35 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 5, i64 %29, i32 1, i32 3
  store i32 %6, ptr %35, align 8, !tbaa !688
  %36 = getelementptr inbounds i8, ptr %30, i64 %25
  %37 = add nuw nsw i64 %29, 1
  %38 = icmp eq i64 %37, %27
  br i1 %38, label %39, label %28, !llvm.loop !689

39:                                               ; preds = %28, %13
  %40 = getelementptr inbounds %struct.halftone_s, ptr %1, i64 0, i32 4
  %41 = load ptr, ptr %40, align 8, !tbaa !360
  %42 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 2
  store ptr %41, ptr %42, align 8, !tbaa !677
  %43 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 3
  store i32 %21, ptr %43, align 8, !tbaa !690
  %44 = add i32 %7, -1
  %45 = add i32 %44, %21
  %46 = sdiv i32 %45, %21
  %47 = getelementptr inbounds %struct.gx_ht_cache_s, ptr %0, i64 0, i32 4
  store i32 %46, ptr %47, align 4, !tbaa !682
  ret void
}

; Function Attrs: nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal void @render_ht(ptr nocapture noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) #21 {
  %4 = getelementptr inbounds %struct.halftone_s, ptr %2, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !360
  %6 = getelementptr inbounds %struct.bit_tile_s, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !685
  %8 = load i32, ptr %0, align 8, !tbaa !683
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %23

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.bit_tile_s, ptr %0, i64 0, i32 1, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !686
  %13 = getelementptr inbounds %struct.bit_tile_s, ptr %0, i64 0, i32 1, i32 3
  %14 = load i32, ptr %13, align 8, !tbaa !688
  %15 = mul nsw i32 %14, %12
  %16 = getelementptr inbounds %struct.halftone_s, ptr %2, i64 0, i32 5
  %17 = load i32, ptr %16, align 8, !tbaa !361
  %18 = ashr i32 %17, 1
  %19 = icmp sgt i32 %18, %1
  %20 = zext i32 %15 to i64
  br i1 %19, label %22, label %21

21:                                               ; preds = %10
  tail call void @llvm.memset.p0.i64(ptr align 1 %7, i8 -1, i64 %20, i1 false)
  br label %23

22:                                               ; preds = %10
  tail call void @llvm.memset.p0.i64(ptr align 1 %7, i8 0, i64 %20, i1 false)
  br label %23

23:                                               ; preds = %22, %21, %3
  %24 = phi i32 [ %8, %3 ], [ %17, %21 ], [ 0, %22 ]
  %25 = tail call i32 @llvm.smax.i32(i32 %24, i32 %1)
  %26 = tail call i32 @llvm.smin.i32(i32 %24, i32 %1)
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.ht_bit_s, ptr %5, i64 %27
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds %struct.ht_bit_s, ptr %5, i64 %29
  br label %31

31:                                               ; preds = %31, %23
  %32 = phi ptr [ %28, %23 ], [ %40, %31 ]
  %33 = getelementptr inbounds %struct.ht_bit_s, ptr %32, i64 0, i32 1
  %34 = load i16, ptr %33, align 2, !tbaa !362
  %35 = load i16, ptr %32, align 2, !tbaa !353
  %36 = zext i16 %35 to i64
  %37 = getelementptr inbounds i8, ptr %7, i64 %36
  %38 = load i16, ptr %37, align 2, !tbaa !102
  %39 = xor i16 %38, %34
  store i16 %39, ptr %37, align 2, !tbaa !102
  %40 = getelementptr inbounds %struct.ht_bit_s, ptr %32, i64 1
  %41 = icmp ult ptr %40, %30
  br i1 %41, label %31, label %42, !llvm.loop !691

42:                                               ; preds = %31
  store i32 %1, ptr %0, align 8, !tbaa !683
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gx_path_init(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #33 {
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %1, i64 16, i1 false), !tbaa.struct !692
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 2
  store ptr null, ptr %3, align 8, !tbaa !693
  %4 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  store i8 0, ptr %4, align 8, !tbaa !309
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %6 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  store i8 0, ptr %6, align 1, !tbaa !250
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  store i8 0, ptr %7, align 2, !tbaa !694
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %5, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @gx_path_release(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %2, align 8, !tbaa !527
  %4 = icmp eq ptr %3, null
  br i1 %4, label %37, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  %7 = load i8, ptr %6, align 2, !tbaa !694
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %37

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %11 = load ptr, ptr %10, align 8, !tbaa !695
  %12 = getelementptr inbounds %struct.subpath, ptr %11, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !644
  %14 = icmp eq ptr %13, null
  br i1 %14, label %36, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.op_def, ptr %0, i64 0, i32 1
  br label %17

17:                                               ; preds = %29, %15
  %18 = phi ptr [ %13, %15 ], [ %30, %29 ]
  %19 = getelementptr inbounds %struct.segment_s, ptr %18, i64 0, i32 2
  %20 = load i32, ptr %19, align 8, !tbaa !533
  %21 = icmp ult i32 %20, 4
  br i1 %21, label %29, label %22

22:                                               ; preds = %17
  %.lcssa = phi ptr [ %18, %17 ]
  %23 = getelementptr inbounds %struct.segment_s, ptr %.lcssa, i64 0, i32 2
  %24 = load ptr, ptr @stderr, align 8, !tbaa !7
  %25 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %24, ptr noundef nonnull @.str.860, ptr noundef nonnull @.str.1.861, i32 noundef 75) #66
  %26 = load ptr, ptr @stderr, align 8, !tbaa !7
  %27 = load i32, ptr %23, align 8, !tbaa !533
  %28 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %26, ptr noundef nonnull @.str.2.862, i32 noundef %27) #66
  tail call void @exit(i32 noundef 1) #68
  unreachable

29:                                               ; preds = %17
  %30 = load ptr, ptr %18, align 8, !tbaa !646
  %31 = sext i32 %20 to i64
  %32 = getelementptr inbounds [4 x i32], ptr @switch.table.gx_path_release, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4
  %34 = load ptr, ptr %16, align 8, !tbaa !696
  tail call void %34(ptr noundef nonnull %18, i32 noundef 1, i32 noundef %33, ptr noundef nonnull @.str.3.863) #64
  %35 = icmp eq ptr %30, null
  br i1 %35, label %36, label %17, !llvm.loop !697

36:                                               ; preds = %29, %9
  store ptr null, ptr %2, align 8, !tbaa !527
  br label %37

37:                                               ; preds = %36, %5, %1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @gx_path_share(ptr nocapture noundef %0) #28 {
  %2 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %3 = load ptr, ptr %2, align 8, !tbaa !527
  %4 = icmp eq ptr %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  store i8 1, ptr %6, align 2, !tbaa !694
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_new_subpath(ptr noundef %0) #0 {
  %2 = alloca %struct.gx_path_s, align 8
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !695
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  %6 = load i8, ptr %5, align 2, !tbaa !694
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %15, label %8

8:                                                ; preds = %1
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %2) #65
  %9 = call i32 @gx_path_copy(ptr noundef nonnull %0, ptr noundef nonnull %2) #64
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #65
  br label %41

12:                                               ; preds = %8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, ptr noundef nonnull align 8 dereferenceable(144) %2, i64 144, i1 false), !tbaa.struct !522
  store i8 0, ptr %5, align 2, !tbaa !694
  %13 = load ptr, ptr %3, align 8, !tbaa !695
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #65
  %14 = icmp eq ptr %13, null
  br i1 %14, label %41, label %15

15:                                               ; preds = %12, %1
  %16 = phi ptr [ %13, %12 ], [ %4, %1 ]
  %17 = load ptr, ptr %0, align 8, !tbaa !698
  %18 = call ptr %17(i32 noundef 1, i32 noundef 64, ptr noundef nonnull @.str.4.866) #64
  %19 = icmp eq ptr %18, null
  br i1 %19, label %41, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.subpath, ptr %18, i64 0, i32 2
  store i32 0, ptr %21, align 8, !tbaa !699
  %22 = getelementptr inbounds %struct.subpath, ptr %18, i64 0, i32 1
  store ptr null, ptr %22, align 8, !tbaa !700
  %23 = getelementptr inbounds %struct.subpath, ptr %18, i64 0, i32 4
  store ptr %18, ptr %23, align 8, !tbaa !644
  %24 = getelementptr inbounds %struct.subpath, ptr %18, i64 0, i32 5
  %25 = getelementptr inbounds %struct.subpath, ptr %18, i64 0, i32 3
  %26 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(9) %24, i8 0, i64 9, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %25, ptr noundef nonnull align 8 dereferenceable(16) %26, i64 16, i1 false), !tbaa.struct !310
  %27 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  store i8 1, ptr %27, align 1, !tbaa !250
  %28 = icmp eq ptr %16, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  br label %35

31:                                               ; preds = %20
  %32 = getelementptr inbounds %struct.subpath, ptr %16, i64 0, i32 4
  %33 = load ptr, ptr %32, align 8, !tbaa !644
  %34 = getelementptr inbounds %struct.segment_s, ptr %33, i64 0, i32 1
  br label %35

35:                                               ; preds = %31, %29
  %36 = phi ptr [ %34, %31 ], [ %30, %29 ]
  %37 = phi ptr [ %33, %31 ], [ null, %29 ]
  store ptr %18, ptr %36, align 8, !tbaa !7
  store ptr %37, ptr %18, align 8, !tbaa !701
  store ptr %18, ptr %3, align 8, !tbaa !695
  %38 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 6
  %39 = load i32, ptr %38, align 8, !tbaa !632
  %40 = add nsw i32 %39, 1
  store i32 %40, ptr %38, align 8, !tbaa !632
  br label %41

41:                                               ; preds = %35, %15, %12, %11
  %42 = phi i32 [ 0, %35 ], [ -13, %12 ], [ -13, %15 ], [ -13, %11 ]
  ret i32 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @gx_path_add_point(ptr nocapture noundef writeonly %0, i64 noundef %1, i64 noundef %2) #45 {
  %4 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  store i8 0, ptr %4, align 1, !tbaa !250
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  store i8 1, ptr %5, align 8, !tbaa !309
  %6 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  store i64 %1, ptr %6, align 8, !tbaa !313
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  store i64 %2, ptr %7, align 8, !tbaa !314
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gx_path_add_relative_point(ptr nocapture noundef %0, i64 noundef %1, i64 noundef %2) #28 {
  %4 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  %5 = load i8, ptr %4, align 8, !tbaa !309
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  store i8 0, ptr %8, align 1, !tbaa !250
  %9 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  %10 = load i64, ptr %9, align 8, !tbaa !313
  %11 = add nsw i64 %10, %1
  store i64 %11, ptr %9, align 8, !tbaa !313
  %12 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !314
  %14 = add nsw i64 %13, %2
  store i64 %14, ptr %12, align 8, !tbaa !314
  br label %15

15:                                               ; preds = %7, %3
  %16 = phi i32 [ 0, %7 ], [ -14, %3 ]
  ret i32 %16
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_add_line(ptr noundef %0, i64 noundef %1, i64 noundef %2) #0 {
  %4 = alloca %struct.gx_path_s, align 8
  %5 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %6 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  %7 = load i8, ptr %6, align 1, !tbaa !250
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  %11 = load i8, ptr %10, align 8, !tbaa !309
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %49, label %13

13:                                               ; preds = %9
  %14 = tail call i32 @gx_path_new_subpath(ptr noundef nonnull %0) #62, !range !481
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %49, label %16

16:                                               ; preds = %13, %3
  %17 = load ptr, ptr %5, align 8, !tbaa !695
  %18 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  %19 = load i8, ptr %18, align 2, !tbaa !694
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %16
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %4) #65
  %22 = call i32 @gx_path_copy(ptr noundef nonnull %0, ptr noundef nonnull %4) #64
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %4) #65
  br label %49

25:                                               ; preds = %21
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, ptr noundef nonnull align 8 dereferenceable(144) %4, i64 144, i1 false), !tbaa.struct !522
  store i8 0, ptr %18, align 2, !tbaa !694
  %26 = load ptr, ptr %5, align 8, !tbaa !695
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %4) #65
  %27 = icmp eq ptr %26, null
  br i1 %27, label %49, label %28

28:                                               ; preds = %25, %16
  %29 = phi ptr [ %26, %25 ], [ %17, %16 ]
  %30 = load ptr, ptr %0, align 8, !tbaa !698
  %31 = call ptr %30(i32 noundef 1, i32 noundef 40, ptr noundef nonnull @.str.5.873) #64
  %32 = icmp eq ptr %31, null
  br i1 %32, label %49, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.segment_s, ptr %31, i64 0, i32 2
  store i32 1, ptr %34, align 8, !tbaa !702
  %35 = getelementptr inbounds %struct.segment_s, ptr %31, i64 0, i32 1
  store ptr null, ptr %35, align 8, !tbaa !704
  %36 = getelementptr inbounds %struct.subpath, ptr %29, i64 0, i32 4
  %37 = load ptr, ptr %36, align 8, !tbaa !644
  %38 = getelementptr inbounds %struct.segment_s, ptr %37, i64 0, i32 1
  store ptr %31, ptr %38, align 8, !tbaa !531
  store ptr %37, ptr %31, align 8, !tbaa !705
  store ptr %31, ptr %36, align 8, !tbaa !644
  %39 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  store i64 %1, ptr %39, align 8, !tbaa !313
  %40 = getelementptr inbounds %struct.segment_s, ptr %31, i64 0, i32 3
  store i64 %1, ptr %40, align 8, !tbaa !706
  %41 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  store i64 %2, ptr %41, align 8, !tbaa !314
  %42 = getelementptr inbounds %struct.segment_s, ptr %31, i64 0, i32 3, i32 1
  store i64 %2, ptr %42, align 8, !tbaa !707
  %43 = getelementptr inbounds %struct.subpath, ptr %29, i64 0, i32 5
  %44 = load i32, ptr %43, align 8, !tbaa !708
  %45 = add nsw i32 %44, 1
  store i32 %45, ptr %43, align 8, !tbaa !708
  %46 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 7
  %47 = load i32, ptr %46, align 4, !tbaa !631
  %48 = add nsw i32 %47, 1
  store i32 %48, ptr %46, align 4, !tbaa !631
  br label %49

49:                                               ; preds = %33, %28, %25, %24, %13, %9
  %50 = phi i32 [ 0, %33 ], [ -13, %25 ], [ -13, %28 ], [ -13, %24 ], [ %14, %13 ], [ -14, %9 ]
  ret i32 %50
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_add_rectangle(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4) #0 {
  %6 = tail call i32 @gx_path_add_pgram(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %1, i64 noundef %4, i64 noundef %3, i64 noundef %4) #62, !range !709
  ret i32 %6
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_add_pgram(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6) #0 {
  %8 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  store i8 0, ptr %8, align 1, !tbaa !250
  %9 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  store i8 1, ptr %9, align 8, !tbaa !309
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  store i64 %1, ptr %10, align 8, !tbaa !313
  %11 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  store i64 %2, ptr %11, align 8, !tbaa !314
  %12 = tail call i32 @gx_path_add_line(ptr noundef %0, i64 noundef %3, i64 noundef %4) #62
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %7
  %15 = tail call i32 @gx_path_add_line(ptr noundef nonnull %0, i64 noundef %5, i64 noundef %6) #62
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %14
  %18 = sub i64 %1, %3
  %19 = add i64 %18, %5
  %20 = sub i64 %2, %4
  %21 = add i64 %20, %6
  %22 = tail call i32 @gx_path_add_line(ptr noundef nonnull %0, i64 noundef %19, i64 noundef %21) #62
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %17
  %25 = tail call i32 @gx_path_close_subpath(ptr noundef nonnull %0) #62, !range !481
  br label %26

26:                                               ; preds = %24, %17, %14, %7
  %27 = phi i32 [ %12, %7 ], [ %15, %14 ], [ %22, %17 ], [ %25, %24 ]
  ret i32 %27
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_close_subpath(ptr noundef %0) #0 {
  %2 = alloca %struct.gx_path_s, align 8
  %3 = alloca %struct.gx_path_s, align 8
  %4 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %5 = load ptr, ptr %4, align 8, !tbaa !695
  %6 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  %7 = load i8, ptr %6, align 1, !tbaa !250
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %81, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  %11 = load i64, ptr %10, align 8, !tbaa !313
  %12 = getelementptr inbounds %struct.subpath, ptr %5, i64 0, i32 3
  %13 = load i64, ptr %12, align 8, !tbaa !648
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %15, label %43

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !314
  %18 = getelementptr inbounds %struct.subpath, ptr %5, i64 0, i32 3, i32 1
  %19 = load i64, ptr %18, align 8, !tbaa !647
  %20 = icmp eq i64 %17, %19
  br i1 %20, label %21, label %43

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.subpath, ptr %5, i64 0, i32 4
  %23 = load ptr, ptr %22, align 8, !tbaa !644
  %24 = getelementptr inbounds %struct.segment_s, ptr %23, i64 0, i32 2
  %25 = load i32, ptr %24, align 8, !tbaa !533
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %43

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  %29 = load i8, ptr %28, align 2, !tbaa !694
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %40, label %31

31:                                               ; preds = %27
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %3) #65
  %32 = call i32 @gx_path_copy(ptr noundef nonnull %0, ptr noundef nonnull %3) #64
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %3) #65
  br label %81

35:                                               ; preds = %31
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, ptr noundef nonnull align 8 dereferenceable(144) %3, i64 144, i1 false), !tbaa.struct !522
  store i8 0, ptr %28, align 2, !tbaa !694
  %36 = load ptr, ptr %4, align 8, !tbaa !695
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %3) #65
  %37 = icmp eq ptr %36, null
  br i1 %37, label %81, label %38

38:                                               ; preds = %35
  %39 = load ptr, ptr %22, align 8, !tbaa !644
  br label %40

40:                                               ; preds = %38, %27
  %41 = phi ptr [ %39, %38 ], [ %23, %27 ]
  %42 = getelementptr inbounds %struct.segment_s, ptr %41, i64 0, i32 2
  store i32 2, ptr %42, align 8, !tbaa !533
  br label %78

43:                                               ; preds = %21, %15, %9
  %44 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  %45 = load i8, ptr %44, align 2, !tbaa !694
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %54, label %47

47:                                               ; preds = %43
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %2) #65
  %48 = call i32 @gx_path_copy(ptr noundef nonnull %0, ptr noundef nonnull %2) #64
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #65
  br label %81

51:                                               ; preds = %47
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, ptr noundef nonnull align 8 dereferenceable(144) %2, i64 144, i1 false), !tbaa.struct !522
  store i8 0, ptr %44, align 2, !tbaa !694
  %52 = load ptr, ptr %4, align 8, !tbaa !695
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %2) #65
  %53 = icmp eq ptr %52, null
  br i1 %53, label %81, label %54

54:                                               ; preds = %51, %43
  %55 = phi ptr [ %52, %51 ], [ %5, %43 ]
  %56 = load ptr, ptr %0, align 8, !tbaa !698
  %57 = call ptr %56(i32 noundef 1, i32 noundef 40, ptr noundef nonnull @.str.7.880) #64
  %58 = icmp eq ptr %57, null
  br i1 %58, label %81, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.segment_s, ptr %57, i64 0, i32 2
  store i32 2, ptr %60, align 8, !tbaa !702
  %61 = getelementptr inbounds %struct.segment_s, ptr %57, i64 0, i32 1
  store ptr null, ptr %61, align 8, !tbaa !704
  %62 = getelementptr inbounds %struct.subpath, ptr %55, i64 0, i32 4
  %63 = load ptr, ptr %62, align 8, !tbaa !644
  %64 = getelementptr inbounds %struct.segment_s, ptr %63, i64 0, i32 1
  store ptr %57, ptr %64, align 8, !tbaa !531
  store ptr %63, ptr %57, align 8, !tbaa !705
  store ptr %57, ptr %62, align 8, !tbaa !644
  %65 = getelementptr inbounds %struct.subpath, ptr %55, i64 0, i32 3
  %66 = load i64, ptr %65, align 8, !tbaa !648
  store i64 %66, ptr %10, align 8, !tbaa !313
  %67 = getelementptr inbounds %struct.segment_s, ptr %57, i64 0, i32 3
  store i64 %66, ptr %67, align 8, !tbaa !706
  %68 = getelementptr inbounds %struct.subpath, ptr %55, i64 0, i32 3, i32 1
  %69 = load i64, ptr %68, align 8, !tbaa !647
  %70 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  store i64 %69, ptr %70, align 8, !tbaa !314
  %71 = getelementptr inbounds %struct.segment_s, ptr %57, i64 0, i32 3, i32 1
  store i64 %69, ptr %71, align 8, !tbaa !707
  %72 = getelementptr inbounds %struct.subpath, ptr %55, i64 0, i32 5
  %73 = load i32, ptr %72, align 8, !tbaa !708
  %74 = add nsw i32 %73, 1
  store i32 %74, ptr %72, align 8, !tbaa !708
  %75 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 7
  %76 = load i32, ptr %75, align 4, !tbaa !631
  %77 = add nsw i32 %76, 1
  store i32 %77, ptr %75, align 4, !tbaa !631
  br label %78

78:                                               ; preds = %59, %40
  %79 = phi ptr [ %5, %40 ], [ %55, %59 ]
  %80 = getelementptr inbounds %struct.subpath, ptr %79, i64 0, i32 7
  store i8 1, ptr %80, align 8, !tbaa !710
  store i8 0, ptr %6, align 1, !tbaa !250
  br label %81

81:                                               ; preds = %78, %54, %51, %50, %35, %34, %1
  %82 = phi i32 [ 0, %78 ], [ 0, %1 ], [ -13, %35 ], [ -13, %51 ], [ -13, %54 ], [ -13, %34 ], [ -13, %50 ]
  ret i32 %82
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_add_curve(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6) #0 {
  %8 = alloca %struct.gx_path_s, align 8
  %9 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 11
  %11 = load i8, ptr %10, align 1, !tbaa !250
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  %15 = load i8, ptr %14, align 8, !tbaa !309
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %57, label %17

17:                                               ; preds = %13
  %18 = tail call i32 @gx_path_new_subpath(ptr noundef nonnull %0) #62, !range !481
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %57, label %20

20:                                               ; preds = %17, %7
  %21 = load ptr, ptr %9, align 8, !tbaa !695
  %22 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  %23 = load i8, ptr %22, align 2, !tbaa !694
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %20
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %8) #65
  %26 = call i32 @gx_path_copy(ptr noundef nonnull %0, ptr noundef nonnull %8) #64
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %8) #65
  br label %57

29:                                               ; preds = %25
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %0, ptr noundef nonnull align 8 dereferenceable(144) %8, i64 144, i1 false), !tbaa.struct !522
  store i8 0, ptr %22, align 2, !tbaa !694
  %30 = load ptr, ptr %9, align 8, !tbaa !695
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %8) #65
  %31 = icmp eq ptr %30, null
  br i1 %31, label %57, label %32

32:                                               ; preds = %29, %20
  %33 = phi ptr [ %30, %29 ], [ %21, %20 ]
  %34 = load ptr, ptr %0, align 8, !tbaa !698
  %35 = call ptr %34(i32 noundef 1, i32 noundef 72, ptr noundef nonnull @.str.6.883) #64
  %36 = icmp eq ptr %35, null
  br i1 %36, label %57, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 2
  store i32 3, ptr %38, align 8, !tbaa !711
  %39 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 1
  store ptr null, ptr %39, align 8, !tbaa !712
  %40 = getelementptr inbounds %struct.subpath, ptr %33, i64 0, i32 4
  %41 = load ptr, ptr %40, align 8, !tbaa !644
  %42 = getelementptr inbounds %struct.segment_s, ptr %41, i64 0, i32 1
  store ptr %35, ptr %42, align 8, !tbaa !531
  store ptr %41, ptr %35, align 8, !tbaa !713
  store ptr %35, ptr %40, align 8, !tbaa !644
  %43 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 4
  store i64 %1, ptr %43, align 8, !tbaa !536
  %44 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 4, i32 1
  store i64 %2, ptr %44, align 8, !tbaa !538
  %45 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 5
  store i64 %3, ptr %45, align 8, !tbaa !539
  %46 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 5, i32 1
  store i64 %4, ptr %46, align 8, !tbaa !540
  %47 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  store i64 %5, ptr %47, align 8, !tbaa !313
  %48 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 3
  store i64 %5, ptr %48, align 8, !tbaa !714
  %49 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  store i64 %6, ptr %49, align 8, !tbaa !314
  %50 = getelementptr inbounds %struct.curve_segment, ptr %35, i64 0, i32 3, i32 1
  store i64 %6, ptr %50, align 8, !tbaa !715
  %51 = getelementptr inbounds %struct.subpath, ptr %33, i64 0, i32 6
  %52 = load i32, ptr %51, align 4, !tbaa !716
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr %51, align 4, !tbaa !716
  %54 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 7
  %55 = load <2 x i32>, ptr %54, align 4, !tbaa !11
  %56 = add nsw <2 x i32> %55, <i32 1, i32 1>
  store <2 x i32> %56, ptr %54, align 4, !tbaa !11
  br label %57

57:                                               ; preds = %37, %32, %29, %28, %17, %13
  %58 = phi i32 [ 0, %37 ], [ -13, %29 ], [ -13, %32 ], [ -13, %28 ], [ %18, %17 ], [ -14, %13 ]
  ret i32 %58
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_add_arc(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6) #0 {
  %8 = sitofp i64 %5 to double
  %9 = fmul double %8, 5.500000e-01
  %10 = fptosi double %9 to i64
  %11 = sitofp i64 %6 to double
  %12 = fmul double %11, 5.500000e-01
  %13 = fptosi double %12 to i64
  %14 = sitofp i64 %1 to double
  %15 = fmul double %14, 0x3FDCCCCCCCCCCCCC
  %16 = fptosi double %15 to i64
  %17 = add nsw i64 %10, %16
  %18 = sitofp i64 %2 to double
  %19 = fmul double %18, 0x3FDCCCCCCCCCCCCC
  %20 = fptosi double %19 to i64
  %21 = add nsw i64 %13, %20
  %22 = sitofp i64 %3 to double
  %23 = fmul double %22, 0x3FDCCCCCCCCCCCCC
  %24 = fptosi double %23 to i64
  %25 = add nsw i64 %10, %24
  %26 = sitofp i64 %4 to double
  %27 = fmul double %26, 0x3FDCCCCCCCCCCCCC
  %28 = fptosi double %27 to i64
  %29 = add nsw i64 %13, %28
  %30 = tail call i32 @gx_path_add_curve(ptr noundef %0, i64 noundef %17, i64 noundef %21, i64 noundef %25, i64 noundef %29, i64 noundef %3, i64 noundef %4) #62
  ret i32 %30
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gx_path_current_point(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #28 {
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  %4 = load i8, ptr %3, align 8, !tbaa !309
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  %8 = load <2 x i64>, ptr %7, align 8, !tbaa !18
  store <2 x i64> %8, ptr %1, align 8, !tbaa !18
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi i32 [ 0, %6 ], [ -14, %2 ]
  ret i32 %10
}

; Function Attrs: nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gx_path_bbox(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1) #60 {
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !527
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %15

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 10
  %8 = load i8, ptr %7, align 8, !tbaa !309
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %116, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  %12 = load <2 x i64>, ptr %11, align 8, !tbaa !18
  store <2 x i64> %12, ptr %1, align 8, !tbaa !18
  %13 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %1, i64 0, i32 1
  %14 = load <2 x i64>, ptr %11, align 8, !tbaa !18
  store <2 x i64> %14, ptr %13, align 8, !tbaa !18
  br label %116

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !693
  %18 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !695
  %20 = getelementptr inbounds %struct.subpath, ptr %19, i64 0, i32 4
  %21 = load ptr, ptr %20, align 8, !tbaa !644
  %22 = icmp eq ptr %17, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %1, ptr noundef nonnull align 8 dereferenceable(32) %24, i64 32, i1 false), !tbaa.struct !456
  br label %116

25:                                               ; preds = %15
  %26 = icmp eq ptr %17, null
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.segment_s, ptr %4, i64 0, i32 3
  %29 = load i64, ptr %28, align 8, !tbaa !534
  %30 = getelementptr inbounds %struct.segment_s, ptr %4, i64 0, i32 3, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !535
  br label %44

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1
  %34 = load i64, ptr %33, align 8, !tbaa.struct !456
  %35 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 0, i32 1
  %36 = load i64, ptr %35, align 8, !tbaa.struct !457
  %37 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 1
  %38 = load i64, ptr %37, align 8, !tbaa.struct !310
  %39 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 1, i32 1
  %40 = load i64, ptr %39, align 8, !tbaa.struct !458
  %41 = getelementptr inbounds %struct.segment_s, ptr %17, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !531
  %43 = icmp eq ptr %42, null
  br i1 %43, label %103, label %44

44:                                               ; preds = %32, %27
  %45 = phi ptr [ %42, %32 ], [ %4, %27 ]
  %46 = phi i64 [ %34, %32 ], [ %29, %27 ]
  %47 = phi i64 [ %36, %32 ], [ %31, %27 ]
  %48 = phi i64 [ %38, %32 ], [ %29, %27 ]
  %49 = phi i64 [ %40, %32 ], [ %31, %27 ]
  br label %50

50:                                               ; preds = %83, %44
  %51 = phi ptr [ %101, %83 ], [ %45, %44 ]
  %52 = phi i64 [ %93, %83 ], [ %46, %44 ]
  %53 = phi i64 [ %99, %83 ], [ %47, %44 ]
  %54 = phi i64 [ %92, %83 ], [ %48, %44 ]
  %55 = phi i64 [ %98, %83 ], [ %49, %44 ]
  %56 = getelementptr inbounds %struct.segment_s, ptr %51, i64 0, i32 2
  %57 = load i32, ptr %56, align 8, !tbaa !533
  %58 = icmp eq i32 %57, 3
  br i1 %58, label %59, label %83

59:                                               ; preds = %50
  %60 = getelementptr inbounds %struct.curve_segment, ptr %51, i64 0, i32 4
  %61 = load i64, ptr %60, align 8, !tbaa !536
  %62 = icmp slt i64 %61, %52
  %63 = tail call i64 @llvm.smax.i64(i64 %61, i64 %54)
  %64 = select i1 %62, i64 %54, i64 %63
  %65 = tail call i64 @llvm.smin.i64(i64 %61, i64 %52)
  %66 = getelementptr inbounds %struct.curve_segment, ptr %51, i64 0, i32 4, i32 1
  %67 = load i64, ptr %66, align 8, !tbaa !538
  %68 = icmp slt i64 %67, %53
  %69 = tail call i64 @llvm.smax.i64(i64 %67, i64 %55)
  %70 = select i1 %68, i64 %55, i64 %69
  %71 = tail call i64 @llvm.smin.i64(i64 %67, i64 %53)
  %72 = getelementptr inbounds %struct.curve_segment, ptr %51, i64 0, i32 5
  %73 = load i64, ptr %72, align 8, !tbaa !539
  %74 = icmp slt i64 %73, %65
  %75 = tail call i64 @llvm.smax.i64(i64 %73, i64 %64)
  %76 = select i1 %74, i64 %64, i64 %75
  %77 = tail call i64 @llvm.smin.i64(i64 %73, i64 %65)
  %78 = getelementptr inbounds %struct.curve_segment, ptr %51, i64 0, i32 5, i32 1
  %79 = load i64, ptr %78, align 8, !tbaa !540
  %80 = icmp slt i64 %79, %71
  br i1 %80, label %83, label %81

81:                                               ; preds = %59
  %82 = tail call i64 @llvm.smax.i64(i64 %79, i64 %70)
  br label %83

83:                                               ; preds = %81, %59, %50
  %84 = phi i64 [ %55, %50 ], [ %70, %59 ], [ %82, %81 ]
  %85 = phi i64 [ %54, %50 ], [ %76, %59 ], [ %76, %81 ]
  %86 = phi i64 [ %53, %50 ], [ %79, %59 ], [ %71, %81 ]
  %87 = phi i64 [ %52, %50 ], [ %77, %59 ], [ %77, %81 ]
  %88 = getelementptr inbounds %struct.segment_s, ptr %51, i64 0, i32 3
  %89 = load i64, ptr %88, align 8, !tbaa !534
  %90 = icmp slt i64 %89, %87
  %91 = tail call i64 @llvm.smax.i64(i64 %89, i64 %85)
  %92 = select i1 %90, i64 %85, i64 %91
  %93 = tail call i64 @llvm.smin.i64(i64 %89, i64 %87)
  %94 = getelementptr inbounds %struct.segment_s, ptr %51, i64 0, i32 3, i32 1
  %95 = load i64, ptr %94, align 8, !tbaa !535
  %96 = icmp slt i64 %95, %86
  %97 = tail call i64 @llvm.smax.i64(i64 %95, i64 %84)
  %98 = select i1 %96, i64 %84, i64 %97
  %99 = tail call i64 @llvm.smin.i64(i64 %95, i64 %86)
  %100 = getelementptr inbounds %struct.segment_s, ptr %51, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !531
  %102 = icmp eq ptr %101, null
  br i1 %102, label %103, label %50, !llvm.loop !717

103:                                              ; preds = %83, %32
  %104 = phi i64 [ %40, %32 ], [ %98, %83 ]
  %105 = phi i64 [ %38, %32 ], [ %92, %83 ]
  %106 = phi i64 [ %36, %32 ], [ %99, %83 ]
  %107 = phi i64 [ %34, %32 ], [ %93, %83 ]
  %108 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1
  store i64 %107, ptr %108, align 8, !tbaa.struct !456
  %109 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 0, i32 1
  store i64 %106, ptr %109, align 8, !tbaa.struct !457
  %110 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 1
  store i64 %105, ptr %110, align 8, !tbaa.struct !310
  %111 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 1, i32 1
  store i64 %104, ptr %111, align 8, !tbaa.struct !458
  %112 = load ptr, ptr %20, align 8, !tbaa !644
  store ptr %112, ptr %16, align 8, !tbaa !693
  store i64 %107, ptr %1, align 8, !tbaa.struct !456
  %113 = getelementptr inbounds i8, ptr %1, i64 8
  store i64 %106, ptr %113, align 8, !tbaa.struct !457
  %114 = getelementptr inbounds i8, ptr %1, i64 16
  store i64 %105, ptr %114, align 8, !tbaa.struct !310
  %115 = getelementptr inbounds i8, ptr %1, i64 24
  store i64 %104, ptr %115, align 8, !tbaa.struct !458
  br label %116

116:                                              ; preds = %103, %23, %10, %6
  %117 = phi i32 [ 0, %103 ], [ 0, %23 ], [ 0, %10 ], [ -14, %6 ]
  ret i32 %117
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @gx_path_is_void(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 7
  %3 = load i32, ptr %2, align 4, !tbaa !631
  %4 = icmp eq i32 %3, 0
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @gx_path_is_rectangle(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #42 {
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 6
  %4 = load i32, ptr %3, align 8, !tbaa !632
  %5 = icmp eq i32 %4, 1
  br i1 %5, label %6, label %74

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 7
  %8 = load i32, ptr %7, align 4, !tbaa !631
  %9 = icmp eq i32 %8, 4
  br i1 %9, label %10, label %74

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 8
  %12 = load i32, ptr %11, align 8, !tbaa !525
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %74

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %16 = load ptr, ptr %15, align 8, !tbaa !527
  %17 = getelementptr inbounds %struct.subpath, ptr %16, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !644
  %19 = getelementptr inbounds %struct.segment_s, ptr %18, i64 0, i32 2
  %20 = load i32, ptr %19, align 8, !tbaa !533
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %74

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.subpath, ptr %16, i64 0, i32 3
  %24 = load i64, ptr %23, align 8, !tbaa !648
  %25 = getelementptr inbounds %struct.subpath, ptr %16, i64 0, i32 3, i32 1
  %26 = load i64, ptr %25, align 8, !tbaa !647
  %27 = getelementptr inbounds %struct.subpath, ptr %16, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !700
  %29 = getelementptr inbounds %struct.segment_s, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !531
  %31 = getelementptr inbounds %struct.segment_s, ptr %30, i64 0, i32 3
  %32 = load i64, ptr %31, align 8, !tbaa !534
  %33 = getelementptr inbounds %struct.segment_s, ptr %30, i64 0, i32 3, i32 1
  %34 = load i64, ptr %33, align 8, !tbaa !535
  %35 = getelementptr inbounds %struct.segment_s, ptr %30, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !531
  %37 = getelementptr inbounds %struct.segment_s, ptr %28, i64 0, i32 3
  %38 = load i64, ptr %37, align 8, !tbaa !534
  %39 = icmp eq i64 %24, %38
  br i1 %39, label %40, label %52

40:                                               ; preds = %22
  %41 = getelementptr inbounds %struct.segment_s, ptr %28, i64 0, i32 3, i32 1
  %42 = load i64, ptr %41, align 8, !tbaa !535
  %43 = icmp eq i64 %42, %34
  br i1 %43, label %44, label %52

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.segment_s, ptr %36, i64 0, i32 3
  %46 = load i64, ptr %45, align 8, !tbaa !534
  %47 = icmp eq i64 %32, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.segment_s, ptr %36, i64 0, i32 3, i32 1
  %50 = load i64, ptr %49, align 8, !tbaa !535
  %51 = icmp eq i64 %50, %26
  br i1 %51, label %66, label %52

52:                                               ; preds = %48, %44, %40, %22
  %53 = getelementptr inbounds %struct.segment_s, ptr %36, i64 0, i32 3
  %54 = load i64, ptr %53, align 8, !tbaa !534
  %55 = icmp eq i64 %24, %54
  br i1 %55, label %56, label %74

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.segment_s, ptr %36, i64 0, i32 3, i32 1
  %58 = load i64, ptr %57, align 8, !tbaa !535
  %59 = icmp eq i64 %58, %34
  %60 = icmp eq i64 %32, %38
  %61 = select i1 %59, i1 %60, i1 false
  br i1 %61, label %62, label %74

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.segment_s, ptr %28, i64 0, i32 3, i32 1
  %64 = load i64, ptr %63, align 8, !tbaa !535
  %65 = icmp eq i64 %64, %26
  br i1 %65, label %66, label %74

66:                                               ; preds = %62, %48
  %67 = tail call i64 @llvm.smin.i64(i64 %24, i64 %32)
  %68 = tail call i64 @llvm.smax.i64(i64 %24, i64 %32)
  store i64 %67, ptr %1, align 8
  %69 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %1, i64 0, i32 1
  store i64 %68, ptr %69, align 8
  %70 = tail call i64 @llvm.smin.i64(i64 %26, i64 %34)
  %71 = tail call i64 @llvm.smax.i64(i64 %26, i64 %34)
  %72 = getelementptr inbounds %struct.timeval, ptr %1, i64 0, i32 1
  store i64 %70, ptr %72, align 8, !tbaa !462
  %73 = getelementptr inbounds %struct.gs_fixed_rect_s, ptr %1, i64 0, i32 1, i32 1
  store i64 %71, ptr %73, align 8, !tbaa !461
  br label %74

74:                                               ; preds = %66, %62, %56, %52, %14, %10, %6, %2
  %75 = phi i32 [ 0, %62 ], [ 0, %56 ], [ 0, %52 ], [ 0, %14 ], [ 0, %10 ], [ 0, %6 ], [ 0, %2 ], [ 1, %66 ]
  ret i32 %75
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @gx_cpath_box_for_check(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #33 {
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %1, ptr noundef nonnull align 8 dereferenceable(32) %3, i64 32, i1 false), !tbaa.struct !456
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @gx_cpath_includes_rectangle(ptr nocapture noundef readonly %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4) #12 {
  %6 = icmp sgt i64 %1, %3
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 3
  %8 = load i64, ptr %7, align 8, !tbaa !440
  br i1 %6, label %15, label %9

9:                                                ; preds = %5
  %10 = icmp sgt i64 %8, %1
  br i1 %10, label %35, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 3, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !442
  %14 = icmp slt i64 %13, %3
  br i1 %14, label %35, label %21

15:                                               ; preds = %5
  %16 = icmp sgt i64 %8, %3
  br i1 %16, label %35, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 3, i32 1
  %19 = load i64, ptr %18, align 8, !tbaa !442
  %20 = icmp slt i64 %19, %1
  br i1 %20, label %35, label %21

21:                                               ; preds = %17, %11
  %22 = icmp sgt i64 %2, %4
  %23 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 3, i32 0, i32 1
  %24 = load i64, ptr %23, align 8, !tbaa !441
  br i1 %22, label %27, label %25

25:                                               ; preds = %21
  %26 = icmp sgt i64 %24, %2
  br i1 %26, label %35, label %29

27:                                               ; preds = %21
  %28 = icmp sgt i64 %24, %4
  br i1 %28, label %35, label %29

29:                                               ; preds = %27, %25
  %30 = phi i64 [ %4, %25 ], [ %2, %27 ]
  %31 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 3, i32 1, i32 1
  %32 = load i64, ptr %31, align 8, !tbaa !443
  %33 = icmp sge i64 %32, %30
  %34 = zext i1 %33 to i32
  br label %35

35:                                               ; preds = %29, %27, %25, %17, %15, %11, %9
  %36 = phi i32 [ 0, %17 ], [ 0, %15 ], [ 0, %11 ], [ 0, %9 ], [ 0, %25 ], [ 0, %27 ], [ %34, %29 ]
  ret i32 %36
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_copy(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @copy_path(ptr noundef %0, ptr noundef %1, ptr noundef nonnull @gx_path_add_curve) #62
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @copy_path(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2) #0 {
  %4 = alloca { %struct.op_def, %struct.gs_fixed_rect_s, ptr, %struct.gs_fixed_rect_s }, align 8
  %5 = alloca { ptr, i32, i32, i32, %struct.timeval }, align 8
  call void @llvm.lifetime.start.p0(i64 88, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %5)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %4, ptr noundef nonnull align 8 dereferenceable(88) %0, i64 88, i1 false), !tbaa.struct !522
  %6 = getelementptr inbounds i8, ptr %0, i64 88
  %7 = load ptr, ptr %6, align 8, !tbaa.struct !718
  %8 = getelementptr inbounds i8, ptr %0, i64 96
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %5, ptr noundef nonnull align 8 dereferenceable(40) %8, i64 40, i1 false), !tbaa.struct !719
  %9 = getelementptr inbounds i8, ptr %0, i64 136
  %10 = load i64, ptr %9, align 8, !tbaa.struct !720
  tail call void @gx_path_init(ptr noundef %1, ptr noundef %0) #64
  %11 = icmp eq ptr %7, null
  br i1 %11, label %54, label %12

12:                                               ; preds = %50, %3
  %13 = phi ptr [ %52, %50 ], [ %7, %3 ]
  %14 = getelementptr inbounds %struct.segment_s, ptr %13, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !533
  switch i32 %15, label %50 [
    i32 0, label %16
    i32 3, label %22
    i32 1, label %36
    i32 2, label %42
  ]

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.segment_s, ptr %13, i64 0, i32 3
  %18 = load i64, ptr %17, align 8, !tbaa !534
  %19 = getelementptr inbounds %struct.segment_s, ptr %13, i64 0, i32 3, i32 1
  %20 = load i64, ptr %19, align 8, !tbaa !535
  %21 = tail call i32 @gx_path_add_point(ptr noundef %1, i64 noundef %18, i64 noundef %20) #64
  br label %44

22:                                               ; preds = %12
  %23 = getelementptr inbounds %struct.curve_segment, ptr %13, i64 0, i32 4
  %24 = load i64, ptr %23, align 8, !tbaa !536
  %25 = getelementptr inbounds %struct.curve_segment, ptr %13, i64 0, i32 4, i32 1
  %26 = load i64, ptr %25, align 8, !tbaa !538
  %27 = getelementptr inbounds %struct.curve_segment, ptr %13, i64 0, i32 5
  %28 = load i64, ptr %27, align 8, !tbaa !539
  %29 = getelementptr inbounds %struct.curve_segment, ptr %13, i64 0, i32 5, i32 1
  %30 = load i64, ptr %29, align 8, !tbaa !540
  %31 = getelementptr inbounds %struct.curve_segment, ptr %13, i64 0, i32 3
  %32 = load i64, ptr %31, align 8, !tbaa !714
  %33 = getelementptr inbounds %struct.curve_segment, ptr %13, i64 0, i32 3, i32 1
  %34 = load i64, ptr %33, align 8, !tbaa !715
  %35 = tail call i32 %2(ptr noundef %1, i64 noundef %24, i64 noundef %26, i64 noundef %28, i64 noundef %30, i64 noundef %32, i64 noundef %34) #64
  br label %44

36:                                               ; preds = %12
  %37 = getelementptr inbounds %struct.segment_s, ptr %13, i64 0, i32 3
  %38 = load i64, ptr %37, align 8, !tbaa !534
  %39 = getelementptr inbounds %struct.segment_s, ptr %13, i64 0, i32 3, i32 1
  %40 = load i64, ptr %39, align 8, !tbaa !535
  %41 = tail call i32 @gx_path_add_line(ptr noundef %1, i64 noundef %38, i64 noundef %40) #64
  br label %44

42:                                               ; preds = %12
  %43 = tail call i32 @gx_path_close_subpath(ptr noundef %1) #64
  br label %44

44:                                               ; preds = %42, %36, %22, %16
  %45 = phi i32 [ %43, %42 ], [ %41, %36 ], [ %35, %22 ], [ %21, %16 ]
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %44
  %.lcssa = phi i32 [ %45, %44 ]
  tail call void @gx_path_release(ptr noundef %1) #64
  %48 = icmp eq ptr %1, %0
  br i1 %48, label %49, label %57

49:                                               ; preds = %47
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %0, ptr noundef nonnull align 8 dereferenceable(88) %4, i64 88, i1 false), !tbaa.struct !522
  store ptr %7, ptr %6, align 8, !tbaa.struct !718
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %8, ptr noundef nonnull align 8 dereferenceable(40) %5, i64 40, i1 false), !tbaa.struct !719
  store i64 %10, ptr %9, align 8, !tbaa.struct !720
  br label %57

50:                                               ; preds = %44, %12
  %51 = getelementptr inbounds %struct.segment_s, ptr %13, i64 0, i32 1
  %52 = load ptr, ptr %51, align 8, !tbaa !531
  %53 = icmp eq ptr %52, null
  br i1 %53, label %54, label %12, !llvm.loop !721

54:                                               ; preds = %50, %3
  %55 = getelementptr inbounds %struct.gx_path_s, ptr %1, i64 0, i32 9
  %56 = getelementptr inbounds i8, ptr %5, i64 24
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %55, ptr noundef nonnull align 8 dereferenceable(16) %56, i64 16, i1 false), !tbaa.struct !310
  br label %57

57:                                               ; preds = %54, %49, %47
  %58 = phi i32 [ 0, %54 ], [ %.lcssa, %49 ], [ %.lcssa, %47 ]
  call void @llvm.lifetime.end.p0(i64 88, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %5)
  ret i32 %58
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_merge(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.gx_path_s, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !695
  %5 = icmp eq ptr %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !695
  %9 = getelementptr inbounds %struct.subpath, ptr %8, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8, !tbaa !644
  %11 = getelementptr inbounds %struct.subpath, ptr %4, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !644
  %13 = icmp eq ptr %10, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %6
  tail call void @gx_path_release(ptr noundef nonnull %1) #64
  br label %15

15:                                               ; preds = %14, %6, %2
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(144) %1, ptr noundef nonnull align 8 dereferenceable(144) %0, i64 144, i1 false), !tbaa.struct !522
  %16 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 12
  store i8 1, ptr %16, align 2, !tbaa !694
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @gx_path_translate(ptr nocapture noundef %0, i64 noundef %1, i64 noundef %2) #29 {
  %4 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1
  %5 = load i64, ptr %4, align 8, !tbaa !639
  %6 = add nsw i64 %5, %1
  store i64 %6, ptr %4, align 8, !tbaa !639
  %7 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 0, i32 1
  %8 = load i64, ptr %7, align 8, !tbaa !640
  %9 = add nsw i64 %8, %2
  store i64 %9, ptr %7, align 8, !tbaa !640
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !641
  %12 = add nsw i64 %11, %1
  store i64 %12, ptr %10, align 8, !tbaa !641
  %13 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 1, i32 1, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !642
  %15 = add nsw i64 %14, %2
  store i64 %15, ptr %13, align 8, !tbaa !642
  %16 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  %17 = load i64, ptr %16, align 8, !tbaa !313
  %18 = add nsw i64 %17, %1
  store i64 %18, ptr %16, align 8, !tbaa !313
  %19 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  %20 = load i64, ptr %19, align 8, !tbaa !314
  %21 = add nsw i64 %20, %2
  store i64 %21, ptr %19, align 8, !tbaa !314
  %22 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %23 = load ptr, ptr %22, align 8, !tbaa !7
  %24 = icmp eq ptr %23, null
  br i1 %24, label %53, label %25

25:                                               ; preds = %43, %3
  %26 = phi ptr [ %51, %43 ], [ %23, %3 ]
  %27 = getelementptr inbounds %struct.segment_s, ptr %26, i64 0, i32 2
  %28 = load i32, ptr %27, align 8, !tbaa !533
  %29 = icmp eq i32 %28, 3
  br i1 %29, label %30, label %43

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.curve_segment, ptr %26, i64 0, i32 4
  %32 = load i64, ptr %31, align 8, !tbaa !536
  %33 = add nsw i64 %32, %1
  store i64 %33, ptr %31, align 8, !tbaa !536
  %34 = getelementptr inbounds %struct.curve_segment, ptr %26, i64 0, i32 4, i32 1
  %35 = load i64, ptr %34, align 8, !tbaa !538
  %36 = add nsw i64 %35, %2
  store i64 %36, ptr %34, align 8, !tbaa !538
  %37 = getelementptr inbounds %struct.curve_segment, ptr %26, i64 0, i32 5
  %38 = load i64, ptr %37, align 8, !tbaa !539
  %39 = add nsw i64 %38, %1
  store i64 %39, ptr %37, align 8, !tbaa !539
  %40 = getelementptr inbounds %struct.curve_segment, ptr %26, i64 0, i32 5, i32 1
  %41 = load i64, ptr %40, align 8, !tbaa !540
  %42 = add nsw i64 %41, %2
  store i64 %42, ptr %40, align 8, !tbaa !540
  br label %43

43:                                               ; preds = %30, %25
  %44 = getelementptr inbounds %struct.segment_s, ptr %26, i64 0, i32 3
  %45 = load i64, ptr %44, align 8, !tbaa !534
  %46 = add nsw i64 %45, %1
  store i64 %46, ptr %44, align 8, !tbaa !534
  %47 = getelementptr inbounds %struct.segment_s, ptr %26, i64 0, i32 3, i32 1
  %48 = load i64, ptr %47, align 8, !tbaa !535
  %49 = add nsw i64 %48, %2
  store i64 %49, ptr %47, align 8, !tbaa !535
  %50 = getelementptr inbounds %struct.segment_s, ptr %26, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !7
  %52 = icmp eq ptr %51, null
  br i1 %52, label %53, label %25, !llvm.loop !722

53:                                               ; preds = %43, %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_path_flatten(ptr noundef %0, ptr noundef %1, double noundef %2) #0 {
  %4 = fmul double %2, 4.096000e+03
  %5 = fptrunc double %4 to float
  %6 = fptosi float %5 to i64
  store i64 %6, ptr @scaled_flat, align 8, !tbaa !18
  %7 = fpext float %5 to double
  %8 = fmul double %7, 4.500000e-01
  %9 = fptrunc double %8 to float
  store float %9, ptr @scaled_flat_sq, align 4, !tbaa !103
  %10 = tail call i32 @copy_path(ptr noundef %0, ptr noundef %1, ptr noundef nonnull @flatten_curve) #62
  ret i32 %10
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @flatten_curve(ptr noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, i64 noundef %6) #0 {
  %8 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9
  %9 = load i64, ptr %8, align 8, !tbaa !313
  %10 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 9, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !314
  br label %12

12:                                               ; preds = %80, %7
  %13 = phi i64 [ %11, %7 ], [ %104, %80 ]
  %14 = phi i64 [ %9, %7 ], [ %102, %80 ]
  %15 = phi i64 [ %4, %7 ], [ %96, %80 ]
  %16 = phi i64 [ %3, %7 ], [ %94, %80 ]
  %17 = phi i64 [ %2, %7 ], [ %100, %80 ]
  %18 = phi i64 [ %1, %7 ], [ %98, %80 ]
  %19 = sub nsw i64 %5, %14
  %20 = sub nsw i64 %6, %13
  %21 = tail call i64 @llvm.abs.i64(i64 %19, i1 true)
  %22 = tail call i64 @llvm.abs.i64(i64 %20, i1 true)
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %53, label %24

24:                                               ; preds = %12
  %25 = icmp eq i64 %14, %5
  br i1 %25, label %109, label %26

26:                                               ; preds = %24
  %27 = sitofp i64 %20 to float
  %28 = sitofp i64 %19 to float
  %29 = fdiv float %27, %28
  %30 = fmul float %29, %29
  %31 = load float, ptr @scaled_flat_sq, align 4, !tbaa !103
  %32 = fmul float %30, %31
  %33 = fptosi float %32 to i64
  %34 = load i64, ptr @scaled_flat, align 8, !tbaa !18
  %35 = add nsw i64 %34, %33
  %36 = sub nsw i64 %18, %14
  %37 = sitofp i64 %36 to float
  %38 = fmul float %29, %37
  %39 = fptosi float %38 to i64
  %40 = sub i64 %13, %17
  %41 = add i64 %40, %39
  %42 = tail call i64 @llvm.abs.i64(i64 %41, i1 true)
  %43 = icmp sgt i64 %42, %35
  br i1 %43, label %80, label %44

44:                                               ; preds = %26
  %45 = sub nsw i64 %16, %14
  %46 = sitofp i64 %45 to float
  %47 = fmul float %29, %46
  %48 = fptosi float %47 to i64
  %49 = sub i64 %13, %15
  %50 = add i64 %49, %48
  %51 = tail call i64 @llvm.abs.i64(i64 %50, i1 true)
  %52 = icmp sgt i64 %51, %35
  br i1 %52, label %80, label %107

53:                                               ; preds = %12
  %54 = sitofp i64 %19 to float
  %55 = sitofp i64 %20 to float
  %56 = fdiv float %54, %55
  %57 = fmul float %56, %56
  %58 = load float, ptr @scaled_flat_sq, align 4, !tbaa !103
  %59 = fmul float %57, %58
  %60 = fptosi float %59 to i64
  %61 = load i64, ptr @scaled_flat, align 8, !tbaa !18
  %62 = add nsw i64 %61, %60
  %63 = sub nsw i64 %17, %13
  %64 = sitofp i64 %63 to float
  %65 = fmul float %56, %64
  %66 = fptosi float %65 to i64
  %67 = sub i64 %14, %18
  %68 = add i64 %67, %66
  %69 = tail call i64 @llvm.abs.i64(i64 %68, i1 true)
  %70 = icmp sgt i64 %69, %62
  br i1 %70, label %80, label %71

71:                                               ; preds = %53
  %72 = sub nsw i64 %15, %13
  %73 = sitofp i64 %72 to float
  %74 = fmul float %56, %73
  %75 = fptosi float %74 to i64
  %76 = sub i64 %14, %16
  %77 = add i64 %76, %75
  %78 = tail call i64 @llvm.abs.i64(i64 %77, i1 true)
  %79 = icmp sgt i64 %78, %62
  br i1 %79, label %80, label %107

80:                                               ; preds = %71, %53, %44, %26
  %81 = add nsw i64 %18, %14
  %82 = ashr i64 %81, 1
  %83 = add nsw i64 %17, %13
  %84 = ashr i64 %83, 1
  %85 = add nsw i64 %18, %16
  %86 = ashr i64 %85, 1
  %87 = add nsw i64 %17, %15
  %88 = ashr i64 %87, 1
  %89 = add nsw i64 %82, %86
  %90 = ashr i64 %89, 1
  %91 = add nsw i64 %84, %88
  %92 = ashr i64 %91, 1
  %93 = add nsw i64 %16, %5
  %94 = ashr i64 %93, 1
  %95 = add nsw i64 %15, %6
  %96 = ashr i64 %95, 1
  %97 = add nsw i64 %86, %94
  %98 = ashr i64 %97, 1
  %99 = add nsw i64 %88, %96
  %100 = ashr i64 %99, 1
  %101 = add nsw i64 %90, %98
  %102 = ashr i64 %101, 1
  %103 = add nsw i64 %92, %100
  %104 = ashr i64 %103, 1
  %105 = tail call i32 @flatten_curve(ptr noundef %0, i64 noundef %82, i64 noundef %84, i64 noundef %90, i64 noundef %92, i64 noundef %102, i64 noundef %104) #62
  %106 = icmp sgt i32 %105, -1
  br i1 %106, label %12, label %109

107:                                              ; preds = %71, %44
  %108 = tail call i32 @gx_path_add_line(ptr noundef %0, i64 noundef %5, i64 noundef %6) #64
  br label %109

109:                                              ; preds = %107, %80, %24
  %110 = phi i32 [ %108, %107 ], [ 0, %24 ], [ %105, %80 ]
  ret i32 %110
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_stroke_fill(ptr noundef %0, ptr noundef %1) #0 {
  store ptr null, ptr @stroke_path, align 8, !tbaa !7
  %3 = tail call i32 @stroke(ptr noundef %0, ptr noundef nonnull @stroke_fill, ptr noundef %1) #62, !range !263
  %4 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  %5 = icmp eq ptr %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = icmp sgt i32 %3, -1
  br i1 %7, label %8, label %13

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %1, i64 0, i32 14
  %10 = load ptr, ptr %9, align 8, !tbaa !333
  %11 = tail call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef nonnull %4, ptr noundef %10, ptr noundef %1, i32 noundef -1, i64 noundef 0) #64
  %12 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  br label %13

13:                                               ; preds = %8, %6
  %14 = phi ptr [ %12, %8 ], [ %4, %6 ]
  %15 = phi i32 [ %11, %8 ], [ %3, %6 ]
  tail call void @gx_path_release(ptr noundef %14) #64
  br label %16

16:                                               ; preds = %13, %2
  %17 = phi i32 [ %15, %13 ], [ %3, %2 ]
  ret i32 %17
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @stroke_fill(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 4
  %6 = load i32, ptr %5, align 8, !tbaa !723
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %33, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 8
  %10 = load ptr, ptr %9, align 8, !tbaa !305
  %11 = load i64, ptr %1, align 8, !tbaa !726
  %12 = getelementptr inbounds %struct.timeval, ptr %1, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !727
  %14 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1
  %15 = load i64, ptr %14, align 8, !tbaa !728
  %16 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 0, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !729
  %18 = tail call i32 @gx_cpath_includes_rectangle(ptr noundef %10, i64 noundef %11, i64 noundef %13, i64 noundef %15, i64 noundef %17) #64
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %8
  %21 = load i64, ptr %1, align 8, !tbaa !726
  %22 = load i64, ptr %12, align 8, !tbaa !727
  %23 = load i64, ptr %14, align 8, !tbaa !728
  %24 = load i64, ptr %16, align 8, !tbaa !729
  %25 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 14
  %26 = load ptr, ptr %25, align 8, !tbaa !333
  %27 = tail call i32 (i64, i64, i64, i64, ptr, ptr, ...) @gz_draw_line_fixed(i64 noundef %21, i64 noundef %22, i64 noundef %23, i64 noundef %24, ptr noundef %26, ptr noundef nonnull %3) #64
  br label %47

28:                                               ; preds = %8
  %29 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 2
  store i64 1024, ptr %29, align 8, !tbaa !730
  %30 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 2, i32 1
  store i64 1024, ptr %30, align 8, !tbaa !731
  %31 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 3
  store i64 512, ptr %31, align 8, !tbaa !732
  %32 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 3, i32 1
  store i64 512, ptr %32, align 8, !tbaa !733
  tail call void @compute_caps(ptr noundef nonnull %1, ptr nonnull poison) #62
  br label %33

33:                                               ; preds = %28, %4
  %34 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %33
  store ptr @stroke_path_body, ptr @stroke_path, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 1
  tail call void @gx_path_init(ptr noundef nonnull @stroke_path_body, ptr noundef nonnull %37) #64
  br label %38

38:                                               ; preds = %36, %33
  %39 = tail call i32 @stroke_add(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3) #62
  %40 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  %41 = icmp eq ptr %40, @stroke_path_body
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 14
  %44 = load ptr, ptr %43, align 8, !tbaa !333
  %45 = tail call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef nonnull @stroke_path_body, ptr noundef %44, ptr noundef %3, i32 noundef -1, i64 noundef 0) #64
  %46 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  tail call void @gx_path_release(ptr noundef %46) #64
  store ptr null, ptr @stroke_path, align 8, !tbaa !7
  br label %47

47:                                               ; preds = %42, %38, %20
  %48 = phi i32 [ %27, %20 ], [ 0, %42 ], [ 0, %38 ]
  ret i32 %48
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @stroke(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) #0 {
  %4 = alloca %struct.gx_path_s, align 8
  %5 = alloca float, align 8
  %6 = alloca %struct.partial_line_s, align 8
  %7 = alloca %struct.partial_line_s, align 8
  %8 = alloca %struct.partial_line_s, align 8
  %9 = alloca %struct.gs_point_s, align 4
  %10 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 10
  %11 = load ptr, ptr %10, align 8, !tbaa !497
  %12 = getelementptr inbounds %struct.line_params_s, ptr %11, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !507
  %14 = getelementptr inbounds %struct.line_params_s, ptr %11, i64 0, i32 5, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !508
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %4) #65
  %16 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2, i32 2
  %18 = load i64, ptr %17, align 8, !tbaa !18
  %19 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2, i32 4
  %20 = load i64, ptr %19, align 8, !tbaa !18
  %21 = or i64 %20, %18
  %22 = and i64 %21, 9223372036854775807
  %23 = icmp eq i64 %22, 0
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  %24 = load float, ptr %11, align 8, !tbaa !498
  store float %24, ptr %5, align 8, !tbaa !103
  %25 = load float, ptr %16, align 8, !tbaa !368
  %26 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 2, i32 6
  %27 = load float, ptr %26, align 8, !tbaa !371
  %28 = load i64, ptr %5, align 8
  %29 = and i64 %28, 9223372036854775807
  %30 = icmp eq i64 %29, 0
  %31 = trunc i64 %28 to i32
  %32 = bitcast i32 %31 to float
  br i1 %30, label %33, label %34

33:                                               ; preds = %3
  store float 0x3F847AE140000000, ptr %5, align 8, !tbaa !103
  br label %46

34:                                               ; preds = %3
  br i1 %23, label %35, label %46

35:                                               ; preds = %34
  %36 = fcmp olt float %25, 0.000000e+00
  %37 = fneg float %25
  %38 = select i1 %36, float %37, float %25
  %39 = fcmp olt float %27, 0.000000e+00
  %40 = fneg float %27
  %41 = select i1 %39, float %40, float %27
  %42 = fcmp ogt float %38, %41
  %43 = select i1 %42, float %38, float %41
  %44 = fmul float %43, %32
  %45 = fcmp uge float %44, 7.500000e-01
  br label %46

46:                                               ; preds = %35, %34, %33
  %47 = phi float [ 0x3F847AE140000000, %33 ], [ %32, %35 ], [ %32, %34 ]
  %48 = phi i1 [ false, %33 ], [ %45, %35 ], [ true, %34 ]
  %49 = fmul float %47, 4.096000e+03
  %50 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 8
  %51 = load i32, ptr %50, align 8, !tbaa !525
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.gx_path_s, ptr %0, i64 0, i32 4
  %55 = load ptr, ptr %54, align 8, !tbaa !527
  %56 = icmp eq ptr %55, null
  br i1 %56, label %370, label %67

57:                                               ; preds = %46
  %58 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 21
  %59 = load float, ptr %58, align 8, !tbaa !526
  %60 = fpext float %59 to double
  %61 = call i32 @gx_path_flatten(ptr noundef nonnull %0, ptr noundef nonnull %4, double noundef %60) #64
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %370, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.gx_path_s, ptr %4, i64 0, i32 4
  %65 = load ptr, ptr %64, align 8, !tbaa !527
  %66 = icmp eq ptr %65, null
  br i1 %66, label %366, label %67

67:                                               ; preds = %63, %53
  %68 = phi ptr [ %65, %63 ], [ %55, %53 ]
  %69 = getelementptr inbounds %struct.line_params_s, ptr %11, i64 0, i32 5, i32 3
  %70 = getelementptr inbounds %struct.line_params_s, ptr %11, i64 0, i32 5, i32 4
  %71 = getelementptr inbounds %struct.line_params_s, ptr %11, i64 0, i32 5, i32 5
  %72 = icmp ne i32 %15, 0
  %73 = select i1 %48, i1 true, i1 %72
  %74 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 2
  %75 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 2, i32 1
  %76 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 3
  %77 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 3, i32 1
  %78 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 4
  %79 = getelementptr inbounds %struct.gs_point_s, ptr %9, i64 0, i32 1
  %80 = getelementptr inbounds %struct.timeval, ptr %6, i64 0, i32 1
  %81 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1
  %82 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 0, i32 1
  %83 = getelementptr inbounds %struct.endpoint_s, ptr %6, i64 0, i32 1
  %84 = getelementptr inbounds %struct.endpoint_s, ptr %6, i64 0, i32 1, i32 1
  %85 = getelementptr inbounds %struct.endpoint_s, ptr %6, i64 0, i32 2
  %86 = getelementptr inbounds %struct.endpoint_s, ptr %6, i64 0, i32 2, i32 1
  %87 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 1
  %88 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 1, i32 1
  %89 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 2
  %90 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 2, i32 1
  %91 = getelementptr inbounds %struct.endpoint_s, ptr %6, i64 0, i32 3
  %92 = getelementptr inbounds %struct.endpoint_s, ptr %6, i64 0, i32 3, i32 1
  %93 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 3
  %94 = getelementptr inbounds %struct.partial_line_s, ptr %6, i64 0, i32 1, i32 3, i32 1
  %95 = getelementptr inbounds %struct.gs_state_s, ptr %2, i64 0, i32 14
  br label %96

96:                                               ; preds = %364, %67
  %97 = phi ptr [ %68, %67 ], [ %357, %364 ]
  %98 = getelementptr inbounds %struct.subpath, ptr %97, i64 0, i32 5
  %99 = load i32, ptr %98, align 8, !tbaa !708
  %100 = getelementptr inbounds %struct.subpath, ptr %97, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !700
  %102 = getelementptr inbounds %struct.subpath, ptr %97, i64 0, i32 3
  %103 = load i64, ptr %102, align 8, !tbaa !648
  %104 = getelementptr inbounds %struct.subpath, ptr %97, i64 0, i32 3, i32 1
  %105 = load i64, ptr %104, align 8, !tbaa !647
  call void @llvm.lifetime.start.p0(i64 168, ptr nonnull %6) #65
  call void @llvm.lifetime.start.p0(i64 168, ptr nonnull %7) #65
  call void @llvm.lifetime.start.p0(i64 168, ptr nonnull %8) #65
  %106 = icmp eq i32 %99, 0
  br i1 %106, label %356, label %107

107:                                              ; preds = %96
  %108 = load i32, ptr %69, align 8, !tbaa !510
  %109 = trunc i32 %108 to i8
  %110 = load float, ptr %71, align 8, !tbaa !512
  %111 = load i32, ptr %70, align 4, !tbaa !511
  br label %112

112:                                              ; preds = %331, %107
  %113 = phi i32 [ %122, %331 ], [ %99, %107 ]
  %114 = phi ptr [ %338, %331 ], [ %101, %107 ]
  %115 = phi i32 [ %336, %331 ], [ 0, %107 ]
  %116 = phi float [ %335, %331 ], [ %110, %107 ]
  %117 = phi i32 [ %334, %331 ], [ %111, %107 ]
  %118 = phi i8 [ %333, %331 ], [ %109, %107 ]
  %119 = phi i32 [ %332, %331 ], [ 0, %107 ]
  %120 = phi i64 [ %126, %331 ], [ %105, %107 ]
  %121 = phi i64 [ %124, %331 ], [ %103, %107 ]
  %122 = add nsw i32 %113, -1
  %123 = getelementptr inbounds %struct.segment_s, ptr %114, i64 0, i32 3
  %124 = load i64, ptr %123, align 8, !tbaa !706
  %125 = getelementptr inbounds %struct.segment_s, ptr %114, i64 0, i32 3, i32 1
  %126 = load i64, ptr %125, align 8, !tbaa !707
  %127 = icmp eq i64 %124, %121
  %128 = icmp eq i64 %126, %120
  %129 = select i1 %127, i1 %128, i1 false
  br i1 %129, label %331, label %130

130:                                              ; preds = %112
  br i1 %73, label %131, label %193

131:                                              ; preds = %130
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #65
  %132 = sub nsw i64 %124, %121
  %133 = sub nsw i64 %126, %120
  %134 = sitofp i64 %132 to float
  %135 = sitofp i64 %133 to float
  br i1 %23, label %142, label %136

136:                                              ; preds = %131
  %137 = fpext float %134 to double
  %138 = fpext float %135 to double
  %139 = call i32 (ptr, double, double, ptr, ...) @gs_idtransform(ptr noundef %2, double noundef %137, double noundef %138, ptr noundef nonnull %9) #64
  %140 = load float, ptr %9, align 4, !tbaa !230
  %141 = load float, ptr %79, align 4, !tbaa !232
  br label %145

142:                                              ; preds = %131
  %143 = fdiv float %134, %25
  %144 = fdiv float %135, %27
  br label %145

145:                                              ; preds = %142, %136
  %146 = phi float [ %144, %142 ], [ %141, %136 ]
  %147 = phi float [ %143, %142 ], [ %140, %136 ]
  %148 = fmul float %146, %146
  %149 = call float @llvm.fmuladd.f32(float %147, float %147, float %148)
  %150 = call float @llvm.sqrt.f32(float %149)
  br i1 %48, label %151, label %192

151:                                              ; preds = %145
  %152 = fdiv float %49, %150
  %153 = fmul float %152, %147
  store float %153, ptr %9, align 4, !tbaa !230
  %154 = fmul float %152, %146
  store float %154, ptr %79, align 4, !tbaa !232
  %155 = fmul float %25, %154
  %156 = fptosi float %155 to i64
  %157 = sub nsw i64 0, %156
  store i64 %157, ptr %74, align 8, !tbaa !730
  %158 = fmul float %27, %153
  %159 = fptosi float %158 to i64
  store i64 %159, ptr %75, align 8, !tbaa !731
  br i1 %23, label %169, label %160

160:                                              ; preds = %151
  %161 = load float, ptr %19, align 8, !tbaa !370
  %162 = fmul float %153, %161
  %163 = fptosi float %162 to i64
  %164 = sub i64 %163, %156
  store i64 %164, ptr %74, align 8, !tbaa !730
  %165 = load float, ptr %17, align 8, !tbaa !369
  %166 = fmul float %154, %165
  %167 = fptosi float %166 to i64
  %168 = sub nsw i64 %159, %167
  store i64 %168, ptr %75, align 8, !tbaa !731
  br label %169

169:                                              ; preds = %160, %151
  %170 = phi i64 [ %168, %160 ], [ %159, %151 ]
  %171 = phi i64 [ %164, %160 ], [ %157, %151 ]
  %172 = call i64 @llvm.abs.i64(i64 %171, i1 true)
  %173 = call i64 @llvm.abs.i64(i64 %170, i1 true)
  %174 = add nuw nsw i64 %173, %172
  %175 = icmp ult i64 %174, 3072
  %176 = zext i1 %175 to i32
  store i32 %176, ptr %78, align 8, !tbaa !723
  br i1 %175, label %177, label %178

177:                                              ; preds = %169
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %74, i8 0, i64 32, i1 false)
  br label %194

178:                                              ; preds = %169
  %179 = fmul float %25, %153
  %180 = fptosi float %179 to i64
  store i64 %180, ptr %76, align 8, !tbaa !732
  %181 = fmul float %27, %154
  %182 = fptosi float %181 to i64
  store i64 %182, ptr %77, align 8, !tbaa !733
  br i1 %23, label %194, label %183

183:                                              ; preds = %178
  %184 = load float, ptr %19, align 8, !tbaa !370
  %185 = fmul float %154, %184
  %186 = fptosi float %185 to i64
  %187 = add nsw i64 %186, %180
  store i64 %187, ptr %76, align 8, !tbaa !732
  %188 = load float, ptr %17, align 8, !tbaa !369
  %189 = fmul float %153, %188
  %190 = fptosi float %189 to i64
  %191 = add nsw i64 %190, %182
  store i64 %191, ptr %77, align 8, !tbaa !733
  br label %194

192:                                              ; preds = %145
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %74, i8 0, i64 32, i1 false)
  store i32 1, ptr %78, align 8, !tbaa !723
  br label %194

193:                                              ; preds = %130
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %74, i8 0, i64 32, i1 false)
  store i32 1, ptr %78, align 8, !tbaa !723
  store i64 %121, ptr %6, align 8, !tbaa !726
  store i64 %120, ptr %80, align 8, !tbaa !727
  store i64 %124, ptr %81, align 8, !tbaa !728
  store i64 %126, ptr %82, align 8, !tbaa !729
  br label %320

194:                                              ; preds = %192, %183, %178, %177
  %195 = phi i64 [ 0, %192 ], [ %182, %178 ], [ %191, %183 ], [ 0, %177 ]
  %196 = phi i64 [ 0, %192 ], [ %180, %178 ], [ %187, %183 ], [ 0, %177 ]
  %197 = phi i64 [ 0, %192 ], [ %170, %178 ], [ %170, %183 ], [ 0, %177 ]
  %198 = phi i64 [ 0, %192 ], [ %171, %178 ], [ %171, %183 ], [ 0, %177 ]
  %199 = phi i1 [ false, %192 ], [ true, %178 ], [ true, %183 ], [ false, %177 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #65
  br i1 %72, label %200, label %308

200:                                              ; preds = %194
  %201 = fmul float %150, 0x3F30000000000000
  %202 = sitofp i64 %132 to float
  %203 = sitofp i64 %133 to float
  %204 = fcmp ogt float %201, %116
  br i1 %204, label %205, label %265

205:                                              ; preds = %253, %200
  %206 = phi float [ %257, %253 ], [ %201, %200 ]
  %207 = phi i32 [ %256, %253 ], [ %115, %200 ]
  %208 = phi float [ %263, %253 ], [ %116, %200 ]
  %209 = phi i32 [ %260, %253 ], [ %117, %200 ]
  %210 = phi i8 [ %254, %253 ], [ %118, %200 ]
  %211 = phi i32 [ %255, %253 ], [ %119, %200 ]
  %212 = phi i64 [ %220, %253 ], [ %120, %200 ]
  %213 = phi i64 [ %217, %253 ], [ %121, %200 ]
  %214 = fdiv float %208, %201
  %215 = fmul float %214, %202
  %216 = fptosi float %215 to i64
  %217 = add nsw i64 %213, %216
  %218 = fmul float %214, %203
  %219 = fptosi float %218 to i64
  %220 = add nsw i64 %212, %219
  %221 = icmp eq i8 %210, 0
  br i1 %221, label %253, label %222

222:                                              ; preds = %205
  store i64 %213, ptr %6, align 8, !tbaa !726
  store i64 %212, ptr %80, align 8, !tbaa !727
  store i64 %217, ptr %81, align 8, !tbaa !728
  store i64 %220, ptr %82, align 8, !tbaa !729
  %223 = load i32, ptr %78, align 8, !tbaa !723
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %240

225:                                              ; preds = %222
  %226 = load i64, ptr %74, align 8, !tbaa !730
  %227 = load i64, ptr %75, align 8, !tbaa !731
  %228 = sub nsw i64 %213, %226
  store i64 %228, ptr %83, align 8, !tbaa !734
  %229 = sub nsw i64 %212, %227
  store i64 %229, ptr %84, align 8, !tbaa !735
  %230 = add nsw i64 %226, %213
  store i64 %230, ptr %85, align 8, !tbaa !736
  %231 = add nsw i64 %227, %212
  store i64 %231, ptr %86, align 8, !tbaa !737
  %232 = add nsw i64 %226, %217
  store i64 %232, ptr %87, align 8, !tbaa !738
  %233 = add nsw i64 %227, %220
  store i64 %233, ptr %88, align 8, !tbaa !739
  %234 = sub nsw i64 %217, %226
  store i64 %234, ptr %89, align 8, !tbaa !740
  %235 = sub nsw i64 %220, %227
  store i64 %235, ptr %90, align 8, !tbaa !741
  %236 = load i64, ptr %76, align 8, !tbaa !732
  %237 = sub nsw i64 0, %236
  store i64 %237, ptr %91, align 8, !tbaa !742
  %238 = load i64, ptr %77, align 8, !tbaa !733
  %239 = sub nsw i64 0, %238
  store i64 %239, ptr %92, align 8, !tbaa !743
  store i64 %236, ptr %93, align 8, !tbaa !744
  store i64 %238, ptr %94, align 8, !tbaa !745
  br label %240

240:                                              ; preds = %225, %222
  %241 = add nsw i32 %211, 1
  %242 = icmp eq i32 %211, 0
  br i1 %242, label %243, label %244

243:                                              ; preds = %240
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %8, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  br label %244

244:                                              ; preds = %243, %240
  %245 = icmp eq i32 %207, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %244
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %7, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  br label %251

247:                                              ; preds = %244
  %248 = add nsw i32 %207, -1
  %249 = call i32 %1(i32 noundef %248, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef %2) #64
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %7, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  %250 = icmp eq i32 %207, -1
  br i1 %250, label %253, label %251

251:                                              ; preds = %247, %246
  %252 = call i32 %1(i32 noundef %207, ptr noundef nonnull %7, ptr noundef null, ptr noundef %2) #64
  br label %253

253:                                              ; preds = %251, %247, %205
  %254 = phi i8 [ 0, %251 ], [ 0, %247 ], [ 1, %205 ]
  %255 = phi i32 [ %241, %251 ], [ %241, %247 ], [ %211, %205 ]
  %256 = phi i32 [ 0, %251 ], [ 0, %247 ], [ %207, %205 ]
  %257 = fsub float %206, %208
  %258 = add nsw i32 %209, 1
  %259 = icmp eq i32 %258, %15
  %260 = select i1 %259, i32 0, i32 %258
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds float, ptr %13, i64 %261
  %263 = load float, ptr %262, align 4, !tbaa !103
  %264 = fcmp ogt float %257, %263
  br i1 %264, label %205, label %265, !llvm.loop !747

265:                                              ; preds = %253, %200
  %266 = phi i64 [ %121, %200 ], [ %217, %253 ]
  %267 = phi i64 [ %120, %200 ], [ %220, %253 ]
  %268 = phi i32 [ %119, %200 ], [ %255, %253 ]
  %269 = phi i8 [ %118, %200 ], [ %254, %253 ]
  %270 = phi i32 [ %117, %200 ], [ %260, %253 ]
  %271 = phi float [ %116, %200 ], [ %263, %253 ]
  %272 = phi i32 [ %115, %200 ], [ %256, %253 ]
  %273 = phi float [ %201, %200 ], [ %257, %253 ]
  %274 = icmp eq i8 %269, 0
  br i1 %274, label %304, label %275

275:                                              ; preds = %265
  store i64 %266, ptr %6, align 8, !tbaa !726
  store i64 %267, ptr %80, align 8, !tbaa !727
  store i64 %124, ptr %81, align 8, !tbaa !728
  store i64 %126, ptr %82, align 8, !tbaa !729
  %276 = load i32, ptr %78, align 8, !tbaa !723
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %293

278:                                              ; preds = %275
  %279 = load i64, ptr %74, align 8, !tbaa !730
  %280 = load i64, ptr %75, align 8, !tbaa !731
  %281 = sub nsw i64 %266, %279
  store i64 %281, ptr %83, align 8, !tbaa !734
  %282 = sub nsw i64 %267, %280
  store i64 %282, ptr %84, align 8, !tbaa !735
  %283 = add nsw i64 %279, %266
  store i64 %283, ptr %85, align 8, !tbaa !736
  %284 = add nsw i64 %280, %267
  store i64 %284, ptr %86, align 8, !tbaa !737
  %285 = add nsw i64 %279, %124
  store i64 %285, ptr %87, align 8, !tbaa !738
  %286 = add nsw i64 %280, %126
  store i64 %286, ptr %88, align 8, !tbaa !739
  %287 = sub nsw i64 %124, %279
  store i64 %287, ptr %89, align 8, !tbaa !740
  %288 = sub nsw i64 %126, %280
  store i64 %288, ptr %90, align 8, !tbaa !741
  %289 = load i64, ptr %76, align 8, !tbaa !732
  %290 = sub nsw i64 0, %289
  store i64 %290, ptr %91, align 8, !tbaa !742
  %291 = load i64, ptr %77, align 8, !tbaa !733
  %292 = sub nsw i64 0, %291
  store i64 %292, ptr %92, align 8, !tbaa !743
  store i64 %289, ptr %93, align 8, !tbaa !744
  store i64 %291, ptr %94, align 8, !tbaa !745
  br label %293

293:                                              ; preds = %278, %275
  %294 = add nsw i32 %268, 1
  %295 = icmp eq i32 %268, 0
  br i1 %295, label %296, label %297

296:                                              ; preds = %293
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %8, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  br label %297

297:                                              ; preds = %296, %293
  %298 = add nsw i32 %272, 1
  %299 = icmp eq i32 %272, 0
  br i1 %299, label %303, label %300

300:                                              ; preds = %297
  %301 = add nsw i32 %272, -1
  %302 = call i32 %1(i32 noundef %301, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef %2) #64
  br label %303

303:                                              ; preds = %300, %297
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %7, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  br label %304

304:                                              ; preds = %303, %265
  %305 = phi i32 [ %294, %303 ], [ %268, %265 ]
  %306 = phi i32 [ %298, %303 ], [ %272, %265 ]
  %307 = fsub float %271, %273
  br label %331

308:                                              ; preds = %194
  store i64 %121, ptr %6, align 8, !tbaa !726
  store i64 %120, ptr %80, align 8, !tbaa !727
  store i64 %124, ptr %81, align 8, !tbaa !728
  store i64 %126, ptr %82, align 8, !tbaa !729
  br i1 %199, label %309, label %320

309:                                              ; preds = %308
  %310 = sub nsw i64 %121, %198
  store i64 %310, ptr %83, align 8, !tbaa !734
  %311 = sub nsw i64 %120, %197
  store i64 %311, ptr %84, align 8, !tbaa !735
  %312 = add nsw i64 %198, %121
  store i64 %312, ptr %85, align 8, !tbaa !736
  %313 = add nsw i64 %197, %120
  store i64 %313, ptr %86, align 8, !tbaa !737
  %314 = add nsw i64 %198, %124
  store i64 %314, ptr %87, align 8, !tbaa !738
  %315 = add nsw i64 %197, %126
  store i64 %315, ptr %88, align 8, !tbaa !739
  %316 = sub nsw i64 %124, %198
  store i64 %316, ptr %89, align 8, !tbaa !740
  %317 = sub nsw i64 %126, %197
  store i64 %317, ptr %90, align 8, !tbaa !741
  %318 = sub nsw i64 0, %196
  store i64 %318, ptr %91, align 8, !tbaa !742
  %319 = sub nsw i64 0, %195
  store i64 %319, ptr %92, align 8, !tbaa !743
  store i64 %196, ptr %93, align 8, !tbaa !744
  store i64 %195, ptr %94, align 8, !tbaa !745
  br label %320

320:                                              ; preds = %309, %308, %193
  %321 = add nsw i32 %119, 1
  %322 = icmp eq i32 %119, 0
  br i1 %322, label %323, label %324

323:                                              ; preds = %320
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %8, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  br label %324

324:                                              ; preds = %323, %320
  %325 = add nsw i32 %115, 1
  %326 = icmp eq i32 %115, 0
  br i1 %326, label %330, label %327

327:                                              ; preds = %324
  %328 = add nsw i32 %115, -1
  %329 = call i32 %1(i32 noundef %328, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef %2) #64
  br label %330

330:                                              ; preds = %327, %324
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(168) %7, ptr noundef nonnull align 8 dereferenceable(168) %6, i64 168, i1 false), !tbaa.struct !746
  br label %331

331:                                              ; preds = %330, %304, %112
  %332 = phi i32 [ %305, %304 ], [ %321, %330 ], [ %119, %112 ]
  %333 = phi i8 [ %269, %304 ], [ %118, %330 ], [ %118, %112 ]
  %334 = phi i32 [ %270, %304 ], [ %117, %330 ], [ %117, %112 ]
  %335 = phi float [ %307, %304 ], [ %116, %330 ], [ %116, %112 ]
  %336 = phi i32 [ %306, %304 ], [ %325, %330 ], [ %115, %112 ]
  %337 = getelementptr inbounds %struct.segment_s, ptr %114, i64 0, i32 1
  %338 = load ptr, ptr %337, align 8, !tbaa !704
  %339 = icmp eq i32 %122, 0
  br i1 %339, label %340, label %112, !llvm.loop !748

340:                                              ; preds = %331
  %.lcssa2 = phi i8 [ %333, %331 ]
  %.lcssa1 = phi i32 [ %336, %331 ]
  %.lcssa = phi ptr [ %338, %331 ]
  %341 = icmp eq i32 %.lcssa1, 0
  br i1 %341, label %356, label %342

342:                                              ; preds = %340
  %343 = add nsw i32 %.lcssa1, -1
  %344 = getelementptr inbounds %struct.subpath, ptr %97, i64 0, i32 7
  %345 = load i8, ptr %344, align 8, !tbaa !710
  %346 = icmp ne i8 %345, 0
  %347 = icmp ne i8 %.lcssa2, 0
  %348 = select i1 %346, i1 %347, i1 false
  br i1 %348, label %349, label %352

349:                                              ; preds = %342
  %350 = load i32, ptr %69, align 8, !tbaa !510
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %353

352:                                              ; preds = %349, %342
  br label %353

353:                                              ; preds = %352, %349
  %354 = phi ptr [ null, %352 ], [ %8, %349 ]
  %355 = call i32 %1(i32 noundef %343, ptr noundef nonnull %7, ptr noundef %354, ptr noundef %2) #64
  br label %356

356:                                              ; preds = %353, %340, %96
  %357 = phi ptr [ %.lcssa, %353 ], [ %.lcssa, %340 ], [ %101, %96 ]
  %358 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  %359 = icmp eq ptr %358, @stroke_path_body
  br i1 %359, label %360, label %364

360:                                              ; preds = %356
  %361 = load ptr, ptr %95, align 8, !tbaa !333
  %362 = call i32 (ptr, ptr, ptr, i32, i64, ...) @gx_fill_path(ptr noundef nonnull @stroke_path_body, ptr noundef %361, ptr noundef %2, i32 noundef -1, i64 noundef 0) #64
  %363 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  call void @gx_path_release(ptr noundef %363) #64
  store ptr null, ptr @stroke_path, align 8, !tbaa !7
  br label %364

364:                                              ; preds = %360, %356
  call void @llvm.lifetime.end.p0(i64 168, ptr nonnull %8) #65
  call void @llvm.lifetime.end.p0(i64 168, ptr nonnull %7) #65
  call void @llvm.lifetime.end.p0(i64 168, ptr nonnull %6) #65
  %365 = icmp eq ptr %357, null
  br i1 %365, label %366, label %96, !llvm.loop !749

366:                                              ; preds = %364, %63
  %367 = load i32, ptr %50, align 8, !tbaa !525
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %370, label %369

369:                                              ; preds = %366
  call void @gx_path_release(ptr noundef nonnull %4) #64
  br label %370

370:                                              ; preds = %369, %366, %57, %53
  %371 = phi i32 [ 0, %53 ], [ %61, %57 ], [ 0, %369 ], [ 0, %366 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %4) #65
  ret i32 %371
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #19

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @compute_caps(ptr nocapture noundef %0, ptr nocapture readnone %1) #28 {
  %3 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 2
  %4 = load i64, ptr %3, align 8, !tbaa !730
  %5 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 2, i32 1
  %6 = load i64, ptr %5, align 8, !tbaa !731
  %7 = load i64, ptr %0, align 8, !tbaa !726
  %8 = sub nsw i64 %7, %4
  %9 = getelementptr inbounds %struct.endpoint_s, ptr %0, i64 0, i32 1
  store i64 %8, ptr %9, align 8, !tbaa !734
  %10 = getelementptr inbounds %struct.timeval, ptr %0, i64 0, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !727
  %12 = sub nsw i64 %11, %6
  %13 = getelementptr inbounds %struct.endpoint_s, ptr %0, i64 0, i32 1, i32 1
  store i64 %12, ptr %13, align 8, !tbaa !735
  %14 = add nsw i64 %7, %4
  %15 = getelementptr inbounds %struct.endpoint_s, ptr %0, i64 0, i32 2
  store i64 %14, ptr %15, align 8, !tbaa !736
  %16 = add nsw i64 %11, %6
  %17 = getelementptr inbounds %struct.endpoint_s, ptr %0, i64 0, i32 2, i32 1
  store i64 %16, ptr %17, align 8, !tbaa !737
  %18 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1
  %19 = load i64, ptr %18, align 8, !tbaa !728
  %20 = add nsw i64 %19, %4
  %21 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 1
  store i64 %20, ptr %21, align 8, !tbaa !738
  %22 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 0, i32 1
  %23 = load i64, ptr %22, align 8, !tbaa !729
  %24 = add nsw i64 %23, %6
  %25 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 1, i32 1
  store i64 %24, ptr %25, align 8, !tbaa !739
  %26 = sub nsw i64 %19, %4
  %27 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 2
  store i64 %26, ptr %27, align 8, !tbaa !740
  %28 = sub nsw i64 %23, %6
  %29 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 2, i32 1
  store i64 %28, ptr %29, align 8, !tbaa !741
  %30 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 3
  %31 = load i64, ptr %30, align 8, !tbaa !732
  %32 = sub nsw i64 0, %31
  %33 = getelementptr inbounds %struct.endpoint_s, ptr %0, i64 0, i32 3
  store i64 %32, ptr %33, align 8, !tbaa !742
  %34 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 3, i32 1
  %35 = load i64, ptr %34, align 8, !tbaa !733
  %36 = sub nsw i64 0, %35
  %37 = getelementptr inbounds %struct.endpoint_s, ptr %0, i64 0, i32 3, i32 1
  store i64 %36, ptr %37, align 8, !tbaa !743
  %38 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 3
  store i64 %31, ptr %38, align 8, !tbaa !744
  %39 = getelementptr inbounds %struct.partial_line_s, ptr %0, i64 0, i32 1, i32 3, i32 1
  store i64 %35, ptr %39, align 8, !tbaa !745
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @stroke_add(i32 noundef %0, ptr noundef %1, ptr noundef readonly %2, ptr nocapture noundef readonly %3) #0 {
  %5 = alloca %struct.timeval, align 8
  %6 = alloca %struct.timeval, align 16
  %7 = load ptr, ptr @stroke_path, align 8, !tbaa !7
  %8 = icmp eq ptr %7, null
  br i1 %8, label %376, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 4
  %11 = load i32, ptr %10, align 8, !tbaa !723
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @compute_caps(ptr noundef nonnull %1, ptr poison) #62
  br label %14

14:                                               ; preds = %13, %9
  %15 = icmp eq i32 %0, 0
  br i1 %15, label %16, label %79

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 10
  %18 = load ptr, ptr %17, align 8, !tbaa !497
  %19 = getelementptr inbounds %struct.line_params_s, ptr %18, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !501
  switch i32 %20, label %95 [
    i32 1, label %21
    i32 2, label %56
    i32 0, label %79
  ]

21:                                               ; preds = %16
  %22 = load i64, ptr %1, align 8, !tbaa !750
  %23 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 3
  %24 = load i64, ptr %23, align 8, !tbaa !751
  %25 = add nsw i64 %24, %22
  %26 = getelementptr inbounds %struct.timeval, ptr %1, i64 0, i32 1
  %27 = load i64, ptr %26, align 8, !tbaa !752
  %28 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 3, i32 1
  %29 = load i64, ptr %28, align 8, !tbaa !753
  %30 = add nsw i64 %29, %27
  %31 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 1
  %32 = load i64, ptr %31, align 8, !tbaa !754
  %33 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 1, i32 1
  %34 = load i64, ptr %33, align 8, !tbaa !755
  %35 = tail call i32 @gx_path_add_point(ptr noundef nonnull %7, i64 noundef %32, i64 noundef %34) #64
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %376, label %37

37:                                               ; preds = %21
  %38 = load i64, ptr %31, align 8, !tbaa !754
  %39 = load i64, ptr %33, align 8, !tbaa !755
  %40 = load i64, ptr %23, align 8, !tbaa !751
  %41 = add nsw i64 %40, %38
  %42 = load i64, ptr %28, align 8, !tbaa !753
  %43 = add nsw i64 %42, %39
  %44 = tail call i32 @gx_path_add_arc(ptr noundef nonnull %7, i64 noundef %38, i64 noundef %39, i64 noundef %25, i64 noundef %30, i64 noundef %41, i64 noundef %43) #64
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %376, label %46

46:                                               ; preds = %37
  %47 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 2
  %48 = load i64, ptr %47, align 8, !tbaa !756
  %49 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 2, i32 1
  %50 = load i64, ptr %49, align 8, !tbaa !757
  %51 = load i64, ptr %23, align 8, !tbaa !751
  %52 = add nsw i64 %51, %48
  %53 = load i64, ptr %28, align 8, !tbaa !753
  %54 = add nsw i64 %53, %50
  %55 = tail call i32 @gx_path_add_arc(ptr noundef nonnull %7, i64 noundef %25, i64 noundef %30, i64 noundef %48, i64 noundef %50, i64 noundef %52, i64 noundef %54) #64
  br label %92

56:                                               ; preds = %16
  %57 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 1
  %58 = load i64, ptr %57, align 8, !tbaa !754
  %59 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 3
  %60 = load i64, ptr %59, align 8, !tbaa !751
  %61 = add nsw i64 %60, %58
  %62 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 1, i32 1
  %63 = load i64, ptr %62, align 8, !tbaa !755
  %64 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 3, i32 1
  %65 = load i64, ptr %64, align 8, !tbaa !753
  %66 = add nsw i64 %65, %63
  %67 = tail call i32 @gx_path_add_point(ptr noundef nonnull %7, i64 noundef %61, i64 noundef %66) #64
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %376, label %69

69:                                               ; preds = %56
  %70 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 2
  %71 = load i64, ptr %70, align 8, !tbaa !756
  %72 = load i64, ptr %59, align 8, !tbaa !751
  %73 = add nsw i64 %72, %71
  %74 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 2, i32 1
  %75 = load i64, ptr %74, align 8, !tbaa !757
  %76 = load i64, ptr %64, align 8, !tbaa !753
  %77 = add nsw i64 %76, %75
  %78 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %73, i64 noundef %77) #64
  br label %92

79:                                               ; preds = %16, %14
  %80 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !754
  %82 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 1, i32 1
  %83 = load i64, ptr %82, align 8, !tbaa !755
  %84 = tail call i32 @gx_path_add_point(ptr noundef nonnull %7, i64 noundef %81, i64 noundef %83) #64
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %376, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 2
  %88 = load i64, ptr %87, align 8, !tbaa !756
  %89 = getelementptr inbounds %struct.endpoint_s, ptr %1, i64 0, i32 2, i32 1
  %90 = load i64, ptr %89, align 8, !tbaa !757
  %91 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %88, i64 noundef %90) #64
  br label %92

92:                                               ; preds = %86, %69, %46
  %93 = phi i32 [ %91, %86 ], [ %78, %69 ], [ %55, %46 ]
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %376, label %95

95:                                               ; preds = %92, %16
  %96 = icmp eq ptr %2, null
  %97 = getelementptr inbounds %struct.gs_state_s, ptr %3, i64 0, i32 10
  %98 = load ptr, ptr %97, align 8, !tbaa !497
  br i1 %96, label %99, label %174

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.line_params_s, ptr %98, i64 0, i32 1
  %101 = load i32, ptr %100, align 4, !tbaa !501
  switch i32 %101, label %373 [
    i32 1, label %102
    i32 2, label %138
    i32 0, label %161
  ]

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1
  %104 = load i64, ptr %103, align 8, !tbaa !750
  %105 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3
  %106 = load i64, ptr %105, align 8, !tbaa !751
  %107 = add nsw i64 %106, %104
  %108 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 0, i32 1
  %109 = load i64, ptr %108, align 8, !tbaa !752
  %110 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3, i32 1
  %111 = load i64, ptr %110, align 8, !tbaa !753
  %112 = add nsw i64 %111, %109
  %113 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1
  %114 = load i64, ptr %113, align 8, !tbaa !754
  %115 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1, i32 1
  %116 = load i64, ptr %115, align 8, !tbaa !755
  %117 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %114, i64 noundef %116) #64
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %376, label %119

119:                                              ; preds = %102
  %120 = load i64, ptr %113, align 8, !tbaa !754
  %121 = load i64, ptr %115, align 8, !tbaa !755
  %122 = load i64, ptr %105, align 8, !tbaa !751
  %123 = add nsw i64 %122, %120
  %124 = load i64, ptr %110, align 8, !tbaa !753
  %125 = add nsw i64 %124, %121
  %126 = tail call i32 @gx_path_add_arc(ptr noundef nonnull %7, i64 noundef %120, i64 noundef %121, i64 noundef %107, i64 noundef %112, i64 noundef %123, i64 noundef %125) #64
  %127 = icmp slt i32 %126, 0
  br i1 %127, label %376, label %128

128:                                              ; preds = %119
  %129 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2
  %130 = load i64, ptr %129, align 8, !tbaa !756
  %131 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2, i32 1
  %132 = load i64, ptr %131, align 8, !tbaa !757
  %133 = load i64, ptr %105, align 8, !tbaa !751
  %134 = add nsw i64 %133, %130
  %135 = load i64, ptr %110, align 8, !tbaa !753
  %136 = add nsw i64 %135, %132
  %137 = tail call i32 @gx_path_add_arc(ptr noundef nonnull %7, i64 noundef %107, i64 noundef %112, i64 noundef %130, i64 noundef %132, i64 noundef %134, i64 noundef %136) #64
  br label %370

138:                                              ; preds = %99
  %139 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1
  %140 = load i64, ptr %139, align 8, !tbaa !754
  %141 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3
  %142 = load i64, ptr %141, align 8, !tbaa !751
  %143 = add nsw i64 %142, %140
  %144 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1, i32 1
  %145 = load i64, ptr %144, align 8, !tbaa !755
  %146 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3, i32 1
  %147 = load i64, ptr %146, align 8, !tbaa !753
  %148 = add nsw i64 %147, %145
  %149 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %143, i64 noundef %148) #64
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %376, label %151

151:                                              ; preds = %138
  %152 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2
  %153 = load i64, ptr %152, align 8, !tbaa !756
  %154 = load i64, ptr %141, align 8, !tbaa !751
  %155 = add nsw i64 %154, %153
  %156 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2, i32 1
  %157 = load i64, ptr %156, align 8, !tbaa !757
  %158 = load i64, ptr %146, align 8, !tbaa !753
  %159 = add nsw i64 %158, %157
  %160 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %155, i64 noundef %159) #64
  br label %370

161:                                              ; preds = %99
  %162 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1
  %163 = load i64, ptr %162, align 8, !tbaa !754
  %164 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1, i32 1
  %165 = load i64, ptr %164, align 8, !tbaa !755
  %166 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %163, i64 noundef %165) #64
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %376, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2
  %170 = load i64, ptr %169, align 8, !tbaa !756
  %171 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2, i32 1
  %172 = load i64, ptr %171, align 8, !tbaa !757
  %173 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %170, i64 noundef %172) #64
  br label %370

174:                                              ; preds = %95
  %175 = getelementptr inbounds %struct.line_params_s, ptr %98, i64 0, i32 2
  %176 = load i32, ptr %175, align 8, !tbaa !502
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %178, label %214

178:                                              ; preds = %174
  %179 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1
  %180 = load i64, ptr %179, align 8, !tbaa !750
  %181 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3
  %182 = load i64, ptr %181, align 8, !tbaa !751
  %183 = add nsw i64 %182, %180
  %184 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 0, i32 1
  %185 = load i64, ptr %184, align 8, !tbaa !752
  %186 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3, i32 1
  %187 = load i64, ptr %186, align 8, !tbaa !753
  %188 = add nsw i64 %187, %185
  %189 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1
  %190 = load i64, ptr %189, align 8, !tbaa !754
  %191 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1, i32 1
  %192 = load i64, ptr %191, align 8, !tbaa !755
  %193 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %190, i64 noundef %192) #64
  %194 = icmp slt i32 %193, 0
  br i1 %194, label %376, label %195

195:                                              ; preds = %178
  %196 = load i64, ptr %189, align 8, !tbaa !754
  %197 = load i64, ptr %191, align 8, !tbaa !755
  %198 = load i64, ptr %181, align 8, !tbaa !751
  %199 = add nsw i64 %198, %196
  %200 = load i64, ptr %186, align 8, !tbaa !753
  %201 = add nsw i64 %200, %197
  %202 = tail call i32 @gx_path_add_arc(ptr noundef nonnull %7, i64 noundef %196, i64 noundef %197, i64 noundef %183, i64 noundef %188, i64 noundef %199, i64 noundef %201) #64
  %203 = icmp slt i32 %202, 0
  br i1 %203, label %376, label %204

204:                                              ; preds = %195
  %205 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2
  %206 = load i64, ptr %205, align 8, !tbaa !756
  %207 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2, i32 1
  %208 = load i64, ptr %207, align 8, !tbaa !757
  %209 = load i64, ptr %181, align 8, !tbaa !751
  %210 = add nsw i64 %209, %206
  %211 = load i64, ptr %186, align 8, !tbaa !753
  %212 = add nsw i64 %211, %208
  %213 = tail call i32 @gx_path_add_arc(ptr noundef nonnull %7, i64 noundef %183, i64 noundef %188, i64 noundef %206, i64 noundef %208, i64 noundef %210, i64 noundef %212) #64
  br label %370

214:                                              ; preds = %174
  %215 = getelementptr inbounds %struct.partial_line_s, ptr %2, i64 0, i32 4
  %216 = load i32, ptr %215, align 8, !tbaa !723
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %231, label %218

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1
  %220 = load i64, ptr %219, align 8, !tbaa !754
  %221 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1, i32 1
  %222 = load i64, ptr %221, align 8, !tbaa !755
  %223 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %220, i64 noundef %222) #64
  %224 = icmp slt i32 %223, 0
  br i1 %224, label %376, label %225

225:                                              ; preds = %218
  %226 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2
  %227 = load i64, ptr %226, align 8, !tbaa !756
  %228 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2, i32 1
  %229 = load i64, ptr %228, align 8, !tbaa !757
  %230 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %227, i64 noundef %229) #64
  br label %370

231:                                              ; preds = %214
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #65
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #65
  %232 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 2
  %233 = load i64, ptr %232, align 8, !tbaa !730
  %234 = sitofp i64 %233 to float
  %235 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 2, i32 1
  %236 = load i64, ptr %235, align 8, !tbaa !731
  %237 = sitofp i64 %236 to float
  %238 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3
  %239 = load i64, ptr %238, align 8, !tbaa !744
  %240 = sitofp i64 %239 to float
  %241 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 3, i32 1
  %242 = load i64, ptr %241, align 8, !tbaa !745
  %243 = sitofp i64 %242 to float
  %244 = getelementptr inbounds %struct.partial_line_s, ptr %2, i64 0, i32 2
  %245 = load i64, ptr %244, align 8, !tbaa !730
  %246 = sitofp i64 %245 to float
  %247 = getelementptr inbounds %struct.partial_line_s, ptr %2, i64 0, i32 2, i32 1
  %248 = load i64, ptr %247, align 8, !tbaa !731
  %249 = sitofp i64 %248 to float
  %250 = fmul float %237, %240
  %251 = fmul float %234, %243
  %252 = fcmp ult float %250, %251
  %253 = fmul float %237, %246
  %254 = fmul float %234, %249
  %255 = fcmp oge float %253, %254
  %256 = xor i1 %252, %255
  %257 = getelementptr inbounds %struct.endpoint_s, ptr %2, i64 0, i32 2
  %258 = getelementptr inbounds %struct.endpoint_s, ptr %2, i64 0, i32 1
  %259 = select i1 %256, ptr %257, ptr %258
  %260 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1
  %261 = load i64, ptr %260, align 8, !tbaa !738
  store i64 %261, ptr %5, align 8, !tbaa !247
  %262 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 1, i32 1
  %263 = load i64, ptr %262, align 8, !tbaa !739
  %264 = getelementptr inbounds %struct.timeval, ptr %5, i64 0, i32 1
  store i64 %263, ptr %264, align 8, !tbaa !249
  %265 = getelementptr inbounds %struct.partial_line_s, ptr %1, i64 0, i32 1, i32 2
  %266 = getelementptr inbounds %struct.timeval, ptr %6, i64 0, i32 1
  %267 = load <2 x i64>, ptr %265, align 8, !tbaa !18
  store <2 x i64> %267, ptr %6, align 16, !tbaa !18
  %268 = icmp eq i32 %176, 0
  br i1 %268, label %269, label %352

269:                                              ; preds = %231
  %270 = getelementptr inbounds %struct.partial_line_s, ptr %2, i64 0, i32 1, i32 3
  %271 = load i64, ptr %270, align 8, !tbaa !744
  %272 = getelementptr inbounds %struct.partial_line_s, ptr %2, i64 0, i32 1, i32 3, i32 1
  %273 = load i64, ptr %272, align 8, !tbaa !745
  %274 = getelementptr inbounds %struct.line_params_s, ptr %98, i64 0, i32 4
  %275 = load float, ptr %274, align 8, !tbaa !504
  %276 = icmp slt i64 %239, 0
  %277 = sub nsw i64 0, %271
  %278 = select i1 %276, i64 %277, i64 %271
  %279 = tail call i64 @llvm.abs.i64(i64 %239, i1 true)
  %280 = icmp slt i64 %242, 0
  %281 = sub nsw i64 0, %273
  %282 = select i1 %280, i64 %281, i64 %273
  %283 = tail call i64 @llvm.abs.i64(i64 %242, i1 true)
  %284 = sitofp i64 %279 to float
  %285 = sitofp i64 %283 to float
  %286 = sitofp i64 %278 to float
  %287 = sitofp i64 %282 to float
  %288 = fneg float %284
  %289 = fmul float %288, %287
  %290 = tail call float @llvm.fmuladd.f32(float %286, float %285, float %289)
  %291 = fmul float %285, %287
  %292 = tail call float @llvm.fmuladd.f32(float %284, float %286, float %291)
  %293 = icmp sgt i64 %278, -1
  %294 = icmp sgt i64 %282, -1
  br i1 %293, label %295, label %308

295:                                              ; preds = %269
  br i1 %294, label %296, label %303

296:                                              ; preds = %295
  %297 = fcmp ogt float %290, 0.000000e+00
  %298 = fneg float %290
  %299 = select i1 %297, float %298, float %290
  %300 = fcmp olt float %292, 0.000000e+00
  br i1 %300, label %301, label %321

301:                                              ; preds = %296
  %302 = fneg float %292
  br label %321

303:                                              ; preds = %295
  %304 = fneg float %290
  %305 = fcmp olt float %292, 0.000000e+00
  br i1 %305, label %306, label %321

306:                                              ; preds = %303
  %307 = fneg float %292
  br label %321

308:                                              ; preds = %269
  br i1 %294, label %309, label %314

309:                                              ; preds = %308
  %310 = fcmp olt float %292, 0.000000e+00
  br i1 %310, label %311, label %321

311:                                              ; preds = %309
  %312 = fneg float %290
  %313 = fneg float %292
  br label %321

314:                                              ; preds = %308
  %315 = fcmp olt float %290, 0.000000e+00
  %316 = fneg float %290
  %317 = select i1 %315, float %316, float %290
  %318 = fcmp olt float %292, 0.000000e+00
  br i1 %318, label %319, label %321

319:                                              ; preds = %314
  %320 = fneg float %292
  br label %321

321:                                              ; preds = %319, %314, %311, %309, %306, %303, %301, %296
  %322 = phi float [ %299, %301 ], [ %299, %296 ], [ %290, %306 ], [ %304, %303 ], [ %312, %311 ], [ %290, %309 ], [ %317, %319 ], [ %317, %314 ]
  %323 = phi float [ %302, %301 ], [ %292, %296 ], [ %307, %306 ], [ %292, %303 ], [ %313, %311 ], [ %292, %309 ], [ %320, %319 ], [ %292, %314 ]
  %324 = fcmp ult float %322, 0.000000e+00
  %325 = fcmp ule float %275, 0.000000e+00
  %326 = fmul float %275, %323
  %327 = fcmp ult float %322, %326
  br i1 %324, label %330, label %328

328:                                              ; preds = %321
  %329 = select i1 %325, i1 true, i1 %327
  br i1 %329, label %352, label %332

330:                                              ; preds = %321
  %331 = select i1 %325, i1 %327, i1 false
  br i1 %331, label %352, label %332

332:                                              ; preds = %330, %328
  %333 = getelementptr inbounds %struct.endpoint_s, ptr %2, i64 0, i32 3
  %334 = load i64, ptr %333, align 8, !tbaa !742
  %335 = sitofp i64 %334 to float
  %336 = getelementptr inbounds %struct.endpoint_s, ptr %2, i64 0, i32 3, i32 1
  %337 = load i64, ptr %336, align 8, !tbaa !743
  %338 = sitofp i64 %337 to float
  %339 = fmul float %249, %335
  %340 = fmul float %246, %338
  %341 = fcmp ult float %339, %340
  %342 = fneg float %234
  %343 = fmul float %342, %249
  %344 = fneg float %237
  %345 = fmul float %344, %246
  %346 = fcmp oge float %343, %345
  %347 = xor i1 %346, %341
  br i1 %347, label %348, label %349

348:                                              ; preds = %332
  call void @line_intersect(ptr noundef nonnull %265, ptr noundef nonnull %238, ptr noundef nonnull %259, ptr noundef nonnull %333, ptr noundef nonnull %6) #62
  br label %352

349:                                              ; preds = %332
  call void @line_intersect(ptr noundef nonnull %260, ptr noundef nonnull %238, ptr noundef nonnull %259, ptr noundef nonnull %333, ptr noundef nonnull %5) #62
  %350 = load i64, ptr %5, align 8, !tbaa !247
  %351 = load i64, ptr %264, align 8, !tbaa !249
  br label %352

352:                                              ; preds = %349, %348, %330, %328, %231
  %353 = phi i64 [ %263, %328 ], [ %263, %330 ], [ %351, %349 ], [ %263, %348 ], [ %263, %231 ]
  %354 = phi i64 [ %261, %328 ], [ %261, %330 ], [ %350, %349 ], [ %261, %348 ], [ %261, %231 ]
  %355 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %354, i64 noundef %353) #64
  %356 = icmp slt i32 %355, 0
  br i1 %356, label %363, label %357

357:                                              ; preds = %352
  %358 = load i64, ptr %259, align 8, !tbaa !247
  %359 = getelementptr inbounds %struct.timeval, ptr %259, i64 0, i32 1
  %360 = load i64, ptr %359, align 8, !tbaa !249
  %361 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %358, i64 noundef %360) #64
  %362 = icmp slt i32 %361, 0
  br i1 %362, label %363, label %365

363:                                              ; preds = %357, %352
  %364 = phi i32 [ %361, %357 ], [ %355, %352 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #65
  br label %376

365:                                              ; preds = %357
  %366 = load i64, ptr %6, align 16, !tbaa !247
  %367 = load i64, ptr %266, align 8, !tbaa !249
  %368 = tail call i32 @gx_path_add_line(ptr noundef nonnull %7, i64 noundef %366, i64 noundef %367) #64
  %369 = icmp sgt i32 %368, -1
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #65
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #65
  br i1 %369, label %373, label %376

370:                                              ; preds = %225, %204, %168, %151, %128
  %371 = phi i32 [ %173, %168 ], [ %160, %151 ], [ %137, %128 ], [ %213, %204 ], [ %230, %225 ]
  %372 = icmp slt i32 %371, 0
  br i1 %372, label %376, label %373

373:                                              ; preds = %370, %365, %99
  %374 = tail call i32 @gx_path_close_subpath(ptr noundef nonnull %7) #64
  %375 = tail call i32 @llvm.smin.i32(i32 %374, i32 0)
  br label %376

376:                                              ; preds = %373, %370, %365, %363, %218, %195, %178, %161, %138, %119, %102, %92, %79, %56, %37, %21, %4
  %377 = phi i32 [ %368, %365 ], [ 0, %4 ], [ %93, %92 ], [ %371, %370 ], [ %375, %373 ], [ %364, %363 ], [ %35, %21 ], [ %44, %37 ], [ %84, %79 ], [ %67, %56 ], [ %223, %218 ], [ %193, %178 ], [ %202, %195 ], [ %117, %102 ], [ %126, %119 ], [ %166, %161 ], [ %149, %138 ]
  ret i32 %377
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @line_intersect(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4) #33 {
  %6 = load i64, ptr %0, align 8, !tbaa !247
  %7 = sitofp i64 %6 to float
  %8 = getelementptr inbounds %struct.timeval, ptr %0, i64 0, i32 1
  %9 = load i64, ptr %8, align 8, !tbaa !249
  %10 = sitofp i64 %9 to float
  %11 = load i64, ptr %2, align 8, !tbaa !247
  %12 = sitofp i64 %11 to float
  %13 = getelementptr inbounds %struct.timeval, ptr %2, i64 0, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !249
  %15 = sitofp i64 %14 to float
  %16 = load <2 x i64>, ptr %1, align 8, !tbaa !18
  %17 = sitofp <2 x i64> %16 to <2 x float>
  %18 = load <2 x i64>, ptr %3, align 8, !tbaa !18
  %19 = sitofp <2 x i64> %18 to <2 x float>
  %20 = extractelement <2 x float> %19, i64 0
  %21 = fneg float %20
  %22 = extractelement <2 x float> %17, i64 1
  %23 = fmul float %22, %21
  %24 = extractelement <2 x float> %17, i64 0
  %25 = extractelement <2 x float> %19, i64 1
  %26 = tail call float @llvm.fmuladd.f32(float %24, float %25, float %23)
  %27 = fpext float %26 to double
  %28 = fneg float %24
  %29 = fmul float %10, %28
  %30 = tail call float @llvm.fmuladd.f32(float %22, float %7, float %29)
  %31 = fpext float %30 to double
  %32 = fmul float %15, %21
  %33 = tail call float @llvm.fmuladd.f32(float %25, float %12, float %32)
  %34 = fpext float %33 to double
  %35 = fpext <2 x float> %17 to <2 x double>
  %36 = fpext <2 x float> %19 to <2 x double>
  %37 = fneg <2 x double> %36
  %38 = insertelement <2 x double> poison, double %31, i64 0
  %39 = shufflevector <2 x double> %38, <2 x double> poison, <2 x i32> zeroinitializer
  %40 = fmul <2 x double> %39, %37
  %41 = insertelement <2 x double> poison, double %34, i64 0
  %42 = shufflevector <2 x double> %41, <2 x double> poison, <2 x i32> zeroinitializer
  %43 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %35, <2 x double> %42, <2 x double> %40)
  %44 = insertelement <2 x double> poison, double %27, i64 0
  %45 = shufflevector <2 x double> %44, <2 x double> poison, <2 x i32> zeroinitializer
  %46 = fdiv <2 x double> %43, %45
  %47 = fptosi <2 x double> %46 to <2 x i64>
  store <2 x i64> %47, ptr %4, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @gx_stroke_add(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  store ptr %1, ptr @stroke_path, align 8, !tbaa !7
  %4 = tail call i32 @stroke(ptr noundef %0, ptr noundef nonnull @stroke_add, ptr noundef %2) #62, !range !263
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i64 @gx_device_memory_bitmap_size(ptr nocapture noundef %0) #28 {
  %2 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 8, !tbaa !382
  %4 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 9
  %5 = load i32, ptr %4, align 8, !tbaa !385
  %6 = mul nsw i32 %5, %3
  %7 = add nsw i32 %6, 31
  %8 = ashr i32 %7, 3
  %9 = and i32 %8, -4
  %10 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 12
  store i32 %9, ptr %10, align 8, !tbaa !587
  %11 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %12 = load i32, ptr %11, align 4, !tbaa !383
  %13 = sext i32 %12 to i64
  %14 = zext i32 %9 to i64
  %15 = add nuw nsw i64 %14, 8
  %16 = mul i64 %15, %13
  ret i64 %16
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @mem_open(ptr nocapture noundef %0) #61 {
  %2 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 13
  %3 = load ptr, ptr %2, align 8, !tbaa !386
  %4 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %5 = load i32, ptr %4, align 4, !tbaa !383
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 12
  %8 = load i32, ptr %7, align 8, !tbaa !587
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, %6
  %11 = getelementptr inbounds i8, ptr %3, i64 %10
  %12 = getelementptr inbounds ptr, ptr %11, i64 %6
  %13 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  store ptr %11, ptr %13, align 8, !tbaa !758
  %14 = icmp eq i32 %5, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %15, %1
  %16 = phi ptr [ %19, %15 ], [ %3, %1 ]
  %17 = phi ptr [ %18, %15 ], [ %11, %1 ]
  %18 = getelementptr inbounds ptr, ptr %17, i64 1
  store ptr %16, ptr %17, align 8, !tbaa !7
  %19 = getelementptr inbounds i8, ptr %16, i64 %9
  %20 = icmp eq ptr %18, %12
  br i1 %20, label %21, label %15, !llvm.loop !759

21:                                               ; preds = %15, %1
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal void @mem_get_initial_matrix(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #33 {
  %3 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 11
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %1, ptr noundef nonnull align 8 dereferenceable(96) %3, i64 96, i1 false), !tbaa.struct !163
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @gs_device_is_memory(ptr nocapture noundef readonly %0) #17 {
  %2 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !376
  br label %7

4:                                                ; preds = %7
  %5 = add nuw nsw i64 %8, 1
  %6 = icmp eq i64 %5, 6
  br i1 %6, label %14, label %7, !llvm.loop !760

7:                                                ; preds = %4, %1
  %8 = phi i64 [ 0, %1 ], [ %5, %4 ]
  %9 = getelementptr inbounds i8, ptr %3, i64 %8
  %10 = load i8, ptr %9, align 1, !tbaa !13
  %11 = getelementptr inbounds [7 x i8], ptr @.str.912, i64 0, i64 %8
  %12 = load i8, ptr %11, align 1, !tbaa !13
  %13 = icmp eq i8 %10, %12
  br i1 %13, label %4, label %14

14:                                               ; preds = %7, %4
  %15 = phi i32 [ 0, %7 ], [ 1, %4 ]
  ret i32 %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @mem_bytes_per_scan_line(ptr nocapture noundef readonly %0) #12 {
  %2 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 8, !tbaa !382
  %4 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 9
  %5 = load i32, ptr %4, align 8, !tbaa !385
  %6 = mul nsw i32 %5, %3
  %7 = add nsw i32 %6, 7
  %8 = ashr i32 %7, 3
  ret i32 %8
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_copy_scan_lines(ptr noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2, i32 noundef %3) #0 {
  %5 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %6 = load i32, ptr %5, align 8, !tbaa !382
  %7 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 9
  %8 = load i32, ptr %7, align 8, !tbaa !385
  %9 = mul nsw i32 %8, %6
  %10 = add nsw i32 %9, 7
  %11 = ashr i32 %10, 3
  %12 = udiv i32 %3, %11
  %13 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %14 = load i32, ptr %13, align 4, !tbaa !383
  %15 = sub nsw i32 %14, %1
  %16 = tail call i32 @llvm.umin.i32(i32 %12, i32 %15)
  %17 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %18 = load ptr, ptr %17, align 8, !tbaa !761
  %19 = tail call i32 %18(ptr noundef nonnull %0, i32 noundef 0, i32 noundef %1, i32 noundef %11, i32 noundef %16, i32 noundef 0) #64
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %35

21:                                               ; preds = %21, %4
  %22 = phi i32 [ %31, %21 ], [ %16, %4 ]
  %23 = phi i32 [ %30, %21 ], [ %1, %4 ]
  %24 = phi ptr [ %29, %21 ], [ %2, %4 ]
  %25 = lshr i32 %22, 1
  %26 = mul i32 %25, %11
  %27 = tail call i32 @mem_copy_scan_lines(ptr noundef nonnull %0, i32 noundef %23, ptr noundef %24, i32 noundef %26) #62
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds i8, ptr %24, i64 %28
  %30 = add i32 %25, %23
  %31 = sub i32 %22, %25
  %32 = load ptr, ptr %17, align 8, !tbaa !761
  %33 = tail call i32 %32(ptr noundef nonnull %0, i32 noundef 0, i32 noundef %30, i32 noundef %11, i32 noundef %31, i32 noundef 0) #64
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %21, label %35, !llvm.loop !762

35:                                               ; preds = %21, %4
  %36 = phi ptr [ %2, %4 ], [ %29, %21 ]
  %37 = phi i32 [ %1, %4 ], [ %30, %21 ]
  %38 = phi i32 [ %16, %4 ], [ %31, %21 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %57, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %42 = load ptr, ptr %41, align 8, !tbaa !758
  %43 = sext i32 %37 to i64
  %44 = getelementptr inbounds ptr, ptr %42, i64 %43
  %45 = zext i32 %11 to i64
  br label %46

46:                                               ; preds = %46, %40
  %47 = phi ptr [ %44, %40 ], [ %52, %46 ]
  %48 = phi i32 [ %38, %40 ], [ %50, %46 ]
  %49 = phi ptr [ %36, %40 ], [ %53, %46 ]
  %50 = add i32 %48, -1
  %51 = load ptr, ptr %47, align 8, !tbaa !7
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %49, ptr align 1 %51, i64 %45, i1 false)
  %52 = getelementptr inbounds ptr, ptr %47, i64 1
  %53 = getelementptr inbounds i8, ptr %49, i64 %45
  %54 = icmp eq i32 %50, 0
  br i1 %54, label %55, label %46, !llvm.loop !763

55:                                               ; preds = %46
  %56 = add i32 %38, %37
  br label %57

57:                                               ; preds = %55, %35
  %58 = phi i32 [ %37, %35 ], [ %56, %55 ]
  %59 = sub nsw i32 %58, %1
  ret i32 %59
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @mem_no_fault_proc(ptr nocapture readnone %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) #10 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_fill_recover(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5, i32 noundef %6) #0 {
  switch i32 %6, label %32 [
    i32 -1, label %8
    i32 -2, label %12
  ]

8:                                                ; preds = %7
  %9 = ashr i32 %3, 1
  %10 = add nsw i32 %9, %1
  %11 = sub nsw i32 %3, %9
  br label %16

12:                                               ; preds = %7
  %13 = ashr i32 %4, 1
  %14 = add nsw i32 %13, %2
  %15 = sub nsw i32 %4, %13
  br label %16

16:                                               ; preds = %12, %8
  %17 = phi i32 [ %15, %12 ], [ %4, %8 ]
  %18 = phi i32 [ %3, %12 ], [ %11, %8 ]
  %19 = phi i32 [ %1, %12 ], [ %10, %8 ]
  %20 = phi i32 [ %3, %12 ], [ %9, %8 ]
  %21 = phi i32 [ %14, %12 ], [ %2, %8 ]
  %22 = phi i32 [ %13, %12 ], [ %4, %8 ]
  %23 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !25
  %25 = getelementptr inbounds %struct.gx_device_procs_s, ptr %24, i64 0, i32 7
  %26 = load ptr, ptr %25, align 8, !tbaa !455
  %27 = tail call i32 %26(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %18, i32 noundef %17, i64 noundef %5) #64
  %28 = load ptr, ptr %23, align 8, !tbaa !25
  %29 = getelementptr inbounds %struct.gx_device_procs_s, ptr %28, i64 0, i32 7
  %30 = load ptr, ptr %29, align 8, !tbaa !455
  %31 = tail call i32 %30(ptr noundef %0, i32 noundef %19, i32 noundef %21, i32 noundef %20, i32 noundef %22, i64 noundef %5) #64
  br label %32

32:                                               ; preds = %16, %7
  %33 = phi i32 [ %31, %16 ], [ %6, %7 ]
  ret i32 %33
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_copy_mono_recover(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9, i32 noundef %10) #0 {
  switch i32 %10, label %36 [
    i32 -1, label %12
    i32 -2, label %16
  ]

12:                                               ; preds = %11
  %13 = ashr i32 %6, 1
  %14 = add nsw i32 %13, %4
  %15 = sub nsw i32 %6, %13
  br label %20

16:                                               ; preds = %11
  %17 = ashr i32 %7, 1
  %18 = add nsw i32 %17, %5
  %19 = sub nsw i32 %7, %17
  br label %20

20:                                               ; preds = %16, %12
  %21 = phi i32 [ %19, %16 ], [ %7, %12 ]
  %22 = phi i32 [ %6, %16 ], [ %15, %12 ]
  %23 = phi i32 [ %4, %16 ], [ %14, %12 ]
  %24 = phi i32 [ %6, %16 ], [ %13, %12 ]
  %25 = phi i32 [ %18, %16 ], [ %5, %12 ]
  %26 = phi i32 [ %17, %16 ], [ %7, %12 ]
  %27 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !25
  %29 = getelementptr inbounds %struct.gx_device_procs_s, ptr %28, i64 0, i32 9
  %30 = load ptr, ptr %29, align 8, !tbaa !451
  %31 = tail call i32 %30(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %22, i32 noundef %21, i64 noundef %8, i64 noundef %9) #64
  %32 = load ptr, ptr %27, align 8, !tbaa !25
  %33 = getelementptr inbounds %struct.gx_device_procs_s, ptr %32, i64 0, i32 9
  %34 = load ptr, ptr %33, align 8, !tbaa !451
  %35 = tail call i32 %34(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %23, i32 noundef %25, i32 noundef %24, i32 noundef %26, i64 noundef %8, i64 noundef %9) #64
  br label %36

36:                                               ; preds = %20, %11
  %37 = phi i32 [ %35, %20 ], [ %10, %11 ]
  ret i32 %37
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_copy_color_recover(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %8) #0 {
  switch i32 %8, label %34 [
    i32 -1, label %10
    i32 -2, label %14
  ]

10:                                               ; preds = %9
  %11 = ashr i32 %6, 1
  %12 = add nsw i32 %11, %4
  %13 = sub nsw i32 %6, %11
  br label %18

14:                                               ; preds = %9
  %15 = ashr i32 %7, 1
  %16 = add nsw i32 %15, %5
  %17 = sub nsw i32 %7, %15
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i32 [ %6, %14 ], [ %13, %10 ]
  %20 = phi i32 [ %17, %14 ], [ %7, %10 ]
  %21 = phi i32 [ %4, %14 ], [ %12, %10 ]
  %22 = phi i32 [ %6, %14 ], [ %11, %10 ]
  %23 = phi i32 [ %16, %14 ], [ %5, %10 ]
  %24 = phi i32 [ %15, %14 ], [ %7, %10 ]
  %25 = getelementptr inbounds %struct.gx_device_s, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !25
  %27 = getelementptr inbounds %struct.gx_device_procs_s, ptr %26, i64 0, i32 10
  %28 = load ptr, ptr %27, align 8, !tbaa !623
  %29 = tail call i32 %28(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %19, i32 noundef %20) #64
  %30 = load ptr, ptr %25, align 8, !tbaa !25
  %31 = getelementptr inbounds %struct.gx_device_procs_s, ptr %30, i64 0, i32 10
  %32 = load ptr, ptr %31, align 8, !tbaa !623
  %33 = tail call i32 %32(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %21, i32 noundef %23, i32 noundef %22, i32 noundef %24) #64
  br label %34

34:                                               ; preds = %18, %9
  %35 = phi i32 [ %33, %18 ], [ %8, %9 ]
  ret i32 %35
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_mono_fill_rectangle(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5) #0 {
  %7 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %8 = load ptr, ptr %7, align 8, !tbaa !761
  %9 = icmp eq ptr %8, @mem_no_fault_proc
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = ashr i32 %1, 3
  %12 = add i32 %1, 7
  %13 = add i32 %12, %3
  %14 = ashr i32 %13, 3
  %15 = sub nsw i32 %14, %11
  %16 = tail call i32 %8(ptr noundef nonnull %0, i32 noundef %11, i32 noundef %2, i32 noundef %15, i32 noundef %4, i32 noundef 1) #64
  %17 = icmp sgt i32 %16, -1
  br i1 %17, label %20, label %18

18:                                               ; preds = %10
  %19 = tail call i32 @mem_fill_recover(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5, i32 noundef %16) #62
  br label %149

20:                                               ; preds = %10, %6
  %21 = icmp slt i32 %3, 1
  %22 = icmp slt i32 %4, 1
  %23 = or i1 %21, %22
  br i1 %23, label %149, label %24

24:                                               ; preds = %20
  %25 = icmp slt i32 %1, 0
  br i1 %25, label %149, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %28 = load i32, ptr %27, align 8, !tbaa !382
  %29 = sub nsw i32 %28, %3
  %30 = icmp slt i32 %29, %1
  %31 = icmp slt i32 %2, 0
  %32 = or i1 %31, %30
  br i1 %32, label %149, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %35 = load i32, ptr %34, align 4, !tbaa !383
  %36 = sub nsw i32 %35, %4
  %37 = icmp slt i32 %36, %2
  br i1 %37, label %149, label %38

38:                                               ; preds = %33
  %39 = lshr i32 %1, 3
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %42 = load ptr, ptr %41, align 8, !tbaa !758
  %43 = zext i32 %2 to i64
  %44 = getelementptr inbounds ptr, ptr %42, i64 %43
  switch i64 %5, label %54 [
    i64 0, label %45
    i64 1, label %49
    i64 -1, label %149
  ]

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 16
  %47 = load i32, ptr %46, align 8, !tbaa !387
  %48 = trunc i32 %47 to i8
  br label %55

49:                                               ; preds = %38
  %50 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 16
  %51 = load i32, ptr %50, align 8, !tbaa !387
  %52 = trunc i32 %51 to i8
  %53 = xor i8 %52, -1
  br label %55

54:                                               ; preds = %38
  br label %149

55:                                               ; preds = %49, %45
  %56 = phi i8 [ %53, %49 ], [ %48, %45 ]
  %57 = and i32 %1, 7
  %58 = add nuw i32 %57, %3
  %59 = icmp ult i32 %58, 9
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = lshr i32 255, %3
  %62 = xor i32 %61, 255
  %63 = lshr i32 %62, %57
  br label %118

64:                                               ; preds = %55
  %65 = icmp eq i32 %57, 0
  br i1 %65, label %98, label %66

66:                                               ; preds = %64
  %67 = icmp eq i8 %56, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %66
  %69 = lshr i32 255, %57
  %70 = trunc i32 %69 to i8
  br label %74

71:                                               ; preds = %66
  %72 = ashr i32 -256, %57
  %73 = trunc i32 %72 to i8
  br label %84

74:                                               ; preds = %74, %68
  %75 = phi i32 [ %82, %74 ], [ %4, %68 ]
  %76 = phi ptr [ %81, %74 ], [ %44, %68 ]
  %77 = load ptr, ptr %76, align 8, !tbaa !7
  %78 = getelementptr inbounds i8, ptr %77, i64 %40
  %79 = load i8, ptr %78, align 1, !tbaa !13
  %80 = or i8 %79, %70
  store i8 %80, ptr %78, align 1, !tbaa !13
  %81 = getelementptr inbounds ptr, ptr %76, i64 1
  %82 = add nsw i32 %75, -1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %94, label %74, !llvm.loop !764

84:                                               ; preds = %84, %71
  %85 = phi i32 [ %92, %84 ], [ %4, %71 ]
  %86 = phi ptr [ %91, %84 ], [ %44, %71 ]
  %87 = load ptr, ptr %86, align 8, !tbaa !7
  %88 = getelementptr inbounds i8, ptr %87, i64 %40
  %89 = load i8, ptr %88, align 1, !tbaa !13
  %90 = and i8 %89, %73
  store i8 %90, ptr %88, align 1, !tbaa !13
  %91 = getelementptr inbounds ptr, ptr %86, i64 1
  %92 = add nsw i32 %85, -1
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %84, !llvm.loop !765

94:                                               ; preds = %84, %74
  %95 = add nuw nsw i32 %39, 1
  %96 = or i32 %1, -8
  %97 = add nsw i32 %96, %3
  br label %98

98:                                               ; preds = %94, %64
  %99 = phi i32 [ %95, %94 ], [ %39, %64 ]
  %100 = phi i32 [ %97, %94 ], [ %3, %64 ]
  %101 = and i32 %100, 7
  %102 = ashr i32 -256, %101
  %103 = ashr i32 %100, 3
  %104 = icmp ult i32 %100, 8
  br i1 %104, label %118, label %105

105:                                              ; preds = %98
  %106 = zext i32 %99 to i64
  %107 = sext i32 %103 to i64
  br label %108

108:                                              ; preds = %108, %105
  %109 = phi i32 [ %4, %105 ], [ %114, %108 ]
  %110 = phi ptr [ %44, %105 ], [ %113, %108 ]
  %111 = load ptr, ptr %110, align 8, !tbaa !7
  %112 = getelementptr inbounds i8, ptr %111, i64 %106
  tail call void @llvm.memset.p0.i64(ptr align 1 %112, i8 %56, i64 %107, i1 false)
  %113 = getelementptr inbounds ptr, ptr %110, i64 1
  %114 = add nsw i32 %109, -1
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %108, !llvm.loop !766

116:                                              ; preds = %108
  %117 = add nsw i32 %103, %99
  br label %118

118:                                              ; preds = %116, %98, %60
  %119 = phi i32 [ %39, %60 ], [ %117, %116 ], [ %99, %98 ]
  %120 = phi i32 [ %63, %60 ], [ %102, %116 ], [ %102, %98 ]
  %121 = and i32 %120, 255
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %149, label %123

123:                                              ; preds = %118
  %124 = icmp eq i8 %56, 0
  %125 = sext i32 %119 to i64
  %126 = trunc i32 %120 to i8
  br i1 %124, label %137, label %127

127:                                              ; preds = %127, %123
  %128 = phi i32 [ %135, %127 ], [ %4, %123 ]
  %129 = phi ptr [ %134, %127 ], [ %44, %123 ]
  %130 = load ptr, ptr %129, align 8, !tbaa !7
  %131 = getelementptr inbounds i8, ptr %130, i64 %125
  %132 = load i8, ptr %131, align 1, !tbaa !13
  %133 = or i8 %132, %126
  store i8 %133, ptr %131, align 1, !tbaa !13
  %134 = getelementptr inbounds ptr, ptr %129, i64 1
  %135 = add nsw i32 %128, -1
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %149, label %127, !llvm.loop !767

137:                                              ; preds = %123
  %138 = xor i8 %126, -1
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i32 [ %4, %137 ], [ %147, %139 ]
  %141 = phi ptr [ %44, %137 ], [ %146, %139 ]
  %142 = load ptr, ptr %141, align 8, !tbaa !7
  %143 = getelementptr inbounds i8, ptr %142, i64 %125
  %144 = load i8, ptr %143, align 1, !tbaa !13
  %145 = and i8 %144, %138
  store i8 %145, ptr %143, align 1, !tbaa !13
  %146 = getelementptr inbounds ptr, ptr %141, i64 1
  %147 = add nsw i32 %140, -1
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %139, !llvm.loop !768

149:                                              ; preds = %139, %127, %118, %54, %38, %33, %26, %24, %20, %18
  %150 = phi i32 [ -1, %54 ], [ %19, %18 ], [ 0, %20 ], [ -1, %33 ], [ -1, %26 ], [ -1, %24 ], [ 0, %38 ], [ 0, %118 ], [ 0, %139 ], [ 0, %127 ]
  ret i32 %150
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_mono_copy_mono(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9) #0 {
  %11 = trunc i64 %9 to i32
  %12 = trunc i64 %8 to i32
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %10
  %15 = tail call i32 @mem_mono_fill_rectangle(ptr noundef %0, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8) #62
  br label %274

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %18 = load ptr, ptr %17, align 8, !tbaa !761
  %19 = icmp eq ptr %18, @mem_no_fault_proc
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = ashr i32 %4, 3
  %22 = add i32 %4, 7
  %23 = add i32 %22, %6
  %24 = ashr i32 %23, 3
  %25 = sub nsw i32 %24, %21
  %26 = tail call i32 %18(ptr noundef nonnull %0, i32 noundef %21, i32 noundef %5, i32 noundef %25, i32 noundef %7, i32 noundef 1) #64
  %27 = icmp sgt i32 %26, -1
  br i1 %27, label %30, label %28

28:                                               ; preds = %20
  %29 = tail call i32 @mem_copy_mono_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9, i32 noundef %26) #62
  br label %274

30:                                               ; preds = %20, %16
  %31 = icmp slt i32 %6, 1
  %32 = icmp slt i32 %7, 1
  %33 = or i1 %31, %32
  br i1 %33, label %274, label %34

34:                                               ; preds = %30
  %35 = icmp slt i32 %4, 0
  br i1 %35, label %274, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %38 = load i32, ptr %37, align 8, !tbaa !382
  %39 = sub nsw i32 %38, %6
  %40 = icmp slt i32 %39, %4
  %41 = icmp slt i32 %5, 0
  %42 = or i1 %41, %40
  br i1 %42, label %274, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %45 = load i32, ptr %44, align 4, !tbaa !383
  %46 = sub nsw i32 %45, %7
  %47 = icmp slt i32 %46, %5
  br i1 %47, label %274, label %48

48:                                               ; preds = %43
  %49 = lshr i32 %4, 3
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %52 = load ptr, ptr %51, align 8, !tbaa !758
  %53 = zext i32 %5 to i64
  %54 = getelementptr inbounds ptr, ptr %52, i64 %53
  %55 = load ptr, ptr %54, align 8, !tbaa !7
  %56 = getelementptr inbounds i8, ptr %55, i64 %50
  %57 = ashr i32 %2, 3
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, ptr %1, i64 %58
  %60 = and i32 %2, 7
  %61 = sub nuw nsw i32 8, %60
  %62 = and i32 %4, 7
  %63 = sub nuw nsw i32 8, %62
  %64 = lshr i32 255, %62
  %65 = icmp ugt i32 %63, %6
  br i1 %65, label %66, label %69

66:                                               ; preds = %48
  %67 = lshr i32 %64, %6
  %68 = sub nsw i32 %64, %67
  br label %74

69:                                               ; preds = %48
  %70 = sub nsw i32 %6, %63
  %71 = and i32 %70, 7
  %72 = lshr i32 255, %71
  %73 = xor i32 %72, 255
  br label %74

74:                                               ; preds = %69, %66
  %75 = phi i32 [ undef, %66 ], [ %73, %69 ]
  %76 = phi i32 [ %68, %66 ], [ %64, %69 ]
  %77 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 16
  %78 = load i32, ptr %77, align 8, !tbaa !387
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %89, label %80

80:                                               ; preds = %74
  %81 = icmp ne i32 %12, -1
  %82 = zext i1 %81 to i64
  %83 = xor i64 %82, %8
  %84 = icmp ne i32 %11, -1
  %85 = zext i1 %84 to i64
  %86 = xor i64 %85, %9
  %87 = trunc i64 %83 to i32
  %88 = trunc i64 %86 to i32
  br label %89

89:                                               ; preds = %80, %74
  %90 = phi i32 [ %88, %80 ], [ %11, %74 ]
  %91 = phi i32 [ %87, %80 ], [ %12, %74 ]
  %92 = icmp eq i32 %91, 1
  %93 = icmp eq i32 %90, 0
  %94 = or i1 %93, %92
  %95 = sext i1 %94 to i32
  %96 = icmp eq i32 %91, 0
  %97 = or i1 %93, %96
  %98 = xor i1 %97, true
  %99 = sext i1 %98 to i32
  %100 = icmp eq i32 %90, 1
  %101 = or i1 %100, %92
  %102 = sext i1 %101 to i32
  %103 = icmp eq i32 %62, %60
  br i1 %103, label %104, label %172

104:                                              ; preds = %89
  %105 = sub nsw i32 %6, %63
  %106 = xor i32 %76, -1
  %107 = or i32 %99, %106
  %108 = and i32 %76, %102
  %109 = icmp sgt i32 %105, 7
  %110 = xor i32 %75, -1
  %111 = or i32 %99, %110
  %112 = and i32 %75, %102
  %113 = sext i32 %3 to i64
  br label %114

114:                                              ; preds = %166, %104
  %115 = phi i32 [ %7, %104 ], [ %119, %166 ]
  %116 = phi ptr [ %56, %104 ], [ %169, %166 ]
  %117 = phi ptr [ %54, %104 ], [ %167, %166 ]
  %118 = phi ptr [ %59, %104 ], [ %170, %166 ]
  %119 = add nsw i32 %115, -1
  %120 = load i8, ptr %118, align 1, !tbaa !13
  %121 = zext i8 %120 to i32
  %122 = xor i32 %121, %95
  %123 = or i32 %107, %122
  %124 = load i8, ptr %116, align 1, !tbaa !13
  %125 = zext i8 %124 to i32
  %126 = and i32 %123, %125
  %127 = and i32 %108, %122
  %128 = or i32 %126, %127
  %129 = trunc i32 %128 to i8
  store i8 %129, ptr %116, align 1, !tbaa !13
  br i1 %109, label %130, label %148

130:                                              ; preds = %130, %114
  %131 = phi ptr [ %139, %130 ], [ %116, %114 ]
  %132 = phi i32 [ %134, %130 ], [ %105, %114 ]
  %133 = phi ptr [ %135, %130 ], [ %118, %114 ]
  %134 = add nsw i32 %132, -8
  %135 = getelementptr inbounds i8, ptr %133, i64 1
  %136 = load i8, ptr %135, align 1, !tbaa !13
  %137 = zext i8 %136 to i32
  %138 = xor i32 %137, %95
  %139 = getelementptr inbounds i8, ptr %131, i64 1
  %140 = or i32 %138, %99
  %141 = load i8, ptr %139, align 1, !tbaa !13
  %142 = zext i8 %141 to i32
  %143 = and i32 %140, %142
  %144 = and i32 %138, %102
  %145 = or i32 %143, %144
  %146 = trunc i32 %145 to i8
  store i8 %146, ptr %139, align 1, !tbaa !13
  %147 = icmp ugt i32 %132, 15
  br i1 %147, label %130, label %148, !llvm.loop !769

148:                                              ; preds = %130, %114
  %149 = phi ptr [ %118, %114 ], [ %135, %130 ]
  %150 = phi i32 [ %105, %114 ], [ %134, %130 ]
  %151 = phi ptr [ %116, %114 ], [ %139, %130 ]
  %152 = icmp sgt i32 %150, 0
  br i1 %152, label %153, label %166

153:                                              ; preds = %148
  %154 = getelementptr inbounds i8, ptr %149, i64 1
  %155 = load i8, ptr %154, align 1, !tbaa !13
  %156 = zext i8 %155 to i32
  %157 = xor i32 %156, %95
  %158 = getelementptr inbounds i8, ptr %151, i64 1
  %159 = or i32 %111, %157
  %160 = load i8, ptr %158, align 1, !tbaa !13
  %161 = zext i8 %160 to i32
  %162 = and i32 %159, %161
  %163 = and i32 %112, %157
  %164 = or i32 %162, %163
  %165 = trunc i32 %164 to i8
  store i8 %165, ptr %158, align 1, !tbaa !13
  br label %166

166:                                              ; preds = %153, %148
  %167 = getelementptr inbounds ptr, ptr %117, i64 1
  %168 = load ptr, ptr %167, align 8, !tbaa !7
  %169 = getelementptr inbounds i8, ptr %168, i64 %50
  %170 = getelementptr inbounds i8, ptr %118, i64 %113
  %171 = icmp sgt i32 %115, 1
  br i1 %171, label %114, label %274, !llvm.loop !770

172:                                              ; preds = %89
  %173 = sub nsw i32 %61, %63
  %174 = and i32 %173, 7
  %175 = sub nuw nsw i32 8, %174
  %176 = icmp ult i32 %62, %60
  %177 = icmp ult i32 %61, %6
  %178 = xor i32 %76, -1
  %179 = or i32 %99, %178
  %180 = and i32 %76, %102
  %181 = sub nsw i32 %6, %63
  %182 = icmp sgt i32 %181, 7
  %183 = xor i32 %75, -1
  %184 = or i32 %99, %183
  %185 = and i32 %75, %102
  %186 = sext i32 %3 to i64
  br label %187

187:                                              ; preds = %268, %172
  %188 = phi i32 [ %7, %172 ], [ %192, %268 ]
  %189 = phi ptr [ %56, %172 ], [ %271, %268 ]
  %190 = phi ptr [ %54, %172 ], [ %269, %268 ]
  %191 = phi ptr [ %59, %172 ], [ %272, %268 ]
  %192 = add nsw i32 %188, -1
  br i1 %176, label %197, label %193

193:                                              ; preds = %187
  %194 = load i8, ptr %191, align 1, !tbaa !13
  %195 = zext i8 %194 to i32
  %196 = lshr i32 %195, %174
  br label %207

197:                                              ; preds = %187
  %198 = getelementptr inbounds i8, ptr %191, i64 1
  %199 = load i8, ptr %191, align 1, !tbaa !13
  %200 = zext i8 %199 to i32
  %201 = shl nuw nsw i32 %200, %175
  br i1 %177, label %202, label %207

202:                                              ; preds = %197
  %203 = load i8, ptr %198, align 1, !tbaa !13
  %204 = zext i8 %203 to i32
  %205 = lshr i32 %204, %174
  %206 = add nuw nsw i32 %205, %201
  br label %207

207:                                              ; preds = %202, %197, %193
  %208 = phi ptr [ %191, %193 ], [ %198, %202 ], [ %198, %197 ]
  %209 = phi i32 [ %196, %193 ], [ %206, %202 ], [ %201, %197 ]
  %210 = xor i32 %209, %95
  %211 = or i32 %179, %210
  %212 = load i8, ptr %189, align 1, !tbaa !13
  %213 = zext i8 %212 to i32
  %214 = and i32 %211, %213
  %215 = and i32 %180, %210
  %216 = or i32 %214, %215
  %217 = trunc i32 %216 to i8
  store i8 %217, ptr %189, align 1, !tbaa !13
  %218 = getelementptr inbounds i8, ptr %189, i64 1
  br i1 %182, label %219, label %242

219:                                              ; preds = %219, %207
  %220 = phi ptr [ %240, %219 ], [ %218, %207 ]
  %221 = phi i32 [ %239, %219 ], [ %181, %207 ]
  %222 = phi ptr [ %223, %219 ], [ %208, %207 ]
  %223 = getelementptr inbounds i8, ptr %222, i64 1
  %224 = load i8, ptr %222, align 1, !tbaa !13
  %225 = zext i8 %224 to i32
  %226 = shl nuw nsw i32 %225, %175
  %227 = load i8, ptr %223, align 1, !tbaa !13
  %228 = zext i8 %227 to i32
  %229 = lshr i32 %228, %174
  %230 = add nuw nsw i32 %229, %226
  %231 = xor i32 %230, %95
  %232 = or i32 %231, %99
  %233 = load i8, ptr %220, align 1, !tbaa !13
  %234 = zext i8 %233 to i32
  %235 = and i32 %232, %234
  %236 = and i32 %231, %102
  %237 = or i32 %235, %236
  %238 = trunc i32 %237 to i8
  store i8 %238, ptr %220, align 1, !tbaa !13
  %239 = add nsw i32 %221, -8
  %240 = getelementptr inbounds i8, ptr %220, i64 1
  %241 = icmp ugt i32 %221, 15
  br i1 %241, label %219, label %242, !llvm.loop !771

242:                                              ; preds = %219, %207
  %243 = phi ptr [ %208, %207 ], [ %223, %219 ]
  %244 = phi i32 [ %181, %207 ], [ %239, %219 ]
  %245 = phi ptr [ %218, %207 ], [ %240, %219 ]
  %246 = icmp sgt i32 %244, 0
  br i1 %246, label %247, label %268

247:                                              ; preds = %242
  %248 = load i8, ptr %243, align 1, !tbaa !13
  %249 = zext i8 %248 to i32
  %250 = shl nuw nsw i32 %249, %175
  %251 = icmp sgt i32 %244, %174
  br i1 %251, label %252, label %258

252:                                              ; preds = %247
  %253 = getelementptr inbounds i8, ptr %243, i64 1
  %254 = load i8, ptr %253, align 1, !tbaa !13
  %255 = zext i8 %254 to i32
  %256 = lshr i32 %255, %174
  %257 = add nuw nsw i32 %256, %250
  br label %258

258:                                              ; preds = %252, %247
  %259 = phi i32 [ %257, %252 ], [ %250, %247 ]
  %260 = xor i32 %259, %95
  %261 = or i32 %184, %260
  %262 = load i8, ptr %245, align 1, !tbaa !13
  %263 = zext i8 %262 to i32
  %264 = and i32 %261, %263
  %265 = and i32 %185, %260
  %266 = or i32 %264, %265
  %267 = trunc i32 %266 to i8
  store i8 %267, ptr %245, align 1, !tbaa !13
  br label %268

268:                                              ; preds = %258, %242
  %269 = getelementptr inbounds ptr, ptr %190, i64 1
  %270 = load ptr, ptr %269, align 8, !tbaa !7
  %271 = getelementptr inbounds i8, ptr %270, i64 %50
  %272 = getelementptr inbounds i8, ptr %191, i64 %186
  %273 = icmp sgt i32 %188, 1
  br i1 %273, label %187, label %274, !llvm.loop !772

274:                                              ; preds = %268, %166, %43, %36, %34, %30, %28, %14
  %275 = phi i32 [ %15, %14 ], [ %29, %28 ], [ 0, %30 ], [ -1, %43 ], [ -1, %36 ], [ -1, %34 ], [ 0, %166 ], [ 0, %268 ]
  ret i32 %275
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_mono_copy_color(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) #0 {
  %9 = tail call i32 @mem_mono_copy_mono(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef 0, i64 noundef 1) #62
  ret i32 %9
}

; Function Attrs: nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i64 @mem_mapped_map_rgb_color(ptr nocapture noundef readonly %0, i16 noundef zeroext %1, i16 noundef zeroext %2, i16 noundef zeroext %3) #27 {
  %5 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 18
  %6 = load ptr, ptr %5, align 8, !tbaa !389
  %7 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 17
  %8 = load i32, ptr %7, align 4, !tbaa !388
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %48

10:                                               ; preds = %4
  %11 = zext i16 %1 to i32
  %12 = zext i16 %2 to i32
  %13 = zext i16 %3 to i32
  br label %14

14:                                               ; preds = %43, %10
  %15 = phi i32 [ %8, %10 ], [ %19, %43 ]
  %16 = phi i32 [ 768, %10 ], [ %45, %43 ]
  %17 = phi ptr [ undef, %10 ], [ %44, %43 ]
  %18 = phi ptr [ %6, %10 ], [ %46, %43 ]
  %19 = add nsw i32 %15, -1
  %20 = load i8, ptr %18, align 1, !tbaa !13
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %21, %11
  %23 = tail call i32 @llvm.abs.i32(i32 %22, i1 true)
  %24 = icmp slt i32 %23, %16
  br i1 %24, label %25, label %43

25:                                               ; preds = %14
  %26 = getelementptr inbounds i8, ptr %18, i64 1
  %27 = load i8, ptr %26, align 1, !tbaa !13
  %28 = zext i8 %27 to i32
  %29 = sub nsw i32 %28, %12
  %30 = tail call i32 @llvm.abs.i32(i32 %29, i1 true)
  %31 = add nuw nsw i32 %30, %23
  %32 = icmp slt i32 %31, %16
  br i1 %32, label %33, label %43

33:                                               ; preds = %25
  %34 = getelementptr inbounds i8, ptr %18, i64 2
  %35 = load i8, ptr %34, align 1, !tbaa !13
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %36, %13
  %38 = tail call i32 @llvm.abs.i32(i32 %37, i1 true)
  %39 = add nuw nsw i32 %38, %31
  %40 = icmp slt i32 %39, %16
  %41 = select i1 %40, ptr %18, ptr %17
  %42 = tail call i32 @llvm.smin.i32(i32 %39, i32 %16)
  br label %43

43:                                               ; preds = %33, %25, %14
  %44 = phi ptr [ %17, %14 ], [ %41, %33 ], [ %17, %25 ]
  %45 = phi i32 [ %16, %14 ], [ %42, %33 ], [ %16, %25 ]
  %46 = getelementptr inbounds i8, ptr %18, i64 3
  %47 = icmp ugt i32 %15, 1
  br i1 %47, label %14, label %48, !llvm.loop !773

48:                                               ; preds = %43, %4
  %49 = phi ptr [ undef, %4 ], [ %44, %43 ]
  %50 = ptrtoint ptr %49 to i64
  %51 = ptrtoint ptr %6 to i64
  %52 = sub i64 %50, %51
  %53 = sdiv i64 %52, 3
  ret i64 %53
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @mem_mapped_map_color_rgb(ptr nocapture noundef readonly %0, i64 noundef %1, ptr nocapture noundef writeonly %2) #23 {
  %4 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 18
  %5 = load ptr, ptr %4, align 8, !tbaa !389
  %6 = mul i64 %1, 12884901888
  %7 = ashr exact i64 %6, 32
  %8 = getelementptr inbounds i8, ptr %5, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !13
  %10 = zext i8 %9 to i16
  store i16 %10, ptr %2, align 2, !tbaa !102
  %11 = getelementptr inbounds i8, ptr %8, i64 1
  %12 = load i8, ptr %11, align 1, !tbaa !13
  %13 = zext i8 %12 to i16
  %14 = getelementptr inbounds i16, ptr %2, i64 1
  store i16 %13, ptr %14, align 2, !tbaa !102
  %15 = getelementptr inbounds i8, ptr %8, i64 2
  %16 = load i8, ptr %15, align 1, !tbaa !13
  %17 = zext i8 %16 to i16
  %18 = getelementptr inbounds i16, ptr %2, i64 2
  store i16 %17, ptr %18, align 2, !tbaa !102
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_mapped_fill_rectangle(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5) #0 {
  %7 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %8 = load ptr, ptr %7, align 8, !tbaa !761
  %9 = icmp eq ptr %8, @mem_no_fault_proc
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = tail call i32 %8(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef 1) #64
  %12 = icmp sgt i32 %11, -1
  br i1 %12, label %15, label %13

13:                                               ; preds = %10
  %14 = tail call i32 @mem_fill_recover(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5, i32 noundef %11) #62
  br label %33

15:                                               ; preds = %10, %6
  %16 = sext i32 %1 to i64
  %17 = icmp sgt i32 %4, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %20 = load ptr, ptr %19, align 8, !tbaa !758
  %21 = sext i32 %2 to i64
  %22 = getelementptr inbounds ptr, ptr %20, i64 %21
  %23 = trunc i64 %5 to i8
  %24 = sext i32 %3 to i64
  br label %25

25:                                               ; preds = %25, %18
  %26 = phi i32 [ %4, %18 ], [ %28, %25 ]
  %27 = phi ptr [ %22, %18 ], [ %31, %25 ]
  %28 = add nsw i32 %26, -1
  %29 = load ptr, ptr %27, align 8, !tbaa !7
  %30 = getelementptr inbounds i8, ptr %29, i64 %16
  tail call void @llvm.memset.p0.i64(ptr align 1 %30, i8 %23, i64 %24, i1 false)
  %31 = getelementptr inbounds ptr, ptr %27, i64 1
  %32 = icmp ugt i32 %26, 1
  br i1 %32, label %25, label %33, !llvm.loop !774

33:                                               ; preds = %25, %15, %13
  %34 = phi i32 [ %14, %13 ], [ 0, %15 ], [ 0, %25 ]
  ret i32 %34
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_mapped_copy_mono(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9) #0 {
  %11 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %12 = load ptr, ptr %11, align 8, !tbaa !761
  %13 = icmp eq ptr %12, @mem_no_fault_proc
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = tail call i32 %12(ptr noundef nonnull %0, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef 1) #64
  %16 = icmp sgt i32 %15, -1
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  %18 = tail call i32 @mem_copy_mono_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9, i32 noundef %15) #62
  br label %76

19:                                               ; preds = %14, %10
  %20 = sext i32 %4 to i64
  %21 = and i32 %2, 7
  %22 = lshr i32 128, %21
  %23 = icmp sgt i32 %7, 0
  br i1 %23, label %24, label %76

24:                                               ; preds = %19
  %25 = ashr i32 %2, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, ptr %1, i64 %26
  %28 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %29 = load ptr, ptr %28, align 8, !tbaa !758
  %30 = sext i32 %5 to i64
  %31 = getelementptr inbounds ptr, ptr %29, i64 %30
  %32 = icmp eq i64 %9, -1
  %33 = icmp eq i64 %8, -1
  %34 = sext i32 %3 to i64
  br label %35

35:                                               ; preds = %71, %24
  %36 = phi i32 [ %7, %24 ], [ %72, %71 ]
  %37 = phi ptr [ %31, %24 ], [ %74, %71 ]
  %38 = phi ptr [ %27, %24 ], [ %73, %71 ]
  %39 = load ptr, ptr %37, align 8, !tbaa !7
  %40 = getelementptr inbounds i8, ptr %39, i64 %20
  %41 = getelementptr inbounds i8, ptr %38, i64 1
  %42 = load i8, ptr %38, align 1, !tbaa !13
  %43 = zext i8 %42 to i32
  br label %44

44:                                               ; preds = %64, %35
  %45 = phi ptr [ %40, %35 ], [ %68, %64 ]
  %46 = phi ptr [ %41, %35 ], [ %65, %64 ]
  %47 = phi i32 [ %43, %35 ], [ %66, %64 ]
  %48 = phi i32 [ %22, %35 ], [ %67, %64 ]
  %49 = phi i32 [ %6, %35 ], [ %69, %64 ]
  %50 = and i32 %48, %47
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %44
  br i1 %32, label %57, label %54

53:                                               ; preds = %44
  br i1 %33, label %57, label %54

54:                                               ; preds = %53, %52
  %55 = phi i64 [ %9, %52 ], [ %8, %53 ]
  %56 = trunc i64 %55 to i8
  store i8 %56, ptr %45, align 1, !tbaa !13
  br label %57

57:                                               ; preds = %54, %53, %52
  %58 = lshr i32 %48, 1
  %59 = icmp ult i32 %48, 2
  br i1 %59, label %60, label %64

60:                                               ; preds = %57
  %61 = getelementptr inbounds i8, ptr %46, i64 1
  %62 = load i8, ptr %46, align 1, !tbaa !13
  %63 = zext i8 %62 to i32
  br label %64

64:                                               ; preds = %60, %57
  %65 = phi ptr [ %61, %60 ], [ %46, %57 ]
  %66 = phi i32 [ %63, %60 ], [ %47, %57 ]
  %67 = phi i32 [ 128, %60 ], [ %58, %57 ]
  %68 = getelementptr inbounds i8, ptr %45, i64 1
  %69 = add nsw i32 %49, -1
  %70 = icmp sgt i32 %49, 1
  br i1 %70, label %44, label %71, !llvm.loop !775

71:                                               ; preds = %64
  %72 = add nsw i32 %36, -1
  %73 = getelementptr inbounds i8, ptr %38, i64 %34
  %74 = getelementptr inbounds ptr, ptr %37, i64 1
  %75 = icmp sgt i32 %36, 1
  br i1 %75, label %35, label %76, !llvm.loop !776

76:                                               ; preds = %71, %19, %17
  %77 = phi i32 [ %18, %17 ], [ 0, %19 ], [ 0, %71 ]
  ret i32 %77
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_mapped_copy_color(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) #0 {
  %9 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %10 = load ptr, ptr %9, align 8, !tbaa !761
  %11 = icmp eq ptr %10, @mem_no_fault_proc
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = tail call i32 %10(ptr noundef nonnull %0, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef 1) #64
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = tail call i32 @mem_copy_color_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %13) #62
  br label %55

17:                                               ; preds = %12, %8
  %18 = icmp slt i32 %6, 1
  %19 = icmp slt i32 %7, 1
  %20 = or i1 %18, %19
  br i1 %20, label %55, label %21

21:                                               ; preds = %17
  %22 = icmp slt i32 %4, 0
  br i1 %22, label %55, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %25 = load i32, ptr %24, align 8, !tbaa !382
  %26 = sub nsw i32 %25, %6
  %27 = icmp slt i32 %26, %4
  %28 = icmp slt i32 %5, 0
  %29 = or i1 %28, %27
  br i1 %29, label %55, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %32 = load i32, ptr %31, align 4, !tbaa !383
  %33 = sub nsw i32 %32, %7
  %34 = icmp slt i32 %33, %5
  br i1 %34, label %55, label %35

35:                                               ; preds = %30
  %36 = sext i32 %2 to i64
  %37 = getelementptr inbounds i8, ptr %1, i64 %36
  %38 = zext i32 %4 to i64
  %39 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %40 = load ptr, ptr %39, align 8, !tbaa !758
  %41 = zext i32 %5 to i64
  %42 = getelementptr inbounds ptr, ptr %40, i64 %41
  %43 = zext i32 %6 to i64
  %44 = sext i32 %3 to i64
  br label %45

45:                                               ; preds = %45, %35
  %46 = phi ptr [ %42, %35 ], [ %53, %45 ]
  %47 = phi i32 [ %7, %35 ], [ %49, %45 ]
  %48 = phi ptr [ %37, %35 ], [ %52, %45 ]
  %49 = add nsw i32 %47, -1
  %50 = load ptr, ptr %46, align 8, !tbaa !7
  %51 = getelementptr inbounds i8, ptr %50, i64 %38
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %51, ptr align 1 %48, i64 %43, i1 false)
  %52 = getelementptr inbounds i8, ptr %48, i64 %44
  %53 = getelementptr inbounds ptr, ptr %46, i64 1
  %54 = icmp ugt i32 %47, 1
  br i1 %54, label %45, label %55, !llvm.loop !777

55:                                               ; preds = %45, %30, %23, %21, %17, %15
  %56 = phi i32 [ %16, %15 ], [ 0, %17 ], [ -1, %30 ], [ -1, %23 ], [ -1, %21 ], [ 0, %45 ]
  ret i32 %56
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i64 @mem_true_map_rgb_color(ptr nocapture readnone %0, i16 noundef zeroext %1, i16 noundef zeroext %2, i16 noundef zeroext %3) #10 {
  %5 = and i16 %3, 255
  %6 = zext i16 %5 to i64
  %7 = shl nuw nsw i64 %6, 24
  %8 = and i16 %2, 255
  %9 = zext i16 %8 to i64
  %10 = shl nuw nsw i64 %9, 16
  %11 = or i64 %7, %10
  %12 = shl i16 %1, 8
  %13 = zext i16 %12 to i64
  %14 = or i64 %11, %13
  ret i64 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @mem_true_map_color_rgb(ptr nocapture readnone %0, i64 noundef %1, ptr nocapture noundef writeonly %2) #45 {
  %4 = trunc i64 %1 to i16
  %5 = lshr i16 %4, 8
  %6 = lshr i64 %1, 16
  %7 = trunc i64 %6 to i16
  %8 = lshr i64 %1, 24
  %9 = trunc i64 %8 to i16
  store i16 %5, ptr %2, align 2, !tbaa !102
  %10 = and i16 %7, 255
  %11 = getelementptr inbounds i16, ptr %2, i64 1
  store i16 %10, ptr %11, align 2, !tbaa !102
  %12 = and i16 %9, 255
  %13 = getelementptr inbounds i16, ptr %2, i64 2
  store i16 %12, ptr %13, align 2, !tbaa !102
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_true24_fill_rectangle(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5) #0 {
  %7 = lshr i64 %5, 8
  %8 = trunc i64 %7 to i8
  %9 = lshr i64 %5, 16
  %10 = trunc i64 %9 to i8
  %11 = lshr i64 %5, 24
  %12 = trunc i64 %11 to i8
  %13 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %14 = load ptr, ptr %13, align 8, !tbaa !761
  %15 = icmp eq ptr %14, @mem_no_fault_proc
  %16 = mul nsw i32 %1, 3
  br i1 %15, label %23, label %17

17:                                               ; preds = %6
  %18 = mul nsw i32 %3, 3
  %19 = tail call i32 %14(ptr noundef nonnull %0, i32 noundef %16, i32 noundef %2, i32 noundef %18, i32 noundef %4, i32 noundef 1) #64
  %20 = icmp sgt i32 %19, -1
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = tail call i32 @mem_fill_recover(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5, i32 noundef %19) #62
  br label %48

23:                                               ; preds = %17, %6
  %24 = sext i32 %16 to i64
  %25 = icmp sgt i32 %4, 0
  br i1 %25, label %26, label %48

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %28 = load ptr, ptr %27, align 8, !tbaa !758
  %29 = sext i32 %2 to i64
  %30 = getelementptr inbounds ptr, ptr %28, i64 %29
  br label %31

31:                                               ; preds = %44, %26
  %32 = phi i32 [ %45, %44 ], [ %4, %26 ]
  %33 = phi ptr [ %46, %44 ], [ %30, %26 ]
  %34 = load ptr, ptr %33, align 8, !tbaa !7
  %35 = getelementptr inbounds i8, ptr %34, i64 %24
  br label %36

36:                                               ; preds = %36, %31
  %37 = phi i32 [ %3, %31 ], [ %42, %36 ]
  %38 = phi ptr [ %35, %31 ], [ %41, %36 ]
  %39 = getelementptr inbounds i8, ptr %38, i64 1
  store i8 %8, ptr %38, align 1, !tbaa !13
  %40 = getelementptr inbounds i8, ptr %38, i64 2
  store i8 %10, ptr %39, align 1, !tbaa !13
  %41 = getelementptr inbounds i8, ptr %38, i64 3
  store i8 %12, ptr %40, align 1, !tbaa !13
  %42 = add nsw i32 %37, -1
  %43 = icmp sgt i32 %37, 1
  br i1 %43, label %36, label %44, !llvm.loop !778

44:                                               ; preds = %36
  %45 = add nsw i32 %32, -1
  %46 = getelementptr inbounds ptr, ptr %33, i64 1
  %47 = icmp sgt i32 %32, 1
  br i1 %47, label %31, label %48, !llvm.loop !779

48:                                               ; preds = %44, %23, %21
  %49 = phi i32 [ %22, %21 ], [ 0, %23 ], [ 0, %44 ]
  ret i32 %49
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_true24_copy_mono(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9) #0 {
  %11 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %12 = load ptr, ptr %11, align 8, !tbaa !761
  %13 = icmp eq ptr %12, @mem_no_fault_proc
  %14 = mul nsw i32 %4, 3
  br i1 %13, label %21, label %15

15:                                               ; preds = %10
  %16 = mul nsw i32 %6, 3
  %17 = tail call i32 %12(ptr noundef nonnull %0, i32 noundef %14, i32 noundef %5, i32 noundef %16, i32 noundef %7, i32 noundef 1) #64
  %18 = icmp sgt i32 %17, -1
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = tail call i32 @mem_copy_mono_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9, i32 noundef %17) #62
  br label %86

21:                                               ; preds = %15, %10
  %22 = sext i32 %14 to i64
  %23 = and i32 %2, 7
  %24 = lshr i32 128, %23
  %25 = icmp sgt i32 %7, 0
  br i1 %25, label %26, label %86

26:                                               ; preds = %21
  %27 = ashr i32 %2, 3
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, ptr %1, i64 %28
  %30 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %31 = load ptr, ptr %30, align 8, !tbaa !758
  %32 = sext i32 %5 to i64
  %33 = getelementptr inbounds ptr, ptr %31, i64 %32
  %34 = icmp eq i64 %9, -1
  %35 = icmp eq i64 %8, -1
  %36 = sext i32 %3 to i64
  br label %37

37:                                               ; preds = %81, %26
  %38 = phi i32 [ %7, %26 ], [ %82, %81 ]
  %39 = phi ptr [ %33, %26 ], [ %84, %81 ]
  %40 = phi ptr [ %29, %26 ], [ %83, %81 ]
  %41 = load ptr, ptr %39, align 8, !tbaa !7
  %42 = getelementptr inbounds i8, ptr %41, i64 %22
  %43 = getelementptr inbounds i8, ptr %40, i64 1
  %44 = load i8, ptr %40, align 1, !tbaa !13
  %45 = zext i8 %44 to i32
  br label %46

46:                                               ; preds = %75, %37
  %47 = phi ptr [ %42, %37 ], [ %68, %75 ]
  %48 = phi ptr [ %43, %37 ], [ %76, %75 ]
  %49 = phi i32 [ %45, %37 ], [ %77, %75 ]
  %50 = phi i32 [ %24, %37 ], [ %78, %75 ]
  %51 = phi i32 [ %6, %37 ], [ %79, %75 ]
  %52 = and i32 %50, %49
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %46
  br i1 %34, label %67, label %56

55:                                               ; preds = %46
  br i1 %35, label %67, label %56

56:                                               ; preds = %55, %54
  %57 = phi i64 [ %9, %54 ], [ %8, %55 ]
  %58 = lshr i64 %57, 24
  %59 = trunc i64 %58 to i8
  %60 = lshr i64 %57, 16
  %61 = trunc i64 %60 to i8
  %62 = lshr i64 %57, 8
  %63 = trunc i64 %62 to i8
  %64 = getelementptr inbounds i8, ptr %47, i64 1
  store i8 %63, ptr %47, align 1, !tbaa !13
  %65 = getelementptr inbounds i8, ptr %47, i64 2
  store i8 %61, ptr %64, align 1, !tbaa !13
  %66 = getelementptr inbounds i8, ptr %47, i64 3
  store i8 %59, ptr %65, align 1, !tbaa !13
  br label %67

67:                                               ; preds = %56, %55, %54
  %68 = phi ptr [ %47, %54 ], [ %47, %55 ], [ %66, %56 ]
  %69 = lshr i32 %50, 1
  %70 = icmp ult i32 %50, 2
  br i1 %70, label %71, label %75

71:                                               ; preds = %67
  %72 = getelementptr inbounds i8, ptr %48, i64 1
  %73 = load i8, ptr %48, align 1, !tbaa !13
  %74 = zext i8 %73 to i32
  br label %75

75:                                               ; preds = %71, %67
  %76 = phi ptr [ %72, %71 ], [ %48, %67 ]
  %77 = phi i32 [ %74, %71 ], [ %49, %67 ]
  %78 = phi i32 [ 128, %71 ], [ %69, %67 ]
  %79 = add nsw i32 %51, -1
  %80 = icmp sgt i32 %51, 1
  br i1 %80, label %46, label %81, !llvm.loop !780

81:                                               ; preds = %75
  %82 = add nsw i32 %38, -1
  %83 = getelementptr inbounds i8, ptr %40, i64 %36
  %84 = getelementptr inbounds ptr, ptr %39, i64 1
  %85 = icmp sgt i32 %38, 1
  br i1 %85, label %37, label %86, !llvm.loop !781

86:                                               ; preds = %81, %21, %19
  %87 = phi i32 [ %20, %19 ], [ 0, %21 ], [ 0, %81 ]
  ret i32 %87
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_true24_copy_color(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) #0 {
  %9 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %10 = load ptr, ptr %9, align 8, !tbaa !761
  %11 = icmp eq ptr %10, @mem_no_fault_proc
  br i1 %11, label %19, label %12

12:                                               ; preds = %8
  %13 = mul nsw i32 %4, 3
  %14 = mul nsw i32 %6, 3
  %15 = tail call i32 %10(ptr noundef nonnull %0, i32 noundef %13, i32 noundef %5, i32 noundef %14, i32 noundef %7, i32 noundef 1) #64
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = tail call i32 @mem_copy_color_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %15) #62
  br label %60

19:                                               ; preds = %12, %8
  %20 = icmp slt i32 %6, 1
  %21 = icmp slt i32 %7, 1
  %22 = or i1 %20, %21
  br i1 %22, label %60, label %23

23:                                               ; preds = %19
  %24 = icmp slt i32 %4, 0
  br i1 %24, label %60, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %27 = load i32, ptr %26, align 8, !tbaa !382
  %28 = sub nsw i32 %27, %6
  %29 = icmp slt i32 %28, %4
  %30 = icmp slt i32 %5, 0
  %31 = or i1 %30, %29
  br i1 %31, label %60, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %34 = load i32, ptr %33, align 4, !tbaa !383
  %35 = sub nsw i32 %34, %7
  %36 = icmp slt i32 %35, %5
  br i1 %36, label %60, label %37

37:                                               ; preds = %32
  %38 = mul nsw i32 %2, 3
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, ptr %1, i64 %39
  %41 = mul nsw i32 %4, 3
  %42 = mul nsw i32 %6, 3
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %45 = load ptr, ptr %44, align 8, !tbaa !758
  %46 = zext i32 %5 to i64
  %47 = getelementptr inbounds ptr, ptr %45, i64 %46
  %48 = sext i32 %42 to i64
  %49 = sext i32 %3 to i64
  br label %50

50:                                               ; preds = %50, %37
  %51 = phi ptr [ %47, %37 ], [ %58, %50 ]
  %52 = phi i32 [ %7, %37 ], [ %54, %50 ]
  %53 = phi ptr [ %40, %37 ], [ %57, %50 ]
  %54 = add nsw i32 %52, -1
  %55 = load ptr, ptr %51, align 8, !tbaa !7
  %56 = getelementptr inbounds i8, ptr %55, i64 %43
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %56, ptr align 1 %53, i64 %48, i1 false)
  %57 = getelementptr inbounds i8, ptr %53, i64 %49
  %58 = getelementptr inbounds ptr, ptr %51, i64 1
  %59 = icmp ugt i32 %52, 1
  br i1 %59, label %50, label %60, !llvm.loop !777

60:                                               ; preds = %50, %32, %25, %23, %19, %17
  %61 = phi i32 [ %18, %17 ], [ 0, %19 ], [ -1, %32 ], [ -1, %25 ], [ -1, %23 ], [ 0, %50 ]
  ret i32 %61
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_true32_fill_rectangle(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5) #0 {
  %7 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %8 = load ptr, ptr %7, align 8, !tbaa !761
  %9 = icmp eq ptr %8, @mem_no_fault_proc
  %10 = shl i32 %1, 2
  br i1 %9, label %17, label %11

11:                                               ; preds = %6
  %12 = shl i32 %3, 2
  %13 = tail call i32 %8(ptr noundef nonnull %0, i32 noundef %10, i32 noundef %2, i32 noundef %12, i32 noundef %4, i32 noundef 1) #64
  %14 = icmp sgt i32 %13, -1
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i32 @mem_fill_recover(ptr noundef nonnull %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5, i32 noundef %13) #62
  br label %40

17:                                               ; preds = %11, %6
  %18 = sext i32 %10 to i64
  %19 = icmp sgt i32 %4, 0
  br i1 %19, label %20, label %40

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %22 = load ptr, ptr %21, align 8, !tbaa !758
  %23 = sext i32 %2 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  br label %25

25:                                               ; preds = %36, %20
  %26 = phi i32 [ %37, %36 ], [ %4, %20 ]
  %27 = phi ptr [ %38, %36 ], [ %24, %20 ]
  %28 = load ptr, ptr %27, align 8, !tbaa !7
  %29 = getelementptr inbounds i8, ptr %28, i64 %18
  br label %30

30:                                               ; preds = %30, %25
  %31 = phi ptr [ %29, %25 ], [ %33, %30 ]
  %32 = phi i32 [ %3, %25 ], [ %34, %30 ]
  %33 = getelementptr inbounds i64, ptr %31, i64 1
  store i64 %5, ptr %31, align 8, !tbaa !18
  %34 = add nsw i32 %32, -1
  %35 = icmp sgt i32 %32, 1
  br i1 %35, label %30, label %36, !llvm.loop !782

36:                                               ; preds = %30
  %37 = add nsw i32 %26, -1
  %38 = getelementptr inbounds ptr, ptr %27, i64 1
  %39 = icmp sgt i32 %26, 1
  br i1 %39, label %25, label %40, !llvm.loop !783

40:                                               ; preds = %36, %17, %15
  %41 = phi i32 [ %16, %15 ], [ 0, %17 ], [ 0, %36 ]
  ret i32 %41
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_true32_copy_mono(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9) #0 {
  %11 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %12 = load ptr, ptr %11, align 8, !tbaa !761
  %13 = icmp eq ptr %12, @mem_no_fault_proc
  %14 = shl i32 %4, 2
  br i1 %13, label %21, label %15

15:                                               ; preds = %10
  %16 = shl i32 %6, 2
  %17 = tail call i32 %12(ptr noundef nonnull %0, i32 noundef %14, i32 noundef %5, i32 noundef %16, i32 noundef %7, i32 noundef 1) #64
  %18 = icmp sgt i32 %17, -1
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = tail call i32 @mem_copy_mono_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i64 noundef %8, i64 noundef %9, i32 noundef %17) #62
  br label %77

21:                                               ; preds = %15, %10
  %22 = sext i32 %14 to i64
  %23 = and i32 %2, 7
  %24 = lshr i32 128, %23
  %25 = icmp sgt i32 %7, 0
  br i1 %25, label %26, label %77

26:                                               ; preds = %21
  %27 = ashr i32 %2, 3
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, ptr %1, i64 %28
  %30 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %31 = load ptr, ptr %30, align 8, !tbaa !758
  %32 = sext i32 %5 to i64
  %33 = getelementptr inbounds ptr, ptr %31, i64 %32
  %34 = icmp eq i64 %9, -1
  %35 = icmp eq i64 %8, -1
  %36 = sext i32 %3 to i64
  br label %37

37:                                               ; preds = %72, %26
  %38 = phi i32 [ %7, %26 ], [ %73, %72 ]
  %39 = phi ptr [ %33, %26 ], [ %75, %72 ]
  %40 = phi ptr [ %29, %26 ], [ %74, %72 ]
  %41 = load ptr, ptr %39, align 8, !tbaa !7
  %42 = getelementptr inbounds i8, ptr %41, i64 %22
  %43 = getelementptr inbounds i8, ptr %40, i64 1
  %44 = load i8, ptr %40, align 1, !tbaa !13
  %45 = zext i8 %44 to i32
  br label %46

46:                                               ; preds = %65, %37
  %47 = phi ptr [ %42, %37 ], [ %69, %65 ]
  %48 = phi ptr [ %43, %37 ], [ %66, %65 ]
  %49 = phi i32 [ %45, %37 ], [ %67, %65 ]
  %50 = phi i32 [ %24, %37 ], [ %68, %65 ]
  %51 = phi i32 [ %6, %37 ], [ %70, %65 ]
  %52 = and i32 %50, %49
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %46
  br i1 %34, label %58, label %56

55:                                               ; preds = %46
  br i1 %35, label %58, label %56

56:                                               ; preds = %55, %54
  %57 = phi i64 [ %9, %54 ], [ %8, %55 ]
  store i64 %57, ptr %47, align 8, !tbaa !18
  br label %58

58:                                               ; preds = %56, %55, %54
  %59 = lshr i32 %50, 1
  %60 = icmp ult i32 %50, 2
  br i1 %60, label %61, label %65

61:                                               ; preds = %58
  %62 = getelementptr inbounds i8, ptr %48, i64 1
  %63 = load i8, ptr %48, align 1, !tbaa !13
  %64 = zext i8 %63 to i32
  br label %65

65:                                               ; preds = %61, %58
  %66 = phi ptr [ %62, %61 ], [ %48, %58 ]
  %67 = phi i32 [ %64, %61 ], [ %49, %58 ]
  %68 = phi i32 [ 128, %61 ], [ %59, %58 ]
  %69 = getelementptr inbounds i64, ptr %47, i64 1
  %70 = add nsw i32 %51, -1
  %71 = icmp sgt i32 %51, 1
  br i1 %71, label %46, label %72, !llvm.loop !784

72:                                               ; preds = %65
  %73 = add nsw i32 %38, -1
  %74 = getelementptr inbounds i8, ptr %40, i64 %36
  %75 = getelementptr inbounds ptr, ptr %39, i64 1
  %76 = icmp sgt i32 %38, 1
  br i1 %76, label %37, label %77, !llvm.loop !785

77:                                               ; preds = %72, %21, %19
  %78 = phi i32 [ %20, %19 ], [ 0, %21 ], [ 0, %72 ]
  ret i32 %78
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @mem_true32_copy_color(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) #0 {
  %9 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 15
  %10 = load ptr, ptr %9, align 8, !tbaa !761
  %11 = icmp eq ptr %10, @mem_no_fault_proc
  br i1 %11, label %19, label %12

12:                                               ; preds = %8
  %13 = shl i32 %4, 2
  %14 = shl i32 %6, 2
  %15 = tail call i32 %10(ptr noundef nonnull %0, i32 noundef %13, i32 noundef %5, i32 noundef %14, i32 noundef %7, i32 noundef 1) #64
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = tail call i32 @mem_copy_color_recover(ptr noundef nonnull %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %15) #62
  br label %60

19:                                               ; preds = %12, %8
  %20 = icmp slt i32 %6, 1
  %21 = icmp slt i32 %7, 1
  %22 = or i1 %20, %21
  br i1 %22, label %60, label %23

23:                                               ; preds = %19
  %24 = icmp slt i32 %4, 0
  br i1 %24, label %60, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 3
  %27 = load i32, ptr %26, align 8, !tbaa !382
  %28 = sub nsw i32 %27, %6
  %29 = icmp slt i32 %28, %4
  %30 = icmp slt i32 %5, 0
  %31 = or i1 %30, %29
  br i1 %31, label %60, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 4
  %34 = load i32, ptr %33, align 4, !tbaa !383
  %35 = sub nsw i32 %34, %7
  %36 = icmp slt i32 %35, %5
  br i1 %36, label %60, label %37

37:                                               ; preds = %32
  %38 = shl i32 %2, 2
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, ptr %1, i64 %39
  %41 = shl i32 %4, 2
  %42 = shl i32 %6, 2
  %43 = sext i32 %41 to i64
  %44 = getelementptr inbounds %struct.gx_device_memory_s, ptr %0, i64 0, i32 14
  %45 = load ptr, ptr %44, align 8, !tbaa !758
  %46 = zext i32 %5 to i64
  %47 = getelementptr inbounds ptr, ptr %45, i64 %46
  %48 = sext i32 %42 to i64
  %49 = sext i32 %3 to i64
  br label %50

50:                                               ; preds = %50, %37
  %51 = phi ptr [ %47, %37 ], [ %58, %50 ]
  %52 = phi i32 [ %7, %37 ], [ %54, %50 ]
  %53 = phi ptr [ %40, %37 ], [ %57, %50 ]
  %54 = add nsw i32 %52, -1
  %55 = load ptr, ptr %51, align 8, !tbaa !7
  %56 = getelementptr inbounds i8, ptr %55, i64 %43
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %56, ptr align 1 %53, i64 %48, i1 false)
  %57 = getelementptr inbounds i8, ptr %53, i64 %49
  %58 = getelementptr inbounds ptr, ptr %51, i64 1
  %59 = icmp ugt i32 %52, 1
  br i1 %59, label %50, label %60, !llvm.loop !777

60:                                               ; preds = %50, %32, %25, %23, %19, %17
  %61 = phi i32 [ %18, %17 ], [ 0, %19 ], [ -1, %32 ], [ -1, %25 ], [ -1, %23 ], [ 0, %50 ]
  ret i32 %61
}

attributes #0 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nounwind optsize memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { nofree nounwind }
attributes #8 = { noreturn nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { mustprogress nofree nosync nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #15 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: write, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #20 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nofree nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { nofree nounwind willreturn memory(argmem: read) }
attributes #23 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nofree norecurse nosync nounwind optsize memory(write, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { nofree nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #29 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { mustprogress nofree nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #34 = { nofree norecurse nosync nounwind optsize memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #35 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: write, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #36 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #37 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #38 = { optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #39 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #40 = { mustprogress nofree nounwind optsize willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #41 = { mustprogress nofree nounwind optsize willreturn memory(argmem: write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #42 = { mustprogress nofree nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #43 = { mustprogress nofree nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #44 = { nofree nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #45 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #46 = { mustprogress nofree nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #47 = { nofree norecurse nosync nounwind optsize memory(read, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #48 = { mustprogress nofree nounwind optsize willreturn memory(write, argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #49 = { mustprogress nofree nounwind optsize willreturn memory(readwrite, inaccessiblemem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #50 = { nofree nounwind optsize memory(write, argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #51 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #52 = { mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #53 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #54 = { mustprogress nofree nounwind optsize willreturn uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #55 = { mustprogress nofree nounwind optsize willreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #56 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #57 = { nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #58 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #59 = { nofree nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #60 = { nofree nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #61 = { nofree norecurse nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #62 = { optsize }
attributes #63 = { nounwind optsize willreturn memory(read) }
attributes #64 = { nounwind optsize }
attributes #65 = { nounwind }
attributes #66 = { cold optsize }
attributes #67 = { cold }
attributes #68 = { noreturn nounwind optsize }
attributes #69 = { nounwind optsize willreturn memory(none) }
attributes #70 = { nounwind optsize allocsize(0) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!9, !9, i64 0}
!14 = !{!15, !16, i64 8}
!15 = !{!"ref_s", !9, i64 0, !16, i64 8, !16, i64 10}
!16 = !{!"short", !9, i64 0}
!17 = !{!15, !16, i64 10}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !9, i64 0}
!20 = distinct !{!20, !21}
!21 = !{!"llvm.loop.mustprogress"}
!22 = !{!23, !12, i64 52}
!23 = !{!"gx_device_s", !12, i64 0, !8, i64 8, !8, i64 16, !12, i64 24, !12, i64 28, !24, i64 32, !24, i64 36, !12, i64 40, !16, i64 44, !12, i64 48, !12, i64 52}
!24 = !{!"float", !9, i64 0}
!25 = !{!23, !8, i64 8}
!26 = !{!27, !8, i64 32}
!27 = !{!"gx_device_procs_s", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !8, i64 40, !8, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !8, i64 88, !8, i64 96, !8, i64 104}
!28 = distinct !{!28, !21}
!29 = !{!30, !19, i64 0}
!30 = !{!"timeval", !19, i64 0, !19, i64 8}
!31 = !{!32, !12, i64 0}
!32 = !{!"timezone", !12, i64 0, !12, i64 4}
!33 = !{!34, !12, i64 32}
!34 = !{!"tm", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !19, i64 40, !8, i64 48}
!35 = !{!30, !19, i64 8}
!36 = !{!37, !12, i64 56}
!37 = !{!"alloc_state_s", !38, i64 0, !8, i64 48, !12, i64 56, !12, i64 60, !8, i64 64, !8, i64 72, !19, i64 80, !19, i64 88, !12, i64 96, !9, i64 104, !8, i64 360, !8, i64 368, !12, i64 376, !8, i64 384}
!38 = !{!"alloc_chunk_s", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !12, i64 32, !8, i64 40}
!39 = !{!37, !12, i64 60}
!40 = !{!37, !8, i64 64}
!41 = !{!37, !8, i64 72}
!42 = !{!37, !8, i64 8}
!43 = !{!37, !8, i64 0}
!44 = !{!37, !8, i64 24}
!45 = !{!37, !8, i64 16}
!46 = !{!37, !19, i64 80}
!47 = !{!37, !19, i64 88}
!48 = !{!37, !8, i64 360}
!49 = !{!50, !8, i64 0}
!50 = !{!"alloc_block_s", !8, i64 0, !12, i64 8, !12, i64 12, !8, i64 16}
!51 = !{!50, !12, i64 8}
!52 = !{!37, !12, i64 376}
!53 = !{!50, !12, i64 12}
!54 = !{!50, !8, i64 16}
!55 = !{i32 0, i32 2}
!56 = !{!37, !12, i64 96}
!57 = !{!37, !8, i64 48}
!58 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 4, !11, i64 40, i64 8, !7}
!59 = !{!37, !8, i64 40}
!60 = !{!37, !12, i64 32}
!61 = !{!37, !8, i64 368}
!62 = !{!63, !8, i64 16}
!63 = !{!"alloc_save_s", !37, i64 0, !8, i64 392}
!64 = !{!63, !8, i64 8}
!65 = !{!38, !8, i64 40}
!66 = !{!38, !12, i64 32}
!67 = !{!38, !8, i64 0}
!68 = !{!38, !8, i64 24}
!69 = !{!38, !8, i64 8}
!70 = distinct !{!70, !21}
!71 = distinct !{!71, !21}
!72 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 4, !11, i64 40, i64 8, !7, i64 48, i64 8, !7, i64 56, i64 4, !11, i64 60, i64 4, !11, i64 64, i64 8, !7, i64 72, i64 8, !7, i64 80, i64 8, !18, i64 88, i64 8, !18, i64 96, i64 4, !11, i64 104, i64 256, !13, i64 360, i64 8, !7, i64 368, i64 8, !7, i64 376, i64 4, !11, i64 384, i64 8, !7}
!73 = !{!37, !8, i64 384}
!74 = !{!63, !8, i64 392}
!75 = !{!63, !8, i64 0}
!76 = !{!63, !8, i64 24}
!77 = !{!63, !12, i64 376}
!78 = distinct !{!78, !21}
!79 = distinct !{!79, !21}
!80 = distinct !{!80, !21}
!81 = distinct !{!81, !21}
!82 = distinct !{!82, !21}
!83 = !{!84, !8, i64 8}
!84 = !{!"alloc_change_s", !8, i64 0, !8, i64 8, !12, i64 16}
!85 = !{!84, !12, i64 16}
!86 = distinct !{!86, !21}
!87 = distinct !{!87, !21}
!88 = distinct !{!88, !21}
!89 = distinct !{!89, !21}
!90 = !{!91, !16, i64 8}
!91 = !{!"dict_s", !15, i64 0, !15, i64 16}
!92 = !{!91, !16, i64 24}
!93 = !{!91, !16, i64 26}
!94 = !{!95, !16, i64 24}
!95 = !{!"pair_s", !15, i64 0, !15, i64 16}
!96 = !{!95, !16, i64 8}
!97 = distinct !{!97, !21}
!98 = !{!99, !16, i64 8}
!99 = !{!"name_s", !8, i64 0, !16, i64 8, !16, i64 10, !8, i64 16, !8, i64 24}
!100 = distinct !{!100, !21}
!101 = !{i64 0, i64 8, !18, i64 0, i64 2, !102, i64 0, i64 4, !103, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 8, i64 2, !102, i64 10, i64 2, !102}
!102 = !{!16, !16, i64 0}
!103 = !{!24, !24, i64 0}
!104 = !{!99, !8, i64 24}
!105 = !{i32 -2, i32 1}
!106 = distinct !{!106, !21}
!107 = !{i32 -25, i32 1}
!108 = !{i64 0, i64 8, !18, i64 0, i64 2, !102, i64 0, i64 4, !103, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 0, i64 8, !7, i64 8, i64 2, !102, i64 10, i64 2, !102, i64 16, i64 8, !18, i64 16, i64 2, !102, i64 16, i64 4, !103, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 2, !102, i64 26, i64 2, !102}
!109 = distinct !{!109, !21}
!110 = !{!111, !8, i64 0}
!111 = !{!"", !8, i64 0, !8, i64 8}
!112 = !{!111, !8, i64 8}
!113 = distinct !{!113, !21}
!114 = !{!115, !12, i64 6144}
!115 = !{!"", !9, i64 0, !9, i64 2048, !12, i64 6144}
!116 = distinct !{!116, !21}
!117 = !{!99, !16, i64 10}
!118 = !{!99, !8, i64 16}
!119 = distinct !{!119, !21}
!120 = !{!99, !8, i64 0}
!121 = distinct !{!121, !21}
!122 = distinct !{!122, !21}
!123 = distinct !{!123, !21}
!124 = !{!125, !8, i64 0}
!125 = !{!"stream_s", !8, i64 0, !8, i64 8, !8, i64 16, !12, i64 24, !9, i64 28, !9, i64 29, !19, i64 32, !126, i64 40, !12, i64 88, !8, i64 96, !8, i64 104, !16, i64 112, !12, i64 116}
!126 = !{!"", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !8, i64 40}
!127 = !{!125, !8, i64 16}
!128 = !{!125, !12, i64 24}
!129 = !{!130, !12, i64 16}
!130 = !{!"dynamic_area_s", !8, i64 0, !8, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !8, i64 32}
!131 = !{!130, !12, i64 20}
!132 = !{!130, !8, i64 8}
!133 = !{!130, !8, i64 0}
!134 = !{!130, !12, i64 24}
!135 = !{!130, !8, i64 32}
!136 = distinct !{!136, !21}
!137 = distinct !{!137, !21}
!138 = distinct !{!138, !21, !139, !140}
!139 = !{!"llvm.loop.isvectorized", i32 1}
!140 = !{!"llvm.loop.unroll.runtime.disable"}
!141 = distinct !{!141, !21}
!142 = !{!125, !8, i64 8}
!143 = !{!125, !8, i64 40}
!144 = distinct !{!144, !21}
!145 = distinct !{!145, !21}
!146 = distinct !{!146, !21}
!147 = distinct !{!147, !21}
!148 = !{i32 -13, i32 2}
!149 = !{!150, !150, i64 0}
!150 = !{!"double", !9, i64 0}
!151 = distinct !{!151, !21}
!152 = distinct !{!152, !21}
!153 = distinct !{!153, !21}
!154 = distinct !{!154, !21}
!155 = distinct !{!155, !21}
!156 = distinct !{!156, !21}
!157 = !{!158, !16, i64 0}
!158 = !{!"gs_color_s", !16, i64 0, !16, i64 2, !16, i64 4, !16, i64 6, !9, i64 8, !9, i64 9}
!159 = !{!158, !16, i64 2}
!160 = !{!158, !16, i64 4}
!161 = distinct !{!161, !21}
!162 = distinct !{!162, !21}
!163 = !{i64 0, i64 4, !103, i64 8, i64 8, !18, i64 16, i64 4, !103, i64 24, i64 8, !18, i64 32, i64 4, !103, i64 40, i64 8, !18, i64 48, i64 4, !103, i64 56, i64 8, !18, i64 64, i64 4, !103, i64 72, i64 8, !18, i64 80, i64 4, !103, i64 88, i64 8, !18}
!164 = distinct !{!164, !21}
!165 = distinct !{!165, !21}
!166 = !{!125, !9, i64 29}
!167 = !{!125, !19, i64 32}
!168 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 8, !7, i64 40, i64 8, !7}
!169 = !{!125, !9, i64 28}
!170 = !{!125, !8, i64 96}
!171 = !{!125, !8, i64 48}
!172 = !{!125, !8, i64 104}
!173 = !{!125, !16, i64 112}
!174 = !{!125, !12, i64 116}
!175 = !{!125, !8, i64 56}
!176 = distinct !{!176, !21}
!177 = distinct !{!177, !21}
!178 = distinct !{!178, !21}
!179 = distinct !{!179, !21}
!180 = !{i32 -23, i32 1}
!181 = distinct !{!181, !21}
!182 = !{i64 0, i64 2, !102}
!183 = !{}
!184 = !{i64 0, i64 2, !102, i64 2, i64 2, !102}
!185 = !{i32 -16, i32 2}
!186 = distinct !{!186, !21}
!187 = distinct !{!187, !21}
!188 = !{!189, !8, i64 0}
!189 = !{!"file_entry_s", !8, i64 0, !12, i64 8, !15, i64 16}
!190 = distinct !{!190, !21}
!191 = !{i32 -22, i32 1}
!192 = !{i32 -15, i32 2}
!193 = distinct !{!193, !21}
!194 = !{!189, !12, i64 8}
!195 = distinct !{!195, !21}
!196 = !{i32 -12, i32 1}
!197 = distinct !{!197, !21}
!198 = !{!125, !8, i64 80}
!199 = distinct !{!199, !21}
!200 = !{i32 -20, i32 1}
!201 = !{!125, !8, i64 72}
!202 = !{!125, !8, i64 64}
!203 = distinct !{!203, !21}
!204 = distinct !{!204, !21}
!205 = !{ptr @array_continue, ptr @dict_continue, ptr @string_continue}
!206 = distinct !{!206, !21}
!207 = distinct !{!207, !21}
!208 = distinct !{!208, !21}
!209 = distinct !{!209, !21}
!210 = !{i32 -7, i32 1}
!211 = !{i32 -20, i32 2}
!212 = distinct !{!212, !21}
!213 = distinct !{!213, !21}
!214 = distinct !{!214, !21}
!215 = distinct !{!215, !21}
!216 = distinct !{!216, !21}
!217 = distinct !{!217, !21}
!218 = distinct !{!218, !21}
!219 = !{!220, !8, i64 0}
!220 = !{!"vm_save_s", !8, i64 0, !8, i64 8, !8, i64 16}
!221 = !{!222, !8, i64 0}
!222 = !{!"int_state_s", !8, i64 0, !15, i64 8, !15, i64 24, !15, i64 40, !15, i64 56}
!223 = !{!220, !8, i64 8}
!224 = !{!220, !8, i64 16}
!225 = distinct !{!225, !21}
!226 = !{i32 -25, i32 2}
!227 = !{!228, !8, i64 32}
!228 = !{!"gs_font_s", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !229, i64 40, !12, i64 136, !24, i64 140, !24, i64 144, !24, i64 148, !24, i64 152, !12, i64 156, !19, i64 160, !8, i64 168, !8, i64 176}
!229 = !{!"gs_matrix_s", !24, i64 0, !19, i64 8, !24, i64 16, !19, i64 24, !24, i64 32, !19, i64 40, !24, i64 48, !19, i64 56, !24, i64 64, !19, i64 72, !24, i64 80, !19, i64 88}
!230 = !{!231, !24, i64 0}
!231 = !{!"gs_point_s", !24, i64 0, !24, i64 4}
!232 = !{!231, !24, i64 4}
!233 = distinct !{!233, !21}
!234 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 4, !11}
!235 = !{!236, !8, i64 0}
!236 = !{!"", !8, i64 0, !8, i64 8, !9, i64 16}
!237 = !{!236, !8, i64 8}
!238 = !{!239, !8, i64 16}
!239 = !{!"gs_type1_data_s", !8, i64 0, !8, i64 8, !8, i64 16, !12, i64 24}
!240 = !{!239, !12, i64 24}
!241 = !{!228, !12, i64 156}
!242 = !{!243, !16, i64 42}
!243 = !{!"font_data_s", !15, i64 0, !15, i64 16, !15, i64 32, !15, i64 48, !15, i64 64, !239, i64 80}
!244 = !{!245, !8, i64 256}
!245 = !{!"gs_state_s", !8, i64 0, !111, i64 8, !246, i64 24, !229, i64 136, !12, i64 232, !8, i64 240, !8, i64 248, !8, i64 256, !8, i64 264, !12, i64 272, !8, i64 280, !8, i64 288, !8, i64 296, !8, i64 304, !8, i64 312, !8, i64 320, !8, i64 328, !229, i64 336, !12, i64 432, !9, i64 436, !9, i64 437, !24, i64 440, !8, i64 448, !12, i64 456}
!246 = !{!"gs_matrix_fixed_s", !24, i64 0, !19, i64 8, !24, i64 16, !19, i64 24, !24, i64 32, !19, i64 40, !24, i64 48, !19, i64 56, !24, i64 64, !19, i64 72, !24, i64 80, !19, i64 88, !19, i64 96, !19, i64 104}
!247 = !{!248, !19, i64 0}
!248 = !{!"gs_fixed_point_s", !19, i64 0, !19, i64 8}
!249 = !{!248, !19, i64 8}
!250 = !{!251, !9, i64 137}
!251 = !{!"gx_path_s", !111, i64 0, !252, i64 16, !8, i64 48, !252, i64 56, !8, i64 88, !8, i64 96, !12, i64 104, !12, i64 108, !12, i64 112, !248, i64 120, !9, i64 136, !9, i64 137, !9, i64 138}
!252 = !{!"gs_fixed_rect_s", !248, i64 0, !248, i64 16}
!253 = !{!243, !16, i64 74}
!254 = !{!243, !8, i64 80}
!255 = !{!243, !8, i64 88}
!256 = !{!243, !8, i64 96}
!257 = !{!243, !12, i64 104}
!258 = !{!228, !8, i64 16}
!259 = !{!228, !8, i64 24}
!260 = !{!228, !12, i64 136}
!261 = !{!228, !8, i64 168}
!262 = !{!228, !19, i64 160}
!263 = !{i32 -2147483648, i32 1}
!264 = distinct !{!264, !21}
!265 = distinct !{!265, !21}
!266 = !{!23, !12, i64 28}
!267 = !{!229, !24, i64 0}
!268 = !{!229, !24, i64 16}
!269 = !{!229, !24, i64 32}
!270 = !{!229, !24, i64 48}
!271 = !{!229, !24, i64 64}
!272 = !{!229, !24, i64 80}
!273 = distinct !{!273, !21}
!274 = !{!222, !16, i64 16}
!275 = !{!222, !16, i64 32}
!276 = !{i64 0, i64 8, !7, i64 8, i64 8, !18, i64 8, i64 2, !102, i64 8, i64 4, !103, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 2, !102, i64 18, i64 2, !102, i64 24, i64 8, !18, i64 24, i64 2, !102, i64 24, i64 4, !103, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 2, !102, i64 34, i64 2, !102, i64 40, i64 8, !18, i64 40, i64 2, !102, i64 40, i64 4, !103, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 40, i64 8, !7, i64 48, i64 2, !102, i64 50, i64 2, !102, i64 56, i64 8, !18, i64 56, i64 2, !102, i64 56, i64 4, !103, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 56, i64 8, !7, i64 64, i64 2, !102, i64 66, i64 2, !102}
!277 = distinct !{!277, !21}
!278 = distinct !{!278, !21}
!279 = distinct !{!279, !21}
!280 = !{i32 -2147483648, i32 2}
!281 = distinct !{!281, !21}
!282 = distinct !{!282, !21}
!283 = distinct !{!283, !21}
!284 = !{!285, !24, i64 0}
!285 = !{!"gs_rect_s", !231, i64 0, !231, i64 8}
!286 = !{!285, !24, i64 4}
!287 = !{!285, !24, i64 8}
!288 = !{!285, !24, i64 12}
!289 = distinct !{!289, !21}
!290 = !{!291, !8, i64 0}
!291 = !{!"gs_show_enum_s", !8, i64 0, !8, i64 8, !12, i64 16, !24, i64 20, !24, i64 24, !12, i64 28, !24, i64 32, !24, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !12, i64 72, !292, i64 80, !293, i64 280, !12, i64 312, !12, i64 316, !248, i64 320, !8, i64 336, !231, i64 344, !9, i64 352, !12, i64 356, !8, i64 360}
!292 = !{!"gx_device_memory_s", !12, i64 0, !8, i64 8, !8, i64 16, !12, i64 24, !12, i64 28, !24, i64 32, !24, i64 36, !12, i64 40, !16, i64 44, !12, i64 48, !12, i64 52, !229, i64 56, !12, i64 152, !8, i64 160, !8, i64 168, !8, i64 176, !12, i64 184, !12, i64 188, !8, i64 192}
!293 = !{!"device_s", !8, i64 0, !12, i64 8, !19, i64 16, !19, i64 24}
!294 = !{!291, !8, i64 8}
!295 = !{!291, !12, i64 28}
!296 = !{!291, !12, i64 40}
!297 = !{!291, !12, i64 44}
!298 = !{!291, !12, i64 52}
!299 = !{!291, !12, i64 312}
!300 = !{!291, !12, i64 316}
!301 = !{!291, !8, i64 360}
!302 = !{!245, !12, i64 432}
!303 = !{!245, !8, i64 328}
!304 = !{!291, !12, i64 56}
!305 = !{!245, !8, i64 264}
!306 = !{!291, !12, i64 356}
!307 = !{!291, !12, i64 16}
!308 = !{!291, !12, i64 48}
!309 = !{!251, !9, i64 136}
!310 = !{i64 0, i64 8, !18, i64 8, i64 8, !18}
!311 = !{i32 -14, i32 3}
!312 = !{!245, !9, i64 437}
!313 = !{!251, !19, i64 120}
!314 = !{!251, !19, i64 128}
!315 = !{!245, !24, i64 88}
!316 = !{!245, !24, i64 104}
!317 = !{!291, !9, i64 352}
!318 = !{!228, !8, i64 176}
!319 = !{!291, !24, i64 32}
!320 = !{!291, !24, i64 36}
!321 = !{!291, !24, i64 20}
!322 = !{!291, !24, i64 24}
!323 = !{!291, !8, i64 336}
!324 = !{!245, !19, i64 120}
!325 = !{!245, !19, i64 128}
!326 = !{!245, !9, i64 436}
!327 = !{i64 0, i64 4, !11, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 4, !11, i64 28, i64 4, !11, i64 32, i64 4, !103, i64 36, i64 4, !103, i64 40, i64 4, !11, i64 44, i64 2, !102, i64 48, i64 4, !11, i64 52, i64 4, !11, i64 56, i64 4, !103, i64 64, i64 8, !18, i64 72, i64 4, !103, i64 80, i64 8, !18, i64 88, i64 4, !103, i64 96, i64 8, !18, i64 104, i64 4, !103, i64 112, i64 8, !18, i64 120, i64 4, !103, i64 128, i64 8, !18, i64 136, i64 4, !103, i64 144, i64 8, !18, i64 152, i64 4, !11, i64 160, i64 8, !7, i64 168, i64 8, !7, i64 176, i64 8, !7, i64 184, i64 4, !11, i64 188, i64 4, !11, i64 192, i64 8, !7}
!328 = !{!293, !8, i64 0}
!329 = !{!293, !12, i64 8}
!330 = !{!293, !19, i64 16}
!331 = !{!293, !19, i64 24}
!332 = !{!245, !8, i64 304}
!333 = !{!245, !8, i64 312}
!334 = !{!335, !12, i64 16}
!335 = !{!"gx_device_color_s", !19, i64 0, !19, i64 8, !12, i64 16, !8, i64 24}
!336 = !{!337, !12, i64 8}
!337 = !{!"cached_char_s", !8, i64 0, !12, i64 8, !8, i64 16, !16, i64 24, !16, i64 26, !16, i64 28, !248, i64 32, !248, i64 48, !8, i64 64}
!338 = !{!245, !8, i64 448}
!339 = !{!245, !12, i64 456}
!340 = !{!337, !19, i64 48}
!341 = !{!337, !19, i64 56}
!342 = !{!158, !9, i64 9}
!343 = !{!158, !9, i64 8}
!344 = !{!158, !16, i64 6}
!345 = !{i64 0, i64 2, !102, i64 2, i64 2, !102, i64 4, i64 2, !102, i64 6, i64 2, !102, i64 8, i64 1, !13, i64 9, i64 1, !13}
!346 = !{!347, !8, i64 8}
!347 = !{!"gs_screen_enum_s", !24, i64 0, !24, i64 4, !8, i64 8, !12, i64 16, !12, i64 20, !229, i64 24, !12, i64 120, !12, i64 124, !8, i64 128}
!348 = !{!347, !12, i64 124}
!349 = !{!347, !12, i64 120}
!350 = !{!347, !8, i64 128}
!351 = !{!347, !12, i64 20}
!352 = !{!347, !12, i64 16}
!353 = !{!354, !16, i64 0}
!354 = !{!"ht_bit_s", !16, i64 0, !16, i64 2}
!355 = distinct !{!355, !21, !139, !140}
!356 = !{!245, !8, i64 288}
!357 = !{!358, !12, i64 8}
!358 = !{!"halftone_s", !24, i64 0, !24, i64 4, !12, i64 8, !12, i64 12, !8, i64 16, !12, i64 24}
!359 = !{!358, !12, i64 12}
!360 = !{!358, !8, i64 16}
!361 = !{!358, !12, i64 24}
!362 = !{!354, !16, i64 2}
!363 = !{!358, !24, i64 0}
!364 = !{!358, !24, i64 4}
!365 = !{!245, !8, i64 296}
!366 = !{!27, !8, i64 8}
!367 = !{!245, !12, i64 232}
!368 = !{!245, !24, i64 24}
!369 = !{!245, !24, i64 40}
!370 = !{!245, !24, i64 56}
!371 = !{!245, !24, i64 72}
!372 = !{!23, !24, i64 32}
!373 = !{!23, !24, i64 36}
!374 = !{!27, !8, i64 16}
!375 = !{!27, !8, i64 24}
!376 = !{!23, !8, i64 16}
!377 = !{!23, !12, i64 24}
!378 = distinct !{!378, !21}
!379 = !{!23, !12, i64 0}
!380 = distinct !{!380, !21}
!381 = !{!292, !12, i64 0}
!382 = !{!292, !12, i64 24}
!383 = !{!292, !12, i64 28}
!384 = !{!292, !12, i64 40}
!385 = !{!292, !12, i64 48}
!386 = !{!292, !8, i64 160}
!387 = !{!292, !12, i64 184}
!388 = !{!292, !12, i64 188}
!389 = !{!292, !8, i64 192}
!390 = !{!292, !12, i64 52}
!391 = !{!27, !8, i64 0}
!392 = !{!27, !8, i64 40}
!393 = !{!23, !16, i64 44}
!394 = distinct !{!394, !21}
!395 = distinct !{!395, !21}
!396 = distinct !{!396, !21}
!397 = distinct !{!397, !21}
!398 = !{!399, !8, i64 0}
!399 = !{!"gs_font_dir_s", !8, i64 0, !8, i64 8, !19, i64 16, !8, i64 24, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !9, i64 72, !8, i64 1096, !12, i64 1104, !8, i64 1112, !12, i64 1120, !8, i64 1128, !12, i64 1136}
!400 = !{!399, !8, i64 8}
!401 = !{!399, !12, i64 36}
!402 = !{!399, !12, i64 44}
!403 = !{!399, !12, i64 52}
!404 = !{!399, !12, i64 60}
!405 = !{!399, !12, i64 64}
!406 = !{!399, !12, i64 68}
!407 = !{!399, !8, i64 1096}
!408 = !{!399, !8, i64 1112}
!409 = !{!399, !8, i64 1128}
!410 = !{!399, !8, i64 24}
!411 = !{!228, !24, i64 40}
!412 = !{!228, !24, i64 56}
!413 = !{!228, !24, i64 72}
!414 = !{!228, !24, i64 88}
!415 = !{!228, !8, i64 0}
!416 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 8, !7, i64 40, i64 4, !103, i64 48, i64 8, !18, i64 56, i64 4, !103, i64 64, i64 8, !18, i64 72, i64 4, !103, i64 80, i64 8, !18, i64 88, i64 4, !103, i64 96, i64 8, !18, i64 104, i64 4, !103, i64 112, i64 8, !18, i64 120, i64 4, !103, i64 128, i64 8, !18, i64 136, i64 4, !11, i64 140, i64 4, !103, i64 144, i64 4, !103, i64 148, i64 4, !103, i64 152, i64 4, !103, i64 156, i64 4, !11, i64 160, i64 8, !18, i64 168, i64 8, !7, i64 176, i64 8, !7}
!417 = !{!399, !12, i64 32}
!418 = distinct !{!418, !21}
!419 = !{!228, !8, i64 8}
!420 = !{!399, !12, i64 40}
!421 = !{!399, !12, i64 48}
!422 = !{!399, !12, i64 56}
!423 = !{!424, !12, i64 0}
!424 = !{!"gs_image_enum_s", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !19, i64 24, !19, i64 32, !19, i64 40, !19, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !12, i64 88, !12, i64 92, !12, i64 96, !12, i64 100, !12, i64 104, !9, i64 112, !12, i64 144, !12, i64 148, !12, i64 152, !19, i64 160, !19, i64 168, !12, i64 176, !9, i64 184}
!425 = !{!424, !12, i64 4}
!426 = !{!424, !12, i64 8}
!427 = !{!424, !12, i64 12}
!428 = !{!424, !12, i64 16}
!429 = !{!424, !19, i64 24}
!430 = !{!424, !19, i64 48}
!431 = !{!424, !12, i64 100}
!432 = !{!424, !19, i64 160}
!433 = !{!424, !19, i64 168}
!434 = !{!424, !8, i64 72}
!435 = !{!424, !8, i64 80}
!436 = !{!424, !12, i64 88}
!437 = !{!424, !12, i64 92}
!438 = distinct !{!438, !21}
!439 = !{!335, !19, i64 0}
!440 = !{!251, !19, i64 56}
!441 = !{!251, !19, i64 64}
!442 = !{!251, !19, i64 72}
!443 = !{!251, !19, i64 80}
!444 = !{!424, !12, i64 96}
!445 = !{!424, !12, i64 104}
!446 = !{!424, !8, i64 64}
!447 = !{!424, !8, i64 56}
!448 = !{!424, !12, i64 144}
!449 = !{!424, !12, i64 152}
!450 = !{!424, !12, i64 176}
!451 = !{!27, !8, i64 72}
!452 = distinct !{!452, !21}
!453 = !{!424, !19, i64 32}
!454 = !{!424, !19, i64 40}
!455 = !{!27, !8, i64 56}
!456 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 8, !18}
!457 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18}
!458 = !{i64 0, i64 8, !18}
!459 = !{!252, !19, i64 16}
!460 = !{!252, !19, i64 0}
!461 = !{!252, !19, i64 24}
!462 = !{!252, !19, i64 8}
!463 = distinct !{!463, !21}
!464 = !{!335, !19, i64 8}
!465 = distinct !{!465, !21}
!466 = distinct !{!466, !21}
!467 = distinct !{!467, !21}
!468 = distinct !{!468, !21}
!469 = distinct !{!469, !21}
!470 = distinct !{!470, !21}
!471 = distinct !{!471, !21}
!472 = !{!424, !12, i64 148}
!473 = distinct !{!473, !21}
!474 = !{!475, !8, i64 112}
!475 = !{!"", !229, i64 0, !8, i64 96, !12, i64 104, !12, i64 108, !8, i64 112, !12, i64 120, !12, i64 124, !12, i64 128, !12, i64 132, !12, i64 136, !12, i64 140, !12, i64 144}
!476 = !{!475, !8, i64 96}
!477 = distinct !{!477, !21}
!478 = distinct !{!478, !21}
!479 = !{!475, !12, i64 104}
!480 = !{!475, !12, i64 108}
!481 = !{i32 -13, i32 1}
!482 = !{!475, !12, i64 120}
!483 = !{!475, !12, i64 124}
!484 = !{!475, !12, i64 128}
!485 = !{!475, !12, i64 132}
!486 = distinct !{!486, !21}
!487 = distinct !{!487, !21}
!488 = !{!475, !12, i64 144}
!489 = distinct !{!489, !21}
!490 = !{!491, !16, i64 4}
!491 = !{!"", !16, i64 0, !16, i64 2, !16, i64 4, !16, i64 6}
!492 = !{!491, !16, i64 6}
!493 = !{!491, !16, i64 2}
!494 = !{!491, !16, i64 0}
!495 = !{!475, !12, i64 136}
!496 = !{!475, !12, i64 140}
!497 = !{!245, !8, i64 280}
!498 = !{!499, !24, i64 0}
!499 = !{!"line_params_s", !24, i64 0, !9, i64 4, !9, i64 8, !24, i64 12, !24, i64 16, !500, i64 24}
!500 = !{!"dash_params_s", !8, i64 0, !12, i64 8, !24, i64 12, !12, i64 16, !12, i64 20, !24, i64 24}
!501 = !{!499, !9, i64 4}
!502 = !{!499, !9, i64 8}
!503 = !{!499, !24, i64 12}
!504 = !{!499, !24, i64 16}
!505 = distinct !{!505, !21}
!506 = distinct !{!506, !21}
!507 = !{!500, !8, i64 0}
!508 = !{!500, !12, i64 8}
!509 = !{!500, !24, i64 12}
!510 = !{!500, !12, i64 16}
!511 = !{!500, !12, i64 20}
!512 = !{!500, !24, i64 24}
!513 = !{!499, !12, i64 32}
!514 = !{!499, !8, i64 24}
!515 = !{!499, !24, i64 36}
!516 = distinct !{!516, !21}
!517 = !{!246, !24, i64 0}
!518 = !{!246, !19, i64 96}
!519 = !{!246, !24, i64 48}
!520 = !{!246, !19, i64 104}
!521 = !{!245, !8, i64 0}
!522 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !18, i64 24, i64 8, !18, i64 32, i64 8, !18, i64 40, i64 8, !18, i64 48, i64 8, !7, i64 56, i64 8, !18, i64 64, i64 8, !18, i64 72, i64 8, !18, i64 80, i64 8, !18, i64 88, i64 8, !7, i64 96, i64 8, !7, i64 104, i64 4, !11, i64 108, i64 4, !11, i64 112, i64 4, !11, i64 120, i64 8, !18, i64 128, i64 8, !18, i64 136, i64 1, !13, i64 137, i64 1, !13, i64 138, i64 1, !13}
!523 = distinct !{!523, !21}
!524 = distinct !{!524, !21}
!525 = !{!251, !12, i64 112}
!526 = !{!245, !24, i64 440}
!527 = !{!251, !8, i64 88}
!528 = !{!529, !8, i64 0}
!529 = !{!"gs_path_enum_s", !8, i64 0, !8, i64 8}
!530 = !{!529, !8, i64 8}
!531 = !{!532, !8, i64 8}
!532 = !{!"segment_s", !8, i64 0, !8, i64 8, !9, i64 16, !248, i64 24}
!533 = !{!532, !9, i64 16}
!534 = !{!532, !19, i64 24}
!535 = !{!532, !19, i64 32}
!536 = !{!537, !19, i64 40}
!537 = !{!"", !8, i64 0, !8, i64 8, !9, i64 16, !248, i64 24, !248, i64 40, !248, i64 56}
!538 = !{!537, !19, i64 48}
!539 = !{!537, !19, i64 56}
!540 = !{!537, !19, i64 64}
!541 = !{!245, !12, i64 272}
!542 = !{i32 -1, i32 1}
!543 = !{!245, !8, i64 8}
!544 = !{!245, !8, i64 16}
!545 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7, i64 24, i64 4, !103, i64 32, i64 8, !18, i64 40, i64 4, !103, i64 48, i64 8, !18, i64 56, i64 4, !103, i64 64, i64 8, !18, i64 72, i64 4, !103, i64 80, i64 8, !18, i64 88, i64 4, !103, i64 96, i64 8, !18, i64 104, i64 4, !103, i64 112, i64 8, !18, i64 120, i64 8, !18, i64 128, i64 8, !18, i64 136, i64 4, !103, i64 144, i64 8, !18, i64 152, i64 4, !103, i64 160, i64 8, !18, i64 168, i64 4, !103, i64 176, i64 8, !18, i64 184, i64 4, !103, i64 192, i64 8, !18, i64 200, i64 4, !103, i64 208, i64 8, !18, i64 216, i64 4, !103, i64 224, i64 8, !18, i64 232, i64 4, !11, i64 240, i64 8, !7, i64 248, i64 8, !7, i64 256, i64 8, !7, i64 264, i64 8, !7, i64 272, i64 4, !11, i64 280, i64 8, !7, i64 288, i64 8, !7, i64 296, i64 8, !7, i64 304, i64 8, !7, i64 312, i64 8, !7, i64 320, i64 8, !7, i64 328, i64 8, !7, i64 336, i64 4, !103, i64 344, i64 8, !18, i64 352, i64 4, !103, i64 360, i64 8, !18, i64 368, i64 4, !103, i64 376, i64 8, !18, i64 384, i64 4, !103, i64 392, i64 8, !18, i64 400, i64 4, !103, i64 408, i64 8, !18, i64 416, i64 4, !103, i64 424, i64 8, !18, i64 432, i64 4, !11, i64 436, i64 1, !13, i64 437, i64 1, !13, i64 440, i64 4, !103, i64 448, i64 8, !7, i64 456, i64 4, !11}
!546 = !{i64 0, i64 4, !103, i64 4, i64 4, !13, i64 8, i64 4, !13, i64 12, i64 4, !103, i64 16, i64 4, !103, i64 24, i64 8, !7, i64 32, i64 4, !11, i64 36, i64 4, !103, i64 40, i64 4, !11, i64 44, i64 4, !11, i64 48, i64 4, !103}
!547 = !{i64 0, i64 4, !103, i64 4, i64 4, !103, i64 8, i64 4, !11, i64 12, i64 4, !11, i64 16, i64 8, !7, i64 24, i64 4, !11}
!548 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 4, !11, i64 24, i64 8, !7}
!549 = !{i64 0, i64 8, !7, i64 8, i64 4, !11, i64 16, i64 8, !18, i64 24, i64 8, !18}
!550 = distinct !{!550, !21}
!551 = distinct !{!551, !21}
!552 = distinct !{!552, !21}
!553 = !{!554, !8, i64 8}
!554 = !{!"gs_type1_state_s", !8, i64 0, !8, i64 8, !8, i64 16, !12, i64 24, !12, i64 28, !555, i64 32, !9, i64 80, !12, i64 272, !9, i64 280, !12, i64 456, !12, i64 460, !248, i64 464, !248, i64 480, !12, i64 496}
!555 = !{!"", !19, i64 0, !19, i64 8, !19, i64 16, !19, i64 24, !12, i64 32, !12, i64 36, !19, i64 40}
!556 = !{!554, !12, i64 64}
!557 = !{!554, !19, i64 32}
!558 = !{!554, !19, i64 56}
!559 = !{!554, !19, i64 40}
!560 = !{!554, !19, i64 48}
!561 = !{!554, !12, i64 68}
!562 = !{!554, !19, i64 72}
!563 = !{!554, !8, i64 0}
!564 = !{!554, !8, i64 16}
!565 = !{!554, !12, i64 24}
!566 = !{!554, !12, i64 28}
!567 = !{!554, !12, i64 272}
!568 = !{!569, !8, i64 0}
!569 = !{!"", !8, i64 0, !16, i64 8}
!570 = !{!569, !16, i64 8}
!571 = !{!554, !12, i64 456}
!572 = !{!554, !12, i64 460}
!573 = !{!554, !12, i64 496}
!574 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 8, !18, i64 32, i64 4, !11, i64 36, i64 4, !11, i64 40, i64 8, !18}
!575 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 4, !11, i64 28, i64 4, !11, i64 32, i64 8, !18}
!576 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 4, !11, i64 20, i64 4, !11, i64 24, i64 8, !18}
!577 = !{i64 0, i64 8, !18, i64 8, i64 4, !11, i64 12, i64 4, !11, i64 16, i64 8, !18}
!578 = !{i64 0, i64 4, !11, i64 4, i64 4, !11, i64 8, i64 8, !18}
!579 = !{i64 0, i64 4, !11, i64 4, i64 8, !18}
!580 = distinct !{!580, !21}
!581 = !{!239, !8, i64 0}
!582 = !{!239, !8, i64 8}
!583 = !{!554, !19, i64 464}
!584 = !{!554, !19, i64 472}
!585 = !{!554, !19, i64 480}
!586 = !{!554, !19, i64 488}
!587 = !{!292, !12, i64 152}
!588 = !{!399, !12, i64 1136}
!589 = !{!399, !12, i64 1104}
!590 = !{!399, !12, i64 1120}
!591 = !{!337, !8, i64 64}
!592 = !{!337, !16, i64 28}
!593 = !{!337, !16, i64 26}
!594 = !{!337, !16, i64 24}
!595 = !{!292, !8, i64 8}
!596 = !{!245, !24, i64 336}
!597 = !{!245, !24, i64 352}
!598 = !{!245, !24, i64 368}
!599 = !{!245, !24, i64 384}
!600 = !{!601, !8, i64 0}
!601 = !{!"cached_fm_pair_s", !8, i64 0, !24, i64 8, !24, i64 12, !24, i64 16, !24, i64 20, !12, i64 24}
!602 = !{!601, !24, i64 8}
!603 = !{!601, !24, i64 12}
!604 = !{!601, !24, i64 16}
!605 = !{!601, !24, i64 20}
!606 = distinct !{!606, !21}
!607 = !{!601, !12, i64 24}
!608 = distinct !{!608, !21}
!609 = !{!337, !8, i64 0}
!610 = !{!337, !8, i64 16}
!611 = distinct !{!611, !21}
!612 = !{!291, !12, i64 60}
!613 = !{!291, !12, i64 68}
!614 = !{!291, !12, i64 64}
!615 = !{!291, !12, i64 72}
!616 = !{!23, !12, i64 40}
!617 = !{!335, !8, i64 24}
!618 = !{!619, !12, i64 12}
!619 = !{!"gx_bitmap_s", !8, i64 0, !12, i64 8, !12, i64 12, !12, i64 16}
!620 = !{!619, !12, i64 16}
!621 = !{!619, !12, i64 8}
!622 = !{!619, !8, i64 0}
!623 = !{!27, !8, i64 80}
!624 = !{!27, !8, i64 64}
!625 = !{i32 0, i32 33}
!626 = distinct !{!626, !21}
!627 = distinct !{!627, !21}
!628 = !{!27, !8, i64 96}
!629 = distinct !{!629, !21}
!630 = !{!27, !8, i64 88}
!631 = !{!251, !12, i64 108}
!632 = !{!251, !12, i64 104}
!633 = !{!634, !12, i64 8}
!634 = !{!"line_list_s", !8, i64 0, !12, i64 8, !16, i64 12, !8, i64 16, !8, i64 24, !8, i64 32, !635, i64 40, !12, i64 128}
!635 = !{!"active_line_s", !248, i64 0, !248, i64 16, !19, i64 32, !19, i64 40, !19, i64 48, !8, i64 56, !12, i64 64, !16, i64 68, !16, i64 70, !8, i64 72, !8, i64 80}
!636 = !{!634, !8, i64 0}
!637 = !{!634, !8, i64 16}
!638 = !{!634, !12, i64 128}
!639 = !{!251, !19, i64 16}
!640 = !{!251, !19, i64 24}
!641 = !{!251, !19, i64 32}
!642 = !{!251, !19, i64 40}
!643 = !{!634, !16, i64 12}
!644 = !{!645, !8, i64 40}
!645 = !{!"", !8, i64 0, !8, i64 8, !9, i64 16, !248, i64 24, !8, i64 40, !12, i64 48, !12, i64 52, !9, i64 56}
!646 = !{!532, !8, i64 0}
!647 = !{!645, !19, i64 32}
!648 = !{!645, !19, i64 24}
!649 = distinct !{!649, !21}
!650 = !{!634, !8, i64 24}
!651 = !{!635, !19, i64 8}
!652 = !{!634, !8, i64 120}
!653 = !{!634, !16, i64 110}
!654 = !{!635, !8, i64 80}
!655 = distinct !{!655, !21}
!656 = !{!635, !19, i64 24}
!657 = distinct !{!657, !21}
!658 = !{!635, !19, i64 32}
!659 = !{!635, !19, i64 16}
!660 = !{!635, !19, i64 0}
!661 = !{!635, !19, i64 48}
!662 = !{!635, !16, i64 70}
!663 = distinct !{!663, !21}
!664 = distinct !{!664, !21}
!665 = !{!635, !19, i64 40}
!666 = !{!635, !12, i64 64}
!667 = !{!635, !16, i64 68}
!668 = distinct !{!668, !21}
!669 = distinct !{!669, !21}
!670 = !{!635, !8, i64 72}
!671 = distinct !{!671, !21}
!672 = distinct !{!672, !21}
!673 = !{!635, !8, i64 56}
!674 = !{!634, !8, i64 32}
!675 = distinct !{!675, !21}
!676 = distinct !{!676, !21}
!677 = !{!678, !8, i64 16}
!678 = !{!"gx_ht_cache_s", !8, i64 0, !12, i64 8, !8, i64 16, !12, i64 24, !12, i64 28, !9, i64 32}
!679 = !{!678, !8, i64 0}
!680 = !{!678, !12, i64 8}
!681 = distinct !{!681, !21}
!682 = !{!678, !12, i64 28}
!683 = !{!684, !12, i64 0}
!684 = !{!"bit_tile_s", !12, i64 0, !619, i64 8}
!685 = !{!684, !8, i64 8}
!686 = !{!684, !12, i64 16}
!687 = !{!684, !12, i64 20}
!688 = !{!684, !12, i64 24}
!689 = distinct !{!689, !21}
!690 = !{!678, !12, i64 24}
!691 = distinct !{!691, !21}
!692 = !{i64 0, i64 8, !7, i64 8, i64 8, !7}
!693 = !{!251, !8, i64 48}
!694 = !{!251, !9, i64 138}
!695 = !{!251, !8, i64 96}
!696 = !{!251, !8, i64 8}
!697 = distinct !{!697, !21}
!698 = !{!251, !8, i64 0}
!699 = !{!645, !9, i64 16}
!700 = !{!645, !8, i64 8}
!701 = !{!645, !8, i64 0}
!702 = !{!703, !9, i64 16}
!703 = !{!"", !8, i64 0, !8, i64 8, !9, i64 16, !248, i64 24}
!704 = !{!703, !8, i64 8}
!705 = !{!703, !8, i64 0}
!706 = !{!703, !19, i64 24}
!707 = !{!703, !19, i64 32}
!708 = !{!645, !12, i64 48}
!709 = !{i32 -14, i32 1}
!710 = !{!645, !9, i64 56}
!711 = !{!537, !9, i64 16}
!712 = !{!537, !8, i64 8}
!713 = !{!537, !8, i64 0}
!714 = !{!537, !19, i64 24}
!715 = !{!537, !19, i64 32}
!716 = !{!645, !12, i64 52}
!717 = distinct !{!717, !21}
!718 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 4, !11, i64 20, i64 4, !11, i64 24, i64 4, !11, i64 32, i64 8, !18, i64 40, i64 8, !18, i64 48, i64 1, !13, i64 49, i64 1, !13, i64 50, i64 1, !13}
!719 = !{i64 0, i64 8, !7, i64 8, i64 4, !11, i64 12, i64 4, !11, i64 16, i64 4, !11, i64 24, i64 8, !18, i64 32, i64 8, !18, i64 40, i64 1, !13, i64 41, i64 1, !13, i64 42, i64 1, !13}
!720 = !{i64 0, i64 1, !13, i64 1, i64 1, !13, i64 2, i64 1, !13}
!721 = distinct !{!721, !21}
!722 = distinct !{!722, !21}
!723 = !{!724, !12, i64 160}
!724 = !{!"partial_line_s", !725, i64 0, !725, i64 64, !248, i64 128, !248, i64 144, !12, i64 160}
!725 = !{!"endpoint_s", !248, i64 0, !248, i64 16, !248, i64 32, !248, i64 48}
!726 = !{!724, !19, i64 0}
!727 = !{!724, !19, i64 8}
!728 = !{!724, !19, i64 64}
!729 = !{!724, !19, i64 72}
!730 = !{!724, !19, i64 128}
!731 = !{!724, !19, i64 136}
!732 = !{!724, !19, i64 144}
!733 = !{!724, !19, i64 152}
!734 = !{!724, !19, i64 16}
!735 = !{!724, !19, i64 24}
!736 = !{!724, !19, i64 32}
!737 = !{!724, !19, i64 40}
!738 = !{!724, !19, i64 80}
!739 = !{!724, !19, i64 88}
!740 = !{!724, !19, i64 96}
!741 = !{!724, !19, i64 104}
!742 = !{!724, !19, i64 48}
!743 = !{!724, !19, i64 56}
!744 = !{!724, !19, i64 112}
!745 = !{!724, !19, i64 120}
!746 = !{i64 0, i64 8, !18, i64 8, i64 8, !18, i64 16, i64 8, !18, i64 24, i64 8, !18, i64 32, i64 8, !18, i64 40, i64 8, !18, i64 48, i64 8, !18, i64 56, i64 8, !18, i64 64, i64 8, !18, i64 72, i64 8, !18, i64 80, i64 8, !18, i64 88, i64 8, !18, i64 96, i64 8, !18, i64 104, i64 8, !18, i64 112, i64 8, !18, i64 120, i64 8, !18, i64 128, i64 8, !18, i64 136, i64 8, !18, i64 144, i64 8, !18, i64 152, i64 8, !18, i64 160, i64 4, !11}
!747 = distinct !{!747, !21}
!748 = distinct !{!748, !21}
!749 = distinct !{!749, !21}
!750 = !{!725, !19, i64 0}
!751 = !{!725, !19, i64 48}
!752 = !{!725, !19, i64 8}
!753 = !{!725, !19, i64 56}
!754 = !{!725, !19, i64 16}
!755 = !{!725, !19, i64 24}
!756 = !{!725, !19, i64 32}
!757 = !{!725, !19, i64 40}
!758 = !{!292, !8, i64 168}
!759 = distinct !{!759, !21}
!760 = distinct !{!760, !21}
!761 = !{!292, !8, i64 176}
!762 = distinct !{!762, !21}
!763 = distinct !{!763, !21}
!764 = distinct !{!764, !21}
!765 = distinct !{!765, !21}
!766 = distinct !{!766, !21}
!767 = distinct !{!767, !21}
!768 = distinct !{!768, !21}
!769 = distinct !{!769, !21}
!770 = distinct !{!770, !21}
!771 = distinct !{!771, !21}
!772 = distinct !{!772, !21}
!773 = distinct !{!773, !21}
!774 = distinct !{!774, !21}
!775 = distinct !{!775, !21}
!776 = distinct !{!776, !21}
!777 = distinct !{!777, !21}
!778 = distinct !{!778, !21}
!779 = distinct !{!779, !21}
!780 = distinct !{!780, !21}
!781 = distinct !{!781, !21}
!782 = distinct !{!782, !21}
!783 = distinct !{!783, !21}
!784 = distinct !{!784, !21}
!785 = distinct !{!785, !21}

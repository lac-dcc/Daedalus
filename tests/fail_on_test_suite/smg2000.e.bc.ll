; ModuleID = '/src/llvm-test-suite/build/MultiSource/Benchmarks/ASCI_Purple/SMG2000/smg2000.e.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hypre_StructGrid_struct = type { i32, i32, ptr, ptr, ptr, i32, ptr, i32, i32, [3 x i32], i32 }
%struct.hypre_StructMatrix_struct = type { i32, ptr, ptr, ptr, i32, ptr, ptr, i32, i32, ptr, i32, ptr, [6 x i32], i32, ptr, i32 }
%struct.hypre_BoxArray_struct = type { ptr, i32, i32 }
%struct.hypre_StructVector_struct = type { i32, ptr, ptr, ptr, i32, i32, ptr, [6 x i32], i32, i32 }
%struct.hypre_Box_struct = type { [3 x i32], [3 x i32] }
%struct.hypre_StructStencil_struct = type { ptr, i32, i32, i32, i32 }
%struct.hypre_BoxArrayArray_struct = type { ptr, i32 }
%struct.hypre_BoxNeighbors_struct = type { ptr, ptr, ptr, i32, i32, i32, ptr }
%struct.hypre_RankLink_struct = type { i32, ptr }
%struct.hypre_CommPkg_struct = type { i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.hypre_CommTypeEntry_struct = type { [3 x i32], [3 x i32], i32, i32, [4 x i32], [4 x i32] }
%struct.hypre_CommHandle_struct = type { ptr, ptr, ptr, i32, ptr, ptr }
%struct.hypre_ComputePkg_struct = type { ptr, ptr, ptr, [3 x i32], ptr, ptr, i32 }
%struct.hypre_CyclicReductionData = type { i32, i32, i32, [3 x i32], [3 x i32], ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32 }
%struct.hypre_PCGFunctions = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.hypre_PCGData = type { double, double, i32, i32, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, ptr }
%struct.hypre_SemiInterpData = type { ptr, i32, ptr, [3 x i32], [3 x i32], [3 x i32], i32 }
%struct.hypre_SemiRestrictData = type { ptr, i32, ptr, [3 x i32], [3 x i32], i32 }
%struct.hypre_SMGData = type { i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, ptr, ptr }
%struct.hypre_SMGRelaxData = type { i32, i32, i32, i32, i32, double, i32, i32, i32, ptr, ptr, i32, i32, ptr, ptr, [3 x i32], [3 x i32], ptr, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.hypre_SMGResidualData = type { [3 x i32], [3 x i32], ptr, ptr, ptr, ptr, ptr, ptr, i32, i32 }
%struct.hypre_StructMatvecData = type { ptr, ptr, ptr }
%struct.hypre_TimingType = type { ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, double, double, double }

@switch.table.hypre_UnionBoxes = private unnamed_addr constant [3 x i32] [i32 2, i32 2, i32 0], align 4
@switch.table.hypre_UnionBoxes.1 = private unnamed_addr constant [3 x i32] [i32 1, i32 0, i32 1], align 4
@.str = private unnamed_addr constant [16 x i8] c"CyclicReduction\00", align 1
@.str.13 = private unnamed_addr constant [43 x i8] c"Out of memory trying to allocate %d bytes\0A\00", align 1
@stdout = external local_unnamed_addr global ptr, align 8
@.str.96 = private unnamed_addr constant [11 x i8] c"SemiInterp\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"SemiRestrict\00", align 1
@.str.100 = private unnamed_addr constant [4 x i8] c"SMG\00", align 1
@.str.123 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-P\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-b\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"-solver\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"-help\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"Usage: %s [<options>]\0A\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"  (nx, ny, nz)    = (%d, %d, %d)\0A\00", align 1
@.str.24 = private unnamed_addr constant [34 x i8] c"  (Px, Py, Pz)    = (%d, %d, %d)\0A\00", align 1
@.str.25 = private unnamed_addr constant [34 x i8] c"  (bx, by, bz)    = (%d, %d, %d)\0A\00", align 1
@.str.26 = private unnamed_addr constant [34 x i8] c"  (cx, cy, cz)    = (%f, %f, %f)\0A\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"  (n_pre, n_post) = (%d, %d)\0A\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"  dim             = %d\0A\00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c"  solver ID       = %d\0A\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"Struct Interface\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"SMG Setup\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"Setup phase times\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"SMG Solve\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"Solve phase times\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"PCG Setup\00", align 1
@.str.36 = private unnamed_addr constant [10 x i8] c"PCG Solve\00", align 1
@.str.37 = private unnamed_addr constant [17 x i8] c"Iterations = %d\0A\00", align 1
@.str.38 = private unnamed_addr constant [35 x i8] c"Final Relative Residual Norm = %e\0A\00", align 1
@str = private unnamed_addr constant [38 x i8] c"Running with these driver parameters:\00", align 1
@str.39 = private unnamed_addr constant [59 x i8] c"Error: Invalid number of processors or processor topology \00", align 1
@str.40 = private unnamed_addr constant [48 x i8] c"  -n <nx> <ny> <nz>    : problem size per block\00", align 1
@str.41 = private unnamed_addr constant [44 x i8] c"  -P <Px> <Py> <Pz>    : processor topology\00", align 1
@str.42 = private unnamed_addr constant [48 x i8] c"  -b <bx> <by> <bz>    : blocking per processor\00", align 1
@str.43 = private unnamed_addr constant [48 x i8] c"  -c <cx> <cy> <cz>    : diffusion coefficients\00", align 1
@str.44 = private unnamed_addr constant [60 x i8] c"  -v <n_pre> <n_post>  : number of pre and post relaxations\00", align 1
@str.45 = private unnamed_addr constant [52 x i8] c"  -d <dim>             : problem dimension (2 or 3)\00", align 1
@str.46 = private unnamed_addr constant [49 x i8] c"  -solver <ID>         : solver ID (default = 0)\00", align 1
@str.47 = private unnamed_addr constant [33 x i8] c"                         0 - SMG\00", align 1
@str.48 = private unnamed_addr constant [49 x i8] c"                         1 - CG with SMG precond\00", align 1
@str.49 = private unnamed_addr constant [54 x i8] c"                         2 - CG with diagonal scaling\00", align 1
@str.50 = private unnamed_addr constant [32 x i8] c"                         3 - CG\00", align 1
@__const.hypre_SMG2CreateRAPOp.RAP_num_ghost = private unnamed_addr constant [6 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0], align 16
@__const.hypre_SMG3CreateRAPOp.RAP_num_ghost = private unnamed_addr constant [6 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@.str.124 = private unnamed_addr constant [9 x i8] c"SMGRelax\00", align 1
@.str.129 = private unnamed_addr constant [12 x i8] c"SMGResidual\00", align 1
@__const.hypre_SMGCreateInterpOp.num_ghost = private unnamed_addr constant [6 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@final_innerprod_result = internal global double 0.000000e+00, align 8
@hypre_global_timing = internal global ptr null, align 8
@.str.1.250 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.2.251 = private unnamed_addr constant [32 x i8] c"  wall clock time = %f seconds\0A\00", align 1
@.str.3.252 = private unnamed_addr constant [32 x i8] c"  cpu clock time  = %f seconds\0A\00", align 1
@str.4 = private unnamed_addr constant [46 x i8] c"=============================================\00", align 1

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetup(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 @hypre_PCGSetup(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #33
  ret i32 %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSolve(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 @hypre_PCGSolve(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #33
  ret i32 %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetTol(ptr noundef %0, double noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGSetTol(ptr noundef %0, double noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetMaxIter(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGSetMaxIter(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetTwoNorm(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGSetTwoNorm(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetRelChange(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGSetRelChange(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetPrecond(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 @hypre_PCGSetPrecond(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #33
  ret i32 %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGSetLogging(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGSetLogging(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGGetNumIterations(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGGetNumIterations(ptr noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_PCGGetFinalRelativeResidualNorm(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_PCGGetFinalRelativeResidualNorm(ptr noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructGridCreate(i32 noundef %0, i32 noundef %1, ptr noundef %2) #0 {
  %4 = tail call i32 @hypre_StructGridCreate(i32 noundef %0, i32 noundef %1, ptr noundef %2) #33
  ret i32 %4
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructGridDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructGridDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructGridSetExtents(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #0 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  store i32 0, ptr %4, align 4, !tbaa !7
  %6 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  store i32 0, ptr %6, align 4, !tbaa !7
  %7 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %5, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  store i32 0, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  store i32 0, ptr %9, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !11
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %4, ptr align 4 %1, i64 %15, i1 false), !tbaa !7
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %5, ptr align 4 %2, i64 %15, i1 false), !tbaa !7
  br label %16

16:                                               ; preds = %13, %3
  %17 = call i32 @hypre_StructGridSetExtents(ptr noundef nonnull %0, ptr noundef nonnull %4, ptr noundef nonnull %5) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 %17
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructGridAssemble(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructGridAssemble(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructMatrixCreate(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = tail call ptr @hypre_StructMatrixCreate(i32 noundef %0, ptr noundef %1, ptr noundef %2) #33
  store ptr %5, ptr %3, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructMatrixDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructMatrixInitialize(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructMatrixInitialize(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructMatrixSetBoxValues(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  store i32 0, ptr %7, align 4, !tbaa !7
  %9 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  store i32 0, ptr %9, align 4, !tbaa !7
  %10 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  store i32 0, ptr %10, align 4, !tbaa !7
  store i32 0, ptr %8, align 4, !tbaa !7
  %11 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  store i32 0, ptr %11, align 4, !tbaa !7
  %12 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  store i32 0, ptr %12, align 4, !tbaa !7
  %13 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !15
  %15 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %14, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !11
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %18, %6
  %19 = phi i64 [ %26, %18 ], [ 0, %6 ]
  %20 = getelementptr inbounds i32, ptr %1, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !7
  %22 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %19
  store i32 %21, ptr %22, align 4, !tbaa !7
  %23 = getelementptr inbounds i32, ptr %2, i64 %19
  %24 = load i32, ptr %23, align 4, !tbaa !7
  %25 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 %19
  store i32 %24, ptr %25, align 4, !tbaa !7
  %26 = add nuw nsw i64 %19, 1
  %27 = load i32, ptr %15, align 4, !tbaa !11
  %28 = sext i32 %27 to i64
  %29 = icmp slt i64 %26, %28
  br i1 %29, label %18, label %30, !llvm.loop !17

30:                                               ; preds = %18, %6
  %31 = tail call ptr @hypre_BoxCreate() #33
  %32 = call i32 @hypre_BoxSetExtents(ptr noundef %31, ptr noundef nonnull %7, ptr noundef nonnull %8) #33
  %33 = call i32 @hypre_StructMatrixSetBoxValues(ptr noundef nonnull %0, ptr noundef %31, i32 noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef 0) #33
  %34 = call i32 @hypre_BoxDestroy(ptr noundef %31) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  ret i32 %33
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructMatrixAssemble(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructMatrixAssemble(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructMatrixSetNumGhost(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_StructMatrixSetNumGhost(ptr noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @HYPRE_StructMatrixSetSymmetric(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 10
  store i32 %1, ptr %3, align 8, !tbaa !19
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructPCGCreate(i32 noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = tail call ptr @hypre_PCGFunctionsCreate(ptr noundef nonnull @hypre_CAlloc, ptr noundef nonnull @hypre_StructKrylovFree, ptr noundef nonnull @hypre_StructKrylovCreateVector, ptr noundef nonnull @hypre_StructKrylovDestroyVector, ptr noundef nonnull @hypre_StructKrylovMatvecCreate, ptr noundef nonnull @hypre_StructKrylovMatvec, ptr noundef nonnull @hypre_StructKrylovMatvecDestroy, ptr noundef nonnull @hypre_StructKrylovInnerProd, ptr noundef nonnull @hypre_StructKrylovCopyVector, ptr noundef nonnull @hypre_StructKrylovClearVector, ptr noundef nonnull @hypre_StructKrylovScaleVector, ptr noundef nonnull @hypre_StructKrylovAxpy, ptr noundef nonnull @hypre_StructKrylovIdentitySetup, ptr noundef nonnull @hypre_StructKrylovIdentity) #33
  %4 = tail call ptr @hypre_PCGCreate(ptr noundef %3) #33
  store ptr %4, ptr %1, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructPCGDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_PCGDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @HYPRE_StructDiagScaleSetup(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2, ptr nocapture noundef readnone %3) #4 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructDiagScale(ptr nocapture noundef readnone %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #0 {
  %5 = alloca [3 x i32], align 4
  %6 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  %7 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !15
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %8, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !20
  %11 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %10, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !21
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %208

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %17 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %18 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %19 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  %20 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %21 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %22 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %23 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %24 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %25 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  br label %26

26:                                               ; preds = %203, %14
  %27 = phi i64 [ 0, %14 ], [ %204, %203 ]
  %28 = load ptr, ptr %10, align 8, !tbaa !23
  %29 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %27
  %30 = load ptr, ptr %15, align 8, !tbaa !24
  %31 = load ptr, ptr %30, align 8, !tbaa !23
  %32 = load ptr, ptr %16, align 8, !tbaa !25
  %33 = load ptr, ptr %32, align 8, !tbaa !23
  %34 = load ptr, ptr %17, align 8, !tbaa !25
  %35 = load ptr, ptr %34, align 8, !tbaa !23
  store i32 0, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %18, align 4, !tbaa !7
  store i32 0, ptr %19, align 4, !tbaa !7
  %36 = trunc i64 %27 to i32
  %37 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %36, ptr noundef nonnull %5) #33
  %38 = load ptr, ptr %20, align 8, !tbaa !27
  %39 = load ptr, ptr %21, align 8, !tbaa !28
  %40 = getelementptr inbounds i32, ptr %39, i64 %27
  %41 = load i32, ptr %40, align 4, !tbaa !7
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, ptr %38, i64 %42
  %44 = load ptr, ptr %22, align 8, !tbaa !27
  %45 = load ptr, ptr %23, align 8, !tbaa !28
  %46 = getelementptr inbounds i32, ptr %45, i64 %27
  %47 = load i32, ptr %46, align 4, !tbaa !7
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double, ptr %44, i64 %48
  %50 = call i32 @hypre_BoxGetSize(ptr noundef %29, ptr noundef nonnull %6) #33
  %51 = load i32, ptr %6, align 4, !tbaa !7
  %52 = load i32, ptr %24, align 4, !tbaa !7
  %53 = load i32, ptr %25, align 4, !tbaa !7
  %54 = call i32 @llvm.smax.i32(i32 %52, i32 %51)
  %55 = call i32 @llvm.smax.i32(i32 %53, i32 %54)
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %203

57:                                               ; preds = %26
  %58 = getelementptr inbounds %struct.hypre_Box_struct, ptr %35, i64 %27
  %59 = load i32, ptr %58, align 4, !tbaa !7
  %60 = getelementptr inbounds [3 x i32], ptr %58, i64 0, i64 1
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = getelementptr inbounds %struct.hypre_Box_struct, ptr %35, i64 %27, i32 1, i64 1
  %63 = load i32, ptr %62, align 4, !tbaa !7
  %64 = sub nsw i32 %63, %61
  %65 = icmp slt i32 %64, 0
  %66 = add nsw i32 %64, 1
  %67 = select i1 %65, i32 0, i32 %66
  %68 = getelementptr inbounds %struct.hypre_Box_struct, ptr %35, i64 %27, i32 1
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = sub nsw i32 %69, %59
  %71 = icmp slt i32 %70, 0
  %72 = add nsw i32 %70, 1
  %73 = select i1 %71, i32 0, i32 %72
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %27
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 1
  %77 = load i32, ptr %76, align 4, !tbaa !7
  %78 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %27, i32 1, i64 1
  %79 = load i32, ptr %78, align 4, !tbaa !7
  %80 = sub nsw i32 %79, %77
  %81 = icmp slt i32 %80, 0
  %82 = add nsw i32 %80, 1
  %83 = select i1 %81, i32 0, i32 %82
  %84 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %27, i32 1
  %85 = load i32, ptr %84, align 4, !tbaa !7
  %86 = sub nsw i32 %85, %75
  %87 = icmp slt i32 %86, 0
  %88 = add nsw i32 %86, 1
  %89 = select i1 %87, i32 0, i32 %88
  %90 = getelementptr inbounds %struct.hypre_Box_struct, ptr %31, i64 %27
  %91 = load i32, ptr %90, align 4, !tbaa !7
  %92 = getelementptr inbounds [3 x i32], ptr %90, i64 0, i64 1
  %93 = load i32, ptr %92, align 4, !tbaa !7
  %94 = getelementptr inbounds %struct.hypre_Box_struct, ptr %31, i64 %27, i32 1, i64 1
  %95 = load i32, ptr %94, align 4, !tbaa !7
  %96 = sub nsw i32 %95, %93
  %97 = icmp slt i32 %96, 0
  %98 = add nsw i32 %96, 1
  %99 = select i1 %97, i32 0, i32 %98
  %100 = getelementptr inbounds %struct.hypre_Box_struct, ptr %31, i64 %27, i32 1
  %101 = load i32, ptr %100, align 4, !tbaa !7
  %102 = sub nsw i32 %101, %91
  %103 = icmp slt i32 %102, 0
  %104 = add nsw i32 %102, 1
  %105 = select i1 %103, i32 0, i32 %104
  %106 = icmp sgt i32 %53, 0
  %107 = icmp sgt i32 %52, 0
  %108 = icmp sgt i32 %51, 0
  %109 = sub i32 %105, %51
  %110 = sub i32 %89, %51
  %111 = sub i32 %73, %51
  %112 = sub i32 %99, %52
  %113 = mul i32 %112, %105
  %114 = sub i32 %83, %52
  %115 = mul i32 %114, %89
  %116 = sub i32 %67, %52
  %117 = mul i32 %73, %116
  br i1 %106, label %118, label %203

118:                                              ; preds = %57
  %119 = load i32, ptr %29, align 4, !tbaa !7
  %120 = sub i32 %119, %91
  %121 = getelementptr inbounds i32, ptr %29, i64 1
  %122 = load i32, ptr %121, align 4, !tbaa !7
  %123 = sub i32 %122, %93
  %124 = getelementptr inbounds i32, ptr %29, i64 2
  %125 = load i32, ptr %124, align 4, !tbaa !7
  %126 = getelementptr inbounds [3 x i32], ptr %90, i64 0, i64 2
  %127 = load i32, ptr %126, align 4, !tbaa !7
  %128 = sub nsw i32 %125, %127
  %129 = mul nsw i32 %99, %128
  %130 = add nsw i32 %123, %129
  %131 = mul nsw i32 %130, %105
  %132 = add nsw i32 %120, %131
  %133 = sub i32 %119, %75
  %134 = sub i32 %122, %77
  %135 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 2
  %136 = load i32, ptr %135, align 4, !tbaa !7
  %137 = sub nsw i32 %125, %136
  %138 = mul nsw i32 %83, %137
  %139 = add nsw i32 %134, %138
  %140 = mul nsw i32 %139, %89
  %141 = add nsw i32 %133, %140
  %142 = sub i32 %119, %59
  %143 = sub i32 %122, %61
  %144 = getelementptr inbounds [3 x i32], ptr %58, i64 0, i64 2
  %145 = load i32, ptr %144, align 4, !tbaa !7
  %146 = sub nsw i32 %125, %145
  %147 = mul nsw i32 %67, %146
  %148 = add nsw i32 %143, %147
  %149 = mul nsw i32 %148, %73
  %150 = add nsw i32 %142, %149
  br label %151

151:                                              ; preds = %194, %118
  %152 = phi i32 [ %198, %194 ], [ %132, %118 ]
  %153 = phi i32 [ %200, %194 ], [ %150, %118 ]
  %154 = phi i32 [ %199, %194 ], [ %141, %118 ]
  %155 = phi i32 [ %201, %194 ], [ 0, %118 ]
  br i1 %107, label %156, label %194

156:                                              ; preds = %185, %151
  %157 = phi i32 [ %189, %185 ], [ %152, %151 ]
  %158 = phi i32 [ %191, %185 ], [ %153, %151 ]
  %159 = phi i32 [ %190, %185 ], [ %154, %151 ]
  %160 = phi i32 [ %192, %185 ], [ 0, %151 ]
  br i1 %108, label %161, label %185

161:                                              ; preds = %156
  %162 = sext i32 %157 to i64
  %163 = sext i32 %158 to i64
  %164 = sext i32 %159 to i64
  br label %165

165:                                              ; preds = %165, %161
  %166 = phi i64 [ %164, %161 ], [ %177, %165 ]
  %167 = phi i64 [ %163, %161 ], [ %178, %165 ]
  %168 = phi i64 [ %162, %161 ], [ %176, %165 ]
  %169 = phi i32 [ 0, %161 ], [ %179, %165 ]
  %170 = getelementptr inbounds double, ptr %49, i64 %167
  %171 = load double, ptr %170, align 8, !tbaa !29
  %172 = getelementptr inbounds double, ptr %37, i64 %168
  %173 = load double, ptr %172, align 8, !tbaa !29
  %174 = fdiv double %171, %173
  %175 = getelementptr inbounds double, ptr %43, i64 %166
  store double %174, ptr %175, align 8, !tbaa !29
  %176 = add nsw i64 %168, 1
  %177 = add nsw i64 %166, 1
  %178 = add nsw i64 %167, 1
  %179 = add nuw nsw i32 %169, 1
  %180 = icmp eq i32 %179, %51
  br i1 %180, label %181, label %165, !llvm.loop !31

181:                                              ; preds = %165
  %.lcssa2 = phi i64 [ %176, %165 ]
  %.lcssa1 = phi i64 [ %177, %165 ]
  %.lcssa = phi i64 [ %178, %165 ]
  %182 = trunc i64 %.lcssa1 to i32
  %183 = trunc i64 %.lcssa to i32
  %184 = trunc i64 %.lcssa2 to i32
  br label %185

185:                                              ; preds = %181, %156
  %186 = phi i32 [ %159, %156 ], [ %182, %181 ]
  %187 = phi i32 [ %158, %156 ], [ %183, %181 ]
  %188 = phi i32 [ %157, %156 ], [ %184, %181 ]
  %189 = add nsw i32 %109, %188
  %190 = add nsw i32 %110, %186
  %191 = add nsw i32 %111, %187
  %192 = add nuw nsw i32 %160, 1
  %193 = icmp eq i32 %192, %52
  br i1 %193, label %194, label %156, !llvm.loop !32

194:                                              ; preds = %185, %151
  %195 = phi i32 [ %154, %151 ], [ %190, %185 ]
  %196 = phi i32 [ %153, %151 ], [ %191, %185 ]
  %197 = phi i32 [ %152, %151 ], [ %189, %185 ]
  %198 = add nsw i32 %197, %113
  %199 = add nsw i32 %195, %115
  %200 = add nsw i32 %196, %117
  %201 = add nuw nsw i32 %155, 1
  %202 = icmp eq i32 %201, %53
  br i1 %202, label %203, label %151, !llvm.loop !33

203:                                              ; preds = %194, %57, %26
  %204 = add nuw nsw i64 %27, 1
  %205 = load i32, ptr %11, align 8, !tbaa !21
  %206 = sext i32 %205 to i64
  %207 = icmp slt i64 %204, %206
  br i1 %207, label %26, label %208, !llvm.loop !34

208:                                              ; preds = %203, %4
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGCreate(i32 noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = tail call ptr @hypre_SMGCreate(i32 noundef %0) #33
  store ptr %3, ptr %1, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_SMGDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetup(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 @hypre_SMGSetup(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #33
  ret i32 %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSolve(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 @hypre_SMGSolve(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #33
  ret i32 %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetMemoryUse(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetMemoryUse(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetTol(ptr noundef %0, double noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetTol(ptr noundef %0, double noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetMaxIter(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetMaxIter(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetRelChange(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetRelChange(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetZeroGuess(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_SMGSetZeroGuess(ptr noundef %0, i32 noundef 1) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetNumPreRelax(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetNumPreRelax(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetNumPostRelax(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetNumPostRelax(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGSetLogging(ptr noundef %0, i32 noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGSetLogging(ptr noundef %0, i32 noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGGetNumIterations(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGGetNumIterations(ptr noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructSMGGetFinalRelativeResidualNorm(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_SMGGetFinalRelativeResidualNorm(ptr noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructStencilCreate(i32 noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = tail call ptr @hypre_CAlloc(i32 noundef %1, i32 noundef 12) #33
  %5 = tail call ptr @hypre_StructStencilCreate(i32 noundef %0, i32 noundef %1, ptr noundef %4) #33
  store ptr %5, ptr %2, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @HYPRE_StructStencilSetElement(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2) #6 {
  %4 = load ptr, ptr %0, align 8, !tbaa !35
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds [3 x i32], ptr %4, i64 %5
  store i32 0, ptr %6, align 4, !tbaa !7
  %7 = getelementptr inbounds [3 x i32], ptr %4, i64 %5, i64 1
  store i32 0, ptr %7, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %4, i64 %5, i64 2
  store i32 0, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %0, i64 0, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !37
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %21

12:                                               ; preds = %12, %3
  %13 = phi i64 [ %17, %12 ], [ 0, %3 ]
  %14 = getelementptr inbounds i32, ptr %2, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !7
  %16 = getelementptr inbounds [3 x i32], ptr %4, i64 %5, i64 %13
  store i32 %15, ptr %16, align 4, !tbaa !7
  %17 = add nuw nsw i64 %13, 1
  %18 = load i32, ptr %9, align 8, !tbaa !37
  %19 = sext i32 %18 to i64
  %20 = icmp slt i64 %17, %19
  br i1 %20, label %12, label %21, !llvm.loop !38

21:                                               ; preds = %12, %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructStencilDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructStencilDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructVectorCreate(i32 noundef %0, ptr noundef %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = tail call ptr @hypre_StructVectorCreate(i32 noundef %0, ptr noundef %1) #33
  store ptr %4, ptr %2, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructVectorDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructVectorInitialize(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructVectorInitialize(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructVectorSetBoxValues(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 4
  %6 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  store i32 0, ptr %5, align 4, !tbaa !7
  %7 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  store i32 0, ptr %7, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  store i32 0, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %6, align 4, !tbaa !7
  %9 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  store i32 0, ptr %9, align 4, !tbaa !7
  %10 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 0, ptr %10, align 4, !tbaa !7
  %11 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !39
  %13 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %12, i64 0, i32 1
  %14 = load i32, ptr %13, align 4, !tbaa !11
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %16, %4
  %17 = phi i64 [ %24, %16 ], [ 0, %4 ]
  %18 = getelementptr inbounds i32, ptr %1, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !7
  %20 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 %17
  store i32 %19, ptr %20, align 4, !tbaa !7
  %21 = getelementptr inbounds i32, ptr %2, i64 %17
  %22 = load i32, ptr %21, align 4, !tbaa !7
  %23 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %17
  store i32 %22, ptr %23, align 4, !tbaa !7
  %24 = add nuw nsw i64 %17, 1
  %25 = load i32, ptr %13, align 4, !tbaa !11
  %26 = sext i32 %25 to i64
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %16, label %28, !llvm.loop !40

28:                                               ; preds = %16, %4
  %29 = tail call ptr @hypre_BoxCreate() #33
  %30 = call i32 @hypre_BoxSetExtents(ptr noundef %29, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %31 = call i32 @hypre_StructVectorSetBoxValues(ptr noundef nonnull %0, ptr noundef %29, ptr noundef %3, i32 noundef 0) #33
  %32 = call i32 @hypre_BoxDestroy(ptr noundef %29) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 %31
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @HYPRE_StructVectorAssemble(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructVectorAssemble(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_BoxCreate() #0 {
  %1 = tail call ptr @hypre_MAlloc(i32 noundef 24) #33
  ret ptr %1
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_BoxSetExtents(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #7 {
  %4 = load i32, ptr %1, align 4, !tbaa !7
  store i32 %4, ptr %0, align 4, !tbaa !7
  %5 = getelementptr inbounds i32, ptr %1, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !7
  %7 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 1
  store i32 %6, ptr %7, align 4, !tbaa !7
  %8 = getelementptr inbounds i32, ptr %1, i64 2
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 2
  store i32 %9, ptr %10, align 4, !tbaa !7
  %11 = load i32, ptr %2, align 4, !tbaa !7
  %12 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1
  store i32 %11, ptr %12, align 4, !tbaa !7
  %13 = getelementptr inbounds i32, ptr %2, i64 1
  %14 = load i32, ptr %13, align 4, !tbaa !7
  %15 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 1
  store i32 %14, ptr %15, align 4, !tbaa !7
  %16 = getelementptr inbounds i32, ptr %2, i64 2
  %17 = load i32, ptr %16, align 4, !tbaa !7
  %18 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 2
  store i32 %17, ptr %18, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_BoxArrayCreate(i32 noundef %0) #0 {
  %2 = tail call ptr @hypre_MAlloc(i32 noundef 16) #33
  %3 = tail call ptr @hypre_CAlloc(i32 noundef %0, i32 noundef 24) #33
  store ptr %3, ptr %2, align 8, !tbaa !23
  %4 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %2, i64 0, i32 1
  store i32 %0, ptr %4, align 8, !tbaa !21
  %5 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %2, i64 0, i32 2
  store i32 %0, ptr %5, align 4, !tbaa !41
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxArraySetSize(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 4, !tbaa !41
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = add nsw i32 %1, 10
  %8 = load ptr, ptr %0, align 8, !tbaa !23
  %9 = mul i32 %7, 24
  %10 = tail call ptr @hypre_ReAlloc(ptr noundef %8, i32 noundef %9) #33
  store ptr %10, ptr %0, align 8, !tbaa !23
  store i32 %7, ptr %3, align 4, !tbaa !41
  br label %11

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %0, i64 0, i32 1
  store i32 %1, ptr %12, align 8, !tbaa !21
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_BoxArrayArrayCreate(i32 noundef %0) #0 {
  %2 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 16) #33
  %3 = tail call ptr @hypre_CAlloc(i32 noundef %0, i32 noundef 8) #33
  store ptr %3, ptr %2, align 8, !tbaa !42
  %4 = icmp sgt i32 %0, 0
  br i1 %4, label %5, label %17

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %15, %7 ]
  %9 = tail call ptr @hypre_MAlloc(i32 noundef 16) #33
  %10 = tail call ptr @hypre_CAlloc(i32 noundef 0, i32 noundef 24) #33
  store ptr %10, ptr %9, align 8, !tbaa !23
  %11 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %9, i64 0, i32 1
  store i32 0, ptr %11, align 8, !tbaa !21
  %12 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %9, i64 0, i32 2
  store i32 0, ptr %12, align 4, !tbaa !41
  %13 = load ptr, ptr %2, align 8, !tbaa !42
  %14 = getelementptr inbounds ptr, ptr %13, i64 %8
  store ptr %9, ptr %14, align 8, !tbaa !14
  %15 = add nuw nsw i64 %8, 1
  %16 = icmp eq i64 %15, %6
  br i1 %16, label %17, label %7, !llvm.loop !44

17:                                               ; preds = %7, %1
  %18 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %2, i64 0, i32 1
  store i32 %0, ptr %18, align 8, !tbaa !45
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %4

4:                                                ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxArrayDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !23
  tail call void @hypre_Free(ptr noundef %4) #33
  store ptr null, ptr %0, align 8, !tbaa !23
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %5

5:                                                ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxArrayArrayDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %19, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !45
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %7, %3
  %8 = phi i64 [ %13, %7 ], [ 0, %3 ]
  %9 = load ptr, ptr %0, align 8, !tbaa !42
  %10 = getelementptr inbounds ptr, ptr %9, i64 %8
  %11 = load ptr, ptr %10, align 8, !tbaa !14
  %12 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %11) #35
  %13 = add nuw nsw i64 %8, 1
  %14 = load i32, ptr %4, align 8, !tbaa !45
  %15 = sext i32 %14 to i64
  %16 = icmp slt i64 %13, %15
  br i1 %16, label %7, label %17, !llvm.loop !46

17:                                               ; preds = %7, %3
  %18 = load ptr, ptr %0, align 8, !tbaa !42
  tail call void @hypre_Free(ptr noundef %18) #33
  store ptr null, ptr %0, align 8, !tbaa !42
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %19

19:                                               ; preds = %17, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_BoxDuplicate(ptr nocapture noundef readonly %0) #0 {
  %2 = tail call ptr @hypre_MAlloc(i32 noundef 24) #33
  %3 = load i32, ptr %0, align 4, !tbaa !7
  store i32 %3, ptr %2, align 4, !tbaa !7
  %4 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 1
  %5 = load i32, ptr %4, align 4, !tbaa !7
  %6 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 1
  store i32 %5, ptr %6, align 4, !tbaa !7
  %7 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 2
  %8 = load i32, ptr %7, align 4, !tbaa !7
  %9 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 2
  store i32 %8, ptr %9, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1
  store i32 %11, ptr %12, align 4, !tbaa !7
  %13 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 1
  %14 = load i32, ptr %13, align 4, !tbaa !7
  %15 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1, i64 1
  store i32 %14, ptr %15, align 4, !tbaa !7
  %16 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 2
  %17 = load i32, ptr %16, align 4, !tbaa !7
  %18 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1, i64 2
  store i32 %17, ptr %18, align 4, !tbaa !7
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_BoxArrayDuplicate(ptr nocapture noundef readonly %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %0, i64 0, i32 1
  %3 = load i32, ptr %2, align 8, !tbaa !21
  %4 = tail call ptr @hypre_MAlloc(i32 noundef 16) #33
  %5 = tail call ptr @hypre_CAlloc(i32 noundef %3, i32 noundef 24) #33
  store ptr %5, ptr %4, align 8, !tbaa !23
  %6 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %4, i64 0, i32 1
  store i32 %3, ptr %6, align 8, !tbaa !21
  %7 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %4, i64 0, i32 2
  store i32 %3, ptr %7, align 4, !tbaa !41
  %8 = load i32, ptr %2, align 8, !tbaa !21
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %36

10:                                               ; preds = %1
  %11 = load ptr, ptr %0, align 8, !tbaa !23
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %32, %12 ]
  %14 = getelementptr inbounds %struct.hypre_Box_struct, ptr %11, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !7
  %16 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %13
  store i32 %15, ptr %16, align 4, !tbaa !7
  %17 = getelementptr inbounds %struct.hypre_Box_struct, ptr %11, i64 %13, i32 0, i64 1
  %18 = load i32, ptr %17, align 4, !tbaa !7
  %19 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %13, i32 0, i64 1
  store i32 %18, ptr %19, align 4, !tbaa !7
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %11, i64 %13, i32 0, i64 2
  %21 = load i32, ptr %20, align 4, !tbaa !7
  %22 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %13, i32 0, i64 2
  store i32 %21, ptr %22, align 4, !tbaa !7
  %23 = getelementptr inbounds %struct.hypre_Box_struct, ptr %11, i64 %13, i32 1
  %24 = load i32, ptr %23, align 4, !tbaa !7
  %25 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %13, i32 1
  store i32 %24, ptr %25, align 4, !tbaa !7
  %26 = getelementptr inbounds %struct.hypre_Box_struct, ptr %11, i64 %13, i32 1, i64 1
  %27 = load i32, ptr %26, align 4, !tbaa !7
  %28 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %13, i32 1, i64 1
  store i32 %27, ptr %28, align 4, !tbaa !7
  %29 = getelementptr inbounds %struct.hypre_Box_struct, ptr %11, i64 %13, i32 1, i64 2
  %30 = load i32, ptr %29, align 4, !tbaa !7
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %13, i32 1, i64 2
  store i32 %30, ptr %31, align 4, !tbaa !7
  %32 = add nuw nsw i64 %13, 1
  %33 = load i32, ptr %2, align 8, !tbaa !21
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %32, %34
  br i1 %35, label %12, label %36, !llvm.loop !47

36:                                               ; preds = %12, %1
  ret ptr %4
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_AppendBox(ptr nocapture noundef readonly %0, ptr nocapture noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %1, i64 0, i32 1
  %4 = load i32, ptr %3, align 8, !tbaa !21
  %5 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %1, i64 0, i32 2
  %6 = load i32, ptr %5, align 4, !tbaa !41
  %7 = icmp sgt i32 %6, %4
  %8 = load ptr, ptr %1, align 8, !tbaa !23
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  %10 = add nsw i32 %4, 11
  %11 = mul i32 %10, 24
  %12 = tail call ptr @hypre_ReAlloc(ptr noundef %8, i32 noundef %11) #33
  store ptr %12, ptr %1, align 8, !tbaa !23
  store i32 %10, ptr %5, align 4, !tbaa !41
  br label %13

13:                                               ; preds = %9, %2
  %14 = phi ptr [ %8, %2 ], [ %12, %9 ]
  %15 = add nsw i32 %4, 1
  store i32 %15, ptr %3, align 8, !tbaa !21
  %16 = load i32, ptr %0, align 4, !tbaa !7
  %17 = sext i32 %4 to i64
  %18 = getelementptr inbounds %struct.hypre_Box_struct, ptr %14, i64 %17
  store i32 %16, ptr %18, align 4, !tbaa !7
  %19 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 1
  %20 = load i32, ptr %19, align 4, !tbaa !7
  %21 = getelementptr inbounds %struct.hypre_Box_struct, ptr %14, i64 %17, i32 0, i64 1
  store i32 %20, ptr %21, align 4, !tbaa !7
  %22 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 2
  %23 = load i32, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds %struct.hypre_Box_struct, ptr %14, i64 %17, i32 0, i64 2
  store i32 %23, ptr %24, align 4, !tbaa !7
  %25 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = getelementptr inbounds %struct.hypre_Box_struct, ptr %14, i64 %17, i32 1
  store i32 %26, ptr %27, align 4, !tbaa !7
  %28 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 1
  %29 = load i32, ptr %28, align 4, !tbaa !7
  %30 = getelementptr inbounds %struct.hypre_Box_struct, ptr %14, i64 %17, i32 1, i64 1
  store i32 %29, ptr %30, align 4, !tbaa !7
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 2
  %32 = load i32, ptr %31, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_Box_struct, ptr %14, i64 %17, i32 1, i64 2
  store i32 %32, ptr %33, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_BoxGetSize(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #7 {
  %3 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1
  %4 = load i32, ptr %3, align 4, !tbaa !7
  %5 = load i32, ptr %0, align 4, !tbaa !7
  %6 = sub nsw i32 %4, %5
  %7 = add nsw i32 %6, 1
  %8 = icmp slt i32 %6, 0
  %9 = select i1 %8, i32 0, i32 %7
  store i32 %9, ptr %1, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 1
  %13 = load i32, ptr %12, align 4, !tbaa !7
  %14 = sub nsw i32 %11, %13
  %15 = add nsw i32 %14, 1
  %16 = icmp slt i32 %14, 0
  %17 = select i1 %16, i32 0, i32 %15
  %18 = getelementptr inbounds i32, ptr %1, i64 1
  store i32 %17, ptr %18, align 4, !tbaa !7
  %19 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 2
  %20 = load i32, ptr %19, align 4, !tbaa !7
  %21 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 2
  %22 = load i32, ptr %21, align 4, !tbaa !7
  %23 = sub nsw i32 %20, %22
  %24 = add nsw i32 %23, 1
  %25 = icmp slt i32 %23, 0
  %26 = select i1 %25, i32 0, i32 %24
  %27 = getelementptr inbounds i32, ptr %1, i64 2
  store i32 %26, ptr %27, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_BoxGetStrideSize(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #8 {
  br label %4

4:                                                ; preds = %21, %3
  %5 = phi i64 [ 0, %3 ], [ %24, %21 ]
  %6 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 %5
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = sub nsw i32 %7, %9
  %11 = add nsw i32 %10, 1
  %12 = icmp slt i32 %10, 0
  %13 = select i1 %12, i32 0, i32 %11
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %4
  %16 = add nsw i32 %13, -1
  %17 = getelementptr inbounds i32, ptr %1, i64 %5
  %18 = load i32, ptr %17, align 4, !tbaa !7
  %19 = sdiv i32 %16, %18
  %20 = add nsw i32 %19, 1
  br label %21

21:                                               ; preds = %15, %4
  %22 = phi i32 [ %20, %15 ], [ 0, %4 ]
  %23 = getelementptr inbounds i32, ptr %2, i64 %5
  store i32 %22, ptr %23, align 4, !tbaa !7
  %24 = add nuw nsw i64 %5, 1
  %25 = icmp eq i64 %24, 3
  br i1 %25, label %26, label %4, !llvm.loop !48

26:                                               ; preds = %21
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @hypre_IModPeriodX(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #9 {
  %3 = load i32, ptr %0, align 4, !tbaa !7
  %4 = load i32, ptr %1, align 4, !tbaa !7
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = icmp slt i32 %3, %4
  br i1 %7, label %8, label %15

8:                                                ; preds = %6
  %9 = icmp slt i32 %3, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %8
  %11 = sdiv i32 %3, %4
  %12 = sub i32 1, %11
  %13 = mul nsw i32 %12, %4
  %14 = add nsw i32 %13, %3
  br label %15

15:                                               ; preds = %10, %6
  %16 = phi i32 [ %14, %10 ], [ %3, %6 ]
  %17 = srem i32 %16, %4
  br label %18

18:                                               ; preds = %15, %8, %2
  %19 = phi i32 [ %3, %2 ], [ %3, %8 ], [ %17, %15 ]
  ret i32 %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @hypre_IModPeriodY(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #9 {
  %3 = getelementptr inbounds i32, ptr %0, i64 1
  %4 = load i32, ptr %3, align 4, !tbaa !7
  %5 = getelementptr inbounds i32, ptr %1, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !7
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %4, %6
  br i1 %9, label %10, label %17

10:                                               ; preds = %8
  %11 = icmp slt i32 %4, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %10
  %13 = sdiv i32 %4, %6
  %14 = sub i32 1, %13
  %15 = mul nsw i32 %14, %6
  %16 = add nsw i32 %15, %4
  br label %17

17:                                               ; preds = %12, %8
  %18 = phi i32 [ %16, %12 ], [ %4, %8 ]
  %19 = srem i32 %18, %6
  br label %20

20:                                               ; preds = %17, %10, %2
  %21 = phi i32 [ %4, %2 ], [ %4, %10 ], [ %19, %17 ]
  ret i32 %21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable
define internal i32 @hypre_IModPeriodZ(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #9 {
  %3 = getelementptr inbounds i32, ptr %0, i64 2
  %4 = load i32, ptr %3, align 4, !tbaa !7
  %5 = getelementptr inbounds i32, ptr %1, i64 2
  %6 = load i32, ptr %5, align 4, !tbaa !7
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %4, %6
  br i1 %9, label %10, label %17

10:                                               ; preds = %8
  %11 = icmp slt i32 %4, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %10
  %13 = sdiv i32 %4, %6
  %14 = sub i32 1, %13
  %15 = mul nsw i32 %14, %6
  %16 = add nsw i32 %15, %4
  br label %17

17:                                               ; preds = %12, %8
  %18 = phi i32 [ %16, %12 ], [ %4, %8 ]
  %19 = srem i32 %18, %6
  br label %20

20:                                               ; preds = %17, %10, %2
  %21 = phi i32 [ %4, %2 ], [ %4, %10 ], [ %19, %17 ]
  ret i32 %21
}

; Function Attrs: nofree nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_IntersectBoxes(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2) #10 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %18, %4 ]
  %6 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %1, i64 0, i64 %5
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = tail call i32 @llvm.smax.i32(i32 %7, i32 %9)
  %11 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 %5
  store i32 %10, ptr %11, align 4, !tbaa !7
  %12 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 %5
  %13 = load i32, ptr %12, align 4, !tbaa !7
  %14 = getelementptr inbounds %struct.hypre_Box_struct, ptr %1, i64 0, i32 1, i64 %5
  %15 = load i32, ptr %14, align 4, !tbaa !7
  %16 = tail call i32 @llvm.smin.i32(i32 %13, i32 %15)
  %17 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1, i64 %5
  store i32 %16, ptr %17, align 4, !tbaa !7
  %18 = add nuw nsw i64 %5, 1
  %19 = icmp eq i64 %18, 3
  br i1 %19, label %20, label %4, !llvm.loop !49

20:                                               ; preds = %4
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SubtractBoxes(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2) #0 {
  %4 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %2, i32 noundef 7) #33
  %5 = load ptr, ptr %2, align 8, !tbaa !23
  %6 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6
  %7 = load i32, ptr %0, align 4, !tbaa !7
  store i32 %7, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 1
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6, i32 0, i64 1
  store i32 %9, ptr %10, align 4, !tbaa !7
  %11 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 2
  %12 = load i32, ptr %11, align 4, !tbaa !7
  %13 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6, i32 0, i64 2
  store i32 %12, ptr %13, align 4, !tbaa !7
  %14 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !7
  %16 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6, i32 1
  store i32 %15, ptr %16, align 4, !tbaa !7
  %17 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 1
  %18 = load i32, ptr %17, align 4, !tbaa !7
  %19 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6, i32 1, i64 1
  store i32 %18, ptr %19, align 4, !tbaa !7
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 2
  %21 = load i32, ptr %20, align 4, !tbaa !7
  %22 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6, i32 1, i64 2
  store i32 %21, ptr %22, align 4, !tbaa !7
  br label %23

23:                                               ; preds = %80, %3
  %24 = phi i64 [ 0, %3 ], [ %82, %80 ]
  %25 = phi i32 [ 0, %3 ], [ %81, %80 ]
  %26 = getelementptr inbounds [3 x i32], ptr %1, i64 0, i64 %24
  %27 = load i32, ptr %26, align 4, !tbaa !7
  %28 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 6, i32 1, i64 %24
  %29 = load i32, ptr %28, align 4, !tbaa !7
  %30 = icmp sgt i32 %27, %29
  br i1 %30, label %37, label %31

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.hypre_Box_struct, ptr %1, i64 0, i32 1, i64 %24
  %33 = load i32, ptr %32, align 4, !tbaa !7
  %34 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %24
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = icmp slt i32 %33, %35
  br i1 %36, label %37, label %49

37:                                               ; preds = %31, %23
  %38 = load i32, ptr %0, align 4, !tbaa !7
  store i32 %38, ptr %5, align 4, !tbaa !7
  %39 = load i32, ptr %8, align 4, !tbaa !7
  %40 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  store i32 %39, ptr %40, align 4, !tbaa !7
  %41 = load i32, ptr %11, align 4, !tbaa !7
  %42 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  store i32 %41, ptr %42, align 4, !tbaa !7
  %43 = load i32, ptr %14, align 4, !tbaa !7
  %44 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 0, i32 1
  store i32 %43, ptr %44, align 4, !tbaa !7
  %45 = load i32, ptr %17, align 4, !tbaa !7
  %46 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 0, i32 1, i64 1
  store i32 %45, ptr %46, align 4, !tbaa !7
  %47 = load i32, ptr %20, align 4, !tbaa !7
  %48 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 0, i32 1, i64 2
  store i32 %47, ptr %48, align 4, !tbaa !7
  br label %84

49:                                               ; preds = %31
  %50 = icmp sgt i32 %27, %35
  br i1 %50, label %51, label %64

51:                                               ; preds = %49
  %52 = sext i32 %25 to i64
  %53 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %52
  %54 = load <4 x i32>, ptr %6, align 4, !tbaa !7
  store <4 x i32> %54, ptr %53, align 4, !tbaa !7
  %55 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %52, i32 1, i64 1
  %56 = load <2 x i32>, ptr %19, align 4, !tbaa !7
  store <2 x i32> %56, ptr %55, align 4, !tbaa !7
  %57 = load i32, ptr %26, align 4, !tbaa !7
  %58 = add nsw i32 %57, -1
  %59 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %52, i32 1, i64 %24
  store i32 %58, ptr %59, align 4, !tbaa !7
  %60 = load i32, ptr %26, align 4, !tbaa !7
  store i32 %60, ptr %34, align 4, !tbaa !7
  %61 = add nsw i32 %25, 1
  %62 = load i32, ptr %32, align 4, !tbaa !7
  %63 = load i32, ptr %28, align 4, !tbaa !7
  br label %64

64:                                               ; preds = %51, %49
  %65 = phi i32 [ %63, %51 ], [ %29, %49 ]
  %66 = phi i32 [ %62, %51 ], [ %33, %49 ]
  %67 = phi i32 [ %61, %51 ], [ %25, %49 ]
  %68 = icmp slt i32 %66, %65
  br i1 %68, label %69, label %80

69:                                               ; preds = %64
  %70 = sext i32 %67 to i64
  %71 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %70
  %72 = load <4 x i32>, ptr %6, align 4, !tbaa !7
  store <4 x i32> %72, ptr %71, align 4, !tbaa !7
  %73 = getelementptr inbounds %struct.hypre_Box_struct, ptr %5, i64 %70, i32 1, i64 1
  %74 = load <2 x i32>, ptr %19, align 4, !tbaa !7
  store <2 x i32> %74, ptr %73, align 4, !tbaa !7
  %75 = load i32, ptr %32, align 4, !tbaa !7
  %76 = add nsw i32 %75, 1
  %77 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 %24
  store i32 %76, ptr %77, align 4, !tbaa !7
  %78 = load i32, ptr %32, align 4, !tbaa !7
  store i32 %78, ptr %28, align 4, !tbaa !7
  %79 = add nsw i32 %67, 1
  br label %80

80:                                               ; preds = %69, %64
  %81 = phi i32 [ %79, %69 ], [ %67, %64 ]
  %82 = add nuw nsw i64 %24, 1
  %83 = icmp eq i64 %82, 3
  br i1 %83, label %84, label %23, !llvm.loop !50

84:                                               ; preds = %80, %37
  %85 = phi i32 [ 1, %37 ], [ %81, %80 ]
  %86 = tail call i32 @hypre_BoxArraySetSize(ptr noundef nonnull %2, i32 noundef %85) #33
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_UnionBoxes(ptr noundef %0) #0 {
  %2 = alloca [3 x ptr], align 16
  %3 = alloca [3 x i32], align 4
  %4 = alloca [3 x i32], align 4
  %5 = alloca [2 x i32], align 4
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  %9 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %0, i64 0, i32 1
  %10 = load i32, ptr %9, align 8, !tbaa !21
  %11 = icmp slt i32 %10, 2
  br i1 %11, label %397, label %12

12:                                               ; preds = %1
  %13 = shl nuw nsw i32 %10, 1
  %14 = mul i32 %10, 24
  %15 = tail call ptr @hypre_MAlloc(i32 noundef %14) #33
  store ptr %15, ptr %2, align 16, !tbaa !14
  store i32 0, ptr %3, align 4, !tbaa !7
  %16 = zext i32 %13 to i64
  %17 = getelementptr inbounds i8, ptr %3, i64 4
  store i64 0, ptr %17, align 4
  %18 = getelementptr inbounds i32, ptr %15, i64 %16
  %19 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 1
  store ptr %18, ptr %19, align 8, !tbaa !14
  %20 = getelementptr inbounds i32, ptr %18, i64 %16
  %21 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 2
  store ptr %20, ptr %21, align 16, !tbaa !14
  %22 = load i32, ptr %9, align 8, !tbaa !21
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %90

24:                                               ; preds = %12
  %25 = load ptr, ptr %0, align 8, !tbaa !23
  %26 = getelementptr inbounds [2 x i32], ptr %5, i64 0, i64 1
  br label %27

27:                                               ; preds = %85, %24
  %28 = phi i64 [ 0, %24 ], [ %86, %85 ]
  %29 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 %28
  br label %30

30:                                               ; preds = %82, %27
  %31 = phi i64 [ 0, %27 ], [ %83, %82 ]
  %32 = getelementptr inbounds [3 x i32], ptr %29, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !7
  store i32 %33, ptr %5, align 4, !tbaa !7
  %34 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 %28, i32 1, i64 %31
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = add nsw i32 %35, 1
  store i32 %36, ptr %26, align 4, !tbaa !7
  %37 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 %31
  %38 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 %31
  %39 = load i32, ptr %37, align 4, !tbaa !7
  %40 = load ptr, ptr %38, align 8, !tbaa !14
  br label %41

41:                                               ; preds = %80, %30
  %42 = phi i32 [ %39, %30 ], [ %81, %80 ]
  %43 = phi i1 [ true, %30 ], [ false, %80 ]
  %44 = phi i64 [ 0, %30 ], [ 1, %80 ]
  %45 = icmp sgt i32 %42, 0
  br i1 %45, label %46, label %61

46:                                               ; preds = %41
  %47 = getelementptr inbounds [2 x i32], ptr %5, i64 0, i64 %44
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = zext i32 %42 to i64
  br label %50

50:                                               ; preds = %58, %46
  %51 = phi i64 [ 0, %46 ], [ %59, %58 ]
  %52 = getelementptr inbounds i32, ptr %40, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = icmp sgt i32 %48, %53
  br i1 %54, label %58, label %55

55:                                               ; preds = %50
  %.lcssa5 = phi i64 [ %51, %50 ]
  %.lcssa4 = phi i32 [ %53, %50 ]
  %56 = trunc i64 %.lcssa5 to i32
  %57 = icmp eq i32 %48, %.lcssa4
  br i1 %57, label %80, label %61

58:                                               ; preds = %50
  %59 = add nuw nsw i64 %51, 1
  %60 = icmp eq i64 %59, %49
  br i1 %60, label %61, label %50, !llvm.loop !51

61:                                               ; preds = %58, %55, %41
  %62 = phi i32 [ %56, %55 ], [ 0, %41 ], [ %42, %58 ]
  %63 = icmp sgt i32 %42, %62
  br i1 %63, label %64, label %74

64:                                               ; preds = %61
  %65 = sext i32 %42 to i64
  %66 = sext i32 %62 to i64
  br label %67

67:                                               ; preds = %67, %64
  %68 = phi i64 [ %65, %64 ], [ %69, %67 ]
  %69 = add nsw i64 %68, -1
  %70 = getelementptr inbounds i32, ptr %40, i64 %69
  %71 = load i32, ptr %70, align 4, !tbaa !7
  %72 = getelementptr inbounds i32, ptr %40, i64 %68
  store i32 %71, ptr %72, align 4, !tbaa !7
  %73 = icmp sgt i64 %69, %66
  br i1 %73, label %67, label %74, !llvm.loop !52

74:                                               ; preds = %67, %61
  %75 = getelementptr inbounds [2 x i32], ptr %5, i64 0, i64 %44
  %76 = load i32, ptr %75, align 4, !tbaa !7
  %77 = zext i32 %62 to i64
  %78 = getelementptr inbounds i32, ptr %40, i64 %77
  store i32 %76, ptr %78, align 4, !tbaa !7
  %79 = add nsw i32 %42, 1
  store i32 %79, ptr %37, align 4, !tbaa !7
  br label %80

80:                                               ; preds = %74, %55
  %81 = phi i32 [ %42, %55 ], [ %79, %74 ]
  br i1 %43, label %41, label %82, !llvm.loop !53

82:                                               ; preds = %80
  %83 = add nuw nsw i64 %31, 1
  %84 = icmp eq i64 %83, 3
  br i1 %84, label %85, label %30, !llvm.loop !54

85:                                               ; preds = %82
  %86 = add nuw nsw i64 %28, 1
  %87 = load i32, ptr %9, align 8, !tbaa !21
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %27, label %90, !llvm.loop !55

90:                                               ; preds = %85, %12
  br label %91

91:                                               ; preds = %91, %90
  %92 = phi i64 [ %96, %91 ], [ 0, %90 ]
  %93 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !7
  %95 = add nsw i32 %94, -1
  store i32 %95, ptr %93, align 4, !tbaa !7
  %96 = add nuw nsw i64 %92, 1
  %97 = icmp eq i64 %96, 3
  br i1 %97, label %98, label %91, !llvm.loop !56

98:                                               ; preds = %91
  %99 = load i32, ptr %3, align 4, !tbaa !7
  %100 = load i32, ptr %17, align 4, !tbaa !7
  %101 = mul nsw i32 %100, %99
  %102 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 2
  %103 = load i32, ptr %102, align 4, !tbaa !7
  %104 = mul nsw i32 %101, %103
  store i32 1, ptr %4, align 4, !tbaa !7
  %105 = add nsw i32 %99, 1
  %106 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  store i32 %105, ptr %106, align 4, !tbaa !7
  %107 = add nsw i32 %100, 1
  %108 = mul nsw i32 %107, %105
  %109 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  store i32 %108, ptr %109, align 4, !tbaa !7
  %110 = tail call ptr @hypre_CAlloc(i32 noundef %104, i32 noundef 4) #33
  %111 = load i32, ptr %9, align 8, !tbaa !21
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %123

113:                                              ; preds = %98
  %114 = load ptr, ptr %0, align 8, !tbaa !23
  %115 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %116 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %117 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %118 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %119 = add i32 %99, 2
  %120 = add i32 %119, %108
  %121 = sext i32 %99 to i64
  %122 = sext i32 %100 to i64
  br label %126

123:                                              ; preds = %199, %98
  %124 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %125 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  br label %208

126:                                              ; preds = %199, %113
  %127 = phi i32 [ %111, %113 ], [ %200, %199 ]
  %128 = phi i64 [ 0, %113 ], [ %201, %199 ]
  %129 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %128
  br label %130

130:                                              ; preds = %154, %126
  %131 = phi i64 [ 0, %126 ], [ %157, %154 ]
  %132 = getelementptr inbounds [3 x i32], ptr %129, i64 0, i64 %131
  %133 = load i32, ptr %132, align 4, !tbaa !7
  %134 = getelementptr inbounds [3 x ptr], ptr %2, i64 0, i64 %131
  %135 = load ptr, ptr %134, align 8, !tbaa !14
  br label %136

136:                                              ; preds = %136, %130
  %137 = phi i64 [ %141, %136 ], [ 0, %130 ]
  %138 = getelementptr inbounds i32, ptr %135, i64 %137
  %139 = load i32, ptr %138, align 4, !tbaa !7
  %140 = icmp eq i32 %133, %139
  %141 = add nuw i64 %137, 1
  br i1 %140, label %142, label %136, !llvm.loop !57

142:                                              ; preds = %136
  %.lcssa2 = phi i64 [ %137, %136 ]
  %143 = trunc i64 %.lcssa2 to i32
  %144 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %131
  store i32 %143, ptr %144, align 4, !tbaa !7
  %145 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %128, i32 1, i64 %131
  %146 = load i32, ptr %145, align 4, !tbaa !7
  %147 = add nsw i32 %146, 1
  br label %148

148:                                              ; preds = %148, %142
  %149 = phi i64 [ %153, %148 ], [ %.lcssa2, %142 ]
  %150 = getelementptr inbounds i32, ptr %135, i64 %149
  %151 = load i32, ptr %150, align 4, !tbaa !7
  %152 = icmp eq i32 %147, %151
  %153 = add nuw i64 %149, 1
  br i1 %152, label %154, label %148, !llvm.loop !58

154:                                              ; preds = %148
  %.lcssa3 = phi i64 [ %149, %148 ]
  %155 = trunc i64 %.lcssa3 to i32
  %156 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %131
  store i32 %155, ptr %156, align 4, !tbaa !7
  %157 = add nuw nsw i64 %131, 1
  %158 = icmp eq i64 %157, 3
  br i1 %158, label %159, label %130, !llvm.loop !59

159:                                              ; preds = %154
  %160 = load i32, ptr %115, align 4, !tbaa !7
  %161 = load i32, ptr %116, align 4, !tbaa !7
  %162 = icmp slt i32 %160, %161
  br i1 %162, label %163, label %199

163:                                              ; preds = %159
  %164 = load i32, ptr %117, align 4, !tbaa !7
  %165 = load i32, ptr %118, align 4, !tbaa !7
  %166 = icmp slt i32 %164, %165
  %167 = load i32, ptr %6, align 4
  %168 = load i32, ptr %7, align 4
  %169 = icmp slt i32 %167, %168
  %170 = sext i32 %167 to i64
  %171 = sext i32 %164 to i64
  %172 = sext i32 %160 to i64
  %173 = sext i32 %161 to i64
  %174 = sext i32 %165 to i64
  %175 = sext i32 %168 to i64
  br label %176

176:                                              ; preds = %194, %163
  %177 = phi i64 [ %172, %163 ], [ %195, %194 ]
  br i1 %166, label %178, label %194

178:                                              ; preds = %176
  %179 = mul nsw i64 %177, %122
  br label %180

180:                                              ; preds = %191, %178
  %181 = phi i64 [ %171, %178 ], [ %192, %191 ]
  br i1 %169, label %182, label %191

182:                                              ; preds = %180
  %183 = add nsw i64 %181, %179
  %184 = mul nsw i64 %183, %121
  br label %185

185:                                              ; preds = %185, %182
  %186 = phi i64 [ %170, %182 ], [ %189, %185 ]
  %187 = add nsw i64 %186, %184
  %188 = getelementptr inbounds i32, ptr %110, i64 %187
  store i32 %120, ptr %188, align 4, !tbaa !7
  %189 = add nsw i64 %186, 1
  %190 = icmp eq i64 %189, %175
  br i1 %190, label %191, label %185, !llvm.loop !60

191:                                              ; preds = %185, %180
  %192 = add nsw i64 %181, 1
  %193 = icmp eq i64 %192, %174
  br i1 %193, label %194, label %180, !llvm.loop !61

194:                                              ; preds = %191, %176
  %195 = add nsw i64 %177, 1
  %196 = icmp eq i64 %195, %173
  br i1 %196, label %197, label %176, !llvm.loop !62

197:                                              ; preds = %194
  %198 = load i32, ptr %9, align 8, !tbaa !21
  br label %199

199:                                              ; preds = %197, %159
  %200 = phi i32 [ %198, %197 ], [ %127, %159 ]
  %201 = add nuw nsw i64 %128, 1
  %202 = sext i32 %200 to i64
  %203 = icmp slt i64 %201, %202
  br i1 %203, label %126, label %123, !llvm.loop !63

204:                                              ; preds = %298
  %205 = icmp sgt i32 %104, 0
  br i1 %205, label %206, label %313

206:                                              ; preds = %204
  %207 = zext i32 %104 to i64
  br label %303

208:                                              ; preds = %298, %123
  %209 = phi i32 [ 0, %123 ], [ %301, %298 ]
  %210 = phi i32 [ undef, %123 ], [ %300, %298 ]
  %211 = phi i32 [ %13, %123 ], [ %299, %298 ]
  %212 = phi i32 [ undef, %123 ], [ %226, %298 ]
  %213 = phi i32 [ undef, %123 ], [ %225, %298 ]
  %214 = phi i32 [ undef, %123 ], [ %224, %298 ]
  %215 = icmp ult i32 %209, 3
  br i1 %215, label %216, label %223

216:                                              ; preds = %208
  %217 = zext i32 %209 to i64
  %218 = getelementptr inbounds [3 x i32], ptr @switch.table.hypre_UnionBoxes, i64 0, i64 %217
  %219 = load i32, ptr %218, align 4
  %220 = zext i32 %209 to i64
  %221 = getelementptr inbounds [3 x i32], ptr @switch.table.hypre_UnionBoxes.1, i64 0, i64 %220
  %222 = load i32, ptr %221, align 4
  br label %223

223:                                              ; preds = %216, %208
  %224 = phi i32 [ %214, %208 ], [ %219, %216 ]
  %225 = phi i32 [ %213, %208 ], [ %222, %216 ]
  %226 = phi i32 [ %212, %208 ], [ %209, %216 ]
  %227 = sext i32 %224 to i64
  %228 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 %227
  %229 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 %227
  %230 = load i32, ptr %229, align 4, !tbaa !7
  store i32 0, ptr %228, align 4, !tbaa !7
  %231 = icmp sgt i32 %230, 0
  br i1 %231, label %232, label %298

232:                                              ; preds = %223
  %233 = sext i32 %225 to i64
  %234 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 %233
  %235 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 %233
  %236 = load i32, ptr %235, align 4, !tbaa !7
  %237 = icmp sgt i32 %236, 0
  %238 = sext i32 %226 to i64
  %239 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 %238
  %240 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 %238
  %241 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 %238
  br label %242

242:                                              ; preds = %292, %232
  %243 = phi i32 [ %210, %232 ], [ %294, %292 ]
  %244 = phi i32 [ %211, %232 ], [ %293, %292 ]
  store i32 0, ptr %234, align 4, !tbaa !7
  br i1 %237, label %245, label %292

245:                                              ; preds = %242
  %246 = load i32, ptr %240, align 4, !tbaa !7
  %247 = icmp sgt i32 %246, 0
  br label %248

248:                                              ; preds = %286, %245
  %249 = phi i32 [ %243, %245 ], [ %288, %286 ]
  %250 = phi i32 [ %244, %245 ], [ %287, %286 ]
  store i32 0, ptr %239, align 4, !tbaa !7
  br i1 %247, label %251, label %286

251:                                              ; preds = %280, %248
  %252 = phi i32 [ %283, %280 ], [ %249, %248 ]
  %253 = phi i32 [ %282, %280 ], [ %250, %248 ]
  %254 = phi i32 [ %281, %280 ], [ 0, %248 ]
  %255 = phi i32 [ %284, %280 ], [ 0, %248 ]
  %256 = load i32, ptr %124, align 4, !tbaa !7
  %257 = mul nsw i32 %256, %100
  %258 = load i32, ptr %125, align 4, !tbaa !7
  %259 = add nsw i32 %257, %258
  %260 = mul nsw i32 %259, %99
  %261 = load i32, ptr %8, align 4, !tbaa !7
  %262 = add nsw i32 %260, %261
  %263 = icmp ne i32 %254, 0
  %264 = sext i32 %262 to i64
  %265 = getelementptr inbounds i32, ptr %110, i64 %264
  %266 = load i32, ptr %265, align 4, !tbaa !7
  %267 = icmp eq i32 %266, %252
  %268 = select i1 %263, i1 %267, i1 false
  br i1 %268, label %269, label %275

269:                                              ; preds = %251
  store i32 0, ptr %265, align 4, !tbaa !7
  %270 = load i32, ptr %241, align 4, !tbaa !7
  %271 = sext i32 %253 to i64
  %272 = getelementptr inbounds i32, ptr %110, i64 %271
  %273 = load i32, ptr %272, align 4, !tbaa !7
  %274 = add nsw i32 %273, %270
  store i32 %274, ptr %272, align 4, !tbaa !7
  br label %280

275:                                              ; preds = %251
  %276 = icmp ne i32 %266, 0
  %277 = zext i1 %276 to i32
  %278 = select i1 %276, i32 %262, i32 %253
  %279 = select i1 %276, i32 %266, i32 %252
  br label %280

280:                                              ; preds = %275, %269
  %281 = phi i32 [ 1, %269 ], [ %277, %275 ]
  %282 = phi i32 [ %253, %269 ], [ %278, %275 ]
  %283 = phi i32 [ %252, %269 ], [ %279, %275 ]
  %284 = add nuw nsw i32 %255, 1
  store i32 %284, ptr %239, align 4, !tbaa !7
  %285 = icmp eq i32 %284, %246
  br i1 %285, label %286, label %251, !llvm.loop !64

286:                                              ; preds = %280, %248
  %287 = phi i32 [ %250, %248 ], [ %282, %280 ]
  %288 = phi i32 [ %249, %248 ], [ %283, %280 ]
  %289 = load i32, ptr %234, align 4, !tbaa !7
  %290 = add nsw i32 %289, 1
  store i32 %290, ptr %234, align 4, !tbaa !7
  %291 = icmp slt i32 %290, %236
  br i1 %291, label %248, label %292, !llvm.loop !65

292:                                              ; preds = %286, %242
  %293 = phi i32 [ %244, %242 ], [ %287, %286 ]
  %294 = phi i32 [ %243, %242 ], [ %288, %286 ]
  %295 = load i32, ptr %228, align 4, !tbaa !7
  %296 = add nsw i32 %295, 1
  store i32 %296, ptr %228, align 4, !tbaa !7
  %297 = icmp slt i32 %296, %230
  br i1 %297, label %242, label %298, !llvm.loop !66

298:                                              ; preds = %292, %223
  %299 = phi i32 [ %211, %223 ], [ %293, %292 ]
  %300 = phi i32 [ %210, %223 ], [ %294, %292 ]
  %301 = add nuw nsw i32 %209, 1
  %302 = icmp eq i32 %301, 3
  br i1 %302, label %204, label %208, !llvm.loop !67

303:                                              ; preds = %303, %206
  %304 = phi i64 [ 0, %206 ], [ %311, %303 ]
  %305 = phi i32 [ 0, %206 ], [ %310, %303 ]
  %306 = getelementptr inbounds i32, ptr %110, i64 %304
  %307 = load i32, ptr %306, align 4, !tbaa !7
  %308 = icmp ne i32 %307, 0
  %309 = zext i1 %308 to i32
  %310 = add nuw nsw i32 %305, %309
  %311 = add nuw nsw i64 %304, 1
  %312 = icmp eq i64 %311, %207
  br i1 %312, label %313, label %303, !llvm.loop !68

313:                                              ; preds = %303, %204
  %314 = phi i32 [ 0, %204 ], [ %310, %303 ]
  %315 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %0, i32 noundef %314) #33
  %316 = icmp sgt i32 %103, 0
  br i1 %316, label %317, label %396

317:                                              ; preds = %313
  %318 = icmp sgt i32 %100, 0
  %319 = icmp sgt i32 %99, 0
  %320 = zext i32 %103 to i64
  %321 = zext i32 %100 to i64
  %322 = zext i32 %99 to i64
  br label %323

323:                                              ; preds = %391, %317
  %324 = phi i64 [ 0, %317 ], [ %394, %391 ]
  %325 = phi i32 [ 0, %317 ], [ %393, %391 ]
  %326 = phi i32 [ 0, %317 ], [ %392, %391 ]
  br i1 %318, label %327, label %391

327:                                              ; preds = %323
  %328 = getelementptr inbounds i32, ptr %20, i64 %324
  %329 = trunc i64 %324 to i32
  br label %330

330:                                              ; preds = %386, %327
  %331 = phi i64 [ 0, %327 ], [ %389, %386 ]
  %332 = phi i32 [ %325, %327 ], [ %388, %386 ]
  %333 = phi i32 [ %326, %327 ], [ %387, %386 ]
  br i1 %319, label %334, label %386

334:                                              ; preds = %330
  %335 = getelementptr inbounds i32, ptr %18, i64 %331
  %336 = sext i32 %333 to i64
  %337 = trunc i64 %331 to i32
  br label %338

338:                                              ; preds = %379, %334
  %339 = phi i64 [ %336, %334 ], [ %381, %379 ]
  %340 = phi i64 [ 0, %334 ], [ %382, %379 ]
  %341 = phi i32 [ %332, %334 ], [ %380, %379 ]
  %342 = getelementptr inbounds i32, ptr %110, i64 %339
  %343 = load i32, ptr %342, align 4, !tbaa !7
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %379, label %345

345:                                              ; preds = %338
  %346 = srem i32 %343, %105
  %347 = srem i32 %343, %108
  %348 = sdiv i32 %347, %105
  %349 = sdiv i32 %343, %108
  %350 = load ptr, ptr %0, align 8, !tbaa !23
  %351 = sext i32 %341 to i64
  %352 = getelementptr inbounds %struct.hypre_Box_struct, ptr %350, i64 %351
  %353 = getelementptr inbounds i32, ptr %15, i64 %340
  %354 = load i32, ptr %353, align 4, !tbaa !7
  store i32 %354, ptr %352, align 4, !tbaa !7
  %355 = load i32, ptr %335, align 4, !tbaa !7
  %356 = getelementptr inbounds [3 x i32], ptr %352, i64 0, i64 1
  store i32 %355, ptr %356, align 4, !tbaa !7
  %357 = load i32, ptr %328, align 4, !tbaa !7
  %358 = getelementptr inbounds [3 x i32], ptr %352, i64 0, i64 2
  store i32 %357, ptr %358, align 4, !tbaa !7
  %359 = trunc i64 %340 to i32
  %360 = add nsw i32 %346, %359
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i32, ptr %15, i64 %361
  %363 = load i32, ptr %362, align 4, !tbaa !7
  %364 = add nsw i32 %363, -1
  %365 = getelementptr inbounds %struct.hypre_Box_struct, ptr %350, i64 %351, i32 1
  store i32 %364, ptr %365, align 4, !tbaa !7
  %366 = add nsw i32 %348, %337
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds i32, ptr %18, i64 %367
  %369 = load i32, ptr %368, align 4, !tbaa !7
  %370 = add nsw i32 %369, -1
  %371 = getelementptr inbounds %struct.hypre_Box_struct, ptr %350, i64 %351, i32 1, i64 1
  store i32 %370, ptr %371, align 4, !tbaa !7
  %372 = add nsw i32 %349, %329
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i32, ptr %20, i64 %373
  %375 = load i32, ptr %374, align 4, !tbaa !7
  %376 = add nsw i32 %375, -1
  %377 = getelementptr inbounds %struct.hypre_Box_struct, ptr %350, i64 %351, i32 1, i64 2
  store i32 %376, ptr %377, align 4, !tbaa !7
  %378 = add nsw i32 %341, 1
  br label %379

379:                                              ; preds = %345, %338
  %380 = phi i32 [ %378, %345 ], [ %341, %338 ]
  %381 = add nsw i64 %339, 1
  %382 = add nuw nsw i64 %340, 1
  %383 = icmp eq i64 %382, %322
  br i1 %383, label %384, label %338, !llvm.loop !69

384:                                              ; preds = %379
  %.lcssa1 = phi i32 [ %380, %379 ]
  %.lcssa = phi i64 [ %381, %379 ]
  %385 = trunc i64 %.lcssa to i32
  br label %386

386:                                              ; preds = %384, %330
  %387 = phi i32 [ %333, %330 ], [ %385, %384 ]
  %388 = phi i32 [ %332, %330 ], [ %.lcssa1, %384 ]
  %389 = add nuw nsw i64 %331, 1
  %390 = icmp eq i64 %389, %321
  br i1 %390, label %391, label %330, !llvm.loop !70

391:                                              ; preds = %386, %323
  %392 = phi i32 [ %326, %323 ], [ %387, %386 ]
  %393 = phi i32 [ %325, %323 ], [ %388, %386 ]
  %394 = add nuw nsw i64 %324, 1
  %395 = icmp eq i64 %394, %320
  br i1 %395, label %396, label %323, !llvm.loop !71

396:                                              ; preds = %391, %313
  tail call void @hypre_Free(ptr noundef %15) #33
  tail call void @hypre_Free(ptr noundef %110) #33
  br label %397

397:                                              ; preds = %396, %1
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #34
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxNeighborsCreate(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr nocapture noundef writeonly %6) #0 {
  %8 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 48) #33
  %9 = tail call ptr @hypre_CAlloc(i32 noundef %4, i32 noundef 216) #33
  %10 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %8, i64 0, i32 6
  store ptr %9, ptr %10, align 8, !tbaa !72
  store ptr %0, ptr %8, align 8, !tbaa !74
  %11 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %8, i64 0, i32 1
  store ptr %1, ptr %11, align 8, !tbaa !75
  %12 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %8, i64 0, i32 2
  store ptr %2, ptr %12, align 8, !tbaa !76
  %13 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %8, i64 0, i32 3
  store i32 %3, ptr %13, align 8, !tbaa !77
  %14 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %8, i64 0, i32 4
  store i32 %4, ptr %14, align 4, !tbaa !78
  %15 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %8, i64 0, i32 5
  store i32 %5, ptr %15, align 8, !tbaa !79
  store ptr %8, ptr %6, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxNeighborsAssemble(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  %5 = load ptr, ptr %0, align 8, !tbaa !74
  %6 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !75
  %8 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !76
  %10 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !77
  %12 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %5, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !21
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %153

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 4
  %17 = load i32, ptr %16, align 4, !tbaa !78
  %18 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 5
  %19 = load i32, ptr %18, align 8, !tbaa !79
  %20 = add nsw i32 %19, %17
  %21 = icmp sgt i32 %20, 0
  %22 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 6
  %23 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %24 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  %25 = icmp eq i32 %2, 0
  %26 = sext i32 %11 to i64
  %27 = sext i32 %17 to i64
  %28 = zext i32 %20 to i64
  br label %29

29:                                               ; preds = %110, %15
  %30 = phi i64 [ 0, %15 ], [ %113, %110 ]
  %31 = phi i32 [ 0, %15 ], [ %112, %110 ]
  %32 = phi i32 [ 0, %15 ], [ %111, %110 ]
  br i1 %21, label %33, label %92

33:                                               ; preds = %87, %29
  %34 = phi i64 [ %89, %87 ], [ 0, %29 ]
  %35 = phi i32 [ %88, %87 ], [ 0, %29 ]
  %36 = add nsw i64 %34, %26
  %37 = icmp eq i64 %36, %30
  br i1 %37, label %87, label %38

38:                                               ; preds = %33
  %39 = load ptr, ptr %5, align 8, !tbaa !23
  %40 = getelementptr inbounds %struct.hypre_Box_struct, ptr %39, i64 %36
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %39, i64 %30
  br label %42

42:                                               ; preds = %64, %38
  %43 = phi i64 [ 0, %38 ], [ %66, %64 ]
  %44 = phi i32 [ 0, %38 ], [ %65, %64 ]
  %45 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 %43
  store i32 0, ptr %45, align 4, !tbaa !7
  %46 = getelementptr inbounds [3 x i32], ptr %41, i64 0, i64 %43
  %47 = load i32, ptr %46, align 4, !tbaa !7
  %48 = getelementptr inbounds %struct.hypre_Box_struct, ptr %39, i64 %36, i32 1, i64 %43
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = sub nsw i32 %47, %49
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %42
  store i32 1, ptr %45, align 4, !tbaa !7
  %53 = tail call i32 @llvm.smax.i32(i32 %44, i32 %50)
  br label %54

54:                                               ; preds = %52, %42
  %55 = phi i32 [ %53, %52 ], [ %44, %42 ]
  %56 = getelementptr inbounds [3 x i32], ptr %40, i64 0, i64 %43
  %57 = load i32, ptr %56, align 4, !tbaa !7
  %58 = getelementptr inbounds %struct.hypre_Box_struct, ptr %39, i64 %30, i32 1, i64 %43
  %59 = load i32, ptr %58, align 4, !tbaa !7
  %60 = sub nsw i32 %57, %59
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %54
  store i32 -1, ptr %45, align 4, !tbaa !7
  %63 = tail call i32 @llvm.smax.i32(i32 %55, i32 %60)
  br label %64

64:                                               ; preds = %62, %54
  %65 = phi i32 [ %63, %62 ], [ %55, %54 ]
  %66 = add nuw nsw i64 %43, 1
  %67 = icmp eq i64 %66, 3
  br i1 %67, label %68, label %42, !llvm.loop !80

68:                                               ; preds = %64
  %.lcssa = phi i32 [ %65, %64 ]
  %69 = icmp sgt i32 %.lcssa, %1
  br i1 %69, label %87, label %70

70:                                               ; preds = %68
  %71 = icmp slt i64 %34, %27
  br i1 %71, label %72, label %87

72:                                               ; preds = %70
  %73 = tail call ptr @hypre_MAlloc(i32 noundef 16) #33
  store i32 %32, ptr %73, align 8, !tbaa !81
  %74 = getelementptr inbounds %struct.hypre_RankLink_struct, ptr %73, i64 0, i32 1
  store ptr null, ptr %74, align 8, !tbaa !83
  %75 = load ptr, ptr %22, align 8, !tbaa !72
  %76 = load i32, ptr %4, align 4, !tbaa !7
  %77 = add nsw i32 %76, 1
  %78 = sext i32 %77 to i64
  %79 = load i32, ptr %23, align 4, !tbaa !7
  %80 = add nsw i32 %79, 1
  %81 = sext i32 %80 to i64
  %82 = load i32, ptr %24, align 4, !tbaa !7
  %83 = add nsw i32 %82, 1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [3 x [3 x [3 x ptr]]], ptr %75, i64 %34, i64 %78, i64 %81, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !14
  store ptr %86, ptr %74, align 8, !tbaa !83
  store ptr %73, ptr %85, align 8, !tbaa !14
  br label %87

87:                                               ; preds = %72, %70, %68, %33
  %88 = phi i32 [ 1, %72 ], [ 1, %70 ], [ %35, %68 ], [ 1, %33 ]
  %89 = add nuw nsw i64 %34, 1
  %90 = icmp eq i64 %89, %28
  br i1 %90, label %91, label %33, !llvm.loop !84

91:                                               ; preds = %87
  %.lcssa1 = phi i32 [ %88, %87 ]
  br i1 %25, label %108, label %93

92:                                               ; preds = %29
  br i1 %25, label %108, label %110

93:                                               ; preds = %91
  %94 = icmp eq i32 %.lcssa1, 0
  br i1 %94, label %110, label %95

95:                                               ; preds = %93
  %96 = getelementptr inbounds i32, ptr %7, i64 %30
  %97 = load i32, ptr %96, align 4, !tbaa !7
  %98 = sub nsw i32 0, %97
  store i32 %98, ptr %96, align 4, !tbaa !7
  %99 = sext i32 %31 to i64
  %100 = icmp sgt i64 %30, %99
  br i1 %100, label %101, label %104

101:                                              ; preds = %95
  %102 = getelementptr inbounds i32, ptr %7, i64 %99
  %103 = trunc i64 %30 to i32
  store i32 %103, ptr %102, align 4, !tbaa !7
  br label %104

104:                                              ; preds = %101, %95
  %105 = add nsw i32 %32, 1
  %106 = trunc i64 %30 to i32
  %107 = add i32 %106, 1
  br label %110

108:                                              ; preds = %92, %91
  %109 = add nsw i32 %32, 1
  br label %110

110:                                              ; preds = %108, %104, %93, %92
  %111 = phi i32 [ %105, %104 ], [ %32, %93 ], [ %109, %108 ], [ %32, %92 ]
  %112 = phi i32 [ %107, %104 ], [ %31, %93 ], [ %31, %108 ], [ %31, %92 ]
  %113 = add nuw nsw i64 %30, 1
  %114 = load i32, ptr %12, align 8, !tbaa !21
  %115 = sext i32 %114 to i64
  %116 = icmp slt i64 %113, %115
  br i1 %116, label %29, label %117, !llvm.loop !85

117:                                              ; preds = %110
  %.lcssa2 = phi i32 [ %111, %110 ]
  %118 = icmp ne i32 %2, 0
  %119 = icmp sgt i32 %.lcssa2, 0
  %120 = select i1 %118, i1 %119, i1 false
  br i1 %120, label %121, label %153

121:                                              ; preds = %117
  %122 = load ptr, ptr %5, align 8, !tbaa !23
  %123 = zext i32 %.lcssa2 to i64
  br label %124

124:                                              ; preds = %124, %121
  %125 = phi i64 [ 0, %121 ], [ %151, %124 ]
  %126 = phi i32 [ %11, %121 ], [ %149, %124 ]
  %127 = phi i32 [ 0, %121 ], [ %150, %124 ]
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i32, ptr %7, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !7
  %131 = icmp sgt i32 %130, 0
  %132 = select i1 %131, i32 %130, i32 %127
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds %struct.hypre_Box_struct, ptr %122, i64 %133
  %135 = getelementptr inbounds %struct.hypre_Box_struct, ptr %122, i64 %125
  %136 = load <4 x i32>, ptr %134, align 4, !tbaa !7
  store <4 x i32> %136, ptr %135, align 4, !tbaa !7
  %137 = getelementptr inbounds %struct.hypre_Box_struct, ptr %122, i64 %133, i32 1, i64 1
  %138 = getelementptr inbounds %struct.hypre_Box_struct, ptr %122, i64 %125, i32 1, i64 1
  %139 = load <2 x i32>, ptr %137, align 4, !tbaa !7
  store <2 x i32> %139, ptr %138, align 4, !tbaa !7
  %140 = getelementptr inbounds i32, ptr %7, i64 %133
  %141 = load i32, ptr %140, align 4, !tbaa !7
  %142 = sub nsw i32 0, %141
  %143 = getelementptr inbounds i32, ptr %7, i64 %125
  store i32 %142, ptr %143, align 4, !tbaa !7
  %144 = getelementptr inbounds i32, ptr %9, i64 %133
  %145 = load i32, ptr %144, align 4, !tbaa !7
  %146 = getelementptr inbounds i32, ptr %9, i64 %125
  store i32 %145, ptr %146, align 4, !tbaa !7
  %147 = icmp eq i32 %132, %126
  %148 = trunc i64 %125 to i32
  %149 = select i1 %147, i32 %148, i32 %126
  %150 = add nsw i32 %132, 1
  %151 = add nuw nsw i64 %125, 1
  %152 = icmp eq i64 %151, %123
  br i1 %152, label %153, label %124, !llvm.loop !86

153:                                              ; preds = %124, %117, %3
  %154 = phi i32 [ %.lcssa2, %117 ], [ 0, %3 ], [ %.lcssa2, %124 ]
  %155 = phi i32 [ %11, %117 ], [ %11, %3 ], [ %149, %124 ]
  %156 = tail call i32 @hypre_BoxArraySetSize(ptr noundef nonnull %5, i32 noundef %154) #33
  store i32 %155, ptr %10, align 8, !tbaa !77
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BoxNeighborsDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %49, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 4
  %5 = load i32, ptr %4, align 4, !tbaa !78
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %40

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 6
  br label %9

9:                                                ; preds = %35, %7
  %10 = phi i64 [ 0, %7 ], [ %36, %35 ]
  br label %11

11:                                               ; preds = %33, %9
  %12 = phi i64 [ -1, %9 ], [ %13, %33 ]
  %13 = add nsw i64 %12, 1
  br label %14

14:                                               ; preds = %31, %11
  %15 = phi i64 [ -1, %11 ], [ %16, %31 ]
  %16 = add nsw i64 %15, 1
  br label %19

17:                                               ; preds = %26, %19
  %18 = icmp eq i64 %22, 2
  br i1 %18, label %31, label %19, !llvm.loop !87

19:                                               ; preds = %17, %14
  %20 = phi i64 [ -1, %14 ], [ %22, %17 ]
  %21 = load ptr, ptr %8, align 8, !tbaa !72
  %22 = add nsw i64 %20, 1
  %23 = getelementptr inbounds [3 x [3 x [3 x ptr]]], ptr %21, i64 %10, i64 %22, i64 %16, i64 %13
  %24 = load ptr, ptr %23, align 8, !tbaa !14
  %25 = icmp eq ptr %24, null
  br i1 %25, label %17, label %26

26:                                               ; preds = %26, %19
  %27 = phi ptr [ %29, %26 ], [ %24, %19 ]
  %28 = getelementptr inbounds %struct.hypre_RankLink_struct, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !83
  tail call void @hypre_Free(ptr noundef nonnull %27) #33
  %30 = icmp eq ptr %29, null
  br i1 %30, label %17, label %26, !llvm.loop !88

31:                                               ; preds = %17
  %32 = icmp eq i64 %16, 2
  br i1 %32, label %33, label %14, !llvm.loop !89

33:                                               ; preds = %31
  %34 = icmp eq i64 %13, 2
  br i1 %34, label %35, label %11, !llvm.loop !90

35:                                               ; preds = %33
  %36 = add nuw nsw i64 %10, 1
  %37 = load i32, ptr %4, align 4, !tbaa !78
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %9, label %40, !llvm.loop !91

40:                                               ; preds = %35, %3
  %41 = load ptr, ptr %0, align 8, !tbaa !74
  %42 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %41) #33
  %43 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !75
  tail call void @hypre_Free(ptr noundef %44) #33
  store ptr null, ptr %43, align 8, !tbaa !75
  %45 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !76
  tail call void @hypre_Free(ptr noundef %46) #33
  store ptr null, ptr %45, align 8, !tbaa !76
  %47 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %0, i64 0, i32 6
  %48 = load ptr, ptr %47, align 8, !tbaa !72
  tail call void @hypre_Free(ptr noundef %48) #33
  store ptr null, ptr %47, align 8, !tbaa !72
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %49

49:                                               ; preds = %40, %1
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_StructMapFineToCoarse(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #7 {
  %5 = load i32, ptr %0, align 4, !tbaa !7
  %6 = load i32, ptr %1, align 4, !tbaa !7
  %7 = sub nsw i32 %5, %6
  %8 = load i32, ptr %2, align 4, !tbaa !7
  %9 = sdiv i32 %7, %8
  store i32 %9, ptr %3, align 4, !tbaa !7
  %10 = getelementptr inbounds i32, ptr %0, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = getelementptr inbounds i32, ptr %1, i64 1
  %13 = load i32, ptr %12, align 4, !tbaa !7
  %14 = sub nsw i32 %11, %13
  %15 = getelementptr inbounds i32, ptr %2, i64 1
  %16 = load i32, ptr %15, align 4, !tbaa !7
  %17 = sdiv i32 %14, %16
  %18 = getelementptr inbounds i32, ptr %3, i64 1
  store i32 %17, ptr %18, align 4, !tbaa !7
  %19 = getelementptr inbounds i32, ptr %0, i64 2
  %20 = load i32, ptr %19, align 4, !tbaa !7
  %21 = getelementptr inbounds i32, ptr %1, i64 2
  %22 = load i32, ptr %21, align 4, !tbaa !7
  %23 = sub nsw i32 %20, %22
  %24 = getelementptr inbounds i32, ptr %2, i64 2
  %25 = load i32, ptr %24, align 4, !tbaa !7
  %26 = sdiv i32 %23, %25
  %27 = getelementptr inbounds i32, ptr %3, i64 2
  store i32 %26, ptr %27, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_StructMapCoarseToFine(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef writeonly %3) #7 {
  %5 = load i32, ptr %0, align 4, !tbaa !7
  %6 = load i32, ptr %2, align 4, !tbaa !7
  %7 = mul nsw i32 %6, %5
  %8 = load i32, ptr %1, align 4, !tbaa !7
  %9 = add nsw i32 %7, %8
  store i32 %9, ptr %3, align 4, !tbaa !7
  %10 = getelementptr inbounds i32, ptr %0, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = getelementptr inbounds i32, ptr %2, i64 1
  %13 = load i32, ptr %12, align 4, !tbaa !7
  %14 = mul nsw i32 %13, %11
  %15 = getelementptr inbounds i32, ptr %1, i64 1
  %16 = load i32, ptr %15, align 4, !tbaa !7
  %17 = add nsw i32 %14, %16
  %18 = getelementptr inbounds i32, ptr %3, i64 1
  store i32 %17, ptr %18, align 4, !tbaa !7
  %19 = getelementptr inbounds i32, ptr %0, i64 2
  %20 = load i32, ptr %19, align 4, !tbaa !7
  %21 = getelementptr inbounds i32, ptr %2, i64 2
  %22 = load i32, ptr %21, align 4, !tbaa !7
  %23 = mul nsw i32 %22, %20
  %24 = getelementptr inbounds i32, ptr %1, i64 2
  %25 = load i32, ptr %24, align 4, !tbaa !7
  %26 = add nsw i32 %23, %25
  %27 = getelementptr inbounds i32, ptr %3, i64 2
  store i32 %26, ptr %27, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructCoarsen(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr nocapture noundef writeonly %4) #0 {
  %6 = alloca ptr, align 8
  %7 = alloca [3 x i32], align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [3 x i32], align 4
  %11 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %11) #34
  %12 = load i32, ptr %0, align 8, !tbaa !92
  %13 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 1
  %14 = load i32, ptr %13, align 4, !tbaa !11
  %15 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 4
  %16 = load ptr, ptr %15, align 8, !tbaa !93
  %17 = load ptr, ptr %16, align 8, !tbaa !74
  %18 = tail call ptr @hypre_BoxArrayDuplicate(ptr noundef %17) #33
  %19 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %18, i64 0, i32 1
  %20 = load i32, ptr %19, align 8, !tbaa !21
  %21 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %16, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !75
  %23 = shl i32 %20, 2
  %24 = tail call ptr @hypre_MAlloc(i32 noundef %23) #33
  %25 = icmp sgt i32 %20, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %5
  %27 = tail call ptr @hypre_MAlloc(i32 noundef %23) #33
  br label %50

28:                                               ; preds = %5
  %29 = zext i32 %20 to i64
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %35, %30 ]
  %32 = getelementptr inbounds i32, ptr %22, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !7
  %34 = getelementptr inbounds i32, ptr %24, i64 %31
  store i32 %33, ptr %34, align 4, !tbaa !7
  %35 = add nuw nsw i64 %31, 1
  %36 = icmp eq i64 %35, %29
  br i1 %36, label %37, label %30, !llvm.loop !94

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %16, i64 0, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !76
  %40 = tail call ptr @hypre_MAlloc(i32 noundef %23) #33
  br i1 %25, label %41, label %50

41:                                               ; preds = %37
  %42 = zext i32 %20 to i64
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %48, %43 ]
  %45 = getelementptr inbounds i32, ptr %39, i64 %44
  %46 = load i32, ptr %45, align 4, !tbaa !7
  %47 = getelementptr inbounds i32, ptr %40, i64 %44
  store i32 %46, ptr %47, align 4, !tbaa !7
  %48 = add nuw nsw i64 %44, 1
  %49 = icmp eq i64 %48, %42
  br i1 %49, label %50, label %43, !llvm.loop !95

50:                                               ; preds = %43, %37, %26
  %51 = phi ptr [ %27, %26 ], [ %40, %37 ], [ %40, %43 ]
  %52 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %16, i64 0, i32 3
  %53 = load i32, ptr %52, align 8, !tbaa !77
  %54 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %16, i64 0, i32 4
  %55 = load i32, ptr %54, align 4, !tbaa !78
  %56 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %16, i64 0, i32 5
  %57 = load i32, ptr %56, align 8, !tbaa !79
  %58 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 5
  %59 = load i32, ptr %58, align 8, !tbaa !96
  %60 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 6
  %61 = load ptr, ptr %60, align 8, !tbaa !97
  %62 = tail call ptr @hypre_BoxDuplicate(ptr noundef %61) #33
  %63 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9
  %64 = load <2 x i32>, ptr %63, align 8, !tbaa !7
  store <2 x i32> %64, ptr %7, align 8, !tbaa !7
  %65 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9, i64 2
  %66 = load i32, ptr %65, align 8, !tbaa !7
  %67 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  store i32 %66, ptr %67, align 8, !tbaa !7
  %68 = call i32 @hypre_MPI_Comm_rank(i32 noundef %12, ptr noundef nonnull %9) #33
  %69 = call i32 @hypre_ProjectBox(ptr noundef %62, ptr noundef %1, ptr noundef %2) #33
  %70 = load i32, ptr %62, align 4, !tbaa !7
  %71 = load i32, ptr %1, align 4, !tbaa !7
  %72 = sub nsw i32 %70, %71
  %73 = load i32, ptr %2, align 4, !tbaa !7
  %74 = sdiv i32 %72, %73
  store i32 %74, ptr %62, align 4, !tbaa !7
  %75 = getelementptr inbounds i32, ptr %62, i64 1
  %76 = load i32, ptr %75, align 4, !tbaa !7
  %77 = getelementptr inbounds i32, ptr %1, i64 1
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = sub nsw i32 %76, %78
  %80 = getelementptr inbounds i32, ptr %2, i64 1
  %81 = load i32, ptr %80, align 4, !tbaa !7
  %82 = sdiv i32 %79, %81
  store i32 %82, ptr %75, align 4, !tbaa !7
  %83 = getelementptr inbounds i32, ptr %62, i64 2
  %84 = load i32, ptr %83, align 4, !tbaa !7
  %85 = getelementptr inbounds i32, ptr %1, i64 2
  %86 = load i32, ptr %85, align 4, !tbaa !7
  %87 = sub nsw i32 %84, %86
  %88 = getelementptr inbounds i32, ptr %2, i64 2
  %89 = load i32, ptr %88, align 4, !tbaa !7
  %90 = sdiv i32 %87, %89
  store i32 %90, ptr %83, align 4, !tbaa !7
  %91 = getelementptr inbounds %struct.hypre_Box_struct, ptr %62, i64 0, i32 1
  %92 = load i32, ptr %91, align 4, !tbaa !7
  %93 = load i32, ptr %1, align 4, !tbaa !7
  %94 = sub nsw i32 %92, %93
  %95 = load i32, ptr %2, align 4, !tbaa !7
  %96 = sdiv i32 %94, %95
  store i32 %96, ptr %91, align 4, !tbaa !7
  %97 = getelementptr inbounds %struct.hypre_Box_struct, ptr %62, i64 0, i32 1, i64 1
  %98 = load i32, ptr %97, align 4, !tbaa !7
  %99 = load i32, ptr %77, align 4, !tbaa !7
  %100 = sub nsw i32 %98, %99
  %101 = load i32, ptr %80, align 4, !tbaa !7
  %102 = sdiv i32 %100, %101
  store i32 %102, ptr %97, align 4, !tbaa !7
  %103 = getelementptr inbounds %struct.hypre_Box_struct, ptr %62, i64 0, i32 1, i64 2
  %104 = load i32, ptr %103, align 4, !tbaa !7
  %105 = load i32, ptr %85, align 4, !tbaa !7
  %106 = sub nsw i32 %104, %105
  %107 = load i32, ptr %88, align 4, !tbaa !7
  %108 = sdiv i32 %106, %107
  store i32 %108, ptr %103, align 4, !tbaa !7
  %109 = call ptr @hypre_BoxCreate() #33
  %110 = call ptr @hypre_BoxCreate() #33
  br i1 %25, label %111, label %276

111:                                              ; preds = %50
  %112 = icmp sgt i32 %55, 0
  %113 = getelementptr inbounds [3 x i32], ptr %109, i64 0, i64 1
  %114 = getelementptr inbounds [3 x i32], ptr %109, i64 0, i64 2
  %115 = getelementptr inbounds %struct.hypre_Box_struct, ptr %109, i64 0, i32 1
  %116 = getelementptr inbounds %struct.hypre_Box_struct, ptr %109, i64 0, i32 1, i64 1
  %117 = getelementptr inbounds %struct.hypre_Box_struct, ptr %109, i64 0, i32 1, i64 2
  %118 = getelementptr inbounds [3 x i32], ptr %110, i64 0, i64 1
  %119 = getelementptr inbounds [3 x i32], ptr %110, i64 0, i64 2
  %120 = getelementptr inbounds %struct.hypre_Box_struct, ptr %110, i64 0, i32 1
  %121 = getelementptr inbounds %struct.hypre_Box_struct, ptr %110, i64 0, i32 1, i64 1
  %122 = getelementptr inbounds %struct.hypre_Box_struct, ptr %110, i64 0, i32 1, i64 2
  %123 = sext i32 %53 to i64
  %124 = zext i32 %20 to i64
  %125 = zext i32 %55 to i64
  br label %126

126:                                              ; preds = %269, %111
  %127 = phi i64 [ 0, %111 ], [ %274, %269 ]
  %128 = phi i32 [ 0, %111 ], [ %273, %269 ]
  %129 = phi i32 [ 0, %111 ], [ %272, %269 ]
  %130 = phi ptr [ null, %111 ], [ %271, %269 ]
  %131 = phi ptr [ null, %111 ], [ %270, %269 ]
  %132 = getelementptr inbounds i32, ptr %24, i64 %127
  %133 = load i32, ptr %132, align 4, !tbaa !7
  %134 = load i32, ptr %9, align 4, !tbaa !7
  %135 = icmp eq i32 %133, %134
  br i1 %135, label %269, label %136

136:                                              ; preds = %126
  br i1 %112, label %137, label %269

137:                                              ; preds = %264, %136
  %138 = phi i64 [ %267, %264 ], [ 0, %136 ]
  %139 = phi i32 [ %248, %264 ], [ %128, %136 ]
  %140 = phi i32 [ %266, %264 ], [ %129, %136 ]
  %141 = phi ptr [ %247, %264 ], [ %130, %136 ]
  %142 = phi ptr [ %265, %264 ], [ %131, %136 ]
  %143 = add nsw i64 %138, %123
  %144 = load ptr, ptr %18, align 8, !tbaa !23
  %145 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %143
  %146 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %127
  %147 = load i32, ptr %145, align 4, !tbaa !7
  store i32 %147, ptr %109, align 4, !tbaa !7
  %148 = getelementptr inbounds [3 x i32], ptr %145, i64 0, i64 1
  %149 = load i32, ptr %148, align 4, !tbaa !7
  store i32 %149, ptr %113, align 4, !tbaa !7
  %150 = getelementptr inbounds [3 x i32], ptr %145, i64 0, i64 2
  %151 = load i32, ptr %150, align 4, !tbaa !7
  store i32 %151, ptr %114, align 4, !tbaa !7
  %152 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %143, i32 1
  %153 = load i32, ptr %152, align 4, !tbaa !7
  store i32 %153, ptr %115, align 4, !tbaa !7
  %154 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %143, i32 1, i64 1
  %155 = load i32, ptr %154, align 4, !tbaa !7
  store i32 %155, ptr %116, align 4, !tbaa !7
  %156 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %143, i32 1, i64 2
  %157 = load i32, ptr %156, align 4, !tbaa !7
  store i32 %157, ptr %117, align 4, !tbaa !7
  %158 = call i32 @hypre_ProjectBox(ptr noundef nonnull %109, ptr noundef nonnull %1, ptr noundef nonnull %2) #33
  %159 = load i32, ptr %109, align 4, !tbaa !7
  %160 = load i32, ptr %1, align 4, !tbaa !7
  %161 = sub nsw i32 %159, %160
  %162 = load i32, ptr %2, align 4, !tbaa !7
  %163 = sdiv i32 %161, %162
  store i32 %163, ptr %109, align 4, !tbaa !7
  %164 = load i32, ptr %113, align 4, !tbaa !7
  %165 = load i32, ptr %77, align 4, !tbaa !7
  %166 = sub nsw i32 %164, %165
  %167 = load i32, ptr %80, align 4, !tbaa !7
  %168 = sdiv i32 %166, %167
  store i32 %168, ptr %113, align 4, !tbaa !7
  %169 = load i32, ptr %114, align 4, !tbaa !7
  %170 = load i32, ptr %85, align 4, !tbaa !7
  %171 = sub nsw i32 %169, %170
  %172 = load i32, ptr %88, align 4, !tbaa !7
  %173 = sdiv i32 %171, %172
  store i32 %173, ptr %114, align 4, !tbaa !7
  %174 = load i32, ptr %115, align 4, !tbaa !7
  %175 = load i32, ptr %1, align 4, !tbaa !7
  %176 = sub nsw i32 %174, %175
  %177 = load i32, ptr %2, align 4, !tbaa !7
  %178 = sdiv i32 %176, %177
  store i32 %178, ptr %115, align 4, !tbaa !7
  %179 = load i32, ptr %116, align 4, !tbaa !7
  %180 = load i32, ptr %77, align 4, !tbaa !7
  %181 = sub nsw i32 %179, %180
  %182 = load i32, ptr %80, align 4, !tbaa !7
  %183 = sdiv i32 %181, %182
  store i32 %183, ptr %116, align 4, !tbaa !7
  %184 = load i32, ptr %117, align 4, !tbaa !7
  %185 = load i32, ptr %85, align 4, !tbaa !7
  %186 = sub nsw i32 %184, %185
  %187 = load i32, ptr %88, align 4, !tbaa !7
  %188 = sdiv i32 %186, %187
  store i32 %188, ptr %117, align 4, !tbaa !7
  %189 = load i32, ptr %146, align 4, !tbaa !7
  store i32 %189, ptr %110, align 4, !tbaa !7
  %190 = getelementptr inbounds [3 x i32], ptr %146, i64 0, i64 1
  %191 = load i32, ptr %190, align 4, !tbaa !7
  store i32 %191, ptr %118, align 4, !tbaa !7
  %192 = getelementptr inbounds [3 x i32], ptr %146, i64 0, i64 2
  %193 = load i32, ptr %192, align 4, !tbaa !7
  store i32 %193, ptr %119, align 4, !tbaa !7
  %194 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %127, i32 1
  %195 = load i32, ptr %194, align 4, !tbaa !7
  store i32 %195, ptr %120, align 4, !tbaa !7
  %196 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %127, i32 1, i64 1
  %197 = load i32, ptr %196, align 4, !tbaa !7
  store i32 %197, ptr %121, align 4, !tbaa !7
  %198 = getelementptr inbounds %struct.hypre_Box_struct, ptr %144, i64 %127, i32 1, i64 2
  %199 = load i32, ptr %198, align 4, !tbaa !7
  store i32 %199, ptr %122, align 4, !tbaa !7
  %200 = call i32 @hypre_ProjectBox(ptr noundef nonnull %110, ptr noundef nonnull %1, ptr noundef nonnull %2) #33
  %201 = load i32, ptr %110, align 4, !tbaa !7
  %202 = load i32, ptr %1, align 4, !tbaa !7
  %203 = sub nsw i32 %201, %202
  %204 = load i32, ptr %2, align 4, !tbaa !7
  %205 = sdiv i32 %203, %204
  store i32 %205, ptr %110, align 4, !tbaa !7
  %206 = load i32, ptr %118, align 4, !tbaa !7
  %207 = load i32, ptr %77, align 4, !tbaa !7
  %208 = sub nsw i32 %206, %207
  %209 = load i32, ptr %80, align 4, !tbaa !7
  %210 = sdiv i32 %208, %209
  store i32 %210, ptr %118, align 4, !tbaa !7
  %211 = load i32, ptr %119, align 4, !tbaa !7
  %212 = load i32, ptr %85, align 4, !tbaa !7
  %213 = sub nsw i32 %211, %212
  %214 = load i32, ptr %88, align 4, !tbaa !7
  %215 = sdiv i32 %213, %214
  store i32 %215, ptr %119, align 4, !tbaa !7
  %216 = load i32, ptr %120, align 4, !tbaa !7
  %217 = load i32, ptr %1, align 4, !tbaa !7
  %218 = sub nsw i32 %216, %217
  %219 = load i32, ptr %2, align 4, !tbaa !7
  %220 = sdiv i32 %218, %219
  store i32 %220, ptr %120, align 4, !tbaa !7
  %221 = load i32, ptr %121, align 4, !tbaa !7
  %222 = load i32, ptr %77, align 4, !tbaa !7
  %223 = sub nsw i32 %221, %222
  %224 = load i32, ptr %80, align 4, !tbaa !7
  %225 = sdiv i32 %223, %224
  store i32 %225, ptr %121, align 4, !tbaa !7
  %226 = load i32, ptr %122, align 4, !tbaa !7
  %227 = load i32, ptr %85, align 4, !tbaa !7
  %228 = sub nsw i32 %226, %227
  %229 = load i32, ptr %88, align 4, !tbaa !7
  %230 = sdiv i32 %228, %229
  store i32 %230, ptr %122, align 4, !tbaa !7
  %231 = icmp eq i32 %139, 0
  br i1 %231, label %232, label %235

232:                                              ; preds = %137
  %233 = call ptr @hypre_MAlloc(i32 noundef %23) #33
  %234 = load i32, ptr %132, align 4, !tbaa !7
  store i32 %234, ptr %233, align 4, !tbaa !7
  br label %246

235:                                              ; preds = %137
  %236 = load i32, ptr %132, align 4, !tbaa !7
  %237 = add nsw i32 %139, -1
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i32, ptr %141, i64 %238
  %240 = load i32, ptr %239, align 4, !tbaa !7
  %241 = icmp eq i32 %236, %240
  br i1 %241, label %246, label %242

242:                                              ; preds = %235
  %243 = sext i32 %139 to i64
  %244 = getelementptr inbounds i32, ptr %141, i64 %243
  store i32 %236, ptr %244, align 4, !tbaa !7
  %245 = add nsw i32 %139, 1
  br label %246

246:                                              ; preds = %242, %235, %232
  %247 = phi ptr [ %233, %232 ], [ %141, %242 ], [ %141, %235 ]
  %248 = phi i32 [ 1, %232 ], [ %245, %242 ], [ %139, %235 ]
  %249 = icmp eq i32 %140, 0
  br i1 %249, label %250, label %253

250:                                              ; preds = %246
  %251 = call ptr @hypre_MAlloc(i32 noundef %23) #33
  %252 = load i32, ptr %132, align 4, !tbaa !7
  store i32 %252, ptr %251, align 4, !tbaa !7
  br label %264

253:                                              ; preds = %246
  %254 = load i32, ptr %132, align 4, !tbaa !7
  %255 = add nsw i32 %140, -1
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i32, ptr %142, i64 %256
  %258 = load i32, ptr %257, align 4, !tbaa !7
  %259 = icmp eq i32 %254, %258
  br i1 %259, label %264, label %260

260:                                              ; preds = %253
  %261 = sext i32 %140 to i64
  %262 = getelementptr inbounds i32, ptr %142, i64 %261
  store i32 %254, ptr %262, align 4, !tbaa !7
  %263 = add nsw i32 %140, 1
  br label %264

264:                                              ; preds = %260, %253, %250
  %265 = phi ptr [ %251, %250 ], [ %142, %260 ], [ %142, %253 ]
  %266 = phi i32 [ 1, %250 ], [ %263, %260 ], [ %140, %253 ]
  %267 = add nuw nsw i64 %138, 1
  %268 = icmp eq i64 %267, %125
  br i1 %268, label %269, label %137, !llvm.loop !98

269:                                              ; preds = %264, %136, %126
  %270 = phi ptr [ %131, %126 ], [ %131, %136 ], [ %265, %264 ]
  %271 = phi ptr [ %130, %126 ], [ %130, %136 ], [ %247, %264 ]
  %272 = phi i32 [ %129, %126 ], [ %129, %136 ], [ %266, %264 ]
  %273 = phi i32 [ %128, %126 ], [ %128, %136 ], [ %248, %264 ]
  %274 = add nuw nsw i64 %127, 1
  %275 = icmp eq i64 %274, %124
  br i1 %275, label %276, label %126, !llvm.loop !99

276:                                              ; preds = %269, %50
  %277 = phi ptr [ null, %50 ], [ %270, %269 ]
  %278 = phi ptr [ null, %50 ], [ %271, %269 ]
  %279 = phi i32 [ 0, %50 ], [ %272, %269 ]
  %280 = phi i32 [ 0, %50 ], [ %273, %269 ]
  %281 = call i32 @hypre_BoxDestroy(ptr noundef %109) #33
  %282 = call i32 @hypre_BoxDestroy(ptr noundef %110) #33
  br i1 %25, label %283, label %327

283:                                              ; preds = %276
  %284 = zext i32 %20 to i64
  br label %285

285:                                              ; preds = %285, %283
  %286 = phi i64 [ 0, %283 ], [ %325, %285 ]
  %287 = load ptr, ptr %18, align 8, !tbaa !23
  %288 = getelementptr inbounds %struct.hypre_Box_struct, ptr %287, i64 %286
  %289 = call i32 @hypre_ProjectBox(ptr noundef %288, ptr noundef nonnull %1, ptr noundef nonnull %2) #33
  %290 = load i32, ptr %288, align 4, !tbaa !7
  %291 = load i32, ptr %1, align 4, !tbaa !7
  %292 = sub nsw i32 %290, %291
  %293 = load i32, ptr %2, align 4, !tbaa !7
  %294 = sdiv i32 %292, %293
  store i32 %294, ptr %288, align 4, !tbaa !7
  %295 = getelementptr inbounds i32, ptr %288, i64 1
  %296 = load i32, ptr %295, align 4, !tbaa !7
  %297 = load i32, ptr %77, align 4, !tbaa !7
  %298 = sub nsw i32 %296, %297
  %299 = load i32, ptr %80, align 4, !tbaa !7
  %300 = sdiv i32 %298, %299
  store i32 %300, ptr %295, align 4, !tbaa !7
  %301 = getelementptr inbounds i32, ptr %288, i64 2
  %302 = load i32, ptr %301, align 4, !tbaa !7
  %303 = load i32, ptr %85, align 4, !tbaa !7
  %304 = sub nsw i32 %302, %303
  %305 = load i32, ptr %88, align 4, !tbaa !7
  %306 = sdiv i32 %304, %305
  store i32 %306, ptr %301, align 4, !tbaa !7
  %307 = getelementptr inbounds %struct.hypre_Box_struct, ptr %287, i64 %286, i32 1
  %308 = load i32, ptr %307, align 4, !tbaa !7
  %309 = load i32, ptr %1, align 4, !tbaa !7
  %310 = sub nsw i32 %308, %309
  %311 = load i32, ptr %2, align 4, !tbaa !7
  %312 = sdiv i32 %310, %311
  store i32 %312, ptr %307, align 4, !tbaa !7
  %313 = getelementptr inbounds i32, ptr %307, i64 1
  %314 = load i32, ptr %313, align 4, !tbaa !7
  %315 = load i32, ptr %77, align 4, !tbaa !7
  %316 = sub nsw i32 %314, %315
  %317 = load i32, ptr %80, align 4, !tbaa !7
  %318 = sdiv i32 %316, %317
  store i32 %318, ptr %313, align 4, !tbaa !7
  %319 = getelementptr inbounds i32, ptr %307, i64 2
  %320 = load i32, ptr %319, align 4, !tbaa !7
  %321 = load i32, ptr %85, align 4, !tbaa !7
  %322 = sub nsw i32 %320, %321
  %323 = load i32, ptr %88, align 4, !tbaa !7
  %324 = sdiv i32 %322, %323
  store i32 %324, ptr %319, align 4, !tbaa !7
  %325 = add nuw nsw i64 %286, 1
  %326 = icmp eq i64 %325, %284
  br i1 %326, label %327, label %285, !llvm.loop !100

327:                                              ; preds = %285, %276
  %328 = icmp eq i32 %280, 0
  br i1 %328, label %346, label %329

329:                                              ; preds = %327
  %330 = shl i32 %280, 2
  %331 = call ptr @hypre_MAlloc(i32 noundef %330) #33
  %332 = call ptr @hypre_MAlloc(i32 noundef %330) #33
  %333 = call ptr @hypre_MAlloc(i32 noundef %330) #33
  %334 = icmp sgt i32 %280, 0
  br i1 %334, label %335, label %346

335:                                              ; preds = %329
  %336 = zext i32 %280 to i64
  br label %337

337:                                              ; preds = %337, %335
  %338 = phi i64 [ 0, %335 ], [ %344, %337 ]
  %339 = getelementptr inbounds i32, ptr %333, i64 %338
  %340 = getelementptr inbounds i32, ptr %278, i64 %338
  %341 = load i32, ptr %340, align 4, !tbaa !7
  %342 = getelementptr inbounds i32, ptr %331, i64 %338
  %343 = call i32 @hypre_MPI_Irecv(ptr noundef %339, i32 noundef 1, i32 noundef 1, i32 noundef %341, i32 noundef 0, i32 noundef %12, ptr noundef %342) #33
  %344 = add nuw nsw i64 %338, 1
  %345 = icmp eq i64 %344, %336
  br i1 %345, label %346, label %337, !llvm.loop !101

346:                                              ; preds = %337, %329, %327
  %347 = phi ptr [ undef, %327 ], [ %331, %329 ], [ %331, %337 ]
  %348 = phi ptr [ undef, %327 ], [ %332, %329 ], [ %332, %337 ]
  %349 = phi ptr [ undef, %327 ], [ %333, %329 ], [ %333, %337 ]
  %350 = icmp eq i32 %279, 0
  br i1 %350, label %368, label %351

351:                                              ; preds = %346
  %352 = shl i32 %279, 2
  %353 = call ptr @hypre_MAlloc(i32 noundef %352) #33
  %354 = call ptr @hypre_MAlloc(i32 noundef %352) #33
  %355 = load i32, ptr %19, align 8, !tbaa !21
  %356 = shl nsw i32 %355, 3
  store i32 %356, ptr %8, align 4, !tbaa !7
  %357 = icmp sgt i32 %279, 0
  br i1 %357, label %358, label %368

358:                                              ; preds = %351
  %359 = zext i32 %279 to i64
  br label %360

360:                                              ; preds = %360, %358
  %361 = phi i64 [ 0, %358 ], [ %366, %360 ]
  %362 = getelementptr inbounds i32, ptr %277, i64 %361
  %363 = load i32, ptr %362, align 4, !tbaa !7
  %364 = getelementptr inbounds i32, ptr %353, i64 %361
  %365 = call i32 @hypre_MPI_Isend(ptr noundef nonnull %8, i32 noundef 1, i32 noundef 1, i32 noundef %363, i32 noundef 0, i32 noundef %12, ptr noundef %364) #33
  %366 = add nuw nsw i64 %361, 1
  %367 = icmp eq i64 %366, %359
  br i1 %367, label %368, label %360, !llvm.loop !102

368:                                              ; preds = %360, %351, %346
  %369 = phi ptr [ undef, %346 ], [ %353, %351 ], [ %353, %360 ]
  %370 = phi ptr [ undef, %346 ], [ %354, %351 ], [ %354, %360 ]
  br i1 %328, label %373, label %371

371:                                              ; preds = %368
  %372 = call i32 @hypre_MPI_Waitall(i32 noundef %280, ptr noundef %347, ptr noundef %348) #33
  br label %373

373:                                              ; preds = %371, %368
  br i1 %350, label %376, label %374

374:                                              ; preds = %373
  %375 = call i32 @hypre_MPI_Waitall(i32 noundef %279, ptr noundef %369, ptr noundef %370) #33
  br label %376

376:                                              ; preds = %374, %373
  br i1 %328, label %397, label %377

377:                                              ; preds = %376
  %378 = shl i32 %280, 3
  %379 = call ptr @hypre_MAlloc(i32 noundef %378) #33
  %380 = icmp sgt i32 %280, 0
  br i1 %380, label %381, label %397

381:                                              ; preds = %377
  %382 = zext i32 %280 to i64
  br label %383

383:                                              ; preds = %383, %381
  %384 = phi i64 [ 0, %381 ], [ %395, %383 ]
  %385 = getelementptr inbounds i32, ptr %349, i64 %384
  %386 = load i32, ptr %385, align 4, !tbaa !7
  %387 = shl i32 %386, 2
  %388 = call ptr @hypre_MAlloc(i32 noundef %387) #33
  %389 = getelementptr inbounds ptr, ptr %379, i64 %384
  store ptr %388, ptr %389, align 8, !tbaa !14
  %390 = load i32, ptr %385, align 4, !tbaa !7
  %391 = getelementptr inbounds i32, ptr %278, i64 %384
  %392 = load i32, ptr %391, align 4, !tbaa !7
  %393 = getelementptr inbounds i32, ptr %347, i64 %384
  %394 = call i32 @hypre_MPI_Irecv(ptr noundef %388, i32 noundef %390, i32 noundef 1, i32 noundef %392, i32 noundef 0, i32 noundef %12, ptr noundef %393) #33
  %395 = add nuw nsw i64 %384, 1
  %396 = icmp eq i64 %395, %382
  br i1 %396, label %397, label %383, !llvm.loop !103

397:                                              ; preds = %383, %377, %376
  %398 = phi ptr [ undef, %376 ], [ %379, %377 ], [ %379, %383 ]
  br i1 %350, label %454, label %399

399:                                              ; preds = %397
  %400 = load i32, ptr %8, align 4, !tbaa !7
  %401 = shl i32 %400, 2
  %402 = call ptr @hypre_MAlloc(i32 noundef %401) #33
  br i1 %25, label %403, label %406

403:                                              ; preds = %399
  %404 = load ptr, ptr %18, align 8, !tbaa !23
  %405 = zext i32 %20 to i64
  br label %410

406:                                              ; preds = %441, %399
  %407 = icmp sgt i32 %279, 0
  br i1 %407, label %408, label %454

408:                                              ; preds = %406
  %409 = zext i32 %279 to i64
  br label %445

410:                                              ; preds = %441, %403
  %411 = phi i64 [ 0, %403 ], [ %443, %441 ]
  %412 = phi i32 [ 0, %403 ], [ %442, %441 ]
  %413 = getelementptr inbounds i32, ptr %51, i64 %411
  %414 = load i32, ptr %413, align 4, !tbaa !7
  %415 = add nsw i32 %412, 1
  %416 = sext i32 %412 to i64
  %417 = getelementptr inbounds i32, ptr %402, i64 %416
  store i32 %414, ptr %417, align 4, !tbaa !7
  %418 = getelementptr inbounds i32, ptr %24, i64 %411
  %419 = load i32, ptr %418, align 4, !tbaa !7
  %420 = sext i32 %415 to i64
  %421 = getelementptr inbounds i32, ptr %402, i64 %420
  store i32 %419, ptr %421, align 4, !tbaa !7
  %422 = getelementptr inbounds %struct.hypre_Box_struct, ptr %404, i64 %411
  %423 = add i32 %412, 2
  %424 = sext i32 %423 to i64
  br label %425

425:                                              ; preds = %425, %410
  %426 = phi i64 [ 0, %410 ], [ %437, %425 ]
  %427 = phi i64 [ %424, %410 ], [ %438, %425 ]
  %428 = phi i32 [ %412, %410 ], [ %439, %425 ]
  %429 = getelementptr inbounds [3 x i32], ptr %422, i64 0, i64 %426
  %430 = load i32, ptr %429, align 4, !tbaa !7
  %431 = add nsw i32 %428, 3
  %432 = getelementptr inbounds i32, ptr %402, i64 %427
  store i32 %430, ptr %432, align 4, !tbaa !7
  %433 = getelementptr inbounds %struct.hypre_Box_struct, ptr %404, i64 %411, i32 1, i64 %426
  %434 = load i32, ptr %433, align 4, !tbaa !7
  %435 = sext i32 %431 to i64
  %436 = getelementptr inbounds i32, ptr %402, i64 %435
  store i32 %434, ptr %436, align 4, !tbaa !7
  %437 = add nuw nsw i64 %426, 1
  %438 = add nsw i64 %427, 2
  %439 = trunc i64 %427 to i32
  %440 = icmp eq i64 %437, 3
  br i1 %440, label %441, label %425, !llvm.loop !104

441:                                              ; preds = %425
  %.lcssa11 = phi i64 [ %438, %425 ]
  %442 = trunc i64 %.lcssa11 to i32
  %443 = add nuw nsw i64 %411, 1
  %444 = icmp eq i64 %443, %405
  br i1 %444, label %406, label %410, !llvm.loop !105

445:                                              ; preds = %445, %408
  %446 = phi i64 [ 0, %408 ], [ %452, %445 ]
  %447 = load i32, ptr %8, align 4, !tbaa !7
  %448 = getelementptr inbounds i32, ptr %277, i64 %446
  %449 = load i32, ptr %448, align 4, !tbaa !7
  %450 = getelementptr inbounds i32, ptr %369, i64 %446
  %451 = call i32 @hypre_MPI_Isend(ptr noundef %402, i32 noundef %447, i32 noundef 1, i32 noundef %449, i32 noundef 0, i32 noundef %12, ptr noundef %450) #33
  %452 = add nuw nsw i64 %446, 1
  %453 = icmp eq i64 %452, %409
  br i1 %453, label %454, label %445, !llvm.loop !106

454:                                              ; preds = %445, %406, %397
  %455 = phi ptr [ undef, %397 ], [ %402, %406 ], [ %402, %445 ]
  br i1 %328, label %458, label %456

456:                                              ; preds = %454
  %457 = call i32 @hypre_MPI_Waitall(i32 noundef %280, ptr noundef %347, ptr noundef %348) #33
  call void @hypre_Free(ptr noundef %347) #33
  call void @hypre_Free(ptr noundef %348) #33
  br label %458

458:                                              ; preds = %456, %454
  br i1 %350, label %461, label %459

459:                                              ; preds = %458
  %460 = call i32 @hypre_MPI_Waitall(i32 noundef %279, ptr noundef %369, ptr noundef %370) #33
  call void @hypre_Free(ptr noundef %369) #33
  call void @hypre_Free(ptr noundef %370) #33
  call void @hypre_Free(ptr noundef %455) #33
  br label %461

461:                                              ; preds = %459, %458
  br i1 %328, label %602, label %462

462:                                              ; preds = %461
  %463 = call ptr @hypre_BoxArrayCreate(i32 noundef %20) #33
  %464 = call i32 @hypre_BoxArraySetSize(ptr noundef %463, i32 noundef 0) #33
  %465 = call ptr @hypre_MAlloc(i32 noundef %23) #33
  %466 = call ptr @hypre_MAlloc(i32 noundef %23) #33
  %467 = call ptr @hypre_BoxCreate() #33
  %468 = call ptr @hypre_CAlloc(i32 noundef %280, i32 noundef 4) #33
  %469 = icmp sgt i32 %280, 0
  %470 = zext i32 %280 to i64
  br label %471

471:                                              ; preds = %588, %462
  %472 = phi i64 [ %591, %588 ], [ 0, %462 ]
  %473 = phi ptr [ %532, %588 ], [ %465, %462 ]
  %474 = phi ptr [ %533, %588 ], [ %466, %462 ]
  %475 = phi i32 [ %589, %588 ], [ undef, %462 ]
  %476 = phi i32 [ %534, %588 ], [ %20, %462 ]
  %477 = phi i32 [ %590, %588 ], [ 0, %462 ]
  %478 = phi i32 [ %522, %588 ], [ undef, %462 ]
  %479 = icmp slt i32 %477, %20
  br i1 %479, label %480, label %484

480:                                              ; preds = %471
  %481 = sext i32 %477 to i64
  %482 = getelementptr inbounds i32, ptr %51, i64 %481
  %483 = load i32, ptr %482, align 4, !tbaa !7
  br i1 %469, label %485, label %521

484:                                              ; preds = %471
  br i1 %469, label %485, label %598

485:                                              ; preds = %484, %480
  %486 = phi i32 [ %483, %480 ], [ %478, %484 ]
  %487 = phi i32 [ -1, %480 ], [ -2, %484 ]
  br label %488

488:                                              ; preds = %511, %485
  %489 = phi i64 [ %514, %511 ], [ 0, %485 ]
  %490 = phi i32 [ %513, %511 ], [ %486, %485 ]
  %491 = phi i32 [ %512, %511 ], [ %487, %485 ]
  %492 = getelementptr inbounds i32, ptr %468, i64 %489
  %493 = load i32, ptr %492, align 4, !tbaa !7
  %494 = getelementptr inbounds i32, ptr %349, i64 %489
  %495 = load i32, ptr %494, align 4, !tbaa !7
  %496 = icmp slt i32 %493, %495
  br i1 %496, label %497, label %511

497:                                              ; preds = %488
  %498 = icmp eq i32 %491, -2
  %499 = trunc i64 %489 to i32
  %500 = getelementptr inbounds ptr, ptr %398, i64 %489
  %501 = load ptr, ptr %500, align 8, !tbaa !14
  %502 = sext i32 %493 to i64
  %503 = getelementptr inbounds i32, ptr %501, i64 %502
  %504 = load i32, ptr %503, align 4, !tbaa !7
  %505 = icmp slt i32 %504, %490
  %506 = select i1 %498, i1 true, i1 %505
  br i1 %506, label %511, label %507

507:                                              ; preds = %497
  %508 = icmp eq i32 %504, %490
  br i1 %508, label %509, label %511

509:                                              ; preds = %507
  %510 = add nsw i32 %493, 8
  store i32 %510, ptr %492, align 4, !tbaa !7
  br label %511

511:                                              ; preds = %509, %507, %497, %488
  %512 = phi i32 [ %491, %509 ], [ %491, %507 ], [ %491, %488 ], [ %499, %497 ]
  %513 = phi i32 [ %490, %509 ], [ %490, %507 ], [ %490, %488 ], [ %504, %497 ]
  %514 = add nuw nsw i64 %489, 1
  %515 = icmp eq i64 %514, %470
  br i1 %515, label %516, label %488, !llvm.loop !107

516:                                              ; preds = %511
  %.lcssa1 = phi i32 [ %512, %511 ]
  %.lcssa = phi i32 [ %513, %511 ]
  %517 = icmp sgt i32 %.lcssa1, -2
  br i1 %517, label %521, label %518

518:                                              ; preds = %516
  %.lcssa10 = phi i64 [ %472, %516 ]
  %.lcssa8 = phi ptr [ %473, %516 ]
  %.lcssa6 = phi ptr [ %474, %516 ]
  %.lcssa4 = phi i32 [ %475, %516 ]
  br i1 %469, label %519, label %598

519:                                              ; preds = %518
  %520 = zext i32 %280 to i64
  br label %592

521:                                              ; preds = %516, %480
  %522 = phi i32 [ %.lcssa, %516 ], [ %483, %480 ]
  %523 = phi i32 [ %.lcssa1, %516 ], [ -1, %480 ]
  %524 = zext i32 %476 to i64
  %525 = icmp eq i64 %472, %524
  br i1 %525, label %526, label %531

526:                                              ; preds = %521
  %527 = add nsw i32 %476, %20
  %528 = shl i32 %527, 2
  %529 = call ptr @hypre_ReAlloc(ptr noundef %473, i32 noundef %528) #33
  %530 = call ptr @hypre_ReAlloc(ptr noundef %474, i32 noundef %528) #33
  br label %531

531:                                              ; preds = %526, %521
  %532 = phi ptr [ %529, %526 ], [ %473, %521 ]
  %533 = phi ptr [ %530, %526 ], [ %474, %521 ]
  %534 = phi i32 [ %527, %526 ], [ %476, %521 ]
  %535 = icmp eq i32 %523, -1
  br i1 %535, label %536, label %551

536:                                              ; preds = %531
  %537 = sext i32 %477 to i64
  %538 = getelementptr inbounds i32, ptr %24, i64 %537
  %539 = load i32, ptr %538, align 4, !tbaa !7
  %540 = getelementptr inbounds i32, ptr %532, i64 %472
  store i32 %539, ptr %540, align 4, !tbaa !7
  %541 = getelementptr inbounds i32, ptr %51, i64 %537
  %542 = load i32, ptr %541, align 4, !tbaa !7
  %543 = getelementptr inbounds i32, ptr %533, i64 %472
  store i32 %542, ptr %543, align 4, !tbaa !7
  %544 = load ptr, ptr %18, align 8, !tbaa !23
  %545 = getelementptr inbounds %struct.hypre_Box_struct, ptr %544, i64 %537
  %546 = call i32 @hypre_AppendBox(ptr noundef %545, ptr noundef %463) #33
  %547 = icmp eq i32 %477, %53
  %548 = trunc i64 %472 to i32
  %549 = select i1 %547, i32 %548, i32 %475
  %550 = add nsw i32 %477, 1
  br label %588

551:                                              ; preds = %531
  %552 = zext i32 %523 to i64
  %553 = getelementptr inbounds i32, ptr %468, i64 %552
  %554 = load i32, ptr %553, align 4, !tbaa !7
  %555 = getelementptr inbounds ptr, ptr %398, i64 %552
  %556 = load ptr, ptr %555, align 8, !tbaa !14
  %557 = add nsw i32 %554, 1
  %558 = sext i32 %554 to i64
  %559 = getelementptr inbounds i32, ptr %556, i64 %558
  %560 = load i32, ptr %559, align 4, !tbaa !7
  %561 = getelementptr inbounds i32, ptr %533, i64 %472
  store i32 %560, ptr %561, align 4, !tbaa !7
  %562 = sext i32 %557 to i64
  %563 = getelementptr inbounds i32, ptr %556, i64 %562
  %564 = load i32, ptr %563, align 4, !tbaa !7
  %565 = getelementptr inbounds i32, ptr %532, i64 %472
  store i32 %564, ptr %565, align 4, !tbaa !7
  %566 = add i32 %554, 2
  %567 = sext i32 %566 to i64
  br label %568

568:                                              ; preds = %568, %551
  %569 = phi i64 [ 0, %551 ], [ %580, %568 ]
  %570 = phi i64 [ %567, %551 ], [ %581, %568 ]
  %571 = phi i32 [ %554, %551 ], [ %582, %568 ]
  %572 = add nsw i32 %571, 3
  %573 = getelementptr inbounds i32, ptr %556, i64 %570
  %574 = load i32, ptr %573, align 4, !tbaa !7
  %575 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 %569
  store i32 %574, ptr %575, align 4, !tbaa !7
  %576 = sext i32 %572 to i64
  %577 = getelementptr inbounds i32, ptr %556, i64 %576
  %578 = load i32, ptr %577, align 4, !tbaa !7
  %579 = getelementptr inbounds [3 x i32], ptr %11, i64 0, i64 %569
  store i32 %578, ptr %579, align 4, !tbaa !7
  %580 = add nuw nsw i64 %569, 1
  %581 = add nsw i64 %570, 2
  %582 = trunc i64 %570 to i32
  %583 = icmp eq i64 %580, 3
  br i1 %583, label %584, label %568, !llvm.loop !108

584:                                              ; preds = %568
  %.lcssa2 = phi i64 [ %581, %568 ]
  %585 = trunc i64 %.lcssa2 to i32
  %586 = call i32 @hypre_BoxSetExtents(ptr noundef %467, ptr noundef nonnull %10, ptr noundef nonnull %11) #33
  %587 = call i32 @hypre_AppendBox(ptr noundef %467, ptr noundef %463) #33
  store i32 %585, ptr %553, align 4, !tbaa !7
  br label %588

588:                                              ; preds = %584, %536
  %589 = phi i32 [ %549, %536 ], [ %475, %584 ]
  %590 = phi i32 [ %550, %536 ], [ %477, %584 ]
  %591 = add nuw i64 %472, 1
  br label %471

592:                                              ; preds = %592, %519
  %593 = phi i64 [ 0, %519 ], [ %596, %592 ]
  %594 = getelementptr inbounds ptr, ptr %398, i64 %593
  %595 = load ptr, ptr %594, align 8, !tbaa !14
  call void @hypre_Free(ptr noundef %595) #33
  store ptr null, ptr %594, align 8, !tbaa !14
  %596 = add nuw nsw i64 %593, 1
  %597 = icmp eq i64 %596, %520
  br i1 %597, label %598, label %592, !llvm.loop !109

598:                                              ; preds = %592, %518, %484
  %.lcssa9 = phi i64 [ %.lcssa10, %592 ], [ %.lcssa10, %518 ], [ %472, %484 ]
  %.lcssa7 = phi ptr [ %.lcssa8, %592 ], [ %.lcssa8, %518 ], [ %473, %484 ]
  %.lcssa5 = phi ptr [ %.lcssa6, %592 ], [ %.lcssa6, %518 ], [ %474, %484 ]
  %.lcssa3 = phi i32 [ %.lcssa4, %592 ], [ %.lcssa4, %518 ], [ %475, %484 ]
  %599 = trunc i64 %.lcssa9 to i32
  call void @hypre_Free(ptr noundef %398) #33
  call void @hypre_Free(ptr noundef %349) #33
  %600 = call i32 @hypre_BoxDestroy(ptr noundef %467) #33
  call void @hypre_Free(ptr noundef %468) #33
  %601 = call i32 @hypre_BoxArrayDestroy(ptr noundef %18) #33
  call void @hypre_Free(ptr noundef %24) #33
  call void @hypre_Free(ptr noundef %51) #33
  br label %602

602:                                              ; preds = %598, %461
  %603 = phi i32 [ %.lcssa3, %598 ], [ %53, %461 ]
  %604 = phi ptr [ %.lcssa5, %598 ], [ %51, %461 ]
  %605 = phi ptr [ %.lcssa7, %598 ], [ %24, %461 ]
  %606 = phi i32 [ %599, %598 ], [ %20, %461 ]
  %607 = phi ptr [ %463, %598 ], [ %18, %461 ]
  call void @hypre_Free(ptr noundef %277) #33
  call void @hypre_Free(ptr noundef %278) #33
  %608 = icmp eq i32 %3, 0
  br i1 %608, label %697, label %609

609:                                              ; preds = %602
  %610 = icmp sgt i32 %606, 0
  br i1 %610, label %611, label %691

611:                                              ; preds = %609
  %612 = load ptr, ptr %607, align 8, !tbaa !23
  %613 = add nsw i32 %603, %55
  %614 = add nsw i32 %613, %57
  %615 = sext i32 %614 to i64
  %616 = sext i32 %613 to i64
  %617 = sext i32 %603 to i64
  %618 = zext i32 %606 to i64
  br label %619

619:                                              ; preds = %684, %611
  %620 = phi i64 [ 0, %611 ], [ %689, %684 ]
  %621 = phi i32 [ 0, %611 ], [ %688, %684 ]
  %622 = phi i32 [ 0, %611 ], [ %687, %684 ]
  %623 = phi i32 [ 0, %611 ], [ %686, %684 ]
  %624 = phi i32 [ -1, %611 ], [ %685, %684 ]
  %625 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %620
  %626 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %620, i32 1
  %627 = load i32, ptr %626, align 4, !tbaa !7
  %628 = load i32, ptr %625, align 4, !tbaa !7
  %629 = sub nsw i32 %627, %628
  %630 = add nsw i32 %629, 1
  %631 = icmp slt i32 %629, 0
  %632 = select i1 %631, i32 0, i32 %630
  %633 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %620, i32 1, i64 1
  %634 = load i32, ptr %633, align 4, !tbaa !7
  %635 = getelementptr inbounds [3 x i32], ptr %625, i64 0, i64 1
  %636 = load i32, ptr %635, align 4, !tbaa !7
  %637 = sub nsw i32 %634, %636
  %638 = add nsw i32 %637, 1
  %639 = icmp slt i32 %637, 0
  %640 = select i1 %639, i32 0, i32 %638
  %641 = mul nsw i32 %640, %632
  %642 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %620, i32 1, i64 2
  %643 = load i32, ptr %642, align 4, !tbaa !7
  %644 = getelementptr inbounds [3 x i32], ptr %625, i64 0, i64 2
  %645 = load i32, ptr %644, align 4, !tbaa !7
  %646 = sub nsw i32 %643, %645
  %647 = add nsw i32 %646, 1
  %648 = icmp slt i32 %646, 0
  %649 = select i1 %648, i32 0, i32 %647
  %650 = mul nsw i32 %641, %649
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %684, label %652

652:                                              ; preds = %619
  %653 = sext i32 %621 to i64
  %654 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %653
  store i32 %628, ptr %654, align 4, !tbaa !7
  %655 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %653, i32 0, i64 1
  store i32 %636, ptr %655, align 4, !tbaa !7
  %656 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %653, i32 0, i64 2
  store i32 %645, ptr %656, align 4, !tbaa !7
  %657 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %653, i32 1
  store i32 %627, ptr %657, align 4, !tbaa !7
  %658 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %653, i32 1, i64 1
  store i32 %634, ptr %658, align 4, !tbaa !7
  %659 = getelementptr inbounds %struct.hypre_Box_struct, ptr %612, i64 %653, i32 1, i64 2
  store i32 %643, ptr %659, align 4, !tbaa !7
  %660 = getelementptr inbounds i32, ptr %605, i64 %620
  %661 = load i32, ptr %660, align 4, !tbaa !7
  %662 = getelementptr inbounds i32, ptr %605, i64 %653
  store i32 %661, ptr %662, align 4, !tbaa !7
  %663 = getelementptr inbounds i32, ptr %604, i64 %620
  %664 = load i32, ptr %663, align 4, !tbaa !7
  %665 = getelementptr inbounds i32, ptr %604, i64 %653
  store i32 %664, ptr %665, align 4, !tbaa !7
  %666 = icmp sge i64 %620, %617
  %667 = icmp slt i64 %620, %616
  %668 = select i1 %666, i1 %667, i1 false
  br i1 %668, label %669, label %673

669:                                              ; preds = %652
  %670 = icmp eq i32 %624, -1
  %671 = select i1 %670, i32 %621, i32 %624
  %672 = add nsw i32 %623, 1
  br label %679

673:                                              ; preds = %652
  %674 = icmp sge i64 %620, %616
  %675 = icmp slt i64 %620, %615
  %676 = select i1 %674, i1 %675, i1 false
  %677 = zext i1 %676 to i32
  %678 = add nsw i32 %622, %677
  br label %679

679:                                              ; preds = %673, %669
  %680 = phi i32 [ %671, %669 ], [ %624, %673 ]
  %681 = phi i32 [ %672, %669 ], [ %623, %673 ]
  %682 = phi i32 [ %622, %669 ], [ %678, %673 ]
  %683 = add nsw i32 %621, 1
  br label %684

684:                                              ; preds = %679, %619
  %685 = phi i32 [ %680, %679 ], [ %624, %619 ]
  %686 = phi i32 [ %681, %679 ], [ %623, %619 ]
  %687 = phi i32 [ %682, %679 ], [ %622, %619 ]
  %688 = phi i32 [ %683, %679 ], [ %621, %619 ]
  %689 = add nuw nsw i64 %620, 1
  %690 = icmp eq i64 %689, %618
  br i1 %690, label %691, label %619, !llvm.loop !110

691:                                              ; preds = %684, %609
  %692 = phi i32 [ -1, %609 ], [ %685, %684 ]
  %693 = phi i32 [ 0, %609 ], [ %686, %684 ]
  %694 = phi i32 [ 0, %609 ], [ %687, %684 ]
  %695 = phi i32 [ 0, %609 ], [ %688, %684 ]
  %696 = call i32 @hypre_BoxArraySetSize(ptr noundef %607, i32 noundef %695) #33
  br label %697

697:                                              ; preds = %691, %602
  %698 = phi i32 [ %694, %691 ], [ %57, %602 ]
  %699 = phi i32 [ %693, %691 ], [ %55, %602 ]
  %700 = phi i32 [ %692, %691 ], [ %603, %602 ]
  %701 = call i32 @hypre_StructGridCreate(i32 noundef %12, i32 noundef %14, ptr noundef nonnull %6) #33
  %702 = load ptr, ptr %6, align 8, !tbaa !14
  %703 = call i32 @hypre_StructGridSetHood(ptr noundef %702, ptr noundef %607, ptr noundef %605, ptr noundef %604, i32 noundef %700, i32 noundef %699, i32 noundef %698, ptr noundef nonnull %62) #33
  %704 = load ptr, ptr %6, align 8, !tbaa !14
  %705 = call i32 @hypre_StructGridSetHoodInfo(ptr noundef %704, i32 noundef %59) #33
  %706 = icmp sgt i32 %14, 0
  br i1 %706, label %707, label %721

707:                                              ; preds = %697
  %708 = zext i32 %14 to i64
  br label %709

709:                                              ; preds = %718, %707
  %710 = phi i64 [ 0, %707 ], [ %719, %718 ]
  %711 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %710
  %712 = load i32, ptr %711, align 4, !tbaa !7
  %713 = icmp sgt i32 %712, 0
  br i1 %713, label %714, label %718

714:                                              ; preds = %709
  %715 = getelementptr inbounds i32, ptr %2, i64 %710
  %716 = load i32, ptr %715, align 4, !tbaa !7
  %717 = sdiv i32 %712, %716
  store i32 %717, ptr %711, align 4, !tbaa !7
  br label %718

718:                                              ; preds = %714, %709
  %719 = add nuw nsw i64 %710, 1
  %720 = icmp eq i64 %719, %708
  br i1 %720, label %721, label %709, !llvm.loop !111

721:                                              ; preds = %718, %697
  %722 = load ptr, ptr %6, align 8, !tbaa !14
  %723 = call i32 @hypre_StructGridSetPeriodic(ptr noundef %722, ptr noundef nonnull %7) #33
  %724 = load ptr, ptr %6, align 8, !tbaa !14
  %725 = call i32 @hypre_StructGridAssemble(ptr noundef %724) #33
  %726 = load ptr, ptr %6, align 8, !tbaa !14
  store ptr %726, ptr %4, align 8, !tbaa !14
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_CommPkgCreate(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5, ptr noundef %6, ptr noundef %7, i32 noundef %8, i32 noundef %9, ptr noundef %10) #0 {
  %12 = alloca i32, align 4
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #34
  %20 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 80) #33
  store i32 %8, ptr %20, align 8, !tbaa !112
  %21 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 1
  store i32 %9, ptr %21, align 4, !tbaa !114
  %22 = call i32 @hypre_CommPkgCreateInfo(ptr noundef %0, ptr noundef %2, ptr noundef %4, ptr noundef %6, i32 noundef %8, i32 noundef %9, ptr noundef %10, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef nonnull %18) #35
  %23 = load i32, ptr %12, align 4, !tbaa !7
  %24 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 2
  store i32 %23, ptr %24, align 8, !tbaa !115
  %25 = load ptr, ptr %13, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 4
  store ptr %25, ptr %26, align 8, !tbaa !116
  %27 = load ptr, ptr %14, align 8, !tbaa !14
  %28 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 6
  store ptr %27, ptr %28, align 8, !tbaa !117
  %29 = load ptr, ptr %18, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 10
  store ptr %29, ptr %30, align 8, !tbaa !118
  %31 = call i32 @hypre_CommPkgCreateInfo(ptr noundef %1, ptr noundef %3, ptr noundef %5, ptr noundef %7, i32 noundef %8, i32 noundef %9, ptr noundef %10, ptr noundef nonnull %15, ptr noundef nonnull %16, ptr noundef nonnull %17, ptr noundef nonnull %19) #35
  %32 = load i32, ptr %15, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 3
  store i32 %32, ptr %33, align 4, !tbaa !119
  %34 = load ptr, ptr %16, align 8, !tbaa !14
  %35 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 5
  store ptr %34, ptr %35, align 8, !tbaa !120
  %36 = load ptr, ptr %17, align 8, !tbaa !14
  %37 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 7
  store ptr %36, ptr %37, align 8, !tbaa !121
  %38 = load ptr, ptr %19, align 8, !tbaa !14
  %39 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %20, i64 0, i32 11
  store ptr %38, ptr %39, align 8, !tbaa !122
  %40 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %0, i64 0, i32 1
  %41 = load i32, ptr %40, align 8, !tbaa !45
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %51

43:                                               ; preds = %43, %11
  %44 = phi i64 [ %47, %43 ], [ 0, %11 ]
  %45 = getelementptr inbounds ptr, ptr %6, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !14
  tail call void @hypre_Free(ptr noundef %46) #33
  store ptr null, ptr %45, align 8, !tbaa !14
  %47 = add nuw nsw i64 %44, 1
  %48 = load i32, ptr %40, align 8, !tbaa !45
  %49 = sext i32 %48 to i64
  %50 = icmp slt i64 %47, %49
  br i1 %50, label %43, label %51, !llvm.loop !123

51:                                               ; preds = %43, %11
  %52 = tail call i32 @hypre_BoxArrayArrayDestroy(ptr noundef nonnull %0) #33
  tail call void @hypre_Free(ptr noundef %6) #33
  %53 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %1, i64 0, i32 1
  %54 = load i32, ptr %53, align 8, !tbaa !45
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %64

56:                                               ; preds = %56, %51
  %57 = phi i64 [ %60, %56 ], [ 0, %51 ]
  %58 = getelementptr inbounds ptr, ptr %7, i64 %57
  %59 = load ptr, ptr %58, align 8, !tbaa !14
  tail call void @hypre_Free(ptr noundef %59) #33
  store ptr null, ptr %58, align 8, !tbaa !14
  %60 = add nuw nsw i64 %57, 1
  %61 = load i32, ptr %53, align 8, !tbaa !45
  %62 = sext i32 %61 to i64
  %63 = icmp slt i64 %60, %62
  br i1 %63, label %56, label %64, !llvm.loop !124

64:                                               ; preds = %56, %51
  %65 = tail call i32 @hypre_BoxArrayArrayDestroy(ptr noundef nonnull %1) #33
  tail call void @hypre_Free(ptr noundef %7) #33
  %66 = tail call i32 @hypre_CommPkgCommit(ptr noundef nonnull %20) #35
  %67 = load i32, ptr %24, align 8, !tbaa !115
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %69, %64
  %70 = phi i64 [ %75, %69 ], [ 0, %64 ]
  %71 = load ptr, ptr %28, align 8, !tbaa !117
  %72 = getelementptr inbounds ptr, ptr %71, i64 %70
  %73 = load ptr, ptr %72, align 8, !tbaa !14
  %74 = tail call i32 @hypre_CommTypeDestroy(ptr noundef %73) #35
  %75 = add nuw nsw i64 %70, 1
  %76 = load i32, ptr %24, align 8, !tbaa !115
  %77 = sext i32 %76 to i64
  %78 = icmp slt i64 %75, %77
  br i1 %78, label %69, label %79, !llvm.loop !125

79:                                               ; preds = %69, %64
  %80 = load ptr, ptr %28, align 8, !tbaa !117
  tail call void @hypre_Free(ptr noundef %80) #33
  store ptr null, ptr %28, align 8, !tbaa !117
  %81 = load i32, ptr %33, align 4, !tbaa !119
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %93

83:                                               ; preds = %83, %79
  %84 = phi i64 [ %89, %83 ], [ 0, %79 ]
  %85 = load ptr, ptr %37, align 8, !tbaa !121
  %86 = getelementptr inbounds ptr, ptr %85, i64 %84
  %87 = load ptr, ptr %86, align 8, !tbaa !14
  %88 = tail call i32 @hypre_CommTypeDestroy(ptr noundef %87) #35
  %89 = add nuw nsw i64 %84, 1
  %90 = load i32, ptr %33, align 4, !tbaa !119
  %91 = sext i32 %90 to i64
  %92 = icmp slt i64 %89, %91
  br i1 %92, label %83, label %93, !llvm.loop !126

93:                                               ; preds = %83, %79
  %94 = load ptr, ptr %37, align 8, !tbaa !121
  tail call void @hypre_Free(ptr noundef %94) #33
  store ptr null, ptr %37, align 8, !tbaa !121
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #34
  ret ptr %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommPkgCreateInfo(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, i32 noundef %4, i32 noundef %5, ptr noundef %6, ptr nocapture noundef writeonly %7, ptr nocapture noundef writeonly %8, ptr nocapture noundef writeonly %9, ptr nocapture noundef writeonly %10) #0 {
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #34
  %14 = call i32 @hypre_MPI_Comm_size(i32 noundef %5, ptr noundef nonnull %12) #33
  %15 = call i32 @hypre_MPI_Comm_rank(i32 noundef %5, ptr noundef nonnull %13) #33
  %16 = load i32, ptr %12, align 4, !tbaa !7
  %17 = call ptr @hypre_CAlloc(i32 noundef %16, i32 noundef 4) #33
  %18 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %0, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !45
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %89

21:                                               ; preds = %11
  %22 = load ptr, ptr %0, align 8, !tbaa !42
  br label %23

23:                                               ; preds = %83, %21
  %24 = phi i32 [ %19, %21 ], [ %84, %83 ]
  %25 = phi i64 [ 0, %21 ], [ %86, %83 ]
  %26 = phi i32 [ 0, %21 ], [ %85, %83 ]
  %27 = getelementptr inbounds ptr, ptr %22, i64 %25
  %28 = load ptr, ptr %27, align 8, !tbaa !14
  %29 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %28, i64 0, i32 1
  %30 = load i32, ptr %29, align 8, !tbaa !21
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %83

32:                                               ; preds = %23
  %33 = load ptr, ptr %28, align 8, !tbaa !23
  %34 = getelementptr inbounds ptr, ptr %3, i64 %25
  br label %35

35:                                               ; preds = %75, %32
  %36 = phi i32 [ %30, %32 ], [ %76, %75 ]
  %37 = phi i64 [ 0, %32 ], [ %78, %75 ]
  %38 = phi i32 [ %26, %32 ], [ %77, %75 ]
  %39 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %37
  %40 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %37, i32 1
  %41 = load <2 x i32>, ptr %40, align 4, !tbaa !7
  %42 = load <2 x i32>, ptr %39, align 4, !tbaa !7
  %43 = sub nsw <2 x i32> %41, %42
  %44 = add nsw <2 x i32> %43, <i32 1, i32 1>
  %45 = icmp slt <2 x i32> %43, zeroinitializer
  %46 = select <2 x i1> %45, <2 x i32> zeroinitializer, <2 x i32> %44
  %47 = extractelement <2 x i32> %46, i64 0
  %48 = extractelement <2 x i32> %46, i64 1
  %49 = mul nsw i32 %48, %47
  %50 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %37, i32 1, i64 2
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = getelementptr inbounds [3 x i32], ptr %39, i64 0, i64 2
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = sub nsw i32 %51, %53
  %55 = add nsw i32 %54, 1
  %56 = icmp slt i32 %54, 0
  %57 = select i1 %56, i32 0, i32 %55
  %58 = mul nsw i32 %49, %57
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %75, label %60

60:                                               ; preds = %35
  %61 = load ptr, ptr %34, align 8, !tbaa !14
  %62 = getelementptr inbounds i32, ptr %61, i64 %37
  %63 = load i32, ptr %62, align 4, !tbaa !7
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, ptr %17, i64 %64
  %66 = load i32, ptr %65, align 4, !tbaa !7
  %67 = add nsw i32 %66, 1
  store i32 %67, ptr %65, align 4, !tbaa !7
  %68 = icmp eq i32 %66, 0
  %69 = load i32, ptr %13, align 4
  %70 = icmp ne i32 %63, %69
  %71 = select i1 %68, i1 %70, i1 false
  %72 = zext i1 %71 to i32
  %73 = add nsw i32 %38, %72
  %74 = load i32, ptr %29, align 8, !tbaa !21
  br label %75

75:                                               ; preds = %60, %35
  %76 = phi i32 [ %36, %35 ], [ %74, %60 ]
  %77 = phi i32 [ %38, %35 ], [ %73, %60 ]
  %78 = add nuw nsw i64 %37, 1
  %79 = sext i32 %76 to i64
  %80 = icmp slt i64 %78, %79
  br i1 %80, label %35, label %81, !llvm.loop !127

81:                                               ; preds = %75
  %.lcssa1 = phi i32 [ %77, %75 ]
  %82 = load i32, ptr %18, align 8, !tbaa !45
  br label %83

83:                                               ; preds = %81, %23
  %84 = phi i32 [ %24, %23 ], [ %82, %81 ]
  %85 = phi i32 [ %26, %23 ], [ %.lcssa1, %81 ]
  %86 = add nuw nsw i64 %25, 1
  %87 = sext i32 %84 to i64
  %88 = icmp slt i64 %86, %87
  br i1 %88, label %23, label %89, !llvm.loop !128

89:                                               ; preds = %83, %11
  %90 = phi i32 [ 0, %11 ], [ %85, %83 ]
  %91 = load i32, ptr %12, align 4, !tbaa !7
  %92 = call ptr @hypre_CAlloc(i32 noundef %91, i32 noundef 8) #33
  %93 = shl i32 %90, 2
  %94 = call ptr @hypre_MAlloc(i32 noundef %93) #33
  %95 = load i32, ptr %18, align 8, !tbaa !45
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %97, label %207

97:                                               ; preds = %174, %89
  %98 = phi i32 [ %175, %174 ], [ %95, %89 ]
  %99 = phi i64 [ %204, %174 ], [ 0, %89 ]
  %100 = phi i32 [ %176, %174 ], [ 0, %89 ]
  %101 = phi i32 [ %203, %174 ], [ 0, %89 ]
  %102 = load ptr, ptr %0, align 8, !tbaa !42
  %103 = getelementptr inbounds ptr, ptr %102, i64 %99
  %104 = load ptr, ptr %103, align 8, !tbaa !14
  %105 = load ptr, ptr %2, align 8, !tbaa !23
  %106 = getelementptr inbounds %struct.hypre_Box_struct, ptr %105, i64 %99
  %107 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %104, i64 0, i32 1
  %108 = load i32, ptr %107, align 8, !tbaa !21
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %110, label %174

110:                                              ; preds = %97
  %111 = getelementptr inbounds ptr, ptr %3, i64 %99
  br label %112

112:                                              ; preds = %166, %110
  %113 = phi i32 [ %108, %110 ], [ %167, %166 ]
  %114 = phi i64 [ 0, %110 ], [ %169, %166 ]
  %115 = phi i32 [ %100, %110 ], [ %168, %166 ]
  %116 = load ptr, ptr %104, align 8, !tbaa !23
  %117 = getelementptr inbounds %struct.hypre_Box_struct, ptr %116, i64 %114
  %118 = load ptr, ptr %111, align 8, !tbaa !14
  %119 = getelementptr inbounds i32, ptr %118, i64 %114
  %120 = load i32, ptr %119, align 4, !tbaa !7
  %121 = getelementptr inbounds %struct.hypre_Box_struct, ptr %116, i64 %114, i32 1
  %122 = load <2 x i32>, ptr %121, align 4, !tbaa !7
  %123 = load <2 x i32>, ptr %117, align 4, !tbaa !7
  %124 = sub nsw <2 x i32> %122, %123
  %125 = add nsw <2 x i32> %124, <i32 1, i32 1>
  %126 = icmp slt <2 x i32> %124, zeroinitializer
  %127 = select <2 x i1> %126, <2 x i32> zeroinitializer, <2 x i32> %125
  %128 = extractelement <2 x i32> %127, i64 0
  %129 = extractelement <2 x i32> %127, i64 1
  %130 = mul nsw i32 %129, %128
  %131 = getelementptr inbounds %struct.hypre_Box_struct, ptr %116, i64 %114, i32 1, i64 2
  %132 = load i32, ptr %131, align 4, !tbaa !7
  %133 = getelementptr inbounds [3 x i32], ptr %117, i64 0, i64 2
  %134 = load i32, ptr %133, align 4, !tbaa !7
  %135 = sub nsw i32 %132, %134
  %136 = add nsw i32 %135, 1
  %137 = icmp slt i32 %135, 0
  %138 = select i1 %137, i32 0, i32 %136
  %139 = mul nsw i32 %130, %138
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %166, label %141

141:                                              ; preds = %112
  %142 = sext i32 %120 to i64
  %143 = getelementptr inbounds ptr, ptr %92, i64 %142
  %144 = load ptr, ptr %143, align 8, !tbaa !14
  %145 = icmp eq ptr %144, null
  br i1 %145, label %146, label %156

146:                                              ; preds = %141
  %147 = getelementptr inbounds i32, ptr %17, i64 %142
  %148 = load i32, ptr %147, align 4, !tbaa !7
  %149 = call ptr @hypre_CAlloc(i32 noundef %148, i32 noundef 8) #33
  store ptr %149, ptr %143, align 8, !tbaa !14
  store i32 0, ptr %147, align 4, !tbaa !7
  %150 = load i32, ptr %13, align 4, !tbaa !7
  %151 = icmp eq i32 %120, %150
  br i1 %151, label %156, label %152

152:                                              ; preds = %146
  %153 = sext i32 %115 to i64
  %154 = getelementptr inbounds i32, ptr %94, i64 %153
  store i32 %120, ptr %154, align 4, !tbaa !7
  %155 = add nsw i32 %115, 1
  br label %156

156:                                              ; preds = %152, %146, %141
  %157 = phi i32 [ %155, %152 ], [ %115, %146 ], [ %115, %141 ]
  %158 = call ptr @hypre_CommTypeEntryCreate(ptr noundef nonnull %117, ptr noundef %1, ptr noundef %106, i32 noundef %4, i32 noundef %101) #35
  %159 = load ptr, ptr %143, align 8, !tbaa !14
  %160 = getelementptr inbounds i32, ptr %17, i64 %142
  %161 = load i32, ptr %160, align 4, !tbaa !7
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds ptr, ptr %159, i64 %162
  store ptr %158, ptr %163, align 8, !tbaa !14
  %164 = add nsw i32 %161, 1
  store i32 %164, ptr %160, align 4, !tbaa !7
  %165 = load i32, ptr %107, align 8, !tbaa !21
  br label %166

166:                                              ; preds = %156, %112
  %167 = phi i32 [ %165, %156 ], [ %113, %112 ]
  %168 = phi i32 [ %157, %156 ], [ %115, %112 ]
  %169 = add nuw nsw i64 %114, 1
  %170 = sext i32 %167 to i64
  %171 = icmp slt i64 %169, %170
  br i1 %171, label %112, label %172, !llvm.loop !129

172:                                              ; preds = %166
  %.lcssa = phi i32 [ %168, %166 ]
  %173 = load i32, ptr %18, align 8, !tbaa !45
  br label %174

174:                                              ; preds = %172, %97
  %175 = phi i32 [ %98, %97 ], [ %173, %172 ]
  %176 = phi i32 [ %100, %97 ], [ %.lcssa, %172 ]
  %177 = getelementptr inbounds %struct.hypre_Box_struct, ptr %105, i64 %99, i32 1
  %178 = load i32, ptr %177, align 4, !tbaa !7
  %179 = load i32, ptr %106, align 4, !tbaa !7
  %180 = sub nsw i32 %178, %179
  %181 = add nsw i32 %180, 1
  %182 = icmp slt i32 %180, 0
  %183 = select i1 %182, i32 0, i32 %181
  %184 = getelementptr inbounds %struct.hypre_Box_struct, ptr %105, i64 %99, i32 1, i64 1
  %185 = load i32, ptr %184, align 4, !tbaa !7
  %186 = getelementptr inbounds [3 x i32], ptr %106, i64 0, i64 1
  %187 = load i32, ptr %186, align 4, !tbaa !7
  %188 = sub nsw i32 %185, %187
  %189 = add nsw i32 %188, 1
  %190 = icmp slt i32 %188, 0
  %191 = select i1 %190, i32 0, i32 %189
  %192 = getelementptr inbounds %struct.hypre_Box_struct, ptr %105, i64 %99, i32 1, i64 2
  %193 = load i32, ptr %192, align 4, !tbaa !7
  %194 = getelementptr inbounds [3 x i32], ptr %106, i64 0, i64 2
  %195 = load i32, ptr %194, align 4, !tbaa !7
  %196 = sub nsw i32 %193, %195
  %197 = add nsw i32 %196, 1
  %198 = icmp slt i32 %196, 0
  %199 = select i1 %198, i32 0, i32 %197
  %200 = mul i32 %183, %4
  %201 = mul i32 %200, %191
  %202 = mul i32 %201, %199
  %203 = add nsw i32 %202, %101
  %204 = add nuw nsw i64 %99, 1
  %205 = sext i32 %175 to i64
  %206 = icmp slt i64 %204, %205
  br i1 %206, label %97, label %207, !llvm.loop !130

207:                                              ; preds = %174, %89
  %208 = shl i32 %90, 3
  %209 = call ptr @hypre_MAlloc(i32 noundef %208) #33
  %210 = icmp sgt i32 %90, 0
  br i1 %210, label %211, label %228

211:                                              ; preds = %207
  %212 = zext i32 %90 to i64
  br label %213

213:                                              ; preds = %213, %211
  %214 = phi i64 [ 0, %211 ], [ %226, %213 ]
  %215 = getelementptr inbounds i32, ptr %94, i64 %214
  %216 = load i32, ptr %215, align 4, !tbaa !7
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds ptr, ptr %92, i64 %217
  %219 = load ptr, ptr %218, align 8, !tbaa !14
  %220 = getelementptr inbounds i32, ptr %17, i64 %217
  %221 = load i32, ptr %220, align 4, !tbaa !7
  %222 = call ptr @hypre_MAlloc(i32 noundef 16) #33
  store ptr %219, ptr %222, align 8, !tbaa !131
  %223 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %222, i64 0, i32 1
  store i32 %221, ptr %223, align 8, !tbaa !133
  %224 = getelementptr inbounds ptr, ptr %209, i64 %214
  store ptr %222, ptr %224, align 8, !tbaa !14
  %225 = call i32 @hypre_CommTypeSort(ptr noundef nonnull %222, ptr noundef %6) #35
  %226 = add nuw nsw i64 %214, 1
  %227 = icmp eq i64 %226, %212
  br i1 %227, label %228, label %213, !llvm.loop !134

228:                                              ; preds = %213, %207
  %229 = load i32, ptr %13, align 4, !tbaa !7
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds ptr, ptr %92, i64 %230
  %232 = load ptr, ptr %231, align 8, !tbaa !14
  %233 = icmp eq ptr %232, null
  br i1 %233, label %240, label %234

234:                                              ; preds = %228
  %235 = getelementptr inbounds i32, ptr %17, i64 %230
  %236 = load i32, ptr %235, align 4, !tbaa !7
  %237 = call ptr @hypre_MAlloc(i32 noundef 16) #33
  store ptr %232, ptr %237, align 8, !tbaa !131
  %238 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %237, i64 0, i32 1
  store i32 %236, ptr %238, align 8, !tbaa !133
  %239 = call i32 @hypre_CommTypeSort(ptr noundef nonnull %237, ptr noundef %6) #35
  br label %243

240:                                              ; preds = %228
  %241 = call ptr @hypre_MAlloc(i32 noundef 16) #33
  store ptr null, ptr %241, align 8, !tbaa !131
  %242 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %241, i64 0, i32 1
  store i32 0, ptr %242, align 8, !tbaa !133
  br label %243

243:                                              ; preds = %240, %234
  %244 = phi ptr [ %237, %234 ], [ %241, %240 ]
  call void @hypre_Free(ptr noundef nonnull %92) #33
  call void @hypre_Free(ptr noundef %17) #33
  store i32 %90, ptr %7, align 4, !tbaa !7
  store ptr %94, ptr %8, align 8, !tbaa !14
  store ptr %209, ptr %9, align 8, !tbaa !14
  store ptr %244, ptr %10, align 8, !tbaa !14
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommPkgCommit(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 2
  %3 = load i32, ptr %2, align 8, !tbaa !115
  %4 = shl i32 %3, 2
  %5 = tail call ptr @hypre_MAlloc(i32 noundef %4) #33
  %6 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 8
  store ptr %5, ptr %6, align 8, !tbaa !135
  %7 = load i32, ptr %2, align 8, !tbaa !115
  %8 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !117
  %10 = tail call i32 @hypre_CommTypeBuildMPI(i32 noundef %7, ptr poison, ptr noundef %9, ptr noundef %5) #35
  %11 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 3
  %12 = load i32, ptr %11, align 4, !tbaa !119
  %13 = shl i32 %12, 2
  %14 = tail call ptr @hypre_MAlloc(i32 noundef %13) #33
  %15 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 9
  store ptr %14, ptr %15, align 8, !tbaa !136
  %16 = load i32, ptr %11, align 4, !tbaa !119
  %17 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !121
  %19 = tail call i32 @hypre_CommTypeBuildMPI(i32 noundef %16, ptr poison, ptr noundef %18, ptr noundef %14) #35
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommTypeDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %28, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !131
  %5 = icmp eq ptr %4, null
  br i1 %5, label %26, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %0, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !133
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %26

10:                                               ; preds = %19, %6
  %11 = phi i32 [ %20, %19 ], [ %8, %6 ]
  %12 = phi i64 [ %21, %19 ], [ 0, %6 ]
  %13 = load ptr, ptr %0, align 8, !tbaa !131
  %14 = getelementptr inbounds ptr, ptr %13, i64 %12
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  %16 = icmp eq ptr %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %10
  tail call void @hypre_Free(ptr noundef nonnull %15) #33
  %18 = load i32, ptr %7, align 8, !tbaa !133
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %11, %10 ], [ %18, %17 ]
  %21 = add nuw nsw i64 %12, 1
  %22 = sext i32 %20 to i64
  %23 = icmp slt i64 %21, %22
  br i1 %23, label %10, label %24, !llvm.loop !137

24:                                               ; preds = %19
  %25 = load ptr, ptr %0, align 8, !tbaa !131
  br label %26

26:                                               ; preds = %24, %6, %3
  %27 = phi ptr [ %25, %24 ], [ %4, %6 ], [ null, %3 ]
  tail call void @hypre_Free(ptr noundef %27) #33
  store ptr null, ptr %0, align 8, !tbaa !131
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %28

28:                                               ; preds = %26, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommTypeBuildMPI(i32 noundef %0, ptr nocapture readnone %1, ptr nocapture noundef readonly %2, ptr noundef %3) #0 {
  %5 = icmp sgt i32 %0, 0
  br i1 %5, label %6, label %54

6:                                                ; preds = %4
  %7 = zext i32 %0 to i64
  br label %8

8:                                                ; preds = %51, %6
  %9 = phi i64 [ 0, %6 ], [ %52, %51 ]
  %10 = getelementptr inbounds ptr, ptr %2, i64 %9
  %11 = load ptr, ptr %10, align 8, !tbaa !14
  %12 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %11, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !133
  %14 = shl i32 %13, 2
  %15 = tail call ptr @hypre_MAlloc(i32 noundef %14) #33
  %16 = tail call ptr @hypre_MAlloc(i32 noundef %14) #33
  %17 = tail call ptr @hypre_MAlloc(i32 noundef %14) #33
  %18 = icmp sgt i32 %13, 0
  br i1 %18, label %19, label %47

19:                                               ; preds = %8
  %20 = zext i32 %13 to i64
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %33, %21 ]
  %23 = load ptr, ptr %11, align 8, !tbaa !131
  %24 = getelementptr inbounds ptr, ptr %23, i64 %22
  %25 = load ptr, ptr %24, align 8, !tbaa !14
  %26 = getelementptr inbounds i32, ptr %15, i64 %22
  store i32 1, ptr %26, align 4, !tbaa !7
  %27 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %25, i64 0, i32 2
  %28 = load i32, ptr %27, align 4, !tbaa !138
  %29 = shl i32 %28, 3
  %30 = getelementptr inbounds i32, ptr %16, i64 %22
  store i32 %29, ptr %30, align 4, !tbaa !7
  %31 = getelementptr inbounds i32, ptr %17, i64 %22
  %32 = tail call i32 @hypre_CommTypeEntryBuildMPI(ptr noundef %25, ptr noundef %31) #35
  %33 = add nuw nsw i64 %22, 1
  %34 = icmp eq i64 %33, %20
  br i1 %34, label %35, label %21, !llvm.loop !140

35:                                               ; preds = %21
  %36 = getelementptr inbounds i32, ptr %3, i64 %9
  %37 = tail call i32 @hypre_MPI_Type_struct(i32 noundef %13, ptr noundef %15, ptr noundef %16, ptr noundef %17, ptr noundef %36) #33
  %38 = tail call i32 @hypre_MPI_Type_commit(ptr noundef %36) #33
  br i1 %18, label %39, label %51

39:                                               ; preds = %35
  %40 = zext i32 %13 to i64
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %45, %41 ]
  %43 = getelementptr inbounds i32, ptr %17, i64 %42
  %44 = tail call i32 @hypre_MPI_Type_free(ptr noundef %43) #33
  %45 = add nuw nsw i64 %42, 1
  %46 = icmp eq i64 %45, %40
  br i1 %46, label %51, label %41, !llvm.loop !141

47:                                               ; preds = %8
  %48 = getelementptr inbounds i32, ptr %3, i64 %9
  %49 = tail call i32 @hypre_MPI_Type_struct(i32 noundef %13, ptr noundef %15, ptr noundef %16, ptr noundef %17, ptr noundef %48) #33
  %50 = tail call i32 @hypre_MPI_Type_commit(ptr noundef %48) #33
  br label %51

51:                                               ; preds = %47, %41, %35
  tail call void @hypre_Free(ptr noundef %15) #33
  tail call void @hypre_Free(ptr noundef %16) #33
  tail call void @hypre_Free(ptr noundef %17) #33
  %52 = add nuw nsw i64 %9, 1
  %53 = icmp eq i64 %52, %7
  br i1 %53, label %54, label %8, !llvm.loop !142

54:                                               ; preds = %51, %4
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommTypeEntryBuildMPI(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %0, i64 0, i32 3
  %4 = load i32, ptr %3, align 4, !tbaa !143
  %5 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %0, i64 0, i32 4
  %6 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %0, i64 0, i32 5
  %7 = icmp eq i32 %4, 1
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = load i32, ptr %5, align 4, !tbaa !7
  %10 = load i32, ptr %6, align 4, !tbaa !7
  %11 = shl i32 %10, 3
  %12 = tail call i32 @hypre_MPI_Type_hvector(i32 noundef %9, i32 noundef 1, i32 noundef %11, i32 noundef 0, ptr noundef %1) #33
  br label %52

13:                                               ; preds = %2
  %14 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 4) #33
  %15 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 4) #33
  %16 = load i32, ptr %5, align 4, !tbaa !7
  %17 = load i32, ptr %6, align 4, !tbaa !7
  %18 = shl i32 %17, 3
  %19 = tail call i32 @hypre_MPI_Type_hvector(i32 noundef %16, i32 noundef 1, i32 noundef %18, i32 noundef 0, ptr noundef %14) #33
  %20 = add i32 %4, -1
  %21 = icmp sgt i32 %4, 2
  br i1 %21, label %22, label %40

22:                                               ; preds = %13
  %23 = zext i32 %20 to i64
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 1, %22 ], [ %36, %24 ]
  %26 = phi ptr [ %14, %22 ], [ %27, %24 ]
  %27 = phi ptr [ %15, %22 ], [ %26, %24 ]
  %28 = getelementptr inbounds i32, ptr %5, i64 %25
  %29 = load i32, ptr %28, align 4, !tbaa !7
  %30 = getelementptr inbounds i32, ptr %6, i64 %25
  %31 = load i32, ptr %30, align 4, !tbaa !7
  %32 = shl i32 %31, 3
  %33 = load i32, ptr %26, align 4, !tbaa !7
  %34 = tail call i32 @hypre_MPI_Type_hvector(i32 noundef %29, i32 noundef 1, i32 noundef %32, i32 noundef %33, ptr noundef %27) #33
  %35 = tail call i32 @hypre_MPI_Type_free(ptr noundef nonnull %26) #33
  %36 = add nuw nsw i64 %25, 1
  %37 = icmp eq i64 %36, %23
  br i1 %37, label %38, label %24, !llvm.loop !144

38:                                               ; preds = %24
  %.lcssa1 = phi ptr [ %26, %24 ]
  %.lcssa = phi ptr [ %27, %24 ]
  %39 = zext i32 %20 to i64
  br label %40

40:                                               ; preds = %38, %13
  %41 = phi ptr [ %.lcssa1, %38 ], [ %15, %13 ]
  %42 = phi i64 [ %39, %38 ], [ 1, %13 ]
  %43 = phi ptr [ %.lcssa, %38 ], [ %14, %13 ]
  %44 = getelementptr inbounds i32, ptr %5, i64 %42
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = getelementptr inbounds i32, ptr %6, i64 %42
  %47 = load i32, ptr %46, align 4, !tbaa !7
  %48 = shl i32 %47, 3
  %49 = load i32, ptr %43, align 4, !tbaa !7
  %50 = tail call i32 @hypre_MPI_Type_hvector(i32 noundef %45, i32 noundef 1, i32 noundef %48, i32 noundef %49, ptr noundef %1) #33
  %51 = tail call i32 @hypre_MPI_Type_free(ptr noundef nonnull %43) #33
  tail call void @hypre_Free(ptr noundef nonnull %43) #33
  tail call void @hypre_Free(ptr noundef %41) #33
  br label %52

52:                                               ; preds = %40, %8
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_CommTypeEntryCreate(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  %7 = tail call ptr @hypre_MAlloc(i32 noundef 64) #33
  %8 = load i32, ptr %0, align 4, !tbaa !7
  store i32 %8, ptr %7, align 4, !tbaa !7
  %9 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 1
  %10 = load i32, ptr %9, align 4, !tbaa !7
  %11 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  store i32 %10, ptr %11, align 4, !tbaa !7
  %12 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 2
  %13 = load i32, ptr %12, align 4, !tbaa !7
  %14 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  store i32 %13, ptr %14, align 4, !tbaa !7
  %15 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !7
  %17 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 1
  store i32 %16, ptr %17, align 4, !tbaa !7
  %18 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 1
  %19 = load i32, ptr %18, align 4, !tbaa !7
  %20 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 1, i64 1
  store i32 %19, ptr %20, align 4, !tbaa !7
  %21 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 2
  %22 = load i32, ptr %21, align 4, !tbaa !7
  %23 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 1, i64 2
  store i32 %22, ptr %23, align 4, !tbaa !7
  %24 = load i32, ptr %0, align 4, !tbaa !7
  %25 = load i32, ptr %2, align 4, !tbaa !7
  %26 = load i32, ptr %9, align 4, !tbaa !7
  %27 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 1
  %28 = load i32, ptr %27, align 4, !tbaa !7
  %29 = sub i32 %26, %28
  %30 = load i32, ptr %12, align 4, !tbaa !7
  %31 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 2
  %32 = load i32, ptr %31, align 4, !tbaa !7
  %33 = sub nsw i32 %30, %32
  %34 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1
  %35 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1, i64 1
  %36 = load i32, ptr %35, align 4, !tbaa !7
  %37 = sub nsw i32 %36, %28
  %38 = add nsw i32 %37, 1
  %39 = icmp slt i32 %37, 0
  %40 = select i1 %39, i32 0, i32 %38
  %41 = mul nsw i32 %40, %33
  %42 = add nsw i32 %29, %41
  %43 = load i32, ptr %34, align 4, !tbaa !7
  %44 = sub nsw i32 %43, %25
  %45 = add nsw i32 %44, 1
  %46 = icmp slt i32 %44, 0
  %47 = select i1 %46, i32 0, i32 %45
  %48 = mul nsw i32 %42, %47
  %49 = add i32 %24, %4
  %50 = sub i32 %49, %25
  %51 = add i32 %50, %48
  %52 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 2
  store i32 %51, ptr %52, align 4, !tbaa !138
  %53 = getelementptr %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 4
  %54 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %0, ptr noundef %1, ptr noundef nonnull %6) #33
  br label %55

55:                                               ; preds = %55, %5
  %56 = phi i64 [ 0, %5 ], [ %60, %55 ]
  %57 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %56
  %58 = load i32, ptr %57, align 4, !tbaa !7
  %59 = getelementptr inbounds i32, ptr %53, i64 %56
  store i32 %58, ptr %59, align 4, !tbaa !7
  %60 = add nuw nsw i64 %56, 1
  %61 = icmp eq i64 %60, 3
  br i1 %61, label %62, label %55, !llvm.loop !145

62:                                               ; preds = %55
  %63 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 5
  %64 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 4, i64 3
  store i32 %3, ptr %64, align 4, !tbaa !7
  br label %65

65:                                               ; preds = %85, %62
  %66 = phi i64 [ 0, %62 ], [ %86, %85 ]
  %67 = getelementptr inbounds i32, ptr %1, i64 %66
  %68 = load i32, ptr %67, align 4, !tbaa !7
  %69 = getelementptr inbounds i32, ptr %63, i64 %66
  store i32 %68, ptr %69, align 4, !tbaa !7
  %70 = icmp eq i64 %66, 0
  br i1 %70, label %85, label %71

71:                                               ; preds = %71, %65
  %72 = phi i64 [ %83, %71 ], [ 0, %65 ]
  %73 = phi i32 [ %82, %71 ], [ %68, %65 ]
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1, i64 %72
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 %72
  %77 = load i32, ptr %76, align 4, !tbaa !7
  %78 = sub nsw i32 %75, %77
  %79 = add nsw i32 %78, 1
  %80 = icmp slt i32 %78, 0
  %81 = select i1 %80, i32 0, i32 %79
  %82 = mul nsw i32 %81, %73
  store i32 %82, ptr %69, align 4, !tbaa !7
  %83 = add nuw nsw i64 %72, 1
  %84 = icmp eq i64 %83, %66
  br i1 %84, label %85, label %71, !llvm.loop !146

85:                                               ; preds = %71, %65
  %86 = add nuw nsw i64 %66, 1
  %87 = icmp eq i64 %86, 3
  br i1 %87, label %88, label %65, !llvm.loop !147

88:                                               ; preds = %85
  %89 = load <2 x i32>, ptr %34, align 4, !tbaa !7
  %90 = load <2 x i32>, ptr %2, align 4, !tbaa !7
  %91 = sub nsw <2 x i32> %89, %90
  %92 = add nsw <2 x i32> %91, <i32 1, i32 1>
  %93 = icmp slt <2 x i32> %91, zeroinitializer
  %94 = select <2 x i1> %93, <2 x i32> zeroinitializer, <2 x i32> %92
  %95 = extractelement <2 x i32> %94, i64 0
  %96 = extractelement <2 x i32> %94, i64 1
  %97 = mul nsw i32 %96, %95
  %98 = getelementptr inbounds %struct.hypre_Box_struct, ptr %2, i64 0, i32 1, i64 2
  %99 = load i32, ptr %98, align 4, !tbaa !7
  %100 = load i32, ptr %31, align 4, !tbaa !7
  %101 = sub nsw i32 %99, %100
  %102 = add nsw i32 %101, 1
  %103 = icmp slt i32 %101, 0
  %104 = select i1 %103, i32 0, i32 %102
  %105 = mul nsw i32 %97, %104
  %106 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 5, i64 3
  store i32 %105, ptr %106, align 4, !tbaa !7
  br label %107

107:                                              ; preds = %133, %88
  %108 = phi i32 [ 4, %88 ], [ %135, %133 ]
  %109 = phi i32 [ 0, %88 ], [ %134, %133 ]
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, ptr %53, i64 %110
  %112 = load i32, ptr %111, align 4, !tbaa !7
  %113 = icmp eq i32 %112, 1
  br i1 %113, label %114, label %131

114:                                              ; preds = %107
  %115 = add nsw i32 %108, -1
  %116 = icmp slt i32 %109, %115
  %117 = sext i32 %115 to i64
  br i1 %116, label %118, label %128

118:                                              ; preds = %118, %114
  %119 = phi i64 [ %120, %118 ], [ %110, %114 ]
  %120 = add nsw i64 %119, 1
  %121 = getelementptr inbounds i32, ptr %53, i64 %120
  %122 = load i32, ptr %121, align 4, !tbaa !7
  %123 = getelementptr inbounds i32, ptr %53, i64 %119
  store i32 %122, ptr %123, align 4, !tbaa !7
  %124 = getelementptr inbounds i32, ptr %63, i64 %120
  %125 = load i32, ptr %124, align 4, !tbaa !7
  %126 = getelementptr inbounds i32, ptr %63, i64 %119
  store i32 %125, ptr %126, align 4, !tbaa !7
  %127 = icmp eq i64 %120, %117
  br i1 %127, label %128, label %118, !llvm.loop !148

128:                                              ; preds = %118, %114
  %129 = getelementptr inbounds i32, ptr %53, i64 %117
  store i32 1, ptr %129, align 4, !tbaa !7
  %130 = getelementptr inbounds i32, ptr %63, i64 %117
  store i32 1, ptr %130, align 4, !tbaa !7
  br label %133

131:                                              ; preds = %107
  %132 = add nsw i32 %109, 1
  br label %133

133:                                              ; preds = %131, %128
  %134 = phi i32 [ %109, %128 ], [ %132, %131 ]
  %135 = phi i32 [ %115, %128 ], [ %108, %131 ]
  %136 = icmp slt i32 %134, %135
  br i1 %136, label %107, label %137, !llvm.loop !149

137:                                              ; preds = %133
  %.lcssa = phi i32 [ %135, %133 ]
  %138 = call i32 @llvm.umax.i32(i32 %.lcssa, i32 1)
  %139 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %7, i64 0, i32 3
  store i32 %138, ptr %139, align 4, !tbaa !143
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  ret ptr %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommTypeSort(ptr nocapture noundef readonly %0, ptr noundef %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !131
  %4 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !133
  %6 = add nsw i32 %5, -1
  %7 = icmp sgt i32 %5, 1
  br i1 %7, label %8, label %130

8:                                                ; preds = %2
  %9 = zext i32 %5 to i64
  br label %10

10:                                               ; preds = %47, %8
  %11 = phi i64 [ %9, %8 ], [ %12, %47 ]
  %12 = add nsw i64 %11, -1
  br label %16

13:                                               ; preds = %47
  br i1 %7, label %14, label %130

14:                                               ; preds = %13
  %15 = zext i32 %5 to i64
  br label %51

16:                                               ; preds = %45, %10
  %17 = phi i64 [ 0, %10 ], [ %20, %45 ]
  %18 = getelementptr inbounds ptr, ptr %3, i64 %17
  %19 = load ptr, ptr %18, align 8, !tbaa !14
  %20 = add nuw nsw i64 %17, 1
  %21 = getelementptr inbounds ptr, ptr %3, i64 %20
  %22 = load ptr, ptr %21, align 8, !tbaa !14
  %23 = tail call i32 @hypre_IModPeriodZ(ptr noundef %19, ptr noundef %1) #33
  %24 = tail call i32 @hypre_IModPeriodZ(ptr noundef %22, ptr noundef %1) #33
  %25 = icmp sgt i32 %23, %24
  br i1 %25, label %42, label %26

26:                                               ; preds = %16
  %27 = tail call i32 @hypre_IModPeriodZ(ptr noundef %19, ptr noundef %1) #33
  %28 = tail call i32 @hypre_IModPeriodZ(ptr noundef %22, ptr noundef %1) #33
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %45

30:                                               ; preds = %26
  %31 = tail call i32 @hypre_IModPeriodY(ptr noundef %19, ptr noundef %1) #33
  %32 = tail call i32 @hypre_IModPeriodY(ptr noundef %22, ptr noundef %1) #33
  %33 = icmp sgt i32 %31, %32
  br i1 %33, label %42, label %34

34:                                               ; preds = %30
  %35 = tail call i32 @hypre_IModPeriodY(ptr noundef %19, ptr noundef %1) #33
  %36 = tail call i32 @hypre_IModPeriodY(ptr noundef %22, ptr noundef %1) #33
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = tail call i32 @hypre_IModPeriodX(ptr noundef %19, ptr noundef %1) #33
  %40 = tail call i32 @hypre_IModPeriodX(ptr noundef %22, ptr noundef %1) #33
  %41 = icmp sgt i32 %39, %40
  br i1 %41, label %42, label %45

42:                                               ; preds = %38, %30, %16
  %43 = load <2 x ptr>, ptr %18, align 8, !tbaa !14
  %44 = shufflevector <2 x ptr> %43, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %44, ptr %18, align 8, !tbaa !14
  br label %45

45:                                               ; preds = %42, %38, %34, %26
  %46 = icmp slt i64 %20, %12
  br i1 %46, label %16, label %47, !llvm.loop !150

47:                                               ; preds = %45
  %48 = icmp sgt i64 %11, 2
  br i1 %48, label %10, label %13, !llvm.loop !151

49:                                               ; preds = %127, %86
  %50 = icmp slt i32 %88, %6
  br i1 %50, label %51, label %130, !llvm.loop !152

51:                                               ; preds = %49, %14
  %52 = phi i32 [ %88, %49 ], [ 0, %14 ]
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds ptr, ptr %3, i64 %53
  %55 = load ptr, ptr %54, align 8, !tbaa !14
  %56 = add nsw i32 %52, 1
  %57 = tail call i32 @llvm.smax.i32(i32 %5, i32 %56)
  %58 = add nsw i32 %57, -1
  br label %59

59:                                               ; preds = %73, %51
  %60 = phi i64 [ %61, %73 ], [ %53, %51 ]
  %61 = add nsw i64 %60, 1
  %62 = icmp slt i64 %61, %15
  br i1 %62, label %63, label %86

63:                                               ; preds = %59
  %64 = getelementptr inbounds ptr, ptr %3, i64 %61
  %65 = load ptr, ptr %64, align 8, !tbaa !14
  %66 = tail call i32 @hypre_IModPeriodX(ptr noundef %55, ptr noundef %1) #33
  %67 = tail call i32 @hypre_IModPeriodX(ptr noundef %65, ptr noundef %1) #33
  %68 = icmp eq i32 %66, %67
  br i1 %68, label %69, label %77

69:                                               ; preds = %63
  %70 = tail call i32 @hypre_IModPeriodY(ptr noundef %55, ptr noundef %1) #33
  %71 = tail call i32 @hypre_IModPeriodY(ptr noundef %65, ptr noundef %1) #33
  %72 = icmp eq i32 %70, %71
  br i1 %72, label %73, label %80

73:                                               ; preds = %69
  %74 = tail call i32 @hypre_IModPeriodZ(ptr noundef %55, ptr noundef %1) #33
  %75 = tail call i32 @hypre_IModPeriodZ(ptr noundef %65, ptr noundef %1) #33
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %59, label %83, !llvm.loop !153

77:                                               ; preds = %63
  %.lcssa5 = phi i64 [ %60, %63 ]
  %.lcssa1 = phi i64 [ %61, %63 ]
  %78 = trunc i64 %.lcssa1 to i32
  %79 = trunc i64 %.lcssa5 to i32
  br label %86

80:                                               ; preds = %69
  %.lcssa6 = phi i64 [ %60, %69 ]
  %.lcssa2 = phi i64 [ %61, %69 ]
  %81 = trunc i64 %.lcssa2 to i32
  %82 = trunc i64 %.lcssa6 to i32
  br label %86

83:                                               ; preds = %73
  %.lcssa7 = phi i64 [ %60, %73 ]
  %.lcssa3 = phi i64 [ %61, %73 ]
  %84 = trunc i64 %.lcssa3 to i32
  %85 = trunc i64 %.lcssa7 to i32
  br label %86

86:                                               ; preds = %83, %80, %77, %59
  %87 = phi i32 [ %79, %77 ], [ %82, %80 ], [ %85, %83 ], [ %58, %59 ]
  %88 = phi i32 [ %78, %77 ], [ %81, %80 ], [ %84, %83 ], [ %57, %59 ]
  %89 = icmp sgt i32 %87, %52
  br i1 %89, label %90, label %49

90:                                               ; preds = %86
  %91 = sext i32 %87 to i64
  br label %92

92:                                               ; preds = %127, %90
  %93 = phi i64 [ %91, %90 ], [ %128, %127 ]
  br label %94

94:                                               ; preds = %125, %92
  %95 = phi i64 [ %53, %92 ], [ %99, %125 ]
  %96 = getelementptr inbounds ptr, ptr %3, i64 %95
  %97 = load ptr, ptr %96, align 8, !tbaa !14
  %98 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %97, i64 0, i32 1
  %99 = add nsw i64 %95, 1
  %100 = getelementptr inbounds ptr, ptr %3, i64 %99
  %101 = load ptr, ptr %100, align 8, !tbaa !14
  %102 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %101, i64 0, i32 1
  %103 = tail call i32 @hypre_IModPeriodZ(ptr noundef nonnull %98, ptr noundef %1) #33
  %104 = tail call i32 @hypre_IModPeriodZ(ptr noundef nonnull %102, ptr noundef %1) #33
  %105 = icmp sgt i32 %103, %104
  br i1 %105, label %122, label %106

106:                                              ; preds = %94
  %107 = tail call i32 @hypre_IModPeriodZ(ptr noundef nonnull %98, ptr noundef %1) #33
  %108 = tail call i32 @hypre_IModPeriodZ(ptr noundef nonnull %102, ptr noundef %1) #33
  %109 = icmp eq i32 %107, %108
  br i1 %109, label %110, label %125

110:                                              ; preds = %106
  %111 = tail call i32 @hypre_IModPeriodY(ptr noundef nonnull %98, ptr noundef %1) #33
  %112 = tail call i32 @hypre_IModPeriodY(ptr noundef nonnull %102, ptr noundef %1) #33
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %122, label %114

114:                                              ; preds = %110
  %115 = tail call i32 @hypre_IModPeriodY(ptr noundef nonnull %98, ptr noundef %1) #33
  %116 = tail call i32 @hypre_IModPeriodY(ptr noundef nonnull %102, ptr noundef %1) #33
  %117 = icmp eq i32 %115, %116
  br i1 %117, label %118, label %125

118:                                              ; preds = %114
  %119 = tail call i32 @hypre_IModPeriodX(ptr noundef nonnull %98, ptr noundef %1) #33
  %120 = tail call i32 @hypre_IModPeriodX(ptr noundef nonnull %102, ptr noundef %1) #33
  %121 = icmp sgt i32 %119, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %118, %110, %94
  %123 = load <2 x ptr>, ptr %96, align 8, !tbaa !14
  %124 = shufflevector <2 x ptr> %123, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %124, ptr %96, align 8, !tbaa !14
  br label %125

125:                                              ; preds = %122, %118, %114, %106
  %126 = icmp slt i64 %99, %93
  br i1 %126, label %94, label %127, !llvm.loop !154

127:                                              ; preds = %125
  %128 = add nsw i64 %93, -1
  %129 = icmp sgt i64 %128, %53
  br i1 %129, label %92, label %49, !llvm.loop !155

130:                                              ; preds = %49, %13, %2
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommPkgDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = tail call i32 @hypre_CommPkgUnCommit(ptr noundef nonnull %0) #35
  %5 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !116
  tail call void @hypre_Free(ptr noundef %6) #33
  store ptr null, ptr %5, align 8, !tbaa !116
  %7 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !120
  tail call void @hypre_Free(ptr noundef %8) #33
  store ptr null, ptr %7, align 8, !tbaa !120
  %9 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 10
  %10 = load ptr, ptr %9, align 8, !tbaa !118
  %11 = tail call i32 @hypre_CommTypeDestroy(ptr noundef %10) #35
  %12 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 11
  %13 = load ptr, ptr %12, align 8, !tbaa !122
  %14 = tail call i32 @hypre_CommTypeDestroy(ptr noundef %13) #35
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %15

15:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CommPkgUnCommit(ptr noundef readonly %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %37, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 8
  %5 = load ptr, ptr %4, align 8, !tbaa !135
  %6 = icmp eq ptr %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 2
  %9 = load i32, ptr %8, align 8, !tbaa !115
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %11, %7
  %12 = phi i64 [ %15, %11 ], [ 0, %7 ]
  %13 = getelementptr inbounds i32, ptr %5, i64 %12
  %14 = tail call i32 @hypre_MPI_Type_free(ptr noundef nonnull %13) #33
  %15 = add nuw nsw i64 %12, 1
  %16 = load i32, ptr %8, align 8, !tbaa !115
  %17 = sext i32 %16 to i64
  %18 = icmp slt i64 %15, %17
  br i1 %18, label %11, label %19, !llvm.loop !156

19:                                               ; preds = %11, %7
  tail call void @hypre_Free(ptr noundef nonnull %5) #33
  br label %20

20:                                               ; preds = %19, %3
  %21 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 9
  %22 = load ptr, ptr %21, align 8, !tbaa !136
  %23 = icmp eq ptr %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 3
  %26 = load i32, ptr %25, align 4, !tbaa !119
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %36

28:                                               ; preds = %28, %24
  %29 = phi i64 [ %32, %28 ], [ 0, %24 ]
  %30 = getelementptr inbounds i32, ptr %22, i64 %29
  %31 = tail call i32 @hypre_MPI_Type_free(ptr noundef nonnull %30) #33
  %32 = add nuw nsw i64 %29, 1
  %33 = load i32, ptr %25, align 4, !tbaa !119
  %34 = sext i32 %33 to i64
  %35 = icmp slt i64 %32, %34
  br i1 %35, label %28, label %36, !llvm.loop !157

36:                                               ; preds = %28, %24
  tail call void @hypre_Free(ptr noundef nonnull %22) #33
  br label %37

37:                                               ; preds = %36, %20, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_InitializeCommunication(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 2
  %6 = load i32, ptr %5, align 8, !tbaa !115
  %7 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !119
  %9 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 1
  %10 = load i32, ptr %9, align 4, !tbaa !114
  %11 = add nsw i32 %8, %6
  %12 = tail call ptr @hypre_CAlloc(i32 noundef %11, i32 noundef 4) #33
  %13 = tail call ptr @hypre_CAlloc(i32 noundef %11, i32 noundef 4) #33
  %14 = icmp sgt i32 %8, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 9
  %17 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 5
  %18 = zext i32 %8 to i64
  br label %28

19:                                               ; preds = %28
  %20 = zext i32 %8 to i64
  br label %21

21:                                               ; preds = %19, %4
  %22 = phi i64 [ 0, %4 ], [ %20, %19 ]
  %23 = icmp sgt i32 %6, 0
  br i1 %23, label %24, label %54

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 8
  %26 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 4
  %27 = zext i32 %6 to i64
  br label %40

28:                                               ; preds = %28, %15
  %29 = phi i64 [ 0, %15 ], [ %36, %28 ]
  %30 = load ptr, ptr %16, align 8, !tbaa !136
  %31 = getelementptr inbounds i32, ptr %30, i64 %29
  %32 = load i32, ptr %31, align 4, !tbaa !7
  %33 = load ptr, ptr %17, align 8, !tbaa !120
  %34 = getelementptr inbounds i32, ptr %33, i64 %29
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = add nuw nsw i64 %29, 1
  %37 = getelementptr inbounds i32, ptr %12, i64 %29
  %38 = tail call i32 @hypre_MPI_Irecv(ptr noundef %2, i32 noundef 1, i32 noundef %32, i32 noundef %35, i32 noundef 0, i32 noundef %10, ptr noundef %37) #33
  %39 = icmp eq i64 %36, %18
  br i1 %39, label %19, label %28, !llvm.loop !158

40:                                               ; preds = %40, %24
  %41 = phi i64 [ 0, %24 ], [ %52, %40 ]
  %42 = phi i64 [ %22, %24 ], [ %49, %40 ]
  %43 = load ptr, ptr %25, align 8, !tbaa !135
  %44 = getelementptr inbounds i32, ptr %43, i64 %41
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = load ptr, ptr %26, align 8, !tbaa !116
  %47 = getelementptr inbounds i32, ptr %46, i64 %41
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = add nuw nsw i64 %42, 1
  %50 = getelementptr inbounds i32, ptr %12, i64 %42
  %51 = tail call i32 @hypre_MPI_Isend(ptr noundef %1, i32 noundef 1, i32 noundef %45, i32 noundef %48, i32 noundef 0, i32 noundef %10, ptr noundef %50) #33
  %52 = add nuw nsw i64 %41, 1
  %53 = icmp eq i64 %52, %27
  br i1 %53, label %54, label %40, !llvm.loop !159

54:                                               ; preds = %40, %21
  %55 = tail call i32 @hypre_ExchangeLocalData(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2) #35
  %56 = tail call ptr @hypre_MAlloc(i32 noundef 48) #33
  store ptr %0, ptr %56, align 8, !tbaa !160
  %57 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %56, i64 0, i32 1
  store ptr %1, ptr %57, align 8, !tbaa !162
  %58 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %56, i64 0, i32 2
  store ptr %2, ptr %58, align 8, !tbaa !163
  %59 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %56, i64 0, i32 3
  store i32 %11, ptr %59, align 8, !tbaa !164
  %60 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %56, i64 0, i32 4
  store ptr %12, ptr %60, align 8, !tbaa !165
  %61 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %56, i64 0, i32 5
  store ptr %13, ptr %61, align 8, !tbaa !166
  store ptr %56, ptr %3, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_ExchangeLocalData(ptr nocapture noundef readonly %0, ptr noundef readonly %1, ptr noundef writeonly %2) #11 {
  %4 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 10
  %5 = load ptr, ptr %4, align 8, !tbaa !118
  %6 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %5, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !133
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %106

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.hypre_CommPkg_struct, ptr %0, i64 0, i32 11
  %11 = load ptr, ptr %10, align 8, !tbaa !122
  %12 = load ptr, ptr %5, align 8, !tbaa !131
  %13 = load ptr, ptr %11, align 8, !tbaa !131
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %103, %9
  %16 = phi i64 [ 0, %9 ], [ %104, %103 ]
  %17 = getelementptr inbounds ptr, ptr %12, i64 %16
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  %19 = getelementptr inbounds ptr, ptr %13, i64 %16
  %20 = load ptr, ptr %19, align 8, !tbaa !14
  %21 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 2
  %22 = load i32, ptr %21, align 4, !tbaa !138
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds double, ptr %1, i64 %23
  %25 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %20, i64 0, i32 2
  %26 = load i32, ptr %25, align 4, !tbaa !138
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, ptr %2, i64 %27
  %29 = icmp eq ptr %28, %24
  br i1 %29, label %103, label %30

30:                                               ; preds = %15
  %31 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 4
  %32 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 5
  %33 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %20, i64 0, i32 5
  %34 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 4, i64 3
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %103

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 4, i64 2
  %39 = load i32, ptr %38, align 4, !tbaa !7
  %40 = icmp sgt i32 %39, 0
  %41 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 4, i64 1
  %42 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 5, i64 3
  %43 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 5, i64 2
  %44 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %18, i64 0, i32 5, i64 1
  %45 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %20, i64 0, i32 5, i64 3
  %46 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %20, i64 0, i32 5, i64 2
  %47 = getelementptr inbounds %struct.hypre_CommTypeEntry_struct, ptr %20, i64 0, i32 5, i64 1
  br label %48

48:                                               ; preds = %100, %37
  %49 = phi i32 [ 0, %37 ], [ %101, %100 ]
  br i1 %40, label %50, label %100

50:                                               ; preds = %48
  %51 = load i32, ptr %41, align 4, !tbaa !7
  %52 = icmp sgt i32 %51, 0
  br label %53

53:                                               ; preds = %97, %50
  %54 = phi i32 [ 0, %50 ], [ %98, %97 ]
  br i1 %52, label %55, label %97

55:                                               ; preds = %53
  %56 = load i32, ptr %42, align 4, !tbaa !7
  %57 = load i32, ptr %43, align 4, !tbaa !7
  %58 = load i32, ptr %44, align 4, !tbaa !7
  %59 = load i32, ptr %45, align 4, !tbaa !7
  %60 = load i32, ptr %46, align 4, !tbaa !7
  %61 = load i32, ptr %47, align 4, !tbaa !7
  %62 = load i32, ptr %31, align 4, !tbaa !7
  %63 = icmp sgt i32 %62, 0
  %64 = mul i32 %49, %56
  %65 = mul i32 %57, %54
  %66 = add i32 %64, %65
  %67 = mul i32 %49, %59
  %68 = mul i32 %60, %54
  %69 = add i32 %67, %68
  br label %70

70:                                               ; preds = %92, %55
  %71 = phi i32 [ %69, %55 ], [ %95, %92 ]
  %72 = phi i32 [ %66, %55 ], [ %94, %92 ]
  %73 = phi i32 [ 0, %55 ], [ %93, %92 ]
  br i1 %63, label %74, label %92

74:                                               ; preds = %70
  %75 = sext i32 %71 to i64
  %76 = sext i32 %72 to i64
  %77 = load i32, ptr %32, align 4, !tbaa !7
  %78 = load i32, ptr %33, align 4, !tbaa !7
  %79 = sext i32 %77 to i64
  %80 = sext i32 %78 to i64
  br label %81

81:                                               ; preds = %81, %74
  %82 = phi i64 [ %75, %74 ], [ %89, %81 ]
  %83 = phi i64 [ %76, %74 ], [ %88, %81 ]
  %84 = phi i32 [ 0, %74 ], [ %90, %81 ]
  %85 = getelementptr inbounds double, ptr %24, i64 %83
  %86 = load double, ptr %85, align 8, !tbaa !29
  %87 = getelementptr inbounds double, ptr %28, i64 %82
  store double %86, ptr %87, align 8, !tbaa !29
  %88 = add i64 %83, %79
  %89 = add i64 %82, %80
  %90 = add nuw nsw i32 %84, 1
  %91 = icmp eq i32 %90, %62
  br i1 %91, label %92, label %81, !llvm.loop !167

92:                                               ; preds = %81, %70
  %93 = add nuw nsw i32 %73, 1
  %94 = add i32 %72, %58
  %95 = add i32 %71, %61
  %96 = icmp eq i32 %93, %51
  br i1 %96, label %97, label %70, !llvm.loop !168

97:                                               ; preds = %92, %53
  %98 = add nuw nsw i32 %54, 1
  %99 = icmp eq i32 %98, %39
  br i1 %99, label %100, label %53, !llvm.loop !169

100:                                              ; preds = %97, %48
  %101 = add nuw nsw i32 %49, 1
  %102 = icmp eq i32 %101, %35
  br i1 %102, label %103, label %48, !llvm.loop !170

103:                                              ; preds = %100, %30, %15
  %104 = add nuw nsw i64 %16, 1
  %105 = icmp eq i64 %104, %14
  br i1 %105, label %106, label %15, !llvm.loop !171

106:                                              ; preds = %103, %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_FinalizeCommunication(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %0, i64 0, i32 3
  %3 = load i32, ptr %2, align 8, !tbaa !164
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %0, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !165
  %8 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %0, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !166
  %10 = tail call i32 @hypre_MPI_Waitall(i32 noundef %3, ptr noundef %7, ptr noundef %9) #33
  br label %11

11:                                               ; preds = %5, %1
  %12 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %0, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !165
  tail call void @hypre_Free(ptr noundef %13) #33
  store ptr null, ptr %12, align 8, !tbaa !165
  %14 = getelementptr inbounds %struct.hypre_CommHandle_struct, ptr %0, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !166
  tail call void @hypre_Free(ptr noundef %15) #33
  store ptr null, ptr %14, align 8, !tbaa !166
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CreateCommInfoFromStencil(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5) #0 {
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !20
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8, !tbaa !93
  %11 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %8, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !21
  %13 = tail call ptr @hypre_BoxArrayArrayCreate(i32 noundef %12) #33
  %14 = load i32, ptr %11, align 8, !tbaa !21
  %15 = tail call ptr @hypre_BoxArrayArrayCreate(i32 noundef %14) #33
  %16 = load i32, ptr %11, align 8, !tbaa !21
  %17 = tail call ptr @hypre_CAlloc(i32 noundef %16, i32 noundef 8) #33
  %18 = load i32, ptr %11, align 8, !tbaa !21
  %19 = tail call ptr @hypre_CAlloc(i32 noundef %18, i32 noundef 8) #33
  %20 = load ptr, ptr %1, align 8, !tbaa !35
  %21 = load ptr, ptr %10, align 8, !tbaa !74
  %22 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %10, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !75
  %24 = tail call ptr @hypre_BoxCreate() #33
  %25 = tail call ptr @hypre_BoxCreate() #33
  %26 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %21, i64 0, i32 1
  %27 = load i32, ptr %26, align 8, !tbaa !21
  %28 = tail call ptr @hypre_CAlloc(i32 noundef %27, i32 noundef 8) #33
  %29 = load i32, ptr %26, align 8, !tbaa !21
  %30 = tail call ptr @hypre_CAlloc(i32 noundef %29, i32 noundef 4) #33
  %31 = load i32, ptr %11, align 8, !tbaa !21
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %478

33:                                               ; preds = %6
  %34 = getelementptr inbounds [3 x i32], ptr %25, i64 0, i64 1
  %35 = getelementptr inbounds [3 x i32], ptr %25, i64 0, i64 2
  %36 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 0, i32 1
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 0, i32 1, i64 1
  %38 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 0, i32 1, i64 2
  %39 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %1, i64 0, i32 1
  %40 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %10, i64 0, i32 6
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 0, i32 1
  %42 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 0, i32 1, i64 2
  %43 = getelementptr inbounds [3 x i32], ptr %24, i64 0, i64 2
  br label %44

44:                                               ; preds = %473, %33
  %45 = phi i64 [ 0, %33 ], [ %474, %473 ]
  %46 = load ptr, ptr %8, align 8, !tbaa !23
  %47 = getelementptr inbounds %struct.hypre_Box_struct, ptr %46, i64 %45
  %48 = load i32, ptr %47, align 4, !tbaa !7
  store i32 %48, ptr %25, align 4, !tbaa !7
  %49 = getelementptr inbounds [3 x i32], ptr %47, i64 0, i64 1
  %50 = load i32, ptr %49, align 4, !tbaa !7
  store i32 %50, ptr %34, align 4, !tbaa !7
  %51 = getelementptr inbounds [3 x i32], ptr %47, i64 0, i64 2
  %52 = load i32, ptr %51, align 4, !tbaa !7
  store i32 %52, ptr %35, align 4, !tbaa !7
  %53 = getelementptr inbounds %struct.hypre_Box_struct, ptr %46, i64 %45, i32 1
  %54 = load i32, ptr %53, align 4, !tbaa !7
  store i32 %54, ptr %36, align 4, !tbaa !7
  %55 = getelementptr inbounds %struct.hypre_Box_struct, ptr %46, i64 %45, i32 1, i64 1
  %56 = load i32, ptr %55, align 4, !tbaa !7
  store i32 %56, ptr %37, align 4, !tbaa !7
  %57 = getelementptr inbounds %struct.hypre_Box_struct, ptr %46, i64 %45, i32 1, i64 2
  %58 = load i32, ptr %57, align 4, !tbaa !7
  store i32 %58, ptr %38, align 4, !tbaa !7
  %59 = load i32, ptr %39, align 8, !tbaa !172
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %65, label %188

61:                                               ; preds = %168
  %.lcssa.lcssa.lcssa.lcssa = phi i32 [ %.lcssa.lcssa.lcssa, %168 ]
  %62 = icmp sgt i32 %.lcssa.lcssa.lcssa.lcssa, 0
  br i1 %62, label %63, label %188

63:                                               ; preds = %61
  %64 = zext i32 %.lcssa.lcssa.lcssa.lcssa to i64
  br label %173

65:                                               ; preds = %168, %44
  %66 = phi i64 [ %169, %168 ], [ 0, %44 ]
  %67 = phi i32 [ %.lcssa.lcssa.lcssa, %168 ], [ 0, %44 ]
  %68 = getelementptr inbounds [3 x i32], ptr %20, i64 %66
  br label %69

69:                                               ; preds = %69, %65
  %70 = phi i64 [ 0, %65 ], [ %82, %69 ]
  %71 = getelementptr inbounds [3 x i32], ptr %47, i64 0, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !7
  %73 = getelementptr inbounds i32, ptr %68, i64 %70
  %74 = load i32, ptr %73, align 4, !tbaa !7
  %75 = add nsw i32 %74, %72
  %76 = getelementptr inbounds [3 x i32], ptr %25, i64 0, i64 %70
  store i32 %75, ptr %76, align 4, !tbaa !7
  %77 = getelementptr inbounds %struct.hypre_Box_struct, ptr %46, i64 %45, i32 1, i64 %70
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = load i32, ptr %73, align 4, !tbaa !7
  %80 = add nsw i32 %79, %78
  %81 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 0, i32 1, i64 %70
  store i32 %80, ptr %81, align 4, !tbaa !7
  %82 = add nuw nsw i64 %70, 1
  %83 = icmp eq i64 %82, 3
  br i1 %83, label %84, label %69, !llvm.loop !173

84:                                               ; preds = %69
  %85 = getelementptr inbounds i32, ptr %68, i64 2
  %86 = load i32, ptr %85, align 4, !tbaa !7
  %87 = ashr i32 %86, 31
  %88 = getelementptr inbounds i32, ptr %68, i64 1
  %89 = load i32, ptr %88, align 4, !tbaa !7
  %90 = ashr i32 %89, 31
  %91 = load i32, ptr %68, align 4, !tbaa !7
  %92 = ashr i32 %91, 31
  %93 = sext i32 %92 to i64
  %94 = icmp slt i32 %91, 1
  %95 = select i1 %94, i64 1, i64 2
  %96 = sext i32 %90 to i64
  %97 = icmp slt i32 %89, 1
  %98 = select i1 %97, i64 1, i64 2
  %99 = sext i32 %87 to i64
  %100 = icmp slt i32 %86, 1
  %101 = select i1 %100, i64 1, i64 2
  br label %102

102:                                              ; preds = %166, %84
  %103 = phi i64 [ %99, %84 ], [ %105, %166 ]
  %104 = phi i32 [ %67, %84 ], [ %.lcssa.lcssa, %166 ]
  %105 = add nsw i64 %103, 1
  br label %106

106:                                              ; preds = %164, %102
  %107 = phi i64 [ %96, %102 ], [ %109, %164 ]
  %108 = phi i32 [ %104, %102 ], [ %.lcssa, %164 ]
  %109 = add nsw i64 %107, 1
  br label %113

110:                                              ; preds = %159, %113
  %111 = phi i32 [ %115, %113 ], [ %160, %159 ]
  %112 = icmp eq i64 %117, %95
  br i1 %112, label %164, label %113, !llvm.loop !174

113:                                              ; preds = %110, %106
  %114 = phi i64 [ %93, %106 ], [ %117, %110 ]
  %115 = phi i32 [ %108, %106 ], [ %111, %110 ]
  %116 = load ptr, ptr %40, align 8, !tbaa !72
  %117 = add nsw i64 %114, 1
  %118 = getelementptr inbounds [3 x [3 x [3 x ptr]]], ptr %116, i64 %45, i64 %117, i64 %109, i64 %105
  %119 = load ptr, ptr %118, align 8, !tbaa !14
  %120 = icmp eq ptr %119, null
  br i1 %120, label %110, label %121

121:                                              ; preds = %159, %113
  %122 = phi ptr [ %162, %159 ], [ %119, %113 ]
  %123 = phi i32 [ %160, %159 ], [ %115, %113 ]
  %124 = load i32, ptr %122, align 8, !tbaa !81
  %125 = load ptr, ptr %21, align 8, !tbaa !23
  %126 = sext i32 %124 to i64
  %127 = getelementptr inbounds %struct.hypre_Box_struct, ptr %125, i64 %126
  %128 = tail call i32 @hypre_IntersectBoxes(ptr noundef nonnull %25, ptr noundef %127, ptr noundef %24) #33
  %129 = load <2 x i32>, ptr %41, align 4, !tbaa !7
  %130 = load <2 x i32>, ptr %24, align 4, !tbaa !7
  %131 = sub nsw <2 x i32> %129, %130
  %132 = add nsw <2 x i32> %131, <i32 1, i32 1>
  %133 = icmp slt <2 x i32> %131, zeroinitializer
  %134 = select <2 x i1> %133, <2 x i32> zeroinitializer, <2 x i32> %132
  %135 = extractelement <2 x i32> %134, i64 0
  %136 = extractelement <2 x i32> %134, i64 1
  %137 = mul nsw i32 %136, %135
  %138 = load i32, ptr %42, align 4, !tbaa !7
  %139 = load i32, ptr %43, align 4, !tbaa !7
  %140 = sub nsw i32 %138, %139
  %141 = add nsw i32 %140, 1
  %142 = icmp slt i32 %140, 0
  %143 = select i1 %142, i32 0, i32 %141
  %144 = mul nsw i32 %137, %143
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %159, label %146

146:                                              ; preds = %121
  %147 = getelementptr inbounds ptr, ptr %28, i64 %126
  %148 = load ptr, ptr %147, align 8, !tbaa !14
  %149 = icmp eq ptr %148, null
  br i1 %149, label %150, label %155

150:                                              ; preds = %146
  %151 = tail call ptr @hypre_BoxArrayCreate(i32 noundef 0) #33
  store ptr %151, ptr %147, align 8, !tbaa !14
  %152 = sext i32 %123 to i64
  %153 = getelementptr inbounds i32, ptr %30, i64 %152
  store i32 %124, ptr %153, align 4, !tbaa !7
  %154 = add nsw i32 %123, 1
  br label %155

155:                                              ; preds = %150, %146
  %156 = phi ptr [ %151, %150 ], [ %148, %146 ]
  %157 = phi i32 [ %154, %150 ], [ %123, %146 ]
  %158 = tail call i32 @hypre_AppendBox(ptr noundef nonnull %24, ptr noundef %156) #33
  br label %159

159:                                              ; preds = %155, %121
  %160 = phi i32 [ %157, %155 ], [ %123, %121 ]
  %161 = getelementptr inbounds %struct.hypre_RankLink_struct, ptr %122, i64 0, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !14
  %163 = icmp eq ptr %162, null
  br i1 %163, label %110, label %121, !llvm.loop !175

164:                                              ; preds = %110
  %.lcssa = phi i32 [ %111, %110 ]
  %165 = icmp eq i64 %109, %98
  br i1 %165, label %166, label %106, !llvm.loop !176

166:                                              ; preds = %164
  %.lcssa.lcssa = phi i32 [ %.lcssa, %164 ]
  %167 = icmp eq i64 %105, %101
  br i1 %167, label %168, label %102, !llvm.loop !177

168:                                              ; preds = %166
  %.lcssa.lcssa.lcssa = phi i32 [ %.lcssa.lcssa, %166 ]
  %169 = add nuw nsw i64 %66, 1
  %170 = load i32, ptr %39, align 8, !tbaa !172
  %171 = sext i32 %170 to i64
  %172 = icmp slt i64 %169, %171
  br i1 %172, label %65, label %61, !llvm.loop !178

173:                                              ; preds = %173, %63
  %174 = phi i64 [ 0, %63 ], [ %186, %173 ]
  %175 = phi i32 [ 0, %63 ], [ %185, %173 ]
  %176 = getelementptr inbounds i32, ptr %30, i64 %174
  %177 = load i32, ptr %176, align 4, !tbaa !7
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds ptr, ptr %28, i64 %178
  %180 = load ptr, ptr %179, align 8, !tbaa !14
  %181 = tail call i32 @hypre_UnionBoxes(ptr noundef %180) #33
  %182 = load ptr, ptr %179, align 8, !tbaa !14
  %183 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %182, i64 0, i32 1
  %184 = load i32, ptr %183, align 8, !tbaa !21
  %185 = add nsw i32 %184, %175
  %186 = add nuw nsw i64 %174, 1
  %187 = icmp eq i64 %186, %64
  br i1 %187, label %188, label %173, !llvm.loop !179

188:                                              ; preds = %173, %61, %44
  %189 = phi i1 [ false, %61 ], [ false, %44 ], [ %62, %173 ]
  %190 = phi i32 [ %.lcssa.lcssa.lcssa.lcssa, %61 ], [ 0, %44 ], [ %.lcssa.lcssa.lcssa.lcssa, %173 ]
  %191 = phi i32 [ 0, %61 ], [ 0, %44 ], [ %185, %173 ]
  %192 = load ptr, ptr %15, align 8, !tbaa !42
  %193 = getelementptr inbounds ptr, ptr %192, i64 %45
  %194 = load ptr, ptr %193, align 8, !tbaa !14
  %195 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %194, i32 noundef %191) #33
  %196 = tail call ptr @hypre_CAlloc(i32 noundef %191, i32 noundef 4) #33
  %197 = getelementptr inbounds ptr, ptr %19, i64 %45
  store ptr %196, ptr %197, align 8, !tbaa !14
  br i1 %189, label %198, label %200

198:                                              ; preds = %188
  %199 = zext i32 %190 to i64
  br label %203

200:                                              ; preds = %250, %188
  %201 = load i32, ptr %39, align 8, !tbaa !172
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %259, label %409

203:                                              ; preds = %250, %198
  %204 = phi i64 [ 0, %198 ], [ %253, %250 ]
  %205 = phi i32 [ 0, %198 ], [ %251, %250 ]
  %206 = getelementptr inbounds i32, ptr %30, i64 %204
  %207 = load i32, ptr %206, align 4, !tbaa !7
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds ptr, ptr %28, i64 %208
  %210 = load ptr, ptr %209, align 8, !tbaa !14
  %211 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %210, i64 0, i32 1
  %212 = load i32, ptr %211, align 8, !tbaa !21
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %250

214:                                              ; preds = %203
  %215 = getelementptr inbounds i32, ptr %23, i64 %208
  %216 = load ptr, ptr %197, align 8, !tbaa !14
  %217 = load ptr, ptr %210, align 8, !tbaa !23
  %218 = load ptr, ptr %194, align 8, !tbaa !23
  %219 = sext i32 %205 to i64
  br label %220

220:                                              ; preds = %220, %214
  %221 = phi i64 [ 0, %214 ], [ %244, %220 ]
  %222 = phi i64 [ %219, %214 ], [ %243, %220 ]
  %223 = load i32, ptr %215, align 4, !tbaa !7
  %224 = getelementptr inbounds i32, ptr %216, i64 %222
  store i32 %223, ptr %224, align 4, !tbaa !7
  %225 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %221
  %226 = load i32, ptr %225, align 4, !tbaa !7
  %227 = getelementptr inbounds %struct.hypre_Box_struct, ptr %218, i64 %222
  store i32 %226, ptr %227, align 4, !tbaa !7
  %228 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %221, i32 0, i64 1
  %229 = load i32, ptr %228, align 4, !tbaa !7
  %230 = getelementptr inbounds %struct.hypre_Box_struct, ptr %218, i64 %222, i32 0, i64 1
  store i32 %229, ptr %230, align 4, !tbaa !7
  %231 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %221, i32 0, i64 2
  %232 = load i32, ptr %231, align 4, !tbaa !7
  %233 = getelementptr inbounds %struct.hypre_Box_struct, ptr %218, i64 %222, i32 0, i64 2
  store i32 %232, ptr %233, align 4, !tbaa !7
  %234 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %221, i32 1
  %235 = load i32, ptr %234, align 4, !tbaa !7
  %236 = getelementptr inbounds %struct.hypre_Box_struct, ptr %218, i64 %222, i32 1
  store i32 %235, ptr %236, align 4, !tbaa !7
  %237 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %221, i32 1, i64 1
  %238 = load i32, ptr %237, align 4, !tbaa !7
  %239 = getelementptr inbounds %struct.hypre_Box_struct, ptr %218, i64 %222, i32 1, i64 1
  store i32 %238, ptr %239, align 4, !tbaa !7
  %240 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %221, i32 1, i64 2
  %241 = load i32, ptr %240, align 4, !tbaa !7
  %242 = getelementptr inbounds %struct.hypre_Box_struct, ptr %218, i64 %222, i32 1, i64 2
  store i32 %241, ptr %242, align 4, !tbaa !7
  %243 = add nsw i64 %222, 1
  %244 = add nuw nsw i64 %221, 1
  %245 = load i32, ptr %211, align 8, !tbaa !21
  %246 = sext i32 %245 to i64
  %247 = icmp slt i64 %244, %246
  br i1 %247, label %220, label %248, !llvm.loop !180

248:                                              ; preds = %220
  %.lcssa1 = phi i64 [ %243, %220 ]
  %249 = trunc i64 %.lcssa1 to i32
  br label %250

250:                                              ; preds = %248, %203
  %251 = phi i32 [ %205, %203 ], [ %249, %248 ]
  %252 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef nonnull %210) #33
  store ptr null, ptr %209, align 8, !tbaa !14
  %253 = add nuw nsw i64 %204, 1
  %254 = icmp eq i64 %253, %199
  br i1 %254, label %200, label %203, !llvm.loop !181

255:                                              ; preds = %389
  %.lcssa2.lcssa.lcssa.lcssa.lcssa = phi i32 [ %.lcssa2.lcssa.lcssa.lcssa, %389 ]
  %256 = icmp sgt i32 %.lcssa2.lcssa.lcssa.lcssa.lcssa, 0
  br i1 %256, label %257, label %409

257:                                              ; preds = %255
  %258 = zext i32 %.lcssa2.lcssa.lcssa.lcssa.lcssa to i64
  br label %394

259:                                              ; preds = %389, %200
  %260 = phi i64 [ %390, %389 ], [ 0, %200 ]
  %261 = phi i32 [ %.lcssa2.lcssa.lcssa.lcssa, %389 ], [ 0, %200 ]
  %262 = getelementptr inbounds [3 x i32], ptr %20, i64 %260
  br label %263

263:                                              ; preds = %263, %259
  %264 = phi i64 [ 0, %259 ], [ %268, %263 ]
  %265 = getelementptr inbounds i32, ptr %262, i64 %264
  %266 = load i32, ptr %265, align 4, !tbaa !7
  %267 = sub nsw i32 0, %266
  store i32 %267, ptr %265, align 4, !tbaa !7
  %268 = add nuw nsw i64 %264, 1
  %269 = icmp eq i64 %268, 3
  br i1 %269, label %270, label %263, !llvm.loop !182

270:                                              ; preds = %270, %263
  %271 = phi i64 [ %283, %270 ], [ 0, %263 ]
  %272 = getelementptr inbounds [3 x i32], ptr %47, i64 0, i64 %271
  %273 = load i32, ptr %272, align 4, !tbaa !7
  %274 = getelementptr inbounds i32, ptr %262, i64 %271
  %275 = load i32, ptr %274, align 4, !tbaa !7
  %276 = add nsw i32 %275, %273
  %277 = getelementptr inbounds [3 x i32], ptr %25, i64 0, i64 %271
  store i32 %276, ptr %277, align 4, !tbaa !7
  %278 = getelementptr inbounds %struct.hypre_Box_struct, ptr %46, i64 %45, i32 1, i64 %271
  %279 = load i32, ptr %278, align 4, !tbaa !7
  %280 = load i32, ptr %274, align 4, !tbaa !7
  %281 = add nsw i32 %280, %279
  %282 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 0, i32 1, i64 %271
  store i32 %281, ptr %282, align 4, !tbaa !7
  %283 = add nuw nsw i64 %271, 1
  %284 = icmp eq i64 %283, 3
  br i1 %284, label %285, label %270, !llvm.loop !183

285:                                              ; preds = %270
  %286 = getelementptr inbounds i32, ptr %262, i64 2
  %287 = load i32, ptr %286, align 4, !tbaa !7
  %288 = ashr i32 %287, 31
  %289 = getelementptr inbounds i32, ptr %262, i64 1
  %290 = load i32, ptr %289, align 4, !tbaa !7
  %291 = ashr i32 %290, 31
  %292 = load i32, ptr %262, align 4, !tbaa !7
  %293 = ashr i32 %292, 31
  %294 = sext i32 %293 to i64
  %295 = icmp slt i32 %292, 1
  %296 = select i1 %295, i64 1, i64 2
  %297 = sext i32 %291 to i64
  %298 = icmp slt i32 %290, 1
  %299 = select i1 %298, i64 1, i64 2
  %300 = sext i32 %288 to i64
  %301 = icmp slt i32 %287, 1
  %302 = select i1 %301, i64 1, i64 2
  br label %303

303:                                              ; preds = %380, %285
  %304 = phi i64 [ %300, %285 ], [ %306, %380 ]
  %305 = phi i32 [ %261, %285 ], [ %.lcssa2.lcssa, %380 ]
  %306 = add nsw i64 %304, 1
  br label %307

307:                                              ; preds = %378, %303
  %308 = phi i64 [ %297, %303 ], [ %310, %378 ]
  %309 = phi i32 [ %305, %303 ], [ %.lcssa2, %378 ]
  %310 = add nsw i64 %308, 1
  br label %314

311:                                              ; preds = %373, %314
  %312 = phi i32 [ %316, %314 ], [ %374, %373 ]
  %313 = icmp eq i64 %318, %296
  br i1 %313, label %378, label %314, !llvm.loop !184

314:                                              ; preds = %311, %307
  %315 = phi i64 [ %294, %307 ], [ %318, %311 ]
  %316 = phi i32 [ %309, %307 ], [ %312, %311 ]
  %317 = load ptr, ptr %40, align 8, !tbaa !72
  %318 = add nsw i64 %315, 1
  %319 = getelementptr inbounds [3 x [3 x [3 x ptr]]], ptr %317, i64 %45, i64 %318, i64 %310, i64 %306
  %320 = load ptr, ptr %319, align 8, !tbaa !14
  %321 = icmp eq ptr %320, null
  br i1 %321, label %311, label %322

322:                                              ; preds = %373, %314
  %323 = phi ptr [ %376, %373 ], [ %320, %314 ]
  %324 = phi i32 [ %374, %373 ], [ %316, %314 ]
  %325 = load i32, ptr %323, align 8, !tbaa !81
  %326 = load ptr, ptr %21, align 8, !tbaa !23
  %327 = sext i32 %325 to i64
  %328 = getelementptr inbounds %struct.hypre_Box_struct, ptr %326, i64 %327
  %329 = tail call i32 @hypre_IntersectBoxes(ptr noundef nonnull %25, ptr noundef %328, ptr noundef %24) #33
  %330 = load <2 x i32>, ptr %41, align 4, !tbaa !7
  %331 = load <2 x i32>, ptr %24, align 4, !tbaa !7
  %332 = sub nsw <2 x i32> %330, %331
  %333 = add nsw <2 x i32> %332, <i32 1, i32 1>
  %334 = icmp slt <2 x i32> %332, zeroinitializer
  %335 = select <2 x i1> %334, <2 x i32> zeroinitializer, <2 x i32> %333
  %336 = extractelement <2 x i32> %335, i64 0
  %337 = extractelement <2 x i32> %335, i64 1
  %338 = mul nsw i32 %337, %336
  %339 = load i32, ptr %42, align 4, !tbaa !7
  %340 = load i32, ptr %43, align 4, !tbaa !7
  %341 = sub nsw i32 %339, %340
  %342 = add nsw i32 %341, 1
  %343 = icmp slt i32 %341, 0
  %344 = select i1 %343, i32 0, i32 %342
  %345 = mul nsw i32 %338, %344
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %373, label %347

347:                                              ; preds = %347, %322
  %348 = phi i64 [ %358, %347 ], [ 0, %322 ]
  %349 = getelementptr inbounds i32, ptr %262, i64 %348
  %350 = load i32, ptr %349, align 4, !tbaa !7
  %351 = getelementptr inbounds [3 x i32], ptr %24, i64 0, i64 %348
  %352 = load i32, ptr %351, align 4, !tbaa !7
  %353 = sub nsw i32 %352, %350
  store i32 %353, ptr %351, align 4, !tbaa !7
  %354 = load i32, ptr %349, align 4, !tbaa !7
  %355 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 0, i32 1, i64 %348
  %356 = load i32, ptr %355, align 4, !tbaa !7
  %357 = sub nsw i32 %356, %354
  store i32 %357, ptr %355, align 4, !tbaa !7
  %358 = add nuw nsw i64 %348, 1
  %359 = icmp eq i64 %358, 3
  br i1 %359, label %360, label %347, !llvm.loop !185

360:                                              ; preds = %347
  %361 = getelementptr inbounds ptr, ptr %28, i64 %327
  %362 = load ptr, ptr %361, align 8, !tbaa !14
  %363 = icmp eq ptr %362, null
  br i1 %363, label %364, label %369

364:                                              ; preds = %360
  %365 = tail call ptr @hypre_BoxArrayCreate(i32 noundef 0) #33
  store ptr %365, ptr %361, align 8, !tbaa !14
  %366 = sext i32 %324 to i64
  %367 = getelementptr inbounds i32, ptr %30, i64 %366
  store i32 %325, ptr %367, align 4, !tbaa !7
  %368 = add nsw i32 %324, 1
  br label %369

369:                                              ; preds = %364, %360
  %370 = phi ptr [ %365, %364 ], [ %362, %360 ]
  %371 = phi i32 [ %368, %364 ], [ %324, %360 ]
  %372 = tail call i32 @hypre_AppendBox(ptr noundef nonnull %24, ptr noundef %370) #33
  br label %373

373:                                              ; preds = %369, %322
  %374 = phi i32 [ %371, %369 ], [ %324, %322 ]
  %375 = getelementptr inbounds %struct.hypre_RankLink_struct, ptr %323, i64 0, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !14
  %377 = icmp eq ptr %376, null
  br i1 %377, label %311, label %322, !llvm.loop !186

378:                                              ; preds = %311
  %.lcssa2 = phi i32 [ %312, %311 ]
  %379 = icmp eq i64 %310, %299
  br i1 %379, label %380, label %307, !llvm.loop !187

380:                                              ; preds = %378
  %.lcssa2.lcssa = phi i32 [ %.lcssa2, %378 ]
  %381 = icmp eq i64 %306, %302
  br i1 %381, label %382, label %303, !llvm.loop !188

382:                                              ; preds = %382, %380
  %.lcssa2.lcssa.lcssa = phi i32 [ %.lcssa2.lcssa.lcssa, %382 ], [ %.lcssa2.lcssa, %380 ]
  %383 = phi i64 [ %387, %382 ], [ 0, %380 ]
  %384 = getelementptr inbounds i32, ptr %262, i64 %383
  %385 = load i32, ptr %384, align 4, !tbaa !7
  %386 = sub nsw i32 0, %385
  store i32 %386, ptr %384, align 4, !tbaa !7
  %387 = add nuw nsw i64 %383, 1
  %388 = icmp eq i64 %387, 3
  br i1 %388, label %389, label %382, !llvm.loop !189

389:                                              ; preds = %382
  %.lcssa2.lcssa.lcssa.lcssa = phi i32 [ %.lcssa2.lcssa.lcssa, %382 ]
  %390 = add nuw nsw i64 %260, 1
  %391 = load i32, ptr %39, align 8, !tbaa !172
  %392 = sext i32 %391 to i64
  %393 = icmp slt i64 %390, %392
  br i1 %393, label %259, label %255, !llvm.loop !190

394:                                              ; preds = %394, %257
  %395 = phi i64 [ 0, %257 ], [ %407, %394 ]
  %396 = phi i32 [ 0, %257 ], [ %406, %394 ]
  %397 = getelementptr inbounds i32, ptr %30, i64 %395
  %398 = load i32, ptr %397, align 4, !tbaa !7
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds ptr, ptr %28, i64 %399
  %401 = load ptr, ptr %400, align 8, !tbaa !14
  %402 = tail call i32 @hypre_UnionBoxes(ptr noundef %401) #33
  %403 = load ptr, ptr %400, align 8, !tbaa !14
  %404 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %403, i64 0, i32 1
  %405 = load i32, ptr %404, align 8, !tbaa !21
  %406 = add nsw i32 %405, %396
  %407 = add nuw nsw i64 %395, 1
  %408 = icmp eq i64 %407, %258
  br i1 %408, label %409, label %394, !llvm.loop !191

409:                                              ; preds = %394, %255, %200
  %410 = phi i1 [ false, %255 ], [ false, %200 ], [ %256, %394 ]
  %411 = phi i32 [ %.lcssa2.lcssa.lcssa.lcssa.lcssa, %255 ], [ 0, %200 ], [ %.lcssa2.lcssa.lcssa.lcssa.lcssa, %394 ]
  %412 = phi i32 [ 0, %255 ], [ 0, %200 ], [ %406, %394 ]
  %413 = load ptr, ptr %13, align 8, !tbaa !42
  %414 = getelementptr inbounds ptr, ptr %413, i64 %45
  %415 = load ptr, ptr %414, align 8, !tbaa !14
  %416 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %415, i32 noundef %412) #33
  %417 = tail call ptr @hypre_CAlloc(i32 noundef %412, i32 noundef 4) #33
  %418 = getelementptr inbounds ptr, ptr %17, i64 %45
  store ptr %417, ptr %418, align 8, !tbaa !14
  br i1 %410, label %419, label %473

419:                                              ; preds = %409
  %420 = zext i32 %411 to i64
  br label %421

421:                                              ; preds = %468, %419
  %422 = phi i64 [ 0, %419 ], [ %471, %468 ]
  %423 = phi i32 [ 0, %419 ], [ %469, %468 ]
  %424 = getelementptr inbounds i32, ptr %30, i64 %422
  %425 = load i32, ptr %424, align 4, !tbaa !7
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds ptr, ptr %28, i64 %426
  %428 = load ptr, ptr %427, align 8, !tbaa !14
  %429 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %428, i64 0, i32 1
  %430 = load i32, ptr %429, align 8, !tbaa !21
  %431 = icmp sgt i32 %430, 0
  br i1 %431, label %432, label %468

432:                                              ; preds = %421
  %433 = getelementptr inbounds i32, ptr %23, i64 %426
  %434 = load ptr, ptr %418, align 8, !tbaa !14
  %435 = load ptr, ptr %428, align 8, !tbaa !23
  %436 = load ptr, ptr %415, align 8, !tbaa !23
  %437 = sext i32 %423 to i64
  br label %438

438:                                              ; preds = %438, %432
  %439 = phi i64 [ 0, %432 ], [ %462, %438 ]
  %440 = phi i64 [ %437, %432 ], [ %461, %438 ]
  %441 = load i32, ptr %433, align 4, !tbaa !7
  %442 = getelementptr inbounds i32, ptr %434, i64 %440
  store i32 %441, ptr %442, align 4, !tbaa !7
  %443 = getelementptr inbounds %struct.hypre_Box_struct, ptr %435, i64 %439
  %444 = load i32, ptr %443, align 4, !tbaa !7
  %445 = getelementptr inbounds %struct.hypre_Box_struct, ptr %436, i64 %440
  store i32 %444, ptr %445, align 4, !tbaa !7
  %446 = getelementptr inbounds %struct.hypre_Box_struct, ptr %435, i64 %439, i32 0, i64 1
  %447 = load i32, ptr %446, align 4, !tbaa !7
  %448 = getelementptr inbounds %struct.hypre_Box_struct, ptr %436, i64 %440, i32 0, i64 1
  store i32 %447, ptr %448, align 4, !tbaa !7
  %449 = getelementptr inbounds %struct.hypre_Box_struct, ptr %435, i64 %439, i32 0, i64 2
  %450 = load i32, ptr %449, align 4, !tbaa !7
  %451 = getelementptr inbounds %struct.hypre_Box_struct, ptr %436, i64 %440, i32 0, i64 2
  store i32 %450, ptr %451, align 4, !tbaa !7
  %452 = getelementptr inbounds %struct.hypre_Box_struct, ptr %435, i64 %439, i32 1
  %453 = load i32, ptr %452, align 4, !tbaa !7
  %454 = getelementptr inbounds %struct.hypre_Box_struct, ptr %436, i64 %440, i32 1
  store i32 %453, ptr %454, align 4, !tbaa !7
  %455 = getelementptr inbounds %struct.hypre_Box_struct, ptr %435, i64 %439, i32 1, i64 1
  %456 = load i32, ptr %455, align 4, !tbaa !7
  %457 = getelementptr inbounds %struct.hypre_Box_struct, ptr %436, i64 %440, i32 1, i64 1
  store i32 %456, ptr %457, align 4, !tbaa !7
  %458 = getelementptr inbounds %struct.hypre_Box_struct, ptr %435, i64 %439, i32 1, i64 2
  %459 = load i32, ptr %458, align 4, !tbaa !7
  %460 = getelementptr inbounds %struct.hypre_Box_struct, ptr %436, i64 %440, i32 1, i64 2
  store i32 %459, ptr %460, align 4, !tbaa !7
  %461 = add nsw i64 %440, 1
  %462 = add nuw nsw i64 %439, 1
  %463 = load i32, ptr %429, align 8, !tbaa !21
  %464 = sext i32 %463 to i64
  %465 = icmp slt i64 %462, %464
  br i1 %465, label %438, label %466, !llvm.loop !192

466:                                              ; preds = %438
  %.lcssa3 = phi i64 [ %461, %438 ]
  %467 = trunc i64 %.lcssa3 to i32
  br label %468

468:                                              ; preds = %466, %421
  %469 = phi i32 [ %423, %421 ], [ %467, %466 ]
  %470 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef nonnull %428) #33
  store ptr null, ptr %427, align 8, !tbaa !14
  %471 = add nuw nsw i64 %422, 1
  %472 = icmp eq i64 %471, %420
  br i1 %472, label %473, label %421, !llvm.loop !193

473:                                              ; preds = %468, %409
  %474 = add nuw nsw i64 %45, 1
  %475 = load i32, ptr %11, align 8, !tbaa !21
  %476 = sext i32 %475 to i64
  %477 = icmp slt i64 %474, %476
  br i1 %477, label %44, label %478, !llvm.loop !194

478:                                              ; preds = %473, %6
  tail call void @hypre_Free(ptr noundef %28) #33
  tail call void @hypre_Free(ptr noundef %30) #33
  %479 = tail call i32 @hypre_BoxDestroy(ptr noundef %25) #33
  %480 = tail call i32 @hypre_BoxDestroy(ptr noundef %24) #33
  store ptr %13, ptr %2, align 8, !tbaa !14
  store ptr %15, ptr %3, align 8, !tbaa !14
  store ptr %17, ptr %4, align 8, !tbaa !14
  store ptr %19, ptr %5, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CreateCommInfoFromNumGhost(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5) #0 {
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !20
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !195
  %11 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !93
  %13 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %8, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !21
  %15 = tail call ptr @hypre_BoxArrayArrayCreate(i32 noundef %14) #33
  %16 = load i32, ptr %13, align 8, !tbaa !21
  %17 = tail call ptr @hypre_BoxArrayArrayCreate(i32 noundef %16) #33
  %18 = load i32, ptr %13, align 8, !tbaa !21
  %19 = tail call ptr @hypre_CAlloc(i32 noundef %18, i32 noundef 8) #33
  %20 = load i32, ptr %13, align 8, !tbaa !21
  %21 = tail call ptr @hypre_CAlloc(i32 noundef %20, i32 noundef 8) #33
  %22 = load ptr, ptr %12, align 8, !tbaa !74
  %23 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %12, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !75
  %25 = getelementptr inbounds %struct.hypre_BoxNeighbors_struct, ptr %12, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !76
  %27 = tail call ptr @hypre_BoxCreate() #33
  %28 = tail call ptr @hypre_BoxCreate() #33
  %29 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %22, i64 0, i32 1
  %30 = load i32, ptr %29, align 8, !tbaa !21
  %31 = tail call ptr @hypre_CAlloc(i32 noundef %30, i32 noundef 8) #33
  %32 = load i32, ptr %29, align 8, !tbaa !21
  %33 = tail call ptr @hypre_CAlloc(i32 noundef %32, i32 noundef 4) #33
  %34 = load i32, ptr %13, align 8, !tbaa !21
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %374

36:                                               ; preds = %6
  %37 = getelementptr inbounds [3 x i32], ptr %28, i64 0, i64 1
  %38 = getelementptr inbounds [3 x i32], ptr %28, i64 0, i64 2
  %39 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 0, i32 1
  %40 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 0, i32 1, i64 1
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 0, i32 1, i64 2
  %42 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 0, i32 1
  %43 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 0, i32 1, i64 2
  %44 = getelementptr inbounds [3 x i32], ptr %27, i64 0, i64 2
  br label %45

45:                                               ; preds = %369, %36
  %46 = phi i64 [ 0, %36 ], [ %370, %369 ]
  %47 = load ptr, ptr %8, align 8, !tbaa !23
  %48 = getelementptr inbounds %struct.hypre_Box_struct, ptr %47, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !7
  store i32 %49, ptr %28, align 4, !tbaa !7
  %50 = getelementptr inbounds [3 x i32], ptr %48, i64 0, i64 1
  %51 = load i32, ptr %50, align 4, !tbaa !7
  store i32 %51, ptr %37, align 4, !tbaa !7
  %52 = getelementptr inbounds [3 x i32], ptr %48, i64 0, i64 2
  %53 = load i32, ptr %52, align 4, !tbaa !7
  store i32 %53, ptr %38, align 4, !tbaa !7
  %54 = getelementptr inbounds %struct.hypre_Box_struct, ptr %47, i64 %46, i32 1
  %55 = load i32, ptr %54, align 4, !tbaa !7
  store i32 %55, ptr %39, align 4, !tbaa !7
  %56 = getelementptr inbounds %struct.hypre_Box_struct, ptr %47, i64 %46, i32 1, i64 1
  %57 = load i32, ptr %56, align 4, !tbaa !7
  store i32 %57, ptr %40, align 4, !tbaa !7
  %58 = getelementptr inbounds %struct.hypre_Box_struct, ptr %47, i64 %46, i32 1, i64 2
  %59 = load i32, ptr %58, align 4, !tbaa !7
  store i32 %59, ptr %41, align 4, !tbaa !7
  br label %65

60:                                               ; preds = %65
  %61 = load i32, ptr %29, align 8, !tbaa !21
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %150

63:                                               ; preds = %60
  %64 = getelementptr inbounds i32, ptr %10, i64 %46
  br label %87

65:                                               ; preds = %65, %45
  %66 = phi i64 [ 0, %45 ], [ %81, %65 ]
  %67 = getelementptr inbounds [3 x i32], ptr %48, i64 0, i64 %66
  %68 = load i32, ptr %67, align 4, !tbaa !7
  %69 = shl nuw nsw i64 %66, 1
  %70 = getelementptr inbounds i32, ptr %1, i64 %69
  %71 = load i32, ptr %70, align 4, !tbaa !7
  %72 = sub nsw i32 %68, %71
  %73 = getelementptr inbounds [3 x i32], ptr %28, i64 0, i64 %66
  store i32 %72, ptr %73, align 4, !tbaa !7
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %47, i64 %46, i32 1, i64 %66
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = or i64 %69, 1
  %77 = getelementptr inbounds i32, ptr %1, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = add nsw i32 %78, %75
  %80 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 0, i32 1, i64 %66
  store i32 %79, ptr %80, align 4, !tbaa !7
  %81 = add nuw nsw i64 %66, 1
  %82 = icmp eq i64 %81, 3
  br i1 %82, label %60, label %65, !llvm.loop !196

83:                                               ; preds = %129
  %.lcssa = phi i32 [ %130, %129 ]
  %84 = icmp sgt i32 %.lcssa, 0
  br i1 %84, label %85, label %150

85:                                               ; preds = %83
  %86 = zext i32 %.lcssa to i64
  br label %135

87:                                               ; preds = %129, %63
  %88 = phi i64 [ 0, %63 ], [ %131, %129 ]
  %89 = phi i32 [ 0, %63 ], [ %130, %129 ]
  %90 = load i32, ptr %64, align 4, !tbaa !7
  %91 = getelementptr inbounds i32, ptr %26, i64 %88
  %92 = load i32, ptr %91, align 4, !tbaa !7
  %93 = icmp eq i32 %90, %92
  br i1 %93, label %129, label %94

94:                                               ; preds = %87
  %95 = load ptr, ptr %22, align 8, !tbaa !23
  %96 = getelementptr inbounds %struct.hypre_Box_struct, ptr %95, i64 %88
  %97 = tail call i32 @hypre_IntersectBoxes(ptr noundef nonnull %28, ptr noundef %96, ptr noundef %27) #33
  %98 = load <2 x i32>, ptr %42, align 4, !tbaa !7
  %99 = load <2 x i32>, ptr %27, align 4, !tbaa !7
  %100 = sub nsw <2 x i32> %98, %99
  %101 = add nsw <2 x i32> %100, <i32 1, i32 1>
  %102 = icmp slt <2 x i32> %100, zeroinitializer
  %103 = select <2 x i1> %102, <2 x i32> zeroinitializer, <2 x i32> %101
  %104 = extractelement <2 x i32> %103, i64 0
  %105 = extractelement <2 x i32> %103, i64 1
  %106 = mul nsw i32 %105, %104
  %107 = load i32, ptr %43, align 4, !tbaa !7
  %108 = load i32, ptr %44, align 4, !tbaa !7
  %109 = sub nsw i32 %107, %108
  %110 = add nsw i32 %109, 1
  %111 = icmp slt i32 %109, 0
  %112 = select i1 %111, i32 0, i32 %110
  %113 = mul nsw i32 %106, %112
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %129, label %115

115:                                              ; preds = %94
  %116 = getelementptr inbounds ptr, ptr %31, i64 %88
  %117 = load ptr, ptr %116, align 8, !tbaa !14
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %125

119:                                              ; preds = %115
  %120 = tail call ptr @hypre_BoxArrayCreate(i32 noundef 0) #33
  store ptr %120, ptr %116, align 8, !tbaa !14
  %121 = sext i32 %89 to i64
  %122 = getelementptr inbounds i32, ptr %33, i64 %121
  %123 = trunc i64 %88 to i32
  store i32 %123, ptr %122, align 4, !tbaa !7
  %124 = add nsw i32 %89, 1
  br label %125

125:                                              ; preds = %119, %115
  %126 = phi ptr [ %120, %119 ], [ %117, %115 ]
  %127 = phi i32 [ %124, %119 ], [ %89, %115 ]
  %128 = tail call i32 @hypre_AppendBox(ptr noundef nonnull %27, ptr noundef %126) #33
  br label %129

129:                                              ; preds = %125, %94, %87
  %130 = phi i32 [ %127, %125 ], [ %89, %94 ], [ %89, %87 ]
  %131 = add nuw nsw i64 %88, 1
  %132 = load i32, ptr %29, align 8, !tbaa !21
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %131, %133
  br i1 %134, label %87, label %83, !llvm.loop !197

135:                                              ; preds = %135, %85
  %136 = phi i64 [ 0, %85 ], [ %148, %135 ]
  %137 = phi i32 [ 0, %85 ], [ %147, %135 ]
  %138 = getelementptr inbounds i32, ptr %33, i64 %136
  %139 = load i32, ptr %138, align 4, !tbaa !7
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds ptr, ptr %31, i64 %140
  %142 = load ptr, ptr %141, align 8, !tbaa !14
  %143 = tail call i32 @hypre_UnionBoxes(ptr noundef %142) #33
  %144 = load ptr, ptr %141, align 8, !tbaa !14
  %145 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %144, i64 0, i32 1
  %146 = load i32, ptr %145, align 8, !tbaa !21
  %147 = add nsw i32 %146, %137
  %148 = add nuw nsw i64 %136, 1
  %149 = icmp eq i64 %148, %86
  br i1 %149, label %150, label %135, !llvm.loop !198

150:                                              ; preds = %135, %83, %60
  %151 = phi i1 [ false, %83 ], [ false, %60 ], [ %84, %135 ]
  %152 = phi i32 [ %.lcssa, %83 ], [ 0, %60 ], [ %.lcssa, %135 ]
  %153 = phi i32 [ 0, %83 ], [ 0, %60 ], [ %147, %135 ]
  %154 = load ptr, ptr %17, align 8, !tbaa !42
  %155 = getelementptr inbounds ptr, ptr %154, i64 %46
  %156 = load ptr, ptr %155, align 8, !tbaa !14
  %157 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %156, i32 noundef %153) #33
  %158 = tail call ptr @hypre_CAlloc(i32 noundef %153, i32 noundef 4) #33
  %159 = getelementptr inbounds ptr, ptr %21, i64 %46
  store ptr %158, ptr %159, align 8, !tbaa !14
  br i1 %151, label %160, label %162

160:                                              ; preds = %150
  %161 = zext i32 %152 to i64
  br label %167

162:                                              ; preds = %214, %150
  %163 = load i32, ptr %29, align 8, !tbaa !21
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %305

165:                                              ; preds = %162
  %166 = getelementptr inbounds i32, ptr %10, i64 %46
  br label %223

167:                                              ; preds = %214, %160
  %168 = phi i64 [ 0, %160 ], [ %217, %214 ]
  %169 = phi i32 [ 0, %160 ], [ %215, %214 ]
  %170 = getelementptr inbounds i32, ptr %33, i64 %168
  %171 = load i32, ptr %170, align 4, !tbaa !7
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds ptr, ptr %31, i64 %172
  %174 = load ptr, ptr %173, align 8, !tbaa !14
  %175 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %174, i64 0, i32 1
  %176 = load i32, ptr %175, align 8, !tbaa !21
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %178, label %214

178:                                              ; preds = %167
  %179 = getelementptr inbounds i32, ptr %24, i64 %172
  %180 = load ptr, ptr %159, align 8, !tbaa !14
  %181 = load ptr, ptr %174, align 8, !tbaa !23
  %182 = load ptr, ptr %156, align 8, !tbaa !23
  %183 = sext i32 %169 to i64
  br label %184

184:                                              ; preds = %184, %178
  %185 = phi i64 [ 0, %178 ], [ %208, %184 ]
  %186 = phi i64 [ %183, %178 ], [ %207, %184 ]
  %187 = load i32, ptr %179, align 4, !tbaa !7
  %188 = getelementptr inbounds i32, ptr %180, i64 %186
  store i32 %187, ptr %188, align 4, !tbaa !7
  %189 = getelementptr inbounds %struct.hypre_Box_struct, ptr %181, i64 %185
  %190 = load i32, ptr %189, align 4, !tbaa !7
  %191 = getelementptr inbounds %struct.hypre_Box_struct, ptr %182, i64 %186
  store i32 %190, ptr %191, align 4, !tbaa !7
  %192 = getelementptr inbounds %struct.hypre_Box_struct, ptr %181, i64 %185, i32 0, i64 1
  %193 = load i32, ptr %192, align 4, !tbaa !7
  %194 = getelementptr inbounds %struct.hypre_Box_struct, ptr %182, i64 %186, i32 0, i64 1
  store i32 %193, ptr %194, align 4, !tbaa !7
  %195 = getelementptr inbounds %struct.hypre_Box_struct, ptr %181, i64 %185, i32 0, i64 2
  %196 = load i32, ptr %195, align 4, !tbaa !7
  %197 = getelementptr inbounds %struct.hypre_Box_struct, ptr %182, i64 %186, i32 0, i64 2
  store i32 %196, ptr %197, align 4, !tbaa !7
  %198 = getelementptr inbounds %struct.hypre_Box_struct, ptr %181, i64 %185, i32 1
  %199 = load i32, ptr %198, align 4, !tbaa !7
  %200 = getelementptr inbounds %struct.hypre_Box_struct, ptr %182, i64 %186, i32 1
  store i32 %199, ptr %200, align 4, !tbaa !7
  %201 = getelementptr inbounds %struct.hypre_Box_struct, ptr %181, i64 %185, i32 1, i64 1
  %202 = load i32, ptr %201, align 4, !tbaa !7
  %203 = getelementptr inbounds %struct.hypre_Box_struct, ptr %182, i64 %186, i32 1, i64 1
  store i32 %202, ptr %203, align 4, !tbaa !7
  %204 = getelementptr inbounds %struct.hypre_Box_struct, ptr %181, i64 %185, i32 1, i64 2
  %205 = load i32, ptr %204, align 4, !tbaa !7
  %206 = getelementptr inbounds %struct.hypre_Box_struct, ptr %182, i64 %186, i32 1, i64 2
  store i32 %205, ptr %206, align 4, !tbaa !7
  %207 = add nsw i64 %186, 1
  %208 = add nuw nsw i64 %185, 1
  %209 = load i32, ptr %175, align 8, !tbaa !21
  %210 = sext i32 %209 to i64
  %211 = icmp slt i64 %208, %210
  br i1 %211, label %184, label %212, !llvm.loop !199

212:                                              ; preds = %184
  %.lcssa1 = phi i64 [ %207, %184 ]
  %213 = trunc i64 %.lcssa1 to i32
  br label %214

214:                                              ; preds = %212, %167
  %215 = phi i32 [ %169, %167 ], [ %213, %212 ]
  %216 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef nonnull %174) #33
  store ptr null, ptr %173, align 8, !tbaa !14
  %217 = add nuw nsw i64 %168, 1
  %218 = icmp eq i64 %217, %161
  br i1 %218, label %162, label %167, !llvm.loop !200

219:                                              ; preds = %284
  %.lcssa2 = phi i32 [ %285, %284 ]
  %220 = icmp sgt i32 %.lcssa2, 0
  br i1 %220, label %221, label %305

221:                                              ; preds = %219
  %222 = zext i32 %.lcssa2 to i64
  br label %290

223:                                              ; preds = %284, %165
  %224 = phi i64 [ 0, %165 ], [ %286, %284 ]
  %225 = phi i32 [ 0, %165 ], [ %285, %284 ]
  %226 = load i32, ptr %166, align 4, !tbaa !7
  %227 = getelementptr inbounds i32, ptr %26, i64 %224
  %228 = load i32, ptr %227, align 4, !tbaa !7
  %229 = icmp eq i32 %226, %228
  br i1 %229, label %284, label %230

230:                                              ; preds = %223
  %231 = load ptr, ptr %22, align 8, !tbaa !23
  %232 = getelementptr inbounds %struct.hypre_Box_struct, ptr %231, i64 %224
  br label %233

233:                                              ; preds = %233, %230
  %234 = phi i64 [ 0, %230 ], [ %249, %233 ]
  %235 = getelementptr inbounds [3 x i32], ptr %232, i64 0, i64 %234
  %236 = load i32, ptr %235, align 4, !tbaa !7
  %237 = shl nuw nsw i64 %234, 1
  %238 = getelementptr inbounds i32, ptr %1, i64 %237
  %239 = load i32, ptr %238, align 4, !tbaa !7
  %240 = sub nsw i32 %236, %239
  %241 = getelementptr inbounds [3 x i32], ptr %28, i64 0, i64 %234
  store i32 %240, ptr %241, align 4, !tbaa !7
  %242 = getelementptr inbounds %struct.hypre_Box_struct, ptr %231, i64 %224, i32 1, i64 %234
  %243 = load i32, ptr %242, align 4, !tbaa !7
  %244 = or i64 %237, 1
  %245 = getelementptr inbounds i32, ptr %1, i64 %244
  %246 = load i32, ptr %245, align 4, !tbaa !7
  %247 = add nsw i32 %246, %243
  %248 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 0, i32 1, i64 %234
  store i32 %247, ptr %248, align 4, !tbaa !7
  %249 = add nuw nsw i64 %234, 1
  %250 = icmp eq i64 %249, 3
  br i1 %250, label %251, label %233, !llvm.loop !201

251:                                              ; preds = %233
  %252 = tail call i32 @hypre_IntersectBoxes(ptr noundef nonnull %48, ptr noundef nonnull %28, ptr noundef %27) #33
  %253 = load <2 x i32>, ptr %42, align 4, !tbaa !7
  %254 = load <2 x i32>, ptr %27, align 4, !tbaa !7
  %255 = sub nsw <2 x i32> %253, %254
  %256 = add nsw <2 x i32> %255, <i32 1, i32 1>
  %257 = icmp slt <2 x i32> %255, zeroinitializer
  %258 = select <2 x i1> %257, <2 x i32> zeroinitializer, <2 x i32> %256
  %259 = extractelement <2 x i32> %258, i64 0
  %260 = extractelement <2 x i32> %258, i64 1
  %261 = mul nsw i32 %260, %259
  %262 = load i32, ptr %43, align 4, !tbaa !7
  %263 = load i32, ptr %44, align 4, !tbaa !7
  %264 = sub nsw i32 %262, %263
  %265 = add nsw i32 %264, 1
  %266 = icmp slt i32 %264, 0
  %267 = select i1 %266, i32 0, i32 %265
  %268 = mul nsw i32 %261, %267
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %284, label %270

270:                                              ; preds = %251
  %271 = getelementptr inbounds ptr, ptr %31, i64 %224
  %272 = load ptr, ptr %271, align 8, !tbaa !14
  %273 = icmp eq ptr %272, null
  br i1 %273, label %274, label %280

274:                                              ; preds = %270
  %275 = tail call ptr @hypre_BoxArrayCreate(i32 noundef 0) #33
  store ptr %275, ptr %271, align 8, !tbaa !14
  %276 = sext i32 %225 to i64
  %277 = getelementptr inbounds i32, ptr %33, i64 %276
  %278 = trunc i64 %224 to i32
  store i32 %278, ptr %277, align 4, !tbaa !7
  %279 = add nsw i32 %225, 1
  br label %280

280:                                              ; preds = %274, %270
  %281 = phi ptr [ %275, %274 ], [ %272, %270 ]
  %282 = phi i32 [ %279, %274 ], [ %225, %270 ]
  %283 = tail call i32 @hypre_AppendBox(ptr noundef nonnull %27, ptr noundef %281) #33
  br label %284

284:                                              ; preds = %280, %251, %223
  %285 = phi i32 [ %282, %280 ], [ %225, %251 ], [ %225, %223 ]
  %286 = add nuw nsw i64 %224, 1
  %287 = load i32, ptr %29, align 8, !tbaa !21
  %288 = sext i32 %287 to i64
  %289 = icmp slt i64 %286, %288
  br i1 %289, label %223, label %219, !llvm.loop !202

290:                                              ; preds = %290, %221
  %291 = phi i64 [ 0, %221 ], [ %303, %290 ]
  %292 = phi i32 [ 0, %221 ], [ %302, %290 ]
  %293 = getelementptr inbounds i32, ptr %33, i64 %291
  %294 = load i32, ptr %293, align 4, !tbaa !7
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds ptr, ptr %31, i64 %295
  %297 = load ptr, ptr %296, align 8, !tbaa !14
  %298 = tail call i32 @hypre_UnionBoxes(ptr noundef %297) #33
  %299 = load ptr, ptr %296, align 8, !tbaa !14
  %300 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %299, i64 0, i32 1
  %301 = load i32, ptr %300, align 8, !tbaa !21
  %302 = add nsw i32 %301, %292
  %303 = add nuw nsw i64 %291, 1
  %304 = icmp eq i64 %303, %222
  br i1 %304, label %305, label %290, !llvm.loop !203

305:                                              ; preds = %290, %219, %162
  %306 = phi i1 [ false, %219 ], [ false, %162 ], [ %220, %290 ]
  %307 = phi i32 [ %.lcssa2, %219 ], [ 0, %162 ], [ %.lcssa2, %290 ]
  %308 = phi i32 [ 0, %219 ], [ 0, %162 ], [ %302, %290 ]
  %309 = load ptr, ptr %15, align 8, !tbaa !42
  %310 = getelementptr inbounds ptr, ptr %309, i64 %46
  %311 = load ptr, ptr %310, align 8, !tbaa !14
  %312 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %311, i32 noundef %308) #33
  %313 = tail call ptr @hypre_CAlloc(i32 noundef %308, i32 noundef 4) #33
  %314 = getelementptr inbounds ptr, ptr %19, i64 %46
  store ptr %313, ptr %314, align 8, !tbaa !14
  br i1 %306, label %315, label %369

315:                                              ; preds = %305
  %316 = zext i32 %307 to i64
  br label %317

317:                                              ; preds = %364, %315
  %318 = phi i64 [ 0, %315 ], [ %367, %364 ]
  %319 = phi i32 [ 0, %315 ], [ %365, %364 ]
  %320 = getelementptr inbounds i32, ptr %33, i64 %318
  %321 = load i32, ptr %320, align 4, !tbaa !7
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds ptr, ptr %31, i64 %322
  %324 = load ptr, ptr %323, align 8, !tbaa !14
  %325 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %324, i64 0, i32 1
  %326 = load i32, ptr %325, align 8, !tbaa !21
  %327 = icmp sgt i32 %326, 0
  br i1 %327, label %328, label %364

328:                                              ; preds = %317
  %329 = getelementptr inbounds i32, ptr %24, i64 %322
  %330 = load ptr, ptr %314, align 8, !tbaa !14
  %331 = load ptr, ptr %324, align 8, !tbaa !23
  %332 = load ptr, ptr %311, align 8, !tbaa !23
  %333 = sext i32 %319 to i64
  br label %334

334:                                              ; preds = %334, %328
  %335 = phi i64 [ 0, %328 ], [ %358, %334 ]
  %336 = phi i64 [ %333, %328 ], [ %357, %334 ]
  %337 = load i32, ptr %329, align 4, !tbaa !7
  %338 = getelementptr inbounds i32, ptr %330, i64 %336
  store i32 %337, ptr %338, align 4, !tbaa !7
  %339 = getelementptr inbounds %struct.hypre_Box_struct, ptr %331, i64 %335
  %340 = load i32, ptr %339, align 4, !tbaa !7
  %341 = getelementptr inbounds %struct.hypre_Box_struct, ptr %332, i64 %336
  store i32 %340, ptr %341, align 4, !tbaa !7
  %342 = getelementptr inbounds %struct.hypre_Box_struct, ptr %331, i64 %335, i32 0, i64 1
  %343 = load i32, ptr %342, align 4, !tbaa !7
  %344 = getelementptr inbounds %struct.hypre_Box_struct, ptr %332, i64 %336, i32 0, i64 1
  store i32 %343, ptr %344, align 4, !tbaa !7
  %345 = getelementptr inbounds %struct.hypre_Box_struct, ptr %331, i64 %335, i32 0, i64 2
  %346 = load i32, ptr %345, align 4, !tbaa !7
  %347 = getelementptr inbounds %struct.hypre_Box_struct, ptr %332, i64 %336, i32 0, i64 2
  store i32 %346, ptr %347, align 4, !tbaa !7
  %348 = getelementptr inbounds %struct.hypre_Box_struct, ptr %331, i64 %335, i32 1
  %349 = load i32, ptr %348, align 4, !tbaa !7
  %350 = getelementptr inbounds %struct.hypre_Box_struct, ptr %332, i64 %336, i32 1
  store i32 %349, ptr %350, align 4, !tbaa !7
  %351 = getelementptr inbounds %struct.hypre_Box_struct, ptr %331, i64 %335, i32 1, i64 1
  %352 = load i32, ptr %351, align 4, !tbaa !7
  %353 = getelementptr inbounds %struct.hypre_Box_struct, ptr %332, i64 %336, i32 1, i64 1
  store i32 %352, ptr %353, align 4, !tbaa !7
  %354 = getelementptr inbounds %struct.hypre_Box_struct, ptr %331, i64 %335, i32 1, i64 2
  %355 = load i32, ptr %354, align 4, !tbaa !7
  %356 = getelementptr inbounds %struct.hypre_Box_struct, ptr %332, i64 %336, i32 1, i64 2
  store i32 %355, ptr %356, align 4, !tbaa !7
  %357 = add nsw i64 %336, 1
  %358 = add nuw nsw i64 %335, 1
  %359 = load i32, ptr %325, align 8, !tbaa !21
  %360 = sext i32 %359 to i64
  %361 = icmp slt i64 %358, %360
  br i1 %361, label %334, label %362, !llvm.loop !204

362:                                              ; preds = %334
  %.lcssa3 = phi i64 [ %357, %334 ]
  %363 = trunc i64 %.lcssa3 to i32
  br label %364

364:                                              ; preds = %362, %317
  %365 = phi i32 [ %319, %317 ], [ %363, %362 ]
  %366 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef nonnull %324) #33
  store ptr null, ptr %323, align 8, !tbaa !14
  %367 = add nuw nsw i64 %318, 1
  %368 = icmp eq i64 %367, %316
  br i1 %368, label %369, label %317, !llvm.loop !205

369:                                              ; preds = %364, %305
  %370 = add nuw nsw i64 %46, 1
  %371 = load i32, ptr %13, align 8, !tbaa !21
  %372 = sext i32 %371 to i64
  %373 = icmp slt i64 %370, %372
  br i1 %373, label %45, label %374, !llvm.loop !206

374:                                              ; preds = %369, %6
  tail call void @hypre_Free(ptr noundef %31) #33
  tail call void @hypre_Free(ptr noundef %33) #33
  %375 = tail call i32 @hypre_BoxDestroy(ptr noundef %28) #33
  %376 = tail call i32 @hypre_BoxDestroy(ptr noundef %27) #33
  store ptr %15, ptr %2, align 8, !tbaa !14
  store ptr %17, ptr %3, align 8, !tbaa !14
  store ptr %19, ptr %4, align 8, !tbaa !14
  store ptr %21, ptr %5, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CreateComputeInfo(ptr noundef %0, ptr noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5, ptr nocapture noundef writeonly %6, ptr nocapture noundef writeonly %7) #0 {
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  %13 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !20
  %15 = call i32 @hypre_CreateCommInfoFromStencil(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12) #33
  %16 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %14, i64 0, i32 1
  %17 = load i32, ptr %16, align 8, !tbaa !21
  %18 = call ptr @hypre_BoxArrayArrayCreate(i32 noundef %17) #33
  %19 = load i32, ptr %16, align 8, !tbaa !21
  %20 = call ptr @hypre_BoxArrayArrayCreate(i32 noundef %19) #33
  %21 = load i32, ptr %16, align 8, !tbaa !21
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %52

23:                                               ; preds = %23, %8
  %24 = phi i64 [ %48, %23 ], [ 0, %8 ]
  %25 = load ptr, ptr %20, align 8, !tbaa !42
  %26 = getelementptr inbounds ptr, ptr %25, i64 %24
  %27 = load ptr, ptr %26, align 8, !tbaa !14
  %28 = call i32 @hypre_BoxArraySetSize(ptr noundef %27, i32 noundef 1) #33
  %29 = load ptr, ptr %27, align 8, !tbaa !23
  %30 = load ptr, ptr %14, align 8, !tbaa !23
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %24
  %32 = load i32, ptr %31, align 4, !tbaa !7
  store i32 %32, ptr %29, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %24, i32 0, i64 1
  %34 = load i32, ptr %33, align 4, !tbaa !7
  %35 = getelementptr inbounds [3 x i32], ptr %29, i64 0, i64 1
  store i32 %34, ptr %35, align 4, !tbaa !7
  %36 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %24, i32 0, i64 2
  %37 = load i32, ptr %36, align 4, !tbaa !7
  %38 = getelementptr inbounds [3 x i32], ptr %29, i64 0, i64 2
  store i32 %37, ptr %38, align 4, !tbaa !7
  %39 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %24, i32 1
  %40 = load i32, ptr %39, align 4, !tbaa !7
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 0, i32 1
  store i32 %40, ptr %41, align 4, !tbaa !7
  %42 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %24, i32 1, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !7
  %44 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 0, i32 1, i64 1
  store i32 %43, ptr %44, align 4, !tbaa !7
  %45 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %24, i32 1, i64 2
  %46 = load i32, ptr %45, align 4, !tbaa !7
  %47 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 0, i32 1, i64 2
  store i32 %46, ptr %47, align 4, !tbaa !7
  %48 = add nuw nsw i64 %24, 1
  %49 = load i32, ptr %16, align 8, !tbaa !21
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %48, %50
  br i1 %51, label %23, label %52, !llvm.loop !207

52:                                               ; preds = %23, %8
  %53 = load ptr, ptr %9, align 8, !tbaa !14
  store ptr %53, ptr %2, align 8, !tbaa !14
  %54 = load ptr, ptr %10, align 8, !tbaa !14
  store ptr %54, ptr %3, align 8, !tbaa !14
  %55 = load ptr, ptr %11, align 8, !tbaa !14
  store ptr %55, ptr %4, align 8, !tbaa !14
  %56 = load ptr, ptr %12, align 8, !tbaa !14
  store ptr %56, ptr %5, align 8, !tbaa !14
  store ptr %18, ptr %6, align 8, !tbaa !14
  store ptr %20, ptr %7, align 8, !tbaa !14
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_ComputePkgCreate(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7, ptr nocapture noundef readonly %8, ptr noundef %9, ptr noundef %10, i32 noundef %11, ptr nocapture noundef writeonly %12) #0 {
  %14 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 64) #33
  %15 = load i32, ptr %9, align 8, !tbaa !92
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %9, i64 0, i32 9
  %17 = tail call ptr @hypre_CommPkgCreate(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %10, ptr noundef %10, ptr noundef %4, ptr noundef %5, i32 noundef %11, i32 noundef %15, ptr noundef nonnull %16) #33
  store ptr %17, ptr %14, align 8, !tbaa !208
  %18 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 1
  store ptr %6, ptr %18, align 8, !tbaa !210
  %19 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 2
  store ptr %7, ptr %19, align 8, !tbaa !211
  %20 = load i32, ptr %8, align 4, !tbaa !7
  %21 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 3
  store i32 %20, ptr %21, align 8, !tbaa !7
  %22 = getelementptr inbounds i32, ptr %8, i64 1
  %23 = load i32, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 3, i64 1
  store i32 %23, ptr %24, align 4, !tbaa !7
  %25 = getelementptr inbounds i32, ptr %8, i64 2
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 3, i64 2
  store i32 %26, ptr %27, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 4
  %29 = tail call i32 @hypre_StructGridRef(ptr noundef nonnull %9, ptr noundef nonnull %28) #33
  %30 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 5
  store ptr %10, ptr %30, align 8, !tbaa !212
  %31 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 6
  store i32 %11, ptr %31, align 8, !tbaa !213
  store ptr %14, ptr %12, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_ComputePkgDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !208
  %5 = tail call i32 @hypre_CommPkgDestroy(ptr noundef %4) #33
  %6 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !210
  %8 = tail call i32 @hypre_BoxArrayArrayDestroy(ptr noundef %7) #33
  %9 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !211
  %11 = tail call i32 @hypre_BoxArrayArrayDestroy(ptr noundef %10) #33
  %12 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %0, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !214
  %14 = tail call i32 @hypre_StructGridDestroy(ptr noundef %13) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %15

15:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_InitializeIndtComputations(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !208
  %5 = tail call i32 @hypre_InitializeCommunication(ptr noundef %4, ptr noundef %1, ptr noundef %1, ptr noundef %2) #33
  ret i32 %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_FinalizeIndtComputations(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_FinalizeCommunication(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_CyclicReductionCreate(i32 noundef %0) #0 {
  %2 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 112) #33
  store i32 %0, ptr %2, align 8, !tbaa !215
  %3 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %2, i64 0, i32 2
  store i32 0, ptr %3, align 8, !tbaa !217
  %4 = tail call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str) #33
  %5 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %2, i64 0, i32 13
  store i32 %4, ptr %5, align 8, !tbaa !218
  %6 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %2, i64 0, i32 3
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, ptr %6, align 4, !tbaa !7
  %7 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %2, i64 0, i32 4, i64 1
  store i32 1, ptr %7, align 4, !tbaa !7
  %8 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %2, i64 0, i32 4, i64 2
  store i32 1, ptr %8, align 8, !tbaa !7
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_CycRedCreateCoarseOp(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = alloca [6 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #34
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %4, i8 0, i64 24, i1 false)
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 10
  %6 = load i32, ptr %5, align 8, !tbaa !19
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %3
  %9 = tail call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 12) #33
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i64 [ 0, %8 ], [ %16, %10 ]
  %12 = phi i32 [ -1, %8 ], [ %17, %10 ]
  %13 = getelementptr inbounds [3 x i32], ptr %9, i64 %11
  store i32 %12, ptr %13, align 4, !tbaa !7
  %14 = getelementptr inbounds [3 x i32], ptr %9, i64 %11, i64 1
  store i32 0, ptr %14, align 4, !tbaa !7
  %15 = getelementptr inbounds [3 x i32], ptr %9, i64 %11, i64 2
  store i32 0, ptr %15, align 4, !tbaa !7
  %16 = add nuw nsw i64 %11, 1
  %17 = add nsw i32 %12, 1
  %18 = icmp eq i64 %16, 3
  br i1 %18, label %30, label %10, !llvm.loop !219

19:                                               ; preds = %3
  %20 = tail call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 12) #33
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %27, %21 ]
  %23 = phi i32 [ -1, %19 ], [ %28, %21 ]
  %24 = getelementptr inbounds [3 x i32], ptr %20, i64 %22
  store i32 %23, ptr %24, align 4, !tbaa !7
  %25 = getelementptr inbounds [3 x i32], ptr %20, i64 %22, i64 1
  store i32 0, ptr %25, align 4, !tbaa !7
  %26 = getelementptr inbounds [3 x i32], ptr %20, i64 %22, i64 2
  store i32 0, ptr %26, align 4, !tbaa !7
  %27 = add nuw nsw i64 %22, 1
  %28 = add nsw i32 %23, 1
  %29 = icmp eq i64 %27, 2
  br i1 %29, label %30, label %21, !llvm.loop !220

30:                                               ; preds = %21, %10
  %31 = phi i32 [ 3, %10 ], [ 2, %21 ]
  %32 = phi ptr [ %9, %10 ], [ %20, %21 ]
  %33 = tail call ptr @hypre_StructStencilCreate(i32 noundef 1, i32 noundef %31, ptr noundef nonnull %32) #33
  %34 = load i32, ptr %0, align 8, !tbaa !221
  %35 = tail call ptr @hypre_StructMatrixCreate(i32 noundef %34, ptr noundef %1, ptr noundef %33) #33
  %36 = tail call i32 @hypre_StructStencilDestroy(ptr noundef %33) #33
  %37 = load i32, ptr %5, align 8, !tbaa !19
  %38 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %35, i64 0, i32 10
  store i32 %37, ptr %38, align 8, !tbaa !19
  %39 = shl nsw i32 %2, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [6 x i32], ptr %4, i64 0, i64 %40
  store i32 1, ptr %41, align 8, !tbaa !7
  %42 = load i32, ptr %5, align 8, !tbaa !19
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %30
  %45 = or i32 %39, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [6 x i32], ptr %4, i64 0, i64 %46
  store i32 1, ptr %47, align 4, !tbaa !7
  br label %48

48:                                               ; preds = %44, %30
  %49 = call i32 @hypre_StructMatrixSetNumGhost(ptr noundef nonnull %35, ptr noundef nonnull %4) #33
  %50 = call i32 @hypre_StructMatrixInitializeShell(ptr noundef nonnull %35) #33
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #34
  ret ptr %35
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CycRedSetupCoarseOp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 4
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  %8 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !15
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %9, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !195
  %12 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !15
  %14 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %13, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !20
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %13, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !195
  %18 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %15, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !21
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %383

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %23 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %24 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %25 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  %26 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 10
  %27 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %28 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %29 = getelementptr inbounds i32, ptr %3, i64 1
  %30 = getelementptr inbounds i32, ptr %3, i64 2
  %31 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %32 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  br label %33

33:                                               ; preds = %378, %21
  %34 = phi i64 [ 0, %21 ], [ %379, %378 ]
  %35 = phi i64 [ 0, %21 ], [ %.lcssa2, %378 ]
  %36 = getelementptr inbounds i32, ptr %17, i64 %34
  %37 = load i32, ptr %36, align 4, !tbaa !7
  %38 = shl i64 %35, 32
  %39 = ashr exact i64 %38, 32
  br label %40

40:                                               ; preds = %40, %33
  %41 = phi i64 [ %45, %40 ], [ %39, %33 ]
  %42 = getelementptr inbounds i32, ptr %11, i64 %41
  %43 = load i32, ptr %42, align 4, !tbaa !7
  %44 = icmp eq i32 %43, %37
  %45 = add i64 %41, 1
  br i1 %44, label %46, label %40, !llvm.loop !222

46:                                               ; preds = %40
  %.lcssa2 = phi i64 [ %41, %40 ]
  %47 = trunc i64 %.lcssa2 to i32
  %48 = load ptr, ptr %15, align 8, !tbaa !23
  %49 = getelementptr inbounds %struct.hypre_Box_struct, ptr %48, i64 %34
  %50 = call i32 @hypre_StructMapCoarseToFine(ptr noundef %49, ptr noundef %2, ptr noundef %3, ptr noundef nonnull %6) #33
  %51 = load ptr, ptr %22, align 8, !tbaa !24
  %52 = load ptr, ptr %51, align 8, !tbaa !23
  %53 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 %.lcssa2
  %54 = load ptr, ptr %23, align 8, !tbaa !24
  %55 = load ptr, ptr %54, align 8, !tbaa !23
  %56 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %34
  store i32 0, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %57 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %5) #33
  store i32 -1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %58 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %5) #33
  store i32 1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %59 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %5) #33
  store i32 0, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %60 = trunc i64 %34 to i32
  %61 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %60, ptr noundef nonnull %5) #33
  store i32 -1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %62 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %60, ptr noundef nonnull %5) #33
  %63 = load i32, ptr %26, align 8, !tbaa !19
  %64 = icmp eq i32 %63, 0
  store i32 1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  br i1 %64, label %69, label %65

65:                                               ; preds = %46
  %66 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 %.lcssa2, i32 1
  %67 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 %.lcssa2, i32 1, i64 1
  %68 = getelementptr inbounds [3 x i32], ptr %53, i64 0, i64 1
  br label %230

69:                                               ; preds = %46
  %70 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %1, i32 noundef %60, ptr noundef nonnull %5) #33
  %71 = load i32, ptr %26, align 8, !tbaa !19
  store i32 1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %72 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 %.lcssa2, i32 1
  %73 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 %.lcssa2, i32 1, i64 1
  %74 = getelementptr inbounds [3 x i32], ptr %53, i64 0, i64 1
  %75 = icmp eq i32 %71, 0
  br i1 %75, label %76, label %230

76:                                               ; preds = %69
  %77 = call i32 @hypre_BoxGetSize(ptr noundef %49, ptr noundef nonnull %7) #33
  %78 = load i32, ptr %3, align 4, !tbaa !7
  %79 = load i32, ptr %7, align 4, !tbaa !7
  %80 = load i32, ptr %31, align 4, !tbaa !7
  %81 = load i32, ptr %32, align 4, !tbaa !7
  %82 = call i32 @llvm.smax.i32(i32 %80, i32 %79)
  %83 = call i32 @llvm.smax.i32(i32 %81, i32 %82)
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %378

85:                                               ; preds = %76
  %86 = load i32, ptr %72, align 4, !tbaa !7
  %87 = load i32, ptr %53, align 4, !tbaa !7
  %88 = sub nsw i32 %86, %87
  %89 = icmp slt i32 %88, 0
  %90 = add nsw i32 %88, 1
  %91 = select i1 %89, i32 0, i32 %90
  %92 = load i32, ptr %73, align 4, !tbaa !7
  %93 = load i32, ptr %74, align 4, !tbaa !7
  %94 = sub nsw i32 %92, %93
  %95 = icmp slt i32 %94, 0
  %96 = add nsw i32 %94, 1
  %97 = select i1 %95, i32 0, i32 %96
  %98 = mul i32 %91, %97
  %99 = load i32, ptr %30, align 4, !tbaa !7
  %100 = mul i32 %98, %99
  %101 = load i32, ptr %29, align 4, !tbaa !7
  %102 = mul nsw i32 %101, %91
  %103 = load i32, ptr %56, align 4, !tbaa !7
  %104 = getelementptr inbounds [3 x i32], ptr %56, i64 0, i64 1
  %105 = load i32, ptr %104, align 4, !tbaa !7
  %106 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %34, i32 1, i64 1
  %107 = load i32, ptr %106, align 4, !tbaa !7
  %108 = sub nsw i32 %107, %105
  %109 = icmp slt i32 %108, 0
  %110 = add nsw i32 %108, 1
  %111 = select i1 %109, i32 0, i32 %110
  %112 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %34, i32 1
  %113 = load i32, ptr %112, align 4, !tbaa !7
  %114 = sub nsw i32 %113, %103
  %115 = icmp slt i32 %114, 0
  %116 = add nsw i32 %114, 1
  %117 = select i1 %115, i32 0, i32 %116
  %118 = icmp sgt i32 %81, 0
  %119 = icmp sgt i32 %80, 0
  %120 = icmp sgt i32 %79, 0
  %121 = mul nsw i32 %79, %78
  %122 = sub i32 %102, %121
  %123 = sub i32 %117, %79
  %124 = mul nsw i32 %80, %102
  %125 = sub i32 %100, %124
  %126 = sub i32 %111, %80
  %127 = mul i32 %126, %117
  br i1 %118, label %128, label %378

128:                                              ; preds = %85
  %129 = load i32, ptr %6, align 4, !tbaa !7
  %130 = sub i32 %129, %87
  %131 = load i32, ptr %27, align 4, !tbaa !7
  %132 = sub i32 %131, %93
  %133 = load i32, ptr %28, align 4, !tbaa !7
  %134 = getelementptr inbounds [3 x i32], ptr %53, i64 0, i64 2
  %135 = load i32, ptr %134, align 4, !tbaa !7
  %136 = sub nsw i32 %133, %135
  %137 = mul nsw i32 %97, %136
  %138 = add nsw i32 %132, %137
  %139 = mul nsw i32 %138, %91
  %140 = add nsw i32 %130, %139
  %141 = load i32, ptr %49, align 4, !tbaa !7
  %142 = sub i32 %141, %103
  %143 = getelementptr inbounds i32, ptr %49, i64 1
  %144 = load i32, ptr %143, align 4, !tbaa !7
  %145 = sub i32 %144, %105
  %146 = getelementptr inbounds i32, ptr %49, i64 2
  %147 = load i32, ptr %146, align 4, !tbaa !7
  %148 = getelementptr inbounds [3 x i32], ptr %56, i64 0, i64 2
  %149 = load i32, ptr %148, align 4, !tbaa !7
  %150 = sub nsw i32 %147, %149
  %151 = mul nsw i32 %111, %150
  %152 = add nsw i32 %145, %151
  %153 = mul nsw i32 %152, %117
  %154 = add nsw i32 %142, %153
  %155 = sext i32 %78 to i64
  br label %156

156:                                              ; preds = %223, %128
  %157 = phi i32 [ %228, %223 ], [ 0, %128 ]
  %158 = phi i32 [ %226, %223 ], [ %140, %128 ]
  %159 = phi i32 [ %227, %223 ], [ %154, %128 ]
  br i1 %119, label %160, label %223

160:                                              ; preds = %216, %156
  %161 = phi i32 [ %221, %216 ], [ 0, %156 ]
  %162 = phi i32 [ %219, %216 ], [ %158, %156 ]
  %163 = phi i32 [ %220, %216 ], [ %159, %156 ]
  br i1 %120, label %164, label %216

164:                                              ; preds = %160
  %165 = sext i32 %162 to i64
  %166 = sext i32 %163 to i64
  br label %167

167:                                              ; preds = %167, %164
  %168 = phi i64 [ %166, %164 ], [ %210, %167 ]
  %169 = phi i64 [ %165, %164 ], [ %209, %167 ]
  %170 = phi i32 [ 0, %164 ], [ %211, %167 ]
  %171 = add nsw i64 %169, -1
  %172 = add nsw i64 %169, 1
  %173 = getelementptr inbounds double, ptr %58, i64 %169
  %174 = load double, ptr %173, align 8, !tbaa !29
  %175 = fneg double %174
  %176 = getelementptr inbounds double, ptr %58, i64 %171
  %177 = load double, ptr %176, align 8, !tbaa !29
  %178 = fmul double %177, %175
  %179 = getelementptr inbounds double, ptr %57, i64 %171
  %180 = load double, ptr %179, align 8, !tbaa !29
  %181 = fdiv double %178, %180
  %182 = getelementptr inbounds double, ptr %62, i64 %168
  store double %181, ptr %182, align 8, !tbaa !29
  %183 = getelementptr inbounds double, ptr %57, i64 %169
  %184 = load double, ptr %183, align 8, !tbaa !29
  %185 = getelementptr inbounds double, ptr %59, i64 %171
  %186 = load double, ptr %179, align 8, !tbaa !29
  %187 = getelementptr inbounds double, ptr %59, i64 %169
  %188 = getelementptr inbounds double, ptr %57, i64 %172
  %189 = load double, ptr %188, align 8, !tbaa !29
  %190 = load <2 x double>, ptr %185, align 8, !tbaa !29
  %191 = load <2 x double>, ptr %173, align 8, !tbaa !29
  %192 = fmul <2 x double> %190, %191
  %193 = insertelement <2 x double> poison, double %186, i64 0
  %194 = insertelement <2 x double> %193, double %189, i64 1
  %195 = fdiv <2 x double> %192, %194
  %196 = extractelement <2 x double> %195, i64 0
  %197 = fsub double %184, %196
  %198 = extractelement <2 x double> %195, i64 1
  %199 = fsub double %197, %198
  %200 = getelementptr inbounds double, ptr %61, i64 %168
  store double %199, ptr %200, align 8, !tbaa !29
  %201 = load double, ptr %187, align 8, !tbaa !29
  %202 = fneg double %201
  %203 = getelementptr inbounds double, ptr %59, i64 %172
  %204 = load double, ptr %203, align 8, !tbaa !29
  %205 = fmul double %204, %202
  %206 = load double, ptr %188, align 8, !tbaa !29
  %207 = fdiv double %205, %206
  %208 = getelementptr inbounds double, ptr %70, i64 %168
  store double %207, ptr %208, align 8, !tbaa !29
  %209 = add i64 %169, %155
  %210 = add nsw i64 %168, 1
  %211 = add nuw nsw i32 %170, 1
  %212 = icmp eq i32 %211, %79
  br i1 %212, label %213, label %167, !llvm.loop !223

213:                                              ; preds = %167
  %.lcssa6 = phi i64 [ %209, %167 ]
  %.lcssa5 = phi i64 [ %210, %167 ]
  %214 = trunc i64 %.lcssa5 to i32
  %215 = trunc i64 %.lcssa6 to i32
  br label %216

216:                                              ; preds = %213, %160
  %217 = phi i32 [ %163, %160 ], [ %214, %213 ]
  %218 = phi i32 [ %162, %160 ], [ %215, %213 ]
  %219 = add nsw i32 %122, %218
  %220 = add nsw i32 %123, %217
  %221 = add nuw nsw i32 %161, 1
  %222 = icmp eq i32 %221, %80
  br i1 %222, label %223, label %160, !llvm.loop !224

223:                                              ; preds = %216, %156
  %224 = phi i32 [ %159, %156 ], [ %220, %216 ]
  %225 = phi i32 [ %158, %156 ], [ %219, %216 ]
  %226 = add nsw i32 %125, %225
  %227 = add nsw i32 %224, %127
  %228 = add nuw nsw i32 %157, 1
  %229 = icmp eq i32 %228, %81
  br i1 %229, label %378, label %156, !llvm.loop !225

230:                                              ; preds = %69, %65
  %231 = phi ptr [ %68, %65 ], [ %74, %69 ]
  %232 = phi ptr [ %67, %65 ], [ %73, %69 ]
  %233 = phi ptr [ %66, %65 ], [ %72, %69 ]
  %234 = call i32 @hypre_BoxGetSize(ptr noundef %49, ptr noundef nonnull %7) #33
  %235 = load i32, ptr %3, align 4, !tbaa !7
  %236 = load i32, ptr %7, align 4, !tbaa !7
  %237 = load i32, ptr %31, align 4, !tbaa !7
  %238 = load i32, ptr %32, align 4, !tbaa !7
  %239 = call i32 @llvm.smax.i32(i32 %237, i32 %236)
  %240 = call i32 @llvm.smax.i32(i32 %238, i32 %239)
  %241 = icmp sgt i32 %240, 0
  br i1 %241, label %242, label %378

242:                                              ; preds = %230
  %243 = load i32, ptr %233, align 4, !tbaa !7
  %244 = load i32, ptr %53, align 4, !tbaa !7
  %245 = sub nsw i32 %243, %244
  %246 = icmp slt i32 %245, 0
  %247 = add nsw i32 %245, 1
  %248 = select i1 %246, i32 0, i32 %247
  %249 = load i32, ptr %232, align 4, !tbaa !7
  %250 = load i32, ptr %231, align 4, !tbaa !7
  %251 = sub nsw i32 %249, %250
  %252 = icmp slt i32 %251, 0
  %253 = add nsw i32 %251, 1
  %254 = select i1 %252, i32 0, i32 %253
  %255 = mul i32 %248, %254
  %256 = load i32, ptr %30, align 4, !tbaa !7
  %257 = mul i32 %255, %256
  %258 = load i32, ptr %29, align 4, !tbaa !7
  %259 = mul nsw i32 %258, %248
  %260 = load i32, ptr %56, align 4, !tbaa !7
  %261 = getelementptr inbounds [3 x i32], ptr %56, i64 0, i64 1
  %262 = load i32, ptr %261, align 4, !tbaa !7
  %263 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %34, i32 1, i64 1
  %264 = load i32, ptr %263, align 4, !tbaa !7
  %265 = sub nsw i32 %264, %262
  %266 = icmp slt i32 %265, 0
  %267 = add nsw i32 %265, 1
  %268 = select i1 %266, i32 0, i32 %267
  %269 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %34, i32 1
  %270 = load i32, ptr %269, align 4, !tbaa !7
  %271 = sub nsw i32 %270, %260
  %272 = icmp slt i32 %271, 0
  %273 = add nsw i32 %271, 1
  %274 = select i1 %272, i32 0, i32 %273
  %275 = icmp sgt i32 %238, 0
  %276 = icmp sgt i32 %237, 0
  %277 = icmp sgt i32 %236, 0
  %278 = mul nsw i32 %236, %235
  %279 = sub i32 %259, %278
  %280 = sub i32 %274, %236
  %281 = mul nsw i32 %237, %259
  %282 = sub i32 %257, %281
  %283 = sub i32 %268, %237
  %284 = mul i32 %283, %274
  br i1 %275, label %285, label %378

285:                                              ; preds = %242
  %286 = load i32, ptr %6, align 4, !tbaa !7
  %287 = sub i32 %286, %244
  %288 = load i32, ptr %27, align 4, !tbaa !7
  %289 = sub i32 %288, %250
  %290 = load i32, ptr %28, align 4, !tbaa !7
  %291 = getelementptr inbounds [3 x i32], ptr %53, i64 0, i64 2
  %292 = load i32, ptr %291, align 4, !tbaa !7
  %293 = sub nsw i32 %290, %292
  %294 = mul nsw i32 %254, %293
  %295 = add nsw i32 %289, %294
  %296 = mul nsw i32 %295, %248
  %297 = add nsw i32 %287, %296
  %298 = load i32, ptr %49, align 4, !tbaa !7
  %299 = sub i32 %298, %260
  %300 = getelementptr inbounds i32, ptr %49, i64 1
  %301 = load i32, ptr %300, align 4, !tbaa !7
  %302 = sub i32 %301, %262
  %303 = getelementptr inbounds i32, ptr %49, i64 2
  %304 = load i32, ptr %303, align 4, !tbaa !7
  %305 = getelementptr inbounds [3 x i32], ptr %56, i64 0, i64 2
  %306 = load i32, ptr %305, align 4, !tbaa !7
  %307 = sub nsw i32 %304, %306
  %308 = mul nsw i32 %268, %307
  %309 = add nsw i32 %302, %308
  %310 = mul nsw i32 %309, %274
  %311 = add nsw i32 %299, %310
  %312 = sext i32 %235 to i64
  br label %313

313:                                              ; preds = %371, %285
  %314 = phi i32 [ %376, %371 ], [ 0, %285 ]
  %315 = phi i32 [ %374, %371 ], [ %297, %285 ]
  %316 = phi i32 [ %375, %371 ], [ %311, %285 ]
  br i1 %276, label %317, label %371

317:                                              ; preds = %364, %313
  %318 = phi i32 [ %369, %364 ], [ 0, %313 ]
  %319 = phi i32 [ %367, %364 ], [ %315, %313 ]
  %320 = phi i32 [ %368, %364 ], [ %316, %313 ]
  br i1 %277, label %321, label %364

321:                                              ; preds = %317
  %322 = sext i32 %319 to i64
  %323 = sext i32 %320 to i64
  br label %324

324:                                              ; preds = %324, %321
  %325 = phi i64 [ %323, %321 ], [ %358, %324 ]
  %326 = phi i64 [ %322, %321 ], [ %357, %324 ]
  %327 = phi i32 [ 0, %321 ], [ %359, %324 ]
  %328 = add nsw i64 %326, -1
  %329 = add nsw i64 %326, 1
  %330 = getelementptr inbounds double, ptr %58, i64 %326
  %331 = load double, ptr %330, align 8, !tbaa !29
  %332 = fneg double %331
  %333 = getelementptr inbounds double, ptr %58, i64 %328
  %334 = load double, ptr %333, align 8, !tbaa !29
  %335 = fmul double %334, %332
  %336 = getelementptr inbounds double, ptr %57, i64 %328
  %337 = load double, ptr %336, align 8, !tbaa !29
  %338 = fdiv double %335, %337
  %339 = getelementptr inbounds double, ptr %62, i64 %325
  store double %338, ptr %339, align 8, !tbaa !29
  %340 = getelementptr inbounds double, ptr %57, i64 %326
  %341 = load double, ptr %340, align 8, !tbaa !29
  %342 = getelementptr inbounds double, ptr %59, i64 %328
  %343 = load double, ptr %336, align 8, !tbaa !29
  %344 = getelementptr inbounds double, ptr %57, i64 %329
  %345 = load double, ptr %344, align 8, !tbaa !29
  %346 = load <2 x double>, ptr %342, align 8, !tbaa !29
  %347 = load <2 x double>, ptr %330, align 8, !tbaa !29
  %348 = fmul <2 x double> %346, %347
  %349 = insertelement <2 x double> poison, double %343, i64 0
  %350 = insertelement <2 x double> %349, double %345, i64 1
  %351 = fdiv <2 x double> %348, %350
  %352 = extractelement <2 x double> %351, i64 0
  %353 = fsub double %341, %352
  %354 = extractelement <2 x double> %351, i64 1
  %355 = fsub double %353, %354
  %356 = getelementptr inbounds double, ptr %61, i64 %325
  store double %355, ptr %356, align 8, !tbaa !29
  %357 = add i64 %326, %312
  %358 = add nsw i64 %325, 1
  %359 = add nuw nsw i32 %327, 1
  %360 = icmp eq i32 %359, %236
  br i1 %360, label %361, label %324, !llvm.loop !226

361:                                              ; preds = %324
  %.lcssa4 = phi i64 [ %357, %324 ]
  %.lcssa3 = phi i64 [ %358, %324 ]
  %362 = trunc i64 %.lcssa3 to i32
  %363 = trunc i64 %.lcssa4 to i32
  br label %364

364:                                              ; preds = %361, %317
  %365 = phi i32 [ %320, %317 ], [ %362, %361 ]
  %366 = phi i32 [ %319, %317 ], [ %363, %361 ]
  %367 = add nsw i32 %279, %366
  %368 = add nsw i32 %280, %365
  %369 = add nuw nsw i32 %318, 1
  %370 = icmp eq i32 %369, %237
  br i1 %370, label %371, label %317, !llvm.loop !227

371:                                              ; preds = %364, %313
  %372 = phi i32 [ %316, %313 ], [ %368, %364 ]
  %373 = phi i32 [ %315, %313 ], [ %367, %364 ]
  %374 = add nsw i32 %282, %373
  %375 = add nsw i32 %372, %284
  %376 = add nuw nsw i32 %314, 1
  %377 = icmp eq i32 %376, %238
  br i1 %377, label %378, label %313, !llvm.loop !228

378:                                              ; preds = %371, %242, %230, %223, %85, %76
  %379 = add nuw nsw i64 %34, 1
  %380 = load i32, ptr %18, align 8, !tbaa !21
  %381 = sext i32 %380 to i64
  %382 = icmp slt i64 %379, %381
  br i1 %382, label %33, label %383, !llvm.loop !229

383:                                              ; preds = %378, %4
  %384 = call i32 @hypre_StructMatrixAssemble(ptr noundef %1) #33
  %385 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %13, i64 0, i32 9
  %386 = load i32, ptr %385, align 8, !tbaa !7
  %387 = icmp eq i32 %386, 1
  br i1 %387, label %388, label %574

388:                                              ; preds = %383
  %389 = load i32, ptr %18, align 8, !tbaa !21
  %390 = icmp sgt i32 %389, 0
  br i1 %390, label %391, label %574

391:                                              ; preds = %388
  %392 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %393 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %394 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  %395 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 10
  %396 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %397 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  br label %398

398:                                              ; preds = %569, %391
  %399 = phi i64 [ 0, %391 ], [ %570, %569 ]
  %400 = load ptr, ptr %15, align 8, !tbaa !23
  %401 = getelementptr inbounds %struct.hypre_Box_struct, ptr %400, i64 %399
  %402 = load ptr, ptr %392, align 8, !tbaa !24
  %403 = load ptr, ptr %402, align 8, !tbaa !23
  %404 = getelementptr inbounds %struct.hypre_Box_struct, ptr %403, i64 %399
  store i32 0, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %393, align 4, !tbaa !7
  store i32 0, ptr %394, align 4, !tbaa !7
  %405 = trunc i64 %399 to i32
  %406 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %405, ptr noundef nonnull %5) #33
  store i32 -1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %393, align 4, !tbaa !7
  store i32 0, ptr %394, align 4, !tbaa !7
  %407 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %405, ptr noundef nonnull %5) #33
  %408 = load i32, ptr %395, align 8, !tbaa !19
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %493

410:                                              ; preds = %398
  store i32 1, ptr %5, align 4, !tbaa !7
  store i32 0, ptr %393, align 4, !tbaa !7
  store i32 0, ptr %394, align 4, !tbaa !7
  %411 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %1, i32 noundef %405, ptr noundef nonnull %5) #33
  %412 = load i32, ptr %395, align 8, !tbaa !19
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %414, label %493

414:                                              ; preds = %410
  %415 = call i32 @hypre_BoxGetSize(ptr noundef %401, ptr noundef nonnull %7) #33
  %416 = load i32, ptr %7, align 4, !tbaa !7
  %417 = load i32, ptr %396, align 4, !tbaa !7
  %418 = load i32, ptr %397, align 4, !tbaa !7
  %419 = call i32 @llvm.smax.i32(i32 %417, i32 %416)
  %420 = call i32 @llvm.smax.i32(i32 %418, i32 %419)
  %421 = icmp sgt i32 %420, 0
  br i1 %421, label %422, label %569

422:                                              ; preds = %414
  %423 = load i32, ptr %404, align 4, !tbaa !7
  %424 = getelementptr inbounds [3 x i32], ptr %404, i64 0, i64 1
  %425 = load i32, ptr %424, align 4, !tbaa !7
  %426 = getelementptr inbounds %struct.hypre_Box_struct, ptr %403, i64 %399, i32 1, i64 1
  %427 = load i32, ptr %426, align 4, !tbaa !7
  %428 = sub nsw i32 %427, %425
  %429 = icmp slt i32 %428, 0
  %430 = add nsw i32 %428, 1
  %431 = select i1 %429, i32 0, i32 %430
  %432 = getelementptr inbounds %struct.hypre_Box_struct, ptr %403, i64 %399, i32 1
  %433 = load i32, ptr %432, align 4, !tbaa !7
  %434 = sub nsw i32 %433, %423
  %435 = icmp slt i32 %434, 0
  %436 = add nsw i32 %434, 1
  %437 = select i1 %435, i32 0, i32 %436
  %438 = icmp sgt i32 %418, 0
  %439 = icmp sgt i32 %417, 0
  %440 = icmp sgt i32 %416, 0
  %441 = sub i32 %437, %416
  %442 = sub i32 %431, %417
  %443 = mul i32 %437, %442
  br i1 %438, label %444, label %569

444:                                              ; preds = %422
  %445 = load i32, ptr %401, align 4, !tbaa !7
  %446 = sub i32 %445, %423
  %447 = getelementptr inbounds i32, ptr %401, i64 1
  %448 = load i32, ptr %447, align 4, !tbaa !7
  %449 = sub i32 %448, %425
  %450 = getelementptr inbounds i32, ptr %401, i64 2
  %451 = load i32, ptr %450, align 4, !tbaa !7
  %452 = getelementptr inbounds [3 x i32], ptr %404, i64 0, i64 2
  %453 = load i32, ptr %452, align 4, !tbaa !7
  %454 = sub nsw i32 %451, %453
  %455 = mul nsw i32 %431, %454
  %456 = add nsw i32 %449, %455
  %457 = mul nsw i32 %456, %437
  %458 = add nsw i32 %446, %457
  br label %459

459:                                              ; preds = %488, %444
  %460 = phi i32 [ %491, %488 ], [ 0, %444 ]
  %461 = phi i32 [ %490, %488 ], [ %458, %444 ]
  br i1 %439, label %462, label %488

462:                                              ; preds = %483, %459
  %463 = phi i32 [ %486, %483 ], [ 0, %459 ]
  %464 = phi i32 [ %485, %483 ], [ %461, %459 ]
  br i1 %440, label %465, label %483

465:                                              ; preds = %462
  %466 = sext i32 %464 to i64
  br label %467

467:                                              ; preds = %467, %465
  %468 = phi i64 [ %466, %465 ], [ %478, %467 ]
  %469 = phi i32 [ 0, %465 ], [ %479, %467 ]
  %470 = getelementptr inbounds double, ptr %407, i64 %468
  %471 = load double, ptr %470, align 8, !tbaa !29
  %472 = getelementptr inbounds double, ptr %411, i64 %468
  %473 = load double, ptr %472, align 8, !tbaa !29
  %474 = fadd double %471, %473
  %475 = getelementptr inbounds double, ptr %406, i64 %468
  %476 = load double, ptr %475, align 8, !tbaa !29
  %477 = fadd double %476, %474
  store double %477, ptr %475, align 8, !tbaa !29
  store double 0.000000e+00, ptr %470, align 8, !tbaa !29
  store double 0.000000e+00, ptr %472, align 8, !tbaa !29
  %478 = add nsw i64 %468, 1
  %479 = add nuw nsw i32 %469, 1
  %480 = icmp eq i32 %479, %416
  br i1 %480, label %481, label %467, !llvm.loop !230

481:                                              ; preds = %467
  %.lcssa1 = phi i64 [ %478, %467 ]
  %482 = trunc i64 %.lcssa1 to i32
  br label %483

483:                                              ; preds = %481, %462
  %484 = phi i32 [ %464, %462 ], [ %482, %481 ]
  %485 = add nsw i32 %441, %484
  %486 = add nuw nsw i32 %463, 1
  %487 = icmp eq i32 %486, %417
  br i1 %487, label %488, label %462, !llvm.loop !231

488:                                              ; preds = %483, %459
  %489 = phi i32 [ %461, %459 ], [ %485, %483 ]
  %490 = add nsw i32 %489, %443
  %491 = add nuw nsw i32 %460, 1
  %492 = icmp eq i32 %491, %418
  br i1 %492, label %569, label %459, !llvm.loop !232

493:                                              ; preds = %410, %398
  %494 = call i32 @hypre_BoxGetSize(ptr noundef %401, ptr noundef nonnull %7) #33
  %495 = load i32, ptr %7, align 4, !tbaa !7
  %496 = load i32, ptr %396, align 4, !tbaa !7
  %497 = load i32, ptr %397, align 4, !tbaa !7
  %498 = call i32 @llvm.smax.i32(i32 %496, i32 %495)
  %499 = call i32 @llvm.smax.i32(i32 %497, i32 %498)
  %500 = icmp sgt i32 %499, 0
  br i1 %500, label %501, label %569

501:                                              ; preds = %493
  %502 = load i32, ptr %404, align 4, !tbaa !7
  %503 = getelementptr inbounds [3 x i32], ptr %404, i64 0, i64 1
  %504 = load i32, ptr %503, align 4, !tbaa !7
  %505 = getelementptr inbounds %struct.hypre_Box_struct, ptr %403, i64 %399, i32 1, i64 1
  %506 = load i32, ptr %505, align 4, !tbaa !7
  %507 = sub nsw i32 %506, %504
  %508 = icmp slt i32 %507, 0
  %509 = add nsw i32 %507, 1
  %510 = select i1 %508, i32 0, i32 %509
  %511 = getelementptr inbounds %struct.hypre_Box_struct, ptr %403, i64 %399, i32 1
  %512 = load i32, ptr %511, align 4, !tbaa !7
  %513 = sub nsw i32 %512, %502
  %514 = icmp slt i32 %513, 0
  %515 = add nsw i32 %513, 1
  %516 = select i1 %514, i32 0, i32 %515
  %517 = icmp sgt i32 %497, 0
  %518 = icmp sgt i32 %496, 0
  %519 = icmp sgt i32 %495, 0
  %520 = sub i32 %516, %495
  %521 = sub i32 %510, %496
  %522 = mul i32 %516, %521
  br i1 %517, label %523, label %569

523:                                              ; preds = %501
  %524 = load i32, ptr %401, align 4, !tbaa !7
  %525 = sub i32 %524, %502
  %526 = getelementptr inbounds i32, ptr %401, i64 1
  %527 = load i32, ptr %526, align 4, !tbaa !7
  %528 = sub i32 %527, %504
  %529 = getelementptr inbounds i32, ptr %401, i64 2
  %530 = load i32, ptr %529, align 4, !tbaa !7
  %531 = getelementptr inbounds [3 x i32], ptr %404, i64 0, i64 2
  %532 = load i32, ptr %531, align 4, !tbaa !7
  %533 = sub nsw i32 %530, %532
  %534 = mul nsw i32 %510, %533
  %535 = add nsw i32 %528, %534
  %536 = mul nsw i32 %535, %516
  %537 = add nsw i32 %525, %536
  br label %538

538:                                              ; preds = %564, %523
  %539 = phi i32 [ %567, %564 ], [ 0, %523 ]
  %540 = phi i32 [ %566, %564 ], [ %537, %523 ]
  br i1 %518, label %541, label %564

541:                                              ; preds = %559, %538
  %542 = phi i32 [ %562, %559 ], [ 0, %538 ]
  %543 = phi i32 [ %561, %559 ], [ %540, %538 ]
  br i1 %519, label %544, label %559

544:                                              ; preds = %541
  %545 = sext i32 %543 to i64
  br label %546

546:                                              ; preds = %546, %544
  %547 = phi i64 [ %545, %544 ], [ %554, %546 ]
  %548 = phi i32 [ 0, %544 ], [ %555, %546 ]
  %549 = getelementptr inbounds double, ptr %407, i64 %547
  %550 = load double, ptr %549, align 8, !tbaa !29
  %551 = getelementptr inbounds double, ptr %406, i64 %547
  %552 = load double, ptr %551, align 8, !tbaa !29
  %553 = call double @llvm.fmuladd.f64(double %550, double 2.000000e+00, double %552)
  store double %553, ptr %551, align 8, !tbaa !29
  store double 0.000000e+00, ptr %549, align 8, !tbaa !29
  %554 = add nsw i64 %547, 1
  %555 = add nuw nsw i32 %548, 1
  %556 = icmp eq i32 %555, %495
  br i1 %556, label %557, label %546, !llvm.loop !233

557:                                              ; preds = %546
  %.lcssa = phi i64 [ %554, %546 ]
  %558 = trunc i64 %.lcssa to i32
  br label %559

559:                                              ; preds = %557, %541
  %560 = phi i32 [ %543, %541 ], [ %558, %557 ]
  %561 = add nsw i32 %520, %560
  %562 = add nuw nsw i32 %542, 1
  %563 = icmp eq i32 %562, %496
  br i1 %563, label %564, label %541, !llvm.loop !234

564:                                              ; preds = %559, %538
  %565 = phi i32 [ %540, %538 ], [ %561, %559 ]
  %566 = add nsw i32 %565, %522
  %567 = add nuw nsw i32 %539, 1
  %568 = icmp eq i32 %567, %497
  br i1 %568, label %569, label %538, !llvm.loop !235

569:                                              ; preds = %564, %501, %493, %488, %422, %414
  %570 = add nuw nsw i64 %399, 1
  %571 = load i32, ptr %18, align 8, !tbaa !21
  %572 = sext i32 %571 to i64
  %573 = icmp slt i64 %570, %572
  br i1 %573, label %398, label %574, !llvm.loop !236

574:                                              ; preds = %569, %388, %383
  %575 = call i32 @hypre_StructMatrixAssemble(ptr noundef %1) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #5

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CyclicReductionSetup(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readnone %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 8
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [6 x i32], align 16
  %15 = load i32, ptr %0, align 8, !tbaa !215
  %16 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 2
  %17 = load i32, ptr %16, align 8, !tbaa !217
  %18 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 3
  %19 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %14) #34
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %14, i8 0, i64 24, i1 false)
  %20 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !15
  %22 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %21, i64 0, i32 6
  %23 = load ptr, ptr %22, align 8, !tbaa !97
  %24 = tail call ptr @hypre_BoxDuplicate(ptr noundef %23) #33
  %25 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 0, i32 1
  %26 = sext i32 %17 to i64
  %27 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 0, i32 1, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !7
  %29 = getelementptr inbounds [3 x i32], ptr %24, i64 0, i64 %26
  %30 = load i32, ptr %29, align 4, !tbaa !7
  %31 = sub nsw i32 %28, %30
  %32 = add nsw i32 %31, 1
  %33 = icmp slt i32 %31, 0
  %34 = select i1 %33, i32 0, i32 %32
  %35 = tail call i32 @hypre_Log2(i32 noundef %34) #33
  %36 = shl i32 %35, 3
  %37 = add i32 %36, 16
  %38 = tail call ptr @hypre_MAlloc(i32 noundef %37) #33
  %39 = tail call i32 @hypre_StructGridRef(ptr noundef %21, ptr noundef %38) #33
  %40 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %26
  %41 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %42 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  %43 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %44 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %45 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 3, i64 1
  %46 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 3, i64 2
  %47 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4, i64 1
  %48 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4, i64 2
  br label %49

49:                                               ; preds = %67, %4
  %50 = phi i32 [ %77, %67 ], [ -2, %4 ]
  %51 = phi i32 [ %76, %67 ], [ 0, %4 ]
  %52 = phi i64 [ %73, %67 ], [ 0, %4 ]
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %49
  store i32 0, ptr %5, align 8, !tbaa !7
  store i32 0, ptr %41, align 4, !tbaa !7
  store i32 0, ptr %42, align 8, !tbaa !7
  store i32 1, ptr %7, align 8, !tbaa !7
  store i32 1, ptr %43, align 4, !tbaa !7
  br label %60

55:                                               ; preds = %49
  %56 = load <2 x i32>, ptr %18, align 4, !tbaa !7
  store <2 x i32> %56, ptr %5, align 8, !tbaa !7
  %57 = load i32, ptr %46, align 4, !tbaa !7
  store i32 %57, ptr %42, align 8, !tbaa !7
  %58 = load <2 x i32>, ptr %19, align 4, !tbaa !7
  store <2 x i32> %58, ptr %7, align 8, !tbaa !7
  %59 = load i32, ptr %48, align 4, !tbaa !7
  br label %60

60:                                               ; preds = %55, %54
  %61 = phi i32 [ 1, %54 ], [ %59, %55 ]
  store i32 %61, ptr %44, align 8, !tbaa !7
  %62 = load i32, ptr %40, align 4, !tbaa !7
  %63 = shl nsw i32 %62, 1
  store i32 %63, ptr %40, align 4, !tbaa !7
  %64 = load i32, ptr %29, align 4, !tbaa !7
  %65 = load i32, ptr %27, align 4, !tbaa !7
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %78, label %67

67:                                               ; preds = %60
  %68 = call i32 @hypre_ProjectBox(ptr noundef nonnull %24, ptr noundef nonnull %5, ptr noundef nonnull %7) #33
  %69 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %24, ptr noundef nonnull %5, ptr noundef nonnull %7, ptr noundef nonnull %24) #33
  %70 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %25, ptr noundef nonnull %5, ptr noundef nonnull %7, ptr noundef nonnull %25) #33
  %71 = getelementptr inbounds ptr, ptr %38, i64 %52
  %72 = load ptr, ptr %71, align 8, !tbaa !14
  %73 = add nuw i64 %52, 1
  %74 = getelementptr inbounds ptr, ptr %38, i64 %73
  %75 = call i32 @hypre_StructCoarsen(ptr noundef %72, ptr noundef nonnull %5, ptr noundef nonnull %7, i32 noundef 1, ptr noundef nonnull %74) #33
  %76 = add nuw i32 %51, 1
  %77 = add nsw i32 %50, 1
  br label %49

78:                                               ; preds = %60
  %.lcssa5 = phi i32 [ %50, %60 ]
  %.lcssa4 = phi i32 [ %51, %60 ]
  %.lcssa3 = phi i64 [ %52, %60 ]
  %.lcssa2 = phi i1 [ %53, %60 ]
  %79 = trunc i64 %.lcssa3 to i32
  %80 = add nuw nsw i32 %79, 1
  %81 = call i32 @hypre_BoxDestroy(ptr noundef nonnull %24) #33
  %82 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 1
  store i32 %80, ptr %82, align 4, !tbaa !237
  %83 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 5
  store ptr %38, ptr %83, align 8, !tbaa !238
  %84 = load ptr, ptr %38, align 8, !tbaa !14
  %85 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %84, i64 0, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !20
  %87 = call ptr @hypre_BoxArrayDuplicate(ptr noundef %86) #33
  %88 = call i32 @hypre_ProjectBoxArray(ptr noundef %87, ptr noundef nonnull %18, ptr noundef nonnull %19) #33
  %89 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 6
  store ptr %87, ptr %89, align 8, !tbaa !239
  %90 = shl i32 %80, 3
  %91 = call ptr @hypre_MAlloc(i32 noundef %90) #33
  %92 = icmp eq i32 %79, 0
  br i1 %92, label %125, label %93

93:                                               ; preds = %78
  %94 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %95 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %96 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %26
  %97 = zext i32 %.lcssa4 to i64
  br label %98

98:                                               ; preds = %112, %93
  %99 = phi i64 [ 0, %93 ], [ %123, %112 ]
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %98
  store i32 0, ptr %5, align 8, !tbaa !7
  store i32 0, ptr %41, align 4, !tbaa !7
  store i32 0, ptr %42, align 8, !tbaa !7
  store i32 0, ptr %6, align 4, !tbaa !7
  store i32 0, ptr %94, align 4, !tbaa !7
  store i32 0, ptr %95, align 4, !tbaa !7
  %102 = load i32, ptr %96, align 4, !tbaa !7
  %103 = add nsw i32 %102, 1
  store i32 %103, ptr %96, align 4, !tbaa !7
  store i32 1, ptr %7, align 8, !tbaa !7
  store i32 1, ptr %43, align 4, !tbaa !7
  br label %112

104:                                              ; preds = %98
  %105 = load i32, ptr %18, align 4, !tbaa !7
  store i32 %105, ptr %5, align 8, !tbaa !7
  %106 = load i32, ptr %45, align 4, !tbaa !7
  store i32 %106, ptr %41, align 4, !tbaa !7
  %107 = load i32, ptr %46, align 4, !tbaa !7
  store i32 %107, ptr %42, align 8, !tbaa !7
  store i32 %105, ptr %6, align 4, !tbaa !7
  store i32 %106, ptr %94, align 4, !tbaa !7
  store i32 %107, ptr %95, align 4, !tbaa !7
  %108 = load i32, ptr %96, align 4, !tbaa !7
  %109 = add nsw i32 %108, 1
  store i32 %109, ptr %96, align 4, !tbaa !7
  %110 = load <2 x i32>, ptr %19, align 4, !tbaa !7
  store <2 x i32> %110, ptr %7, align 8, !tbaa !7
  %111 = load i32, ptr %48, align 4, !tbaa !7
  br label %112

112:                                              ; preds = %104, %101
  %113 = phi i32 [ 1, %101 ], [ %111, %104 ]
  store i32 %113, ptr %44, align 8, !tbaa !7
  %114 = load i32, ptr %40, align 4, !tbaa !7
  %115 = shl nsw i32 %114, 1
  store i32 %115, ptr %40, align 4, !tbaa !7
  %116 = getelementptr inbounds ptr, ptr %38, i64 %99
  %117 = load ptr, ptr %116, align 8, !tbaa !14
  %118 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %117, i64 0, i32 2
  %119 = load ptr, ptr %118, align 8, !tbaa !20
  %120 = call ptr @hypre_BoxArrayDuplicate(ptr noundef %119) #33
  %121 = getelementptr inbounds ptr, ptr %91, i64 %99
  store ptr %120, ptr %121, align 8, !tbaa !14
  %122 = call i32 @hypre_ProjectBoxArray(ptr noundef %120, ptr noundef nonnull %6, ptr noundef nonnull %7) #33
  %123 = add nuw nsw i64 %99, 1
  %124 = icmp eq i64 %123, %97
  br i1 %124, label %125, label %98, !llvm.loop !240

125:                                              ; preds = %112, %78
  %126 = phi i32 [ 0, %78 ], [ %.lcssa4, %112 ]
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds ptr, ptr %38, i64 %127
  %129 = load ptr, ptr %128, align 8, !tbaa !14
  %130 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %129, i64 0, i32 2
  %131 = load ptr, ptr %130, align 8, !tbaa !20
  %132 = call ptr @hypre_BoxArrayDuplicate(ptr noundef %131) #33
  %133 = getelementptr inbounds ptr, ptr %91, i64 %127
  store ptr %132, ptr %133, align 8, !tbaa !14
  br i1 %.lcssa2, label %134, label %136

134:                                              ; preds = %125
  %135 = call i32 @hypre_ProjectBoxArray(ptr noundef %132, ptr noundef nonnull %18, ptr noundef nonnull %19) #33
  br label %136

136:                                              ; preds = %134, %125
  %137 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 7
  store ptr %91, ptr %137, align 8, !tbaa !241
  %138 = call ptr @hypre_MAlloc(i32 noundef %90) #33
  %139 = call ptr @hypre_MAlloc(i32 noundef %90) #33
  %140 = call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %140, ptr %138, align 8, !tbaa !14
  %141 = call ptr @hypre_StructVectorRef(ptr noundef %3) #33
  store ptr %141, ptr %139, align 8, !tbaa !14
  %142 = shl nsw i32 %17, 1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [6 x i32], ptr %14, i64 0, i64 %143
  store i32 1, ptr %144, align 8, !tbaa !7
  %145 = or i32 %142, 1
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [6 x i32], ptr %14, i64 0, i64 %146
  store i32 1, ptr %147, align 4, !tbaa !7
  br i1 %92, label %148, label %151

148:                                              ; preds = %136
  %149 = call ptr @hypre_CAlloc(i32 noundef 0, i32 noundef 8) #33
  %150 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 8
  store ptr %149, ptr %150, align 8, !tbaa !242
  br label %205

151:                                              ; preds = %136
  %152 = zext i32 %.lcssa4 to i64
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ 0, %151 ], [ %158, %153 ]
  %155 = phi i32 [ 0, %151 ], [ %175, %153 ]
  %156 = getelementptr inbounds ptr, ptr %138, i64 %154
  %157 = load ptr, ptr %156, align 8, !tbaa !14
  %158 = add nuw nsw i64 %154, 1
  %159 = getelementptr inbounds ptr, ptr %38, i64 %158
  %160 = load ptr, ptr %159, align 8, !tbaa !14
  %161 = call ptr @hypre_CycRedCreateCoarseOp(ptr noundef %157, ptr noundef %160, i32 noundef %17) #35
  %162 = getelementptr inbounds ptr, ptr %138, i64 %158
  store ptr %161, ptr %162, align 8, !tbaa !14
  %163 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %161, i64 0, i32 8
  %164 = load i32, ptr %163, align 4, !tbaa !243
  %165 = add nsw i32 %164, %155
  %166 = load ptr, ptr %159, align 8, !tbaa !14
  %167 = call ptr @hypre_StructVectorCreate(i32 noundef %15, ptr noundef %166) #33
  %168 = getelementptr inbounds ptr, ptr %139, i64 %158
  store ptr %167, ptr %168, align 8, !tbaa !14
  %169 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %167, ptr noundef nonnull %14) #33
  %170 = load ptr, ptr %168, align 8, !tbaa !14
  %171 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %170) #33
  %172 = load ptr, ptr %168, align 8, !tbaa !14
  %173 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %172, i64 0, i32 5
  %174 = load i32, ptr %173, align 4, !tbaa !244
  %175 = add nsw i32 %165, %174
  %176 = icmp eq i64 %158, %152
  br i1 %176, label %177, label %153, !llvm.loop !245

177:                                              ; preds = %153
  %.lcssa1 = phi i32 [ %175, %153 ]
  %178 = call ptr @hypre_CAlloc(i32 noundef %.lcssa1, i32 noundef 8) #33
  %179 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 8
  store ptr %178, ptr %179, align 8, !tbaa !242
  br i1 %92, label %205, label %180

180:                                              ; preds = %177
  %181 = zext i32 %.lcssa4 to i64
  br label %182

182:                                              ; preds = %182, %180
  %183 = phi i64 [ 0, %180 ], [ %185, %182 ]
  %184 = phi ptr [ %178, %180 ], [ %203, %182 ]
  %185 = add nuw nsw i64 %183, 1
  %186 = getelementptr inbounds ptr, ptr %138, i64 %185
  %187 = load ptr, ptr %186, align 8, !tbaa !14
  %188 = call i32 @hypre_StructMatrixInitializeData(ptr noundef %187, ptr noundef %184) #33
  %189 = load ptr, ptr %186, align 8, !tbaa !14
  %190 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %189, i64 0, i32 8
  %191 = load i32, ptr %190, align 4, !tbaa !243
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, ptr %184, i64 %192
  %194 = getelementptr inbounds ptr, ptr %139, i64 %185
  %195 = load ptr, ptr %194, align 8, !tbaa !14
  %196 = call i32 @hypre_StructVectorInitializeData(ptr noundef %195, ptr noundef %193) #33
  %197 = load ptr, ptr %194, align 8, !tbaa !14
  %198 = call i32 @hypre_StructVectorAssemble(ptr noundef %197) #33
  %199 = load ptr, ptr %194, align 8, !tbaa !14
  %200 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %199, i64 0, i32 5
  %201 = load i32, ptr %200, align 4, !tbaa !244
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds double, ptr %193, i64 %202
  %204 = icmp eq i64 %185, %181
  br i1 %204, label %208, label %182, !llvm.loop !246

205:                                              ; preds = %177, %148
  %206 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 9
  store ptr %138, ptr %206, align 8, !tbaa !247
  %207 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 10
  store ptr %139, ptr %207, align 8, !tbaa !248
  br label %233

208:                                              ; preds = %182
  %209 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 9
  store ptr %138, ptr %209, align 8, !tbaa !247
  %210 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 10
  store ptr %139, ptr %210, align 8, !tbaa !248
  br i1 %92, label %233, label %211

211:                                              ; preds = %208
  %212 = zext i32 %.lcssa4 to i64
  br label %213

213:                                              ; preds = %222, %211
  %214 = phi i64 [ 0, %211 ], [ %228, %222 ]
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %217, label %216

216:                                              ; preds = %213
  store i32 0, ptr %5, align 8, !tbaa !7
  store i32 0, ptr %41, align 4, !tbaa !7
  store i32 0, ptr %42, align 8, !tbaa !7
  store i32 1, ptr %7, align 8, !tbaa !7
  store i32 1, ptr %43, align 4, !tbaa !7
  br label %222

217:                                              ; preds = %213
  %218 = load <2 x i32>, ptr %18, align 4, !tbaa !7
  store <2 x i32> %218, ptr %5, align 8, !tbaa !7
  %219 = load i32, ptr %46, align 4, !tbaa !7
  store i32 %219, ptr %42, align 8, !tbaa !7
  %220 = load <2 x i32>, ptr %19, align 4, !tbaa !7
  store <2 x i32> %220, ptr %7, align 8, !tbaa !7
  %221 = load i32, ptr %48, align 4, !tbaa !7
  br label %222

222:                                              ; preds = %217, %216
  %223 = phi i32 [ 1, %216 ], [ %221, %217 ]
  store i32 %223, ptr %44, align 8, !tbaa !7
  %224 = load i32, ptr %40, align 4, !tbaa !7
  %225 = shl nsw i32 %224, 1
  store i32 %225, ptr %40, align 4, !tbaa !7
  %226 = getelementptr inbounds ptr, ptr %138, i64 %214
  %227 = load ptr, ptr %226, align 8, !tbaa !14
  %228 = add nuw nsw i64 %214, 1
  %229 = getelementptr inbounds ptr, ptr %138, i64 %228
  %230 = load ptr, ptr %229, align 8, !tbaa !14
  %231 = call i32 @hypre_CycRedSetupCoarseOp(ptr noundef %227, ptr noundef %230, ptr noundef nonnull %5, ptr noundef nonnull %7) #35
  %232 = icmp eq i64 %228, %212
  br i1 %232, label %233, label %213, !llvm.loop !249

233:                                              ; preds = %222, %208, %205
  %234 = shl i32 %79, 3
  %235 = call ptr @hypre_MAlloc(i32 noundef %234) #33
  %236 = call ptr @hypre_MAlloc(i32 noundef %234) #33
  br i1 %92, label %315, label %237

237:                                              ; preds = %233
  %238 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %239 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %240 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %26
  %241 = zext i32 %.lcssa4 to i64
  br label %242

242:                                              ; preds = %256, %237
  %243 = phi i64 [ 0, %237 ], [ %313, %256 ]
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %248, label %245

245:                                              ; preds = %242
  store i32 0, ptr %5, align 8, !tbaa !7
  store i32 0, ptr %41, align 4, !tbaa !7
  store i32 0, ptr %42, align 8, !tbaa !7
  store i32 0, ptr %6, align 4, !tbaa !7
  store i32 0, ptr %238, align 4, !tbaa !7
  store i32 0, ptr %239, align 4, !tbaa !7
  %246 = load i32, ptr %240, align 4, !tbaa !7
  %247 = add nsw i32 %246, 1
  store i32 %247, ptr %240, align 4, !tbaa !7
  store i32 1, ptr %7, align 8, !tbaa !7
  store i32 1, ptr %43, align 4, !tbaa !7
  br label %256

248:                                              ; preds = %242
  %249 = load i32, ptr %18, align 4, !tbaa !7
  store i32 %249, ptr %5, align 8, !tbaa !7
  %250 = load i32, ptr %45, align 4, !tbaa !7
  store i32 %250, ptr %41, align 4, !tbaa !7
  %251 = load i32, ptr %46, align 4, !tbaa !7
  store i32 %251, ptr %42, align 8, !tbaa !7
  store i32 %249, ptr %6, align 4, !tbaa !7
  store i32 %250, ptr %238, align 4, !tbaa !7
  store i32 %251, ptr %239, align 4, !tbaa !7
  %252 = load i32, ptr %240, align 4, !tbaa !7
  %253 = add nsw i32 %252, 1
  store i32 %253, ptr %240, align 4, !tbaa !7
  %254 = load <2 x i32>, ptr %19, align 4, !tbaa !7
  store <2 x i32> %254, ptr %7, align 8, !tbaa !7
  %255 = load i32, ptr %48, align 4, !tbaa !7
  br label %256

256:                                              ; preds = %248, %245
  %257 = phi i32 [ 1, %245 ], [ %255, %248 ]
  store i32 %257, ptr %44, align 8, !tbaa !7
  %258 = load i32, ptr %40, align 4, !tbaa !7
  %259 = shl nsw i32 %258, 1
  store i32 %259, ptr %40, align 4, !tbaa !7
  %260 = getelementptr inbounds ptr, ptr %38, i64 %243
  %261 = load ptr, ptr %260, align 8, !tbaa !14
  %262 = getelementptr inbounds ptr, ptr %138, i64 %243
  %263 = load ptr, ptr %262, align 8, !tbaa !14
  %264 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %263, i64 0, i32 3
  %265 = load ptr, ptr %264, align 8, !tbaa !250
  %266 = call i32 @hypre_CreateComputeInfo(ptr noundef %261, ptr noundef %265, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12, ptr noundef nonnull %13) #33
  %267 = load ptr, ptr %8, align 8, !tbaa !14
  %268 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %267, ptr noundef nonnull %6, ptr noundef nonnull %7) #33
  %269 = load ptr, ptr %9, align 8, !tbaa !14
  %270 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %269, ptr noundef nonnull %6, ptr noundef nonnull %7) #33
  %271 = load ptr, ptr %12, align 8, !tbaa !14
  %272 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %271, ptr noundef nonnull %5, ptr noundef nonnull %7) #33
  %273 = load ptr, ptr %13, align 8, !tbaa !14
  %274 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %273, ptr noundef nonnull %5, ptr noundef nonnull %7) #33
  %275 = load ptr, ptr %8, align 8, !tbaa !14
  %276 = load ptr, ptr %9, align 8, !tbaa !14
  %277 = load ptr, ptr %10, align 8, !tbaa !14
  %278 = load ptr, ptr %11, align 8, !tbaa !14
  %279 = load ptr, ptr %12, align 8, !tbaa !14
  %280 = load ptr, ptr %13, align 8, !tbaa !14
  %281 = load ptr, ptr %260, align 8, !tbaa !14
  %282 = getelementptr inbounds ptr, ptr %139, i64 %243
  %283 = load ptr, ptr %282, align 8, !tbaa !14
  %284 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %283, i64 0, i32 2
  %285 = load ptr, ptr %284, align 8, !tbaa !25
  %286 = getelementptr inbounds ptr, ptr %235, i64 %243
  %287 = call i32 @hypre_ComputePkgCreate(ptr noundef %275, ptr noundef %276, ptr noundef nonnull %7, ptr noundef nonnull %7, ptr noundef %277, ptr noundef %278, ptr noundef %279, ptr noundef %280, ptr noundef nonnull %7, ptr noundef %281, ptr noundef %285, i32 noundef 1, ptr noundef %286) #33
  %288 = load ptr, ptr %260, align 8, !tbaa !14
  %289 = load ptr, ptr %262, align 8, !tbaa !14
  %290 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %289, i64 0, i32 3
  %291 = load ptr, ptr %290, align 8, !tbaa !250
  %292 = call i32 @hypre_CreateComputeInfo(ptr noundef %288, ptr noundef %291, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12, ptr noundef nonnull %13) #33
  %293 = load ptr, ptr %8, align 8, !tbaa !14
  %294 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %293, ptr noundef nonnull %5, ptr noundef nonnull %7) #33
  %295 = load ptr, ptr %9, align 8, !tbaa !14
  %296 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %295, ptr noundef nonnull %5, ptr noundef nonnull %7) #33
  %297 = load ptr, ptr %12, align 8, !tbaa !14
  %298 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %297, ptr noundef nonnull %6, ptr noundef nonnull %7) #33
  %299 = load ptr, ptr %13, align 8, !tbaa !14
  %300 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %299, ptr noundef nonnull %6, ptr noundef nonnull %7) #33
  %301 = load ptr, ptr %8, align 8, !tbaa !14
  %302 = load ptr, ptr %9, align 8, !tbaa !14
  %303 = load ptr, ptr %10, align 8, !tbaa !14
  %304 = load ptr, ptr %11, align 8, !tbaa !14
  %305 = load ptr, ptr %12, align 8, !tbaa !14
  %306 = load ptr, ptr %13, align 8, !tbaa !14
  %307 = load ptr, ptr %260, align 8, !tbaa !14
  %308 = load ptr, ptr %282, align 8, !tbaa !14
  %309 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %308, i64 0, i32 2
  %310 = load ptr, ptr %309, align 8, !tbaa !25
  %311 = getelementptr inbounds ptr, ptr %236, i64 %243
  %312 = call i32 @hypre_ComputePkgCreate(ptr noundef %301, ptr noundef %302, ptr noundef nonnull %7, ptr noundef nonnull %7, ptr noundef %303, ptr noundef %304, ptr noundef %305, ptr noundef %306, ptr noundef nonnull %7, ptr noundef %307, ptr noundef %310, i32 noundef 1, ptr noundef %311) #33
  %313 = add nuw nsw i64 %243, 1
  %314 = icmp eq i64 %313, %241
  br i1 %314, label %315, label %242, !llvm.loop !251

315:                                              ; preds = %256, %233
  %316 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 11
  store ptr %235, ptr %316, align 8, !tbaa !252
  %317 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 12
  store ptr %236, ptr %317, align 8, !tbaa !253
  %318 = load i32, ptr %19, align 4, !tbaa !7
  %319 = load i32, ptr %47, align 4, !tbaa !7
  %320 = mul nsw i32 %319, %318
  %321 = load i32, ptr %48, align 4, !tbaa !7
  %322 = mul nsw i32 %320, %321
  %323 = load ptr, ptr %139, align 8, !tbaa !14
  %324 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %323, i64 0, i32 8
  %325 = load i32, ptr %324, align 8, !tbaa !254
  %326 = sdiv i32 %325, 2
  %327 = sdiv i32 %326, %322
  %328 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 14
  %329 = mul nsw i32 %325, 5
  %330 = sdiv i32 %329, 2
  %331 = sdiv i32 %330, %322
  %332 = add nsw i32 %331, %327
  store i32 %332, ptr %328, align 4, !tbaa !255
  %333 = icmp ugt i32 %79, 1
  br i1 %333, label %334, label %350

334:                                              ; preds = %315
  %335 = zext i32 %.lcssa4 to i64
  br label %336

336:                                              ; preds = %336, %334
  %337 = phi i64 [ 1, %334 ], [ %345, %336 ]
  %338 = phi i32 [ %332, %334 ], [ %344, %336 ]
  %339 = getelementptr inbounds ptr, ptr %139, i64 %337
  %340 = load ptr, ptr %339, align 8, !tbaa !14
  %341 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %340, i64 0, i32 8
  %342 = load i32, ptr %341, align 8, !tbaa !254
  %343 = mul nsw i32 %342, 5
  %344 = add nsw i32 %338, %343
  %345 = add nuw nsw i64 %337, 1
  %346 = icmp eq i64 %345, %335
  br i1 %346, label %347, label %336, !llvm.loop !256

347:                                              ; preds = %336
  %.lcssa = phi i32 [ %344, %336 ]
  %348 = add i32 %.lcssa5, 2
  store i32 %.lcssa, ptr %328, align 4, !tbaa !255
  %349 = zext i32 %348 to i64
  br label %350

350:                                              ; preds = %347, %315
  %351 = phi i32 [ %.lcssa, %347 ], [ %332, %315 ]
  %352 = phi i64 [ %349, %347 ], [ 1, %315 ]
  br i1 %.lcssa2, label %360, label %353

353:                                              ; preds = %350
  %354 = getelementptr inbounds ptr, ptr %139, i64 %352
  %355 = load ptr, ptr %354, align 8, !tbaa !14
  %356 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %355, i64 0, i32 8
  %357 = load i32, ptr %356, align 8, !tbaa !254
  %358 = sdiv i32 %357, 2
  %359 = add nsw i32 %351, %358
  store i32 %359, ptr %328, align 4, !tbaa !255
  br label %360

360:                                              ; preds = %353, %350
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CyclicReduction(ptr noundef %0, ptr noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca [3 x i32], align 8
  %7 = alloca [3 x i32], align 8
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i32], align 4
  %10 = alloca [3 x i32], align 4
  %11 = alloca [3 x i32], align 4
  %12 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 1
  %13 = load i32, ptr %12, align 4, !tbaa !237
  %14 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !217
  %16 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4
  %18 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 6
  %19 = load ptr, ptr %18, align 8, !tbaa !239
  %20 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 7
  %21 = load ptr, ptr %20, align 8, !tbaa !241
  %22 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 9
  %23 = load ptr, ptr %22, align 8, !tbaa !247
  %24 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 10
  %25 = load ptr, ptr %24, align 8, !tbaa !248
  %26 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 11
  %27 = load ptr, ptr %26, align 8, !tbaa !252
  %28 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 12
  %29 = load ptr, ptr %28, align 8, !tbaa !253
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %11) #34
  %30 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 13
  %31 = load i32, ptr %30, align 8, !tbaa !218
  %32 = tail call i32 @hypre_BeginTiming(i32 noundef %31) #33
  %33 = load ptr, ptr %23, align 8, !tbaa !14
  %34 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %33) #33
  %35 = load ptr, ptr %25, align 8, !tbaa !14
  %36 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %35) #33
  %37 = tail call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %37, ptr %23, align 8, !tbaa !14
  %38 = tail call ptr @hypre_StructVectorRef(ptr noundef %3) #33
  store ptr %38, ptr %25, align 8, !tbaa !14
  %39 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %19, i64 0, i32 1
  %40 = load i32, ptr %39, align 8, !tbaa !21
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %55

42:                                               ; preds = %4
  %43 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %44 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %45 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %46 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %47 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %48 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %49 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 1
  %50 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 2
  %51 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4, i64 1
  %52 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4, i64 2
  %53 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %54 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  br label %74

55:                                               ; preds = %220, %4
  %56 = add nsw i32 %13, -1
  %57 = sext i32 %15 to i64
  %58 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %57
  %59 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %60 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %61 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %62 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %63 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 3, i64 2
  %64 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4, i64 2
  %65 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %66 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %67 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 1
  %68 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 2
  %69 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %70 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  %71 = getelementptr inbounds [3 x i32], ptr %11, i64 0, i64 1
  %72 = getelementptr inbounds [3 x i32], ptr %11, i64 0, i64 2
  %73 = zext i32 %56 to i64
  br label %226

74:                                               ; preds = %220, %42
  %75 = phi i64 [ 0, %42 ], [ %221, %220 ]
  %76 = load ptr, ptr %19, align 8, !tbaa !23
  %77 = getelementptr inbounds %struct.hypre_Box_struct, ptr %76, i64 %75
  %78 = load ptr, ptr %43, align 8, !tbaa !25
  %79 = load ptr, ptr %78, align 8, !tbaa !23
  %80 = load ptr, ptr %44, align 8, !tbaa !25
  %81 = load ptr, ptr %80, align 8, !tbaa !23
  %82 = load ptr, ptr %45, align 8, !tbaa !27
  %83 = load ptr, ptr %46, align 8, !tbaa !28
  %84 = getelementptr inbounds i32, ptr %83, i64 %75
  %85 = load i32, ptr %84, align 4, !tbaa !7
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double, ptr %82, i64 %86
  %88 = load ptr, ptr %47, align 8, !tbaa !27
  %89 = load ptr, ptr %48, align 8, !tbaa !28
  %90 = getelementptr inbounds i32, ptr %89, i64 %75
  %91 = load i32, ptr %90, align 4, !tbaa !7
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds double, ptr %88, i64 %92
  %94 = load i32, ptr %77, align 4, !tbaa !7
  store i32 %94, ptr %10, align 4, !tbaa !7
  %95 = getelementptr inbounds [3 x i32], ptr %77, i64 0, i64 1
  %96 = load i32, ptr %95, align 4, !tbaa !7
  store i32 %96, ptr %49, align 4, !tbaa !7
  %97 = getelementptr inbounds [3 x i32], ptr %77, i64 0, i64 2
  %98 = load i32, ptr %97, align 4, !tbaa !7
  store i32 %98, ptr %50, align 4, !tbaa !7
  %99 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %77, ptr noundef nonnull %17, ptr noundef nonnull %9) #33
  %100 = load i32, ptr %17, align 4, !tbaa !7
  %101 = load i32, ptr %9, align 4, !tbaa !7
  %102 = load i32, ptr %53, align 4, !tbaa !7
  %103 = load i32, ptr %54, align 4, !tbaa !7
  %104 = call i32 @llvm.smax.i32(i32 %102, i32 %101)
  %105 = call i32 @llvm.smax.i32(i32 %103, i32 %104)
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %220

107:                                              ; preds = %74
  %108 = getelementptr inbounds %struct.hypre_Box_struct, ptr %81, i64 %75, i32 1
  %109 = load i32, ptr %108, align 4, !tbaa !7
  %110 = getelementptr inbounds %struct.hypre_Box_struct, ptr %81, i64 %75
  %111 = load i32, ptr %110, align 4, !tbaa !7
  %112 = sub nsw i32 %109, %111
  %113 = icmp slt i32 %112, 0
  %114 = add nsw i32 %112, 1
  %115 = select i1 %113, i32 0, i32 %114
  %116 = getelementptr inbounds %struct.hypre_Box_struct, ptr %81, i64 %75, i32 1, i64 1
  %117 = load i32, ptr %116, align 4, !tbaa !7
  %118 = getelementptr inbounds [3 x i32], ptr %110, i64 0, i64 1
  %119 = load i32, ptr %118, align 4, !tbaa !7
  %120 = sub nsw i32 %117, %119
  %121 = icmp slt i32 %120, 0
  %122 = add nsw i32 %120, 1
  %123 = select i1 %121, i32 0, i32 %122
  %124 = mul i32 %115, %123
  %125 = load i32, ptr %52, align 4, !tbaa !7
  %126 = mul i32 %124, %125
  %127 = load i32, ptr %51, align 4, !tbaa !7
  %128 = mul nsw i32 %115, %127
  %129 = getelementptr inbounds %struct.hypre_Box_struct, ptr %79, i64 %75, i32 1
  %130 = load i32, ptr %129, align 4, !tbaa !7
  %131 = getelementptr inbounds %struct.hypre_Box_struct, ptr %79, i64 %75
  %132 = load i32, ptr %131, align 4, !tbaa !7
  %133 = sub nsw i32 %130, %132
  %134 = icmp slt i32 %133, 0
  %135 = add nsw i32 %133, 1
  %136 = select i1 %134, i32 0, i32 %135
  %137 = getelementptr inbounds %struct.hypre_Box_struct, ptr %79, i64 %75, i32 1, i64 1
  %138 = load i32, ptr %137, align 4, !tbaa !7
  %139 = getelementptr inbounds [3 x i32], ptr %131, i64 0, i64 1
  %140 = load i32, ptr %139, align 4, !tbaa !7
  %141 = sub nsw i32 %138, %140
  %142 = icmp slt i32 %141, 0
  %143 = add nsw i32 %141, 1
  %144 = select i1 %142, i32 0, i32 %143
  %145 = mul i32 %136, %144
  %146 = mul i32 %145, %125
  %147 = mul nsw i32 %127, %136
  %148 = icmp sgt i32 %103, 0
  %149 = icmp sgt i32 %102, 0
  %150 = icmp sgt i32 %101, 0
  %151 = mul i32 %100, %101
  %152 = sub i32 %147, %151
  %153 = sub i32 %128, %151
  %154 = mul nsw i32 %102, %147
  %155 = sub i32 %146, %154
  %156 = mul nsw i32 %102, %128
  %157 = sub i32 %126, %156
  br i1 %148, label %158, label %220

158:                                              ; preds = %107
  %159 = load i32, ptr %10, align 4, !tbaa !7
  %160 = sub i32 %159, %132
  %161 = load i32, ptr %49, align 4, !tbaa !7
  %162 = sub i32 %161, %140
  %163 = load i32, ptr %50, align 4, !tbaa !7
  %164 = getelementptr inbounds [3 x i32], ptr %131, i64 0, i64 2
  %165 = load i32, ptr %164, align 4, !tbaa !7
  %166 = sub nsw i32 %163, %165
  %167 = mul nsw i32 %144, %166
  %168 = add nsw i32 %162, %167
  %169 = mul nsw i32 %168, %136
  %170 = add nsw i32 %160, %169
  %171 = sub i32 %159, %111
  %172 = sub i32 %161, %119
  %173 = getelementptr inbounds [3 x i32], ptr %110, i64 0, i64 2
  %174 = load i32, ptr %173, align 4, !tbaa !7
  %175 = sub nsw i32 %163, %174
  %176 = mul nsw i32 %123, %175
  %177 = add nsw i32 %172, %176
  %178 = mul nsw i32 %177, %115
  %179 = add nsw i32 %171, %178
  %180 = sext i32 %100 to i64
  br label %181

181:                                              ; preds = %213, %158
  %182 = phi i32 [ %216, %213 ], [ %170, %158 ]
  %183 = phi i32 [ %217, %213 ], [ %179, %158 ]
  %184 = phi i32 [ %218, %213 ], [ 0, %158 ]
  br i1 %149, label %185, label %213

185:                                              ; preds = %206, %181
  %186 = phi i32 [ %209, %206 ], [ %182, %181 ]
  %187 = phi i32 [ %210, %206 ], [ %183, %181 ]
  %188 = phi i32 [ %211, %206 ], [ 0, %181 ]
  br i1 %150, label %189, label %206

189:                                              ; preds = %185
  %190 = sext i32 %186 to i64
  %191 = sext i32 %187 to i64
  br label %192

192:                                              ; preds = %192, %189
  %193 = phi i64 [ %191, %189 ], [ %200, %192 ]
  %194 = phi i64 [ %190, %189 ], [ %199, %192 ]
  %195 = phi i32 [ 0, %189 ], [ %201, %192 ]
  %196 = getelementptr inbounds double, ptr %93, i64 %193
  %197 = load double, ptr %196, align 8, !tbaa !29
  %198 = getelementptr inbounds double, ptr %87, i64 %194
  store double %197, ptr %198, align 8, !tbaa !29
  %199 = add i64 %194, %180
  %200 = add i64 %193, %180
  %201 = add nuw nsw i32 %195, 1
  %202 = icmp eq i32 %201, %101
  br i1 %202, label %203, label %192, !llvm.loop !257

203:                                              ; preds = %192
  %.lcssa12 = phi i64 [ %199, %192 ]
  %.lcssa11 = phi i64 [ %200, %192 ]
  %204 = trunc i64 %.lcssa11 to i32
  %205 = trunc i64 %.lcssa12 to i32
  br label %206

206:                                              ; preds = %203, %185
  %207 = phi i32 [ %187, %185 ], [ %204, %203 ]
  %208 = phi i32 [ %186, %185 ], [ %205, %203 ]
  %209 = add nsw i32 %152, %208
  %210 = add nsw i32 %153, %207
  %211 = add nuw nsw i32 %188, 1
  %212 = icmp eq i32 %211, %102
  br i1 %212, label %213, label %185, !llvm.loop !258

213:                                              ; preds = %206, %181
  %214 = phi i32 [ %183, %181 ], [ %210, %206 ]
  %215 = phi i32 [ %182, %181 ], [ %209, %206 ]
  %216 = add nsw i32 %155, %215
  %217 = add nsw i32 %157, %214
  %218 = add nuw nsw i32 %184, 1
  %219 = icmp eq i32 %218, %103
  br i1 %219, label %220, label %181, !llvm.loop !259

220:                                              ; preds = %213, %107, %74
  %221 = add nuw nsw i64 %75, 1
  %222 = load i32, ptr %39, align 8, !tbaa !21
  %223 = sext i32 %222 to i64
  %224 = icmp slt i64 %221, %223
  br i1 %224, label %74, label %55, !llvm.loop !260

225:                                              ; preds = %751
  br label %226, !llvm.loop !261

226:                                              ; preds = %225, %55
  %227 = phi i64 [ %412, %225 ], [ 0, %55 ]
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %230, label %229

229:                                              ; preds = %226
  store i32 0, ptr %6, align 8, !tbaa !7
  store i32 0, ptr %59, align 4, !tbaa !7
  store i32 0, ptr %60, align 8, !tbaa !7
  store i32 1, ptr %7, align 8, !tbaa !7
  store i32 1, ptr %61, align 4, !tbaa !7
  br label %235

230:                                              ; preds = %226
  %231 = load <2 x i32>, ptr %16, align 4, !tbaa !7
  store <2 x i32> %231, ptr %6, align 8, !tbaa !7
  %232 = load i32, ptr %63, align 4, !tbaa !7
  store i32 %232, ptr %60, align 8, !tbaa !7
  %233 = load <2 x i32>, ptr %17, align 4, !tbaa !7
  store <2 x i32> %233, ptr %7, align 8, !tbaa !7
  %234 = load i32, ptr %64, align 4, !tbaa !7
  br label %235

235:                                              ; preds = %230, %229
  %236 = phi i32 [ 1, %229 ], [ %234, %230 ]
  store i32 %236, ptr %62, align 8, !tbaa !7
  %237 = load i32, ptr %58, align 4, !tbaa !7
  %238 = shl nsw i32 %237, 1
  store i32 %238, ptr %58, align 4, !tbaa !7
  %239 = getelementptr inbounds ptr, ptr %21, i64 %227
  %240 = load ptr, ptr %239, align 8, !tbaa !14
  %241 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %240, i64 0, i32 1
  %242 = load i32, ptr %241, align 8, !tbaa !21
  %243 = icmp sgt i32 %242, 0
  br i1 %243, label %244, label %403

244:                                              ; preds = %235
  %245 = getelementptr inbounds ptr, ptr %23, i64 %227
  %246 = getelementptr inbounds ptr, ptr %25, i64 %227
  br label %247

247:                                              ; preds = %398, %244
  %248 = phi i64 [ 0, %244 ], [ %399, %398 ]
  %249 = load ptr, ptr %240, align 8, !tbaa !23
  %250 = getelementptr inbounds %struct.hypre_Box_struct, ptr %249, i64 %248
  %251 = load ptr, ptr %245, align 8, !tbaa !14
  %252 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %251, i64 0, i32 5
  %253 = load ptr, ptr %252, align 8, !tbaa !24
  %254 = load ptr, ptr %253, align 8, !tbaa !23
  %255 = load ptr, ptr %246, align 8, !tbaa !14
  %256 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %255, i64 0, i32 2
  %257 = load ptr, ptr %256, align 8, !tbaa !25
  %258 = load ptr, ptr %257, align 8, !tbaa !23
  store i32 0, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %65, align 4, !tbaa !7
  store i32 0, ptr %66, align 4, !tbaa !7
  %259 = trunc i64 %248 to i32
  %260 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %251, i32 noundef %259, ptr noundef nonnull %8) #33
  %261 = load ptr, ptr %246, align 8, !tbaa !14
  %262 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %261, i64 0, i32 3
  %263 = load ptr, ptr %262, align 8, !tbaa !27
  %264 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %261, i64 0, i32 6
  %265 = load ptr, ptr %264, align 8, !tbaa !28
  %266 = getelementptr inbounds i32, ptr %265, i64 %248
  %267 = load i32, ptr %266, align 4, !tbaa !7
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds double, ptr %263, i64 %268
  %270 = load i32, ptr %250, align 4, !tbaa !7
  store i32 %270, ptr %10, align 4, !tbaa !7
  %271 = getelementptr inbounds [3 x i32], ptr %250, i64 0, i64 1
  %272 = load i32, ptr %271, align 4, !tbaa !7
  store i32 %272, ptr %67, align 4, !tbaa !7
  %273 = getelementptr inbounds [3 x i32], ptr %250, i64 0, i64 2
  %274 = load i32, ptr %273, align 4, !tbaa !7
  store i32 %274, ptr %68, align 4, !tbaa !7
  %275 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %250, ptr noundef nonnull %7, ptr noundef nonnull %9) #33
  %276 = load i32, ptr %7, align 8, !tbaa !7
  %277 = load i32, ptr %9, align 4, !tbaa !7
  %278 = load i32, ptr %69, align 4, !tbaa !7
  %279 = load i32, ptr %70, align 4, !tbaa !7
  %280 = call i32 @llvm.smax.i32(i32 %278, i32 %277)
  %281 = call i32 @llvm.smax.i32(i32 %279, i32 %280)
  %282 = icmp sgt i32 %281, 0
  br i1 %282, label %283, label %398

283:                                              ; preds = %247
  %284 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %248, i32 1
  %285 = load i32, ptr %284, align 4, !tbaa !7
  %286 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %248
  %287 = load i32, ptr %286, align 4, !tbaa !7
  %288 = sub nsw i32 %285, %287
  %289 = icmp slt i32 %288, 0
  %290 = add nsw i32 %288, 1
  %291 = select i1 %289, i32 0, i32 %290
  %292 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %248, i32 1, i64 1
  %293 = load i32, ptr %292, align 4, !tbaa !7
  %294 = getelementptr inbounds [3 x i32], ptr %286, i64 0, i64 1
  %295 = load i32, ptr %294, align 4, !tbaa !7
  %296 = sub nsw i32 %293, %295
  %297 = icmp slt i32 %296, 0
  %298 = add nsw i32 %296, 1
  %299 = select i1 %297, i32 0, i32 %298
  %300 = mul i32 %291, %299
  %301 = load i32, ptr %62, align 8, !tbaa !7
  %302 = mul i32 %300, %301
  %303 = load i32, ptr %61, align 4, !tbaa !7
  %304 = mul nsw i32 %291, %303
  %305 = getelementptr inbounds %struct.hypre_Box_struct, ptr %254, i64 %248, i32 1
  %306 = load i32, ptr %305, align 4, !tbaa !7
  %307 = getelementptr inbounds %struct.hypre_Box_struct, ptr %254, i64 %248
  %308 = load i32, ptr %307, align 4, !tbaa !7
  %309 = sub nsw i32 %306, %308
  %310 = icmp slt i32 %309, 0
  %311 = add nsw i32 %309, 1
  %312 = select i1 %310, i32 0, i32 %311
  %313 = getelementptr inbounds %struct.hypre_Box_struct, ptr %254, i64 %248, i32 1, i64 1
  %314 = load i32, ptr %313, align 4, !tbaa !7
  %315 = getelementptr inbounds [3 x i32], ptr %307, i64 0, i64 1
  %316 = load i32, ptr %315, align 4, !tbaa !7
  %317 = sub nsw i32 %314, %316
  %318 = icmp slt i32 %317, 0
  %319 = add nsw i32 %317, 1
  %320 = select i1 %318, i32 0, i32 %319
  %321 = mul i32 %312, %320
  %322 = mul i32 %321, %301
  %323 = mul nsw i32 %303, %312
  %324 = icmp sgt i32 %279, 0
  %325 = icmp sgt i32 %278, 0
  %326 = icmp sgt i32 %277, 0
  %327 = mul i32 %276, %277
  %328 = sub i32 %323, %327
  %329 = sub i32 %304, %327
  %330 = mul nsw i32 %278, %323
  %331 = sub i32 %322, %330
  %332 = mul nsw i32 %278, %304
  %333 = sub i32 %302, %332
  br i1 %324, label %334, label %398

334:                                              ; preds = %283
  %335 = load i32, ptr %10, align 4, !tbaa !7
  %336 = sub i32 %335, %308
  %337 = load i32, ptr %67, align 4, !tbaa !7
  %338 = sub i32 %337, %316
  %339 = load i32, ptr %68, align 4, !tbaa !7
  %340 = getelementptr inbounds [3 x i32], ptr %307, i64 0, i64 2
  %341 = load i32, ptr %340, align 4, !tbaa !7
  %342 = sub nsw i32 %339, %341
  %343 = mul nsw i32 %320, %342
  %344 = add nsw i32 %338, %343
  %345 = mul nsw i32 %344, %312
  %346 = add nsw i32 %336, %345
  %347 = sub i32 %335, %287
  %348 = sub i32 %337, %295
  %349 = getelementptr inbounds [3 x i32], ptr %286, i64 0, i64 2
  %350 = load i32, ptr %349, align 4, !tbaa !7
  %351 = sub nsw i32 %339, %350
  %352 = mul nsw i32 %299, %351
  %353 = add nsw i32 %348, %352
  %354 = mul nsw i32 %353, %291
  %355 = add nsw i32 %347, %354
  %356 = sext i32 %276 to i64
  br label %357

357:                                              ; preds = %391, %334
  %358 = phi i32 [ %394, %391 ], [ %346, %334 ]
  %359 = phi i32 [ %395, %391 ], [ %355, %334 ]
  %360 = phi i32 [ %396, %391 ], [ 0, %334 ]
  br i1 %325, label %361, label %391

361:                                              ; preds = %384, %357
  %362 = phi i32 [ %387, %384 ], [ %358, %357 ]
  %363 = phi i32 [ %388, %384 ], [ %359, %357 ]
  %364 = phi i32 [ %389, %384 ], [ 0, %357 ]
  br i1 %326, label %365, label %384

365:                                              ; preds = %361
  %366 = sext i32 %362 to i64
  %367 = sext i32 %363 to i64
  br label %368

368:                                              ; preds = %368, %365
  %369 = phi i64 [ %367, %365 ], [ %378, %368 ]
  %370 = phi i64 [ %366, %365 ], [ %377, %368 ]
  %371 = phi i32 [ 0, %365 ], [ %379, %368 ]
  %372 = getelementptr inbounds double, ptr %260, i64 %370
  %373 = load double, ptr %372, align 8, !tbaa !29
  %374 = getelementptr inbounds double, ptr %269, i64 %369
  %375 = load double, ptr %374, align 8, !tbaa !29
  %376 = fdiv double %375, %373
  store double %376, ptr %374, align 8, !tbaa !29
  %377 = add i64 %370, %356
  %378 = add i64 %369, %356
  %379 = add nuw nsw i32 %371, 1
  %380 = icmp eq i32 %379, %277
  br i1 %380, label %381, label %368, !llvm.loop !262

381:                                              ; preds = %368
  %.lcssa6 = phi i64 [ %377, %368 ]
  %.lcssa5 = phi i64 [ %378, %368 ]
  %382 = trunc i64 %.lcssa5 to i32
  %383 = trunc i64 %.lcssa6 to i32
  br label %384

384:                                              ; preds = %381, %361
  %385 = phi i32 [ %363, %361 ], [ %382, %381 ]
  %386 = phi i32 [ %362, %361 ], [ %383, %381 ]
  %387 = add nsw i32 %328, %386
  %388 = add nsw i32 %329, %385
  %389 = add nuw nsw i32 %364, 1
  %390 = icmp eq i32 %389, %278
  br i1 %390, label %391, label %361, !llvm.loop !263

391:                                              ; preds = %384, %357
  %392 = phi i32 [ %359, %357 ], [ %388, %384 ]
  %393 = phi i32 [ %358, %357 ], [ %387, %384 ]
  %394 = add nsw i32 %331, %393
  %395 = add nsw i32 %333, %392
  %396 = add nuw nsw i32 %360, 1
  %397 = icmp eq i32 %396, %279
  br i1 %397, label %398, label %357, !llvm.loop !264

398:                                              ; preds = %391, %283, %247
  %399 = add nuw nsw i64 %248, 1
  %400 = load i32, ptr %241, align 8, !tbaa !21
  %401 = sext i32 %400 to i64
  %402 = icmp slt i64 %399, %401
  br i1 %402, label %247, label %403, !llvm.loop !265

403:                                              ; preds = %398, %235
  %404 = icmp eq i64 %227, %73
  br i1 %404, label %752, label %405

405:                                              ; preds = %403
  %406 = getelementptr inbounds ptr, ptr %25, i64 %227
  %407 = load ptr, ptr %406, align 8, !tbaa !14
  %408 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %407, i64 0, i32 1
  %409 = load ptr, ptr %408, align 8, !tbaa !39
  %410 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %409, i64 0, i32 3
  %411 = load ptr, ptr %410, align 8, !tbaa !195
  %412 = add nuw nsw i64 %227, 1
  %413 = getelementptr inbounds ptr, ptr %25, i64 %412
  %414 = load ptr, ptr %413, align 8, !tbaa !14
  %415 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %414, i64 0, i32 1
  %416 = load ptr, ptr %415, align 8, !tbaa !39
  %417 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %416, i64 0, i32 2
  %418 = load ptr, ptr %417, align 8, !tbaa !20
  %419 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %416, i64 0, i32 3
  %420 = load ptr, ptr %419, align 8, !tbaa !195
  %421 = getelementptr inbounds ptr, ptr %27, i64 %227
  %422 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %418, i64 0, i32 1
  %423 = getelementptr inbounds ptr, ptr %23, i64 %227
  br label %424

424:                                              ; preds = %751, %405
  %425 = phi i1 [ true, %405 ], [ false, %751 ]
  br i1 %425, label %426, label %434

426:                                              ; preds = %424
  %427 = load ptr, ptr %406, align 8, !tbaa !14
  %428 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %427, i64 0, i32 3
  %429 = load ptr, ptr %428, align 8, !tbaa !27
  %430 = load ptr, ptr %421, align 8, !tbaa !14
  %431 = call i32 @hypre_InitializeIndtComputations(ptr noundef %430, ptr noundef %429, ptr noundef nonnull %5) #33
  %432 = load ptr, ptr %421, align 8, !tbaa !14
  %433 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %432, i64 0, i32 1
  br label %439

434:                                              ; preds = %424
  %435 = load ptr, ptr %5, align 8, !tbaa !14
  %436 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %435) #33
  %437 = load ptr, ptr %421, align 8, !tbaa !14
  %438 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %437, i64 0, i32 2
  br label %439

439:                                              ; preds = %434, %426
  %440 = phi ptr [ %438, %434 ], [ %433, %426 ]
  %441 = load ptr, ptr %440, align 8, !tbaa !14
  %442 = load i32, ptr %422, align 8, !tbaa !21
  %443 = icmp sgt i32 %442, 0
  br i1 %443, label %444, label %751

444:                                              ; preds = %746, %439
  %445 = phi i64 [ %747, %746 ], [ 0, %439 ]
  %446 = phi i64 [ %.lcssa7, %746 ], [ 0, %439 ]
  %447 = getelementptr inbounds i32, ptr %420, i64 %445
  %448 = load i32, ptr %447, align 4, !tbaa !7
  %449 = shl i64 %446, 32
  %450 = ashr exact i64 %449, 32
  br label %451

451:                                              ; preds = %451, %444
  %452 = phi i64 [ %456, %451 ], [ %450, %444 ]
  %453 = getelementptr inbounds i32, ptr %411, i64 %452
  %454 = load i32, ptr %453, align 4, !tbaa !7
  %455 = icmp eq i32 %454, %448
  %456 = add i64 %452, 1
  br i1 %455, label %457, label %451, !llvm.loop !266

457:                                              ; preds = %451
  %.lcssa7 = phi i64 [ %452, %451 ]
  %458 = trunc i64 %.lcssa7 to i32
  %459 = load ptr, ptr %441, align 8, !tbaa !42
  %460 = getelementptr inbounds ptr, ptr %459, i64 %.lcssa7
  %461 = load ptr, ptr %460, align 8, !tbaa !14
  %462 = load ptr, ptr %423, align 8, !tbaa !14
  %463 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %462, i64 0, i32 5
  %464 = load ptr, ptr %463, align 8, !tbaa !24
  %465 = load ptr, ptr %464, align 8, !tbaa !23
  %466 = getelementptr inbounds %struct.hypre_Box_struct, ptr %465, i64 %.lcssa7
  %467 = load ptr, ptr %406, align 8, !tbaa !14
  %468 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %467, i64 0, i32 2
  %469 = load ptr, ptr %468, align 8, !tbaa !25
  %470 = load ptr, ptr %469, align 8, !tbaa !23
  %471 = getelementptr inbounds %struct.hypre_Box_struct, ptr %470, i64 %.lcssa7
  %472 = load ptr, ptr %413, align 8, !tbaa !14
  %473 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %472, i64 0, i32 2
  %474 = load ptr, ptr %473, align 8, !tbaa !25
  %475 = load ptr, ptr %474, align 8, !tbaa !23
  %476 = getelementptr inbounds %struct.hypre_Box_struct, ptr %475, i64 %445
  %477 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %467, i64 0, i32 3
  %478 = load ptr, ptr %477, align 8, !tbaa !27
  %479 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %467, i64 0, i32 6
  %480 = load ptr, ptr %479, align 8, !tbaa !28
  %481 = getelementptr inbounds i32, ptr %480, i64 %.lcssa7
  %482 = load i32, ptr %481, align 4, !tbaa !7
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds double, ptr %478, i64 %483
  %485 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %472, i64 0, i32 3
  %486 = load ptr, ptr %485, align 8, !tbaa !27
  %487 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %472, i64 0, i32 6
  %488 = load ptr, ptr %487, align 8, !tbaa !28
  %489 = getelementptr inbounds i32, ptr %488, i64 %445
  %490 = load i32, ptr %489, align 4, !tbaa !7
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds double, ptr %486, i64 %491
  store i32 -1, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %65, align 4, !tbaa !7
  store i32 0, ptr %66, align 4, !tbaa !7
  %493 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %462, i32 noundef %458, ptr noundef nonnull %8) #33
  %494 = load ptr, ptr %406, align 8, !tbaa !14
  %495 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %494, i64 0, i32 3
  %496 = load ptr, ptr %495, align 8, !tbaa !27
  %497 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %494, i64 0, i32 6
  %498 = load ptr, ptr %497, align 8, !tbaa !28
  %499 = getelementptr inbounds i32, ptr %498, i64 %.lcssa7
  %500 = load i32, ptr %499, align 4, !tbaa !7
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds double, ptr %496, i64 %501
  %503 = load i32, ptr %8, align 4, !tbaa !7
  %504 = load i32, ptr %65, align 4, !tbaa !7
  %505 = load i32, ptr %66, align 4, !tbaa !7
  %506 = getelementptr inbounds %struct.hypre_Box_struct, ptr %470, i64 %.lcssa7, i32 1
  %507 = getelementptr inbounds %struct.hypre_Box_struct, ptr %470, i64 %.lcssa7, i32 1, i64 1
  %508 = load i32, ptr %507, align 4, !tbaa !7
  %509 = getelementptr inbounds [3 x i32], ptr %471, i64 0, i64 1
  %510 = load i32, ptr %509, align 4, !tbaa !7
  %511 = sub nsw i32 %508, %510
  %512 = add nsw i32 %511, 1
  %513 = icmp slt i32 %511, 0
  %514 = select i1 %513, i32 0, i32 %512
  %515 = mul nsw i32 %514, %505
  %516 = add nsw i32 %515, %504
  %517 = load i32, ptr %506, align 4, !tbaa !7
  %518 = load i32, ptr %471, align 4, !tbaa !7
  %519 = sub nsw i32 %517, %518
  %520 = add nsw i32 %519, 1
  %521 = icmp slt i32 %519, 0
  %522 = select i1 %521, i32 0, i32 %520
  %523 = mul nsw i32 %516, %522
  %524 = add nsw i32 %523, %503
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds double, ptr %502, i64 %525
  store i32 1, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %65, align 4, !tbaa !7
  store i32 0, ptr %66, align 4, !tbaa !7
  %527 = load ptr, ptr %423, align 8, !tbaa !14
  %528 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %527, i32 noundef %458, ptr noundef nonnull %8) #33
  %529 = load ptr, ptr %406, align 8, !tbaa !14
  %530 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %529, i64 0, i32 3
  %531 = load ptr, ptr %530, align 8, !tbaa !27
  %532 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %529, i64 0, i32 6
  %533 = load ptr, ptr %532, align 8, !tbaa !28
  %534 = getelementptr inbounds i32, ptr %533, i64 %.lcssa7
  %535 = load i32, ptr %534, align 4, !tbaa !7
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds double, ptr %531, i64 %536
  %538 = load i32, ptr %8, align 4, !tbaa !7
  %539 = load i32, ptr %65, align 4, !tbaa !7
  %540 = load i32, ptr %66, align 4, !tbaa !7
  %541 = load i32, ptr %507, align 4, !tbaa !7
  %542 = load i32, ptr %509, align 4, !tbaa !7
  %543 = sub nsw i32 %541, %542
  %544 = add nsw i32 %543, 1
  %545 = icmp slt i32 %543, 0
  %546 = select i1 %545, i32 0, i32 %544
  %547 = mul nsw i32 %546, %540
  %548 = add nsw i32 %547, %539
  %549 = load i32, ptr %506, align 4, !tbaa !7
  %550 = load i32, ptr %471, align 4, !tbaa !7
  %551 = sub nsw i32 %549, %550
  %552 = add nsw i32 %551, 1
  %553 = icmp slt i32 %551, 0
  %554 = select i1 %553, i32 0, i32 %552
  %555 = mul nsw i32 %548, %554
  %556 = add nsw i32 %555, %538
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds double, ptr %537, i64 %557
  %559 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %461, i64 0, i32 1
  %560 = load i32, ptr %559, align 8, !tbaa !21
  %561 = icmp sgt i32 %560, 0
  br i1 %561, label %562, label %746

562:                                              ; preds = %457
  %563 = getelementptr inbounds [3 x i32], ptr %466, i64 0, i64 1
  %564 = getelementptr inbounds [3 x i32], ptr %466, i64 0, i64 2
  %565 = getelementptr inbounds %struct.hypre_Box_struct, ptr %465, i64 %.lcssa7, i32 1
  %566 = getelementptr inbounds %struct.hypre_Box_struct, ptr %465, i64 %.lcssa7, i32 1, i64 1
  %567 = getelementptr inbounds [3 x i32], ptr %471, i64 0, i64 2
  %568 = getelementptr inbounds [3 x i32], ptr %476, i64 0, i64 1
  %569 = getelementptr inbounds [3 x i32], ptr %476, i64 0, i64 2
  %570 = getelementptr inbounds %struct.hypre_Box_struct, ptr %475, i64 %445, i32 1
  %571 = getelementptr inbounds %struct.hypre_Box_struct, ptr %475, i64 %445, i32 1, i64 1
  br label %572

572:                                              ; preds = %741, %562
  %573 = phi i64 [ 0, %562 ], [ %742, %741 ]
  %574 = load ptr, ptr %461, align 8, !tbaa !23
  %575 = getelementptr inbounds %struct.hypre_Box_struct, ptr %574, i64 %573
  %576 = load i32, ptr %575, align 4, !tbaa !7
  store i32 %576, ptr %10, align 4, !tbaa !7
  %577 = getelementptr inbounds [3 x i32], ptr %575, i64 0, i64 1
  %578 = load i32, ptr %577, align 4, !tbaa !7
  store i32 %578, ptr %67, align 4, !tbaa !7
  %579 = getelementptr inbounds [3 x i32], ptr %575, i64 0, i64 2
  %580 = load i32, ptr %579, align 4, !tbaa !7
  store i32 %580, ptr %68, align 4, !tbaa !7
  %581 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %10, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %11) #33
  %582 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %575, ptr noundef nonnull %7, ptr noundef nonnull %9) #33
  %583 = load i32, ptr %7, align 8, !tbaa !7
  %584 = load i32, ptr %9, align 4, !tbaa !7
  %585 = load i32, ptr %69, align 4, !tbaa !7
  %586 = load i32, ptr %70, align 4, !tbaa !7
  %587 = call i32 @llvm.smax.i32(i32 %585, i32 %584)
  %588 = call i32 @llvm.smax.i32(i32 %586, i32 %587)
  %589 = icmp sgt i32 %588, 0
  br i1 %589, label %590, label %741

590:                                              ; preds = %572
  %591 = load i32, ptr %506, align 4, !tbaa !7
  %592 = load i32, ptr %471, align 4, !tbaa !7
  %593 = sub nsw i32 %591, %592
  %594 = icmp slt i32 %593, 0
  %595 = add nsw i32 %593, 1
  %596 = select i1 %594, i32 0, i32 %595
  %597 = load i32, ptr %507, align 4, !tbaa !7
  %598 = load i32, ptr %509, align 4, !tbaa !7
  %599 = sub nsw i32 %597, %598
  %600 = icmp slt i32 %599, 0
  %601 = add nsw i32 %599, 1
  %602 = select i1 %600, i32 0, i32 %601
  %603 = mul i32 %596, %602
  %604 = load i32, ptr %62, align 8, !tbaa !7
  %605 = mul i32 %603, %604
  %606 = load i32, ptr %61, align 4, !tbaa !7
  %607 = mul nsw i32 %606, %596
  %608 = load i32, ptr %565, align 4, !tbaa !7
  %609 = load i32, ptr %466, align 4, !tbaa !7
  %610 = sub nsw i32 %608, %609
  %611 = icmp slt i32 %610, 0
  %612 = add nsw i32 %610, 1
  %613 = select i1 %611, i32 0, i32 %612
  %614 = load i32, ptr %566, align 4, !tbaa !7
  %615 = load i32, ptr %563, align 4, !tbaa !7
  %616 = sub nsw i32 %614, %615
  %617 = icmp slt i32 %616, 0
  %618 = add nsw i32 %616, 1
  %619 = select i1 %617, i32 0, i32 %618
  %620 = mul i32 %613, %619
  %621 = mul i32 %620, %604
  %622 = mul nsw i32 %606, %613
  %623 = load i32, ptr %476, align 4, !tbaa !7
  %624 = load i32, ptr %568, align 4, !tbaa !7
  %625 = load i32, ptr %571, align 4, !tbaa !7
  %626 = sub nsw i32 %625, %624
  %627 = icmp slt i32 %626, 0
  %628 = add nsw i32 %626, 1
  %629 = select i1 %627, i32 0, i32 %628
  %630 = load i32, ptr %570, align 4, !tbaa !7
  %631 = sub nsw i32 %630, %623
  %632 = icmp slt i32 %631, 0
  %633 = add nsw i32 %631, 1
  %634 = select i1 %632, i32 0, i32 %633
  %635 = icmp sgt i32 %586, 0
  %636 = icmp sgt i32 %585, 0
  %637 = icmp sgt i32 %584, 0
  %638 = mul i32 %583, %584
  %639 = sub i32 %622, %638
  %640 = sub i32 %607, %638
  %641 = sub i32 %634, %584
  %642 = mul nsw i32 %585, %622
  %643 = sub i32 %621, %642
  %644 = mul nsw i32 %585, %607
  %645 = sub i32 %605, %644
  %646 = sub i32 %629, %585
  %647 = mul i32 %646, %634
  br i1 %635, label %648, label %741

648:                                              ; preds = %590
  %649 = load i32, ptr %10, align 4, !tbaa !7
  %650 = sub i32 %649, %609
  %651 = load i32, ptr %67, align 4, !tbaa !7
  %652 = sub i32 %651, %615
  %653 = load i32, ptr %68, align 4, !tbaa !7
  %654 = load i32, ptr %564, align 4, !tbaa !7
  %655 = sub nsw i32 %653, %654
  %656 = mul nsw i32 %619, %655
  %657 = add nsw i32 %652, %656
  %658 = mul nsw i32 %657, %613
  %659 = add nsw i32 %650, %658
  %660 = sub i32 %649, %592
  %661 = sub i32 %651, %598
  %662 = load i32, ptr %567, align 4, !tbaa !7
  %663 = sub nsw i32 %653, %662
  %664 = mul nsw i32 %602, %663
  %665 = add nsw i32 %661, %664
  %666 = mul nsw i32 %665, %596
  %667 = add nsw i32 %660, %666
  %668 = load i32, ptr %11, align 4, !tbaa !7
  %669 = sub i32 %668, %623
  %670 = load i32, ptr %71, align 4, !tbaa !7
  %671 = sub i32 %670, %624
  %672 = load i32, ptr %72, align 4, !tbaa !7
  %673 = load i32, ptr %569, align 4, !tbaa !7
  %674 = sub nsw i32 %672, %673
  %675 = mul nsw i32 %629, %674
  %676 = add nsw i32 %671, %675
  %677 = mul nsw i32 %676, %634
  %678 = add nsw i32 %669, %677
  %679 = sext i32 %583 to i64
  br label %680

680:                                              ; preds = %732, %648
  %681 = phi i32 [ %736, %732 ], [ %659, %648 ]
  %682 = phi i32 [ %737, %732 ], [ %667, %648 ]
  %683 = phi i32 [ %738, %732 ], [ %678, %648 ]
  %684 = phi i32 [ %739, %732 ], [ 0, %648 ]
  br i1 %636, label %685, label %732

685:                                              ; preds = %723, %680
  %686 = phi i32 [ %727, %723 ], [ %681, %680 ]
  %687 = phi i32 [ %728, %723 ], [ %682, %680 ]
  %688 = phi i32 [ %729, %723 ], [ %683, %680 ]
  %689 = phi i32 [ %730, %723 ], [ 0, %680 ]
  br i1 %637, label %690, label %723

690:                                              ; preds = %685
  %691 = sext i32 %686 to i64
  %692 = sext i32 %687 to i64
  %693 = sext i32 %688 to i64
  br label %694

694:                                              ; preds = %694, %690
  %695 = phi i64 [ %693, %690 ], [ %716, %694 ]
  %696 = phi i64 [ %692, %690 ], [ %715, %694 ]
  %697 = phi i64 [ %691, %690 ], [ %714, %694 ]
  %698 = phi i32 [ 0, %690 ], [ %717, %694 ]
  %699 = getelementptr inbounds double, ptr %484, i64 %696
  %700 = load double, ptr %699, align 8, !tbaa !29
  %701 = getelementptr inbounds double, ptr %493, i64 %697
  %702 = load double, ptr %701, align 8, !tbaa !29
  %703 = getelementptr inbounds double, ptr %526, i64 %696
  %704 = load double, ptr %703, align 8, !tbaa !29
  %705 = fneg double %702
  %706 = call double @llvm.fmuladd.f64(double %705, double %704, double %700)
  %707 = getelementptr inbounds double, ptr %528, i64 %697
  %708 = load double, ptr %707, align 8, !tbaa !29
  %709 = getelementptr inbounds double, ptr %558, i64 %696
  %710 = load double, ptr %709, align 8, !tbaa !29
  %711 = fneg double %708
  %712 = call double @llvm.fmuladd.f64(double %711, double %710, double %706)
  %713 = getelementptr inbounds double, ptr %492, i64 %695
  store double %712, ptr %713, align 8, !tbaa !29
  %714 = add i64 %697, %679
  %715 = add i64 %696, %679
  %716 = add nsw i64 %695, 1
  %717 = add nuw nsw i32 %698, 1
  %718 = icmp eq i32 %717, %584
  br i1 %718, label %719, label %694, !llvm.loop !267

719:                                              ; preds = %694
  %.lcssa10 = phi i64 [ %714, %694 ]
  %.lcssa9 = phi i64 [ %715, %694 ]
  %.lcssa8 = phi i64 [ %716, %694 ]
  %720 = trunc i64 %.lcssa8 to i32
  %721 = trunc i64 %.lcssa9 to i32
  %722 = trunc i64 %.lcssa10 to i32
  br label %723

723:                                              ; preds = %719, %685
  %724 = phi i32 [ %688, %685 ], [ %720, %719 ]
  %725 = phi i32 [ %687, %685 ], [ %721, %719 ]
  %726 = phi i32 [ %686, %685 ], [ %722, %719 ]
  %727 = add nsw i32 %639, %726
  %728 = add nsw i32 %640, %725
  %729 = add nsw i32 %641, %724
  %730 = add nuw nsw i32 %689, 1
  %731 = icmp eq i32 %730, %585
  br i1 %731, label %732, label %685, !llvm.loop !268

732:                                              ; preds = %723, %680
  %733 = phi i32 [ %683, %680 ], [ %729, %723 ]
  %734 = phi i32 [ %682, %680 ], [ %728, %723 ]
  %735 = phi i32 [ %681, %680 ], [ %727, %723 ]
  %736 = add nsw i32 %643, %735
  %737 = add nsw i32 %645, %734
  %738 = add nsw i32 %733, %647
  %739 = add nuw nsw i32 %684, 1
  %740 = icmp eq i32 %739, %586
  br i1 %740, label %741, label %680, !llvm.loop !269

741:                                              ; preds = %732, %590, %572
  %742 = add nuw nsw i64 %573, 1
  %743 = load i32, ptr %559, align 8, !tbaa !21
  %744 = sext i32 %743 to i64
  %745 = icmp slt i64 %742, %744
  br i1 %745, label %572, label %746, !llvm.loop !270

746:                                              ; preds = %741, %457
  %747 = add nuw nsw i64 %445, 1
  %748 = load i32, ptr %422, align 8, !tbaa !21
  %749 = sext i32 %748 to i64
  %750 = icmp slt i64 %747, %749
  br i1 %750, label %444, label %751, !llvm.loop !271

751:                                              ; preds = %746, %439
  br i1 %425, label %424, label %225, !llvm.loop !261

752:                                              ; preds = %403
  %753 = icmp sgt i32 %13, 1
  br i1 %753, label %754, label %1233

754:                                              ; preds = %752
  %755 = add nsw i32 %13, -2
  %756 = zext i32 %755 to i64
  br label %757

757:                                              ; preds = %1230, %754
  %758 = phi i64 [ %756, %754 ], [ %1231, %1230 ]
  %759 = icmp eq i64 %758, 0
  br i1 %759, label %761, label %760

760:                                              ; preds = %757
  store i32 0, ptr %6, align 8, !tbaa !7
  store i32 0, ptr %59, align 4, !tbaa !7
  store i32 0, ptr %60, align 8, !tbaa !7
  store i32 1, ptr %7, align 8, !tbaa !7
  store i32 1, ptr %61, align 4, !tbaa !7
  br label %766

761:                                              ; preds = %757
  %762 = load <2 x i32>, ptr %16, align 4, !tbaa !7
  store <2 x i32> %762, ptr %6, align 8, !tbaa !7
  %763 = load i32, ptr %63, align 4, !tbaa !7
  store i32 %763, ptr %60, align 8, !tbaa !7
  %764 = load <2 x i32>, ptr %17, align 4, !tbaa !7
  store <2 x i32> %764, ptr %7, align 8, !tbaa !7
  %765 = load i32, ptr %64, align 4, !tbaa !7
  br label %766

766:                                              ; preds = %761, %760
  %767 = phi i32 [ 1, %760 ], [ %765, %761 ]
  store i32 %767, ptr %62, align 8, !tbaa !7
  %768 = load i32, ptr %58, align 4, !tbaa !7
  %769 = shl nsw i32 %768, 1
  store i32 %769, ptr %58, align 4, !tbaa !7
  %770 = getelementptr inbounds ptr, ptr %25, i64 %758
  %771 = load ptr, ptr %770, align 8, !tbaa !14
  %772 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %771, i64 0, i32 1
  %773 = load ptr, ptr %772, align 8, !tbaa !39
  %774 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %773, i64 0, i32 3
  %775 = load ptr, ptr %774, align 8, !tbaa !195
  %776 = add nuw nsw i64 %758, 1
  %777 = getelementptr inbounds ptr, ptr %25, i64 %776
  %778 = load ptr, ptr %777, align 8, !tbaa !14
  %779 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %778, i64 0, i32 1
  %780 = load ptr, ptr %779, align 8, !tbaa !39
  %781 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %780, i64 0, i32 2
  %782 = load ptr, ptr %781, align 8, !tbaa !20
  %783 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %780, i64 0, i32 3
  %784 = load ptr, ptr %783, align 8, !tbaa !195
  %785 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %782, i64 0, i32 1
  %786 = load i32, ptr %785, align 8, !tbaa !21
  %787 = icmp sgt i32 %786, 0
  br i1 %787, label %791, label %788

788:                                              ; preds = %958, %766
  %789 = getelementptr inbounds ptr, ptr %29, i64 %758
  %790 = getelementptr inbounds ptr, ptr %23, i64 %758
  br label %963

791:                                              ; preds = %958, %766
  %792 = phi i64 [ %959, %958 ], [ 0, %766 ]
  %793 = phi i64 [ %.lcssa, %958 ], [ 0, %766 ]
  %794 = getelementptr inbounds i32, ptr %784, i64 %792
  %795 = load i32, ptr %794, align 4, !tbaa !7
  %796 = shl i64 %793, 32
  %797 = ashr exact i64 %796, 32
  br label %798

798:                                              ; preds = %798, %791
  %799 = phi i64 [ %803, %798 ], [ %797, %791 ]
  %800 = getelementptr inbounds i32, ptr %775, i64 %799
  %801 = load i32, ptr %800, align 4, !tbaa !7
  %802 = icmp eq i32 %801, %795
  %803 = add i64 %799, 1
  br i1 %802, label %804, label %798, !llvm.loop !272

804:                                              ; preds = %798
  %.lcssa = phi i64 [ %799, %798 ]
  %805 = load ptr, ptr %782, align 8, !tbaa !23
  %806 = getelementptr inbounds %struct.hypre_Box_struct, ptr %805, i64 %792
  %807 = load i32, ptr %806, align 4, !tbaa !7
  store i32 %807, ptr %11, align 4, !tbaa !7
  %808 = getelementptr inbounds [3 x i32], ptr %806, i64 0, i64 1
  %809 = load i32, ptr %808, align 4, !tbaa !7
  store i32 %809, ptr %71, align 4, !tbaa !7
  %810 = getelementptr inbounds [3 x i32], ptr %806, i64 0, i64 2
  %811 = load i32, ptr %810, align 4, !tbaa !7
  store i32 %811, ptr %72, align 4, !tbaa !7
  %812 = call i32 @hypre_StructMapCoarseToFine(ptr noundef nonnull %11, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %10) #33
  %813 = load ptr, ptr %770, align 8, !tbaa !14
  %814 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %813, i64 0, i32 2
  %815 = load ptr, ptr %814, align 8, !tbaa !25
  %816 = load ptr, ptr %815, align 8, !tbaa !23
  %817 = load ptr, ptr %777, align 8, !tbaa !14
  %818 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %817, i64 0, i32 2
  %819 = load ptr, ptr %818, align 8, !tbaa !25
  %820 = load ptr, ptr %819, align 8, !tbaa !23
  %821 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %813, i64 0, i32 3
  %822 = load ptr, ptr %821, align 8, !tbaa !27
  %823 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %813, i64 0, i32 6
  %824 = load ptr, ptr %823, align 8, !tbaa !28
  %825 = getelementptr inbounds i32, ptr %824, i64 %.lcssa
  %826 = load i32, ptr %825, align 4, !tbaa !7
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds double, ptr %822, i64 %827
  %829 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %817, i64 0, i32 3
  %830 = load ptr, ptr %829, align 8, !tbaa !27
  %831 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %817, i64 0, i32 6
  %832 = load ptr, ptr %831, align 8, !tbaa !28
  %833 = getelementptr inbounds i32, ptr %832, i64 %792
  %834 = load i32, ptr %833, align 4, !tbaa !7
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds double, ptr %830, i64 %835
  %837 = call i32 @hypre_BoxGetSize(ptr noundef nonnull %806, ptr noundef nonnull %9) #33
  %838 = load i32, ptr %7, align 8, !tbaa !7
  %839 = load i32, ptr %9, align 4, !tbaa !7
  %840 = load i32, ptr %69, align 4, !tbaa !7
  %841 = load i32, ptr %70, align 4, !tbaa !7
  %842 = call i32 @llvm.smax.i32(i32 %840, i32 %839)
  %843 = call i32 @llvm.smax.i32(i32 %841, i32 %842)
  %844 = icmp sgt i32 %843, 0
  br i1 %844, label %845, label %958

845:                                              ; preds = %804
  %846 = getelementptr inbounds %struct.hypre_Box_struct, ptr %816, i64 %.lcssa, i32 1
  %847 = load i32, ptr %846, align 4, !tbaa !7
  %848 = getelementptr inbounds %struct.hypre_Box_struct, ptr %816, i64 %.lcssa
  %849 = load i32, ptr %848, align 4, !tbaa !7
  %850 = sub nsw i32 %847, %849
  %851 = icmp slt i32 %850, 0
  %852 = add nsw i32 %850, 1
  %853 = select i1 %851, i32 0, i32 %852
  %854 = getelementptr inbounds %struct.hypre_Box_struct, ptr %816, i64 %.lcssa, i32 1, i64 1
  %855 = load i32, ptr %854, align 4, !tbaa !7
  %856 = getelementptr inbounds [3 x i32], ptr %848, i64 0, i64 1
  %857 = load i32, ptr %856, align 4, !tbaa !7
  %858 = sub nsw i32 %855, %857
  %859 = icmp slt i32 %858, 0
  %860 = add nsw i32 %858, 1
  %861 = select i1 %859, i32 0, i32 %860
  %862 = mul i32 %853, %861
  %863 = load i32, ptr %62, align 8, !tbaa !7
  %864 = mul i32 %862, %863
  %865 = load i32, ptr %61, align 4, !tbaa !7
  %866 = mul nsw i32 %865, %853
  %867 = getelementptr inbounds %struct.hypre_Box_struct, ptr %820, i64 %792
  %868 = load i32, ptr %867, align 4, !tbaa !7
  %869 = getelementptr inbounds [3 x i32], ptr %867, i64 0, i64 1
  %870 = load i32, ptr %869, align 4, !tbaa !7
  %871 = getelementptr inbounds %struct.hypre_Box_struct, ptr %820, i64 %792, i32 1, i64 1
  %872 = load i32, ptr %871, align 4, !tbaa !7
  %873 = sub nsw i32 %872, %870
  %874 = icmp slt i32 %873, 0
  %875 = add nsw i32 %873, 1
  %876 = select i1 %874, i32 0, i32 %875
  %877 = getelementptr inbounds %struct.hypre_Box_struct, ptr %820, i64 %792, i32 1
  %878 = load i32, ptr %877, align 4, !tbaa !7
  %879 = sub nsw i32 %878, %868
  %880 = icmp slt i32 %879, 0
  %881 = add nsw i32 %879, 1
  %882 = select i1 %880, i32 0, i32 %881
  %883 = icmp sgt i32 %841, 0
  %884 = icmp sgt i32 %840, 0
  %885 = icmp sgt i32 %839, 0
  %886 = mul nsw i32 %839, %838
  %887 = sub i32 %866, %886
  %888 = sub i32 %882, %839
  %889 = mul nsw i32 %840, %866
  %890 = sub i32 %864, %889
  %891 = sub i32 %876, %840
  %892 = mul i32 %891, %882
  br i1 %883, label %893, label %958

893:                                              ; preds = %845
  %894 = load i32, ptr %10, align 4, !tbaa !7
  %895 = sub i32 %894, %849
  %896 = load i32, ptr %67, align 4, !tbaa !7
  %897 = sub i32 %896, %857
  %898 = load i32, ptr %68, align 4, !tbaa !7
  %899 = getelementptr inbounds [3 x i32], ptr %848, i64 0, i64 2
  %900 = load i32, ptr %899, align 4, !tbaa !7
  %901 = sub nsw i32 %898, %900
  %902 = mul nsw i32 %861, %901
  %903 = add nsw i32 %897, %902
  %904 = mul nsw i32 %903, %853
  %905 = add nsw i32 %895, %904
  %906 = load i32, ptr %11, align 4, !tbaa !7
  %907 = sub i32 %906, %868
  %908 = load i32, ptr %71, align 4, !tbaa !7
  %909 = sub i32 %908, %870
  %910 = load i32, ptr %72, align 4, !tbaa !7
  %911 = getelementptr inbounds [3 x i32], ptr %867, i64 0, i64 2
  %912 = load i32, ptr %911, align 4, !tbaa !7
  %913 = sub nsw i32 %910, %912
  %914 = mul nsw i32 %876, %913
  %915 = add nsw i32 %909, %914
  %916 = mul nsw i32 %915, %882
  %917 = add nsw i32 %907, %916
  %918 = sext i32 %838 to i64
  br label %919

919:                                              ; preds = %951, %893
  %920 = phi i32 [ %954, %951 ], [ %905, %893 ]
  %921 = phi i32 [ %955, %951 ], [ %917, %893 ]
  %922 = phi i32 [ %956, %951 ], [ 0, %893 ]
  br i1 %884, label %923, label %951

923:                                              ; preds = %944, %919
  %924 = phi i32 [ %947, %944 ], [ %920, %919 ]
  %925 = phi i32 [ %948, %944 ], [ %921, %919 ]
  %926 = phi i32 [ %949, %944 ], [ 0, %919 ]
  br i1 %885, label %927, label %944

927:                                              ; preds = %923
  %928 = sext i32 %924 to i64
  %929 = sext i32 %925 to i64
  br label %930

930:                                              ; preds = %930, %927
  %931 = phi i64 [ %929, %927 ], [ %938, %930 ]
  %932 = phi i64 [ %928, %927 ], [ %937, %930 ]
  %933 = phi i32 [ 0, %927 ], [ %939, %930 ]
  %934 = getelementptr inbounds double, ptr %836, i64 %931
  %935 = load double, ptr %934, align 8, !tbaa !29
  %936 = getelementptr inbounds double, ptr %828, i64 %932
  store double %935, ptr %936, align 8, !tbaa !29
  %937 = add i64 %932, %918
  %938 = add nsw i64 %931, 1
  %939 = add nuw nsw i32 %933, 1
  %940 = icmp eq i32 %939, %839
  br i1 %940, label %941, label %930, !llvm.loop !273

941:                                              ; preds = %930
  %.lcssa2 = phi i64 [ %937, %930 ]
  %.lcssa1 = phi i64 [ %938, %930 ]
  %942 = trunc i64 %.lcssa1 to i32
  %943 = trunc i64 %.lcssa2 to i32
  br label %944

944:                                              ; preds = %941, %923
  %945 = phi i32 [ %925, %923 ], [ %942, %941 ]
  %946 = phi i32 [ %924, %923 ], [ %943, %941 ]
  %947 = add nsw i32 %887, %946
  %948 = add nsw i32 %888, %945
  %949 = add nuw nsw i32 %926, 1
  %950 = icmp eq i32 %949, %840
  br i1 %950, label %951, label %923, !llvm.loop !274

951:                                              ; preds = %944, %919
  %952 = phi i32 [ %921, %919 ], [ %948, %944 ]
  %953 = phi i32 [ %920, %919 ], [ %947, %944 ]
  %954 = add nsw i32 %890, %953
  %955 = add nsw i32 %952, %892
  %956 = add nuw nsw i32 %922, 1
  %957 = icmp eq i32 %956, %841
  br i1 %957, label %958, label %919, !llvm.loop !275

958:                                              ; preds = %951, %845, %804
  %959 = add nuw nsw i64 %792, 1
  %960 = load i32, ptr %785, align 8, !tbaa !21
  %961 = sext i32 %960 to i64
  %962 = icmp slt i64 %959, %961
  br i1 %962, label %791, label %788, !llvm.loop !276

963:                                              ; preds = %1229, %788
  %964 = phi i1 [ true, %788 ], [ false, %1229 ]
  br i1 %964, label %965, label %973

965:                                              ; preds = %963
  %966 = load ptr, ptr %770, align 8, !tbaa !14
  %967 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %966, i64 0, i32 3
  %968 = load ptr, ptr %967, align 8, !tbaa !27
  %969 = load ptr, ptr %789, align 8, !tbaa !14
  %970 = call i32 @hypre_InitializeIndtComputations(ptr noundef %969, ptr noundef %968, ptr noundef nonnull %5) #33
  %971 = load ptr, ptr %789, align 8, !tbaa !14
  %972 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %971, i64 0, i32 1
  br label %978

973:                                              ; preds = %963
  %974 = load ptr, ptr %5, align 8, !tbaa !14
  %975 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %974) #33
  %976 = load ptr, ptr %789, align 8, !tbaa !14
  %977 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %976, i64 0, i32 2
  br label %978

978:                                              ; preds = %973, %965
  %979 = phi ptr [ %977, %973 ], [ %972, %965 ]
  %980 = load ptr, ptr %979, align 8, !tbaa !14
  %981 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %980, i64 0, i32 1
  %982 = load i32, ptr %981, align 8, !tbaa !45
  %983 = icmp sgt i32 %982, 0
  br i1 %983, label %984, label %1229

984:                                              ; preds = %1224, %978
  %985 = phi i64 [ %1225, %1224 ], [ 0, %978 ]
  %986 = load ptr, ptr %980, align 8, !tbaa !42
  %987 = getelementptr inbounds ptr, ptr %986, i64 %985
  %988 = load ptr, ptr %987, align 8, !tbaa !14
  %989 = load ptr, ptr %790, align 8, !tbaa !14
  %990 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %989, i64 0, i32 5
  %991 = load ptr, ptr %990, align 8, !tbaa !24
  %992 = load ptr, ptr %991, align 8, !tbaa !23
  %993 = getelementptr inbounds %struct.hypre_Box_struct, ptr %992, i64 %985
  %994 = load ptr, ptr %770, align 8, !tbaa !14
  %995 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %994, i64 0, i32 2
  %996 = load ptr, ptr %995, align 8, !tbaa !25
  %997 = load ptr, ptr %996, align 8, !tbaa !23
  %998 = getelementptr inbounds %struct.hypre_Box_struct, ptr %997, i64 %985
  store i32 0, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %65, align 4, !tbaa !7
  store i32 0, ptr %66, align 4, !tbaa !7
  %999 = trunc i64 %985 to i32
  %1000 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %989, i32 noundef %999, ptr noundef nonnull %8) #33
  %1001 = load ptr, ptr %770, align 8, !tbaa !14
  %1002 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1001, i64 0, i32 3
  %1003 = load ptr, ptr %1002, align 8, !tbaa !27
  %1004 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1001, i64 0, i32 6
  %1005 = load ptr, ptr %1004, align 8, !tbaa !28
  %1006 = getelementptr inbounds i32, ptr %1005, i64 %985
  %1007 = load i32, ptr %1006, align 4, !tbaa !7
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds double, ptr %1003, i64 %1008
  store i32 -1, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %65, align 4, !tbaa !7
  store i32 0, ptr %66, align 4, !tbaa !7
  %1010 = load ptr, ptr %790, align 8, !tbaa !14
  %1011 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1010, i32 noundef %999, ptr noundef nonnull %8) #33
  %1012 = load ptr, ptr %770, align 8, !tbaa !14
  %1013 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1012, i64 0, i32 3
  %1014 = load ptr, ptr %1013, align 8, !tbaa !27
  %1015 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1012, i64 0, i32 6
  %1016 = load ptr, ptr %1015, align 8, !tbaa !28
  %1017 = getelementptr inbounds i32, ptr %1016, i64 %985
  %1018 = load i32, ptr %1017, align 4, !tbaa !7
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds double, ptr %1014, i64 %1019
  %1021 = load i32, ptr %8, align 4, !tbaa !7
  %1022 = load i32, ptr %65, align 4, !tbaa !7
  %1023 = load i32, ptr %66, align 4, !tbaa !7
  %1024 = getelementptr inbounds %struct.hypre_Box_struct, ptr %997, i64 %985, i32 1
  %1025 = getelementptr inbounds %struct.hypre_Box_struct, ptr %997, i64 %985, i32 1, i64 1
  %1026 = load i32, ptr %1025, align 4, !tbaa !7
  %1027 = getelementptr inbounds [3 x i32], ptr %998, i64 0, i64 1
  %1028 = load i32, ptr %1027, align 4, !tbaa !7
  %1029 = sub nsw i32 %1026, %1028
  %1030 = add nsw i32 %1029, 1
  %1031 = icmp slt i32 %1029, 0
  %1032 = select i1 %1031, i32 0, i32 %1030
  %1033 = mul nsw i32 %1032, %1023
  %1034 = add nsw i32 %1033, %1022
  %1035 = load i32, ptr %1024, align 4, !tbaa !7
  %1036 = load i32, ptr %998, align 4, !tbaa !7
  %1037 = sub nsw i32 %1035, %1036
  %1038 = add nsw i32 %1037, 1
  %1039 = icmp slt i32 %1037, 0
  %1040 = select i1 %1039, i32 0, i32 %1038
  %1041 = mul nsw i32 %1034, %1040
  %1042 = add nsw i32 %1041, %1021
  %1043 = sext i32 %1042 to i64
  %1044 = getelementptr inbounds double, ptr %1020, i64 %1043
  store i32 1, ptr %8, align 4, !tbaa !7
  store i32 0, ptr %65, align 4, !tbaa !7
  store i32 0, ptr %66, align 4, !tbaa !7
  %1045 = load ptr, ptr %790, align 8, !tbaa !14
  %1046 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1045, i32 noundef %999, ptr noundef nonnull %8) #33
  %1047 = load ptr, ptr %770, align 8, !tbaa !14
  %1048 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1047, i64 0, i32 3
  %1049 = load ptr, ptr %1048, align 8, !tbaa !27
  %1050 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1047, i64 0, i32 6
  %1051 = load ptr, ptr %1050, align 8, !tbaa !28
  %1052 = getelementptr inbounds i32, ptr %1051, i64 %985
  %1053 = load i32, ptr %1052, align 4, !tbaa !7
  %1054 = sext i32 %1053 to i64
  %1055 = getelementptr inbounds double, ptr %1049, i64 %1054
  %1056 = load i32, ptr %8, align 4, !tbaa !7
  %1057 = load i32, ptr %65, align 4, !tbaa !7
  %1058 = load i32, ptr %66, align 4, !tbaa !7
  %1059 = load i32, ptr %1025, align 4, !tbaa !7
  %1060 = load i32, ptr %1027, align 4, !tbaa !7
  %1061 = sub nsw i32 %1059, %1060
  %1062 = add nsw i32 %1061, 1
  %1063 = icmp slt i32 %1061, 0
  %1064 = select i1 %1063, i32 0, i32 %1062
  %1065 = mul nsw i32 %1064, %1058
  %1066 = add nsw i32 %1065, %1057
  %1067 = load i32, ptr %1024, align 4, !tbaa !7
  %1068 = load i32, ptr %998, align 4, !tbaa !7
  %1069 = sub nsw i32 %1067, %1068
  %1070 = add nsw i32 %1069, 1
  %1071 = icmp slt i32 %1069, 0
  %1072 = select i1 %1071, i32 0, i32 %1070
  %1073 = mul nsw i32 %1066, %1072
  %1074 = add nsw i32 %1073, %1056
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds double, ptr %1055, i64 %1075
  %1077 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %988, i64 0, i32 1
  %1078 = load i32, ptr %1077, align 8, !tbaa !21
  %1079 = icmp sgt i32 %1078, 0
  br i1 %1079, label %1080, label %1224

1080:                                             ; preds = %984
  %1081 = getelementptr inbounds [3 x i32], ptr %993, i64 0, i64 1
  %1082 = getelementptr inbounds [3 x i32], ptr %993, i64 0, i64 2
  %1083 = getelementptr inbounds %struct.hypre_Box_struct, ptr %992, i64 %985, i32 1
  %1084 = getelementptr inbounds %struct.hypre_Box_struct, ptr %992, i64 %985, i32 1, i64 1
  %1085 = getelementptr inbounds [3 x i32], ptr %998, i64 0, i64 2
  br label %1086

1086:                                             ; preds = %1219, %1080
  %1087 = phi i64 [ 0, %1080 ], [ %1220, %1219 ]
  %1088 = load ptr, ptr %988, align 8, !tbaa !23
  %1089 = getelementptr inbounds %struct.hypre_Box_struct, ptr %1088, i64 %1087
  %1090 = load i32, ptr %1089, align 4, !tbaa !7
  store i32 %1090, ptr %10, align 4, !tbaa !7
  %1091 = getelementptr inbounds [3 x i32], ptr %1089, i64 0, i64 1
  %1092 = load i32, ptr %1091, align 4, !tbaa !7
  store i32 %1092, ptr %67, align 4, !tbaa !7
  %1093 = getelementptr inbounds [3 x i32], ptr %1089, i64 0, i64 2
  %1094 = load i32, ptr %1093, align 4, !tbaa !7
  store i32 %1094, ptr %68, align 4, !tbaa !7
  %1095 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %1089, ptr noundef nonnull %7, ptr noundef nonnull %9) #33
  %1096 = load i32, ptr %7, align 8, !tbaa !7
  %1097 = load i32, ptr %9, align 4, !tbaa !7
  %1098 = load i32, ptr %69, align 4, !tbaa !7
  %1099 = load i32, ptr %70, align 4, !tbaa !7
  %1100 = call i32 @llvm.smax.i32(i32 %1098, i32 %1097)
  %1101 = call i32 @llvm.smax.i32(i32 %1099, i32 %1100)
  %1102 = icmp sgt i32 %1101, 0
  br i1 %1102, label %1103, label %1219

1103:                                             ; preds = %1086
  %1104 = load i32, ptr %1024, align 4, !tbaa !7
  %1105 = load i32, ptr %998, align 4, !tbaa !7
  %1106 = sub nsw i32 %1104, %1105
  %1107 = icmp slt i32 %1106, 0
  %1108 = add nsw i32 %1106, 1
  %1109 = select i1 %1107, i32 0, i32 %1108
  %1110 = load i32, ptr %1025, align 4, !tbaa !7
  %1111 = load i32, ptr %1027, align 4, !tbaa !7
  %1112 = sub nsw i32 %1110, %1111
  %1113 = icmp slt i32 %1112, 0
  %1114 = add nsw i32 %1112, 1
  %1115 = select i1 %1113, i32 0, i32 %1114
  %1116 = mul i32 %1109, %1115
  %1117 = load i32, ptr %62, align 8, !tbaa !7
  %1118 = mul i32 %1116, %1117
  %1119 = load i32, ptr %61, align 4, !tbaa !7
  %1120 = mul nsw i32 %1109, %1119
  %1121 = load i32, ptr %1083, align 4, !tbaa !7
  %1122 = load i32, ptr %993, align 4, !tbaa !7
  %1123 = sub nsw i32 %1121, %1122
  %1124 = icmp slt i32 %1123, 0
  %1125 = add nsw i32 %1123, 1
  %1126 = select i1 %1124, i32 0, i32 %1125
  %1127 = load i32, ptr %1084, align 4, !tbaa !7
  %1128 = load i32, ptr %1081, align 4, !tbaa !7
  %1129 = sub nsw i32 %1127, %1128
  %1130 = icmp slt i32 %1129, 0
  %1131 = add nsw i32 %1129, 1
  %1132 = select i1 %1130, i32 0, i32 %1131
  %1133 = mul i32 %1126, %1132
  %1134 = mul i32 %1133, %1117
  %1135 = mul nsw i32 %1119, %1126
  %1136 = icmp sgt i32 %1099, 0
  %1137 = icmp sgt i32 %1098, 0
  %1138 = icmp sgt i32 %1097, 0
  %1139 = mul i32 %1096, %1097
  %1140 = sub i32 %1135, %1139
  %1141 = sub i32 %1120, %1139
  %1142 = mul nsw i32 %1098, %1135
  %1143 = sub i32 %1134, %1142
  %1144 = mul nsw i32 %1098, %1120
  %1145 = sub i32 %1118, %1144
  br i1 %1136, label %1146, label %1219

1146:                                             ; preds = %1103
  %1147 = load i32, ptr %10, align 4, !tbaa !7
  %1148 = sub i32 %1147, %1122
  %1149 = load i32, ptr %67, align 4, !tbaa !7
  %1150 = sub i32 %1149, %1128
  %1151 = load i32, ptr %68, align 4, !tbaa !7
  %1152 = load i32, ptr %1082, align 4, !tbaa !7
  %1153 = sub nsw i32 %1151, %1152
  %1154 = mul nsw i32 %1132, %1153
  %1155 = add nsw i32 %1150, %1154
  %1156 = mul nsw i32 %1155, %1126
  %1157 = add nsw i32 %1148, %1156
  %1158 = sub i32 %1147, %1105
  %1159 = sub i32 %1149, %1111
  %1160 = load i32, ptr %1085, align 4, !tbaa !7
  %1161 = sub nsw i32 %1151, %1160
  %1162 = mul nsw i32 %1115, %1161
  %1163 = add nsw i32 %1159, %1162
  %1164 = mul nsw i32 %1163, %1109
  %1165 = add nsw i32 %1158, %1164
  %1166 = sext i32 %1096 to i64
  br label %1167

1167:                                             ; preds = %1212, %1146
  %1168 = phi i32 [ %1215, %1212 ], [ %1157, %1146 ]
  %1169 = phi i32 [ %1216, %1212 ], [ %1165, %1146 ]
  %1170 = phi i32 [ %1217, %1212 ], [ 0, %1146 ]
  br i1 %1137, label %1171, label %1212

1171:                                             ; preds = %1205, %1167
  %1172 = phi i32 [ %1208, %1205 ], [ %1168, %1167 ]
  %1173 = phi i32 [ %1209, %1205 ], [ %1169, %1167 ]
  %1174 = phi i32 [ %1210, %1205 ], [ 0, %1167 ]
  br i1 %1138, label %1175, label %1205

1175:                                             ; preds = %1171
  %1176 = sext i32 %1172 to i64
  %1177 = sext i32 %1173 to i64
  br label %1178

1178:                                             ; preds = %1178, %1175
  %1179 = phi i64 [ %1177, %1175 ], [ %1199, %1178 ]
  %1180 = phi i64 [ %1176, %1175 ], [ %1198, %1178 ]
  %1181 = phi i32 [ 0, %1175 ], [ %1200, %1178 ]
  %1182 = getelementptr inbounds double, ptr %1011, i64 %1180
  %1183 = load double, ptr %1182, align 8, !tbaa !29
  %1184 = getelementptr inbounds double, ptr %1044, i64 %1179
  %1185 = load double, ptr %1184, align 8, !tbaa !29
  %1186 = getelementptr inbounds double, ptr %1046, i64 %1180
  %1187 = load double, ptr %1186, align 8, !tbaa !29
  %1188 = getelementptr inbounds double, ptr %1076, i64 %1179
  %1189 = load double, ptr %1188, align 8, !tbaa !29
  %1190 = fmul double %1187, %1189
  %1191 = call double @llvm.fmuladd.f64(double %1183, double %1185, double %1190)
  %1192 = getelementptr inbounds double, ptr %1000, i64 %1180
  %1193 = load double, ptr %1192, align 8, !tbaa !29
  %1194 = fdiv double %1191, %1193
  %1195 = getelementptr inbounds double, ptr %1009, i64 %1179
  %1196 = load double, ptr %1195, align 8, !tbaa !29
  %1197 = fsub double %1196, %1194
  store double %1197, ptr %1195, align 8, !tbaa !29
  %1198 = add i64 %1180, %1166
  %1199 = add i64 %1179, %1166
  %1200 = add nuw nsw i32 %1181, 1
  %1201 = icmp eq i32 %1200, %1097
  br i1 %1201, label %1202, label %1178, !llvm.loop !277

1202:                                             ; preds = %1178
  %.lcssa4 = phi i64 [ %1198, %1178 ]
  %.lcssa3 = phi i64 [ %1199, %1178 ]
  %1203 = trunc i64 %.lcssa3 to i32
  %1204 = trunc i64 %.lcssa4 to i32
  br label %1205

1205:                                             ; preds = %1202, %1171
  %1206 = phi i32 [ %1173, %1171 ], [ %1203, %1202 ]
  %1207 = phi i32 [ %1172, %1171 ], [ %1204, %1202 ]
  %1208 = add nsw i32 %1140, %1207
  %1209 = add nsw i32 %1141, %1206
  %1210 = add nuw nsw i32 %1174, 1
  %1211 = icmp eq i32 %1210, %1098
  br i1 %1211, label %1212, label %1171, !llvm.loop !278

1212:                                             ; preds = %1205, %1167
  %1213 = phi i32 [ %1169, %1167 ], [ %1209, %1205 ]
  %1214 = phi i32 [ %1168, %1167 ], [ %1208, %1205 ]
  %1215 = add nsw i32 %1143, %1214
  %1216 = add nsw i32 %1145, %1213
  %1217 = add nuw nsw i32 %1170, 1
  %1218 = icmp eq i32 %1217, %1099
  br i1 %1218, label %1219, label %1167, !llvm.loop !279

1219:                                             ; preds = %1212, %1103, %1086
  %1220 = add nuw nsw i64 %1087, 1
  %1221 = load i32, ptr %1077, align 8, !tbaa !21
  %1222 = sext i32 %1221 to i64
  %1223 = icmp slt i64 %1220, %1222
  br i1 %1223, label %1086, label %1224, !llvm.loop !280

1224:                                             ; preds = %1219, %984
  %1225 = add nuw nsw i64 %985, 1
  %1226 = load i32, ptr %981, align 8, !tbaa !45
  %1227 = sext i32 %1226 to i64
  %1228 = icmp slt i64 %1225, %1227
  br i1 %1228, label %984, label %1229, !llvm.loop !281

1229:                                             ; preds = %1224, %978
  br i1 %964, label %963, label %1230, !llvm.loop !282

1230:                                             ; preds = %1229
  %1231 = add nsw i64 %758, -1
  %1232 = icmp sgt i64 %758, 0
  br i1 %1232, label %757, label %1233, !llvm.loop !283

1233:                                             ; preds = %1230, %752
  %1234 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 14
  %1235 = load i32, ptr %1234, align 4, !tbaa !255
  %1236 = call i32 @hypre_IncFLOPCount(i32 noundef %1235) #33
  %1237 = load i32, ptr %30, align 8, !tbaa !218
  %1238 = call i32 @hypre_EndTiming(i32 noundef %1237) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_CyclicReductionSetBase(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #8 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %12, %4 ]
  %6 = getelementptr inbounds i32, ptr %1, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 3, i64 %5
  store i32 %7, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds i32, ptr %2, i64 %5
  %10 = load i32, ptr %9, align 4, !tbaa !7
  %11 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 4, i64 %5
  store i32 %10, ptr %11, align 4, !tbaa !7
  %12 = add nuw nsw i64 %5, 1
  %13 = icmp eq i64 %12, 3
  br i1 %13, label %14, label %4, !llvm.loop !284

14:                                               ; preds = %4
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_CyclicReductionDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %79, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 6
  %5 = load ptr, ptr %4, align 8, !tbaa !239
  %6 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %5) #33
  %7 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 5
  %8 = load ptr, ptr %7, align 8, !tbaa !238
  %9 = load ptr, ptr %8, align 8, !tbaa !14
  %10 = tail call i32 @hypre_StructGridDestroy(ptr noundef %9) #33
  %11 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 9
  %12 = load ptr, ptr %11, align 8, !tbaa !247
  %13 = load ptr, ptr %12, align 8, !tbaa !14
  %14 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %13) #33
  %15 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 10
  %16 = load ptr, ptr %15, align 8, !tbaa !248
  %17 = load ptr, ptr %16, align 8, !tbaa !14
  %18 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %17) #33
  %19 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 1
  %20 = load i32, ptr %19, align 4, !tbaa !237
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %22, label %59

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 7
  %24 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 11
  %25 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 12
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %29, %26 ]
  %28 = load ptr, ptr %7, align 8, !tbaa !238
  %29 = add nuw nsw i64 %27, 1
  %30 = getelementptr inbounds ptr, ptr %28, i64 %29
  %31 = load ptr, ptr %30, align 8, !tbaa !14
  %32 = tail call i32 @hypre_StructGridDestroy(ptr noundef %31) #33
  %33 = load ptr, ptr %23, align 8, !tbaa !241
  %34 = getelementptr inbounds ptr, ptr %33, i64 %27
  %35 = load ptr, ptr %34, align 8, !tbaa !14
  %36 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %35) #33
  %37 = load ptr, ptr %11, align 8, !tbaa !247
  %38 = getelementptr inbounds ptr, ptr %37, i64 %29
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %39) #33
  %41 = load ptr, ptr %15, align 8, !tbaa !248
  %42 = getelementptr inbounds ptr, ptr %41, i64 %29
  %43 = load ptr, ptr %42, align 8, !tbaa !14
  %44 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %43) #33
  %45 = load ptr, ptr %24, align 8, !tbaa !252
  %46 = getelementptr inbounds ptr, ptr %45, i64 %27
  %47 = load ptr, ptr %46, align 8, !tbaa !14
  %48 = tail call i32 @hypre_ComputePkgDestroy(ptr noundef %47) #33
  %49 = load ptr, ptr %25, align 8, !tbaa !253
  %50 = getelementptr inbounds ptr, ptr %49, i64 %27
  %51 = load ptr, ptr %50, align 8, !tbaa !14
  %52 = tail call i32 @hypre_ComputePkgDestroy(ptr noundef %51) #33
  %53 = load i32, ptr %19, align 4, !tbaa !237
  %54 = add nsw i32 %53, -1
  %55 = sext i32 %54 to i64
  %56 = icmp slt i64 %29, %55
  br i1 %56, label %26, label %57, !llvm.loop !285

57:                                               ; preds = %26
  %.lcssa = phi i64 [ %29, %26 ]
  %58 = and i64 %.lcssa, 4294967295
  br label %59

59:                                               ; preds = %57, %3
  %60 = phi i64 [ 0, %3 ], [ %58, %57 ]
  %61 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 7
  %62 = load ptr, ptr %61, align 8, !tbaa !241
  %63 = getelementptr inbounds ptr, ptr %62, i64 %60
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %64) #33
  %66 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 8
  %67 = load ptr, ptr %66, align 8, !tbaa !242
  tail call void @hypre_Free(ptr noundef %67) #33
  store ptr null, ptr %66, align 8, !tbaa !242
  %68 = load ptr, ptr %7, align 8, !tbaa !238
  tail call void @hypre_Free(ptr noundef %68) #33
  store ptr null, ptr %7, align 8, !tbaa !238
  %69 = load ptr, ptr %61, align 8, !tbaa !241
  tail call void @hypre_Free(ptr noundef %69) #33
  store ptr null, ptr %61, align 8, !tbaa !241
  %70 = load ptr, ptr %11, align 8, !tbaa !247
  tail call void @hypre_Free(ptr noundef %70) #33
  store ptr null, ptr %11, align 8, !tbaa !247
  %71 = load ptr, ptr %15, align 8, !tbaa !248
  tail call void @hypre_Free(ptr noundef %71) #33
  store ptr null, ptr %15, align 8, !tbaa !248
  %72 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 11
  %73 = load ptr, ptr %72, align 8, !tbaa !252
  tail call void @hypre_Free(ptr noundef %73) #33
  store ptr null, ptr %72, align 8, !tbaa !252
  %74 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 12
  %75 = load ptr, ptr %74, align 8, !tbaa !253
  tail call void @hypre_Free(ptr noundef %75) #33
  store ptr null, ptr %74, align 8, !tbaa !253
  %76 = getelementptr inbounds %struct.hypre_CyclicReductionData, ptr %0, i64 0, i32 13
  %77 = load i32, ptr %76, align 8, !tbaa !218
  %78 = tail call i32 @hypre_FinalizeTiming(i32 noundef %77) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %79

79:                                               ; preds = %59, %1
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(none) uwtable
define internal i32 @hypre_Log2(i32 noundef %0) #13 {
  %2 = icmp slt i32 %0, 1
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = icmp eq i32 %0, 1
  br i1 %4, label %11, label %5

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %8, %5 ], [ 0, %3 ]
  %7 = phi i32 [ %9, %5 ], [ %0, %3 ]
  %8 = add nuw nsw i32 %6, 1
  %9 = lshr i32 %7, 1
  %10 = icmp ugt i32 %7, 3
  br i1 %10, label %5, label %11, !llvm.loop !286

11:                                               ; preds = %5, %3, %1
  %12 = phi i32 [ -1, %1 ], [ 0, %3 ], [ %8, %5 ]
  ret i32 %12
}

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @hypre_MAlloc(i32 noundef %0) #14 {
  %2 = icmp sgt i32 %0, 0
  br i1 %2, label %3, label %11

3:                                                ; preds = %1
  %4 = zext i32 %0 to i64
  %5 = tail call noalias ptr @malloc(i64 noundef %4) #36
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13, i32 noundef %0) #35
  %9 = load ptr, ptr @stdout, align 8, !tbaa !14
  %10 = tail call i32 @fflush(ptr noundef %9) #35
  br label %11

11:                                               ; preds = %7, %3, %1
  %12 = phi ptr [ null, %7 ], [ %5, %3 ], [ null, %1 ]
  ret ptr %12
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #15

; Function Attrs: nofree nounwind optsize
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #16

; Function Attrs: nofree nounwind optsize
declare noundef i32 @fflush(ptr nocapture noundef) local_unnamed_addr #16

; Function Attrs: nofree nounwind optsize uwtable
define internal noalias ptr @hypre_CAlloc(i32 noundef %0, i32 noundef %1) #14 {
  %3 = mul nsw i32 %1, %0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %2
  %6 = sext i32 %0 to i64
  %7 = sext i32 %1 to i64
  %8 = tail call noalias ptr @calloc(i64 noundef %6, i64 noundef %7) #37
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %5
  %11 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13, i32 noundef %3) #35
  %12 = load ptr, ptr @stdout, align 8, !tbaa !14
  %13 = tail call i32 @fflush(ptr noundef %12) #35
  br label %14

14:                                               ; preds = %10, %5, %2
  %15 = phi ptr [ null, %10 ], [ %8, %5 ], [ null, %2 ]
  ret ptr %15
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #17

; Function Attrs: nounwind optsize uwtable
define internal noalias ptr @hypre_ReAlloc(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = sext i32 %1 to i64
  %4 = tail call ptr @realloc(ptr noundef %0, i64 noundef %3) #38
  %5 = icmp eq ptr %4, null
  %6 = icmp sgt i32 %1, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13, i32 noundef %1) #35
  %10 = load ptr, ptr @stdout, align 8, !tbaa !14
  %11 = tail call i32 @fflush(ptr noundef %10) #35
  br label %12

12:                                               ; preds = %8, %2
  ret ptr %4
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr nocapture noundef, i64 noundef) local_unnamed_addr #18

; Function Attrs: mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable
define internal void @hypre_Free(ptr noundef %0) #19 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @free(ptr noundef nonnull %0) #33
  br label %4

4:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #20

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Init(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Finalize() #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Barrier(i32 noundef %0) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_MPI_Comm_size(i32 noundef %0, ptr nocapture noundef writeonly %1) #3 {
  store i32 1, ptr %1, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_MPI_Comm_rank(i32 noundef %0, ptr nocapture noundef writeonly %1) #3 {
  store i32 0, ptr %1, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_MPI_Allgather(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef writeonly %3, i32 %4, i32 %5, i32 %6) #8 {
  switch i32 %2, label %41 [
    i32 1, label %16
    i32 0, label %12
    i32 2, label %8
  ]

8:                                                ; preds = %7
  %9 = icmp sgt i32 %1, 0
  br i1 %9, label %10, label %41

10:                                               ; preds = %8
  %11 = zext i32 %1 to i64
  br label %34

12:                                               ; preds = %7
  %13 = icmp sgt i32 %1, 0
  br i1 %13, label %14, label %41

14:                                               ; preds = %12
  %15 = zext i32 %1 to i64
  br label %27

16:                                               ; preds = %7
  %17 = icmp sgt i32 %1, 0
  br i1 %17, label %18, label %41

18:                                               ; preds = %16
  %19 = zext i32 %1 to i64
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %25, %20 ]
  %22 = getelementptr inbounds i32, ptr %0, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds i32, ptr %3, i64 %21
  store i32 %23, ptr %24, align 4, !tbaa !7
  %25 = add nuw nsw i64 %21, 1
  %26 = icmp eq i64 %25, %19
  br i1 %26, label %41, label %20, !llvm.loop !287

27:                                               ; preds = %27, %14
  %28 = phi i64 [ 0, %14 ], [ %32, %27 ]
  %29 = getelementptr inbounds double, ptr %0, i64 %28
  %30 = load double, ptr %29, align 8, !tbaa !29
  %31 = getelementptr inbounds double, ptr %3, i64 %28
  store double %30, ptr %31, align 8, !tbaa !29
  %32 = add nuw nsw i64 %28, 1
  %33 = icmp eq i64 %32, %15
  br i1 %33, label %41, label %27, !llvm.loop !288

34:                                               ; preds = %34, %10
  %35 = phi i64 [ 0, %10 ], [ %39, %34 ]
  %36 = getelementptr inbounds i8, ptr %0, i64 %35
  %37 = load i8, ptr %36, align 1, !tbaa !289
  %38 = getelementptr inbounds i8, ptr %3, i64 %35
  store i8 %37, ptr %38, align 1, !tbaa !289
  %39 = add nuw nsw i64 %35, 1
  %40 = icmp eq i64 %39, %11
  br i1 %40, label %41, label %34, !llvm.loop !290

41:                                               ; preds = %34, %27, %20, %16, %12, %8, %7
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_MPI_Allgatherv(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readnone %5, i32 noundef %6, i32 noundef %7) #8 {
  %9 = tail call i32 @hypre_MPI_Allgather(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, i32 poison, i32 poison, i32 poison) #35
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Isend(ptr nocapture noundef readnone %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr nocapture noundef readnone %6) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Irecv(ptr nocapture noundef readnone %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, ptr nocapture noundef readnone %6) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Waitall(i32 noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_MPI_Allreduce(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) #7 {
  switch i32 %3, label %13 [
    i32 1, label %7
    i32 0, label %9
    i32 2, label %11
  ]

7:                                                ; preds = %6
  %8 = load i32, ptr %0, align 4, !tbaa !7
  store i32 %8, ptr %1, align 4, !tbaa !7
  br label %13

9:                                                ; preds = %6
  %10 = load double, ptr %0, align 8, !tbaa !29
  store double %10, ptr %1, align 8, !tbaa !29
  br label %13

11:                                               ; preds = %6
  %12 = load i8, ptr %0, align 1, !tbaa !289
  store i8 %12, ptr %1, align 1, !tbaa !289
  br label %13

13:                                               ; preds = %11, %9, %7, %6
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Type_hvector(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr nocapture noundef readnone %4) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Type_struct(i32 noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2, ptr nocapture noundef readnone %3, ptr nocapture noundef readnone %4) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Type_commit(ptr nocapture noundef readnone %0) #4 {
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_MPI_Type_free(ptr nocapture noundef readnone %0) #4 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_PCGFunctionsCreate(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7, ptr noundef %8, ptr noundef %9, ptr noundef %10, ptr noundef %11, ptr noundef %12, ptr noundef %13) #0 {
  %15 = tail call ptr %0(i32 noundef 1, i32 noundef 112) #33
  store ptr %0, ptr %15, align 8, !tbaa !291
  %16 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 1
  store ptr %1, ptr %16, align 8, !tbaa !293
  %17 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 2
  store ptr %2, ptr %17, align 8, !tbaa !294
  %18 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 3
  store ptr %3, ptr %18, align 8, !tbaa !295
  %19 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 4
  store ptr %4, ptr %19, align 8, !tbaa !296
  %20 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 5
  store ptr %5, ptr %20, align 8, !tbaa !297
  %21 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 6
  store ptr %6, ptr %21, align 8, !tbaa !298
  %22 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 7
  store ptr %7, ptr %22, align 8, !tbaa !299
  %23 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 8
  store ptr %8, ptr %23, align 8, !tbaa !300
  %24 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 9
  store ptr %9, ptr %24, align 8, !tbaa !301
  %25 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 10
  store ptr %10, ptr %25, align 8, !tbaa !302
  %26 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 11
  store ptr %11, ptr %26, align 8, !tbaa !303
  %27 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 13
  store ptr %12, ptr %27, align 8, !tbaa !304
  %28 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %15, i64 0, i32 12
  store ptr %13, ptr %28, align 8, !tbaa !305
  ret ptr %15
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_PCGCreate(ptr noundef %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !291
  %3 = tail call ptr %2(i32 noundef 1, i32 noundef 112) #33
  %4 = getelementptr inbounds %struct.hypre_PCGData, ptr %3, i64 0, i32 12
  store ptr %0, ptr %4, align 8, !tbaa !306
  store <2 x double> <double 0x3EB0C6F7A0B5ED8D, double 0.000000e+00>, ptr %3, align 8, !tbaa !29
  %5 = getelementptr inbounds %struct.hypre_PCGData, ptr %3, i64 0, i32 2
  store <4 x i32> <i32 1000, i32 0, i32 0, i32 0>, ptr %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.hypre_PCGData, ptr %3, i64 0, i32 10
  %7 = getelementptr inbounds %struct.hypre_PCGData, ptr %3, i64 0, i32 14
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(20) %7, i8 0, i64 20, i1 false)
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_PCGDestroy(ptr noundef %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 12
  %3 = load ptr, ptr %2, align 8, !tbaa !306
  %4 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 14
  %5 = load i32, ptr %4, align 4, !tbaa !308
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %3, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !293
  %10 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 15
  %11 = load ptr, ptr %10, align 8, !tbaa !309
  %12 = tail call i32 %9(ptr noundef %11) #33
  store ptr null, ptr %10, align 8, !tbaa !309
  %13 = load ptr, ptr %8, align 8, !tbaa !293
  %14 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 16
  %15 = load ptr, ptr %14, align 8, !tbaa !310
  %16 = tail call i32 %13(ptr noundef %15) #33
  store ptr null, ptr %14, align 8, !tbaa !310
  br label %17

17:                                               ; preds = %7, %1
  %18 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %3, i64 0, i32 6
  %19 = load ptr, ptr %18, align 8, !tbaa !298
  %20 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 10
  %21 = load ptr, ptr %20, align 8, !tbaa !311
  %22 = tail call i32 %19(ptr noundef %21) #33
  %23 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %3, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !295
  %25 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 7
  %26 = load ptr, ptr %25, align 8, !tbaa !312
  %27 = tail call i32 %24(ptr noundef %26) #33
  %28 = load ptr, ptr %23, align 8, !tbaa !295
  %29 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 8
  %30 = load ptr, ptr %29, align 8, !tbaa !313
  %31 = tail call i32 %28(ptr noundef %30) #33
  %32 = load ptr, ptr %23, align 8, !tbaa !295
  %33 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 9
  %34 = load ptr, ptr %33, align 8, !tbaa !314
  %35 = tail call i32 %32(ptr noundef %34) #33
  %36 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %3, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !293
  %38 = tail call i32 %37(ptr noundef nonnull %0) #33
  %39 = load ptr, ptr %36, align 8, !tbaa !293
  %40 = tail call i32 %39(ptr noundef %3) #33
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_PCGSetup(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 12
  %6 = load ptr, ptr %5, align 8, !tbaa !306
  %7 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 2
  %8 = load i32, ptr %7, align 8, !tbaa !315
  %9 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 13
  %10 = load ptr, ptr %9, align 8, !tbaa !304
  %11 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 11
  %12 = load ptr, ptr %11, align 8, !tbaa !316
  %13 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 6
  store ptr %1, ptr %13, align 8, !tbaa !317
  %14 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !294
  %16 = tail call ptr %15(ptr noundef %3) #33
  %17 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 7
  store ptr %16, ptr %17, align 8, !tbaa !312
  %18 = load ptr, ptr %14, align 8, !tbaa !294
  %19 = tail call ptr %18(ptr noundef %3) #33
  %20 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 8
  store ptr %19, ptr %20, align 8, !tbaa !313
  %21 = load ptr, ptr %14, align 8, !tbaa !294
  %22 = tail call ptr %21(ptr noundef %2) #33
  %23 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 9
  store ptr %22, ptr %23, align 8, !tbaa !314
  %24 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 4
  %25 = load ptr, ptr %24, align 8, !tbaa !296
  %26 = tail call ptr %25(ptr noundef %1, ptr noundef %3) #33
  %27 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 10
  store ptr %26, ptr %27, align 8, !tbaa !311
  %28 = tail call i32 (ptr, ptr, ptr, ptr, ...) %10(ptr noundef %12, ptr noundef %1, ptr noundef %2, ptr noundef %3) #33
  %29 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 14
  %30 = load i32, ptr %29, align 4, !tbaa !308
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %40

32:                                               ; preds = %4
  %33 = load ptr, ptr %6, align 8, !tbaa !291
  %34 = add nsw i32 %8, 1
  %35 = tail call ptr %33(i32 noundef %34, i32 noundef 8) #33
  %36 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 15
  store ptr %35, ptr %36, align 8, !tbaa !309
  %37 = load ptr, ptr %6, align 8, !tbaa !291
  %38 = tail call ptr %37(i32 noundef %34, i32 noundef 8) #33
  %39 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 16
  store ptr %38, ptr %39, align 8, !tbaa !310
  br label %40

40:                                               ; preds = %32, %4
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_PCGSolve(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 12
  %6 = load ptr, ptr %5, align 8, !tbaa !306
  %7 = load double, ptr %0, align 8, !tbaa !318
  %8 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 1
  %9 = load double, ptr %8, align 8, !tbaa !319
  %10 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 2
  %11 = load i32, ptr %10, align 8, !tbaa !315
  %12 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 3
  %13 = load i32, ptr %12, align 4, !tbaa !320
  %14 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 4
  %15 = load i32, ptr %14, align 8, !tbaa !321
  %16 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 5
  %17 = load i32, ptr %16, align 4, !tbaa !322
  %18 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 7
  %19 = load ptr, ptr %18, align 8, !tbaa !312
  %20 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 8
  %21 = load ptr, ptr %20, align 8, !tbaa !313
  %22 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 9
  %23 = load ptr, ptr %22, align 8, !tbaa !314
  %24 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 10
  %25 = load ptr, ptr %24, align 8, !tbaa !311
  %26 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 12
  %27 = load ptr, ptr %26, align 8, !tbaa !305
  %28 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 11
  %29 = load ptr, ptr %28, align 8, !tbaa !316
  %30 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 14
  %31 = load i32, ptr %30, align 4, !tbaa !308
  %32 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 15
  %33 = load ptr, ptr %32, align 8, !tbaa !309
  %34 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 16
  %35 = load ptr, ptr %34, align 8, !tbaa !310
  %36 = icmp eq i32 %13, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %4
  %38 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 9
  %39 = load ptr, ptr %38, align 8, !tbaa !301
  %40 = tail call i32 %39(ptr noundef %19) #33
  %41 = tail call i32 (ptr, ptr, ptr, ptr, ...) %27(ptr noundef %29, ptr noundef %1, ptr noundef %2, ptr noundef %19) #33
  br label %42

42:                                               ; preds = %37, %4
  %43 = phi ptr [ %19, %37 ], [ %2, %4 ]
  %44 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 7
  %45 = load ptr, ptr %44, align 8, !tbaa !299
  %46 = tail call double %45(ptr noundef %43, ptr noundef %2) #33
  %47 = fcmp ogt double %46, 0.000000e+00
  br i1 %47, label %48, label %64

48:                                               ; preds = %42
  %49 = fmul double %7, %7
  %50 = icmp eq i32 %17, 0
  %51 = icmp ne i32 %15, 0
  %52 = select i1 %50, i1 true, i1 %51
  %53 = select i1 %52, double 1.000000e+00, double %46
  %54 = fdiv double %49, %53
  %55 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 8
  %56 = load ptr, ptr %55, align 8, !tbaa !300
  %57 = tail call i32 %56(ptr noundef %2, ptr noundef %23) #33
  %58 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 5
  %59 = load ptr, ptr %58, align 8, !tbaa !297
  %60 = tail call i32 %59(ptr noundef %25, double noundef -1.000000e+00, ptr noundef %1, ptr noundef %3, double noundef 1.000000e+00, ptr noundef %23) #33
  %61 = icmp sgt i32 %31, 0
  %62 = fcmp ogt double %9, 0.000000e+00
  %63 = select i1 %61, i1 true, i1 %62
  br i1 %63, label %70, label %76

64:                                               ; preds = %42
  %65 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 8
  %66 = load ptr, ptr %65, align 8, !tbaa !300
  %67 = tail call i32 %66(ptr noundef %2, ptr noundef %3) #33
  %68 = icmp sgt i32 %31, 0
  br i1 %68, label %69, label %168

69:                                               ; preds = %64
  store double 0.000000e+00, ptr %33, align 8, !tbaa !29
  store double 0.000000e+00, ptr %35, align 8, !tbaa !29
  br label %168

70:                                               ; preds = %48
  %71 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 7
  %72 = load ptr, ptr %71, align 8, !tbaa !299
  %73 = tail call double %72(ptr noundef %23, ptr noundef %23) #33
  br i1 %61, label %74, label %76

74:                                               ; preds = %70
  %75 = tail call double @sqrt(double noundef %73) #33
  store double %75, ptr %33, align 8, !tbaa !29
  br label %76

76:                                               ; preds = %74, %70, %48
  %77 = phi double [ %73, %74 ], [ %73, %70 ], [ undef, %48 ]
  %78 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 9
  %79 = load ptr, ptr %78, align 8, !tbaa !301
  %80 = tail call i32 %79(ptr noundef %19) #33
  %81 = tail call i32 (ptr, ptr, ptr, ptr, ...) %27(ptr noundef %29, ptr noundef %1, ptr noundef %23, ptr noundef %19) #33
  %82 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 7
  %83 = load ptr, ptr %82, align 8, !tbaa !299
  %84 = tail call double %83(ptr noundef %23, ptr noundef %19) #33
  %85 = icmp sgt i32 %11, 0
  br i1 %85, label %86, label %165

86:                                               ; preds = %76
  %87 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 11
  %88 = fcmp une double %46, 0.000000e+00
  %89 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 10
  %90 = add nuw i32 %11, 1
  %91 = zext i32 %90 to i64
  br label %92

92:                                               ; preds = %156, %86
  %93 = phi i64 [ 1, %86 ], [ %163, %156 ]
  %94 = phi double [ %84, %86 ], [ %110, %156 ]
  %95 = phi double [ 0.000000e+00, %86 ], [ %157, %156 ]
  %96 = load ptr, ptr %58, align 8, !tbaa !297
  %97 = tail call i32 %96(ptr noundef %25, double noundef 1.000000e+00, ptr noundef %1, ptr noundef %19, double noundef 0.000000e+00, ptr noundef %21) #33
  %98 = load ptr, ptr %82, align 8, !tbaa !299
  %99 = tail call double %98(ptr noundef %21, ptr noundef %19) #33
  %100 = fdiv double %94, %99
  %101 = load ptr, ptr %87, align 8, !tbaa !303
  %102 = tail call i32 %101(double noundef %100, ptr noundef %19, ptr noundef %3) #33
  %103 = load ptr, ptr %87, align 8, !tbaa !303
  %104 = fneg double %100
  %105 = tail call i32 %103(double noundef %104, ptr noundef %21, ptr noundef %23) #33
  %106 = load ptr, ptr %78, align 8, !tbaa !301
  %107 = tail call i32 %106(ptr noundef %21) #33
  %108 = tail call i32 (ptr, ptr, ptr, ptr, ...) %27(ptr noundef %29, ptr noundef %1, ptr noundef %23, ptr noundef %21) #33
  %109 = load ptr, ptr %82, align 8, !tbaa !299
  %110 = tail call double %109(ptr noundef %23, ptr noundef %21) #33
  br i1 %36, label %114, label %111

111:                                              ; preds = %92
  %112 = load ptr, ptr %82, align 8, !tbaa !299
  %113 = tail call double %112(ptr noundef %23, ptr noundef %23) #33
  br label %114

114:                                              ; preds = %111, %92
  %115 = phi double [ %113, %111 ], [ %110, %92 ]
  br i1 %61, label %116, label %125

116:                                              ; preds = %114
  %117 = tail call double @sqrt(double noundef %115) #33
  %118 = getelementptr inbounds double, ptr %33, i64 %93
  store double %117, ptr %118, align 8, !tbaa !29
  br i1 %88, label %119, label %122

119:                                              ; preds = %116
  %120 = fdiv double %115, %46
  %121 = tail call double @sqrt(double noundef %120) #33
  br label %122

122:                                              ; preds = %119, %116
  %123 = phi double [ %121, %119 ], [ 0.000000e+00, %116 ]
  %124 = getelementptr inbounds double, ptr %35, i64 %93
  store double %123, ptr %124, align 8, !tbaa !29
  br label %125

125:                                              ; preds = %122, %114
  %126 = fdiv double %115, %46
  %127 = fcmp olt double %126, %54
  %128 = trunc i64 %93 to i32
  br i1 %127, label %129, label %141

129:                                              ; preds = %125
  %130 = fcmp ogt double %115, 0.000000e+00
  %131 = select i1 %51, i1 %130, i1 false
  br i1 %131, label %132, label %165

132:                                              ; preds = %129
  %133 = load ptr, ptr %82, align 8, !tbaa !299
  %134 = tail call double %133(ptr noundef %19, ptr noundef %19) #33
  %135 = load ptr, ptr %82, align 8, !tbaa !299
  %136 = tail call double %135(ptr noundef %3, ptr noundef %3) #33
  %137 = fmul double %100, %100
  %138 = fmul double %137, %134
  %139 = fdiv double %138, %136
  %140 = fcmp olt double %139, %54
  br i1 %140, label %165, label %141

141:                                              ; preds = %132, %125
  br i1 %62, label %142, label %156

142:                                              ; preds = %141
  %143 = fdiv double %115, %77
  %144 = sitofp i32 %128 to double
  %145 = fmul double %144, 2.000000e+00
  %146 = fdiv double 1.000000e+00, %145
  %147 = tail call double @pow(double noundef %143, double noundef %146) #33
  %148 = fsub double %147, %95
  %149 = tail call double @llvm.fabs.f64(double %148)
  %150 = fcmp olt double %147, %95
  %151 = select i1 %150, double %95, double %147
  %152 = fdiv double %149, %151
  %153 = fsub double 1.000000e+00, %152
  %154 = fmul double %147, %153
  %155 = fcmp ogt double %154, %9
  br i1 %155, label %165, label %156

156:                                              ; preds = %142, %141
  %157 = phi double [ %147, %142 ], [ %95, %141 ]
  %158 = fdiv double %110, %94
  %159 = load ptr, ptr %89, align 8, !tbaa !302
  %160 = tail call i32 %159(double noundef %158, ptr noundef %19) #33
  %161 = load ptr, ptr %87, align 8, !tbaa !303
  %162 = tail call i32 %161(double noundef 1.000000e+00, ptr noundef %21, ptr noundef %19) #33
  %163 = add nuw nsw i64 %93, 1
  %164 = icmp eq i64 %163, %91
  br i1 %164, label %165, label %92, !llvm.loop !323

165:                                              ; preds = %156, %142, %132, %129, %76
  %166 = phi i32 [ 0, %76 ], [ %11, %156 ], [ %128, %132 ], [ %128, %129 ], [ %128, %142 ]
  %167 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 13
  store i32 %166, ptr %167, align 8, !tbaa !324
  br label %168

168:                                              ; preds = %165, %69, %64
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @sqrt(double noundef) local_unnamed_addr #21

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(write)
declare double @pow(double noundef, double noundef) local_unnamed_addr #21

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_PCGSetTol(ptr nocapture noundef writeonly %0, double noundef %1) #3 {
  store double %1, ptr %0, align 8, !tbaa !318
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_PCGSetMaxIter(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 2
  store i32 %1, ptr %3, align 8, !tbaa !315
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_PCGSetTwoNorm(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 3
  store i32 %1, ptr %3, align 4, !tbaa !320
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_PCGSetRelChange(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 4
  store i32 %1, ptr %3, align 8, !tbaa !321
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_PCGSetPrecond(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #22 {
  %5 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 12
  %6 = load ptr, ptr %5, align 8, !tbaa !306
  %7 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 12
  store ptr %1, ptr %7, align 8, !tbaa !305
  %8 = getelementptr inbounds %struct.hypre_PCGFunctions, ptr %6, i64 0, i32 13
  store ptr %2, ptr %8, align 8, !tbaa !304
  %9 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 11
  store ptr %3, ptr %9, align 8, !tbaa !316
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_PCGSetLogging(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 14
  store i32 %1, ptr %3, align 4, !tbaa !308
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_PCGGetNumIterations(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #7 {
  %3 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 13
  %4 = load i32, ptr %3, align 8, !tbaa !324
  store i32 %4, ptr %1, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_PCGGetFinalRelativeResidualNorm(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #23 {
  %3 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 14
  %4 = load i32, ptr %3, align 4, !tbaa !308
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 16
  %8 = load ptr, ptr %7, align 8, !tbaa !310
  %9 = getelementptr inbounds %struct.hypre_PCGData, ptr %0, i64 0, i32 13
  %10 = load i32, ptr %9, align 8, !tbaa !324
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double, ptr %8, i64 %11
  %13 = load double, ptr %12, align 8, !tbaa !29
  store double %13, ptr %1, align 8, !tbaa !29
  br label %14

14:                                               ; preds = %6, %2
  %15 = phi i32 [ 0, %6 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovFree(ptr noundef %0) #0 {
  tail call void @hypre_Free(ptr noundef %0) #33
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructKrylovCreateVector(ptr nocapture noundef readonly %0) #0 {
  %2 = load i32, ptr %0, align 8, !tbaa !325
  %3 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !39
  %5 = tail call ptr @hypre_StructVectorCreate(i32 noundef %2, ptr noundef %4) #33
  %6 = tail call i32 @hypre_StructVectorInitialize(ptr noundef %5) #33
  %7 = tail call i32 @hypre_StructVectorAssemble(ptr noundef %5) #33
  ret ptr %5
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovDestroyVector(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructKrylovMatvecCreate(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr @hypre_StructMatvecCreate() #33
  %4 = tail call i32 @hypre_StructMatvecSetup(ptr noundef %3, ptr noundef %0, ptr noundef %1) #33
  ret ptr %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovMatvec(ptr noundef %0, double noundef %1, ptr noundef %2, ptr noundef %3, double noundef %4, ptr noundef %5) #0 {
  %7 = tail call i32 @hypre_StructMatvecCompute(ptr noundef %0, double noundef %1, ptr noundef %2, ptr noundef %3, double noundef %4, ptr noundef %5) #33
  ret i32 %7
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovMatvecDestroy(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructMatvecDestroy(ptr noundef %0) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal double @hypre_StructKrylovInnerProd(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call double @hypre_StructInnerProd(ptr noundef %0, ptr noundef %1) #33
  ret double %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovCopyVector(ptr noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_StructCopy(ptr noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovClearVector(ptr noundef %0) #0 {
  %2 = tail call i32 @hypre_StructVectorSetConstantValues(ptr noundef %0, double noundef 0.000000e+00) #33
  ret i32 %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovScaleVector(double noundef %0, ptr noundef %1) #0 {
  %3 = tail call i32 @hypre_StructScale(double noundef %0, ptr noundef %1) #33
  ret i32 %3
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovAxpy(double noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call i32 @hypre_StructAxpy(double noundef %0, ptr noundef %1, ptr noundef %2) #33
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_StructKrylovIdentitySetup(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2, ptr nocapture noundef readnone %3) #4 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructKrylovIdentity(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = tail call i32 @hypre_StructCopy(ptr noundef %2, ptr noundef %3) #33
  ret i32 %5
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_ProjectBox(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #8 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %31, %4 ]
  %6 = getelementptr inbounds i32, ptr %1, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds i32, ptr %2, i64 %5
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 %5
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = sub nsw i32 %11, %7
  %13 = getelementptr inbounds %struct.hypre_Box_struct, ptr %0, i64 0, i32 1, i64 %5
  %14 = load i32, ptr %13, align 4, !tbaa !7
  %15 = sub nsw i32 %14, %7
  %16 = add nsw i32 %9, -1
  %17 = icmp sgt i32 %12, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = add nsw i32 %18, %12
  %20 = icmp slt i32 %15, 0
  %21 = select i1 %20, i32 %16, i32 0
  %22 = sub nsw i32 %15, %21
  %23 = freeze i32 %19
  %24 = srem i32 %23, %9
  %25 = sub i32 %7, %24
  %26 = add i32 %25, %23
  store i32 %26, ptr %10, align 4, !tbaa !7
  %27 = freeze i32 %22
  %28 = srem i32 %27, %9
  %29 = sub i32 %7, %28
  %30 = add i32 %29, %27
  store i32 %30, ptr %13, align 4, !tbaa !7
  %31 = add nuw nsw i64 %5, 1
  %32 = icmp eq i64 %31, 3
  br i1 %32, label %33, label %4, !llvm.loop !326

33:                                               ; preds = %4
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_ProjectBoxArray(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #24 {
  %4 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !21
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %3
  %8 = phi i64 [ %12, %7 ], [ 0, %3 ]
  %9 = load ptr, ptr %0, align 8, !tbaa !23
  %10 = getelementptr inbounds %struct.hypre_Box_struct, ptr %9, i64 %8
  %11 = tail call i32 @hypre_ProjectBox(ptr noundef %10, ptr noundef %1, ptr noundef %2) #35
  %12 = add nuw nsw i64 %8, 1
  %13 = load i32, ptr %4, align 8, !tbaa !21
  %14 = sext i32 %13 to i64
  %15 = icmp slt i64 %12, %14
  br i1 %15, label %7, label %16, !llvm.loop !327

16:                                               ; preds = %7, %3
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_ProjectBoxArrayArray(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #24 {
  %4 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !45
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %32

7:                                                ; preds = %27, %3
  %8 = phi i32 [ %28, %27 ], [ %5, %3 ]
  %9 = phi i64 [ %29, %27 ], [ 0, %3 ]
  %10 = load ptr, ptr %0, align 8, !tbaa !42
  %11 = getelementptr inbounds ptr, ptr %10, i64 %9
  %12 = load ptr, ptr %11, align 8, !tbaa !14
  %13 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %12, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !21
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %27

16:                                               ; preds = %16, %7
  %17 = phi i64 [ %21, %16 ], [ 0, %7 ]
  %18 = load ptr, ptr %12, align 8, !tbaa !23
  %19 = getelementptr inbounds %struct.hypre_Box_struct, ptr %18, i64 %17
  %20 = tail call i32 @hypre_ProjectBox(ptr noundef %19, ptr noundef %1, ptr noundef %2) #35
  %21 = add nuw nsw i64 %17, 1
  %22 = load i32, ptr %13, align 8, !tbaa !21
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %21, %23
  br i1 %24, label %16, label %25, !llvm.loop !328

25:                                               ; preds = %16
  %26 = load i32, ptr %4, align 8, !tbaa !45
  br label %27

27:                                               ; preds = %25, %7
  %28 = phi i32 [ %26, %25 ], [ %8, %7 ]
  %29 = add nuw nsw i64 %9, 1
  %30 = sext i32 %28 to i64
  %31 = icmp slt i64 %29, %30
  br i1 %31, label %7, label %32, !llvm.loop !329

32:                                               ; preds = %27, %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SemiInterpCreate() #0 {
  %1 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 64) #33
  %2 = tail call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.96) #33
  %3 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %1, i64 0, i32 6
  store i32 %2, ptr %3, align 4, !tbaa !330
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SemiInterpSetup(ptr nocapture noundef writeonly %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef readnone %3, ptr nocapture noundef readonly %4, ptr noundef %5, ptr noundef %6, ptr noundef %7) #0 {
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #34
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %4, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !39
  %18 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !250
  %20 = call i32 @hypre_CreateComputeInfo(ptr noundef %17, ptr noundef %19, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #33
  %21 = load ptr, ptr %9, align 8, !tbaa !14
  %22 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %21, ptr noundef %5, ptr noundef %7) #33
  %23 = load ptr, ptr %10, align 8, !tbaa !14
  %24 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %23, ptr noundef %5, ptr noundef %7) #33
  %25 = load ptr, ptr %13, align 8, !tbaa !14
  %26 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %25, ptr noundef %6, ptr noundef %7) #33
  %27 = load ptr, ptr %14, align 8, !tbaa !14
  %28 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %27, ptr noundef %6, ptr noundef %7) #33
  %29 = load ptr, ptr %9, align 8, !tbaa !14
  %30 = load ptr, ptr %10, align 8, !tbaa !14
  %31 = load ptr, ptr %11, align 8, !tbaa !14
  %32 = load ptr, ptr %12, align 8, !tbaa !14
  %33 = load ptr, ptr %13, align 8, !tbaa !14
  %34 = load ptr, ptr %14, align 8, !tbaa !14
  %35 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %4, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !25
  %37 = call i32 @hypre_ComputePkgCreate(ptr noundef %29, ptr noundef %30, ptr noundef %7, ptr noundef %7, ptr noundef %31, ptr noundef %32, ptr noundef %33, ptr noundef %34, ptr noundef %7, ptr noundef %17, ptr noundef %36, i32 noundef 1, ptr noundef nonnull %15) #33
  %38 = call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %38, ptr %0, align 8, !tbaa !332
  %39 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 1
  store i32 %2, ptr %39, align 8, !tbaa !333
  %40 = load ptr, ptr %15, align 8, !tbaa !14
  %41 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 2
  store ptr %40, ptr %41, align 8, !tbaa !334
  %42 = load i32, ptr %5, align 4, !tbaa !7
  %43 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 3
  store i32 %42, ptr %43, align 8, !tbaa !7
  %44 = getelementptr inbounds i32, ptr %5, i64 1
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 3, i64 1
  store i32 %45, ptr %46, align 4, !tbaa !7
  %47 = getelementptr inbounds i32, ptr %5, i64 2
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 3, i64 2
  store i32 %48, ptr %49, align 8, !tbaa !7
  %50 = load i32, ptr %6, align 4, !tbaa !7
  %51 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 4
  store i32 %50, ptr %51, align 4, !tbaa !7
  %52 = getelementptr inbounds i32, ptr %6, i64 1
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 4, i64 1
  store i32 %53, ptr %54, align 4, !tbaa !7
  %55 = getelementptr inbounds i32, ptr %6, i64 2
  %56 = load i32, ptr %55, align 4, !tbaa !7
  %57 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 4, i64 2
  store i32 %56, ptr %57, align 4, !tbaa !7
  %58 = load i32, ptr %7, align 4, !tbaa !7
  %59 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5
  store i32 %58, ptr %59, align 8, !tbaa !7
  %60 = getelementptr inbounds i32, ptr %7, i64 1
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5, i64 1
  store i32 %61, ptr %62, align 4, !tbaa !7
  %63 = getelementptr inbounds i32, ptr %7, i64 2
  %64 = load i32, ptr %63, align 4, !tbaa !7
  %65 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5, i64 2
  store i32 %64, ptr %65, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SemiInterp(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  %9 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 6
  %10 = load i32, ptr %9, align 4, !tbaa !330
  %11 = tail call i32 @hypre_BeginTiming(i32 noundef %10) #33
  %12 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !333
  %14 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !334
  %16 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 4
  %18 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5
  %19 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !250
  %21 = load ptr, ptr %20, align 8, !tbaa !35
  %22 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !tbaa !39
  %24 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %23, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !195
  %26 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !39
  %28 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %27, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !20
  %30 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %27, i64 0, i32 3
  %31 = load ptr, ptr %30, align 8, !tbaa !195
  %32 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %29, i64 0, i32 1
  %33 = load i32, ptr %32, align 8, !tbaa !21
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %57

35:                                               ; preds = %4
  %36 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %37 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %38 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %39 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %40 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %41 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %42 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %43 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %44 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %45 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %46 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5, i64 1
  %47 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5, i64 2
  %48 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %49 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  br label %50

50:                                               ; preds = %232, %35
  %51 = phi i64 [ 0, %35 ], [ %233, %232 ]
  %52 = phi i64 [ 0, %35 ], [ %.lcssa2, %232 ]
  %53 = getelementptr inbounds i32, ptr %31, i64 %51
  %54 = load i32, ptr %53, align 4, !tbaa !7
  %55 = shl i64 %52, 32
  %56 = ashr exact i64 %55, 32
  br label %80

57:                                               ; preds = %232, %4
  %58 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %15, i64 0, i32 2
  %59 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %60 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %15, i64 0, i32 1
  %61 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %62 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %63 = icmp eq i32 %13, 0
  %64 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 6
  %65 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 9
  %66 = getelementptr inbounds [3 x i32], ptr %21, i64 0, i64 1
  %67 = getelementptr inbounds [3 x i32], ptr %21, i64 0, i64 2
  %68 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %69 = getelementptr inbounds [3 x i32], ptr %21, i64 1
  %70 = getelementptr inbounds [3 x i32], ptr %21, i64 1, i64 1
  %71 = getelementptr inbounds [3 x i32], ptr %21, i64 1, i64 2
  %72 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %73 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %74 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %75 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %76 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5, i64 1
  %77 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 5, i64 2
  %78 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %79 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  br label %237

80:                                               ; preds = %80, %50
  %81 = phi i64 [ %85, %80 ], [ %56, %50 ]
  %82 = getelementptr inbounds i32, ptr %25, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !7
  %84 = icmp eq i32 %83, %54
  %85 = add i64 %81, 1
  br i1 %84, label %86, label %80, !llvm.loop !335

86:                                               ; preds = %80
  %.lcssa2 = phi i64 [ %81, %80 ]
  %87 = load ptr, ptr %29, align 8, !tbaa !23
  %88 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %51
  %89 = load i32, ptr %88, align 4, !tbaa !7
  store i32 %89, ptr %8, align 4, !tbaa !7
  %90 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 1
  %91 = load i32, ptr %90, align 4, !tbaa !7
  store i32 %91, ptr %36, align 4, !tbaa !7
  %92 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %93 = load i32, ptr %92, align 4, !tbaa !7
  store i32 %93, ptr %37, align 4, !tbaa !7
  %94 = call i32 @hypre_StructMapCoarseToFine(ptr noundef nonnull %8, ptr noundef nonnull %16, ptr noundef nonnull %18, ptr noundef nonnull %7) #33
  %95 = load ptr, ptr %38, align 8, !tbaa !25
  %96 = load ptr, ptr %95, align 8, !tbaa !23
  %97 = load ptr, ptr %39, align 8, !tbaa !25
  %98 = load ptr, ptr %97, align 8, !tbaa !23
  %99 = load ptr, ptr %40, align 8, !tbaa !27
  %100 = load ptr, ptr %41, align 8, !tbaa !28
  %101 = getelementptr inbounds i32, ptr %100, i64 %.lcssa2
  %102 = load i32, ptr %101, align 4, !tbaa !7
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds double, ptr %99, i64 %103
  %105 = load ptr, ptr %42, align 8, !tbaa !27
  %106 = load ptr, ptr %43, align 8, !tbaa !28
  %107 = getelementptr inbounds i32, ptr %106, i64 %51
  %108 = load i32, ptr %107, align 4, !tbaa !7
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds double, ptr %105, i64 %109
  %111 = call i32 @hypre_BoxGetSize(ptr noundef nonnull %88, ptr noundef nonnull %6) #33
  %112 = load i32, ptr %18, align 4, !tbaa !7
  %113 = load i32, ptr %6, align 4, !tbaa !7
  %114 = load i32, ptr %48, align 4, !tbaa !7
  %115 = load i32, ptr %49, align 4, !tbaa !7
  %116 = call i32 @llvm.smax.i32(i32 %114, i32 %113)
  %117 = call i32 @llvm.smax.i32(i32 %115, i32 %116)
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %232

119:                                              ; preds = %86
  %120 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %.lcssa2, i32 1
  %121 = load i32, ptr %120, align 4, !tbaa !7
  %122 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %.lcssa2
  %123 = load i32, ptr %122, align 4, !tbaa !7
  %124 = sub nsw i32 %121, %123
  %125 = icmp slt i32 %124, 0
  %126 = add nsw i32 %124, 1
  %127 = select i1 %125, i32 0, i32 %126
  %128 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %.lcssa2, i32 1, i64 1
  %129 = load i32, ptr %128, align 4, !tbaa !7
  %130 = getelementptr inbounds [3 x i32], ptr %122, i64 0, i64 1
  %131 = load i32, ptr %130, align 4, !tbaa !7
  %132 = sub nsw i32 %129, %131
  %133 = icmp slt i32 %132, 0
  %134 = add nsw i32 %132, 1
  %135 = select i1 %133, i32 0, i32 %134
  %136 = mul i32 %127, %135
  %137 = load i32, ptr %47, align 4, !tbaa !7
  %138 = mul i32 %136, %137
  %139 = load i32, ptr %46, align 4, !tbaa !7
  %140 = mul nsw i32 %139, %127
  %141 = getelementptr inbounds %struct.hypre_Box_struct, ptr %98, i64 %51
  %142 = load i32, ptr %141, align 4, !tbaa !7
  %143 = getelementptr inbounds [3 x i32], ptr %141, i64 0, i64 1
  %144 = load i32, ptr %143, align 4, !tbaa !7
  %145 = getelementptr inbounds %struct.hypre_Box_struct, ptr %98, i64 %51, i32 1, i64 1
  %146 = load i32, ptr %145, align 4, !tbaa !7
  %147 = sub nsw i32 %146, %144
  %148 = icmp slt i32 %147, 0
  %149 = add nsw i32 %147, 1
  %150 = select i1 %148, i32 0, i32 %149
  %151 = getelementptr inbounds %struct.hypre_Box_struct, ptr %98, i64 %51, i32 1
  %152 = load i32, ptr %151, align 4, !tbaa !7
  %153 = sub nsw i32 %152, %142
  %154 = icmp slt i32 %153, 0
  %155 = add nsw i32 %153, 1
  %156 = select i1 %154, i32 0, i32 %155
  %157 = icmp sgt i32 %115, 0
  %158 = icmp sgt i32 %114, 0
  %159 = icmp sgt i32 %113, 0
  %160 = mul nsw i32 %113, %112
  %161 = sub i32 %140, %160
  %162 = sub i32 %156, %113
  %163 = mul nsw i32 %114, %140
  %164 = sub i32 %138, %163
  %165 = sub i32 %150, %114
  %166 = mul i32 %165, %156
  br i1 %157, label %167, label %232

167:                                              ; preds = %119
  %168 = load i32, ptr %7, align 4, !tbaa !7
  %169 = sub i32 %168, %123
  %170 = load i32, ptr %44, align 4, !tbaa !7
  %171 = sub i32 %170, %131
  %172 = load i32, ptr %45, align 4, !tbaa !7
  %173 = getelementptr inbounds [3 x i32], ptr %122, i64 0, i64 2
  %174 = load i32, ptr %173, align 4, !tbaa !7
  %175 = sub nsw i32 %172, %174
  %176 = mul nsw i32 %135, %175
  %177 = add nsw i32 %171, %176
  %178 = mul nsw i32 %177, %127
  %179 = add nsw i32 %169, %178
  %180 = load i32, ptr %8, align 4, !tbaa !7
  %181 = sub i32 %180, %142
  %182 = load i32, ptr %36, align 4, !tbaa !7
  %183 = sub i32 %182, %144
  %184 = load i32, ptr %37, align 4, !tbaa !7
  %185 = getelementptr inbounds [3 x i32], ptr %141, i64 0, i64 2
  %186 = load i32, ptr %185, align 4, !tbaa !7
  %187 = sub nsw i32 %184, %186
  %188 = mul nsw i32 %150, %187
  %189 = add nsw i32 %183, %188
  %190 = mul nsw i32 %189, %156
  %191 = add nsw i32 %181, %190
  %192 = sext i32 %112 to i64
  br label %193

193:                                              ; preds = %225, %167
  %194 = phi i32 [ %229, %225 ], [ %191, %167 ]
  %195 = phi i32 [ %228, %225 ], [ %179, %167 ]
  %196 = phi i32 [ %230, %225 ], [ 0, %167 ]
  br i1 %158, label %197, label %225

197:                                              ; preds = %218, %193
  %198 = phi i32 [ %222, %218 ], [ %194, %193 ]
  %199 = phi i32 [ %221, %218 ], [ %195, %193 ]
  %200 = phi i32 [ %223, %218 ], [ 0, %193 ]
  br i1 %159, label %201, label %218

201:                                              ; preds = %197
  %202 = sext i32 %198 to i64
  %203 = sext i32 %199 to i64
  br label %204

204:                                              ; preds = %204, %201
  %205 = phi i64 [ %203, %201 ], [ %211, %204 ]
  %206 = phi i64 [ %202, %201 ], [ %212, %204 ]
  %207 = phi i32 [ 0, %201 ], [ %213, %204 ]
  %208 = getelementptr inbounds double, ptr %110, i64 %206
  %209 = load double, ptr %208, align 8, !tbaa !29
  %210 = getelementptr inbounds double, ptr %104, i64 %205
  store double %209, ptr %210, align 8, !tbaa !29
  %211 = add i64 %205, %192
  %212 = add nsw i64 %206, 1
  %213 = add nuw nsw i32 %207, 1
  %214 = icmp eq i32 %213, %113
  br i1 %214, label %215, label %204, !llvm.loop !336

215:                                              ; preds = %204
  %.lcssa4 = phi i64 [ %211, %204 ]
  %.lcssa3 = phi i64 [ %212, %204 ]
  %216 = trunc i64 %.lcssa4 to i32
  %217 = trunc i64 %.lcssa3 to i32
  br label %218

218:                                              ; preds = %215, %197
  %219 = phi i32 [ %199, %197 ], [ %216, %215 ]
  %220 = phi i32 [ %198, %197 ], [ %217, %215 ]
  %221 = add nsw i32 %161, %219
  %222 = add nsw i32 %162, %220
  %223 = add nuw nsw i32 %200, 1
  %224 = icmp eq i32 %223, %114
  br i1 %224, label %225, label %197, !llvm.loop !337

225:                                              ; preds = %218, %193
  %226 = phi i32 [ %195, %193 ], [ %221, %218 ]
  %227 = phi i32 [ %194, %193 ], [ %222, %218 ]
  %228 = add nsw i32 %164, %226
  %229 = add nsw i32 %227, %166
  %230 = add nuw nsw i32 %196, 1
  %231 = icmp eq i32 %230, %115
  br i1 %231, label %232, label %193, !llvm.loop !338

232:                                              ; preds = %225, %119, %86
  %233 = add nuw nsw i64 %51, 1
  %234 = load i32, ptr %32, align 8, !tbaa !21
  %235 = sext i32 %234 to i64
  %236 = icmp slt i64 %233, %235
  br i1 %236, label %50, label %57, !llvm.loop !339

237:                                              ; preds = %493, %57
  %238 = phi i1 [ true, %57 ], [ false, %493 ]
  br i1 %238, label %239, label %242

239:                                              ; preds = %237
  %240 = load ptr, ptr %59, align 8, !tbaa !27
  %241 = call i32 @hypre_InitializeIndtComputations(ptr noundef %15, ptr noundef %240, ptr noundef nonnull %5) #33
  br label %245

242:                                              ; preds = %237
  %243 = load ptr, ptr %5, align 8, !tbaa !14
  %244 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %243) #33
  br label %245

245:                                              ; preds = %242, %239
  %246 = phi ptr [ %58, %242 ], [ %60, %239 ]
  %247 = load ptr, ptr %246, align 8, !tbaa !14
  %248 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %247, i64 0, i32 1
  %249 = load i32, ptr %248, align 8, !tbaa !45
  %250 = icmp sgt i32 %249, 0
  br i1 %250, label %251, label %493

251:                                              ; preds = %488, %245
  %252 = phi i32 [ %489, %488 ], [ %249, %245 ]
  %253 = phi i64 [ %490, %488 ], [ 0, %245 ]
  %254 = load ptr, ptr %247, align 8, !tbaa !42
  %255 = getelementptr inbounds ptr, ptr %254, i64 %253
  %256 = load ptr, ptr %255, align 8, !tbaa !14
  %257 = load ptr, ptr %61, align 8, !tbaa !24
  %258 = load ptr, ptr %257, align 8, !tbaa !23
  %259 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %253
  %260 = load ptr, ptr %62, align 8, !tbaa !25
  %261 = load ptr, ptr %260, align 8, !tbaa !23
  %262 = getelementptr inbounds %struct.hypre_Box_struct, ptr %261, i64 %253
  %263 = load ptr, ptr %64, align 8, !tbaa !340
  %264 = load ptr, ptr %65, align 8, !tbaa !341
  %265 = getelementptr inbounds ptr, ptr %264, i64 %253
  %266 = load ptr, ptr %265, align 8, !tbaa !14
  %267 = load i32, ptr %21, align 4, !tbaa !7
  %268 = load i32, ptr %66, align 4, !tbaa !7
  %269 = load i32, ptr %67, align 4, !tbaa !7
  %270 = getelementptr inbounds i32, ptr %266, i64 1
  br i1 %63, label %297, label %271

271:                                              ; preds = %251
  %272 = load i32, ptr %266, align 4, !tbaa !7
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds double, ptr %263, i64 %273
  %275 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %253, i32 1
  %276 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %253, i32 1, i64 1
  %277 = load i32, ptr %276, align 4, !tbaa !7
  %278 = getelementptr inbounds [3 x i32], ptr %259, i64 0, i64 1
  %279 = load i32, ptr %278, align 4, !tbaa !7
  %280 = sub nsw i32 %277, %279
  %281 = add nsw i32 %280, 1
  %282 = icmp slt i32 %280, 0
  %283 = select i1 %282, i32 0, i32 %281
  %284 = mul nsw i32 %283, %269
  %285 = add nsw i32 %284, %268
  %286 = load i32, ptr %275, align 4, !tbaa !7
  %287 = load i32, ptr %259, align 4, !tbaa !7
  %288 = sub nsw i32 %286, %287
  %289 = add nsw i32 %288, 1
  %290 = icmp slt i32 %288, 0
  %291 = select i1 %290, i32 0, i32 %289
  %292 = mul nsw i32 %285, %291
  %293 = add nsw i32 %292, %267
  %294 = sext i32 %293 to i64
  %295 = sub nsw i64 0, %294
  %296 = getelementptr inbounds double, ptr %274, i64 %295
  br label %301

297:                                              ; preds = %251
  %298 = load i32, ptr %270, align 4, !tbaa !7
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds double, ptr %263, i64 %299
  br label %301

301:                                              ; preds = %297, %271
  %302 = phi ptr [ %296, %271 ], [ %300, %297 ]
  %303 = phi ptr [ %270, %271 ], [ %266, %297 ]
  %304 = load i32, ptr %303, align 4, !tbaa !7
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds double, ptr %263, i64 %305
  %307 = load ptr, ptr %59, align 8, !tbaa !27
  %308 = load ptr, ptr %68, align 8, !tbaa !28
  %309 = getelementptr inbounds i32, ptr %308, i64 %253
  %310 = load i32, ptr %309, align 4, !tbaa !7
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds double, ptr %307, i64 %311
  %313 = getelementptr inbounds %struct.hypre_Box_struct, ptr %261, i64 %253, i32 1
  %314 = getelementptr inbounds %struct.hypre_Box_struct, ptr %261, i64 %253, i32 1, i64 1
  %315 = load i32, ptr %314, align 4, !tbaa !7
  %316 = getelementptr inbounds [3 x i32], ptr %262, i64 0, i64 1
  %317 = load i32, ptr %316, align 4, !tbaa !7
  %318 = sub nsw i32 %315, %317
  %319 = add nsw i32 %318, 1
  %320 = icmp slt i32 %318, 0
  %321 = select i1 %320, i32 0, i32 %319
  %322 = mul nsw i32 %321, %269
  %323 = add nsw i32 %322, %268
  %324 = load i32, ptr %313, align 4, !tbaa !7
  %325 = load i32, ptr %262, align 4, !tbaa !7
  %326 = sub nsw i32 %324, %325
  %327 = add nsw i32 %326, 1
  %328 = icmp slt i32 %326, 0
  %329 = select i1 %328, i32 0, i32 %327
  %330 = mul nsw i32 %323, %329
  %331 = add nsw i32 %330, %267
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds double, ptr %312, i64 %332
  %334 = load i32, ptr %69, align 4, !tbaa !7
  %335 = load i32, ptr %70, align 4, !tbaa !7
  %336 = load i32, ptr %71, align 4, !tbaa !7
  %337 = mul nsw i32 %336, %321
  %338 = add nsw i32 %337, %335
  %339 = mul nsw i32 %338, %329
  %340 = add nsw i32 %339, %334
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds double, ptr %312, i64 %341
  %343 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %256, i64 0, i32 1
  %344 = load i32, ptr %343, align 8, !tbaa !21
  %345 = icmp sgt i32 %344, 0
  br i1 %345, label %346, label %488

346:                                              ; preds = %301
  %347 = getelementptr inbounds [3 x i32], ptr %259, i64 0, i64 1
  %348 = getelementptr inbounds [3 x i32], ptr %259, i64 0, i64 2
  %349 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %253, i32 1
  %350 = getelementptr inbounds %struct.hypre_Box_struct, ptr %258, i64 %253, i32 1, i64 1
  %351 = getelementptr inbounds [3 x i32], ptr %262, i64 0, i64 2
  br label %352

352:                                              ; preds = %481, %346
  %353 = phi i64 [ 0, %346 ], [ %482, %481 ]
  %354 = load ptr, ptr %256, align 8, !tbaa !23
  %355 = getelementptr inbounds %struct.hypre_Box_struct, ptr %354, i64 %353
  %356 = load i32, ptr %355, align 4, !tbaa !7
  store i32 %356, ptr %7, align 4, !tbaa !7
  %357 = getelementptr inbounds [3 x i32], ptr %355, i64 0, i64 1
  %358 = load i32, ptr %357, align 4, !tbaa !7
  store i32 %358, ptr %72, align 4, !tbaa !7
  %359 = getelementptr inbounds [3 x i32], ptr %355, i64 0, i64 2
  %360 = load i32, ptr %359, align 4, !tbaa !7
  store i32 %360, ptr %73, align 4, !tbaa !7
  %361 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %7, ptr noundef nonnull %17, ptr noundef nonnull %18, ptr noundef nonnull %8) #33
  %362 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %355, ptr noundef nonnull %18, ptr noundef nonnull %6) #33
  %363 = load i32, ptr %18, align 4, !tbaa !7
  %364 = load i32, ptr %6, align 4, !tbaa !7
  %365 = load i32, ptr %78, align 4, !tbaa !7
  %366 = load i32, ptr %79, align 4, !tbaa !7
  %367 = call i32 @llvm.smax.i32(i32 %365, i32 %364)
  %368 = call i32 @llvm.smax.i32(i32 %366, i32 %367)
  %369 = icmp sgt i32 %368, 0
  br i1 %369, label %370, label %481

370:                                              ; preds = %352
  %371 = load i32, ptr %313, align 4, !tbaa !7
  %372 = load i32, ptr %262, align 4, !tbaa !7
  %373 = sub nsw i32 %371, %372
  %374 = icmp slt i32 %373, 0
  %375 = add nsw i32 %373, 1
  %376 = select i1 %374, i32 0, i32 %375
  %377 = load i32, ptr %314, align 4, !tbaa !7
  %378 = load i32, ptr %316, align 4, !tbaa !7
  %379 = sub nsw i32 %377, %378
  %380 = icmp slt i32 %379, 0
  %381 = add nsw i32 %379, 1
  %382 = select i1 %380, i32 0, i32 %381
  %383 = mul i32 %376, %382
  %384 = load i32, ptr %77, align 4, !tbaa !7
  %385 = mul i32 %383, %384
  %386 = load i32, ptr %76, align 4, !tbaa !7
  %387 = mul nsw i32 %376, %386
  %388 = load i32, ptr %259, align 4, !tbaa !7
  %389 = load i32, ptr %347, align 4, !tbaa !7
  %390 = load i32, ptr %350, align 4, !tbaa !7
  %391 = sub nsw i32 %390, %389
  %392 = icmp slt i32 %391, 0
  %393 = add nsw i32 %391, 1
  %394 = select i1 %392, i32 0, i32 %393
  %395 = load i32, ptr %349, align 4, !tbaa !7
  %396 = sub nsw i32 %395, %388
  %397 = icmp slt i32 %396, 0
  %398 = add nsw i32 %396, 1
  %399 = select i1 %397, i32 0, i32 %398
  %400 = icmp sgt i32 %366, 0
  %401 = icmp sgt i32 %365, 0
  %402 = icmp sgt i32 %364, 0
  %403 = sub i32 %399, %364
  %404 = mul nsw i32 %364, %363
  %405 = sub i32 %387, %404
  %406 = sub i32 %394, %365
  %407 = mul i32 %406, %399
  %408 = mul nsw i32 %365, %387
  %409 = sub i32 %385, %408
  br i1 %400, label %410, label %481

410:                                              ; preds = %370
  %411 = load i32, ptr %8, align 4, !tbaa !7
  %412 = sub i32 %411, %388
  %413 = load i32, ptr %74, align 4, !tbaa !7
  %414 = sub i32 %413, %389
  %415 = load i32, ptr %75, align 4, !tbaa !7
  %416 = load i32, ptr %348, align 4, !tbaa !7
  %417 = sub nsw i32 %415, %416
  %418 = mul nsw i32 %394, %417
  %419 = add nsw i32 %414, %418
  %420 = mul nsw i32 %419, %399
  %421 = add nsw i32 %412, %420
  %422 = load i32, ptr %7, align 4, !tbaa !7
  %423 = sub i32 %422, %372
  %424 = load i32, ptr %72, align 4, !tbaa !7
  %425 = sub i32 %424, %378
  %426 = load i32, ptr %73, align 4, !tbaa !7
  %427 = load i32, ptr %351, align 4, !tbaa !7
  %428 = sub nsw i32 %426, %427
  %429 = mul nsw i32 %382, %428
  %430 = add nsw i32 %425, %429
  %431 = mul nsw i32 %430, %376
  %432 = add nsw i32 %423, %431
  %433 = sext i32 %363 to i64
  br label %434

434:                                              ; preds = %474, %410
  %435 = phi i32 [ %477, %474 ], [ %421, %410 ]
  %436 = phi i32 [ %478, %474 ], [ %432, %410 ]
  %437 = phi i32 [ %479, %474 ], [ 0, %410 ]
  br i1 %401, label %438, label %474

438:                                              ; preds = %467, %434
  %439 = phi i32 [ %470, %467 ], [ %435, %434 ]
  %440 = phi i32 [ %471, %467 ], [ %436, %434 ]
  %441 = phi i32 [ %472, %467 ], [ 0, %434 ]
  br i1 %402, label %442, label %467

442:                                              ; preds = %438
  %443 = sext i32 %439 to i64
  %444 = sext i32 %440 to i64
  br label %445

445:                                              ; preds = %445, %442
  %446 = phi i64 [ %444, %442 ], [ %461, %445 ]
  %447 = phi i64 [ %443, %442 ], [ %460, %445 ]
  %448 = phi i32 [ 0, %442 ], [ %462, %445 ]
  %449 = getelementptr inbounds double, ptr %306, i64 %447
  %450 = load double, ptr %449, align 8, !tbaa !29
  %451 = getelementptr inbounds double, ptr %333, i64 %446
  %452 = load double, ptr %451, align 8, !tbaa !29
  %453 = getelementptr inbounds double, ptr %302, i64 %447
  %454 = load double, ptr %453, align 8, !tbaa !29
  %455 = getelementptr inbounds double, ptr %342, i64 %446
  %456 = load double, ptr %455, align 8, !tbaa !29
  %457 = fmul double %454, %456
  %458 = call double @llvm.fmuladd.f64(double %450, double %452, double %457)
  %459 = getelementptr inbounds double, ptr %312, i64 %446
  store double %458, ptr %459, align 8, !tbaa !29
  %460 = add nsw i64 %447, 1
  %461 = add i64 %446, %433
  %462 = add nuw nsw i32 %448, 1
  %463 = icmp eq i32 %462, %364
  br i1 %463, label %464, label %445, !llvm.loop !342

464:                                              ; preds = %445
  %.lcssa1 = phi i64 [ %460, %445 ]
  %.lcssa = phi i64 [ %461, %445 ]
  %465 = trunc i64 %.lcssa to i32
  %466 = trunc i64 %.lcssa1 to i32
  br label %467

467:                                              ; preds = %464, %438
  %468 = phi i32 [ %440, %438 ], [ %465, %464 ]
  %469 = phi i32 [ %439, %438 ], [ %466, %464 ]
  %470 = add nsw i32 %403, %469
  %471 = add nsw i32 %405, %468
  %472 = add nuw nsw i32 %441, 1
  %473 = icmp eq i32 %472, %365
  br i1 %473, label %474, label %438, !llvm.loop !343

474:                                              ; preds = %467, %434
  %475 = phi i32 [ %436, %434 ], [ %471, %467 ]
  %476 = phi i32 [ %435, %434 ], [ %470, %467 ]
  %477 = add nsw i32 %476, %407
  %478 = add nsw i32 %409, %475
  %479 = add nuw nsw i32 %437, 1
  %480 = icmp eq i32 %479, %366
  br i1 %480, label %481, label %434, !llvm.loop !344

481:                                              ; preds = %474, %370, %352
  %482 = add nuw nsw i64 %353, 1
  %483 = load i32, ptr %343, align 8, !tbaa !21
  %484 = sext i32 %483 to i64
  %485 = icmp slt i64 %482, %484
  br i1 %485, label %352, label %486, !llvm.loop !345

486:                                              ; preds = %481
  %487 = load i32, ptr %248, align 8, !tbaa !45
  br label %488

488:                                              ; preds = %486, %301
  %489 = phi i32 [ %252, %301 ], [ %487, %486 ]
  %490 = add nuw nsw i64 %253, 1
  %491 = sext i32 %489 to i64
  %492 = icmp slt i64 %490, %491
  br i1 %492, label %251, label %493, !llvm.loop !346

493:                                              ; preds = %488, %245
  br i1 %238, label %237, label %494, !llvm.loop !347

494:                                              ; preds = %493
  %495 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 8
  %496 = load i32, ptr %495, align 8, !tbaa !254
  %497 = mul nsw i32 %496, 3
  %498 = call i32 @hypre_IncFLOPCount(i32 noundef %497) #33
  %499 = load i32, ptr %9, align 4, !tbaa !330
  %500 = call i32 @hypre_EndTiming(i32 noundef %499) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SemiInterpDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !332
  %5 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %4) #33
  %6 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !334
  %8 = tail call i32 @hypre_ComputePkgDestroy(ptr noundef %7) #33
  %9 = getelementptr inbounds %struct.hypre_SemiInterpData, ptr %0, i64 0, i32 6
  %10 = load i32, ptr %9, align 4, !tbaa !330
  %11 = tail call i32 @hypre_FinalizeTiming(i32 noundef %10) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %12

12:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SemiRestrictCreate() #0 {
  %1 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 56) #33
  %2 = tail call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.97) #33
  %3 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %1, i64 0, i32 5
  store i32 %2, ptr %3, align 8, !tbaa !348
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SemiRestrictSetup(ptr nocapture noundef writeonly %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readnone %4, ptr noundef %5, ptr noundef %6, ptr noundef %7) #0 {
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #34
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !39
  %18 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !250
  %20 = call i32 @hypre_CreateComputeInfo(ptr noundef %17, ptr noundef %19, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #33
  %21 = load ptr, ptr %9, align 8, !tbaa !14
  %22 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %21, ptr noundef %6, ptr noundef %7) #33
  %23 = load ptr, ptr %10, align 8, !tbaa !14
  %24 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %23, ptr noundef %6, ptr noundef %7) #33
  %25 = load ptr, ptr %13, align 8, !tbaa !14
  %26 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %25, ptr noundef %5, ptr noundef %7) #33
  %27 = load ptr, ptr %14, align 8, !tbaa !14
  %28 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %27, ptr noundef %5, ptr noundef %7) #33
  %29 = load ptr, ptr %9, align 8, !tbaa !14
  %30 = load ptr, ptr %10, align 8, !tbaa !14
  %31 = load ptr, ptr %11, align 8, !tbaa !14
  %32 = load ptr, ptr %12, align 8, !tbaa !14
  %33 = load ptr, ptr %13, align 8, !tbaa !14
  %34 = load ptr, ptr %14, align 8, !tbaa !14
  %35 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !25
  %37 = call i32 @hypre_ComputePkgCreate(ptr noundef %29, ptr noundef %30, ptr noundef %7, ptr noundef %7, ptr noundef %31, ptr noundef %32, ptr noundef %33, ptr noundef %34, ptr noundef %7, ptr noundef %17, ptr noundef %36, i32 noundef 1, ptr noundef nonnull %15) #33
  %38 = call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %38, ptr %0, align 8, !tbaa !350
  %39 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 1
  store i32 %2, ptr %39, align 8, !tbaa !351
  %40 = load ptr, ptr %15, align 8, !tbaa !14
  %41 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 2
  store ptr %40, ptr %41, align 8, !tbaa !352
  %42 = load i32, ptr %5, align 4, !tbaa !7
  %43 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 3
  store i32 %42, ptr %43, align 8, !tbaa !7
  %44 = getelementptr inbounds i32, ptr %5, i64 1
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 3, i64 1
  store i32 %45, ptr %46, align 4, !tbaa !7
  %47 = getelementptr inbounds i32, ptr %5, i64 2
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 3, i64 2
  store i32 %48, ptr %49, align 8, !tbaa !7
  %50 = load i32, ptr %7, align 4, !tbaa !7
  %51 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 4
  store i32 %50, ptr %51, align 4, !tbaa !7
  %52 = getelementptr inbounds i32, ptr %7, i64 1
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 4, i64 1
  store i32 %53, ptr %54, align 4, !tbaa !7
  %55 = getelementptr inbounds i32, ptr %7, i64 2
  %56 = load i32, ptr %55, align 4, !tbaa !7
  %57 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 4, i64 2
  store i32 %56, ptr %57, align 4, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SemiRestrict(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #0 {
  %5 = alloca ptr, align 8
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  %8 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 5
  %9 = load i32, ptr %8, align 8, !tbaa !348
  %10 = tail call i32 @hypre_BeginTiming(i32 noundef %9) #33
  %11 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !351
  %13 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !352
  %15 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 3
  %16 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 4
  %17 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !250
  %19 = load ptr, ptr %18, align 8, !tbaa !35
  %20 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !39
  %22 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %21, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !195
  %24 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !39
  %26 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %25, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !20
  %28 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %25, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !195
  %30 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 2
  %31 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %32 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %14, i64 0, i32 1
  %33 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %27, i64 0, i32 1
  %34 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %35 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %36 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %37 = icmp eq i32 %12, 0
  %38 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 6
  %39 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 9
  %40 = getelementptr inbounds [3 x i32], ptr %19, i64 1
  %41 = getelementptr inbounds [3 x i32], ptr %19, i64 1, i64 1
  %42 = getelementptr inbounds [3 x i32], ptr %19, i64 1, i64 2
  %43 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %44 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 1
  %45 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 2
  %46 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %47 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %48 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %49 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %50 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 4, i64 1
  %51 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 4, i64 2
  %52 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %53 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  br label %54

54:                                               ; preds = %368, %4
  %55 = phi i1 [ true, %4 ], [ false, %368 ]
  br i1 %55, label %56, label %59

56:                                               ; preds = %54
  %57 = load ptr, ptr %31, align 8, !tbaa !27
  %58 = call i32 @hypre_InitializeIndtComputations(ptr noundef %14, ptr noundef %57, ptr noundef nonnull %5) #33
  br label %62

59:                                               ; preds = %54
  %60 = load ptr, ptr %5, align 8, !tbaa !14
  %61 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %60) #33
  br label %62

62:                                               ; preds = %59, %56
  %63 = phi ptr [ %30, %59 ], [ %32, %56 ]
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = load i32, ptr %33, align 8, !tbaa !21
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %368

67:                                               ; preds = %363, %62
  %68 = phi i32 [ %364, %363 ], [ %65, %62 ]
  %69 = phi i64 [ %365, %363 ], [ 0, %62 ]
  %70 = phi i64 [ %.lcssa, %363 ], [ 0, %62 ]
  %71 = getelementptr inbounds i32, ptr %29, i64 %69
  %72 = load i32, ptr %71, align 4, !tbaa !7
  %73 = shl i64 %70, 32
  %74 = ashr exact i64 %73, 32
  br label %75

75:                                               ; preds = %75, %67
  %76 = phi i64 [ %80, %75 ], [ %74, %67 ]
  %77 = getelementptr inbounds i32, ptr %23, i64 %76
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = icmp eq i32 %78, %72
  %80 = add i64 %76, 1
  br i1 %79, label %81, label %75, !llvm.loop !353

81:                                               ; preds = %75
  %.lcssa = phi i64 [ %76, %75 ]
  %82 = load ptr, ptr %64, align 8, !tbaa !42
  %83 = getelementptr inbounds ptr, ptr %82, i64 %.lcssa
  %84 = load ptr, ptr %83, align 8, !tbaa !14
  %85 = load ptr, ptr %34, align 8, !tbaa !24
  %86 = load ptr, ptr %85, align 8, !tbaa !23
  %87 = getelementptr inbounds %struct.hypre_Box_struct, ptr %86, i64 %.lcssa
  %88 = load ptr, ptr %35, align 8, !tbaa !25
  %89 = load ptr, ptr %88, align 8, !tbaa !23
  %90 = getelementptr inbounds %struct.hypre_Box_struct, ptr %89, i64 %.lcssa
  %91 = load ptr, ptr %36, align 8, !tbaa !25
  %92 = load ptr, ptr %91, align 8, !tbaa !23
  %93 = getelementptr inbounds %struct.hypre_Box_struct, ptr %92, i64 %69
  %94 = load ptr, ptr %38, align 8, !tbaa !340
  %95 = load ptr, ptr %39, align 8, !tbaa !341
  %96 = getelementptr inbounds ptr, ptr %95, i64 %.lcssa
  %97 = load ptr, ptr %96, align 8, !tbaa !14
  %98 = load i32, ptr %40, align 4, !tbaa !7
  %99 = load i32, ptr %41, align 4, !tbaa !7
  %100 = load i32, ptr %42, align 4, !tbaa !7
  br i1 %37, label %128, label %101

101:                                              ; preds = %81
  %102 = getelementptr inbounds i32, ptr %97, i64 1
  %103 = load i32, ptr %102, align 4, !tbaa !7
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds double, ptr %94, i64 %104
  %106 = getelementptr inbounds %struct.hypre_Box_struct, ptr %86, i64 %.lcssa, i32 1
  %107 = getelementptr inbounds %struct.hypre_Box_struct, ptr %86, i64 %.lcssa, i32 1, i64 1
  %108 = load i32, ptr %107, align 4, !tbaa !7
  %109 = getelementptr inbounds [3 x i32], ptr %87, i64 0, i64 1
  %110 = load i32, ptr %109, align 4, !tbaa !7
  %111 = sub nsw i32 %108, %110
  %112 = add nsw i32 %111, 1
  %113 = icmp slt i32 %111, 0
  %114 = select i1 %113, i32 0, i32 %112
  %115 = mul nsw i32 %114, %100
  %116 = add nsw i32 %115, %99
  %117 = load i32, ptr %106, align 4, !tbaa !7
  %118 = load i32, ptr %87, align 4, !tbaa !7
  %119 = sub nsw i32 %117, %118
  %120 = add nsw i32 %119, 1
  %121 = icmp slt i32 %119, 0
  %122 = select i1 %121, i32 0, i32 %120
  %123 = mul nsw i32 %116, %122
  %124 = add nsw i32 %123, %98
  %125 = sext i32 %124 to i64
  %126 = sub nsw i64 0, %125
  %127 = getelementptr inbounds double, ptr %105, i64 %126
  br label %133

128:                                              ; preds = %81
  %129 = load i32, ptr %97, align 4, !tbaa !7
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double, ptr %94, i64 %130
  %132 = getelementptr inbounds i32, ptr %97, i64 1
  br label %133

133:                                              ; preds = %128, %101
  %134 = phi ptr [ %97, %101 ], [ %132, %128 ]
  %135 = phi ptr [ %127, %101 ], [ %131, %128 ]
  %136 = load i32, ptr %134, align 4, !tbaa !7
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds double, ptr %94, i64 %137
  %139 = load ptr, ptr %31, align 8, !tbaa !27
  %140 = load ptr, ptr %43, align 8, !tbaa !28
  %141 = getelementptr inbounds i32, ptr %140, i64 %.lcssa
  %142 = load i32, ptr %141, align 4, !tbaa !7
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds double, ptr %139, i64 %143
  %145 = load i32, ptr %19, align 4, !tbaa !7
  %146 = load i32, ptr %44, align 4, !tbaa !7
  %147 = load i32, ptr %45, align 4, !tbaa !7
  %148 = getelementptr inbounds %struct.hypre_Box_struct, ptr %89, i64 %.lcssa, i32 1
  %149 = getelementptr inbounds %struct.hypre_Box_struct, ptr %89, i64 %.lcssa, i32 1, i64 1
  %150 = load i32, ptr %149, align 4, !tbaa !7
  %151 = getelementptr inbounds [3 x i32], ptr %90, i64 0, i64 1
  %152 = load i32, ptr %151, align 4, !tbaa !7
  %153 = sub nsw i32 %150, %152
  %154 = add nsw i32 %153, 1
  %155 = icmp slt i32 %153, 0
  %156 = select i1 %155, i32 0, i32 %154
  %157 = mul nsw i32 %156, %147
  %158 = add nsw i32 %157, %146
  %159 = load i32, ptr %148, align 4, !tbaa !7
  %160 = load i32, ptr %90, align 4, !tbaa !7
  %161 = sub nsw i32 %159, %160
  %162 = add nsw i32 %161, 1
  %163 = icmp slt i32 %161, 0
  %164 = select i1 %163, i32 0, i32 %162
  %165 = mul nsw i32 %158, %164
  %166 = add nsw i32 %165, %145
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds double, ptr %144, i64 %167
  %169 = mul nsw i32 %100, %156
  %170 = add nsw i32 %169, %99
  %171 = mul nsw i32 %170, %164
  %172 = add nsw i32 %171, %98
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds double, ptr %144, i64 %173
  %175 = load ptr, ptr %46, align 8, !tbaa !27
  %176 = load ptr, ptr %47, align 8, !tbaa !28
  %177 = getelementptr inbounds i32, ptr %176, i64 %69
  %178 = load i32, ptr %177, align 4, !tbaa !7
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds double, ptr %175, i64 %179
  %181 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %84, i64 0, i32 1
  %182 = load i32, ptr %181, align 8, !tbaa !21
  %183 = icmp sgt i32 %182, 0
  br i1 %183, label %184, label %363

184:                                              ; preds = %133
  %185 = getelementptr inbounds [3 x i32], ptr %87, i64 0, i64 1
  %186 = getelementptr inbounds [3 x i32], ptr %87, i64 0, i64 2
  %187 = getelementptr inbounds %struct.hypre_Box_struct, ptr %86, i64 %.lcssa, i32 1
  %188 = getelementptr inbounds %struct.hypre_Box_struct, ptr %86, i64 %.lcssa, i32 1, i64 1
  %189 = getelementptr inbounds [3 x i32], ptr %90, i64 0, i64 2
  %190 = getelementptr inbounds [3 x i32], ptr %93, i64 0, i64 1
  %191 = getelementptr inbounds [3 x i32], ptr %93, i64 0, i64 2
  %192 = getelementptr inbounds %struct.hypre_Box_struct, ptr %92, i64 %69, i32 1
  %193 = getelementptr inbounds %struct.hypre_Box_struct, ptr %92, i64 %69, i32 1, i64 1
  br label %194

194:                                              ; preds = %356, %184
  %195 = phi i64 [ 0, %184 ], [ %357, %356 ]
  %196 = load ptr, ptr %84, align 8, !tbaa !23
  %197 = getelementptr inbounds %struct.hypre_Box_struct, ptr %196, i64 %195
  %198 = call i32 @hypre_StructMapFineToCoarse(ptr noundef %197, ptr noundef nonnull %15, ptr noundef nonnull %16, ptr noundef nonnull %7) #33
  %199 = call i32 @hypre_BoxGetStrideSize(ptr noundef %197, ptr noundef nonnull %16, ptr noundef nonnull %6) #33
  %200 = load i32, ptr %16, align 4, !tbaa !7
  %201 = load i32, ptr %6, align 4, !tbaa !7
  %202 = load i32, ptr %52, align 4, !tbaa !7
  %203 = load i32, ptr %53, align 4, !tbaa !7
  %204 = call i32 @llvm.smax.i32(i32 %202, i32 %201)
  %205 = call i32 @llvm.smax.i32(i32 %203, i32 %204)
  %206 = icmp sgt i32 %205, 0
  br i1 %206, label %207, label %356

207:                                              ; preds = %194
  %208 = load i32, ptr %148, align 4, !tbaa !7
  %209 = load i32, ptr %90, align 4, !tbaa !7
  %210 = sub nsw i32 %208, %209
  %211 = icmp slt i32 %210, 0
  %212 = add nsw i32 %210, 1
  %213 = select i1 %211, i32 0, i32 %212
  %214 = load i32, ptr %149, align 4, !tbaa !7
  %215 = load i32, ptr %151, align 4, !tbaa !7
  %216 = sub nsw i32 %214, %215
  %217 = icmp slt i32 %216, 0
  %218 = add nsw i32 %216, 1
  %219 = select i1 %217, i32 0, i32 %218
  %220 = mul i32 %213, %219
  %221 = load i32, ptr %51, align 4, !tbaa !7
  %222 = mul i32 %220, %221
  %223 = load i32, ptr %50, align 4, !tbaa !7
  %224 = mul nsw i32 %223, %213
  %225 = load i32, ptr %93, align 4, !tbaa !7
  %226 = load i32, ptr %190, align 4, !tbaa !7
  %227 = load i32, ptr %193, align 4, !tbaa !7
  %228 = sub nsw i32 %227, %226
  %229 = icmp slt i32 %228, 0
  %230 = add nsw i32 %228, 1
  %231 = select i1 %229, i32 0, i32 %230
  %232 = load i32, ptr %192, align 4, !tbaa !7
  %233 = sub nsw i32 %232, %225
  %234 = icmp slt i32 %233, 0
  %235 = add nsw i32 %233, 1
  %236 = select i1 %234, i32 0, i32 %235
  %237 = load i32, ptr %87, align 4, !tbaa !7
  %238 = load i32, ptr %185, align 4, !tbaa !7
  %239 = load i32, ptr %188, align 4, !tbaa !7
  %240 = sub nsw i32 %239, %238
  %241 = icmp slt i32 %240, 0
  %242 = add nsw i32 %240, 1
  %243 = select i1 %241, i32 0, i32 %242
  %244 = load i32, ptr %187, align 4, !tbaa !7
  %245 = sub nsw i32 %244, %237
  %246 = icmp slt i32 %245, 0
  %247 = add nsw i32 %245, 1
  %248 = select i1 %246, i32 0, i32 %247
  %249 = icmp sgt i32 %203, 0
  %250 = icmp sgt i32 %202, 0
  %251 = icmp sgt i32 %201, 0
  %252 = sub i32 %248, %201
  %253 = mul nsw i32 %201, %200
  %254 = sub i32 %224, %253
  %255 = sub i32 %236, %201
  %256 = sub i32 %243, %202
  %257 = mul i32 %256, %248
  %258 = mul nsw i32 %202, %224
  %259 = sub i32 %222, %258
  %260 = sub i32 %231, %202
  %261 = mul i32 %260, %236
  br i1 %249, label %262, label %356

262:                                              ; preds = %207
  %263 = load i32, ptr %7, align 4, !tbaa !7
  %264 = sub i32 %263, %237
  %265 = load i32, ptr %48, align 4, !tbaa !7
  %266 = sub i32 %265, %238
  %267 = load i32, ptr %49, align 4, !tbaa !7
  %268 = load i32, ptr %186, align 4, !tbaa !7
  %269 = sub nsw i32 %267, %268
  %270 = mul nsw i32 %243, %269
  %271 = add nsw i32 %266, %270
  %272 = mul nsw i32 %271, %248
  %273 = add nsw i32 %264, %272
  %274 = load i32, ptr %197, align 4, !tbaa !7
  %275 = sub i32 %274, %209
  %276 = getelementptr inbounds i32, ptr %197, i64 1
  %277 = load i32, ptr %276, align 4, !tbaa !7
  %278 = sub i32 %277, %215
  %279 = getelementptr inbounds i32, ptr %197, i64 2
  %280 = load i32, ptr %279, align 4, !tbaa !7
  %281 = load i32, ptr %189, align 4, !tbaa !7
  %282 = sub nsw i32 %280, %281
  %283 = mul nsw i32 %219, %282
  %284 = add nsw i32 %278, %283
  %285 = mul nsw i32 %284, %213
  %286 = add nsw i32 %275, %285
  %287 = sub i32 %263, %225
  %288 = sub i32 %265, %226
  %289 = load i32, ptr %191, align 4, !tbaa !7
  %290 = sub nsw i32 %267, %289
  %291 = mul nsw i32 %231, %290
  %292 = add nsw i32 %288, %291
  %293 = mul nsw i32 %292, %236
  %294 = add nsw i32 %287, %293
  %295 = sext i32 %200 to i64
  br label %296

296:                                              ; preds = %347, %262
  %297 = phi i32 [ %351, %347 ], [ %273, %262 ]
  %298 = phi i32 [ %352, %347 ], [ %286, %262 ]
  %299 = phi i32 [ %353, %347 ], [ %294, %262 ]
  %300 = phi i32 [ %354, %347 ], [ 0, %262 ]
  br i1 %250, label %301, label %347

301:                                              ; preds = %338, %296
  %302 = phi i32 [ %342, %338 ], [ %297, %296 ]
  %303 = phi i32 [ %343, %338 ], [ %298, %296 ]
  %304 = phi i32 [ %344, %338 ], [ %299, %296 ]
  %305 = phi i32 [ %345, %338 ], [ 0, %296 ]
  br i1 %251, label %306, label %338

306:                                              ; preds = %301
  %307 = sext i32 %302 to i64
  %308 = sext i32 %303 to i64
  %309 = sext i32 %304 to i64
  br label %310

310:                                              ; preds = %310, %306
  %311 = phi i64 [ %309, %306 ], [ %331, %310 ]
  %312 = phi i64 [ %308, %306 ], [ %330, %310 ]
  %313 = phi i64 [ %307, %306 ], [ %329, %310 ]
  %314 = phi i32 [ 0, %306 ], [ %332, %310 ]
  %315 = getelementptr inbounds double, ptr %144, i64 %312
  %316 = load double, ptr %315, align 8, !tbaa !29
  %317 = getelementptr inbounds double, ptr %135, i64 %313
  %318 = load double, ptr %317, align 8, !tbaa !29
  %319 = getelementptr inbounds double, ptr %168, i64 %312
  %320 = load double, ptr %319, align 8, !tbaa !29
  %321 = getelementptr inbounds double, ptr %138, i64 %313
  %322 = load double, ptr %321, align 8, !tbaa !29
  %323 = getelementptr inbounds double, ptr %174, i64 %312
  %324 = load double, ptr %323, align 8, !tbaa !29
  %325 = fmul double %322, %324
  %326 = call double @llvm.fmuladd.f64(double %318, double %320, double %325)
  %327 = fadd double %316, %326
  %328 = getelementptr inbounds double, ptr %180, i64 %311
  store double %327, ptr %328, align 8, !tbaa !29
  %329 = add nsw i64 %313, 1
  %330 = add i64 %312, %295
  %331 = add nsw i64 %311, 1
  %332 = add nuw nsw i32 %314, 1
  %333 = icmp eq i32 %332, %201
  br i1 %333, label %334, label %310, !llvm.loop !354

334:                                              ; preds = %310
  %.lcssa3 = phi i64 [ %329, %310 ]
  %.lcssa2 = phi i64 [ %330, %310 ]
  %.lcssa1 = phi i64 [ %331, %310 ]
  %335 = trunc i64 %.lcssa1 to i32
  %336 = trunc i64 %.lcssa2 to i32
  %337 = trunc i64 %.lcssa3 to i32
  br label %338

338:                                              ; preds = %334, %301
  %339 = phi i32 [ %304, %301 ], [ %335, %334 ]
  %340 = phi i32 [ %303, %301 ], [ %336, %334 ]
  %341 = phi i32 [ %302, %301 ], [ %337, %334 ]
  %342 = add nsw i32 %252, %341
  %343 = add nsw i32 %254, %340
  %344 = add nsw i32 %255, %339
  %345 = add nuw nsw i32 %305, 1
  %346 = icmp eq i32 %345, %202
  br i1 %346, label %347, label %301, !llvm.loop !355

347:                                              ; preds = %338, %296
  %348 = phi i32 [ %299, %296 ], [ %344, %338 ]
  %349 = phi i32 [ %298, %296 ], [ %343, %338 ]
  %350 = phi i32 [ %297, %296 ], [ %342, %338 ]
  %351 = add nsw i32 %350, %257
  %352 = add nsw i32 %259, %349
  %353 = add nsw i32 %348, %261
  %354 = add nuw nsw i32 %300, 1
  %355 = icmp eq i32 %354, %203
  br i1 %355, label %356, label %296, !llvm.loop !356

356:                                              ; preds = %347, %207, %194
  %357 = add nuw nsw i64 %195, 1
  %358 = load i32, ptr %181, align 8, !tbaa !21
  %359 = sext i32 %358 to i64
  %360 = icmp slt i64 %357, %359
  br i1 %360, label %194, label %361, !llvm.loop !357

361:                                              ; preds = %356
  %362 = load i32, ptr %33, align 8, !tbaa !21
  br label %363

363:                                              ; preds = %361, %133
  %364 = phi i32 [ %68, %133 ], [ %362, %361 ]
  %365 = add nuw nsw i64 %69, 1
  %366 = sext i32 %364 to i64
  %367 = icmp slt i64 %365, %366
  br i1 %367, label %67, label %368, !llvm.loop !358

368:                                              ; preds = %363, %62
  br i1 %55, label %54, label %369, !llvm.loop !359

369:                                              ; preds = %368
  %370 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 8
  %371 = load i32, ptr %370, align 8, !tbaa !254
  %372 = shl nsw i32 %371, 2
  %373 = call i32 @hypre_IncFLOPCount(i32 noundef %372) #33
  %374 = load i32, ptr %8, align 8, !tbaa !348
  %375 = call i32 @hypre_EndTiming(i32 noundef %374) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SemiRestrictDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !350
  %5 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %4) #33
  %6 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !352
  %8 = tail call i32 @hypre_ComputePkgDestroy(ptr noundef %7) #33
  %9 = getelementptr inbounds %struct.hypre_SemiRestrictData, ptr %0, i64 0, i32 5
  %10 = load i32, ptr %9, align 8, !tbaa !348
  %11 = tail call i32 @hypre_FinalizeTiming(i32 noundef %10) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %12

12:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMGCreate(i32 noundef %0) #0 {
  %2 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 232) #33
  store i32 %0, ptr %2, align 8, !tbaa !360
  %3 = tail call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.100) #33
  %4 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 30
  store i32 %3, ptr %4, align 4, !tbaa !362
  %5 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 1
  store i32 0, ptr %5, align 4, !tbaa !363
  %6 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 2
  store double 0x3EB0C6F7A0B5ED8D, ptr %6, align 8, !tbaa !364
  %7 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 3
  store <4 x i32> <i32 200, i32 0, i32 0, i32 0>, ptr %7, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 11
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, ptr %8, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 12, i64 1
  store i32 1, ptr %9, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 12, i64 2
  store i32 1, ptr %10, align 4, !tbaa !7
  %11 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 31
  store i32 0, ptr %11, align 8, !tbaa !365
  %12 = getelementptr inbounds %struct.hypre_SMGData, ptr %2, i64 0, i32 7
  store <4 x i32> <i32 -1, i32 1, i32 1, i32 2>, ptr %12, align 8, !tbaa !7
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %169, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 31
  %5 = load i32, ptr %4, align 8, !tbaa !365
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 32
  %9 = load ptr, ptr %8, align 8, !tbaa !366
  tail call void @hypre_Free(ptr noundef %9) #33
  store ptr null, ptr %8, align 8, !tbaa !366
  %10 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 33
  %11 = load ptr, ptr %10, align 8, !tbaa !367
  tail call void @hypre_Free(ptr noundef %11) #33
  store ptr null, ptr %10, align 8, !tbaa !367
  br label %12

12:                                               ; preds = %7, %3
  %13 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 7
  %14 = load i32, ptr %13, align 8, !tbaa !368
  %15 = icmp sgt i32 %14, -1
  br i1 %15, label %16, label %165

16:                                               ; preds = %12
  %17 = icmp ugt i32 %14, 1
  br i1 %17, label %18, label %48

18:                                               ; preds = %16
  %19 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 25
  %20 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 26
  %21 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 27
  %22 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 28
  br label %23

23:                                               ; preds = %23, %18
  %24 = phi i64 [ 0, %18 ], [ %41, %23 ]
  %25 = load ptr, ptr %19, align 8, !tbaa !369
  %26 = getelementptr inbounds ptr, ptr %25, i64 %24
  %27 = load ptr, ptr %26, align 8, !tbaa !14
  %28 = tail call i32 @hypre_SMGRelaxDestroy(ptr noundef %27) #33
  %29 = load ptr, ptr %20, align 8, !tbaa !370
  %30 = getelementptr inbounds ptr, ptr %29, i64 %24
  %31 = load ptr, ptr %30, align 8, !tbaa !14
  %32 = tail call i32 @hypre_SMGResidualDestroy(ptr noundef %31) #33
  %33 = load ptr, ptr %21, align 8, !tbaa !371
  %34 = getelementptr inbounds ptr, ptr %33, i64 %24
  %35 = load ptr, ptr %34, align 8, !tbaa !14
  %36 = tail call i32 @hypre_SemiRestrictDestroy(ptr noundef %35) #33
  %37 = load ptr, ptr %22, align 8, !tbaa !372
  %38 = getelementptr inbounds ptr, ptr %37, i64 %24
  %39 = load ptr, ptr %38, align 8, !tbaa !14
  %40 = tail call i32 @hypre_SemiInterpDestroy(ptr noundef %39) #33
  %41 = add nuw nsw i64 %24, 1
  %42 = load i32, ptr %13, align 8, !tbaa !368
  %43 = add nsw i32 %42, -1
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %41, %44
  br i1 %45, label %23, label %46, !llvm.loop !373

46:                                               ; preds = %23
  %.lcssa = phi i64 [ %41, %23 ]
  %47 = trunc i64 %.lcssa to i32
  br label %48

48:                                               ; preds = %46, %16
  %49 = phi i32 [ 0, %16 ], [ %47, %46 ]
  %50 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 25
  %51 = load ptr, ptr %50, align 8, !tbaa !369
  %52 = zext i32 %49 to i64
  %53 = getelementptr inbounds ptr, ptr %51, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !14
  %55 = tail call i32 @hypre_SMGRelaxDestroy(ptr noundef %54) #33
  %56 = icmp eq i32 %49, 0
  br i1 %56, label %57, label %63

57:                                               ; preds = %48
  %58 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 26
  %59 = load ptr, ptr %58, align 8, !tbaa !370
  %60 = getelementptr inbounds ptr, ptr %59, i64 %52
  %61 = load ptr, ptr %60, align 8, !tbaa !14
  %62 = tail call i32 @hypre_SMGResidualDestroy(ptr noundef %61) #33
  br label %63

63:                                               ; preds = %57, %48
  %64 = load ptr, ptr %50, align 8, !tbaa !369
  tail call void @hypre_Free(ptr noundef %64) #33
  store ptr null, ptr %50, align 8, !tbaa !369
  %65 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 26
  %66 = load ptr, ptr %65, align 8, !tbaa !370
  tail call void @hypre_Free(ptr noundef %66) #33
  store ptr null, ptr %65, align 8, !tbaa !370
  %67 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 27
  %68 = load ptr, ptr %67, align 8, !tbaa !371
  tail call void @hypre_Free(ptr noundef %68) #33
  store ptr null, ptr %67, align 8, !tbaa !371
  %69 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 28
  %70 = load ptr, ptr %69, align 8, !tbaa !372
  tail call void @hypre_Free(ptr noundef %70) #33
  store ptr null, ptr %69, align 8, !tbaa !372
  %71 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 21
  %72 = load ptr, ptr %71, align 8, !tbaa !374
  %73 = load ptr, ptr %72, align 8, !tbaa !14
  %74 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %73) #33
  %75 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 22
  %76 = load ptr, ptr %75, align 8, !tbaa !375
  %77 = load ptr, ptr %76, align 8, !tbaa !14
  %78 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %77) #33
  %79 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 13
  %80 = load ptr, ptr %79, align 8, !tbaa !376
  %81 = load ptr, ptr %80, align 8, !tbaa !14
  %82 = tail call i32 @hypre_StructGridDestroy(ptr noundef %81) #33
  %83 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 16
  %84 = load ptr, ptr %83, align 8, !tbaa !377
  %85 = load ptr, ptr %84, align 8, !tbaa !14
  %86 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %85) #33
  %87 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 19
  %88 = load ptr, ptr %87, align 8, !tbaa !378
  %89 = load ptr, ptr %88, align 8, !tbaa !14
  %90 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %89) #33
  %91 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 20
  %92 = load ptr, ptr %91, align 8, !tbaa !379
  %93 = load ptr, ptr %92, align 8, !tbaa !14
  %94 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %93) #33
  %95 = load i32, ptr %13, align 8, !tbaa !368
  %96 = icmp sgt i32 %95, 1
  br i1 %96, label %97, label %150

97:                                               ; preds = %63
  %98 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 14
  %99 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 17
  %100 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 18
  br label %101

101:                                              ; preds = %129, %97
  %102 = phi i64 [ 0, %97 ], [ %104, %129 ]
  %103 = load ptr, ptr %79, align 8, !tbaa !376
  %104 = add nuw nsw i64 %102, 1
  %105 = getelementptr inbounds ptr, ptr %103, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !14
  %107 = tail call i32 @hypre_StructGridDestroy(ptr noundef %106) #33
  %108 = load ptr, ptr %98, align 8, !tbaa !380
  %109 = getelementptr inbounds ptr, ptr %108, i64 %104
  %110 = load ptr, ptr %109, align 8, !tbaa !14
  %111 = tail call i32 @hypre_StructGridDestroy(ptr noundef %110) #33
  %112 = load ptr, ptr %83, align 8, !tbaa !377
  %113 = getelementptr inbounds ptr, ptr %112, i64 %104
  %114 = load ptr, ptr %113, align 8, !tbaa !14
  %115 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %114) #33
  %116 = load ptr, ptr %99, align 8, !tbaa !381
  %117 = getelementptr inbounds ptr, ptr %116, i64 %102
  %118 = load ptr, ptr %117, align 8, !tbaa !14
  %119 = load ptr, ptr %100, align 8, !tbaa !382
  %120 = getelementptr inbounds ptr, ptr %119, i64 %102
  %121 = load ptr, ptr %120, align 8, !tbaa !14
  %122 = icmp eq ptr %118, %121
  %123 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %118) #33
  br i1 %122, label %129, label %124

124:                                              ; preds = %101
  %125 = load ptr, ptr %100, align 8, !tbaa !382
  %126 = getelementptr inbounds ptr, ptr %125, i64 %102
  %127 = load ptr, ptr %126, align 8, !tbaa !14
  %128 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %127) #33
  br label %129

129:                                              ; preds = %124, %101
  %130 = load ptr, ptr %87, align 8, !tbaa !378
  %131 = getelementptr inbounds ptr, ptr %130, i64 %104
  %132 = load ptr, ptr %131, align 8, !tbaa !14
  %133 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %132) #33
  %134 = load ptr, ptr %91, align 8, !tbaa !379
  %135 = getelementptr inbounds ptr, ptr %134, i64 %104
  %136 = load ptr, ptr %135, align 8, !tbaa !14
  %137 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %136) #33
  %138 = load ptr, ptr %71, align 8, !tbaa !374
  %139 = getelementptr inbounds ptr, ptr %138, i64 %104
  %140 = load ptr, ptr %139, align 8, !tbaa !14
  %141 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %140) #33
  %142 = load ptr, ptr %75, align 8, !tbaa !375
  %143 = getelementptr inbounds ptr, ptr %142, i64 %104
  %144 = load ptr, ptr %143, align 8, !tbaa !14
  %145 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %144) #33
  %146 = load i32, ptr %13, align 8, !tbaa !368
  %147 = add nsw i32 %146, -1
  %148 = sext i32 %147 to i64
  %149 = icmp slt i64 %104, %148
  br i1 %149, label %101, label %150, !llvm.loop !383

150:                                              ; preds = %129, %63
  %151 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 15
  %152 = load ptr, ptr %151, align 8, !tbaa !384
  tail call void @hypre_Free(ptr noundef %152) #33
  store ptr null, ptr %151, align 8, !tbaa !384
  %153 = load ptr, ptr %79, align 8, !tbaa !376
  tail call void @hypre_Free(ptr noundef %153) #33
  store ptr null, ptr %79, align 8, !tbaa !376
  %154 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 14
  %155 = load ptr, ptr %154, align 8, !tbaa !380
  tail call void @hypre_Free(ptr noundef %155) #33
  store ptr null, ptr %154, align 8, !tbaa !380
  %156 = load ptr, ptr %83, align 8, !tbaa !377
  tail call void @hypre_Free(ptr noundef %156) #33
  store ptr null, ptr %83, align 8, !tbaa !377
  %157 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 17
  %158 = load ptr, ptr %157, align 8, !tbaa !381
  tail call void @hypre_Free(ptr noundef %158) #33
  store ptr null, ptr %157, align 8, !tbaa !381
  %159 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 18
  %160 = load ptr, ptr %159, align 8, !tbaa !382
  tail call void @hypre_Free(ptr noundef %160) #33
  store ptr null, ptr %159, align 8, !tbaa !382
  %161 = load ptr, ptr %87, align 8, !tbaa !378
  tail call void @hypre_Free(ptr noundef %161) #33
  store ptr null, ptr %87, align 8, !tbaa !378
  %162 = load ptr, ptr %91, align 8, !tbaa !379
  tail call void @hypre_Free(ptr noundef %162) #33
  store ptr null, ptr %91, align 8, !tbaa !379
  %163 = load ptr, ptr %71, align 8, !tbaa !374
  tail call void @hypre_Free(ptr noundef %163) #33
  store ptr null, ptr %71, align 8, !tbaa !374
  %164 = load ptr, ptr %75, align 8, !tbaa !375
  tail call void @hypre_Free(ptr noundef %164) #33
  store ptr null, ptr %75, align 8, !tbaa !375
  br label %165

165:                                              ; preds = %150, %12
  %166 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 30
  %167 = load i32, ptr %166, align 4, !tbaa !362
  %168 = tail call i32 @hypre_FinalizeTiming(i32 noundef %167) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %169

169:                                              ; preds = %165, %1
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetMemoryUse(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 1
  store i32 %1, ptr %3, align 4, !tbaa !363
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetTol(ptr nocapture noundef writeonly %0, double noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 2
  store double %1, ptr %3, align 8, !tbaa !364
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetMaxIter(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 3
  store i32 %1, ptr %3, align 8, !tbaa !385
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetRelChange(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 4
  store i32 %1, ptr %3, align 4, !tbaa !386
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetZeroGuess(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 5
  store i32 %1, ptr %3, align 8, !tbaa !387
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetNumPreRelax(ptr nocapture noundef writeonly %0, i32 noundef %1) #25 {
  %3 = tail call i32 @llvm.smax.i32(i32 %1, i32 1)
  %4 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 8
  store i32 %3, ptr %4, align 4, !tbaa !388
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetNumPostRelax(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 9
  store i32 %1, ptr %3, align 8, !tbaa !389
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_SMGSetBase(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #8 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %12, %4 ]
  %6 = getelementptr inbounds i32, ptr %1, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 11, i64 %5
  store i32 %7, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds i32, ptr %2, i64 %5
  %10 = load i32, ptr %9, align 4, !tbaa !7
  %11 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 12, i64 %5
  store i32 %10, ptr %11, align 4, !tbaa !7
  %12 = add nuw nsw i64 %5, 1
  %13 = icmp eq i64 %12, 3
  br i1 %13, label %14, label %4, !llvm.loop !390

14:                                               ; preds = %4
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGSetLogging(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 31
  store i32 %1, ptr %3, align 8, !tbaa !365
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_SMGGetNumIterations(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #7 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 29
  %4 = load i32, ptr %3, align 8, !tbaa !391
  store i32 %4, ptr %1, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_SMGGetFinalRelativeResidualNorm(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1) #23 {
  %3 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 31
  %4 = load i32, ptr %3, align 8, !tbaa !365
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %19

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 33
  %8 = load ptr, ptr %7, align 8, !tbaa !367
  %9 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 29
  %10 = load i32, ptr %9, align 8, !tbaa !391
  %11 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !385
  %13 = icmp eq i32 %10, %12
  %14 = sext i1 %13 to i32
  %15 = add nsw i32 %10, %14
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds double, ptr %8, i64 %16
  %18 = load double, ptr %17, align 8, !tbaa !29
  store double %18, ptr %1, align 8, !tbaa !29
  br label %19

19:                                               ; preds = %6, %2
  %20 = phi i32 [ 0, %6 ], [ -1, %2 ]
  ret i32 %20
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGSetStructVectorConstantValues(ptr nocapture noundef readonly %0, double noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  %6 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %2, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !21
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %114

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %12 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %13 = getelementptr inbounds i32, ptr %3, i64 1
  %14 = getelementptr inbounds i32, ptr %3, i64 2
  %15 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %16 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  br label %17

17:                                               ; preds = %109, %9
  %18 = phi i64 [ 0, %9 ], [ %110, %109 ]
  %19 = load ptr, ptr %2, align 8, !tbaa !23
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %19, i64 %18
  %21 = load ptr, ptr %10, align 8, !tbaa !25
  %22 = load ptr, ptr %21, align 8, !tbaa !23
  %23 = load ptr, ptr %11, align 8, !tbaa !27
  %24 = load ptr, ptr %12, align 8, !tbaa !28
  %25 = getelementptr inbounds i32, ptr %24, i64 %18
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, ptr %23, i64 %27
  %29 = call i32 @hypre_BoxGetStrideSize(ptr noundef %20, ptr noundef %3, ptr noundef nonnull %5) #33
  %30 = load i32, ptr %3, align 4, !tbaa !7
  %31 = load i32, ptr %5, align 4, !tbaa !7
  %32 = load i32, ptr %15, align 4, !tbaa !7
  %33 = load i32, ptr %16, align 4, !tbaa !7
  %34 = call i32 @llvm.smax.i32(i32 %32, i32 %31)
  %35 = call i32 @llvm.smax.i32(i32 %33, i32 %34)
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %109

37:                                               ; preds = %17
  %38 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18, i32 1
  %39 = load i32, ptr %38, align 4, !tbaa !7
  %40 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18
  %41 = load i32, ptr %40, align 4, !tbaa !7
  %42 = sub nsw i32 %39, %41
  %43 = icmp slt i32 %42, 0
  %44 = add nsw i32 %42, 1
  %45 = select i1 %43, i32 0, i32 %44
  %46 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18, i32 1, i64 1
  %47 = load i32, ptr %46, align 4, !tbaa !7
  %48 = getelementptr inbounds [3 x i32], ptr %40, i64 0, i64 1
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = sub nsw i32 %47, %49
  %51 = icmp slt i32 %50, 0
  %52 = add nsw i32 %50, 1
  %53 = select i1 %51, i32 0, i32 %52
  %54 = mul i32 %45, %53
  %55 = load i32, ptr %14, align 4, !tbaa !7
  %56 = mul i32 %54, %55
  %57 = load i32, ptr %13, align 4, !tbaa !7
  %58 = mul nsw i32 %45, %57
  %59 = icmp sgt i32 %33, 0
  %60 = icmp sgt i32 %32, 0
  %61 = icmp sgt i32 %31, 0
  %62 = mul nsw i32 %31, %30
  %63 = sub i32 %58, %62
  %64 = mul nsw i32 %32, %58
  %65 = sub i32 %56, %64
  br i1 %59, label %66, label %109

66:                                               ; preds = %37
  %67 = load i32, ptr %20, align 4, !tbaa !7
  %68 = sub i32 %67, %41
  %69 = getelementptr inbounds i32, ptr %20, i64 1
  %70 = load i32, ptr %69, align 4, !tbaa !7
  %71 = sub i32 %70, %49
  %72 = getelementptr inbounds i32, ptr %20, i64 2
  %73 = load i32, ptr %72, align 4, !tbaa !7
  %74 = getelementptr inbounds [3 x i32], ptr %40, i64 0, i64 2
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = sub nsw i32 %73, %75
  %77 = mul nsw i32 %53, %76
  %78 = add nsw i32 %71, %77
  %79 = mul nsw i32 %78, %45
  %80 = add nsw i32 %68, %79
  %81 = sext i32 %30 to i64
  br label %82

82:                                               ; preds = %104, %66
  %83 = phi i32 [ %106, %104 ], [ %80, %66 ]
  %84 = phi i32 [ %107, %104 ], [ 0, %66 ]
  br i1 %60, label %85, label %104

85:                                               ; preds = %99, %82
  %86 = phi i32 [ %101, %99 ], [ %83, %82 ]
  %87 = phi i32 [ %102, %99 ], [ 0, %82 ]
  br i1 %61, label %88, label %99

88:                                               ; preds = %85
  %89 = sext i32 %86 to i64
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ %89, %88 ], [ %94, %90 ]
  %92 = phi i32 [ 0, %88 ], [ %95, %90 ]
  %93 = getelementptr inbounds double, ptr %28, i64 %91
  store double %1, ptr %93, align 8, !tbaa !29
  %94 = add i64 %91, %81
  %95 = add nuw nsw i32 %92, 1
  %96 = icmp eq i32 %95, %31
  br i1 %96, label %97, label %90, !llvm.loop !392

97:                                               ; preds = %90
  %.lcssa = phi i64 [ %94, %90 ]
  %98 = trunc i64 %.lcssa to i32
  br label %99

99:                                               ; preds = %97, %85
  %100 = phi i32 [ %86, %85 ], [ %98, %97 ]
  %101 = add nsw i32 %63, %100
  %102 = add nuw nsw i32 %87, 1
  %103 = icmp eq i32 %102, %32
  br i1 %103, label %104, label %85, !llvm.loop !393

104:                                              ; preds = %99, %82
  %105 = phi i32 [ %83, %82 ], [ %101, %99 ]
  %106 = add nsw i32 %65, %105
  %107 = add nuw nsw i32 %84, 1
  %108 = icmp eq i32 %107, %33
  br i1 %108, label %109, label %82, !llvm.loop !394

109:                                              ; preds = %104, %37, %17
  %110 = add nuw nsw i64 %18, 1
  %111 = load i32, ptr %6, align 8, !tbaa !21
  %112 = sext i32 %111 to i64
  %113 = icmp slt i64 %110, %112
  br i1 %113, label %17, label %114, !llvm.loop !395

114:                                              ; preds = %109, %4
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 noundef %0, ptr noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca [6 x i32], align 16
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [3 x i32], align 4
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  store i32 %0, ptr %3, align 4, !tbaa !7
  store ptr %1, ptr %4, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #34
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %15) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #34
  %18 = call i32 @hypre_MPI_Init(ptr noundef nonnull %3, ptr noundef nonnull %4) #33
  %19 = call i32 @hypre_MPI_Comm_size(i32 noundef 0, ptr noundef nonnull %13) #33
  %20 = call i32 @hypre_MPI_Comm_rank(i32 noundef 0, ptr noundef nonnull %14) #33
  %21 = load i32, ptr %13, align 4, !tbaa !7
  store i32 -17, ptr %15, align 4, !tbaa !7
  %22 = getelementptr inbounds [3 x i32], ptr %15, i64 0, i64 1
  store i32 0, ptr %22, align 4, !tbaa !7
  %23 = getelementptr inbounds [3 x i32], ptr %15, i64 0, i64 2
  store i32 32, ptr %23, align 4, !tbaa !7
  %24 = load i32, ptr %3, align 4, !tbaa !7
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %208

26:                                               ; preds = %2
  %27 = load ptr, ptr %4, align 8, !tbaa !14
  br label %28

28:                                               ; preds = %163, %26
  %29 = phi i32 [ 1, %26 ], [ %180, %163 ]
  %30 = phi i32 [ 1, %26 ], [ %179, %163 ]
  %31 = phi i32 [ 3, %26 ], [ %178, %163 ]
  %32 = phi i32 [ 0, %26 ], [ %177, %163 ]
  %33 = phi double [ 1.000000e+00, %26 ], [ %176, %163 ]
  %34 = phi double [ 1.000000e+00, %26 ], [ %175, %163 ]
  %35 = phi double [ 1.000000e+00, %26 ], [ %174, %163 ]
  %36 = phi i32 [ 1, %26 ], [ %173, %163 ]
  %37 = phi i32 [ 1, %26 ], [ %172, %163 ]
  %38 = phi i32 [ 1, %26 ], [ %171, %163 ]
  %39 = phi i32 [ 1, %26 ], [ %170, %163 ]
  %40 = phi i32 [ 1, %26 ], [ %169, %163 ]
  %41 = phi i32 [ %21, %26 ], [ %168, %163 ]
  %42 = phi i32 [ 10, %26 ], [ %167, %163 ]
  %43 = phi i32 [ 10, %26 ], [ %166, %163 ]
  %44 = phi i32 [ 10, %26 ], [ %165, %163 ]
  %45 = phi i32 [ 1, %26 ], [ %164, %163 ]
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds ptr, ptr %27, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !14
  %49 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(3) @.str.123) #39
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %68

51:                                               ; preds = %28
  %52 = add nsw i32 %45, 1
  %53 = add nsw i32 %45, 2
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds ptr, ptr %27, i64 %54
  %56 = load ptr, ptr %55, align 8, !tbaa !14
  %57 = call i32 @atoi(ptr nocapture noundef %56) #39
  %58 = add nsw i32 %45, 3
  %59 = sext i32 %53 to i64
  %60 = getelementptr inbounds ptr, ptr %27, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !14
  %62 = call i32 @atoi(ptr nocapture noundef %61) #39
  %63 = add nsw i32 %45, 4
  %64 = sext i32 %58 to i64
  %65 = getelementptr inbounds ptr, ptr %27, i64 %64
  %66 = load ptr, ptr %65, align 8, !tbaa !14
  %67 = call i32 @atoi(ptr nocapture noundef %66) #39
  br label %163

68:                                               ; preds = %28
  %69 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(3) @.str.1) #39
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %88

71:                                               ; preds = %68
  %72 = add nsw i32 %45, 1
  %73 = add nsw i32 %45, 2
  %74 = sext i32 %72 to i64
  %75 = getelementptr inbounds ptr, ptr %27, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !14
  %77 = call i32 @atoi(ptr nocapture noundef %76) #39
  %78 = add nsw i32 %45, 3
  %79 = sext i32 %73 to i64
  %80 = getelementptr inbounds ptr, ptr %27, i64 %79
  %81 = load ptr, ptr %80, align 8, !tbaa !14
  %82 = call i32 @atoi(ptr nocapture noundef %81) #39
  %83 = add nsw i32 %45, 4
  %84 = sext i32 %78 to i64
  %85 = getelementptr inbounds ptr, ptr %27, i64 %84
  %86 = load ptr, ptr %85, align 8, !tbaa !14
  %87 = call i32 @atoi(ptr nocapture noundef %86) #39
  br label %163

88:                                               ; preds = %68
  %89 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(3) @.str.2) #39
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %108

91:                                               ; preds = %88
  %92 = add nsw i32 %45, 1
  %93 = add nsw i32 %45, 2
  %94 = sext i32 %92 to i64
  %95 = getelementptr inbounds ptr, ptr %27, i64 %94
  %96 = load ptr, ptr %95, align 8, !tbaa !14
  %97 = call i32 @atoi(ptr nocapture noundef %96) #39
  %98 = add nsw i32 %45, 3
  %99 = sext i32 %93 to i64
  %100 = getelementptr inbounds ptr, ptr %27, i64 %99
  %101 = load ptr, ptr %100, align 8, !tbaa !14
  %102 = call i32 @atoi(ptr nocapture noundef %101) #39
  %103 = add nsw i32 %45, 4
  %104 = sext i32 %98 to i64
  %105 = getelementptr inbounds ptr, ptr %27, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !14
  %107 = call i32 @atoi(ptr nocapture noundef %106) #39
  br label %163

108:                                              ; preds = %88
  %109 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(3) @.str.3) #39
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %128

111:                                              ; preds = %108
  %112 = add nsw i32 %45, 1
  %113 = add nsw i32 %45, 2
  %114 = sext i32 %112 to i64
  %115 = getelementptr inbounds ptr, ptr %27, i64 %114
  %116 = load ptr, ptr %115, align 8, !tbaa !14
  %117 = call double @atof(ptr noundef %116) #39
  %118 = add nsw i32 %45, 3
  %119 = sext i32 %113 to i64
  %120 = getelementptr inbounds ptr, ptr %27, i64 %119
  %121 = load ptr, ptr %120, align 8, !tbaa !14
  %122 = call double @atof(ptr noundef %121) #39
  %123 = add nsw i32 %45, 4
  %124 = sext i32 %118 to i64
  %125 = getelementptr inbounds ptr, ptr %27, i64 %124
  %126 = load ptr, ptr %125, align 8, !tbaa !14
  %127 = call double @atof(ptr noundef %126) #39
  br label %163

128:                                              ; preds = %108
  %129 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(3) @.str.4) #39
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %128
  %132 = add nsw i32 %45, 1
  %133 = add nsw i32 %45, 2
  %134 = sext i32 %132 to i64
  %135 = getelementptr inbounds ptr, ptr %27, i64 %134
  %136 = load ptr, ptr %135, align 8, !tbaa !14
  %137 = call i32 @atoi(ptr nocapture noundef %136) #39
  %138 = add nsw i32 %45, 3
  %139 = sext i32 %133 to i64
  %140 = getelementptr inbounds ptr, ptr %27, i64 %139
  %141 = load ptr, ptr %140, align 8, !tbaa !14
  %142 = call i32 @atoi(ptr nocapture noundef %141) #39
  br label %163

143:                                              ; preds = %128
  %144 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(3) @.str.5) #39
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %153

146:                                              ; preds = %143
  %147 = add nsw i32 %45, 1
  %148 = add nsw i32 %45, 2
  %149 = sext i32 %147 to i64
  %150 = getelementptr inbounds ptr, ptr %27, i64 %149
  %151 = load ptr, ptr %150, align 8, !tbaa !14
  %152 = call i32 @atoi(ptr nocapture noundef %151) #39
  br label %163

153:                                              ; preds = %143
  %154 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %48, ptr noundef nonnull dereferenceable(8) @.str.6) #39
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %182

156:                                              ; preds = %153
  %157 = add nsw i32 %45, 1
  %158 = add nsw i32 %45, 2
  %159 = sext i32 %157 to i64
  %160 = getelementptr inbounds ptr, ptr %27, i64 %159
  %161 = load ptr, ptr %160, align 8, !tbaa !14
  %162 = call i32 @atoi(ptr nocapture noundef %161) #39
  br label %163

163:                                              ; preds = %156, %146, %131, %111, %91, %71, %51
  %164 = phi i32 [ %63, %51 ], [ %83, %71 ], [ %103, %91 ], [ %123, %111 ], [ %138, %131 ], [ %148, %146 ], [ %158, %156 ]
  %165 = phi i32 [ %57, %51 ], [ %44, %71 ], [ %44, %91 ], [ %44, %111 ], [ %44, %131 ], [ %44, %146 ], [ %44, %156 ]
  %166 = phi i32 [ %62, %51 ], [ %43, %71 ], [ %43, %91 ], [ %43, %111 ], [ %43, %131 ], [ %43, %146 ], [ %43, %156 ]
  %167 = phi i32 [ %67, %51 ], [ %42, %71 ], [ %42, %91 ], [ %42, %111 ], [ %42, %131 ], [ %42, %146 ], [ %42, %156 ]
  %168 = phi i32 [ %41, %51 ], [ %77, %71 ], [ %41, %91 ], [ %41, %111 ], [ %41, %131 ], [ %41, %146 ], [ %41, %156 ]
  %169 = phi i32 [ %40, %51 ], [ %82, %71 ], [ %40, %91 ], [ %40, %111 ], [ %40, %131 ], [ %40, %146 ], [ %40, %156 ]
  %170 = phi i32 [ %39, %51 ], [ %87, %71 ], [ %39, %91 ], [ %39, %111 ], [ %39, %131 ], [ %39, %146 ], [ %39, %156 ]
  %171 = phi i32 [ %38, %51 ], [ %38, %71 ], [ %97, %91 ], [ %38, %111 ], [ %38, %131 ], [ %38, %146 ], [ %38, %156 ]
  %172 = phi i32 [ %37, %51 ], [ %37, %71 ], [ %102, %91 ], [ %37, %111 ], [ %37, %131 ], [ %37, %146 ], [ %37, %156 ]
  %173 = phi i32 [ %36, %51 ], [ %36, %71 ], [ %107, %91 ], [ %36, %111 ], [ %36, %131 ], [ %36, %146 ], [ %36, %156 ]
  %174 = phi double [ %35, %51 ], [ %35, %71 ], [ %35, %91 ], [ %117, %111 ], [ %35, %131 ], [ %35, %146 ], [ %35, %156 ]
  %175 = phi double [ %34, %51 ], [ %34, %71 ], [ %34, %91 ], [ %122, %111 ], [ %34, %131 ], [ %34, %146 ], [ %34, %156 ]
  %176 = phi double [ %33, %51 ], [ %33, %71 ], [ %33, %91 ], [ %127, %111 ], [ %33, %131 ], [ %33, %146 ], [ %33, %156 ]
  %177 = phi i32 [ %32, %51 ], [ %32, %71 ], [ %32, %91 ], [ %32, %111 ], [ %32, %131 ], [ %32, %146 ], [ %162, %156 ]
  %178 = phi i32 [ %31, %51 ], [ %31, %71 ], [ %31, %91 ], [ %31, %111 ], [ %31, %131 ], [ %152, %146 ], [ %31, %156 ]
  %179 = phi i32 [ %30, %51 ], [ %30, %71 ], [ %30, %91 ], [ %30, %111 ], [ %137, %131 ], [ %30, %146 ], [ %30, %156 ]
  %180 = phi i32 [ %29, %51 ], [ %29, %71 ], [ %29, %91 ], [ %29, %111 ], [ %142, %131 ], [ %29, %146 ], [ %29, %156 ]
  %181 = icmp slt i32 %164, %24
  br i1 %181, label %28, label %208, !llvm.loop !396

182:                                              ; preds = %153
  %.lcssa18 = phi i32 [ %29, %153 ]
  %.lcssa17 = phi i32 [ %30, %153 ]
  %.lcssa16 = phi i32 [ %31, %153 ]
  %.lcssa15 = phi i32 [ %32, %153 ]
  %.lcssa14 = phi double [ %33, %153 ]
  %.lcssa13 = phi double [ %34, %153 ]
  %.lcssa12 = phi double [ %35, %153 ]
  %.lcssa11 = phi i32 [ %36, %153 ]
  %.lcssa10 = phi i32 [ %37, %153 ]
  %.lcssa9 = phi i32 [ %38, %153 ]
  %.lcssa8 = phi i32 [ %39, %153 ]
  %.lcssa7 = phi i32 [ %40, %153 ]
  %.lcssa6 = phi i32 [ %41, %153 ]
  %.lcssa5 = phi i32 [ %42, %153 ]
  %.lcssa4 = phi i32 [ %43, %153 ]
  %.lcssa3 = phi i32 [ %44, %153 ]
  %.lcssa2 = phi ptr [ %48, %153 ]
  %183 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %.lcssa2, ptr noundef nonnull dereferenceable(6) @.str.7) #39
  %184 = icmp eq i32 %183, 0
  %185 = load i32, ptr %14, align 4
  %186 = icmp eq i32 %185, 0
  %187 = select i1 %184, i1 %186, i1 false
  br i1 %187, label %188, label %206

188:                                              ; preds = %182
  %189 = call i32 @putchar(i32 10)
  %190 = load ptr, ptr %4, align 8, !tbaa !14
  %191 = load ptr, ptr %190, align 8, !tbaa !14
  %192 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9, ptr noundef %191) #35
  %193 = call i32 @putchar(i32 10)
  %194 = call i32 @puts(ptr nonnull dereferenceable(1) @str.40)
  %195 = call i32 @puts(ptr nonnull dereferenceable(1) @str.41)
  %196 = call i32 @puts(ptr nonnull dereferenceable(1) @str.42)
  %197 = call i32 @puts(ptr nonnull dereferenceable(1) @str.43)
  %198 = call i32 @puts(ptr nonnull dereferenceable(1) @str.44)
  %199 = call i32 @puts(ptr nonnull dereferenceable(1) @str.45)
  %200 = call i32 @puts(ptr nonnull dereferenceable(1) @str.46)
  %201 = call i32 @puts(ptr nonnull dereferenceable(1) @str.47)
  %202 = call i32 @puts(ptr nonnull dereferenceable(1) @str.48)
  %203 = call i32 @puts(ptr nonnull dereferenceable(1) @str.49)
  %204 = call i32 @puts(ptr nonnull dereferenceable(1) @str.50)
  %205 = call i32 @putchar(i32 10)
  br label %207

206:                                              ; preds = %182
  br i1 %184, label %207, label %208

207:                                              ; preds = %206, %188
  call void @exit(i32 noundef 1) #40
  unreachable

208:                                              ; preds = %206, %163, %2
  %209 = phi i32 [ %.lcssa3, %206 ], [ 10, %2 ], [ %165, %163 ]
  %210 = phi i32 [ %.lcssa4, %206 ], [ 10, %2 ], [ %166, %163 ]
  %211 = phi i32 [ %.lcssa5, %206 ], [ 10, %2 ], [ %167, %163 ]
  %212 = phi i32 [ %.lcssa6, %206 ], [ %21, %2 ], [ %168, %163 ]
  %213 = phi i32 [ %.lcssa7, %206 ], [ 1, %2 ], [ %169, %163 ]
  %214 = phi i32 [ %.lcssa8, %206 ], [ 1, %2 ], [ %170, %163 ]
  %215 = phi i32 [ %.lcssa9, %206 ], [ 1, %2 ], [ %171, %163 ]
  %216 = phi i32 [ %.lcssa10, %206 ], [ 1, %2 ], [ %172, %163 ]
  %217 = phi i32 [ %.lcssa11, %206 ], [ 1, %2 ], [ %173, %163 ]
  %218 = phi double [ %.lcssa12, %206 ], [ 1.000000e+00, %2 ], [ %174, %163 ]
  %219 = phi double [ %.lcssa13, %206 ], [ 1.000000e+00, %2 ], [ %175, %163 ]
  %220 = phi double [ %.lcssa14, %206 ], [ 1.000000e+00, %2 ], [ %176, %163 ]
  %221 = phi i32 [ %.lcssa15, %206 ], [ 0, %2 ], [ %177, %163 ]
  %222 = phi i32 [ %.lcssa16, %206 ], [ 3, %2 ], [ %178, %163 ]
  %223 = phi i32 [ %.lcssa17, %206 ], [ 1, %2 ], [ %179, %163 ]
  %224 = phi i32 [ %.lcssa18, %206 ], [ 1, %2 ], [ %180, %163 ]
  %225 = mul nsw i32 %213, %212
  %226 = mul nsw i32 %225, %214
  %227 = icmp eq i32 %226, %21
  br i1 %227, label %230, label %228

228:                                              ; preds = %208
  %229 = call i32 @puts(ptr nonnull dereferenceable(1) @str.39)
  call void @exit(i32 noundef 1) #40
  unreachable

230:                                              ; preds = %208
  %231 = load i32, ptr %14, align 4, !tbaa !7
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %242

233:                                              ; preds = %230
  %234 = call i32 @puts(ptr nonnull dereferenceable(1) @str)
  %235 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.23, i32 noundef %209, i32 noundef %210, i32 noundef %211) #35
  %236 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.24, i32 noundef %212, i32 noundef %213, i32 noundef %214) #35
  %237 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.25, i32 noundef %215, i32 noundef %216, i32 noundef %217) #35
  %238 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.26, double noundef %218, double noundef %219, double noundef %220) #35
  %239 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.27, i32 noundef %223, i32 noundef %224) #35
  %240 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.28, i32 noundef %222) #35
  %241 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.29, i32 noundef %221) #35
  br label %242

242:                                              ; preds = %233, %230
  %243 = call i32 @hypre_MPI_Barrier(i32 noundef 0) #33
  %244 = call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.30) #33
  %245 = call i32 @hypre_BeginTiming(i32 noundef %244) #33
  switch i32 %222, label %301 [
    i32 1, label %246
    i32 2, label %254
    i32 3, label %271
  ]

246:                                              ; preds = %242
  %247 = call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 4) #33
  %248 = call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 8) #33
  %249 = call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 4) #33
  store ptr %249, ptr %248, align 8, !tbaa !14
  store i32 -1, ptr %249, align 4, !tbaa !7
  %250 = call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 4) #33
  %251 = getelementptr inbounds ptr, ptr %248, i64 1
  store ptr %250, ptr %251, align 8, !tbaa !14
  store i32 0, ptr %250, align 4, !tbaa !7
  %252 = load i32, ptr %14, align 4, !tbaa !7
  %253 = srem i32 %252, %212
  br label %301

254:                                              ; preds = %242
  %255 = mul nsw i32 %210, %209
  %256 = mul nsw i32 %216, %215
  %257 = call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 4) #33
  %258 = call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 8) #33
  %259 = call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 4) #33
  store ptr %259, ptr %258, align 8, !tbaa !14
  store i32 -1, ptr %259, align 4, !tbaa !7
  %260 = getelementptr inbounds i32, ptr %259, i64 1
  store i32 0, ptr %260, align 4, !tbaa !7
  %261 = call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 4) #33
  %262 = getelementptr inbounds ptr, ptr %258, i64 1
  store ptr %261, ptr %262, align 8, !tbaa !14
  store i32 0, ptr %261, align 4, !tbaa !7
  %263 = getelementptr inbounds i32, ptr %261, i64 1
  store i32 -1, ptr %263, align 4, !tbaa !7
  %264 = call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 4) #33
  %265 = getelementptr inbounds ptr, ptr %258, i64 2
  store ptr %264, ptr %265, align 8, !tbaa !14
  store i32 0, ptr %264, align 4, !tbaa !7
  %266 = getelementptr inbounds i32, ptr %264, i64 1
  store i32 0, ptr %266, align 4, !tbaa !7
  %267 = load i32, ptr %14, align 4, !tbaa !7
  %268 = srem i32 %267, %212
  %269 = sdiv i32 %267, %212
  %270 = srem i32 %269, %213
  br label %301

271:                                              ; preds = %242
  %272 = mul nsw i32 %210, %209
  %273 = mul nsw i32 %272, %211
  %274 = mul nsw i32 %216, %215
  %275 = mul nsw i32 %274, %217
  %276 = call ptr @hypre_CAlloc(i32 noundef 4, i32 noundef 4) #33
  %277 = call ptr @hypre_CAlloc(i32 noundef 4, i32 noundef 8) #33
  %278 = call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 4) #33
  store ptr %278, ptr %277, align 8, !tbaa !14
  store i32 -1, ptr %278, align 4, !tbaa !7
  %279 = getelementptr inbounds i32, ptr %278, i64 1
  store i32 0, ptr %279, align 4, !tbaa !7
  %280 = getelementptr inbounds i32, ptr %278, i64 2
  store i32 0, ptr %280, align 4, !tbaa !7
  %281 = call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 4) #33
  %282 = getelementptr inbounds ptr, ptr %277, i64 1
  store ptr %281, ptr %282, align 8, !tbaa !14
  store i32 0, ptr %281, align 4, !tbaa !7
  %283 = getelementptr inbounds i32, ptr %281, i64 1
  store i32 -1, ptr %283, align 4, !tbaa !7
  %284 = getelementptr inbounds i32, ptr %281, i64 2
  store i32 0, ptr %284, align 4, !tbaa !7
  %285 = call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 4) #33
  %286 = getelementptr inbounds ptr, ptr %277, i64 2
  store ptr %285, ptr %286, align 8, !tbaa !14
  store i32 0, ptr %285, align 4, !tbaa !7
  %287 = getelementptr inbounds i32, ptr %285, i64 1
  store i32 0, ptr %287, align 4, !tbaa !7
  %288 = getelementptr inbounds i32, ptr %285, i64 2
  store i32 -1, ptr %288, align 4, !tbaa !7
  %289 = call ptr @hypre_CAlloc(i32 noundef 3, i32 noundef 4) #33
  %290 = getelementptr inbounds ptr, ptr %277, i64 3
  store ptr %289, ptr %290, align 8, !tbaa !14
  store i32 0, ptr %289, align 4, !tbaa !7
  %291 = getelementptr inbounds i32, ptr %289, i64 1
  store i32 0, ptr %291, align 4, !tbaa !7
  %292 = getelementptr inbounds i32, ptr %289, i64 2
  store i32 0, ptr %292, align 4, !tbaa !7
  %293 = load i32, ptr %14, align 4, !tbaa !7
  %294 = srem i32 %293, %212
  %295 = sdiv i32 %293, %212
  %296 = srem i32 %295, %213
  %297 = mul nsw i32 %296, %212
  %298 = add i32 %294, %297
  %299 = sub i32 %293, %298
  %300 = sdiv i32 %299, %225
  br label %301

301:                                              ; preds = %271, %254, %246, %242
  %302 = phi i32 [ undef, %242 ], [ %294, %271 ], [ %268, %254 ], [ %253, %246 ]
  %303 = phi i32 [ undef, %242 ], [ %296, %271 ], [ %270, %254 ], [ undef, %246 ]
  %304 = phi i32 [ undef, %242 ], [ %300, %271 ], [ undef, %254 ], [ undef, %246 ]
  %305 = phi i32 [ undef, %242 ], [ %275, %271 ], [ %256, %254 ], [ %215, %246 ]
  %306 = phi i32 [ undef, %242 ], [ %273, %271 ], [ %255, %254 ], [ %209, %246 ]
  %307 = phi ptr [ undef, %242 ], [ %277, %271 ], [ %258, %254 ], [ %248, %246 ]
  %308 = phi ptr [ undef, %242 ], [ %276, %271 ], [ %257, %254 ], [ %247, %246 ]
  %309 = call ptr @hypre_CAlloc(i32 noundef %305, i32 noundef 8) #33
  %310 = call ptr @hypre_CAlloc(i32 noundef %305, i32 noundef 8) #33
  %311 = icmp sgt i32 %305, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %301
  %313 = zext i32 %305 to i64
  br label %318

314:                                              ; preds = %318, %301
  %315 = icmp sgt i32 %222, 0
  br i1 %315, label %316, label %334

316:                                              ; preds = %314
  %317 = zext i32 %222 to i64
  br label %326

318:                                              ; preds = %318, %312
  %319 = phi i64 [ 0, %312 ], [ %324, %318 ]
  %320 = call ptr @hypre_CAlloc(i32 noundef %222, i32 noundef 4) #33
  %321 = getelementptr inbounds ptr, ptr %309, i64 %319
  store ptr %320, ptr %321, align 8, !tbaa !14
  %322 = call ptr @hypre_CAlloc(i32 noundef %222, i32 noundef 4) #33
  %323 = getelementptr inbounds ptr, ptr %310, i64 %319
  store ptr %322, ptr %323, align 8, !tbaa !14
  %324 = add nuw nsw i64 %319, 1
  %325 = icmp eq i64 %324, %313
  br i1 %325, label %314, label %318, !llvm.loop !397

326:                                              ; preds = %326, %316
  %327 = phi i64 [ 0, %316 ], [ %332, %326 ]
  %328 = shl nuw nsw i64 %327, 1
  %329 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 %328
  store i32 1, ptr %329, align 8, !tbaa !7
  %330 = or i64 %328, 1
  %331 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 %330
  store i32 1, ptr %331, align 4, !tbaa !7
  %332 = add nuw nsw i64 %327, 1
  %333 = icmp eq i64 %332, %317
  br i1 %333, label %334, label %326, !llvm.loop !398

334:                                              ; preds = %326, %314
  switch i32 %222, label %453 [
    i32 1, label %349
    i32 2, label %343
    i32 3, label %335
  ]

335:                                              ; preds = %334
  %336 = icmp sgt i32 %217, 0
  br i1 %336, label %337, label %453

337:                                              ; preds = %335
  %338 = icmp sgt i32 %216, 0
  %339 = icmp sgt i32 %215, 0
  %340 = mul nsw i32 %302, %215
  %341 = mul nsw i32 %303, %216
  %342 = mul nsw i32 %304, %217
  br label %403

343:                                              ; preds = %334
  %344 = icmp sgt i32 %216, 0
  br i1 %344, label %345, label %453

345:                                              ; preds = %343
  %346 = icmp sgt i32 %215, 0
  %347 = mul nsw i32 %302, %215
  %348 = mul nsw i32 %303, %216
  br label %369

349:                                              ; preds = %334
  %350 = icmp sgt i32 %215, 0
  br i1 %350, label %351, label %453

351:                                              ; preds = %349
  %352 = mul nsw i32 %302, %215
  %353 = zext i32 %215 to i64
  br label %354

354:                                              ; preds = %354, %351
  %355 = phi i64 [ 0, %351 ], [ %367, %354 ]
  %356 = trunc i64 %355 to i32
  %357 = add nsw i32 %352, %356
  %358 = mul nsw i32 %357, %209
  %359 = add nsw i32 %358, -17
  %360 = getelementptr inbounds ptr, ptr %309, i64 %355
  %361 = load ptr, ptr %360, align 8, !tbaa !14
  store i32 %359, ptr %361, align 4, !tbaa !7
  %362 = add nsw i32 %357, 1
  %363 = mul nsw i32 %362, %209
  %364 = add nsw i32 %363, -18
  %365 = getelementptr inbounds ptr, ptr %310, i64 %355
  %366 = load ptr, ptr %365, align 8, !tbaa !14
  store i32 %364, ptr %366, align 4, !tbaa !7
  %367 = add nuw nsw i64 %355, 1
  %368 = icmp eq i64 %367, %353
  br i1 %368, label %453, label %354, !llvm.loop !399

369:                                              ; preds = %399, %345
  %370 = phi i32 [ 0, %345 ], [ %400, %399 ]
  %371 = phi i32 [ 0, %345 ], [ %401, %399 ]
  br i1 %346, label %372, label %399

372:                                              ; preds = %369
  %373 = add nsw i32 %371, %348
  %374 = mul nsw i32 %373, %210
  %375 = add nsw i32 %373, 1
  %376 = mul nsw i32 %375, %210
  %377 = add nsw i32 %376, -1
  %378 = sext i32 %370 to i64
  br label %379

379:                                              ; preds = %379, %372
  %380 = phi i64 [ %378, %372 ], [ %394, %379 ]
  %381 = phi i32 [ 0, %372 ], [ %395, %379 ]
  %382 = add nsw i32 %381, %347
  %383 = mul nsw i32 %382, %209
  %384 = add nsw i32 %383, -17
  %385 = getelementptr inbounds ptr, ptr %309, i64 %380
  %386 = load ptr, ptr %385, align 8, !tbaa !14
  store i32 %384, ptr %386, align 4, !tbaa !7
  %387 = add nsw i32 %382, 1
  %388 = mul nsw i32 %387, %209
  %389 = add nsw i32 %388, -18
  %390 = getelementptr inbounds ptr, ptr %310, i64 %380
  %391 = load ptr, ptr %390, align 8, !tbaa !14
  store i32 %389, ptr %391, align 4, !tbaa !7
  %392 = getelementptr inbounds i32, ptr %386, i64 1
  store i32 %374, ptr %392, align 4, !tbaa !7
  %393 = getelementptr inbounds i32, ptr %391, i64 1
  store i32 %377, ptr %393, align 4, !tbaa !7
  %394 = add nsw i64 %380, 1
  %395 = add nuw nsw i32 %381, 1
  %396 = icmp eq i32 %395, %215
  br i1 %396, label %397, label %379, !llvm.loop !400

397:                                              ; preds = %379
  %.lcssa = phi i64 [ %394, %379 ]
  %398 = trunc i64 %.lcssa to i32
  br label %399

399:                                              ; preds = %397, %369
  %400 = phi i32 [ %370, %369 ], [ %398, %397 ]
  %401 = add nuw nsw i32 %371, 1
  %402 = icmp eq i32 %401, %216
  br i1 %402, label %453, label %369, !llvm.loop !401

403:                                              ; preds = %449, %337
  %404 = phi i32 [ 0, %337 ], [ %450, %449 ]
  %405 = phi i32 [ 0, %337 ], [ %451, %449 ]
  br i1 %338, label %406, label %449

406:                                              ; preds = %403
  %407 = add nsw i32 %405, %342
  %408 = mul nsw i32 %407, %211
  %409 = add nsw i32 %408, 32
  %410 = add nsw i32 %407, 1
  %411 = mul nsw i32 %410, %211
  %412 = add nsw i32 %411, 31
  br label %413

413:                                              ; preds = %445, %406
  %414 = phi i32 [ %404, %406 ], [ %446, %445 ]
  %415 = phi i32 [ 0, %406 ], [ %447, %445 ]
  br i1 %339, label %416, label %445

416:                                              ; preds = %413
  %417 = add nsw i32 %415, %341
  %418 = mul nsw i32 %417, %210
  %419 = add nsw i32 %417, 1
  %420 = mul nsw i32 %419, %210
  %421 = add nsw i32 %420, -1
  %422 = sext i32 %414 to i64
  br label %423

423:                                              ; preds = %423, %416
  %424 = phi i64 [ %422, %416 ], [ %440, %423 ]
  %425 = phi i32 [ 0, %416 ], [ %441, %423 ]
  %426 = add nsw i32 %425, %340
  %427 = mul nsw i32 %426, %209
  %428 = add nsw i32 %427, -17
  %429 = getelementptr inbounds ptr, ptr %309, i64 %424
  %430 = load ptr, ptr %429, align 8, !tbaa !14
  store i32 %428, ptr %430, align 4, !tbaa !7
  %431 = add nsw i32 %426, 1
  %432 = mul nsw i32 %431, %209
  %433 = add nsw i32 %432, -18
  %434 = getelementptr inbounds ptr, ptr %310, i64 %424
  %435 = load ptr, ptr %434, align 8, !tbaa !14
  store i32 %433, ptr %435, align 4, !tbaa !7
  %436 = getelementptr inbounds i32, ptr %430, i64 1
  store i32 %418, ptr %436, align 4, !tbaa !7
  %437 = getelementptr inbounds i32, ptr %435, i64 1
  store i32 %421, ptr %437, align 4, !tbaa !7
  %438 = getelementptr inbounds i32, ptr %430, i64 2
  store i32 %409, ptr %438, align 4, !tbaa !7
  %439 = getelementptr inbounds i32, ptr %435, i64 2
  store i32 %412, ptr %439, align 4, !tbaa !7
  %440 = add nsw i64 %424, 1
  %441 = add nuw nsw i32 %425, 1
  %442 = icmp eq i32 %441, %215
  br i1 %442, label %443, label %423, !llvm.loop !402

443:                                              ; preds = %423
  %.lcssa1 = phi i64 [ %440, %423 ]
  %444 = trunc i64 %.lcssa1 to i32
  br label %445

445:                                              ; preds = %443, %413
  %446 = phi i32 [ %414, %413 ], [ %444, %443 ]
  %447 = add nuw nsw i32 %415, 1
  %448 = icmp eq i32 %447, %216
  br i1 %448, label %449, label %413, !llvm.loop !403

449:                                              ; preds = %445, %403
  %450 = phi i32 [ %404, %403 ], [ %446, %445 ]
  %451 = add nuw nsw i32 %405, 1
  %452 = icmp eq i32 %451, %217
  br i1 %452, label %453, label %403, !llvm.loop !404

453:                                              ; preds = %449, %399, %354, %349, %343, %335, %334
  %454 = call i32 @HYPRE_StructGridCreate(i32 noundef 0, i32 noundef %222, ptr noundef nonnull %16) #33
  br i1 %311, label %455, label %467

455:                                              ; preds = %453
  %456 = zext i32 %305 to i64
  br label %457

457:                                              ; preds = %457, %455
  %458 = phi i64 [ 0, %455 ], [ %465, %457 ]
  %459 = load ptr, ptr %16, align 8, !tbaa !14
  %460 = getelementptr inbounds ptr, ptr %309, i64 %458
  %461 = load ptr, ptr %460, align 8, !tbaa !14
  %462 = getelementptr inbounds ptr, ptr %310, i64 %458
  %463 = load ptr, ptr %462, align 8, !tbaa !14
  %464 = call i32 @HYPRE_StructGridSetExtents(ptr noundef %459, ptr noundef %461, ptr noundef %463) #33
  %465 = add nuw nsw i64 %458, 1
  %466 = icmp eq i64 %465, %456
  br i1 %466, label %467, label %457, !llvm.loop !405

467:                                              ; preds = %457, %453
  %468 = load ptr, ptr %16, align 8, !tbaa !14
  %469 = call i32 @HYPRE_StructGridAssemble(ptr noundef %468) #33
  %470 = add i32 %222, 1
  %471 = call i32 @HYPRE_StructStencilCreate(i32 noundef %222, i32 noundef %470, ptr noundef nonnull %17) #33
  %472 = icmp slt i32 %222, 0
  br i1 %472, label %484, label %473

473:                                              ; preds = %467
  %474 = zext i32 %470 to i64
  br label %475

475:                                              ; preds = %475, %473
  %476 = phi i64 [ 0, %473 ], [ %482, %475 ]
  %477 = load ptr, ptr %17, align 8, !tbaa !14
  %478 = getelementptr inbounds ptr, ptr %307, i64 %476
  %479 = load ptr, ptr %478, align 8, !tbaa !14
  %480 = trunc i64 %476 to i32
  %481 = call i32 @HYPRE_StructStencilSetElement(ptr noundef %477, i32 noundef %480, ptr noundef %479) #33
  %482 = add nuw nsw i64 %476, 1
  %483 = icmp eq i64 %482, %474
  br i1 %483, label %484, label %475, !llvm.loop !406

484:                                              ; preds = %475, %467
  %485 = load ptr, ptr %16, align 8, !tbaa !14
  %486 = load ptr, ptr %17, align 8, !tbaa !14
  %487 = call i32 @HYPRE_StructMatrixCreate(i32 noundef 0, ptr noundef %485, ptr noundef %486, ptr noundef nonnull %6) #33
  %488 = load ptr, ptr %6, align 8, !tbaa !14
  %489 = call i32 @HYPRE_StructMatrixSetSymmetric(ptr noundef %488, i32 noundef 1) #33
  %490 = load ptr, ptr %6, align 8, !tbaa !14
  %491 = call i32 @HYPRE_StructMatrixSetNumGhost(ptr noundef %490, ptr noundef nonnull %5) #33
  %492 = load ptr, ptr %6, align 8, !tbaa !14
  %493 = call i32 @HYPRE_StructMatrixInitialize(ptr noundef %492) #33
  %494 = mul nsw i32 %306, %470
  %495 = call ptr @hypre_CAlloc(i32 noundef %494, i32 noundef 8) #33
  %496 = icmp sgt i32 %494, 0
  br i1 %496, label %497, label %519

497:                                              ; preds = %484
  %498 = fneg double %218
  %499 = fneg double %219
  %500 = fneg double %220
  %501 = fadd double %218, %219
  %502 = fadd double %501, %220
  %503 = fmul double %502, 2.000000e+00
  %504 = fmul double %501, 2.000000e+00
  %505 = fmul double %218, 2.000000e+00
  %506 = sext i32 %470 to i64
  %507 = zext i32 %494 to i64
  %508 = zext i32 %470 to i64
  br label %509

509:                                              ; preds = %532, %497
  %510 = phi i64 [ 0, %497 ], [ %533, %532 ]
  br i1 %472, label %532, label %511

511:                                              ; preds = %509
  %512 = getelementptr inbounds double, ptr %495, i64 %510
  %513 = add nsw i64 %510, 1
  %514 = getelementptr inbounds double, ptr %495, i64 %513
  %515 = add nsw i64 %510, 2
  %516 = getelementptr inbounds double, ptr %495, i64 %515
  %517 = add nsw i64 %510, 3
  %518 = getelementptr inbounds double, ptr %495, i64 %517
  br label %522

519:                                              ; preds = %532, %484
  br i1 %311, label %520, label %535

520:                                              ; preds = %519
  %521 = zext i32 %305 to i64
  br label %540

522:                                              ; preds = %529, %511
  %523 = phi i64 [ 0, %511 ], [ %530, %529 ]
  %524 = getelementptr inbounds i32, ptr %308, i64 %523
  %525 = trunc i64 %523 to i32
  store i32 %525, ptr %524, align 4, !tbaa !7
  switch i32 %222, label %529 [
    i32 1, label %526
    i32 2, label %527
    i32 3, label %528
  ]

526:                                              ; preds = %522
  store double %498, ptr %512, align 8, !tbaa !29
  store double %505, ptr %514, align 8, !tbaa !29
  br label %529

527:                                              ; preds = %522
  store double %498, ptr %512, align 8, !tbaa !29
  store double %499, ptr %514, align 8, !tbaa !29
  store double %504, ptr %516, align 8, !tbaa !29
  br label %529

528:                                              ; preds = %522
  store double %498, ptr %512, align 8, !tbaa !29
  store double %499, ptr %514, align 8, !tbaa !29
  store double %500, ptr %516, align 8, !tbaa !29
  store double %503, ptr %518, align 8, !tbaa !29
  br label %529

529:                                              ; preds = %528, %527, %526, %522
  %530 = add nuw nsw i64 %523, 1
  %531 = icmp eq i64 %530, %508
  br i1 %531, label %532, label %522, !llvm.loop !407

532:                                              ; preds = %529, %509
  %533 = add i64 %510, %506
  %534 = icmp slt i64 %533, %507
  br i1 %534, label %509, label %519, !llvm.loop !408

535:                                              ; preds = %540, %519
  %536 = icmp sgt i32 %306, 0
  br i1 %536, label %537, label %550

537:                                              ; preds = %535
  %538 = zext i32 %306 to i64
  %539 = shl nuw nsw i64 %538, 3
  call void @llvm.memset.p0.i64(ptr align 8 %495, i8 0, i64 %539, i1 false), !tbaa !29
  br label %550

540:                                              ; preds = %540, %520
  %541 = phi i64 [ 0, %520 ], [ %548, %540 ]
  %542 = load ptr, ptr %6, align 8, !tbaa !14
  %543 = getelementptr inbounds ptr, ptr %309, i64 %541
  %544 = load ptr, ptr %543, align 8, !tbaa !14
  %545 = getelementptr inbounds ptr, ptr %310, i64 %541
  %546 = load ptr, ptr %545, align 8, !tbaa !14
  %547 = call i32 @HYPRE_StructMatrixSetBoxValues(ptr noundef %542, ptr noundef %544, ptr noundef %546, i32 noundef %470, ptr noundef %308, ptr noundef %495) #33
  %548 = add nuw nsw i64 %541, 1
  %549 = icmp eq i64 %548, %521
  br i1 %549, label %535, label %540, !llvm.loop !409

550:                                              ; preds = %537, %535
  br i1 %315, label %551, label %582

551:                                              ; preds = %550
  %552 = zext i32 %222 to i64
  %553 = zext i32 %305 to i64
  br label %554

554:                                              ; preds = %579, %551
  %555 = phi i64 [ 0, %551 ], [ %580, %579 ]
  br i1 %311, label %556, label %579

556:                                              ; preds = %554
  %557 = getelementptr inbounds [3 x i32], ptr %15, i64 0, i64 %555
  %558 = load i32, ptr %557, align 4, !tbaa !7
  %559 = trunc i64 %555 to i32
  br label %560

560:                                              ; preds = %576, %556
  %561 = phi i64 [ 0, %556 ], [ %577, %576 ]
  %562 = getelementptr inbounds ptr, ptr %309, i64 %561
  %563 = load ptr, ptr %562, align 8, !tbaa !14
  %564 = getelementptr inbounds i32, ptr %563, i64 %555
  %565 = load i32, ptr %564, align 4, !tbaa !7
  %566 = icmp eq i32 %565, %558
  br i1 %566, label %567, label %576

567:                                              ; preds = %560
  %568 = getelementptr inbounds ptr, ptr %310, i64 %561
  %569 = load ptr, ptr %568, align 8, !tbaa !14
  %570 = getelementptr inbounds i32, ptr %569, i64 %555
  %571 = load i32, ptr %570, align 4, !tbaa !7
  store i32 %558, ptr %570, align 4, !tbaa !7
  store i32 %559, ptr %308, align 4, !tbaa !7
  %572 = load ptr, ptr %6, align 8, !tbaa !14
  %573 = call i32 @HYPRE_StructMatrixSetBoxValues(ptr noundef %572, ptr noundef nonnull %563, ptr noundef %569, i32 noundef 1, ptr noundef nonnull %308, ptr noundef %495) #33
  %574 = load ptr, ptr %568, align 8, !tbaa !14
  %575 = getelementptr inbounds i32, ptr %574, i64 %555
  store i32 %571, ptr %575, align 4, !tbaa !7
  br label %576

576:                                              ; preds = %567, %560
  %577 = add nuw nsw i64 %561, 1
  %578 = icmp eq i64 %577, %553
  br i1 %578, label %579, label %560, !llvm.loop !410

579:                                              ; preds = %576, %554
  %580 = add nuw nsw i64 %555, 1
  %581 = icmp eq i64 %580, %552
  br i1 %581, label %582, label %554, !llvm.loop !411

582:                                              ; preds = %579, %550
  %583 = load ptr, ptr %6, align 8, !tbaa !14
  %584 = call i32 @HYPRE_StructMatrixAssemble(ptr noundef %583) #33
  call void @hypre_Free(ptr noundef %495) #33
  %585 = call ptr @hypre_CAlloc(i32 noundef %306, i32 noundef 8) #33
  %586 = load ptr, ptr %16, align 8, !tbaa !14
  %587 = call i32 @HYPRE_StructVectorCreate(i32 noundef 0, ptr noundef %586, ptr noundef nonnull %7) #33
  %588 = load ptr, ptr %7, align 8, !tbaa !14
  %589 = call i32 @HYPRE_StructVectorInitialize(ptr noundef %588) #33
  br i1 %536, label %590, label %613

590:                                              ; preds = %582
  %591 = zext i32 %306 to i64
  %592 = add nuw nsw i64 %591, 1
  %593 = and i64 %592, 8589934590
  %594 = add nsw i64 %591, -1
  %595 = insertelement <2 x i64> poison, i64 %594, i64 0
  %596 = shufflevector <2 x i64> %595, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %597

597:                                              ; preds = %609, %590
  %598 = phi i64 [ 0, %590 ], [ %610, %609 ]
  %599 = phi <2 x i64> [ <i64 0, i64 1>, %590 ], [ %611, %609 ]
  %600 = icmp ule <2 x i64> %599, %596
  %601 = extractelement <2 x i1> %600, i64 0
  br i1 %601, label %602, label %604

602:                                              ; preds = %597
  %603 = getelementptr inbounds double, ptr %585, i64 %598
  store double 1.000000e+00, ptr %603, align 8, !tbaa !29
  br label %604

604:                                              ; preds = %602, %597
  %605 = extractelement <2 x i1> %600, i64 1
  br i1 %605, label %606, label %609

606:                                              ; preds = %604
  %607 = or i64 %598, 1
  %608 = getelementptr inbounds double, ptr %585, i64 %607
  store double 1.000000e+00, ptr %608, align 8, !tbaa !29
  br label %609

609:                                              ; preds = %606, %604
  %610 = add i64 %598, 2
  %611 = add <2 x i64> %599, <i64 2, i64 2>
  %612 = icmp eq i64 %610, %593
  br i1 %612, label %613, label %597, !llvm.loop !412

613:                                              ; preds = %609, %582
  br i1 %311, label %614, label %626

614:                                              ; preds = %613
  %615 = zext i32 %305 to i64
  br label %616

616:                                              ; preds = %616, %614
  %617 = phi i64 [ 0, %614 ], [ %624, %616 ]
  %618 = load ptr, ptr %7, align 8, !tbaa !14
  %619 = getelementptr inbounds ptr, ptr %309, i64 %617
  %620 = load ptr, ptr %619, align 8, !tbaa !14
  %621 = getelementptr inbounds ptr, ptr %310, i64 %617
  %622 = load ptr, ptr %621, align 8, !tbaa !14
  %623 = call i32 @HYPRE_StructVectorSetBoxValues(ptr noundef %618, ptr noundef %620, ptr noundef %622, ptr noundef %585) #33
  %624 = add nuw nsw i64 %617, 1
  %625 = icmp eq i64 %624, %615
  br i1 %625, label %626, label %616, !llvm.loop !415

626:                                              ; preds = %616, %613
  %627 = load ptr, ptr %7, align 8, !tbaa !14
  %628 = call i32 @HYPRE_StructVectorAssemble(ptr noundef %627) #33
  %629 = load ptr, ptr %16, align 8, !tbaa !14
  %630 = call i32 @HYPRE_StructVectorCreate(i32 noundef 0, ptr noundef %629, ptr noundef nonnull %8) #33
  %631 = load ptr, ptr %8, align 8, !tbaa !14
  %632 = call i32 @HYPRE_StructVectorInitialize(ptr noundef %631) #33
  br i1 %536, label %633, label %636

633:                                              ; preds = %626
  %634 = zext i32 %306 to i64
  %635 = shl nuw nsw i64 %634, 3
  call void @llvm.memset.p0.i64(ptr align 8 %585, i8 0, i64 %635, i1 false), !tbaa !29
  br label %636

636:                                              ; preds = %633, %626
  br i1 %311, label %637, label %649

637:                                              ; preds = %636
  %638 = zext i32 %305 to i64
  br label %639

639:                                              ; preds = %639, %637
  %640 = phi i64 [ 0, %637 ], [ %647, %639 ]
  %641 = load ptr, ptr %8, align 8, !tbaa !14
  %642 = getelementptr inbounds ptr, ptr %309, i64 %640
  %643 = load ptr, ptr %642, align 8, !tbaa !14
  %644 = getelementptr inbounds ptr, ptr %310, i64 %640
  %645 = load ptr, ptr %644, align 8, !tbaa !14
  %646 = call i32 @HYPRE_StructVectorSetBoxValues(ptr noundef %641, ptr noundef %643, ptr noundef %645, ptr noundef %585) #33
  %647 = add nuw nsw i64 %640, 1
  %648 = icmp eq i64 %647, %638
  br i1 %648, label %649, label %639, !llvm.loop !416

649:                                              ; preds = %639, %636
  %650 = load ptr, ptr %8, align 8, !tbaa !14
  %651 = call i32 @HYPRE_StructVectorAssemble(ptr noundef %650) #33
  call void @hypre_Free(ptr noundef %585) #33
  %652 = call i32 @hypre_EndTiming(i32 noundef %244) #33
  %653 = call i32 @hypre_PrintTiming(ptr noundef nonnull @.str.30, i32 noundef 0) #33
  %654 = call i32 @hypre_FinalizeTiming(i32 noundef %244) #33
  %655 = call i32 @hypre_ClearTiming() #33
  %656 = icmp eq i32 %221, 0
  br i1 %656, label %657, label %699

657:                                              ; preds = %649
  %658 = call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.31) #33
  %659 = call i32 @hypre_BeginTiming(i32 noundef %658) #33
  %660 = call i32 @HYPRE_StructSMGCreate(i32 noundef 0, ptr noundef nonnull %9) #33
  %661 = load ptr, ptr %9, align 8, !tbaa !14
  %662 = call i32 @HYPRE_StructSMGSetMemoryUse(ptr noundef %661, i32 noundef 0) #33
  %663 = load ptr, ptr %9, align 8, !tbaa !14
  %664 = call i32 @HYPRE_StructSMGSetMaxIter(ptr noundef %663, i32 noundef 50) #33
  %665 = load ptr, ptr %9, align 8, !tbaa !14
  %666 = call i32 @HYPRE_StructSMGSetTol(ptr noundef %665, double noundef 0x3EB0C6F7A0B5ED8D) #33
  %667 = load ptr, ptr %9, align 8, !tbaa !14
  %668 = call i32 @HYPRE_StructSMGSetRelChange(ptr noundef %667, i32 noundef 0) #33
  %669 = load ptr, ptr %9, align 8, !tbaa !14
  %670 = call i32 @HYPRE_StructSMGSetNumPreRelax(ptr noundef %669, i32 noundef %223) #33
  %671 = load ptr, ptr %9, align 8, !tbaa !14
  %672 = call i32 @HYPRE_StructSMGSetNumPostRelax(ptr noundef %671, i32 noundef %224) #33
  %673 = load ptr, ptr %9, align 8, !tbaa !14
  %674 = call i32 @HYPRE_StructSMGSetLogging(ptr noundef %673, i32 noundef 1) #33
  %675 = load ptr, ptr %9, align 8, !tbaa !14
  %676 = load ptr, ptr %6, align 8, !tbaa !14
  %677 = load ptr, ptr %7, align 8, !tbaa !14
  %678 = load ptr, ptr %8, align 8, !tbaa !14
  %679 = call i32 @HYPRE_StructSMGSetup(ptr noundef %675, ptr noundef %676, ptr noundef %677, ptr noundef %678) #33
  %680 = call i32 @hypre_EndTiming(i32 noundef %658) #33
  %681 = call i32 @hypre_PrintTiming(ptr noundef nonnull @.str.32, i32 noundef 0) #33
  %682 = call i32 @hypre_FinalizeTiming(i32 noundef %658) #33
  %683 = call i32 @hypre_ClearTiming() #33
  %684 = call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.33) #33
  %685 = call i32 @hypre_BeginTiming(i32 noundef %684) #33
  %686 = load ptr, ptr %9, align 8, !tbaa !14
  %687 = load ptr, ptr %6, align 8, !tbaa !14
  %688 = load ptr, ptr %7, align 8, !tbaa !14
  %689 = load ptr, ptr %8, align 8, !tbaa !14
  %690 = call i32 @HYPRE_StructSMGSolve(ptr noundef %686, ptr noundef %687, ptr noundef %688, ptr noundef %689) #33
  %691 = call i32 @hypre_EndTiming(i32 noundef %684) #33
  %692 = call i32 @hypre_PrintTiming(ptr noundef nonnull @.str.34, i32 noundef 0) #33
  %693 = call i32 @hypre_FinalizeTiming(i32 noundef %684) #33
  %694 = call i32 @hypre_ClearTiming() #33
  %695 = load ptr, ptr %9, align 8, !tbaa !14
  %696 = call i32 @HYPRE_StructSMGGetNumIterations(ptr noundef %695, ptr noundef nonnull %11) #33
  %697 = load ptr, ptr %9, align 8, !tbaa !14
  %698 = call i32 @HYPRE_StructSMGGetFinalRelativeResidualNorm(ptr noundef %697, ptr noundef nonnull %12) #33
  br label %767

699:                                              ; preds = %649
  %700 = icmp sgt i32 %221, 0
  br i1 %700, label %701, label %771

701:                                              ; preds = %699
  %702 = call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.35) #33
  %703 = call i32 @hypre_BeginTiming(i32 noundef %702) #33
  %704 = call i32 @HYPRE_StructPCGCreate(i32 noundef 0, ptr noundef nonnull %9) #33
  %705 = load ptr, ptr %9, align 8, !tbaa !14
  %706 = call i32 @HYPRE_PCGSetMaxIter(ptr noundef %705, i32 noundef 50) #33
  %707 = load ptr, ptr %9, align 8, !tbaa !14
  %708 = call i32 @HYPRE_PCGSetTol(ptr noundef %707, double noundef 0x3EB0C6F7A0B5ED8D) #33
  %709 = load ptr, ptr %9, align 8, !tbaa !14
  %710 = call i32 @HYPRE_PCGSetTwoNorm(ptr noundef %709, i32 noundef 1) #33
  %711 = load ptr, ptr %9, align 8, !tbaa !14
  %712 = call i32 @HYPRE_PCGSetRelChange(ptr noundef %711, i32 noundef 0) #33
  %713 = load ptr, ptr %9, align 8, !tbaa !14
  %714 = call i32 @HYPRE_PCGSetLogging(ptr noundef %713, i32 noundef 1) #33
  %715 = icmp eq i32 %221, 1
  br i1 %715, label %716, label %735

716:                                              ; preds = %701
  %717 = call i32 @HYPRE_StructSMGCreate(i32 noundef 0, ptr noundef nonnull %10) #33
  %718 = load ptr, ptr %10, align 8, !tbaa !14
  %719 = call i32 @HYPRE_StructSMGSetMemoryUse(ptr noundef %718, i32 noundef 0) #33
  %720 = load ptr, ptr %10, align 8, !tbaa !14
  %721 = call i32 @HYPRE_StructSMGSetMaxIter(ptr noundef %720, i32 noundef 1) #33
  %722 = load ptr, ptr %10, align 8, !tbaa !14
  %723 = call i32 @HYPRE_StructSMGSetTol(ptr noundef %722, double noundef 0.000000e+00) #33
  %724 = load ptr, ptr %10, align 8, !tbaa !14
  %725 = call i32 @HYPRE_StructSMGSetZeroGuess(ptr noundef %724) #33
  %726 = load ptr, ptr %10, align 8, !tbaa !14
  %727 = call i32 @HYPRE_StructSMGSetNumPreRelax(ptr noundef %726, i32 noundef %223) #33
  %728 = load ptr, ptr %10, align 8, !tbaa !14
  %729 = call i32 @HYPRE_StructSMGSetNumPostRelax(ptr noundef %728, i32 noundef %224) #33
  %730 = load ptr, ptr %10, align 8, !tbaa !14
  %731 = call i32 @HYPRE_StructSMGSetLogging(ptr noundef %730, i32 noundef 0) #33
  %732 = load ptr, ptr %9, align 8, !tbaa !14
  %733 = load ptr, ptr %10, align 8, !tbaa !14
  %734 = call i32 @HYPRE_PCGSetPrecond(ptr noundef %732, ptr noundef nonnull @HYPRE_StructSMGSolve, ptr noundef nonnull @HYPRE_StructSMGSetup, ptr noundef %733) #33
  br label %740

735:                                              ; preds = %701
  %736 = icmp eq i32 %221, 2
  br i1 %736, label %737, label %740

737:                                              ; preds = %735
  store ptr null, ptr %10, align 8, !tbaa !14
  %738 = load ptr, ptr %9, align 8, !tbaa !14
  %739 = call i32 @HYPRE_PCGSetPrecond(ptr noundef %738, ptr noundef nonnull @HYPRE_StructDiagScale, ptr noundef nonnull @HYPRE_StructDiagScaleSetup, ptr noundef null) #33
  br label %740

740:                                              ; preds = %737, %735, %716
  %741 = load ptr, ptr %9, align 8, !tbaa !14
  %742 = load ptr, ptr %6, align 8, !tbaa !14
  %743 = load ptr, ptr %7, align 8, !tbaa !14
  %744 = load ptr, ptr %8, align 8, !tbaa !14
  %745 = call i32 @HYPRE_PCGSetup(ptr noundef %741, ptr noundef %742, ptr noundef %743, ptr noundef %744) #33
  %746 = call i32 @hypre_EndTiming(i32 noundef %702) #33
  %747 = call i32 @hypre_PrintTiming(ptr noundef nonnull @.str.32, i32 noundef 0) #33
  %748 = call i32 @hypre_FinalizeTiming(i32 noundef %702) #33
  %749 = call i32 @hypre_ClearTiming() #33
  %750 = call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.36) #33
  %751 = call i32 @hypre_BeginTiming(i32 noundef %750) #33
  %752 = load ptr, ptr %9, align 8, !tbaa !14
  %753 = load ptr, ptr %6, align 8, !tbaa !14
  %754 = load ptr, ptr %7, align 8, !tbaa !14
  %755 = load ptr, ptr %8, align 8, !tbaa !14
  %756 = call i32 @HYPRE_PCGSolve(ptr noundef %752, ptr noundef %753, ptr noundef %754, ptr noundef %755) #33
  %757 = call i32 @hypre_EndTiming(i32 noundef %750) #33
  %758 = call i32 @hypre_PrintTiming(ptr noundef nonnull @.str.34, i32 noundef 0) #33
  %759 = call i32 @hypre_FinalizeTiming(i32 noundef %750) #33
  %760 = call i32 @hypre_ClearTiming() #33
  %761 = load ptr, ptr %9, align 8, !tbaa !14
  %762 = call i32 @HYPRE_PCGGetNumIterations(ptr noundef %761, ptr noundef nonnull %11) #33
  %763 = load ptr, ptr %9, align 8, !tbaa !14
  %764 = call i32 @HYPRE_PCGGetFinalRelativeResidualNorm(ptr noundef %763, ptr noundef nonnull %12) #33
  %765 = load ptr, ptr %9, align 8, !tbaa !14
  %766 = call i32 @HYPRE_StructPCGDestroy(ptr noundef %765) #33
  br i1 %715, label %767, label %771

767:                                              ; preds = %740, %657
  %768 = phi ptr [ %9, %657 ], [ %10, %740 ]
  %769 = load ptr, ptr %768, align 8, !tbaa !14
  %770 = call i32 @HYPRE_StructSMGDestroy(ptr noundef %769) #33
  br label %771

771:                                              ; preds = %767, %740, %699
  %772 = load i32, ptr %14, align 4, !tbaa !7
  %773 = icmp eq i32 %772, 0
  br i1 %773, label %774, label %781

774:                                              ; preds = %771
  %775 = call i32 @putchar(i32 10)
  %776 = load i32, ptr %11, align 4, !tbaa !7
  %777 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.37, i32 noundef %776) #35
  %778 = load double, ptr %12, align 8, !tbaa !29
  %779 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.38, double noundef %778) #35
  %780 = call i32 @putchar(i32 10)
  br label %781

781:                                              ; preds = %774, %771
  %782 = load ptr, ptr %16, align 8, !tbaa !14
  %783 = call i32 @HYPRE_StructGridDestroy(ptr noundef %782) #33
  %784 = load ptr, ptr %17, align 8, !tbaa !14
  %785 = call i32 @HYPRE_StructStencilDestroy(ptr noundef %784) #33
  %786 = load ptr, ptr %6, align 8, !tbaa !14
  %787 = call i32 @HYPRE_StructMatrixDestroy(ptr noundef %786) #33
  %788 = load ptr, ptr %7, align 8, !tbaa !14
  %789 = call i32 @HYPRE_StructVectorDestroy(ptr noundef %788) #33
  %790 = load ptr, ptr %8, align 8, !tbaa !14
  %791 = call i32 @HYPRE_StructVectorDestroy(ptr noundef %790) #33
  br i1 %311, label %792, label %802

792:                                              ; preds = %781
  %793 = zext i32 %305 to i64
  br label %794

794:                                              ; preds = %794, %792
  %795 = phi i64 [ 0, %792 ], [ %800, %794 ]
  %796 = getelementptr inbounds ptr, ptr %310, i64 %795
  %797 = load ptr, ptr %796, align 8, !tbaa !14
  call void @hypre_Free(ptr noundef %797) #33
  store ptr null, ptr %796, align 8, !tbaa !14
  %798 = getelementptr inbounds ptr, ptr %309, i64 %795
  %799 = load ptr, ptr %798, align 8, !tbaa !14
  call void @hypre_Free(ptr noundef %799) #33
  store ptr null, ptr %798, align 8, !tbaa !14
  %800 = add nuw nsw i64 %795, 1
  %801 = icmp eq i64 %800, %793
  br i1 %801, label %802, label %794, !llvm.loop !417

802:                                              ; preds = %794, %781
  call void @hypre_Free(ptr noundef %309) #33
  call void @hypre_Free(ptr noundef %310) #33
  call void @hypre_Free(ptr noundef %308) #33
  br i1 %472, label %811, label %803

803:                                              ; preds = %802
  %804 = zext i32 %470 to i64
  br label %805

805:                                              ; preds = %805, %803
  %806 = phi i64 [ 0, %803 ], [ %809, %805 ]
  %807 = getelementptr inbounds ptr, ptr %307, i64 %806
  %808 = load ptr, ptr %807, align 8, !tbaa !14
  call void @hypre_Free(ptr noundef %808) #33
  store ptr null, ptr %807, align 8, !tbaa !14
  %809 = add nuw nsw i64 %806, 1
  %810 = icmp eq i64 %809, %804
  br i1 %810, label %811, label %805, !llvm.loop !418

811:                                              ; preds = %805, %802
  call void @hypre_Free(ptr noundef %307) #33
  %812 = call i32 @hypre_MPI_Finalize() #33
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %15) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #26

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare i32 @atoi(ptr nocapture noundef) local_unnamed_addr #27

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(read)
declare double @atof(ptr nocapture noundef) local_unnamed_addr #27

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #28

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #28

; Function Attrs: noreturn nounwind optsize
declare void @exit(i32 noundef) local_unnamed_addr #29

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMG2CreateRAPOp(ptr nocapture noundef readnone %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readnone %2, ptr noundef %3) #0 {
  %5 = alloca [6 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #34
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %5, ptr noundef nonnull align 16 dereferenceable(24) @__const.hypre_SMG2CreateRAPOp.RAP_num_ghost, i64 24, i1 false)
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 10
  %7 = load i32, ptr %6, align 8, !tbaa !19
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %29

9:                                                ; preds = %4
  %10 = tail call ptr @hypre_CAlloc(i32 noundef 9, i32 noundef 12) #33
  br label %11

11:                                               ; preds = %26, %9
  %12 = phi i32 [ 0, %9 ], [ %15, %26 ]
  %13 = phi i32 [ -1, %9 ], [ %27, %26 ]
  %14 = sext i32 %12 to i64
  %15 = add i32 %12, 3
  br label %16

16:                                               ; preds = %16, %11
  %17 = phi i64 [ %14, %11 ], [ %22, %16 ]
  %18 = phi i32 [ -1, %11 ], [ %23, %16 ]
  %19 = getelementptr inbounds [3 x i32], ptr %10, i64 %17
  store i32 %18, ptr %19, align 4, !tbaa !7
  %20 = getelementptr inbounds [3 x i32], ptr %10, i64 %17, i64 1
  store i32 %13, ptr %20, align 4, !tbaa !7
  %21 = getelementptr inbounds [3 x i32], ptr %10, i64 %17, i64 2
  store i32 0, ptr %21, align 4, !tbaa !7
  %22 = add nsw i64 %17, 1
  %23 = add nsw i32 %18, 1
  %24 = trunc i64 %22 to i32
  %25 = icmp eq i32 %15, %24
  br i1 %25, label %26, label %16, !llvm.loop !419

26:                                               ; preds = %16
  %27 = add nsw i32 %13, 1
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %52, label %11, !llvm.loop !420

29:                                               ; preds = %4
  %30 = tail call ptr @hypre_CAlloc(i32 noundef 5, i32 noundef 12) #33
  br label %31

31:                                               ; preds = %49, %29
  %32 = phi i32 [ 0, %29 ], [ %.lcssa, %49 ]
  %33 = phi i32 [ -1, %29 ], [ %50, %49 ]
  br label %34

34:                                               ; preds = %45, %31
  %35 = phi i32 [ %32, %31 ], [ %46, %45 ]
  %36 = phi i32 [ -1, %31 ], [ %47, %45 ]
  %37 = add nsw i32 %36, %33
  %38 = icmp slt i32 %37, 1
  br i1 %38, label %39, label %45

39:                                               ; preds = %34
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds [3 x i32], ptr %30, i64 %40
  store i32 %36, ptr %41, align 4, !tbaa !7
  %42 = getelementptr inbounds [3 x i32], ptr %30, i64 %40, i64 1
  store i32 %33, ptr %42, align 4, !tbaa !7
  %43 = getelementptr inbounds [3 x i32], ptr %30, i64 %40, i64 2
  store i32 0, ptr %43, align 4, !tbaa !7
  %44 = add nsw i32 %35, 1
  br label %45

45:                                               ; preds = %39, %34
  %46 = phi i32 [ %44, %39 ], [ %35, %34 ]
  %47 = add nsw i32 %36, 1
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %34, !llvm.loop !421

49:                                               ; preds = %45
  %.lcssa = phi i32 [ %46, %45 ]
  %50 = add nsw i32 %33, 1
  %51 = icmp eq i32 %33, 0
  br i1 %51, label %52, label %31, !llvm.loop !422

52:                                               ; preds = %49, %26
  %53 = phi i32 [ 9, %26 ], [ 5, %49 ]
  %54 = phi ptr [ %10, %26 ], [ %30, %49 ]
  %55 = tail call ptr @hypre_StructStencilCreate(i32 noundef 2, i32 noundef %53, ptr noundef %54) #33
  %56 = load i32, ptr %1, align 8, !tbaa !221
  %57 = tail call ptr @hypre_StructMatrixCreate(i32 noundef %56, ptr noundef %3, ptr noundef %55) #33
  %58 = tail call i32 @hypre_StructStencilDestroy(ptr noundef %55) #33
  %59 = load i32, ptr %6, align 8, !tbaa !19
  %60 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %57, i64 0, i32 10
  store i32 %59, ptr %60, align 8, !tbaa !19
  %61 = load i32, ptr %6, align 8, !tbaa !19
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %52
  %64 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 1
  store i32 0, ptr %64, align 4, !tbaa !7
  %65 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 3
  store i32 0, ptr %65, align 4, !tbaa !7
  br label %66

66:                                               ; preds = %63, %52
  %67 = call i32 @hypre_StructMatrixSetNumGhost(ptr noundef nonnull %57, ptr noundef nonnull %5) #33
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #34
  ret ptr %57
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG2BuildRAPSym(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %9) #34
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %11, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !195
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !15
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !195
  %20 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %17, i64 0, i32 1
  %21 = load i32, ptr %20, align 8, !tbaa !21
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %676

23:                                               ; preds = %6
  %24 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !250
  %26 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %25, i64 0, i32 1
  %27 = load i32, ptr %26, align 8, !tbaa !172
  %28 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %29 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %30 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 5
  %31 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 5
  %32 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %33 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %34 = icmp sgt i32 %27, 5
  %35 = icmp eq i32 %27, 5
  %36 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %37 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %38 = getelementptr inbounds i32, ptr %5, i64 1
  %39 = getelementptr inbounds i32, ptr %5, i64 2
  %40 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %41 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  br label %42

42:                                               ; preds = %671, %23
  %43 = phi i64 [ 0, %23 ], [ %672, %671 ]
  %44 = phi i64 [ 0, %23 ], [ %.lcssa, %671 ]
  %45 = phi ptr [ undef, %23 ], [ %91, %671 ]
  %46 = phi ptr [ undef, %23 ], [ %90, %671 ]
  %47 = phi ptr [ undef, %23 ], [ %89, %671 ]
  %48 = getelementptr inbounds i32, ptr %19, i64 %43
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = shl i64 %44, 32
  %51 = ashr exact i64 %50, 32
  br label %52

52:                                               ; preds = %52, %42
  %53 = phi i64 [ %57, %52 ], [ %51, %42 ]
  %54 = getelementptr inbounds i32, ptr %13, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = icmp eq i32 %55, %49
  %57 = add i64 %53, 1
  br i1 %56, label %58, label %52, !llvm.loop !423

58:                                               ; preds = %52
  %.lcssa = phi i64 [ %53, %52 ]
  %59 = trunc i64 %.lcssa to i32
  %60 = load ptr, ptr %17, align 8, !tbaa !23
  %61 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %43
  %62 = call i32 @hypre_StructMapCoarseToFine(ptr noundef %61, ptr noundef %4, ptr noundef %5, ptr noundef nonnull %8) #33
  %63 = load ptr, ptr %28, align 8, !tbaa !24
  %64 = load ptr, ptr %63, align 8, !tbaa !23
  %65 = getelementptr inbounds %struct.hypre_Box_struct, ptr %64, i64 %.lcssa
  %66 = load ptr, ptr %29, align 8, !tbaa !24
  %67 = load ptr, ptr %66, align 8, !tbaa !23
  %68 = getelementptr inbounds %struct.hypre_Box_struct, ptr %67, i64 %.lcssa
  %69 = load ptr, ptr %30, align 8, !tbaa !24
  %70 = load ptr, ptr %69, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa
  %72 = load ptr, ptr %31, align 8, !tbaa !24
  %73 = load ptr, ptr %72, align 8, !tbaa !23
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %75 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %76 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %77 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %78 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %79 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %80 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %81 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %82 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %83 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  br i1 %34, label %84, label %88

84:                                               ; preds = %58
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %85 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %86 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %87 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %59, ptr noundef nonnull %7) #33
  br label %88

88:                                               ; preds = %84, %58
  %89 = phi ptr [ %87, %84 ], [ %47, %58 ]
  %90 = phi ptr [ %86, %84 ], [ %46, %58 ]
  %91 = phi ptr [ %85, %84 ], [ %45, %58 ]
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %92 = trunc i64 %43 to i32
  %93 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %92, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %94 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %92, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %95 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %92, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %96 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %92, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %97 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %92, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %98 = getelementptr inbounds %struct.hypre_Box_struct, ptr %64, i64 %.lcssa, i32 1
  %99 = getelementptr inbounds %struct.hypre_Box_struct, ptr %64, i64 %.lcssa, i32 1, i64 1
  %100 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 1
  %101 = load i32, ptr %98, align 4, !tbaa !7
  %102 = load i32, ptr %65, align 4, !tbaa !7
  %103 = sub nsw i32 %101, %102
  %104 = add nsw i32 %103, 1
  %105 = icmp slt i32 %103, 0
  %106 = select i1 %105, i32 0, i32 %104
  %107 = getelementptr inbounds %struct.hypre_Box_struct, ptr %67, i64 %.lcssa, i32 1
  %108 = getelementptr inbounds %struct.hypre_Box_struct, ptr %67, i64 %.lcssa, i32 1, i64 1
  %109 = getelementptr inbounds [3 x i32], ptr %68, i64 0, i64 1
  %110 = load i32, ptr %107, align 4, !tbaa !7
  %111 = load i32, ptr %68, align 4, !tbaa !7
  %112 = sub nsw i32 %110, %111
  %113 = add nsw i32 %112, 1
  %114 = icmp slt i32 %112, 0
  %115 = select i1 %114, i32 0, i32 %113
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %116 = call i32 @hypre_BoxGetSize(ptr noundef %61, ptr noundef nonnull %9) #33
  %117 = load i32, ptr %5, align 4, !tbaa !7
  %118 = load i32, ptr %9, align 4, !tbaa !7
  %119 = load i32, ptr %40, align 4, !tbaa !7
  %120 = load i32, ptr %41, align 4, !tbaa !7
  %121 = call i32 @llvm.smax.i32(i32 %119, i32 %118)
  %122 = call i32 @llvm.smax.i32(i32 %120, i32 %121)
  %123 = icmp sgt i32 %122, 0
  br i1 %35, label %124, label %386

124:                                              ; preds = %88
  br i1 %123, label %125, label %671

125:                                              ; preds = %124
  %126 = load i32, ptr %98, align 4, !tbaa !7
  %127 = load i32, ptr %65, align 4, !tbaa !7
  %128 = sub nsw i32 %126, %127
  %129 = icmp slt i32 %128, 0
  %130 = add nsw i32 %128, 1
  %131 = select i1 %129, i32 0, i32 %130
  %132 = load i32, ptr %99, align 4, !tbaa !7
  %133 = load i32, ptr %100, align 4, !tbaa !7
  %134 = sub nsw i32 %132, %133
  %135 = icmp slt i32 %134, 0
  %136 = add nsw i32 %134, 1
  %137 = select i1 %135, i32 0, i32 %136
  %138 = mul i32 %131, %137
  %139 = load i32, ptr %39, align 4, !tbaa !7
  %140 = mul i32 %138, %139
  %141 = load i32, ptr %38, align 4, !tbaa !7
  %142 = mul nsw i32 %141, %131
  %143 = load i32, ptr %74, align 4, !tbaa !7
  %144 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 1
  %145 = load i32, ptr %144, align 4, !tbaa !7
  %146 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1, i64 1
  %147 = load i32, ptr %146, align 4, !tbaa !7
  %148 = sub nsw i32 %147, %145
  %149 = icmp slt i32 %148, 0
  %150 = add nsw i32 %148, 1
  %151 = select i1 %149, i32 0, i32 %150
  %152 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1
  %153 = load i32, ptr %152, align 4, !tbaa !7
  %154 = sub nsw i32 %153, %143
  %155 = icmp slt i32 %154, 0
  %156 = add nsw i32 %154, 1
  %157 = select i1 %155, i32 0, i32 %156
  %158 = load i32, ptr %71, align 4, !tbaa !7
  %159 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 1
  %160 = load i32, ptr %159, align 4, !tbaa !7
  %161 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1, i64 1
  %162 = load i32, ptr %161, align 4, !tbaa !7
  %163 = sub nsw i32 %162, %160
  %164 = icmp slt i32 %163, 0
  %165 = add nsw i32 %163, 1
  %166 = select i1 %164, i32 0, i32 %165
  %167 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1
  %168 = load i32, ptr %167, align 4, !tbaa !7
  %169 = sub nsw i32 %168, %158
  %170 = icmp slt i32 %169, 0
  %171 = add nsw i32 %169, 1
  %172 = select i1 %170, i32 0, i32 %171
  %173 = load i32, ptr %68, align 4, !tbaa !7
  %174 = load i32, ptr %109, align 4, !tbaa !7
  %175 = load i32, ptr %108, align 4, !tbaa !7
  %176 = sub nsw i32 %175, %174
  %177 = icmp slt i32 %176, 0
  %178 = add nsw i32 %176, 1
  %179 = select i1 %177, i32 0, i32 %178
  %180 = load i32, ptr %107, align 4, !tbaa !7
  %181 = sub nsw i32 %180, %173
  %182 = icmp slt i32 %181, 0
  %183 = add nsw i32 %181, 1
  %184 = select i1 %182, i32 0, i32 %183
  %185 = icmp sgt i32 %120, 0
  %186 = icmp sgt i32 %119, 0
  %187 = icmp sgt i32 %118, 0
  %188 = sub i32 %184, %118
  %189 = sub i32 %172, %118
  %190 = mul nsw i32 %118, %117
  %191 = sub i32 %142, %190
  %192 = sub i32 %157, %118
  %193 = sub i32 %179, %119
  %194 = mul i32 %193, %184
  %195 = sub i32 %166, %119
  %196 = mul i32 %195, %172
  %197 = mul nsw i32 %119, %142
  %198 = sub i32 %140, %197
  %199 = sub i32 %151, %119
  %200 = mul i32 %199, %157
  br i1 %185, label %201, label %671

201:                                              ; preds = %125
  %202 = load i32, ptr %61, align 4, !tbaa !7
  %203 = sub i32 %202, %173
  %204 = getelementptr inbounds i32, ptr %61, i64 1
  %205 = load i32, ptr %204, align 4, !tbaa !7
  %206 = sub i32 %205, %174
  %207 = getelementptr inbounds i32, ptr %61, i64 2
  %208 = load i32, ptr %207, align 4, !tbaa !7
  %209 = getelementptr inbounds [3 x i32], ptr %68, i64 0, i64 2
  %210 = load i32, ptr %209, align 4, !tbaa !7
  %211 = sub nsw i32 %208, %210
  %212 = mul nsw i32 %179, %211
  %213 = add nsw i32 %206, %212
  %214 = mul nsw i32 %213, %184
  %215 = add nsw i32 %203, %214
  %216 = sub i32 %202, %158
  %217 = sub i32 %205, %160
  %218 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 2
  %219 = load i32, ptr %218, align 4, !tbaa !7
  %220 = sub nsw i32 %208, %219
  %221 = mul nsw i32 %166, %220
  %222 = add nsw i32 %217, %221
  %223 = mul nsw i32 %222, %172
  %224 = add nsw i32 %216, %223
  %225 = load i32, ptr %8, align 4, !tbaa !7
  %226 = sub i32 %225, %127
  %227 = load i32, ptr %36, align 4, !tbaa !7
  %228 = sub i32 %227, %133
  %229 = load i32, ptr %37, align 4, !tbaa !7
  %230 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 2
  %231 = load i32, ptr %230, align 4, !tbaa !7
  %232 = sub nsw i32 %229, %231
  %233 = mul nsw i32 %137, %232
  %234 = add nsw i32 %228, %233
  %235 = mul nsw i32 %234, %131
  %236 = add nsw i32 %226, %235
  %237 = sub i32 %202, %143
  %238 = sub i32 %205, %145
  %239 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 2
  %240 = load i32, ptr %239, align 4, !tbaa !7
  %241 = sub nsw i32 %208, %240
  %242 = mul nsw i32 %151, %241
  %243 = add nsw i32 %238, %242
  %244 = mul nsw i32 %243, %157
  %245 = add nsw i32 %237, %244
  %246 = sext i32 %117 to i64
  %247 = sext i32 %106 to i64
  %248 = sext i32 %115 to i64
  br label %249

249:                                              ; preds = %375, %201
  %250 = phi i32 [ %384, %375 ], [ 0, %201 ]
  %251 = phi i32 [ %382, %375 ], [ %236, %201 ]
  %252 = phi i32 [ %383, %375 ], [ %245, %201 ]
  %253 = phi i32 [ %380, %375 ], [ %215, %201 ]
  %254 = phi i32 [ %381, %375 ], [ %224, %201 ]
  br i1 %186, label %255, label %375

255:                                              ; preds = %364, %249
  %256 = phi i32 [ %373, %364 ], [ 0, %249 ]
  %257 = phi i32 [ %371, %364 ], [ %251, %249 ]
  %258 = phi i32 [ %372, %364 ], [ %252, %249 ]
  %259 = phi i32 [ %369, %364 ], [ %253, %249 ]
  %260 = phi i32 [ %370, %364 ], [ %254, %249 ]
  br i1 %187, label %261, label %364

261:                                              ; preds = %255
  %262 = sext i32 %257 to i64
  %263 = sext i32 %258 to i64
  %264 = sext i32 %259 to i64
  %265 = sext i32 %260 to i64
  br label %266

266:                                              ; preds = %266, %261
  %267 = phi i64 [ %265, %261 ], [ %354, %266 ]
  %268 = phi i64 [ %264, %261 ], [ %353, %266 ]
  %269 = phi i64 [ %263, %261 ], [ %356, %266 ]
  %270 = phi i64 [ %262, %261 ], [ %355, %266 ]
  %271 = phi i32 [ 0, %261 ], [ %357, %266 ]
  %272 = sub nsw i64 %270, %247
  %273 = add nsw i64 %270, %247
  %274 = sub nsw i64 %268, %248
  %275 = add nsw i64 %274, -1
  %276 = getelementptr inbounds double, ptr %78, i64 %267
  %277 = load double, ptr %276, align 8, !tbaa !29
  %278 = getelementptr inbounds double, ptr %80, i64 %272
  %279 = load double, ptr %278, align 8, !tbaa !29
  %280 = fmul double %277, %279
  %281 = getelementptr inbounds double, ptr %75, i64 %275
  %282 = load double, ptr %281, align 8, !tbaa !29
  %283 = fmul double %280, %282
  %284 = getelementptr inbounds double, ptr %96, i64 %269
  store double %283, ptr %284, align 8, !tbaa !29
  %285 = load double, ptr %276, align 8, !tbaa !29
  %286 = getelementptr inbounds double, ptr %79, i64 %272
  %287 = load double, ptr %286, align 8, !tbaa !29
  %288 = fmul double %285, %287
  %289 = getelementptr inbounds double, ptr %75, i64 %274
  %290 = load double, ptr %289, align 8, !tbaa !29
  %291 = getelementptr inbounds double, ptr %82, i64 %272
  %292 = load double, ptr %291, align 8, !tbaa !29
  %293 = fmul double %285, %292
  %294 = call double @llvm.fmuladd.f64(double %288, double %290, double %293)
  %295 = getelementptr inbounds double, ptr %82, i64 %270
  %296 = load double, ptr %295, align 8, !tbaa !29
  %297 = call double @llvm.fmuladd.f64(double %296, double %290, double %294)
  %298 = getelementptr inbounds double, ptr %95, i64 %269
  store double %297, ptr %298, align 8, !tbaa !29
  %299 = add nsw i64 %274, 1
  %300 = load double, ptr %276, align 8, !tbaa !29
  %301 = getelementptr inbounds double, ptr %81, i64 %272
  %302 = load double, ptr %301, align 8, !tbaa !29
  %303 = fmul double %300, %302
  %304 = getelementptr inbounds double, ptr %75, i64 %299
  %305 = load double, ptr %304, align 8, !tbaa !29
  %306 = fmul double %303, %305
  %307 = getelementptr inbounds double, ptr %97, i64 %269
  store double %306, ptr %307, align 8, !tbaa !29
  %308 = add nsw i64 %268, -1
  %309 = getelementptr inbounds double, ptr %80, i64 %270
  %310 = load double, ptr %309, align 8, !tbaa !29
  %311 = load double, ptr %276, align 8, !tbaa !29
  %312 = load double, ptr %278, align 8, !tbaa !29
  %313 = fmul double %311, %312
  %314 = getelementptr inbounds double, ptr %76, i64 %308
  %315 = load double, ptr %314, align 8, !tbaa !29
  %316 = call double @llvm.fmuladd.f64(double %313, double %315, double %310)
  %317 = getelementptr inbounds double, ptr %77, i64 %267
  %318 = load double, ptr %317, align 8, !tbaa !29
  %319 = getelementptr inbounds double, ptr %80, i64 %273
  %320 = load double, ptr %319, align 8, !tbaa !29
  %321 = fmul double %318, %320
  %322 = getelementptr inbounds double, ptr %75, i64 %308
  %323 = load double, ptr %322, align 8, !tbaa !29
  %324 = call double @llvm.fmuladd.f64(double %321, double %323, double %316)
  %325 = getelementptr inbounds double, ptr %94, i64 %269
  store double %324, ptr %325, align 8, !tbaa !29
  %326 = getelementptr inbounds double, ptr %79, i64 %270
  %327 = load double, ptr %326, align 8, !tbaa !29
  %328 = load double, ptr %276, align 8, !tbaa !29
  %329 = load double, ptr %286, align 8, !tbaa !29
  %330 = fmul double %328, %329
  %331 = getelementptr inbounds double, ptr %76, i64 %268
  %332 = load double, ptr %331, align 8, !tbaa !29
  %333 = call double @llvm.fmuladd.f64(double %330, double %332, double %327)
  %334 = load double, ptr %317, align 8, !tbaa !29
  %335 = getelementptr inbounds double, ptr %79, i64 %273
  %336 = load double, ptr %335, align 8, !tbaa !29
  %337 = fmul double %334, %336
  %338 = getelementptr inbounds double, ptr %75, i64 %268
  %339 = load double, ptr %338, align 8, !tbaa !29
  %340 = call double @llvm.fmuladd.f64(double %337, double %339, double %333)
  %341 = getelementptr inbounds double, ptr %83, i64 %272
  %342 = load double, ptr %341, align 8, !tbaa !29
  %343 = call double @llvm.fmuladd.f64(double %328, double %342, double %340)
  %344 = getelementptr inbounds double, ptr %82, i64 %273
  %345 = load double, ptr %344, align 8, !tbaa !29
  %346 = call double @llvm.fmuladd.f64(double %334, double %345, double %343)
  %347 = load double, ptr %295, align 8, !tbaa !29
  %348 = call double @llvm.fmuladd.f64(double %347, double %332, double %346)
  %349 = getelementptr inbounds double, ptr %83, i64 %270
  %350 = load double, ptr %349, align 8, !tbaa !29
  %351 = call double @llvm.fmuladd.f64(double %350, double %339, double %348)
  %352 = getelementptr inbounds double, ptr %93, i64 %269
  store double %351, ptr %352, align 8, !tbaa !29
  %353 = add nsw i64 %268, 1
  %354 = add nsw i64 %267, 1
  %355 = add i64 %270, %246
  %356 = add nsw i64 %269, 1
  %357 = add nuw nsw i32 %271, 1
  %358 = icmp eq i32 %357, %118
  br i1 %358, label %359, label %266, !llvm.loop !424

359:                                              ; preds = %266
  %.lcssa8 = phi i64 [ %353, %266 ]
  %.lcssa7 = phi i64 [ %354, %266 ]
  %.lcssa6 = phi i64 [ %355, %266 ]
  %.lcssa5 = phi i64 [ %356, %266 ]
  %360 = trunc i64 %.lcssa7 to i32
  %361 = trunc i64 %.lcssa8 to i32
  %362 = trunc i64 %.lcssa5 to i32
  %363 = trunc i64 %.lcssa6 to i32
  br label %364

364:                                              ; preds = %359, %255
  %365 = phi i32 [ %260, %255 ], [ %360, %359 ]
  %366 = phi i32 [ %259, %255 ], [ %361, %359 ]
  %367 = phi i32 [ %258, %255 ], [ %362, %359 ]
  %368 = phi i32 [ %257, %255 ], [ %363, %359 ]
  %369 = add nsw i32 %188, %366
  %370 = add nsw i32 %189, %365
  %371 = add nsw i32 %191, %368
  %372 = add nsw i32 %192, %367
  %373 = add nuw nsw i32 %256, 1
  %374 = icmp eq i32 %373, %119
  br i1 %374, label %375, label %255, !llvm.loop !425

375:                                              ; preds = %364, %249
  %376 = phi i32 [ %254, %249 ], [ %370, %364 ]
  %377 = phi i32 [ %253, %249 ], [ %369, %364 ]
  %378 = phi i32 [ %252, %249 ], [ %372, %364 ]
  %379 = phi i32 [ %251, %249 ], [ %371, %364 ]
  %380 = add nsw i32 %377, %194
  %381 = add nsw i32 %376, %196
  %382 = add nsw i32 %198, %379
  %383 = add nsw i32 %378, %200
  %384 = add nuw nsw i32 %250, 1
  %385 = icmp eq i32 %384, %120
  br i1 %385, label %671, label %249, !llvm.loop !426

386:                                              ; preds = %88
  br i1 %123, label %387, label %671

387:                                              ; preds = %386
  %388 = load i32, ptr %98, align 4, !tbaa !7
  %389 = load i32, ptr %65, align 4, !tbaa !7
  %390 = sub nsw i32 %388, %389
  %391 = icmp slt i32 %390, 0
  %392 = add nsw i32 %390, 1
  %393 = select i1 %391, i32 0, i32 %392
  %394 = load i32, ptr %99, align 4, !tbaa !7
  %395 = load i32, ptr %100, align 4, !tbaa !7
  %396 = sub nsw i32 %394, %395
  %397 = icmp slt i32 %396, 0
  %398 = add nsw i32 %396, 1
  %399 = select i1 %397, i32 0, i32 %398
  %400 = mul i32 %393, %399
  %401 = load i32, ptr %39, align 4, !tbaa !7
  %402 = mul i32 %400, %401
  %403 = load i32, ptr %38, align 4, !tbaa !7
  %404 = mul nsw i32 %403, %393
  %405 = load i32, ptr %74, align 4, !tbaa !7
  %406 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 1
  %407 = load i32, ptr %406, align 4, !tbaa !7
  %408 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1, i64 1
  %409 = load i32, ptr %408, align 4, !tbaa !7
  %410 = sub nsw i32 %409, %407
  %411 = icmp slt i32 %410, 0
  %412 = add nsw i32 %410, 1
  %413 = select i1 %411, i32 0, i32 %412
  %414 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1
  %415 = load i32, ptr %414, align 4, !tbaa !7
  %416 = sub nsw i32 %415, %405
  %417 = icmp slt i32 %416, 0
  %418 = add nsw i32 %416, 1
  %419 = select i1 %417, i32 0, i32 %418
  %420 = load i32, ptr %71, align 4, !tbaa !7
  %421 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 1
  %422 = load i32, ptr %421, align 4, !tbaa !7
  %423 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1, i64 1
  %424 = load i32, ptr %423, align 4, !tbaa !7
  %425 = sub nsw i32 %424, %422
  %426 = icmp slt i32 %425, 0
  %427 = add nsw i32 %425, 1
  %428 = select i1 %426, i32 0, i32 %427
  %429 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1
  %430 = load i32, ptr %429, align 4, !tbaa !7
  %431 = sub nsw i32 %430, %420
  %432 = icmp slt i32 %431, 0
  %433 = add nsw i32 %431, 1
  %434 = select i1 %432, i32 0, i32 %433
  %435 = load i32, ptr %68, align 4, !tbaa !7
  %436 = load i32, ptr %109, align 4, !tbaa !7
  %437 = load i32, ptr %108, align 4, !tbaa !7
  %438 = sub nsw i32 %437, %436
  %439 = icmp slt i32 %438, 0
  %440 = add nsw i32 %438, 1
  %441 = select i1 %439, i32 0, i32 %440
  %442 = load i32, ptr %107, align 4, !tbaa !7
  %443 = sub nsw i32 %442, %435
  %444 = icmp slt i32 %443, 0
  %445 = add nsw i32 %443, 1
  %446 = select i1 %444, i32 0, i32 %445
  %447 = icmp sgt i32 %120, 0
  %448 = icmp sgt i32 %119, 0
  %449 = icmp sgt i32 %118, 0
  %450 = sub i32 %446, %118
  %451 = sub i32 %434, %118
  %452 = mul nsw i32 %118, %117
  %453 = sub i32 %404, %452
  %454 = sub i32 %419, %118
  %455 = sub i32 %441, %119
  %456 = mul i32 %455, %446
  %457 = sub i32 %428, %119
  %458 = mul i32 %457, %434
  %459 = mul nsw i32 %119, %404
  %460 = sub i32 %402, %459
  %461 = sub i32 %413, %119
  %462 = mul i32 %461, %419
  br i1 %447, label %463, label %671

463:                                              ; preds = %387
  %464 = load i32, ptr %61, align 4, !tbaa !7
  %465 = sub i32 %464, %435
  %466 = getelementptr inbounds i32, ptr %61, i64 1
  %467 = load i32, ptr %466, align 4, !tbaa !7
  %468 = sub i32 %467, %436
  %469 = getelementptr inbounds i32, ptr %61, i64 2
  %470 = load i32, ptr %469, align 4, !tbaa !7
  %471 = getelementptr inbounds [3 x i32], ptr %68, i64 0, i64 2
  %472 = load i32, ptr %471, align 4, !tbaa !7
  %473 = sub nsw i32 %470, %472
  %474 = mul nsw i32 %441, %473
  %475 = add nsw i32 %468, %474
  %476 = mul nsw i32 %475, %446
  %477 = add nsw i32 %465, %476
  %478 = sub i32 %464, %420
  %479 = sub i32 %467, %422
  %480 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 2
  %481 = load i32, ptr %480, align 4, !tbaa !7
  %482 = sub nsw i32 %470, %481
  %483 = mul nsw i32 %428, %482
  %484 = add nsw i32 %479, %483
  %485 = mul nsw i32 %484, %434
  %486 = add nsw i32 %478, %485
  %487 = load i32, ptr %8, align 4, !tbaa !7
  %488 = sub i32 %487, %389
  %489 = load i32, ptr %36, align 4, !tbaa !7
  %490 = sub i32 %489, %395
  %491 = load i32, ptr %37, align 4, !tbaa !7
  %492 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 2
  %493 = load i32, ptr %492, align 4, !tbaa !7
  %494 = sub nsw i32 %491, %493
  %495 = mul nsw i32 %399, %494
  %496 = add nsw i32 %490, %495
  %497 = mul nsw i32 %496, %393
  %498 = add nsw i32 %488, %497
  %499 = sub i32 %464, %405
  %500 = sub i32 %467, %407
  %501 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 2
  %502 = load i32, ptr %501, align 4, !tbaa !7
  %503 = sub nsw i32 %470, %502
  %504 = mul nsw i32 %413, %503
  %505 = add nsw i32 %500, %504
  %506 = mul nsw i32 %505, %419
  %507 = add nsw i32 %499, %506
  %508 = sext i32 %117 to i64
  %509 = sext i32 %106 to i64
  %510 = sext i32 %115 to i64
  br label %511

511:                                              ; preds = %660, %463
  %512 = phi i32 [ %669, %660 ], [ 0, %463 ]
  %513 = phi i32 [ %667, %660 ], [ %498, %463 ]
  %514 = phi i32 [ %668, %660 ], [ %507, %463 ]
  %515 = phi i32 [ %665, %660 ], [ %477, %463 ]
  %516 = phi i32 [ %666, %660 ], [ %486, %463 ]
  br i1 %448, label %517, label %660

517:                                              ; preds = %649, %511
  %518 = phi i32 [ %658, %649 ], [ 0, %511 ]
  %519 = phi i32 [ %656, %649 ], [ %513, %511 ]
  %520 = phi i32 [ %657, %649 ], [ %514, %511 ]
  %521 = phi i32 [ %654, %649 ], [ %515, %511 ]
  %522 = phi i32 [ %655, %649 ], [ %516, %511 ]
  br i1 %449, label %523, label %649

523:                                              ; preds = %517
  %524 = sext i32 %519 to i64
  %525 = sext i32 %520 to i64
  %526 = sext i32 %521 to i64
  %527 = sext i32 %522 to i64
  br label %528

528:                                              ; preds = %528, %523
  %529 = phi i64 [ %527, %523 ], [ %639, %528 ]
  %530 = phi i64 [ %526, %523 ], [ %638, %528 ]
  %531 = phi i64 [ %525, %523 ], [ %641, %528 ]
  %532 = phi i64 [ %524, %523 ], [ %640, %528 ]
  %533 = phi i32 [ 0, %523 ], [ %642, %528 ]
  %534 = sub nsw i64 %532, %509
  %535 = add nsw i64 %532, %509
  %536 = sub nsw i64 %530, %510
  %537 = add nsw i64 %536, -1
  %538 = getelementptr inbounds double, ptr %78, i64 %529
  %539 = load double, ptr %538, align 8, !tbaa !29
  %540 = getelementptr inbounds double, ptr %80, i64 %534
  %541 = load double, ptr %540, align 8, !tbaa !29
  %542 = fmul double %539, %541
  %543 = getelementptr inbounds double, ptr %75, i64 %537
  %544 = load double, ptr %543, align 8, !tbaa !29
  %545 = getelementptr inbounds double, ptr %91, i64 %534
  %546 = load double, ptr %545, align 8, !tbaa !29
  %547 = fmul double %539, %546
  %548 = call double @llvm.fmuladd.f64(double %542, double %544, double %547)
  %549 = getelementptr inbounds double, ptr %91, i64 %532
  %550 = load double, ptr %549, align 8, !tbaa !29
  %551 = call double @llvm.fmuladd.f64(double %550, double %544, double %548)
  %552 = getelementptr inbounds double, ptr %96, i64 %531
  store double %551, ptr %552, align 8, !tbaa !29
  %553 = load double, ptr %538, align 8, !tbaa !29
  %554 = getelementptr inbounds double, ptr %79, i64 %534
  %555 = load double, ptr %554, align 8, !tbaa !29
  %556 = fmul double %553, %555
  %557 = getelementptr inbounds double, ptr %75, i64 %536
  %558 = load double, ptr %557, align 8, !tbaa !29
  %559 = getelementptr inbounds double, ptr %82, i64 %534
  %560 = load double, ptr %559, align 8, !tbaa !29
  %561 = fmul double %553, %560
  %562 = call double @llvm.fmuladd.f64(double %556, double %558, double %561)
  %563 = getelementptr inbounds double, ptr %82, i64 %532
  %564 = load double, ptr %563, align 8, !tbaa !29
  %565 = call double @llvm.fmuladd.f64(double %564, double %558, double %562)
  %566 = getelementptr inbounds double, ptr %95, i64 %531
  store double %565, ptr %566, align 8, !tbaa !29
  %567 = add nsw i64 %536, 1
  %568 = load double, ptr %538, align 8, !tbaa !29
  %569 = getelementptr inbounds double, ptr %81, i64 %534
  %570 = load double, ptr %569, align 8, !tbaa !29
  %571 = fmul double %568, %570
  %572 = getelementptr inbounds double, ptr %75, i64 %567
  %573 = load double, ptr %572, align 8, !tbaa !29
  %574 = getelementptr inbounds double, ptr %90, i64 %534
  %575 = load double, ptr %574, align 8, !tbaa !29
  %576 = fmul double %568, %575
  %577 = call double @llvm.fmuladd.f64(double %571, double %573, double %576)
  %578 = getelementptr inbounds double, ptr %90, i64 %532
  %579 = load double, ptr %578, align 8, !tbaa !29
  %580 = call double @llvm.fmuladd.f64(double %579, double %573, double %577)
  %581 = getelementptr inbounds double, ptr %97, i64 %531
  store double %580, ptr %581, align 8, !tbaa !29
  %582 = add nsw i64 %530, -1
  %583 = getelementptr inbounds double, ptr %80, i64 %532
  %584 = load double, ptr %583, align 8, !tbaa !29
  %585 = load double, ptr %538, align 8, !tbaa !29
  %586 = load double, ptr %540, align 8, !tbaa !29
  %587 = fmul double %585, %586
  %588 = getelementptr inbounds double, ptr %76, i64 %582
  %589 = load double, ptr %588, align 8, !tbaa !29
  %590 = call double @llvm.fmuladd.f64(double %587, double %589, double %584)
  %591 = getelementptr inbounds double, ptr %77, i64 %529
  %592 = load double, ptr %591, align 8, !tbaa !29
  %593 = getelementptr inbounds double, ptr %80, i64 %535
  %594 = load double, ptr %593, align 8, !tbaa !29
  %595 = fmul double %592, %594
  %596 = getelementptr inbounds double, ptr %75, i64 %582
  %597 = load double, ptr %596, align 8, !tbaa !29
  %598 = call double @llvm.fmuladd.f64(double %595, double %597, double %590)
  %599 = getelementptr inbounds double, ptr %89, i64 %534
  %600 = load double, ptr %599, align 8, !tbaa !29
  %601 = call double @llvm.fmuladd.f64(double %585, double %600, double %598)
  %602 = getelementptr inbounds double, ptr %91, i64 %535
  %603 = load double, ptr %602, align 8, !tbaa !29
  %604 = call double @llvm.fmuladd.f64(double %592, double %603, double %601)
  %605 = load double, ptr %549, align 8, !tbaa !29
  %606 = call double @llvm.fmuladd.f64(double %605, double %589, double %604)
  %607 = getelementptr inbounds double, ptr %89, i64 %532
  %608 = load double, ptr %607, align 8, !tbaa !29
  %609 = call double @llvm.fmuladd.f64(double %608, double %597, double %606)
  %610 = getelementptr inbounds double, ptr %94, i64 %531
  store double %609, ptr %610, align 8, !tbaa !29
  %611 = getelementptr inbounds double, ptr %79, i64 %532
  %612 = load double, ptr %611, align 8, !tbaa !29
  %613 = load double, ptr %538, align 8, !tbaa !29
  %614 = load double, ptr %554, align 8, !tbaa !29
  %615 = fmul double %613, %614
  %616 = getelementptr inbounds double, ptr %76, i64 %530
  %617 = load double, ptr %616, align 8, !tbaa !29
  %618 = call double @llvm.fmuladd.f64(double %615, double %617, double %612)
  %619 = load double, ptr %591, align 8, !tbaa !29
  %620 = getelementptr inbounds double, ptr %79, i64 %535
  %621 = load double, ptr %620, align 8, !tbaa !29
  %622 = fmul double %619, %621
  %623 = getelementptr inbounds double, ptr %75, i64 %530
  %624 = load double, ptr %623, align 8, !tbaa !29
  %625 = call double @llvm.fmuladd.f64(double %622, double %624, double %618)
  %626 = getelementptr inbounds double, ptr %83, i64 %534
  %627 = load double, ptr %626, align 8, !tbaa !29
  %628 = call double @llvm.fmuladd.f64(double %613, double %627, double %625)
  %629 = getelementptr inbounds double, ptr %82, i64 %535
  %630 = load double, ptr %629, align 8, !tbaa !29
  %631 = call double @llvm.fmuladd.f64(double %619, double %630, double %628)
  %632 = load double, ptr %563, align 8, !tbaa !29
  %633 = call double @llvm.fmuladd.f64(double %632, double %617, double %631)
  %634 = getelementptr inbounds double, ptr %83, i64 %532
  %635 = load double, ptr %634, align 8, !tbaa !29
  %636 = call double @llvm.fmuladd.f64(double %635, double %624, double %633)
  %637 = getelementptr inbounds double, ptr %93, i64 %531
  store double %636, ptr %637, align 8, !tbaa !29
  %638 = add nsw i64 %530, 1
  %639 = add nsw i64 %529, 1
  %640 = add i64 %532, %508
  %641 = add nsw i64 %531, 1
  %642 = add nuw nsw i32 %533, 1
  %643 = icmp eq i32 %642, %118
  br i1 %643, label %644, label %528, !llvm.loop !427

644:                                              ; preds = %528
  %.lcssa4 = phi i64 [ %638, %528 ]
  %.lcssa3 = phi i64 [ %639, %528 ]
  %.lcssa2 = phi i64 [ %640, %528 ]
  %.lcssa1 = phi i64 [ %641, %528 ]
  %645 = trunc i64 %.lcssa3 to i32
  %646 = trunc i64 %.lcssa4 to i32
  %647 = trunc i64 %.lcssa1 to i32
  %648 = trunc i64 %.lcssa2 to i32
  br label %649

649:                                              ; preds = %644, %517
  %650 = phi i32 [ %522, %517 ], [ %645, %644 ]
  %651 = phi i32 [ %521, %517 ], [ %646, %644 ]
  %652 = phi i32 [ %520, %517 ], [ %647, %644 ]
  %653 = phi i32 [ %519, %517 ], [ %648, %644 ]
  %654 = add nsw i32 %450, %651
  %655 = add nsw i32 %451, %650
  %656 = add nsw i32 %453, %653
  %657 = add nsw i32 %454, %652
  %658 = add nuw nsw i32 %518, 1
  %659 = icmp eq i32 %658, %119
  br i1 %659, label %660, label %517, !llvm.loop !428

660:                                              ; preds = %649, %511
  %661 = phi i32 [ %516, %511 ], [ %655, %649 ]
  %662 = phi i32 [ %515, %511 ], [ %654, %649 ]
  %663 = phi i32 [ %514, %511 ], [ %657, %649 ]
  %664 = phi i32 [ %513, %511 ], [ %656, %649 ]
  %665 = add nsw i32 %662, %456
  %666 = add nsw i32 %661, %458
  %667 = add nsw i32 %460, %664
  %668 = add nsw i32 %663, %462
  %669 = add nuw nsw i32 %512, 1
  %670 = icmp eq i32 %669, %120
  br i1 %670, label %671, label %511, !llvm.loop !429

671:                                              ; preds = %660, %387, %386, %375, %125, %124
  %672 = add nuw nsw i64 %43, 1
  %673 = load i32, ptr %20, align 8, !tbaa !21
  %674 = sext i32 %673 to i64
  %675 = icmp slt i64 %672, %674
  br i1 %675, label %42, label %676, !llvm.loop !430

676:                                              ; preds = %671, %6
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG2BuildRAPNoSym(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %9) #34
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %11, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !195
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !15
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !195
  %20 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %17, i64 0, i32 1
  %21 = load i32, ptr %20, align 8, !tbaa !21
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %618

23:                                               ; preds = %6
  %24 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !250
  %26 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %25, i64 0, i32 1
  %27 = load i32, ptr %26, align 8, !tbaa !172
  %28 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %29 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %30 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 5
  %31 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 5
  %32 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %33 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %34 = icmp sgt i32 %27, 5
  %35 = icmp eq i32 %27, 5
  %36 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %37 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %38 = getelementptr inbounds i32, ptr %5, i64 1
  %39 = getelementptr inbounds i32, ptr %5, i64 2
  %40 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %41 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  br label %42

42:                                               ; preds = %613, %23
  %43 = phi i64 [ 0, %23 ], [ %614, %613 ]
  %44 = phi i64 [ 0, %23 ], [ %.lcssa, %613 ]
  %45 = phi ptr [ undef, %23 ], [ %90, %613 ]
  %46 = phi ptr [ undef, %23 ], [ %89, %613 ]
  %47 = phi ptr [ undef, %23 ], [ %88, %613 ]
  %48 = getelementptr inbounds i32, ptr %19, i64 %43
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = shl i64 %44, 32
  %51 = ashr exact i64 %50, 32
  br label %52

52:                                               ; preds = %52, %42
  %53 = phi i64 [ %57, %52 ], [ %51, %42 ]
  %54 = getelementptr inbounds i32, ptr %13, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = icmp eq i32 %55, %49
  %57 = add i64 %53, 1
  br i1 %56, label %58, label %52, !llvm.loop !431

58:                                               ; preds = %52
  %.lcssa = phi i64 [ %53, %52 ]
  %59 = trunc i64 %.lcssa to i32
  %60 = load ptr, ptr %17, align 8, !tbaa !23
  %61 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %43
  %62 = call i32 @hypre_StructMapCoarseToFine(ptr noundef %61, ptr noundef %4, ptr noundef %5, ptr noundef nonnull %8) #33
  %63 = load ptr, ptr %28, align 8, !tbaa !24
  %64 = load ptr, ptr %63, align 8, !tbaa !23
  %65 = getelementptr inbounds %struct.hypre_Box_struct, ptr %64, i64 %.lcssa
  %66 = load ptr, ptr %29, align 8, !tbaa !24
  %67 = load ptr, ptr %66, align 8, !tbaa !23
  %68 = getelementptr inbounds %struct.hypre_Box_struct, ptr %67, i64 %.lcssa
  %69 = load ptr, ptr %30, align 8, !tbaa !24
  %70 = load ptr, ptr %69, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa
  %72 = load ptr, ptr %31, align 8, !tbaa !24
  %73 = load ptr, ptr %72, align 8, !tbaa !23
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %75 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %76 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %77 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %78 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %79 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %80 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %81 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %82 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %59, ptr noundef nonnull %7) #33
  br i1 %34, label %83, label %87

83:                                               ; preds = %58
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %84 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %85 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %59, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %86 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %59, ptr noundef nonnull %7) #33
  br label %87

87:                                               ; preds = %83, %58
  %88 = phi ptr [ %86, %83 ], [ %47, %58 ]
  %89 = phi ptr [ %85, %83 ], [ %46, %58 ]
  %90 = phi ptr [ %84, %83 ], [ %45, %58 ]
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %91 = trunc i64 %43 to i32
  %92 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %91, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %93 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %91, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %94 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %91, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %95 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %91, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %96 = getelementptr inbounds %struct.hypre_Box_struct, ptr %64, i64 %.lcssa, i32 1
  %97 = getelementptr inbounds %struct.hypre_Box_struct, ptr %64, i64 %.lcssa, i32 1, i64 1
  %98 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 1
  %99 = load i32, ptr %96, align 4, !tbaa !7
  %100 = load i32, ptr %65, align 4, !tbaa !7
  %101 = sub nsw i32 %99, %100
  %102 = add nsw i32 %101, 1
  %103 = icmp slt i32 %101, 0
  %104 = select i1 %103, i32 0, i32 %102
  %105 = getelementptr inbounds %struct.hypre_Box_struct, ptr %67, i64 %.lcssa, i32 1
  %106 = getelementptr inbounds %struct.hypre_Box_struct, ptr %67, i64 %.lcssa, i32 1, i64 1
  %107 = getelementptr inbounds [3 x i32], ptr %68, i64 0, i64 1
  %108 = load i32, ptr %105, align 4, !tbaa !7
  %109 = load i32, ptr %68, align 4, !tbaa !7
  %110 = sub nsw i32 %108, %109
  %111 = add nsw i32 %110, 1
  %112 = icmp slt i32 %110, 0
  %113 = select i1 %112, i32 0, i32 %111
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %114 = call i32 @hypre_BoxGetSize(ptr noundef %61, ptr noundef nonnull %9) #33
  %115 = load i32, ptr %5, align 4, !tbaa !7
  %116 = load i32, ptr %9, align 4, !tbaa !7
  %117 = load i32, ptr %40, align 4, !tbaa !7
  %118 = load i32, ptr %41, align 4, !tbaa !7
  %119 = call i32 @llvm.smax.i32(i32 %117, i32 %116)
  %120 = call i32 @llvm.smax.i32(i32 %118, i32 %119)
  %121 = icmp sgt i32 %120, 0
  br i1 %35, label %122, label %356

122:                                              ; preds = %87
  br i1 %121, label %123, label %613

123:                                              ; preds = %122
  %124 = load i32, ptr %96, align 4, !tbaa !7
  %125 = load i32, ptr %65, align 4, !tbaa !7
  %126 = sub nsw i32 %124, %125
  %127 = icmp slt i32 %126, 0
  %128 = add nsw i32 %126, 1
  %129 = select i1 %127, i32 0, i32 %128
  %130 = load i32, ptr %97, align 4, !tbaa !7
  %131 = load i32, ptr %98, align 4, !tbaa !7
  %132 = sub nsw i32 %130, %131
  %133 = icmp slt i32 %132, 0
  %134 = add nsw i32 %132, 1
  %135 = select i1 %133, i32 0, i32 %134
  %136 = mul i32 %129, %135
  %137 = load i32, ptr %39, align 4, !tbaa !7
  %138 = mul i32 %136, %137
  %139 = load i32, ptr %38, align 4, !tbaa !7
  %140 = mul nsw i32 %139, %129
  %141 = load i32, ptr %74, align 4, !tbaa !7
  %142 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 1
  %143 = load i32, ptr %142, align 4, !tbaa !7
  %144 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1, i64 1
  %145 = load i32, ptr %144, align 4, !tbaa !7
  %146 = sub nsw i32 %145, %143
  %147 = icmp slt i32 %146, 0
  %148 = add nsw i32 %146, 1
  %149 = select i1 %147, i32 0, i32 %148
  %150 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1
  %151 = load i32, ptr %150, align 4, !tbaa !7
  %152 = sub nsw i32 %151, %141
  %153 = icmp slt i32 %152, 0
  %154 = add nsw i32 %152, 1
  %155 = select i1 %153, i32 0, i32 %154
  %156 = load i32, ptr %71, align 4, !tbaa !7
  %157 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 1
  %158 = load i32, ptr %157, align 4, !tbaa !7
  %159 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1, i64 1
  %160 = load i32, ptr %159, align 4, !tbaa !7
  %161 = sub nsw i32 %160, %158
  %162 = icmp slt i32 %161, 0
  %163 = add nsw i32 %161, 1
  %164 = select i1 %162, i32 0, i32 %163
  %165 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1
  %166 = load i32, ptr %165, align 4, !tbaa !7
  %167 = sub nsw i32 %166, %156
  %168 = icmp slt i32 %167, 0
  %169 = add nsw i32 %167, 1
  %170 = select i1 %168, i32 0, i32 %169
  %171 = load i32, ptr %68, align 4, !tbaa !7
  %172 = load i32, ptr %107, align 4, !tbaa !7
  %173 = load i32, ptr %106, align 4, !tbaa !7
  %174 = sub nsw i32 %173, %172
  %175 = icmp slt i32 %174, 0
  %176 = add nsw i32 %174, 1
  %177 = select i1 %175, i32 0, i32 %176
  %178 = load i32, ptr %105, align 4, !tbaa !7
  %179 = sub nsw i32 %178, %171
  %180 = icmp slt i32 %179, 0
  %181 = add nsw i32 %179, 1
  %182 = select i1 %180, i32 0, i32 %181
  %183 = icmp sgt i32 %118, 0
  %184 = icmp sgt i32 %117, 0
  %185 = icmp sgt i32 %116, 0
  %186 = sub i32 %182, %116
  %187 = sub i32 %170, %116
  %188 = mul nsw i32 %116, %115
  %189 = sub i32 %140, %188
  %190 = sub i32 %155, %116
  %191 = sub i32 %177, %117
  %192 = mul i32 %191, %182
  %193 = sub i32 %164, %117
  %194 = mul i32 %193, %170
  %195 = mul nsw i32 %117, %140
  %196 = sub i32 %138, %195
  %197 = sub i32 %149, %117
  %198 = mul i32 %197, %155
  br i1 %183, label %199, label %613

199:                                              ; preds = %123
  %200 = load i32, ptr %61, align 4, !tbaa !7
  %201 = sub i32 %200, %171
  %202 = getelementptr inbounds i32, ptr %61, i64 1
  %203 = load i32, ptr %202, align 4, !tbaa !7
  %204 = sub i32 %203, %172
  %205 = getelementptr inbounds i32, ptr %61, i64 2
  %206 = load i32, ptr %205, align 4, !tbaa !7
  %207 = getelementptr inbounds [3 x i32], ptr %68, i64 0, i64 2
  %208 = load i32, ptr %207, align 4, !tbaa !7
  %209 = sub nsw i32 %206, %208
  %210 = mul nsw i32 %177, %209
  %211 = add nsw i32 %204, %210
  %212 = mul nsw i32 %211, %182
  %213 = add nsw i32 %201, %212
  %214 = sub i32 %200, %156
  %215 = sub i32 %203, %158
  %216 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 2
  %217 = load i32, ptr %216, align 4, !tbaa !7
  %218 = sub nsw i32 %206, %217
  %219 = mul nsw i32 %164, %218
  %220 = add nsw i32 %215, %219
  %221 = mul nsw i32 %220, %170
  %222 = add nsw i32 %214, %221
  %223 = load i32, ptr %8, align 4, !tbaa !7
  %224 = sub i32 %223, %125
  %225 = load i32, ptr %36, align 4, !tbaa !7
  %226 = sub i32 %225, %131
  %227 = load i32, ptr %37, align 4, !tbaa !7
  %228 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 2
  %229 = load i32, ptr %228, align 4, !tbaa !7
  %230 = sub nsw i32 %227, %229
  %231 = mul nsw i32 %135, %230
  %232 = add nsw i32 %226, %231
  %233 = mul nsw i32 %232, %129
  %234 = add nsw i32 %224, %233
  %235 = sub i32 %200, %141
  %236 = sub i32 %203, %143
  %237 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 2
  %238 = load i32, ptr %237, align 4, !tbaa !7
  %239 = sub nsw i32 %206, %238
  %240 = mul nsw i32 %149, %239
  %241 = add nsw i32 %236, %240
  %242 = mul nsw i32 %241, %155
  %243 = add nsw i32 %235, %242
  %244 = sext i32 %115 to i64
  %245 = sext i32 %104 to i64
  %246 = sext i32 %113 to i64
  br label %247

247:                                              ; preds = %345, %199
  %248 = phi i32 [ %354, %345 ], [ 0, %199 ]
  %249 = phi i32 [ %352, %345 ], [ %234, %199 ]
  %250 = phi i32 [ %353, %345 ], [ %243, %199 ]
  %251 = phi i32 [ %350, %345 ], [ %213, %199 ]
  %252 = phi i32 [ %351, %345 ], [ %222, %199 ]
  br i1 %184, label %253, label %345

253:                                              ; preds = %334, %247
  %254 = phi i32 [ %343, %334 ], [ 0, %247 ]
  %255 = phi i32 [ %341, %334 ], [ %249, %247 ]
  %256 = phi i32 [ %342, %334 ], [ %250, %247 ]
  %257 = phi i32 [ %339, %334 ], [ %251, %247 ]
  %258 = phi i32 [ %340, %334 ], [ %252, %247 ]
  br i1 %185, label %259, label %334

259:                                              ; preds = %253
  %260 = sext i32 %255 to i64
  %261 = sext i32 %256 to i64
  %262 = sext i32 %257 to i64
  %263 = sext i32 %258 to i64
  br label %264

264:                                              ; preds = %264, %259
  %265 = phi i64 [ %263, %259 ], [ %324, %264 ]
  %266 = phi i64 [ %262, %259 ], [ %306, %264 ]
  %267 = phi i64 [ %261, %259 ], [ %326, %264 ]
  %268 = phi i64 [ %260, %259 ], [ %325, %264 ]
  %269 = phi i32 [ 0, %259 ], [ %327, %264 ]
  %270 = sub nsw i64 %268, %245
  %271 = add nsw i64 %268, %245
  %272 = add nsw i64 %266, %246
  %273 = add nsw i64 %272, 1
  %274 = getelementptr inbounds double, ptr %77, i64 %265
  %275 = load double, ptr %274, align 8, !tbaa !29
  %276 = getelementptr inbounds double, ptr %81, i64 %271
  %277 = load double, ptr %276, align 8, !tbaa !29
  %278 = fmul double %275, %277
  %279 = getelementptr inbounds double, ptr %76, i64 %273
  %280 = load double, ptr %279, align 8, !tbaa !29
  %281 = fmul double %278, %280
  %282 = getelementptr inbounds double, ptr %94, i64 %267
  store double %281, ptr %282, align 8, !tbaa !29
  %283 = load double, ptr %274, align 8, !tbaa !29
  %284 = getelementptr inbounds double, ptr %79, i64 %271
  %285 = load double, ptr %284, align 8, !tbaa !29
  %286 = fmul double %283, %285
  %287 = getelementptr inbounds double, ptr %76, i64 %272
  %288 = load double, ptr %287, align 8, !tbaa !29
  %289 = getelementptr inbounds double, ptr %82, i64 %271
  %290 = load double, ptr %289, align 8, !tbaa !29
  %291 = fmul double %283, %290
  %292 = call double @llvm.fmuladd.f64(double %286, double %288, double %291)
  %293 = getelementptr inbounds double, ptr %82, i64 %268
  %294 = load double, ptr %293, align 8, !tbaa !29
  %295 = call double @llvm.fmuladd.f64(double %294, double %288, double %292)
  %296 = getelementptr inbounds double, ptr %93, i64 %267
  store double %295, ptr %296, align 8, !tbaa !29
  %297 = add nsw i64 %272, -1
  %298 = load double, ptr %274, align 8, !tbaa !29
  %299 = getelementptr inbounds double, ptr %80, i64 %271
  %300 = load double, ptr %299, align 8, !tbaa !29
  %301 = fmul double %298, %300
  %302 = getelementptr inbounds double, ptr %76, i64 %297
  %303 = load double, ptr %302, align 8, !tbaa !29
  %304 = fmul double %301, %303
  %305 = getelementptr inbounds double, ptr %95, i64 %267
  store double %304, ptr %305, align 8, !tbaa !29
  %306 = add nsw i64 %266, 1
  %307 = getelementptr inbounds double, ptr %81, i64 %268
  %308 = load double, ptr %307, align 8, !tbaa !29
  %309 = getelementptr inbounds double, ptr %78, i64 %265
  %310 = load double, ptr %309, align 8, !tbaa !29
  %311 = getelementptr inbounds double, ptr %81, i64 %270
  %312 = load double, ptr %311, align 8, !tbaa !29
  %313 = fmul double %310, %312
  %314 = getelementptr inbounds double, ptr %76, i64 %306
  %315 = load double, ptr %314, align 8, !tbaa !29
  %316 = call double @llvm.fmuladd.f64(double %313, double %315, double %308)
  %317 = load double, ptr %274, align 8, !tbaa !29
  %318 = load double, ptr %276, align 8, !tbaa !29
  %319 = fmul double %317, %318
  %320 = getelementptr inbounds double, ptr %75, i64 %306
  %321 = load double, ptr %320, align 8, !tbaa !29
  %322 = call double @llvm.fmuladd.f64(double %319, double %321, double %316)
  %323 = getelementptr inbounds double, ptr %92, i64 %267
  store double %322, ptr %323, align 8, !tbaa !29
  %324 = add nsw i64 %265, 1
  %325 = add i64 %268, %244
  %326 = add nsw i64 %267, 1
  %327 = add nuw nsw i32 %269, 1
  %328 = icmp eq i32 %327, %116
  br i1 %328, label %329, label %264, !llvm.loop !432

329:                                              ; preds = %264
  %.lcssa8 = phi i64 [ %306, %264 ]
  %.lcssa7 = phi i64 [ %324, %264 ]
  %.lcssa6 = phi i64 [ %325, %264 ]
  %.lcssa5 = phi i64 [ %326, %264 ]
  %330 = trunc i64 %.lcssa7 to i32
  %331 = trunc i64 %.lcssa8 to i32
  %332 = trunc i64 %.lcssa5 to i32
  %333 = trunc i64 %.lcssa6 to i32
  br label %334

334:                                              ; preds = %329, %253
  %335 = phi i32 [ %258, %253 ], [ %330, %329 ]
  %336 = phi i32 [ %257, %253 ], [ %331, %329 ]
  %337 = phi i32 [ %256, %253 ], [ %332, %329 ]
  %338 = phi i32 [ %255, %253 ], [ %333, %329 ]
  %339 = add nsw i32 %186, %336
  %340 = add nsw i32 %187, %335
  %341 = add nsw i32 %189, %338
  %342 = add nsw i32 %190, %337
  %343 = add nuw nsw i32 %254, 1
  %344 = icmp eq i32 %343, %117
  br i1 %344, label %345, label %253, !llvm.loop !433

345:                                              ; preds = %334, %247
  %346 = phi i32 [ %252, %247 ], [ %340, %334 ]
  %347 = phi i32 [ %251, %247 ], [ %339, %334 ]
  %348 = phi i32 [ %250, %247 ], [ %342, %334 ]
  %349 = phi i32 [ %249, %247 ], [ %341, %334 ]
  %350 = add nsw i32 %347, %192
  %351 = add nsw i32 %346, %194
  %352 = add nsw i32 %196, %349
  %353 = add nsw i32 %348, %198
  %354 = add nuw nsw i32 %248, 1
  %355 = icmp eq i32 %354, %118
  br i1 %355, label %613, label %247, !llvm.loop !434

356:                                              ; preds = %87
  br i1 %121, label %357, label %613

357:                                              ; preds = %356
  %358 = load i32, ptr %96, align 4, !tbaa !7
  %359 = load i32, ptr %65, align 4, !tbaa !7
  %360 = sub nsw i32 %358, %359
  %361 = icmp slt i32 %360, 0
  %362 = add nsw i32 %360, 1
  %363 = select i1 %361, i32 0, i32 %362
  %364 = load i32, ptr %97, align 4, !tbaa !7
  %365 = load i32, ptr %98, align 4, !tbaa !7
  %366 = sub nsw i32 %364, %365
  %367 = icmp slt i32 %366, 0
  %368 = add nsw i32 %366, 1
  %369 = select i1 %367, i32 0, i32 %368
  %370 = mul i32 %363, %369
  %371 = load i32, ptr %39, align 4, !tbaa !7
  %372 = mul i32 %370, %371
  %373 = load i32, ptr %38, align 4, !tbaa !7
  %374 = mul nsw i32 %373, %363
  %375 = load i32, ptr %74, align 4, !tbaa !7
  %376 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 1
  %377 = load i32, ptr %376, align 4, !tbaa !7
  %378 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1, i64 1
  %379 = load i32, ptr %378, align 4, !tbaa !7
  %380 = sub nsw i32 %379, %377
  %381 = icmp slt i32 %380, 0
  %382 = add nsw i32 %380, 1
  %383 = select i1 %381, i32 0, i32 %382
  %384 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %43, i32 1
  %385 = load i32, ptr %384, align 4, !tbaa !7
  %386 = sub nsw i32 %385, %375
  %387 = icmp slt i32 %386, 0
  %388 = add nsw i32 %386, 1
  %389 = select i1 %387, i32 0, i32 %388
  %390 = load i32, ptr %71, align 4, !tbaa !7
  %391 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 1
  %392 = load i32, ptr %391, align 4, !tbaa !7
  %393 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1, i64 1
  %394 = load i32, ptr %393, align 4, !tbaa !7
  %395 = sub nsw i32 %394, %392
  %396 = icmp slt i32 %395, 0
  %397 = add nsw i32 %395, 1
  %398 = select i1 %396, i32 0, i32 %397
  %399 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %.lcssa, i32 1
  %400 = load i32, ptr %399, align 4, !tbaa !7
  %401 = sub nsw i32 %400, %390
  %402 = icmp slt i32 %401, 0
  %403 = add nsw i32 %401, 1
  %404 = select i1 %402, i32 0, i32 %403
  %405 = load i32, ptr %68, align 4, !tbaa !7
  %406 = load i32, ptr %107, align 4, !tbaa !7
  %407 = load i32, ptr %106, align 4, !tbaa !7
  %408 = sub nsw i32 %407, %406
  %409 = icmp slt i32 %408, 0
  %410 = add nsw i32 %408, 1
  %411 = select i1 %409, i32 0, i32 %410
  %412 = load i32, ptr %105, align 4, !tbaa !7
  %413 = sub nsw i32 %412, %405
  %414 = icmp slt i32 %413, 0
  %415 = add nsw i32 %413, 1
  %416 = select i1 %414, i32 0, i32 %415
  %417 = icmp sgt i32 %118, 0
  %418 = icmp sgt i32 %117, 0
  %419 = icmp sgt i32 %116, 0
  %420 = sub i32 %416, %116
  %421 = sub i32 %404, %116
  %422 = mul nsw i32 %116, %115
  %423 = sub i32 %374, %422
  %424 = sub i32 %389, %116
  %425 = sub i32 %411, %117
  %426 = mul i32 %425, %416
  %427 = sub i32 %398, %117
  %428 = mul i32 %427, %404
  %429 = mul nsw i32 %117, %374
  %430 = sub i32 %372, %429
  %431 = sub i32 %383, %117
  %432 = mul i32 %431, %389
  br i1 %417, label %433, label %613

433:                                              ; preds = %357
  %434 = load i32, ptr %61, align 4, !tbaa !7
  %435 = sub i32 %434, %405
  %436 = getelementptr inbounds i32, ptr %61, i64 1
  %437 = load i32, ptr %436, align 4, !tbaa !7
  %438 = sub i32 %437, %406
  %439 = getelementptr inbounds i32, ptr %61, i64 2
  %440 = load i32, ptr %439, align 4, !tbaa !7
  %441 = getelementptr inbounds [3 x i32], ptr %68, i64 0, i64 2
  %442 = load i32, ptr %441, align 4, !tbaa !7
  %443 = sub nsw i32 %440, %442
  %444 = mul nsw i32 %411, %443
  %445 = add nsw i32 %438, %444
  %446 = mul nsw i32 %445, %416
  %447 = add nsw i32 %435, %446
  %448 = sub i32 %434, %390
  %449 = sub i32 %437, %392
  %450 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 2
  %451 = load i32, ptr %450, align 4, !tbaa !7
  %452 = sub nsw i32 %440, %451
  %453 = mul nsw i32 %398, %452
  %454 = add nsw i32 %449, %453
  %455 = mul nsw i32 %454, %404
  %456 = add nsw i32 %448, %455
  %457 = load i32, ptr %8, align 4, !tbaa !7
  %458 = sub i32 %457, %359
  %459 = load i32, ptr %36, align 4, !tbaa !7
  %460 = sub i32 %459, %365
  %461 = load i32, ptr %37, align 4, !tbaa !7
  %462 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 2
  %463 = load i32, ptr %462, align 4, !tbaa !7
  %464 = sub nsw i32 %461, %463
  %465 = mul nsw i32 %369, %464
  %466 = add nsw i32 %460, %465
  %467 = mul nsw i32 %466, %363
  %468 = add nsw i32 %458, %467
  %469 = sub i32 %434, %375
  %470 = sub i32 %437, %377
  %471 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 2
  %472 = load i32, ptr %471, align 4, !tbaa !7
  %473 = sub nsw i32 %440, %472
  %474 = mul nsw i32 %383, %473
  %475 = add nsw i32 %470, %474
  %476 = mul nsw i32 %475, %389
  %477 = add nsw i32 %469, %476
  %478 = sext i32 %115 to i64
  %479 = sext i32 %104 to i64
  %480 = sext i32 %113 to i64
  br label %481

481:                                              ; preds = %602, %433
  %482 = phi i32 [ %611, %602 ], [ 0, %433 ]
  %483 = phi i32 [ %609, %602 ], [ %468, %433 ]
  %484 = phi i32 [ %610, %602 ], [ %477, %433 ]
  %485 = phi i32 [ %607, %602 ], [ %447, %433 ]
  %486 = phi i32 [ %608, %602 ], [ %456, %433 ]
  br i1 %418, label %487, label %602

487:                                              ; preds = %591, %481
  %488 = phi i32 [ %600, %591 ], [ 0, %481 ]
  %489 = phi i32 [ %598, %591 ], [ %483, %481 ]
  %490 = phi i32 [ %599, %591 ], [ %484, %481 ]
  %491 = phi i32 [ %596, %591 ], [ %485, %481 ]
  %492 = phi i32 [ %597, %591 ], [ %486, %481 ]
  br i1 %419, label %493, label %591

493:                                              ; preds = %487
  %494 = sext i32 %489 to i64
  %495 = sext i32 %490 to i64
  %496 = sext i32 %491 to i64
  %497 = sext i32 %492 to i64
  br label %498

498:                                              ; preds = %498, %493
  %499 = phi i64 [ %497, %493 ], [ %581, %498 ]
  %500 = phi i64 [ %496, %493 ], [ %552, %498 ]
  %501 = phi i64 [ %495, %493 ], [ %583, %498 ]
  %502 = phi i64 [ %494, %493 ], [ %582, %498 ]
  %503 = phi i32 [ 0, %493 ], [ %584, %498 ]
  %504 = sub nsw i64 %502, %479
  %505 = add nsw i64 %502, %479
  %506 = add nsw i64 %500, %480
  %507 = add nsw i64 %506, 1
  %508 = getelementptr inbounds double, ptr %77, i64 %499
  %509 = load double, ptr %508, align 8, !tbaa !29
  %510 = getelementptr inbounds double, ptr %81, i64 %505
  %511 = load double, ptr %510, align 8, !tbaa !29
  %512 = fmul double %509, %511
  %513 = getelementptr inbounds double, ptr %76, i64 %507
  %514 = load double, ptr %513, align 8, !tbaa !29
  %515 = getelementptr inbounds double, ptr %88, i64 %505
  %516 = load double, ptr %515, align 8, !tbaa !29
  %517 = fmul double %509, %516
  %518 = call double @llvm.fmuladd.f64(double %512, double %514, double %517)
  %519 = getelementptr inbounds double, ptr %88, i64 %502
  %520 = load double, ptr %519, align 8, !tbaa !29
  %521 = call double @llvm.fmuladd.f64(double %520, double %514, double %518)
  %522 = getelementptr inbounds double, ptr %94, i64 %501
  store double %521, ptr %522, align 8, !tbaa !29
  %523 = load double, ptr %508, align 8, !tbaa !29
  %524 = getelementptr inbounds double, ptr %79, i64 %505
  %525 = load double, ptr %524, align 8, !tbaa !29
  %526 = fmul double %523, %525
  %527 = getelementptr inbounds double, ptr %76, i64 %506
  %528 = load double, ptr %527, align 8, !tbaa !29
  %529 = getelementptr inbounds double, ptr %82, i64 %505
  %530 = load double, ptr %529, align 8, !tbaa !29
  %531 = fmul double %523, %530
  %532 = call double @llvm.fmuladd.f64(double %526, double %528, double %531)
  %533 = getelementptr inbounds double, ptr %82, i64 %502
  %534 = load double, ptr %533, align 8, !tbaa !29
  %535 = call double @llvm.fmuladd.f64(double %534, double %528, double %532)
  %536 = getelementptr inbounds double, ptr %93, i64 %501
  store double %535, ptr %536, align 8, !tbaa !29
  %537 = add nsw i64 %506, -1
  %538 = load double, ptr %508, align 8, !tbaa !29
  %539 = getelementptr inbounds double, ptr %80, i64 %505
  %540 = load double, ptr %539, align 8, !tbaa !29
  %541 = fmul double %538, %540
  %542 = getelementptr inbounds double, ptr %76, i64 %537
  %543 = load double, ptr %542, align 8, !tbaa !29
  %544 = getelementptr inbounds double, ptr %89, i64 %505
  %545 = load double, ptr %544, align 8, !tbaa !29
  %546 = fmul double %538, %545
  %547 = call double @llvm.fmuladd.f64(double %541, double %543, double %546)
  %548 = getelementptr inbounds double, ptr %89, i64 %502
  %549 = load double, ptr %548, align 8, !tbaa !29
  %550 = call double @llvm.fmuladd.f64(double %549, double %543, double %547)
  %551 = getelementptr inbounds double, ptr %95, i64 %501
  store double %550, ptr %551, align 8, !tbaa !29
  %552 = add nsw i64 %500, 1
  %553 = getelementptr inbounds double, ptr %81, i64 %502
  %554 = load double, ptr %553, align 8, !tbaa !29
  %555 = getelementptr inbounds double, ptr %78, i64 %499
  %556 = load double, ptr %555, align 8, !tbaa !29
  %557 = getelementptr inbounds double, ptr %81, i64 %504
  %558 = load double, ptr %557, align 8, !tbaa !29
  %559 = fmul double %556, %558
  %560 = getelementptr inbounds double, ptr %76, i64 %552
  %561 = load double, ptr %560, align 8, !tbaa !29
  %562 = call double @llvm.fmuladd.f64(double %559, double %561, double %554)
  %563 = load double, ptr %508, align 8, !tbaa !29
  %564 = load double, ptr %510, align 8, !tbaa !29
  %565 = fmul double %563, %564
  %566 = getelementptr inbounds double, ptr %75, i64 %552
  %567 = load double, ptr %566, align 8, !tbaa !29
  %568 = call double @llvm.fmuladd.f64(double %565, double %567, double %562)
  %569 = getelementptr inbounds double, ptr %88, i64 %504
  %570 = load double, ptr %569, align 8, !tbaa !29
  %571 = call double @llvm.fmuladd.f64(double %556, double %570, double %568)
  %572 = getelementptr inbounds double, ptr %90, i64 %505
  %573 = load double, ptr %572, align 8, !tbaa !29
  %574 = call double @llvm.fmuladd.f64(double %563, double %573, double %571)
  %575 = getelementptr inbounds double, ptr %90, i64 %502
  %576 = load double, ptr %575, align 8, !tbaa !29
  %577 = call double @llvm.fmuladd.f64(double %576, double %561, double %574)
  %578 = load double, ptr %519, align 8, !tbaa !29
  %579 = call double @llvm.fmuladd.f64(double %578, double %567, double %577)
  %580 = getelementptr inbounds double, ptr %92, i64 %501
  store double %579, ptr %580, align 8, !tbaa !29
  %581 = add nsw i64 %499, 1
  %582 = add i64 %502, %478
  %583 = add nsw i64 %501, 1
  %584 = add nuw nsw i32 %503, 1
  %585 = icmp eq i32 %584, %116
  br i1 %585, label %586, label %498, !llvm.loop !435

586:                                              ; preds = %498
  %.lcssa4 = phi i64 [ %552, %498 ]
  %.lcssa3 = phi i64 [ %581, %498 ]
  %.lcssa2 = phi i64 [ %582, %498 ]
  %.lcssa1 = phi i64 [ %583, %498 ]
  %587 = trunc i64 %.lcssa3 to i32
  %588 = trunc i64 %.lcssa4 to i32
  %589 = trunc i64 %.lcssa1 to i32
  %590 = trunc i64 %.lcssa2 to i32
  br label %591

591:                                              ; preds = %586, %487
  %592 = phi i32 [ %492, %487 ], [ %587, %586 ]
  %593 = phi i32 [ %491, %487 ], [ %588, %586 ]
  %594 = phi i32 [ %490, %487 ], [ %589, %586 ]
  %595 = phi i32 [ %489, %487 ], [ %590, %586 ]
  %596 = add nsw i32 %420, %593
  %597 = add nsw i32 %421, %592
  %598 = add nsw i32 %423, %595
  %599 = add nsw i32 %424, %594
  %600 = add nuw nsw i32 %488, 1
  %601 = icmp eq i32 %600, %117
  br i1 %601, label %602, label %487, !llvm.loop !436

602:                                              ; preds = %591, %481
  %603 = phi i32 [ %486, %481 ], [ %597, %591 ]
  %604 = phi i32 [ %485, %481 ], [ %596, %591 ]
  %605 = phi i32 [ %484, %481 ], [ %599, %591 ]
  %606 = phi i32 [ %483, %481 ], [ %598, %591 ]
  %607 = add nsw i32 %604, %426
  %608 = add nsw i32 %603, %428
  %609 = add nsw i32 %430, %606
  %610 = add nsw i32 %605, %432
  %611 = add nuw nsw i32 %482, 1
  %612 = icmp eq i32 %611, %118
  br i1 %612, label %613, label %481, !llvm.loop !437

613:                                              ; preds = %602, %357, %356, %345, %123, %122
  %614 = add nuw nsw i64 %43, 1
  %615 = load i32, ptr %20, align 8, !tbaa !21
  %616 = sext i32 %615 to i64
  %617 = icmp slt i64 %614, %616
  br i1 %617, label %42, label %618, !llvm.loop !438

618:                                              ; preds = %613, %6
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG2RAPPeriodicSym(ptr noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) #0 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !15
  %8 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %7, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !20
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %7, i64 0, i32 9, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %162

13:                                               ; preds = %3
  %14 = tail call i32 @hypre_StructMatrixAssemble(ptr noundef nonnull %0) #33
  %15 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %9, i64 0, i32 1
  %16 = load i32, ptr %15, align 8, !tbaa !21
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %162

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %20 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %21 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  %22 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %23 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  br label %24

24:                                               ; preds = %157, %18
  %25 = phi i64 [ 0, %18 ], [ %158, %157 ]
  %26 = load ptr, ptr %9, align 8, !tbaa !23
  %27 = getelementptr inbounds %struct.hypre_Box_struct, ptr %26, i64 %25
  %28 = load ptr, ptr %19, align 8, !tbaa !24
  %29 = load ptr, ptr %28, align 8, !tbaa !23
  %30 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 %25
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 %25, i32 1
  %32 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 %25, i32 1, i64 1
  %33 = getelementptr inbounds [3 x i32], ptr %30, i64 0, i64 1
  %34 = trunc i64 %25 to i32
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(12) %4, i8 0, i64 12, i1 false)
  %35 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %34, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  store i32 0, ptr %21, align 4, !tbaa !7
  %36 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %34, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %20, align 4, !tbaa !7
  store i32 0, ptr %21, align 4, !tbaa !7
  %37 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %34, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %20, align 4, !tbaa !7
  store i32 0, ptr %21, align 4, !tbaa !7
  %38 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %34, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %20, align 4, !tbaa !7
  store i32 0, ptr %21, align 4, !tbaa !7
  %39 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %34, ptr noundef nonnull %4) #33
  %40 = call i32 @hypre_BoxGetSize(ptr noundef %27, ptr noundef nonnull %5) #33
  %41 = load i32, ptr %27, align 4, !tbaa !7
  %42 = load i32, ptr %30, align 4, !tbaa !7
  %43 = sub nsw i32 %41, %42
  %44 = getelementptr inbounds i32, ptr %27, i64 1
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = load i32, ptr %33, align 4, !tbaa !7
  %47 = sub i32 %45, %46
  %48 = getelementptr inbounds i32, ptr %27, i64 2
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = getelementptr inbounds [3 x i32], ptr %30, i64 0, i64 2
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = sub nsw i32 %49, %51
  %53 = load i32, ptr %32, align 4, !tbaa !7
  %54 = sub nsw i32 %53, %46
  %55 = add nsw i32 %54, 1
  %56 = icmp slt i32 %54, 0
  %57 = select i1 %56, i32 0, i32 %55
  %58 = mul nsw i32 %57, %52
  %59 = add nsw i32 %47, %58
  %60 = load i32, ptr %31, align 4, !tbaa !7
  %61 = sub nsw i32 %60, %42
  %62 = add nsw i32 %61, 1
  %63 = icmp slt i32 %61, 0
  %64 = select i1 %63, i32 0, i32 %62
  %65 = mul nsw i32 %59, %64
  %66 = add nsw i32 %65, %43
  %67 = load i32, ptr %5, align 4, !tbaa !7
  %68 = load i32, ptr %22, align 4, !tbaa !7
  %69 = load i32, ptr %23, align 4, !tbaa !7
  %70 = call i32 @llvm.smax.i32(i32 %68, i32 %67)
  %71 = call i32 @llvm.smax.i32(i32 %69, i32 %70)
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %157

73:                                               ; preds = %24
  %74 = icmp sgt i32 %69, 0
  %75 = icmp sgt i32 %68, 0
  %76 = icmp sgt i32 %67, 0
  %77 = sub i32 %64, %67
  %78 = sub i32 %57, %68
  %79 = mul i32 %64, %78
  br i1 %74, label %88, label %157

80:                                               ; preds = %123
  br i1 %72, label %81, label %157

81:                                               ; preds = %80
  %82 = icmp sgt i32 %69, 0
  %83 = icmp sgt i32 %68, 0
  %84 = icmp sgt i32 %67, 0
  %85 = sub i32 %64, %67
  %86 = sub i32 %57, %68
  %87 = mul i32 %64, %86
  br i1 %82, label %128, label %157

88:                                               ; preds = %123, %73
  %89 = phi i32 [ %126, %123 ], [ 0, %73 ]
  %90 = phi i32 [ %125, %123 ], [ %66, %73 ]
  br i1 %75, label %91, label %123

91:                                               ; preds = %118, %88
  %92 = phi i32 [ %121, %118 ], [ 0, %88 ]
  %93 = phi i32 [ %120, %118 ], [ %90, %88 ]
  br i1 %76, label %94, label %118

94:                                               ; preds = %91
  %95 = sext i32 %93 to i64
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ %95, %94 ], [ %113, %96 ]
  %98 = phi i32 [ 0, %94 ], [ %114, %96 ]
  %99 = add nsw i64 %97, -1
  %100 = getelementptr inbounds double, ptr %39, i64 %99
  %101 = load double, ptr %100, align 8, !tbaa !29
  %102 = getelementptr inbounds double, ptr %38, i64 %97
  %103 = load double, ptr %102, align 8, !tbaa !29
  %104 = fadd double %101, %103
  %105 = getelementptr inbounds double, ptr %36, i64 %97
  %106 = load double, ptr %105, align 8, !tbaa !29
  %107 = fadd double %106, %104
  store double %107, ptr %105, align 8, !tbaa !29
  %108 = getelementptr inbounds double, ptr %37, i64 %97
  %109 = load double, ptr %108, align 8, !tbaa !29
  %110 = getelementptr inbounds double, ptr %35, i64 %97
  %111 = load double, ptr %110, align 8, !tbaa !29
  %112 = call double @llvm.fmuladd.f64(double %109, double 2.000000e+00, double %111)
  store double %112, ptr %110, align 8, !tbaa !29
  %113 = add nsw i64 %97, 1
  %114 = add nuw nsw i32 %98, 1
  %115 = icmp eq i32 %114, %67
  br i1 %115, label %116, label %96, !llvm.loop !439

116:                                              ; preds = %96
  %.lcssa = phi i64 [ %113, %96 ]
  %117 = trunc i64 %.lcssa to i32
  br label %118

118:                                              ; preds = %116, %91
  %119 = phi i32 [ %93, %91 ], [ %117, %116 ]
  %120 = add nsw i32 %77, %119
  %121 = add nuw nsw i32 %92, 1
  %122 = icmp eq i32 %121, %68
  br i1 %122, label %123, label %91, !llvm.loop !440

123:                                              ; preds = %118, %88
  %124 = phi i32 [ %90, %88 ], [ %120, %118 ]
  %125 = add nsw i32 %124, %79
  %126 = add nuw nsw i32 %89, 1
  %127 = icmp eq i32 %126, %69
  br i1 %127, label %80, label %88, !llvm.loop !441

128:                                              ; preds = %152, %81
  %129 = phi i32 [ %155, %152 ], [ 0, %81 ]
  %130 = phi i32 [ %154, %152 ], [ %66, %81 ]
  br i1 %83, label %131, label %152

131:                                              ; preds = %147, %128
  %132 = phi i32 [ %150, %147 ], [ 0, %128 ]
  %133 = phi i32 [ %149, %147 ], [ %130, %128 ]
  br i1 %84, label %134, label %147

134:                                              ; preds = %131
  %135 = sext i32 %133 to i64
  br label %136

136:                                              ; preds = %136, %134
  %137 = phi i64 [ %135, %134 ], [ %142, %136 ]
  %138 = phi i32 [ 0, %134 ], [ %143, %136 ]
  %139 = getelementptr inbounds double, ptr %38, i64 %137
  store double 0.000000e+00, ptr %139, align 8, !tbaa !29
  %140 = getelementptr inbounds double, ptr %37, i64 %137
  store double 0.000000e+00, ptr %140, align 8, !tbaa !29
  %141 = getelementptr inbounds double, ptr %39, i64 %137
  store double 0.000000e+00, ptr %141, align 8, !tbaa !29
  %142 = add nsw i64 %137, 1
  %143 = add nuw nsw i32 %138, 1
  %144 = icmp eq i32 %143, %67
  br i1 %144, label %145, label %136, !llvm.loop !442

145:                                              ; preds = %136
  %.lcssa1 = phi i64 [ %142, %136 ]
  %146 = trunc i64 %.lcssa1 to i32
  br label %147

147:                                              ; preds = %145, %131
  %148 = phi i32 [ %133, %131 ], [ %146, %145 ]
  %149 = add nsw i32 %85, %148
  %150 = add nuw nsw i32 %132, 1
  %151 = icmp eq i32 %150, %68
  br i1 %151, label %152, label %131, !llvm.loop !443

152:                                              ; preds = %147, %128
  %153 = phi i32 [ %130, %128 ], [ %149, %147 ]
  %154 = add nsw i32 %153, %87
  %155 = add nuw nsw i32 %129, 1
  %156 = icmp eq i32 %155, %69
  br i1 %156, label %157, label %128, !llvm.loop !444

157:                                              ; preds = %152, %81, %80, %73, %24
  %158 = add nuw nsw i64 %25, 1
  %159 = load i32, ptr %15, align 8, !tbaa !21
  %160 = sext i32 %159 to i64
  %161 = icmp slt i64 %158, %160
  br i1 %161, label %24, label %162, !llvm.loop !445

162:                                              ; preds = %157, %13, %3
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG2RAPPeriodicNoSym(ptr noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) #0 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !15
  %8 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %7, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !20
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %7, i64 0, i32 9, i64 1
  %11 = load i32, ptr %10, align 4, !tbaa !7
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %139

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %9, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !21
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %139

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %19 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %20 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  %21 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %22 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  br label %23

23:                                               ; preds = %134, %17
  %24 = phi i64 [ 0, %17 ], [ %135, %134 ]
  %25 = load ptr, ptr %9, align 8, !tbaa !23
  %26 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 %24
  %27 = load ptr, ptr %18, align 8, !tbaa !24
  %28 = load ptr, ptr %27, align 8, !tbaa !23
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %29 = trunc i64 %24 to i32
  %30 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %31 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %32 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %33 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %34 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %35 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %36 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %37 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %19, align 4, !tbaa !7
  store i32 0, ptr %20, align 4, !tbaa !7
  %38 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %29, ptr noundef nonnull %4) #33
  %39 = call i32 @hypre_BoxGetSize(ptr noundef %26, ptr noundef nonnull %5) #33
  %40 = load i32, ptr %5, align 4, !tbaa !7
  %41 = load i32, ptr %21, align 4, !tbaa !7
  %42 = load i32, ptr %22, align 4, !tbaa !7
  %43 = call i32 @llvm.smax.i32(i32 %41, i32 %40)
  %44 = call i32 @llvm.smax.i32(i32 %42, i32 %43)
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %134

46:                                               ; preds = %23
  %47 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %24
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = getelementptr inbounds [3 x i32], ptr %47, i64 0, i64 1
  %50 = load i32, ptr %49, align 4, !tbaa !7
  %51 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %24, i32 1, i64 1
  %52 = load i32, ptr %51, align 4, !tbaa !7
  %53 = sub nsw i32 %52, %50
  %54 = icmp slt i32 %53, 0
  %55 = add nsw i32 %53, 1
  %56 = select i1 %54, i32 0, i32 %55
  %57 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %24, i32 1
  %58 = load i32, ptr %57, align 4, !tbaa !7
  %59 = sub nsw i32 %58, %48
  %60 = icmp slt i32 %59, 0
  %61 = add nsw i32 %59, 1
  %62 = select i1 %60, i32 0, i32 %61
  %63 = icmp sgt i32 %42, 0
  %64 = icmp sgt i32 %41, 0
  %65 = icmp sgt i32 %40, 0
  %66 = sub i32 %62, %40
  %67 = sub i32 %56, %41
  %68 = mul i32 %62, %67
  br i1 %63, label %69, label %134

69:                                               ; preds = %46
  %70 = load i32, ptr %26, align 4, !tbaa !7
  %71 = sub i32 %70, %48
  %72 = getelementptr inbounds i32, ptr %26, i64 1
  %73 = load i32, ptr %72, align 4, !tbaa !7
  %74 = sub i32 %73, %50
  %75 = getelementptr inbounds i32, ptr %26, i64 2
  %76 = load i32, ptr %75, align 4, !tbaa !7
  %77 = getelementptr inbounds [3 x i32], ptr %47, i64 0, i64 2
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = sub nsw i32 %76, %78
  %80 = mul nsw i32 %56, %79
  %81 = add nsw i32 %74, %80
  %82 = mul nsw i32 %81, %62
  %83 = add nsw i32 %71, %82
  br label %84

84:                                               ; preds = %129, %69
  %85 = phi i32 [ %132, %129 ], [ 0, %69 ]
  %86 = phi i32 [ %131, %129 ], [ %83, %69 ]
  br i1 %64, label %87, label %129

87:                                               ; preds = %124, %84
  %88 = phi i32 [ %127, %124 ], [ 0, %84 ]
  %89 = phi i32 [ %126, %124 ], [ %86, %84 ]
  br i1 %65, label %90, label %124

90:                                               ; preds = %87
  %91 = sext i32 %89 to i64
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi i64 [ %91, %90 ], [ %119, %92 ]
  %94 = phi i32 [ 0, %90 ], [ %120, %92 ]
  %95 = getelementptr inbounds double, ptr %38, i64 %93
  %96 = load double, ptr %95, align 8, !tbaa !29
  %97 = getelementptr inbounds double, ptr %33, i64 %93
  %98 = load double, ptr %97, align 8, !tbaa !29
  %99 = fadd double %96, %98
  %100 = getelementptr inbounds double, ptr %31, i64 %93
  %101 = load double, ptr %100, align 8, !tbaa !29
  %102 = fadd double %101, %99
  store double %102, ptr %100, align 8, !tbaa !29
  store double 0.000000e+00, ptr %95, align 8, !tbaa !29
  store double 0.000000e+00, ptr %97, align 8, !tbaa !29
  %103 = getelementptr inbounds double, ptr %36, i64 %93
  %104 = load double, ptr %103, align 8, !tbaa !29
  %105 = getelementptr inbounds double, ptr %32, i64 %93
  %106 = load double, ptr %105, align 8, !tbaa !29
  %107 = fadd double %104, %106
  %108 = getelementptr inbounds double, ptr %30, i64 %93
  %109 = load double, ptr %108, align 8, !tbaa !29
  %110 = fadd double %109, %107
  store double %110, ptr %108, align 8, !tbaa !29
  store double 0.000000e+00, ptr %103, align 8, !tbaa !29
  store double 0.000000e+00, ptr %105, align 8, !tbaa !29
  %111 = getelementptr inbounds double, ptr %37, i64 %93
  %112 = load double, ptr %111, align 8, !tbaa !29
  %113 = getelementptr inbounds double, ptr %34, i64 %93
  %114 = load double, ptr %113, align 8, !tbaa !29
  %115 = fadd double %112, %114
  %116 = getelementptr inbounds double, ptr %35, i64 %93
  %117 = load double, ptr %116, align 8, !tbaa !29
  %118 = fadd double %117, %115
  store double %118, ptr %116, align 8, !tbaa !29
  store double 0.000000e+00, ptr %111, align 8, !tbaa !29
  store double 0.000000e+00, ptr %113, align 8, !tbaa !29
  %119 = add nsw i64 %93, 1
  %120 = add nuw nsw i32 %94, 1
  %121 = icmp eq i32 %120, %40
  br i1 %121, label %122, label %92, !llvm.loop !446

122:                                              ; preds = %92
  %.lcssa = phi i64 [ %119, %92 ]
  %123 = trunc i64 %.lcssa to i32
  br label %124

124:                                              ; preds = %122, %87
  %125 = phi i32 [ %89, %87 ], [ %123, %122 ]
  %126 = add nsw i32 %66, %125
  %127 = add nuw nsw i32 %88, 1
  %128 = icmp eq i32 %127, %41
  br i1 %128, label %129, label %87, !llvm.loop !447

129:                                              ; preds = %124, %84
  %130 = phi i32 [ %86, %84 ], [ %126, %124 ]
  %131 = add nsw i32 %130, %68
  %132 = add nuw nsw i32 %85, 1
  %133 = icmp eq i32 %132, %42
  br i1 %133, label %134, label %84, !llvm.loop !448

134:                                              ; preds = %129, %46, %23
  %135 = add nuw nsw i64 %24, 1
  %136 = load i32, ptr %14, align 8, !tbaa !21
  %137 = sext i32 %136 to i64
  %138 = icmp slt i64 %135, %137
  br i1 %138, label %23, label %139, !llvm.loop !449

139:                                              ; preds = %134, %13, %3
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMG3CreateRAPOp(ptr nocapture noundef readnone %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readnone %2, ptr noundef %3) #0 {
  %5 = alloca [6 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #34
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %5, ptr noundef nonnull align 16 dereferenceable(24) @__const.hypre_SMG3CreateRAPOp.RAP_num_ghost, i64 24, i1 false)
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !250
  %8 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !172
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 10
  %11 = load i32, ptr %10, align 8, !tbaa !19
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %9, 16
  br i1 %12, label %14, label %69

14:                                               ; preds = %4
  br i1 %13, label %15, label %44

15:                                               ; preds = %14
  %16 = tail call ptr @hypre_CAlloc(i32 noundef 15, i32 noundef 12) #33
  br label %17

17:                                               ; preds = %41, %15
  %18 = phi i32 [ 0, %15 ], [ %.lcssa.lcssa, %41 ]
  %19 = phi i32 [ -1, %15 ], [ %42, %41 ]
  br label %20

20:                                               ; preds = %38, %17
  %21 = phi i32 [ %18, %17 ], [ %.lcssa, %38 ]
  %22 = phi i32 [ -1, %17 ], [ %39, %38 ]
  br label %23

23:                                               ; preds = %34, %20
  %24 = phi i32 [ %21, %20 ], [ %35, %34 ]
  %25 = phi i32 [ -1, %20 ], [ %36, %34 ]
  %26 = mul nsw i32 %25, %22
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %23
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds [3 x i32], ptr %16, i64 %29
  store i32 %25, ptr %30, align 4, !tbaa !7
  %31 = getelementptr inbounds [3 x i32], ptr %16, i64 %29, i64 1
  store i32 %22, ptr %31, align 4, !tbaa !7
  %32 = getelementptr inbounds [3 x i32], ptr %16, i64 %29, i64 2
  store i32 %19, ptr %32, align 4, !tbaa !7
  %33 = add nsw i32 %24, 1
  br label %34

34:                                               ; preds = %28, %23
  %35 = phi i32 [ %33, %28 ], [ %24, %23 ]
  %36 = add nsw i32 %25, 1
  %37 = icmp eq i32 %36, 2
  br i1 %37, label %38, label %23, !llvm.loop !450

38:                                               ; preds = %34
  %.lcssa = phi i32 [ %35, %34 ]
  %39 = add nsw i32 %22, 1
  %40 = icmp eq i32 %39, 2
  br i1 %40, label %41, label %20, !llvm.loop !451

41:                                               ; preds = %38
  %.lcssa.lcssa = phi i32 [ %.lcssa, %38 ]
  %42 = add nsw i32 %19, 1
  %43 = icmp eq i32 %42, 2
  br i1 %43, label %136, label %17, !llvm.loop !452

44:                                               ; preds = %14
  %45 = tail call ptr @hypre_CAlloc(i32 noundef 27, i32 noundef 12) #33
  br label %46

46:                                               ; preds = %66, %44
  %47 = phi i64 [ 0, %44 ], [ %.lcssa1.lcssa, %66 ]
  %48 = phi i32 [ -1, %44 ], [ %67, %66 ]
  br label %49

49:                                               ; preds = %63, %46
  %50 = phi i64 [ %47, %46 ], [ %.lcssa1, %63 ]
  %51 = phi i32 [ -1, %46 ], [ %64, %63 ]
  %52 = shl i64 %50, 32
  %53 = ashr exact i64 %52, 32
  br label %54

54:                                               ; preds = %54, %49
  %55 = phi i64 [ %53, %49 ], [ %60, %54 ]
  %56 = phi i32 [ -1, %49 ], [ %61, %54 ]
  %57 = getelementptr inbounds [3 x i32], ptr %45, i64 %55
  store i32 %56, ptr %57, align 4, !tbaa !7
  %58 = getelementptr inbounds [3 x i32], ptr %45, i64 %55, i64 1
  store i32 %51, ptr %58, align 4, !tbaa !7
  %59 = getelementptr inbounds [3 x i32], ptr %45, i64 %55, i64 2
  store i32 %48, ptr %59, align 4, !tbaa !7
  %60 = add nsw i64 %55, 1
  %61 = add nsw i32 %56, 1
  %62 = icmp eq i32 %61, 2
  br i1 %62, label %63, label %54, !llvm.loop !453

63:                                               ; preds = %54
  %.lcssa1 = phi i64 [ %60, %54 ]
  %64 = add nsw i32 %51, 1
  %65 = icmp eq i32 %64, 2
  br i1 %65, label %66, label %49, !llvm.loop !454

66:                                               ; preds = %63
  %.lcssa1.lcssa = phi i64 [ %.lcssa1, %63 ]
  %67 = add nsw i32 %48, 1
  %68 = icmp eq i32 %67, 2
  br i1 %68, label %136, label %46, !llvm.loop !455

69:                                               ; preds = %4
  br i1 %13, label %70, label %103

70:                                               ; preds = %69
  %71 = tail call ptr @hypre_CAlloc(i32 noundef 8, i32 noundef 12) #33
  br label %72

72:                                               ; preds = %100, %70
  %73 = phi i32 [ 0, %70 ], [ %.lcssa2.lcssa, %100 ]
  %74 = phi i32 [ -1, %70 ], [ %101, %100 ]
  br label %75

75:                                               ; preds = %97, %72
  %76 = phi i32 [ %73, %72 ], [ %.lcssa2, %97 ]
  %77 = phi i32 [ -1, %72 ], [ %98, %97 ]
  %78 = add nsw i32 %77, %74
  br label %79

79:                                               ; preds = %93, %75
  %80 = phi i32 [ %76, %75 ], [ %94, %93 ]
  %81 = phi i32 [ -1, %75 ], [ %95, %93 ]
  %82 = mul nsw i32 %81, %77
  %83 = icmp eq i32 %82, 0
  %84 = add nsw i32 %78, %81
  %85 = icmp slt i32 %84, 1
  %86 = and i1 %83, %85
  br i1 %86, label %87, label %93

87:                                               ; preds = %79
  %88 = sext i32 %80 to i64
  %89 = getelementptr inbounds [3 x i32], ptr %71, i64 %88
  store i32 %81, ptr %89, align 4, !tbaa !7
  %90 = getelementptr inbounds [3 x i32], ptr %71, i64 %88, i64 1
  store i32 %77, ptr %90, align 4, !tbaa !7
  %91 = getelementptr inbounds [3 x i32], ptr %71, i64 %88, i64 2
  store i32 %74, ptr %91, align 4, !tbaa !7
  %92 = add nsw i32 %80, 1
  br label %93

93:                                               ; preds = %87, %79
  %94 = phi i32 [ %92, %87 ], [ %80, %79 ]
  %95 = add nsw i32 %81, 1
  %96 = icmp eq i32 %95, 2
  br i1 %96, label %97, label %79, !llvm.loop !456

97:                                               ; preds = %93
  %.lcssa2 = phi i32 [ %94, %93 ]
  %98 = add nsw i32 %77, 1
  %99 = icmp eq i32 %98, 2
  br i1 %99, label %100, label %75, !llvm.loop !457

100:                                              ; preds = %97
  %.lcssa2.lcssa = phi i32 [ %.lcssa2, %97 ]
  %101 = add nsw i32 %74, 1
  %102 = icmp eq i32 %74, 0
  br i1 %102, label %136, label %72, !llvm.loop !458

103:                                              ; preds = %69
  %104 = tail call ptr @hypre_CAlloc(i32 noundef 14, i32 noundef 12) #33
  br label %105

105:                                              ; preds = %133, %103
  %106 = phi i32 [ 0, %103 ], [ %.lcssa3.lcssa, %133 ]
  %107 = phi i32 [ -1, %103 ], [ %134, %133 ]
  %108 = icmp slt i32 %107, 0
  br label %109

109:                                              ; preds = %130, %105
  %110 = phi i32 [ %106, %105 ], [ %.lcssa3, %130 ]
  %111 = phi i32 [ -1, %105 ], [ %131, %130 ]
  %112 = icmp slt i32 %111, 1
  br label %113

113:                                              ; preds = %126, %109
  %114 = phi i32 [ %110, %109 ], [ %127, %126 ]
  %115 = phi i32 [ -1, %109 ], [ %128, %126 ]
  br i1 %108, label %120, label %116

116:                                              ; preds = %113
  %117 = add nsw i32 %115, %111
  %118 = icmp slt i32 %117, 1
  %119 = and i1 %112, %118
  br i1 %119, label %120, label %126

120:                                              ; preds = %116, %113
  %121 = sext i32 %114 to i64
  %122 = getelementptr inbounds [3 x i32], ptr %104, i64 %121
  store i32 %115, ptr %122, align 4, !tbaa !7
  %123 = getelementptr inbounds [3 x i32], ptr %104, i64 %121, i64 1
  store i32 %111, ptr %123, align 4, !tbaa !7
  %124 = getelementptr inbounds [3 x i32], ptr %104, i64 %121, i64 2
  store i32 %107, ptr %124, align 4, !tbaa !7
  %125 = add nsw i32 %114, 1
  br label %126

126:                                              ; preds = %120, %116
  %127 = phi i32 [ %125, %120 ], [ %114, %116 ]
  %128 = add nsw i32 %115, 1
  %129 = icmp eq i32 %128, 2
  br i1 %129, label %130, label %113, !llvm.loop !459

130:                                              ; preds = %126
  %.lcssa3 = phi i32 [ %127, %126 ]
  %131 = add nsw i32 %111, 1
  %132 = icmp eq i32 %131, 2
  br i1 %132, label %133, label %109, !llvm.loop !460

133:                                              ; preds = %130
  %.lcssa3.lcssa = phi i32 [ %.lcssa3, %130 ]
  %134 = add nsw i32 %107, 1
  %135 = icmp eq i32 %107, 0
  br i1 %135, label %136, label %105, !llvm.loop !461

136:                                              ; preds = %133, %100, %66, %41
  %137 = phi i32 [ 15, %41 ], [ 27, %66 ], [ 8, %100 ], [ 14, %133 ]
  %138 = phi ptr [ %16, %41 ], [ %45, %66 ], [ %71, %100 ], [ %104, %133 ]
  %139 = tail call ptr @hypre_StructStencilCreate(i32 noundef 3, i32 noundef %137, ptr noundef %138) #33
  %140 = load i32, ptr %1, align 8, !tbaa !221
  %141 = tail call ptr @hypre_StructMatrixCreate(i32 noundef %140, ptr noundef %3, ptr noundef %139) #33
  %142 = tail call i32 @hypre_StructStencilDestroy(ptr noundef %139) #33
  %143 = load i32, ptr %10, align 8, !tbaa !19
  %144 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %141, i64 0, i32 10
  store i32 %143, ptr %144, align 8, !tbaa !19
  %145 = load i32, ptr %10, align 8, !tbaa !19
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %151, label %147

147:                                              ; preds = %136
  %148 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 1
  store i32 0, ptr %148, align 4, !tbaa !7
  %149 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 3
  store i32 0, ptr %149, align 4, !tbaa !7
  %150 = getelementptr inbounds [6 x i32], ptr %5, i64 0, i64 5
  store i32 0, ptr %150, align 4, !tbaa !7
  br label %151

151:                                              ; preds = %147, %136
  %152 = call i32 @hypre_StructMatrixSetNumGhost(ptr noundef nonnull %141, ptr noundef nonnull %5) #33
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #34
  ret ptr %141
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG3BuildRAPSym(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %9) #34
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !250
  %12 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %11, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !172
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !15
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !195
  %18 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %19, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %19, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !195
  %24 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %21, i64 0, i32 1
  %25 = load i32, ptr %24, align 8, !tbaa !21
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %1757

27:                                               ; preds = %6
  %28 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %29 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %30 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 5
  %31 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 5
  %32 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %33 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %34 = icmp sgt i32 %13, 7
  %35 = icmp ugt i32 %13, 15
  %36 = icmp ugt i32 %13, 19
  %37 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %38 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %39 = getelementptr inbounds i32, ptr %5, i64 1
  %40 = getelementptr inbounds i32, ptr %5, i64 2
  %41 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %42 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  br label %43

43:                                               ; preds = %1752, %27
  %44 = phi i64 [ 0, %27 ], [ %1753, %1752 ]
  %45 = phi i64 [ 0, %27 ], [ %.lcssa, %1752 ]
  %46 = phi ptr [ undef, %27 ], [ %135, %1752 ]
  %47 = phi ptr [ undef, %27 ], [ %134, %1752 ]
  %48 = phi ptr [ undef, %27 ], [ %133, %1752 ]
  %49 = phi ptr [ undef, %27 ], [ %132, %1752 ]
  %50 = phi ptr [ undef, %27 ], [ %131, %1752 ]
  %51 = phi ptr [ undef, %27 ], [ %130, %1752 ]
  %52 = phi ptr [ undef, %27 ], [ %126, %1752 ]
  %53 = phi ptr [ undef, %27 ], [ %127, %1752 ]
  %54 = phi ptr [ undef, %27 ], [ %128, %1752 ]
  %55 = phi ptr [ undef, %27 ], [ %129, %1752 ]
  %56 = phi ptr [ undef, %27 ], [ %142, %1752 ]
  %57 = phi ptr [ undef, %27 ], [ %141, %1752 ]
  %58 = phi ptr [ undef, %27 ], [ %140, %1752 ]
  %59 = phi ptr [ undef, %27 ], [ %139, %1752 ]
  %60 = phi ptr [ undef, %27 ], [ %138, %1752 ]
  %61 = phi ptr [ undef, %27 ], [ %137, %1752 ]
  %62 = phi ptr [ undef, %27 ], [ %165, %1752 ]
  %63 = phi ptr [ undef, %27 ], [ %164, %1752 ]
  %64 = phi ptr [ undef, %27 ], [ %163, %1752 ]
  %65 = phi ptr [ undef, %27 ], [ %162, %1752 ]
  %66 = phi ptr [ undef, %27 ], [ %161, %1752 ]
  %67 = phi ptr [ undef, %27 ], [ %160, %1752 ]
  %68 = getelementptr inbounds i32, ptr %23, i64 %44
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = shl i64 %45, 32
  %71 = ashr exact i64 %70, 32
  br label %72

72:                                               ; preds = %72, %43
  %73 = phi i64 [ %77, %72 ], [ %71, %43 ]
  %74 = getelementptr inbounds i32, ptr %17, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = icmp eq i32 %75, %69
  %77 = add i64 %73, 1
  br i1 %76, label %78, label %72, !llvm.loop !462

78:                                               ; preds = %72
  %.lcssa = phi i64 [ %73, %72 ]
  %79 = trunc i64 %.lcssa to i32
  %80 = load ptr, ptr %21, align 8, !tbaa !23
  %81 = getelementptr inbounds %struct.hypre_Box_struct, ptr %80, i64 %44
  %82 = call i32 @hypre_StructMapCoarseToFine(ptr noundef %81, ptr noundef %4, ptr noundef %5, ptr noundef nonnull %8) #33
  %83 = load ptr, ptr %28, align 8, !tbaa !24
  %84 = load ptr, ptr %83, align 8, !tbaa !23
  %85 = getelementptr inbounds %struct.hypre_Box_struct, ptr %84, i64 %.lcssa
  %86 = load ptr, ptr %29, align 8, !tbaa !24
  %87 = load ptr, ptr %86, align 8, !tbaa !23
  %88 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %.lcssa
  %89 = load ptr, ptr %30, align 8, !tbaa !24
  %90 = load ptr, ptr %89, align 8, !tbaa !23
  %91 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa
  %92 = load ptr, ptr %31, align 8, !tbaa !24
  %93 = load ptr, ptr %92, align 8, !tbaa !23
  %94 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %95 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %96 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %97 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %98 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %99 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %100 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %101 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %102 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %103 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %104 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %105 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br i1 %34, label %106, label %125

106:                                              ; preds = %78
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %107 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %108 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %109 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %110 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %111 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %112 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br i1 %35, label %113, label %125

113:                                              ; preds = %106
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %114 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %115 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %116 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %117 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br i1 %36, label %118, label %125

118:                                              ; preds = %113
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %119 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %120 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %121 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %122 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %123 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %124 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br label %125

125:                                              ; preds = %118, %113, %106, %78
  %126 = phi ptr [ %114, %118 ], [ %114, %113 ], [ %52, %106 ], [ %52, %78 ]
  %127 = phi ptr [ %115, %118 ], [ %115, %113 ], [ %53, %106 ], [ %53, %78 ]
  %128 = phi ptr [ %116, %118 ], [ %116, %113 ], [ %54, %106 ], [ %54, %78 ]
  %129 = phi ptr [ %117, %118 ], [ %117, %113 ], [ %55, %106 ], [ %55, %78 ]
  %130 = phi ptr [ %112, %118 ], [ %112, %113 ], [ %112, %106 ], [ %51, %78 ]
  %131 = phi ptr [ %111, %118 ], [ %111, %113 ], [ %111, %106 ], [ %50, %78 ]
  %132 = phi ptr [ %110, %118 ], [ %110, %113 ], [ %110, %106 ], [ %49, %78 ]
  %133 = phi ptr [ %109, %118 ], [ %109, %113 ], [ %109, %106 ], [ %48, %78 ]
  %134 = phi ptr [ %108, %118 ], [ %108, %113 ], [ %108, %106 ], [ %47, %78 ]
  %135 = phi ptr [ %107, %118 ], [ %107, %113 ], [ %107, %106 ], [ %46, %78 ]
  %136 = phi i1 [ true, %118 ], [ true, %113 ], [ false, %106 ], [ false, %78 ]
  %137 = phi ptr [ %124, %118 ], [ %61, %113 ], [ %61, %106 ], [ %61, %78 ]
  %138 = phi ptr [ %123, %118 ], [ %60, %113 ], [ %60, %106 ], [ %60, %78 ]
  %139 = phi ptr [ %122, %118 ], [ %59, %113 ], [ %59, %106 ], [ %59, %78 ]
  %140 = phi ptr [ %121, %118 ], [ %58, %113 ], [ %58, %106 ], [ %58, %78 ]
  %141 = phi ptr [ %120, %118 ], [ %57, %113 ], [ %57, %106 ], [ %57, %78 ]
  %142 = phi ptr [ %119, %118 ], [ %56, %113 ], [ %56, %106 ], [ %56, %78 ]
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %143 = trunc i64 %44 to i32
  %144 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %145 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %146 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %147 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %148 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %149 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %150 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %151 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  br i1 %136, label %152, label %159

152:                                              ; preds = %125
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %153 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %154 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %155 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %156 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %157 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %158 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %143, ptr noundef nonnull %7) #33
  br label %159

159:                                              ; preds = %152, %125
  %160 = phi ptr [ %158, %152 ], [ %67, %125 ]
  %161 = phi ptr [ %157, %152 ], [ %66, %125 ]
  %162 = phi ptr [ %156, %152 ], [ %65, %125 ]
  %163 = phi ptr [ %155, %152 ], [ %64, %125 ]
  %164 = phi ptr [ %154, %152 ], [ %63, %125 ]
  %165 = phi ptr [ %153, %152 ], [ %62, %125 ]
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %166 = getelementptr inbounds %struct.hypre_Box_struct, ptr %84, i64 %.lcssa, i32 1
  %167 = getelementptr inbounds %struct.hypre_Box_struct, ptr %84, i64 %.lcssa, i32 1, i64 1
  %168 = load i32, ptr %167, align 4, !tbaa !7
  %169 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 1
  %170 = load i32, ptr %169, align 4, !tbaa !7
  %171 = sub nsw i32 %168, %170
  %172 = add nsw i32 %171, 1
  %173 = icmp slt i32 %171, 0
  %174 = select i1 %173, i32 0, i32 %172
  %175 = load i32, ptr %166, align 4, !tbaa !7
  %176 = load i32, ptr %85, align 4, !tbaa !7
  %177 = sub nsw i32 %175, %176
  %178 = add nsw i32 %177, 1
  %179 = icmp slt i32 %177, 0
  %180 = select i1 %179, i32 0, i32 %178
  %181 = mul nsw i32 %180, %174
  %182 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %.lcssa, i32 1
  %183 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %.lcssa, i32 1, i64 1
  %184 = load i32, ptr %183, align 4, !tbaa !7
  %185 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 1
  %186 = load i32, ptr %185, align 4, !tbaa !7
  %187 = sub nsw i32 %184, %186
  %188 = add nsw i32 %187, 1
  %189 = icmp slt i32 %187, 0
  %190 = select i1 %189, i32 0, i32 %188
  %191 = load i32, ptr %182, align 4, !tbaa !7
  %192 = load i32, ptr %88, align 4, !tbaa !7
  %193 = sub nsw i32 %191, %192
  %194 = add nsw i32 %193, 1
  %195 = icmp slt i32 %193, 0
  %196 = select i1 %195, i32 0, i32 %194
  %197 = mul nsw i32 %196, %190
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %198 = load i32, ptr %182, align 4, !tbaa !7
  %199 = load i32, ptr %88, align 4, !tbaa !7
  %200 = sub nsw i32 %198, %199
  %201 = add nsw i32 %200, 1
  %202 = icmp slt i32 %200, 0
  %203 = select i1 %202, i32 0, i32 %201
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  switch i32 %13, label %1284 [
    i32 7, label %204
    i32 15, label %510
    i32 19, label %862
  ]

204:                                              ; preds = %159
  %205 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %206 = load i32, ptr %5, align 4, !tbaa !7
  %207 = load i32, ptr %9, align 4, !tbaa !7
  %208 = load i32, ptr %41, align 4, !tbaa !7
  %209 = load i32, ptr %42, align 4, !tbaa !7
  %210 = call i32 @llvm.smax.i32(i32 %208, i32 %207)
  %211 = call i32 @llvm.smax.i32(i32 %209, i32 %210)
  %212 = icmp sgt i32 %211, 0
  br i1 %212, label %213, label %1752

213:                                              ; preds = %204
  %214 = load i32, ptr %166, align 4, !tbaa !7
  %215 = load i32, ptr %85, align 4, !tbaa !7
  %216 = sub nsw i32 %214, %215
  %217 = icmp slt i32 %216, 0
  %218 = add nsw i32 %216, 1
  %219 = select i1 %217, i32 0, i32 %218
  %220 = load i32, ptr %167, align 4, !tbaa !7
  %221 = load i32, ptr %169, align 4, !tbaa !7
  %222 = sub nsw i32 %220, %221
  %223 = icmp slt i32 %222, 0
  %224 = add nsw i32 %222, 1
  %225 = select i1 %223, i32 0, i32 %224
  %226 = mul i32 %219, %225
  %227 = load i32, ptr %40, align 4, !tbaa !7
  %228 = mul i32 %226, %227
  %229 = load i32, ptr %39, align 4, !tbaa !7
  %230 = mul nsw i32 %229, %219
  %231 = load i32, ptr %94, align 4, !tbaa !7
  %232 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %233 = load i32, ptr %232, align 4, !tbaa !7
  %234 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %235 = load i32, ptr %234, align 4, !tbaa !7
  %236 = sub nsw i32 %235, %233
  %237 = icmp slt i32 %236, 0
  %238 = add nsw i32 %236, 1
  %239 = select i1 %237, i32 0, i32 %238
  %240 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %241 = load i32, ptr %240, align 4, !tbaa !7
  %242 = sub nsw i32 %241, %231
  %243 = icmp slt i32 %242, 0
  %244 = add nsw i32 %242, 1
  %245 = select i1 %243, i32 0, i32 %244
  %246 = load i32, ptr %91, align 4, !tbaa !7
  %247 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %248 = load i32, ptr %247, align 4, !tbaa !7
  %249 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %250 = load i32, ptr %249, align 4, !tbaa !7
  %251 = sub nsw i32 %250, %248
  %252 = icmp slt i32 %251, 0
  %253 = add nsw i32 %251, 1
  %254 = select i1 %252, i32 0, i32 %253
  %255 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %256 = load i32, ptr %255, align 4, !tbaa !7
  %257 = sub nsw i32 %256, %246
  %258 = icmp slt i32 %257, 0
  %259 = add nsw i32 %257, 1
  %260 = select i1 %258, i32 0, i32 %259
  %261 = load i32, ptr %88, align 4, !tbaa !7
  %262 = load i32, ptr %185, align 4, !tbaa !7
  %263 = load i32, ptr %183, align 4, !tbaa !7
  %264 = sub nsw i32 %263, %262
  %265 = icmp slt i32 %264, 0
  %266 = add nsw i32 %264, 1
  %267 = select i1 %265, i32 0, i32 %266
  %268 = load i32, ptr %182, align 4, !tbaa !7
  %269 = sub nsw i32 %268, %261
  %270 = icmp slt i32 %269, 0
  %271 = add nsw i32 %269, 1
  %272 = select i1 %270, i32 0, i32 %271
  %273 = icmp sgt i32 %209, 0
  %274 = icmp sgt i32 %208, 0
  %275 = icmp sgt i32 %207, 0
  %276 = sub i32 %272, %207
  %277 = sub i32 %260, %207
  %278 = mul nsw i32 %207, %206
  %279 = sub i32 %230, %278
  %280 = sub i32 %245, %207
  %281 = sub i32 %267, %208
  %282 = mul i32 %281, %272
  %283 = sub i32 %254, %208
  %284 = mul i32 %283, %260
  %285 = mul nsw i32 %208, %230
  %286 = sub i32 %228, %285
  %287 = sub i32 %239, %208
  %288 = mul i32 %287, %245
  br i1 %273, label %289, label %1752

289:                                              ; preds = %213
  %290 = load i32, ptr %81, align 4, !tbaa !7
  %291 = sub i32 %290, %261
  %292 = getelementptr inbounds i32, ptr %81, i64 1
  %293 = load i32, ptr %292, align 4, !tbaa !7
  %294 = sub i32 %293, %262
  %295 = getelementptr inbounds i32, ptr %81, i64 2
  %296 = load i32, ptr %295, align 4, !tbaa !7
  %297 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %298 = load i32, ptr %297, align 4, !tbaa !7
  %299 = sub nsw i32 %296, %298
  %300 = mul nsw i32 %267, %299
  %301 = add nsw i32 %294, %300
  %302 = mul nsw i32 %301, %272
  %303 = add nsw i32 %291, %302
  %304 = sub i32 %290, %246
  %305 = sub i32 %293, %248
  %306 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %307 = load i32, ptr %306, align 4, !tbaa !7
  %308 = sub nsw i32 %296, %307
  %309 = mul nsw i32 %254, %308
  %310 = add nsw i32 %305, %309
  %311 = mul nsw i32 %310, %260
  %312 = add nsw i32 %304, %311
  %313 = load i32, ptr %8, align 4, !tbaa !7
  %314 = sub i32 %313, %215
  %315 = load i32, ptr %37, align 4, !tbaa !7
  %316 = sub i32 %315, %221
  %317 = load i32, ptr %38, align 4, !tbaa !7
  %318 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %319 = load i32, ptr %318, align 4, !tbaa !7
  %320 = sub nsw i32 %317, %319
  %321 = mul nsw i32 %225, %320
  %322 = add nsw i32 %316, %321
  %323 = mul nsw i32 %322, %219
  %324 = add nsw i32 %314, %323
  %325 = sub i32 %290, %231
  %326 = sub i32 %293, %233
  %327 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %328 = load i32, ptr %327, align 4, !tbaa !7
  %329 = sub nsw i32 %296, %328
  %330 = mul nsw i32 %239, %329
  %331 = add nsw i32 %326, %330
  %332 = mul nsw i32 %331, %245
  %333 = add nsw i32 %325, %332
  %334 = sext i32 %206 to i64
  %335 = sext i32 %181 to i64
  %336 = sext i32 %203 to i64
  %337 = sext i32 %197 to i64
  br label %338

338:                                              ; preds = %499, %289
  %339 = phi i32 [ %508, %499 ], [ 0, %289 ]
  %340 = phi i32 [ %506, %499 ], [ %324, %289 ]
  %341 = phi i32 [ %507, %499 ], [ %333, %289 ]
  %342 = phi i32 [ %504, %499 ], [ %303, %289 ]
  %343 = phi i32 [ %505, %499 ], [ %312, %289 ]
  br i1 %274, label %344, label %499

344:                                              ; preds = %488, %338
  %345 = phi i32 [ %497, %488 ], [ 0, %338 ]
  %346 = phi i32 [ %495, %488 ], [ %340, %338 ]
  %347 = phi i32 [ %496, %488 ], [ %341, %338 ]
  %348 = phi i32 [ %493, %488 ], [ %342, %338 ]
  %349 = phi i32 [ %494, %488 ], [ %343, %338 ]
  br i1 %275, label %350, label %488

350:                                              ; preds = %344
  %351 = sext i32 %346 to i64
  %352 = sext i32 %347 to i64
  %353 = sext i32 %348 to i64
  %354 = sext i32 %349 to i64
  br label %355

355:                                              ; preds = %355, %350
  %356 = phi i64 [ %354, %350 ], [ %478, %355 ]
  %357 = phi i64 [ %353, %350 ], [ %477, %355 ]
  %358 = phi i64 [ %352, %350 ], [ %480, %355 ]
  %359 = phi i64 [ %351, %350 ], [ %479, %355 ]
  %360 = phi i32 [ 0, %350 ], [ %481, %355 ]
  %361 = sub nsw i64 %359, %335
  %362 = add nsw i64 %359, %335
  %363 = sub nsw i64 %357, %337
  %364 = sub nsw i64 %363, %336
  %365 = getelementptr inbounds double, ptr %98, i64 %356
  %366 = load double, ptr %365, align 8, !tbaa !29
  %367 = getelementptr inbounds double, ptr %102, i64 %361
  %368 = load double, ptr %367, align 8, !tbaa !29
  %369 = fmul double %366, %368
  %370 = getelementptr inbounds double, ptr %95, i64 %364
  %371 = load double, ptr %370, align 8, !tbaa !29
  %372 = fmul double %369, %371
  %373 = getelementptr inbounds double, ptr %150, i64 %358
  store double %372, ptr %373, align 8, !tbaa !29
  %374 = add nsw i64 %363, -1
  %375 = load double, ptr %365, align 8, !tbaa !29
  %376 = getelementptr inbounds double, ptr %100, i64 %361
  %377 = load double, ptr %376, align 8, !tbaa !29
  %378 = fmul double %375, %377
  %379 = getelementptr inbounds double, ptr %95, i64 %374
  %380 = load double, ptr %379, align 8, !tbaa !29
  %381 = fmul double %378, %380
  %382 = getelementptr inbounds double, ptr %148, i64 %358
  store double %381, ptr %382, align 8, !tbaa !29
  %383 = getelementptr inbounds double, ptr %105, i64 %359
  %384 = load double, ptr %383, align 8, !tbaa !29
  %385 = getelementptr inbounds double, ptr %95, i64 %363
  %386 = load double, ptr %385, align 8, !tbaa !29
  %387 = load double, ptr %365, align 8, !tbaa !29
  %388 = getelementptr inbounds double, ptr %99, i64 %361
  %389 = load double, ptr %388, align 8, !tbaa !29
  %390 = fmul double %387, %389
  %391 = fmul double %386, %390
  %392 = call double @llvm.fmuladd.f64(double %384, double %386, double %391)
  %393 = getelementptr inbounds double, ptr %105, i64 %361
  %394 = load double, ptr %393, align 8, !tbaa !29
  %395 = call double @llvm.fmuladd.f64(double %387, double %394, double %392)
  %396 = getelementptr inbounds double, ptr %147, i64 %358
  store double %395, ptr %396, align 8, !tbaa !29
  %397 = add nsw i64 %363, 1
  %398 = load double, ptr %365, align 8, !tbaa !29
  %399 = getelementptr inbounds double, ptr %101, i64 %361
  %400 = load double, ptr %399, align 8, !tbaa !29
  %401 = fmul double %398, %400
  %402 = getelementptr inbounds double, ptr %95, i64 %397
  %403 = load double, ptr %402, align 8, !tbaa !29
  %404 = fmul double %401, %403
  %405 = getelementptr inbounds double, ptr %149, i64 %358
  store double %404, ptr %405, align 8, !tbaa !29
  %406 = add nsw i64 %363, %336
  %407 = load double, ptr %365, align 8, !tbaa !29
  %408 = getelementptr inbounds double, ptr %103, i64 %361
  %409 = load double, ptr %408, align 8, !tbaa !29
  %410 = fmul double %407, %409
  %411 = getelementptr inbounds double, ptr %95, i64 %406
  %412 = load double, ptr %411, align 8, !tbaa !29
  %413 = fmul double %410, %412
  %414 = getelementptr inbounds double, ptr %151, i64 %358
  store double %413, ptr %414, align 8, !tbaa !29
  %415 = sub nsw i64 %357, %336
  %416 = getelementptr inbounds double, ptr %102, i64 %359
  %417 = load double, ptr %416, align 8, !tbaa !29
  %418 = load double, ptr %365, align 8, !tbaa !29
  %419 = load double, ptr %367, align 8, !tbaa !29
  %420 = fmul double %418, %419
  %421 = getelementptr inbounds double, ptr %96, i64 %415
  %422 = load double, ptr %421, align 8, !tbaa !29
  %423 = call double @llvm.fmuladd.f64(double %420, double %422, double %417)
  %424 = getelementptr inbounds double, ptr %97, i64 %356
  %425 = load double, ptr %424, align 8, !tbaa !29
  %426 = getelementptr inbounds double, ptr %102, i64 %362
  %427 = load double, ptr %426, align 8, !tbaa !29
  %428 = fmul double %425, %427
  %429 = getelementptr inbounds double, ptr %95, i64 %415
  %430 = load double, ptr %429, align 8, !tbaa !29
  %431 = call double @llvm.fmuladd.f64(double %428, double %430, double %423)
  %432 = getelementptr inbounds double, ptr %146, i64 %358
  store double %431, ptr %432, align 8, !tbaa !29
  %433 = add nsw i64 %357, -1
  %434 = getelementptr inbounds double, ptr %100, i64 %359
  %435 = load double, ptr %434, align 8, !tbaa !29
  %436 = load double, ptr %365, align 8, !tbaa !29
  %437 = load double, ptr %376, align 8, !tbaa !29
  %438 = fmul double %436, %437
  %439 = getelementptr inbounds double, ptr %96, i64 %433
  %440 = load double, ptr %439, align 8, !tbaa !29
  %441 = call double @llvm.fmuladd.f64(double %438, double %440, double %435)
  %442 = load double, ptr %424, align 8, !tbaa !29
  %443 = getelementptr inbounds double, ptr %100, i64 %362
  %444 = load double, ptr %443, align 8, !tbaa !29
  %445 = fmul double %442, %444
  %446 = getelementptr inbounds double, ptr %95, i64 %433
  %447 = load double, ptr %446, align 8, !tbaa !29
  %448 = call double @llvm.fmuladd.f64(double %445, double %447, double %441)
  %449 = getelementptr inbounds double, ptr %145, i64 %358
  store double %448, ptr %449, align 8, !tbaa !29
  %450 = getelementptr inbounds double, ptr %99, i64 %359
  %451 = load double, ptr %450, align 8, !tbaa !29
  %452 = load double, ptr %365, align 8, !tbaa !29
  %453 = load double, ptr %388, align 8, !tbaa !29
  %454 = fmul double %452, %453
  %455 = getelementptr inbounds double, ptr %96, i64 %357
  %456 = load double, ptr %455, align 8, !tbaa !29
  %457 = call double @llvm.fmuladd.f64(double %454, double %456, double %451)
  %458 = load double, ptr %424, align 8, !tbaa !29
  %459 = getelementptr inbounds double, ptr %99, i64 %362
  %460 = load double, ptr %459, align 8, !tbaa !29
  %461 = fmul double %458, %460
  %462 = getelementptr inbounds double, ptr %95, i64 %357
  %463 = load double, ptr %462, align 8, !tbaa !29
  %464 = call double @llvm.fmuladd.f64(double %461, double %463, double %457)
  %465 = getelementptr inbounds double, ptr %104, i64 %361
  %466 = load double, ptr %465, align 8, !tbaa !29
  %467 = call double @llvm.fmuladd.f64(double %452, double %466, double %464)
  %468 = getelementptr inbounds double, ptr %105, i64 %362
  %469 = load double, ptr %468, align 8, !tbaa !29
  %470 = call double @llvm.fmuladd.f64(double %458, double %469, double %467)
  %471 = load double, ptr %383, align 8, !tbaa !29
  %472 = call double @llvm.fmuladd.f64(double %471, double %456, double %470)
  %473 = getelementptr inbounds double, ptr %104, i64 %359
  %474 = load double, ptr %473, align 8, !tbaa !29
  %475 = call double @llvm.fmuladd.f64(double %474, double %463, double %472)
  %476 = getelementptr inbounds double, ptr %144, i64 %358
  store double %475, ptr %476, align 8, !tbaa !29
  %477 = add nsw i64 %357, 1
  %478 = add nsw i64 %356, 1
  %479 = add i64 %359, %334
  %480 = add nsw i64 %358, 1
  %481 = add nuw nsw i32 %360, 1
  %482 = icmp eq i32 %481, %207
  br i1 %482, label %483, label %355, !llvm.loop !463

483:                                              ; preds = %355
  %.lcssa12 = phi i64 [ %477, %355 ]
  %.lcssa11 = phi i64 [ %478, %355 ]
  %.lcssa10 = phi i64 [ %479, %355 ]
  %.lcssa9 = phi i64 [ %480, %355 ]
  %484 = trunc i64 %.lcssa11 to i32
  %485 = trunc i64 %.lcssa12 to i32
  %486 = trunc i64 %.lcssa9 to i32
  %487 = trunc i64 %.lcssa10 to i32
  br label %488

488:                                              ; preds = %483, %344
  %489 = phi i32 [ %349, %344 ], [ %484, %483 ]
  %490 = phi i32 [ %348, %344 ], [ %485, %483 ]
  %491 = phi i32 [ %347, %344 ], [ %486, %483 ]
  %492 = phi i32 [ %346, %344 ], [ %487, %483 ]
  %493 = add nsw i32 %276, %490
  %494 = add nsw i32 %277, %489
  %495 = add nsw i32 %279, %492
  %496 = add nsw i32 %280, %491
  %497 = add nuw nsw i32 %345, 1
  %498 = icmp eq i32 %497, %208
  br i1 %498, label %499, label %344, !llvm.loop !464

499:                                              ; preds = %488, %338
  %500 = phi i32 [ %343, %338 ], [ %494, %488 ]
  %501 = phi i32 [ %342, %338 ], [ %493, %488 ]
  %502 = phi i32 [ %341, %338 ], [ %496, %488 ]
  %503 = phi i32 [ %340, %338 ], [ %495, %488 ]
  %504 = add nsw i32 %501, %282
  %505 = add nsw i32 %500, %284
  %506 = add nsw i32 %286, %503
  %507 = add nsw i32 %502, %288
  %508 = add nuw nsw i32 %339, 1
  %509 = icmp eq i32 %508, %209
  br i1 %509, label %1752, label %338, !llvm.loop !465

510:                                              ; preds = %159
  %511 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %512 = load i32, ptr %5, align 4, !tbaa !7
  %513 = load i32, ptr %9, align 4, !tbaa !7
  %514 = load i32, ptr %41, align 4, !tbaa !7
  %515 = load i32, ptr %42, align 4, !tbaa !7
  %516 = call i32 @llvm.smax.i32(i32 %514, i32 %513)
  %517 = call i32 @llvm.smax.i32(i32 %515, i32 %516)
  %518 = icmp sgt i32 %517, 0
  br i1 %518, label %519, label %1752

519:                                              ; preds = %510
  %520 = load i32, ptr %166, align 4, !tbaa !7
  %521 = load i32, ptr %85, align 4, !tbaa !7
  %522 = sub nsw i32 %520, %521
  %523 = icmp slt i32 %522, 0
  %524 = add nsw i32 %522, 1
  %525 = select i1 %523, i32 0, i32 %524
  %526 = load i32, ptr %167, align 4, !tbaa !7
  %527 = load i32, ptr %169, align 4, !tbaa !7
  %528 = sub nsw i32 %526, %527
  %529 = icmp slt i32 %528, 0
  %530 = add nsw i32 %528, 1
  %531 = select i1 %529, i32 0, i32 %530
  %532 = mul i32 %525, %531
  %533 = load i32, ptr %40, align 4, !tbaa !7
  %534 = mul i32 %532, %533
  %535 = load i32, ptr %39, align 4, !tbaa !7
  %536 = mul nsw i32 %535, %525
  %537 = load i32, ptr %94, align 4, !tbaa !7
  %538 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %539 = load i32, ptr %538, align 4, !tbaa !7
  %540 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %541 = load i32, ptr %540, align 4, !tbaa !7
  %542 = sub nsw i32 %541, %539
  %543 = icmp slt i32 %542, 0
  %544 = add nsw i32 %542, 1
  %545 = select i1 %543, i32 0, i32 %544
  %546 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %547 = load i32, ptr %546, align 4, !tbaa !7
  %548 = sub nsw i32 %547, %537
  %549 = icmp slt i32 %548, 0
  %550 = add nsw i32 %548, 1
  %551 = select i1 %549, i32 0, i32 %550
  %552 = load i32, ptr %91, align 4, !tbaa !7
  %553 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %554 = load i32, ptr %553, align 4, !tbaa !7
  %555 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %556 = load i32, ptr %555, align 4, !tbaa !7
  %557 = sub nsw i32 %556, %554
  %558 = icmp slt i32 %557, 0
  %559 = add nsw i32 %557, 1
  %560 = select i1 %558, i32 0, i32 %559
  %561 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %562 = load i32, ptr %561, align 4, !tbaa !7
  %563 = sub nsw i32 %562, %552
  %564 = icmp slt i32 %563, 0
  %565 = add nsw i32 %563, 1
  %566 = select i1 %564, i32 0, i32 %565
  %567 = load i32, ptr %88, align 4, !tbaa !7
  %568 = load i32, ptr %185, align 4, !tbaa !7
  %569 = load i32, ptr %183, align 4, !tbaa !7
  %570 = sub nsw i32 %569, %568
  %571 = icmp slt i32 %570, 0
  %572 = add nsw i32 %570, 1
  %573 = select i1 %571, i32 0, i32 %572
  %574 = load i32, ptr %182, align 4, !tbaa !7
  %575 = sub nsw i32 %574, %567
  %576 = icmp slt i32 %575, 0
  %577 = add nsw i32 %575, 1
  %578 = select i1 %576, i32 0, i32 %577
  %579 = icmp sgt i32 %515, 0
  %580 = icmp sgt i32 %514, 0
  %581 = icmp sgt i32 %513, 0
  %582 = sub i32 %578, %513
  %583 = sub i32 %566, %513
  %584 = mul nsw i32 %513, %512
  %585 = sub i32 %536, %584
  %586 = sub i32 %551, %513
  %587 = sub i32 %573, %514
  %588 = mul i32 %587, %578
  %589 = sub i32 %560, %514
  %590 = mul i32 %589, %566
  %591 = mul nsw i32 %514, %536
  %592 = sub i32 %534, %591
  %593 = sub i32 %545, %514
  %594 = mul i32 %593, %551
  br i1 %579, label %595, label %1752

595:                                              ; preds = %519
  %596 = load i32, ptr %81, align 4, !tbaa !7
  %597 = sub i32 %596, %567
  %598 = getelementptr inbounds i32, ptr %81, i64 1
  %599 = load i32, ptr %598, align 4, !tbaa !7
  %600 = sub i32 %599, %568
  %601 = getelementptr inbounds i32, ptr %81, i64 2
  %602 = load i32, ptr %601, align 4, !tbaa !7
  %603 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %604 = load i32, ptr %603, align 4, !tbaa !7
  %605 = sub nsw i32 %602, %604
  %606 = mul nsw i32 %573, %605
  %607 = add nsw i32 %600, %606
  %608 = mul nsw i32 %607, %578
  %609 = add nsw i32 %597, %608
  %610 = sub i32 %596, %552
  %611 = sub i32 %599, %554
  %612 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %613 = load i32, ptr %612, align 4, !tbaa !7
  %614 = sub nsw i32 %602, %613
  %615 = mul nsw i32 %560, %614
  %616 = add nsw i32 %611, %615
  %617 = mul nsw i32 %616, %566
  %618 = add nsw i32 %610, %617
  %619 = load i32, ptr %8, align 4, !tbaa !7
  %620 = sub i32 %619, %521
  %621 = load i32, ptr %37, align 4, !tbaa !7
  %622 = sub i32 %621, %527
  %623 = load i32, ptr %38, align 4, !tbaa !7
  %624 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %625 = load i32, ptr %624, align 4, !tbaa !7
  %626 = sub nsw i32 %623, %625
  %627 = mul nsw i32 %531, %626
  %628 = add nsw i32 %622, %627
  %629 = mul nsw i32 %628, %525
  %630 = add nsw i32 %620, %629
  %631 = sub i32 %596, %537
  %632 = sub i32 %599, %539
  %633 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %634 = load i32, ptr %633, align 4, !tbaa !7
  %635 = sub nsw i32 %602, %634
  %636 = mul nsw i32 %545, %635
  %637 = add nsw i32 %632, %636
  %638 = mul nsw i32 %637, %551
  %639 = add nsw i32 %631, %638
  %640 = sext i32 %512 to i64
  %641 = sext i32 %181 to i64
  %642 = sext i32 %203 to i64
  %643 = sext i32 %197 to i64
  br label %644

644:                                              ; preds = %851, %595
  %645 = phi i32 [ %860, %851 ], [ 0, %595 ]
  %646 = phi i32 [ %858, %851 ], [ %630, %595 ]
  %647 = phi i32 [ %859, %851 ], [ %639, %595 ]
  %648 = phi i32 [ %856, %851 ], [ %609, %595 ]
  %649 = phi i32 [ %857, %851 ], [ %618, %595 ]
  br i1 %580, label %650, label %851

650:                                              ; preds = %840, %644
  %651 = phi i32 [ %849, %840 ], [ 0, %644 ]
  %652 = phi i32 [ %847, %840 ], [ %646, %644 ]
  %653 = phi i32 [ %848, %840 ], [ %647, %644 ]
  %654 = phi i32 [ %845, %840 ], [ %648, %644 ]
  %655 = phi i32 [ %846, %840 ], [ %649, %644 ]
  br i1 %581, label %656, label %840

656:                                              ; preds = %650
  %657 = sext i32 %652 to i64
  %658 = sext i32 %653 to i64
  %659 = sext i32 %654 to i64
  %660 = sext i32 %655 to i64
  br label %661

661:                                              ; preds = %661, %656
  %662 = phi i64 [ %660, %656 ], [ %830, %661 ]
  %663 = phi i64 [ %659, %656 ], [ %829, %661 ]
  %664 = phi i64 [ %658, %656 ], [ %832, %661 ]
  %665 = phi i64 [ %657, %656 ], [ %831, %661 ]
  %666 = phi i32 [ 0, %656 ], [ %833, %661 ]
  %667 = sub nsw i64 %665, %641
  %668 = add nsw i64 %665, %641
  %669 = sub nsw i64 %663, %643
  %670 = sub nsw i64 %669, %642
  %671 = getelementptr inbounds double, ptr %98, i64 %662
  %672 = load double, ptr %671, align 8, !tbaa !29
  %673 = getelementptr inbounds double, ptr %102, i64 %667
  %674 = load double, ptr %673, align 8, !tbaa !29
  %675 = fmul double %672, %674
  %676 = getelementptr inbounds double, ptr %95, i64 %670
  %677 = load double, ptr %676, align 8, !tbaa !29
  %678 = getelementptr inbounds double, ptr %131, i64 %667
  %679 = load double, ptr %678, align 8, !tbaa !29
  %680 = fmul double %672, %679
  %681 = call double @llvm.fmuladd.f64(double %675, double %677, double %680)
  %682 = getelementptr inbounds double, ptr %131, i64 %665
  %683 = load double, ptr %682, align 8, !tbaa !29
  %684 = call double @llvm.fmuladd.f64(double %683, double %677, double %681)
  %685 = getelementptr inbounds double, ptr %150, i64 %664
  store double %684, ptr %685, align 8, !tbaa !29
  %686 = add nsw i64 %669, -1
  %687 = load double, ptr %671, align 8, !tbaa !29
  %688 = getelementptr inbounds double, ptr %100, i64 %667
  %689 = load double, ptr %688, align 8, !tbaa !29
  %690 = fmul double %687, %689
  %691 = getelementptr inbounds double, ptr %95, i64 %686
  %692 = load double, ptr %691, align 8, !tbaa !29
  %693 = getelementptr inbounds double, ptr %133, i64 %667
  %694 = load double, ptr %693, align 8, !tbaa !29
  %695 = fmul double %687, %694
  %696 = call double @llvm.fmuladd.f64(double %690, double %692, double %695)
  %697 = getelementptr inbounds double, ptr %133, i64 %665
  %698 = load double, ptr %697, align 8, !tbaa !29
  %699 = call double @llvm.fmuladd.f64(double %698, double %692, double %696)
  %700 = getelementptr inbounds double, ptr %148, i64 %664
  store double %699, ptr %700, align 8, !tbaa !29
  %701 = getelementptr inbounds double, ptr %105, i64 %665
  %702 = load double, ptr %701, align 8, !tbaa !29
  %703 = getelementptr inbounds double, ptr %95, i64 %669
  %704 = load double, ptr %703, align 8, !tbaa !29
  %705 = load double, ptr %671, align 8, !tbaa !29
  %706 = getelementptr inbounds double, ptr %99, i64 %667
  %707 = load double, ptr %706, align 8, !tbaa !29
  %708 = fmul double %705, %707
  %709 = fmul double %704, %708
  %710 = call double @llvm.fmuladd.f64(double %702, double %704, double %709)
  %711 = getelementptr inbounds double, ptr %105, i64 %667
  %712 = load double, ptr %711, align 8, !tbaa !29
  %713 = call double @llvm.fmuladd.f64(double %705, double %712, double %710)
  %714 = getelementptr inbounds double, ptr %147, i64 %664
  store double %713, ptr %714, align 8, !tbaa !29
  %715 = add nsw i64 %669, 1
  %716 = load double, ptr %671, align 8, !tbaa !29
  %717 = getelementptr inbounds double, ptr %101, i64 %667
  %718 = load double, ptr %717, align 8, !tbaa !29
  %719 = fmul double %716, %718
  %720 = getelementptr inbounds double, ptr %95, i64 %715
  %721 = load double, ptr %720, align 8, !tbaa !29
  %722 = getelementptr inbounds double, ptr %132, i64 %667
  %723 = load double, ptr %722, align 8, !tbaa !29
  %724 = fmul double %716, %723
  %725 = call double @llvm.fmuladd.f64(double %719, double %721, double %724)
  %726 = getelementptr inbounds double, ptr %132, i64 %665
  %727 = load double, ptr %726, align 8, !tbaa !29
  %728 = call double @llvm.fmuladd.f64(double %727, double %721, double %725)
  %729 = getelementptr inbounds double, ptr %149, i64 %664
  store double %728, ptr %729, align 8, !tbaa !29
  %730 = add nsw i64 %669, %642
  %731 = load double, ptr %671, align 8, !tbaa !29
  %732 = getelementptr inbounds double, ptr %103, i64 %667
  %733 = load double, ptr %732, align 8, !tbaa !29
  %734 = fmul double %731, %733
  %735 = getelementptr inbounds double, ptr %95, i64 %730
  %736 = load double, ptr %735, align 8, !tbaa !29
  %737 = getelementptr inbounds double, ptr %130, i64 %667
  %738 = load double, ptr %737, align 8, !tbaa !29
  %739 = fmul double %731, %738
  %740 = call double @llvm.fmuladd.f64(double %734, double %736, double %739)
  %741 = getelementptr inbounds double, ptr %130, i64 %665
  %742 = load double, ptr %741, align 8, !tbaa !29
  %743 = call double @llvm.fmuladd.f64(double %742, double %736, double %740)
  %744 = getelementptr inbounds double, ptr %151, i64 %664
  store double %743, ptr %744, align 8, !tbaa !29
  %745 = sub nsw i64 %663, %642
  %746 = getelementptr inbounds double, ptr %102, i64 %665
  %747 = load double, ptr %746, align 8, !tbaa !29
  %748 = load double, ptr %671, align 8, !tbaa !29
  %749 = load double, ptr %673, align 8, !tbaa !29
  %750 = fmul double %748, %749
  %751 = getelementptr inbounds double, ptr %96, i64 %745
  %752 = load double, ptr %751, align 8, !tbaa !29
  %753 = call double @llvm.fmuladd.f64(double %750, double %752, double %747)
  %754 = getelementptr inbounds double, ptr %97, i64 %662
  %755 = load double, ptr %754, align 8, !tbaa !29
  %756 = getelementptr inbounds double, ptr %102, i64 %668
  %757 = load double, ptr %756, align 8, !tbaa !29
  %758 = fmul double %755, %757
  %759 = getelementptr inbounds double, ptr %95, i64 %745
  %760 = load double, ptr %759, align 8, !tbaa !29
  %761 = call double @llvm.fmuladd.f64(double %758, double %760, double %753)
  %762 = load double, ptr %682, align 8, !tbaa !29
  %763 = call double @llvm.fmuladd.f64(double %762, double %752, double %761)
  %764 = getelementptr inbounds double, ptr %134, i64 %665
  %765 = load double, ptr %764, align 8, !tbaa !29
  %766 = call double @llvm.fmuladd.f64(double %765, double %760, double %763)
  %767 = getelementptr inbounds double, ptr %134, i64 %667
  %768 = load double, ptr %767, align 8, !tbaa !29
  %769 = call double @llvm.fmuladd.f64(double %748, double %768, double %766)
  %770 = getelementptr inbounds double, ptr %131, i64 %668
  %771 = load double, ptr %770, align 8, !tbaa !29
  %772 = call double @llvm.fmuladd.f64(double %755, double %771, double %769)
  %773 = getelementptr inbounds double, ptr %146, i64 %664
  store double %772, ptr %773, align 8, !tbaa !29
  %774 = add nsw i64 %663, -1
  %775 = getelementptr inbounds double, ptr %100, i64 %665
  %776 = load double, ptr %775, align 8, !tbaa !29
  %777 = load double, ptr %671, align 8, !tbaa !29
  %778 = load double, ptr %688, align 8, !tbaa !29
  %779 = fmul double %777, %778
  %780 = getelementptr inbounds double, ptr %96, i64 %774
  %781 = load double, ptr %780, align 8, !tbaa !29
  %782 = call double @llvm.fmuladd.f64(double %779, double %781, double %776)
  %783 = load double, ptr %754, align 8, !tbaa !29
  %784 = getelementptr inbounds double, ptr %100, i64 %668
  %785 = load double, ptr %784, align 8, !tbaa !29
  %786 = fmul double %783, %785
  %787 = getelementptr inbounds double, ptr %95, i64 %774
  %788 = load double, ptr %787, align 8, !tbaa !29
  %789 = call double @llvm.fmuladd.f64(double %786, double %788, double %782)
  %790 = load double, ptr %697, align 8, !tbaa !29
  %791 = call double @llvm.fmuladd.f64(double %790, double %781, double %789)
  %792 = getelementptr inbounds double, ptr %135, i64 %665
  %793 = load double, ptr %792, align 8, !tbaa !29
  %794 = call double @llvm.fmuladd.f64(double %793, double %788, double %791)
  %795 = getelementptr inbounds double, ptr %135, i64 %667
  %796 = load double, ptr %795, align 8, !tbaa !29
  %797 = call double @llvm.fmuladd.f64(double %777, double %796, double %794)
  %798 = getelementptr inbounds double, ptr %133, i64 %668
  %799 = load double, ptr %798, align 8, !tbaa !29
  %800 = call double @llvm.fmuladd.f64(double %783, double %799, double %797)
  %801 = getelementptr inbounds double, ptr %145, i64 %664
  store double %800, ptr %801, align 8, !tbaa !29
  %802 = getelementptr inbounds double, ptr %99, i64 %665
  %803 = load double, ptr %802, align 8, !tbaa !29
  %804 = load double, ptr %671, align 8, !tbaa !29
  %805 = load double, ptr %706, align 8, !tbaa !29
  %806 = fmul double %804, %805
  %807 = getelementptr inbounds double, ptr %96, i64 %663
  %808 = load double, ptr %807, align 8, !tbaa !29
  %809 = call double @llvm.fmuladd.f64(double %806, double %808, double %803)
  %810 = load double, ptr %754, align 8, !tbaa !29
  %811 = getelementptr inbounds double, ptr %99, i64 %668
  %812 = load double, ptr %811, align 8, !tbaa !29
  %813 = fmul double %810, %812
  %814 = getelementptr inbounds double, ptr %95, i64 %663
  %815 = load double, ptr %814, align 8, !tbaa !29
  %816 = call double @llvm.fmuladd.f64(double %813, double %815, double %809)
  %817 = getelementptr inbounds double, ptr %104, i64 %667
  %818 = load double, ptr %817, align 8, !tbaa !29
  %819 = call double @llvm.fmuladd.f64(double %804, double %818, double %816)
  %820 = getelementptr inbounds double, ptr %105, i64 %668
  %821 = load double, ptr %820, align 8, !tbaa !29
  %822 = call double @llvm.fmuladd.f64(double %810, double %821, double %819)
  %823 = load double, ptr %701, align 8, !tbaa !29
  %824 = call double @llvm.fmuladd.f64(double %823, double %808, double %822)
  %825 = getelementptr inbounds double, ptr %104, i64 %665
  %826 = load double, ptr %825, align 8, !tbaa !29
  %827 = call double @llvm.fmuladd.f64(double %826, double %815, double %824)
  %828 = getelementptr inbounds double, ptr %144, i64 %664
  store double %827, ptr %828, align 8, !tbaa !29
  %829 = add nsw i64 %663, 1
  %830 = add nsw i64 %662, 1
  %831 = add i64 %665, %640
  %832 = add nsw i64 %664, 1
  %833 = add nuw nsw i32 %666, 1
  %834 = icmp eq i32 %833, %513
  br i1 %834, label %835, label %661, !llvm.loop !466

835:                                              ; preds = %661
  %.lcssa8 = phi i64 [ %829, %661 ]
  %.lcssa7 = phi i64 [ %830, %661 ]
  %.lcssa6 = phi i64 [ %831, %661 ]
  %.lcssa5 = phi i64 [ %832, %661 ]
  %836 = trunc i64 %.lcssa7 to i32
  %837 = trunc i64 %.lcssa8 to i32
  %838 = trunc i64 %.lcssa5 to i32
  %839 = trunc i64 %.lcssa6 to i32
  br label %840

840:                                              ; preds = %835, %650
  %841 = phi i32 [ %655, %650 ], [ %836, %835 ]
  %842 = phi i32 [ %654, %650 ], [ %837, %835 ]
  %843 = phi i32 [ %653, %650 ], [ %838, %835 ]
  %844 = phi i32 [ %652, %650 ], [ %839, %835 ]
  %845 = add nsw i32 %582, %842
  %846 = add nsw i32 %583, %841
  %847 = add nsw i32 %585, %844
  %848 = add nsw i32 %586, %843
  %849 = add nuw nsw i32 %651, 1
  %850 = icmp eq i32 %849, %514
  br i1 %850, label %851, label %650, !llvm.loop !467

851:                                              ; preds = %840, %644
  %852 = phi i32 [ %649, %644 ], [ %846, %840 ]
  %853 = phi i32 [ %648, %644 ], [ %845, %840 ]
  %854 = phi i32 [ %647, %644 ], [ %848, %840 ]
  %855 = phi i32 [ %646, %644 ], [ %847, %840 ]
  %856 = add nsw i32 %853, %588
  %857 = add nsw i32 %852, %590
  %858 = add nsw i32 %592, %855
  %859 = add nsw i32 %854, %594
  %860 = add nuw nsw i32 %645, 1
  %861 = icmp eq i32 %860, %515
  br i1 %861, label %1752, label %644, !llvm.loop !468

862:                                              ; preds = %159
  %863 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %864 = load i32, ptr %5, align 4, !tbaa !7
  %865 = load i32, ptr %9, align 4, !tbaa !7
  %866 = load i32, ptr %41, align 4, !tbaa !7
  %867 = load i32, ptr %42, align 4, !tbaa !7
  %868 = call i32 @llvm.smax.i32(i32 %866, i32 %865)
  %869 = call i32 @llvm.smax.i32(i32 %867, i32 %868)
  %870 = icmp sgt i32 %869, 0
  br i1 %870, label %871, label %1752

871:                                              ; preds = %862
  %872 = load i32, ptr %166, align 4, !tbaa !7
  %873 = load i32, ptr %85, align 4, !tbaa !7
  %874 = sub nsw i32 %872, %873
  %875 = icmp slt i32 %874, 0
  %876 = add nsw i32 %874, 1
  %877 = select i1 %875, i32 0, i32 %876
  %878 = load i32, ptr %167, align 4, !tbaa !7
  %879 = load i32, ptr %169, align 4, !tbaa !7
  %880 = sub nsw i32 %878, %879
  %881 = icmp slt i32 %880, 0
  %882 = add nsw i32 %880, 1
  %883 = select i1 %881, i32 0, i32 %882
  %884 = mul i32 %877, %883
  %885 = load i32, ptr %40, align 4, !tbaa !7
  %886 = mul i32 %884, %885
  %887 = load i32, ptr %39, align 4, !tbaa !7
  %888 = mul nsw i32 %887, %877
  %889 = load i32, ptr %94, align 4, !tbaa !7
  %890 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %891 = load i32, ptr %890, align 4, !tbaa !7
  %892 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %893 = load i32, ptr %892, align 4, !tbaa !7
  %894 = sub nsw i32 %893, %891
  %895 = icmp slt i32 %894, 0
  %896 = add nsw i32 %894, 1
  %897 = select i1 %895, i32 0, i32 %896
  %898 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %899 = load i32, ptr %898, align 4, !tbaa !7
  %900 = sub nsw i32 %899, %889
  %901 = icmp slt i32 %900, 0
  %902 = add nsw i32 %900, 1
  %903 = select i1 %901, i32 0, i32 %902
  %904 = load i32, ptr %91, align 4, !tbaa !7
  %905 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %906 = load i32, ptr %905, align 4, !tbaa !7
  %907 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %908 = load i32, ptr %907, align 4, !tbaa !7
  %909 = sub nsw i32 %908, %906
  %910 = icmp slt i32 %909, 0
  %911 = add nsw i32 %909, 1
  %912 = select i1 %910, i32 0, i32 %911
  %913 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %914 = load i32, ptr %913, align 4, !tbaa !7
  %915 = sub nsw i32 %914, %904
  %916 = icmp slt i32 %915, 0
  %917 = add nsw i32 %915, 1
  %918 = select i1 %916, i32 0, i32 %917
  %919 = load i32, ptr %88, align 4, !tbaa !7
  %920 = load i32, ptr %185, align 4, !tbaa !7
  %921 = load i32, ptr %183, align 4, !tbaa !7
  %922 = sub nsw i32 %921, %920
  %923 = icmp slt i32 %922, 0
  %924 = add nsw i32 %922, 1
  %925 = select i1 %923, i32 0, i32 %924
  %926 = load i32, ptr %182, align 4, !tbaa !7
  %927 = sub nsw i32 %926, %919
  %928 = icmp slt i32 %927, 0
  %929 = add nsw i32 %927, 1
  %930 = select i1 %928, i32 0, i32 %929
  %931 = icmp sgt i32 %867, 0
  %932 = icmp sgt i32 %866, 0
  %933 = icmp sgt i32 %865, 0
  %934 = sub i32 %930, %865
  %935 = sub i32 %918, %865
  %936 = mul nsw i32 %865, %864
  %937 = sub i32 %888, %936
  %938 = sub i32 %903, %865
  %939 = sub i32 %925, %866
  %940 = mul i32 %939, %930
  %941 = sub i32 %912, %866
  %942 = mul i32 %941, %918
  %943 = mul nsw i32 %866, %888
  %944 = sub i32 %886, %943
  %945 = sub i32 %897, %866
  %946 = mul i32 %945, %903
  br i1 %931, label %947, label %1752

947:                                              ; preds = %871
  %948 = load i32, ptr %81, align 4, !tbaa !7
  %949 = sub i32 %948, %919
  %950 = getelementptr inbounds i32, ptr %81, i64 1
  %951 = load i32, ptr %950, align 4, !tbaa !7
  %952 = sub i32 %951, %920
  %953 = getelementptr inbounds i32, ptr %81, i64 2
  %954 = load i32, ptr %953, align 4, !tbaa !7
  %955 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %956 = load i32, ptr %955, align 4, !tbaa !7
  %957 = sub nsw i32 %954, %956
  %958 = mul nsw i32 %925, %957
  %959 = add nsw i32 %952, %958
  %960 = mul nsw i32 %959, %930
  %961 = add nsw i32 %949, %960
  %962 = sub i32 %948, %904
  %963 = sub i32 %951, %906
  %964 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %965 = load i32, ptr %964, align 4, !tbaa !7
  %966 = sub nsw i32 %954, %965
  %967 = mul nsw i32 %912, %966
  %968 = add nsw i32 %963, %967
  %969 = mul nsw i32 %968, %918
  %970 = add nsw i32 %962, %969
  %971 = load i32, ptr %8, align 4, !tbaa !7
  %972 = sub i32 %971, %873
  %973 = load i32, ptr %37, align 4, !tbaa !7
  %974 = sub i32 %973, %879
  %975 = load i32, ptr %38, align 4, !tbaa !7
  %976 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %977 = load i32, ptr %976, align 4, !tbaa !7
  %978 = sub nsw i32 %975, %977
  %979 = mul nsw i32 %883, %978
  %980 = add nsw i32 %974, %979
  %981 = mul nsw i32 %980, %877
  %982 = add nsw i32 %972, %981
  %983 = sub i32 %948, %889
  %984 = sub i32 %951, %891
  %985 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %986 = load i32, ptr %985, align 4, !tbaa !7
  %987 = sub nsw i32 %954, %986
  %988 = mul nsw i32 %897, %987
  %989 = add nsw i32 %984, %988
  %990 = mul nsw i32 %989, %903
  %991 = add nsw i32 %983, %990
  %992 = sext i32 %864 to i64
  %993 = sext i32 %181 to i64
  %994 = sext i32 %203 to i64
  %995 = sext i32 %197 to i64
  br label %996

996:                                              ; preds = %1273, %947
  %997 = phi i32 [ %1282, %1273 ], [ 0, %947 ]
  %998 = phi i32 [ %1280, %1273 ], [ %982, %947 ]
  %999 = phi i32 [ %1281, %1273 ], [ %991, %947 ]
  %1000 = phi i32 [ %1278, %1273 ], [ %961, %947 ]
  %1001 = phi i32 [ %1279, %1273 ], [ %970, %947 ]
  br i1 %932, label %1002, label %1273

1002:                                             ; preds = %1262, %996
  %1003 = phi i32 [ %1271, %1262 ], [ 0, %996 ]
  %1004 = phi i32 [ %1269, %1262 ], [ %998, %996 ]
  %1005 = phi i32 [ %1270, %1262 ], [ %999, %996 ]
  %1006 = phi i32 [ %1267, %1262 ], [ %1000, %996 ]
  %1007 = phi i32 [ %1268, %1262 ], [ %1001, %996 ]
  br i1 %933, label %1008, label %1262

1008:                                             ; preds = %1002
  %1009 = sext i32 %1004 to i64
  %1010 = sext i32 %1005 to i64
  %1011 = sext i32 %1006 to i64
  %1012 = sext i32 %1007 to i64
  br label %1013

1013:                                             ; preds = %1013, %1008
  %1014 = phi i64 [ %1012, %1008 ], [ %1252, %1013 ]
  %1015 = phi i64 [ %1011, %1008 ], [ %1251, %1013 ]
  %1016 = phi i64 [ %1010, %1008 ], [ %1254, %1013 ]
  %1017 = phi i64 [ %1009, %1008 ], [ %1253, %1013 ]
  %1018 = phi i32 [ 0, %1008 ], [ %1255, %1013 ]
  %1019 = sub nsw i64 %1017, %993
  %1020 = add nsw i64 %1017, %993
  %1021 = sub nsw i64 %1015, %995
  %1022 = sub nsw i64 %1021, %994
  %1023 = add nsw i64 %1022, -1
  %1024 = getelementptr inbounds double, ptr %98, i64 %1014
  %1025 = load double, ptr %1024, align 8, !tbaa !29
  %1026 = getelementptr inbounds double, ptr %126, i64 %1019
  %1027 = load double, ptr %1026, align 8, !tbaa !29
  %1028 = fmul double %1025, %1027
  %1029 = getelementptr inbounds double, ptr %95, i64 %1023
  %1030 = load double, ptr %1029, align 8, !tbaa !29
  %1031 = fmul double %1028, %1030
  %1032 = getelementptr inbounds double, ptr %163, i64 %1016
  store double %1031, ptr %1032, align 8, !tbaa !29
  %1033 = load double, ptr %1024, align 8, !tbaa !29
  %1034 = getelementptr inbounds double, ptr %102, i64 %1019
  %1035 = load double, ptr %1034, align 8, !tbaa !29
  %1036 = fmul double %1033, %1035
  %1037 = getelementptr inbounds double, ptr %95, i64 %1022
  %1038 = load double, ptr %1037, align 8, !tbaa !29
  %1039 = getelementptr inbounds double, ptr %131, i64 %1019
  %1040 = load double, ptr %1039, align 8, !tbaa !29
  %1041 = fmul double %1033, %1040
  %1042 = call double @llvm.fmuladd.f64(double %1036, double %1038, double %1041)
  %1043 = getelementptr inbounds double, ptr %131, i64 %1017
  %1044 = load double, ptr %1043, align 8, !tbaa !29
  %1045 = call double @llvm.fmuladd.f64(double %1044, double %1038, double %1042)
  %1046 = getelementptr inbounds double, ptr %150, i64 %1016
  store double %1045, ptr %1046, align 8, !tbaa !29
  %1047 = add nsw i64 %1022, 1
  %1048 = load double, ptr %1024, align 8, !tbaa !29
  %1049 = getelementptr inbounds double, ptr %127, i64 %1019
  %1050 = load double, ptr %1049, align 8, !tbaa !29
  %1051 = fmul double %1048, %1050
  %1052 = getelementptr inbounds double, ptr %95, i64 %1047
  %1053 = load double, ptr %1052, align 8, !tbaa !29
  %1054 = fmul double %1051, %1053
  %1055 = getelementptr inbounds double, ptr %162, i64 %1016
  store double %1054, ptr %1055, align 8, !tbaa !29
  %1056 = add nsw i64 %1021, -1
  %1057 = load double, ptr %1024, align 8, !tbaa !29
  %1058 = getelementptr inbounds double, ptr %100, i64 %1019
  %1059 = load double, ptr %1058, align 8, !tbaa !29
  %1060 = fmul double %1057, %1059
  %1061 = getelementptr inbounds double, ptr %95, i64 %1056
  %1062 = load double, ptr %1061, align 8, !tbaa !29
  %1063 = getelementptr inbounds double, ptr %133, i64 %1019
  %1064 = load double, ptr %1063, align 8, !tbaa !29
  %1065 = fmul double %1057, %1064
  %1066 = call double @llvm.fmuladd.f64(double %1060, double %1062, double %1065)
  %1067 = getelementptr inbounds double, ptr %133, i64 %1017
  %1068 = load double, ptr %1067, align 8, !tbaa !29
  %1069 = call double @llvm.fmuladd.f64(double %1068, double %1062, double %1066)
  %1070 = getelementptr inbounds double, ptr %148, i64 %1016
  store double %1069, ptr %1070, align 8, !tbaa !29
  %1071 = getelementptr inbounds double, ptr %105, i64 %1017
  %1072 = load double, ptr %1071, align 8, !tbaa !29
  %1073 = getelementptr inbounds double, ptr %95, i64 %1021
  %1074 = load double, ptr %1073, align 8, !tbaa !29
  %1075 = load double, ptr %1024, align 8, !tbaa !29
  %1076 = getelementptr inbounds double, ptr %99, i64 %1019
  %1077 = load double, ptr %1076, align 8, !tbaa !29
  %1078 = fmul double %1075, %1077
  %1079 = fmul double %1074, %1078
  %1080 = call double @llvm.fmuladd.f64(double %1072, double %1074, double %1079)
  %1081 = getelementptr inbounds double, ptr %105, i64 %1019
  %1082 = load double, ptr %1081, align 8, !tbaa !29
  %1083 = call double @llvm.fmuladd.f64(double %1075, double %1082, double %1080)
  %1084 = getelementptr inbounds double, ptr %147, i64 %1016
  store double %1083, ptr %1084, align 8, !tbaa !29
  %1085 = add nsw i64 %1021, 1
  %1086 = load double, ptr %1024, align 8, !tbaa !29
  %1087 = getelementptr inbounds double, ptr %101, i64 %1019
  %1088 = load double, ptr %1087, align 8, !tbaa !29
  %1089 = fmul double %1086, %1088
  %1090 = getelementptr inbounds double, ptr %95, i64 %1085
  %1091 = load double, ptr %1090, align 8, !tbaa !29
  %1092 = getelementptr inbounds double, ptr %132, i64 %1019
  %1093 = load double, ptr %1092, align 8, !tbaa !29
  %1094 = fmul double %1086, %1093
  %1095 = call double @llvm.fmuladd.f64(double %1089, double %1091, double %1094)
  %1096 = getelementptr inbounds double, ptr %132, i64 %1017
  %1097 = load double, ptr %1096, align 8, !tbaa !29
  %1098 = call double @llvm.fmuladd.f64(double %1097, double %1091, double %1095)
  %1099 = getelementptr inbounds double, ptr %149, i64 %1016
  store double %1098, ptr %1099, align 8, !tbaa !29
  %1100 = add nsw i64 %1021, %994
  %1101 = add nsw i64 %1100, -1
  %1102 = load double, ptr %1024, align 8, !tbaa !29
  %1103 = getelementptr inbounds double, ptr %128, i64 %1019
  %1104 = load double, ptr %1103, align 8, !tbaa !29
  %1105 = fmul double %1102, %1104
  %1106 = getelementptr inbounds double, ptr %95, i64 %1101
  %1107 = load double, ptr %1106, align 8, !tbaa !29
  %1108 = fmul double %1105, %1107
  %1109 = getelementptr inbounds double, ptr %161, i64 %1016
  store double %1108, ptr %1109, align 8, !tbaa !29
  %1110 = load double, ptr %1024, align 8, !tbaa !29
  %1111 = getelementptr inbounds double, ptr %103, i64 %1019
  %1112 = load double, ptr %1111, align 8, !tbaa !29
  %1113 = fmul double %1110, %1112
  %1114 = getelementptr inbounds double, ptr %95, i64 %1100
  %1115 = load double, ptr %1114, align 8, !tbaa !29
  %1116 = getelementptr inbounds double, ptr %130, i64 %1019
  %1117 = load double, ptr %1116, align 8, !tbaa !29
  %1118 = fmul double %1110, %1117
  %1119 = call double @llvm.fmuladd.f64(double %1113, double %1115, double %1118)
  %1120 = getelementptr inbounds double, ptr %130, i64 %1017
  %1121 = load double, ptr %1120, align 8, !tbaa !29
  %1122 = call double @llvm.fmuladd.f64(double %1121, double %1115, double %1119)
  %1123 = getelementptr inbounds double, ptr %151, i64 %1016
  store double %1122, ptr %1123, align 8, !tbaa !29
  %1124 = add nsw i64 %1100, 1
  %1125 = load double, ptr %1024, align 8, !tbaa !29
  %1126 = getelementptr inbounds double, ptr %129, i64 %1019
  %1127 = load double, ptr %1126, align 8, !tbaa !29
  %1128 = fmul double %1125, %1127
  %1129 = getelementptr inbounds double, ptr %95, i64 %1124
  %1130 = load double, ptr %1129, align 8, !tbaa !29
  %1131 = fmul double %1128, %1130
  %1132 = getelementptr inbounds double, ptr %160, i64 %1016
  store double %1131, ptr %1132, align 8, !tbaa !29
  %1133 = sub nsw i64 %1015, %994
  %1134 = add nsw i64 %1133, -1
  %1135 = getelementptr inbounds double, ptr %126, i64 %1017
  %1136 = load double, ptr %1135, align 8, !tbaa !29
  %1137 = load double, ptr %1024, align 8, !tbaa !29
  %1138 = load double, ptr %1026, align 8, !tbaa !29
  %1139 = fmul double %1137, %1138
  %1140 = getelementptr inbounds double, ptr %96, i64 %1134
  %1141 = load double, ptr %1140, align 8, !tbaa !29
  %1142 = call double @llvm.fmuladd.f64(double %1139, double %1141, double %1136)
  %1143 = getelementptr inbounds double, ptr %97, i64 %1014
  %1144 = load double, ptr %1143, align 8, !tbaa !29
  %1145 = getelementptr inbounds double, ptr %126, i64 %1020
  %1146 = load double, ptr %1145, align 8, !tbaa !29
  %1147 = fmul double %1144, %1146
  %1148 = getelementptr inbounds double, ptr %95, i64 %1134
  %1149 = load double, ptr %1148, align 8, !tbaa !29
  %1150 = call double @llvm.fmuladd.f64(double %1147, double %1149, double %1142)
  %1151 = getelementptr inbounds double, ptr %165, i64 %1016
  store double %1150, ptr %1151, align 8, !tbaa !29
  %1152 = getelementptr inbounds double, ptr %102, i64 %1017
  %1153 = load double, ptr %1152, align 8, !tbaa !29
  %1154 = load double, ptr %1024, align 8, !tbaa !29
  %1155 = load double, ptr %1034, align 8, !tbaa !29
  %1156 = fmul double %1154, %1155
  %1157 = getelementptr inbounds double, ptr %96, i64 %1133
  %1158 = load double, ptr %1157, align 8, !tbaa !29
  %1159 = call double @llvm.fmuladd.f64(double %1156, double %1158, double %1153)
  %1160 = load double, ptr %1143, align 8, !tbaa !29
  %1161 = getelementptr inbounds double, ptr %102, i64 %1020
  %1162 = load double, ptr %1161, align 8, !tbaa !29
  %1163 = fmul double %1160, %1162
  %1164 = getelementptr inbounds double, ptr %95, i64 %1133
  %1165 = load double, ptr %1164, align 8, !tbaa !29
  %1166 = call double @llvm.fmuladd.f64(double %1163, double %1165, double %1159)
  %1167 = load double, ptr %1043, align 8, !tbaa !29
  %1168 = call double @llvm.fmuladd.f64(double %1167, double %1158, double %1166)
  %1169 = getelementptr inbounds double, ptr %134, i64 %1017
  %1170 = load double, ptr %1169, align 8, !tbaa !29
  %1171 = call double @llvm.fmuladd.f64(double %1170, double %1165, double %1168)
  %1172 = getelementptr inbounds double, ptr %134, i64 %1019
  %1173 = load double, ptr %1172, align 8, !tbaa !29
  %1174 = call double @llvm.fmuladd.f64(double %1154, double %1173, double %1171)
  %1175 = getelementptr inbounds double, ptr %131, i64 %1020
  %1176 = load double, ptr %1175, align 8, !tbaa !29
  %1177 = call double @llvm.fmuladd.f64(double %1160, double %1176, double %1174)
  %1178 = getelementptr inbounds double, ptr %146, i64 %1016
  store double %1177, ptr %1178, align 8, !tbaa !29
  %1179 = add nsw i64 %1133, 1
  %1180 = getelementptr inbounds double, ptr %127, i64 %1017
  %1181 = load double, ptr %1180, align 8, !tbaa !29
  %1182 = load double, ptr %1024, align 8, !tbaa !29
  %1183 = load double, ptr %1049, align 8, !tbaa !29
  %1184 = fmul double %1182, %1183
  %1185 = getelementptr inbounds double, ptr %96, i64 %1179
  %1186 = load double, ptr %1185, align 8, !tbaa !29
  %1187 = call double @llvm.fmuladd.f64(double %1184, double %1186, double %1181)
  %1188 = load double, ptr %1143, align 8, !tbaa !29
  %1189 = getelementptr inbounds double, ptr %127, i64 %1020
  %1190 = load double, ptr %1189, align 8, !tbaa !29
  %1191 = fmul double %1188, %1190
  %1192 = getelementptr inbounds double, ptr %95, i64 %1179
  %1193 = load double, ptr %1192, align 8, !tbaa !29
  %1194 = call double @llvm.fmuladd.f64(double %1191, double %1193, double %1187)
  %1195 = getelementptr inbounds double, ptr %164, i64 %1016
  store double %1194, ptr %1195, align 8, !tbaa !29
  %1196 = add nsw i64 %1015, -1
  %1197 = getelementptr inbounds double, ptr %100, i64 %1017
  %1198 = load double, ptr %1197, align 8, !tbaa !29
  %1199 = load double, ptr %1024, align 8, !tbaa !29
  %1200 = load double, ptr %1058, align 8, !tbaa !29
  %1201 = fmul double %1199, %1200
  %1202 = getelementptr inbounds double, ptr %96, i64 %1196
  %1203 = load double, ptr %1202, align 8, !tbaa !29
  %1204 = call double @llvm.fmuladd.f64(double %1201, double %1203, double %1198)
  %1205 = load double, ptr %1143, align 8, !tbaa !29
  %1206 = getelementptr inbounds double, ptr %100, i64 %1020
  %1207 = load double, ptr %1206, align 8, !tbaa !29
  %1208 = fmul double %1205, %1207
  %1209 = getelementptr inbounds double, ptr %95, i64 %1196
  %1210 = load double, ptr %1209, align 8, !tbaa !29
  %1211 = call double @llvm.fmuladd.f64(double %1208, double %1210, double %1204)
  %1212 = load double, ptr %1067, align 8, !tbaa !29
  %1213 = call double @llvm.fmuladd.f64(double %1212, double %1203, double %1211)
  %1214 = getelementptr inbounds double, ptr %135, i64 %1017
  %1215 = load double, ptr %1214, align 8, !tbaa !29
  %1216 = call double @llvm.fmuladd.f64(double %1215, double %1210, double %1213)
  %1217 = getelementptr inbounds double, ptr %135, i64 %1019
  %1218 = load double, ptr %1217, align 8, !tbaa !29
  %1219 = call double @llvm.fmuladd.f64(double %1199, double %1218, double %1216)
  %1220 = getelementptr inbounds double, ptr %133, i64 %1020
  %1221 = load double, ptr %1220, align 8, !tbaa !29
  %1222 = call double @llvm.fmuladd.f64(double %1205, double %1221, double %1219)
  %1223 = getelementptr inbounds double, ptr %145, i64 %1016
  store double %1222, ptr %1223, align 8, !tbaa !29
  %1224 = getelementptr inbounds double, ptr %99, i64 %1017
  %1225 = load double, ptr %1224, align 8, !tbaa !29
  %1226 = load double, ptr %1024, align 8, !tbaa !29
  %1227 = load double, ptr %1076, align 8, !tbaa !29
  %1228 = fmul double %1226, %1227
  %1229 = getelementptr inbounds double, ptr %96, i64 %1015
  %1230 = load double, ptr %1229, align 8, !tbaa !29
  %1231 = call double @llvm.fmuladd.f64(double %1228, double %1230, double %1225)
  %1232 = load double, ptr %1143, align 8, !tbaa !29
  %1233 = getelementptr inbounds double, ptr %99, i64 %1020
  %1234 = load double, ptr %1233, align 8, !tbaa !29
  %1235 = fmul double %1232, %1234
  %1236 = getelementptr inbounds double, ptr %95, i64 %1015
  %1237 = load double, ptr %1236, align 8, !tbaa !29
  %1238 = call double @llvm.fmuladd.f64(double %1235, double %1237, double %1231)
  %1239 = getelementptr inbounds double, ptr %104, i64 %1019
  %1240 = load double, ptr %1239, align 8, !tbaa !29
  %1241 = call double @llvm.fmuladd.f64(double %1226, double %1240, double %1238)
  %1242 = getelementptr inbounds double, ptr %105, i64 %1020
  %1243 = load double, ptr %1242, align 8, !tbaa !29
  %1244 = call double @llvm.fmuladd.f64(double %1232, double %1243, double %1241)
  %1245 = load double, ptr %1071, align 8, !tbaa !29
  %1246 = call double @llvm.fmuladd.f64(double %1245, double %1230, double %1244)
  %1247 = getelementptr inbounds double, ptr %104, i64 %1017
  %1248 = load double, ptr %1247, align 8, !tbaa !29
  %1249 = call double @llvm.fmuladd.f64(double %1248, double %1237, double %1246)
  %1250 = getelementptr inbounds double, ptr %144, i64 %1016
  store double %1249, ptr %1250, align 8, !tbaa !29
  %1251 = add nsw i64 %1015, 1
  %1252 = add nsw i64 %1014, 1
  %1253 = add i64 %1017, %992
  %1254 = add nsw i64 %1016, 1
  %1255 = add nuw nsw i32 %1018, 1
  %1256 = icmp eq i32 %1255, %865
  br i1 %1256, label %1257, label %1013, !llvm.loop !469

1257:                                             ; preds = %1013
  %.lcssa4 = phi i64 [ %1251, %1013 ]
  %.lcssa3 = phi i64 [ %1252, %1013 ]
  %.lcssa2 = phi i64 [ %1253, %1013 ]
  %.lcssa1 = phi i64 [ %1254, %1013 ]
  %1258 = trunc i64 %.lcssa3 to i32
  %1259 = trunc i64 %.lcssa4 to i32
  %1260 = trunc i64 %.lcssa1 to i32
  %1261 = trunc i64 %.lcssa2 to i32
  br label %1262

1262:                                             ; preds = %1257, %1002
  %1263 = phi i32 [ %1007, %1002 ], [ %1258, %1257 ]
  %1264 = phi i32 [ %1006, %1002 ], [ %1259, %1257 ]
  %1265 = phi i32 [ %1005, %1002 ], [ %1260, %1257 ]
  %1266 = phi i32 [ %1004, %1002 ], [ %1261, %1257 ]
  %1267 = add nsw i32 %934, %1264
  %1268 = add nsw i32 %935, %1263
  %1269 = add nsw i32 %937, %1266
  %1270 = add nsw i32 %938, %1265
  %1271 = add nuw nsw i32 %1003, 1
  %1272 = icmp eq i32 %1271, %866
  br i1 %1272, label %1273, label %1002, !llvm.loop !470

1273:                                             ; preds = %1262, %996
  %1274 = phi i32 [ %1001, %996 ], [ %1268, %1262 ]
  %1275 = phi i32 [ %1000, %996 ], [ %1267, %1262 ]
  %1276 = phi i32 [ %999, %996 ], [ %1270, %1262 ]
  %1277 = phi i32 [ %998, %996 ], [ %1269, %1262 ]
  %1278 = add nsw i32 %1275, %940
  %1279 = add nsw i32 %1274, %942
  %1280 = add nsw i32 %944, %1277
  %1281 = add nsw i32 %1276, %946
  %1282 = add nuw nsw i32 %997, 1
  %1283 = icmp eq i32 %1282, %867
  br i1 %1283, label %1752, label %996, !llvm.loop !471

1284:                                             ; preds = %159
  %1285 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %1286 = load i32, ptr %5, align 4, !tbaa !7
  %1287 = load i32, ptr %9, align 4, !tbaa !7
  %1288 = load i32, ptr %41, align 4, !tbaa !7
  %1289 = load i32, ptr %42, align 4, !tbaa !7
  %1290 = call i32 @llvm.smax.i32(i32 %1288, i32 %1287)
  %1291 = call i32 @llvm.smax.i32(i32 %1289, i32 %1290)
  %1292 = icmp sgt i32 %1291, 0
  br i1 %1292, label %1293, label %1752

1293:                                             ; preds = %1284
  %1294 = load i32, ptr %166, align 4, !tbaa !7
  %1295 = load i32, ptr %85, align 4, !tbaa !7
  %1296 = sub nsw i32 %1294, %1295
  %1297 = icmp slt i32 %1296, 0
  %1298 = add nsw i32 %1296, 1
  %1299 = select i1 %1297, i32 0, i32 %1298
  %1300 = load i32, ptr %167, align 4, !tbaa !7
  %1301 = load i32, ptr %169, align 4, !tbaa !7
  %1302 = sub nsw i32 %1300, %1301
  %1303 = icmp slt i32 %1302, 0
  %1304 = add nsw i32 %1302, 1
  %1305 = select i1 %1303, i32 0, i32 %1304
  %1306 = mul i32 %1299, %1305
  %1307 = load i32, ptr %40, align 4, !tbaa !7
  %1308 = mul i32 %1306, %1307
  %1309 = load i32, ptr %39, align 4, !tbaa !7
  %1310 = mul nsw i32 %1309, %1299
  %1311 = load i32, ptr %94, align 4, !tbaa !7
  %1312 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %1313 = load i32, ptr %1312, align 4, !tbaa !7
  %1314 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %1315 = load i32, ptr %1314, align 4, !tbaa !7
  %1316 = sub nsw i32 %1315, %1313
  %1317 = icmp slt i32 %1316, 0
  %1318 = add nsw i32 %1316, 1
  %1319 = select i1 %1317, i32 0, i32 %1318
  %1320 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %1321 = load i32, ptr %1320, align 4, !tbaa !7
  %1322 = sub nsw i32 %1321, %1311
  %1323 = icmp slt i32 %1322, 0
  %1324 = add nsw i32 %1322, 1
  %1325 = select i1 %1323, i32 0, i32 %1324
  %1326 = load i32, ptr %91, align 4, !tbaa !7
  %1327 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %1328 = load i32, ptr %1327, align 4, !tbaa !7
  %1329 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %1330 = load i32, ptr %1329, align 4, !tbaa !7
  %1331 = sub nsw i32 %1330, %1328
  %1332 = icmp slt i32 %1331, 0
  %1333 = add nsw i32 %1331, 1
  %1334 = select i1 %1332, i32 0, i32 %1333
  %1335 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %1336 = load i32, ptr %1335, align 4, !tbaa !7
  %1337 = sub nsw i32 %1336, %1326
  %1338 = icmp slt i32 %1337, 0
  %1339 = add nsw i32 %1337, 1
  %1340 = select i1 %1338, i32 0, i32 %1339
  %1341 = load i32, ptr %88, align 4, !tbaa !7
  %1342 = load i32, ptr %185, align 4, !tbaa !7
  %1343 = load i32, ptr %183, align 4, !tbaa !7
  %1344 = sub nsw i32 %1343, %1342
  %1345 = icmp slt i32 %1344, 0
  %1346 = add nsw i32 %1344, 1
  %1347 = select i1 %1345, i32 0, i32 %1346
  %1348 = load i32, ptr %182, align 4, !tbaa !7
  %1349 = sub nsw i32 %1348, %1341
  %1350 = icmp slt i32 %1349, 0
  %1351 = add nsw i32 %1349, 1
  %1352 = select i1 %1350, i32 0, i32 %1351
  %1353 = icmp sgt i32 %1289, 0
  %1354 = icmp sgt i32 %1288, 0
  %1355 = icmp sgt i32 %1287, 0
  %1356 = sub i32 %1352, %1287
  %1357 = sub i32 %1340, %1287
  %1358 = mul nsw i32 %1287, %1286
  %1359 = sub i32 %1310, %1358
  %1360 = sub i32 %1325, %1287
  %1361 = sub i32 %1347, %1288
  %1362 = mul i32 %1361, %1352
  %1363 = sub i32 %1334, %1288
  %1364 = mul i32 %1363, %1340
  %1365 = mul nsw i32 %1288, %1310
  %1366 = sub i32 %1308, %1365
  %1367 = sub i32 %1319, %1288
  %1368 = mul i32 %1367, %1325
  br i1 %1353, label %1369, label %1752

1369:                                             ; preds = %1293
  %1370 = load i32, ptr %81, align 4, !tbaa !7
  %1371 = sub i32 %1370, %1341
  %1372 = getelementptr inbounds i32, ptr %81, i64 1
  %1373 = load i32, ptr %1372, align 4, !tbaa !7
  %1374 = sub i32 %1373, %1342
  %1375 = getelementptr inbounds i32, ptr %81, i64 2
  %1376 = load i32, ptr %1375, align 4, !tbaa !7
  %1377 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %1378 = load i32, ptr %1377, align 4, !tbaa !7
  %1379 = sub nsw i32 %1376, %1378
  %1380 = mul nsw i32 %1347, %1379
  %1381 = add nsw i32 %1374, %1380
  %1382 = mul nsw i32 %1381, %1352
  %1383 = add nsw i32 %1371, %1382
  %1384 = sub i32 %1370, %1326
  %1385 = sub i32 %1373, %1328
  %1386 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %1387 = load i32, ptr %1386, align 4, !tbaa !7
  %1388 = sub nsw i32 %1376, %1387
  %1389 = mul nsw i32 %1334, %1388
  %1390 = add nsw i32 %1385, %1389
  %1391 = mul nsw i32 %1390, %1340
  %1392 = add nsw i32 %1384, %1391
  %1393 = load i32, ptr %8, align 4, !tbaa !7
  %1394 = sub i32 %1393, %1295
  %1395 = load i32, ptr %37, align 4, !tbaa !7
  %1396 = sub i32 %1395, %1301
  %1397 = load i32, ptr %38, align 4, !tbaa !7
  %1398 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %1399 = load i32, ptr %1398, align 4, !tbaa !7
  %1400 = sub nsw i32 %1397, %1399
  %1401 = mul nsw i32 %1305, %1400
  %1402 = add nsw i32 %1396, %1401
  %1403 = mul nsw i32 %1402, %1299
  %1404 = add nsw i32 %1394, %1403
  %1405 = sub i32 %1370, %1311
  %1406 = sub i32 %1373, %1313
  %1407 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %1408 = load i32, ptr %1407, align 4, !tbaa !7
  %1409 = sub nsw i32 %1376, %1408
  %1410 = mul nsw i32 %1319, %1409
  %1411 = add nsw i32 %1406, %1410
  %1412 = mul nsw i32 %1411, %1325
  %1413 = add nsw i32 %1405, %1412
  %1414 = sext i32 %1286 to i64
  %1415 = sext i32 %181 to i64
  %1416 = sext i32 %203 to i64
  %1417 = sext i32 %197 to i64
  br label %1418

1418:                                             ; preds = %1741, %1369
  %1419 = phi i32 [ %1750, %1741 ], [ 0, %1369 ]
  %1420 = phi i32 [ %1748, %1741 ], [ %1404, %1369 ]
  %1421 = phi i32 [ %1749, %1741 ], [ %1413, %1369 ]
  %1422 = phi i32 [ %1746, %1741 ], [ %1383, %1369 ]
  %1423 = phi i32 [ %1747, %1741 ], [ %1392, %1369 ]
  br i1 %1354, label %1424, label %1741

1424:                                             ; preds = %1730, %1418
  %1425 = phi i32 [ %1739, %1730 ], [ 0, %1418 ]
  %1426 = phi i32 [ %1737, %1730 ], [ %1420, %1418 ]
  %1427 = phi i32 [ %1738, %1730 ], [ %1421, %1418 ]
  %1428 = phi i32 [ %1735, %1730 ], [ %1422, %1418 ]
  %1429 = phi i32 [ %1736, %1730 ], [ %1423, %1418 ]
  br i1 %1355, label %1430, label %1730

1430:                                             ; preds = %1424
  %1431 = sext i32 %1426 to i64
  %1432 = sext i32 %1427 to i64
  %1433 = sext i32 %1428 to i64
  %1434 = sext i32 %1429 to i64
  br label %1435

1435:                                             ; preds = %1435, %1430
  %1436 = phi i64 [ %1434, %1430 ], [ %1720, %1435 ]
  %1437 = phi i64 [ %1433, %1430 ], [ %1719, %1435 ]
  %1438 = phi i64 [ %1432, %1430 ], [ %1722, %1435 ]
  %1439 = phi i64 [ %1431, %1430 ], [ %1721, %1435 ]
  %1440 = phi i32 [ 0, %1430 ], [ %1723, %1435 ]
  %1441 = sub nsw i64 %1439, %1415
  %1442 = add nsw i64 %1439, %1415
  %1443 = sub nsw i64 %1437, %1417
  %1444 = sub nsw i64 %1443, %1416
  %1445 = add nsw i64 %1444, -1
  %1446 = getelementptr inbounds double, ptr %98, i64 %1436
  %1447 = load double, ptr %1446, align 8, !tbaa !29
  %1448 = getelementptr inbounds double, ptr %126, i64 %1441
  %1449 = load double, ptr %1448, align 8, !tbaa !29
  %1450 = fmul double %1447, %1449
  %1451 = getelementptr inbounds double, ptr %95, i64 %1445
  %1452 = load double, ptr %1451, align 8, !tbaa !29
  %1453 = getelementptr inbounds double, ptr %140, i64 %1441
  %1454 = load double, ptr %1453, align 8, !tbaa !29
  %1455 = fmul double %1447, %1454
  %1456 = call double @llvm.fmuladd.f64(double %1450, double %1452, double %1455)
  %1457 = getelementptr inbounds double, ptr %140, i64 %1439
  %1458 = load double, ptr %1457, align 8, !tbaa !29
  %1459 = call double @llvm.fmuladd.f64(double %1458, double %1452, double %1456)
  %1460 = getelementptr inbounds double, ptr %163, i64 %1438
  store double %1459, ptr %1460, align 8, !tbaa !29
  %1461 = load double, ptr %1446, align 8, !tbaa !29
  %1462 = getelementptr inbounds double, ptr %102, i64 %1441
  %1463 = load double, ptr %1462, align 8, !tbaa !29
  %1464 = fmul double %1461, %1463
  %1465 = getelementptr inbounds double, ptr %95, i64 %1444
  %1466 = load double, ptr %1465, align 8, !tbaa !29
  %1467 = getelementptr inbounds double, ptr %131, i64 %1441
  %1468 = load double, ptr %1467, align 8, !tbaa !29
  %1469 = fmul double %1461, %1468
  %1470 = call double @llvm.fmuladd.f64(double %1464, double %1466, double %1469)
  %1471 = getelementptr inbounds double, ptr %131, i64 %1439
  %1472 = load double, ptr %1471, align 8, !tbaa !29
  %1473 = call double @llvm.fmuladd.f64(double %1472, double %1466, double %1470)
  %1474 = getelementptr inbounds double, ptr %150, i64 %1438
  store double %1473, ptr %1474, align 8, !tbaa !29
  %1475 = add nsw i64 %1444, 1
  %1476 = load double, ptr %1446, align 8, !tbaa !29
  %1477 = getelementptr inbounds double, ptr %127, i64 %1441
  %1478 = load double, ptr %1477, align 8, !tbaa !29
  %1479 = fmul double %1476, %1478
  %1480 = getelementptr inbounds double, ptr %95, i64 %1475
  %1481 = load double, ptr %1480, align 8, !tbaa !29
  %1482 = getelementptr inbounds double, ptr %139, i64 %1441
  %1483 = load double, ptr %1482, align 8, !tbaa !29
  %1484 = fmul double %1476, %1483
  %1485 = call double @llvm.fmuladd.f64(double %1479, double %1481, double %1484)
  %1486 = getelementptr inbounds double, ptr %139, i64 %1439
  %1487 = load double, ptr %1486, align 8, !tbaa !29
  %1488 = call double @llvm.fmuladd.f64(double %1487, double %1481, double %1485)
  %1489 = getelementptr inbounds double, ptr %162, i64 %1438
  store double %1488, ptr %1489, align 8, !tbaa !29
  %1490 = add nsw i64 %1443, -1
  %1491 = load double, ptr %1446, align 8, !tbaa !29
  %1492 = getelementptr inbounds double, ptr %100, i64 %1441
  %1493 = load double, ptr %1492, align 8, !tbaa !29
  %1494 = fmul double %1491, %1493
  %1495 = getelementptr inbounds double, ptr %95, i64 %1490
  %1496 = load double, ptr %1495, align 8, !tbaa !29
  %1497 = getelementptr inbounds double, ptr %133, i64 %1441
  %1498 = load double, ptr %1497, align 8, !tbaa !29
  %1499 = fmul double %1491, %1498
  %1500 = call double @llvm.fmuladd.f64(double %1494, double %1496, double %1499)
  %1501 = getelementptr inbounds double, ptr %133, i64 %1439
  %1502 = load double, ptr %1501, align 8, !tbaa !29
  %1503 = call double @llvm.fmuladd.f64(double %1502, double %1496, double %1500)
  %1504 = getelementptr inbounds double, ptr %148, i64 %1438
  store double %1503, ptr %1504, align 8, !tbaa !29
  %1505 = getelementptr inbounds double, ptr %105, i64 %1439
  %1506 = load double, ptr %1505, align 8, !tbaa !29
  %1507 = getelementptr inbounds double, ptr %95, i64 %1443
  %1508 = load double, ptr %1507, align 8, !tbaa !29
  %1509 = load double, ptr %1446, align 8, !tbaa !29
  %1510 = getelementptr inbounds double, ptr %99, i64 %1441
  %1511 = load double, ptr %1510, align 8, !tbaa !29
  %1512 = fmul double %1509, %1511
  %1513 = fmul double %1508, %1512
  %1514 = call double @llvm.fmuladd.f64(double %1506, double %1508, double %1513)
  %1515 = getelementptr inbounds double, ptr %105, i64 %1441
  %1516 = load double, ptr %1515, align 8, !tbaa !29
  %1517 = call double @llvm.fmuladd.f64(double %1509, double %1516, double %1514)
  %1518 = getelementptr inbounds double, ptr %147, i64 %1438
  store double %1517, ptr %1518, align 8, !tbaa !29
  %1519 = add nsw i64 %1443, 1
  %1520 = load double, ptr %1446, align 8, !tbaa !29
  %1521 = getelementptr inbounds double, ptr %101, i64 %1441
  %1522 = load double, ptr %1521, align 8, !tbaa !29
  %1523 = fmul double %1520, %1522
  %1524 = getelementptr inbounds double, ptr %95, i64 %1519
  %1525 = load double, ptr %1524, align 8, !tbaa !29
  %1526 = getelementptr inbounds double, ptr %132, i64 %1441
  %1527 = load double, ptr %1526, align 8, !tbaa !29
  %1528 = fmul double %1520, %1527
  %1529 = call double @llvm.fmuladd.f64(double %1523, double %1525, double %1528)
  %1530 = getelementptr inbounds double, ptr %132, i64 %1439
  %1531 = load double, ptr %1530, align 8, !tbaa !29
  %1532 = call double @llvm.fmuladd.f64(double %1531, double %1525, double %1529)
  %1533 = getelementptr inbounds double, ptr %149, i64 %1438
  store double %1532, ptr %1533, align 8, !tbaa !29
  %1534 = add nsw i64 %1443, %1416
  %1535 = add nsw i64 %1534, -1
  %1536 = load double, ptr %1446, align 8, !tbaa !29
  %1537 = getelementptr inbounds double, ptr %128, i64 %1441
  %1538 = load double, ptr %1537, align 8, !tbaa !29
  %1539 = fmul double %1536, %1538
  %1540 = getelementptr inbounds double, ptr %95, i64 %1535
  %1541 = load double, ptr %1540, align 8, !tbaa !29
  %1542 = getelementptr inbounds double, ptr %138, i64 %1441
  %1543 = load double, ptr %1542, align 8, !tbaa !29
  %1544 = fmul double %1536, %1543
  %1545 = call double @llvm.fmuladd.f64(double %1539, double %1541, double %1544)
  %1546 = getelementptr inbounds double, ptr %138, i64 %1439
  %1547 = load double, ptr %1546, align 8, !tbaa !29
  %1548 = call double @llvm.fmuladd.f64(double %1547, double %1541, double %1545)
  %1549 = getelementptr inbounds double, ptr %161, i64 %1438
  store double %1548, ptr %1549, align 8, !tbaa !29
  %1550 = load double, ptr %1446, align 8, !tbaa !29
  %1551 = getelementptr inbounds double, ptr %103, i64 %1441
  %1552 = load double, ptr %1551, align 8, !tbaa !29
  %1553 = fmul double %1550, %1552
  %1554 = getelementptr inbounds double, ptr %95, i64 %1534
  %1555 = load double, ptr %1554, align 8, !tbaa !29
  %1556 = getelementptr inbounds double, ptr %130, i64 %1441
  %1557 = load double, ptr %1556, align 8, !tbaa !29
  %1558 = fmul double %1550, %1557
  %1559 = call double @llvm.fmuladd.f64(double %1553, double %1555, double %1558)
  %1560 = getelementptr inbounds double, ptr %130, i64 %1439
  %1561 = load double, ptr %1560, align 8, !tbaa !29
  %1562 = call double @llvm.fmuladd.f64(double %1561, double %1555, double %1559)
  %1563 = getelementptr inbounds double, ptr %151, i64 %1438
  store double %1562, ptr %1563, align 8, !tbaa !29
  %1564 = add nsw i64 %1534, 1
  %1565 = load double, ptr %1446, align 8, !tbaa !29
  %1566 = getelementptr inbounds double, ptr %129, i64 %1441
  %1567 = load double, ptr %1566, align 8, !tbaa !29
  %1568 = fmul double %1565, %1567
  %1569 = getelementptr inbounds double, ptr %95, i64 %1564
  %1570 = load double, ptr %1569, align 8, !tbaa !29
  %1571 = getelementptr inbounds double, ptr %137, i64 %1441
  %1572 = load double, ptr %1571, align 8, !tbaa !29
  %1573 = fmul double %1565, %1572
  %1574 = call double @llvm.fmuladd.f64(double %1568, double %1570, double %1573)
  %1575 = getelementptr inbounds double, ptr %137, i64 %1439
  %1576 = load double, ptr %1575, align 8, !tbaa !29
  %1577 = call double @llvm.fmuladd.f64(double %1576, double %1570, double %1574)
  %1578 = getelementptr inbounds double, ptr %160, i64 %1438
  store double %1577, ptr %1578, align 8, !tbaa !29
  %1579 = sub nsw i64 %1437, %1416
  %1580 = add nsw i64 %1579, -1
  %1581 = getelementptr inbounds double, ptr %126, i64 %1439
  %1582 = load double, ptr %1581, align 8, !tbaa !29
  %1583 = load double, ptr %1446, align 8, !tbaa !29
  %1584 = load double, ptr %1448, align 8, !tbaa !29
  %1585 = fmul double %1583, %1584
  %1586 = getelementptr inbounds double, ptr %96, i64 %1580
  %1587 = load double, ptr %1586, align 8, !tbaa !29
  %1588 = call double @llvm.fmuladd.f64(double %1585, double %1587, double %1582)
  %1589 = getelementptr inbounds double, ptr %97, i64 %1436
  %1590 = load double, ptr %1589, align 8, !tbaa !29
  %1591 = getelementptr inbounds double, ptr %126, i64 %1442
  %1592 = load double, ptr %1591, align 8, !tbaa !29
  %1593 = fmul double %1590, %1592
  %1594 = getelementptr inbounds double, ptr %95, i64 %1580
  %1595 = load double, ptr %1594, align 8, !tbaa !29
  %1596 = call double @llvm.fmuladd.f64(double %1593, double %1595, double %1588)
  %1597 = load double, ptr %1457, align 8, !tbaa !29
  %1598 = call double @llvm.fmuladd.f64(double %1597, double %1587, double %1596)
  %1599 = getelementptr inbounds double, ptr %142, i64 %1439
  %1600 = load double, ptr %1599, align 8, !tbaa !29
  %1601 = call double @llvm.fmuladd.f64(double %1600, double %1595, double %1598)
  %1602 = getelementptr inbounds double, ptr %142, i64 %1441
  %1603 = load double, ptr %1602, align 8, !tbaa !29
  %1604 = call double @llvm.fmuladd.f64(double %1583, double %1603, double %1601)
  %1605 = getelementptr inbounds double, ptr %140, i64 %1442
  %1606 = load double, ptr %1605, align 8, !tbaa !29
  %1607 = call double @llvm.fmuladd.f64(double %1590, double %1606, double %1604)
  %1608 = getelementptr inbounds double, ptr %165, i64 %1438
  store double %1607, ptr %1608, align 8, !tbaa !29
  %1609 = getelementptr inbounds double, ptr %102, i64 %1439
  %1610 = load double, ptr %1609, align 8, !tbaa !29
  %1611 = load double, ptr %1446, align 8, !tbaa !29
  %1612 = load double, ptr %1462, align 8, !tbaa !29
  %1613 = fmul double %1611, %1612
  %1614 = getelementptr inbounds double, ptr %96, i64 %1579
  %1615 = load double, ptr %1614, align 8, !tbaa !29
  %1616 = call double @llvm.fmuladd.f64(double %1613, double %1615, double %1610)
  %1617 = load double, ptr %1589, align 8, !tbaa !29
  %1618 = getelementptr inbounds double, ptr %102, i64 %1442
  %1619 = load double, ptr %1618, align 8, !tbaa !29
  %1620 = fmul double %1617, %1619
  %1621 = getelementptr inbounds double, ptr %95, i64 %1579
  %1622 = load double, ptr %1621, align 8, !tbaa !29
  %1623 = call double @llvm.fmuladd.f64(double %1620, double %1622, double %1616)
  %1624 = load double, ptr %1471, align 8, !tbaa !29
  %1625 = call double @llvm.fmuladd.f64(double %1624, double %1615, double %1623)
  %1626 = getelementptr inbounds double, ptr %134, i64 %1439
  %1627 = load double, ptr %1626, align 8, !tbaa !29
  %1628 = call double @llvm.fmuladd.f64(double %1627, double %1622, double %1625)
  %1629 = getelementptr inbounds double, ptr %134, i64 %1441
  %1630 = load double, ptr %1629, align 8, !tbaa !29
  %1631 = call double @llvm.fmuladd.f64(double %1611, double %1630, double %1628)
  %1632 = getelementptr inbounds double, ptr %131, i64 %1442
  %1633 = load double, ptr %1632, align 8, !tbaa !29
  %1634 = call double @llvm.fmuladd.f64(double %1617, double %1633, double %1631)
  %1635 = getelementptr inbounds double, ptr %146, i64 %1438
  store double %1634, ptr %1635, align 8, !tbaa !29
  %1636 = add nsw i64 %1579, 1
  %1637 = getelementptr inbounds double, ptr %127, i64 %1439
  %1638 = load double, ptr %1637, align 8, !tbaa !29
  %1639 = load double, ptr %1446, align 8, !tbaa !29
  %1640 = load double, ptr %1477, align 8, !tbaa !29
  %1641 = fmul double %1639, %1640
  %1642 = getelementptr inbounds double, ptr %96, i64 %1636
  %1643 = load double, ptr %1642, align 8, !tbaa !29
  %1644 = call double @llvm.fmuladd.f64(double %1641, double %1643, double %1638)
  %1645 = load double, ptr %1589, align 8, !tbaa !29
  %1646 = getelementptr inbounds double, ptr %127, i64 %1442
  %1647 = load double, ptr %1646, align 8, !tbaa !29
  %1648 = fmul double %1645, %1647
  %1649 = getelementptr inbounds double, ptr %95, i64 %1636
  %1650 = load double, ptr %1649, align 8, !tbaa !29
  %1651 = call double @llvm.fmuladd.f64(double %1648, double %1650, double %1644)
  %1652 = load double, ptr %1486, align 8, !tbaa !29
  %1653 = call double @llvm.fmuladd.f64(double %1652, double %1643, double %1651)
  %1654 = getelementptr inbounds double, ptr %141, i64 %1439
  %1655 = load double, ptr %1654, align 8, !tbaa !29
  %1656 = call double @llvm.fmuladd.f64(double %1655, double %1650, double %1653)
  %1657 = getelementptr inbounds double, ptr %141, i64 %1441
  %1658 = load double, ptr %1657, align 8, !tbaa !29
  %1659 = call double @llvm.fmuladd.f64(double %1639, double %1658, double %1656)
  %1660 = getelementptr inbounds double, ptr %139, i64 %1442
  %1661 = load double, ptr %1660, align 8, !tbaa !29
  %1662 = call double @llvm.fmuladd.f64(double %1645, double %1661, double %1659)
  %1663 = getelementptr inbounds double, ptr %164, i64 %1438
  store double %1662, ptr %1663, align 8, !tbaa !29
  %1664 = add nsw i64 %1437, -1
  %1665 = getelementptr inbounds double, ptr %100, i64 %1439
  %1666 = load double, ptr %1665, align 8, !tbaa !29
  %1667 = load double, ptr %1446, align 8, !tbaa !29
  %1668 = load double, ptr %1492, align 8, !tbaa !29
  %1669 = fmul double %1667, %1668
  %1670 = getelementptr inbounds double, ptr %96, i64 %1664
  %1671 = load double, ptr %1670, align 8, !tbaa !29
  %1672 = call double @llvm.fmuladd.f64(double %1669, double %1671, double %1666)
  %1673 = load double, ptr %1589, align 8, !tbaa !29
  %1674 = getelementptr inbounds double, ptr %100, i64 %1442
  %1675 = load double, ptr %1674, align 8, !tbaa !29
  %1676 = fmul double %1673, %1675
  %1677 = getelementptr inbounds double, ptr %95, i64 %1664
  %1678 = load double, ptr %1677, align 8, !tbaa !29
  %1679 = call double @llvm.fmuladd.f64(double %1676, double %1678, double %1672)
  %1680 = load double, ptr %1501, align 8, !tbaa !29
  %1681 = call double @llvm.fmuladd.f64(double %1680, double %1671, double %1679)
  %1682 = getelementptr inbounds double, ptr %135, i64 %1439
  %1683 = load double, ptr %1682, align 8, !tbaa !29
  %1684 = call double @llvm.fmuladd.f64(double %1683, double %1678, double %1681)
  %1685 = getelementptr inbounds double, ptr %135, i64 %1441
  %1686 = load double, ptr %1685, align 8, !tbaa !29
  %1687 = call double @llvm.fmuladd.f64(double %1667, double %1686, double %1684)
  %1688 = getelementptr inbounds double, ptr %133, i64 %1442
  %1689 = load double, ptr %1688, align 8, !tbaa !29
  %1690 = call double @llvm.fmuladd.f64(double %1673, double %1689, double %1687)
  %1691 = getelementptr inbounds double, ptr %145, i64 %1438
  store double %1690, ptr %1691, align 8, !tbaa !29
  %1692 = getelementptr inbounds double, ptr %99, i64 %1439
  %1693 = load double, ptr %1692, align 8, !tbaa !29
  %1694 = load double, ptr %1446, align 8, !tbaa !29
  %1695 = load double, ptr %1510, align 8, !tbaa !29
  %1696 = fmul double %1694, %1695
  %1697 = getelementptr inbounds double, ptr %96, i64 %1437
  %1698 = load double, ptr %1697, align 8, !tbaa !29
  %1699 = call double @llvm.fmuladd.f64(double %1696, double %1698, double %1693)
  %1700 = load double, ptr %1589, align 8, !tbaa !29
  %1701 = getelementptr inbounds double, ptr %99, i64 %1442
  %1702 = load double, ptr %1701, align 8, !tbaa !29
  %1703 = fmul double %1700, %1702
  %1704 = getelementptr inbounds double, ptr %95, i64 %1437
  %1705 = load double, ptr %1704, align 8, !tbaa !29
  %1706 = call double @llvm.fmuladd.f64(double %1703, double %1705, double %1699)
  %1707 = getelementptr inbounds double, ptr %104, i64 %1441
  %1708 = load double, ptr %1707, align 8, !tbaa !29
  %1709 = call double @llvm.fmuladd.f64(double %1694, double %1708, double %1706)
  %1710 = getelementptr inbounds double, ptr %105, i64 %1442
  %1711 = load double, ptr %1710, align 8, !tbaa !29
  %1712 = call double @llvm.fmuladd.f64(double %1700, double %1711, double %1709)
  %1713 = load double, ptr %1505, align 8, !tbaa !29
  %1714 = call double @llvm.fmuladd.f64(double %1713, double %1698, double %1712)
  %1715 = getelementptr inbounds double, ptr %104, i64 %1439
  %1716 = load double, ptr %1715, align 8, !tbaa !29
  %1717 = call double @llvm.fmuladd.f64(double %1716, double %1705, double %1714)
  %1718 = getelementptr inbounds double, ptr %144, i64 %1438
  store double %1717, ptr %1718, align 8, !tbaa !29
  %1719 = add nsw i64 %1437, 1
  %1720 = add nsw i64 %1436, 1
  %1721 = add i64 %1439, %1414
  %1722 = add nsw i64 %1438, 1
  %1723 = add nuw nsw i32 %1440, 1
  %1724 = icmp eq i32 %1723, %1287
  br i1 %1724, label %1725, label %1435, !llvm.loop !472

1725:                                             ; preds = %1435
  %.lcssa16 = phi i64 [ %1719, %1435 ]
  %.lcssa15 = phi i64 [ %1720, %1435 ]
  %.lcssa14 = phi i64 [ %1721, %1435 ]
  %.lcssa13 = phi i64 [ %1722, %1435 ]
  %1726 = trunc i64 %.lcssa15 to i32
  %1727 = trunc i64 %.lcssa16 to i32
  %1728 = trunc i64 %.lcssa13 to i32
  %1729 = trunc i64 %.lcssa14 to i32
  br label %1730

1730:                                             ; preds = %1725, %1424
  %1731 = phi i32 [ %1429, %1424 ], [ %1726, %1725 ]
  %1732 = phi i32 [ %1428, %1424 ], [ %1727, %1725 ]
  %1733 = phi i32 [ %1427, %1424 ], [ %1728, %1725 ]
  %1734 = phi i32 [ %1426, %1424 ], [ %1729, %1725 ]
  %1735 = add nsw i32 %1356, %1732
  %1736 = add nsw i32 %1357, %1731
  %1737 = add nsw i32 %1359, %1734
  %1738 = add nsw i32 %1360, %1733
  %1739 = add nuw nsw i32 %1425, 1
  %1740 = icmp eq i32 %1739, %1288
  br i1 %1740, label %1741, label %1424, !llvm.loop !473

1741:                                             ; preds = %1730, %1418
  %1742 = phi i32 [ %1423, %1418 ], [ %1736, %1730 ]
  %1743 = phi i32 [ %1422, %1418 ], [ %1735, %1730 ]
  %1744 = phi i32 [ %1421, %1418 ], [ %1738, %1730 ]
  %1745 = phi i32 [ %1420, %1418 ], [ %1737, %1730 ]
  %1746 = add nsw i32 %1743, %1362
  %1747 = add nsw i32 %1742, %1364
  %1748 = add nsw i32 %1366, %1745
  %1749 = add nsw i32 %1744, %1368
  %1750 = add nuw nsw i32 %1419, 1
  %1751 = icmp eq i32 %1750, %1289
  br i1 %1751, label %1752, label %1418, !llvm.loop !474

1752:                                             ; preds = %1741, %1293, %1284, %1273, %871, %862, %851, %519, %510, %499, %213, %204
  %1753 = add nuw nsw i64 %44, 1
  %1754 = load i32, ptr %24, align 8, !tbaa !21
  %1755 = sext i32 %1754 to i64
  %1756 = icmp slt i64 %1753, %1755
  br i1 %1756, label %43, label %1757, !llvm.loop !475

1757:                                             ; preds = %1752, %6
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG3BuildRAPNoSym(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %9) #34
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !250
  %12 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %11, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !172
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !15
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !195
  %18 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %19, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !20
  %22 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %19, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !195
  %24 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %21, i64 0, i32 1
  %25 = load i32, ptr %24, align 8, !tbaa !21
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %1643

27:                                               ; preds = %6
  %28 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %29 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %30 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 5
  %31 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %3, i64 0, i32 5
  %32 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %33 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %34 = icmp sgt i32 %13, 7
  %35 = icmp ugt i32 %13, 15
  %36 = icmp ugt i32 %13, 19
  %37 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %38 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %39 = getelementptr inbounds i32, ptr %5, i64 1
  %40 = getelementptr inbounds i32, ptr %5, i64 2
  %41 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %42 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  br label %43

43:                                               ; preds = %1638, %27
  %44 = phi i64 [ 0, %27 ], [ %1639, %1638 ]
  %45 = phi i64 [ 0, %27 ], [ %.lcssa, %1638 ]
  %46 = phi ptr [ undef, %27 ], [ %134, %1638 ]
  %47 = phi ptr [ undef, %27 ], [ %133, %1638 ]
  %48 = phi ptr [ undef, %27 ], [ %132, %1638 ]
  %49 = phi ptr [ undef, %27 ], [ %131, %1638 ]
  %50 = phi ptr [ undef, %27 ], [ %130, %1638 ]
  %51 = phi ptr [ undef, %27 ], [ %129, %1638 ]
  %52 = phi ptr [ undef, %27 ], [ %125, %1638 ]
  %53 = phi ptr [ undef, %27 ], [ %126, %1638 ]
  %54 = phi ptr [ undef, %27 ], [ %127, %1638 ]
  %55 = phi ptr [ undef, %27 ], [ %128, %1638 ]
  %56 = phi ptr [ undef, %27 ], [ %141, %1638 ]
  %57 = phi ptr [ undef, %27 ], [ %140, %1638 ]
  %58 = phi ptr [ undef, %27 ], [ %139, %1638 ]
  %59 = phi ptr [ undef, %27 ], [ %138, %1638 ]
  %60 = phi ptr [ undef, %27 ], [ %137, %1638 ]
  %61 = phi ptr [ undef, %27 ], [ %136, %1638 ]
  %62 = phi ptr [ undef, %27 ], [ %163, %1638 ]
  %63 = phi ptr [ undef, %27 ], [ %162, %1638 ]
  %64 = phi ptr [ undef, %27 ], [ %161, %1638 ]
  %65 = phi ptr [ undef, %27 ], [ %160, %1638 ]
  %66 = phi ptr [ undef, %27 ], [ %159, %1638 ]
  %67 = phi ptr [ undef, %27 ], [ %158, %1638 ]
  %68 = getelementptr inbounds i32, ptr %23, i64 %44
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = shl i64 %45, 32
  %71 = ashr exact i64 %70, 32
  br label %72

72:                                               ; preds = %72, %43
  %73 = phi i64 [ %77, %72 ], [ %71, %43 ]
  %74 = getelementptr inbounds i32, ptr %17, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = icmp eq i32 %75, %69
  %77 = add i64 %73, 1
  br i1 %76, label %78, label %72, !llvm.loop !476

78:                                               ; preds = %72
  %.lcssa = phi i64 [ %73, %72 ]
  %79 = trunc i64 %.lcssa to i32
  %80 = load ptr, ptr %21, align 8, !tbaa !23
  %81 = getelementptr inbounds %struct.hypre_Box_struct, ptr %80, i64 %44
  %82 = call i32 @hypre_StructMapCoarseToFine(ptr noundef %81, ptr noundef %4, ptr noundef %5, ptr noundef nonnull %8) #33
  %83 = load ptr, ptr %28, align 8, !tbaa !24
  %84 = load ptr, ptr %83, align 8, !tbaa !23
  %85 = getelementptr inbounds %struct.hypre_Box_struct, ptr %84, i64 %.lcssa
  %86 = load ptr, ptr %29, align 8, !tbaa !24
  %87 = load ptr, ptr %86, align 8, !tbaa !23
  %88 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %.lcssa
  %89 = load ptr, ptr %30, align 8, !tbaa !24
  %90 = load ptr, ptr %89, align 8, !tbaa !23
  %91 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa
  %92 = load ptr, ptr %31, align 8, !tbaa !24
  %93 = load ptr, ptr %92, align 8, !tbaa !23
  %94 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %95 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %96 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %1, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %97 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %98 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %2, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %99 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %100 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %101 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %102 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %103 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %104 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br i1 %34, label %105, label %124

105:                                              ; preds = %78
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %106 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %107 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %108 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %109 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %110 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %111 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br i1 %35, label %112, label %124

112:                                              ; preds = %105
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %113 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %114 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %115 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %116 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br i1 %36, label %117, label %124

117:                                              ; preds = %112
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %118 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %119 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %120 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %121 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %122 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 -1, ptr %33, align 4, !tbaa !7
  %123 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %79, ptr noundef nonnull %7) #33
  br label %124

124:                                              ; preds = %117, %112, %105, %78
  %125 = phi ptr [ %113, %117 ], [ %113, %112 ], [ %52, %105 ], [ %52, %78 ]
  %126 = phi ptr [ %114, %117 ], [ %114, %112 ], [ %53, %105 ], [ %53, %78 ]
  %127 = phi ptr [ %115, %117 ], [ %115, %112 ], [ %54, %105 ], [ %54, %78 ]
  %128 = phi ptr [ %116, %117 ], [ %116, %112 ], [ %55, %105 ], [ %55, %78 ]
  %129 = phi ptr [ %111, %117 ], [ %111, %112 ], [ %111, %105 ], [ %51, %78 ]
  %130 = phi ptr [ %110, %117 ], [ %110, %112 ], [ %110, %105 ], [ %50, %78 ]
  %131 = phi ptr [ %109, %117 ], [ %109, %112 ], [ %109, %105 ], [ %49, %78 ]
  %132 = phi ptr [ %108, %117 ], [ %108, %112 ], [ %108, %105 ], [ %48, %78 ]
  %133 = phi ptr [ %107, %117 ], [ %107, %112 ], [ %107, %105 ], [ %47, %78 ]
  %134 = phi ptr [ %106, %117 ], [ %106, %112 ], [ %106, %105 ], [ %46, %78 ]
  %135 = phi i1 [ true, %117 ], [ true, %112 ], [ false, %105 ], [ false, %78 ]
  %136 = phi ptr [ %123, %117 ], [ %61, %112 ], [ %61, %105 ], [ %61, %78 ]
  %137 = phi ptr [ %122, %117 ], [ %60, %112 ], [ %60, %105 ], [ %60, %78 ]
  %138 = phi ptr [ %121, %117 ], [ %59, %112 ], [ %59, %105 ], [ %59, %78 ]
  %139 = phi ptr [ %120, %117 ], [ %58, %112 ], [ %58, %105 ], [ %58, %78 ]
  %140 = phi ptr [ %119, %117 ], [ %57, %112 ], [ %57, %105 ], [ %57, %78 ]
  %141 = phi ptr [ %118, %117 ], [ %56, %112 ], [ %56, %105 ], [ %56, %78 ]
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %142 = trunc i64 %44 to i32
  %143 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %144 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %145 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %146 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %147 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %148 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %149 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  br i1 %135, label %150, label %157

150:                                              ; preds = %124
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %151 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %152 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %153 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 -1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %154 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 -1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %155 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %156 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %3, i32 noundef %142, ptr noundef nonnull %7) #33
  br label %157

157:                                              ; preds = %150, %124
  %158 = phi ptr [ %156, %150 ], [ %67, %124 ]
  %159 = phi ptr [ %155, %150 ], [ %66, %124 ]
  %160 = phi ptr [ %154, %150 ], [ %65, %124 ]
  %161 = phi ptr [ %153, %150 ], [ %64, %124 ]
  %162 = phi ptr [ %152, %150 ], [ %63, %124 ]
  %163 = phi ptr [ %151, %150 ], [ %62, %124 ]
  store i32 0, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 1, ptr %33, align 4, !tbaa !7
  %164 = getelementptr inbounds %struct.hypre_Box_struct, ptr %84, i64 %.lcssa, i32 1
  %165 = getelementptr inbounds %struct.hypre_Box_struct, ptr %84, i64 %.lcssa, i32 1, i64 1
  %166 = load i32, ptr %165, align 4, !tbaa !7
  %167 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 1
  %168 = load i32, ptr %167, align 4, !tbaa !7
  %169 = sub nsw i32 %166, %168
  %170 = add nsw i32 %169, 1
  %171 = icmp slt i32 %169, 0
  %172 = select i1 %171, i32 0, i32 %170
  %173 = load i32, ptr %164, align 4, !tbaa !7
  %174 = load i32, ptr %85, align 4, !tbaa !7
  %175 = sub nsw i32 %173, %174
  %176 = add nsw i32 %175, 1
  %177 = icmp slt i32 %175, 0
  %178 = select i1 %177, i32 0, i32 %176
  %179 = mul nsw i32 %178, %172
  %180 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %.lcssa, i32 1
  %181 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 %.lcssa, i32 1, i64 1
  %182 = load i32, ptr %181, align 4, !tbaa !7
  %183 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 1
  %184 = load i32, ptr %183, align 4, !tbaa !7
  %185 = sub nsw i32 %182, %184
  %186 = add nsw i32 %185, 1
  %187 = icmp slt i32 %185, 0
  %188 = select i1 %187, i32 0, i32 %186
  %189 = load i32, ptr %180, align 4, !tbaa !7
  %190 = load i32, ptr %88, align 4, !tbaa !7
  %191 = sub nsw i32 %189, %190
  %192 = add nsw i32 %191, 1
  %193 = icmp slt i32 %191, 0
  %194 = select i1 %193, i32 0, i32 %192
  %195 = mul nsw i32 %194, %188
  store i32 1, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  %196 = load i32, ptr %180, align 4, !tbaa !7
  %197 = load i32, ptr %88, align 4, !tbaa !7
  %198 = sub nsw i32 %196, %197
  %199 = add nsw i32 %198, 1
  %200 = icmp slt i32 %198, 0
  %201 = select i1 %200, i32 0, i32 %199
  store i32 1, ptr %7, align 4, !tbaa !7
  store i32 0, ptr %32, align 4, !tbaa !7
  store i32 0, ptr %33, align 4, !tbaa !7
  switch i32 %13, label %1198 [
    i32 7, label %202
    i32 15, label %480
    i32 19, label %804
  ]

202:                                              ; preds = %157
  %203 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %204 = load i32, ptr %5, align 4, !tbaa !7
  %205 = load i32, ptr %9, align 4, !tbaa !7
  %206 = load i32, ptr %41, align 4, !tbaa !7
  %207 = load i32, ptr %42, align 4, !tbaa !7
  %208 = call i32 @llvm.smax.i32(i32 %206, i32 %205)
  %209 = call i32 @llvm.smax.i32(i32 %207, i32 %208)
  %210 = icmp sgt i32 %209, 0
  br i1 %210, label %211, label %1638

211:                                              ; preds = %202
  %212 = load i32, ptr %164, align 4, !tbaa !7
  %213 = load i32, ptr %85, align 4, !tbaa !7
  %214 = sub nsw i32 %212, %213
  %215 = icmp slt i32 %214, 0
  %216 = add nsw i32 %214, 1
  %217 = select i1 %215, i32 0, i32 %216
  %218 = load i32, ptr %165, align 4, !tbaa !7
  %219 = load i32, ptr %167, align 4, !tbaa !7
  %220 = sub nsw i32 %218, %219
  %221 = icmp slt i32 %220, 0
  %222 = add nsw i32 %220, 1
  %223 = select i1 %221, i32 0, i32 %222
  %224 = mul i32 %217, %223
  %225 = load i32, ptr %40, align 4, !tbaa !7
  %226 = mul i32 %224, %225
  %227 = load i32, ptr %39, align 4, !tbaa !7
  %228 = mul nsw i32 %227, %217
  %229 = load i32, ptr %94, align 4, !tbaa !7
  %230 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %231 = load i32, ptr %230, align 4, !tbaa !7
  %232 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %233 = load i32, ptr %232, align 4, !tbaa !7
  %234 = sub nsw i32 %233, %231
  %235 = icmp slt i32 %234, 0
  %236 = add nsw i32 %234, 1
  %237 = select i1 %235, i32 0, i32 %236
  %238 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %239 = load i32, ptr %238, align 4, !tbaa !7
  %240 = sub nsw i32 %239, %229
  %241 = icmp slt i32 %240, 0
  %242 = add nsw i32 %240, 1
  %243 = select i1 %241, i32 0, i32 %242
  %244 = load i32, ptr %91, align 4, !tbaa !7
  %245 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %246 = load i32, ptr %245, align 4, !tbaa !7
  %247 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %248 = load i32, ptr %247, align 4, !tbaa !7
  %249 = sub nsw i32 %248, %246
  %250 = icmp slt i32 %249, 0
  %251 = add nsw i32 %249, 1
  %252 = select i1 %250, i32 0, i32 %251
  %253 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %254 = load i32, ptr %253, align 4, !tbaa !7
  %255 = sub nsw i32 %254, %244
  %256 = icmp slt i32 %255, 0
  %257 = add nsw i32 %255, 1
  %258 = select i1 %256, i32 0, i32 %257
  %259 = load i32, ptr %88, align 4, !tbaa !7
  %260 = load i32, ptr %183, align 4, !tbaa !7
  %261 = load i32, ptr %181, align 4, !tbaa !7
  %262 = sub nsw i32 %261, %260
  %263 = icmp slt i32 %262, 0
  %264 = add nsw i32 %262, 1
  %265 = select i1 %263, i32 0, i32 %264
  %266 = load i32, ptr %180, align 4, !tbaa !7
  %267 = sub nsw i32 %266, %259
  %268 = icmp slt i32 %267, 0
  %269 = add nsw i32 %267, 1
  %270 = select i1 %268, i32 0, i32 %269
  %271 = icmp sgt i32 %207, 0
  %272 = icmp sgt i32 %206, 0
  %273 = icmp sgt i32 %205, 0
  %274 = sub i32 %270, %205
  %275 = sub i32 %258, %205
  %276 = mul nsw i32 %205, %204
  %277 = sub i32 %228, %276
  %278 = sub i32 %243, %205
  %279 = sub i32 %265, %206
  %280 = mul i32 %279, %270
  %281 = sub i32 %252, %206
  %282 = mul i32 %281, %258
  %283 = mul nsw i32 %206, %228
  %284 = sub i32 %226, %283
  %285 = sub i32 %237, %206
  %286 = mul i32 %285, %243
  br i1 %271, label %287, label %1638

287:                                              ; preds = %211
  %288 = load i32, ptr %81, align 4, !tbaa !7
  %289 = sub i32 %288, %259
  %290 = getelementptr inbounds i32, ptr %81, i64 1
  %291 = load i32, ptr %290, align 4, !tbaa !7
  %292 = sub i32 %291, %260
  %293 = getelementptr inbounds i32, ptr %81, i64 2
  %294 = load i32, ptr %293, align 4, !tbaa !7
  %295 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %296 = load i32, ptr %295, align 4, !tbaa !7
  %297 = sub nsw i32 %294, %296
  %298 = mul nsw i32 %265, %297
  %299 = add nsw i32 %292, %298
  %300 = mul nsw i32 %299, %270
  %301 = add nsw i32 %289, %300
  %302 = sub i32 %288, %244
  %303 = sub i32 %291, %246
  %304 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %305 = load i32, ptr %304, align 4, !tbaa !7
  %306 = sub nsw i32 %294, %305
  %307 = mul nsw i32 %252, %306
  %308 = add nsw i32 %303, %307
  %309 = mul nsw i32 %308, %258
  %310 = add nsw i32 %302, %309
  %311 = load i32, ptr %8, align 4, !tbaa !7
  %312 = sub i32 %311, %213
  %313 = load i32, ptr %37, align 4, !tbaa !7
  %314 = sub i32 %313, %219
  %315 = load i32, ptr %38, align 4, !tbaa !7
  %316 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %317 = load i32, ptr %316, align 4, !tbaa !7
  %318 = sub nsw i32 %315, %317
  %319 = mul nsw i32 %223, %318
  %320 = add nsw i32 %314, %319
  %321 = mul nsw i32 %320, %217
  %322 = add nsw i32 %312, %321
  %323 = sub i32 %288, %229
  %324 = sub i32 %291, %231
  %325 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %326 = load i32, ptr %325, align 4, !tbaa !7
  %327 = sub nsw i32 %294, %326
  %328 = mul nsw i32 %237, %327
  %329 = add nsw i32 %324, %328
  %330 = mul nsw i32 %329, %243
  %331 = add nsw i32 %323, %330
  %332 = sext i32 %204 to i64
  %333 = sext i32 %179 to i64
  %334 = sext i32 %201 to i64
  %335 = sext i32 %195 to i64
  br label %336

336:                                              ; preds = %469, %287
  %337 = phi i32 [ %478, %469 ], [ 0, %287 ]
  %338 = phi i32 [ %476, %469 ], [ %322, %287 ]
  %339 = phi i32 [ %477, %469 ], [ %331, %287 ]
  %340 = phi i32 [ %474, %469 ], [ %301, %287 ]
  %341 = phi i32 [ %475, %469 ], [ %310, %287 ]
  br i1 %272, label %342, label %469

342:                                              ; preds = %458, %336
  %343 = phi i32 [ %467, %458 ], [ 0, %336 ]
  %344 = phi i32 [ %465, %458 ], [ %338, %336 ]
  %345 = phi i32 [ %466, %458 ], [ %339, %336 ]
  %346 = phi i32 [ %463, %458 ], [ %340, %336 ]
  %347 = phi i32 [ %464, %458 ], [ %341, %336 ]
  br i1 %273, label %348, label %458

348:                                              ; preds = %342
  %349 = sext i32 %344 to i64
  %350 = sext i32 %345 to i64
  %351 = sext i32 %346 to i64
  %352 = sext i32 %347 to i64
  br label %353

353:                                              ; preds = %353, %348
  %354 = phi i64 [ %352, %348 ], [ %448, %353 ]
  %355 = phi i64 [ %351, %348 ], [ %431, %353 ]
  %356 = phi i64 [ %350, %348 ], [ %450, %353 ]
  %357 = phi i64 [ %349, %348 ], [ %449, %353 ]
  %358 = phi i32 [ 0, %348 ], [ %451, %353 ]
  %359 = sub nsw i64 %357, %333
  %360 = add nsw i64 %357, %333
  %361 = add nsw i64 %355, %335
  %362 = add nsw i64 %361, %334
  %363 = getelementptr inbounds double, ptr %97, i64 %354
  %364 = load double, ptr %363, align 8, !tbaa !29
  %365 = getelementptr inbounds double, ptr %103, i64 %360
  %366 = load double, ptr %365, align 8, !tbaa !29
  %367 = fmul double %364, %366
  %368 = getelementptr inbounds double, ptr %96, i64 %362
  %369 = load double, ptr %368, align 8, !tbaa !29
  %370 = fmul double %367, %369
  %371 = getelementptr inbounds double, ptr %149, i64 %356
  store double %370, ptr %371, align 8, !tbaa !29
  %372 = add nsw i64 %361, 1
  %373 = load double, ptr %363, align 8, !tbaa !29
  %374 = getelementptr inbounds double, ptr %101, i64 %360
  %375 = load double, ptr %374, align 8, !tbaa !29
  %376 = fmul double %373, %375
  %377 = getelementptr inbounds double, ptr %96, i64 %372
  %378 = load double, ptr %377, align 8, !tbaa !29
  %379 = fmul double %376, %378
  %380 = getelementptr inbounds double, ptr %147, i64 %356
  store double %379, ptr %380, align 8, !tbaa !29
  %381 = getelementptr inbounds double, ptr %104, i64 %357
  %382 = load double, ptr %381, align 8, !tbaa !29
  %383 = getelementptr inbounds double, ptr %96, i64 %361
  %384 = load double, ptr %383, align 8, !tbaa !29
  %385 = load double, ptr %363, align 8, !tbaa !29
  %386 = getelementptr inbounds double, ptr %99, i64 %360
  %387 = load double, ptr %386, align 8, !tbaa !29
  %388 = fmul double %385, %387
  %389 = fmul double %384, %388
  %390 = call double @llvm.fmuladd.f64(double %382, double %384, double %389)
  %391 = getelementptr inbounds double, ptr %104, i64 %360
  %392 = load double, ptr %391, align 8, !tbaa !29
  %393 = call double @llvm.fmuladd.f64(double %385, double %392, double %390)
  %394 = getelementptr inbounds double, ptr %145, i64 %356
  store double %393, ptr %394, align 8, !tbaa !29
  %395 = add nsw i64 %361, -1
  %396 = load double, ptr %363, align 8, !tbaa !29
  %397 = getelementptr inbounds double, ptr %100, i64 %360
  %398 = load double, ptr %397, align 8, !tbaa !29
  %399 = fmul double %396, %398
  %400 = getelementptr inbounds double, ptr %96, i64 %395
  %401 = load double, ptr %400, align 8, !tbaa !29
  %402 = fmul double %399, %401
  %403 = getelementptr inbounds double, ptr %146, i64 %356
  store double %402, ptr %403, align 8, !tbaa !29
  %404 = sub nsw i64 %361, %334
  %405 = load double, ptr %363, align 8, !tbaa !29
  %406 = getelementptr inbounds double, ptr %102, i64 %360
  %407 = load double, ptr %406, align 8, !tbaa !29
  %408 = fmul double %405, %407
  %409 = getelementptr inbounds double, ptr %96, i64 %404
  %410 = load double, ptr %409, align 8, !tbaa !29
  %411 = fmul double %408, %410
  %412 = getelementptr inbounds double, ptr %148, i64 %356
  store double %411, ptr %412, align 8, !tbaa !29
  %413 = add nsw i64 %355, %334
  %414 = getelementptr inbounds double, ptr %103, i64 %357
  %415 = load double, ptr %414, align 8, !tbaa !29
  %416 = getelementptr inbounds double, ptr %98, i64 %354
  %417 = load double, ptr %416, align 8, !tbaa !29
  %418 = getelementptr inbounds double, ptr %103, i64 %359
  %419 = load double, ptr %418, align 8, !tbaa !29
  %420 = fmul double %417, %419
  %421 = getelementptr inbounds double, ptr %96, i64 %413
  %422 = load double, ptr %421, align 8, !tbaa !29
  %423 = call double @llvm.fmuladd.f64(double %420, double %422, double %415)
  %424 = load double, ptr %363, align 8, !tbaa !29
  %425 = load double, ptr %365, align 8, !tbaa !29
  %426 = fmul double %424, %425
  %427 = getelementptr inbounds double, ptr %95, i64 %413
  %428 = load double, ptr %427, align 8, !tbaa !29
  %429 = call double @llvm.fmuladd.f64(double %426, double %428, double %423)
  %430 = getelementptr inbounds double, ptr %144, i64 %356
  store double %429, ptr %430, align 8, !tbaa !29
  %431 = add nsw i64 %355, 1
  %432 = getelementptr inbounds double, ptr %101, i64 %357
  %433 = load double, ptr %432, align 8, !tbaa !29
  %434 = load double, ptr %416, align 8, !tbaa !29
  %435 = getelementptr inbounds double, ptr %101, i64 %359
  %436 = load double, ptr %435, align 8, !tbaa !29
  %437 = fmul double %434, %436
  %438 = getelementptr inbounds double, ptr %96, i64 %431
  %439 = load double, ptr %438, align 8, !tbaa !29
  %440 = call double @llvm.fmuladd.f64(double %437, double %439, double %433)
  %441 = load double, ptr %363, align 8, !tbaa !29
  %442 = load double, ptr %374, align 8, !tbaa !29
  %443 = fmul double %441, %442
  %444 = getelementptr inbounds double, ptr %95, i64 %431
  %445 = load double, ptr %444, align 8, !tbaa !29
  %446 = call double @llvm.fmuladd.f64(double %443, double %445, double %440)
  %447 = getelementptr inbounds double, ptr %143, i64 %356
  store double %446, ptr %447, align 8, !tbaa !29
  %448 = add nsw i64 %354, 1
  %449 = add i64 %357, %332
  %450 = add nsw i64 %356, 1
  %451 = add nuw nsw i32 %358, 1
  %452 = icmp eq i32 %451, %205
  br i1 %452, label %453, label %353, !llvm.loop !477

453:                                              ; preds = %353
  %.lcssa12 = phi i64 [ %431, %353 ]
  %.lcssa11 = phi i64 [ %448, %353 ]
  %.lcssa10 = phi i64 [ %449, %353 ]
  %.lcssa9 = phi i64 [ %450, %353 ]
  %454 = trunc i64 %.lcssa11 to i32
  %455 = trunc i64 %.lcssa12 to i32
  %456 = trunc i64 %.lcssa9 to i32
  %457 = trunc i64 %.lcssa10 to i32
  br label %458

458:                                              ; preds = %453, %342
  %459 = phi i32 [ %347, %342 ], [ %454, %453 ]
  %460 = phi i32 [ %346, %342 ], [ %455, %453 ]
  %461 = phi i32 [ %345, %342 ], [ %456, %453 ]
  %462 = phi i32 [ %344, %342 ], [ %457, %453 ]
  %463 = add nsw i32 %274, %460
  %464 = add nsw i32 %275, %459
  %465 = add nsw i32 %277, %462
  %466 = add nsw i32 %278, %461
  %467 = add nuw nsw i32 %343, 1
  %468 = icmp eq i32 %467, %206
  br i1 %468, label %469, label %342, !llvm.loop !478

469:                                              ; preds = %458, %336
  %470 = phi i32 [ %341, %336 ], [ %464, %458 ]
  %471 = phi i32 [ %340, %336 ], [ %463, %458 ]
  %472 = phi i32 [ %339, %336 ], [ %466, %458 ]
  %473 = phi i32 [ %338, %336 ], [ %465, %458 ]
  %474 = add nsw i32 %471, %280
  %475 = add nsw i32 %470, %282
  %476 = add nsw i32 %284, %473
  %477 = add nsw i32 %472, %286
  %478 = add nuw nsw i32 %337, 1
  %479 = icmp eq i32 %478, %207
  br i1 %479, label %1638, label %336, !llvm.loop !479

480:                                              ; preds = %157
  %481 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %482 = load i32, ptr %5, align 4, !tbaa !7
  %483 = load i32, ptr %9, align 4, !tbaa !7
  %484 = load i32, ptr %41, align 4, !tbaa !7
  %485 = load i32, ptr %42, align 4, !tbaa !7
  %486 = call i32 @llvm.smax.i32(i32 %484, i32 %483)
  %487 = call i32 @llvm.smax.i32(i32 %485, i32 %486)
  %488 = icmp sgt i32 %487, 0
  br i1 %488, label %489, label %1638

489:                                              ; preds = %480
  %490 = load i32, ptr %164, align 4, !tbaa !7
  %491 = load i32, ptr %85, align 4, !tbaa !7
  %492 = sub nsw i32 %490, %491
  %493 = icmp slt i32 %492, 0
  %494 = add nsw i32 %492, 1
  %495 = select i1 %493, i32 0, i32 %494
  %496 = load i32, ptr %165, align 4, !tbaa !7
  %497 = load i32, ptr %167, align 4, !tbaa !7
  %498 = sub nsw i32 %496, %497
  %499 = icmp slt i32 %498, 0
  %500 = add nsw i32 %498, 1
  %501 = select i1 %499, i32 0, i32 %500
  %502 = mul i32 %495, %501
  %503 = load i32, ptr %40, align 4, !tbaa !7
  %504 = mul i32 %502, %503
  %505 = load i32, ptr %39, align 4, !tbaa !7
  %506 = mul nsw i32 %505, %495
  %507 = load i32, ptr %94, align 4, !tbaa !7
  %508 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %509 = load i32, ptr %508, align 4, !tbaa !7
  %510 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %511 = load i32, ptr %510, align 4, !tbaa !7
  %512 = sub nsw i32 %511, %509
  %513 = icmp slt i32 %512, 0
  %514 = add nsw i32 %512, 1
  %515 = select i1 %513, i32 0, i32 %514
  %516 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %517 = load i32, ptr %516, align 4, !tbaa !7
  %518 = sub nsw i32 %517, %507
  %519 = icmp slt i32 %518, 0
  %520 = add nsw i32 %518, 1
  %521 = select i1 %519, i32 0, i32 %520
  %522 = load i32, ptr %91, align 4, !tbaa !7
  %523 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %524 = load i32, ptr %523, align 4, !tbaa !7
  %525 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %526 = load i32, ptr %525, align 4, !tbaa !7
  %527 = sub nsw i32 %526, %524
  %528 = icmp slt i32 %527, 0
  %529 = add nsw i32 %527, 1
  %530 = select i1 %528, i32 0, i32 %529
  %531 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %532 = load i32, ptr %531, align 4, !tbaa !7
  %533 = sub nsw i32 %532, %522
  %534 = icmp slt i32 %533, 0
  %535 = add nsw i32 %533, 1
  %536 = select i1 %534, i32 0, i32 %535
  %537 = load i32, ptr %88, align 4, !tbaa !7
  %538 = load i32, ptr %183, align 4, !tbaa !7
  %539 = load i32, ptr %181, align 4, !tbaa !7
  %540 = sub nsw i32 %539, %538
  %541 = icmp slt i32 %540, 0
  %542 = add nsw i32 %540, 1
  %543 = select i1 %541, i32 0, i32 %542
  %544 = load i32, ptr %180, align 4, !tbaa !7
  %545 = sub nsw i32 %544, %537
  %546 = icmp slt i32 %545, 0
  %547 = add nsw i32 %545, 1
  %548 = select i1 %546, i32 0, i32 %547
  %549 = icmp sgt i32 %485, 0
  %550 = icmp sgt i32 %484, 0
  %551 = icmp sgt i32 %483, 0
  %552 = sub i32 %548, %483
  %553 = sub i32 %536, %483
  %554 = mul nsw i32 %483, %482
  %555 = sub i32 %506, %554
  %556 = sub i32 %521, %483
  %557 = sub i32 %543, %484
  %558 = mul i32 %557, %548
  %559 = sub i32 %530, %484
  %560 = mul i32 %559, %536
  %561 = mul nsw i32 %484, %506
  %562 = sub i32 %504, %561
  %563 = sub i32 %515, %484
  %564 = mul i32 %563, %521
  br i1 %549, label %565, label %1638

565:                                              ; preds = %489
  %566 = load i32, ptr %81, align 4, !tbaa !7
  %567 = sub i32 %566, %537
  %568 = getelementptr inbounds i32, ptr %81, i64 1
  %569 = load i32, ptr %568, align 4, !tbaa !7
  %570 = sub i32 %569, %538
  %571 = getelementptr inbounds i32, ptr %81, i64 2
  %572 = load i32, ptr %571, align 4, !tbaa !7
  %573 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %574 = load i32, ptr %573, align 4, !tbaa !7
  %575 = sub nsw i32 %572, %574
  %576 = mul nsw i32 %543, %575
  %577 = add nsw i32 %570, %576
  %578 = mul nsw i32 %577, %548
  %579 = add nsw i32 %567, %578
  %580 = sub i32 %566, %522
  %581 = sub i32 %569, %524
  %582 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %583 = load i32, ptr %582, align 4, !tbaa !7
  %584 = sub nsw i32 %572, %583
  %585 = mul nsw i32 %530, %584
  %586 = add nsw i32 %581, %585
  %587 = mul nsw i32 %586, %536
  %588 = add nsw i32 %580, %587
  %589 = load i32, ptr %8, align 4, !tbaa !7
  %590 = sub i32 %589, %491
  %591 = load i32, ptr %37, align 4, !tbaa !7
  %592 = sub i32 %591, %497
  %593 = load i32, ptr %38, align 4, !tbaa !7
  %594 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %595 = load i32, ptr %594, align 4, !tbaa !7
  %596 = sub nsw i32 %593, %595
  %597 = mul nsw i32 %501, %596
  %598 = add nsw i32 %592, %597
  %599 = mul nsw i32 %598, %495
  %600 = add nsw i32 %590, %599
  %601 = sub i32 %566, %507
  %602 = sub i32 %569, %509
  %603 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %604 = load i32, ptr %603, align 4, !tbaa !7
  %605 = sub nsw i32 %572, %604
  %606 = mul nsw i32 %515, %605
  %607 = add nsw i32 %602, %606
  %608 = mul nsw i32 %607, %521
  %609 = add nsw i32 %601, %608
  %610 = sext i32 %482 to i64
  %611 = sext i32 %179 to i64
  %612 = sext i32 %201 to i64
  %613 = sext i32 %195 to i64
  br label %614

614:                                              ; preds = %793, %565
  %615 = phi i32 [ %802, %793 ], [ 0, %565 ]
  %616 = phi i32 [ %800, %793 ], [ %600, %565 ]
  %617 = phi i32 [ %801, %793 ], [ %609, %565 ]
  %618 = phi i32 [ %798, %793 ], [ %579, %565 ]
  %619 = phi i32 [ %799, %793 ], [ %588, %565 ]
  br i1 %550, label %620, label %793

620:                                              ; preds = %782, %614
  %621 = phi i32 [ %791, %782 ], [ 0, %614 ]
  %622 = phi i32 [ %789, %782 ], [ %616, %614 ]
  %623 = phi i32 [ %790, %782 ], [ %617, %614 ]
  %624 = phi i32 [ %787, %782 ], [ %618, %614 ]
  %625 = phi i32 [ %788, %782 ], [ %619, %614 ]
  br i1 %551, label %626, label %782

626:                                              ; preds = %620
  %627 = sext i32 %622 to i64
  %628 = sext i32 %623 to i64
  %629 = sext i32 %624 to i64
  %630 = sext i32 %625 to i64
  br label %631

631:                                              ; preds = %631, %626
  %632 = phi i64 [ %630, %626 ], [ %772, %631 ]
  %633 = phi i64 [ %629, %626 ], [ %744, %631 ]
  %634 = phi i64 [ %628, %626 ], [ %774, %631 ]
  %635 = phi i64 [ %627, %626 ], [ %773, %631 ]
  %636 = phi i32 [ 0, %626 ], [ %775, %631 ]
  %637 = sub nsw i64 %635, %611
  %638 = add nsw i64 %635, %611
  %639 = add nsw i64 %633, %613
  %640 = add nsw i64 %639, %612
  %641 = getelementptr inbounds double, ptr %97, i64 %632
  %642 = load double, ptr %641, align 8, !tbaa !29
  %643 = getelementptr inbounds double, ptr %103, i64 %638
  %644 = load double, ptr %643, align 8, !tbaa !29
  %645 = fmul double %642, %644
  %646 = getelementptr inbounds double, ptr %96, i64 %640
  %647 = load double, ptr %646, align 8, !tbaa !29
  %648 = getelementptr inbounds double, ptr %131, i64 %638
  %649 = load double, ptr %648, align 8, !tbaa !29
  %650 = fmul double %642, %649
  %651 = call double @llvm.fmuladd.f64(double %645, double %647, double %650)
  %652 = getelementptr inbounds double, ptr %131, i64 %635
  %653 = load double, ptr %652, align 8, !tbaa !29
  %654 = call double @llvm.fmuladd.f64(double %653, double %647, double %651)
  %655 = getelementptr inbounds double, ptr %149, i64 %634
  store double %654, ptr %655, align 8, !tbaa !29
  %656 = add nsw i64 %639, 1
  %657 = load double, ptr %641, align 8, !tbaa !29
  %658 = getelementptr inbounds double, ptr %101, i64 %638
  %659 = load double, ptr %658, align 8, !tbaa !29
  %660 = fmul double %657, %659
  %661 = getelementptr inbounds double, ptr %96, i64 %656
  %662 = load double, ptr %661, align 8, !tbaa !29
  %663 = getelementptr inbounds double, ptr %133, i64 %638
  %664 = load double, ptr %663, align 8, !tbaa !29
  %665 = fmul double %657, %664
  %666 = call double @llvm.fmuladd.f64(double %660, double %662, double %665)
  %667 = getelementptr inbounds double, ptr %133, i64 %635
  %668 = load double, ptr %667, align 8, !tbaa !29
  %669 = call double @llvm.fmuladd.f64(double %668, double %662, double %666)
  %670 = getelementptr inbounds double, ptr %147, i64 %634
  store double %669, ptr %670, align 8, !tbaa !29
  %671 = getelementptr inbounds double, ptr %104, i64 %635
  %672 = load double, ptr %671, align 8, !tbaa !29
  %673 = getelementptr inbounds double, ptr %96, i64 %639
  %674 = load double, ptr %673, align 8, !tbaa !29
  %675 = load double, ptr %641, align 8, !tbaa !29
  %676 = getelementptr inbounds double, ptr %99, i64 %638
  %677 = load double, ptr %676, align 8, !tbaa !29
  %678 = fmul double %675, %677
  %679 = fmul double %674, %678
  %680 = call double @llvm.fmuladd.f64(double %672, double %674, double %679)
  %681 = getelementptr inbounds double, ptr %104, i64 %638
  %682 = load double, ptr %681, align 8, !tbaa !29
  %683 = call double @llvm.fmuladd.f64(double %675, double %682, double %680)
  %684 = getelementptr inbounds double, ptr %145, i64 %634
  store double %683, ptr %684, align 8, !tbaa !29
  %685 = add nsw i64 %639, -1
  %686 = load double, ptr %641, align 8, !tbaa !29
  %687 = getelementptr inbounds double, ptr %100, i64 %638
  %688 = load double, ptr %687, align 8, !tbaa !29
  %689 = fmul double %686, %688
  %690 = getelementptr inbounds double, ptr %96, i64 %685
  %691 = load double, ptr %690, align 8, !tbaa !29
  %692 = getelementptr inbounds double, ptr %134, i64 %638
  %693 = load double, ptr %692, align 8, !tbaa !29
  %694 = fmul double %686, %693
  %695 = call double @llvm.fmuladd.f64(double %689, double %691, double %694)
  %696 = getelementptr inbounds double, ptr %134, i64 %635
  %697 = load double, ptr %696, align 8, !tbaa !29
  %698 = call double @llvm.fmuladd.f64(double %697, double %691, double %695)
  %699 = getelementptr inbounds double, ptr %146, i64 %634
  store double %698, ptr %699, align 8, !tbaa !29
  %700 = sub nsw i64 %639, %612
  %701 = load double, ptr %641, align 8, !tbaa !29
  %702 = getelementptr inbounds double, ptr %102, i64 %638
  %703 = load double, ptr %702, align 8, !tbaa !29
  %704 = fmul double %701, %703
  %705 = getelementptr inbounds double, ptr %96, i64 %700
  %706 = load double, ptr %705, align 8, !tbaa !29
  %707 = getelementptr inbounds double, ptr %132, i64 %638
  %708 = load double, ptr %707, align 8, !tbaa !29
  %709 = fmul double %701, %708
  %710 = call double @llvm.fmuladd.f64(double %704, double %706, double %709)
  %711 = getelementptr inbounds double, ptr %132, i64 %635
  %712 = load double, ptr %711, align 8, !tbaa !29
  %713 = call double @llvm.fmuladd.f64(double %712, double %706, double %710)
  %714 = getelementptr inbounds double, ptr %148, i64 %634
  store double %713, ptr %714, align 8, !tbaa !29
  %715 = add nsw i64 %633, %612
  %716 = getelementptr inbounds double, ptr %103, i64 %635
  %717 = load double, ptr %716, align 8, !tbaa !29
  %718 = getelementptr inbounds double, ptr %98, i64 %632
  %719 = load double, ptr %718, align 8, !tbaa !29
  %720 = getelementptr inbounds double, ptr %103, i64 %637
  %721 = load double, ptr %720, align 8, !tbaa !29
  %722 = fmul double %719, %721
  %723 = getelementptr inbounds double, ptr %96, i64 %715
  %724 = load double, ptr %723, align 8, !tbaa !29
  %725 = call double @llvm.fmuladd.f64(double %722, double %724, double %717)
  %726 = load double, ptr %641, align 8, !tbaa !29
  %727 = load double, ptr %643, align 8, !tbaa !29
  %728 = fmul double %726, %727
  %729 = getelementptr inbounds double, ptr %95, i64 %715
  %730 = load double, ptr %729, align 8, !tbaa !29
  %731 = call double @llvm.fmuladd.f64(double %728, double %730, double %725)
  %732 = getelementptr inbounds double, ptr %129, i64 %635
  %733 = load double, ptr %732, align 8, !tbaa !29
  %734 = call double @llvm.fmuladd.f64(double %733, double %724, double %731)
  %735 = load double, ptr %652, align 8, !tbaa !29
  %736 = call double @llvm.fmuladd.f64(double %735, double %730, double %734)
  %737 = getelementptr inbounds double, ptr %131, i64 %637
  %738 = load double, ptr %737, align 8, !tbaa !29
  %739 = call double @llvm.fmuladd.f64(double %719, double %738, double %736)
  %740 = getelementptr inbounds double, ptr %129, i64 %638
  %741 = load double, ptr %740, align 8, !tbaa !29
  %742 = call double @llvm.fmuladd.f64(double %726, double %741, double %739)
  %743 = getelementptr inbounds double, ptr %144, i64 %634
  store double %742, ptr %743, align 8, !tbaa !29
  %744 = add nsw i64 %633, 1
  %745 = getelementptr inbounds double, ptr %101, i64 %635
  %746 = load double, ptr %745, align 8, !tbaa !29
  %747 = load double, ptr %718, align 8, !tbaa !29
  %748 = getelementptr inbounds double, ptr %101, i64 %637
  %749 = load double, ptr %748, align 8, !tbaa !29
  %750 = fmul double %747, %749
  %751 = getelementptr inbounds double, ptr %96, i64 %744
  %752 = load double, ptr %751, align 8, !tbaa !29
  %753 = call double @llvm.fmuladd.f64(double %750, double %752, double %746)
  %754 = load double, ptr %641, align 8, !tbaa !29
  %755 = load double, ptr %658, align 8, !tbaa !29
  %756 = fmul double %754, %755
  %757 = getelementptr inbounds double, ptr %95, i64 %744
  %758 = load double, ptr %757, align 8, !tbaa !29
  %759 = call double @llvm.fmuladd.f64(double %756, double %758, double %753)
  %760 = getelementptr inbounds double, ptr %130, i64 %635
  %761 = load double, ptr %760, align 8, !tbaa !29
  %762 = call double @llvm.fmuladd.f64(double %761, double %752, double %759)
  %763 = load double, ptr %667, align 8, !tbaa !29
  %764 = call double @llvm.fmuladd.f64(double %763, double %758, double %762)
  %765 = getelementptr inbounds double, ptr %133, i64 %637
  %766 = load double, ptr %765, align 8, !tbaa !29
  %767 = call double @llvm.fmuladd.f64(double %747, double %766, double %764)
  %768 = getelementptr inbounds double, ptr %130, i64 %638
  %769 = load double, ptr %768, align 8, !tbaa !29
  %770 = call double @llvm.fmuladd.f64(double %754, double %769, double %767)
  %771 = getelementptr inbounds double, ptr %143, i64 %634
  store double %770, ptr %771, align 8, !tbaa !29
  %772 = add nsw i64 %632, 1
  %773 = add i64 %635, %610
  %774 = add nsw i64 %634, 1
  %775 = add nuw nsw i32 %636, 1
  %776 = icmp eq i32 %775, %483
  br i1 %776, label %777, label %631, !llvm.loop !480

777:                                              ; preds = %631
  %.lcssa8 = phi i64 [ %744, %631 ]
  %.lcssa7 = phi i64 [ %772, %631 ]
  %.lcssa6 = phi i64 [ %773, %631 ]
  %.lcssa5 = phi i64 [ %774, %631 ]
  %778 = trunc i64 %.lcssa7 to i32
  %779 = trunc i64 %.lcssa8 to i32
  %780 = trunc i64 %.lcssa5 to i32
  %781 = trunc i64 %.lcssa6 to i32
  br label %782

782:                                              ; preds = %777, %620
  %783 = phi i32 [ %625, %620 ], [ %778, %777 ]
  %784 = phi i32 [ %624, %620 ], [ %779, %777 ]
  %785 = phi i32 [ %623, %620 ], [ %780, %777 ]
  %786 = phi i32 [ %622, %620 ], [ %781, %777 ]
  %787 = add nsw i32 %552, %784
  %788 = add nsw i32 %553, %783
  %789 = add nsw i32 %555, %786
  %790 = add nsw i32 %556, %785
  %791 = add nuw nsw i32 %621, 1
  %792 = icmp eq i32 %791, %484
  br i1 %792, label %793, label %620, !llvm.loop !481

793:                                              ; preds = %782, %614
  %794 = phi i32 [ %619, %614 ], [ %788, %782 ]
  %795 = phi i32 [ %618, %614 ], [ %787, %782 ]
  %796 = phi i32 [ %617, %614 ], [ %790, %782 ]
  %797 = phi i32 [ %616, %614 ], [ %789, %782 ]
  %798 = add nsw i32 %795, %558
  %799 = add nsw i32 %794, %560
  %800 = add nsw i32 %562, %797
  %801 = add nsw i32 %796, %564
  %802 = add nuw nsw i32 %615, 1
  %803 = icmp eq i32 %802, %485
  br i1 %803, label %1638, label %614, !llvm.loop !482

804:                                              ; preds = %157
  %805 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %806 = load i32, ptr %5, align 4, !tbaa !7
  %807 = load i32, ptr %9, align 4, !tbaa !7
  %808 = load i32, ptr %41, align 4, !tbaa !7
  %809 = load i32, ptr %42, align 4, !tbaa !7
  %810 = call i32 @llvm.smax.i32(i32 %808, i32 %807)
  %811 = call i32 @llvm.smax.i32(i32 %809, i32 %810)
  %812 = icmp sgt i32 %811, 0
  br i1 %812, label %813, label %1638

813:                                              ; preds = %804
  %814 = load i32, ptr %164, align 4, !tbaa !7
  %815 = load i32, ptr %85, align 4, !tbaa !7
  %816 = sub nsw i32 %814, %815
  %817 = icmp slt i32 %816, 0
  %818 = add nsw i32 %816, 1
  %819 = select i1 %817, i32 0, i32 %818
  %820 = load i32, ptr %165, align 4, !tbaa !7
  %821 = load i32, ptr %167, align 4, !tbaa !7
  %822 = sub nsw i32 %820, %821
  %823 = icmp slt i32 %822, 0
  %824 = add nsw i32 %822, 1
  %825 = select i1 %823, i32 0, i32 %824
  %826 = mul i32 %819, %825
  %827 = load i32, ptr %40, align 4, !tbaa !7
  %828 = mul i32 %826, %827
  %829 = load i32, ptr %39, align 4, !tbaa !7
  %830 = mul nsw i32 %829, %819
  %831 = load i32, ptr %94, align 4, !tbaa !7
  %832 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %833 = load i32, ptr %832, align 4, !tbaa !7
  %834 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %835 = load i32, ptr %834, align 4, !tbaa !7
  %836 = sub nsw i32 %835, %833
  %837 = icmp slt i32 %836, 0
  %838 = add nsw i32 %836, 1
  %839 = select i1 %837, i32 0, i32 %838
  %840 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %841 = load i32, ptr %840, align 4, !tbaa !7
  %842 = sub nsw i32 %841, %831
  %843 = icmp slt i32 %842, 0
  %844 = add nsw i32 %842, 1
  %845 = select i1 %843, i32 0, i32 %844
  %846 = load i32, ptr %91, align 4, !tbaa !7
  %847 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %848 = load i32, ptr %847, align 4, !tbaa !7
  %849 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %850 = load i32, ptr %849, align 4, !tbaa !7
  %851 = sub nsw i32 %850, %848
  %852 = icmp slt i32 %851, 0
  %853 = add nsw i32 %851, 1
  %854 = select i1 %852, i32 0, i32 %853
  %855 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %856 = load i32, ptr %855, align 4, !tbaa !7
  %857 = sub nsw i32 %856, %846
  %858 = icmp slt i32 %857, 0
  %859 = add nsw i32 %857, 1
  %860 = select i1 %858, i32 0, i32 %859
  %861 = load i32, ptr %88, align 4, !tbaa !7
  %862 = load i32, ptr %183, align 4, !tbaa !7
  %863 = load i32, ptr %181, align 4, !tbaa !7
  %864 = sub nsw i32 %863, %862
  %865 = icmp slt i32 %864, 0
  %866 = add nsw i32 %864, 1
  %867 = select i1 %865, i32 0, i32 %866
  %868 = load i32, ptr %180, align 4, !tbaa !7
  %869 = sub nsw i32 %868, %861
  %870 = icmp slt i32 %869, 0
  %871 = add nsw i32 %869, 1
  %872 = select i1 %870, i32 0, i32 %871
  %873 = icmp sgt i32 %809, 0
  %874 = icmp sgt i32 %808, 0
  %875 = icmp sgt i32 %807, 0
  %876 = sub i32 %872, %807
  %877 = sub i32 %860, %807
  %878 = mul nsw i32 %807, %806
  %879 = sub i32 %830, %878
  %880 = sub i32 %845, %807
  %881 = sub i32 %867, %808
  %882 = mul i32 %881, %872
  %883 = sub i32 %854, %808
  %884 = mul i32 %883, %860
  %885 = mul nsw i32 %808, %830
  %886 = sub i32 %828, %885
  %887 = sub i32 %839, %808
  %888 = mul i32 %887, %845
  br i1 %873, label %889, label %1638

889:                                              ; preds = %813
  %890 = load i32, ptr %81, align 4, !tbaa !7
  %891 = sub i32 %890, %861
  %892 = getelementptr inbounds i32, ptr %81, i64 1
  %893 = load i32, ptr %892, align 4, !tbaa !7
  %894 = sub i32 %893, %862
  %895 = getelementptr inbounds i32, ptr %81, i64 2
  %896 = load i32, ptr %895, align 4, !tbaa !7
  %897 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %898 = load i32, ptr %897, align 4, !tbaa !7
  %899 = sub nsw i32 %896, %898
  %900 = mul nsw i32 %867, %899
  %901 = add nsw i32 %894, %900
  %902 = mul nsw i32 %901, %872
  %903 = add nsw i32 %891, %902
  %904 = sub i32 %890, %846
  %905 = sub i32 %893, %848
  %906 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %907 = load i32, ptr %906, align 4, !tbaa !7
  %908 = sub nsw i32 %896, %907
  %909 = mul nsw i32 %854, %908
  %910 = add nsw i32 %905, %909
  %911 = mul nsw i32 %910, %860
  %912 = add nsw i32 %904, %911
  %913 = load i32, ptr %8, align 4, !tbaa !7
  %914 = sub i32 %913, %815
  %915 = load i32, ptr %37, align 4, !tbaa !7
  %916 = sub i32 %915, %821
  %917 = load i32, ptr %38, align 4, !tbaa !7
  %918 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %919 = load i32, ptr %918, align 4, !tbaa !7
  %920 = sub nsw i32 %917, %919
  %921 = mul nsw i32 %825, %920
  %922 = add nsw i32 %916, %921
  %923 = mul nsw i32 %922, %819
  %924 = add nsw i32 %914, %923
  %925 = sub i32 %890, %831
  %926 = sub i32 %893, %833
  %927 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %928 = load i32, ptr %927, align 4, !tbaa !7
  %929 = sub nsw i32 %896, %928
  %930 = mul nsw i32 %839, %929
  %931 = add nsw i32 %926, %930
  %932 = mul nsw i32 %931, %845
  %933 = add nsw i32 %925, %932
  %934 = sext i32 %806 to i64
  %935 = sext i32 %179 to i64
  %936 = sext i32 %201 to i64
  %937 = sext i32 %195 to i64
  br label %938

938:                                              ; preds = %1187, %889
  %939 = phi i32 [ %1196, %1187 ], [ 0, %889 ]
  %940 = phi i32 [ %1194, %1187 ], [ %924, %889 ]
  %941 = phi i32 [ %1195, %1187 ], [ %933, %889 ]
  %942 = phi i32 [ %1192, %1187 ], [ %903, %889 ]
  %943 = phi i32 [ %1193, %1187 ], [ %912, %889 ]
  br i1 %874, label %944, label %1187

944:                                              ; preds = %1176, %938
  %945 = phi i32 [ %1185, %1176 ], [ 0, %938 ]
  %946 = phi i32 [ %1183, %1176 ], [ %940, %938 ]
  %947 = phi i32 [ %1184, %1176 ], [ %941, %938 ]
  %948 = phi i32 [ %1181, %1176 ], [ %942, %938 ]
  %949 = phi i32 [ %1182, %1176 ], [ %943, %938 ]
  br i1 %875, label %950, label %1176

950:                                              ; preds = %944
  %951 = sext i32 %946 to i64
  %952 = sext i32 %947 to i64
  %953 = sext i32 %948 to i64
  %954 = sext i32 %949 to i64
  br label %955

955:                                              ; preds = %955, %950
  %956 = phi i64 [ %954, %950 ], [ %1166, %955 ]
  %957 = phi i64 [ %953, %950 ], [ %1138, %955 ]
  %958 = phi i64 [ %952, %950 ], [ %1168, %955 ]
  %959 = phi i64 [ %951, %950 ], [ %1167, %955 ]
  %960 = phi i32 [ 0, %950 ], [ %1169, %955 ]
  %961 = sub nsw i64 %959, %935
  %962 = add nsw i64 %959, %935
  %963 = add nsw i64 %957, %937
  %964 = add nsw i64 %963, %936
  %965 = add nsw i64 %964, 1
  %966 = getelementptr inbounds double, ptr %97, i64 %956
  %967 = load double, ptr %966, align 8, !tbaa !29
  %968 = getelementptr inbounds double, ptr %128, i64 %962
  %969 = load double, ptr %968, align 8, !tbaa !29
  %970 = fmul double %967, %969
  %971 = getelementptr inbounds double, ptr %96, i64 %965
  %972 = load double, ptr %971, align 8, !tbaa !29
  %973 = fmul double %970, %972
  %974 = getelementptr inbounds double, ptr %158, i64 %958
  store double %973, ptr %974, align 8, !tbaa !29
  %975 = load double, ptr %966, align 8, !tbaa !29
  %976 = getelementptr inbounds double, ptr %103, i64 %962
  %977 = load double, ptr %976, align 8, !tbaa !29
  %978 = fmul double %975, %977
  %979 = getelementptr inbounds double, ptr %96, i64 %964
  %980 = load double, ptr %979, align 8, !tbaa !29
  %981 = getelementptr inbounds double, ptr %131, i64 %962
  %982 = load double, ptr %981, align 8, !tbaa !29
  %983 = fmul double %975, %982
  %984 = call double @llvm.fmuladd.f64(double %978, double %980, double %983)
  %985 = getelementptr inbounds double, ptr %131, i64 %959
  %986 = load double, ptr %985, align 8, !tbaa !29
  %987 = call double @llvm.fmuladd.f64(double %986, double %980, double %984)
  %988 = getelementptr inbounds double, ptr %149, i64 %958
  store double %987, ptr %988, align 8, !tbaa !29
  %989 = add nsw i64 %964, -1
  %990 = load double, ptr %966, align 8, !tbaa !29
  %991 = getelementptr inbounds double, ptr %127, i64 %962
  %992 = load double, ptr %991, align 8, !tbaa !29
  %993 = fmul double %990, %992
  %994 = getelementptr inbounds double, ptr %96, i64 %989
  %995 = load double, ptr %994, align 8, !tbaa !29
  %996 = fmul double %993, %995
  %997 = getelementptr inbounds double, ptr %159, i64 %958
  store double %996, ptr %997, align 8, !tbaa !29
  %998 = add nsw i64 %963, 1
  %999 = load double, ptr %966, align 8, !tbaa !29
  %1000 = getelementptr inbounds double, ptr %101, i64 %962
  %1001 = load double, ptr %1000, align 8, !tbaa !29
  %1002 = fmul double %999, %1001
  %1003 = getelementptr inbounds double, ptr %96, i64 %998
  %1004 = load double, ptr %1003, align 8, !tbaa !29
  %1005 = getelementptr inbounds double, ptr %133, i64 %962
  %1006 = load double, ptr %1005, align 8, !tbaa !29
  %1007 = fmul double %999, %1006
  %1008 = call double @llvm.fmuladd.f64(double %1002, double %1004, double %1007)
  %1009 = getelementptr inbounds double, ptr %133, i64 %959
  %1010 = load double, ptr %1009, align 8, !tbaa !29
  %1011 = call double @llvm.fmuladd.f64(double %1010, double %1004, double %1008)
  %1012 = getelementptr inbounds double, ptr %147, i64 %958
  store double %1011, ptr %1012, align 8, !tbaa !29
  %1013 = getelementptr inbounds double, ptr %104, i64 %959
  %1014 = load double, ptr %1013, align 8, !tbaa !29
  %1015 = getelementptr inbounds double, ptr %96, i64 %963
  %1016 = load double, ptr %1015, align 8, !tbaa !29
  %1017 = load double, ptr %966, align 8, !tbaa !29
  %1018 = getelementptr inbounds double, ptr %99, i64 %962
  %1019 = load double, ptr %1018, align 8, !tbaa !29
  %1020 = fmul double %1017, %1019
  %1021 = fmul double %1016, %1020
  %1022 = call double @llvm.fmuladd.f64(double %1014, double %1016, double %1021)
  %1023 = getelementptr inbounds double, ptr %104, i64 %962
  %1024 = load double, ptr %1023, align 8, !tbaa !29
  %1025 = call double @llvm.fmuladd.f64(double %1017, double %1024, double %1022)
  %1026 = getelementptr inbounds double, ptr %145, i64 %958
  store double %1025, ptr %1026, align 8, !tbaa !29
  %1027 = add nsw i64 %963, -1
  %1028 = load double, ptr %966, align 8, !tbaa !29
  %1029 = getelementptr inbounds double, ptr %100, i64 %962
  %1030 = load double, ptr %1029, align 8, !tbaa !29
  %1031 = fmul double %1028, %1030
  %1032 = getelementptr inbounds double, ptr %96, i64 %1027
  %1033 = load double, ptr %1032, align 8, !tbaa !29
  %1034 = getelementptr inbounds double, ptr %134, i64 %962
  %1035 = load double, ptr %1034, align 8, !tbaa !29
  %1036 = fmul double %1028, %1035
  %1037 = call double @llvm.fmuladd.f64(double %1031, double %1033, double %1036)
  %1038 = getelementptr inbounds double, ptr %134, i64 %959
  %1039 = load double, ptr %1038, align 8, !tbaa !29
  %1040 = call double @llvm.fmuladd.f64(double %1039, double %1033, double %1037)
  %1041 = getelementptr inbounds double, ptr %146, i64 %958
  store double %1040, ptr %1041, align 8, !tbaa !29
  %1042 = sub nsw i64 %963, %936
  %1043 = add nsw i64 %1042, 1
  %1044 = load double, ptr %966, align 8, !tbaa !29
  %1045 = getelementptr inbounds double, ptr %126, i64 %962
  %1046 = load double, ptr %1045, align 8, !tbaa !29
  %1047 = fmul double %1044, %1046
  %1048 = getelementptr inbounds double, ptr %96, i64 %1043
  %1049 = load double, ptr %1048, align 8, !tbaa !29
  %1050 = fmul double %1047, %1049
  %1051 = getelementptr inbounds double, ptr %160, i64 %958
  store double %1050, ptr %1051, align 8, !tbaa !29
  %1052 = load double, ptr %966, align 8, !tbaa !29
  %1053 = getelementptr inbounds double, ptr %102, i64 %962
  %1054 = load double, ptr %1053, align 8, !tbaa !29
  %1055 = fmul double %1052, %1054
  %1056 = getelementptr inbounds double, ptr %96, i64 %1042
  %1057 = load double, ptr %1056, align 8, !tbaa !29
  %1058 = getelementptr inbounds double, ptr %132, i64 %962
  %1059 = load double, ptr %1058, align 8, !tbaa !29
  %1060 = fmul double %1052, %1059
  %1061 = call double @llvm.fmuladd.f64(double %1055, double %1057, double %1060)
  %1062 = getelementptr inbounds double, ptr %132, i64 %959
  %1063 = load double, ptr %1062, align 8, !tbaa !29
  %1064 = call double @llvm.fmuladd.f64(double %1063, double %1057, double %1061)
  %1065 = getelementptr inbounds double, ptr %148, i64 %958
  store double %1064, ptr %1065, align 8, !tbaa !29
  %1066 = add nsw i64 %1042, -1
  %1067 = load double, ptr %966, align 8, !tbaa !29
  %1068 = getelementptr inbounds double, ptr %125, i64 %962
  %1069 = load double, ptr %1068, align 8, !tbaa !29
  %1070 = fmul double %1067, %1069
  %1071 = getelementptr inbounds double, ptr %96, i64 %1066
  %1072 = load double, ptr %1071, align 8, !tbaa !29
  %1073 = fmul double %1070, %1072
  %1074 = getelementptr inbounds double, ptr %161, i64 %958
  store double %1073, ptr %1074, align 8, !tbaa !29
  %1075 = add nsw i64 %957, %936
  %1076 = add nsw i64 %1075, 1
  %1077 = getelementptr inbounds double, ptr %128, i64 %959
  %1078 = load double, ptr %1077, align 8, !tbaa !29
  %1079 = getelementptr inbounds double, ptr %98, i64 %956
  %1080 = load double, ptr %1079, align 8, !tbaa !29
  %1081 = getelementptr inbounds double, ptr %128, i64 %961
  %1082 = load double, ptr %1081, align 8, !tbaa !29
  %1083 = fmul double %1080, %1082
  %1084 = getelementptr inbounds double, ptr %96, i64 %1076
  %1085 = load double, ptr %1084, align 8, !tbaa !29
  %1086 = call double @llvm.fmuladd.f64(double %1083, double %1085, double %1078)
  %1087 = load double, ptr %966, align 8, !tbaa !29
  %1088 = load double, ptr %968, align 8, !tbaa !29
  %1089 = fmul double %1087, %1088
  %1090 = getelementptr inbounds double, ptr %95, i64 %1076
  %1091 = load double, ptr %1090, align 8, !tbaa !29
  %1092 = call double @llvm.fmuladd.f64(double %1089, double %1091, double %1086)
  %1093 = getelementptr inbounds double, ptr %162, i64 %958
  store double %1092, ptr %1093, align 8, !tbaa !29
  %1094 = getelementptr inbounds double, ptr %103, i64 %959
  %1095 = load double, ptr %1094, align 8, !tbaa !29
  %1096 = load double, ptr %1079, align 8, !tbaa !29
  %1097 = getelementptr inbounds double, ptr %103, i64 %961
  %1098 = load double, ptr %1097, align 8, !tbaa !29
  %1099 = fmul double %1096, %1098
  %1100 = getelementptr inbounds double, ptr %96, i64 %1075
  %1101 = load double, ptr %1100, align 8, !tbaa !29
  %1102 = call double @llvm.fmuladd.f64(double %1099, double %1101, double %1095)
  %1103 = load double, ptr %966, align 8, !tbaa !29
  %1104 = load double, ptr %976, align 8, !tbaa !29
  %1105 = fmul double %1103, %1104
  %1106 = getelementptr inbounds double, ptr %95, i64 %1075
  %1107 = load double, ptr %1106, align 8, !tbaa !29
  %1108 = call double @llvm.fmuladd.f64(double %1105, double %1107, double %1102)
  %1109 = getelementptr inbounds double, ptr %129, i64 %959
  %1110 = load double, ptr %1109, align 8, !tbaa !29
  %1111 = call double @llvm.fmuladd.f64(double %1110, double %1101, double %1108)
  %1112 = load double, ptr %985, align 8, !tbaa !29
  %1113 = call double @llvm.fmuladd.f64(double %1112, double %1107, double %1111)
  %1114 = getelementptr inbounds double, ptr %131, i64 %961
  %1115 = load double, ptr %1114, align 8, !tbaa !29
  %1116 = call double @llvm.fmuladd.f64(double %1096, double %1115, double %1113)
  %1117 = getelementptr inbounds double, ptr %129, i64 %962
  %1118 = load double, ptr %1117, align 8, !tbaa !29
  %1119 = call double @llvm.fmuladd.f64(double %1103, double %1118, double %1116)
  %1120 = getelementptr inbounds double, ptr %144, i64 %958
  store double %1119, ptr %1120, align 8, !tbaa !29
  %1121 = add nsw i64 %1075, -1
  %1122 = getelementptr inbounds double, ptr %127, i64 %959
  %1123 = load double, ptr %1122, align 8, !tbaa !29
  %1124 = load double, ptr %1079, align 8, !tbaa !29
  %1125 = getelementptr inbounds double, ptr %127, i64 %961
  %1126 = load double, ptr %1125, align 8, !tbaa !29
  %1127 = fmul double %1124, %1126
  %1128 = getelementptr inbounds double, ptr %96, i64 %1121
  %1129 = load double, ptr %1128, align 8, !tbaa !29
  %1130 = call double @llvm.fmuladd.f64(double %1127, double %1129, double %1123)
  %1131 = load double, ptr %966, align 8, !tbaa !29
  %1132 = load double, ptr %991, align 8, !tbaa !29
  %1133 = fmul double %1131, %1132
  %1134 = getelementptr inbounds double, ptr %95, i64 %1121
  %1135 = load double, ptr %1134, align 8, !tbaa !29
  %1136 = call double @llvm.fmuladd.f64(double %1133, double %1135, double %1130)
  %1137 = getelementptr inbounds double, ptr %163, i64 %958
  store double %1136, ptr %1137, align 8, !tbaa !29
  %1138 = add nsw i64 %957, 1
  %1139 = getelementptr inbounds double, ptr %101, i64 %959
  %1140 = load double, ptr %1139, align 8, !tbaa !29
  %1141 = load double, ptr %1079, align 8, !tbaa !29
  %1142 = getelementptr inbounds double, ptr %101, i64 %961
  %1143 = load double, ptr %1142, align 8, !tbaa !29
  %1144 = fmul double %1141, %1143
  %1145 = getelementptr inbounds double, ptr %96, i64 %1138
  %1146 = load double, ptr %1145, align 8, !tbaa !29
  %1147 = call double @llvm.fmuladd.f64(double %1144, double %1146, double %1140)
  %1148 = load double, ptr %966, align 8, !tbaa !29
  %1149 = load double, ptr %1000, align 8, !tbaa !29
  %1150 = fmul double %1148, %1149
  %1151 = getelementptr inbounds double, ptr %95, i64 %1138
  %1152 = load double, ptr %1151, align 8, !tbaa !29
  %1153 = call double @llvm.fmuladd.f64(double %1150, double %1152, double %1147)
  %1154 = getelementptr inbounds double, ptr %130, i64 %959
  %1155 = load double, ptr %1154, align 8, !tbaa !29
  %1156 = call double @llvm.fmuladd.f64(double %1155, double %1146, double %1153)
  %1157 = load double, ptr %1009, align 8, !tbaa !29
  %1158 = call double @llvm.fmuladd.f64(double %1157, double %1152, double %1156)
  %1159 = getelementptr inbounds double, ptr %133, i64 %961
  %1160 = load double, ptr %1159, align 8, !tbaa !29
  %1161 = call double @llvm.fmuladd.f64(double %1141, double %1160, double %1158)
  %1162 = getelementptr inbounds double, ptr %130, i64 %962
  %1163 = load double, ptr %1162, align 8, !tbaa !29
  %1164 = call double @llvm.fmuladd.f64(double %1148, double %1163, double %1161)
  %1165 = getelementptr inbounds double, ptr %143, i64 %958
  store double %1164, ptr %1165, align 8, !tbaa !29
  %1166 = add nsw i64 %956, 1
  %1167 = add i64 %959, %934
  %1168 = add nsw i64 %958, 1
  %1169 = add nuw nsw i32 %960, 1
  %1170 = icmp eq i32 %1169, %807
  br i1 %1170, label %1171, label %955, !llvm.loop !483

1171:                                             ; preds = %955
  %.lcssa4 = phi i64 [ %1138, %955 ]
  %.lcssa3 = phi i64 [ %1166, %955 ]
  %.lcssa2 = phi i64 [ %1167, %955 ]
  %.lcssa1 = phi i64 [ %1168, %955 ]
  %1172 = trunc i64 %.lcssa3 to i32
  %1173 = trunc i64 %.lcssa4 to i32
  %1174 = trunc i64 %.lcssa1 to i32
  %1175 = trunc i64 %.lcssa2 to i32
  br label %1176

1176:                                             ; preds = %1171, %944
  %1177 = phi i32 [ %949, %944 ], [ %1172, %1171 ]
  %1178 = phi i32 [ %948, %944 ], [ %1173, %1171 ]
  %1179 = phi i32 [ %947, %944 ], [ %1174, %1171 ]
  %1180 = phi i32 [ %946, %944 ], [ %1175, %1171 ]
  %1181 = add nsw i32 %876, %1178
  %1182 = add nsw i32 %877, %1177
  %1183 = add nsw i32 %879, %1180
  %1184 = add nsw i32 %880, %1179
  %1185 = add nuw nsw i32 %945, 1
  %1186 = icmp eq i32 %1185, %808
  br i1 %1186, label %1187, label %944, !llvm.loop !484

1187:                                             ; preds = %1176, %938
  %1188 = phi i32 [ %943, %938 ], [ %1182, %1176 ]
  %1189 = phi i32 [ %942, %938 ], [ %1181, %1176 ]
  %1190 = phi i32 [ %941, %938 ], [ %1184, %1176 ]
  %1191 = phi i32 [ %940, %938 ], [ %1183, %1176 ]
  %1192 = add nsw i32 %1189, %882
  %1193 = add nsw i32 %1188, %884
  %1194 = add nsw i32 %886, %1191
  %1195 = add nsw i32 %1190, %888
  %1196 = add nuw nsw i32 %939, 1
  %1197 = icmp eq i32 %1196, %809
  br i1 %1197, label %1638, label %938, !llvm.loop !485

1198:                                             ; preds = %157
  %1199 = call i32 @hypre_BoxGetSize(ptr noundef %81, ptr noundef nonnull %9) #33
  %1200 = load i32, ptr %5, align 4, !tbaa !7
  %1201 = load i32, ptr %9, align 4, !tbaa !7
  %1202 = load i32, ptr %41, align 4, !tbaa !7
  %1203 = load i32, ptr %42, align 4, !tbaa !7
  %1204 = call i32 @llvm.smax.i32(i32 %1202, i32 %1201)
  %1205 = call i32 @llvm.smax.i32(i32 %1203, i32 %1204)
  %1206 = icmp sgt i32 %1205, 0
  br i1 %1206, label %1207, label %1638

1207:                                             ; preds = %1198
  %1208 = load i32, ptr %164, align 4, !tbaa !7
  %1209 = load i32, ptr %85, align 4, !tbaa !7
  %1210 = sub nsw i32 %1208, %1209
  %1211 = icmp slt i32 %1210, 0
  %1212 = add nsw i32 %1210, 1
  %1213 = select i1 %1211, i32 0, i32 %1212
  %1214 = load i32, ptr %165, align 4, !tbaa !7
  %1215 = load i32, ptr %167, align 4, !tbaa !7
  %1216 = sub nsw i32 %1214, %1215
  %1217 = icmp slt i32 %1216, 0
  %1218 = add nsw i32 %1216, 1
  %1219 = select i1 %1217, i32 0, i32 %1218
  %1220 = mul i32 %1213, %1219
  %1221 = load i32, ptr %40, align 4, !tbaa !7
  %1222 = mul i32 %1220, %1221
  %1223 = load i32, ptr %39, align 4, !tbaa !7
  %1224 = mul nsw i32 %1223, %1213
  %1225 = load i32, ptr %94, align 4, !tbaa !7
  %1226 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 1
  %1227 = load i32, ptr %1226, align 4, !tbaa !7
  %1228 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1, i64 1
  %1229 = load i32, ptr %1228, align 4, !tbaa !7
  %1230 = sub nsw i32 %1229, %1227
  %1231 = icmp slt i32 %1230, 0
  %1232 = add nsw i32 %1230, 1
  %1233 = select i1 %1231, i32 0, i32 %1232
  %1234 = getelementptr inbounds %struct.hypre_Box_struct, ptr %93, i64 %44, i32 1
  %1235 = load i32, ptr %1234, align 4, !tbaa !7
  %1236 = sub nsw i32 %1235, %1225
  %1237 = icmp slt i32 %1236, 0
  %1238 = add nsw i32 %1236, 1
  %1239 = select i1 %1237, i32 0, i32 %1238
  %1240 = load i32, ptr %91, align 4, !tbaa !7
  %1241 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 1
  %1242 = load i32, ptr %1241, align 4, !tbaa !7
  %1243 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1, i64 1
  %1244 = load i32, ptr %1243, align 4, !tbaa !7
  %1245 = sub nsw i32 %1244, %1242
  %1246 = icmp slt i32 %1245, 0
  %1247 = add nsw i32 %1245, 1
  %1248 = select i1 %1246, i32 0, i32 %1247
  %1249 = getelementptr inbounds %struct.hypre_Box_struct, ptr %90, i64 %.lcssa, i32 1
  %1250 = load i32, ptr %1249, align 4, !tbaa !7
  %1251 = sub nsw i32 %1250, %1240
  %1252 = icmp slt i32 %1251, 0
  %1253 = add nsw i32 %1251, 1
  %1254 = select i1 %1252, i32 0, i32 %1253
  %1255 = load i32, ptr %88, align 4, !tbaa !7
  %1256 = load i32, ptr %183, align 4, !tbaa !7
  %1257 = load i32, ptr %181, align 4, !tbaa !7
  %1258 = sub nsw i32 %1257, %1256
  %1259 = icmp slt i32 %1258, 0
  %1260 = add nsw i32 %1258, 1
  %1261 = select i1 %1259, i32 0, i32 %1260
  %1262 = load i32, ptr %180, align 4, !tbaa !7
  %1263 = sub nsw i32 %1262, %1255
  %1264 = icmp slt i32 %1263, 0
  %1265 = add nsw i32 %1263, 1
  %1266 = select i1 %1264, i32 0, i32 %1265
  %1267 = icmp sgt i32 %1203, 0
  %1268 = icmp sgt i32 %1202, 0
  %1269 = icmp sgt i32 %1201, 0
  %1270 = sub i32 %1266, %1201
  %1271 = sub i32 %1254, %1201
  %1272 = mul nsw i32 %1201, %1200
  %1273 = sub i32 %1224, %1272
  %1274 = sub i32 %1239, %1201
  %1275 = sub i32 %1261, %1202
  %1276 = mul i32 %1275, %1266
  %1277 = sub i32 %1248, %1202
  %1278 = mul i32 %1277, %1254
  %1279 = mul nsw i32 %1202, %1224
  %1280 = sub i32 %1222, %1279
  %1281 = sub i32 %1233, %1202
  %1282 = mul i32 %1281, %1239
  br i1 %1267, label %1283, label %1638

1283:                                             ; preds = %1207
  %1284 = load i32, ptr %81, align 4, !tbaa !7
  %1285 = sub i32 %1284, %1255
  %1286 = getelementptr inbounds i32, ptr %81, i64 1
  %1287 = load i32, ptr %1286, align 4, !tbaa !7
  %1288 = sub i32 %1287, %1256
  %1289 = getelementptr inbounds i32, ptr %81, i64 2
  %1290 = load i32, ptr %1289, align 4, !tbaa !7
  %1291 = getelementptr inbounds [3 x i32], ptr %88, i64 0, i64 2
  %1292 = load i32, ptr %1291, align 4, !tbaa !7
  %1293 = sub nsw i32 %1290, %1292
  %1294 = mul nsw i32 %1261, %1293
  %1295 = add nsw i32 %1288, %1294
  %1296 = mul nsw i32 %1295, %1266
  %1297 = add nsw i32 %1285, %1296
  %1298 = sub i32 %1284, %1240
  %1299 = sub i32 %1287, %1242
  %1300 = getelementptr inbounds [3 x i32], ptr %91, i64 0, i64 2
  %1301 = load i32, ptr %1300, align 4, !tbaa !7
  %1302 = sub nsw i32 %1290, %1301
  %1303 = mul nsw i32 %1248, %1302
  %1304 = add nsw i32 %1299, %1303
  %1305 = mul nsw i32 %1304, %1254
  %1306 = add nsw i32 %1298, %1305
  %1307 = load i32, ptr %8, align 4, !tbaa !7
  %1308 = sub i32 %1307, %1209
  %1309 = load i32, ptr %37, align 4, !tbaa !7
  %1310 = sub i32 %1309, %1215
  %1311 = load i32, ptr %38, align 4, !tbaa !7
  %1312 = getelementptr inbounds [3 x i32], ptr %85, i64 0, i64 2
  %1313 = load i32, ptr %1312, align 4, !tbaa !7
  %1314 = sub nsw i32 %1311, %1313
  %1315 = mul nsw i32 %1219, %1314
  %1316 = add nsw i32 %1310, %1315
  %1317 = mul nsw i32 %1316, %1213
  %1318 = add nsw i32 %1308, %1317
  %1319 = sub i32 %1284, %1225
  %1320 = sub i32 %1287, %1227
  %1321 = getelementptr inbounds [3 x i32], ptr %94, i64 0, i64 2
  %1322 = load i32, ptr %1321, align 4, !tbaa !7
  %1323 = sub nsw i32 %1290, %1322
  %1324 = mul nsw i32 %1233, %1323
  %1325 = add nsw i32 %1320, %1324
  %1326 = mul nsw i32 %1325, %1239
  %1327 = add nsw i32 %1319, %1326
  %1328 = sext i32 %1200 to i64
  %1329 = sext i32 %179 to i64
  %1330 = sext i32 %201 to i64
  %1331 = sext i32 %195 to i64
  br label %1332

1332:                                             ; preds = %1627, %1283
  %1333 = phi i32 [ %1636, %1627 ], [ 0, %1283 ]
  %1334 = phi i32 [ %1634, %1627 ], [ %1318, %1283 ]
  %1335 = phi i32 [ %1635, %1627 ], [ %1327, %1283 ]
  %1336 = phi i32 [ %1632, %1627 ], [ %1297, %1283 ]
  %1337 = phi i32 [ %1633, %1627 ], [ %1306, %1283 ]
  br i1 %1268, label %1338, label %1627

1338:                                             ; preds = %1616, %1332
  %1339 = phi i32 [ %1625, %1616 ], [ 0, %1332 ]
  %1340 = phi i32 [ %1623, %1616 ], [ %1334, %1332 ]
  %1341 = phi i32 [ %1624, %1616 ], [ %1335, %1332 ]
  %1342 = phi i32 [ %1621, %1616 ], [ %1336, %1332 ]
  %1343 = phi i32 [ %1622, %1616 ], [ %1337, %1332 ]
  br i1 %1269, label %1344, label %1616

1344:                                             ; preds = %1338
  %1345 = sext i32 %1340 to i64
  %1346 = sext i32 %1341 to i64
  %1347 = sext i32 %1342 to i64
  %1348 = sext i32 %1343 to i64
  br label %1349

1349:                                             ; preds = %1349, %1344
  %1350 = phi i64 [ %1348, %1344 ], [ %1606, %1349 ]
  %1351 = phi i64 [ %1347, %1344 ], [ %1578, %1349 ]
  %1352 = phi i64 [ %1346, %1344 ], [ %1608, %1349 ]
  %1353 = phi i64 [ %1345, %1344 ], [ %1607, %1349 ]
  %1354 = phi i32 [ 0, %1344 ], [ %1609, %1349 ]
  %1355 = sub nsw i64 %1353, %1329
  %1356 = add nsw i64 %1353, %1329
  %1357 = add nsw i64 %1351, %1331
  %1358 = add nsw i64 %1357, %1330
  %1359 = add nsw i64 %1358, 1
  %1360 = getelementptr inbounds double, ptr %97, i64 %1350
  %1361 = load double, ptr %1360, align 8, !tbaa !29
  %1362 = getelementptr inbounds double, ptr %128, i64 %1356
  %1363 = load double, ptr %1362, align 8, !tbaa !29
  %1364 = fmul double %1361, %1363
  %1365 = getelementptr inbounds double, ptr %96, i64 %1359
  %1366 = load double, ptr %1365, align 8, !tbaa !29
  %1367 = getelementptr inbounds double, ptr %138, i64 %1356
  %1368 = load double, ptr %1367, align 8, !tbaa !29
  %1369 = fmul double %1361, %1368
  %1370 = call double @llvm.fmuladd.f64(double %1364, double %1366, double %1369)
  %1371 = getelementptr inbounds double, ptr %138, i64 %1353
  %1372 = load double, ptr %1371, align 8, !tbaa !29
  %1373 = call double @llvm.fmuladd.f64(double %1372, double %1366, double %1370)
  %1374 = getelementptr inbounds double, ptr %158, i64 %1352
  store double %1373, ptr %1374, align 8, !tbaa !29
  %1375 = load double, ptr %1360, align 8, !tbaa !29
  %1376 = getelementptr inbounds double, ptr %103, i64 %1356
  %1377 = load double, ptr %1376, align 8, !tbaa !29
  %1378 = fmul double %1375, %1377
  %1379 = getelementptr inbounds double, ptr %96, i64 %1358
  %1380 = load double, ptr %1379, align 8, !tbaa !29
  %1381 = getelementptr inbounds double, ptr %131, i64 %1356
  %1382 = load double, ptr %1381, align 8, !tbaa !29
  %1383 = fmul double %1375, %1382
  %1384 = call double @llvm.fmuladd.f64(double %1378, double %1380, double %1383)
  %1385 = getelementptr inbounds double, ptr %131, i64 %1353
  %1386 = load double, ptr %1385, align 8, !tbaa !29
  %1387 = call double @llvm.fmuladd.f64(double %1386, double %1380, double %1384)
  %1388 = getelementptr inbounds double, ptr %149, i64 %1352
  store double %1387, ptr %1388, align 8, !tbaa !29
  %1389 = add nsw i64 %1358, -1
  %1390 = load double, ptr %1360, align 8, !tbaa !29
  %1391 = getelementptr inbounds double, ptr %127, i64 %1356
  %1392 = load double, ptr %1391, align 8, !tbaa !29
  %1393 = fmul double %1390, %1392
  %1394 = getelementptr inbounds double, ptr %96, i64 %1389
  %1395 = load double, ptr %1394, align 8, !tbaa !29
  %1396 = getelementptr inbounds double, ptr %139, i64 %1356
  %1397 = load double, ptr %1396, align 8, !tbaa !29
  %1398 = fmul double %1390, %1397
  %1399 = call double @llvm.fmuladd.f64(double %1393, double %1395, double %1398)
  %1400 = getelementptr inbounds double, ptr %139, i64 %1353
  %1401 = load double, ptr %1400, align 8, !tbaa !29
  %1402 = call double @llvm.fmuladd.f64(double %1401, double %1395, double %1399)
  %1403 = getelementptr inbounds double, ptr %159, i64 %1352
  store double %1402, ptr %1403, align 8, !tbaa !29
  %1404 = add nsw i64 %1357, 1
  %1405 = load double, ptr %1360, align 8, !tbaa !29
  %1406 = getelementptr inbounds double, ptr %101, i64 %1356
  %1407 = load double, ptr %1406, align 8, !tbaa !29
  %1408 = fmul double %1405, %1407
  %1409 = getelementptr inbounds double, ptr %96, i64 %1404
  %1410 = load double, ptr %1409, align 8, !tbaa !29
  %1411 = getelementptr inbounds double, ptr %133, i64 %1356
  %1412 = load double, ptr %1411, align 8, !tbaa !29
  %1413 = fmul double %1405, %1412
  %1414 = call double @llvm.fmuladd.f64(double %1408, double %1410, double %1413)
  %1415 = getelementptr inbounds double, ptr %133, i64 %1353
  %1416 = load double, ptr %1415, align 8, !tbaa !29
  %1417 = call double @llvm.fmuladd.f64(double %1416, double %1410, double %1414)
  %1418 = getelementptr inbounds double, ptr %147, i64 %1352
  store double %1417, ptr %1418, align 8, !tbaa !29
  %1419 = getelementptr inbounds double, ptr %104, i64 %1353
  %1420 = load double, ptr %1419, align 8, !tbaa !29
  %1421 = getelementptr inbounds double, ptr %96, i64 %1357
  %1422 = load double, ptr %1421, align 8, !tbaa !29
  %1423 = load double, ptr %1360, align 8, !tbaa !29
  %1424 = getelementptr inbounds double, ptr %99, i64 %1356
  %1425 = load double, ptr %1424, align 8, !tbaa !29
  %1426 = fmul double %1423, %1425
  %1427 = fmul double %1422, %1426
  %1428 = call double @llvm.fmuladd.f64(double %1420, double %1422, double %1427)
  %1429 = getelementptr inbounds double, ptr %104, i64 %1356
  %1430 = load double, ptr %1429, align 8, !tbaa !29
  %1431 = call double @llvm.fmuladd.f64(double %1423, double %1430, double %1428)
  %1432 = getelementptr inbounds double, ptr %145, i64 %1352
  store double %1431, ptr %1432, align 8, !tbaa !29
  %1433 = add nsw i64 %1357, -1
  %1434 = load double, ptr %1360, align 8, !tbaa !29
  %1435 = getelementptr inbounds double, ptr %100, i64 %1356
  %1436 = load double, ptr %1435, align 8, !tbaa !29
  %1437 = fmul double %1434, %1436
  %1438 = getelementptr inbounds double, ptr %96, i64 %1433
  %1439 = load double, ptr %1438, align 8, !tbaa !29
  %1440 = getelementptr inbounds double, ptr %134, i64 %1356
  %1441 = load double, ptr %1440, align 8, !tbaa !29
  %1442 = fmul double %1434, %1441
  %1443 = call double @llvm.fmuladd.f64(double %1437, double %1439, double %1442)
  %1444 = getelementptr inbounds double, ptr %134, i64 %1353
  %1445 = load double, ptr %1444, align 8, !tbaa !29
  %1446 = call double @llvm.fmuladd.f64(double %1445, double %1439, double %1443)
  %1447 = getelementptr inbounds double, ptr %146, i64 %1352
  store double %1446, ptr %1447, align 8, !tbaa !29
  %1448 = sub nsw i64 %1357, %1330
  %1449 = add nsw i64 %1448, 1
  %1450 = load double, ptr %1360, align 8, !tbaa !29
  %1451 = getelementptr inbounds double, ptr %126, i64 %1356
  %1452 = load double, ptr %1451, align 8, !tbaa !29
  %1453 = fmul double %1450, %1452
  %1454 = getelementptr inbounds double, ptr %96, i64 %1449
  %1455 = load double, ptr %1454, align 8, !tbaa !29
  %1456 = getelementptr inbounds double, ptr %140, i64 %1356
  %1457 = load double, ptr %1456, align 8, !tbaa !29
  %1458 = fmul double %1450, %1457
  %1459 = call double @llvm.fmuladd.f64(double %1453, double %1455, double %1458)
  %1460 = getelementptr inbounds double, ptr %140, i64 %1353
  %1461 = load double, ptr %1460, align 8, !tbaa !29
  %1462 = call double @llvm.fmuladd.f64(double %1461, double %1455, double %1459)
  %1463 = getelementptr inbounds double, ptr %160, i64 %1352
  store double %1462, ptr %1463, align 8, !tbaa !29
  %1464 = load double, ptr %1360, align 8, !tbaa !29
  %1465 = getelementptr inbounds double, ptr %102, i64 %1356
  %1466 = load double, ptr %1465, align 8, !tbaa !29
  %1467 = fmul double %1464, %1466
  %1468 = getelementptr inbounds double, ptr %96, i64 %1448
  %1469 = load double, ptr %1468, align 8, !tbaa !29
  %1470 = getelementptr inbounds double, ptr %132, i64 %1356
  %1471 = load double, ptr %1470, align 8, !tbaa !29
  %1472 = fmul double %1464, %1471
  %1473 = call double @llvm.fmuladd.f64(double %1467, double %1469, double %1472)
  %1474 = getelementptr inbounds double, ptr %132, i64 %1353
  %1475 = load double, ptr %1474, align 8, !tbaa !29
  %1476 = call double @llvm.fmuladd.f64(double %1475, double %1469, double %1473)
  %1477 = getelementptr inbounds double, ptr %148, i64 %1352
  store double %1476, ptr %1477, align 8, !tbaa !29
  %1478 = add nsw i64 %1448, -1
  %1479 = load double, ptr %1360, align 8, !tbaa !29
  %1480 = getelementptr inbounds double, ptr %125, i64 %1356
  %1481 = load double, ptr %1480, align 8, !tbaa !29
  %1482 = fmul double %1479, %1481
  %1483 = getelementptr inbounds double, ptr %96, i64 %1478
  %1484 = load double, ptr %1483, align 8, !tbaa !29
  %1485 = getelementptr inbounds double, ptr %141, i64 %1356
  %1486 = load double, ptr %1485, align 8, !tbaa !29
  %1487 = fmul double %1479, %1486
  %1488 = call double @llvm.fmuladd.f64(double %1482, double %1484, double %1487)
  %1489 = getelementptr inbounds double, ptr %141, i64 %1353
  %1490 = load double, ptr %1489, align 8, !tbaa !29
  %1491 = call double @llvm.fmuladd.f64(double %1490, double %1484, double %1488)
  %1492 = getelementptr inbounds double, ptr %161, i64 %1352
  store double %1491, ptr %1492, align 8, !tbaa !29
  %1493 = add nsw i64 %1351, %1330
  %1494 = add nsw i64 %1493, 1
  %1495 = getelementptr inbounds double, ptr %128, i64 %1353
  %1496 = load double, ptr %1495, align 8, !tbaa !29
  %1497 = getelementptr inbounds double, ptr %98, i64 %1350
  %1498 = load double, ptr %1497, align 8, !tbaa !29
  %1499 = getelementptr inbounds double, ptr %128, i64 %1355
  %1500 = load double, ptr %1499, align 8, !tbaa !29
  %1501 = fmul double %1498, %1500
  %1502 = getelementptr inbounds double, ptr %96, i64 %1494
  %1503 = load double, ptr %1502, align 8, !tbaa !29
  %1504 = call double @llvm.fmuladd.f64(double %1501, double %1503, double %1496)
  %1505 = load double, ptr %1360, align 8, !tbaa !29
  %1506 = load double, ptr %1362, align 8, !tbaa !29
  %1507 = fmul double %1505, %1506
  %1508 = getelementptr inbounds double, ptr %95, i64 %1494
  %1509 = load double, ptr %1508, align 8, !tbaa !29
  %1510 = call double @llvm.fmuladd.f64(double %1507, double %1509, double %1504)
  %1511 = getelementptr inbounds double, ptr %136, i64 %1353
  %1512 = load double, ptr %1511, align 8, !tbaa !29
  %1513 = call double @llvm.fmuladd.f64(double %1512, double %1503, double %1510)
  %1514 = load double, ptr %1371, align 8, !tbaa !29
  %1515 = call double @llvm.fmuladd.f64(double %1514, double %1509, double %1513)
  %1516 = getelementptr inbounds double, ptr %138, i64 %1355
  %1517 = load double, ptr %1516, align 8, !tbaa !29
  %1518 = call double @llvm.fmuladd.f64(double %1498, double %1517, double %1515)
  %1519 = getelementptr inbounds double, ptr %136, i64 %1356
  %1520 = load double, ptr %1519, align 8, !tbaa !29
  %1521 = call double @llvm.fmuladd.f64(double %1505, double %1520, double %1518)
  %1522 = getelementptr inbounds double, ptr %162, i64 %1352
  store double %1521, ptr %1522, align 8, !tbaa !29
  %1523 = getelementptr inbounds double, ptr %103, i64 %1353
  %1524 = load double, ptr %1523, align 8, !tbaa !29
  %1525 = load double, ptr %1497, align 8, !tbaa !29
  %1526 = getelementptr inbounds double, ptr %103, i64 %1355
  %1527 = load double, ptr %1526, align 8, !tbaa !29
  %1528 = fmul double %1525, %1527
  %1529 = getelementptr inbounds double, ptr %96, i64 %1493
  %1530 = load double, ptr %1529, align 8, !tbaa !29
  %1531 = call double @llvm.fmuladd.f64(double %1528, double %1530, double %1524)
  %1532 = load double, ptr %1360, align 8, !tbaa !29
  %1533 = load double, ptr %1376, align 8, !tbaa !29
  %1534 = fmul double %1532, %1533
  %1535 = getelementptr inbounds double, ptr %95, i64 %1493
  %1536 = load double, ptr %1535, align 8, !tbaa !29
  %1537 = call double @llvm.fmuladd.f64(double %1534, double %1536, double %1531)
  %1538 = getelementptr inbounds double, ptr %129, i64 %1353
  %1539 = load double, ptr %1538, align 8, !tbaa !29
  %1540 = call double @llvm.fmuladd.f64(double %1539, double %1530, double %1537)
  %1541 = load double, ptr %1385, align 8, !tbaa !29
  %1542 = call double @llvm.fmuladd.f64(double %1541, double %1536, double %1540)
  %1543 = getelementptr inbounds double, ptr %131, i64 %1355
  %1544 = load double, ptr %1543, align 8, !tbaa !29
  %1545 = call double @llvm.fmuladd.f64(double %1525, double %1544, double %1542)
  %1546 = getelementptr inbounds double, ptr %129, i64 %1356
  %1547 = load double, ptr %1546, align 8, !tbaa !29
  %1548 = call double @llvm.fmuladd.f64(double %1532, double %1547, double %1545)
  %1549 = getelementptr inbounds double, ptr %144, i64 %1352
  store double %1548, ptr %1549, align 8, !tbaa !29
  %1550 = add nsw i64 %1493, -1
  %1551 = getelementptr inbounds double, ptr %127, i64 %1353
  %1552 = load double, ptr %1551, align 8, !tbaa !29
  %1553 = load double, ptr %1497, align 8, !tbaa !29
  %1554 = getelementptr inbounds double, ptr %127, i64 %1355
  %1555 = load double, ptr %1554, align 8, !tbaa !29
  %1556 = fmul double %1553, %1555
  %1557 = getelementptr inbounds double, ptr %96, i64 %1550
  %1558 = load double, ptr %1557, align 8, !tbaa !29
  %1559 = call double @llvm.fmuladd.f64(double %1556, double %1558, double %1552)
  %1560 = load double, ptr %1360, align 8, !tbaa !29
  %1561 = load double, ptr %1391, align 8, !tbaa !29
  %1562 = fmul double %1560, %1561
  %1563 = getelementptr inbounds double, ptr %95, i64 %1550
  %1564 = load double, ptr %1563, align 8, !tbaa !29
  %1565 = call double @llvm.fmuladd.f64(double %1562, double %1564, double %1559)
  %1566 = getelementptr inbounds double, ptr %137, i64 %1353
  %1567 = load double, ptr %1566, align 8, !tbaa !29
  %1568 = call double @llvm.fmuladd.f64(double %1567, double %1558, double %1565)
  %1569 = load double, ptr %1400, align 8, !tbaa !29
  %1570 = call double @llvm.fmuladd.f64(double %1569, double %1564, double %1568)
  %1571 = getelementptr inbounds double, ptr %139, i64 %1355
  %1572 = load double, ptr %1571, align 8, !tbaa !29
  %1573 = call double @llvm.fmuladd.f64(double %1553, double %1572, double %1570)
  %1574 = getelementptr inbounds double, ptr %137, i64 %1356
  %1575 = load double, ptr %1574, align 8, !tbaa !29
  %1576 = call double @llvm.fmuladd.f64(double %1560, double %1575, double %1573)
  %1577 = getelementptr inbounds double, ptr %163, i64 %1352
  store double %1576, ptr %1577, align 8, !tbaa !29
  %1578 = add nsw i64 %1351, 1
  %1579 = getelementptr inbounds double, ptr %101, i64 %1353
  %1580 = load double, ptr %1579, align 8, !tbaa !29
  %1581 = load double, ptr %1497, align 8, !tbaa !29
  %1582 = getelementptr inbounds double, ptr %101, i64 %1355
  %1583 = load double, ptr %1582, align 8, !tbaa !29
  %1584 = fmul double %1581, %1583
  %1585 = getelementptr inbounds double, ptr %96, i64 %1578
  %1586 = load double, ptr %1585, align 8, !tbaa !29
  %1587 = call double @llvm.fmuladd.f64(double %1584, double %1586, double %1580)
  %1588 = load double, ptr %1360, align 8, !tbaa !29
  %1589 = load double, ptr %1406, align 8, !tbaa !29
  %1590 = fmul double %1588, %1589
  %1591 = getelementptr inbounds double, ptr %95, i64 %1578
  %1592 = load double, ptr %1591, align 8, !tbaa !29
  %1593 = call double @llvm.fmuladd.f64(double %1590, double %1592, double %1587)
  %1594 = getelementptr inbounds double, ptr %130, i64 %1353
  %1595 = load double, ptr %1594, align 8, !tbaa !29
  %1596 = call double @llvm.fmuladd.f64(double %1595, double %1586, double %1593)
  %1597 = load double, ptr %1415, align 8, !tbaa !29
  %1598 = call double @llvm.fmuladd.f64(double %1597, double %1592, double %1596)
  %1599 = getelementptr inbounds double, ptr %133, i64 %1355
  %1600 = load double, ptr %1599, align 8, !tbaa !29
  %1601 = call double @llvm.fmuladd.f64(double %1581, double %1600, double %1598)
  %1602 = getelementptr inbounds double, ptr %130, i64 %1356
  %1603 = load double, ptr %1602, align 8, !tbaa !29
  %1604 = call double @llvm.fmuladd.f64(double %1588, double %1603, double %1601)
  %1605 = getelementptr inbounds double, ptr %143, i64 %1352
  store double %1604, ptr %1605, align 8, !tbaa !29
  %1606 = add nsw i64 %1350, 1
  %1607 = add i64 %1353, %1328
  %1608 = add nsw i64 %1352, 1
  %1609 = add nuw nsw i32 %1354, 1
  %1610 = icmp eq i32 %1609, %1201
  br i1 %1610, label %1611, label %1349, !llvm.loop !486

1611:                                             ; preds = %1349
  %.lcssa16 = phi i64 [ %1578, %1349 ]
  %.lcssa15 = phi i64 [ %1606, %1349 ]
  %.lcssa14 = phi i64 [ %1607, %1349 ]
  %.lcssa13 = phi i64 [ %1608, %1349 ]
  %1612 = trunc i64 %.lcssa15 to i32
  %1613 = trunc i64 %.lcssa16 to i32
  %1614 = trunc i64 %.lcssa13 to i32
  %1615 = trunc i64 %.lcssa14 to i32
  br label %1616

1616:                                             ; preds = %1611, %1338
  %1617 = phi i32 [ %1343, %1338 ], [ %1612, %1611 ]
  %1618 = phi i32 [ %1342, %1338 ], [ %1613, %1611 ]
  %1619 = phi i32 [ %1341, %1338 ], [ %1614, %1611 ]
  %1620 = phi i32 [ %1340, %1338 ], [ %1615, %1611 ]
  %1621 = add nsw i32 %1270, %1618
  %1622 = add nsw i32 %1271, %1617
  %1623 = add nsw i32 %1273, %1620
  %1624 = add nsw i32 %1274, %1619
  %1625 = add nuw nsw i32 %1339, 1
  %1626 = icmp eq i32 %1625, %1202
  br i1 %1626, label %1627, label %1338, !llvm.loop !487

1627:                                             ; preds = %1616, %1332
  %1628 = phi i32 [ %1337, %1332 ], [ %1622, %1616 ]
  %1629 = phi i32 [ %1336, %1332 ], [ %1621, %1616 ]
  %1630 = phi i32 [ %1335, %1332 ], [ %1624, %1616 ]
  %1631 = phi i32 [ %1334, %1332 ], [ %1623, %1616 ]
  %1632 = add nsw i32 %1629, %1276
  %1633 = add nsw i32 %1628, %1278
  %1634 = add nsw i32 %1280, %1631
  %1635 = add nsw i32 %1630, %1282
  %1636 = add nuw nsw i32 %1333, 1
  %1637 = icmp eq i32 %1636, %1203
  br i1 %1637, label %1638, label %1332, !llvm.loop !488

1638:                                             ; preds = %1627, %1207, %1198, %1187, %813, %804, %793, %489, %480, %469, %211, %202
  %1639 = add nuw nsw i64 %44, 1
  %1640 = load i32, ptr %24, align 8, !tbaa !21
  %1641 = sext i32 %1640 to i64
  %1642 = icmp slt i64 %1639, %1641
  br i1 %1642, label %43, label %1643, !llvm.loop !489

1643:                                             ; preds = %1638, %6
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG3RAPPeriodicSym(ptr noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) #0 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !250
  %8 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !172
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %11, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !20
  %14 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %11, i64 0, i32 9, i64 2
  %15 = load i32, ptr %14, align 8, !tbaa !7
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %335

17:                                               ; preds = %3
  %18 = tail call i32 @hypre_StructMatrixAssemble(ptr noundef nonnull %0) #33
  %19 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %13, i64 0, i32 1
  %20 = load i32, ptr %19, align 8, !tbaa !21
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %335

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %24 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %25 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  %26 = icmp eq i32 %9, 27
  %27 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %28 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  br label %29

29:                                               ; preds = %330, %22
  %30 = phi i64 [ 0, %22 ], [ %331, %330 ]
  %31 = phi ptr [ undef, %22 ], [ %73, %330 ]
  %32 = phi ptr [ undef, %22 ], [ %72, %330 ]
  %33 = phi ptr [ undef, %22 ], [ %71, %330 ]
  %34 = phi ptr [ undef, %22 ], [ %70, %330 ]
  %35 = phi ptr [ undef, %22 ], [ %69, %330 ]
  %36 = phi ptr [ undef, %22 ], [ %68, %330 ]
  %37 = load ptr, ptr %13, align 8, !tbaa !23
  %38 = getelementptr inbounds %struct.hypre_Box_struct, ptr %37, i64 %30
  %39 = load ptr, ptr %23, align 8, !tbaa !24
  %40 = load ptr, ptr %39, align 8, !tbaa !23
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %40, i64 %30
  %42 = getelementptr inbounds %struct.hypre_Box_struct, ptr %40, i64 %30, i32 1
  %43 = getelementptr inbounds %struct.hypre_Box_struct, ptr %40, i64 %30, i32 1, i64 1
  %44 = getelementptr inbounds [3 x i32], ptr %41, i64 0, i64 1
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %45 = load i32, ptr %42, align 4, !tbaa !7
  %46 = load i32, ptr %41, align 4, !tbaa !7
  %47 = sub nsw i32 %45, %46
  %48 = add nsw i32 %47, 1
  %49 = icmp slt i32 %47, 0
  %50 = select i1 %49, i32 0, i32 %48
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %51 = trunc i64 %30 to i32
  %52 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %53 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %54 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %55 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %56 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %57 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %58 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %59 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %51, ptr noundef nonnull %4) #33
  br i1 %26, label %60, label %67

60:                                               ; preds = %29
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %61 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %62 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %63 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  store i32 -1, ptr %25, align 4, !tbaa !7
  %64 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %65 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %51, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  store i32 0, ptr %25, align 4, !tbaa !7
  %66 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %51, ptr noundef nonnull %4) #33
  br label %67

67:                                               ; preds = %60, %29
  %68 = phi ptr [ %66, %60 ], [ %36, %29 ]
  %69 = phi ptr [ %65, %60 ], [ %35, %29 ]
  %70 = phi ptr [ %64, %60 ], [ %34, %29 ]
  %71 = phi ptr [ %63, %60 ], [ %33, %29 ]
  %72 = phi ptr [ %62, %60 ], [ %32, %29 ]
  %73 = phi ptr [ %61, %60 ], [ %31, %29 ]
  %74 = call i32 @hypre_BoxGetSize(ptr noundef %38, ptr noundef nonnull %5) #33
  %75 = load i32, ptr %38, align 4, !tbaa !7
  %76 = load i32, ptr %41, align 4, !tbaa !7
  %77 = sub nsw i32 %75, %76
  %78 = getelementptr inbounds i32, ptr %38, i64 1
  %79 = load i32, ptr %78, align 4, !tbaa !7
  %80 = load i32, ptr %44, align 4, !tbaa !7
  %81 = sub i32 %79, %80
  %82 = getelementptr inbounds i32, ptr %38, i64 2
  %83 = load i32, ptr %82, align 4, !tbaa !7
  %84 = getelementptr inbounds [3 x i32], ptr %41, i64 0, i64 2
  %85 = load i32, ptr %84, align 4, !tbaa !7
  %86 = sub nsw i32 %83, %85
  %87 = load i32, ptr %43, align 4, !tbaa !7
  %88 = sub nsw i32 %87, %80
  %89 = add nsw i32 %88, 1
  %90 = icmp slt i32 %88, 0
  %91 = select i1 %90, i32 0, i32 %89
  %92 = mul nsw i32 %91, %86
  %93 = add nsw i32 %81, %92
  %94 = load i32, ptr %42, align 4, !tbaa !7
  %95 = sub nsw i32 %94, %76
  %96 = add nsw i32 %95, 1
  %97 = icmp slt i32 %95, 0
  %98 = select i1 %97, i32 0, i32 %96
  %99 = mul nsw i32 %93, %98
  %100 = add nsw i32 %99, %77
  %101 = load i32, ptr %5, align 4, !tbaa !7
  %102 = load i32, ptr %27, align 4, !tbaa !7
  %103 = load i32, ptr %28, align 4, !tbaa !7
  %104 = call i32 @llvm.smax.i32(i32 %102, i32 %101)
  %105 = call i32 @llvm.smax.i32(i32 %103, i32 %104)
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %204

107:                                              ; preds = %67
  %108 = icmp sgt i32 %103, 0
  %109 = icmp sgt i32 %102, 0
  %110 = icmp sgt i32 %101, 0
  %111 = sub i32 %98, %101
  %112 = sub i32 %91, %102
  %113 = mul i32 %98, %112
  br i1 %108, label %114, label %204

114:                                              ; preds = %107
  %115 = sext i32 %50 to i64
  br label %124

116:                                              ; preds = %168
  br i1 %106, label %117, label %204

117:                                              ; preds = %116
  %118 = icmp sgt i32 %103, 0
  %119 = icmp sgt i32 %102, 0
  %120 = icmp sgt i32 %101, 0
  %121 = sub i32 %98, %101
  %122 = sub i32 %91, %102
  %123 = mul i32 %98, %122
  br i1 %118, label %173, label %204

124:                                              ; preds = %168, %114
  %125 = phi i32 [ %171, %168 ], [ 0, %114 ]
  %126 = phi i32 [ %170, %168 ], [ %100, %114 ]
  br i1 %109, label %127, label %168

127:                                              ; preds = %163, %124
  %128 = phi i32 [ %166, %163 ], [ 0, %124 ]
  %129 = phi i32 [ %165, %163 ], [ %126, %124 ]
  br i1 %110, label %130, label %163

130:                                              ; preds = %127
  %131 = sext i32 %129 to i64
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ %131, %130 ], [ %158, %132 ]
  %134 = phi i32 [ 0, %130 ], [ %159, %132 ]
  %135 = add nsw i64 %133, -1
  %136 = sub nsw i64 %133, %115
  %137 = getelementptr inbounds double, ptr %52, i64 %133
  %138 = load double, ptr %137, align 8, !tbaa !29
  %139 = getelementptr inbounds double, ptr %57, i64 %133
  %140 = load double, ptr %139, align 8, !tbaa !29
  %141 = call double @llvm.fmuladd.f64(double %138, double 2.000000e+00, double %140)
  store double %141, ptr %139, align 8, !tbaa !29
  %142 = getelementptr inbounds double, ptr %53, i64 %133
  %143 = load double, ptr %142, align 8, !tbaa !29
  %144 = getelementptr inbounds double, ptr %54, i64 %135
  %145 = load double, ptr %144, align 8, !tbaa !29
  %146 = fadd double %143, %145
  %147 = getelementptr inbounds double, ptr %58, i64 %133
  %148 = load double, ptr %147, align 8, !tbaa !29
  %149 = fadd double %148, %146
  store double %149, ptr %147, align 8, !tbaa !29
  %150 = getelementptr inbounds double, ptr %55, i64 %133
  %151 = load double, ptr %150, align 8, !tbaa !29
  %152 = getelementptr inbounds double, ptr %56, i64 %136
  %153 = load double, ptr %152, align 8, !tbaa !29
  %154 = fadd double %151, %153
  %155 = getelementptr inbounds double, ptr %59, i64 %133
  %156 = load double, ptr %155, align 8, !tbaa !29
  %157 = fadd double %156, %154
  store double %157, ptr %155, align 8, !tbaa !29
  %158 = add nsw i64 %133, 1
  %159 = add nuw nsw i32 %134, 1
  %160 = icmp eq i32 %159, %101
  br i1 %160, label %161, label %132, !llvm.loop !490

161:                                              ; preds = %132
  %.lcssa = phi i64 [ %158, %132 ]
  %162 = trunc i64 %.lcssa to i32
  br label %163

163:                                              ; preds = %161, %127
  %164 = phi i32 [ %129, %127 ], [ %162, %161 ]
  %165 = add nsw i32 %111, %164
  %166 = add nuw nsw i32 %128, 1
  %167 = icmp eq i32 %166, %102
  br i1 %167, label %168, label %127, !llvm.loop !491

168:                                              ; preds = %163, %124
  %169 = phi i32 [ %126, %124 ], [ %165, %163 ]
  %170 = add nsw i32 %169, %113
  %171 = add nuw nsw i32 %125, 1
  %172 = icmp eq i32 %171, %103
  br i1 %172, label %116, label %124, !llvm.loop !492

173:                                              ; preds = %199, %117
  %174 = phi i32 [ %202, %199 ], [ 0, %117 ]
  %175 = phi i32 [ %201, %199 ], [ %100, %117 ]
  br i1 %119, label %176, label %199

176:                                              ; preds = %194, %173
  %177 = phi i32 [ %197, %194 ], [ 0, %173 ]
  %178 = phi i32 [ %196, %194 ], [ %175, %173 ]
  br i1 %120, label %179, label %194

179:                                              ; preds = %176
  %180 = sext i32 %178 to i64
  br label %181

181:                                              ; preds = %181, %179
  %182 = phi i64 [ %180, %179 ], [ %189, %181 ]
  %183 = phi i32 [ 0, %179 ], [ %190, %181 ]
  %184 = getelementptr inbounds double, ptr %52, i64 %182
  store double 0.000000e+00, ptr %184, align 8, !tbaa !29
  %185 = getelementptr inbounds double, ptr %53, i64 %182
  store double 0.000000e+00, ptr %185, align 8, !tbaa !29
  %186 = getelementptr inbounds double, ptr %54, i64 %182
  store double 0.000000e+00, ptr %186, align 8, !tbaa !29
  %187 = getelementptr inbounds double, ptr %55, i64 %182
  store double 0.000000e+00, ptr %187, align 8, !tbaa !29
  %188 = getelementptr inbounds double, ptr %56, i64 %182
  store double 0.000000e+00, ptr %188, align 8, !tbaa !29
  %189 = add nsw i64 %182, 1
  %190 = add nuw nsw i32 %183, 1
  %191 = icmp eq i32 %190, %101
  br i1 %191, label %192, label %181, !llvm.loop !493

192:                                              ; preds = %181
  %.lcssa1 = phi i64 [ %189, %181 ]
  %193 = trunc i64 %.lcssa1 to i32
  br label %194

194:                                              ; preds = %192, %176
  %195 = phi i32 [ %178, %176 ], [ %193, %192 ]
  %196 = add nsw i32 %121, %195
  %197 = add nuw nsw i32 %177, 1
  %198 = icmp eq i32 %197, %102
  br i1 %198, label %199, label %176, !llvm.loop !494

199:                                              ; preds = %194, %173
  %200 = phi i32 [ %175, %173 ], [ %196, %194 ]
  %201 = add nsw i32 %200, %123
  %202 = add nuw nsw i32 %174, 1
  %203 = icmp eq i32 %202, %103
  br i1 %203, label %204, label %173, !llvm.loop !495

204:                                              ; preds = %199, %117, %116, %107, %67
  br i1 %26, label %205, label %330

205:                                              ; preds = %204
  %206 = call i32 @hypre_BoxGetSize(ptr noundef nonnull %38, ptr noundef nonnull %5) #33
  %207 = load i32, ptr %38, align 4, !tbaa !7
  %208 = load i32, ptr %41, align 4, !tbaa !7
  %209 = sub nsw i32 %207, %208
  %210 = load i32, ptr %78, align 4, !tbaa !7
  %211 = load i32, ptr %44, align 4, !tbaa !7
  %212 = sub i32 %210, %211
  %213 = load i32, ptr %82, align 4, !tbaa !7
  %214 = load i32, ptr %84, align 4, !tbaa !7
  %215 = sub nsw i32 %213, %214
  %216 = load i32, ptr %43, align 4, !tbaa !7
  %217 = sub nsw i32 %216, %211
  %218 = add nsw i32 %217, 1
  %219 = icmp slt i32 %217, 0
  %220 = select i1 %219, i32 0, i32 %218
  %221 = mul nsw i32 %220, %215
  %222 = add nsw i32 %212, %221
  %223 = load i32, ptr %42, align 4, !tbaa !7
  %224 = sub nsw i32 %223, %208
  %225 = add nsw i32 %224, 1
  %226 = icmp slt i32 %224, 0
  %227 = select i1 %226, i32 0, i32 %225
  %228 = mul nsw i32 %222, %227
  %229 = add nsw i32 %228, %209
  %230 = load i32, ptr %5, align 4, !tbaa !7
  %231 = load i32, ptr %27, align 4, !tbaa !7
  %232 = load i32, ptr %28, align 4, !tbaa !7
  %233 = call i32 @llvm.smax.i32(i32 %231, i32 %230)
  %234 = call i32 @llvm.smax.i32(i32 %232, i32 %233)
  %235 = icmp sgt i32 %234, 0
  br i1 %235, label %236, label %330

236:                                              ; preds = %205
  %237 = icmp sgt i32 %232, 0
  %238 = icmp sgt i32 %231, 0
  %239 = icmp sgt i32 %230, 0
  %240 = xor i32 %50, -1
  %241 = sub i32 %227, %230
  %242 = sub i32 %220, %231
  %243 = mul i32 %227, %242
  br i1 %237, label %244, label %330

244:                                              ; preds = %236
  %245 = sext i32 %50 to i64
  br label %246

246:                                              ; preds = %287, %244
  %247 = phi i32 [ %290, %287 ], [ 0, %244 ]
  %248 = phi i32 [ %289, %287 ], [ %229, %244 ]
  br i1 %238, label %249, label %287

249:                                              ; preds = %282, %246
  %250 = phi i32 [ %285, %282 ], [ 0, %246 ]
  %251 = phi i32 [ %284, %282 ], [ %248, %246 ]
  br i1 %239, label %252, label %282

252:                                              ; preds = %249
  %253 = sext i32 %251 to i64
  br label %254

254:                                              ; preds = %254, %252
  %255 = phi i64 [ %253, %252 ], [ %259, %254 ]
  %256 = phi i32 [ 0, %252 ], [ %278, %254 ]
  %257 = trunc i64 %255 to i32
  %258 = add i32 %257, %240
  %259 = add nsw i64 %255, 1
  %260 = sub nsw i64 %259, %245
  %261 = getelementptr inbounds double, ptr %73, i64 %255
  %262 = load double, ptr %261, align 8, !tbaa !29
  %263 = sext i32 %258 to i64
  %264 = getelementptr inbounds double, ptr %70, i64 %263
  %265 = load double, ptr %264, align 8, !tbaa !29
  %266 = fadd double %262, %265
  %267 = getelementptr inbounds double, ptr %69, i64 %255
  %268 = load double, ptr %267, align 8, !tbaa !29
  %269 = fadd double %268, %266
  store double %269, ptr %267, align 8, !tbaa !29
  %270 = getelementptr inbounds double, ptr %72, i64 %255
  %271 = load double, ptr %270, align 8, !tbaa !29
  %272 = getelementptr inbounds double, ptr %71, i64 %260
  %273 = load double, ptr %272, align 8, !tbaa !29
  %274 = fadd double %271, %273
  %275 = getelementptr inbounds double, ptr %68, i64 %255
  %276 = load double, ptr %275, align 8, !tbaa !29
  %277 = fadd double %276, %274
  store double %277, ptr %275, align 8, !tbaa !29
  %278 = add nuw nsw i32 %256, 1
  %279 = icmp eq i32 %278, %230
  br i1 %279, label %280, label %254, !llvm.loop !496

280:                                              ; preds = %254
  %.lcssa2 = phi i64 [ %259, %254 ]
  %281 = trunc i64 %.lcssa2 to i32
  br label %282

282:                                              ; preds = %280, %249
  %283 = phi i32 [ %251, %249 ], [ %281, %280 ]
  %284 = add nsw i32 %241, %283
  %285 = add nuw nsw i32 %250, 1
  %286 = icmp eq i32 %285, %231
  br i1 %286, label %287, label %249, !llvm.loop !497

287:                                              ; preds = %282, %246
  %288 = phi i32 [ %248, %246 ], [ %284, %282 ]
  %289 = add nsw i32 %288, %243
  %290 = add nuw nsw i32 %247, 1
  %291 = icmp eq i32 %290, %232
  br i1 %291, label %292, label %246, !llvm.loop !498

292:                                              ; preds = %287
  br i1 %235, label %293, label %330

293:                                              ; preds = %292
  %294 = icmp sgt i32 %232, 0
  %295 = icmp sgt i32 %231, 0
  %296 = icmp sgt i32 %230, 0
  %297 = sub i32 %227, %230
  %298 = sub i32 %220, %231
  %299 = mul i32 %227, %298
  br i1 %294, label %300, label %330

300:                                              ; preds = %325, %293
  %301 = phi i32 [ %328, %325 ], [ 0, %293 ]
  %302 = phi i32 [ %327, %325 ], [ %229, %293 ]
  br i1 %295, label %303, label %325

303:                                              ; preds = %320, %300
  %304 = phi i32 [ %323, %320 ], [ 0, %300 ]
  %305 = phi i32 [ %322, %320 ], [ %302, %300 ]
  br i1 %296, label %306, label %320

306:                                              ; preds = %303
  %307 = sext i32 %305 to i64
  br label %308

308:                                              ; preds = %308, %306
  %309 = phi i64 [ %307, %306 ], [ %315, %308 ]
  %310 = phi i32 [ 0, %306 ], [ %316, %308 ]
  %311 = getelementptr inbounds double, ptr %73, i64 %309
  store double 0.000000e+00, ptr %311, align 8, !tbaa !29
  %312 = getelementptr inbounds double, ptr %72, i64 %309
  store double 0.000000e+00, ptr %312, align 8, !tbaa !29
  %313 = getelementptr inbounds double, ptr %71, i64 %309
  store double 0.000000e+00, ptr %313, align 8, !tbaa !29
  %314 = getelementptr inbounds double, ptr %70, i64 %309
  store double 0.000000e+00, ptr %314, align 8, !tbaa !29
  %315 = add nsw i64 %309, 1
  %316 = add nuw nsw i32 %310, 1
  %317 = icmp eq i32 %316, %230
  br i1 %317, label %318, label %308, !llvm.loop !499

318:                                              ; preds = %308
  %.lcssa3 = phi i64 [ %315, %308 ]
  %319 = trunc i64 %.lcssa3 to i32
  br label %320

320:                                              ; preds = %318, %303
  %321 = phi i32 [ %305, %303 ], [ %319, %318 ]
  %322 = add nsw i32 %297, %321
  %323 = add nuw nsw i32 %304, 1
  %324 = icmp eq i32 %323, %231
  br i1 %324, label %325, label %303, !llvm.loop !500

325:                                              ; preds = %320, %300
  %326 = phi i32 [ %302, %300 ], [ %322, %320 ]
  %327 = add nsw i32 %326, %299
  %328 = add nuw nsw i32 %301, 1
  %329 = icmp eq i32 %328, %232
  br i1 %329, label %330, label %300, !llvm.loop !501

330:                                              ; preds = %325, %293, %292, %236, %205, %204
  %331 = add nuw nsw i64 %30, 1
  %332 = load i32, ptr %19, align 8, !tbaa !21
  %333 = sext i32 %332 to i64
  %334 = icmp slt i64 %331, %333
  br i1 %334, label %29, label %335, !llvm.loop !502

335:                                              ; preds = %330, %17, %3
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMG3RAPPeriodicNoSym(ptr noundef %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) #0 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !250
  %8 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !172
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !15
  %12 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %11, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !20
  %14 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %11, i64 0, i32 9, i64 2
  %15 = load i32, ptr %14, align 8, !tbaa !7
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %302

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %13, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !21
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %302

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %23 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %24 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  %25 = icmp eq i32 %9, 27
  %26 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %27 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  br label %28

28:                                               ; preds = %297, %21
  %29 = phi i64 [ 0, %21 ], [ %298, %297 ]
  %30 = phi ptr [ undef, %21 ], [ %88, %297 ]
  %31 = phi ptr [ undef, %21 ], [ %87, %297 ]
  %32 = phi ptr [ undef, %21 ], [ %86, %297 ]
  %33 = phi ptr [ undef, %21 ], [ %85, %297 ]
  %34 = phi ptr [ undef, %21 ], [ %84, %297 ]
  %35 = phi ptr [ undef, %21 ], [ %83, %297 ]
  %36 = phi ptr [ undef, %21 ], [ %82, %297 ]
  %37 = phi ptr [ undef, %21 ], [ %81, %297 ]
  %38 = phi ptr [ undef, %21 ], [ %80, %297 ]
  %39 = phi ptr [ undef, %21 ], [ %79, %297 ]
  %40 = phi ptr [ undef, %21 ], [ %78, %297 ]
  %41 = phi ptr [ undef, %21 ], [ %77, %297 ]
  %42 = load ptr, ptr %13, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.hypre_Box_struct, ptr %42, i64 %29
  %44 = load ptr, ptr %22, align 8, !tbaa !24
  %45 = load ptr, ptr %44, align 8, !tbaa !23
  %46 = getelementptr inbounds %struct.hypre_Box_struct, ptr %45, i64 %29
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %47 = trunc i64 %29 to i32
  %48 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %49 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %50 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %51 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %52 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %53 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %54 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %55 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %56 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %57 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %58 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %59 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 0, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %60 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %61 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 0, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %62 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef %0, i32 noundef %47, ptr noundef nonnull %4) #33
  br i1 %25, label %63, label %76

63:                                               ; preds = %28
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %64 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %65 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %66 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 -1, ptr %24, align 4, !tbaa !7
  %67 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %68 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %69 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %70 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 0, ptr %24, align 4, !tbaa !7
  %71 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %72 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 -1, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %73 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 -1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %74 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  store i32 1, ptr %4, align 4, !tbaa !7
  store i32 1, ptr %23, align 4, !tbaa !7
  store i32 1, ptr %24, align 4, !tbaa !7
  %75 = call ptr @hypre_StructMatrixExtractPointerByIndex(ptr noundef nonnull %0, i32 noundef %47, ptr noundef nonnull %4) #33
  br label %76

76:                                               ; preds = %63, %28
  %77 = phi ptr [ %75, %63 ], [ %41, %28 ]
  %78 = phi ptr [ %74, %63 ], [ %40, %28 ]
  %79 = phi ptr [ %73, %63 ], [ %39, %28 ]
  %80 = phi ptr [ %72, %63 ], [ %38, %28 ]
  %81 = phi ptr [ %71, %63 ], [ %37, %28 ]
  %82 = phi ptr [ %70, %63 ], [ %36, %28 ]
  %83 = phi ptr [ %69, %63 ], [ %35, %28 ]
  %84 = phi ptr [ %68, %63 ], [ %34, %28 ]
  %85 = phi ptr [ %67, %63 ], [ %33, %28 ]
  %86 = phi ptr [ %66, %63 ], [ %32, %28 ]
  %87 = phi ptr [ %65, %63 ], [ %31, %28 ]
  %88 = phi ptr [ %64, %63 ], [ %30, %28 ]
  %89 = call i32 @hypre_BoxGetSize(ptr noundef %43, ptr noundef nonnull %5) #33
  %90 = getelementptr inbounds i32, ptr %43, i64 1
  %91 = getelementptr inbounds [3 x i32], ptr %46, i64 0, i64 1
  %92 = getelementptr inbounds i32, ptr %43, i64 2
  %93 = getelementptr inbounds [3 x i32], ptr %46, i64 0, i64 2
  %94 = getelementptr inbounds %struct.hypre_Box_struct, ptr %45, i64 %29, i32 1
  %95 = getelementptr inbounds %struct.hypre_Box_struct, ptr %45, i64 %29, i32 1, i64 1
  %96 = load i32, ptr %5, align 4, !tbaa !7
  %97 = load i32, ptr %26, align 4, !tbaa !7
  %98 = load i32, ptr %27, align 4, !tbaa !7
  %99 = call i32 @llvm.smax.i32(i32 %97, i32 %96)
  %100 = call i32 @llvm.smax.i32(i32 %98, i32 %99)
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %199

102:                                              ; preds = %76
  %103 = load i32, ptr %46, align 4, !tbaa !7
  %104 = load i32, ptr %91, align 4, !tbaa !7
  %105 = load i32, ptr %95, align 4, !tbaa !7
  %106 = sub nsw i32 %105, %104
  %107 = icmp slt i32 %106, 0
  %108 = add nsw i32 %106, 1
  %109 = select i1 %107, i32 0, i32 %108
  %110 = load i32, ptr %94, align 4, !tbaa !7
  %111 = sub nsw i32 %110, %103
  %112 = icmp slt i32 %111, 0
  %113 = add nsw i32 %111, 1
  %114 = select i1 %112, i32 0, i32 %113
  %115 = icmp sgt i32 %98, 0
  %116 = icmp sgt i32 %97, 0
  %117 = icmp sgt i32 %96, 0
  %118 = sub i32 %114, %96
  %119 = sub i32 %109, %97
  %120 = mul i32 %114, %119
  br i1 %115, label %121, label %199

121:                                              ; preds = %102
  %122 = load i32, ptr %43, align 4, !tbaa !7
  %123 = sub i32 %122, %103
  %124 = load i32, ptr %90, align 4, !tbaa !7
  %125 = sub i32 %124, %104
  %126 = load i32, ptr %92, align 4, !tbaa !7
  %127 = load i32, ptr %93, align 4, !tbaa !7
  %128 = sub nsw i32 %126, %127
  %129 = mul nsw i32 %109, %128
  %130 = add nsw i32 %125, %129
  %131 = mul nsw i32 %130, %114
  %132 = add nsw i32 %123, %131
  br label %133

133:                                              ; preds = %194, %121
  %134 = phi i32 [ %197, %194 ], [ 0, %121 ]
  %135 = phi i32 [ %196, %194 ], [ %132, %121 ]
  br i1 %116, label %136, label %194

136:                                              ; preds = %189, %133
  %137 = phi i32 [ %192, %189 ], [ 0, %133 ]
  %138 = phi i32 [ %191, %189 ], [ %135, %133 ]
  br i1 %117, label %139, label %189

139:                                              ; preds = %136
  %140 = sext i32 %138 to i64
  br label %141

141:                                              ; preds = %141, %139
  %142 = phi i64 [ %140, %139 ], [ %184, %141 ]
  %143 = phi i32 [ 0, %139 ], [ %185, %141 ]
  %144 = getelementptr inbounds double, ptr %48, i64 %142
  %145 = load double, ptr %144, align 8, !tbaa !29
  %146 = getelementptr inbounds double, ptr %58, i64 %142
  %147 = load double, ptr %146, align 8, !tbaa !29
  %148 = fadd double %145, %147
  %149 = getelementptr inbounds double, ptr %53, i64 %142
  %150 = load double, ptr %149, align 8, !tbaa !29
  %151 = fadd double %150, %148
  store double %151, ptr %149, align 8, !tbaa !29
  store double 0.000000e+00, ptr %144, align 8, !tbaa !29
  store double 0.000000e+00, ptr %146, align 8, !tbaa !29
  %152 = getelementptr inbounds double, ptr %49, i64 %142
  %153 = load double, ptr %152, align 8, !tbaa !29
  %154 = getelementptr inbounds double, ptr %59, i64 %142
  %155 = load double, ptr %154, align 8, !tbaa !29
  %156 = fadd double %153, %155
  %157 = getelementptr inbounds double, ptr %54, i64 %142
  %158 = load double, ptr %157, align 8, !tbaa !29
  %159 = fadd double %158, %156
  store double %159, ptr %157, align 8, !tbaa !29
  store double 0.000000e+00, ptr %152, align 8, !tbaa !29
  store double 0.000000e+00, ptr %154, align 8, !tbaa !29
  %160 = getelementptr inbounds double, ptr %50, i64 %142
  %161 = load double, ptr %160, align 8, !tbaa !29
  %162 = getelementptr inbounds double, ptr %60, i64 %142
  %163 = load double, ptr %162, align 8, !tbaa !29
  %164 = fadd double %161, %163
  %165 = getelementptr inbounds double, ptr %55, i64 %142
  %166 = load double, ptr %165, align 8, !tbaa !29
  %167 = fadd double %166, %164
  store double %167, ptr %165, align 8, !tbaa !29
  store double 0.000000e+00, ptr %160, align 8, !tbaa !29
  store double 0.000000e+00, ptr %162, align 8, !tbaa !29
  %168 = getelementptr inbounds double, ptr %51, i64 %142
  %169 = load double, ptr %168, align 8, !tbaa !29
  %170 = getelementptr inbounds double, ptr %61, i64 %142
  %171 = load double, ptr %170, align 8, !tbaa !29
  %172 = fadd double %169, %171
  %173 = getelementptr inbounds double, ptr %56, i64 %142
  %174 = load double, ptr %173, align 8, !tbaa !29
  %175 = fadd double %174, %172
  store double %175, ptr %173, align 8, !tbaa !29
  store double 0.000000e+00, ptr %168, align 8, !tbaa !29
  store double 0.000000e+00, ptr %170, align 8, !tbaa !29
  %176 = getelementptr inbounds double, ptr %52, i64 %142
  %177 = load double, ptr %176, align 8, !tbaa !29
  %178 = getelementptr inbounds double, ptr %62, i64 %142
  %179 = load double, ptr %178, align 8, !tbaa !29
  %180 = fadd double %177, %179
  %181 = getelementptr inbounds double, ptr %57, i64 %142
  %182 = load double, ptr %181, align 8, !tbaa !29
  %183 = fadd double %182, %180
  store double %183, ptr %181, align 8, !tbaa !29
  store double 0.000000e+00, ptr %176, align 8, !tbaa !29
  store double 0.000000e+00, ptr %178, align 8, !tbaa !29
  %184 = add nsw i64 %142, 1
  %185 = add nuw nsw i32 %143, 1
  %186 = icmp eq i32 %185, %96
  br i1 %186, label %187, label %141, !llvm.loop !503

187:                                              ; preds = %141
  %.lcssa = phi i64 [ %184, %141 ]
  %188 = trunc i64 %.lcssa to i32
  br label %189

189:                                              ; preds = %187, %136
  %190 = phi i32 [ %138, %136 ], [ %188, %187 ]
  %191 = add nsw i32 %118, %190
  %192 = add nuw nsw i32 %137, 1
  %193 = icmp eq i32 %192, %97
  br i1 %193, label %194, label %136, !llvm.loop !504

194:                                              ; preds = %189, %133
  %195 = phi i32 [ %135, %133 ], [ %191, %189 ]
  %196 = add nsw i32 %195, %120
  %197 = add nuw nsw i32 %134, 1
  %198 = icmp eq i32 %197, %98
  br i1 %198, label %199, label %133, !llvm.loop !505

199:                                              ; preds = %194, %102, %76
  br i1 %25, label %200, label %297

200:                                              ; preds = %199
  %201 = call i32 @hypre_BoxGetSize(ptr noundef nonnull %43, ptr noundef nonnull %5) #33
  %202 = load i32, ptr %5, align 4, !tbaa !7
  %203 = load i32, ptr %26, align 4, !tbaa !7
  %204 = load i32, ptr %27, align 4, !tbaa !7
  %205 = call i32 @llvm.smax.i32(i32 %203, i32 %202)
  %206 = call i32 @llvm.smax.i32(i32 %204, i32 %205)
  %207 = icmp sgt i32 %206, 0
  br i1 %207, label %208, label %297

208:                                              ; preds = %200
  %209 = load i32, ptr %46, align 4, !tbaa !7
  %210 = load i32, ptr %91, align 4, !tbaa !7
  %211 = load i32, ptr %95, align 4, !tbaa !7
  %212 = sub nsw i32 %211, %210
  %213 = icmp slt i32 %212, 0
  %214 = add nsw i32 %212, 1
  %215 = select i1 %213, i32 0, i32 %214
  %216 = load i32, ptr %94, align 4, !tbaa !7
  %217 = sub nsw i32 %216, %209
  %218 = icmp slt i32 %217, 0
  %219 = add nsw i32 %217, 1
  %220 = select i1 %218, i32 0, i32 %219
  %221 = icmp sgt i32 %204, 0
  %222 = icmp sgt i32 %203, 0
  %223 = icmp sgt i32 %202, 0
  %224 = sub i32 %220, %202
  %225 = sub i32 %215, %203
  %226 = mul i32 %220, %225
  br i1 %221, label %227, label %297

227:                                              ; preds = %208
  %228 = load i32, ptr %43, align 4, !tbaa !7
  %229 = sub i32 %228, %209
  %230 = load i32, ptr %90, align 4, !tbaa !7
  %231 = sub i32 %230, %210
  %232 = load i32, ptr %92, align 4, !tbaa !7
  %233 = load i32, ptr %93, align 4, !tbaa !7
  %234 = sub nsw i32 %232, %233
  %235 = mul nsw i32 %215, %234
  %236 = add nsw i32 %231, %235
  %237 = mul nsw i32 %236, %220
  %238 = add nsw i32 %229, %237
  br label %239

239:                                              ; preds = %292, %227
  %240 = phi i32 [ %295, %292 ], [ 0, %227 ]
  %241 = phi i32 [ %294, %292 ], [ %238, %227 ]
  br i1 %222, label %242, label %292

242:                                              ; preds = %287, %239
  %243 = phi i32 [ %290, %287 ], [ 0, %239 ]
  %244 = phi i32 [ %289, %287 ], [ %241, %239 ]
  br i1 %223, label %245, label %287

245:                                              ; preds = %242
  %246 = sext i32 %244 to i64
  br label %247

247:                                              ; preds = %247, %245
  %248 = phi i64 [ %246, %245 ], [ %282, %247 ]
  %249 = phi i32 [ 0, %245 ], [ %283, %247 ]
  %250 = getelementptr inbounds double, ptr %88, i64 %248
  %251 = load double, ptr %250, align 8, !tbaa !29
  %252 = getelementptr inbounds double, ptr %80, i64 %248
  %253 = load double, ptr %252, align 8, !tbaa !29
  %254 = fadd double %251, %253
  %255 = getelementptr inbounds double, ptr %84, i64 %248
  %256 = load double, ptr %255, align 8, !tbaa !29
  %257 = fadd double %256, %254
  store double %257, ptr %255, align 8, !tbaa !29
  store double 0.000000e+00, ptr %250, align 8, !tbaa !29
  store double 0.000000e+00, ptr %252, align 8, !tbaa !29
  %258 = getelementptr inbounds double, ptr %87, i64 %248
  %259 = load double, ptr %258, align 8, !tbaa !29
  %260 = getelementptr inbounds double, ptr %79, i64 %248
  %261 = load double, ptr %260, align 8, !tbaa !29
  %262 = fadd double %259, %261
  %263 = getelementptr inbounds double, ptr %83, i64 %248
  %264 = load double, ptr %263, align 8, !tbaa !29
  %265 = fadd double %264, %262
  store double %265, ptr %263, align 8, !tbaa !29
  store double 0.000000e+00, ptr %258, align 8, !tbaa !29
  store double 0.000000e+00, ptr %260, align 8, !tbaa !29
  %266 = getelementptr inbounds double, ptr %86, i64 %248
  %267 = load double, ptr %266, align 8, !tbaa !29
  %268 = getelementptr inbounds double, ptr %78, i64 %248
  %269 = load double, ptr %268, align 8, !tbaa !29
  %270 = fadd double %267, %269
  %271 = getelementptr inbounds double, ptr %82, i64 %248
  %272 = load double, ptr %271, align 8, !tbaa !29
  %273 = fadd double %272, %270
  store double %273, ptr %271, align 8, !tbaa !29
  store double 0.000000e+00, ptr %266, align 8, !tbaa !29
  store double 0.000000e+00, ptr %268, align 8, !tbaa !29
  %274 = getelementptr inbounds double, ptr %85, i64 %248
  %275 = load double, ptr %274, align 8, !tbaa !29
  %276 = getelementptr inbounds double, ptr %77, i64 %248
  %277 = load double, ptr %276, align 8, !tbaa !29
  %278 = fadd double %275, %277
  %279 = getelementptr inbounds double, ptr %81, i64 %248
  %280 = load double, ptr %279, align 8, !tbaa !29
  %281 = fadd double %280, %278
  store double %281, ptr %279, align 8, !tbaa !29
  store double 0.000000e+00, ptr %274, align 8, !tbaa !29
  store double 0.000000e+00, ptr %276, align 8, !tbaa !29
  %282 = add nsw i64 %248, 1
  %283 = add nuw nsw i32 %249, 1
  %284 = icmp eq i32 %283, %202
  br i1 %284, label %285, label %247, !llvm.loop !506

285:                                              ; preds = %247
  %.lcssa1 = phi i64 [ %282, %247 ]
  %286 = trunc i64 %.lcssa1 to i32
  br label %287

287:                                              ; preds = %285, %242
  %288 = phi i32 [ %244, %242 ], [ %286, %285 ]
  %289 = add nsw i32 %224, %288
  %290 = add nuw nsw i32 %243, 1
  %291 = icmp eq i32 %290, %203
  br i1 %291, label %292, label %242, !llvm.loop !507

292:                                              ; preds = %287, %239
  %293 = phi i32 [ %241, %239 ], [ %289, %287 ]
  %294 = add nsw i32 %293, %226
  %295 = add nuw nsw i32 %240, 1
  %296 = icmp eq i32 %295, %204
  br i1 %296, label %297, label %239, !llvm.loop !508

297:                                              ; preds = %292, %208, %200, %199
  %298 = add nuw nsw i64 %29, 1
  %299 = load i32, ptr %18, align 8, !tbaa !21
  %300 = sext i32 %299 to i64
  %301 = icmp slt i64 %298, %300
  br i1 %301, label %28, label %302, !llvm.loop !509

302:                                              ; preds = %297, %17, %3
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGAxpy(double noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4) #0 {
  %6 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  %7 = tail call ptr @hypre_BoxCreate() #33
  %8 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !39
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !20
  %12 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %11, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !21
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %191

15:                                               ; preds = %5
  %16 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %17 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %18 = getelementptr inbounds %struct.hypre_Box_struct, ptr %7, i64 0, i32 1
  %19 = getelementptr inbounds %struct.hypre_Box_struct, ptr %7, i64 0, i32 1, i64 1
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %7, i64 0, i32 1, i64 2
  %21 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 2
  %22 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %23 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 3
  %24 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 6
  %25 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %26 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %27 = getelementptr inbounds i32, ptr %4, i64 1
  %28 = getelementptr inbounds i32, ptr %4, i64 2
  %29 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %30 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  br label %31

31:                                               ; preds = %186, %15
  %32 = phi i64 [ 0, %15 ], [ %187, %186 ]
  %33 = load ptr, ptr %11, align 8, !tbaa !23
  %34 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %32
  %35 = load i32, ptr %34, align 4, !tbaa !7
  store i32 %35, ptr %7, align 4, !tbaa !7
  %36 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %32, i32 0, i64 1
  %37 = load i32, ptr %36, align 4, !tbaa !7
  store i32 %37, ptr %16, align 4, !tbaa !7
  %38 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %32, i32 0, i64 2
  %39 = load i32, ptr %38, align 4, !tbaa !7
  store i32 %39, ptr %17, align 4, !tbaa !7
  %40 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %32, i32 1
  %41 = load i32, ptr %40, align 4, !tbaa !7
  store i32 %41, ptr %18, align 4, !tbaa !7
  %42 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %32, i32 1, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !7
  store i32 %43, ptr %19, align 4, !tbaa !7
  %44 = getelementptr inbounds %struct.hypre_Box_struct, ptr %33, i64 %32, i32 1, i64 2
  %45 = load i32, ptr %44, align 4, !tbaa !7
  store i32 %45, ptr %20, align 4, !tbaa !7
  %46 = call i32 @hypre_ProjectBox(ptr noundef nonnull %7, ptr noundef %3, ptr noundef %4) #33
  %47 = load ptr, ptr %21, align 8, !tbaa !25
  %48 = load ptr, ptr %47, align 8, !tbaa !23
  %49 = load ptr, ptr %22, align 8, !tbaa !25
  %50 = load ptr, ptr %49, align 8, !tbaa !23
  %51 = load ptr, ptr %23, align 8, !tbaa !27
  %52 = load ptr, ptr %24, align 8, !tbaa !28
  %53 = getelementptr inbounds i32, ptr %52, i64 %32
  %54 = load i32, ptr %53, align 4, !tbaa !7
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double, ptr %51, i64 %55
  %57 = load ptr, ptr %25, align 8, !tbaa !27
  %58 = load ptr, ptr %26, align 8, !tbaa !28
  %59 = getelementptr inbounds i32, ptr %58, i64 %32
  %60 = load i32, ptr %59, align 4, !tbaa !7
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double, ptr %57, i64 %61
  %63 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %7, ptr noundef %4, ptr noundef nonnull %6) #33
  %64 = load i32, ptr %4, align 4, !tbaa !7
  %65 = load i32, ptr %6, align 4, !tbaa !7
  %66 = load i32, ptr %29, align 4, !tbaa !7
  %67 = load i32, ptr %30, align 4, !tbaa !7
  %68 = call i32 @llvm.smax.i32(i32 %66, i32 %65)
  %69 = call i32 @llvm.smax.i32(i32 %67, i32 %68)
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %186

71:                                               ; preds = %31
  %72 = getelementptr inbounds %struct.hypre_Box_struct, ptr %50, i64 %32, i32 1
  %73 = load i32, ptr %72, align 4, !tbaa !7
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %50, i64 %32
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = sub nsw i32 %73, %75
  %77 = icmp slt i32 %76, 0
  %78 = add nsw i32 %76, 1
  %79 = select i1 %77, i32 0, i32 %78
  %80 = getelementptr inbounds %struct.hypre_Box_struct, ptr %50, i64 %32, i32 1, i64 1
  %81 = load i32, ptr %80, align 4, !tbaa !7
  %82 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 1
  %83 = load i32, ptr %82, align 4, !tbaa !7
  %84 = sub nsw i32 %81, %83
  %85 = icmp slt i32 %84, 0
  %86 = add nsw i32 %84, 1
  %87 = select i1 %85, i32 0, i32 %86
  %88 = mul i32 %79, %87
  %89 = load i32, ptr %28, align 4, !tbaa !7
  %90 = mul i32 %88, %89
  %91 = load i32, ptr %27, align 4, !tbaa !7
  %92 = mul nsw i32 %79, %91
  %93 = getelementptr inbounds %struct.hypre_Box_struct, ptr %48, i64 %32, i32 1
  %94 = load i32, ptr %93, align 4, !tbaa !7
  %95 = getelementptr inbounds %struct.hypre_Box_struct, ptr %48, i64 %32
  %96 = load i32, ptr %95, align 4, !tbaa !7
  %97 = sub nsw i32 %94, %96
  %98 = icmp slt i32 %97, 0
  %99 = add nsw i32 %97, 1
  %100 = select i1 %98, i32 0, i32 %99
  %101 = getelementptr inbounds %struct.hypre_Box_struct, ptr %48, i64 %32, i32 1, i64 1
  %102 = load i32, ptr %101, align 4, !tbaa !7
  %103 = getelementptr inbounds [3 x i32], ptr %95, i64 0, i64 1
  %104 = load i32, ptr %103, align 4, !tbaa !7
  %105 = sub nsw i32 %102, %104
  %106 = icmp slt i32 %105, 0
  %107 = add nsw i32 %105, 1
  %108 = select i1 %106, i32 0, i32 %107
  %109 = mul i32 %100, %108
  %110 = mul i32 %109, %89
  %111 = mul nsw i32 %91, %100
  %112 = icmp sgt i32 %67, 0
  %113 = icmp sgt i32 %66, 0
  %114 = icmp sgt i32 %65, 0
  %115 = mul i32 %64, %65
  %116 = sub i32 %111, %115
  %117 = sub i32 %92, %115
  %118 = mul nsw i32 %66, %111
  %119 = sub i32 %110, %118
  %120 = mul nsw i32 %66, %92
  %121 = sub i32 %90, %120
  br i1 %112, label %122, label %186

122:                                              ; preds = %71
  %123 = load i32, ptr %7, align 4, !tbaa !7
  %124 = sub i32 %123, %96
  %125 = load i32, ptr %16, align 4, !tbaa !7
  %126 = sub i32 %125, %104
  %127 = load i32, ptr %17, align 4, !tbaa !7
  %128 = getelementptr inbounds [3 x i32], ptr %95, i64 0, i64 2
  %129 = load i32, ptr %128, align 4, !tbaa !7
  %130 = sub nsw i32 %127, %129
  %131 = mul nsw i32 %108, %130
  %132 = add nsw i32 %126, %131
  %133 = mul nsw i32 %132, %100
  %134 = add nsw i32 %124, %133
  %135 = sub i32 %123, %75
  %136 = sub i32 %125, %83
  %137 = getelementptr inbounds [3 x i32], ptr %74, i64 0, i64 2
  %138 = load i32, ptr %137, align 4, !tbaa !7
  %139 = sub nsw i32 %127, %138
  %140 = mul nsw i32 %87, %139
  %141 = add nsw i32 %136, %140
  %142 = mul nsw i32 %141, %79
  %143 = add nsw i32 %135, %142
  %144 = sext i32 %64 to i64
  br label %145

145:                                              ; preds = %179, %122
  %146 = phi i32 [ %182, %179 ], [ %134, %122 ]
  %147 = phi i32 [ %183, %179 ], [ %143, %122 ]
  %148 = phi i32 [ %184, %179 ], [ 0, %122 ]
  br i1 %113, label %149, label %179

149:                                              ; preds = %172, %145
  %150 = phi i32 [ %175, %172 ], [ %146, %145 ]
  %151 = phi i32 [ %176, %172 ], [ %147, %145 ]
  %152 = phi i32 [ %177, %172 ], [ 0, %145 ]
  br i1 %114, label %153, label %172

153:                                              ; preds = %149
  %154 = sext i32 %150 to i64
  %155 = sext i32 %151 to i64
  br label %156

156:                                              ; preds = %156, %153
  %157 = phi i64 [ %155, %153 ], [ %166, %156 ]
  %158 = phi i64 [ %154, %153 ], [ %165, %156 ]
  %159 = phi i32 [ 0, %153 ], [ %167, %156 ]
  %160 = getelementptr inbounds double, ptr %56, i64 %158
  %161 = load double, ptr %160, align 8, !tbaa !29
  %162 = getelementptr inbounds double, ptr %62, i64 %157
  %163 = load double, ptr %162, align 8, !tbaa !29
  %164 = call double @llvm.fmuladd.f64(double %0, double %161, double %163)
  store double %164, ptr %162, align 8, !tbaa !29
  %165 = add i64 %158, %144
  %166 = add i64 %157, %144
  %167 = add nuw nsw i32 %159, 1
  %168 = icmp eq i32 %167, %65
  br i1 %168, label %169, label %156, !llvm.loop !510

169:                                              ; preds = %156
  %.lcssa1 = phi i64 [ %165, %156 ]
  %.lcssa = phi i64 [ %166, %156 ]
  %170 = trunc i64 %.lcssa to i32
  %171 = trunc i64 %.lcssa1 to i32
  br label %172

172:                                              ; preds = %169, %149
  %173 = phi i32 [ %151, %149 ], [ %170, %169 ]
  %174 = phi i32 [ %150, %149 ], [ %171, %169 ]
  %175 = add nsw i32 %116, %174
  %176 = add nsw i32 %117, %173
  %177 = add nuw nsw i32 %152, 1
  %178 = icmp eq i32 %177, %66
  br i1 %178, label %179, label %149, !llvm.loop !511

179:                                              ; preds = %172, %145
  %180 = phi i32 [ %147, %145 ], [ %176, %172 ]
  %181 = phi i32 [ %146, %145 ], [ %175, %172 ]
  %182 = add nsw i32 %119, %181
  %183 = add nsw i32 %121, %180
  %184 = add nuw nsw i32 %148, 1
  %185 = icmp eq i32 %184, %67
  br i1 %185, label %186, label %145, !llvm.loop !512

186:                                              ; preds = %179, %71, %31
  %187 = add nuw nsw i64 %32, 1
  %188 = load i32, ptr %12, align 8, !tbaa !21
  %189 = sext i32 %188 to i64
  %190 = icmp slt i64 %187, %189
  br i1 %190, label %31, label %191, !llvm.loop !513

191:                                              ; preds = %186, %5
  %192 = call i32 @hypre_BoxDestroy(ptr noundef %7) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMGRelaxCreate(i32 noundef %0) #0 {
  %2 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 208) #33
  store i32 1, ptr %2, align 8, !tbaa !514
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 1
  store i32 1, ptr %3, align 4, !tbaa !516
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 2
  store i32 1, ptr %4, align 8, !tbaa !517
  %5 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 3
  store i32 %0, ptr %5, align 4, !tbaa !518
  %6 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 17
  store ptr null, ptr %6, align 8, !tbaa !519
  %7 = tail call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.124) #33
  %8 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 28
  store i32 %7, ptr %8, align 4, !tbaa !520
  %9 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 4
  store i32 0, ptr %9, align 8, !tbaa !521
  %10 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 5
  store double 0x3EB0C6F7A0B5ED8D, ptr %10, align 8, !tbaa !522
  %11 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 6
  store i32 1000, ptr %11, align 8, !tbaa !523
  %12 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 7
  store i32 0, ptr %12, align 4, !tbaa !524
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 8
  store i32 1, ptr %13, align 8, !tbaa !525
  %14 = tail call ptr @hypre_MAlloc(i32 noundef 4) #33
  %15 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 9
  store ptr %14, ptr %15, align 8, !tbaa !526
  %16 = tail call ptr @hypre_MAlloc(i32 noundef 4) #33
  %17 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 10
  store ptr %16, ptr %17, align 8, !tbaa !527
  %18 = load ptr, ptr %15, align 8, !tbaa !526
  store i32 0, ptr %18, align 4, !tbaa !7
  store i32 1, ptr %16, align 4, !tbaa !7
  %19 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 11
  store i32 0, ptr %19, align 8, !tbaa !528
  %20 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 12
  store i32 1, ptr %20, align 4, !tbaa !529
  %21 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 13
  store ptr null, ptr %21, align 8, !tbaa !530
  %22 = tail call ptr @hypre_MAlloc(i32 noundef 4) #33
  %23 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 14
  store ptr %22, ptr %23, align 8, !tbaa !531
  store i32 0, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 15
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, ptr %24, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 16, i64 1
  store i32 1, ptr %25, align 4, !tbaa !7
  %26 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 16, i64 2
  store i32 1, ptr %26, align 4, !tbaa !7
  %27 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 19
  %28 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 29
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %27, i8 0, i64 32, i1 false)
  store i32 1, ptr %28, align 8, !tbaa !532
  %29 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %2, i64 0, i32 30
  store i32 1, ptr %29, align 4, !tbaa !533
  ret ptr %2
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxDestroyARem(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 24
  %3 = load ptr, ptr %2, align 8, !tbaa !534
  %4 = icmp eq ptr %3, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 8
  %7 = load i32, ptr %6, align 8, !tbaa !525
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 25
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %17, %11 ]
  %13 = load ptr, ptr %10, align 8, !tbaa !535
  %14 = getelementptr inbounds ptr, ptr %13, i64 %12
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  %16 = tail call i32 @hypre_SMGResidualDestroy(ptr noundef %15) #33
  %17 = add nuw nsw i64 %12, 1
  %18 = load i32, ptr %6, align 8, !tbaa !525
  %19 = sext i32 %18 to i64
  %20 = icmp slt i64 %17, %19
  br i1 %20, label %11, label %21, !llvm.loop !536

21:                                               ; preds = %11, %5
  %22 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 25
  %23 = load ptr, ptr %22, align 8, !tbaa !535
  tail call void @hypre_Free(ptr noundef %23) #33
  store ptr null, ptr %22, align 8, !tbaa !535
  %24 = load ptr, ptr %2, align 8, !tbaa !534
  %25 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %24) #33
  store ptr null, ptr %2, align 8, !tbaa !534
  br label %26

26:                                               ; preds = %21, %1
  %27 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  store i32 1, ptr %27, align 4, !tbaa !516
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxDestroyASol(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 23
  %3 = load ptr, ptr %2, align 8, !tbaa !537
  %4 = icmp eq ptr %3, null
  br i1 %4, label %33, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 8
  %7 = load i32, ptr %6, align 8, !tbaa !525
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %28

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 18
  %11 = load i32, ptr %10, align 8, !tbaa !538
  %12 = icmp sgt i32 %11, 2
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 26
  br label %14

14:                                               ; preds = %23, %9
  %15 = phi i64 [ 0, %9 ], [ %24, %23 ]
  %16 = load ptr, ptr %13, align 8, !tbaa !539
  %17 = getelementptr inbounds ptr, ptr %16, i64 %15
  %18 = load ptr, ptr %17, align 8, !tbaa !14
  br i1 %12, label %19, label %21

19:                                               ; preds = %14
  %20 = tail call i32 @hypre_SMGDestroy(ptr noundef %18) #33
  br label %23

21:                                               ; preds = %14
  %22 = tail call i32 @hypre_CyclicReductionDestroy(ptr noundef %18) #33
  br label %23

23:                                               ; preds = %21, %19
  %24 = add nuw nsw i64 %15, 1
  %25 = load i32, ptr %6, align 8, !tbaa !525
  %26 = sext i32 %25 to i64
  %27 = icmp slt i64 %24, %26
  br i1 %27, label %14, label %28, !llvm.loop !540

28:                                               ; preds = %23, %5
  %29 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 26
  %30 = load ptr, ptr %29, align 8, !tbaa !539
  tail call void @hypre_Free(ptr noundef %30) #33
  store ptr null, ptr %29, align 8, !tbaa !539
  %31 = load ptr, ptr %2, align 8, !tbaa !537
  %32 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %31) #33
  store ptr null, ptr %2, align 8, !tbaa !537
  br label %33

33:                                               ; preds = %28, %1
  %34 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  store i32 1, ptr %34, align 8, !tbaa !517
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %32, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 9
  %5 = load ptr, ptr %4, align 8, !tbaa !526
  tail call void @hypre_Free(ptr noundef %5) #33
  store ptr null, ptr %4, align 8, !tbaa !526
  %6 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 10
  %7 = load ptr, ptr %6, align 8, !tbaa !527
  tail call void @hypre_Free(ptr noundef %7) #33
  store ptr null, ptr %6, align 8, !tbaa !527
  %8 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 13
  %9 = load ptr, ptr %8, align 8, !tbaa !530
  tail call void @hypre_Free(ptr noundef %9) #33
  store ptr null, ptr %8, align 8, !tbaa !530
  %10 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 14
  %11 = load ptr, ptr %10, align 8, !tbaa !531
  tail call void @hypre_Free(ptr noundef %11) #33
  store ptr null, ptr %10, align 8, !tbaa !531
  %12 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 17
  %13 = load ptr, ptr %12, align 8, !tbaa !519
  %14 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %13) #33
  %15 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 19
  %16 = load ptr, ptr %15, align 8, !tbaa !541
  %17 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %16) #33
  %18 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 20
  %19 = load ptr, ptr %18, align 8, !tbaa !542
  %20 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %19) #33
  %21 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 21
  %22 = load ptr, ptr %21, align 8, !tbaa !543
  %23 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %22) #33
  %24 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 22
  %25 = load ptr, ptr %24, align 8, !tbaa !544
  %26 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %25) #33
  store i32 1, ptr %0, align 8, !tbaa !514
  %27 = tail call i32 @hypre_SMGRelaxDestroyARem(ptr noundef nonnull %0) #35
  %28 = tail call i32 @hypre_SMGRelaxDestroyASol(ptr noundef nonnull %0) #35
  %29 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 28
  %30 = load i32, ptr %29, align 4, !tbaa !520
  %31 = tail call i32 @hypre_FinalizeTiming(i32 noundef %30) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %32

32:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelax(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 28
  %6 = load i32, ptr %5, align 4, !tbaa !520
  %7 = tail call i32 @hypre_BeginTiming(i32 noundef %6) #33
  %8 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  %9 = load i32, ptr %8, align 8, !tbaa !517
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %4
  store i32 2, ptr %8, align 8, !tbaa !517
  br label %12

12:                                               ; preds = %11, %4
  %13 = tail call i32 @hypre_SMGRelaxSetup(ptr noundef nonnull %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #35
  %14 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 7
  %15 = load i32, ptr %14, align 4, !tbaa !524
  %16 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 18
  %17 = load i32, ptr %16, align 8, !tbaa !538
  %18 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 22
  %19 = load ptr, ptr %18, align 8, !tbaa !544
  %20 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 23
  %21 = load ptr, ptr %20, align 8, !tbaa !537
  %22 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 24
  %23 = load ptr, ptr %22, align 8, !tbaa !534
  %24 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 25
  %25 = load ptr, ptr %24, align 8, !tbaa !535
  %26 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 26
  %27 = load ptr, ptr %26, align 8, !tbaa !539
  %28 = icmp eq i32 %15, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %12
  %30 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16
  %31 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 17
  %32 = load ptr, ptr %31, align 8, !tbaa !519
  %33 = tail call i32 @hypre_SMGSetStructVectorConstantValues(ptr noundef %3, double noundef 0.000000e+00, ptr noundef %32, ptr noundef nonnull %30) #33
  br label %34

34:                                               ; preds = %29, %12
  %35 = phi i32 [ %33, %29 ], [ 0, %12 ]
  %36 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 6
  %37 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 12
  %38 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 14
  %39 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 11
  %40 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 13
  %41 = icmp sgt i32 %17, 2
  %42 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 27
  br label %43

43:                                               ; preds = %78, %34
  %44 = phi i1 [ true, %34 ], [ false, %78 ]
  br i1 %44, label %48, label %45

45:                                               ; preds = %43
  %46 = load i32, ptr %36, align 8, !tbaa !523
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %79

48:                                               ; preds = %45, %43
  %49 = phi i32 [ %46, %45 ], [ 1, %43 ]
  %50 = phi ptr [ %38, %45 ], [ %40, %43 ]
  %51 = phi ptr [ %37, %45 ], [ %39, %43 ]
  %52 = load i32, ptr %51, align 4, !tbaa !7
  %53 = load ptr, ptr %50, align 8, !tbaa !14
  %54 = icmp sgt i32 %52, 0
  %55 = zext i32 %52 to i64
  br label %56

56:                                               ; preds = %75, %48
  %57 = phi i32 [ 0, %48 ], [ %76, %75 ]
  br i1 %54, label %58, label %75

58:                                               ; preds = %72, %56
  %59 = phi i64 [ %73, %72 ], [ 0, %56 ]
  %60 = getelementptr inbounds i32, ptr %53, i64 %59
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds ptr, ptr %25, i64 %62
  %64 = load ptr, ptr %63, align 8, !tbaa !14
  %65 = tail call i32 @hypre_SMGResidual(ptr noundef %64, ptr noundef %23, ptr noundef %3, ptr noundef %2, ptr noundef %19) #33
  %66 = getelementptr inbounds ptr, ptr %27, i64 %62
  %67 = load ptr, ptr %66, align 8, !tbaa !14
  br i1 %41, label %68, label %70

68:                                               ; preds = %58
  %69 = tail call i32 @hypre_SMGSolve(ptr noundef %67, ptr noundef %21, ptr noundef %19, ptr noundef %3) #33
  br label %72

70:                                               ; preds = %58
  %71 = tail call i32 @hypre_CyclicReduction(ptr noundef %67, ptr noundef %21, ptr noundef %19, ptr noundef %3) #33
  br label %72

72:                                               ; preds = %70, %68
  %73 = add nuw nsw i64 %59, 1
  %74 = icmp eq i64 %73, %55
  br i1 %74, label %75, label %58, !llvm.loop !545

75:                                               ; preds = %72, %56
  %76 = add nuw nsw i32 %57, 1
  store i32 %76, ptr %42, align 8, !tbaa !546
  %77 = icmp eq i32 %76, %49
  br i1 %77, label %78, label %56, !llvm.loop !547

78:                                               ; preds = %75
  br i1 %44, label %43, label %79, !llvm.loop !548

79:                                               ; preds = %78, %45
  %80 = add nsw i32 %17, -1
  %81 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 4
  %82 = load i32, ptr %81, align 8, !tbaa !521
  %83 = icmp sgt i32 %80, %82
  br i1 %83, label %86, label %84

84:                                               ; preds = %79
  %85 = tail call i32 @hypre_SMGRelaxDestroyASol(ptr noundef nonnull %0) #35
  br label %86

86:                                               ; preds = %84, %79
  %87 = load i32, ptr %5, align 4, !tbaa !520
  %88 = tail call i32 @hypre_EndTiming(i32 noundef %87) #33
  ret i32 %35
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetup(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !250
  %7 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %6, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !37
  %9 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 18
  store i32 %8, ptr %9, align 8, !tbaa !538
  %10 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 19
  %11 = load ptr, ptr %10, align 8, !tbaa !541
  %12 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %11) #33
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 20
  %14 = load ptr, ptr %13, align 8, !tbaa !542
  %15 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %14) #33
  %16 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 21
  %17 = load ptr, ptr %16, align 8, !tbaa !543
  %18 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %17) #33
  %19 = tail call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %19, ptr %10, align 8, !tbaa !541
  %20 = tail call ptr @hypre_StructVectorRef(ptr noundef %2) #33
  store ptr %20, ptr %13, align 8, !tbaa !542
  %21 = tail call ptr @hypre_StructVectorRef(ptr noundef %3) #33
  store ptr %21, ptr %16, align 8, !tbaa !543
  %22 = add nsw i32 %8, -1
  %23 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 4
  %24 = load i32, ptr %23, align 8, !tbaa !521
  %25 = icmp sle i32 %22, %24
  %26 = zext i1 %25 to i32
  %27 = load i32, ptr %0, align 8, !tbaa !514
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %4
  %30 = tail call i32 @hypre_SMGRelaxSetupTempVec(ptr noundef nonnull %0, ptr nonnull poison, ptr noundef %2, ptr poison) #35
  br label %31

31:                                               ; preds = %29, %4
  %32 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  %33 = load i32, ptr %32, align 4, !tbaa !516
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = tail call i32 @hypre_SMGRelaxSetupARem(ptr noundef nonnull %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3) #35
  br label %37

37:                                               ; preds = %35, %31
  %38 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  %39 = load i32, ptr %38, align 8, !tbaa !517
  %40 = icmp sgt i32 %39, %26
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = tail call i32 @hypre_SMGRelaxSetupASol(ptr noundef nonnull %0, ptr noundef nonnull %1, ptr poison, ptr noundef %3) #35
  br label %43

43:                                               ; preds = %41, %37
  %44 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 17
  %45 = load ptr, ptr %44, align 8, !tbaa !519
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %56

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !39
  %50 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %49, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !20
  %52 = tail call ptr @hypre_BoxArrayDuplicate(ptr noundef %51) #33
  %53 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 15
  %54 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16
  %55 = tail call i32 @hypre_ProjectBoxArray(ptr noundef %52, ptr noundef nonnull %53, ptr noundef nonnull %54) #33
  store ptr %52, ptr %44, align 8, !tbaa !519
  br label %56

56:                                               ; preds = %47, %43
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetupTempVec(ptr nocapture noundef %0, ptr nocapture readnone %1, ptr noundef %2, ptr nocapture readnone %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 22
  %6 = load ptr, ptr %5, align 8, !tbaa !544
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %17

8:                                                ; preds = %4
  %9 = load i32, ptr %2, align 8, !tbaa !325
  %10 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !39
  %12 = tail call ptr @hypre_StructVectorCreate(i32 noundef %9, ptr noundef %11) #33
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 7
  %14 = tail call i32 @hypre_StructVectorSetNumGhost(ptr noundef %12, ptr noundef nonnull %13) #33
  %15 = tail call i32 @hypre_StructVectorInitialize(ptr noundef %12) #33
  %16 = tail call i32 @hypre_StructVectorAssemble(ptr noundef %12) #33
  store ptr %12, ptr %5, align 8, !tbaa !544
  br label %17

17:                                               ; preds = %8, %4
  store i32 0, ptr %0, align 8, !tbaa !514
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetupARem(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 8
  %6 = alloca [3 x i32], align 8
  %7 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 8
  %8 = load i32, ptr %7, align 8, !tbaa !525
  %9 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 9
  %10 = load ptr, ptr %9, align 8, !tbaa !526
  %11 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !527
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 22
  %14 = load ptr, ptr %13, align 8, !tbaa !544
  %15 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !250
  %17 = load ptr, ptr %16, align 8, !tbaa !35
  %18 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %16, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !172
  %20 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %16, i64 0, i32 3
  %21 = load i32, ptr %20, align 8, !tbaa !37
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  %22 = tail call i32 @hypre_SMGRelaxDestroyARem(ptr noundef %0) #35
  %23 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 15
  %24 = load <2 x i32>, ptr %23, align 8, !tbaa !7
  store <2 x i32> %24, ptr %5, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 15, i64 2
  %26 = load i32, ptr %25, align 8, !tbaa !7
  %27 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  store i32 %26, ptr %27, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16
  %29 = load <2 x i32>, ptr %28, align 4, !tbaa !7
  store <2 x i32> %29, ptr %6, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16, i64 2
  %31 = load i32, ptr %30, align 4, !tbaa !7
  %32 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 %31, ptr %32, align 8, !tbaa !7
  %33 = shl i32 %19, 2
  %34 = tail call ptr @hypre_MAlloc(i32 noundef %33) #33
  %35 = icmp sgt i32 %19, 0
  br i1 %35, label %36, label %55

36:                                               ; preds = %4
  %37 = add nsw i32 %21, -1
  %38 = sext i32 %37 to i64
  %39 = zext i32 %19 to i64
  br label %40

40:                                               ; preds = %51, %36
  %41 = phi i64 [ 0, %36 ], [ %53, %51 ]
  %42 = phi i32 [ 0, %36 ], [ %52, %51 ]
  %43 = getelementptr inbounds [3 x i32], ptr %17, i64 %41, i64 %38
  %44 = load i32, ptr %43, align 4, !tbaa !7
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %40
  %47 = sext i32 %42 to i64
  %48 = getelementptr inbounds i32, ptr %34, i64 %47
  %49 = trunc i64 %41 to i32
  store i32 %49, ptr %48, align 4, !tbaa !7
  %50 = add nsw i32 %42, 1
  br label %51

51:                                               ; preds = %46, %40
  %52 = phi i32 [ %50, %46 ], [ %42, %40 ]
  %53 = add nuw nsw i64 %41, 1
  %54 = icmp eq i64 %53, %39
  br i1 %54, label %55, label %40, !llvm.loop !549

55:                                               ; preds = %51, %4
  %56 = phi i32 [ 0, %4 ], [ %52, %51 ]
  %57 = tail call ptr @hypre_StructMatrixCreateMask(ptr noundef %1, i32 noundef %56, ptr noundef %34) #33
  tail call void @hypre_Free(ptr noundef %34) #33
  %58 = shl i32 %8, 3
  %59 = tail call ptr @hypre_MAlloc(i32 noundef %58) #33
  %60 = icmp sgt i32 %8, 0
  br i1 %60, label %61, label %80

61:                                               ; preds = %55
  %62 = add nsw i32 %21, -1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 %63
  %65 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %63
  %66 = zext i32 %8 to i64
  br label %67

67:                                               ; preds = %67, %61
  %68 = phi i64 [ 0, %61 ], [ %78, %67 ]
  %69 = getelementptr inbounds i32, ptr %10, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !7
  store i32 %70, ptr %64, align 4, !tbaa !7
  %71 = getelementptr inbounds i32, ptr %12, i64 %68
  %72 = load i32, ptr %71, align 4, !tbaa !7
  store i32 %72, ptr %65, align 4, !tbaa !7
  %73 = call ptr @hypre_SMGResidualCreate() #33
  %74 = getelementptr inbounds ptr, ptr %59, i64 %68
  store ptr %73, ptr %74, align 8, !tbaa !14
  %75 = call i32 @hypre_SMGResidualSetBase(ptr noundef %73, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %76 = load ptr, ptr %74, align 8, !tbaa !14
  %77 = call i32 @hypre_SMGResidualSetup(ptr noundef %76, ptr noundef %57, ptr noundef %3, ptr noundef %2, ptr noundef %14) #33
  %78 = add nuw nsw i64 %68, 1
  %79 = icmp eq i64 %78, %66
  br i1 %79, label %80, label %67, !llvm.loop !550

80:                                               ; preds = %67, %55
  %81 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 24
  store ptr %57, ptr %81, align 8, !tbaa !534
  %82 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 25
  store ptr %59, ptr %82, align 8, !tbaa !535
  %83 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  store i32 0, ptr %83, align 4, !tbaa !516
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetupASol(ptr nocapture noundef %0, ptr noundef %1, ptr nocapture readnone %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 8
  %6 = alloca [3 x i32], align 8
  %7 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 8
  %8 = load i32, ptr %7, align 8, !tbaa !525
  %9 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 9
  %10 = load ptr, ptr %9, align 8, !tbaa !526
  %11 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !527
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 22
  %14 = load ptr, ptr %13, align 8, !tbaa !544
  %15 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 29
  %16 = load i32, ptr %15, align 8, !tbaa !532
  %17 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 30
  %18 = load i32, ptr %17, align 4, !tbaa !533
  %19 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !250
  %21 = load ptr, ptr %20, align 8, !tbaa !35
  %22 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %20, i64 0, i32 1
  %23 = load i32, ptr %22, align 8, !tbaa !172
  %24 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %20, i64 0, i32 3
  %25 = load i32, ptr %24, align 8, !tbaa !37
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  %26 = tail call i32 @hypre_SMGRelaxDestroyASol(ptr noundef %0) #35
  %27 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 15
  %28 = load <2 x i32>, ptr %27, align 8, !tbaa !7
  store <2 x i32> %28, ptr %5, align 8, !tbaa !7
  %29 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 15, i64 2
  %30 = load i32, ptr %29, align 8, !tbaa !7
  %31 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  store i32 %30, ptr %31, align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16
  %33 = load <2 x i32>, ptr %32, align 4, !tbaa !7
  store <2 x i32> %33, ptr %6, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16, i64 2
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 %35, ptr %36, align 8, !tbaa !7
  %37 = shl i32 %23, 2
  %38 = tail call ptr @hypre_MAlloc(i32 noundef %37) #33
  %39 = icmp sgt i32 %23, 0
  %40 = add nsw i32 %25, -1
  br i1 %39, label %41, label %59

41:                                               ; preds = %4
  %42 = sext i32 %40 to i64
  %43 = zext i32 %23 to i64
  br label %44

44:                                               ; preds = %55, %41
  %45 = phi i64 [ 0, %41 ], [ %57, %55 ]
  %46 = phi i32 [ 0, %41 ], [ %56, %55 ]
  %47 = getelementptr inbounds [3 x i32], ptr %21, i64 %45, i64 %42
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %55

50:                                               ; preds = %44
  %51 = sext i32 %46 to i64
  %52 = getelementptr inbounds i32, ptr %38, i64 %51
  %53 = trunc i64 %45 to i32
  store i32 %53, ptr %52, align 4, !tbaa !7
  %54 = add nsw i32 %46, 1
  br label %55

55:                                               ; preds = %50, %44
  %56 = phi i32 [ %54, %50 ], [ %46, %44 ]
  %57 = add nuw nsw i64 %45, 1
  %58 = icmp eq i64 %57, %43
  br i1 %58, label %59, label %44, !llvm.loop !551

59:                                               ; preds = %55, %4
  %60 = phi i32 [ 0, %4 ], [ %56, %55 ]
  %61 = tail call ptr @hypre_StructMatrixCreateMask(ptr noundef %1, i32 noundef %60, ptr noundef %38) #33
  %62 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %61, i64 0, i32 3
  %63 = load ptr, ptr %62, align 8, !tbaa !250
  %64 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %63, i64 0, i32 3
  store i32 %40, ptr %64, align 8, !tbaa !37
  tail call void @hypre_Free(ptr noundef %38) #33
  %65 = shl i32 %8, 3
  %66 = tail call ptr @hypre_MAlloc(i32 noundef %65) #33
  %67 = icmp sgt i32 %8, 0
  br i1 %67, label %68, label %108

68:                                               ; preds = %59
  %69 = sext i32 %40 to i64
  %70 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 %69
  %71 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %69
  %72 = icmp sgt i32 %25, 2
  %73 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 3
  %74 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 4
  %75 = zext i32 %8 to i64
  br label %76

76:                                               ; preds = %105, %68
  %77 = phi i64 [ 0, %68 ], [ %106, %105 ]
  %78 = getelementptr inbounds i32, ptr %10, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !7
  store i32 %79, ptr %70, align 4, !tbaa !7
  %80 = getelementptr inbounds i32, ptr %12, i64 %77
  %81 = load i32, ptr %80, align 4, !tbaa !7
  store i32 %81, ptr %71, align 4, !tbaa !7
  %82 = load i32, ptr %73, align 4, !tbaa !518
  %83 = getelementptr inbounds ptr, ptr %66, i64 %77
  br i1 %72, label %84, label %100

84:                                               ; preds = %76
  %85 = call ptr @hypre_SMGCreate(i32 noundef %82) #33
  store ptr %85, ptr %83, align 8, !tbaa !14
  %86 = call i32 @hypre_SMGSetNumPreRelax(ptr noundef %85, i32 noundef %16) #33
  %87 = load ptr, ptr %83, align 8, !tbaa !14
  %88 = call i32 @hypre_SMGSetNumPostRelax(ptr noundef %87, i32 noundef %18) #33
  %89 = load ptr, ptr %83, align 8, !tbaa !14
  %90 = call i32 @hypre_SMGSetBase(ptr noundef %89, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %91 = load ptr, ptr %83, align 8, !tbaa !14
  %92 = load i32, ptr %74, align 8, !tbaa !521
  %93 = call i32 @hypre_SMGSetMemoryUse(ptr noundef %91, i32 noundef %92) #33
  %94 = load ptr, ptr %83, align 8, !tbaa !14
  %95 = call i32 @hypre_SMGSetTol(ptr noundef %94, double noundef 0.000000e+00) #33
  %96 = load ptr, ptr %83, align 8, !tbaa !14
  %97 = call i32 @hypre_SMGSetMaxIter(ptr noundef %96, i32 noundef 1) #33
  %98 = load ptr, ptr %83, align 8, !tbaa !14
  %99 = call i32 @hypre_SMGSetup(ptr noundef %98, ptr noundef %61, ptr noundef %14, ptr noundef %3) #33
  br label %105

100:                                              ; preds = %76
  %101 = call ptr @hypre_CyclicReductionCreate(i32 noundef %82) #33
  store ptr %101, ptr %83, align 8, !tbaa !14
  %102 = call i32 @hypre_CyclicReductionSetBase(ptr noundef %101, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %103 = load ptr, ptr %83, align 8, !tbaa !14
  %104 = call i32 @hypre_CyclicReductionSetup(ptr noundef %103, ptr noundef %61, ptr noundef %14, ptr noundef %3) #33
  br label %105

105:                                              ; preds = %100, %84
  %106 = add nuw nsw i64 %77, 1
  %107 = icmp eq i64 %106, %75
  br i1 %107, label %108, label %76, !llvm.loop !552

108:                                              ; preds = %105, %59
  %109 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 23
  store ptr %61, ptr %109, align 8, !tbaa !537
  %110 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 26
  store ptr %66, ptr %110, align 8, !tbaa !539
  %111 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  store i32 0, ptr %111, align 8, !tbaa !517
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetTempVec(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 22
  %4 = load ptr, ptr %3, align 8, !tbaa !544
  %5 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %4) #33
  store i32 1, ptr %0, align 8, !tbaa !514
  %6 = tail call ptr @hypre_StructVectorRef(ptr noundef %1) #33
  store ptr %6, ptr %3, align 8, !tbaa !544
  store i32 1, ptr %0, align 8, !tbaa !514
  %7 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  store i32 1, ptr %7, align 4, !tbaa !516
  %8 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  store i32 1, ptr %8, align 8, !tbaa !517
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGRelaxSetMemoryUse(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 4
  store i32 %1, ptr %3, align 8, !tbaa !521
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGRelaxSetTol(ptr nocapture noundef writeonly %0, double noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 5
  store double %1, ptr %3, align 8, !tbaa !522
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGRelaxSetMaxIter(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 6
  store i32 %1, ptr %3, align 8, !tbaa !523
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGRelaxSetZeroGuess(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 7
  store i32 %1, ptr %3, align 4, !tbaa !524
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetNumSpaces(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 8
  store i32 %1, ptr %3, align 8, !tbaa !525
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 9
  %5 = load ptr, ptr %4, align 8, !tbaa !526
  tail call void @hypre_Free(ptr noundef %5) #33
  store ptr null, ptr %4, align 8, !tbaa !526
  %6 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 10
  %7 = load ptr, ptr %6, align 8, !tbaa !527
  tail call void @hypre_Free(ptr noundef %7) #33
  store ptr null, ptr %6, align 8, !tbaa !527
  %8 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 13
  %9 = load ptr, ptr %8, align 8, !tbaa !530
  tail call void @hypre_Free(ptr noundef %9) #33
  store ptr null, ptr %8, align 8, !tbaa !530
  %10 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 14
  %11 = load ptr, ptr %10, align 8, !tbaa !531
  tail call void @hypre_Free(ptr noundef %11) #33
  store ptr null, ptr %10, align 8, !tbaa !531
  %12 = shl i32 %1, 2
  %13 = tail call ptr @hypre_MAlloc(i32 noundef %12) #33
  store ptr %13, ptr %4, align 8, !tbaa !526
  %14 = tail call ptr @hypre_MAlloc(i32 noundef %12) #33
  store ptr %14, ptr %6, align 8, !tbaa !527
  %15 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 11
  store i32 0, ptr %15, align 8, !tbaa !528
  %16 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 12
  store i32 %1, ptr %16, align 4, !tbaa !529
  store ptr null, ptr %8, align 8, !tbaa !530
  %17 = tail call ptr @hypre_MAlloc(i32 noundef %12) #33
  store ptr %17, ptr %10, align 8, !tbaa !531
  %18 = icmp sgt i32 %1, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %2
  %20 = load ptr, ptr %4, align 8, !tbaa !526
  %21 = load ptr, ptr %6, align 8, !tbaa !527
  %22 = zext i32 %1 to i64
  br label %23

23:                                               ; preds = %23, %19
  %24 = phi i64 [ 0, %19 ], [ %29, %23 ]
  %25 = getelementptr inbounds i32, ptr %20, i64 %24
  store i32 0, ptr %25, align 4, !tbaa !7
  %26 = getelementptr inbounds i32, ptr %21, i64 %24
  store i32 1, ptr %26, align 4, !tbaa !7
  %27 = getelementptr inbounds i32, ptr %17, i64 %24
  %28 = trunc i64 %24 to i32
  store i32 %28, ptr %27, align 4, !tbaa !7
  %29 = add nuw nsw i64 %24, 1
  %30 = icmp eq i64 %29, %22
  br i1 %30, label %31, label %23, !llvm.loop !553

31:                                               ; preds = %23, %2
  store i32 1, ptr %0, align 8, !tbaa !514
  %32 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  store i32 1, ptr %32, align 4, !tbaa !516
  %33 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  store i32 1, ptr %33, align 8, !tbaa !517
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetNumPreSpaces(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 11
  store i32 %1, ptr %3, align 8, !tbaa !528
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 13
  %5 = load ptr, ptr %4, align 8, !tbaa !530
  tail call void @hypre_Free(ptr noundef %5) #33
  store ptr null, ptr %4, align 8, !tbaa !530
  %6 = shl i32 %1, 2
  %7 = tail call ptr @hypre_MAlloc(i32 noundef %6) #33
  store ptr %7, ptr %4, align 8, !tbaa !530
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = zext i32 %1 to i64
  %11 = shl nuw nsw i64 %10, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %7, i8 0, i64 %11, i1 false), !tbaa !7
  br label %12

12:                                               ; preds = %9, %2
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetNumRegSpaces(ptr nocapture noundef %0, i32 noundef %1) #0 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 12
  store i32 %1, ptr %3, align 4, !tbaa !529
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 14
  %5 = load ptr, ptr %4, align 8, !tbaa !531
  tail call void @hypre_Free(ptr noundef %5) #33
  store ptr null, ptr %4, align 8, !tbaa !531
  %6 = shl i32 %1, 2
  %7 = tail call ptr @hypre_MAlloc(i32 noundef %6) #33
  store ptr %7, ptr %4, align 8, !tbaa !531
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = zext i32 %1 to i64
  %11 = shl nuw nsw i64 %10, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %7, i8 0, i64 %11, i1 false), !tbaa !7
  br label %12

12:                                               ; preds = %9, %2
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_SMGRelaxSetSpace(ptr nocapture noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) #22 {
  %5 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 9
  %6 = load ptr, ptr %5, align 8, !tbaa !526
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  store i32 %2, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 10
  %10 = load ptr, ptr %9, align 8, !tbaa !527
  %11 = getelementptr inbounds i32, ptr %10, i64 %7
  store i32 %3, ptr %11, align 4, !tbaa !7
  store i32 1, ptr %0, align 8, !tbaa !514
  %12 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  store i32 1, ptr %12, align 4, !tbaa !516
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  store i32 1, ptr %13, align 8, !tbaa !517
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_SMGRelaxSetRegSpaceRank(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) #22 {
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 14
  %5 = load ptr, ptr %4, align 8, !tbaa !531
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i32, ptr %5, i64 %6
  store i32 %2, ptr %7, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGRelaxSetBase(ptr nocapture noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #0 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %12, %4 ]
  %6 = getelementptr inbounds i32, ptr %1, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 15, i64 %5
  store i32 %7, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds i32, ptr %2, i64 %5
  %10 = load i32, ptr %9, align 4, !tbaa !7
  %11 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 16, i64 %5
  store i32 %10, ptr %11, align 4, !tbaa !7
  %12 = add nuw nsw i64 %5, 1
  %13 = icmp eq i64 %12, 3
  br i1 %13, label %14, label %4, !llvm.loop !554

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 17
  %16 = load ptr, ptr %15, align 8, !tbaa !519
  %17 = icmp eq ptr %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef nonnull %16) #33
  store ptr null, ptr %15, align 8, !tbaa !519
  br label %20

20:                                               ; preds = %18, %14
  store i32 1, ptr %0, align 8, !tbaa !514
  %21 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  store i32 1, ptr %21, align 4, !tbaa !516
  %22 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  store i32 1, ptr %22, align 8, !tbaa !517
  ret i32 0
}

; Function Attrs: mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGRelaxSetNumPreRelax(ptr nocapture noundef writeonly %0, i32 noundef %1) #25 {
  %3 = tail call i32 @llvm.smax.i32(i32 %1, i32 1)
  %4 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 29
  store i32 %3, ptr %4, align 8, !tbaa !532
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_SMGRelaxSetNumPostRelax(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 30
  store i32 %1, ptr %3, align 4, !tbaa !533
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_SMGRelaxSetNewMatrixStencil(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #11 {
  %3 = load ptr, ptr %1, align 8, !tbaa !35
  %4 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %1, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !172
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %1, i64 0, i32 3
  %9 = load i32, ptr %8, align 8, !tbaa !37
  %10 = add nsw i32 %9, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.hypre_SMGRelaxData, ptr %0, i64 0, i32 2
  %14 = zext i32 %5 to i64
  br label %15

15:                                               ; preds = %22, %7
  %16 = phi i64 [ 0, %7 ], [ %23, %22 ]
  %17 = getelementptr inbounds [3 x i32], ptr %3, i64 %16, i64 %11
  %18 = load i32, ptr %17, align 4, !tbaa !7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  store i32 1, ptr %12, align 4, !tbaa !516
  br label %22

21:                                               ; preds = %15
  store i32 1, ptr %13, align 8, !tbaa !517
  br label %22

22:                                               ; preds = %21, %20
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp eq i64 %23, %14
  br i1 %24, label %25, label %15, !llvm.loop !555

25:                                               ; preds = %22, %2
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMGResidualCreate() #0 {
  %1 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 80) #33
  %2 = tail call i32 @hypre_InitializeTiming(ptr noundef nonnull @.str.129) #33
  %3 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %1, i64 0, i32 8
  store i32 %2, ptr %3, align 8, !tbaa !556
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, ptr %1, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %1, i64 0, i32 1, i64 1
  store i32 1, ptr %4, align 4, !tbaa !7
  %5 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %1, i64 0, i32 1, i64 2
  store i32 1, ptr %5, align 4, !tbaa !7
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGResidualSetup(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #0 {
  %6 = alloca [3 x i32], align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #34
  %15 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !15
  %17 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !250
  store i32 1, ptr %6, align 4, !tbaa !7
  %19 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  store i32 1, ptr %19, align 4, !tbaa !7
  %20 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 1, ptr %20, align 4, !tbaa !7
  %21 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %16, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !20
  %23 = tail call ptr @hypre_BoxArrayDuplicate(ptr noundef %22) #33
  %24 = tail call i32 @hypre_ProjectBoxArray(ptr noundef %23, ptr noundef %0, ptr noundef nonnull %14) #33
  %25 = call i32 @hypre_CreateComputeInfo(ptr noundef %16, ptr noundef %18, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12) #33
  %26 = load ptr, ptr %11, align 8, !tbaa !14
  %27 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %26, ptr noundef %0, ptr noundef nonnull %14) #33
  %28 = load ptr, ptr %12, align 8, !tbaa !14
  %29 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %28, ptr noundef %0, ptr noundef nonnull %14) #33
  %30 = load ptr, ptr %7, align 8, !tbaa !14
  %31 = load ptr, ptr %8, align 8, !tbaa !14
  %32 = load ptr, ptr %9, align 8, !tbaa !14
  %33 = load ptr, ptr %10, align 8, !tbaa !14
  %34 = load ptr, ptr %11, align 8, !tbaa !14
  %35 = load ptr, ptr %12, align 8, !tbaa !14
  %36 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !25
  %38 = call i32 @hypre_ComputePkgCreate(ptr noundef %30, ptr noundef %31, ptr noundef nonnull %6, ptr noundef nonnull %6, ptr noundef %32, ptr noundef %33, ptr noundef %34, ptr noundef %35, ptr noundef nonnull %14, ptr noundef %16, ptr noundef %37, i32 noundef 1, ptr noundef nonnull %13) #33
  %39 = call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  %40 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 2
  store ptr %39, ptr %40, align 8, !tbaa !558
  %41 = call ptr @hypre_StructVectorRef(ptr noundef %2) #33
  %42 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 3
  store ptr %41, ptr %42, align 8, !tbaa !559
  %43 = call ptr @hypre_StructVectorRef(ptr noundef %3) #33
  %44 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 4
  store ptr %43, ptr %44, align 8, !tbaa !560
  %45 = call ptr @hypre_StructVectorRef(ptr noundef %4) #33
  %46 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 5
  store ptr %45, ptr %46, align 8, !tbaa !561
  %47 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 6
  store ptr %23, ptr %47, align 8, !tbaa !562
  %48 = load ptr, ptr %13, align 8, !tbaa !14
  %49 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 7
  store ptr %48, ptr %49, align 8, !tbaa !563
  %50 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 13
  %51 = load i32, ptr %50, align 8, !tbaa !564
  %52 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 8
  %53 = load i32, ptr %52, align 8, !tbaa !254
  %54 = add nsw i32 %53, %51
  %55 = load i32, ptr %14, align 4, !tbaa !7
  %56 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1, i64 1
  %57 = load i32, ptr %56, align 4, !tbaa !7
  %58 = mul nsw i32 %57, %55
  %59 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1, i64 2
  %60 = load i32, ptr %59, align 4, !tbaa !7
  %61 = mul nsw i32 %58, %60
  %62 = sdiv i32 %54, %61
  %63 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 9
  store i32 %62, ptr %63, align 4, !tbaa !565
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGResidual(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) #0 {
  %6 = alloca ptr, align 8
  %7 = alloca [3 x i32], align 4
  %8 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 6
  %10 = load ptr, ptr %9, align 8, !tbaa !562
  %11 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 7
  %12 = load ptr, ptr %11, align 8, !tbaa !563
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  %13 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 8
  %14 = load i32, ptr %13, align 8, !tbaa !556
  %15 = tail call i32 @hypre_BeginTiming(i32 noundef %14) #33
  %16 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !250
  %18 = load ptr, ptr %17, align 8, !tbaa !35
  %19 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %17, i64 0, i32 1
  %20 = load i32, ptr %19, align 8, !tbaa !172
  %21 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %12, i64 0, i32 2
  %22 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %23 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %12, i64 0, i32 1
  %24 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %10, i64 0, i32 1
  %25 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %26 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %4, i64 0, i32 2
  %27 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %28 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %29 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %4, i64 0, i32 3
  %30 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %4, i64 0, i32 6
  %31 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1, i64 1
  %32 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1, i64 2
  %33 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %34 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %35 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 5
  %36 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %37 = icmp sgt i32 %20, 0
  %38 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 6
  %39 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 9
  %40 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %41 = zext i32 %20 to i64
  br label %42

42:                                               ; preds = %461, %5
  %43 = phi i1 [ true, %5 ], [ false, %461 ]
  br i1 %43, label %44, label %198

44:                                               ; preds = %42
  %45 = load ptr, ptr %22, align 8, !tbaa !27
  %46 = call i32 @hypre_InitializeIndtComputations(ptr noundef %12, ptr noundef %45, ptr noundef nonnull %6) #33
  %47 = load ptr, ptr %23, align 8, !tbaa !210
  %48 = load i32, ptr %24, align 8, !tbaa !21
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %202

50:                                               ; preds = %193, %44
  %51 = phi i64 [ %194, %193 ], [ 0, %44 ]
  %52 = load ptr, ptr %10, align 8, !tbaa !23
  %53 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 %51
  %54 = load ptr, ptr %25, align 8, !tbaa !25
  %55 = load ptr, ptr %54, align 8, !tbaa !23
  %56 = load ptr, ptr %26, align 8, !tbaa !25
  %57 = load ptr, ptr %56, align 8, !tbaa !23
  %58 = load ptr, ptr %27, align 8, !tbaa !27
  %59 = load ptr, ptr %28, align 8, !tbaa !28
  %60 = getelementptr inbounds i32, ptr %59, i64 %51
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds double, ptr %58, i64 %62
  %64 = load ptr, ptr %29, align 8, !tbaa !27
  %65 = load ptr, ptr %30, align 8, !tbaa !28
  %66 = getelementptr inbounds i32, ptr %65, i64 %51
  %67 = load i32, ptr %66, align 4, !tbaa !7
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds double, ptr %64, i64 %68
  %70 = call i32 @hypre_BoxGetStrideSize(ptr noundef %53, ptr noundef nonnull %8, ptr noundef nonnull %7) #33
  %71 = load i32, ptr %8, align 4, !tbaa !7
  %72 = load i32, ptr %7, align 4, !tbaa !7
  %73 = load i32, ptr %33, align 4, !tbaa !7
  %74 = load i32, ptr %34, align 4, !tbaa !7
  %75 = call i32 @llvm.smax.i32(i32 %73, i32 %72)
  %76 = call i32 @llvm.smax.i32(i32 %74, i32 %75)
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %193

78:                                               ; preds = %50
  %79 = getelementptr inbounds %struct.hypre_Box_struct, ptr %57, i64 %51, i32 1
  %80 = load i32, ptr %79, align 4, !tbaa !7
  %81 = getelementptr inbounds %struct.hypre_Box_struct, ptr %57, i64 %51
  %82 = load i32, ptr %81, align 4, !tbaa !7
  %83 = sub nsw i32 %80, %82
  %84 = icmp slt i32 %83, 0
  %85 = add nsw i32 %83, 1
  %86 = select i1 %84, i32 0, i32 %85
  %87 = getelementptr inbounds %struct.hypre_Box_struct, ptr %57, i64 %51, i32 1, i64 1
  %88 = load i32, ptr %87, align 4, !tbaa !7
  %89 = getelementptr inbounds [3 x i32], ptr %81, i64 0, i64 1
  %90 = load i32, ptr %89, align 4, !tbaa !7
  %91 = sub nsw i32 %88, %90
  %92 = icmp slt i32 %91, 0
  %93 = add nsw i32 %91, 1
  %94 = select i1 %92, i32 0, i32 %93
  %95 = mul i32 %86, %94
  %96 = load i32, ptr %32, align 4, !tbaa !7
  %97 = mul i32 %95, %96
  %98 = load i32, ptr %31, align 4, !tbaa !7
  %99 = mul nsw i32 %86, %98
  %100 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %51, i32 1
  %101 = load i32, ptr %100, align 4, !tbaa !7
  %102 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %51
  %103 = load i32, ptr %102, align 4, !tbaa !7
  %104 = sub nsw i32 %101, %103
  %105 = icmp slt i32 %104, 0
  %106 = add nsw i32 %104, 1
  %107 = select i1 %105, i32 0, i32 %106
  %108 = getelementptr inbounds %struct.hypre_Box_struct, ptr %55, i64 %51, i32 1, i64 1
  %109 = load i32, ptr %108, align 4, !tbaa !7
  %110 = getelementptr inbounds [3 x i32], ptr %102, i64 0, i64 1
  %111 = load i32, ptr %110, align 4, !tbaa !7
  %112 = sub nsw i32 %109, %111
  %113 = icmp slt i32 %112, 0
  %114 = add nsw i32 %112, 1
  %115 = select i1 %113, i32 0, i32 %114
  %116 = mul i32 %107, %115
  %117 = mul i32 %116, %96
  %118 = mul nsw i32 %98, %107
  %119 = icmp sgt i32 %74, 0
  %120 = icmp sgt i32 %73, 0
  %121 = icmp sgt i32 %72, 0
  %122 = mul i32 %71, %72
  %123 = sub i32 %118, %122
  %124 = sub i32 %99, %122
  %125 = mul nsw i32 %73, %118
  %126 = sub i32 %117, %125
  %127 = mul nsw i32 %73, %99
  %128 = sub i32 %97, %127
  br i1 %119, label %129, label %193

129:                                              ; preds = %78
  %130 = load i32, ptr %53, align 4, !tbaa !7
  %131 = sub i32 %130, %103
  %132 = getelementptr inbounds i32, ptr %53, i64 1
  %133 = load i32, ptr %132, align 4, !tbaa !7
  %134 = sub i32 %133, %111
  %135 = getelementptr inbounds i32, ptr %53, i64 2
  %136 = load i32, ptr %135, align 4, !tbaa !7
  %137 = getelementptr inbounds [3 x i32], ptr %102, i64 0, i64 2
  %138 = load i32, ptr %137, align 4, !tbaa !7
  %139 = sub nsw i32 %136, %138
  %140 = mul nsw i32 %115, %139
  %141 = add nsw i32 %134, %140
  %142 = mul nsw i32 %141, %107
  %143 = add nsw i32 %131, %142
  %144 = sub i32 %130, %82
  %145 = sub i32 %133, %90
  %146 = getelementptr inbounds [3 x i32], ptr %81, i64 0, i64 2
  %147 = load i32, ptr %146, align 4, !tbaa !7
  %148 = sub nsw i32 %136, %147
  %149 = mul nsw i32 %94, %148
  %150 = add nsw i32 %145, %149
  %151 = mul nsw i32 %150, %86
  %152 = add nsw i32 %144, %151
  %153 = sext i32 %71 to i64
  br label %154

154:                                              ; preds = %186, %129
  %155 = phi i32 [ %189, %186 ], [ %143, %129 ]
  %156 = phi i32 [ %190, %186 ], [ %152, %129 ]
  %157 = phi i32 [ %191, %186 ], [ 0, %129 ]
  br i1 %120, label %158, label %186

158:                                              ; preds = %179, %154
  %159 = phi i32 [ %182, %179 ], [ %155, %154 ]
  %160 = phi i32 [ %183, %179 ], [ %156, %154 ]
  %161 = phi i32 [ %184, %179 ], [ 0, %154 ]
  br i1 %121, label %162, label %179

162:                                              ; preds = %158
  %163 = sext i32 %159 to i64
  %164 = sext i32 %160 to i64
  br label %165

165:                                              ; preds = %165, %162
  %166 = phi i64 [ %164, %162 ], [ %173, %165 ]
  %167 = phi i64 [ %163, %162 ], [ %172, %165 ]
  %168 = phi i32 [ 0, %162 ], [ %174, %165 ]
  %169 = getelementptr inbounds double, ptr %63, i64 %167
  %170 = load double, ptr %169, align 8, !tbaa !29
  %171 = getelementptr inbounds double, ptr %69, i64 %166
  store double %170, ptr %171, align 8, !tbaa !29
  %172 = add i64 %167, %153
  %173 = add i64 %166, %153
  %174 = add nuw nsw i32 %168, 1
  %175 = icmp eq i32 %174, %72
  br i1 %175, label %176, label %165, !llvm.loop !566

176:                                              ; preds = %165
  %.lcssa1 = phi i64 [ %172, %165 ]
  %.lcssa = phi i64 [ %173, %165 ]
  %177 = trunc i64 %.lcssa to i32
  %178 = trunc i64 %.lcssa1 to i32
  br label %179

179:                                              ; preds = %176, %158
  %180 = phi i32 [ %160, %158 ], [ %177, %176 ]
  %181 = phi i32 [ %159, %158 ], [ %178, %176 ]
  %182 = add nsw i32 %123, %181
  %183 = add nsw i32 %124, %180
  %184 = add nuw nsw i32 %161, 1
  %185 = icmp eq i32 %184, %73
  br i1 %185, label %186, label %158, !llvm.loop !567

186:                                              ; preds = %179, %154
  %187 = phi i32 [ %156, %154 ], [ %183, %179 ]
  %188 = phi i32 [ %155, %154 ], [ %182, %179 ]
  %189 = add nsw i32 %126, %188
  %190 = add nsw i32 %128, %187
  %191 = add nuw nsw i32 %157, 1
  %192 = icmp eq i32 %191, %74
  br i1 %192, label %193, label %154, !llvm.loop !568

193:                                              ; preds = %186, %78, %50
  %194 = add nuw nsw i64 %51, 1
  %195 = load i32, ptr %24, align 8, !tbaa !21
  %196 = sext i32 %195 to i64
  %197 = icmp slt i64 %194, %196
  br i1 %197, label %50, label %202, !llvm.loop !569

198:                                              ; preds = %42
  %199 = load ptr, ptr %6, align 8, !tbaa !14
  %200 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %199) #33
  %201 = load ptr, ptr %21, align 8, !tbaa !211
  br label %202

202:                                              ; preds = %198, %193, %44
  %203 = phi ptr [ %201, %198 ], [ %47, %44 ], [ %47, %193 ]
  %204 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %203, i64 0, i32 1
  %205 = load i32, ptr %204, align 8, !tbaa !45
  %206 = icmp sgt i32 %205, 0
  br i1 %206, label %207, label %461

207:                                              ; preds = %456, %202
  %208 = phi i32 [ %457, %456 ], [ %205, %202 ]
  %209 = phi i64 [ %458, %456 ], [ 0, %202 ]
  %210 = load ptr, ptr %203, align 8, !tbaa !42
  %211 = getelementptr inbounds ptr, ptr %210, i64 %209
  %212 = load ptr, ptr %211, align 8, !tbaa !14
  %213 = load ptr, ptr %35, align 8, !tbaa !24
  %214 = load ptr, ptr %213, align 8, !tbaa !23
  %215 = getelementptr inbounds %struct.hypre_Box_struct, ptr %214, i64 %209
  %216 = load ptr, ptr %36, align 8, !tbaa !25
  %217 = load ptr, ptr %216, align 8, !tbaa !23
  %218 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %209
  %219 = load ptr, ptr %26, align 8, !tbaa !25
  %220 = load ptr, ptr %219, align 8, !tbaa !23
  %221 = getelementptr inbounds %struct.hypre_Box_struct, ptr %220, i64 %209
  %222 = load ptr, ptr %29, align 8, !tbaa !27
  %223 = load ptr, ptr %30, align 8, !tbaa !28
  %224 = getelementptr inbounds i32, ptr %223, i64 %209
  %225 = load i32, ptr %224, align 4, !tbaa !7
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds double, ptr %222, i64 %226
  %228 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %212, i64 0, i32 1
  %229 = load i32, ptr %228, align 8, !tbaa !21
  %230 = icmp sgt i32 %229, 0
  br i1 %230, label %231, label %456

231:                                              ; preds = %207
  %232 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %209, i32 1
  %233 = getelementptr inbounds %struct.hypre_Box_struct, ptr %217, i64 %209, i32 1, i64 1
  %234 = getelementptr inbounds [3 x i32], ptr %218, i64 0, i64 1
  %235 = getelementptr inbounds [3 x i32], ptr %215, i64 0, i64 1
  %236 = getelementptr inbounds [3 x i32], ptr %215, i64 0, i64 2
  %237 = getelementptr inbounds %struct.hypre_Box_struct, ptr %214, i64 %209, i32 1
  %238 = getelementptr inbounds %struct.hypre_Box_struct, ptr %214, i64 %209, i32 1, i64 1
  %239 = getelementptr inbounds [3 x i32], ptr %218, i64 0, i64 2
  %240 = getelementptr inbounds [3 x i32], ptr %221, i64 0, i64 1
  %241 = getelementptr inbounds [3 x i32], ptr %221, i64 0, i64 2
  %242 = getelementptr inbounds %struct.hypre_Box_struct, ptr %220, i64 %209, i32 1
  %243 = getelementptr inbounds %struct.hypre_Box_struct, ptr %220, i64 %209, i32 1, i64 1
  br label %244

244:                                              ; preds = %449, %231
  %245 = phi i32 [ %229, %231 ], [ %450, %449 ]
  %246 = phi i64 [ 0, %231 ], [ %451, %449 ]
  %247 = load ptr, ptr %212, align 8, !tbaa !23
  %248 = getelementptr inbounds %struct.hypre_Box_struct, ptr %247, i64 %246
  br i1 %37, label %249, label %449

249:                                              ; preds = %244
  %250 = getelementptr inbounds i32, ptr %248, i64 1
  %251 = getelementptr inbounds i32, ptr %248, i64 2
  br label %252

252:                                              ; preds = %444, %249
  %253 = phi i64 [ 0, %249 ], [ %445, %444 ]
  %254 = load ptr, ptr %38, align 8, !tbaa !340
  %255 = load ptr, ptr %39, align 8, !tbaa !341
  %256 = getelementptr inbounds ptr, ptr %255, i64 %209
  %257 = load ptr, ptr %256, align 8, !tbaa !14
  %258 = getelementptr inbounds i32, ptr %257, i64 %253
  %259 = load i32, ptr %258, align 4, !tbaa !7
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds double, ptr %254, i64 %260
  %262 = load ptr, ptr %22, align 8, !tbaa !27
  %263 = load ptr, ptr %40, align 8, !tbaa !28
  %264 = getelementptr inbounds i32, ptr %263, i64 %209
  %265 = load i32, ptr %264, align 4, !tbaa !7
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds double, ptr %262, i64 %266
  %268 = getelementptr inbounds [3 x i32], ptr %18, i64 %253
  %269 = load i32, ptr %268, align 4, !tbaa !7
  %270 = getelementptr inbounds [3 x i32], ptr %18, i64 %253, i64 1
  %271 = load i32, ptr %270, align 4, !tbaa !7
  %272 = getelementptr inbounds [3 x i32], ptr %18, i64 %253, i64 2
  %273 = load i32, ptr %272, align 4, !tbaa !7
  %274 = load i32, ptr %233, align 4, !tbaa !7
  %275 = load i32, ptr %234, align 4, !tbaa !7
  %276 = sub nsw i32 %274, %275
  %277 = add nsw i32 %276, 1
  %278 = icmp slt i32 %276, 0
  %279 = select i1 %278, i32 0, i32 %277
  %280 = mul nsw i32 %279, %273
  %281 = add nsw i32 %280, %271
  %282 = load i32, ptr %232, align 4, !tbaa !7
  %283 = load i32, ptr %218, align 4, !tbaa !7
  %284 = sub nsw i32 %282, %283
  %285 = add nsw i32 %284, 1
  %286 = icmp slt i32 %284, 0
  %287 = select i1 %286, i32 0, i32 %285
  %288 = mul nsw i32 %281, %287
  %289 = add nsw i32 %288, %269
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds double, ptr %267, i64 %290
  %292 = call i32 @hypre_BoxGetStrideSize(ptr noundef %248, ptr noundef nonnull %8, ptr noundef nonnull %7) #33
  %293 = load i32, ptr %8, align 4, !tbaa !7
  %294 = load i32, ptr %7, align 4, !tbaa !7
  %295 = load i32, ptr %33, align 4, !tbaa !7
  %296 = load i32, ptr %34, align 4, !tbaa !7
  %297 = call i32 @llvm.smax.i32(i32 %295, i32 %294)
  %298 = call i32 @llvm.smax.i32(i32 %296, i32 %297)
  %299 = icmp sgt i32 %298, 0
  br i1 %299, label %300, label %444

300:                                              ; preds = %252
  %301 = load i32, ptr %242, align 4, !tbaa !7
  %302 = load i32, ptr %221, align 4, !tbaa !7
  %303 = sub nsw i32 %301, %302
  %304 = icmp slt i32 %303, 0
  %305 = add nsw i32 %303, 1
  %306 = select i1 %304, i32 0, i32 %305
  %307 = load i32, ptr %243, align 4, !tbaa !7
  %308 = load i32, ptr %240, align 4, !tbaa !7
  %309 = sub nsw i32 %307, %308
  %310 = icmp slt i32 %309, 0
  %311 = add nsw i32 %309, 1
  %312 = select i1 %310, i32 0, i32 %311
  %313 = mul i32 %306, %312
  %314 = load i32, ptr %32, align 4, !tbaa !7
  %315 = mul i32 %313, %314
  %316 = load i32, ptr %31, align 4, !tbaa !7
  %317 = mul nsw i32 %306, %316
  %318 = load i32, ptr %232, align 4, !tbaa !7
  %319 = load i32, ptr %218, align 4, !tbaa !7
  %320 = sub nsw i32 %318, %319
  %321 = icmp slt i32 %320, 0
  %322 = add nsw i32 %320, 1
  %323 = select i1 %321, i32 0, i32 %322
  %324 = load i32, ptr %233, align 4, !tbaa !7
  %325 = load i32, ptr %234, align 4, !tbaa !7
  %326 = sub nsw i32 %324, %325
  %327 = icmp slt i32 %326, 0
  %328 = add nsw i32 %326, 1
  %329 = select i1 %327, i32 0, i32 %328
  %330 = mul i32 %323, %329
  %331 = mul i32 %330, %314
  %332 = mul nsw i32 %316, %323
  %333 = load i32, ptr %237, align 4, !tbaa !7
  %334 = load i32, ptr %215, align 4, !tbaa !7
  %335 = sub nsw i32 %333, %334
  %336 = icmp slt i32 %335, 0
  %337 = add nsw i32 %335, 1
  %338 = select i1 %336, i32 0, i32 %337
  %339 = load i32, ptr %238, align 4, !tbaa !7
  %340 = load i32, ptr %235, align 4, !tbaa !7
  %341 = sub nsw i32 %339, %340
  %342 = icmp slt i32 %341, 0
  %343 = add nsw i32 %341, 1
  %344 = select i1 %342, i32 0, i32 %343
  %345 = mul i32 %338, %344
  %346 = mul i32 %345, %314
  %347 = mul nsw i32 %316, %338
  %348 = icmp sgt i32 %296, 0
  %349 = icmp sgt i32 %295, 0
  %350 = icmp sgt i32 %294, 0
  %351 = mul i32 %293, %294
  %352 = sub i32 %347, %351
  %353 = sub i32 %332, %351
  %354 = sub i32 %317, %351
  %355 = mul nsw i32 %295, %347
  %356 = sub i32 %346, %355
  %357 = mul nsw i32 %295, %332
  %358 = sub i32 %331, %357
  %359 = mul nsw i32 %295, %317
  %360 = sub i32 %315, %359
  br i1 %348, label %361, label %444

361:                                              ; preds = %300
  %362 = load i32, ptr %248, align 4, !tbaa !7
  %363 = sub i32 %362, %334
  %364 = load i32, ptr %250, align 4, !tbaa !7
  %365 = sub i32 %364, %340
  %366 = load i32, ptr %251, align 4, !tbaa !7
  %367 = load i32, ptr %236, align 4, !tbaa !7
  %368 = sub nsw i32 %366, %367
  %369 = mul nsw i32 %344, %368
  %370 = add nsw i32 %365, %369
  %371 = mul nsw i32 %370, %338
  %372 = add nsw i32 %363, %371
  %373 = sub i32 %362, %319
  %374 = sub i32 %364, %325
  %375 = load i32, ptr %239, align 4, !tbaa !7
  %376 = sub nsw i32 %366, %375
  %377 = mul nsw i32 %329, %376
  %378 = add nsw i32 %374, %377
  %379 = mul nsw i32 %378, %323
  %380 = add nsw i32 %373, %379
  %381 = sub i32 %362, %302
  %382 = sub i32 %364, %308
  %383 = load i32, ptr %241, align 4, !tbaa !7
  %384 = sub nsw i32 %366, %383
  %385 = mul nsw i32 %312, %384
  %386 = add nsw i32 %382, %385
  %387 = mul nsw i32 %386, %306
  %388 = add nsw i32 %381, %387
  %389 = sext i32 %293 to i64
  br label %390

390:                                              ; preds = %435, %361
  %391 = phi i32 [ %439, %435 ], [ %372, %361 ]
  %392 = phi i32 [ %440, %435 ], [ %380, %361 ]
  %393 = phi i32 [ %441, %435 ], [ %388, %361 ]
  %394 = phi i32 [ %442, %435 ], [ 0, %361 ]
  br i1 %349, label %395, label %435

395:                                              ; preds = %426, %390
  %396 = phi i32 [ %430, %426 ], [ %391, %390 ]
  %397 = phi i32 [ %431, %426 ], [ %392, %390 ]
  %398 = phi i32 [ %432, %426 ], [ %393, %390 ]
  %399 = phi i32 [ %433, %426 ], [ 0, %390 ]
  br i1 %350, label %400, label %426

400:                                              ; preds = %395
  %401 = sext i32 %396 to i64
  %402 = sext i32 %397 to i64
  %403 = sext i32 %398 to i64
  br label %404

404:                                              ; preds = %404, %400
  %405 = phi i64 [ %403, %400 ], [ %419, %404 ]
  %406 = phi i64 [ %402, %400 ], [ %418, %404 ]
  %407 = phi i64 [ %401, %400 ], [ %417, %404 ]
  %408 = phi i32 [ 0, %400 ], [ %420, %404 ]
  %409 = getelementptr inbounds double, ptr %261, i64 %407
  %410 = load double, ptr %409, align 8, !tbaa !29
  %411 = getelementptr inbounds double, ptr %291, i64 %406
  %412 = load double, ptr %411, align 8, !tbaa !29
  %413 = getelementptr inbounds double, ptr %227, i64 %405
  %414 = load double, ptr %413, align 8, !tbaa !29
  %415 = fneg double %410
  %416 = call double @llvm.fmuladd.f64(double %415, double %412, double %414)
  store double %416, ptr %413, align 8, !tbaa !29
  %417 = add i64 %407, %389
  %418 = add i64 %406, %389
  %419 = add i64 %405, %389
  %420 = add nuw nsw i32 %408, 1
  %421 = icmp eq i32 %420, %294
  br i1 %421, label %422, label %404, !llvm.loop !570

422:                                              ; preds = %404
  %.lcssa4 = phi i64 [ %417, %404 ]
  %.lcssa3 = phi i64 [ %418, %404 ]
  %.lcssa2 = phi i64 [ %419, %404 ]
  %423 = trunc i64 %.lcssa2 to i32
  %424 = trunc i64 %.lcssa3 to i32
  %425 = trunc i64 %.lcssa4 to i32
  br label %426

426:                                              ; preds = %422, %395
  %427 = phi i32 [ %398, %395 ], [ %423, %422 ]
  %428 = phi i32 [ %397, %395 ], [ %424, %422 ]
  %429 = phi i32 [ %396, %395 ], [ %425, %422 ]
  %430 = add nsw i32 %352, %429
  %431 = add nsw i32 %353, %428
  %432 = add nsw i32 %354, %427
  %433 = add nuw nsw i32 %399, 1
  %434 = icmp eq i32 %433, %295
  br i1 %434, label %435, label %395, !llvm.loop !571

435:                                              ; preds = %426, %390
  %436 = phi i32 [ %393, %390 ], [ %432, %426 ]
  %437 = phi i32 [ %392, %390 ], [ %431, %426 ]
  %438 = phi i32 [ %391, %390 ], [ %430, %426 ]
  %439 = add nsw i32 %356, %438
  %440 = add nsw i32 %358, %437
  %441 = add nsw i32 %360, %436
  %442 = add nuw nsw i32 %394, 1
  %443 = icmp eq i32 %442, %296
  br i1 %443, label %444, label %390, !llvm.loop !572

444:                                              ; preds = %435, %300, %252
  %445 = add nuw nsw i64 %253, 1
  %446 = icmp eq i64 %445, %41
  br i1 %446, label %447, label %252, !llvm.loop !573

447:                                              ; preds = %444
  %448 = load i32, ptr %228, align 8, !tbaa !21
  br label %449

449:                                              ; preds = %447, %244
  %450 = phi i32 [ %245, %244 ], [ %448, %447 ]
  %451 = add nuw nsw i64 %246, 1
  %452 = sext i32 %450 to i64
  %453 = icmp slt i64 %451, %452
  br i1 %453, label %244, label %454, !llvm.loop !574

454:                                              ; preds = %449
  %455 = load i32, ptr %204, align 8, !tbaa !45
  br label %456

456:                                              ; preds = %454, %207
  %457 = phi i32 [ %208, %207 ], [ %455, %454 ]
  %458 = add nuw nsw i64 %209, 1
  %459 = sext i32 %457 to i64
  %460 = icmp slt i64 %458, %459
  br i1 %460, label %207, label %461, !llvm.loop !575

461:                                              ; preds = %456, %202
  br i1 %43, label %42, label %462, !llvm.loop !576

462:                                              ; preds = %461
  %463 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 9
  %464 = load i32, ptr %463, align 4, !tbaa !565
  %465 = call i32 @hypre_IncFLOPCount(i32 noundef %464) #33
  %466 = load i32, ptr %13, align 8, !tbaa !556
  %467 = call i32 @hypre_EndTiming(i32 noundef %466) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #34
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_SMGResidualSetBase(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #8 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %12, %4 ]
  %6 = getelementptr inbounds i32, ptr %1, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 %5
  store i32 %7, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds i32, ptr %2, i64 %5
  %10 = load i32, ptr %9, align 4, !tbaa !7
  %11 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 1, i64 %5
  store i32 %10, ptr %11, align 4, !tbaa !7
  %12 = add nuw nsw i64 %5, 1
  %13 = icmp eq i64 %12, 3
  br i1 %13, label %14, label %4, !llvm.loop !577

14:                                               ; preds = %4
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGResidualDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %25, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !558
  %6 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %5) #33
  %7 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !559
  %9 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %8) #33
  %10 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !560
  %12 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %11) #33
  %13 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !561
  %15 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %14) #33
  %16 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %16, align 8, !tbaa !562
  %18 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %17) #33
  %19 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8, !tbaa !563
  %21 = tail call i32 @hypre_ComputePkgDestroy(ptr noundef %20) #33
  %22 = getelementptr inbounds %struct.hypre_SMGResidualData, ptr %0, i64 0, i32 8
  %23 = load i32, ptr %22, align 8, !tbaa !556
  %24 = tail call i32 @hypre_FinalizeTiming(i32 noundef %23) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %25

25:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGSetup(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = alloca [3 x i32], align 8
  %6 = alloca [3 x i32], align 8
  %7 = alloca [3 x i32], align 8
  %8 = alloca [3 x i32], align 4
  %9 = alloca [3 x i32], align 8
  %10 = alloca [6 x i32], align 16
  %11 = alloca [6 x i32], align 16
  %12 = load i32, ptr %0, align 8, !tbaa !360
  %13 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 11
  %14 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 12
  %15 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 8
  %16 = load i32, ptr %15, align 4, !tbaa !388
  %17 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 9
  %18 = load i32, ptr %17, align 8, !tbaa !389
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #34
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %10, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %11) #34
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %11, i8 0, i64 24, i1 false)
  %19 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !250
  %21 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %20, i64 0, i32 3
  %22 = load i32, ptr %21, align 8, !tbaa !37
  %23 = add nsw i32 %22, -1
  %24 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 10
  store i32 %23, ptr %24, align 4, !tbaa !578
  %25 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !15
  %27 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %26, i64 0, i32 6
  %28 = load ptr, ptr %27, align 8, !tbaa !97
  %29 = tail call ptr @hypre_BoxDuplicate(ptr noundef %28) #33
  %30 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 0, i32 1
  %31 = sext i32 %23 to i64
  %32 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 0, i32 1, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !7
  %34 = getelementptr inbounds [3 x i32], ptr %29, i64 0, i64 %31
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = sub nsw i32 %33, %35
  %37 = add nsw i32 %36, 1
  %38 = icmp slt i32 %36, 0
  %39 = select i1 %38, i32 0, i32 %37
  %40 = tail call i32 @hypre_Log2(i32 noundef %39) #33
  %41 = add nsw i32 %40, 2
  %42 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 6
  %43 = load i32, ptr %42, align 4, !tbaa !579
  %44 = icmp sgt i32 %43, 0
  %45 = tail call i32 @llvm.smin.i32(i32 %41, i32 %43)
  %46 = select i1 %44, i32 %45, i32 %41
  store i32 %46, ptr %42, align 4, !tbaa !579
  %47 = shl i32 %46, 3
  %48 = tail call ptr @hypre_MAlloc(i32 noundef %47) #33
  %49 = tail call ptr @hypre_MAlloc(i32 noundef %47) #33
  store ptr null, ptr %49, align 8, !tbaa !14
  %50 = tail call i32 @hypre_StructGridRef(ptr noundef %26, ptr noundef %48) #33
  %51 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 %31
  %52 = add nsw i32 %46, -1
  %53 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %54 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %55 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 1
  %56 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 2
  %57 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 11, i64 1
  %58 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 11, i64 2
  %59 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 12, i64 1
  %60 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 12, i64 2
  %61 = zext i32 %52 to i64
  br label %62

62:                                               ; preds = %81, %4
  %63 = phi i32 [ %93, %81 ], [ 0, %4 ]
  %64 = phi i64 [ %87, %81 ], [ 0, %4 ]
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %62
  store i32 0, ptr %7, align 8, !tbaa !7
  store i32 0, ptr %53, align 4, !tbaa !7
  store i32 0, ptr %54, align 8, !tbaa !7
  store i32 1, ptr %9, align 8, !tbaa !7
  store i32 1, ptr %55, align 4, !tbaa !7
  br label %72

67:                                               ; preds = %62
  %68 = load <2 x i32>, ptr %13, align 4, !tbaa !7
  store <2 x i32> %68, ptr %7, align 8, !tbaa !7
  %69 = load i32, ptr %58, align 4, !tbaa !7
  store i32 %69, ptr %54, align 8, !tbaa !7
  %70 = load <2 x i32>, ptr %14, align 4, !tbaa !7
  store <2 x i32> %70, ptr %9, align 8, !tbaa !7
  %71 = load i32, ptr %60, align 4, !tbaa !7
  br label %72

72:                                               ; preds = %67, %66
  %73 = phi i32 [ 1, %66 ], [ %71, %67 ]
  store i32 %73, ptr %56, align 8, !tbaa !7
  %74 = load i32, ptr %51, align 4, !tbaa !7
  %75 = shl nsw i32 %74, 1
  store i32 %75, ptr %51, align 4, !tbaa !7
  %76 = load i32, ptr %34, align 4, !tbaa !7
  %77 = load i32, ptr %32, align 4, !tbaa !7
  %78 = icmp eq i32 %76, %77
  %79 = icmp eq i64 %64, %61
  %80 = select i1 %78, i1 true, i1 %79
  br i1 %80, label %94, label %81

81:                                               ; preds = %72
  %82 = call i32 @hypre_ProjectBox(ptr noundef nonnull %29, ptr noundef nonnull %7, ptr noundef nonnull %9) #33
  %83 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %29, ptr noundef nonnull %7, ptr noundef nonnull %9, ptr noundef nonnull %29) #33
  %84 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %30, ptr noundef nonnull %7, ptr noundef nonnull %9, ptr noundef nonnull %30) #33
  %85 = getelementptr inbounds ptr, ptr %48, i64 %64
  %86 = load ptr, ptr %85, align 8, !tbaa !14
  %87 = add nuw nsw i64 %64, 1
  %88 = getelementptr inbounds ptr, ptr %49, i64 %87
  %89 = call i32 @hypre_StructCoarsen(ptr noundef %86, ptr noundef nonnull %7, ptr noundef nonnull %9, i32 noundef 0, ptr noundef nonnull %88) #33
  %90 = load ptr, ptr %85, align 8, !tbaa !14
  %91 = getelementptr inbounds ptr, ptr %48, i64 %87
  %92 = call i32 @hypre_StructCoarsen(ptr noundef %90, ptr noundef nonnull %7, ptr noundef nonnull %9, i32 noundef 1, ptr noundef nonnull %91) #33
  %93 = add nuw i32 %63, 1
  br label %62

94:                                               ; preds = %72
  %.lcssa1 = phi i32 [ %63, %72 ]
  %.lcssa = phi i64 [ %64, %72 ]
  %95 = trunc i64 %.lcssa to i32
  %96 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %31
  %97 = add nuw nsw i32 %95, 1
  %98 = call i32 @hypre_BoxDestroy(ptr noundef nonnull %29) #33
  %99 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 7
  store i32 %97, ptr %99, align 8, !tbaa !368
  %100 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 13
  store ptr %48, ptr %100, align 8, !tbaa !376
  %101 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 14
  store ptr %49, ptr %101, align 8, !tbaa !380
  %102 = shl i32 %97, 3
  %103 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %104 = shl i32 %95, 3
  %105 = call ptr @hypre_MAlloc(i32 noundef %104) #33
  %106 = call ptr @hypre_MAlloc(i32 noundef %104) #33
  %107 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %108 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %109 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %110 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %111 = call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %111, ptr %103, align 8, !tbaa !14
  %112 = call ptr @hypre_StructVectorRef(ptr noundef %2) #33
  store ptr %112, ptr %107, align 8, !tbaa !14
  %113 = call ptr @hypre_StructVectorRef(ptr noundef %3) #33
  store ptr %113, ptr %108, align 8, !tbaa !14
  %114 = icmp sgt i32 %22, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %94
  %116 = zext i32 %22 to i64
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %123, %117 ]
  %119 = shl nuw nsw i64 %118, 1
  %120 = getelementptr inbounds [6 x i32], ptr %11, i64 0, i64 %119
  store i32 1, ptr %120, align 8, !tbaa !7
  %121 = or i64 %119, 1
  %122 = getelementptr inbounds [6 x i32], ptr %11, i64 0, i64 %121
  store i32 1, ptr %122, align 4, !tbaa !7
  %123 = add nuw nsw i64 %118, 1
  %124 = icmp eq i64 %123, %116
  br i1 %124, label %125, label %117, !llvm.loop !580

125:                                              ; preds = %117, %94
  %126 = load ptr, ptr %48, align 8, !tbaa !14
  %127 = call ptr @hypre_StructVectorCreate(i32 noundef %12, ptr noundef %126) #33
  store ptr %127, ptr %109, align 8, !tbaa !14
  %128 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 7
  %129 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %127, ptr noundef nonnull %128) #33
  %130 = load ptr, ptr %109, align 8, !tbaa !14
  %131 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %130) #33
  %132 = load ptr, ptr %109, align 8, !tbaa !14
  %133 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %132, i64 0, i32 5
  %134 = load i32, ptr %133, align 4, !tbaa !244
  %135 = load ptr, ptr %48, align 8, !tbaa !14
  %136 = call ptr @hypre_StructVectorCreate(i32 noundef %12, ptr noundef %135) #33
  store ptr %136, ptr %110, align 8, !tbaa !14
  %137 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 7
  %138 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %136, ptr noundef nonnull %137) #33
  %139 = load ptr, ptr %110, align 8, !tbaa !14
  %140 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %139) #33
  %141 = load ptr, ptr %110, align 8, !tbaa !14
  %142 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %141, i64 0, i32 5
  %143 = load i32, ptr %142, align 4, !tbaa !244
  %144 = add nsw i32 %143, %134
  %145 = icmp eq i32 %95, 0
  br i1 %145, label %208, label %146

146:                                              ; preds = %125
  %147 = zext i32 %.lcssa1 to i64
  br label %148

148:                                              ; preds = %148, %146
  %149 = phi i64 [ 0, %146 ], [ %153, %148 ]
  %150 = phi i32 [ %144, %146 ], [ %194, %148 ]
  %151 = getelementptr inbounds ptr, ptr %103, i64 %149
  %152 = load ptr, ptr %151, align 8, !tbaa !14
  %153 = add nuw nsw i64 %149, 1
  %154 = getelementptr inbounds ptr, ptr %49, i64 %153
  %155 = load ptr, ptr %154, align 8, !tbaa !14
  %156 = call ptr @hypre_SMGCreateInterpOp(ptr noundef %152, ptr noundef %155, i32 noundef %23) #33
  %157 = getelementptr inbounds ptr, ptr %105, i64 %149
  store ptr %156, ptr %157, align 8, !tbaa !14
  %158 = call i32 @hypre_StructMatrixInitializeShell(ptr noundef %156) #33
  %159 = load ptr, ptr %157, align 8, !tbaa !14
  %160 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %159, i64 0, i32 8
  %161 = load i32, ptr %160, align 4, !tbaa !243
  %162 = add nsw i32 %161, %150
  %163 = getelementptr inbounds ptr, ptr %106, i64 %149
  store ptr %159, ptr %163, align 8
  %164 = load ptr, ptr %151, align 8, !tbaa !14
  %165 = load ptr, ptr %157, align 8, !tbaa !14
  %166 = getelementptr inbounds ptr, ptr %48, i64 %153
  %167 = load ptr, ptr %166, align 8, !tbaa !14
  %168 = call ptr @hypre_SMGCreateRAPOp(ptr noundef nonnull %159, ptr noundef %164, ptr noundef %165, ptr noundef %167) #33
  %169 = getelementptr inbounds ptr, ptr %103, i64 %153
  store ptr %168, ptr %169, align 8, !tbaa !14
  %170 = call i32 @hypre_StructMatrixInitializeShell(ptr noundef %168) #33
  %171 = load ptr, ptr %169, align 8, !tbaa !14
  %172 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %171, i64 0, i32 8
  %173 = load i32, ptr %172, align 4, !tbaa !243
  %174 = add nsw i32 %162, %173
  %175 = load ptr, ptr %166, align 8, !tbaa !14
  %176 = call ptr @hypre_StructVectorCreate(i32 noundef %12, ptr noundef %175) #33
  %177 = getelementptr inbounds ptr, ptr %107, i64 %153
  store ptr %176, ptr %177, align 8, !tbaa !14
  %178 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %176, ptr noundef nonnull %10) #33
  %179 = load ptr, ptr %177, align 8, !tbaa !14
  %180 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %179) #33
  %181 = load ptr, ptr %177, align 8, !tbaa !14
  %182 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %181, i64 0, i32 5
  %183 = load i32, ptr %182, align 4, !tbaa !244
  %184 = add nsw i32 %174, %183
  %185 = load ptr, ptr %166, align 8, !tbaa !14
  %186 = call ptr @hypre_StructVectorCreate(i32 noundef %12, ptr noundef %185) #33
  %187 = getelementptr inbounds ptr, ptr %108, i64 %153
  store ptr %186, ptr %187, align 8, !tbaa !14
  %188 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %186, ptr noundef nonnull %11) #33
  %189 = load ptr, ptr %187, align 8, !tbaa !14
  %190 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %189) #33
  %191 = load ptr, ptr %187, align 8, !tbaa !14
  %192 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %191, i64 0, i32 5
  %193 = load i32, ptr %192, align 4, !tbaa !244
  %194 = add nsw i32 %184, %193
  %195 = load ptr, ptr %166, align 8, !tbaa !14
  %196 = call ptr @hypre_StructVectorCreate(i32 noundef %12, ptr noundef %195) #33
  %197 = getelementptr inbounds ptr, ptr %109, i64 %153
  store ptr %196, ptr %197, align 8, !tbaa !14
  %198 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %196, ptr noundef nonnull %128) #33
  %199 = load ptr, ptr %197, align 8, !tbaa !14
  %200 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %199) #33
  %201 = load ptr, ptr %166, align 8, !tbaa !14
  %202 = call ptr @hypre_StructVectorCreate(i32 noundef %12, ptr noundef %201) #33
  %203 = getelementptr inbounds ptr, ptr %110, i64 %153
  store ptr %202, ptr %203, align 8, !tbaa !14
  %204 = call i32 @hypre_StructVectorSetNumGhost(ptr noundef %202, ptr noundef nonnull %137) #33
  %205 = load ptr, ptr %203, align 8, !tbaa !14
  %206 = call i32 @hypre_StructVectorInitializeShell(ptr noundef %205) #33
  %207 = icmp eq i64 %153, %147
  br i1 %207, label %208, label %148, !llvm.loop !581

208:                                              ; preds = %148, %125
  %209 = phi i32 [ %144, %125 ], [ %194, %148 ]
  %210 = call ptr @hypre_CAlloc(i32 noundef %209, i32 noundef 8) #33
  %211 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 15
  store ptr %210, ptr %211, align 8, !tbaa !384
  %212 = load ptr, ptr %109, align 8, !tbaa !14
  %213 = call i32 @hypre_StructVectorInitializeData(ptr noundef %212, ptr noundef %210) #33
  %214 = load ptr, ptr %109, align 8, !tbaa !14
  %215 = call i32 @hypre_StructVectorAssemble(ptr noundef %214) #33
  %216 = load ptr, ptr %109, align 8, !tbaa !14
  %217 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %216, i64 0, i32 5
  %218 = load i32, ptr %217, align 4, !tbaa !244
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds double, ptr %210, i64 %219
  %221 = load ptr, ptr %110, align 8, !tbaa !14
  %222 = call i32 @hypre_StructVectorInitializeData(ptr noundef %221, ptr noundef %220) #33
  %223 = load ptr, ptr %110, align 8, !tbaa !14
  %224 = call i32 @hypre_StructVectorAssemble(ptr noundef %223) #33
  br i1 %145, label %289, label %225

225:                                              ; preds = %208
  %226 = load ptr, ptr %110, align 8, !tbaa !14
  %227 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %226, i64 0, i32 5
  %228 = load i32, ptr %227, align 4, !tbaa !244
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, ptr %220, i64 %229
  %231 = zext i32 %.lcssa1 to i64
  br label %232

232:                                              ; preds = %232, %225
  %233 = phi i64 [ 0, %225 ], [ %243, %232 ]
  %234 = phi ptr [ %230, %225 ], [ %271, %232 ]
  %235 = getelementptr inbounds ptr, ptr %105, i64 %233
  %236 = load ptr, ptr %235, align 8, !tbaa !14
  %237 = call i32 @hypre_StructMatrixInitializeData(ptr noundef %236, ptr noundef %234) #33
  %238 = load ptr, ptr %235, align 8, !tbaa !14
  %239 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %238, i64 0, i32 8
  %240 = load i32, ptr %239, align 4, !tbaa !243
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds double, ptr %234, i64 %241
  %243 = add nuw nsw i64 %233, 1
  %244 = getelementptr inbounds ptr, ptr %103, i64 %243
  %245 = load ptr, ptr %244, align 8, !tbaa !14
  %246 = call i32 @hypre_StructMatrixInitializeData(ptr noundef %245, ptr noundef %242) #33
  %247 = load ptr, ptr %244, align 8, !tbaa !14
  %248 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %247, i64 0, i32 8
  %249 = load i32, ptr %248, align 4, !tbaa !243
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds double, ptr %242, i64 %250
  %252 = getelementptr inbounds ptr, ptr %107, i64 %243
  %253 = load ptr, ptr %252, align 8, !tbaa !14
  %254 = call i32 @hypre_StructVectorInitializeData(ptr noundef %253, ptr noundef %251) #33
  %255 = load ptr, ptr %252, align 8, !tbaa !14
  %256 = call i32 @hypre_StructVectorAssemble(ptr noundef %255) #33
  %257 = load ptr, ptr %252, align 8, !tbaa !14
  %258 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %257, i64 0, i32 5
  %259 = load i32, ptr %258, align 4, !tbaa !244
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds double, ptr %251, i64 %260
  %262 = getelementptr inbounds ptr, ptr %108, i64 %243
  %263 = load ptr, ptr %262, align 8, !tbaa !14
  %264 = call i32 @hypre_StructVectorInitializeData(ptr noundef %263, ptr noundef %261) #33
  %265 = load ptr, ptr %262, align 8, !tbaa !14
  %266 = call i32 @hypre_StructVectorAssemble(ptr noundef %265) #33
  %267 = load ptr, ptr %262, align 8, !tbaa !14
  %268 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %267, i64 0, i32 5
  %269 = load i32, ptr %268, align 4, !tbaa !244
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds double, ptr %261, i64 %270
  %272 = getelementptr inbounds ptr, ptr %109, i64 %243
  %273 = load ptr, ptr %272, align 8, !tbaa !14
  %274 = load ptr, ptr %109, align 8, !tbaa !14
  %275 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %274, i64 0, i32 3
  %276 = load ptr, ptr %275, align 8, !tbaa !27
  %277 = call i32 @hypre_StructVectorInitializeData(ptr noundef %273, ptr noundef %276) #33
  %278 = load ptr, ptr %272, align 8, !tbaa !14
  %279 = call i32 @hypre_StructVectorAssemble(ptr noundef %278) #33
  %280 = getelementptr inbounds ptr, ptr %110, i64 %243
  %281 = load ptr, ptr %280, align 8, !tbaa !14
  %282 = load ptr, ptr %110, align 8, !tbaa !14
  %283 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %282, i64 0, i32 3
  %284 = load ptr, ptr %283, align 8, !tbaa !27
  %285 = call i32 @hypre_StructVectorInitializeData(ptr noundef %281, ptr noundef %284) #33
  %286 = load ptr, ptr %280, align 8, !tbaa !14
  %287 = call i32 @hypre_StructVectorAssemble(ptr noundef %286) #33
  %288 = icmp eq i64 %243, %231
  br i1 %288, label %289, label %232, !llvm.loop !582

289:                                              ; preds = %232, %208
  %290 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 16
  store ptr %103, ptr %290, align 8, !tbaa !377
  %291 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 17
  store ptr %105, ptr %291, align 8, !tbaa !381
  %292 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 18
  store ptr %106, ptr %292, align 8, !tbaa !382
  %293 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 19
  store ptr %107, ptr %293, align 8, !tbaa !378
  %294 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 20
  store ptr %108, ptr %294, align 8, !tbaa !379
  %295 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 21
  store ptr %109, ptr %295, align 8, !tbaa !374
  %296 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 22
  store ptr %110, ptr %296, align 8, !tbaa !375
  %297 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 23
  store ptr %110, ptr %297, align 8, !tbaa !583
  %298 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 24
  store ptr %110, ptr %298, align 8, !tbaa !584
  %299 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %300 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %301 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %302 = call ptr @hypre_MAlloc(i32 noundef %102) #33
  %303 = load ptr, ptr %107, align 8, !tbaa !14
  %304 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %303, i64 0, i32 3
  %305 = load ptr, ptr %304, align 8, !tbaa !27
  %306 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %303, i64 0, i32 4
  %307 = load i32, ptr %306, align 8, !tbaa !585
  %308 = load ptr, ptr %108, align 8, !tbaa !14
  %309 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %308, i64 0, i32 3
  %310 = load ptr, ptr %309, align 8, !tbaa !27
  %311 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %308, i64 0, i32 4
  %312 = load i32, ptr %311, align 8, !tbaa !585
  %313 = load ptr, ptr %109, align 8, !tbaa !14
  %314 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %313, i64 0, i32 3
  %315 = load ptr, ptr %314, align 8, !tbaa !27
  %316 = call i32 @hypre_StructVectorInitializeData(ptr noundef %303, ptr noundef %315) #33
  %317 = load ptr, ptr %108, align 8, !tbaa !14
  %318 = load ptr, ptr %110, align 8, !tbaa !14
  %319 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %318, i64 0, i32 3
  %320 = load ptr, ptr %319, align 8, !tbaa !27
  %321 = call i32 @hypre_StructVectorInitializeData(ptr noundef %317, ptr noundef %320) #33
  %322 = load ptr, ptr %107, align 8, !tbaa !14
  %323 = call i32 @hypre_StructVectorAssemble(ptr noundef %322) #33
  %324 = load ptr, ptr %108, align 8, !tbaa !14
  %325 = call i32 @hypre_StructVectorAssemble(ptr noundef %324) #33
  br i1 %145, label %443, label %326

326:                                              ; preds = %289
  %327 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %328 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  %329 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  %330 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %331 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %332 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %333 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 %31
  %334 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 1
  %335 = zext i32 %.lcssa1 to i64
  br label %336

336:                                              ; preds = %347, %326
  %337 = phi i64 [ 0, %326 ], [ %421, %347 ]
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %340, label %339

339:                                              ; preds = %336
  store i32 0, ptr %5, align 8, !tbaa !7
  store i32 0, ptr %327, align 4, !tbaa !7
  store i32 0, ptr %328, align 8, !tbaa !7
  store i32 1, ptr %6, align 8, !tbaa !7
  store i32 1, ptr %329, align 4, !tbaa !7
  br label %347

340:                                              ; preds = %336
  %341 = load i32, ptr %13, align 4, !tbaa !7
  store i32 %341, ptr %5, align 8, !tbaa !7
  %342 = load i32, ptr %57, align 4, !tbaa !7
  store i32 %342, ptr %327, align 4, !tbaa !7
  %343 = load i32, ptr %58, align 4, !tbaa !7
  store i32 %343, ptr %328, align 8, !tbaa !7
  %344 = load i32, ptr %14, align 4, !tbaa !7
  store i32 %344, ptr %6, align 8, !tbaa !7
  %345 = load i32, ptr %59, align 4, !tbaa !7
  store i32 %345, ptr %329, align 4, !tbaa !7
  %346 = load i32, ptr %60, align 4, !tbaa !7
  br label %347

347:                                              ; preds = %340, %339
  %348 = phi i32 [ 0, %339 ], [ %341, %340 ]
  %349 = phi i32 [ 0, %339 ], [ %342, %340 ]
  %350 = phi i32 [ 0, %339 ], [ %343, %340 ]
  %351 = phi i32 [ 1, %339 ], [ %344, %340 ]
  %352 = phi i32 [ 1, %339 ], [ %345, %340 ]
  %353 = phi i32 [ 1, %339 ], [ %346, %340 ]
  store i32 %353, ptr %330, align 8, !tbaa !7
  store i32 %348, ptr %7, align 8, !tbaa !7
  store i32 %349, ptr %53, align 4, !tbaa !7
  store i32 %350, ptr %54, align 8, !tbaa !7
  store i32 %348, ptr %8, align 4, !tbaa !7
  store i32 %349, ptr %331, align 4, !tbaa !7
  store i32 %350, ptr %332, align 4, !tbaa !7
  %354 = load i32, ptr %333, align 4, !tbaa !7
  %355 = add nsw i32 %354, 1
  store i32 %355, ptr %333, align 4, !tbaa !7
  store i32 %351, ptr %9, align 8, !tbaa !7
  store i32 %352, ptr %55, align 4, !tbaa !7
  store i32 %353, ptr %56, align 8, !tbaa !7
  %356 = load i32, ptr %51, align 4, !tbaa !7
  %357 = shl nsw i32 %356, 1
  store i32 %357, ptr %51, align 4, !tbaa !7
  %358 = call ptr @hypre_SMGRelaxCreate(i32 noundef %12) #33
  %359 = getelementptr inbounds ptr, ptr %299, i64 %337
  store ptr %358, ptr %359, align 8, !tbaa !14
  %360 = call i32 @hypre_SMGRelaxSetBase(ptr noundef %358, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %361 = load ptr, ptr %359, align 8, !tbaa !14
  %362 = load i32, ptr %334, align 4, !tbaa !363
  %363 = call i32 @hypre_SMGRelaxSetMemoryUse(ptr noundef %361, i32 noundef %362) #33
  %364 = load ptr, ptr %359, align 8, !tbaa !14
  %365 = call i32 @hypre_SMGRelaxSetTol(ptr noundef %364, double noundef 0.000000e+00) #33
  %366 = load ptr, ptr %359, align 8, !tbaa !14
  %367 = call i32 @hypre_SMGRelaxSetNumSpaces(ptr noundef %366, i32 noundef 2) #33
  %368 = load ptr, ptr %359, align 8, !tbaa !14
  %369 = load i32, ptr %96, align 4, !tbaa !7
  %370 = load i32, ptr %51, align 4, !tbaa !7
  %371 = call i32 @hypre_SMGRelaxSetSpace(ptr noundef %368, i32 noundef 0, i32 noundef %369, i32 noundef %370) #33
  %372 = load ptr, ptr %359, align 8, !tbaa !14
  %373 = load i32, ptr %333, align 4, !tbaa !7
  %374 = load i32, ptr %51, align 4, !tbaa !7
  %375 = call i32 @hypre_SMGRelaxSetSpace(ptr noundef %372, i32 noundef 1, i32 noundef %373, i32 noundef %374) #33
  %376 = load ptr, ptr %359, align 8, !tbaa !14
  %377 = getelementptr inbounds ptr, ptr %109, i64 %337
  %378 = load ptr, ptr %377, align 8, !tbaa !14
  %379 = call i32 @hypre_SMGRelaxSetTempVec(ptr noundef %376, ptr noundef %378) #33
  %380 = load ptr, ptr %359, align 8, !tbaa !14
  %381 = call i32 @hypre_SMGRelaxSetNumPreRelax(ptr noundef %380, i32 noundef %16) #33
  %382 = load ptr, ptr %359, align 8, !tbaa !14
  %383 = call i32 @hypre_SMGRelaxSetNumPostRelax(ptr noundef %382, i32 noundef %18) #33
  %384 = load ptr, ptr %359, align 8, !tbaa !14
  %385 = getelementptr inbounds ptr, ptr %103, i64 %337
  %386 = load ptr, ptr %385, align 8, !tbaa !14
  %387 = getelementptr inbounds ptr, ptr %107, i64 %337
  %388 = load ptr, ptr %387, align 8, !tbaa !14
  %389 = getelementptr inbounds ptr, ptr %108, i64 %337
  %390 = load ptr, ptr %389, align 8, !tbaa !14
  %391 = call i32 @hypre_SMGRelaxSetup(ptr noundef %384, ptr noundef %386, ptr noundef %388, ptr noundef %390) #33
  %392 = load ptr, ptr %359, align 8, !tbaa !14
  %393 = load ptr, ptr %385, align 8, !tbaa !14
  %394 = load ptr, ptr %387, align 8, !tbaa !14
  %395 = load ptr, ptr %389, align 8, !tbaa !14
  %396 = getelementptr inbounds ptr, ptr %105, i64 %337
  %397 = load ptr, ptr %396, align 8, !tbaa !14
  %398 = call i32 @hypre_SMGSetupInterpOp(ptr noundef %392, ptr noundef %393, ptr noundef %394, ptr noundef %395, ptr noundef %397, i32 noundef %23, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9) #33
  %399 = load ptr, ptr %359, align 8, !tbaa !14
  %400 = call i32 @hypre_SMGRelaxSetNumPreSpaces(ptr noundef %399, i32 noundef 0) #33
  %401 = load ptr, ptr %359, align 8, !tbaa !14
  %402 = call i32 @hypre_SMGRelaxSetNumRegSpaces(ptr noundef %401, i32 noundef 2) #33
  %403 = load ptr, ptr %359, align 8, !tbaa !14
  %404 = load ptr, ptr %385, align 8, !tbaa !14
  %405 = load ptr, ptr %387, align 8, !tbaa !14
  %406 = load ptr, ptr %389, align 8, !tbaa !14
  %407 = call i32 @hypre_SMGRelaxSetup(ptr noundef %403, ptr noundef %404, ptr noundef %405, ptr noundef %406) #33
  %408 = call ptr @hypre_SMGResidualCreate() #33
  %409 = getelementptr inbounds ptr, ptr %300, i64 %337
  store ptr %408, ptr %409, align 8, !tbaa !14
  %410 = call i32 @hypre_SMGResidualSetBase(ptr noundef %408, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %411 = load ptr, ptr %409, align 8, !tbaa !14
  %412 = load ptr, ptr %385, align 8, !tbaa !14
  %413 = load ptr, ptr %389, align 8, !tbaa !14
  %414 = load ptr, ptr %387, align 8, !tbaa !14
  %415 = getelementptr inbounds ptr, ptr %110, i64 %337
  %416 = load ptr, ptr %415, align 8, !tbaa !14
  %417 = call i32 @hypre_SMGResidualSetup(ptr noundef %411, ptr noundef %412, ptr noundef %413, ptr noundef %414, ptr noundef %416) #33
  %418 = call ptr @hypre_SemiInterpCreate() #33
  %419 = getelementptr inbounds ptr, ptr %302, i64 %337
  store ptr %418, ptr %419, align 8, !tbaa !14
  %420 = load ptr, ptr %396, align 8, !tbaa !14
  %421 = add nuw nsw i64 %337, 1
  %422 = getelementptr inbounds ptr, ptr %108, i64 %421
  %423 = load ptr, ptr %422, align 8, !tbaa !14
  %424 = load ptr, ptr %415, align 8, !tbaa !14
  %425 = call i32 @hypre_SemiInterpSetup(ptr noundef %418, ptr noundef %420, i32 noundef 1, ptr noundef %423, ptr noundef %424, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9) #33
  %426 = call ptr @hypre_SemiRestrictCreate() #33
  %427 = getelementptr inbounds ptr, ptr %301, i64 %337
  store ptr %426, ptr %427, align 8, !tbaa !14
  %428 = getelementptr inbounds ptr, ptr %106, i64 %337
  %429 = load ptr, ptr %428, align 8, !tbaa !14
  %430 = load ptr, ptr %415, align 8, !tbaa !14
  %431 = getelementptr inbounds ptr, ptr %107, i64 %421
  %432 = load ptr, ptr %431, align 8, !tbaa !14
  %433 = call i32 @hypre_SemiRestrictSetup(ptr noundef %426, ptr noundef %429, i32 noundef 0, ptr noundef %430, ptr noundef %432, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9) #33
  %434 = load ptr, ptr %428, align 8, !tbaa !14
  %435 = load ptr, ptr %385, align 8, !tbaa !14
  %436 = load ptr, ptr %396, align 8, !tbaa !14
  %437 = getelementptr inbounds ptr, ptr %103, i64 %421
  %438 = load ptr, ptr %437, align 8, !tbaa !14
  %439 = call i32 @hypre_SMGSetupRAPOp(ptr noundef %434, ptr noundef %435, ptr noundef %436, ptr noundef %438, ptr noundef nonnull %7, ptr noundef nonnull %9) #33
  %440 = icmp eq i64 %421, %335
  br i1 %440, label %441, label %336, !llvm.loop !586

441:                                              ; preds = %347
  %442 = icmp eq i32 %.lcssa1, 0
  br i1 %442, label %443, label %448

443:                                              ; preds = %441, %289
  %444 = load <2 x i32>, ptr %13, align 4, !tbaa !7
  %445 = load i32, ptr %58, align 4, !tbaa !7
  %446 = load <2 x i32>, ptr %14, align 4, !tbaa !7
  %447 = load i32, ptr %60, align 4, !tbaa !7
  br label %448

448:                                              ; preds = %443, %441
  %449 = phi i1 [ true, %443 ], [ false, %441 ]
  %450 = phi i32 [ 0, %443 ], [ %.lcssa1, %441 ]
  %451 = phi i32 [ %445, %443 ], [ 0, %441 ]
  %452 = phi i32 [ %447, %443 ], [ 1, %441 ]
  %453 = phi <2 x i32> [ %444, %443 ], [ zeroinitializer, %441 ]
  %454 = phi <2 x i32> [ %446, %443 ], [ <i32 1, i32 1>, %441 ]
  store <2 x i32> %453, ptr %5, align 8
  %455 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  store i32 %451, ptr %455, align 8
  store <2 x i32> %454, ptr %6, align 8
  %456 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 %452, ptr %456, align 8
  %457 = call ptr @hypre_SMGRelaxCreate(i32 noundef %12) #33
  %458 = zext i32 %450 to i64
  %459 = getelementptr inbounds ptr, ptr %299, i64 %458
  store ptr %457, ptr %459, align 8, !tbaa !14
  %460 = call i32 @hypre_SMGRelaxSetBase(ptr noundef %457, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %461 = load ptr, ptr %459, align 8, !tbaa !14
  %462 = call i32 @hypre_SMGRelaxSetTol(ptr noundef %461, double noundef 0.000000e+00) #33
  %463 = load ptr, ptr %459, align 8, !tbaa !14
  %464 = call i32 @hypre_SMGRelaxSetMaxIter(ptr noundef %463, i32 noundef 1) #33
  %465 = load ptr, ptr %459, align 8, !tbaa !14
  %466 = getelementptr inbounds ptr, ptr %109, i64 %458
  %467 = load ptr, ptr %466, align 8, !tbaa !14
  %468 = call i32 @hypre_SMGRelaxSetTempVec(ptr noundef %465, ptr noundef %467) #33
  %469 = load ptr, ptr %459, align 8, !tbaa !14
  %470 = call i32 @hypre_SMGRelaxSetNumPreRelax(ptr noundef %469, i32 noundef %16) #33
  %471 = load ptr, ptr %459, align 8, !tbaa !14
  %472 = call i32 @hypre_SMGRelaxSetNumPostRelax(ptr noundef %471, i32 noundef %18) #33
  %473 = load ptr, ptr %459, align 8, !tbaa !14
  %474 = getelementptr inbounds ptr, ptr %103, i64 %458
  %475 = load ptr, ptr %474, align 8, !tbaa !14
  %476 = getelementptr inbounds ptr, ptr %107, i64 %458
  %477 = load ptr, ptr %476, align 8, !tbaa !14
  %478 = getelementptr inbounds ptr, ptr %108, i64 %458
  %479 = load ptr, ptr %478, align 8, !tbaa !14
  %480 = call i32 @hypre_SMGRelaxSetup(ptr noundef %473, ptr noundef %475, ptr noundef %477, ptr noundef %479) #33
  br i1 %449, label %481, label %492

481:                                              ; preds = %448
  %482 = call ptr @hypre_SMGResidualCreate() #33
  %483 = getelementptr inbounds ptr, ptr %300, i64 %458
  store ptr %482, ptr %483, align 8, !tbaa !14
  %484 = call i32 @hypre_SMGResidualSetBase(ptr noundef %482, ptr noundef nonnull %5, ptr noundef nonnull %6) #33
  %485 = load ptr, ptr %483, align 8, !tbaa !14
  %486 = load ptr, ptr %474, align 8, !tbaa !14
  %487 = load ptr, ptr %478, align 8, !tbaa !14
  %488 = load ptr, ptr %476, align 8, !tbaa !14
  %489 = getelementptr inbounds ptr, ptr %110, i64 %458
  %490 = load ptr, ptr %489, align 8, !tbaa !14
  %491 = call i32 @hypre_SMGResidualSetup(ptr noundef %485, ptr noundef %486, ptr noundef %487, ptr noundef %488, ptr noundef %490) #33
  br label %492

492:                                              ; preds = %481, %448
  %493 = load ptr, ptr %107, align 8, !tbaa !14
  %494 = call i32 @hypre_StructVectorInitializeData(ptr noundef %493, ptr noundef %305) #33
  %495 = load ptr, ptr %107, align 8, !tbaa !14
  %496 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %495, i64 0, i32 4
  store i32 %307, ptr %496, align 8, !tbaa !585
  %497 = load ptr, ptr %108, align 8, !tbaa !14
  %498 = call i32 @hypre_StructVectorInitializeData(ptr noundef %497, ptr noundef %310) #33
  %499 = load ptr, ptr %108, align 8, !tbaa !14
  %500 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %499, i64 0, i32 4
  store i32 %312, ptr %500, align 8, !tbaa !585
  %501 = load ptr, ptr %107, align 8, !tbaa !14
  %502 = call i32 @hypre_StructVectorAssemble(ptr noundef %501) #33
  %503 = load ptr, ptr %108, align 8, !tbaa !14
  %504 = call i32 @hypre_StructVectorAssemble(ptr noundef %503) #33
  %505 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 25
  store ptr %299, ptr %505, align 8, !tbaa !369
  %506 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 26
  store ptr %300, ptr %506, align 8, !tbaa !370
  %507 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 27
  store ptr %301, ptr %507, align 8, !tbaa !371
  %508 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 28
  store ptr %302, ptr %508, align 8, !tbaa !372
  %509 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 31
  %510 = load i32, ptr %509, align 8, !tbaa !365
  %511 = icmp sgt i32 %510, 0
  br i1 %511, label %512, label %520

512:                                              ; preds = %492
  %513 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 3
  %514 = load i32, ptr %513, align 8, !tbaa !385
  %515 = shl i32 %514, 3
  %516 = call ptr @hypre_MAlloc(i32 noundef %515) #33
  %517 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 32
  store ptr %516, ptr %517, align 8, !tbaa !366
  %518 = call ptr @hypre_MAlloc(i32 noundef %515) #33
  %519 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 33
  store ptr %518, ptr %519, align 8, !tbaa !367
  br label %520

520:                                              ; preds = %512, %492
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMGCreateInterpOp(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) #0 {
  %4 = alloca [6 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #34
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %4, ptr noundef nonnull align 16 dereferenceable(24) @__const.hypre_SMGCreateInterpOp.num_ghost, i64 24, i1 false)
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !250
  %7 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %6, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !37
  %9 = tail call ptr @hypre_CAlloc(i32 noundef 2, i32 noundef 12) #33
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(24) %9, i8 0, i64 24, i1 false), !tbaa !7
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds [3 x i32], ptr %9, i64 0, i64 %10
  store i32 -1, ptr %11, align 4, !tbaa !7
  %12 = getelementptr inbounds [3 x i32], ptr %9, i64 1, i64 %10
  store i32 1, ptr %12, align 4, !tbaa !7
  %13 = tail call ptr @hypre_StructStencilCreate(i32 noundef %8, i32 noundef 2, ptr noundef %9) #33
  %14 = load i32, ptr %0, align 8, !tbaa !221
  %15 = tail call ptr @hypre_StructMatrixCreate(i32 noundef %14, ptr noundef %1, ptr noundef %13) #33
  %16 = call i32 @hypre_StructMatrixSetNumGhost(ptr noundef %15, ptr noundef nonnull %4) #33
  %17 = call i32 @hypre_StructStencilDestroy(ptr noundef %13) #33
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #34
  ret ptr %15
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGSetupInterpOp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef %5, ptr noundef %6, ptr noundef %7, ptr noundef %8) #0 {
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca [3 x i32], align 4
  %19 = alloca [3 x i32], align 4
  %20 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %18) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %19) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %20) #34
  %21 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !15
  %23 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !250
  %25 = load ptr, ptr %24, align 8, !tbaa !35
  %26 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %24, i64 0, i32 1
  %27 = load i32, ptr %26, align 8, !tbaa !172
  %28 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !250
  %30 = load ptr, ptr %29, align 8, !tbaa !35
  %31 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %29, i64 0, i32 1
  %32 = load i32, ptr %31, align 8, !tbaa !172
  %33 = tail call i32 @hypre_SMGRelaxSetMaxIter(ptr noundef %0, i32 noundef 1) #33
  %34 = tail call i32 @hypre_SMGRelaxSetNumPreSpaces(ptr noundef %0, i32 noundef 0) #33
  %35 = tail call i32 @hypre_SMGRelaxSetNumRegSpaces(ptr noundef %0, i32 noundef 1) #33
  %36 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %0, i32 noundef 0, i32 noundef 1) #33
  %37 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 12) #33
  %38 = tail call ptr @hypre_StructStencilCreate(i32 noundef 1, i32 noundef 1, ptr noundef %37) #33
  %39 = icmp sgt i32 %32, 0
  br i1 %39, label %40, label %322

40:                                               ; preds = %9
  %41 = shl i32 %27, 2
  %42 = icmp sgt i32 %27, 0
  %43 = sext i32 %5 to i64
  %44 = getelementptr inbounds [3 x i32], ptr %37, i64 0, i64 1
  %45 = getelementptr inbounds [3 x i32], ptr %37, i64 0, i64 2
  %46 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %47 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %48 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 5
  %49 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %50 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 6
  %51 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 9
  %52 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 1
  %53 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 2
  %54 = getelementptr inbounds [3 x i32], ptr %20, i64 0, i64 1
  %55 = getelementptr inbounds [3 x i32], ptr %20, i64 0, i64 2
  %56 = getelementptr inbounds i32, ptr %8, i64 1
  %57 = getelementptr inbounds i32, ptr %8, i64 2
  %58 = getelementptr inbounds [3 x i32], ptr %18, i64 0, i64 1
  %59 = getelementptr inbounds [3 x i32], ptr %18, i64 0, i64 2
  %60 = zext i32 %32 to i64
  %61 = zext i32 %27 to i64
  br label %62

62:                                               ; preds = %317, %40
  %63 = phi i64 [ 0, %40 ], [ %320, %317 ]
  %64 = call ptr @hypre_MAlloc(i32 noundef %41) #33
  br i1 %42, label %65, label %83

65:                                               ; preds = %62
  %66 = getelementptr inbounds [3 x i32], ptr %30, i64 %63, i64 %43
  br label %67

67:                                               ; preds = %79, %65
  %68 = phi i64 [ 0, %65 ], [ %81, %79 ]
  %69 = phi i32 [ 0, %65 ], [ %80, %79 ]
  %70 = getelementptr inbounds [3 x i32], ptr %25, i64 %68, i64 %43
  %71 = load i32, ptr %70, align 4, !tbaa !7
  %72 = load i32, ptr %66, align 4, !tbaa !7
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %79, label %74

74:                                               ; preds = %67
  %75 = sext i32 %69 to i64
  %76 = getelementptr inbounds i32, ptr %64, i64 %75
  %77 = trunc i64 %68 to i32
  store i32 %77, ptr %76, align 4, !tbaa !7
  %78 = add nsw i32 %69, 1
  br label %79

79:                                               ; preds = %74, %67
  %80 = phi i32 [ %78, %74 ], [ %69, %67 ]
  %81 = add nuw nsw i64 %68, 1
  %82 = icmp eq i64 %81, %61
  br i1 %82, label %83, label %67, !llvm.loop !587

83:                                               ; preds = %79, %62
  %84 = phi i32 [ 0, %62 ], [ %80, %79 ]
  %85 = call ptr @hypre_StructMatrixCreateMask(ptr noundef %1, i32 noundef %84, ptr noundef %64) #33
  call void @hypre_Free(ptr noundef %64) #33
  %86 = call i32 @hypre_StructVectorClearGhostValues(ptr noundef %3) #33
  %87 = call i32 @hypre_StructVectorSetConstantValues(ptr noundef %3, double noundef 1.000000e+00) #33
  %88 = call i32 @hypre_StructVectorSetConstantValues(ptr noundef %2, double noundef 0.000000e+00) #33
  %89 = call i32 @hypre_SMGRelaxSetNewMatrixStencil(ptr noundef %0, ptr noundef nonnull %29) #33
  %90 = call i32 @hypre_SMGRelaxSetup(ptr noundef %0, ptr noundef %85, ptr noundef %2, ptr noundef %3) #33
  %91 = call i32 @hypre_SMGRelax(ptr noundef %0, ptr noundef %85, ptr noundef %2, ptr noundef %3) #33
  %92 = call i32 @hypre_StructMatrixDestroy(ptr noundef %85) #33
  %93 = getelementptr inbounds [3 x i32], ptr %30, i64 %63
  %94 = load i32, ptr %93, align 4, !tbaa !7
  store i32 %94, ptr %37, align 4, !tbaa !7
  %95 = getelementptr inbounds [3 x i32], ptr %30, i64 %63, i64 1
  %96 = load i32, ptr %95, align 4, !tbaa !7
  store i32 %96, ptr %44, align 4, !tbaa !7
  %97 = getelementptr inbounds [3 x i32], ptr %30, i64 %63, i64 2
  %98 = load i32, ptr %97, align 4, !tbaa !7
  store i32 %98, ptr %45, align 4, !tbaa !7
  %99 = call i32 @hypre_CreateComputeInfo(ptr noundef %22, ptr noundef %38, ptr noundef nonnull %11, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14, ptr noundef nonnull %15, ptr noundef nonnull %16) #33
  %100 = load ptr, ptr %11, align 8, !tbaa !14
  %101 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %100, ptr noundef %7, ptr noundef %8) #33
  %102 = load ptr, ptr %12, align 8, !tbaa !14
  %103 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %102, ptr noundef %7, ptr noundef %8) #33
  %104 = load ptr, ptr %15, align 8, !tbaa !14
  %105 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %104, ptr noundef %6, ptr noundef %8) #33
  %106 = load ptr, ptr %16, align 8, !tbaa !14
  %107 = call i32 @hypre_ProjectBoxArrayArray(ptr noundef %106, ptr noundef %6, ptr noundef %8) #33
  %108 = load ptr, ptr %11, align 8, !tbaa !14
  %109 = load ptr, ptr %12, align 8, !tbaa !14
  %110 = load ptr, ptr %13, align 8, !tbaa !14
  %111 = load ptr, ptr %14, align 8, !tbaa !14
  %112 = load ptr, ptr %15, align 8, !tbaa !14
  %113 = load ptr, ptr %16, align 8, !tbaa !14
  %114 = load ptr, ptr %46, align 8, !tbaa !25
  %115 = call i32 @hypre_ComputePkgCreate(ptr noundef %108, ptr noundef %109, ptr noundef %8, ptr noundef %8, ptr noundef %110, ptr noundef %111, ptr noundef %112, ptr noundef %113, ptr noundef %8, ptr noundef %22, ptr noundef %114, i32 noundef 1, ptr noundef nonnull %10) #33
  br label %116

116:                                              ; preds = %316, %83
  %117 = phi i1 [ true, %83 ], [ false, %316 ]
  br i1 %117, label %118, label %124

118:                                              ; preds = %116
  %119 = load ptr, ptr %47, align 8, !tbaa !27
  %120 = load ptr, ptr %10, align 8, !tbaa !14
  %121 = call i32 @hypre_InitializeIndtComputations(ptr noundef %120, ptr noundef %119, ptr noundef nonnull %17) #33
  %122 = load ptr, ptr %10, align 8, !tbaa !14
  %123 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %122, i64 0, i32 1
  br label %129

124:                                              ; preds = %116
  %125 = load ptr, ptr %17, align 8, !tbaa !14
  %126 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %125) #33
  %127 = load ptr, ptr %10, align 8, !tbaa !14
  %128 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %127, i64 0, i32 2
  br label %129

129:                                              ; preds = %124, %118
  %130 = phi ptr [ %128, %124 ], [ %123, %118 ]
  %131 = load ptr, ptr %130, align 8, !tbaa !14
  %132 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %131, i64 0, i32 1
  %133 = load i32, ptr %132, align 8, !tbaa !45
  %134 = icmp sgt i32 %133, 0
  br i1 %134, label %135, label %316

135:                                              ; preds = %311, %129
  %136 = phi i32 [ %312, %311 ], [ %133, %129 ]
  %137 = phi i64 [ %313, %311 ], [ 0, %129 ]
  %138 = load ptr, ptr %131, align 8, !tbaa !42
  %139 = getelementptr inbounds ptr, ptr %138, i64 %137
  %140 = load ptr, ptr %139, align 8, !tbaa !14
  %141 = load ptr, ptr %46, align 8, !tbaa !25
  %142 = load ptr, ptr %141, align 8, !tbaa !23
  %143 = getelementptr inbounds %struct.hypre_Box_struct, ptr %142, i64 %137
  %144 = load ptr, ptr %48, align 8, !tbaa !24
  %145 = load ptr, ptr %144, align 8, !tbaa !23
  %146 = getelementptr inbounds %struct.hypre_Box_struct, ptr %145, i64 %137
  %147 = load ptr, ptr %47, align 8, !tbaa !27
  %148 = load ptr, ptr %49, align 8, !tbaa !28
  %149 = getelementptr inbounds i32, ptr %148, i64 %137
  %150 = load i32, ptr %149, align 4, !tbaa !7
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds double, ptr %147, i64 %151
  %153 = load ptr, ptr %50, align 8, !tbaa !340
  %154 = load ptr, ptr %51, align 8, !tbaa !341
  %155 = getelementptr inbounds ptr, ptr %154, i64 %137
  %156 = load ptr, ptr %155, align 8, !tbaa !14
  %157 = getelementptr inbounds i32, ptr %156, i64 %63
  %158 = load i32, ptr %157, align 4, !tbaa !7
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds double, ptr %153, i64 %159
  %161 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %140, i64 0, i32 1
  %162 = load i32, ptr %161, align 8, !tbaa !21
  %163 = icmp sgt i32 %162, 0
  br i1 %163, label %164, label %311

164:                                              ; preds = %135
  %165 = getelementptr inbounds [3 x i32], ptr %143, i64 0, i64 1
  %166 = getelementptr inbounds [3 x i32], ptr %143, i64 0, i64 2
  %167 = getelementptr inbounds %struct.hypre_Box_struct, ptr %142, i64 %137, i32 1
  %168 = getelementptr inbounds %struct.hypre_Box_struct, ptr %142, i64 %137, i32 1, i64 1
  %169 = getelementptr inbounds [3 x i32], ptr %146, i64 0, i64 1
  %170 = getelementptr inbounds [3 x i32], ptr %146, i64 0, i64 2
  %171 = getelementptr inbounds %struct.hypre_Box_struct, ptr %145, i64 %137, i32 1
  %172 = getelementptr inbounds %struct.hypre_Box_struct, ptr %145, i64 %137, i32 1, i64 1
  br label %173

173:                                              ; preds = %304, %164
  %174 = phi i64 [ 0, %164 ], [ %305, %304 ]
  %175 = load ptr, ptr %140, align 8, !tbaa !23
  %176 = getelementptr inbounds %struct.hypre_Box_struct, ptr %175, i64 %174
  %177 = load i32, ptr %176, align 4, !tbaa !7
  store i32 %177, ptr %19, align 4, !tbaa !7
  %178 = getelementptr inbounds [3 x i32], ptr %176, i64 0, i64 1
  %179 = load i32, ptr %178, align 4, !tbaa !7
  store i32 %179, ptr %52, align 4, !tbaa !7
  %180 = getelementptr inbounds [3 x i32], ptr %176, i64 0, i64 2
  %181 = load i32, ptr %180, align 4, !tbaa !7
  store i32 %181, ptr %53, align 4, !tbaa !7
  %182 = call i32 @hypre_StructMapFineToCoarse(ptr noundef nonnull %19, ptr noundef %6, ptr noundef %8, ptr noundef nonnull %20) #33
  br label %183

183:                                              ; preds = %183, %173
  %184 = phi i64 [ 0, %173 ], [ %190, %183 ]
  %185 = getelementptr inbounds [3 x i32], ptr %30, i64 %63, i64 %184
  %186 = load i32, ptr %185, align 4, !tbaa !7
  %187 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 %184
  %188 = load i32, ptr %187, align 4, !tbaa !7
  %189 = add nsw i32 %188, %186
  store i32 %189, ptr %187, align 4, !tbaa !7
  %190 = add nuw nsw i64 %184, 1
  %191 = icmp eq i64 %190, 3
  br i1 %191, label %192, label %183, !llvm.loop !588

192:                                              ; preds = %183
  %193 = call i32 @hypre_BoxGetStrideSize(ptr noundef nonnull %176, ptr noundef %8, ptr noundef nonnull %18) #33
  %194 = load i32, ptr %8, align 4, !tbaa !7
  %195 = load i32, ptr %18, align 4, !tbaa !7
  %196 = load i32, ptr %58, align 4, !tbaa !7
  %197 = load i32, ptr %59, align 4, !tbaa !7
  %198 = call i32 @llvm.smax.i32(i32 %196, i32 %195)
  %199 = call i32 @llvm.smax.i32(i32 %197, i32 %198)
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %201, label %304

201:                                              ; preds = %192
  %202 = load i32, ptr %167, align 4, !tbaa !7
  %203 = load i32, ptr %143, align 4, !tbaa !7
  %204 = sub nsw i32 %202, %203
  %205 = icmp slt i32 %204, 0
  %206 = add nsw i32 %204, 1
  %207 = select i1 %205, i32 0, i32 %206
  %208 = load i32, ptr %168, align 4, !tbaa !7
  %209 = load i32, ptr %165, align 4, !tbaa !7
  %210 = sub nsw i32 %208, %209
  %211 = icmp slt i32 %210, 0
  %212 = add nsw i32 %210, 1
  %213 = select i1 %211, i32 0, i32 %212
  %214 = mul i32 %207, %213
  %215 = load i32, ptr %57, align 4, !tbaa !7
  %216 = mul i32 %214, %215
  %217 = load i32, ptr %56, align 4, !tbaa !7
  %218 = mul nsw i32 %217, %207
  %219 = load i32, ptr %146, align 4, !tbaa !7
  %220 = load i32, ptr %169, align 4, !tbaa !7
  %221 = load i32, ptr %172, align 4, !tbaa !7
  %222 = sub nsw i32 %221, %220
  %223 = icmp slt i32 %222, 0
  %224 = add nsw i32 %222, 1
  %225 = select i1 %223, i32 0, i32 %224
  %226 = load i32, ptr %171, align 4, !tbaa !7
  %227 = sub nsw i32 %226, %219
  %228 = icmp slt i32 %227, 0
  %229 = add nsw i32 %227, 1
  %230 = select i1 %228, i32 0, i32 %229
  %231 = icmp sgt i32 %197, 0
  %232 = icmp sgt i32 %196, 0
  %233 = icmp sgt i32 %195, 0
  %234 = mul nsw i32 %195, %194
  %235 = sub i32 %218, %234
  %236 = sub i32 %230, %195
  %237 = mul nsw i32 %196, %218
  %238 = sub i32 %216, %237
  %239 = sub i32 %225, %196
  %240 = mul i32 %239, %230
  br i1 %231, label %241, label %304

241:                                              ; preds = %201
  %242 = load i32, ptr %19, align 4, !tbaa !7
  %243 = sub i32 %242, %203
  %244 = load i32, ptr %52, align 4, !tbaa !7
  %245 = sub i32 %244, %209
  %246 = load i32, ptr %53, align 4, !tbaa !7
  %247 = load i32, ptr %166, align 4, !tbaa !7
  %248 = sub nsw i32 %246, %247
  %249 = mul nsw i32 %213, %248
  %250 = add nsw i32 %245, %249
  %251 = mul nsw i32 %250, %207
  %252 = add nsw i32 %243, %251
  %253 = load i32, ptr %20, align 4, !tbaa !7
  %254 = sub i32 %253, %219
  %255 = load i32, ptr %54, align 4, !tbaa !7
  %256 = sub i32 %255, %220
  %257 = load i32, ptr %55, align 4, !tbaa !7
  %258 = load i32, ptr %170, align 4, !tbaa !7
  %259 = sub nsw i32 %257, %258
  %260 = mul nsw i32 %225, %259
  %261 = add nsw i32 %256, %260
  %262 = mul nsw i32 %261, %230
  %263 = add nsw i32 %254, %262
  %264 = sext i32 %194 to i64
  br label %265

265:                                              ; preds = %297, %241
  %266 = phi i32 [ %301, %297 ], [ %263, %241 ]
  %267 = phi i32 [ %300, %297 ], [ %252, %241 ]
  %268 = phi i32 [ %302, %297 ], [ 0, %241 ]
  br i1 %232, label %269, label %297

269:                                              ; preds = %290, %265
  %270 = phi i32 [ %294, %290 ], [ %266, %265 ]
  %271 = phi i32 [ %293, %290 ], [ %267, %265 ]
  %272 = phi i32 [ %295, %290 ], [ 0, %265 ]
  br i1 %233, label %273, label %290

273:                                              ; preds = %269
  %274 = sext i32 %270 to i64
  %275 = sext i32 %271 to i64
  br label %276

276:                                              ; preds = %276, %273
  %277 = phi i64 [ %275, %273 ], [ %283, %276 ]
  %278 = phi i64 [ %274, %273 ], [ %284, %276 ]
  %279 = phi i32 [ 0, %273 ], [ %285, %276 ]
  %280 = getelementptr inbounds double, ptr %152, i64 %277
  %281 = load double, ptr %280, align 8, !tbaa !29
  %282 = getelementptr inbounds double, ptr %160, i64 %278
  store double %281, ptr %282, align 8, !tbaa !29
  %283 = add i64 %277, %264
  %284 = add nsw i64 %278, 1
  %285 = add nuw nsw i32 %279, 1
  %286 = icmp eq i32 %285, %195
  br i1 %286, label %287, label %276, !llvm.loop !589

287:                                              ; preds = %276
  %.lcssa1 = phi i64 [ %283, %276 ]
  %.lcssa = phi i64 [ %284, %276 ]
  %288 = trunc i64 %.lcssa1 to i32
  %289 = trunc i64 %.lcssa to i32
  br label %290

290:                                              ; preds = %287, %269
  %291 = phi i32 [ %271, %269 ], [ %288, %287 ]
  %292 = phi i32 [ %270, %269 ], [ %289, %287 ]
  %293 = add nsw i32 %235, %291
  %294 = add nsw i32 %236, %292
  %295 = add nuw nsw i32 %272, 1
  %296 = icmp eq i32 %295, %196
  br i1 %296, label %297, label %269, !llvm.loop !590

297:                                              ; preds = %290, %265
  %298 = phi i32 [ %267, %265 ], [ %293, %290 ]
  %299 = phi i32 [ %266, %265 ], [ %294, %290 ]
  %300 = add nsw i32 %238, %298
  %301 = add nsw i32 %299, %240
  %302 = add nuw nsw i32 %268, 1
  %303 = icmp eq i32 %302, %197
  br i1 %303, label %304, label %265, !llvm.loop !591

304:                                              ; preds = %297, %201, %192
  %305 = add nuw nsw i64 %174, 1
  %306 = load i32, ptr %161, align 8, !tbaa !21
  %307 = sext i32 %306 to i64
  %308 = icmp slt i64 %305, %307
  br i1 %308, label %173, label %309, !llvm.loop !592

309:                                              ; preds = %304
  %310 = load i32, ptr %132, align 8, !tbaa !45
  br label %311

311:                                              ; preds = %309, %135
  %312 = phi i32 [ %136, %135 ], [ %310, %309 ]
  %313 = add nuw nsw i64 %137, 1
  %314 = sext i32 %312 to i64
  %315 = icmp slt i64 %313, %314
  br i1 %315, label %135, label %316, !llvm.loop !593

316:                                              ; preds = %311, %129
  br i1 %117, label %116, label %317, !llvm.loop !594

317:                                              ; preds = %316
  %318 = load ptr, ptr %10, align 8, !tbaa !14
  %319 = call i32 @hypre_ComputePkgDestroy(ptr noundef %318) #33
  %320 = add nuw nsw i64 %63, 1
  %321 = icmp eq i64 %320, %60
  br i1 %321, label %322, label %62, !llvm.loop !595

322:                                              ; preds = %317, %9
  %323 = call i32 @hypre_SMGRelaxSetNewMatrixStencil(ptr noundef %0, ptr noundef nonnull %29) #33
  %324 = call i32 @hypre_StructStencilDestroy(ptr noundef %38) #33
  %325 = call i32 @hypre_StructMatrixAssemble(ptr noundef %4) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %20) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %19) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %18) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_SMGCreateRAPOp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !250
  %7 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %6, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !37
  switch i32 %8, label %13 [
    i32 2, label %9
    i32 3, label %11
  ]

9:                                                ; preds = %4
  %10 = tail call ptr @hypre_SMG2CreateRAPOp(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3) #33
  br label %13

11:                                               ; preds = %4
  %12 = tail call ptr @hypre_SMG3CreateRAPOp(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %2, ptr noundef %3) #33
  br label %13

13:                                               ; preds = %11, %9, %4
  %14 = phi ptr [ undef, %4 ], [ %12, %11 ], [ %10, %9 ]
  ret ptr %14
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGSetupRAPOp(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #0 {
  %7 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !250
  %9 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %8, i64 0, i32 3
  %10 = load i32, ptr %9, align 8, !tbaa !37
  switch i32 %10, label %31 [
    i32 2, label %11
    i32 3, label %21
  ]

11:                                               ; preds = %6
  %12 = tail call i32 @hypre_SMG2BuildRAPSym(ptr noundef nonnull %1, ptr noundef %2, ptr noundef %0, ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  %13 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 10
  %14 = load i32, ptr %13, align 8, !tbaa !19
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = tail call i32 @hypre_SMG2BuildRAPNoSym(ptr noundef nonnull %1, ptr noundef %2, ptr noundef %0, ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  %18 = tail call i32 @hypre_SMG2RAPPeriodicNoSym(ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  br label %31

19:                                               ; preds = %11
  %20 = tail call i32 @hypre_SMG2RAPPeriodicSym(ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  br label %31

21:                                               ; preds = %6
  %22 = tail call i32 @hypre_SMG3BuildRAPSym(ptr noundef nonnull %1, ptr noundef %2, ptr noundef %0, ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  %23 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 10
  %24 = load i32, ptr %23, align 8, !tbaa !19
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = tail call i32 @hypre_SMG3BuildRAPNoSym(ptr noundef nonnull %1, ptr noundef %2, ptr noundef %0, ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  %28 = tail call i32 @hypre_SMG3RAPPeriodicNoSym(ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  br label %31

29:                                               ; preds = %21
  %30 = tail call i32 @hypre_SMG3RAPPeriodicSym(ptr noundef %3, ptr noundef %4, ptr noundef %5) #33
  br label %31

31:                                               ; preds = %29, %26, %19, %16, %6
  %32 = phi i32 [ 0, %6 ], [ %30, %29 ], [ %28, %26 ], [ %20, %19 ], [ %18, %16 ]
  %33 = tail call i32 @hypre_StructMatrixAssemble(ptr noundef %3) #33
  ret i32 %32
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_SMGSolve(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #0 {
  %5 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 2
  %6 = load double, ptr %5, align 8, !tbaa !364
  %7 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !385
  %9 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 4
  %10 = load i32, ptr %9, align 4, !tbaa !386
  %11 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 5
  %12 = load i32, ptr %11, align 8, !tbaa !387
  %13 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 7
  %14 = load i32, ptr %13, align 8, !tbaa !368
  %15 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 8
  %16 = load i32, ptr %15, align 4, !tbaa !388
  %17 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 9
  %18 = load i32, ptr %17, align 8, !tbaa !389
  %19 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 11
  %20 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 12
  %21 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 16
  %22 = load ptr, ptr %21, align 8, !tbaa !377
  %23 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 17
  %24 = load ptr, ptr %23, align 8, !tbaa !381
  %25 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 18
  %26 = load ptr, ptr %25, align 8, !tbaa !382
  %27 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 19
  %28 = load ptr, ptr %27, align 8, !tbaa !378
  %29 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 20
  %30 = load ptr, ptr %29, align 8, !tbaa !379
  %31 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 23
  %32 = load ptr, ptr %31, align 8, !tbaa !583
  %33 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 24
  %34 = load ptr, ptr %33, align 8, !tbaa !584
  %35 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 25
  %36 = load ptr, ptr %35, align 8, !tbaa !369
  %37 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 26
  %38 = load ptr, ptr %37, align 8, !tbaa !370
  %39 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 27
  %40 = load ptr, ptr %39, align 8, !tbaa !371
  %41 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 28
  %42 = load ptr, ptr %41, align 8, !tbaa !372
  %43 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 31
  %44 = load i32, ptr %43, align 8, !tbaa !365
  %45 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 32
  %46 = load ptr, ptr %45, align 8, !tbaa !366
  %47 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 33
  %48 = load ptr, ptr %47, align 8, !tbaa !367
  %49 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 30
  %50 = load i32, ptr %49, align 4, !tbaa !362
  %51 = tail call i32 @hypre_BeginTiming(i32 noundef %50) #33
  %52 = load ptr, ptr %22, align 8, !tbaa !14
  %53 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %52) #33
  %54 = load ptr, ptr %28, align 8, !tbaa !14
  %55 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %54) #33
  %56 = load ptr, ptr %30, align 8, !tbaa !14
  %57 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %56) #33
  %58 = tail call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %58, ptr %22, align 8, !tbaa !14
  %59 = tail call ptr @hypre_StructVectorRef(ptr noundef %2) #33
  store ptr %59, ptr %28, align 8, !tbaa !14
  %60 = tail call ptr @hypre_StructVectorRef(ptr noundef %3) #33
  store ptr %60, ptr %30, align 8, !tbaa !14
  %61 = getelementptr inbounds %struct.hypre_SMGData, ptr %0, i64 0, i32 29
  store i32 0, ptr %61, align 8, !tbaa !391
  %62 = icmp eq i32 %8, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %4
  %64 = icmp eq i32 %12, 0
  br i1 %64, label %278, label %65

65:                                               ; preds = %63
  %66 = tail call i32 @hypre_StructVectorSetConstantValues(ptr noundef %3, double noundef 0.000000e+00) #33
  br label %278

67:                                               ; preds = %4
  %68 = fcmp ule double %6, 0.000000e+00
  br i1 %68, label %78, label %69

69:                                               ; preds = %67
  %70 = load ptr, ptr %28, align 8, !tbaa !14
  %71 = tail call double @hypre_StructInnerProd(ptr noundef %70, ptr noundef %70) #33
  %72 = fmul double %6, %6
  %73 = fcmp oeq double %71, 0.000000e+00
  br i1 %73, label %74, label %78

74:                                               ; preds = %69
  %75 = tail call i32 @hypre_StructVectorSetConstantValues(ptr noundef %3, double noundef 0.000000e+00) #33
  %76 = icmp sgt i32 %44, 0
  br i1 %76, label %77, label %278

77:                                               ; preds = %74
  store double 0.000000e+00, ptr %46, align 8, !tbaa !29
  store double 0.000000e+00, ptr %48, align 8, !tbaa !29
  br label %278

78:                                               ; preds = %69, %67
  %79 = phi double [ %71, %69 ], [ undef, %67 ]
  %80 = phi double [ %72, %69 ], [ undef, %67 ]
  %81 = icmp sgt i32 %8, 0
  br i1 %81, label %82, label %278

82:                                               ; preds = %78
  %83 = icmp slt i32 %14, 2
  %84 = icmp sgt i32 %44, 0
  %85 = fcmp ogt double %79, 0.000000e+00
  %86 = icmp eq i32 %10, 0
  %87 = getelementptr inbounds ptr, ptr %28, i64 1
  %88 = add i32 %14, -2
  %89 = icmp slt i32 %14, 3
  %90 = icmp sgt i32 %14, 2
  %91 = getelementptr inbounds ptr, ptr %30, i64 1
  %92 = select i1 %68, i1 true, i1 %86
  %93 = or i1 %92, %83
  %94 = add i32 %14, -1
  %95 = zext i32 %88 to i64
  %96 = zext i32 %8 to i64
  %97 = zext i32 %94 to i64
  %98 = zext i32 %94 to i64
  %99 = getelementptr inbounds ptr, ptr %36, i64 %98
  %100 = getelementptr inbounds ptr, ptr %22, i64 %98
  %101 = getelementptr inbounds ptr, ptr %28, i64 %98
  %102 = getelementptr inbounds ptr, ptr %30, i64 %98
  br label %103

103:                                              ; preds = %263, %82
  %104 = phi i64 [ 0, %82 ], [ %275, %263 ]
  %105 = phi double [ undef, %82 ], [ %264, %263 ]
  %106 = phi double [ undef, %82 ], [ %265, %263 ]
  %107 = phi i32 [ %12, %82 ], [ 0, %263 ]
  br i1 %83, label %113, label %108

108:                                              ; preds = %103
  %109 = load ptr, ptr %36, align 8, !tbaa !14
  %110 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %109, i32 noundef 0, i32 noundef 0) #33
  %111 = load ptr, ptr %36, align 8, !tbaa !14
  %112 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %111, i32 noundef 1, i32 noundef 1) #33
  br label %113

113:                                              ; preds = %108, %103
  %114 = load ptr, ptr %36, align 8, !tbaa !14
  %115 = tail call i32 @hypre_SMGRelaxSetMaxIter(ptr noundef %114, i32 noundef %16) #33
  %116 = load ptr, ptr %36, align 8, !tbaa !14
  %117 = tail call i32 @hypre_SMGRelaxSetZeroGuess(ptr noundef %116, i32 noundef %107) #33
  %118 = load ptr, ptr %36, align 8, !tbaa !14
  %119 = load ptr, ptr %22, align 8, !tbaa !14
  %120 = load ptr, ptr %28, align 8, !tbaa !14
  %121 = load ptr, ptr %30, align 8, !tbaa !14
  %122 = tail call i32 @hypre_SMGRelax(ptr noundef %118, ptr noundef %119, ptr noundef %120, ptr noundef %121) #33
  %123 = load ptr, ptr %38, align 8, !tbaa !14
  %124 = load ptr, ptr %22, align 8, !tbaa !14
  %125 = load ptr, ptr %30, align 8, !tbaa !14
  %126 = load ptr, ptr %28, align 8, !tbaa !14
  %127 = load ptr, ptr %32, align 8, !tbaa !14
  %128 = tail call i32 @hypre_SMGResidual(ptr noundef %123, ptr noundef %124, ptr noundef %125, ptr noundef %126, ptr noundef %127) #33
  br i1 %68, label %150, label %129

129:                                              ; preds = %113
  %130 = load ptr, ptr %32, align 8, !tbaa !14
  %131 = tail call double @hypre_StructInnerProd(ptr noundef %130, ptr noundef %130) #33
  br i1 %84, label %132, label %141

132:                                              ; preds = %129
  %133 = tail call double @sqrt(double noundef %131) #33
  %134 = getelementptr inbounds double, ptr %46, i64 %104
  store double %133, ptr %134, align 8, !tbaa !29
  br i1 %85, label %135, label %138

135:                                              ; preds = %132
  %136 = fdiv double %131, %79
  %137 = tail call double @sqrt(double noundef %136) #33
  br label %138

138:                                              ; preds = %135, %132
  %139 = phi double [ %137, %135 ], [ 0.000000e+00, %132 ]
  %140 = getelementptr inbounds double, ptr %48, i64 %104
  store double %139, ptr %140, align 8, !tbaa !29
  br label %141

141:                                              ; preds = %138, %129
  %142 = fdiv double %131, %79
  %143 = fcmp olt double %142, %80
  %144 = icmp ne i64 %104, 0
  %145 = and i1 %144, %143
  br i1 %145, label %146, label %150

146:                                              ; preds = %141
  %147 = fdiv double %106, %105
  %148 = fcmp olt double %147, %80
  %149 = select i1 %86, i1 true, i1 %148
  br i1 %149, label %278, label %150

150:                                              ; preds = %146, %141, %113
  br i1 %83, label %151, label %154

151:                                              ; preds = %150
  %152 = select i1 %92, double %105, double 1.000000e+00
  %153 = select i1 %92, double %106, double 0.000000e+00
  br label %263

154:                                              ; preds = %150
  %155 = load ptr, ptr %40, align 8, !tbaa !14
  %156 = load ptr, ptr %26, align 8, !tbaa !14
  %157 = load ptr, ptr %32, align 8, !tbaa !14
  %158 = load ptr, ptr %87, align 8, !tbaa !14
  %159 = tail call i32 @hypre_SemiRestrict(ptr noundef %155, ptr noundef %156, ptr noundef %157, ptr noundef %158) #33
  br i1 %89, label %197, label %160

160:                                              ; preds = %160, %154
  %161 = phi i64 [ %192, %160 ], [ 1, %154 ]
  %162 = getelementptr inbounds ptr, ptr %36, i64 %161
  %163 = load ptr, ptr %162, align 8, !tbaa !14
  %164 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %163, i32 noundef 0, i32 noundef 0) #33
  %165 = load ptr, ptr %162, align 8, !tbaa !14
  %166 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %165, i32 noundef 1, i32 noundef 1) #33
  %167 = load ptr, ptr %162, align 8, !tbaa !14
  %168 = tail call i32 @hypre_SMGRelaxSetMaxIter(ptr noundef %167, i32 noundef %16) #33
  %169 = load ptr, ptr %162, align 8, !tbaa !14
  %170 = tail call i32 @hypre_SMGRelaxSetZeroGuess(ptr noundef %169, i32 noundef 1) #33
  %171 = load ptr, ptr %162, align 8, !tbaa !14
  %172 = getelementptr inbounds ptr, ptr %22, i64 %161
  %173 = load ptr, ptr %172, align 8, !tbaa !14
  %174 = getelementptr inbounds ptr, ptr %28, i64 %161
  %175 = load ptr, ptr %174, align 8, !tbaa !14
  %176 = getelementptr inbounds ptr, ptr %30, i64 %161
  %177 = load ptr, ptr %176, align 8, !tbaa !14
  %178 = tail call i32 @hypre_SMGRelax(ptr noundef %171, ptr noundef %173, ptr noundef %175, ptr noundef %177) #33
  %179 = getelementptr inbounds ptr, ptr %38, i64 %161
  %180 = load ptr, ptr %179, align 8, !tbaa !14
  %181 = load ptr, ptr %172, align 8, !tbaa !14
  %182 = load ptr, ptr %176, align 8, !tbaa !14
  %183 = load ptr, ptr %174, align 8, !tbaa !14
  %184 = getelementptr inbounds ptr, ptr %32, i64 %161
  %185 = load ptr, ptr %184, align 8, !tbaa !14
  %186 = tail call i32 @hypre_SMGResidual(ptr noundef %180, ptr noundef %181, ptr noundef %182, ptr noundef %183, ptr noundef %185) #33
  %187 = getelementptr inbounds ptr, ptr %40, i64 %161
  %188 = load ptr, ptr %187, align 8, !tbaa !14
  %189 = getelementptr inbounds ptr, ptr %26, i64 %161
  %190 = load ptr, ptr %189, align 8, !tbaa !14
  %191 = load ptr, ptr %184, align 8, !tbaa !14
  %192 = add nuw nsw i64 %161, 1
  %193 = getelementptr inbounds ptr, ptr %28, i64 %192
  %194 = load ptr, ptr %193, align 8, !tbaa !14
  %195 = tail call i32 @hypre_SemiRestrict(ptr noundef %188, ptr noundef %190, ptr noundef %191, ptr noundef %194) #33
  %196 = icmp eq i64 %192, %97
  br i1 %196, label %197, label %160, !llvm.loop !596

197:                                              ; preds = %160, %154
  %198 = load ptr, ptr %99, align 8, !tbaa !14
  %199 = tail call i32 @hypre_SMGRelaxSetZeroGuess(ptr noundef %198, i32 noundef 1) #33
  %200 = load ptr, ptr %99, align 8, !tbaa !14
  %201 = load ptr, ptr %100, align 8, !tbaa !14
  %202 = load ptr, ptr %101, align 8, !tbaa !14
  %203 = load ptr, ptr %102, align 8, !tbaa !14
  %204 = tail call i32 @hypre_SMGRelax(ptr noundef %200, ptr noundef %201, ptr noundef %202, ptr noundef %203) #33
  br i1 %90, label %205, label %239

205:                                              ; preds = %205, %197
  %206 = phi i64 [ %237, %205 ], [ %95, %197 ]
  %207 = getelementptr inbounds ptr, ptr %42, i64 %206
  %208 = load ptr, ptr %207, align 8, !tbaa !14
  %209 = getelementptr inbounds ptr, ptr %24, i64 %206
  %210 = load ptr, ptr %209, align 8, !tbaa !14
  %211 = add nuw nsw i64 %206, 1
  %212 = getelementptr inbounds ptr, ptr %30, i64 %211
  %213 = load ptr, ptr %212, align 8, !tbaa !14
  %214 = getelementptr inbounds ptr, ptr %34, i64 %206
  %215 = load ptr, ptr %214, align 8, !tbaa !14
  %216 = tail call i32 @hypre_SemiInterp(ptr noundef %208, ptr noundef %210, ptr noundef %213, ptr noundef %215) #33
  %217 = load ptr, ptr %214, align 8, !tbaa !14
  %218 = getelementptr inbounds ptr, ptr %30, i64 %206
  %219 = load ptr, ptr %218, align 8, !tbaa !14
  %220 = tail call i32 @hypre_StructAxpy(double noundef 1.000000e+00, ptr noundef %217, ptr noundef %219) #33
  %221 = getelementptr inbounds ptr, ptr %36, i64 %206
  %222 = load ptr, ptr %221, align 8, !tbaa !14
  %223 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %222, i32 noundef 0, i32 noundef 1) #33
  %224 = load ptr, ptr %221, align 8, !tbaa !14
  %225 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %224, i32 noundef 1, i32 noundef 0) #33
  %226 = load ptr, ptr %221, align 8, !tbaa !14
  %227 = tail call i32 @hypre_SMGRelaxSetMaxIter(ptr noundef %226, i32 noundef %18) #33
  %228 = load ptr, ptr %221, align 8, !tbaa !14
  %229 = tail call i32 @hypre_SMGRelaxSetZeroGuess(ptr noundef %228, i32 noundef 0) #33
  %230 = load ptr, ptr %221, align 8, !tbaa !14
  %231 = getelementptr inbounds ptr, ptr %22, i64 %206
  %232 = load ptr, ptr %231, align 8, !tbaa !14
  %233 = getelementptr inbounds ptr, ptr %28, i64 %206
  %234 = load ptr, ptr %233, align 8, !tbaa !14
  %235 = load ptr, ptr %218, align 8, !tbaa !14
  %236 = tail call i32 @hypre_SMGRelax(ptr noundef %230, ptr noundef %232, ptr noundef %234, ptr noundef %235) #33
  %237 = add nsw i64 %206, -1
  %238 = icmp sgt i64 %206, 1
  br i1 %238, label %205, label %239, !llvm.loop !597

239:                                              ; preds = %205, %197
  %240 = load ptr, ptr %42, align 8, !tbaa !14
  %241 = load ptr, ptr %24, align 8, !tbaa !14
  %242 = load ptr, ptr %91, align 8, !tbaa !14
  %243 = load ptr, ptr %34, align 8, !tbaa !14
  %244 = tail call i32 @hypre_SemiInterp(ptr noundef %240, ptr noundef %241, ptr noundef %242, ptr noundef %243) #33
  %245 = load ptr, ptr %34, align 8, !tbaa !14
  %246 = load ptr, ptr %30, align 8, !tbaa !14
  %247 = tail call i32 @hypre_SMGAxpy(double noundef 1.000000e+00, ptr noundef %245, ptr noundef %246, ptr noundef nonnull %19, ptr noundef nonnull %20) #33
  br i1 %93, label %253, label %248

248:                                              ; preds = %239
  %249 = load ptr, ptr %34, align 8, !tbaa !14
  %250 = tail call double @hypre_StructInnerProd(ptr noundef %249, ptr noundef %249) #33
  %251 = load ptr, ptr %30, align 8, !tbaa !14
  %252 = tail call double @hypre_StructInnerProd(ptr noundef %251, ptr noundef %251) #33
  br label %256

253:                                              ; preds = %239
  %254 = select i1 %92, double %105, double 1.000000e+00
  %255 = select i1 %92, double %106, double 0.000000e+00
  br i1 %83, label %263, label %256

256:                                              ; preds = %253, %248
  %257 = phi double [ %252, %248 ], [ %254, %253 ]
  %258 = phi double [ %250, %248 ], [ %255, %253 ]
  %259 = load ptr, ptr %36, align 8, !tbaa !14
  %260 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %259, i32 noundef 0, i32 noundef 1) #33
  %261 = load ptr, ptr %36, align 8, !tbaa !14
  %262 = tail call i32 @hypre_SMGRelaxSetRegSpaceRank(ptr noundef %261, i32 noundef 1, i32 noundef 0) #33
  br label %263

263:                                              ; preds = %256, %253, %151
  %264 = phi double [ %257, %256 ], [ %254, %253 ], [ %152, %151 ]
  %265 = phi double [ %258, %256 ], [ %255, %253 ], [ %153, %151 ]
  %266 = load ptr, ptr %36, align 8, !tbaa !14
  %267 = tail call i32 @hypre_SMGRelaxSetMaxIter(ptr noundef %266, i32 noundef %18) #33
  %268 = load ptr, ptr %36, align 8, !tbaa !14
  %269 = tail call i32 @hypre_SMGRelaxSetZeroGuess(ptr noundef %268, i32 noundef 0) #33
  %270 = load ptr, ptr %36, align 8, !tbaa !14
  %271 = load ptr, ptr %22, align 8, !tbaa !14
  %272 = load ptr, ptr %28, align 8, !tbaa !14
  %273 = load ptr, ptr %30, align 8, !tbaa !14
  %274 = tail call i32 @hypre_SMGRelax(ptr noundef %270, ptr noundef %271, ptr noundef %272, ptr noundef %273) #33
  %275 = add nuw nsw i64 %104, 1
  %276 = trunc i64 %275 to i32
  store i32 %276, ptr %61, align 8, !tbaa !391
  %277 = icmp eq i64 %275, %96
  br i1 %277, label %278, label %103, !llvm.loop !598

278:                                              ; preds = %263, %146, %78, %77, %74, %65, %63
  %279 = load i32, ptr %49, align 4, !tbaa !362
  %280 = tail call i32 @hypre_EndTiming(i32 noundef %279) #33
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructAxpy(double noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #0 {
  %4 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  %5 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !39
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !20
  %9 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %8, i64 0, i32 1
  %10 = load i32, ptr %9, align 8, !tbaa !21
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %160

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 2
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %15 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 3
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 6
  %17 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 3
  %18 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 6
  %19 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %20 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  br label %21

21:                                               ; preds = %155, %12
  %22 = phi i64 [ 0, %12 ], [ %156, %155 ]
  %23 = load ptr, ptr %8, align 8, !tbaa !23
  %24 = getelementptr inbounds %struct.hypre_Box_struct, ptr %23, i64 %22
  %25 = load ptr, ptr %13, align 8, !tbaa !25
  %26 = load ptr, ptr %25, align 8, !tbaa !23
  %27 = load ptr, ptr %14, align 8, !tbaa !25
  %28 = load ptr, ptr %27, align 8, !tbaa !23
  %29 = load ptr, ptr %15, align 8, !tbaa !27
  %30 = load ptr, ptr %16, align 8, !tbaa !28
  %31 = getelementptr inbounds i32, ptr %30, i64 %22
  %32 = load i32, ptr %31, align 4, !tbaa !7
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, ptr %29, i64 %33
  %35 = load ptr, ptr %17, align 8, !tbaa !27
  %36 = load ptr, ptr %18, align 8, !tbaa !28
  %37 = getelementptr inbounds i32, ptr %36, i64 %22
  %38 = load i32, ptr %37, align 4, !tbaa !7
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, ptr %35, i64 %39
  %41 = call i32 @hypre_BoxGetSize(ptr noundef %24, ptr noundef nonnull %4) #33
  %42 = load i32, ptr %4, align 4, !tbaa !7
  %43 = load i32, ptr %19, align 4, !tbaa !7
  %44 = load i32, ptr %20, align 4, !tbaa !7
  %45 = call i32 @llvm.smax.i32(i32 %43, i32 %42)
  %46 = call i32 @llvm.smax.i32(i32 %44, i32 %45)
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %155

48:                                               ; preds = %21
  %49 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %22
  %50 = load i32, ptr %49, align 4, !tbaa !7
  %51 = getelementptr inbounds [3 x i32], ptr %49, i64 0, i64 1
  %52 = load i32, ptr %51, align 4, !tbaa !7
  %53 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %22, i32 1, i64 1
  %54 = load i32, ptr %53, align 4, !tbaa !7
  %55 = sub nsw i32 %54, %52
  %56 = icmp slt i32 %55, 0
  %57 = add nsw i32 %55, 1
  %58 = select i1 %56, i32 0, i32 %57
  %59 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %22, i32 1
  %60 = load i32, ptr %59, align 4, !tbaa !7
  %61 = sub nsw i32 %60, %50
  %62 = icmp slt i32 %61, 0
  %63 = add nsw i32 %61, 1
  %64 = select i1 %62, i32 0, i32 %63
  %65 = getelementptr inbounds %struct.hypre_Box_struct, ptr %26, i64 %22
  %66 = load i32, ptr %65, align 4, !tbaa !7
  %67 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 1
  %68 = load i32, ptr %67, align 4, !tbaa !7
  %69 = getelementptr inbounds %struct.hypre_Box_struct, ptr %26, i64 %22, i32 1, i64 1
  %70 = load i32, ptr %69, align 4, !tbaa !7
  %71 = sub nsw i32 %70, %68
  %72 = icmp slt i32 %71, 0
  %73 = add nsw i32 %71, 1
  %74 = select i1 %72, i32 0, i32 %73
  %75 = getelementptr inbounds %struct.hypre_Box_struct, ptr %26, i64 %22, i32 1
  %76 = load i32, ptr %75, align 4, !tbaa !7
  %77 = sub nsw i32 %76, %66
  %78 = icmp slt i32 %77, 0
  %79 = add nsw i32 %77, 1
  %80 = select i1 %78, i32 0, i32 %79
  %81 = icmp sgt i32 %44, 0
  %82 = icmp sgt i32 %43, 0
  %83 = icmp sgt i32 %42, 0
  %84 = sub i32 %80, %42
  %85 = sub i32 %64, %42
  %86 = sub i32 %74, %43
  %87 = mul i32 %86, %80
  %88 = sub i32 %58, %43
  %89 = mul i32 %64, %88
  br i1 %81, label %90, label %155

90:                                               ; preds = %48
  %91 = load i32, ptr %24, align 4, !tbaa !7
  %92 = sub i32 %91, %66
  %93 = getelementptr inbounds i32, ptr %24, i64 1
  %94 = load i32, ptr %93, align 4, !tbaa !7
  %95 = sub i32 %94, %68
  %96 = getelementptr inbounds i32, ptr %24, i64 2
  %97 = load i32, ptr %96, align 4, !tbaa !7
  %98 = getelementptr inbounds [3 x i32], ptr %65, i64 0, i64 2
  %99 = load i32, ptr %98, align 4, !tbaa !7
  %100 = sub nsw i32 %97, %99
  %101 = mul nsw i32 %74, %100
  %102 = add nsw i32 %95, %101
  %103 = mul nsw i32 %102, %80
  %104 = add nsw i32 %92, %103
  %105 = sub i32 %91, %50
  %106 = sub i32 %94, %52
  %107 = getelementptr inbounds [3 x i32], ptr %49, i64 0, i64 2
  %108 = load i32, ptr %107, align 4, !tbaa !7
  %109 = sub nsw i32 %97, %108
  %110 = mul nsw i32 %58, %109
  %111 = add nsw i32 %106, %110
  %112 = mul nsw i32 %111, %64
  %113 = add nsw i32 %105, %112
  br label %114

114:                                              ; preds = %148, %90
  %115 = phi i32 [ %151, %148 ], [ %104, %90 ]
  %116 = phi i32 [ %152, %148 ], [ %113, %90 ]
  %117 = phi i32 [ %153, %148 ], [ 0, %90 ]
  br i1 %82, label %118, label %148

118:                                              ; preds = %141, %114
  %119 = phi i32 [ %144, %141 ], [ %115, %114 ]
  %120 = phi i32 [ %145, %141 ], [ %116, %114 ]
  %121 = phi i32 [ %146, %141 ], [ 0, %114 ]
  br i1 %83, label %122, label %141

122:                                              ; preds = %118
  %123 = sext i32 %119 to i64
  %124 = sext i32 %120 to i64
  br label %125

125:                                              ; preds = %125, %122
  %126 = phi i64 [ %124, %122 ], [ %135, %125 ]
  %127 = phi i64 [ %123, %122 ], [ %134, %125 ]
  %128 = phi i32 [ 0, %122 ], [ %136, %125 ]
  %129 = getelementptr inbounds double, ptr %34, i64 %127
  %130 = load double, ptr %129, align 8, !tbaa !29
  %131 = getelementptr inbounds double, ptr %40, i64 %126
  %132 = load double, ptr %131, align 8, !tbaa !29
  %133 = call double @llvm.fmuladd.f64(double %0, double %130, double %132)
  store double %133, ptr %131, align 8, !tbaa !29
  %134 = add nsw i64 %127, 1
  %135 = add nsw i64 %126, 1
  %136 = add nuw nsw i32 %128, 1
  %137 = icmp eq i32 %136, %42
  br i1 %137, label %138, label %125, !llvm.loop !599

138:                                              ; preds = %125
  %.lcssa1 = phi i64 [ %134, %125 ]
  %.lcssa = phi i64 [ %135, %125 ]
  %139 = trunc i64 %.lcssa to i32
  %140 = trunc i64 %.lcssa1 to i32
  br label %141

141:                                              ; preds = %138, %118
  %142 = phi i32 [ %120, %118 ], [ %139, %138 ]
  %143 = phi i32 [ %119, %118 ], [ %140, %138 ]
  %144 = add nsw i32 %84, %143
  %145 = add nsw i32 %85, %142
  %146 = add nuw nsw i32 %121, 1
  %147 = icmp eq i32 %146, %43
  br i1 %147, label %148, label %118, !llvm.loop !600

148:                                              ; preds = %141, %114
  %149 = phi i32 [ %116, %114 ], [ %145, %141 ]
  %150 = phi i32 [ %115, %114 ], [ %144, %141 ]
  %151 = add nsw i32 %150, %87
  %152 = add nsw i32 %149, %89
  %153 = add nuw nsw i32 %117, 1
  %154 = icmp eq i32 %153, %44
  br i1 %154, label %155, label %114, !llvm.loop !601

155:                                              ; preds = %148, %48, %21
  %156 = add nuw nsw i64 %22, 1
  %157 = load i32, ptr %9, align 8, !tbaa !21
  %158 = sext i32 %157 to i64
  %159 = icmp slt i64 %156, %158
  br i1 %159, label %21, label %160, !llvm.loop !602

160:                                              ; preds = %155, %3
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructCopy(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #34
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !39
  %6 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %5, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !20
  %8 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !21
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %157

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 2
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %15 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 3
  %17 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 6
  %18 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 1
  %19 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 2
  br label %20

20:                                               ; preds = %152, %11
  %21 = phi i64 [ 0, %11 ], [ %153, %152 ]
  %22 = load ptr, ptr %7, align 8, !tbaa !23
  %23 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %21
  %24 = load ptr, ptr %12, align 8, !tbaa !25
  %25 = load ptr, ptr %24, align 8, !tbaa !23
  %26 = load ptr, ptr %13, align 8, !tbaa !25
  %27 = load ptr, ptr %26, align 8, !tbaa !23
  %28 = load ptr, ptr %14, align 8, !tbaa !27
  %29 = load ptr, ptr %15, align 8, !tbaa !28
  %30 = getelementptr inbounds i32, ptr %29, i64 %21
  %31 = load i32, ptr %30, align 4, !tbaa !7
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, ptr %28, i64 %32
  %34 = load ptr, ptr %16, align 8, !tbaa !27
  %35 = load ptr, ptr %17, align 8, !tbaa !28
  %36 = getelementptr inbounds i32, ptr %35, i64 %21
  %37 = load i32, ptr %36, align 4, !tbaa !7
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds double, ptr %34, i64 %38
  %40 = call i32 @hypre_BoxGetSize(ptr noundef %23, ptr noundef nonnull %3) #33
  %41 = load i32, ptr %3, align 4, !tbaa !7
  %42 = load i32, ptr %18, align 4, !tbaa !7
  %43 = load i32, ptr %19, align 4, !tbaa !7
  %44 = call i32 @llvm.smax.i32(i32 %42, i32 %41)
  %45 = call i32 @llvm.smax.i32(i32 %43, i32 %44)
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %152

47:                                               ; preds = %20
  %48 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 %21
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = getelementptr inbounds [3 x i32], ptr %48, i64 0, i64 1
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 %21, i32 1, i64 1
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = sub nsw i32 %53, %51
  %55 = icmp slt i32 %54, 0
  %56 = add nsw i32 %54, 1
  %57 = select i1 %55, i32 0, i32 %56
  %58 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 %21, i32 1
  %59 = load i32, ptr %58, align 4, !tbaa !7
  %60 = sub nsw i32 %59, %49
  %61 = icmp slt i32 %60, 0
  %62 = add nsw i32 %60, 1
  %63 = select i1 %61, i32 0, i32 %62
  %64 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 %21
  %65 = load i32, ptr %64, align 4, !tbaa !7
  %66 = getelementptr inbounds [3 x i32], ptr %64, i64 0, i64 1
  %67 = load i32, ptr %66, align 4, !tbaa !7
  %68 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 %21, i32 1, i64 1
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = sub nsw i32 %69, %67
  %71 = icmp slt i32 %70, 0
  %72 = add nsw i32 %70, 1
  %73 = select i1 %71, i32 0, i32 %72
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %25, i64 %21, i32 1
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = sub nsw i32 %75, %65
  %77 = icmp slt i32 %76, 0
  %78 = add nsw i32 %76, 1
  %79 = select i1 %77, i32 0, i32 %78
  %80 = icmp sgt i32 %43, 0
  %81 = icmp sgt i32 %42, 0
  %82 = icmp sgt i32 %41, 0
  %83 = sub i32 %79, %41
  %84 = sub i32 %63, %41
  %85 = sub i32 %73, %42
  %86 = mul i32 %85, %79
  %87 = sub i32 %57, %42
  %88 = mul i32 %63, %87
  br i1 %80, label %89, label %152

89:                                               ; preds = %47
  %90 = load i32, ptr %23, align 4, !tbaa !7
  %91 = sub i32 %90, %65
  %92 = getelementptr inbounds i32, ptr %23, i64 1
  %93 = load i32, ptr %92, align 4, !tbaa !7
  %94 = sub i32 %93, %67
  %95 = getelementptr inbounds i32, ptr %23, i64 2
  %96 = load i32, ptr %95, align 4, !tbaa !7
  %97 = getelementptr inbounds [3 x i32], ptr %64, i64 0, i64 2
  %98 = load i32, ptr %97, align 4, !tbaa !7
  %99 = sub nsw i32 %96, %98
  %100 = mul nsw i32 %73, %99
  %101 = add nsw i32 %94, %100
  %102 = mul nsw i32 %101, %79
  %103 = add nsw i32 %91, %102
  %104 = sub i32 %90, %49
  %105 = sub i32 %93, %51
  %106 = getelementptr inbounds [3 x i32], ptr %48, i64 0, i64 2
  %107 = load i32, ptr %106, align 4, !tbaa !7
  %108 = sub nsw i32 %96, %107
  %109 = mul nsw i32 %57, %108
  %110 = add nsw i32 %105, %109
  %111 = mul nsw i32 %110, %63
  %112 = add nsw i32 %104, %111
  br label %113

113:                                              ; preds = %145, %89
  %114 = phi i32 [ %148, %145 ], [ %103, %89 ]
  %115 = phi i32 [ %149, %145 ], [ %112, %89 ]
  %116 = phi i32 [ %150, %145 ], [ 0, %89 ]
  br i1 %81, label %117, label %145

117:                                              ; preds = %138, %113
  %118 = phi i32 [ %141, %138 ], [ %114, %113 ]
  %119 = phi i32 [ %142, %138 ], [ %115, %113 ]
  %120 = phi i32 [ %143, %138 ], [ 0, %113 ]
  br i1 %82, label %121, label %138

121:                                              ; preds = %117
  %122 = sext i32 %118 to i64
  %123 = sext i32 %119 to i64
  br label %124

124:                                              ; preds = %124, %121
  %125 = phi i64 [ %123, %121 ], [ %132, %124 ]
  %126 = phi i64 [ %122, %121 ], [ %131, %124 ]
  %127 = phi i32 [ 0, %121 ], [ %133, %124 ]
  %128 = getelementptr inbounds double, ptr %33, i64 %126
  %129 = load double, ptr %128, align 8, !tbaa !29
  %130 = getelementptr inbounds double, ptr %39, i64 %125
  store double %129, ptr %130, align 8, !tbaa !29
  %131 = add nsw i64 %126, 1
  %132 = add nsw i64 %125, 1
  %133 = add nuw nsw i32 %127, 1
  %134 = icmp eq i32 %133, %41
  br i1 %134, label %135, label %124, !llvm.loop !603

135:                                              ; preds = %124
  %.lcssa1 = phi i64 [ %131, %124 ]
  %.lcssa = phi i64 [ %132, %124 ]
  %136 = trunc i64 %.lcssa to i32
  %137 = trunc i64 %.lcssa1 to i32
  br label %138

138:                                              ; preds = %135, %117
  %139 = phi i32 [ %119, %117 ], [ %136, %135 ]
  %140 = phi i32 [ %118, %117 ], [ %137, %135 ]
  %141 = add nsw i32 %83, %140
  %142 = add nsw i32 %84, %139
  %143 = add nuw nsw i32 %120, 1
  %144 = icmp eq i32 %143, %42
  br i1 %144, label %145, label %117, !llvm.loop !604

145:                                              ; preds = %138, %113
  %146 = phi i32 [ %115, %113 ], [ %142, %138 ]
  %147 = phi i32 [ %114, %113 ], [ %141, %138 ]
  %148 = add nsw i32 %147, %86
  %149 = add nsw i32 %146, %88
  %150 = add nuw nsw i32 %116, 1
  %151 = icmp eq i32 %150, %43
  br i1 %151, label %152, label %113, !llvm.loop !605

152:                                              ; preds = %145, %47, %20
  %153 = add nuw nsw i64 %21, 1
  %154 = load i32, ptr %8, align 8, !tbaa !21
  %155 = sext i32 %154 to i64
  %156 = icmp slt i64 %153, %155
  br i1 %156, label %20, label %157, !llvm.loop !606

157:                                              ; preds = %152, %2
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructGridCreate(i32 noundef %0, i32 noundef %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = tail call ptr @hypre_MAlloc(i32 noundef 72) #33
  store i32 %0, ptr %4, align 8, !tbaa !92
  %5 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 1
  store i32 %1, ptr %5, align 4, !tbaa !11
  %6 = tail call ptr @hypre_BoxArrayCreate(i32 noundef 0) #33
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 2
  store ptr %6, ptr %7, align 8, !tbaa !20
  %8 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 3
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  store i32 2, ptr %9, align 8, !tbaa !96
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 6
  %11 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 10
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(28) %10, i8 0, i64 28, i1 false)
  store i32 1, ptr %11, align 4, !tbaa !607
  store ptr %4, ptr %2, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_StructGridRef(ptr noundef %0, ptr nocapture noundef writeonly %1) #7 {
  %3 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 10
  %4 = load i32, ptr %3, align 4, !tbaa !607
  %5 = add nsw i32 %4, 1
  store i32 %5, ptr %3, align 4, !tbaa !607
  store ptr %0, ptr %1, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructGridDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %20, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 10
  %5 = load i32, ptr %4, align 4, !tbaa !607
  %6 = add nsw i32 %5, -1
  store i32 %6, ptr %4, align 4, !tbaa !607
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 6
  %10 = load ptr, ptr %9, align 8, !tbaa !97
  %11 = tail call i32 @hypre_BoxDestroy(ptr noundef %10) #33
  %12 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !93
  %14 = tail call i32 @hypre_BoxNeighborsDestroy(ptr noundef %13) #33
  %15 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !195
  tail call void @hypre_Free(ptr noundef %16) #33
  store ptr null, ptr %15, align 8, !tbaa !195
  %17 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !20
  %19 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %18) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %20

20:                                               ; preds = %8, %3, %1
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_StructGridSetHoodInfo(ptr nocapture noundef writeonly %0, i32 noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 5
  store i32 %1, ptr %3, align 8, !tbaa !96
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal i32 @hypre_StructGridSetPeriodic(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #7 {
  %3 = load i32, ptr %1, align 4, !tbaa !7
  %4 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9
  store i32 %3, ptr %4, align 8, !tbaa !7
  %5 = getelementptr inbounds i32, ptr %1, i64 1
  %6 = load i32, ptr %5, align 4, !tbaa !7
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9, i64 1
  store i32 %6, ptr %7, align 4, !tbaa !7
  %8 = getelementptr inbounds i32, ptr %1, i64 2
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9, i64 2
  store i32 %9, ptr %10, align 8, !tbaa !7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructGridSetExtents(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call ptr @hypre_BoxCreate() #33
  %5 = tail call i32 @hypre_BoxSetExtents(ptr noundef %4, ptr noundef %1, ptr noundef %2) #33
  %6 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !20
  %8 = tail call i32 @hypre_AppendBox(ptr noundef %4, ptr noundef %7) #33
  %9 = tail call i32 @hypre_BoxDestroy(ptr noundef %4) #33
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructGridSetHood(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef %7) #0 {
  %9 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  %10 = tail call ptr @hypre_BoxArrayCreate(i32 noundef %5) #33
  %11 = shl i32 %5, 2
  %12 = tail call ptr @hypre_MAlloc(i32 noundef %11) #33
  %13 = icmp sgt i32 %5, 0
  br i1 %13, label %14, label %45

14:                                               ; preds = %8
  %15 = load ptr, ptr %1, align 8, !tbaa !23
  %16 = load ptr, ptr %10, align 8, !tbaa !23
  %17 = sext i32 %4 to i64
  %18 = zext i32 %5 to i64
  br label %19

19:                                               ; preds = %19, %14
  %20 = phi i64 [ 0, %14 ], [ %43, %19 ]
  %21 = add nsw i64 %20, %17
  %22 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds %struct.hypre_Box_struct, ptr %16, i64 %20
  store i32 %23, ptr %24, align 4, !tbaa !7
  %25 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 %21, i32 0, i64 1
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = getelementptr inbounds %struct.hypre_Box_struct, ptr %16, i64 %20, i32 0, i64 1
  store i32 %26, ptr %27, align 4, !tbaa !7
  %28 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 %21, i32 0, i64 2
  %29 = load i32, ptr %28, align 4, !tbaa !7
  %30 = getelementptr inbounds %struct.hypre_Box_struct, ptr %16, i64 %20, i32 0, i64 2
  store i32 %29, ptr %30, align 4, !tbaa !7
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 %21, i32 1
  %32 = load i32, ptr %31, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_Box_struct, ptr %16, i64 %20, i32 1
  store i32 %32, ptr %33, align 4, !tbaa !7
  %34 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 %21, i32 1, i64 1
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = getelementptr inbounds %struct.hypre_Box_struct, ptr %16, i64 %20, i32 1, i64 1
  store i32 %35, ptr %36, align 4, !tbaa !7
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 %21, i32 1, i64 2
  %38 = load i32, ptr %37, align 4, !tbaa !7
  %39 = getelementptr inbounds %struct.hypre_Box_struct, ptr %16, i64 %20, i32 1, i64 2
  store i32 %38, ptr %39, align 4, !tbaa !7
  %40 = getelementptr inbounds i32, ptr %3, i64 %21
  %41 = load i32, ptr %40, align 4, !tbaa !7
  %42 = getelementptr inbounds i32, ptr %12, i64 %20
  store i32 %41, ptr %42, align 4, !tbaa !7
  %43 = add nuw nsw i64 %20, 1
  %44 = icmp eq i64 %43, %18
  br i1 %44, label %45, label %19, !llvm.loop !608

45:                                               ; preds = %19, %8
  %46 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !20
  tail call void @hypre_Free(ptr noundef %47) #33
  store ptr null, ptr %46, align 8, !tbaa !20
  %48 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 3
  %49 = load ptr, ptr %48, align 8, !tbaa !195
  tail call void @hypre_Free(ptr noundef %49) #33
  store ptr %10, ptr %46, align 8, !tbaa !20
  store ptr %12, ptr %48, align 8, !tbaa !195
  %50 = call i32 @hypre_BoxNeighborsCreate(ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, ptr noundef nonnull %9) #33
  %51 = load ptr, ptr %9, align 8, !tbaa !14
  %52 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 4
  store ptr %51, ptr %52, align 8, !tbaa !93
  %53 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 6
  %54 = load ptr, ptr %53, align 8, !tbaa !97
  %55 = call i32 @hypre_BoxDestroy(ptr noundef %54) #33
  store ptr %7, ptr %53, align 8, !tbaa !97
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructGridAssemble(ptr nocapture noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !20
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8, !tbaa !93
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %146

12:                                               ; preds = %1
  %13 = load i32, ptr %0, align 8, !tbaa !92
  %14 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #34
  %16 = call i32 @hypre_GatherAllBoxes(i32 noundef %13, ptr noundef %8, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5) #35
  %17 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %8, i64 0, i32 1
  %18 = load i32, ptr %17, align 8, !tbaa !21
  %19 = tail call ptr @hypre_BoxCreate() #33
  %20 = icmp sgt i32 %15, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %12
  %22 = load ptr, ptr %3, align 8, !tbaa !14
  %23 = load ptr, ptr %22, align 8, !tbaa !23
  %24 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %22, i64 0, i32 1
  %25 = zext i32 %15 to i64
  br label %30

26:                                               ; preds = %52
  %27 = icmp slt i32 %15, 3
  br i1 %27, label %28, label %66

28:                                               ; preds = %26, %12
  %29 = sext i32 %15 to i64
  br label %59

30:                                               ; preds = %52, %21
  %31 = phi i64 [ 0, %21 ], [ %57, %52 ]
  %32 = getelementptr inbounds [3 x i32], ptr %23, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !7
  %34 = getelementptr inbounds %struct.hypre_Box_struct, ptr %23, i64 0, i32 1, i64 %31
  %35 = load i32, ptr %34, align 4, !tbaa !7
  %36 = load i32, ptr %24, align 8, !tbaa !21
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %52

38:                                               ; preds = %30
  %39 = zext i32 %36 to i64
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %50, %40 ]
  %42 = phi i32 [ %35, %38 ], [ %49, %40 ]
  %43 = phi i32 [ %33, %38 ], [ %46, %40 ]
  %44 = getelementptr inbounds %struct.hypre_Box_struct, ptr %32, i64 %41
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = tail call i32 @llvm.smin.i32(i32 %43, i32 %45)
  %47 = getelementptr inbounds %struct.hypre_Box_struct, ptr %23, i64 %41, i32 1, i64 %31
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = tail call i32 @llvm.smax.i32(i32 %42, i32 %48)
  %50 = add nuw nsw i64 %41, 1
  %51 = icmp eq i64 %50, %39
  br i1 %51, label %52, label %40, !llvm.loop !609

52:                                               ; preds = %40, %30
  %53 = phi i32 [ %33, %30 ], [ %46, %40 ]
  %54 = phi i32 [ %35, %30 ], [ %49, %40 ]
  %55 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 %31
  store i32 %53, ptr %55, align 4, !tbaa !7
  %56 = getelementptr inbounds %struct.hypre_Box_struct, ptr %19, i64 0, i32 1, i64 %31
  store i32 %54, ptr %56, align 4, !tbaa !7
  %57 = add nuw nsw i64 %31, 1
  %58 = icmp eq i64 %57, %25
  br i1 %58, label %26, label %30, !llvm.loop !610

59:                                               ; preds = %59, %28
  %60 = phi i64 [ %29, %28 ], [ %63, %59 ]
  %61 = getelementptr inbounds [3 x i32], ptr %19, i64 0, i64 %60
  store i32 0, ptr %61, align 4, !tbaa !7
  %62 = getelementptr inbounds %struct.hypre_Box_struct, ptr %19, i64 0, i32 1, i64 %60
  store i32 0, ptr %62, align 4, !tbaa !7
  %63 = add nsw i64 %60, 1
  %64 = and i64 %63, 4294967295
  %65 = icmp eq i64 %64, 3
  br i1 %65, label %66, label %59, !llvm.loop !611

66:                                               ; preds = %59, %26
  %67 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 6
  store ptr %19, ptr %67, align 8, !tbaa !97
  %68 = load ptr, ptr %3, align 8, !tbaa !14
  %69 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %68, i64 0, i32 1
  %70 = load i32, ptr %69, align 8, !tbaa !21
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %101

72:                                               ; preds = %66
  %73 = load ptr, ptr %68, align 8, !tbaa !23
  %74 = zext i32 %70 to i64
  br label %75

75:                                               ; preds = %75, %72
  %76 = phi i64 [ 0, %72 ], [ %99, %75 ]
  %77 = phi i32 [ 0, %72 ], [ %98, %75 ]
  %78 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %76
  %79 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %76, i32 1
  %80 = load <2 x i32>, ptr %79, align 4, !tbaa !7
  %81 = load <2 x i32>, ptr %78, align 4, !tbaa !7
  %82 = sub nsw <2 x i32> %80, %81
  %83 = add nsw <2 x i32> %82, <i32 1, i32 1>
  %84 = icmp slt <2 x i32> %82, zeroinitializer
  %85 = select <2 x i1> %84, <2 x i32> zeroinitializer, <2 x i32> %83
  %86 = extractelement <2 x i32> %85, i64 0
  %87 = extractelement <2 x i32> %85, i64 1
  %88 = mul nsw i32 %87, %86
  %89 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %76, i32 1, i64 2
  %90 = load i32, ptr %89, align 4, !tbaa !7
  %91 = getelementptr inbounds [3 x i32], ptr %78, i64 0, i64 2
  %92 = load i32, ptr %91, align 4, !tbaa !7
  %93 = sub nsw i32 %90, %92
  %94 = add nsw i32 %93, 1
  %95 = icmp slt i32 %93, 0
  %96 = select i1 %95, i32 0, i32 %94
  %97 = mul nsw i32 %88, %96
  %98 = add nsw i32 %97, %77
  %99 = add nuw nsw i64 %76, 1
  %100 = icmp eq i64 %99, %74
  br i1 %100, label %101, label %75, !llvm.loop !612

101:                                              ; preds = %75, %66
  %102 = phi i32 [ 0, %66 ], [ %98, %75 ]
  %103 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 8
  store i32 %102, ptr %103, align 4, !tbaa !613
  %104 = call i32 @hypre_StructGridPeriodicAllBoxes(ptr noundef nonnull %0, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull %6) #35
  %105 = load ptr, ptr %3, align 8, !tbaa !14
  %106 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %105, i64 0, i32 1
  %107 = load i32, ptr %106, align 8, !tbaa !21
  %108 = shl i32 %107, 2
  %109 = tail call ptr @hypre_MAlloc(i32 noundef %108) #33
  %110 = load i32, ptr %106, align 8, !tbaa !21
  %111 = icmp sgt i32 %110, 0
  br i1 %111, label %112, label %120

112:                                              ; preds = %112, %101
  %113 = phi i64 [ %116, %112 ], [ 0, %101 ]
  %114 = getelementptr inbounds i32, ptr %109, i64 %113
  %115 = trunc i64 %113 to i32
  store i32 %115, ptr %114, align 4, !tbaa !7
  %116 = add nuw nsw i64 %113, 1
  %117 = load i32, ptr %106, align 8, !tbaa !21
  %118 = sext i32 %117 to i64
  %119 = icmp slt i64 %116, %118
  br i1 %119, label %112, label %120, !llvm.loop !614

120:                                              ; preds = %112, %101
  %121 = load ptr, ptr %4, align 8, !tbaa !14
  %122 = load i32, ptr %5, align 4, !tbaa !7
  %123 = load i32, ptr %6, align 4, !tbaa !7
  %124 = call i32 @hypre_BoxNeighborsCreate(ptr noundef nonnull %105, ptr noundef %121, ptr noundef %109, i32 noundef %122, i32 noundef %18, i32 noundef %123, ptr noundef nonnull %2) #33
  %125 = load ptr, ptr %2, align 8, !tbaa !14
  store ptr %125, ptr %9, align 8, !tbaa !93
  %126 = load i32, ptr %17, align 8, !tbaa !21
  %127 = shl i32 %126, 2
  %128 = call ptr @hypre_MAlloc(i32 noundef %127) #33
  %129 = load i32, ptr %17, align 8, !tbaa !21
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %120
  %132 = sext i32 %122 to i64
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi i64 [ 0, %131 ], [ %139, %133 ]
  %135 = add nsw i64 %134, %132
  %136 = getelementptr inbounds i32, ptr %109, i64 %135
  %137 = load i32, ptr %136, align 4, !tbaa !7
  %138 = getelementptr inbounds i32, ptr %128, i64 %134
  store i32 %137, ptr %138, align 4, !tbaa !7
  %139 = add nuw nsw i64 %134, 1
  %140 = load i32, ptr %17, align 8, !tbaa !21
  %141 = sext i32 %140 to i64
  %142 = icmp slt i64 %139, %141
  br i1 %142, label %133, label %143, !llvm.loop !615

143:                                              ; preds = %133, %120
  %144 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 3
  store ptr %128, ptr %144, align 8, !tbaa !195
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #34
  %145 = load ptr, ptr %9, align 8, !tbaa !93
  br label %146

146:                                              ; preds = %143, %1
  %147 = phi ptr [ %145, %143 ], [ %10, %1 ]
  %148 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 5
  %149 = load i32, ptr %148, align 8, !tbaa !96
  %150 = call i32 @hypre_BoxNeighborsAssemble(ptr noundef %147, i32 noundef %149, i32 noundef 1) #33
  %151 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %8, i64 0, i32 1
  %152 = load i32, ptr %151, align 8, !tbaa !21
  %153 = icmp sgt i32 %152, 0
  br i1 %153, label %154, label %183

154:                                              ; preds = %146
  %155 = load ptr, ptr %8, align 8, !tbaa !23
  %156 = zext i32 %152 to i64
  br label %157

157:                                              ; preds = %157, %154
  %158 = phi i64 [ 0, %154 ], [ %181, %157 ]
  %159 = phi i32 [ 0, %154 ], [ %180, %157 ]
  %160 = getelementptr inbounds %struct.hypre_Box_struct, ptr %155, i64 %158
  %161 = getelementptr inbounds %struct.hypre_Box_struct, ptr %155, i64 %158, i32 1
  %162 = load <2 x i32>, ptr %161, align 4, !tbaa !7
  %163 = load <2 x i32>, ptr %160, align 4, !tbaa !7
  %164 = sub nsw <2 x i32> %162, %163
  %165 = add nsw <2 x i32> %164, <i32 1, i32 1>
  %166 = icmp slt <2 x i32> %164, zeroinitializer
  %167 = select <2 x i1> %166, <2 x i32> zeroinitializer, <2 x i32> %165
  %168 = extractelement <2 x i32> %167, i64 0
  %169 = extractelement <2 x i32> %167, i64 1
  %170 = mul nsw i32 %169, %168
  %171 = getelementptr inbounds %struct.hypre_Box_struct, ptr %155, i64 %158, i32 1, i64 2
  %172 = load i32, ptr %171, align 4, !tbaa !7
  %173 = getelementptr inbounds [3 x i32], ptr %160, i64 0, i64 2
  %174 = load i32, ptr %173, align 4, !tbaa !7
  %175 = sub nsw i32 %172, %174
  %176 = add nsw i32 %175, 1
  %177 = icmp slt i32 %175, 0
  %178 = select i1 %177, i32 0, i32 %176
  %179 = mul nsw i32 %170, %178
  %180 = add nsw i32 %179, %159
  %181 = add nuw nsw i64 %158, 1
  %182 = icmp eq i64 %181, %156
  br i1 %182, label %183, label %157, !llvm.loop !616

183:                                              ; preds = %157, %146
  %184 = phi i32 [ 0, %146 ], [ %180, %157 ]
  %185 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 7
  store i32 %184, ptr %185, align 8, !tbaa !617
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_GatherAllBoxes(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) #0 {
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #34
  %11 = call i32 @hypre_MPI_Comm_size(i32 noundef %0, ptr noundef nonnull %8) #33
  %12 = call i32 @hypre_MPI_Comm_rank(i32 noundef %0, ptr noundef nonnull %9) #33
  %13 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %1, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !21
  %15 = mul nsw i32 %14, 7
  store i32 %15, ptr %10, align 4, !tbaa !7
  %16 = load i32, ptr %8, align 4, !tbaa !7
  %17 = shl i32 %16, 2
  %18 = call ptr @hypre_MAlloc(i32 noundef %17) #33
  %19 = load i32, ptr %8, align 4, !tbaa !7
  %20 = shl i32 %19, 2
  %21 = call ptr @hypre_MAlloc(i32 noundef %20) #33
  %22 = call i32 @hypre_MPI_Allgather(ptr noundef nonnull %10, i32 noundef 1, i32 noundef 1, ptr noundef %18, i32 noundef 1, i32 noundef 1, i32 noundef %0) #33
  store i32 0, ptr %21, align 4, !tbaa !7
  %23 = load i32, ptr %18, align 4, !tbaa !7
  %24 = load i32, ptr %8, align 4, !tbaa !7
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %40

26:                                               ; preds = %26, %5
  %27 = phi i32 [ %34, %26 ], [ %23, %5 ]
  %28 = phi i32 [ %31, %26 ], [ 0, %5 ]
  %29 = phi i64 [ %36, %26 ], [ 1, %5 ]
  %30 = phi i32 [ %35, %26 ], [ %23, %5 ]
  %31 = add nsw i32 %27, %28
  %32 = getelementptr inbounds i32, ptr %21, i64 %29
  store i32 %31, ptr %32, align 4, !tbaa !7
  %33 = getelementptr inbounds i32, ptr %18, i64 %29
  %34 = load i32, ptr %33, align 4, !tbaa !7
  %35 = add nsw i32 %34, %30
  %36 = add nuw nsw i64 %29, 1
  %37 = load i32, ptr %8, align 4, !tbaa !7
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %36, %38
  br i1 %39, label %26, label %40, !llvm.loop !618

40:                                               ; preds = %26, %5
  %41 = phi i32 [ %23, %5 ], [ %35, %26 ]
  %42 = load i32, ptr %10, align 4, !tbaa !7
  %43 = shl i32 %42, 2
  %44 = call ptr @hypre_MAlloc(i32 noundef %43) #33
  %45 = shl i32 %41, 2
  %46 = call ptr @hypre_MAlloc(i32 noundef %45) #33
  %47 = load i32, ptr %13, align 8, !tbaa !21
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %80

49:                                               ; preds = %40
  %50 = load ptr, ptr %1, align 8, !tbaa !23
  br label %51

51:                                               ; preds = %75, %49
  %52 = phi i64 [ 0, %49 ], [ %76, %75 ]
  %53 = phi i32 [ 0, %49 ], [ %.lcssa1, %75 ]
  %54 = load i32, ptr %9, align 4, !tbaa !7
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds i32, ptr %44, i64 %55
  store i32 %54, ptr %56, align 4, !tbaa !7
  %57 = getelementptr inbounds %struct.hypre_Box_struct, ptr %50, i64 %52
  %58 = add nsw i32 %53, 1
  br label %59

59:                                               ; preds = %59, %51
  %60 = phi i64 [ %55, %51 ], [ %65, %59 ]
  %61 = phi i64 [ 0, %51 ], [ %71, %59 ]
  %62 = phi i32 [ %58, %51 ], [ %73, %59 ]
  %63 = getelementptr inbounds [3 x i32], ptr %57, i64 0, i64 %61
  %64 = load i32, ptr %63, align 4, !tbaa !7
  %65 = add nsw i64 %60, 2
  %66 = sext i32 %62 to i64
  %67 = getelementptr inbounds i32, ptr %44, i64 %66
  store i32 %64, ptr %67, align 4, !tbaa !7
  %68 = getelementptr inbounds %struct.hypre_Box_struct, ptr %50, i64 %52, i32 1, i64 %61
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = getelementptr inbounds i32, ptr %44, i64 %65
  store i32 %69, ptr %70, align 4, !tbaa !7
  %71 = add nuw nsw i64 %61, 1
  %72 = trunc i64 %60 to i32
  %73 = add i32 %72, 3
  %74 = icmp eq i64 %71, 3
  br i1 %74, label %75, label %59, !llvm.loop !619

75:                                               ; preds = %59
  %.lcssa1 = phi i32 [ %73, %59 ]
  %76 = add nuw nsw i64 %52, 1
  %77 = load i32, ptr %13, align 8, !tbaa !21
  %78 = sext i32 %77 to i64
  %79 = icmp slt i64 %76, %78
  br i1 %79, label %51, label %80, !llvm.loop !620

80:                                               ; preds = %75, %40
  %81 = load i32, ptr %10, align 4, !tbaa !7
  %82 = call i32 @hypre_MPI_Allgatherv(ptr noundef %44, i32 noundef %81, i32 noundef 1, ptr noundef %46, ptr noundef nonnull %18, ptr noundef nonnull %21, i32 noundef 1, i32 noundef %0) #33
  %83 = sdiv i32 %41, 7
  %84 = call ptr @hypre_BoxArrayCreate(i32 noundef %83) #33
  %85 = shl nsw i32 %83, 2
  %86 = call ptr @hypre_MAlloc(i32 noundef %85) #33
  %87 = call ptr @hypre_BoxCreate() #33
  %88 = icmp sgt i32 %41, 0
  br i1 %88, label %89, label %146

89:                                               ; preds = %80
  %90 = getelementptr inbounds [3 x i32], ptr %87, i64 0, i64 1
  %91 = getelementptr inbounds [3 x i32], ptr %87, i64 0, i64 2
  %92 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 0, i32 1
  %93 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 0, i32 1, i64 1
  %94 = getelementptr inbounds %struct.hypre_Box_struct, ptr %87, i64 0, i32 1, i64 2
  br label %95

95:                                               ; preds = %143, %89
  %96 = phi i64 [ 0, %89 ], [ %135, %143 ]
  %97 = phi i32 [ -1, %89 ], [ %144, %143 ]
  %98 = phi i32 [ 0, %89 ], [ %.lcssa, %143 ]
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, ptr %46, i64 %99
  %101 = load i32, ptr %100, align 4, !tbaa !7
  %102 = getelementptr inbounds i32, ptr %86, i64 %96
  store i32 %101, ptr %102, align 4, !tbaa !7
  %103 = add nsw i32 %98, 1
  br label %104

104:                                              ; preds = %104, %95
  %105 = phi i64 [ %99, %95 ], [ %108, %104 ]
  %106 = phi i64 [ 0, %95 ], [ %116, %104 ]
  %107 = phi i32 [ %103, %95 ], [ %118, %104 ]
  %108 = add nsw i64 %105, 2
  %109 = sext i32 %107 to i64
  %110 = getelementptr inbounds i32, ptr %46, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !7
  %112 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 %106
  store i32 %111, ptr %112, align 4, !tbaa !7
  %113 = getelementptr inbounds i32, ptr %46, i64 %108
  %114 = load i32, ptr %113, align 4, !tbaa !7
  %115 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 %106
  store i32 %114, ptr %115, align 4, !tbaa !7
  %116 = add nuw nsw i64 %106, 1
  %117 = trunc i64 %105 to i32
  %118 = add i32 %117, 3
  %119 = icmp eq i64 %116, 3
  br i1 %119, label %120, label %104, !llvm.loop !621

120:                                              ; preds = %104
  %.lcssa = phi i32 [ %118, %104 ]
  %121 = call i32 @hypre_BoxSetExtents(ptr noundef %87, ptr noundef nonnull %6, ptr noundef nonnull %7) #33
  %122 = load i32, ptr %87, align 4, !tbaa !7
  %123 = load ptr, ptr %84, align 8, !tbaa !23
  %124 = getelementptr inbounds %struct.hypre_Box_struct, ptr %123, i64 %96
  store i32 %122, ptr %124, align 4, !tbaa !7
  %125 = load i32, ptr %90, align 4, !tbaa !7
  %126 = getelementptr inbounds %struct.hypre_Box_struct, ptr %123, i64 %96, i32 0, i64 1
  store i32 %125, ptr %126, align 4, !tbaa !7
  %127 = load i32, ptr %91, align 4, !tbaa !7
  %128 = getelementptr inbounds %struct.hypre_Box_struct, ptr %123, i64 %96, i32 0, i64 2
  store i32 %127, ptr %128, align 4, !tbaa !7
  %129 = load i32, ptr %92, align 4, !tbaa !7
  %130 = getelementptr inbounds %struct.hypre_Box_struct, ptr %123, i64 %96, i32 1
  store i32 %129, ptr %130, align 4, !tbaa !7
  %131 = load i32, ptr %93, align 4, !tbaa !7
  %132 = getelementptr inbounds %struct.hypre_Box_struct, ptr %123, i64 %96, i32 1, i64 1
  store i32 %131, ptr %132, align 4, !tbaa !7
  %133 = load i32, ptr %94, align 4, !tbaa !7
  %134 = getelementptr inbounds %struct.hypre_Box_struct, ptr %123, i64 %96, i32 1, i64 2
  store i32 %133, ptr %134, align 4, !tbaa !7
  %135 = add nuw i64 %96, 1
  %136 = icmp slt i32 %97, 0
  br i1 %136, label %137, label %143

137:                                              ; preds = %120
  %138 = load i32, ptr %102, align 4, !tbaa !7
  %139 = load i32, ptr %9, align 4, !tbaa !7
  %140 = icmp eq i32 %138, %139
  %141 = trunc i64 %96 to i32
  %142 = select i1 %140, i32 %141, i32 %97
  br label %143

143:                                              ; preds = %137, %120
  %144 = phi i32 [ %97, %120 ], [ %142, %137 ]
  %145 = icmp slt i32 %.lcssa, %41
  br i1 %145, label %95, label %146, !llvm.loop !622

146:                                              ; preds = %143, %80
  %147 = phi i32 [ -1, %80 ], [ %144, %143 ]
  %148 = call i32 @hypre_BoxDestroy(ptr noundef %87) #33
  call void @hypre_Free(ptr noundef %44) #33
  call void @hypre_Free(ptr noundef %46) #33
  call void @hypre_Free(ptr noundef nonnull %18) #33
  call void @hypre_Free(ptr noundef nonnull %21) #33
  store ptr %84, ptr %2, align 8, !tbaa !14
  store ptr %86, ptr %3, align 8, !tbaa !14
  store i32 %147, ptr %4, align 4, !tbaa !7
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructGridPeriodicAllBoxes(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3, ptr nocapture noundef writeonly %4) #0 {
  %6 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9
  %7 = load i32, ptr %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9, i64 1
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %0, i64 0, i32 9, i64 2
  %11 = load i32, ptr %10, align 8, !tbaa !7
  %12 = icmp ne i32 %7, 0
  %13 = sext i1 %12 to i32
  %14 = icmp ne i32 %9, 0
  %15 = sext i1 %14 to i32
  %16 = icmp ne i32 %11, 0
  %17 = sext i1 %16 to i32
  %18 = or i32 %9, %7
  %19 = or i32 %18, %11
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %177, label %21

21:                                               ; preds = %5
  %22 = load ptr, ptr %1, align 8, !tbaa !14
  %23 = load ptr, ptr %2, align 8, !tbaa !14
  %24 = load i32, ptr %3, align 4, !tbaa !7
  %25 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %22, i64 0, i32 1
  %26 = load i32, ptr %25, align 8, !tbaa !21
  %27 = select i1 %12, i32 3, i32 1
  %28 = select i1 %14, i32 3, i32 1
  %29 = mul nuw nsw i32 %28, %27
  %30 = select i1 %16, i32 3, i32 1
  %31 = mul nuw nsw i32 %29, %30
  %32 = mul nsw i32 %31, %26
  %33 = tail call ptr @hypre_BoxArrayCreate(i32 noundef %32) #33
  %34 = shl i32 %32, 2
  %35 = tail call ptr @hypre_MAlloc(i32 noundef %34) #33
  %36 = icmp sgt i32 %26, 0
  br i1 %36, label %37, label %171

37:                                               ; preds = %21
  %38 = zext i32 %26 to i64
  %39 = select i1 %16, i32 2, i32 1
  %40 = select i1 %14, i32 2, i32 1
  %41 = select i1 %12, i32 2, i32 1
  br label %42

42:                                               ; preds = %163, %37
  %43 = phi i32 [ %169, %163 ], [ 0, %37 ]
  %44 = phi i32 [ %.lcssa5.lcssa.lcssa, %163 ], [ 0, %37 ]
  %45 = phi i32 [ %.lcssa6.lcssa.lcssa, %163 ], [ 0, %37 ]
  %46 = phi i32 [ %168, %163 ], [ undef, %37 ]
  %47 = sext i32 %45 to i64
  %48 = getelementptr inbounds i32, ptr %23, i64 %47
  %49 = sext i32 %44 to i64
  %50 = add nsw i32 %45, 1
  %51 = tail call i32 @llvm.smax.i32(i32 %26, i32 %50)
  br label %52

52:                                               ; preds = %59, %42
  %53 = phi i64 [ %47, %42 ], [ %83, %59 ]
  %54 = phi i64 [ %49, %42 ], [ %82, %59 ]
  %55 = getelementptr inbounds i32, ptr %23, i64 %53
  %56 = load i32, ptr %55, align 4, !tbaa !7
  %57 = load i32, ptr %48, align 4, !tbaa !7
  %58 = icmp eq i32 %56, %57
  br i1 %58, label %59, label %85

59:                                               ; preds = %52
  %60 = load ptr, ptr %22, align 8, !tbaa !23
  %61 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %53
  %62 = load i32, ptr %61, align 4, !tbaa !7
  %63 = load ptr, ptr %33, align 8, !tbaa !23
  %64 = getelementptr inbounds %struct.hypre_Box_struct, ptr %63, i64 %54
  store i32 %62, ptr %64, align 4, !tbaa !7
  %65 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %53, i32 0, i64 1
  %66 = load i32, ptr %65, align 4, !tbaa !7
  %67 = getelementptr inbounds %struct.hypre_Box_struct, ptr %63, i64 %54, i32 0, i64 1
  store i32 %66, ptr %67, align 4, !tbaa !7
  %68 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %53, i32 0, i64 2
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = getelementptr inbounds %struct.hypre_Box_struct, ptr %63, i64 %54, i32 0, i64 2
  store i32 %69, ptr %70, align 4, !tbaa !7
  %71 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %53, i32 1
  %72 = load i32, ptr %71, align 4, !tbaa !7
  %73 = getelementptr inbounds %struct.hypre_Box_struct, ptr %63, i64 %54, i32 1
  store i32 %72, ptr %73, align 4, !tbaa !7
  %74 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %53, i32 1, i64 1
  %75 = load i32, ptr %74, align 4, !tbaa !7
  %76 = getelementptr inbounds %struct.hypre_Box_struct, ptr %63, i64 %54, i32 1, i64 1
  store i32 %75, ptr %76, align 4, !tbaa !7
  %77 = getelementptr inbounds %struct.hypre_Box_struct, ptr %60, i64 %53, i32 1, i64 2
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = getelementptr inbounds %struct.hypre_Box_struct, ptr %63, i64 %54, i32 1, i64 2
  store i32 %78, ptr %79, align 4, !tbaa !7
  %80 = load i32, ptr %55, align 4, !tbaa !7
  %81 = getelementptr inbounds i32, ptr %35, i64 %54
  store i32 %80, ptr %81, align 4, !tbaa !7
  %82 = add nsw i64 %54, 1
  %83 = add nsw i64 %53, 1
  %84 = icmp slt i64 %83, %38
  br i1 %84, label %52, label %87, !llvm.loop !623

85:                                               ; preds = %52
  %.lcssa2 = phi i64 [ %53, %52 ]
  %.lcssa = phi i64 [ %54, %52 ]
  %86 = trunc i64 %.lcssa2 to i32
  br label %87

87:                                               ; preds = %85, %59
  %88 = phi i32 [ %86, %85 ], [ %51, %59 ]
  %89 = phi i64 [ %.lcssa, %85 ], [ %82, %59 ]
  %90 = trunc i64 %89 to i32
  %91 = icmp sge i32 %45, %88
  %92 = sext i32 %88 to i64
  br label %93

93:                                               ; preds = %160, %87
  %94 = phi i32 [ %13, %87 ], [ %161, %160 ]
  %95 = phi i32 [ %90, %87 ], [ %.lcssa5.lcssa, %160 ]
  %96 = phi i32 [ %88, %87 ], [ %.lcssa6.lcssa, %160 ]
  %97 = mul nsw i32 %94, %7
  br label %98

98:                                               ; preds = %157, %93
  %99 = phi i32 [ %15, %93 ], [ %158, %157 ]
  %100 = phi i32 [ %95, %93 ], [ %.lcssa5, %157 ]
  %101 = phi i32 [ %96, %93 ], [ %.lcssa6, %157 ]
  %102 = or i32 %99, %94
  %103 = mul nsw i32 %99, %9
  br label %104

104:                                              ; preds = %152, %98
  %105 = phi i32 [ %17, %98 ], [ %155, %152 ]
  %106 = phi i32 [ %100, %98 ], [ %154, %152 ]
  %107 = phi i32 [ %101, %98 ], [ %153, %152 ]
  %108 = or i32 %102, %105
  %109 = icmp eq i32 %108, 0
  %110 = or i1 %109, %91
  %111 = select i1 %109, i32 %107, i32 %45
  br i1 %110, label %152, label %112

112:                                              ; preds = %104
  %113 = load ptr, ptr %33, align 8, !tbaa !23
  %114 = load ptr, ptr %22, align 8, !tbaa !23
  %115 = mul nsw i32 %105, %11
  %116 = sext i32 %106 to i64
  br label %117

117:                                              ; preds = %117, %112
  %118 = phi i64 [ %47, %112 ], [ %148, %117 ]
  %119 = phi i64 [ %116, %112 ], [ %147, %117 ]
  %120 = getelementptr inbounds %struct.hypre_Box_struct, ptr %113, i64 %119
  %121 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %118
  %122 = load i32, ptr %121, align 4, !tbaa !7
  store i32 %122, ptr %120, align 4, !tbaa !7
  %123 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %118, i32 0, i64 1
  %124 = load i32, ptr %123, align 4, !tbaa !7
  %125 = getelementptr inbounds [3 x i32], ptr %120, i64 0, i64 1
  store i32 %124, ptr %125, align 4, !tbaa !7
  %126 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %118, i32 0, i64 2
  %127 = load i32, ptr %126, align 4, !tbaa !7
  %128 = getelementptr inbounds [3 x i32], ptr %120, i64 0, i64 2
  store i32 %127, ptr %128, align 4, !tbaa !7
  %129 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %118, i32 1
  %130 = load i32, ptr %129, align 4, !tbaa !7
  %131 = getelementptr inbounds %struct.hypre_Box_struct, ptr %113, i64 %119, i32 1
  store i32 %130, ptr %131, align 4, !tbaa !7
  %132 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %118, i32 1, i64 1
  %133 = load i32, ptr %132, align 4, !tbaa !7
  %134 = getelementptr inbounds %struct.hypre_Box_struct, ptr %113, i64 %119, i32 1, i64 1
  store i32 %133, ptr %134, align 4, !tbaa !7
  %135 = getelementptr inbounds %struct.hypre_Box_struct, ptr %114, i64 %118, i32 1, i64 2
  %136 = load i32, ptr %135, align 4, !tbaa !7
  %137 = getelementptr inbounds %struct.hypre_Box_struct, ptr %113, i64 %119, i32 1, i64 2
  %138 = add nsw i32 %122, %97
  store i32 %138, ptr %120, align 4, !tbaa !7
  %139 = add nsw i32 %124, %103
  store i32 %139, ptr %125, align 4, !tbaa !7
  %140 = add nsw i32 %127, %115
  store i32 %140, ptr %128, align 4, !tbaa !7
  %141 = add nsw i32 %130, %97
  store i32 %141, ptr %131, align 4, !tbaa !7
  %142 = add nsw i32 %133, %103
  store i32 %142, ptr %134, align 4, !tbaa !7
  %143 = add nsw i32 %136, %115
  store i32 %143, ptr %137, align 4, !tbaa !7
  %144 = getelementptr inbounds i32, ptr %23, i64 %118
  %145 = load i32, ptr %144, align 4, !tbaa !7
  %146 = getelementptr inbounds i32, ptr %35, i64 %119
  store i32 %145, ptr %146, align 4, !tbaa !7
  %147 = add nsw i64 %119, 1
  %148 = add nsw i64 %118, 1
  %149 = icmp eq i64 %148, %92
  br i1 %149, label %150, label %117, !llvm.loop !624

150:                                              ; preds = %117
  %.lcssa4 = phi i64 [ %147, %117 ]
  %151 = trunc i64 %.lcssa4 to i32
  br label %152

152:                                              ; preds = %150, %104
  %153 = phi i32 [ %111, %104 ], [ %88, %150 ]
  %154 = phi i32 [ %106, %104 ], [ %151, %150 ]
  %155 = add nsw i32 %105, 1
  %156 = icmp eq i32 %155, %39
  br i1 %156, label %157, label %104, !llvm.loop !625

157:                                              ; preds = %152
  %.lcssa6 = phi i32 [ %153, %152 ]
  %.lcssa5 = phi i32 [ %154, %152 ]
  %158 = add nsw i32 %99, 1
  %159 = icmp eq i32 %158, %40
  br i1 %159, label %160, label %98, !llvm.loop !626

160:                                              ; preds = %157
  %.lcssa6.lcssa = phi i32 [ %.lcssa6, %157 ]
  %.lcssa5.lcssa = phi i32 [ %.lcssa5, %157 ]
  %161 = add nsw i32 %94, 1
  %162 = icmp eq i32 %161, %41
  br i1 %162, label %163, label %93, !llvm.loop !627

163:                                              ; preds = %160
  %.lcssa6.lcssa.lcssa = phi i32 [ %.lcssa6.lcssa, %160 ]
  %.lcssa5.lcssa.lcssa = phi i32 [ %.lcssa5.lcssa, %160 ]
  %164 = icmp eq i32 %45, %24
  %165 = add i32 %44, %88
  %166 = sub i32 %45, %165
  %167 = add i32 %166, %.lcssa5.lcssa.lcssa
  %168 = select i1 %164, i32 %44, i32 %46
  %169 = select i1 %164, i32 %167, i32 %43
  %170 = icmp slt i32 %.lcssa6.lcssa.lcssa, %26
  br i1 %170, label %42, label %171, !llvm.loop !628

171:                                              ; preds = %163, %21
  %172 = phi i32 [ undef, %21 ], [ %168, %163 ]
  %173 = phi i32 [ 0, %21 ], [ %.lcssa5.lcssa.lcssa, %163 ]
  %174 = phi i32 [ 0, %21 ], [ %169, %163 ]
  %175 = tail call i32 @hypre_BoxArraySetSize(ptr noundef %33, i32 noundef %173) #33
  %176 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %22) #33
  tail call void @hypre_Free(ptr noundef %23) #33
  store ptr %33, ptr %1, align 8, !tbaa !14
  store ptr %35, ptr %2, align 8, !tbaa !14
  store i32 %172, ptr %3, align 4, !tbaa !7
  br label %177

177:                                              ; preds = %171, %5
  %178 = phi i32 [ 0, %5 ], [ %174, %171 ]
  store i32 %178, ptr %4, align 4, !tbaa !7
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal double @hypre_StructInnerProd(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  %5 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !39
  %7 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !20
  %9 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %8, i64 0, i32 1
  %10 = load i32, ptr %9, align 8, !tbaa !21
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %172

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 2
  %15 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %17 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 3
  %18 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 6
  %19 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  %20 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  br label %21

21:                                               ; preds = %166, %12
  %22 = phi i64 [ 0, %12 ], [ %168, %166 ]
  %23 = phi double [ 0.000000e+00, %12 ], [ %167, %166 ]
  %24 = load ptr, ptr %8, align 8, !tbaa !23
  %25 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 %22
  %26 = load ptr, ptr %13, align 8, !tbaa !25
  %27 = load ptr, ptr %26, align 8, !tbaa !23
  %28 = load ptr, ptr %14, align 8, !tbaa !25
  %29 = load ptr, ptr %28, align 8, !tbaa !23
  %30 = load ptr, ptr %15, align 8, !tbaa !27
  %31 = load ptr, ptr %16, align 8, !tbaa !28
  %32 = getelementptr inbounds i32, ptr %31, i64 %22
  %33 = load i32, ptr %32, align 4, !tbaa !7
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds double, ptr %30, i64 %34
  %36 = load ptr, ptr %17, align 8, !tbaa !27
  %37 = load ptr, ptr %18, align 8, !tbaa !28
  %38 = getelementptr inbounds i32, ptr %37, i64 %22
  %39 = load i32, ptr %38, align 4, !tbaa !7
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, ptr %36, i64 %40
  %42 = call i32 @hypre_BoxGetSize(ptr noundef %25, ptr noundef nonnull %4) #33
  %43 = load i32, ptr %4, align 4, !tbaa !7
  %44 = load i32, ptr %19, align 4, !tbaa !7
  %45 = load i32, ptr %20, align 4, !tbaa !7
  %46 = call i32 @llvm.smax.i32(i32 %44, i32 %43)
  %47 = call i32 @llvm.smax.i32(i32 %45, i32 %46)
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %166

49:                                               ; preds = %21
  %50 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 %22
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = getelementptr inbounds [3 x i32], ptr %50, i64 0, i64 1
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 %22, i32 1, i64 1
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = sub nsw i32 %55, %53
  %57 = icmp slt i32 %56, 0
  %58 = add nsw i32 %56, 1
  %59 = select i1 %57, i32 0, i32 %58
  %60 = getelementptr inbounds %struct.hypre_Box_struct, ptr %29, i64 %22, i32 1
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = sub nsw i32 %61, %51
  %63 = icmp slt i32 %62, 0
  %64 = add nsw i32 %62, 1
  %65 = select i1 %63, i32 0, i32 %64
  %66 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 %22
  %67 = load i32, ptr %66, align 4, !tbaa !7
  %68 = getelementptr inbounds [3 x i32], ptr %66, i64 0, i64 1
  %69 = load i32, ptr %68, align 4, !tbaa !7
  %70 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 %22, i32 1, i64 1
  %71 = load i32, ptr %70, align 4, !tbaa !7
  %72 = sub nsw i32 %71, %69
  %73 = icmp slt i32 %72, 0
  %74 = add nsw i32 %72, 1
  %75 = select i1 %73, i32 0, i32 %74
  %76 = getelementptr inbounds %struct.hypre_Box_struct, ptr %27, i64 %22, i32 1
  %77 = load i32, ptr %76, align 4, !tbaa !7
  %78 = sub nsw i32 %77, %67
  %79 = icmp slt i32 %78, 0
  %80 = add nsw i32 %78, 1
  %81 = select i1 %79, i32 0, i32 %80
  %82 = icmp sgt i32 %45, 0
  %83 = icmp sgt i32 %44, 0
  %84 = icmp sgt i32 %43, 0
  %85 = sub i32 %81, %43
  %86 = sub i32 %65, %43
  %87 = sub i32 %75, %44
  %88 = mul i32 %87, %81
  %89 = sub i32 %59, %44
  %90 = mul i32 %65, %89
  br i1 %82, label %91, label %166

91:                                               ; preds = %49
  %92 = load i32, ptr %25, align 4, !tbaa !7
  %93 = sub i32 %92, %67
  %94 = getelementptr inbounds i32, ptr %25, i64 1
  %95 = load i32, ptr %94, align 4, !tbaa !7
  %96 = sub i32 %95, %69
  %97 = getelementptr inbounds i32, ptr %25, i64 2
  %98 = load i32, ptr %97, align 4, !tbaa !7
  %99 = getelementptr inbounds [3 x i32], ptr %66, i64 0, i64 2
  %100 = load i32, ptr %99, align 4, !tbaa !7
  %101 = sub nsw i32 %98, %100
  %102 = mul nsw i32 %75, %101
  %103 = add nsw i32 %96, %102
  %104 = mul nsw i32 %103, %81
  %105 = add nsw i32 %93, %104
  %106 = sub i32 %92, %51
  %107 = sub i32 %95, %53
  %108 = getelementptr inbounds [3 x i32], ptr %50, i64 0, i64 2
  %109 = load i32, ptr %108, align 4, !tbaa !7
  %110 = sub nsw i32 %98, %109
  %111 = mul nsw i32 %59, %110
  %112 = add nsw i32 %107, %111
  %113 = mul nsw i32 %112, %65
  %114 = add nsw i32 %106, %113
  %115 = add i32 %43, -1
  %116 = zext i32 %115 to i64
  %117 = add nuw nsw i64 %116, 1
  %118 = trunc i64 %117 to i32
  %119 = trunc i64 %117 to i32
  br label %120

120:                                              ; preds = %158, %91
  %121 = phi double [ %161, %158 ], [ %23, %91 ]
  %122 = phi i32 [ %162, %158 ], [ %105, %91 ]
  %123 = phi i32 [ %163, %158 ], [ %114, %91 ]
  %124 = phi i32 [ %164, %158 ], [ 0, %91 ]
  br i1 %83, label %125, label %158

125:                                              ; preds = %150, %120
  %126 = phi double [ %153, %150 ], [ %121, %120 ]
  %127 = phi i32 [ %154, %150 ], [ %122, %120 ]
  %128 = phi i32 [ %155, %150 ], [ %123, %120 ]
  %129 = phi i32 [ %156, %150 ], [ 0, %120 ]
  br i1 %84, label %130, label %150

130:                                              ; preds = %125
  %131 = sext i32 %127 to i64
  %132 = sext i32 %128 to i64
  br label %133

133:                                              ; preds = %133, %130
  %134 = phi i64 [ %132, %130 ], [ %144, %133 ]
  %135 = phi i64 [ %131, %130 ], [ %143, %133 ]
  %136 = phi double [ %126, %130 ], [ %142, %133 ]
  %137 = phi i32 [ 0, %130 ], [ %145, %133 ]
  %138 = getelementptr inbounds double, ptr %35, i64 %135
  %139 = load double, ptr %138, align 8, !tbaa !29
  %140 = getelementptr inbounds double, ptr %41, i64 %134
  %141 = load double, ptr %140, align 8, !tbaa !29
  %142 = call double @llvm.fmuladd.f64(double %139, double %141, double %136)
  %143 = add nsw i64 %135, 1
  %144 = add nsw i64 %134, 1
  %145 = add nuw nsw i32 %137, 1
  %146 = icmp eq i32 %145, %43
  br i1 %146, label %147, label %133, !llvm.loop !629

147:                                              ; preds = %133
  %.lcssa = phi double [ %142, %133 ]
  %148 = add i32 %128, %118
  %149 = add i32 %127, %119
  br label %150

150:                                              ; preds = %147, %125
  %151 = phi i32 [ %128, %125 ], [ %148, %147 ]
  %152 = phi i32 [ %127, %125 ], [ %149, %147 ]
  %153 = phi double [ %126, %125 ], [ %.lcssa, %147 ]
  %154 = add nsw i32 %85, %152
  %155 = add nsw i32 %86, %151
  %156 = add nuw nsw i32 %129, 1
  %157 = icmp eq i32 %156, %44
  br i1 %157, label %158, label %125, !llvm.loop !630

158:                                              ; preds = %150, %120
  %159 = phi i32 [ %123, %120 ], [ %155, %150 ]
  %160 = phi i32 [ %122, %120 ], [ %154, %150 ]
  %161 = phi double [ %121, %120 ], [ %153, %150 ]
  %162 = add nsw i32 %160, %88
  %163 = add nsw i32 %159, %90
  %164 = add nuw nsw i32 %124, 1
  %165 = icmp eq i32 %164, %45
  br i1 %165, label %166, label %120, !llvm.loop !631

166:                                              ; preds = %158, %49, %21
  %167 = phi double [ %23, %21 ], [ %23, %49 ], [ %161, %158 ]
  %168 = add nuw nsw i64 %22, 1
  %169 = load i32, ptr %9, align 8, !tbaa !21
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %168, %170
  br i1 %171, label %21, label %172, !llvm.loop !632

172:                                              ; preds = %166, %2
  %173 = phi double [ 0.000000e+00, %2 ], [ %167, %166 ]
  store double %173, ptr %3, align 8, !tbaa !29
  %174 = load i32, ptr %0, align 8, !tbaa !325
  %175 = call i32 @hypre_MPI_Allreduce(ptr noundef nonnull %3, ptr noundef nonnull @final_innerprod_result, i32 noundef 1, i32 noundef 0, i32 noundef 0, i32 noundef %174) #33
  %176 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 8
  %177 = load i32, ptr %176, align 8, !tbaa !254
  %178 = shl nsw i32 %177, 1
  %179 = call i32 @hypre_IncFLOPCount(i32 noundef %178) #33
  %180 = load double, ptr @final_innerprod_result, align 8, !tbaa !29
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #34
  ret double %180
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructMatrixExtractPointerByIndex(ptr nocapture noundef readonly %0, i32 noundef %1, ptr noundef %2) #0 {
  %4 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !250
  %6 = tail call i32 @hypre_StructStencilElementRank(ptr noundef %5, ptr noundef %2) #33
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %8, label %21

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 6
  %10 = load ptr, ptr %9, align 8, !tbaa !340
  %11 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  %12 = load ptr, ptr %11, align 8, !tbaa !341
  %13 = sext i32 %1 to i64
  %14 = getelementptr inbounds ptr, ptr %12, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !14
  %16 = zext i32 %6 to i64
  %17 = getelementptr inbounds i32, ptr %15, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !7
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds double, ptr %10, i64 %19
  br label %21

21:                                               ; preds = %8, %3
  %22 = phi ptr [ %20, %8 ], [ null, %3 ]
  ret ptr %22
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructMatrixCreate(i32 noundef %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 136) #33
  store i32 %0, ptr %4, align 8, !tbaa !221
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 1
  %6 = tail call i32 @hypre_StructGridRef(ptr noundef %1, ptr noundef nonnull %5) #33
  %7 = tail call ptr @hypre_StructStencilRef(ptr noundef %2) #33
  %8 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 2
  store ptr %7, ptr %8, align 8, !tbaa !633
  %9 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 7
  store i32 1, ptr %9, align 8, !tbaa !634
  %10 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 15
  store i32 1, ptr %10, align 8, !tbaa !635
  %11 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %4, i64 0, i32 10
  store i32 0, ptr %11, align 8, !tbaa !19
  %12 = getelementptr i8, ptr %4, i64 88
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(24) %12, i8 0, i64 24, i1 false), !tbaa !7
  ret ptr %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal ptr @hypre_StructMatrixRef(ptr noundef returned %0) #7 {
  %2 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 15
  %3 = load i32, ptr %2, align 8, !tbaa !635
  %4 = add nsw i32 %3, 1
  store i32 %4, ptr %2, align 8, !tbaa !635
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatrixDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %55, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 15
  %5 = load i32, ptr %4, align 8, !tbaa !635
  %6 = add nsw i32 %5, -1
  store i32 %6, ptr %4, align 8, !tbaa !635
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %55

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 7
  %10 = load i32, ptr %9, align 8, !tbaa !634
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 6
  %14 = load ptr, ptr %13, align 8, !tbaa !340
  tail call void @hypre_Free(ptr noundef %14) #33
  store ptr null, ptr %13, align 8, !tbaa !340
  br label %15

15:                                               ; preds = %12, %8
  %16 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 14
  %17 = load ptr, ptr %16, align 8, !tbaa !636
  %18 = tail call i32 @hypre_CommPkgDestroy(ptr noundef %17) #33
  %19 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !24
  %21 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %20, i64 0, i32 1
  %22 = load i32, ptr %21, align 8, !tbaa !21
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %39

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %33, %26 ]
  %28 = load ptr, ptr %25, align 8, !tbaa !341
  %29 = getelementptr inbounds ptr, ptr %28, i64 %27
  %30 = load ptr, ptr %29, align 8, !tbaa !14
  tail call void @hypre_Free(ptr noundef %30) #33
  %31 = load ptr, ptr %25, align 8, !tbaa !341
  %32 = getelementptr inbounds ptr, ptr %31, i64 %27
  store ptr null, ptr %32, align 8, !tbaa !14
  %33 = add nuw nsw i64 %27, 1
  %34 = load ptr, ptr %19, align 8, !tbaa !24
  %35 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %34, i64 0, i32 1
  %36 = load i32, ptr %35, align 8, !tbaa !21
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %33, %37
  br i1 %38, label %26, label %39, !llvm.loop !637

39:                                               ; preds = %26, %15
  %40 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  %41 = load ptr, ptr %40, align 8, !tbaa !341
  tail call void @hypre_Free(ptr noundef %41) #33
  store ptr null, ptr %40, align 8, !tbaa !341
  %42 = load ptr, ptr %19, align 8, !tbaa !24
  %43 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %42) #33
  %44 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 11
  %45 = load ptr, ptr %44, align 8, !tbaa !638
  tail call void @hypre_Free(ptr noundef %45) #33
  store ptr null, ptr %44, align 8, !tbaa !638
  %46 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !633
  %48 = tail call i32 @hypre_StructStencilDestroy(ptr noundef %47) #33
  %49 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !250
  %51 = tail call i32 @hypre_StructStencilDestroy(ptr noundef %50) #33
  %52 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !15
  %54 = tail call i32 @hypre_StructGridDestroy(ptr noundef %53) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %55

55:                                               ; preds = %39, %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatrixInitializeShell(ptr nocapture noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca [6 x i32], align 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #34
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %4, i8 0, i64 24, i1 false)
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !15
  %7 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !250
  %9 = icmp eq ptr %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 11
  %12 = load ptr, ptr %11, align 8, !tbaa !638
  br label %38

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !633
  %16 = call i32 @hypre_StructStencilSymmetrize(ptr noundef %15, ptr noundef nonnull %2, ptr noundef nonnull %3) #33
  %17 = load ptr, ptr %2, align 8, !tbaa !14
  %18 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %17, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !172
  %20 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 10
  %21 = load i32, ptr %20, align 8, !tbaa !19
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %13
  %24 = icmp sgt i32 %19, 0
  %25 = load ptr, ptr %3, align 8, !tbaa !14
  br i1 %24, label %26, label %33

26:                                               ; preds = %23
  %27 = zext i32 %19 to i64
  %28 = shl nuw nsw i64 %27, 2
  call void @llvm.memset.p0.i64(ptr align 4 %25, i8 -1, i64 %28, i1 false), !tbaa !7
  br label %33

29:                                               ; preds = %13
  %30 = add nsw i32 %19, 1
  %31 = sdiv i32 %30, 2
  %32 = load ptr, ptr %3, align 8, !tbaa !14
  br label %33

33:                                               ; preds = %29, %26, %23
  %34 = phi ptr [ %32, %29 ], [ %25, %23 ], [ %25, %26 ]
  %35 = phi i32 [ %31, %29 ], [ %19, %23 ], [ %19, %26 ]
  store ptr %17, ptr %7, align 8, !tbaa !250
  %36 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 11
  store ptr %34, ptr %36, align 8, !tbaa !638
  %37 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 4
  store i32 %35, ptr %37, align 8, !tbaa !639
  br label %38

38:                                               ; preds = %33, %10
  %39 = phi ptr [ %34, %33 ], [ %12, %10 ]
  %40 = phi ptr [ %17, %33 ], [ %8, %10 ]
  %41 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 12
  store ptr %40, ptr %2, align 8, !tbaa !14
  %42 = load ptr, ptr %40, align 8, !tbaa !35
  %43 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %40, i64 0, i32 1
  %44 = load i32, ptr %43, align 8, !tbaa !172
  store ptr %39, ptr %3, align 8, !tbaa !14
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %71

46:                                               ; preds = %38
  %47 = zext i32 %44 to i64
  br label %48

48:                                               ; preds = %68, %46
  %49 = phi i64 [ 0, %46 ], [ %69, %68 ]
  %50 = getelementptr inbounds i32, ptr %39, i64 %49
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = icmp sgt i32 %51, -1
  br i1 %52, label %53, label %68

53:                                               ; preds = %53, %48
  %54 = phi i64 [ %66, %53 ], [ 0, %48 ]
  %55 = shl nuw nsw i64 %54, 1
  %56 = getelementptr inbounds [6 x i32], ptr %4, i64 0, i64 %55
  %57 = load i32, ptr %56, align 8, !tbaa !7
  %58 = getelementptr inbounds [3 x i32], ptr %42, i64 %49, i64 %54
  %59 = load i32, ptr %58, align 4, !tbaa !7
  %60 = sub nsw i32 0, %59
  %61 = call i32 @llvm.smax.i32(i32 %57, i32 %60)
  store i32 %61, ptr %56, align 8, !tbaa !7
  %62 = or i64 %55, 1
  %63 = getelementptr inbounds [6 x i32], ptr %4, i64 0, i64 %62
  %64 = load i32, ptr %63, align 4, !tbaa !7
  %65 = call i32 @llvm.smax.i32(i32 %64, i32 %59)
  store i32 %65, ptr %63, align 4, !tbaa !7
  %66 = add nuw nsw i64 %54, 1
  %67 = icmp eq i64 %66, 3
  br i1 %67, label %68, label %53, !llvm.loop !640

68:                                               ; preds = %53, %48
  %69 = add nuw nsw i64 %49, 1
  %70 = icmp eq i64 %69, %47
  br i1 %70, label %71, label %48, !llvm.loop !641

71:                                               ; preds = %68, %38
  br label %72

72:                                               ; preds = %72, %71
  %73 = phi i64 [ %80, %72 ], [ 0, %71 ]
  %74 = shl nuw nsw i64 %73, 1
  %75 = getelementptr inbounds [6 x i32], ptr %4, i64 0, i64 %74
  %76 = getelementptr inbounds i32, ptr %41, i64 %74
  %77 = load <2 x i32>, ptr %75, align 8, !tbaa !7
  %78 = load <2 x i32>, ptr %76, align 4, !tbaa !7
  %79 = add nsw <2 x i32> %78, %77
  store <2 x i32> %79, ptr %76, align 4, !tbaa !7
  %80 = add nuw nsw i64 %73, 1
  %81 = icmp eq i64 %80, 3
  br i1 %81, label %82, label %72, !llvm.loop !642

82:                                               ; preds = %72
  %83 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %84 = load ptr, ptr %83, align 8, !tbaa !24
  %85 = icmp eq ptr %84, null
  br i1 %85, label %86, label %139

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %6, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !20
  %89 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %88, i64 0, i32 1
  %90 = load i32, ptr %89, align 8, !tbaa !21
  %91 = call ptr @hypre_BoxArrayCreate(i32 noundef %90) #33
  %92 = load i32, ptr %89, align 8, !tbaa !21
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %138

94:                                               ; preds = %86
  %95 = load ptr, ptr %88, align 8, !tbaa !23
  %96 = load ptr, ptr %91, align 8, !tbaa !23
  br label %97

97:                                               ; preds = %133, %94
  %98 = phi i64 [ 0, %94 ], [ %134, %133 ]
  %99 = getelementptr inbounds %struct.hypre_Box_struct, ptr %95, i64 %98
  %100 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %98
  %101 = load i32, ptr %99, align 4, !tbaa !7
  store i32 %101, ptr %100, align 4, !tbaa !7
  %102 = getelementptr inbounds [3 x i32], ptr %99, i64 0, i64 1
  %103 = load i32, ptr %102, align 4, !tbaa !7
  %104 = getelementptr inbounds [3 x i32], ptr %100, i64 0, i64 1
  store i32 %103, ptr %104, align 4, !tbaa !7
  %105 = getelementptr inbounds [3 x i32], ptr %99, i64 0, i64 2
  %106 = load i32, ptr %105, align 4, !tbaa !7
  %107 = getelementptr inbounds [3 x i32], ptr %100, i64 0, i64 2
  store i32 %106, ptr %107, align 4, !tbaa !7
  %108 = getelementptr inbounds %struct.hypre_Box_struct, ptr %95, i64 %98, i32 1
  %109 = load i32, ptr %108, align 4, !tbaa !7
  %110 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %98, i32 1
  store i32 %109, ptr %110, align 4, !tbaa !7
  %111 = getelementptr inbounds %struct.hypre_Box_struct, ptr %95, i64 %98, i32 1, i64 1
  %112 = load i32, ptr %111, align 4, !tbaa !7
  %113 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %98, i32 1, i64 1
  store i32 %112, ptr %113, align 4, !tbaa !7
  %114 = getelementptr inbounds %struct.hypre_Box_struct, ptr %95, i64 %98, i32 1, i64 2
  %115 = load i32, ptr %114, align 4, !tbaa !7
  %116 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %98, i32 1, i64 2
  store i32 %115, ptr %116, align 4, !tbaa !7
  br label %117

117:                                              ; preds = %117, %97
  %118 = phi i64 [ 0, %97 ], [ %131, %117 ]
  %119 = shl nuw nsw i64 %118, 1
  %120 = getelementptr inbounds i32, ptr %41, i64 %119
  %121 = load i32, ptr %120, align 4, !tbaa !7
  %122 = getelementptr inbounds [3 x i32], ptr %100, i64 0, i64 %118
  %123 = load i32, ptr %122, align 4, !tbaa !7
  %124 = sub nsw i32 %123, %121
  store i32 %124, ptr %122, align 4, !tbaa !7
  %125 = or i64 %119, 1
  %126 = getelementptr inbounds i32, ptr %41, i64 %125
  %127 = load i32, ptr %126, align 4, !tbaa !7
  %128 = getelementptr inbounds %struct.hypre_Box_struct, ptr %96, i64 %98, i32 1, i64 %118
  %129 = load i32, ptr %128, align 4, !tbaa !7
  %130 = add nsw i32 %129, %127
  store i32 %130, ptr %128, align 4, !tbaa !7
  %131 = add nuw nsw i64 %118, 1
  %132 = icmp eq i64 %131, 3
  br i1 %132, label %133, label %117, !llvm.loop !643

133:                                              ; preds = %117
  %134 = add nuw nsw i64 %98, 1
  %135 = load i32, ptr %89, align 8, !tbaa !21
  %136 = sext i32 %135 to i64
  %137 = icmp slt i64 %134, %136
  br i1 %137, label %97, label %138, !llvm.loop !644

138:                                              ; preds = %133, %86
  store ptr %91, ptr %83, align 8, !tbaa !24
  br label %139

139:                                              ; preds = %138, %82
  %140 = phi ptr [ %91, %138 ], [ %84, %82 ]
  %141 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  %142 = load ptr, ptr %141, align 8, !tbaa !341
  %143 = icmp eq ptr %142, null
  br i1 %143, label %144, label %248

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %140, i64 0, i32 1
  %146 = load i32, ptr %145, align 8, !tbaa !21
  %147 = call ptr @hypre_CAlloc(i32 noundef %146, i32 noundef 8) #33
  %148 = load i32, ptr %145, align 8, !tbaa !21
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %150, label %245

150:                                              ; preds = %144
  %151 = zext i32 %44 to i64
  %152 = zext i32 %44 to i64
  br label %153

153:                                              ; preds = %239, %150
  %154 = phi i64 [ 0, %150 ], [ %241, %239 ]
  %155 = phi i32 [ 0, %150 ], [ %240, %239 ]
  %156 = load ptr, ptr %140, align 8, !tbaa !23
  %157 = getelementptr inbounds %struct.hypre_Box_struct, ptr %156, i64 %154
  %158 = getelementptr inbounds %struct.hypre_Box_struct, ptr %156, i64 %154, i32 1
  %159 = load i32, ptr %158, align 4, !tbaa !7
  %160 = load i32, ptr %157, align 4, !tbaa !7
  %161 = sub nsw i32 %159, %160
  %162 = add nsw i32 %161, 1
  %163 = icmp slt i32 %161, 0
  %164 = select i1 %163, i32 0, i32 %162
  %165 = getelementptr inbounds %struct.hypre_Box_struct, ptr %156, i64 %154, i32 1, i64 1
  %166 = load i32, ptr %165, align 4, !tbaa !7
  %167 = getelementptr inbounds [3 x i32], ptr %157, i64 0, i64 1
  %168 = load i32, ptr %167, align 4, !tbaa !7
  %169 = sub nsw i32 %166, %168
  %170 = add nsw i32 %169, 1
  %171 = icmp slt i32 %169, 0
  %172 = select i1 %171, i32 0, i32 %170
  %173 = mul nsw i32 %172, %164
  %174 = getelementptr inbounds %struct.hypre_Box_struct, ptr %156, i64 %154, i32 1, i64 2
  %175 = load i32, ptr %174, align 4, !tbaa !7
  %176 = getelementptr inbounds [3 x i32], ptr %157, i64 0, i64 2
  %177 = load i32, ptr %176, align 4, !tbaa !7
  %178 = sub nsw i32 %175, %177
  %179 = add nsw i32 %178, 1
  %180 = icmp slt i32 %178, 0
  %181 = select i1 %180, i32 0, i32 %179
  %182 = mul nsw i32 %173, %181
  %183 = call ptr @hypre_CAlloc(i32 noundef %44, i32 noundef 4) #33
  %184 = getelementptr inbounds ptr, ptr %147, i64 %154
  store ptr %183, ptr %184, align 8, !tbaa !14
  br i1 %45, label %185, label %239

185:                                              ; preds = %153
  %186 = load ptr, ptr %3, align 8, !tbaa !14
  br label %190

187:                                              ; preds = %199
  %.lcssa = phi i32 [ %200, %199 ]
  br i1 %45, label %188, label %239

188:                                              ; preds = %187
  %189 = load ptr, ptr %3, align 8, !tbaa !14
  br label %203

190:                                              ; preds = %199, %185
  %191 = phi i64 [ 0, %185 ], [ %201, %199 ]
  %192 = phi i32 [ %155, %185 ], [ %200, %199 ]
  %193 = getelementptr inbounds i32, ptr %186, i64 %191
  %194 = load i32, ptr %193, align 4, !tbaa !7
  %195 = icmp slt i32 %194, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %190
  %197 = getelementptr inbounds i32, ptr %183, i64 %191
  store i32 %192, ptr %197, align 4, !tbaa !7
  %198 = add nsw i32 %192, %182
  br label %199

199:                                              ; preds = %196, %190
  %200 = phi i32 [ %198, %196 ], [ %192, %190 ]
  %201 = add nuw nsw i64 %191, 1
  %202 = icmp eq i64 %201, %151
  br i1 %202, label %187, label %190, !llvm.loop !645

203:                                              ; preds = %236, %188
  %204 = phi i64 [ 0, %188 ], [ %237, %236 ]
  %205 = getelementptr inbounds i32, ptr %189, i64 %204
  %206 = load i32, ptr %205, align 4, !tbaa !7
  %207 = icmp sgt i32 %206, -1
  br i1 %207, label %208, label %236

208:                                              ; preds = %203
  %209 = zext i32 %206 to i64
  %210 = getelementptr inbounds i32, ptr %183, i64 %209
  %211 = load i32, ptr %210, align 4, !tbaa !7
  %212 = getelementptr inbounds [3 x i32], ptr %42, i64 %204
  %213 = load i32, ptr %212, align 4, !tbaa !7
  %214 = getelementptr inbounds [3 x i32], ptr %42, i64 %204, i64 1
  %215 = load i32, ptr %214, align 4, !tbaa !7
  %216 = getelementptr inbounds [3 x i32], ptr %42, i64 %204, i64 2
  %217 = load i32, ptr %216, align 4, !tbaa !7
  %218 = load i32, ptr %165, align 4, !tbaa !7
  %219 = load i32, ptr %167, align 4, !tbaa !7
  %220 = sub nsw i32 %218, %219
  %221 = add nsw i32 %220, 1
  %222 = icmp slt i32 %220, 0
  %223 = select i1 %222, i32 0, i32 %221
  %224 = mul nsw i32 %223, %217
  %225 = add nsw i32 %224, %215
  %226 = load i32, ptr %158, align 4, !tbaa !7
  %227 = load i32, ptr %157, align 4, !tbaa !7
  %228 = sub nsw i32 %226, %227
  %229 = add nsw i32 %228, 1
  %230 = icmp slt i32 %228, 0
  %231 = select i1 %230, i32 0, i32 %229
  %232 = mul nsw i32 %225, %231
  %233 = add i32 %213, %211
  %234 = add i32 %233, %232
  %235 = getelementptr inbounds i32, ptr %183, i64 %204
  store i32 %234, ptr %235, align 4, !tbaa !7
  br label %236

236:                                              ; preds = %208, %203
  %237 = add nuw nsw i64 %204, 1
  %238 = icmp eq i64 %237, %152
  br i1 %238, label %239, label %203, !llvm.loop !646

239:                                              ; preds = %236, %187, %153
  %240 = phi i32 [ %.lcssa, %187 ], [ %155, %153 ], [ %.lcssa, %236 ]
  %241 = add nuw nsw i64 %154, 1
  %242 = load i32, ptr %145, align 8, !tbaa !21
  %243 = sext i32 %242 to i64
  %244 = icmp slt i64 %241, %243
  br i1 %244, label %153, label %245, !llvm.loop !647

245:                                              ; preds = %239, %144
  %246 = phi i32 [ 0, %144 ], [ %240, %239 ]
  store ptr %147, ptr %141, align 8, !tbaa !341
  %247 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 8
  store i32 %246, ptr %247, align 4, !tbaa !243
  br label %248

248:                                              ; preds = %245, %139
  %249 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %6, i64 0, i32 8
  %250 = load i32, ptr %249, align 4, !tbaa !613
  %251 = mul nsw i32 %250, %44
  %252 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 13
  store i32 %251, ptr %252, align 8, !tbaa !564
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatrixInitializeData(ptr nocapture noundef %0, ptr noundef %1) #0 {
  %3 = alloca [3 x i32], align 4
  %4 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #34
  %5 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 6
  store ptr %1, ptr %5, align 8, !tbaa !340
  %6 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 7
  store i32 0, ptr %6, align 8, !tbaa !634
  store i32 0, ptr %4, align 4, !tbaa !7
  %7 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 1
  store i32 0, ptr %7, align 4, !tbaa !7
  %8 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 2
  store i32 0, ptr %8, align 4, !tbaa !7
  %9 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !24
  %11 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %10, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !21
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %99

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %16 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  %17 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 1
  %18 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 2
  br label %19

19:                                               ; preds = %94, %14
  %20 = phi i64 [ 0, %14 ], [ %95, %94 ]
  %21 = load ptr, ptr %15, align 8, !tbaa !250
  %22 = call i32 @hypre_StructStencilElementRank(ptr noundef %21, ptr noundef nonnull %4) #33
  %23 = icmp sgt i32 %22, -1
  br i1 %23, label %24, label %94

24:                                               ; preds = %19
  %25 = load ptr, ptr %5, align 8, !tbaa !340
  %26 = load ptr, ptr %16, align 8, !tbaa !341
  %27 = getelementptr inbounds ptr, ptr %26, i64 %20
  %28 = load ptr, ptr %27, align 8, !tbaa !14
  %29 = zext i32 %22 to i64
  %30 = getelementptr inbounds i32, ptr %28, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !7
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, ptr %25, i64 %32
  %34 = icmp eq ptr %25, null
  br i1 %34, label %94, label %35

35:                                               ; preds = %24
  %36 = load ptr, ptr %10, align 8, !tbaa !23
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %36, i64 %20
  %38 = call i32 @hypre_BoxGetSize(ptr noundef %37, ptr noundef nonnull %3) #33
  %39 = load i32, ptr %3, align 4, !tbaa !7
  %40 = load i32, ptr %17, align 4, !tbaa !7
  %41 = load i32, ptr %18, align 4, !tbaa !7
  %42 = call i32 @llvm.smax.i32(i32 %40, i32 %39)
  %43 = call i32 @llvm.smax.i32(i32 %41, i32 %42)
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %94

45:                                               ; preds = %35
  %46 = getelementptr inbounds i32, ptr %37, i64 1
  %47 = load i32, ptr %46, align 4, !tbaa !7
  %48 = getelementptr inbounds %struct.hypre_Box_struct, ptr %36, i64 %20, i32 1, i64 1
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = sub nsw i32 %49, %47
  %51 = icmp slt i32 %50, 0
  %52 = add nsw i32 %50, 1
  %53 = select i1 %51, i32 0, i32 %52
  %54 = getelementptr inbounds %struct.hypre_Box_struct, ptr %36, i64 %20, i32 1
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = load i32, ptr %37, align 4, !tbaa !7
  %57 = sub nsw i32 %55, %56
  %58 = icmp slt i32 %57, 0
  %59 = add nsw i32 %57, 1
  %60 = select i1 %58, i32 0, i32 %59
  %61 = icmp sgt i32 %41, 0
  %62 = icmp sgt i32 %40, 0
  %63 = icmp sgt i32 %39, 0
  %64 = sub i32 %60, %39
  %65 = sub i32 %53, %40
  %66 = mul i32 %60, %65
  br i1 %61, label %67, label %94

67:                                               ; preds = %89, %45
  %68 = phi i32 [ %91, %89 ], [ 0, %45 ]
  %69 = phi i32 [ %92, %89 ], [ 0, %45 ]
  br i1 %62, label %70, label %89

70:                                               ; preds = %84, %67
  %71 = phi i32 [ %86, %84 ], [ %68, %67 ]
  %72 = phi i32 [ %87, %84 ], [ 0, %67 ]
  br i1 %63, label %73, label %84

73:                                               ; preds = %70
  %74 = sext i32 %71 to i64
  br label %75

75:                                               ; preds = %75, %73
  %76 = phi i64 [ %74, %73 ], [ %79, %75 ]
  %77 = phi i32 [ 0, %73 ], [ %80, %75 ]
  %78 = getelementptr inbounds double, ptr %33, i64 %76
  store double 1.000000e+00, ptr %78, align 8, !tbaa !29
  %79 = add nsw i64 %76, 1
  %80 = add nuw nsw i32 %77, 1
  %81 = icmp eq i32 %80, %39
  br i1 %81, label %82, label %75, !llvm.loop !648

82:                                               ; preds = %75
  %.lcssa = phi i64 [ %79, %75 ]
  %83 = trunc i64 %.lcssa to i32
  br label %84

84:                                               ; preds = %82, %70
  %85 = phi i32 [ %71, %70 ], [ %83, %82 ]
  %86 = add nsw i32 %64, %85
  %87 = add nuw nsw i32 %72, 1
  %88 = icmp eq i32 %87, %40
  br i1 %88, label %89, label %70, !llvm.loop !649

89:                                               ; preds = %84, %67
  %90 = phi i32 [ %68, %67 ], [ %86, %84 ]
  %91 = add nsw i32 %90, %66
  %92 = add nuw nsw i32 %69, 1
  %93 = icmp eq i32 %92, %41
  br i1 %93, label %94, label %67, !llvm.loop !650

94:                                               ; preds = %89, %45, %35, %24, %19
  %95 = add nuw nsw i64 %20, 1
  %96 = load i32, ptr %11, align 8, !tbaa !21
  %97 = sext i32 %96 to i64
  %98 = icmp slt i64 %95, %97
  br i1 %98, label %19, label %99, !llvm.loop !651

99:                                               ; preds = %94, %2
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatrixInitialize(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @hypre_StructMatrixInitializeShell(ptr noundef %0) #35
  %3 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 8
  %4 = load i32, ptr %3, align 4, !tbaa !243
  %5 = tail call ptr @hypre_CAlloc(i32 noundef %4, i32 noundef 8) #33
  %6 = tail call i32 @hypre_StructMatrixInitializeData(ptr noundef %0, ptr noundef %5) #35
  %7 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 7
  store i32 1, ptr %7, align 8, !tbaa !634
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatrixSetBoxValues(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, i32 noundef %5) #0 {
  %7 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %7) #34
  %8 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !15
  %10 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %9, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !20
  %12 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %11, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !21
  %14 = tail call ptr @hypre_BoxArrayCreate(i32 noundef %13) #33
  %15 = tail call ptr @hypre_BoxCreate() #33
  %16 = load i32, ptr %12, align 8, !tbaa !21
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %48

18:                                               ; preds = %6
  %19 = getelementptr inbounds [3 x i32], ptr %15, i64 0, i64 1
  %20 = getelementptr inbounds [3 x i32], ptr %15, i64 0, i64 2
  %21 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 0, i32 1
  %22 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 0, i32 1, i64 1
  %23 = getelementptr inbounds %struct.hypre_Box_struct, ptr %15, i64 0, i32 1, i64 2
  br label %24

24:                                               ; preds = %24, %18
  %25 = phi i64 [ 0, %18 ], [ %42, %24 ]
  %26 = load ptr, ptr %11, align 8, !tbaa !23
  %27 = getelementptr inbounds %struct.hypre_Box_struct, ptr %26, i64 %25
  %28 = tail call i32 @hypre_IntersectBoxes(ptr noundef %1, ptr noundef %27, ptr noundef %15) #33
  %29 = load i32, ptr %15, align 4, !tbaa !7
  %30 = load ptr, ptr %14, align 8, !tbaa !23
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %25
  store i32 %29, ptr %31, align 4, !tbaa !7
  %32 = load i32, ptr %19, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %25, i32 0, i64 1
  store i32 %32, ptr %33, align 4, !tbaa !7
  %34 = load i32, ptr %20, align 4, !tbaa !7
  %35 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %25, i32 0, i64 2
  store i32 %34, ptr %35, align 4, !tbaa !7
  %36 = load i32, ptr %21, align 4, !tbaa !7
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %25, i32 1
  store i32 %36, ptr %37, align 4, !tbaa !7
  %38 = load i32, ptr %22, align 4, !tbaa !7
  %39 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %25, i32 1, i64 1
  store i32 %38, ptr %39, align 4, !tbaa !7
  %40 = load i32, ptr %23, align 4, !tbaa !7
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %30, i64 %25, i32 1, i64 2
  store i32 %40, ptr %41, align 4, !tbaa !7
  %42 = add nuw nsw i64 %25, 1
  %43 = load i32, ptr %12, align 8, !tbaa !21
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %24, label %46, !llvm.loop !652

46:                                               ; preds = %24
  %47 = tail call i32 @hypre_BoxDestroy(ptr noundef nonnull %15) #33
  br label %51

48:                                               ; preds = %6
  %49 = tail call i32 @hypre_BoxDestroy(ptr noundef %15) #33
  %50 = icmp eq ptr %14, null
  br i1 %50, label %323, label %51

51:                                               ; preds = %48, %46
  %52 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %53 = load ptr, ptr %52, align 8, !tbaa !24
  %54 = tail call ptr @hypre_BoxDuplicate(ptr noundef %1) #33
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = mul nsw i32 %55, %2
  store i32 %56, ptr %54, align 4, !tbaa !7
  %57 = getelementptr inbounds %struct.hypre_Box_struct, ptr %54, i64 0, i32 1
  %58 = load i32, ptr %57, align 4, !tbaa !7
  %59 = mul nsw i32 %58, %2
  %60 = add nsw i32 %2, -1
  %61 = add nsw i32 %60, %59
  store i32 %61, ptr %57, align 4, !tbaa !7
  %62 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %14, i64 0, i32 1
  %63 = load i32, ptr %62, align 8, !tbaa !21
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %321

65:                                               ; preds = %51
  %66 = icmp sgt i32 %2, 0
  %67 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 6
  %68 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  %69 = icmp eq i32 %5, 0
  %70 = getelementptr inbounds [3 x i32], ptr %54, i64 0, i64 1
  %71 = getelementptr inbounds [3 x i32], ptr %54, i64 0, i64 2
  %72 = getelementptr inbounds %struct.hypre_Box_struct, ptr %54, i64 0, i32 1, i64 1
  %73 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 1
  %74 = getelementptr inbounds [3 x i32], ptr %7, i64 0, i64 2
  %75 = sext i32 %2 to i64
  %76 = zext i32 %2 to i64
  br label %77

77:                                               ; preds = %316, %65
  %78 = phi i32 [ %63, %65 ], [ %317, %316 ]
  %79 = phi i64 [ 0, %65 ], [ %318, %316 ]
  %80 = load ptr, ptr %14, align 8, !tbaa !23
  %81 = getelementptr inbounds %struct.hypre_Box_struct, ptr %80, i64 %79
  %82 = load ptr, ptr %53, align 8, !tbaa !23
  %83 = getelementptr inbounds %struct.hypre_Box_struct, ptr %82, i64 %79
  %84 = icmp eq ptr %80, null
  br i1 %84, label %316, label %85

85:                                               ; preds = %77
  %86 = getelementptr inbounds i32, ptr %81, i64 1
  %87 = load i32, ptr %86, align 4, !tbaa !7
  %88 = getelementptr inbounds i32, ptr %81, i64 2
  %89 = load i32, ptr %88, align 4, !tbaa !7
  br i1 %66, label %90, label %316

90:                                               ; preds = %85
  %91 = load i32, ptr %81, align 4, !tbaa !7
  %92 = mul nsw i32 %91, %2
  %93 = getelementptr inbounds [3 x i32], ptr %83, i64 0, i64 1
  %94 = getelementptr inbounds [3 x i32], ptr %83, i64 0, i64 2
  %95 = getelementptr inbounds %struct.hypre_Box_struct, ptr %82, i64 %79, i32 1
  %96 = getelementptr inbounds %struct.hypre_Box_struct, ptr %82, i64 %79, i32 1, i64 1
  br label %97

97:                                               ; preds = %310, %90
  %98 = phi i64 [ 0, %90 ], [ %312, %310 ]
  %99 = phi i32 [ %92, %90 ], [ %311, %310 ]
  %100 = load ptr, ptr %67, align 8, !tbaa !340
  %101 = load ptr, ptr %68, align 8, !tbaa !341
  %102 = getelementptr inbounds ptr, ptr %101, i64 %79
  %103 = load ptr, ptr %102, align 8, !tbaa !14
  %104 = getelementptr inbounds i32, ptr %3, i64 %98
  %105 = load i32, ptr %104, align 4, !tbaa !7
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, ptr %103, i64 %106
  %108 = load i32, ptr %107, align 4, !tbaa !7
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds double, ptr %100, i64 %109
  %111 = call i32 @hypre_BoxGetSize(ptr noundef nonnull %81, ptr noundef nonnull %7) #33
  %112 = load i32, ptr %7, align 4, !tbaa !7
  %113 = load i32, ptr %73, align 4, !tbaa !7
  %114 = load i32, ptr %74, align 4, !tbaa !7
  %115 = call i32 @llvm.smax.i32(i32 %113, i32 %112)
  %116 = call i32 @llvm.smax.i32(i32 %114, i32 %115)
  %117 = icmp sgt i32 %116, 0
  br i1 %69, label %215, label %118

118:                                              ; preds = %97
  br i1 %117, label %119, label %310

119:                                              ; preds = %118
  %120 = load i32, ptr %54, align 4, !tbaa !7
  %121 = load i32, ptr %70, align 4, !tbaa !7
  %122 = load i32, ptr %72, align 4, !tbaa !7
  %123 = sub nsw i32 %122, %121
  %124 = icmp slt i32 %123, 0
  %125 = add nsw i32 %123, 1
  %126 = select i1 %124, i32 0, i32 %125
  %127 = load i32, ptr %57, align 4, !tbaa !7
  %128 = sub nsw i32 %127, %120
  %129 = icmp slt i32 %128, 0
  %130 = add nsw i32 %128, 1
  %131 = select i1 %129, i32 0, i32 %130
  %132 = load i32, ptr %83, align 4, !tbaa !7
  %133 = load i32, ptr %93, align 4, !tbaa !7
  %134 = load i32, ptr %96, align 4, !tbaa !7
  %135 = sub nsw i32 %134, %133
  %136 = icmp slt i32 %135, 0
  %137 = add nsw i32 %135, 1
  %138 = select i1 %136, i32 0, i32 %137
  %139 = load i32, ptr %95, align 4, !tbaa !7
  %140 = sub nsw i32 %139, %132
  %141 = icmp slt i32 %140, 0
  %142 = add nsw i32 %140, 1
  %143 = select i1 %141, i32 0, i32 %142
  %144 = icmp sgt i32 %114, 0
  %145 = icmp sgt i32 %113, 0
  %146 = icmp sgt i32 %112, 0
  %147 = sub i32 %143, %112
  %148 = mul nsw i32 %112, %2
  %149 = sub i32 %131, %148
  %150 = sub i32 %138, %113
  %151 = mul i32 %150, %143
  %152 = sub i32 %126, %113
  %153 = mul i32 %131, %152
  br i1 %144, label %154, label %310

154:                                              ; preds = %119
  %155 = load i32, ptr %81, align 4, !tbaa !7
  %156 = sub i32 %155, %132
  %157 = load i32, ptr %86, align 4, !tbaa !7
  %158 = sub i32 %157, %133
  %159 = load i32, ptr %88, align 4, !tbaa !7
  %160 = load i32, ptr %94, align 4, !tbaa !7
  %161 = sub nsw i32 %159, %160
  %162 = mul nsw i32 %138, %161
  %163 = add nsw i32 %158, %162
  %164 = mul nsw i32 %163, %143
  %165 = add nsw i32 %156, %164
  %166 = sub i32 %99, %120
  %167 = sub i32 %87, %121
  %168 = load i32, ptr %71, align 4, !tbaa !7
  %169 = sub nsw i32 %89, %168
  %170 = mul nsw i32 %126, %169
  %171 = add nsw i32 %167, %170
  %172 = mul nsw i32 %171, %131
  %173 = add nsw i32 %166, %172
  br label %174

174:                                              ; preds = %208, %154
  %175 = phi i32 [ %211, %208 ], [ %165, %154 ]
  %176 = phi i32 [ %212, %208 ], [ %173, %154 ]
  %177 = phi i32 [ %213, %208 ], [ 0, %154 ]
  br i1 %145, label %178, label %208

178:                                              ; preds = %201, %174
  %179 = phi i32 [ %204, %201 ], [ %175, %174 ]
  %180 = phi i32 [ %205, %201 ], [ %176, %174 ]
  %181 = phi i32 [ %206, %201 ], [ 0, %174 ]
  br i1 %146, label %182, label %201

182:                                              ; preds = %178
  %183 = sext i32 %179 to i64
  %184 = sext i32 %180 to i64
  br label %185

185:                                              ; preds = %185, %182
  %186 = phi i64 [ %184, %182 ], [ %195, %185 ]
  %187 = phi i64 [ %183, %182 ], [ %194, %185 ]
  %188 = phi i32 [ 0, %182 ], [ %196, %185 ]
  %189 = getelementptr inbounds double, ptr %4, i64 %186
  %190 = load double, ptr %189, align 8, !tbaa !29
  %191 = getelementptr inbounds double, ptr %110, i64 %187
  %192 = load double, ptr %191, align 8, !tbaa !29
  %193 = fadd double %190, %192
  store double %193, ptr %191, align 8, !tbaa !29
  %194 = add nsw i64 %187, 1
  %195 = add i64 %186, %75
  %196 = add nuw nsw i32 %188, 1
  %197 = icmp eq i32 %196, %112
  br i1 %197, label %198, label %185, !llvm.loop !653

198:                                              ; preds = %185
  %.lcssa1 = phi i64 [ %194, %185 ]
  %.lcssa = phi i64 [ %195, %185 ]
  %199 = trunc i64 %.lcssa to i32
  %200 = trunc i64 %.lcssa1 to i32
  br label %201

201:                                              ; preds = %198, %178
  %202 = phi i32 [ %180, %178 ], [ %199, %198 ]
  %203 = phi i32 [ %179, %178 ], [ %200, %198 ]
  %204 = add nsw i32 %147, %203
  %205 = add nsw i32 %149, %202
  %206 = add nuw nsw i32 %181, 1
  %207 = icmp eq i32 %206, %113
  br i1 %207, label %208, label %178, !llvm.loop !654

208:                                              ; preds = %201, %174
  %209 = phi i32 [ %176, %174 ], [ %205, %201 ]
  %210 = phi i32 [ %175, %174 ], [ %204, %201 ]
  %211 = add nsw i32 %210, %151
  %212 = add nsw i32 %209, %153
  %213 = add nuw nsw i32 %177, 1
  %214 = icmp eq i32 %213, %114
  br i1 %214, label %310, label %174, !llvm.loop !655

215:                                              ; preds = %97
  br i1 %117, label %216, label %310

216:                                              ; preds = %215
  %217 = load i32, ptr %54, align 4, !tbaa !7
  %218 = load i32, ptr %70, align 4, !tbaa !7
  %219 = load i32, ptr %72, align 4, !tbaa !7
  %220 = sub nsw i32 %219, %218
  %221 = icmp slt i32 %220, 0
  %222 = add nsw i32 %220, 1
  %223 = select i1 %221, i32 0, i32 %222
  %224 = load i32, ptr %57, align 4, !tbaa !7
  %225 = sub nsw i32 %224, %217
  %226 = icmp slt i32 %225, 0
  %227 = add nsw i32 %225, 1
  %228 = select i1 %226, i32 0, i32 %227
  %229 = load i32, ptr %83, align 4, !tbaa !7
  %230 = load i32, ptr %93, align 4, !tbaa !7
  %231 = load i32, ptr %96, align 4, !tbaa !7
  %232 = sub nsw i32 %231, %230
  %233 = icmp slt i32 %232, 0
  %234 = add nsw i32 %232, 1
  %235 = select i1 %233, i32 0, i32 %234
  %236 = load i32, ptr %95, align 4, !tbaa !7
  %237 = sub nsw i32 %236, %229
  %238 = icmp slt i32 %237, 0
  %239 = add nsw i32 %237, 1
  %240 = select i1 %238, i32 0, i32 %239
  %241 = icmp sgt i32 %114, 0
  %242 = icmp sgt i32 %113, 0
  %243 = icmp sgt i32 %112, 0
  %244 = sub i32 %240, %112
  %245 = mul nsw i32 %112, %2
  %246 = sub i32 %228, %245
  %247 = sub i32 %235, %113
  %248 = mul i32 %247, %240
  %249 = sub i32 %223, %113
  %250 = mul i32 %228, %249
  br i1 %241, label %251, label %310

251:                                              ; preds = %216
  %252 = load i32, ptr %81, align 4, !tbaa !7
  %253 = sub i32 %252, %229
  %254 = load i32, ptr %86, align 4, !tbaa !7
  %255 = sub i32 %254, %230
  %256 = load i32, ptr %88, align 4, !tbaa !7
  %257 = load i32, ptr %94, align 4, !tbaa !7
  %258 = sub nsw i32 %256, %257
  %259 = mul nsw i32 %235, %258
  %260 = add nsw i32 %255, %259
  %261 = mul nsw i32 %260, %240
  %262 = add nsw i32 %253, %261
  %263 = sub i32 %99, %217
  %264 = sub i32 %87, %218
  %265 = load i32, ptr %71, align 4, !tbaa !7
  %266 = sub nsw i32 %89, %265
  %267 = mul nsw i32 %223, %266
  %268 = add nsw i32 %264, %267
  %269 = mul nsw i32 %268, %228
  %270 = add nsw i32 %263, %269
  br label %271

271:                                              ; preds = %303, %251
  %272 = phi i32 [ %306, %303 ], [ %262, %251 ]
  %273 = phi i32 [ %307, %303 ], [ %270, %251 ]
  %274 = phi i32 [ %308, %303 ], [ 0, %251 ]
  br i1 %242, label %275, label %303

275:                                              ; preds = %296, %271
  %276 = phi i32 [ %299, %296 ], [ %272, %271 ]
  %277 = phi i32 [ %300, %296 ], [ %273, %271 ]
  %278 = phi i32 [ %301, %296 ], [ 0, %271 ]
  br i1 %243, label %279, label %296

279:                                              ; preds = %275
  %280 = sext i32 %276 to i64
  %281 = sext i32 %277 to i64
  br label %282

282:                                              ; preds = %282, %279
  %283 = phi i64 [ %281, %279 ], [ %290, %282 ]
  %284 = phi i64 [ %280, %279 ], [ %289, %282 ]
  %285 = phi i32 [ 0, %279 ], [ %291, %282 ]
  %286 = getelementptr inbounds double, ptr %4, i64 %283
  %287 = load double, ptr %286, align 8, !tbaa !29
  %288 = getelementptr inbounds double, ptr %110, i64 %284
  store double %287, ptr %288, align 8, !tbaa !29
  %289 = add nsw i64 %284, 1
  %290 = add i64 %283, %75
  %291 = add nuw nsw i32 %285, 1
  %292 = icmp eq i32 %291, %112
  br i1 %292, label %293, label %282, !llvm.loop !656

293:                                              ; preds = %282
  %.lcssa3 = phi i64 [ %289, %282 ]
  %.lcssa2 = phi i64 [ %290, %282 ]
  %294 = trunc i64 %.lcssa2 to i32
  %295 = trunc i64 %.lcssa3 to i32
  br label %296

296:                                              ; preds = %293, %275
  %297 = phi i32 [ %277, %275 ], [ %294, %293 ]
  %298 = phi i32 [ %276, %275 ], [ %295, %293 ]
  %299 = add nsw i32 %244, %298
  %300 = add nsw i32 %246, %297
  %301 = add nuw nsw i32 %278, 1
  %302 = icmp eq i32 %301, %113
  br i1 %302, label %303, label %275, !llvm.loop !657

303:                                              ; preds = %296, %271
  %304 = phi i32 [ %273, %271 ], [ %300, %296 ]
  %305 = phi i32 [ %272, %271 ], [ %299, %296 ]
  %306 = add nsw i32 %305, %248
  %307 = add nsw i32 %304, %250
  %308 = add nuw nsw i32 %274, 1
  %309 = icmp eq i32 %308, %114
  br i1 %309, label %310, label %271, !llvm.loop !658

310:                                              ; preds = %303, %216, %215, %208, %119, %118
  %311 = add nsw i32 %99, 1
  %312 = add nuw nsw i64 %98, 1
  %313 = icmp eq i64 %312, %76
  br i1 %313, label %314, label %97, !llvm.loop !659

314:                                              ; preds = %310
  %315 = load i32, ptr %62, align 8, !tbaa !21
  br label %316

316:                                              ; preds = %314, %85, %77
  %317 = phi i32 [ %78, %77 ], [ %78, %85 ], [ %315, %314 ]
  %318 = add nuw nsw i64 %79, 1
  %319 = sext i32 %317 to i64
  %320 = icmp slt i64 %318, %319
  br i1 %320, label %77, label %321, !llvm.loop !660

321:                                              ; preds = %316, %51
  %322 = call i32 @hypre_BoxDestroy(ptr noundef nonnull %54) #33
  br label %323

323:                                              ; preds = %321, %48
  %324 = call i32 @hypre_BoxArrayDestroy(ptr noundef %14) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %7) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatrixAssemble(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [3 x i32], align 4
  %7 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #34
  %8 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 14
  %9 = load ptr, ptr %8, align 8, !tbaa !636
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %30

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 12
  store i32 1, ptr %6, align 4, !tbaa !7
  %13 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 1
  store i32 1, ptr %13, align 4, !tbaa !7
  %14 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  store i32 1, ptr %14, align 4, !tbaa !7
  %15 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !15
  %17 = call i32 @hypre_CreateCommInfoFromNumGhost(ptr noundef %16, ptr noundef nonnull %12, ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef nonnull %5) #33
  %18 = load ptr, ptr %2, align 8, !tbaa !14
  %19 = load ptr, ptr %3, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %21 = load ptr, ptr %20, align 8, !tbaa !24
  %22 = load ptr, ptr %4, align 8, !tbaa !14
  %23 = load ptr, ptr %5, align 8, !tbaa !14
  %24 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 4
  %25 = load i32, ptr %24, align 8, !tbaa !639
  %26 = load i32, ptr %0, align 8, !tbaa !221
  %27 = load ptr, ptr %15, align 8, !tbaa !15
  %28 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %27, i64 0, i32 9
  %29 = call ptr @hypre_CommPkgCreate(ptr noundef %18, ptr noundef %19, ptr noundef nonnull %6, ptr noundef nonnull %6, ptr noundef %21, ptr noundef %21, ptr noundef %22, ptr noundef %23, i32 noundef %25, i32 noundef %26, ptr noundef nonnull %28) #33
  store ptr %29, ptr %8, align 8, !tbaa !636
  br label %30

30:                                               ; preds = %11, %1
  %31 = phi ptr [ %9, %1 ], [ %29, %11 ]
  %32 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 6
  %33 = load ptr, ptr %32, align 8, !tbaa !340
  %34 = call i32 @hypre_InitializeCommunication(ptr noundef %31, ptr noundef %33, ptr noundef %33, ptr noundef nonnull %7) #33
  %35 = load ptr, ptr %7, align 8, !tbaa !14
  %36 = call i32 @hypre_FinalizeCommunication(ptr noundef %35) #33
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #34
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_StructMatrixSetNumGhost(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #8 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i64 [ 0, %2 ], [ %8, %3 ]
  %5 = getelementptr inbounds i32, ptr %1, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !7
  %7 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 12, i64 %4
  store i32 %6, ptr %7, align 4, !tbaa !7
  %8 = add nuw nsw i64 %4, 1
  %9 = icmp eq i64 %8, 6
  br i1 %9, label %10, label %3, !llvm.loop !661

10:                                               ; preds = %3
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructMatrixCreateMask(ptr nocapture noundef readonly %0, i32 noundef %1, ptr nocapture noundef readonly %2) #0 {
  %4 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !250
  %6 = load ptr, ptr %5, align 8, !tbaa !35
  %7 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %5, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !172
  %9 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 136) #33
  %10 = load i32, ptr %0, align 8, !tbaa !221
  store i32 %10, ptr %9, align 8, !tbaa !221
  %11 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !15
  %13 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 1
  %14 = tail call i32 @hypre_StructGridRef(ptr noundef %12, ptr noundef nonnull %13) #33
  %15 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !633
  %17 = tail call ptr @hypre_StructStencilRef(ptr noundef %16) #33
  %18 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 2
  store ptr %17, ptr %18, align 8, !tbaa !633
  %19 = tail call ptr @hypre_CAlloc(i32 noundef %1, i32 noundef 12) #33
  %20 = icmp sgt i32 %1, 0
  br i1 %20, label %21, label %43

21:                                               ; preds = %3
  %22 = zext i32 %1 to i64
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %41, %23 ]
  %25 = getelementptr inbounds i32, ptr %2, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [3 x i32], ptr %6, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !7
  %30 = getelementptr inbounds [3 x i32], ptr %19, i64 %24
  store i32 %29, ptr %30, align 4, !tbaa !7
  %31 = load i32, ptr %25, align 4, !tbaa !7
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [3 x i32], ptr %6, i64 %32, i64 1
  %34 = load i32, ptr %33, align 4, !tbaa !7
  %35 = getelementptr inbounds [3 x i32], ptr %19, i64 %24, i64 1
  store i32 %34, ptr %35, align 4, !tbaa !7
  %36 = load i32, ptr %25, align 4, !tbaa !7
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [3 x i32], ptr %6, i64 %37, i64 2
  %39 = load i32, ptr %38, align 4, !tbaa !7
  %40 = getelementptr inbounds [3 x i32], ptr %19, i64 %24, i64 2
  store i32 %39, ptr %40, align 4, !tbaa !7
  %41 = add nuw nsw i64 %24, 1
  %42 = icmp eq i64 %41, %22
  br i1 %42, label %43, label %23, !llvm.loop !662

43:                                               ; preds = %23, %3
  %44 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %5, i64 0, i32 3
  %45 = load i32, ptr %44, align 8, !tbaa !37
  %46 = tail call ptr @hypre_StructStencilCreate(i32 noundef %45, i32 noundef %1, ptr noundef %19) #33
  %47 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 3
  store ptr %46, ptr %47, align 8, !tbaa !250
  %48 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 4
  %49 = load i32, ptr %48, align 8, !tbaa !639
  %50 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 4
  store i32 %49, ptr %50, align 8, !tbaa !639
  %51 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 5
  %52 = load ptr, ptr %51, align 8, !tbaa !24
  %53 = tail call ptr @hypre_BoxArrayDuplicate(ptr noundef %52) #33
  %54 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 5
  store ptr %53, ptr %54, align 8, !tbaa !24
  %55 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 6
  %56 = load ptr, ptr %55, align 8, !tbaa !340
  %57 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 6
  store ptr %56, ptr %57, align 8, !tbaa !340
  %58 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 7
  store i32 0, ptr %58, align 8, !tbaa !634
  %59 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 8
  %60 = load i32, ptr %59, align 4, !tbaa !243
  %61 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 8
  store i32 %60, ptr %61, align 4, !tbaa !243
  %62 = load ptr, ptr %51, align 8, !tbaa !24
  %63 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 9
  %64 = load ptr, ptr %63, align 8, !tbaa !341
  %65 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %62, i64 0, i32 1
  %66 = load i32, ptr %65, align 8, !tbaa !21
  %67 = tail call ptr @hypre_CAlloc(i32 noundef %66, i32 noundef 8) #33
  %68 = load i32, ptr %65, align 8, !tbaa !21
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %95

70:                                               ; preds = %43
  %71 = shl i32 %1, 2
  %72 = zext i32 %1 to i64
  br label %73

73:                                               ; preds = %90, %70
  %74 = phi i64 [ 0, %70 ], [ %91, %90 ]
  %75 = tail call ptr @hypre_MAlloc(i32 noundef %71) #33
  %76 = getelementptr inbounds ptr, ptr %67, i64 %74
  store ptr %75, ptr %76, align 8, !tbaa !14
  br i1 %20, label %77, label %90

77:                                               ; preds = %73
  %78 = getelementptr inbounds ptr, ptr %64, i64 %74
  %79 = load ptr, ptr %78, align 8, !tbaa !14
  br label %80

80:                                               ; preds = %80, %77
  %81 = phi i64 [ 0, %77 ], [ %88, %80 ]
  %82 = getelementptr inbounds i32, ptr %2, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !7
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i32, ptr %79, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !7
  %87 = getelementptr inbounds i32, ptr %75, i64 %81
  store i32 %86, ptr %87, align 4, !tbaa !7
  %88 = add nuw nsw i64 %81, 1
  %89 = icmp eq i64 %88, %72
  br i1 %89, label %90, label %80, !llvm.loop !663

90:                                               ; preds = %80, %73
  %91 = add nuw nsw i64 %74, 1
  %92 = load i32, ptr %65, align 8, !tbaa !21
  %93 = sext i32 %92 to i64
  %94 = icmp slt i64 %91, %93
  br i1 %94, label %73, label %95, !llvm.loop !664

95:                                               ; preds = %90, %43
  %96 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 9
  store ptr %67, ptr %96, align 8, !tbaa !341
  %97 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 10
  %98 = load i32, ptr %97, align 8, !tbaa !19
  %99 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 10
  store i32 %98, ptr %99, align 8, !tbaa !19
  %100 = shl i32 %8, 2
  %101 = tail call ptr @hypre_MAlloc(i32 noundef %100) #33
  %102 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 11
  store ptr %101, ptr %102, align 8, !tbaa !638
  %103 = icmp sgt i32 %8, 0
  br i1 %103, label %104, label %115

104:                                              ; preds = %95
  %105 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 11
  %106 = load ptr, ptr %105, align 8, !tbaa !638
  %107 = zext i32 %8 to i64
  br label %108

108:                                              ; preds = %108, %104
  %109 = phi i64 [ 0, %104 ], [ %113, %108 ]
  %110 = getelementptr inbounds i32, ptr %106, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !7
  %112 = getelementptr inbounds i32, ptr %101, i64 %109
  store i32 %111, ptr %112, align 4, !tbaa !7
  %113 = add nuw nsw i64 %109, 1
  %114 = icmp eq i64 %113, %107
  br i1 %114, label %115, label %108, !llvm.loop !665

115:                                              ; preds = %108, %95
  br label %116

116:                                              ; preds = %116, %115
  %117 = phi i64 [ %121, %116 ], [ 0, %115 ]
  %118 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %0, i64 0, i32 12, i64 %117
  %119 = load i32, ptr %118, align 4, !tbaa !7
  %120 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 12, i64 %117
  store i32 %119, ptr %120, align 4, !tbaa !7
  %121 = add nuw nsw i64 %117, 1
  %122 = icmp eq i64 %121, 6
  br i1 %122, label %123, label %116, !llvm.loop !666

123:                                              ; preds = %116
  %124 = load ptr, ptr %13, align 8, !tbaa !15
  %125 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %124, i64 0, i32 8
  %126 = load i32, ptr %125, align 4, !tbaa !613
  %127 = mul nsw i32 %126, %1
  %128 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 13
  store i32 %127, ptr %128, align 8, !tbaa !564
  %129 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 14
  store ptr null, ptr %129, align 8, !tbaa !636
  %130 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %9, i64 0, i32 15
  store i32 1, ptr %130, align 8, !tbaa !635
  ret ptr %9
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructMatvecCreate() #0 {
  %1 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 24) #33
  ret ptr %1
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatvecSetup(ptr nocapture noundef writeonly %0, ptr noundef %1, ptr noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [3 x i32], align 4
  %11 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %10) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #34
  %12 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !15
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %1, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !250
  %16 = call i32 @hypre_CreateComputeInfo(ptr noundef %13, ptr noundef %15, ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9) #33
  store i32 1, ptr %10, align 4, !tbaa !7
  %17 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 1
  store i32 1, ptr %17, align 4, !tbaa !7
  %18 = getelementptr inbounds [3 x i32], ptr %10, i64 0, i64 2
  store i32 1, ptr %18, align 4, !tbaa !7
  %19 = load ptr, ptr %4, align 8, !tbaa !14
  %20 = load ptr, ptr %5, align 8, !tbaa !14
  %21 = load ptr, ptr %6, align 8, !tbaa !14
  %22 = load ptr, ptr %7, align 8, !tbaa !14
  %23 = load ptr, ptr %8, align 8, !tbaa !14
  %24 = load ptr, ptr %9, align 8, !tbaa !14
  %25 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %2, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !25
  %27 = call i32 @hypre_ComputePkgCreate(ptr noundef %19, ptr noundef %20, ptr noundef nonnull %10, ptr noundef nonnull %10, ptr noundef %21, ptr noundef %22, ptr noundef %23, ptr noundef %24, ptr noundef nonnull %10, ptr noundef %13, ptr noundef %26, i32 noundef 1, ptr noundef nonnull %11) #33
  %28 = call ptr @hypre_StructMatrixRef(ptr noundef %1) #33
  store ptr %28, ptr %0, align 8, !tbaa !667
  %29 = call ptr @hypre_StructVectorRef(ptr noundef %2) #33
  %30 = getelementptr inbounds %struct.hypre_StructMatvecData, ptr %0, i64 0, i32 1
  store ptr %29, ptr %30, align 8, !tbaa !669
  %31 = load ptr, ptr %11, align 8, !tbaa !14
  %32 = getelementptr inbounds %struct.hypre_StructMatvecData, ptr %0, i64 0, i32 2
  store ptr %31, ptr %32, align 8, !tbaa !670
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #34
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %10) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatvecCompute(ptr nocapture noundef readonly %0, double noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, double noundef %4, ptr nocapture noundef readonly %5) #0 {
  %7 = alloca ptr, align 8
  %8 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #34
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %8) #34
  %9 = getelementptr inbounds %struct.hypre_StructMatvecData, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !670
  %11 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 3
  %12 = fcmp oeq double %1, 0.000000e+00
  br i1 %12, label %13, label %128

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !15
  %16 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %15, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !20
  %18 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %17, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !21
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %2139

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %5, i64 0, i32 2
  %23 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %5, i64 0, i32 3
  %24 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %5, i64 0, i32 6
  %25 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 3, i64 1
  %26 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 3, i64 2
  %27 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %28 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  br label %29

29:                                               ; preds = %123, %21
  %30 = phi i64 [ 0, %21 ], [ %124, %123 ]
  %31 = load ptr, ptr %17, align 8, !tbaa !23
  %32 = getelementptr inbounds %struct.hypre_Box_struct, ptr %31, i64 %30
  %33 = load ptr, ptr %22, align 8, !tbaa !25
  %34 = load ptr, ptr %33, align 8, !tbaa !23
  %35 = load ptr, ptr %23, align 8, !tbaa !27
  %36 = load ptr, ptr %24, align 8, !tbaa !28
  %37 = getelementptr inbounds i32, ptr %36, i64 %30
  %38 = load i32, ptr %37, align 4, !tbaa !7
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, ptr %35, i64 %39
  %41 = call i32 @hypre_BoxGetSize(ptr noundef %32, ptr noundef nonnull %8) #33
  %42 = load i32, ptr %11, align 4, !tbaa !7
  %43 = load i32, ptr %8, align 4, !tbaa !7
  %44 = load i32, ptr %27, align 4, !tbaa !7
  %45 = load i32, ptr %28, align 4, !tbaa !7
  %46 = call i32 @llvm.smax.i32(i32 %44, i32 %43)
  %47 = call i32 @llvm.smax.i32(i32 %45, i32 %46)
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %123

49:                                               ; preds = %29
  %50 = getelementptr inbounds %struct.hypre_Box_struct, ptr %34, i64 %30, i32 1
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = getelementptr inbounds %struct.hypre_Box_struct, ptr %34, i64 %30
  %53 = load i32, ptr %52, align 4, !tbaa !7
  %54 = sub nsw i32 %51, %53
  %55 = icmp slt i32 %54, 0
  %56 = add nsw i32 %54, 1
  %57 = select i1 %55, i32 0, i32 %56
  %58 = getelementptr inbounds %struct.hypre_Box_struct, ptr %34, i64 %30, i32 1, i64 1
  %59 = load i32, ptr %58, align 4, !tbaa !7
  %60 = getelementptr inbounds [3 x i32], ptr %52, i64 0, i64 1
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = sub nsw i32 %59, %61
  %63 = icmp slt i32 %62, 0
  %64 = add nsw i32 %62, 1
  %65 = select i1 %63, i32 0, i32 %64
  %66 = mul i32 %57, %65
  %67 = load i32, ptr %26, align 4, !tbaa !7
  %68 = mul i32 %66, %67
  %69 = load i32, ptr %25, align 4, !tbaa !7
  %70 = mul nsw i32 %57, %69
  %71 = icmp sgt i32 %45, 0
  %72 = icmp sgt i32 %44, 0
  %73 = icmp sgt i32 %43, 0
  %74 = mul nsw i32 %43, %42
  %75 = sub i32 %70, %74
  %76 = mul nsw i32 %44, %70
  %77 = sub i32 %68, %76
  br i1 %71, label %78, label %123

78:                                               ; preds = %49
  %79 = load i32, ptr %32, align 4, !tbaa !7
  %80 = sub i32 %79, %53
  %81 = getelementptr inbounds i32, ptr %32, i64 1
  %82 = load i32, ptr %81, align 4, !tbaa !7
  %83 = sub i32 %82, %61
  %84 = getelementptr inbounds i32, ptr %32, i64 2
  %85 = load i32, ptr %84, align 4, !tbaa !7
  %86 = getelementptr inbounds [3 x i32], ptr %52, i64 0, i64 2
  %87 = load i32, ptr %86, align 4, !tbaa !7
  %88 = sub nsw i32 %85, %87
  %89 = mul nsw i32 %65, %88
  %90 = add nsw i32 %83, %89
  %91 = mul nsw i32 %90, %57
  %92 = add nsw i32 %80, %91
  %93 = sext i32 %42 to i64
  br label %94

94:                                               ; preds = %118, %78
  %95 = phi i32 [ %120, %118 ], [ %92, %78 ]
  %96 = phi i32 [ %121, %118 ], [ 0, %78 ]
  br i1 %72, label %97, label %118

97:                                               ; preds = %113, %94
  %98 = phi i32 [ %115, %113 ], [ %95, %94 ]
  %99 = phi i32 [ %116, %113 ], [ 0, %94 ]
  br i1 %73, label %100, label %113

100:                                              ; preds = %97
  %101 = sext i32 %98 to i64
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ %101, %100 ], [ %108, %102 ]
  %104 = phi i32 [ 0, %100 ], [ %109, %102 ]
  %105 = getelementptr inbounds double, ptr %40, i64 %103
  %106 = load double, ptr %105, align 8, !tbaa !29
  %107 = fmul double %106, %4
  store double %107, ptr %105, align 8, !tbaa !29
  %108 = add i64 %103, %93
  %109 = add nuw nsw i32 %104, 1
  %110 = icmp eq i32 %109, %43
  br i1 %110, label %111, label %102, !llvm.loop !671

111:                                              ; preds = %102
  %.lcssa = phi i64 [ %108, %102 ]
  %112 = trunc i64 %.lcssa to i32
  br label %113

113:                                              ; preds = %111, %97
  %114 = phi i32 [ %98, %97 ], [ %112, %111 ]
  %115 = add nsw i32 %75, %114
  %116 = add nuw nsw i32 %99, 1
  %117 = icmp eq i32 %116, %44
  br i1 %117, label %118, label %97, !llvm.loop !672

118:                                              ; preds = %113, %94
  %119 = phi i32 [ %95, %94 ], [ %115, %113 ]
  %120 = add nsw i32 %77, %119
  %121 = add nuw nsw i32 %96, 1
  %122 = icmp eq i32 %121, %45
  br i1 %122, label %123, label %94, !llvm.loop !673

123:                                              ; preds = %118, %49, %29
  %124 = add nuw nsw i64 %30, 1
  %125 = load i32, ptr %18, align 8, !tbaa !21
  %126 = sext i32 %125 to i64
  %127 = icmp slt i64 %124, %126
  br i1 %127, label %29, label %2139, !llvm.loop !674

128:                                              ; preds = %6
  %129 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 3
  %130 = load ptr, ptr %129, align 8, !tbaa !250
  %131 = load ptr, ptr %130, align 8, !tbaa !35
  %132 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %130, i64 0, i32 1
  %133 = load i32, ptr %132, align 8, !tbaa !172
  %134 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 2
  %135 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 3
  %136 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 1
  %137 = fdiv double %4, %1
  %138 = fcmp une double %137, 1.000000e+00
  %139 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 1
  %140 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %5, i64 0, i32 2
  %141 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %5, i64 0, i32 3
  %142 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %5, i64 0, i32 6
  %143 = fcmp oeq double %137, 0.000000e+00
  %144 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 3, i64 1
  %145 = getelementptr inbounds %struct.hypre_ComputePkg_struct, ptr %10, i64 0, i32 3, i64 2
  %146 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 1
  %147 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 2
  %148 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 5
  %149 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 2
  %150 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 6
  %151 = icmp sgt i32 %133, 0
  %152 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 6
  %153 = getelementptr inbounds %struct.hypre_StructMatrix_struct, ptr %2, i64 0, i32 9
  %154 = fcmp une double %1, 1.000000e+00
  %155 = sext i32 %133 to i64
  br label %156

156:                                              ; preds = %2138, %128
  %157 = phi i1 [ true, %128 ], [ false, %2138 ]
  br i1 %157, label %158, label %341

158:                                              ; preds = %156
  %159 = load ptr, ptr %135, align 8, !tbaa !27
  %160 = call i32 @hypre_InitializeIndtComputations(ptr noundef %10, ptr noundef %159, ptr noundef nonnull %7) #33
  %161 = load ptr, ptr %136, align 8, !tbaa !210
  br i1 %138, label %162, label %345

162:                                              ; preds = %158
  %163 = load ptr, ptr %139, align 8, !tbaa !15
  %164 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %163, i64 0, i32 2
  %165 = load ptr, ptr %164, align 8, !tbaa !20
  %166 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %165, i64 0, i32 1
  %167 = load i32, ptr %166, align 8, !tbaa !21
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %345

169:                                              ; preds = %336, %162
  %170 = phi i64 [ %337, %336 ], [ 0, %162 ]
  %171 = load ptr, ptr %165, align 8, !tbaa !23
  %172 = getelementptr inbounds %struct.hypre_Box_struct, ptr %171, i64 %170
  %173 = load ptr, ptr %140, align 8, !tbaa !25
  %174 = load ptr, ptr %173, align 8, !tbaa !23
  %175 = getelementptr inbounds %struct.hypre_Box_struct, ptr %174, i64 %170
  %176 = load ptr, ptr %141, align 8, !tbaa !27
  %177 = load ptr, ptr %142, align 8, !tbaa !28
  %178 = getelementptr inbounds i32, ptr %177, i64 %170
  %179 = load i32, ptr %178, align 4, !tbaa !7
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds double, ptr %176, i64 %180
  %182 = call i32 @hypre_BoxGetSize(ptr noundef %172, ptr noundef nonnull %8) #33
  %183 = load i32, ptr %11, align 4, !tbaa !7
  %184 = load i32, ptr %8, align 4, !tbaa !7
  %185 = load i32, ptr %146, align 4, !tbaa !7
  %186 = load i32, ptr %147, align 4, !tbaa !7
  %187 = call i32 @llvm.smax.i32(i32 %185, i32 %184)
  %188 = call i32 @llvm.smax.i32(i32 %186, i32 %187)
  %189 = icmp sgt i32 %188, 0
  br i1 %143, label %190, label %262

190:                                              ; preds = %169
  br i1 %189, label %191, label %336

191:                                              ; preds = %190
  %192 = getelementptr inbounds %struct.hypre_Box_struct, ptr %174, i64 %170, i32 1
  %193 = load i32, ptr %192, align 4, !tbaa !7
  %194 = load i32, ptr %175, align 4, !tbaa !7
  %195 = sub nsw i32 %193, %194
  %196 = icmp slt i32 %195, 0
  %197 = add nsw i32 %195, 1
  %198 = select i1 %196, i32 0, i32 %197
  %199 = getelementptr inbounds %struct.hypre_Box_struct, ptr %174, i64 %170, i32 1, i64 1
  %200 = load i32, ptr %199, align 4, !tbaa !7
  %201 = getelementptr inbounds [3 x i32], ptr %175, i64 0, i64 1
  %202 = load i32, ptr %201, align 4, !tbaa !7
  %203 = sub nsw i32 %200, %202
  %204 = icmp slt i32 %203, 0
  %205 = add nsw i32 %203, 1
  %206 = select i1 %204, i32 0, i32 %205
  %207 = mul i32 %198, %206
  %208 = load i32, ptr %145, align 4, !tbaa !7
  %209 = mul i32 %207, %208
  %210 = load i32, ptr %144, align 4, !tbaa !7
  %211 = mul nsw i32 %198, %210
  %212 = icmp sgt i32 %186, 0
  %213 = icmp sgt i32 %185, 0
  %214 = icmp sgt i32 %184, 0
  %215 = mul nsw i32 %184, %183
  %216 = sub i32 %211, %215
  %217 = mul nsw i32 %185, %211
  %218 = sub i32 %209, %217
  br i1 %212, label %219, label %336

219:                                              ; preds = %191
  %220 = load i32, ptr %172, align 4, !tbaa !7
  %221 = sub i32 %220, %194
  %222 = getelementptr inbounds i32, ptr %172, i64 1
  %223 = load i32, ptr %222, align 4, !tbaa !7
  %224 = sub i32 %223, %202
  %225 = getelementptr inbounds i32, ptr %172, i64 2
  %226 = load i32, ptr %225, align 4, !tbaa !7
  %227 = getelementptr inbounds [3 x i32], ptr %175, i64 0, i64 2
  %228 = load i32, ptr %227, align 4, !tbaa !7
  %229 = sub nsw i32 %226, %228
  %230 = mul nsw i32 %206, %229
  %231 = add nsw i32 %224, %230
  %232 = mul nsw i32 %231, %198
  %233 = add nsw i32 %221, %232
  %234 = sext i32 %183 to i64
  br label %235

235:                                              ; preds = %257, %219
  %236 = phi i32 [ %259, %257 ], [ %233, %219 ]
  %237 = phi i32 [ %260, %257 ], [ 0, %219 ]
  br i1 %213, label %238, label %257

238:                                              ; preds = %252, %235
  %239 = phi i32 [ %254, %252 ], [ %236, %235 ]
  %240 = phi i32 [ %255, %252 ], [ 0, %235 ]
  br i1 %214, label %241, label %252

241:                                              ; preds = %238
  %242 = sext i32 %239 to i64
  br label %243

243:                                              ; preds = %243, %241
  %244 = phi i64 [ %242, %241 ], [ %247, %243 ]
  %245 = phi i32 [ 0, %241 ], [ %248, %243 ]
  %246 = getelementptr inbounds double, ptr %181, i64 %244
  store double 0.000000e+00, ptr %246, align 8, !tbaa !29
  %247 = add i64 %244, %234
  %248 = add nuw nsw i32 %245, 1
  %249 = icmp eq i32 %248, %184
  br i1 %249, label %250, label %243, !llvm.loop !675

250:                                              ; preds = %243
  %.lcssa2 = phi i64 [ %247, %243 ]
  %251 = trunc i64 %.lcssa2 to i32
  br label %252

252:                                              ; preds = %250, %238
  %253 = phi i32 [ %239, %238 ], [ %251, %250 ]
  %254 = add nsw i32 %216, %253
  %255 = add nuw nsw i32 %240, 1
  %256 = icmp eq i32 %255, %185
  br i1 %256, label %257, label %238, !llvm.loop !676

257:                                              ; preds = %252, %235
  %258 = phi i32 [ %236, %235 ], [ %254, %252 ]
  %259 = add nsw i32 %218, %258
  %260 = add nuw nsw i32 %237, 1
  %261 = icmp eq i32 %260, %186
  br i1 %261, label %336, label %235, !llvm.loop !677

262:                                              ; preds = %169
  br i1 %189, label %263, label %336

263:                                              ; preds = %262
  %264 = getelementptr inbounds %struct.hypre_Box_struct, ptr %174, i64 %170, i32 1
  %265 = load i32, ptr %264, align 4, !tbaa !7
  %266 = load i32, ptr %175, align 4, !tbaa !7
  %267 = sub nsw i32 %265, %266
  %268 = icmp slt i32 %267, 0
  %269 = add nsw i32 %267, 1
  %270 = select i1 %268, i32 0, i32 %269
  %271 = getelementptr inbounds %struct.hypre_Box_struct, ptr %174, i64 %170, i32 1, i64 1
  %272 = load i32, ptr %271, align 4, !tbaa !7
  %273 = getelementptr inbounds [3 x i32], ptr %175, i64 0, i64 1
  %274 = load i32, ptr %273, align 4, !tbaa !7
  %275 = sub nsw i32 %272, %274
  %276 = icmp slt i32 %275, 0
  %277 = add nsw i32 %275, 1
  %278 = select i1 %276, i32 0, i32 %277
  %279 = mul i32 %270, %278
  %280 = load i32, ptr %145, align 4, !tbaa !7
  %281 = mul i32 %279, %280
  %282 = load i32, ptr %144, align 4, !tbaa !7
  %283 = mul nsw i32 %270, %282
  %284 = icmp sgt i32 %186, 0
  %285 = icmp sgt i32 %185, 0
  %286 = icmp sgt i32 %184, 0
  %287 = mul nsw i32 %184, %183
  %288 = sub i32 %283, %287
  %289 = mul nsw i32 %185, %283
  %290 = sub i32 %281, %289
  br i1 %284, label %291, label %336

291:                                              ; preds = %263
  %292 = load i32, ptr %172, align 4, !tbaa !7
  %293 = sub i32 %292, %266
  %294 = getelementptr inbounds i32, ptr %172, i64 1
  %295 = load i32, ptr %294, align 4, !tbaa !7
  %296 = sub i32 %295, %274
  %297 = getelementptr inbounds i32, ptr %172, i64 2
  %298 = load i32, ptr %297, align 4, !tbaa !7
  %299 = getelementptr inbounds [3 x i32], ptr %175, i64 0, i64 2
  %300 = load i32, ptr %299, align 4, !tbaa !7
  %301 = sub nsw i32 %298, %300
  %302 = mul nsw i32 %278, %301
  %303 = add nsw i32 %296, %302
  %304 = mul nsw i32 %303, %270
  %305 = add nsw i32 %293, %304
  %306 = sext i32 %183 to i64
  br label %307

307:                                              ; preds = %331, %291
  %308 = phi i32 [ %333, %331 ], [ %305, %291 ]
  %309 = phi i32 [ %334, %331 ], [ 0, %291 ]
  br i1 %285, label %310, label %331

310:                                              ; preds = %326, %307
  %311 = phi i32 [ %328, %326 ], [ %308, %307 ]
  %312 = phi i32 [ %329, %326 ], [ 0, %307 ]
  br i1 %286, label %313, label %326

313:                                              ; preds = %310
  %314 = sext i32 %311 to i64
  br label %315

315:                                              ; preds = %315, %313
  %316 = phi i64 [ %314, %313 ], [ %321, %315 ]
  %317 = phi i32 [ 0, %313 ], [ %322, %315 ]
  %318 = getelementptr inbounds double, ptr %181, i64 %316
  %319 = load double, ptr %318, align 8, !tbaa !29
  %320 = fmul double %137, %319
  store double %320, ptr %318, align 8, !tbaa !29
  %321 = add i64 %316, %306
  %322 = add nuw nsw i32 %317, 1
  %323 = icmp eq i32 %322, %184
  br i1 %323, label %324, label %315, !llvm.loop !678

324:                                              ; preds = %315
  %.lcssa1 = phi i64 [ %321, %315 ]
  %325 = trunc i64 %.lcssa1 to i32
  br label %326

326:                                              ; preds = %324, %310
  %327 = phi i32 [ %311, %310 ], [ %325, %324 ]
  %328 = add nsw i32 %288, %327
  %329 = add nuw nsw i32 %312, 1
  %330 = icmp eq i32 %329, %185
  br i1 %330, label %331, label %310, !llvm.loop !679

331:                                              ; preds = %326, %307
  %332 = phi i32 [ %308, %307 ], [ %328, %326 ]
  %333 = add nsw i32 %290, %332
  %334 = add nuw nsw i32 %309, 1
  %335 = icmp eq i32 %334, %186
  br i1 %335, label %336, label %307, !llvm.loop !680

336:                                              ; preds = %331, %263, %262, %257, %191, %190
  %337 = add nuw nsw i64 %170, 1
  %338 = load i32, ptr %166, align 8, !tbaa !21
  %339 = sext i32 %338 to i64
  %340 = icmp slt i64 %337, %339
  br i1 %340, label %169, label %345, !llvm.loop !681

341:                                              ; preds = %156
  %342 = load ptr, ptr %7, align 8, !tbaa !14
  %343 = call i32 @hypre_FinalizeIndtComputations(ptr noundef %342) #33
  %344 = load ptr, ptr %134, align 8, !tbaa !211
  br label %345

345:                                              ; preds = %341, %336, %162, %158
  %346 = phi ptr [ %344, %341 ], [ %161, %158 ], [ %161, %162 ], [ %161, %336 ]
  %347 = getelementptr inbounds %struct.hypre_BoxArrayArray_struct, ptr %346, i64 0, i32 1
  %348 = load i32, ptr %347, align 8, !tbaa !45
  %349 = icmp sgt i32 %348, 0
  br i1 %349, label %350, label %2138

350:                                              ; preds = %2133, %345
  %351 = phi i32 [ %2134, %2133 ], [ %348, %345 ]
  %352 = phi i64 [ %2135, %2133 ], [ 0, %345 ]
  %353 = load ptr, ptr %346, align 8, !tbaa !42
  %354 = getelementptr inbounds ptr, ptr %353, i64 %352
  %355 = load ptr, ptr %354, align 8, !tbaa !14
  %356 = load ptr, ptr %148, align 8, !tbaa !24
  %357 = load ptr, ptr %356, align 8, !tbaa !23
  %358 = getelementptr inbounds %struct.hypre_Box_struct, ptr %357, i64 %352
  %359 = load ptr, ptr %149, align 8, !tbaa !25
  %360 = load ptr, ptr %359, align 8, !tbaa !23
  %361 = getelementptr inbounds %struct.hypre_Box_struct, ptr %360, i64 %352
  %362 = load ptr, ptr %140, align 8, !tbaa !25
  %363 = load ptr, ptr %362, align 8, !tbaa !23
  %364 = getelementptr inbounds %struct.hypre_Box_struct, ptr %363, i64 %352
  %365 = load ptr, ptr %135, align 8, !tbaa !27
  %366 = load ptr, ptr %150, align 8, !tbaa !28
  %367 = getelementptr inbounds i32, ptr %366, i64 %352
  %368 = load i32, ptr %367, align 4, !tbaa !7
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds double, ptr %365, i64 %369
  %371 = load ptr, ptr %141, align 8, !tbaa !27
  %372 = load ptr, ptr %142, align 8, !tbaa !28
  %373 = getelementptr inbounds i32, ptr %372, i64 %352
  %374 = load i32, ptr %373, align 4, !tbaa !7
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds double, ptr %371, i64 %375
  %377 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %355, i64 0, i32 1
  %378 = load i32, ptr %377, align 8, !tbaa !21
  %379 = icmp sgt i32 %378, 0
  br i1 %379, label %380, label %2133

380:                                              ; preds = %350
  %381 = getelementptr inbounds %struct.hypre_Box_struct, ptr %360, i64 %352, i32 1
  %382 = getelementptr inbounds %struct.hypre_Box_struct, ptr %360, i64 %352, i32 1, i64 1
  %383 = getelementptr inbounds [3 x i32], ptr %361, i64 0, i64 1
  %384 = getelementptr inbounds [3 x i32], ptr %358, i64 0, i64 1
  %385 = getelementptr inbounds [3 x i32], ptr %358, i64 0, i64 2
  %386 = getelementptr inbounds %struct.hypre_Box_struct, ptr %357, i64 %352, i32 1
  %387 = getelementptr inbounds %struct.hypre_Box_struct, ptr %357, i64 %352, i32 1, i64 1
  %388 = getelementptr inbounds [3 x i32], ptr %361, i64 0, i64 2
  %389 = getelementptr inbounds [3 x i32], ptr %364, i64 0, i64 1
  %390 = getelementptr inbounds [3 x i32], ptr %364, i64 0, i64 2
  %391 = getelementptr inbounds %struct.hypre_Box_struct, ptr %363, i64 %352, i32 1
  %392 = getelementptr inbounds %struct.hypre_Box_struct, ptr %363, i64 %352, i32 1, i64 1
  br label %393

393:                                              ; preds = %2126, %380
  %394 = phi i64 [ 0, %380 ], [ %2127, %2126 ]
  %395 = load ptr, ptr %355, align 8, !tbaa !23
  %396 = getelementptr inbounds %struct.hypre_Box_struct, ptr %395, i64 %394
  %397 = call i32 @hypre_BoxGetSize(ptr noundef %396, ptr noundef nonnull %8) #33
  br i1 %151, label %398, label %2048

398:                                              ; preds = %393
  %399 = getelementptr inbounds i32, ptr %396, i64 1
  %400 = getelementptr inbounds i32, ptr %396, i64 2
  %401 = load i32, ptr %8, align 4
  %402 = load i32, ptr %146, align 4
  %403 = load i32, ptr %147, align 4
  %404 = call i32 @llvm.smax.i32(i32 %402, i32 %401)
  %405 = call i32 @llvm.smax.i32(i32 %403, i32 %404)
  %406 = icmp sgt i32 %405, 0
  %407 = icmp sgt i32 %403, 0
  %408 = icmp sgt i32 %402, 0
  %409 = icmp sgt i32 %401, 0
  %410 = load i32, ptr %146, align 4
  %411 = load i32, ptr %147, align 4
  %412 = call i32 @llvm.smax.i32(i32 %410, i32 %401)
  %413 = call i32 @llvm.smax.i32(i32 %411, i32 %412)
  %414 = icmp sgt i32 %413, 0
  %415 = icmp sgt i32 %411, 0
  %416 = icmp sgt i32 %410, 0
  %417 = load i32, ptr %146, align 4
  %418 = call i32 @llvm.smax.i32(i32 %417, i32 %401)
  %419 = icmp sgt i32 %417, 0
  br label %420

420:                                              ; preds = %2045, %398
  %421 = phi i64 [ 0, %398 ], [ %2046, %2045 ]
  %422 = trunc i64 %421 to i32
  %423 = sub nsw i32 %133, %422
  %424 = call i32 @llvm.smin.i32(i32 %423, i32 7)
  switch i32 %424, label %2045 [
    i32 7, label %425
    i32 6, label %727
    i32 5, label %1007
    i32 4, label %1262
    i32 3, label %1491
    i32 2, label %1698
    i32 1, label %1883
  ]

425:                                              ; preds = %420
  %426 = load ptr, ptr %152, align 8, !tbaa !340
  %427 = load ptr, ptr %153, align 8, !tbaa !341
  %428 = getelementptr inbounds ptr, ptr %427, i64 %352
  %429 = load ptr, ptr %428, align 8, !tbaa !14
  %430 = getelementptr inbounds i32, ptr %429, i64 %421
  %431 = load i32, ptr %430, align 4, !tbaa !7
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds double, ptr %426, i64 %432
  %434 = add nuw nsw i64 %421, 1
  %435 = getelementptr inbounds i32, ptr %429, i64 %434
  %436 = load i32, ptr %435, align 4, !tbaa !7
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds double, ptr %426, i64 %437
  %439 = add nuw nsw i64 %421, 2
  %440 = getelementptr inbounds i32, ptr %429, i64 %439
  %441 = load i32, ptr %440, align 4, !tbaa !7
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds double, ptr %426, i64 %442
  %444 = add nuw nsw i64 %421, 3
  %445 = getelementptr inbounds i32, ptr %429, i64 %444
  %446 = load i32, ptr %445, align 4, !tbaa !7
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds double, ptr %426, i64 %447
  %449 = add nuw nsw i64 %421, 4
  %450 = getelementptr inbounds i32, ptr %429, i64 %449
  %451 = load i32, ptr %450, align 4, !tbaa !7
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds double, ptr %426, i64 %452
  %454 = add nuw nsw i64 %421, 5
  %455 = getelementptr inbounds i32, ptr %429, i64 %454
  %456 = load i32, ptr %455, align 4, !tbaa !7
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds double, ptr %426, i64 %457
  %459 = add nuw nsw i64 %421, 6
  %460 = getelementptr inbounds i32, ptr %429, i64 %459
  %461 = load i32, ptr %460, align 4, !tbaa !7
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds double, ptr %426, i64 %462
  %464 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %465 = load i32, ptr %464, align 4, !tbaa !7
  %466 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %467 = load i32, ptr %466, align 4, !tbaa !7
  %468 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %469 = load i32, ptr %468, align 4, !tbaa !7
  %470 = load i32, ptr %382, align 4, !tbaa !7
  %471 = load i32, ptr %383, align 4, !tbaa !7
  %472 = sub nsw i32 %470, %471
  %473 = add nsw i32 %472, 1
  %474 = icmp slt i32 %472, 0
  %475 = select i1 %474, i32 0, i32 %473
  %476 = mul nsw i32 %475, %469
  %477 = add nsw i32 %476, %467
  %478 = load i32, ptr %381, align 4, !tbaa !7
  %479 = load i32, ptr %361, align 4, !tbaa !7
  %480 = sub nsw i32 %478, %479
  %481 = add nsw i32 %480, 1
  %482 = icmp slt i32 %480, 0
  %483 = select i1 %482, i32 0, i32 %481
  %484 = mul nsw i32 %477, %483
  %485 = add nsw i32 %484, %465
  %486 = getelementptr inbounds [3 x i32], ptr %131, i64 %434
  %487 = load i32, ptr %486, align 4, !tbaa !7
  %488 = getelementptr inbounds [3 x i32], ptr %131, i64 %434, i64 1
  %489 = load i32, ptr %488, align 4, !tbaa !7
  %490 = getelementptr inbounds [3 x i32], ptr %131, i64 %434, i64 2
  %491 = load i32, ptr %490, align 4, !tbaa !7
  %492 = mul nsw i32 %491, %475
  %493 = add nsw i32 %492, %489
  %494 = mul nsw i32 %493, %483
  %495 = add nsw i32 %494, %487
  %496 = getelementptr inbounds [3 x i32], ptr %131, i64 %439
  %497 = load i32, ptr %496, align 4, !tbaa !7
  %498 = getelementptr inbounds [3 x i32], ptr %131, i64 %439, i64 1
  %499 = load i32, ptr %498, align 4, !tbaa !7
  %500 = getelementptr inbounds [3 x i32], ptr %131, i64 %439, i64 2
  %501 = load i32, ptr %500, align 4, !tbaa !7
  %502 = mul nsw i32 %501, %475
  %503 = add nsw i32 %502, %499
  %504 = mul nsw i32 %503, %483
  %505 = add nsw i32 %504, %497
  %506 = getelementptr inbounds [3 x i32], ptr %131, i64 %444
  %507 = load i32, ptr %506, align 4, !tbaa !7
  %508 = getelementptr inbounds [3 x i32], ptr %131, i64 %444, i64 1
  %509 = load i32, ptr %508, align 4, !tbaa !7
  %510 = getelementptr inbounds [3 x i32], ptr %131, i64 %444, i64 2
  %511 = load i32, ptr %510, align 4, !tbaa !7
  %512 = mul nsw i32 %511, %475
  %513 = add nsw i32 %512, %509
  %514 = mul nsw i32 %513, %483
  %515 = add nsw i32 %514, %507
  %516 = getelementptr inbounds [3 x i32], ptr %131, i64 %449
  %517 = load i32, ptr %516, align 4, !tbaa !7
  %518 = getelementptr inbounds [3 x i32], ptr %131, i64 %449, i64 1
  %519 = load i32, ptr %518, align 4, !tbaa !7
  %520 = getelementptr inbounds [3 x i32], ptr %131, i64 %449, i64 2
  %521 = load i32, ptr %520, align 4, !tbaa !7
  %522 = mul nsw i32 %521, %475
  %523 = add nsw i32 %522, %519
  %524 = mul nsw i32 %523, %483
  %525 = add nsw i32 %524, %517
  %526 = getelementptr inbounds [3 x i32], ptr %131, i64 %454
  %527 = load i32, ptr %526, align 4, !tbaa !7
  %528 = getelementptr inbounds [3 x i32], ptr %131, i64 %454, i64 1
  %529 = load i32, ptr %528, align 4, !tbaa !7
  %530 = getelementptr inbounds [3 x i32], ptr %131, i64 %454, i64 2
  %531 = load i32, ptr %530, align 4, !tbaa !7
  %532 = mul nsw i32 %531, %475
  %533 = add nsw i32 %532, %529
  %534 = mul nsw i32 %533, %483
  %535 = add nsw i32 %534, %527
  %536 = getelementptr inbounds [3 x i32], ptr %131, i64 %459
  %537 = load i32, ptr %536, align 4, !tbaa !7
  %538 = getelementptr inbounds [3 x i32], ptr %131, i64 %459, i64 1
  %539 = load i32, ptr %538, align 4, !tbaa !7
  %540 = getelementptr inbounds [3 x i32], ptr %131, i64 %459, i64 2
  %541 = load i32, ptr %540, align 4, !tbaa !7
  %542 = mul nsw i32 %541, %475
  %543 = add nsw i32 %542, %539
  %544 = mul nsw i32 %543, %483
  %545 = add nsw i32 %544, %537
  %546 = load i32, ptr %11, align 4, !tbaa !7
  %547 = load i32, ptr %146, align 4, !tbaa !7
  %548 = load i32, ptr %147, align 4, !tbaa !7
  %549 = call i32 @llvm.smax.i32(i32 %547, i32 %401)
  %550 = call i32 @llvm.smax.i32(i32 %548, i32 %549)
  %551 = icmp sgt i32 %550, 0
  br i1 %551, label %552, label %2045

552:                                              ; preds = %425
  %553 = load i32, ptr %391, align 4, !tbaa !7
  %554 = load i32, ptr %364, align 4, !tbaa !7
  %555 = sub nsw i32 %553, %554
  %556 = icmp slt i32 %555, 0
  %557 = add nsw i32 %555, 1
  %558 = select i1 %556, i32 0, i32 %557
  %559 = load i32, ptr %392, align 4, !tbaa !7
  %560 = load i32, ptr %389, align 4, !tbaa !7
  %561 = sub nsw i32 %559, %560
  %562 = icmp slt i32 %561, 0
  %563 = add nsw i32 %561, 1
  %564 = select i1 %562, i32 0, i32 %563
  %565 = mul i32 %558, %564
  %566 = load i32, ptr %145, align 4, !tbaa !7
  %567 = mul i32 %565, %566
  %568 = load i32, ptr %144, align 4, !tbaa !7
  %569 = mul nsw i32 %558, %568
  %570 = mul i32 %483, %475
  %571 = mul i32 %570, %566
  %572 = mul nsw i32 %568, %483
  %573 = load i32, ptr %386, align 4, !tbaa !7
  %574 = load i32, ptr %358, align 4, !tbaa !7
  %575 = sub nsw i32 %573, %574
  %576 = icmp slt i32 %575, 0
  %577 = add nsw i32 %575, 1
  %578 = select i1 %576, i32 0, i32 %577
  %579 = load i32, ptr %387, align 4, !tbaa !7
  %580 = load i32, ptr %384, align 4, !tbaa !7
  %581 = sub nsw i32 %579, %580
  %582 = icmp slt i32 %581, 0
  %583 = add nsw i32 %581, 1
  %584 = select i1 %582, i32 0, i32 %583
  %585 = mul i32 %578, %584
  %586 = mul i32 %585, %566
  %587 = mul nsw i32 %568, %578
  %588 = icmp sgt i32 %548, 0
  %589 = icmp sgt i32 %547, 0
  %590 = mul i32 %546, %401
  %591 = sub i32 %587, %590
  %592 = sub i32 %572, %590
  %593 = sub i32 %569, %590
  %594 = mul nsw i32 %547, %587
  %595 = sub i32 %586, %594
  %596 = mul nsw i32 %547, %572
  %597 = sub i32 %571, %596
  %598 = mul nsw i32 %547, %569
  %599 = sub i32 %567, %598
  br i1 %588, label %600, label %2045

600:                                              ; preds = %552
  %601 = load i32, ptr %396, align 4, !tbaa !7
  %602 = sub i32 %601, %574
  %603 = load i32, ptr %399, align 4, !tbaa !7
  %604 = sub i32 %603, %580
  %605 = load i32, ptr %400, align 4, !tbaa !7
  %606 = load i32, ptr %385, align 4, !tbaa !7
  %607 = sub nsw i32 %605, %606
  %608 = mul nsw i32 %584, %607
  %609 = add nsw i32 %604, %608
  %610 = mul nsw i32 %609, %578
  %611 = add nsw i32 %602, %610
  %612 = sub i32 %601, %479
  %613 = sub i32 %603, %471
  %614 = load i32, ptr %388, align 4, !tbaa !7
  %615 = sub nsw i32 %605, %614
  %616 = mul nsw i32 %615, %475
  %617 = add nsw i32 %613, %616
  %618 = mul nsw i32 %617, %483
  %619 = add nsw i32 %612, %618
  %620 = sub i32 %601, %554
  %621 = sub i32 %603, %560
  %622 = load i32, ptr %390, align 4, !tbaa !7
  %623 = sub nsw i32 %605, %622
  %624 = mul nsw i32 %564, %623
  %625 = add nsw i32 %621, %624
  %626 = mul nsw i32 %625, %558
  %627 = add nsw i32 %620, %626
  %628 = sext i32 %546 to i64
  %629 = sext i32 %545 to i64
  %630 = sext i32 %535 to i64
  %631 = sext i32 %525 to i64
  %632 = sext i32 %515 to i64
  %633 = sext i32 %505 to i64
  %634 = sext i32 %495 to i64
  %635 = sext i32 %485 to i64
  br label %636

636:                                              ; preds = %718, %600
  %637 = phi i32 [ %722, %718 ], [ %611, %600 ]
  %638 = phi i32 [ %723, %718 ], [ %619, %600 ]
  %639 = phi i32 [ %724, %718 ], [ %627, %600 ]
  %640 = phi i32 [ %725, %718 ], [ 0, %600 ]
  br i1 %589, label %641, label %718

641:                                              ; preds = %709, %636
  %642 = phi i32 [ %713, %709 ], [ %637, %636 ]
  %643 = phi i32 [ %714, %709 ], [ %638, %636 ]
  %644 = phi i32 [ %715, %709 ], [ %639, %636 ]
  %645 = phi i32 [ %716, %709 ], [ 0, %636 ]
  br i1 %409, label %646, label %709

646:                                              ; preds = %641
  %647 = sext i32 %642 to i64
  %648 = sext i32 %643 to i64
  %649 = sext i32 %644 to i64
  br label %650

650:                                              ; preds = %650, %646
  %651 = phi i64 [ %649, %646 ], [ %702, %650 ]
  %652 = phi i64 [ %648, %646 ], [ %701, %650 ]
  %653 = phi i64 [ %647, %646 ], [ %700, %650 ]
  %654 = phi i32 [ 0, %646 ], [ %703, %650 ]
  %655 = getelementptr inbounds double, ptr %433, i64 %653
  %656 = load double, ptr %655, align 8, !tbaa !29
  %657 = add nsw i64 %652, %635
  %658 = getelementptr inbounds double, ptr %370, i64 %657
  %659 = load double, ptr %658, align 8, !tbaa !29
  %660 = getelementptr inbounds double, ptr %438, i64 %653
  %661 = load double, ptr %660, align 8, !tbaa !29
  %662 = add nsw i64 %652, %634
  %663 = getelementptr inbounds double, ptr %370, i64 %662
  %664 = load double, ptr %663, align 8, !tbaa !29
  %665 = fmul double %661, %664
  %666 = call double @llvm.fmuladd.f64(double %656, double %659, double %665)
  %667 = getelementptr inbounds double, ptr %443, i64 %653
  %668 = load double, ptr %667, align 8, !tbaa !29
  %669 = add nsw i64 %652, %633
  %670 = getelementptr inbounds double, ptr %370, i64 %669
  %671 = load double, ptr %670, align 8, !tbaa !29
  %672 = call double @llvm.fmuladd.f64(double %668, double %671, double %666)
  %673 = getelementptr inbounds double, ptr %448, i64 %653
  %674 = load double, ptr %673, align 8, !tbaa !29
  %675 = add nsw i64 %652, %632
  %676 = getelementptr inbounds double, ptr %370, i64 %675
  %677 = load double, ptr %676, align 8, !tbaa !29
  %678 = call double @llvm.fmuladd.f64(double %674, double %677, double %672)
  %679 = getelementptr inbounds double, ptr %453, i64 %653
  %680 = load double, ptr %679, align 8, !tbaa !29
  %681 = add nsw i64 %652, %631
  %682 = getelementptr inbounds double, ptr %370, i64 %681
  %683 = load double, ptr %682, align 8, !tbaa !29
  %684 = call double @llvm.fmuladd.f64(double %680, double %683, double %678)
  %685 = getelementptr inbounds double, ptr %458, i64 %653
  %686 = load double, ptr %685, align 8, !tbaa !29
  %687 = add nsw i64 %652, %630
  %688 = getelementptr inbounds double, ptr %370, i64 %687
  %689 = load double, ptr %688, align 8, !tbaa !29
  %690 = call double @llvm.fmuladd.f64(double %686, double %689, double %684)
  %691 = getelementptr inbounds double, ptr %463, i64 %653
  %692 = load double, ptr %691, align 8, !tbaa !29
  %693 = add nsw i64 %652, %629
  %694 = getelementptr inbounds double, ptr %370, i64 %693
  %695 = load double, ptr %694, align 8, !tbaa !29
  %696 = call double @llvm.fmuladd.f64(double %692, double %695, double %690)
  %697 = getelementptr inbounds double, ptr %376, i64 %651
  %698 = load double, ptr %697, align 8, !tbaa !29
  %699 = fadd double %698, %696
  store double %699, ptr %697, align 8, !tbaa !29
  %700 = add i64 %653, %628
  %701 = add i64 %652, %628
  %702 = add i64 %651, %628
  %703 = add nuw nsw i32 %654, 1
  %704 = icmp eq i32 %703, %401
  br i1 %704, label %705, label %650, !llvm.loop !682

705:                                              ; preds = %650
  %.lcssa23 = phi i64 [ %700, %650 ]
  %.lcssa22 = phi i64 [ %701, %650 ]
  %.lcssa21 = phi i64 [ %702, %650 ]
  %706 = trunc i64 %.lcssa21 to i32
  %707 = trunc i64 %.lcssa22 to i32
  %708 = trunc i64 %.lcssa23 to i32
  br label %709

709:                                              ; preds = %705, %641
  %710 = phi i32 [ %644, %641 ], [ %706, %705 ]
  %711 = phi i32 [ %643, %641 ], [ %707, %705 ]
  %712 = phi i32 [ %642, %641 ], [ %708, %705 ]
  %713 = add nsw i32 %591, %712
  %714 = add nsw i32 %592, %711
  %715 = add nsw i32 %593, %710
  %716 = add nuw nsw i32 %645, 1
  %717 = icmp eq i32 %716, %547
  br i1 %717, label %718, label %641, !llvm.loop !683

718:                                              ; preds = %709, %636
  %719 = phi i32 [ %639, %636 ], [ %715, %709 ]
  %720 = phi i32 [ %638, %636 ], [ %714, %709 ]
  %721 = phi i32 [ %637, %636 ], [ %713, %709 ]
  %722 = add nsw i32 %595, %721
  %723 = add nsw i32 %597, %720
  %724 = add nsw i32 %599, %719
  %725 = add nuw nsw i32 %640, 1
  %726 = icmp eq i32 %725, %548
  br i1 %726, label %2045, label %636, !llvm.loop !684

727:                                              ; preds = %420
  %728 = load ptr, ptr %152, align 8, !tbaa !340
  %729 = load ptr, ptr %153, align 8, !tbaa !341
  %730 = getelementptr inbounds ptr, ptr %729, i64 %352
  %731 = load ptr, ptr %730, align 8, !tbaa !14
  %732 = getelementptr inbounds i32, ptr %731, i64 %421
  %733 = load i32, ptr %732, align 4, !tbaa !7
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds double, ptr %728, i64 %734
  %736 = add nuw nsw i64 %421, 1
  %737 = getelementptr inbounds i32, ptr %731, i64 %736
  %738 = load i32, ptr %737, align 4, !tbaa !7
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds double, ptr %728, i64 %739
  %741 = add nuw nsw i64 %421, 2
  %742 = getelementptr inbounds i32, ptr %731, i64 %741
  %743 = load i32, ptr %742, align 4, !tbaa !7
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds double, ptr %728, i64 %744
  %746 = add nuw nsw i64 %421, 3
  %747 = getelementptr inbounds i32, ptr %731, i64 %746
  %748 = load i32, ptr %747, align 4, !tbaa !7
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds double, ptr %728, i64 %749
  %751 = add nuw nsw i64 %421, 4
  %752 = getelementptr inbounds i32, ptr %731, i64 %751
  %753 = load i32, ptr %752, align 4, !tbaa !7
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds double, ptr %728, i64 %754
  %756 = add nuw nsw i64 %421, 5
  %757 = getelementptr inbounds i32, ptr %731, i64 %756
  %758 = load i32, ptr %757, align 4, !tbaa !7
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds double, ptr %728, i64 %759
  %761 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %762 = load i32, ptr %761, align 4, !tbaa !7
  %763 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %764 = load i32, ptr %763, align 4, !tbaa !7
  %765 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %766 = load i32, ptr %765, align 4, !tbaa !7
  %767 = load i32, ptr %382, align 4, !tbaa !7
  %768 = load i32, ptr %383, align 4, !tbaa !7
  %769 = sub nsw i32 %767, %768
  %770 = add nsw i32 %769, 1
  %771 = icmp slt i32 %769, 0
  %772 = select i1 %771, i32 0, i32 %770
  %773 = mul nsw i32 %772, %766
  %774 = add nsw i32 %773, %764
  %775 = load i32, ptr %381, align 4, !tbaa !7
  %776 = load i32, ptr %361, align 4, !tbaa !7
  %777 = sub nsw i32 %775, %776
  %778 = add nsw i32 %777, 1
  %779 = icmp slt i32 %777, 0
  %780 = select i1 %779, i32 0, i32 %778
  %781 = mul nsw i32 %774, %780
  %782 = add nsw i32 %781, %762
  %783 = getelementptr inbounds [3 x i32], ptr %131, i64 %736
  %784 = load i32, ptr %783, align 4, !tbaa !7
  %785 = getelementptr inbounds [3 x i32], ptr %131, i64 %736, i64 1
  %786 = load i32, ptr %785, align 4, !tbaa !7
  %787 = getelementptr inbounds [3 x i32], ptr %131, i64 %736, i64 2
  %788 = load i32, ptr %787, align 4, !tbaa !7
  %789 = mul nsw i32 %788, %772
  %790 = add nsw i32 %789, %786
  %791 = mul nsw i32 %790, %780
  %792 = add nsw i32 %791, %784
  %793 = getelementptr inbounds [3 x i32], ptr %131, i64 %741
  %794 = load i32, ptr %793, align 4, !tbaa !7
  %795 = getelementptr inbounds [3 x i32], ptr %131, i64 %741, i64 1
  %796 = load i32, ptr %795, align 4, !tbaa !7
  %797 = getelementptr inbounds [3 x i32], ptr %131, i64 %741, i64 2
  %798 = load i32, ptr %797, align 4, !tbaa !7
  %799 = mul nsw i32 %798, %772
  %800 = add nsw i32 %799, %796
  %801 = mul nsw i32 %800, %780
  %802 = add nsw i32 %801, %794
  %803 = getelementptr inbounds [3 x i32], ptr %131, i64 %746
  %804 = load i32, ptr %803, align 4, !tbaa !7
  %805 = getelementptr inbounds [3 x i32], ptr %131, i64 %746, i64 1
  %806 = load i32, ptr %805, align 4, !tbaa !7
  %807 = getelementptr inbounds [3 x i32], ptr %131, i64 %746, i64 2
  %808 = load i32, ptr %807, align 4, !tbaa !7
  %809 = mul nsw i32 %808, %772
  %810 = add nsw i32 %809, %806
  %811 = mul nsw i32 %810, %780
  %812 = add nsw i32 %811, %804
  %813 = getelementptr inbounds [3 x i32], ptr %131, i64 %751
  %814 = load i32, ptr %813, align 4, !tbaa !7
  %815 = getelementptr inbounds [3 x i32], ptr %131, i64 %751, i64 1
  %816 = load i32, ptr %815, align 4, !tbaa !7
  %817 = getelementptr inbounds [3 x i32], ptr %131, i64 %751, i64 2
  %818 = load i32, ptr %817, align 4, !tbaa !7
  %819 = mul nsw i32 %818, %772
  %820 = add nsw i32 %819, %816
  %821 = mul nsw i32 %820, %780
  %822 = add nsw i32 %821, %814
  %823 = getelementptr inbounds [3 x i32], ptr %131, i64 %756
  %824 = load i32, ptr %823, align 4, !tbaa !7
  %825 = getelementptr inbounds [3 x i32], ptr %131, i64 %756, i64 1
  %826 = load i32, ptr %825, align 4, !tbaa !7
  %827 = getelementptr inbounds [3 x i32], ptr %131, i64 %756, i64 2
  %828 = load i32, ptr %827, align 4, !tbaa !7
  %829 = mul nsw i32 %828, %772
  %830 = add nsw i32 %829, %826
  %831 = mul nsw i32 %830, %780
  %832 = add nsw i32 %831, %824
  %833 = load i32, ptr %11, align 4, !tbaa !7
  %834 = load i32, ptr %146, align 4, !tbaa !7
  %835 = load i32, ptr %147, align 4, !tbaa !7
  %836 = call i32 @llvm.smax.i32(i32 %834, i32 %401)
  %837 = call i32 @llvm.smax.i32(i32 %835, i32 %836)
  %838 = icmp sgt i32 %837, 0
  br i1 %838, label %839, label %2045

839:                                              ; preds = %727
  %840 = load i32, ptr %391, align 4, !tbaa !7
  %841 = load i32, ptr %364, align 4, !tbaa !7
  %842 = sub nsw i32 %840, %841
  %843 = icmp slt i32 %842, 0
  %844 = add nsw i32 %842, 1
  %845 = select i1 %843, i32 0, i32 %844
  %846 = load i32, ptr %392, align 4, !tbaa !7
  %847 = load i32, ptr %389, align 4, !tbaa !7
  %848 = sub nsw i32 %846, %847
  %849 = icmp slt i32 %848, 0
  %850 = add nsw i32 %848, 1
  %851 = select i1 %849, i32 0, i32 %850
  %852 = mul i32 %845, %851
  %853 = load i32, ptr %145, align 4, !tbaa !7
  %854 = mul i32 %852, %853
  %855 = load i32, ptr %144, align 4, !tbaa !7
  %856 = mul nsw i32 %845, %855
  %857 = mul i32 %780, %772
  %858 = mul i32 %857, %853
  %859 = mul nsw i32 %855, %780
  %860 = load i32, ptr %386, align 4, !tbaa !7
  %861 = load i32, ptr %358, align 4, !tbaa !7
  %862 = sub nsw i32 %860, %861
  %863 = icmp slt i32 %862, 0
  %864 = add nsw i32 %862, 1
  %865 = select i1 %863, i32 0, i32 %864
  %866 = load i32, ptr %387, align 4, !tbaa !7
  %867 = load i32, ptr %384, align 4, !tbaa !7
  %868 = sub nsw i32 %866, %867
  %869 = icmp slt i32 %868, 0
  %870 = add nsw i32 %868, 1
  %871 = select i1 %869, i32 0, i32 %870
  %872 = mul i32 %865, %871
  %873 = mul i32 %872, %853
  %874 = mul nsw i32 %855, %865
  %875 = icmp sgt i32 %835, 0
  %876 = icmp sgt i32 %834, 0
  %877 = mul i32 %833, %401
  %878 = sub i32 %874, %877
  %879 = sub i32 %859, %877
  %880 = sub i32 %856, %877
  %881 = mul nsw i32 %834, %874
  %882 = sub i32 %873, %881
  %883 = mul nsw i32 %834, %859
  %884 = sub i32 %858, %883
  %885 = mul nsw i32 %834, %856
  %886 = sub i32 %854, %885
  br i1 %875, label %887, label %2045

887:                                              ; preds = %839
  %888 = load i32, ptr %396, align 4, !tbaa !7
  %889 = sub i32 %888, %861
  %890 = load i32, ptr %399, align 4, !tbaa !7
  %891 = sub i32 %890, %867
  %892 = load i32, ptr %400, align 4, !tbaa !7
  %893 = load i32, ptr %385, align 4, !tbaa !7
  %894 = sub nsw i32 %892, %893
  %895 = mul nsw i32 %871, %894
  %896 = add nsw i32 %891, %895
  %897 = mul nsw i32 %896, %865
  %898 = add nsw i32 %889, %897
  %899 = sub i32 %888, %776
  %900 = sub i32 %890, %768
  %901 = load i32, ptr %388, align 4, !tbaa !7
  %902 = sub nsw i32 %892, %901
  %903 = mul nsw i32 %902, %772
  %904 = add nsw i32 %900, %903
  %905 = mul nsw i32 %904, %780
  %906 = add nsw i32 %899, %905
  %907 = sub i32 %888, %841
  %908 = sub i32 %890, %847
  %909 = load i32, ptr %390, align 4, !tbaa !7
  %910 = sub nsw i32 %892, %909
  %911 = mul nsw i32 %851, %910
  %912 = add nsw i32 %908, %911
  %913 = mul nsw i32 %912, %845
  %914 = add nsw i32 %907, %913
  %915 = sext i32 %833 to i64
  %916 = sext i32 %832 to i64
  %917 = sext i32 %822 to i64
  %918 = sext i32 %812 to i64
  %919 = sext i32 %802 to i64
  %920 = sext i32 %792 to i64
  %921 = sext i32 %782 to i64
  br label %922

922:                                              ; preds = %998, %887
  %923 = phi i32 [ %1002, %998 ], [ %898, %887 ]
  %924 = phi i32 [ %1003, %998 ], [ %906, %887 ]
  %925 = phi i32 [ %1004, %998 ], [ %914, %887 ]
  %926 = phi i32 [ %1005, %998 ], [ 0, %887 ]
  br i1 %876, label %927, label %998

927:                                              ; preds = %989, %922
  %928 = phi i32 [ %993, %989 ], [ %923, %922 ]
  %929 = phi i32 [ %994, %989 ], [ %924, %922 ]
  %930 = phi i32 [ %995, %989 ], [ %925, %922 ]
  %931 = phi i32 [ %996, %989 ], [ 0, %922 ]
  br i1 %409, label %932, label %989

932:                                              ; preds = %927
  %933 = sext i32 %928 to i64
  %934 = sext i32 %929 to i64
  %935 = sext i32 %930 to i64
  br label %936

936:                                              ; preds = %936, %932
  %937 = phi i64 [ %935, %932 ], [ %982, %936 ]
  %938 = phi i64 [ %934, %932 ], [ %981, %936 ]
  %939 = phi i64 [ %933, %932 ], [ %980, %936 ]
  %940 = phi i32 [ 0, %932 ], [ %983, %936 ]
  %941 = getelementptr inbounds double, ptr %735, i64 %939
  %942 = load double, ptr %941, align 8, !tbaa !29
  %943 = add nsw i64 %938, %921
  %944 = getelementptr inbounds double, ptr %370, i64 %943
  %945 = load double, ptr %944, align 8, !tbaa !29
  %946 = getelementptr inbounds double, ptr %740, i64 %939
  %947 = load double, ptr %946, align 8, !tbaa !29
  %948 = add nsw i64 %938, %920
  %949 = getelementptr inbounds double, ptr %370, i64 %948
  %950 = load double, ptr %949, align 8, !tbaa !29
  %951 = fmul double %947, %950
  %952 = call double @llvm.fmuladd.f64(double %942, double %945, double %951)
  %953 = getelementptr inbounds double, ptr %745, i64 %939
  %954 = load double, ptr %953, align 8, !tbaa !29
  %955 = add nsw i64 %938, %919
  %956 = getelementptr inbounds double, ptr %370, i64 %955
  %957 = load double, ptr %956, align 8, !tbaa !29
  %958 = call double @llvm.fmuladd.f64(double %954, double %957, double %952)
  %959 = getelementptr inbounds double, ptr %750, i64 %939
  %960 = load double, ptr %959, align 8, !tbaa !29
  %961 = add nsw i64 %938, %918
  %962 = getelementptr inbounds double, ptr %370, i64 %961
  %963 = load double, ptr %962, align 8, !tbaa !29
  %964 = call double @llvm.fmuladd.f64(double %960, double %963, double %958)
  %965 = getelementptr inbounds double, ptr %755, i64 %939
  %966 = load double, ptr %965, align 8, !tbaa !29
  %967 = add nsw i64 %938, %917
  %968 = getelementptr inbounds double, ptr %370, i64 %967
  %969 = load double, ptr %968, align 8, !tbaa !29
  %970 = call double @llvm.fmuladd.f64(double %966, double %969, double %964)
  %971 = getelementptr inbounds double, ptr %760, i64 %939
  %972 = load double, ptr %971, align 8, !tbaa !29
  %973 = add nsw i64 %938, %916
  %974 = getelementptr inbounds double, ptr %370, i64 %973
  %975 = load double, ptr %974, align 8, !tbaa !29
  %976 = call double @llvm.fmuladd.f64(double %972, double %975, double %970)
  %977 = getelementptr inbounds double, ptr %376, i64 %937
  %978 = load double, ptr %977, align 8, !tbaa !29
  %979 = fadd double %978, %976
  store double %979, ptr %977, align 8, !tbaa !29
  %980 = add i64 %939, %915
  %981 = add i64 %938, %915
  %982 = add i64 %937, %915
  %983 = add nuw nsw i32 %940, 1
  %984 = icmp eq i32 %983, %401
  br i1 %984, label %985, label %936, !llvm.loop !685

985:                                              ; preds = %936
  %.lcssa20 = phi i64 [ %980, %936 ]
  %.lcssa19 = phi i64 [ %981, %936 ]
  %.lcssa18 = phi i64 [ %982, %936 ]
  %986 = trunc i64 %.lcssa18 to i32
  %987 = trunc i64 %.lcssa19 to i32
  %988 = trunc i64 %.lcssa20 to i32
  br label %989

989:                                              ; preds = %985, %927
  %990 = phi i32 [ %930, %927 ], [ %986, %985 ]
  %991 = phi i32 [ %929, %927 ], [ %987, %985 ]
  %992 = phi i32 [ %928, %927 ], [ %988, %985 ]
  %993 = add nsw i32 %878, %992
  %994 = add nsw i32 %879, %991
  %995 = add nsw i32 %880, %990
  %996 = add nuw nsw i32 %931, 1
  %997 = icmp eq i32 %996, %834
  br i1 %997, label %998, label %927, !llvm.loop !686

998:                                              ; preds = %989, %922
  %999 = phi i32 [ %925, %922 ], [ %995, %989 ]
  %1000 = phi i32 [ %924, %922 ], [ %994, %989 ]
  %1001 = phi i32 [ %923, %922 ], [ %993, %989 ]
  %1002 = add nsw i32 %882, %1001
  %1003 = add nsw i32 %884, %1000
  %1004 = add nsw i32 %886, %999
  %1005 = add nuw nsw i32 %926, 1
  %1006 = icmp eq i32 %1005, %835
  br i1 %1006, label %2045, label %922, !llvm.loop !687

1007:                                             ; preds = %420
  %1008 = load ptr, ptr %152, align 8, !tbaa !340
  %1009 = load ptr, ptr %153, align 8, !tbaa !341
  %1010 = getelementptr inbounds ptr, ptr %1009, i64 %352
  %1011 = load ptr, ptr %1010, align 8, !tbaa !14
  %1012 = getelementptr inbounds i32, ptr %1011, i64 %421
  %1013 = load i32, ptr %1012, align 4, !tbaa !7
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds double, ptr %1008, i64 %1014
  %1016 = add nuw nsw i64 %421, 1
  %1017 = getelementptr inbounds i32, ptr %1011, i64 %1016
  %1018 = load i32, ptr %1017, align 4, !tbaa !7
  %1019 = sext i32 %1018 to i64
  %1020 = getelementptr inbounds double, ptr %1008, i64 %1019
  %1021 = add nuw nsw i64 %421, 2
  %1022 = getelementptr inbounds i32, ptr %1011, i64 %1021
  %1023 = load i32, ptr %1022, align 4, !tbaa !7
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds double, ptr %1008, i64 %1024
  %1026 = add nuw nsw i64 %421, 3
  %1027 = getelementptr inbounds i32, ptr %1011, i64 %1026
  %1028 = load i32, ptr %1027, align 4, !tbaa !7
  %1029 = sext i32 %1028 to i64
  %1030 = getelementptr inbounds double, ptr %1008, i64 %1029
  %1031 = add nuw nsw i64 %421, 4
  %1032 = getelementptr inbounds i32, ptr %1011, i64 %1031
  %1033 = load i32, ptr %1032, align 4, !tbaa !7
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds double, ptr %1008, i64 %1034
  %1036 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %1037 = load i32, ptr %1036, align 4, !tbaa !7
  %1038 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %1039 = load i32, ptr %1038, align 4, !tbaa !7
  %1040 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %1041 = load i32, ptr %1040, align 4, !tbaa !7
  %1042 = load i32, ptr %382, align 4, !tbaa !7
  %1043 = load i32, ptr %383, align 4, !tbaa !7
  %1044 = sub nsw i32 %1042, %1043
  %1045 = add nsw i32 %1044, 1
  %1046 = icmp slt i32 %1044, 0
  %1047 = select i1 %1046, i32 0, i32 %1045
  %1048 = mul nsw i32 %1047, %1041
  %1049 = add nsw i32 %1048, %1039
  %1050 = load i32, ptr %381, align 4, !tbaa !7
  %1051 = load i32, ptr %361, align 4, !tbaa !7
  %1052 = sub nsw i32 %1050, %1051
  %1053 = add nsw i32 %1052, 1
  %1054 = icmp slt i32 %1052, 0
  %1055 = select i1 %1054, i32 0, i32 %1053
  %1056 = mul nsw i32 %1049, %1055
  %1057 = add nsw i32 %1056, %1037
  %1058 = getelementptr inbounds [3 x i32], ptr %131, i64 %1016
  %1059 = load i32, ptr %1058, align 4, !tbaa !7
  %1060 = getelementptr inbounds [3 x i32], ptr %131, i64 %1016, i64 1
  %1061 = load i32, ptr %1060, align 4, !tbaa !7
  %1062 = getelementptr inbounds [3 x i32], ptr %131, i64 %1016, i64 2
  %1063 = load i32, ptr %1062, align 4, !tbaa !7
  %1064 = mul nsw i32 %1063, %1047
  %1065 = add nsw i32 %1064, %1061
  %1066 = mul nsw i32 %1065, %1055
  %1067 = add nsw i32 %1066, %1059
  %1068 = getelementptr inbounds [3 x i32], ptr %131, i64 %1021
  %1069 = load i32, ptr %1068, align 4, !tbaa !7
  %1070 = getelementptr inbounds [3 x i32], ptr %131, i64 %1021, i64 1
  %1071 = load i32, ptr %1070, align 4, !tbaa !7
  %1072 = getelementptr inbounds [3 x i32], ptr %131, i64 %1021, i64 2
  %1073 = load i32, ptr %1072, align 4, !tbaa !7
  %1074 = mul nsw i32 %1073, %1047
  %1075 = add nsw i32 %1074, %1071
  %1076 = mul nsw i32 %1075, %1055
  %1077 = add nsw i32 %1076, %1069
  %1078 = getelementptr inbounds [3 x i32], ptr %131, i64 %1026
  %1079 = load i32, ptr %1078, align 4, !tbaa !7
  %1080 = getelementptr inbounds [3 x i32], ptr %131, i64 %1026, i64 1
  %1081 = load i32, ptr %1080, align 4, !tbaa !7
  %1082 = getelementptr inbounds [3 x i32], ptr %131, i64 %1026, i64 2
  %1083 = load i32, ptr %1082, align 4, !tbaa !7
  %1084 = mul nsw i32 %1083, %1047
  %1085 = add nsw i32 %1084, %1081
  %1086 = mul nsw i32 %1085, %1055
  %1087 = add nsw i32 %1086, %1079
  %1088 = getelementptr inbounds [3 x i32], ptr %131, i64 %1031
  %1089 = load i32, ptr %1088, align 4, !tbaa !7
  %1090 = getelementptr inbounds [3 x i32], ptr %131, i64 %1031, i64 1
  %1091 = load i32, ptr %1090, align 4, !tbaa !7
  %1092 = getelementptr inbounds [3 x i32], ptr %131, i64 %1031, i64 2
  %1093 = load i32, ptr %1092, align 4, !tbaa !7
  %1094 = mul nsw i32 %1093, %1047
  %1095 = add nsw i32 %1094, %1091
  %1096 = mul nsw i32 %1095, %1055
  %1097 = add nsw i32 %1096, %1089
  %1098 = load i32, ptr %11, align 4, !tbaa !7
  %1099 = load i32, ptr %147, align 4, !tbaa !7
  %1100 = call i32 @llvm.smax.i32(i32 %1099, i32 %418)
  %1101 = icmp sgt i32 %1100, 0
  br i1 %1101, label %1102, label %2045

1102:                                             ; preds = %1007
  %1103 = load i32, ptr %391, align 4, !tbaa !7
  %1104 = load i32, ptr %364, align 4, !tbaa !7
  %1105 = sub nsw i32 %1103, %1104
  %1106 = icmp slt i32 %1105, 0
  %1107 = add nsw i32 %1105, 1
  %1108 = select i1 %1106, i32 0, i32 %1107
  %1109 = load i32, ptr %392, align 4, !tbaa !7
  %1110 = load i32, ptr %389, align 4, !tbaa !7
  %1111 = sub nsw i32 %1109, %1110
  %1112 = icmp slt i32 %1111, 0
  %1113 = add nsw i32 %1111, 1
  %1114 = select i1 %1112, i32 0, i32 %1113
  %1115 = mul i32 %1108, %1114
  %1116 = load i32, ptr %145, align 4, !tbaa !7
  %1117 = mul i32 %1115, %1116
  %1118 = load i32, ptr %144, align 4, !tbaa !7
  %1119 = mul nsw i32 %1108, %1118
  %1120 = mul i32 %1055, %1047
  %1121 = mul i32 %1120, %1116
  %1122 = mul nsw i32 %1118, %1055
  %1123 = load i32, ptr %386, align 4, !tbaa !7
  %1124 = load i32, ptr %358, align 4, !tbaa !7
  %1125 = sub nsw i32 %1123, %1124
  %1126 = icmp slt i32 %1125, 0
  %1127 = add nsw i32 %1125, 1
  %1128 = select i1 %1126, i32 0, i32 %1127
  %1129 = load i32, ptr %387, align 4, !tbaa !7
  %1130 = load i32, ptr %384, align 4, !tbaa !7
  %1131 = sub nsw i32 %1129, %1130
  %1132 = icmp slt i32 %1131, 0
  %1133 = add nsw i32 %1131, 1
  %1134 = select i1 %1132, i32 0, i32 %1133
  %1135 = mul i32 %1128, %1134
  %1136 = mul i32 %1135, %1116
  %1137 = mul nsw i32 %1118, %1128
  %1138 = icmp sgt i32 %1099, 0
  %1139 = mul i32 %1098, %401
  %1140 = sub i32 %1137, %1139
  %1141 = sub i32 %1122, %1139
  %1142 = sub i32 %1119, %1139
  %1143 = mul nsw i32 %417, %1137
  %1144 = sub i32 %1136, %1143
  %1145 = mul nsw i32 %417, %1122
  %1146 = sub i32 %1121, %1145
  %1147 = mul nsw i32 %417, %1119
  %1148 = sub i32 %1117, %1147
  br i1 %1138, label %1149, label %2045

1149:                                             ; preds = %1102
  %1150 = load i32, ptr %396, align 4, !tbaa !7
  %1151 = sub i32 %1150, %1124
  %1152 = load i32, ptr %399, align 4, !tbaa !7
  %1153 = sub i32 %1152, %1130
  %1154 = load i32, ptr %400, align 4, !tbaa !7
  %1155 = load i32, ptr %385, align 4, !tbaa !7
  %1156 = sub nsw i32 %1154, %1155
  %1157 = mul nsw i32 %1134, %1156
  %1158 = add nsw i32 %1153, %1157
  %1159 = mul nsw i32 %1158, %1128
  %1160 = add nsw i32 %1151, %1159
  %1161 = sub i32 %1150, %1051
  %1162 = sub i32 %1152, %1043
  %1163 = load i32, ptr %388, align 4, !tbaa !7
  %1164 = sub nsw i32 %1154, %1163
  %1165 = mul nsw i32 %1164, %1047
  %1166 = add nsw i32 %1162, %1165
  %1167 = mul nsw i32 %1166, %1055
  %1168 = add nsw i32 %1161, %1167
  %1169 = sub i32 %1150, %1104
  %1170 = sub i32 %1152, %1110
  %1171 = load i32, ptr %390, align 4, !tbaa !7
  %1172 = sub nsw i32 %1154, %1171
  %1173 = mul nsw i32 %1114, %1172
  %1174 = add nsw i32 %1170, %1173
  %1175 = mul nsw i32 %1174, %1108
  %1176 = add nsw i32 %1169, %1175
  %1177 = sext i32 %1098 to i64
  %1178 = sext i32 %1097 to i64
  %1179 = sext i32 %1087 to i64
  %1180 = sext i32 %1077 to i64
  %1181 = sext i32 %1067 to i64
  %1182 = sext i32 %1057 to i64
  br label %1183

1183:                                             ; preds = %1253, %1149
  %1184 = phi i32 [ %1257, %1253 ], [ %1160, %1149 ]
  %1185 = phi i32 [ %1258, %1253 ], [ %1168, %1149 ]
  %1186 = phi i32 [ %1259, %1253 ], [ %1176, %1149 ]
  %1187 = phi i32 [ %1260, %1253 ], [ 0, %1149 ]
  br i1 %419, label %1188, label %1253

1188:                                             ; preds = %1244, %1183
  %1189 = phi i32 [ %1248, %1244 ], [ %1184, %1183 ]
  %1190 = phi i32 [ %1249, %1244 ], [ %1185, %1183 ]
  %1191 = phi i32 [ %1250, %1244 ], [ %1186, %1183 ]
  %1192 = phi i32 [ %1251, %1244 ], [ 0, %1183 ]
  br i1 %409, label %1193, label %1244

1193:                                             ; preds = %1188
  %1194 = sext i32 %1189 to i64
  %1195 = sext i32 %1190 to i64
  %1196 = sext i32 %1191 to i64
  br label %1197

1197:                                             ; preds = %1197, %1193
  %1198 = phi i64 [ %1196, %1193 ], [ %1237, %1197 ]
  %1199 = phi i64 [ %1195, %1193 ], [ %1236, %1197 ]
  %1200 = phi i64 [ %1194, %1193 ], [ %1235, %1197 ]
  %1201 = phi i32 [ 0, %1193 ], [ %1238, %1197 ]
  %1202 = getelementptr inbounds double, ptr %1015, i64 %1200
  %1203 = load double, ptr %1202, align 8, !tbaa !29
  %1204 = add nsw i64 %1199, %1182
  %1205 = getelementptr inbounds double, ptr %370, i64 %1204
  %1206 = load double, ptr %1205, align 8, !tbaa !29
  %1207 = getelementptr inbounds double, ptr %1020, i64 %1200
  %1208 = load double, ptr %1207, align 8, !tbaa !29
  %1209 = add nsw i64 %1199, %1181
  %1210 = getelementptr inbounds double, ptr %370, i64 %1209
  %1211 = load double, ptr %1210, align 8, !tbaa !29
  %1212 = fmul double %1208, %1211
  %1213 = call double @llvm.fmuladd.f64(double %1203, double %1206, double %1212)
  %1214 = getelementptr inbounds double, ptr %1025, i64 %1200
  %1215 = load double, ptr %1214, align 8, !tbaa !29
  %1216 = add nsw i64 %1199, %1180
  %1217 = getelementptr inbounds double, ptr %370, i64 %1216
  %1218 = load double, ptr %1217, align 8, !tbaa !29
  %1219 = call double @llvm.fmuladd.f64(double %1215, double %1218, double %1213)
  %1220 = getelementptr inbounds double, ptr %1030, i64 %1200
  %1221 = load double, ptr %1220, align 8, !tbaa !29
  %1222 = add nsw i64 %1199, %1179
  %1223 = getelementptr inbounds double, ptr %370, i64 %1222
  %1224 = load double, ptr %1223, align 8, !tbaa !29
  %1225 = call double @llvm.fmuladd.f64(double %1221, double %1224, double %1219)
  %1226 = getelementptr inbounds double, ptr %1035, i64 %1200
  %1227 = load double, ptr %1226, align 8, !tbaa !29
  %1228 = add nsw i64 %1199, %1178
  %1229 = getelementptr inbounds double, ptr %370, i64 %1228
  %1230 = load double, ptr %1229, align 8, !tbaa !29
  %1231 = call double @llvm.fmuladd.f64(double %1227, double %1230, double %1225)
  %1232 = getelementptr inbounds double, ptr %376, i64 %1198
  %1233 = load double, ptr %1232, align 8, !tbaa !29
  %1234 = fadd double %1233, %1231
  store double %1234, ptr %1232, align 8, !tbaa !29
  %1235 = add i64 %1200, %1177
  %1236 = add i64 %1199, %1177
  %1237 = add i64 %1198, %1177
  %1238 = add nuw nsw i32 %1201, 1
  %1239 = icmp eq i32 %1238, %401
  br i1 %1239, label %1240, label %1197, !llvm.loop !688

1240:                                             ; preds = %1197
  %.lcssa17 = phi i64 [ %1235, %1197 ]
  %.lcssa16 = phi i64 [ %1236, %1197 ]
  %.lcssa15 = phi i64 [ %1237, %1197 ]
  %1241 = trunc i64 %.lcssa15 to i32
  %1242 = trunc i64 %.lcssa16 to i32
  %1243 = trunc i64 %.lcssa17 to i32
  br label %1244

1244:                                             ; preds = %1240, %1188
  %1245 = phi i32 [ %1191, %1188 ], [ %1241, %1240 ]
  %1246 = phi i32 [ %1190, %1188 ], [ %1242, %1240 ]
  %1247 = phi i32 [ %1189, %1188 ], [ %1243, %1240 ]
  %1248 = add nsw i32 %1140, %1247
  %1249 = add nsw i32 %1141, %1246
  %1250 = add nsw i32 %1142, %1245
  %1251 = add nuw nsw i32 %1192, 1
  %1252 = icmp eq i32 %1251, %417
  br i1 %1252, label %1253, label %1188, !llvm.loop !689

1253:                                             ; preds = %1244, %1183
  %1254 = phi i32 [ %1186, %1183 ], [ %1250, %1244 ]
  %1255 = phi i32 [ %1185, %1183 ], [ %1249, %1244 ]
  %1256 = phi i32 [ %1184, %1183 ], [ %1248, %1244 ]
  %1257 = add nsw i32 %1144, %1256
  %1258 = add nsw i32 %1146, %1255
  %1259 = add nsw i32 %1148, %1254
  %1260 = add nuw nsw i32 %1187, 1
  %1261 = icmp eq i32 %1260, %1099
  br i1 %1261, label %2045, label %1183, !llvm.loop !690

1262:                                             ; preds = %420
  %1263 = load ptr, ptr %152, align 8, !tbaa !340
  %1264 = load ptr, ptr %153, align 8, !tbaa !341
  %1265 = getelementptr inbounds ptr, ptr %1264, i64 %352
  %1266 = load ptr, ptr %1265, align 8, !tbaa !14
  %1267 = getelementptr inbounds i32, ptr %1266, i64 %421
  %1268 = load i32, ptr %1267, align 4, !tbaa !7
  %1269 = sext i32 %1268 to i64
  %1270 = getelementptr inbounds double, ptr %1263, i64 %1269
  %1271 = add nuw nsw i64 %421, 1
  %1272 = getelementptr inbounds i32, ptr %1266, i64 %1271
  %1273 = load i32, ptr %1272, align 4, !tbaa !7
  %1274 = sext i32 %1273 to i64
  %1275 = getelementptr inbounds double, ptr %1263, i64 %1274
  %1276 = add nuw nsw i64 %421, 2
  %1277 = getelementptr inbounds i32, ptr %1266, i64 %1276
  %1278 = load i32, ptr %1277, align 4, !tbaa !7
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds double, ptr %1263, i64 %1279
  %1281 = add nuw nsw i64 %421, 3
  %1282 = getelementptr inbounds i32, ptr %1266, i64 %1281
  %1283 = load i32, ptr %1282, align 4, !tbaa !7
  %1284 = sext i32 %1283 to i64
  %1285 = getelementptr inbounds double, ptr %1263, i64 %1284
  %1286 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %1287 = load i32, ptr %1286, align 4, !tbaa !7
  %1288 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %1289 = load i32, ptr %1288, align 4, !tbaa !7
  %1290 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %1291 = load i32, ptr %1290, align 4, !tbaa !7
  %1292 = load i32, ptr %382, align 4, !tbaa !7
  %1293 = load i32, ptr %383, align 4, !tbaa !7
  %1294 = sub nsw i32 %1292, %1293
  %1295 = add nsw i32 %1294, 1
  %1296 = icmp slt i32 %1294, 0
  %1297 = select i1 %1296, i32 0, i32 %1295
  %1298 = mul nsw i32 %1297, %1291
  %1299 = add nsw i32 %1298, %1289
  %1300 = load i32, ptr %381, align 4, !tbaa !7
  %1301 = load i32, ptr %361, align 4, !tbaa !7
  %1302 = sub nsw i32 %1300, %1301
  %1303 = add nsw i32 %1302, 1
  %1304 = icmp slt i32 %1302, 0
  %1305 = select i1 %1304, i32 0, i32 %1303
  %1306 = mul nsw i32 %1299, %1305
  %1307 = add nsw i32 %1306, %1287
  %1308 = getelementptr inbounds [3 x i32], ptr %131, i64 %1271
  %1309 = load i32, ptr %1308, align 4, !tbaa !7
  %1310 = getelementptr inbounds [3 x i32], ptr %131, i64 %1271, i64 1
  %1311 = load i32, ptr %1310, align 4, !tbaa !7
  %1312 = getelementptr inbounds [3 x i32], ptr %131, i64 %1271, i64 2
  %1313 = load i32, ptr %1312, align 4, !tbaa !7
  %1314 = mul nsw i32 %1313, %1297
  %1315 = add nsw i32 %1314, %1311
  %1316 = mul nsw i32 %1315, %1305
  %1317 = add nsw i32 %1316, %1309
  %1318 = getelementptr inbounds [3 x i32], ptr %131, i64 %1276
  %1319 = load i32, ptr %1318, align 4, !tbaa !7
  %1320 = getelementptr inbounds [3 x i32], ptr %131, i64 %1276, i64 1
  %1321 = load i32, ptr %1320, align 4, !tbaa !7
  %1322 = getelementptr inbounds [3 x i32], ptr %131, i64 %1276, i64 2
  %1323 = load i32, ptr %1322, align 4, !tbaa !7
  %1324 = mul nsw i32 %1323, %1297
  %1325 = add nsw i32 %1324, %1321
  %1326 = mul nsw i32 %1325, %1305
  %1327 = add nsw i32 %1326, %1319
  %1328 = getelementptr inbounds [3 x i32], ptr %131, i64 %1281
  %1329 = load i32, ptr %1328, align 4, !tbaa !7
  %1330 = getelementptr inbounds [3 x i32], ptr %131, i64 %1281, i64 1
  %1331 = load i32, ptr %1330, align 4, !tbaa !7
  %1332 = getelementptr inbounds [3 x i32], ptr %131, i64 %1281, i64 2
  %1333 = load i32, ptr %1332, align 4, !tbaa !7
  %1334 = mul nsw i32 %1333, %1297
  %1335 = add nsw i32 %1334, %1331
  %1336 = mul nsw i32 %1335, %1305
  %1337 = add nsw i32 %1336, %1329
  %1338 = load i32, ptr %11, align 4, !tbaa !7
  br i1 %414, label %1339, label %2045

1339:                                             ; preds = %1262
  %1340 = load i32, ptr %391, align 4, !tbaa !7
  %1341 = load i32, ptr %364, align 4, !tbaa !7
  %1342 = sub nsw i32 %1340, %1341
  %1343 = icmp slt i32 %1342, 0
  %1344 = add nsw i32 %1342, 1
  %1345 = select i1 %1343, i32 0, i32 %1344
  %1346 = load i32, ptr %392, align 4, !tbaa !7
  %1347 = load i32, ptr %389, align 4, !tbaa !7
  %1348 = sub nsw i32 %1346, %1347
  %1349 = icmp slt i32 %1348, 0
  %1350 = add nsw i32 %1348, 1
  %1351 = select i1 %1349, i32 0, i32 %1350
  %1352 = mul i32 %1345, %1351
  %1353 = load i32, ptr %145, align 4, !tbaa !7
  %1354 = mul i32 %1352, %1353
  %1355 = load i32, ptr %144, align 4, !tbaa !7
  %1356 = mul nsw i32 %1345, %1355
  %1357 = mul i32 %1305, %1297
  %1358 = mul i32 %1357, %1353
  %1359 = mul nsw i32 %1355, %1305
  %1360 = load i32, ptr %386, align 4, !tbaa !7
  %1361 = load i32, ptr %358, align 4, !tbaa !7
  %1362 = sub nsw i32 %1360, %1361
  %1363 = icmp slt i32 %1362, 0
  %1364 = add nsw i32 %1362, 1
  %1365 = select i1 %1363, i32 0, i32 %1364
  %1366 = load i32, ptr %387, align 4, !tbaa !7
  %1367 = load i32, ptr %384, align 4, !tbaa !7
  %1368 = sub nsw i32 %1366, %1367
  %1369 = icmp slt i32 %1368, 0
  %1370 = add nsw i32 %1368, 1
  %1371 = select i1 %1369, i32 0, i32 %1370
  %1372 = mul i32 %1365, %1371
  %1373 = mul i32 %1372, %1353
  %1374 = mul nsw i32 %1355, %1365
  %1375 = mul i32 %1338, %401
  %1376 = sub i32 %1374, %1375
  %1377 = sub i32 %1359, %1375
  %1378 = sub i32 %1356, %1375
  %1379 = mul nsw i32 %410, %1374
  %1380 = sub i32 %1373, %1379
  %1381 = mul nsw i32 %410, %1359
  %1382 = sub i32 %1358, %1381
  %1383 = mul nsw i32 %410, %1356
  %1384 = sub i32 %1354, %1383
  br i1 %415, label %1385, label %2045

1385:                                             ; preds = %1339
  %1386 = load i32, ptr %396, align 4, !tbaa !7
  %1387 = sub i32 %1386, %1361
  %1388 = load i32, ptr %399, align 4, !tbaa !7
  %1389 = sub i32 %1388, %1367
  %1390 = load i32, ptr %400, align 4, !tbaa !7
  %1391 = load i32, ptr %385, align 4, !tbaa !7
  %1392 = sub nsw i32 %1390, %1391
  %1393 = mul nsw i32 %1371, %1392
  %1394 = add nsw i32 %1389, %1393
  %1395 = mul nsw i32 %1394, %1365
  %1396 = add nsw i32 %1387, %1395
  %1397 = sub i32 %1386, %1301
  %1398 = sub i32 %1388, %1293
  %1399 = load i32, ptr %388, align 4, !tbaa !7
  %1400 = sub nsw i32 %1390, %1399
  %1401 = mul nsw i32 %1400, %1297
  %1402 = add nsw i32 %1398, %1401
  %1403 = mul nsw i32 %1402, %1305
  %1404 = add nsw i32 %1397, %1403
  %1405 = sub i32 %1386, %1341
  %1406 = sub i32 %1388, %1347
  %1407 = load i32, ptr %390, align 4, !tbaa !7
  %1408 = sub nsw i32 %1390, %1407
  %1409 = mul nsw i32 %1351, %1408
  %1410 = add nsw i32 %1406, %1409
  %1411 = mul nsw i32 %1410, %1345
  %1412 = add nsw i32 %1405, %1411
  %1413 = sext i32 %1338 to i64
  %1414 = sext i32 %1337 to i64
  %1415 = sext i32 %1327 to i64
  %1416 = sext i32 %1317 to i64
  %1417 = sext i32 %1307 to i64
  br label %1418

1418:                                             ; preds = %1482, %1385
  %1419 = phi i32 [ %1486, %1482 ], [ %1396, %1385 ]
  %1420 = phi i32 [ %1487, %1482 ], [ %1404, %1385 ]
  %1421 = phi i32 [ %1488, %1482 ], [ %1412, %1385 ]
  %1422 = phi i32 [ %1489, %1482 ], [ 0, %1385 ]
  br i1 %416, label %1423, label %1482

1423:                                             ; preds = %1473, %1418
  %1424 = phi i32 [ %1477, %1473 ], [ %1419, %1418 ]
  %1425 = phi i32 [ %1478, %1473 ], [ %1420, %1418 ]
  %1426 = phi i32 [ %1479, %1473 ], [ %1421, %1418 ]
  %1427 = phi i32 [ %1480, %1473 ], [ 0, %1418 ]
  br i1 %409, label %1428, label %1473

1428:                                             ; preds = %1423
  %1429 = sext i32 %1424 to i64
  %1430 = sext i32 %1425 to i64
  %1431 = sext i32 %1426 to i64
  br label %1432

1432:                                             ; preds = %1432, %1428
  %1433 = phi i64 [ %1431, %1428 ], [ %1466, %1432 ]
  %1434 = phi i64 [ %1430, %1428 ], [ %1465, %1432 ]
  %1435 = phi i64 [ %1429, %1428 ], [ %1464, %1432 ]
  %1436 = phi i32 [ 0, %1428 ], [ %1467, %1432 ]
  %1437 = getelementptr inbounds double, ptr %1270, i64 %1435
  %1438 = load double, ptr %1437, align 8, !tbaa !29
  %1439 = add nsw i64 %1434, %1417
  %1440 = getelementptr inbounds double, ptr %370, i64 %1439
  %1441 = load double, ptr %1440, align 8, !tbaa !29
  %1442 = getelementptr inbounds double, ptr %1275, i64 %1435
  %1443 = load double, ptr %1442, align 8, !tbaa !29
  %1444 = add nsw i64 %1434, %1416
  %1445 = getelementptr inbounds double, ptr %370, i64 %1444
  %1446 = load double, ptr %1445, align 8, !tbaa !29
  %1447 = fmul double %1443, %1446
  %1448 = call double @llvm.fmuladd.f64(double %1438, double %1441, double %1447)
  %1449 = getelementptr inbounds double, ptr %1280, i64 %1435
  %1450 = load double, ptr %1449, align 8, !tbaa !29
  %1451 = add nsw i64 %1434, %1415
  %1452 = getelementptr inbounds double, ptr %370, i64 %1451
  %1453 = load double, ptr %1452, align 8, !tbaa !29
  %1454 = call double @llvm.fmuladd.f64(double %1450, double %1453, double %1448)
  %1455 = getelementptr inbounds double, ptr %1285, i64 %1435
  %1456 = load double, ptr %1455, align 8, !tbaa !29
  %1457 = add nsw i64 %1434, %1414
  %1458 = getelementptr inbounds double, ptr %370, i64 %1457
  %1459 = load double, ptr %1458, align 8, !tbaa !29
  %1460 = call double @llvm.fmuladd.f64(double %1456, double %1459, double %1454)
  %1461 = getelementptr inbounds double, ptr %376, i64 %1433
  %1462 = load double, ptr %1461, align 8, !tbaa !29
  %1463 = fadd double %1462, %1460
  store double %1463, ptr %1461, align 8, !tbaa !29
  %1464 = add i64 %1435, %1413
  %1465 = add i64 %1434, %1413
  %1466 = add i64 %1433, %1413
  %1467 = add nuw nsw i32 %1436, 1
  %1468 = icmp eq i32 %1467, %401
  br i1 %1468, label %1469, label %1432, !llvm.loop !691

1469:                                             ; preds = %1432
  %.lcssa14 = phi i64 [ %1464, %1432 ]
  %.lcssa13 = phi i64 [ %1465, %1432 ]
  %.lcssa12 = phi i64 [ %1466, %1432 ]
  %1470 = trunc i64 %.lcssa12 to i32
  %1471 = trunc i64 %.lcssa13 to i32
  %1472 = trunc i64 %.lcssa14 to i32
  br label %1473

1473:                                             ; preds = %1469, %1423
  %1474 = phi i32 [ %1426, %1423 ], [ %1470, %1469 ]
  %1475 = phi i32 [ %1425, %1423 ], [ %1471, %1469 ]
  %1476 = phi i32 [ %1424, %1423 ], [ %1472, %1469 ]
  %1477 = add nsw i32 %1376, %1476
  %1478 = add nsw i32 %1377, %1475
  %1479 = add nsw i32 %1378, %1474
  %1480 = add nuw nsw i32 %1427, 1
  %1481 = icmp eq i32 %1480, %410
  br i1 %1481, label %1482, label %1423, !llvm.loop !692

1482:                                             ; preds = %1473, %1418
  %1483 = phi i32 [ %1421, %1418 ], [ %1479, %1473 ]
  %1484 = phi i32 [ %1420, %1418 ], [ %1478, %1473 ]
  %1485 = phi i32 [ %1419, %1418 ], [ %1477, %1473 ]
  %1486 = add nsw i32 %1380, %1485
  %1487 = add nsw i32 %1382, %1484
  %1488 = add nsw i32 %1384, %1483
  %1489 = add nuw nsw i32 %1422, 1
  %1490 = icmp eq i32 %1489, %411
  br i1 %1490, label %2045, label %1418, !llvm.loop !693

1491:                                             ; preds = %420
  %1492 = load ptr, ptr %152, align 8, !tbaa !340
  %1493 = load ptr, ptr %153, align 8, !tbaa !341
  %1494 = getelementptr inbounds ptr, ptr %1493, i64 %352
  %1495 = load ptr, ptr %1494, align 8, !tbaa !14
  %1496 = getelementptr inbounds i32, ptr %1495, i64 %421
  %1497 = load i32, ptr %1496, align 4, !tbaa !7
  %1498 = sext i32 %1497 to i64
  %1499 = getelementptr inbounds double, ptr %1492, i64 %1498
  %1500 = add nuw nsw i64 %421, 1
  %1501 = getelementptr inbounds i32, ptr %1495, i64 %1500
  %1502 = load i32, ptr %1501, align 4, !tbaa !7
  %1503 = sext i32 %1502 to i64
  %1504 = getelementptr inbounds double, ptr %1492, i64 %1503
  %1505 = add nuw nsw i64 %421, 2
  %1506 = getelementptr inbounds i32, ptr %1495, i64 %1505
  %1507 = load i32, ptr %1506, align 4, !tbaa !7
  %1508 = sext i32 %1507 to i64
  %1509 = getelementptr inbounds double, ptr %1492, i64 %1508
  %1510 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %1511 = load i32, ptr %1510, align 4, !tbaa !7
  %1512 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %1513 = load i32, ptr %1512, align 4, !tbaa !7
  %1514 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %1515 = load i32, ptr %1514, align 4, !tbaa !7
  %1516 = load i32, ptr %382, align 4, !tbaa !7
  %1517 = load i32, ptr %383, align 4, !tbaa !7
  %1518 = sub nsw i32 %1516, %1517
  %1519 = add nsw i32 %1518, 1
  %1520 = icmp slt i32 %1518, 0
  %1521 = select i1 %1520, i32 0, i32 %1519
  %1522 = mul nsw i32 %1521, %1515
  %1523 = add nsw i32 %1522, %1513
  %1524 = load i32, ptr %381, align 4, !tbaa !7
  %1525 = load i32, ptr %361, align 4, !tbaa !7
  %1526 = sub nsw i32 %1524, %1525
  %1527 = add nsw i32 %1526, 1
  %1528 = icmp slt i32 %1526, 0
  %1529 = select i1 %1528, i32 0, i32 %1527
  %1530 = mul nsw i32 %1523, %1529
  %1531 = add nsw i32 %1530, %1511
  %1532 = getelementptr inbounds [3 x i32], ptr %131, i64 %1500
  %1533 = load i32, ptr %1532, align 4, !tbaa !7
  %1534 = getelementptr inbounds [3 x i32], ptr %131, i64 %1500, i64 1
  %1535 = load i32, ptr %1534, align 4, !tbaa !7
  %1536 = getelementptr inbounds [3 x i32], ptr %131, i64 %1500, i64 2
  %1537 = load i32, ptr %1536, align 4, !tbaa !7
  %1538 = mul nsw i32 %1537, %1521
  %1539 = add nsw i32 %1538, %1535
  %1540 = mul nsw i32 %1539, %1529
  %1541 = add nsw i32 %1540, %1533
  %1542 = getelementptr inbounds [3 x i32], ptr %131, i64 %1505
  %1543 = load i32, ptr %1542, align 4, !tbaa !7
  %1544 = getelementptr inbounds [3 x i32], ptr %131, i64 %1505, i64 1
  %1545 = load i32, ptr %1544, align 4, !tbaa !7
  %1546 = getelementptr inbounds [3 x i32], ptr %131, i64 %1505, i64 2
  %1547 = load i32, ptr %1546, align 4, !tbaa !7
  %1548 = mul nsw i32 %1547, %1521
  %1549 = add nsw i32 %1548, %1545
  %1550 = mul nsw i32 %1549, %1529
  %1551 = add nsw i32 %1550, %1543
  %1552 = load i32, ptr %11, align 4, !tbaa !7
  br i1 %406, label %1553, label %2045

1553:                                             ; preds = %1491
  %1554 = load i32, ptr %391, align 4, !tbaa !7
  %1555 = load i32, ptr %364, align 4, !tbaa !7
  %1556 = sub nsw i32 %1554, %1555
  %1557 = icmp slt i32 %1556, 0
  %1558 = add nsw i32 %1556, 1
  %1559 = select i1 %1557, i32 0, i32 %1558
  %1560 = load i32, ptr %392, align 4, !tbaa !7
  %1561 = load i32, ptr %389, align 4, !tbaa !7
  %1562 = sub nsw i32 %1560, %1561
  %1563 = icmp slt i32 %1562, 0
  %1564 = add nsw i32 %1562, 1
  %1565 = select i1 %1563, i32 0, i32 %1564
  %1566 = mul i32 %1559, %1565
  %1567 = load i32, ptr %145, align 4, !tbaa !7
  %1568 = mul i32 %1566, %1567
  %1569 = load i32, ptr %144, align 4, !tbaa !7
  %1570 = mul nsw i32 %1559, %1569
  %1571 = mul i32 %1529, %1521
  %1572 = mul i32 %1571, %1567
  %1573 = mul nsw i32 %1569, %1529
  %1574 = load i32, ptr %386, align 4, !tbaa !7
  %1575 = load i32, ptr %358, align 4, !tbaa !7
  %1576 = sub nsw i32 %1574, %1575
  %1577 = icmp slt i32 %1576, 0
  %1578 = add nsw i32 %1576, 1
  %1579 = select i1 %1577, i32 0, i32 %1578
  %1580 = load i32, ptr %387, align 4, !tbaa !7
  %1581 = load i32, ptr %384, align 4, !tbaa !7
  %1582 = sub nsw i32 %1580, %1581
  %1583 = icmp slt i32 %1582, 0
  %1584 = add nsw i32 %1582, 1
  %1585 = select i1 %1583, i32 0, i32 %1584
  %1586 = mul i32 %1579, %1585
  %1587 = mul i32 %1586, %1567
  %1588 = mul nsw i32 %1569, %1579
  %1589 = mul i32 %1552, %401
  %1590 = sub i32 %1588, %1589
  %1591 = sub i32 %1573, %1589
  %1592 = sub i32 %1570, %1589
  %1593 = mul nsw i32 %402, %1588
  %1594 = sub i32 %1587, %1593
  %1595 = mul nsw i32 %402, %1573
  %1596 = sub i32 %1572, %1595
  %1597 = mul nsw i32 %402, %1570
  %1598 = sub i32 %1568, %1597
  br i1 %407, label %1599, label %2045

1599:                                             ; preds = %1553
  %1600 = load i32, ptr %396, align 4, !tbaa !7
  %1601 = sub i32 %1600, %1575
  %1602 = load i32, ptr %399, align 4, !tbaa !7
  %1603 = sub i32 %1602, %1581
  %1604 = load i32, ptr %400, align 4, !tbaa !7
  %1605 = load i32, ptr %385, align 4, !tbaa !7
  %1606 = sub nsw i32 %1604, %1605
  %1607 = mul nsw i32 %1585, %1606
  %1608 = add nsw i32 %1603, %1607
  %1609 = mul nsw i32 %1608, %1579
  %1610 = add nsw i32 %1601, %1609
  %1611 = sub i32 %1600, %1525
  %1612 = sub i32 %1602, %1517
  %1613 = load i32, ptr %388, align 4, !tbaa !7
  %1614 = sub nsw i32 %1604, %1613
  %1615 = mul nsw i32 %1614, %1521
  %1616 = add nsw i32 %1612, %1615
  %1617 = mul nsw i32 %1616, %1529
  %1618 = add nsw i32 %1611, %1617
  %1619 = sub i32 %1600, %1555
  %1620 = sub i32 %1602, %1561
  %1621 = load i32, ptr %390, align 4, !tbaa !7
  %1622 = sub nsw i32 %1604, %1621
  %1623 = mul nsw i32 %1565, %1622
  %1624 = add nsw i32 %1620, %1623
  %1625 = mul nsw i32 %1624, %1559
  %1626 = add nsw i32 %1619, %1625
  %1627 = sext i32 %1552 to i64
  %1628 = sext i32 %1551 to i64
  %1629 = sext i32 %1541 to i64
  %1630 = sext i32 %1531 to i64
  br label %1631

1631:                                             ; preds = %1689, %1599
  %1632 = phi i32 [ %1693, %1689 ], [ %1610, %1599 ]
  %1633 = phi i32 [ %1694, %1689 ], [ %1618, %1599 ]
  %1634 = phi i32 [ %1695, %1689 ], [ %1626, %1599 ]
  %1635 = phi i32 [ %1696, %1689 ], [ 0, %1599 ]
  br i1 %408, label %1636, label %1689

1636:                                             ; preds = %1680, %1631
  %1637 = phi i32 [ %1684, %1680 ], [ %1632, %1631 ]
  %1638 = phi i32 [ %1685, %1680 ], [ %1633, %1631 ]
  %1639 = phi i32 [ %1686, %1680 ], [ %1634, %1631 ]
  %1640 = phi i32 [ %1687, %1680 ], [ 0, %1631 ]
  br i1 %409, label %1641, label %1680

1641:                                             ; preds = %1636
  %1642 = sext i32 %1637 to i64
  %1643 = sext i32 %1638 to i64
  %1644 = sext i32 %1639 to i64
  br label %1645

1645:                                             ; preds = %1645, %1641
  %1646 = phi i64 [ %1644, %1641 ], [ %1673, %1645 ]
  %1647 = phi i64 [ %1643, %1641 ], [ %1672, %1645 ]
  %1648 = phi i64 [ %1642, %1641 ], [ %1671, %1645 ]
  %1649 = phi i32 [ 0, %1641 ], [ %1674, %1645 ]
  %1650 = getelementptr inbounds double, ptr %1499, i64 %1648
  %1651 = load double, ptr %1650, align 8, !tbaa !29
  %1652 = add nsw i64 %1647, %1630
  %1653 = getelementptr inbounds double, ptr %370, i64 %1652
  %1654 = load double, ptr %1653, align 8, !tbaa !29
  %1655 = getelementptr inbounds double, ptr %1504, i64 %1648
  %1656 = load double, ptr %1655, align 8, !tbaa !29
  %1657 = add nsw i64 %1647, %1629
  %1658 = getelementptr inbounds double, ptr %370, i64 %1657
  %1659 = load double, ptr %1658, align 8, !tbaa !29
  %1660 = fmul double %1656, %1659
  %1661 = call double @llvm.fmuladd.f64(double %1651, double %1654, double %1660)
  %1662 = getelementptr inbounds double, ptr %1509, i64 %1648
  %1663 = load double, ptr %1662, align 8, !tbaa !29
  %1664 = add nsw i64 %1647, %1628
  %1665 = getelementptr inbounds double, ptr %370, i64 %1664
  %1666 = load double, ptr %1665, align 8, !tbaa !29
  %1667 = call double @llvm.fmuladd.f64(double %1663, double %1666, double %1661)
  %1668 = getelementptr inbounds double, ptr %376, i64 %1646
  %1669 = load double, ptr %1668, align 8, !tbaa !29
  %1670 = fadd double %1669, %1667
  store double %1670, ptr %1668, align 8, !tbaa !29
  %1671 = add i64 %1648, %1627
  %1672 = add i64 %1647, %1627
  %1673 = add i64 %1646, %1627
  %1674 = add nuw nsw i32 %1649, 1
  %1675 = icmp eq i32 %1674, %401
  br i1 %1675, label %1676, label %1645, !llvm.loop !694

1676:                                             ; preds = %1645
  %.lcssa11 = phi i64 [ %1671, %1645 ]
  %.lcssa10 = phi i64 [ %1672, %1645 ]
  %.lcssa9 = phi i64 [ %1673, %1645 ]
  %1677 = trunc i64 %.lcssa9 to i32
  %1678 = trunc i64 %.lcssa10 to i32
  %1679 = trunc i64 %.lcssa11 to i32
  br label %1680

1680:                                             ; preds = %1676, %1636
  %1681 = phi i32 [ %1639, %1636 ], [ %1677, %1676 ]
  %1682 = phi i32 [ %1638, %1636 ], [ %1678, %1676 ]
  %1683 = phi i32 [ %1637, %1636 ], [ %1679, %1676 ]
  %1684 = add nsw i32 %1590, %1683
  %1685 = add nsw i32 %1591, %1682
  %1686 = add nsw i32 %1592, %1681
  %1687 = add nuw nsw i32 %1640, 1
  %1688 = icmp eq i32 %1687, %402
  br i1 %1688, label %1689, label %1636, !llvm.loop !695

1689:                                             ; preds = %1680, %1631
  %1690 = phi i32 [ %1634, %1631 ], [ %1686, %1680 ]
  %1691 = phi i32 [ %1633, %1631 ], [ %1685, %1680 ]
  %1692 = phi i32 [ %1632, %1631 ], [ %1684, %1680 ]
  %1693 = add nsw i32 %1594, %1692
  %1694 = add nsw i32 %1596, %1691
  %1695 = add nsw i32 %1598, %1690
  %1696 = add nuw nsw i32 %1635, 1
  %1697 = icmp eq i32 %1696, %403
  br i1 %1697, label %2045, label %1631, !llvm.loop !696

1698:                                             ; preds = %420
  %1699 = load ptr, ptr %152, align 8, !tbaa !340
  %1700 = load ptr, ptr %153, align 8, !tbaa !341
  %1701 = getelementptr inbounds ptr, ptr %1700, i64 %352
  %1702 = load ptr, ptr %1701, align 8, !tbaa !14
  %1703 = getelementptr inbounds i32, ptr %1702, i64 %421
  %1704 = load i32, ptr %1703, align 4, !tbaa !7
  %1705 = sext i32 %1704 to i64
  %1706 = getelementptr inbounds double, ptr %1699, i64 %1705
  %1707 = add nuw nsw i64 %421, 1
  %1708 = getelementptr inbounds i32, ptr %1702, i64 %1707
  %1709 = load i32, ptr %1708, align 4, !tbaa !7
  %1710 = sext i32 %1709 to i64
  %1711 = getelementptr inbounds double, ptr %1699, i64 %1710
  %1712 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %1713 = load i32, ptr %1712, align 4, !tbaa !7
  %1714 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %1715 = load i32, ptr %1714, align 4, !tbaa !7
  %1716 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %1717 = load i32, ptr %1716, align 4, !tbaa !7
  %1718 = load i32, ptr %382, align 4, !tbaa !7
  %1719 = load i32, ptr %383, align 4, !tbaa !7
  %1720 = sub nsw i32 %1718, %1719
  %1721 = add nsw i32 %1720, 1
  %1722 = icmp slt i32 %1720, 0
  %1723 = select i1 %1722, i32 0, i32 %1721
  %1724 = mul nsw i32 %1723, %1717
  %1725 = add nsw i32 %1724, %1715
  %1726 = load i32, ptr %381, align 4, !tbaa !7
  %1727 = load i32, ptr %361, align 4, !tbaa !7
  %1728 = sub nsw i32 %1726, %1727
  %1729 = add nsw i32 %1728, 1
  %1730 = icmp slt i32 %1728, 0
  %1731 = select i1 %1730, i32 0, i32 %1729
  %1732 = mul nsw i32 %1725, %1731
  %1733 = add nsw i32 %1732, %1713
  %1734 = getelementptr inbounds [3 x i32], ptr %131, i64 %1707
  %1735 = load i32, ptr %1734, align 4, !tbaa !7
  %1736 = getelementptr inbounds [3 x i32], ptr %131, i64 %1707, i64 1
  %1737 = load i32, ptr %1736, align 4, !tbaa !7
  %1738 = getelementptr inbounds [3 x i32], ptr %131, i64 %1707, i64 2
  %1739 = load i32, ptr %1738, align 4, !tbaa !7
  %1740 = mul nsw i32 %1739, %1723
  %1741 = add nsw i32 %1740, %1737
  %1742 = mul nsw i32 %1741, %1731
  %1743 = add nsw i32 %1742, %1735
  %1744 = load i32, ptr %11, align 4, !tbaa !7
  br i1 %406, label %1745, label %2045

1745:                                             ; preds = %1698
  %1746 = load i32, ptr %391, align 4, !tbaa !7
  %1747 = load i32, ptr %364, align 4, !tbaa !7
  %1748 = sub nsw i32 %1746, %1747
  %1749 = icmp slt i32 %1748, 0
  %1750 = add nsw i32 %1748, 1
  %1751 = select i1 %1749, i32 0, i32 %1750
  %1752 = load i32, ptr %392, align 4, !tbaa !7
  %1753 = load i32, ptr %389, align 4, !tbaa !7
  %1754 = sub nsw i32 %1752, %1753
  %1755 = icmp slt i32 %1754, 0
  %1756 = add nsw i32 %1754, 1
  %1757 = select i1 %1755, i32 0, i32 %1756
  %1758 = mul i32 %1751, %1757
  %1759 = load i32, ptr %145, align 4, !tbaa !7
  %1760 = mul i32 %1758, %1759
  %1761 = load i32, ptr %144, align 4, !tbaa !7
  %1762 = mul nsw i32 %1751, %1761
  %1763 = mul i32 %1731, %1723
  %1764 = mul i32 %1763, %1759
  %1765 = mul nsw i32 %1761, %1731
  %1766 = load i32, ptr %386, align 4, !tbaa !7
  %1767 = load i32, ptr %358, align 4, !tbaa !7
  %1768 = sub nsw i32 %1766, %1767
  %1769 = icmp slt i32 %1768, 0
  %1770 = add nsw i32 %1768, 1
  %1771 = select i1 %1769, i32 0, i32 %1770
  %1772 = load i32, ptr %387, align 4, !tbaa !7
  %1773 = load i32, ptr %384, align 4, !tbaa !7
  %1774 = sub nsw i32 %1772, %1773
  %1775 = icmp slt i32 %1774, 0
  %1776 = add nsw i32 %1774, 1
  %1777 = select i1 %1775, i32 0, i32 %1776
  %1778 = mul i32 %1771, %1777
  %1779 = mul i32 %1778, %1759
  %1780 = mul nsw i32 %1761, %1771
  %1781 = mul i32 %1744, %401
  %1782 = sub i32 %1780, %1781
  %1783 = sub i32 %1765, %1781
  %1784 = sub i32 %1762, %1781
  %1785 = mul nsw i32 %402, %1780
  %1786 = sub i32 %1779, %1785
  %1787 = mul nsw i32 %402, %1765
  %1788 = sub i32 %1764, %1787
  %1789 = mul nsw i32 %402, %1762
  %1790 = sub i32 %1760, %1789
  br i1 %407, label %1791, label %2045

1791:                                             ; preds = %1745
  %1792 = load i32, ptr %396, align 4, !tbaa !7
  %1793 = sub i32 %1792, %1767
  %1794 = load i32, ptr %399, align 4, !tbaa !7
  %1795 = sub i32 %1794, %1773
  %1796 = load i32, ptr %400, align 4, !tbaa !7
  %1797 = load i32, ptr %385, align 4, !tbaa !7
  %1798 = sub nsw i32 %1796, %1797
  %1799 = mul nsw i32 %1777, %1798
  %1800 = add nsw i32 %1795, %1799
  %1801 = mul nsw i32 %1800, %1771
  %1802 = add nsw i32 %1793, %1801
  %1803 = sub i32 %1792, %1727
  %1804 = sub i32 %1794, %1719
  %1805 = load i32, ptr %388, align 4, !tbaa !7
  %1806 = sub nsw i32 %1796, %1805
  %1807 = mul nsw i32 %1806, %1723
  %1808 = add nsw i32 %1804, %1807
  %1809 = mul nsw i32 %1808, %1731
  %1810 = add nsw i32 %1803, %1809
  %1811 = sub i32 %1792, %1747
  %1812 = sub i32 %1794, %1753
  %1813 = load i32, ptr %390, align 4, !tbaa !7
  %1814 = sub nsw i32 %1796, %1813
  %1815 = mul nsw i32 %1757, %1814
  %1816 = add nsw i32 %1812, %1815
  %1817 = mul nsw i32 %1816, %1751
  %1818 = add nsw i32 %1811, %1817
  %1819 = sext i32 %1744 to i64
  %1820 = sext i32 %1743 to i64
  %1821 = sext i32 %1733 to i64
  br label %1822

1822:                                             ; preds = %1874, %1791
  %1823 = phi i32 [ %1878, %1874 ], [ %1802, %1791 ]
  %1824 = phi i32 [ %1879, %1874 ], [ %1810, %1791 ]
  %1825 = phi i32 [ %1880, %1874 ], [ %1818, %1791 ]
  %1826 = phi i32 [ %1881, %1874 ], [ 0, %1791 ]
  br i1 %408, label %1827, label %1874

1827:                                             ; preds = %1865, %1822
  %1828 = phi i32 [ %1869, %1865 ], [ %1823, %1822 ]
  %1829 = phi i32 [ %1870, %1865 ], [ %1824, %1822 ]
  %1830 = phi i32 [ %1871, %1865 ], [ %1825, %1822 ]
  %1831 = phi i32 [ %1872, %1865 ], [ 0, %1822 ]
  br i1 %409, label %1832, label %1865

1832:                                             ; preds = %1827
  %1833 = sext i32 %1828 to i64
  %1834 = sext i32 %1829 to i64
  %1835 = sext i32 %1830 to i64
  br label %1836

1836:                                             ; preds = %1836, %1832
  %1837 = phi i64 [ %1835, %1832 ], [ %1858, %1836 ]
  %1838 = phi i64 [ %1834, %1832 ], [ %1857, %1836 ]
  %1839 = phi i64 [ %1833, %1832 ], [ %1856, %1836 ]
  %1840 = phi i32 [ 0, %1832 ], [ %1859, %1836 ]
  %1841 = getelementptr inbounds double, ptr %1706, i64 %1839
  %1842 = load double, ptr %1841, align 8, !tbaa !29
  %1843 = add nsw i64 %1838, %1821
  %1844 = getelementptr inbounds double, ptr %370, i64 %1843
  %1845 = load double, ptr %1844, align 8, !tbaa !29
  %1846 = getelementptr inbounds double, ptr %1711, i64 %1839
  %1847 = load double, ptr %1846, align 8, !tbaa !29
  %1848 = add nsw i64 %1838, %1820
  %1849 = getelementptr inbounds double, ptr %370, i64 %1848
  %1850 = load double, ptr %1849, align 8, !tbaa !29
  %1851 = fmul double %1847, %1850
  %1852 = call double @llvm.fmuladd.f64(double %1842, double %1845, double %1851)
  %1853 = getelementptr inbounds double, ptr %376, i64 %1837
  %1854 = load double, ptr %1853, align 8, !tbaa !29
  %1855 = fadd double %1854, %1852
  store double %1855, ptr %1853, align 8, !tbaa !29
  %1856 = add i64 %1839, %1819
  %1857 = add i64 %1838, %1819
  %1858 = add i64 %1837, %1819
  %1859 = add nuw nsw i32 %1840, 1
  %1860 = icmp eq i32 %1859, %401
  br i1 %1860, label %1861, label %1836, !llvm.loop !697

1861:                                             ; preds = %1836
  %.lcssa8 = phi i64 [ %1856, %1836 ]
  %.lcssa7 = phi i64 [ %1857, %1836 ]
  %.lcssa6 = phi i64 [ %1858, %1836 ]
  %1862 = trunc i64 %.lcssa6 to i32
  %1863 = trunc i64 %.lcssa7 to i32
  %1864 = trunc i64 %.lcssa8 to i32
  br label %1865

1865:                                             ; preds = %1861, %1827
  %1866 = phi i32 [ %1830, %1827 ], [ %1862, %1861 ]
  %1867 = phi i32 [ %1829, %1827 ], [ %1863, %1861 ]
  %1868 = phi i32 [ %1828, %1827 ], [ %1864, %1861 ]
  %1869 = add nsw i32 %1782, %1868
  %1870 = add nsw i32 %1783, %1867
  %1871 = add nsw i32 %1784, %1866
  %1872 = add nuw nsw i32 %1831, 1
  %1873 = icmp eq i32 %1872, %402
  br i1 %1873, label %1874, label %1827, !llvm.loop !698

1874:                                             ; preds = %1865, %1822
  %1875 = phi i32 [ %1825, %1822 ], [ %1871, %1865 ]
  %1876 = phi i32 [ %1824, %1822 ], [ %1870, %1865 ]
  %1877 = phi i32 [ %1823, %1822 ], [ %1869, %1865 ]
  %1878 = add nsw i32 %1786, %1877
  %1879 = add nsw i32 %1788, %1876
  %1880 = add nsw i32 %1790, %1875
  %1881 = add nuw nsw i32 %1826, 1
  %1882 = icmp eq i32 %1881, %403
  br i1 %1882, label %2045, label %1822, !llvm.loop !699

1883:                                             ; preds = %420
  %1884 = load ptr, ptr %152, align 8, !tbaa !340
  %1885 = load ptr, ptr %153, align 8, !tbaa !341
  %1886 = getelementptr inbounds ptr, ptr %1885, i64 %352
  %1887 = load ptr, ptr %1886, align 8, !tbaa !14
  %1888 = getelementptr inbounds i32, ptr %1887, i64 %421
  %1889 = load i32, ptr %1888, align 4, !tbaa !7
  %1890 = sext i32 %1889 to i64
  %1891 = getelementptr inbounds double, ptr %1884, i64 %1890
  %1892 = getelementptr inbounds [3 x i32], ptr %131, i64 %421
  %1893 = load i32, ptr %1892, align 4, !tbaa !7
  %1894 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 1
  %1895 = load i32, ptr %1894, align 4, !tbaa !7
  %1896 = getelementptr inbounds [3 x i32], ptr %131, i64 %421, i64 2
  %1897 = load i32, ptr %1896, align 4, !tbaa !7
  %1898 = load i32, ptr %382, align 4, !tbaa !7
  %1899 = load i32, ptr %383, align 4, !tbaa !7
  %1900 = sub nsw i32 %1898, %1899
  %1901 = add nsw i32 %1900, 1
  %1902 = icmp slt i32 %1900, 0
  %1903 = select i1 %1902, i32 0, i32 %1901
  %1904 = mul nsw i32 %1903, %1897
  %1905 = add nsw i32 %1904, %1895
  %1906 = load i32, ptr %381, align 4, !tbaa !7
  %1907 = load i32, ptr %361, align 4, !tbaa !7
  %1908 = sub nsw i32 %1906, %1907
  %1909 = add nsw i32 %1908, 1
  %1910 = icmp slt i32 %1908, 0
  %1911 = select i1 %1910, i32 0, i32 %1909
  %1912 = mul nsw i32 %1905, %1911
  %1913 = add nsw i32 %1912, %1893
  %1914 = load i32, ptr %11, align 4, !tbaa !7
  br i1 %406, label %1915, label %2045

1915:                                             ; preds = %1883
  %1916 = load i32, ptr %391, align 4, !tbaa !7
  %1917 = load i32, ptr %364, align 4, !tbaa !7
  %1918 = sub nsw i32 %1916, %1917
  %1919 = icmp slt i32 %1918, 0
  %1920 = add nsw i32 %1918, 1
  %1921 = select i1 %1919, i32 0, i32 %1920
  %1922 = load i32, ptr %392, align 4, !tbaa !7
  %1923 = load i32, ptr %389, align 4, !tbaa !7
  %1924 = sub nsw i32 %1922, %1923
  %1925 = icmp slt i32 %1924, 0
  %1926 = add nsw i32 %1924, 1
  %1927 = select i1 %1925, i32 0, i32 %1926
  %1928 = mul i32 %1921, %1927
  %1929 = load i32, ptr %145, align 4, !tbaa !7
  %1930 = mul i32 %1928, %1929
  %1931 = load i32, ptr %144, align 4, !tbaa !7
  %1932 = mul nsw i32 %1921, %1931
  %1933 = mul i32 %1911, %1903
  %1934 = mul i32 %1933, %1929
  %1935 = mul nsw i32 %1931, %1911
  %1936 = load i32, ptr %386, align 4, !tbaa !7
  %1937 = load i32, ptr %358, align 4, !tbaa !7
  %1938 = sub nsw i32 %1936, %1937
  %1939 = icmp slt i32 %1938, 0
  %1940 = add nsw i32 %1938, 1
  %1941 = select i1 %1939, i32 0, i32 %1940
  %1942 = load i32, ptr %387, align 4, !tbaa !7
  %1943 = load i32, ptr %384, align 4, !tbaa !7
  %1944 = sub nsw i32 %1942, %1943
  %1945 = icmp slt i32 %1944, 0
  %1946 = add nsw i32 %1944, 1
  %1947 = select i1 %1945, i32 0, i32 %1946
  %1948 = mul i32 %1941, %1947
  %1949 = mul i32 %1948, %1929
  %1950 = mul nsw i32 %1931, %1941
  %1951 = mul i32 %1914, %401
  %1952 = sub i32 %1950, %1951
  %1953 = sub i32 %1935, %1951
  %1954 = sub i32 %1932, %1951
  %1955 = mul nsw i32 %402, %1950
  %1956 = sub i32 %1949, %1955
  %1957 = mul nsw i32 %402, %1935
  %1958 = sub i32 %1934, %1957
  %1959 = mul nsw i32 %402, %1932
  %1960 = sub i32 %1930, %1959
  br i1 %407, label %1961, label %2045

1961:                                             ; preds = %1915
  %1962 = load i32, ptr %396, align 4, !tbaa !7
  %1963 = sub i32 %1962, %1937
  %1964 = load i32, ptr %399, align 4, !tbaa !7
  %1965 = sub i32 %1964, %1943
  %1966 = load i32, ptr %400, align 4, !tbaa !7
  %1967 = load i32, ptr %385, align 4, !tbaa !7
  %1968 = sub nsw i32 %1966, %1967
  %1969 = mul nsw i32 %1947, %1968
  %1970 = add nsw i32 %1965, %1969
  %1971 = mul nsw i32 %1970, %1941
  %1972 = add nsw i32 %1963, %1971
  %1973 = sub i32 %1962, %1907
  %1974 = sub i32 %1964, %1899
  %1975 = load i32, ptr %388, align 4, !tbaa !7
  %1976 = sub nsw i32 %1966, %1975
  %1977 = mul nsw i32 %1976, %1903
  %1978 = add nsw i32 %1974, %1977
  %1979 = mul nsw i32 %1978, %1911
  %1980 = add nsw i32 %1973, %1979
  %1981 = sub i32 %1962, %1917
  %1982 = sub i32 %1964, %1923
  %1983 = load i32, ptr %390, align 4, !tbaa !7
  %1984 = sub nsw i32 %1966, %1983
  %1985 = mul nsw i32 %1927, %1984
  %1986 = add nsw i32 %1982, %1985
  %1987 = mul nsw i32 %1986, %1921
  %1988 = add nsw i32 %1981, %1987
  %1989 = sext i32 %1914 to i64
  %1990 = sext i32 %1913 to i64
  br label %1991

1991:                                             ; preds = %2036, %1961
  %1992 = phi i32 [ %2040, %2036 ], [ %1972, %1961 ]
  %1993 = phi i32 [ %2041, %2036 ], [ %1980, %1961 ]
  %1994 = phi i32 [ %2042, %2036 ], [ %1988, %1961 ]
  %1995 = phi i32 [ %2043, %2036 ], [ 0, %1961 ]
  br i1 %408, label %1996, label %2036

1996:                                             ; preds = %2027, %1991
  %1997 = phi i32 [ %2031, %2027 ], [ %1992, %1991 ]
  %1998 = phi i32 [ %2032, %2027 ], [ %1993, %1991 ]
  %1999 = phi i32 [ %2033, %2027 ], [ %1994, %1991 ]
  %2000 = phi i32 [ %2034, %2027 ], [ 0, %1991 ]
  br i1 %409, label %2001, label %2027

2001:                                             ; preds = %1996
  %2002 = sext i32 %1997 to i64
  %2003 = sext i32 %1998 to i64
  %2004 = sext i32 %1999 to i64
  br label %2005

2005:                                             ; preds = %2005, %2001
  %2006 = phi i64 [ %2004, %2001 ], [ %2020, %2005 ]
  %2007 = phi i64 [ %2003, %2001 ], [ %2019, %2005 ]
  %2008 = phi i64 [ %2002, %2001 ], [ %2018, %2005 ]
  %2009 = phi i32 [ 0, %2001 ], [ %2021, %2005 ]
  %2010 = getelementptr inbounds double, ptr %1891, i64 %2008
  %2011 = load double, ptr %2010, align 8, !tbaa !29
  %2012 = add nsw i64 %2007, %1990
  %2013 = getelementptr inbounds double, ptr %370, i64 %2012
  %2014 = load double, ptr %2013, align 8, !tbaa !29
  %2015 = getelementptr inbounds double, ptr %376, i64 %2006
  %2016 = load double, ptr %2015, align 8, !tbaa !29
  %2017 = call double @llvm.fmuladd.f64(double %2011, double %2014, double %2016)
  store double %2017, ptr %2015, align 8, !tbaa !29
  %2018 = add i64 %2008, %1989
  %2019 = add i64 %2007, %1989
  %2020 = add i64 %2006, %1989
  %2021 = add nuw nsw i32 %2009, 1
  %2022 = icmp eq i32 %2021, %401
  br i1 %2022, label %2023, label %2005, !llvm.loop !700

2023:                                             ; preds = %2005
  %.lcssa5 = phi i64 [ %2018, %2005 ]
  %.lcssa4 = phi i64 [ %2019, %2005 ]
  %.lcssa3 = phi i64 [ %2020, %2005 ]
  %2024 = trunc i64 %.lcssa3 to i32
  %2025 = trunc i64 %.lcssa4 to i32
  %2026 = trunc i64 %.lcssa5 to i32
  br label %2027

2027:                                             ; preds = %2023, %1996
  %2028 = phi i32 [ %1999, %1996 ], [ %2024, %2023 ]
  %2029 = phi i32 [ %1998, %1996 ], [ %2025, %2023 ]
  %2030 = phi i32 [ %1997, %1996 ], [ %2026, %2023 ]
  %2031 = add nsw i32 %1952, %2030
  %2032 = add nsw i32 %1953, %2029
  %2033 = add nsw i32 %1954, %2028
  %2034 = add nuw nsw i32 %2000, 1
  %2035 = icmp eq i32 %2034, %402
  br i1 %2035, label %2036, label %1996, !llvm.loop !701

2036:                                             ; preds = %2027, %1991
  %2037 = phi i32 [ %1994, %1991 ], [ %2033, %2027 ]
  %2038 = phi i32 [ %1993, %1991 ], [ %2032, %2027 ]
  %2039 = phi i32 [ %1992, %1991 ], [ %2031, %2027 ]
  %2040 = add nsw i32 %1956, %2039
  %2041 = add nsw i32 %1958, %2038
  %2042 = add nsw i32 %1960, %2037
  %2043 = add nuw nsw i32 %1995, 1
  %2044 = icmp eq i32 %2043, %403
  br i1 %2044, label %2045, label %1991, !llvm.loop !702

2045:                                             ; preds = %2036, %1915, %1883, %1874, %1745, %1698, %1689, %1553, %1491, %1482, %1339, %1262, %1253, %1102, %1007, %998, %839, %727, %718, %552, %425, %420
  %2046 = add nuw nsw i64 %421, 7
  %2047 = icmp slt i64 %2046, %155
  br i1 %2047, label %420, label %2048, !llvm.loop !703

2048:                                             ; preds = %2045, %393
  br i1 %154, label %2049, label %2126

2049:                                             ; preds = %2048
  %2050 = load i32, ptr %11, align 4, !tbaa !7
  %2051 = load i32, ptr %8, align 4, !tbaa !7
  %2052 = load i32, ptr %146, align 4, !tbaa !7
  %2053 = load i32, ptr %147, align 4, !tbaa !7
  %2054 = call i32 @llvm.smax.i32(i32 %2052, i32 %2051)
  %2055 = call i32 @llvm.smax.i32(i32 %2053, i32 %2054)
  %2056 = icmp sgt i32 %2055, 0
  br i1 %2056, label %2057, label %2126

2057:                                             ; preds = %2049
  %2058 = load i32, ptr %391, align 4, !tbaa !7
  %2059 = load i32, ptr %364, align 4, !tbaa !7
  %2060 = sub nsw i32 %2058, %2059
  %2061 = icmp slt i32 %2060, 0
  %2062 = add nsw i32 %2060, 1
  %2063 = select i1 %2061, i32 0, i32 %2062
  %2064 = load i32, ptr %392, align 4, !tbaa !7
  %2065 = load i32, ptr %389, align 4, !tbaa !7
  %2066 = sub nsw i32 %2064, %2065
  %2067 = icmp slt i32 %2066, 0
  %2068 = add nsw i32 %2066, 1
  %2069 = select i1 %2067, i32 0, i32 %2068
  %2070 = mul i32 %2063, %2069
  %2071 = load i32, ptr %145, align 4, !tbaa !7
  %2072 = mul i32 %2070, %2071
  %2073 = load i32, ptr %144, align 4, !tbaa !7
  %2074 = mul nsw i32 %2063, %2073
  %2075 = icmp sgt i32 %2053, 0
  %2076 = icmp sgt i32 %2052, 0
  %2077 = icmp sgt i32 %2051, 0
  %2078 = mul nsw i32 %2051, %2050
  %2079 = sub i32 %2074, %2078
  %2080 = mul nsw i32 %2052, %2074
  %2081 = sub i32 %2072, %2080
  br i1 %2075, label %2082, label %2126

2082:                                             ; preds = %2057
  %2083 = load i32, ptr %396, align 4, !tbaa !7
  %2084 = sub i32 %2083, %2059
  %2085 = getelementptr inbounds i32, ptr %396, i64 1
  %2086 = load i32, ptr %2085, align 4, !tbaa !7
  %2087 = sub i32 %2086, %2065
  %2088 = getelementptr inbounds i32, ptr %396, i64 2
  %2089 = load i32, ptr %2088, align 4, !tbaa !7
  %2090 = load i32, ptr %390, align 4, !tbaa !7
  %2091 = sub nsw i32 %2089, %2090
  %2092 = mul nsw i32 %2069, %2091
  %2093 = add nsw i32 %2087, %2092
  %2094 = mul nsw i32 %2093, %2063
  %2095 = add nsw i32 %2084, %2094
  %2096 = sext i32 %2050 to i64
  br label %2097

2097:                                             ; preds = %2121, %2082
  %2098 = phi i32 [ %2123, %2121 ], [ %2095, %2082 ]
  %2099 = phi i32 [ %2124, %2121 ], [ 0, %2082 ]
  br i1 %2076, label %2100, label %2121

2100:                                             ; preds = %2116, %2097
  %2101 = phi i32 [ %2118, %2116 ], [ %2098, %2097 ]
  %2102 = phi i32 [ %2119, %2116 ], [ 0, %2097 ]
  br i1 %2077, label %2103, label %2116

2103:                                             ; preds = %2100
  %2104 = sext i32 %2101 to i64
  br label %2105

2105:                                             ; preds = %2105, %2103
  %2106 = phi i64 [ %2104, %2103 ], [ %2111, %2105 ]
  %2107 = phi i32 [ 0, %2103 ], [ %2112, %2105 ]
  %2108 = getelementptr inbounds double, ptr %376, i64 %2106
  %2109 = load double, ptr %2108, align 8, !tbaa !29
  %2110 = fmul double %2109, %1
  store double %2110, ptr %2108, align 8, !tbaa !29
  %2111 = add i64 %2106, %2096
  %2112 = add nuw nsw i32 %2107, 1
  %2113 = icmp eq i32 %2112, %2051
  br i1 %2113, label %2114, label %2105, !llvm.loop !704

2114:                                             ; preds = %2105
  %.lcssa24 = phi i64 [ %2111, %2105 ]
  %2115 = trunc i64 %.lcssa24 to i32
  br label %2116

2116:                                             ; preds = %2114, %2100
  %2117 = phi i32 [ %2101, %2100 ], [ %2115, %2114 ]
  %2118 = add nsw i32 %2079, %2117
  %2119 = add nuw nsw i32 %2102, 1
  %2120 = icmp eq i32 %2119, %2052
  br i1 %2120, label %2121, label %2100, !llvm.loop !705

2121:                                             ; preds = %2116, %2097
  %2122 = phi i32 [ %2098, %2097 ], [ %2118, %2116 ]
  %2123 = add nsw i32 %2081, %2122
  %2124 = add nuw nsw i32 %2099, 1
  %2125 = icmp eq i32 %2124, %2053
  br i1 %2125, label %2126, label %2097, !llvm.loop !706

2126:                                             ; preds = %2121, %2057, %2049, %2048
  %2127 = add nuw nsw i64 %394, 1
  %2128 = load i32, ptr %377, align 8, !tbaa !21
  %2129 = sext i32 %2128 to i64
  %2130 = icmp slt i64 %2127, %2129
  br i1 %2130, label %393, label %2131, !llvm.loop !707

2131:                                             ; preds = %2126
  %2132 = load i32, ptr %347, align 8, !tbaa !45
  br label %2133

2133:                                             ; preds = %2131, %350
  %2134 = phi i32 [ %351, %350 ], [ %2132, %2131 ]
  %2135 = add nuw nsw i64 %352, 1
  %2136 = sext i32 %2134 to i64
  %2137 = icmp slt i64 %2135, %2136
  br i1 %2137, label %350, label %2138, !llvm.loop !708

2138:                                             ; preds = %2133, %345
  br i1 %157, label %156, label %2139, !llvm.loop !709

2139:                                             ; preds = %2138, %123, %13
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %8) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructMatvecDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !667
  %5 = tail call i32 @hypre_StructMatrixDestroy(ptr noundef %4) #33
  %6 = getelementptr inbounds %struct.hypre_StructMatvecData, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !669
  %8 = tail call i32 @hypre_StructVectorDestroy(ptr noundef %7) #33
  %9 = getelementptr inbounds %struct.hypre_StructMatvecData, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !670
  %11 = tail call i32 @hypre_ComputePkgDestroy(ptr noundef %10) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %12

12:                                               ; preds = %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructScale(double noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #34
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !39
  %6 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %5, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !20
  %8 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !21
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %108

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 2
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 3
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %1, i64 0, i32 6
  %15 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 1
  %16 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 2
  br label %17

17:                                               ; preds = %103, %11
  %18 = phi i64 [ 0, %11 ], [ %104, %103 ]
  %19 = load ptr, ptr %7, align 8, !tbaa !23
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %19, i64 %18
  %21 = load ptr, ptr %12, align 8, !tbaa !25
  %22 = load ptr, ptr %21, align 8, !tbaa !23
  %23 = load ptr, ptr %13, align 8, !tbaa !27
  %24 = load ptr, ptr %14, align 8, !tbaa !28
  %25 = getelementptr inbounds i32, ptr %24, i64 %18
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, ptr %23, i64 %27
  %29 = call i32 @hypre_BoxGetSize(ptr noundef %20, ptr noundef nonnull %3) #33
  %30 = load i32, ptr %3, align 4, !tbaa !7
  %31 = load i32, ptr %15, align 4, !tbaa !7
  %32 = load i32, ptr %16, align 4, !tbaa !7
  %33 = call i32 @llvm.smax.i32(i32 %31, i32 %30)
  %34 = call i32 @llvm.smax.i32(i32 %32, i32 %33)
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %103

36:                                               ; preds = %17
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18
  %38 = load i32, ptr %37, align 4, !tbaa !7
  %39 = getelementptr inbounds [3 x i32], ptr %37, i64 0, i64 1
  %40 = load i32, ptr %39, align 4, !tbaa !7
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18, i32 1, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !7
  %43 = sub nsw i32 %42, %40
  %44 = icmp slt i32 %43, 0
  %45 = add nsw i32 %43, 1
  %46 = select i1 %44, i32 0, i32 %45
  %47 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18, i32 1
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = sub nsw i32 %48, %38
  %50 = icmp slt i32 %49, 0
  %51 = add nsw i32 %49, 1
  %52 = select i1 %50, i32 0, i32 %51
  %53 = icmp sgt i32 %32, 0
  %54 = icmp sgt i32 %31, 0
  %55 = icmp sgt i32 %30, 0
  %56 = sub i32 %52, %30
  %57 = sub i32 %46, %31
  %58 = mul i32 %52, %57
  br i1 %53, label %59, label %103

59:                                               ; preds = %36
  %60 = load i32, ptr %20, align 4, !tbaa !7
  %61 = sub i32 %60, %38
  %62 = getelementptr inbounds i32, ptr %20, i64 1
  %63 = load i32, ptr %62, align 4, !tbaa !7
  %64 = sub i32 %63, %40
  %65 = getelementptr inbounds i32, ptr %20, i64 2
  %66 = load i32, ptr %65, align 4, !tbaa !7
  %67 = getelementptr inbounds [3 x i32], ptr %37, i64 0, i64 2
  %68 = load i32, ptr %67, align 4, !tbaa !7
  %69 = sub nsw i32 %66, %68
  %70 = mul nsw i32 %46, %69
  %71 = add nsw i32 %64, %70
  %72 = mul nsw i32 %71, %52
  %73 = add nsw i32 %61, %72
  br label %74

74:                                               ; preds = %98, %59
  %75 = phi i32 [ %100, %98 ], [ %73, %59 ]
  %76 = phi i32 [ %101, %98 ], [ 0, %59 ]
  br i1 %54, label %77, label %98

77:                                               ; preds = %93, %74
  %78 = phi i32 [ %95, %93 ], [ %75, %74 ]
  %79 = phi i32 [ %96, %93 ], [ 0, %74 ]
  br i1 %55, label %80, label %93

80:                                               ; preds = %77
  %81 = sext i32 %78 to i64
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ %81, %80 ], [ %88, %82 ]
  %84 = phi i32 [ 0, %80 ], [ %89, %82 ]
  %85 = getelementptr inbounds double, ptr %28, i64 %83
  %86 = load double, ptr %85, align 8, !tbaa !29
  %87 = fmul double %86, %0
  store double %87, ptr %85, align 8, !tbaa !29
  %88 = add nsw i64 %83, 1
  %89 = add nuw nsw i32 %84, 1
  %90 = icmp eq i32 %89, %30
  br i1 %90, label %91, label %82, !llvm.loop !710

91:                                               ; preds = %82
  %.lcssa = phi i64 [ %88, %82 ]
  %92 = trunc i64 %.lcssa to i32
  br label %93

93:                                               ; preds = %91, %77
  %94 = phi i32 [ %78, %77 ], [ %92, %91 ]
  %95 = add nsw i32 %56, %94
  %96 = add nuw nsw i32 %79, 1
  %97 = icmp eq i32 %96, %31
  br i1 %97, label %98, label %77, !llvm.loop !711

98:                                               ; preds = %93, %74
  %99 = phi i32 [ %75, %74 ], [ %95, %93 ]
  %100 = add nsw i32 %99, %58
  %101 = add nuw nsw i32 %76, 1
  %102 = icmp eq i32 %101, %32
  br i1 %102, label %103, label %74, !llvm.loop !712

103:                                              ; preds = %98, %36, %17
  %104 = add nuw nsw i64 %18, 1
  %105 = load i32, ptr %8, align 8, !tbaa !21
  %106 = sext i32 %105 to i64
  %107 = icmp slt i64 %104, %106
  br i1 %107, label %17, label %108, !llvm.loop !713

108:                                              ; preds = %103, %2
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructStencilCreate(i32 noundef %0, i32 noundef %1, ptr noundef %2) #0 {
  %4 = tail call ptr @hypre_MAlloc(i32 noundef 24) #33
  store ptr %2, ptr %4, align 8, !tbaa !35
  %5 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %4, i64 0, i32 1
  store i32 %1, ptr %5, align 8, !tbaa !172
  %6 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %4, i64 0, i32 3
  store i32 %0, ptr %6, align 8, !tbaa !37
  %7 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %4, i64 0, i32 4
  store i32 1, ptr %7, align 4, !tbaa !714
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %26

9:                                                ; preds = %3
  %10 = zext i32 %1 to i64
  br label %11

11:                                               ; preds = %23, %9
  %12 = phi i64 [ 0, %9 ], [ %24, %23 ]
  %13 = phi i32 [ 0, %9 ], [ %.lcssa, %23 ]
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi i64 [ 0, %11 ], [ %21, %14 ]
  %16 = phi i32 [ %13, %11 ], [ %20, %14 ]
  %17 = getelementptr inbounds [3 x i32], ptr %2, i64 %12, i64 %15
  %18 = load i32, ptr %17, align 4, !tbaa !7
  %19 = tail call i32 @llvm.abs.i32(i32 %18, i1 true)
  %20 = tail call i32 @llvm.smax.i32(i32 %19, i32 %16)
  %21 = add nuw nsw i64 %15, 1
  %22 = icmp eq i64 %21, 3
  br i1 %22, label %23, label %14, !llvm.loop !715

23:                                               ; preds = %14
  %.lcssa = phi i32 [ %20, %14 ]
  %24 = add nuw nsw i64 %12, 1
  %25 = icmp eq i64 %24, %10
  br i1 %25, label %26, label %11, !llvm.loop !716

26:                                               ; preds = %23, %3
  %27 = phi i32 [ 0, %3 ], [ %.lcssa, %23 ]
  %28 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %4, i64 0, i32 2
  store i32 %27, ptr %28, align 4, !tbaa !717
  ret ptr %4
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal ptr @hypre_StructStencilRef(ptr noundef returned %0) #7 {
  %2 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %0, i64 0, i32 4
  %3 = load i32, ptr %2, align 4, !tbaa !714
  %4 = add nsw i32 %3, 1
  store i32 %4, ptr %2, align 4, !tbaa !714
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructStencilDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %0, i64 0, i32 4
  %5 = load i32, ptr %4, align 4, !tbaa !714
  %6 = add nsw i32 %5, -1
  store i32 %6, ptr %4, align 4, !tbaa !714
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %3
  %9 = load ptr, ptr %0, align 8, !tbaa !35
  tail call void @hypre_Free(ptr noundef %9) #33
  store ptr null, ptr %0, align 8, !tbaa !35
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %10

10:                                               ; preds = %8, %3, %1
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable
define internal i32 @hypre_StructStencilElementRank(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #30 {
  %3 = load ptr, ptr %0, align 8, !tbaa !35
  %4 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !172
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %32

7:                                                ; preds = %2
  %8 = load i32, ptr %1, align 4, !tbaa !7
  %9 = getelementptr inbounds i32, ptr %1, i64 1
  %10 = getelementptr inbounds i32, ptr %1, i64 2
  %11 = zext i32 %5 to i64
  br label %12

12:                                               ; preds = %27, %7
  %13 = phi i64 [ 0, %7 ], [ %28, %27 ]
  %14 = getelementptr inbounds [3 x i32], ptr %3, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !7
  %16 = icmp eq i32 %15, %8
  br i1 %16, label %17, label %27

17:                                               ; preds = %12
  %18 = getelementptr inbounds [3 x i32], ptr %3, i64 %13, i64 1
  %19 = load i32, ptr %18, align 4, !tbaa !7
  %20 = load i32, ptr %9, align 4, !tbaa !7
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %22, label %27

22:                                               ; preds = %17
  %23 = getelementptr inbounds [3 x i32], ptr %3, i64 %13, i64 2
  %24 = load i32, ptr %23, align 4, !tbaa !7
  %25 = load i32, ptr %10, align 4, !tbaa !7
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %30, label %27

27:                                               ; preds = %22, %17, %12
  %28 = add nuw nsw i64 %13, 1
  %29 = icmp eq i64 %28, %11
  br i1 %29, label %32, label %12, !llvm.loop !718

30:                                               ; preds = %22
  %.lcssa = phi i64 [ %13, %22 ]
  %31 = trunc i64 %.lcssa to i32
  br label %32

32:                                               ; preds = %30, %27, %2
  %33 = phi i32 [ -1, %2 ], [ %31, %30 ], [ -1, %27 ]
  ret i32 %33
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructStencilSymmetrize(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2) #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !35
  %5 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %0, i64 0, i32 1
  %6 = load i32, ptr %5, align 8, !tbaa !172
  %7 = shl nsw i32 %6, 1
  %8 = tail call ptr @hypre_CAlloc(i32 noundef %7, i32 noundef 12) #33
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = tail call ptr @hypre_CAlloc(i32 noundef %7, i32 noundef 4) #33
  br label %93

12:                                               ; preds = %3
  %13 = zext i32 %6 to i64
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %25, %14 ]
  %16 = getelementptr inbounds [3 x i32], ptr %4, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !7
  %18 = getelementptr inbounds [3 x i32], ptr %8, i64 %15
  store i32 %17, ptr %18, align 4, !tbaa !7
  %19 = getelementptr inbounds [3 x i32], ptr %4, i64 %15, i64 1
  %20 = load i32, ptr %19, align 4, !tbaa !7
  %21 = getelementptr inbounds [3 x i32], ptr %8, i64 %15, i64 1
  store i32 %20, ptr %21, align 4, !tbaa !7
  %22 = getelementptr inbounds [3 x i32], ptr %4, i64 %15, i64 2
  %23 = load i32, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds [3 x i32], ptr %8, i64 %15, i64 2
  store i32 %23, ptr %24, align 4, !tbaa !7
  %25 = add nuw nsw i64 %15, 1
  %26 = icmp eq i64 %25, %13
  br i1 %26, label %27, label %14, !llvm.loop !719

27:                                               ; preds = %14
  %28 = tail call ptr @hypre_CAlloc(i32 noundef %7, i32 noundef 4) #33
  br i1 %9, label %29, label %93

29:                                               ; preds = %27
  %30 = tail call i32 @llvm.smax.i32(i32 %7, i32 1)
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(1) %28, i8 -1, i64 %32, i1 false), !tbaa !7
  %33 = zext i32 %6 to i64
  br label %34

34:                                               ; preds = %89, %29
  %35 = phi i64 [ 0, %29 ], [ %91, %89 ]
  %36 = phi i32 [ %6, %29 ], [ %90, %89 ]
  %37 = getelementptr inbounds i32, ptr %28, i64 %35
  %38 = load i32, ptr %37, align 4, !tbaa !7
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %89

40:                                               ; preds = %34
  %41 = getelementptr inbounds [3 x i32], ptr %8, i64 %35
  %42 = getelementptr inbounds [3 x i32], ptr %8, i64 %35, i64 1
  %43 = getelementptr inbounds [3 x i32], ptr %8, i64 %35, i64 2
  %44 = trunc i64 %35 to i32
  br label %45

45:                                               ; preds = %69, %40
  %46 = phi i64 [ %35, %40 ], [ %71, %69 ]
  %47 = phi i32 [ 1, %40 ], [ %70, %69 ]
  %48 = getelementptr inbounds [3 x i32], ptr %8, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = load i32, ptr %41, align 4, !tbaa !7
  %51 = sub nsw i32 0, %50
  %52 = icmp eq i32 %49, %51
  br i1 %52, label %53, label %69

53:                                               ; preds = %45
  %54 = getelementptr inbounds [3 x i32], ptr %8, i64 %46, i64 1
  %55 = load i32, ptr %54, align 4, !tbaa !7
  %56 = load i32, ptr %42, align 4, !tbaa !7
  %57 = sub nsw i32 0, %56
  %58 = icmp eq i32 %55, %57
  br i1 %58, label %59, label %69

59:                                               ; preds = %53
  %60 = getelementptr inbounds [3 x i32], ptr %8, i64 %46, i64 2
  %61 = load i32, ptr %60, align 4, !tbaa !7
  %62 = load i32, ptr %43, align 4, !tbaa !7
  %63 = sub nsw i32 0, %62
  %64 = icmp eq i32 %61, %63
  br i1 %64, label %65, label %69

65:                                               ; preds = %59
  %66 = icmp eq i64 %35, %46
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = getelementptr inbounds i32, ptr %28, i64 %46
  store i32 %44, ptr %68, align 4, !tbaa !7
  br label %69

69:                                               ; preds = %67, %65, %59, %53, %45
  %70 = phi i32 [ %47, %59 ], [ %47, %53 ], [ %47, %45 ], [ 0, %67 ], [ 0, %65 ]
  %71 = add nuw nsw i64 %46, 1
  %72 = icmp eq i64 %71, %33
  br i1 %72, label %73, label %45, !llvm.loop !720

73:                                               ; preds = %69
  %.lcssa = phi i32 [ %70, %69 ]
  %74 = icmp eq i32 %.lcssa, 0
  br i1 %74, label %89, label %75

75:                                               ; preds = %73
  %76 = sext i32 %36 to i64
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %83, %77 ]
  %79 = getelementptr inbounds [3 x i32], ptr %8, i64 %35, i64 %78
  %80 = load i32, ptr %79, align 4, !tbaa !7
  %81 = sub nsw i32 0, %80
  %82 = getelementptr inbounds [3 x i32], ptr %8, i64 %76, i64 %78
  store i32 %81, ptr %82, align 4, !tbaa !7
  %83 = add nuw nsw i64 %78, 1
  %84 = icmp eq i64 %83, 3
  br i1 %84, label %85, label %77, !llvm.loop !721

85:                                               ; preds = %77
  %86 = getelementptr inbounds i32, ptr %28, i64 %76
  %87 = trunc i64 %35 to i32
  store i32 %87, ptr %86, align 4, !tbaa !7
  %88 = add nsw i32 %36, 1
  br label %89

89:                                               ; preds = %85, %73, %34
  %90 = phi i32 [ %88, %85 ], [ %36, %73 ], [ %36, %34 ]
  %91 = add nuw nsw i64 %35, 1
  %92 = icmp eq i64 %91, %33
  br i1 %92, label %93, label %34, !llvm.loop !722

93:                                               ; preds = %89, %27, %10
  %94 = phi ptr [ %28, %27 ], [ %11, %10 ], [ %28, %89 ]
  %95 = phi i32 [ %6, %27 ], [ %6, %10 ], [ %90, %89 ]
  %96 = getelementptr inbounds %struct.hypre_StructStencil_struct, ptr %0, i64 0, i32 3
  %97 = load i32, ptr %96, align 8, !tbaa !37
  %98 = tail call ptr @hypre_StructStencilCreate(i32 noundef %97, i32 noundef %95, ptr noundef %8) #35
  store ptr %98, ptr %1, align 8, !tbaa !14
  store ptr %94, ptr %2, align 8, !tbaa !14
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal ptr @hypre_StructVectorCreate(i32 noundef %0, ptr noundef %1) #0 {
  %3 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 80) #33
  store i32 %0, ptr %3, align 8, !tbaa !325
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 1
  %5 = tail call i32 @hypre_StructGridRef(ptr noundef %1, ptr noundef nonnull %4) #33
  %6 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 4
  store i32 1, ptr %6, align 8, !tbaa !585
  %7 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 9
  store i32 1, ptr %7, align 4, !tbaa !723
  br label %8

8:                                                ; preds = %20, %2
  %9 = phi i64 [ 0, %2 ], [ %21, %20 ]
  %10 = phi <2 x i64> [ <i64 0, i64 1>, %2 ], [ %22, %20 ]
  %11 = icmp ult <2 x i64> %10, <i64 6, i64 6>
  %12 = extractelement <2 x i1> %11, i64 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 7, i64 %9
  store i32 1, ptr %14, align 4, !tbaa !7
  br label %15

15:                                               ; preds = %13, %8
  %16 = extractelement <2 x i1> %11, i64 1
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = or i64 %9, 1
  %19 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %3, i64 0, i32 7, i64 %18
  store i32 1, ptr %19, align 4, !tbaa !7
  br label %20

20:                                               ; preds = %17, %15
  %21 = add i64 %9, 2
  %22 = add <2 x i64> %10, <i64 2, i64 2>
  %23 = icmp eq i64 %21, 6
  br i1 %23, label %24, label %8, !llvm.loop !724

24:                                               ; preds = %20
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable
define internal ptr @hypre_StructVectorRef(ptr noundef returned %0) #7 {
  %2 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 9
  %3 = load i32, ptr %2, align 4, !tbaa !723
  %4 = add nsw i32 %3, 1
  store i32 %4, ptr %2, align 4, !tbaa !723
  ret ptr %0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructVectorDestroy(ptr noundef %0) #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %24, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 9
  %5 = load i32, ptr %4, align 4, !tbaa !723
  %6 = add nsw i32 %5, -1
  store i32 %6, ptr %4, align 4, !tbaa !723
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %24

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 4
  %10 = load i32, ptr %9, align 8, !tbaa !585
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !27
  tail call void @hypre_Free(ptr noundef %14) #33
  store ptr null, ptr %13, align 8, !tbaa !27
  br label %15

15:                                               ; preds = %12, %8
  %16 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %17 = load ptr, ptr %16, align 8, !tbaa !28
  tail call void @hypre_Free(ptr noundef %17) #33
  store ptr null, ptr %16, align 8, !tbaa !28
  %18 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !25
  %20 = tail call i32 @hypre_BoxArrayDestroy(ptr noundef %19) #33
  %21 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !39
  %23 = tail call i32 @hypre_StructGridDestroy(ptr noundef %22) #33
  tail call void @hypre_Free(ptr noundef nonnull %0) #33
  br label %24

24:                                               ; preds = %15, %3, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructVectorInitializeShell(ptr nocapture noundef %0) #0 {
  %2 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !39
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !25
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %61

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 7
  %9 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %3, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !20
  %11 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %10, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !21
  %13 = tail call ptr @hypre_BoxArrayCreate(i32 noundef %12) #33
  %14 = load i32, ptr %11, align 8, !tbaa !21
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %60

16:                                               ; preds = %7
  %17 = load ptr, ptr %10, align 8, !tbaa !23
  %18 = load ptr, ptr %13, align 8, !tbaa !23
  br label %19

19:                                               ; preds = %55, %16
  %20 = phi i64 [ 0, %16 ], [ %56, %55 ]
  %21 = getelementptr inbounds %struct.hypre_Box_struct, ptr %17, i64 %20
  %22 = getelementptr inbounds %struct.hypre_Box_struct, ptr %18, i64 %20
  %23 = load i32, ptr %21, align 4, !tbaa !7
  store i32 %23, ptr %22, align 4, !tbaa !7
  %24 = getelementptr inbounds [3 x i32], ptr %21, i64 0, i64 1
  %25 = load i32, ptr %24, align 4, !tbaa !7
  %26 = getelementptr inbounds [3 x i32], ptr %22, i64 0, i64 1
  store i32 %25, ptr %26, align 4, !tbaa !7
  %27 = getelementptr inbounds [3 x i32], ptr %21, i64 0, i64 2
  %28 = load i32, ptr %27, align 4, !tbaa !7
  %29 = getelementptr inbounds [3 x i32], ptr %22, i64 0, i64 2
  store i32 %28, ptr %29, align 4, !tbaa !7
  %30 = getelementptr inbounds %struct.hypre_Box_struct, ptr %17, i64 %20, i32 1
  %31 = load i32, ptr %30, align 4, !tbaa !7
  %32 = getelementptr inbounds %struct.hypre_Box_struct, ptr %18, i64 %20, i32 1
  store i32 %31, ptr %32, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_Box_struct, ptr %17, i64 %20, i32 1, i64 1
  %34 = load i32, ptr %33, align 4, !tbaa !7
  %35 = getelementptr inbounds %struct.hypre_Box_struct, ptr %18, i64 %20, i32 1, i64 1
  store i32 %34, ptr %35, align 4, !tbaa !7
  %36 = getelementptr inbounds %struct.hypre_Box_struct, ptr %17, i64 %20, i32 1, i64 2
  %37 = load i32, ptr %36, align 4, !tbaa !7
  %38 = getelementptr inbounds %struct.hypre_Box_struct, ptr %18, i64 %20, i32 1, i64 2
  store i32 %37, ptr %38, align 4, !tbaa !7
  br label %39

39:                                               ; preds = %39, %19
  %40 = phi i64 [ 0, %19 ], [ %53, %39 ]
  %41 = shl nuw nsw i64 %40, 1
  %42 = getelementptr inbounds i32, ptr %8, i64 %41
  %43 = load i32, ptr %42, align 4, !tbaa !7
  %44 = getelementptr inbounds [3 x i32], ptr %22, i64 0, i64 %40
  %45 = load i32, ptr %44, align 4, !tbaa !7
  %46 = sub nsw i32 %45, %43
  store i32 %46, ptr %44, align 4, !tbaa !7
  %47 = or i64 %41, 1
  %48 = getelementptr inbounds i32, ptr %8, i64 %47
  %49 = load i32, ptr %48, align 4, !tbaa !7
  %50 = getelementptr inbounds %struct.hypre_Box_struct, ptr %18, i64 %20, i32 1, i64 %40
  %51 = load i32, ptr %50, align 4, !tbaa !7
  %52 = add nsw i32 %51, %49
  store i32 %52, ptr %50, align 4, !tbaa !7
  %53 = add nuw nsw i64 %40, 1
  %54 = icmp eq i64 %53, 3
  br i1 %54, label %55, label %39, !llvm.loop !725

55:                                               ; preds = %39
  %56 = add nuw nsw i64 %20, 1
  %57 = load i32, ptr %11, align 8, !tbaa !21
  %58 = sext i32 %57 to i64
  %59 = icmp slt i64 %56, %58
  br i1 %59, label %19, label %60, !llvm.loop !726

60:                                               ; preds = %55, %7
  store ptr %13, ptr %4, align 8, !tbaa !25
  br label %61

61:                                               ; preds = %60, %1
  %62 = phi ptr [ %13, %60 ], [ %5, %1 ]
  %63 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %64 = load ptr, ptr %63, align 8, !tbaa !28
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %106

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %62, i64 0, i32 1
  %68 = load i32, ptr %67, align 8, !tbaa !21
  %69 = tail call ptr @hypre_CAlloc(i32 noundef %68, i32 noundef 4) #33
  %70 = load i32, ptr %67, align 8, !tbaa !21
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %103

72:                                               ; preds = %66
  %73 = load ptr, ptr %62, align 8, !tbaa !23
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %99, %74 ]
  %76 = phi i32 [ 0, %72 ], [ %98, %74 ]
  %77 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %75
  %78 = getelementptr inbounds i32, ptr %69, i64 %75
  store i32 %76, ptr %78, align 4, !tbaa !7
  %79 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %75, i32 1
  %80 = load <2 x i32>, ptr %79, align 4, !tbaa !7
  %81 = load <2 x i32>, ptr %77, align 4, !tbaa !7
  %82 = sub nsw <2 x i32> %80, %81
  %83 = add nsw <2 x i32> %82, <i32 1, i32 1>
  %84 = icmp slt <2 x i32> %82, zeroinitializer
  %85 = select <2 x i1> %84, <2 x i32> zeroinitializer, <2 x i32> %83
  %86 = extractelement <2 x i32> %85, i64 0
  %87 = extractelement <2 x i32> %85, i64 1
  %88 = mul nsw i32 %87, %86
  %89 = getelementptr inbounds %struct.hypre_Box_struct, ptr %73, i64 %75, i32 1, i64 2
  %90 = load i32, ptr %89, align 4, !tbaa !7
  %91 = getelementptr inbounds [3 x i32], ptr %77, i64 0, i64 2
  %92 = load i32, ptr %91, align 4, !tbaa !7
  %93 = sub nsw i32 %90, %92
  %94 = add nsw i32 %93, 1
  %95 = icmp slt i32 %93, 0
  %96 = select i1 %95, i32 0, i32 %94
  %97 = mul nsw i32 %88, %96
  %98 = add nsw i32 %97, %76
  %99 = add nuw nsw i64 %75, 1
  %100 = load i32, ptr %67, align 8, !tbaa !21
  %101 = sext i32 %100 to i64
  %102 = icmp slt i64 %99, %101
  br i1 %102, label %74, label %103, !llvm.loop !727

103:                                              ; preds = %74, %66
  %104 = phi i32 [ 0, %66 ], [ %98, %74 ]
  store ptr %69, ptr %63, align 8, !tbaa !28
  %105 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 5
  store i32 %104, ptr %105, align 4, !tbaa !244
  br label %106

106:                                              ; preds = %103, %61
  %107 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %3, i64 0, i32 8
  %108 = load i32, ptr %107, align 4, !tbaa !613
  %109 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 8
  store i32 %108, ptr %109, align 8, !tbaa !254
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable
define internal i32 @hypre_StructVectorInitializeData(ptr nocapture noundef writeonly %0, ptr noundef %1) #3 {
  %3 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  store ptr %1, ptr %3, align 8, !tbaa !27
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 4
  store i32 0, ptr %4, align 8, !tbaa !585
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructVectorInitialize(ptr nocapture noundef %0) #0 {
  %2 = tail call i32 @hypre_StructVectorInitializeShell(ptr noundef %0) #35
  %3 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 5
  %4 = load i32, ptr %3, align 4, !tbaa !244
  %5 = tail call ptr @hypre_CAlloc(i32 noundef %4, i32 noundef 8) #33
  %6 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  store ptr %5, ptr %6, align 8, !tbaa !27
  %7 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 4
  store i32 1, ptr %7, align 8, !tbaa !585
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructVectorSetBoxValues(ptr nocapture noundef readonly %0, ptr noundef %1, ptr nocapture noundef readonly %2, i32 noundef %3) #0 {
  %5 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #34
  %6 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !39
  %8 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %7, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !20
  %10 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %9, i64 0, i32 1
  %11 = load i32, ptr %10, align 8, !tbaa !21
  %12 = tail call ptr @hypre_BoxArrayCreate(i32 noundef %11) #33
  %13 = tail call ptr @hypre_BoxCreate() #33
  %14 = load i32, ptr %10, align 8, !tbaa !21
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %46

16:                                               ; preds = %4
  %17 = getelementptr inbounds [3 x i32], ptr %13, i64 0, i64 1
  %18 = getelementptr inbounds [3 x i32], ptr %13, i64 0, i64 2
  %19 = getelementptr inbounds %struct.hypre_Box_struct, ptr %13, i64 0, i32 1
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %13, i64 0, i32 1, i64 1
  %21 = getelementptr inbounds %struct.hypre_Box_struct, ptr %13, i64 0, i32 1, i64 2
  br label %22

22:                                               ; preds = %22, %16
  %23 = phi i64 [ 0, %16 ], [ %40, %22 ]
  %24 = load ptr, ptr %9, align 8, !tbaa !23
  %25 = getelementptr inbounds %struct.hypre_Box_struct, ptr %24, i64 %23
  %26 = tail call i32 @hypre_IntersectBoxes(ptr noundef %1, ptr noundef %25, ptr noundef %13) #33
  %27 = load i32, ptr %13, align 4, !tbaa !7
  %28 = load ptr, ptr %12, align 8, !tbaa !23
  %29 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %23
  store i32 %27, ptr %29, align 4, !tbaa !7
  %30 = load i32, ptr %17, align 4, !tbaa !7
  %31 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %23, i32 0, i64 1
  store i32 %30, ptr %31, align 4, !tbaa !7
  %32 = load i32, ptr %18, align 4, !tbaa !7
  %33 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %23, i32 0, i64 2
  store i32 %32, ptr %33, align 4, !tbaa !7
  %34 = load i32, ptr %19, align 4, !tbaa !7
  %35 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %23, i32 1
  store i32 %34, ptr %35, align 4, !tbaa !7
  %36 = load i32, ptr %20, align 4, !tbaa !7
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %23, i32 1, i64 1
  store i32 %36, ptr %37, align 4, !tbaa !7
  %38 = load i32, ptr %21, align 4, !tbaa !7
  %39 = getelementptr inbounds %struct.hypre_Box_struct, ptr %28, i64 %23, i32 1, i64 2
  store i32 %38, ptr %39, align 4, !tbaa !7
  %40 = add nuw nsw i64 %23, 1
  %41 = load i32, ptr %10, align 8, !tbaa !21
  %42 = sext i32 %41 to i64
  %43 = icmp slt i64 %40, %42
  br i1 %43, label %22, label %44, !llvm.loop !728

44:                                               ; preds = %22
  %45 = tail call i32 @hypre_BoxDestroy(ptr noundef nonnull %13) #33
  br label %49

46:                                               ; preds = %4
  %47 = tail call i32 @hypre_BoxDestroy(ptr noundef %13) #33
  %48 = icmp eq ptr %12, null
  br i1 %48, label %297, label %49

49:                                               ; preds = %46, %44
  %50 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = tail call ptr @hypre_BoxDuplicate(ptr noundef %1) #33
  %53 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %12, i64 0, i32 1
  %54 = load i32, ptr %53, align 8, !tbaa !21
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %295

56:                                               ; preds = %49
  %57 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %58 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %59 = icmp eq i32 %3, 0
  %60 = getelementptr inbounds [3 x i32], ptr %52, i64 0, i64 1
  %61 = getelementptr inbounds [3 x i32], ptr %52, i64 0, i64 2
  %62 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 0, i32 1
  %63 = getelementptr inbounds %struct.hypre_Box_struct, ptr %52, i64 0, i32 1, i64 1
  %64 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 1
  %65 = getelementptr inbounds [3 x i32], ptr %5, i64 0, i64 2
  br label %66

66:                                               ; preds = %290, %56
  %67 = phi i64 [ 0, %56 ], [ %291, %290 ]
  %68 = load ptr, ptr %12, align 8, !tbaa !23
  %69 = getelementptr inbounds %struct.hypre_Box_struct, ptr %68, i64 %67
  %70 = load ptr, ptr %51, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %67
  %72 = icmp eq ptr %68, null
  br i1 %72, label %290, label %73

73:                                               ; preds = %66
  %74 = load i32, ptr %69, align 4, !tbaa !7
  %75 = getelementptr inbounds i32, ptr %69, i64 1
  %76 = load i32, ptr %75, align 4, !tbaa !7
  %77 = getelementptr inbounds i32, ptr %69, i64 2
  %78 = load i32, ptr %77, align 4, !tbaa !7
  %79 = load ptr, ptr %57, align 8, !tbaa !27
  %80 = load ptr, ptr %58, align 8, !tbaa !28
  %81 = getelementptr inbounds i32, ptr %80, i64 %67
  %82 = load i32, ptr %81, align 4, !tbaa !7
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, ptr %79, i64 %83
  %85 = call i32 @hypre_BoxGetSize(ptr noundef nonnull %69, ptr noundef nonnull %5) #33
  %86 = load i32, ptr %5, align 4, !tbaa !7
  %87 = load i32, ptr %64, align 4, !tbaa !7
  %88 = load i32, ptr %65, align 4, !tbaa !7
  %89 = call i32 @llvm.smax.i32(i32 %87, i32 %86)
  %90 = call i32 @llvm.smax.i32(i32 %88, i32 %89)
  %91 = icmp sgt i32 %90, 0
  br i1 %59, label %192, label %92

92:                                               ; preds = %73
  br i1 %91, label %93, label %290

93:                                               ; preds = %92
  %94 = load i32, ptr %52, align 4, !tbaa !7
  %95 = load i32, ptr %60, align 4, !tbaa !7
  %96 = load i32, ptr %63, align 4, !tbaa !7
  %97 = sub nsw i32 %96, %95
  %98 = icmp slt i32 %97, 0
  %99 = add nsw i32 %97, 1
  %100 = select i1 %98, i32 0, i32 %99
  %101 = load i32, ptr %62, align 4, !tbaa !7
  %102 = sub nsw i32 %101, %94
  %103 = icmp slt i32 %102, 0
  %104 = add nsw i32 %102, 1
  %105 = select i1 %103, i32 0, i32 %104
  %106 = load i32, ptr %71, align 4, !tbaa !7
  %107 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 1
  %108 = load i32, ptr %107, align 4, !tbaa !7
  %109 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %67, i32 1, i64 1
  %110 = load i32, ptr %109, align 4, !tbaa !7
  %111 = sub nsw i32 %110, %108
  %112 = icmp slt i32 %111, 0
  %113 = add nsw i32 %111, 1
  %114 = select i1 %112, i32 0, i32 %113
  %115 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %67, i32 1
  %116 = load i32, ptr %115, align 4, !tbaa !7
  %117 = sub nsw i32 %116, %106
  %118 = icmp slt i32 %117, 0
  %119 = add nsw i32 %117, 1
  %120 = select i1 %118, i32 0, i32 %119
  %121 = icmp sgt i32 %88, 0
  %122 = icmp sgt i32 %87, 0
  %123 = icmp sgt i32 %86, 0
  %124 = sub i32 %120, %86
  %125 = sub i32 %105, %86
  %126 = sub i32 %114, %87
  %127 = mul i32 %126, %120
  %128 = sub i32 %100, %87
  %129 = mul i32 %105, %128
  br i1 %121, label %130, label %290

130:                                              ; preds = %93
  %131 = load i32, ptr %69, align 4, !tbaa !7
  %132 = sub i32 %131, %106
  %133 = load i32, ptr %75, align 4, !tbaa !7
  %134 = sub i32 %133, %108
  %135 = load i32, ptr %77, align 4, !tbaa !7
  %136 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 2
  %137 = load i32, ptr %136, align 4, !tbaa !7
  %138 = sub nsw i32 %135, %137
  %139 = mul nsw i32 %114, %138
  %140 = add nsw i32 %134, %139
  %141 = mul nsw i32 %140, %120
  %142 = add nsw i32 %132, %141
  %143 = sub i32 %74, %94
  %144 = sub i32 %76, %95
  %145 = load i32, ptr %61, align 4, !tbaa !7
  %146 = sub nsw i32 %78, %145
  %147 = mul nsw i32 %100, %146
  %148 = add nsw i32 %144, %147
  %149 = mul nsw i32 %148, %105
  %150 = add nsw i32 %143, %149
  br label %151

151:                                              ; preds = %185, %130
  %152 = phi i32 [ %188, %185 ], [ %142, %130 ]
  %153 = phi i32 [ %189, %185 ], [ %150, %130 ]
  %154 = phi i32 [ %190, %185 ], [ 0, %130 ]
  br i1 %122, label %155, label %185

155:                                              ; preds = %178, %151
  %156 = phi i32 [ %181, %178 ], [ %152, %151 ]
  %157 = phi i32 [ %182, %178 ], [ %153, %151 ]
  %158 = phi i32 [ %183, %178 ], [ 0, %151 ]
  br i1 %123, label %159, label %178

159:                                              ; preds = %155
  %160 = sext i32 %156 to i64
  %161 = sext i32 %157 to i64
  br label %162

162:                                              ; preds = %162, %159
  %163 = phi i64 [ %161, %159 ], [ %172, %162 ]
  %164 = phi i64 [ %160, %159 ], [ %171, %162 ]
  %165 = phi i32 [ 0, %159 ], [ %173, %162 ]
  %166 = getelementptr inbounds double, ptr %2, i64 %163
  %167 = load double, ptr %166, align 8, !tbaa !29
  %168 = getelementptr inbounds double, ptr %84, i64 %164
  %169 = load double, ptr %168, align 8, !tbaa !29
  %170 = fadd double %167, %169
  store double %170, ptr %168, align 8, !tbaa !29
  %171 = add nsw i64 %164, 1
  %172 = add nsw i64 %163, 1
  %173 = add nuw nsw i32 %165, 1
  %174 = icmp eq i32 %173, %86
  br i1 %174, label %175, label %162, !llvm.loop !729

175:                                              ; preds = %162
  %.lcssa1 = phi i64 [ %171, %162 ]
  %.lcssa = phi i64 [ %172, %162 ]
  %176 = trunc i64 %.lcssa to i32
  %177 = trunc i64 %.lcssa1 to i32
  br label %178

178:                                              ; preds = %175, %155
  %179 = phi i32 [ %157, %155 ], [ %176, %175 ]
  %180 = phi i32 [ %156, %155 ], [ %177, %175 ]
  %181 = add nsw i32 %124, %180
  %182 = add nsw i32 %125, %179
  %183 = add nuw nsw i32 %158, 1
  %184 = icmp eq i32 %183, %87
  br i1 %184, label %185, label %155, !llvm.loop !730

185:                                              ; preds = %178, %151
  %186 = phi i32 [ %153, %151 ], [ %182, %178 ]
  %187 = phi i32 [ %152, %151 ], [ %181, %178 ]
  %188 = add nsw i32 %187, %127
  %189 = add nsw i32 %186, %129
  %190 = add nuw nsw i32 %154, 1
  %191 = icmp eq i32 %190, %88
  br i1 %191, label %290, label %151, !llvm.loop !731

192:                                              ; preds = %73
  br i1 %91, label %193, label %290

193:                                              ; preds = %192
  %194 = load i32, ptr %52, align 4, !tbaa !7
  %195 = load i32, ptr %60, align 4, !tbaa !7
  %196 = load i32, ptr %63, align 4, !tbaa !7
  %197 = sub nsw i32 %196, %195
  %198 = icmp slt i32 %197, 0
  %199 = add nsw i32 %197, 1
  %200 = select i1 %198, i32 0, i32 %199
  %201 = load i32, ptr %62, align 4, !tbaa !7
  %202 = sub nsw i32 %201, %194
  %203 = icmp slt i32 %202, 0
  %204 = add nsw i32 %202, 1
  %205 = select i1 %203, i32 0, i32 %204
  %206 = load i32, ptr %71, align 4, !tbaa !7
  %207 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 1
  %208 = load i32, ptr %207, align 4, !tbaa !7
  %209 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %67, i32 1, i64 1
  %210 = load i32, ptr %209, align 4, !tbaa !7
  %211 = sub nsw i32 %210, %208
  %212 = icmp slt i32 %211, 0
  %213 = add nsw i32 %211, 1
  %214 = select i1 %212, i32 0, i32 %213
  %215 = getelementptr inbounds %struct.hypre_Box_struct, ptr %70, i64 %67, i32 1
  %216 = load i32, ptr %215, align 4, !tbaa !7
  %217 = sub nsw i32 %216, %206
  %218 = icmp slt i32 %217, 0
  %219 = add nsw i32 %217, 1
  %220 = select i1 %218, i32 0, i32 %219
  %221 = icmp sgt i32 %88, 0
  %222 = icmp sgt i32 %87, 0
  %223 = icmp sgt i32 %86, 0
  %224 = sub i32 %220, %86
  %225 = sub i32 %205, %86
  %226 = sub i32 %214, %87
  %227 = mul i32 %226, %220
  %228 = sub i32 %200, %87
  %229 = mul i32 %205, %228
  br i1 %221, label %230, label %290

230:                                              ; preds = %193
  %231 = load i32, ptr %69, align 4, !tbaa !7
  %232 = sub i32 %231, %206
  %233 = load i32, ptr %75, align 4, !tbaa !7
  %234 = sub i32 %233, %208
  %235 = load i32, ptr %77, align 4, !tbaa !7
  %236 = getelementptr inbounds [3 x i32], ptr %71, i64 0, i64 2
  %237 = load i32, ptr %236, align 4, !tbaa !7
  %238 = sub nsw i32 %235, %237
  %239 = mul nsw i32 %214, %238
  %240 = add nsw i32 %234, %239
  %241 = mul nsw i32 %240, %220
  %242 = add nsw i32 %232, %241
  %243 = sub i32 %74, %194
  %244 = sub i32 %76, %195
  %245 = load i32, ptr %61, align 4, !tbaa !7
  %246 = sub nsw i32 %78, %245
  %247 = mul nsw i32 %200, %246
  %248 = add nsw i32 %244, %247
  %249 = mul nsw i32 %248, %205
  %250 = add nsw i32 %243, %249
  br label %251

251:                                              ; preds = %283, %230
  %252 = phi i32 [ %286, %283 ], [ %242, %230 ]
  %253 = phi i32 [ %287, %283 ], [ %250, %230 ]
  %254 = phi i32 [ %288, %283 ], [ 0, %230 ]
  br i1 %222, label %255, label %283

255:                                              ; preds = %276, %251
  %256 = phi i32 [ %279, %276 ], [ %252, %251 ]
  %257 = phi i32 [ %280, %276 ], [ %253, %251 ]
  %258 = phi i32 [ %281, %276 ], [ 0, %251 ]
  br i1 %223, label %259, label %276

259:                                              ; preds = %255
  %260 = sext i32 %256 to i64
  %261 = sext i32 %257 to i64
  br label %262

262:                                              ; preds = %262, %259
  %263 = phi i64 [ %261, %259 ], [ %270, %262 ]
  %264 = phi i64 [ %260, %259 ], [ %269, %262 ]
  %265 = phi i32 [ 0, %259 ], [ %271, %262 ]
  %266 = getelementptr inbounds double, ptr %2, i64 %263
  %267 = load double, ptr %266, align 8, !tbaa !29
  %268 = getelementptr inbounds double, ptr %84, i64 %264
  store double %267, ptr %268, align 8, !tbaa !29
  %269 = add nsw i64 %264, 1
  %270 = add nsw i64 %263, 1
  %271 = add nuw nsw i32 %265, 1
  %272 = icmp eq i32 %271, %86
  br i1 %272, label %273, label %262, !llvm.loop !732

273:                                              ; preds = %262
  %.lcssa3 = phi i64 [ %269, %262 ]
  %.lcssa2 = phi i64 [ %270, %262 ]
  %274 = trunc i64 %.lcssa2 to i32
  %275 = trunc i64 %.lcssa3 to i32
  br label %276

276:                                              ; preds = %273, %255
  %277 = phi i32 [ %257, %255 ], [ %274, %273 ]
  %278 = phi i32 [ %256, %255 ], [ %275, %273 ]
  %279 = add nsw i32 %224, %278
  %280 = add nsw i32 %225, %277
  %281 = add nuw nsw i32 %258, 1
  %282 = icmp eq i32 %281, %87
  br i1 %282, label %283, label %255, !llvm.loop !733

283:                                              ; preds = %276, %251
  %284 = phi i32 [ %253, %251 ], [ %280, %276 ]
  %285 = phi i32 [ %252, %251 ], [ %279, %276 ]
  %286 = add nsw i32 %285, %227
  %287 = add nsw i32 %284, %229
  %288 = add nuw nsw i32 %254, 1
  %289 = icmp eq i32 %288, %88
  br i1 %289, label %290, label %251, !llvm.loop !734

290:                                              ; preds = %283, %193, %192, %185, %93, %92, %66
  %291 = add nuw nsw i64 %67, 1
  %292 = load i32, ptr %53, align 8, !tbaa !21
  %293 = sext i32 %292 to i64
  %294 = icmp slt i64 %291, %293
  br i1 %294, label %66, label %295, !llvm.loop !735

295:                                              ; preds = %290, %49
  %296 = call i32 @hypre_BoxDestroy(ptr noundef %52) #33
  br label %297

297:                                              ; preds = %295, %46
  %298 = call i32 @hypre_BoxArrayDestroy(ptr noundef %12) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #34
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable
define internal i32 @hypre_StructVectorSetNumGhost(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1) #8 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i64 [ 0, %2 ], [ %8, %3 ]
  %5 = getelementptr inbounds i32, ptr %1, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !7
  %7 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 7, i64 %4
  store i32 %6, ptr %7, align 4, !tbaa !7
  %8 = add nuw nsw i64 %4, 1
  %9 = icmp eq i64 %8, 6
  br i1 %9, label %10, label %3, !llvm.loop !736

10:                                               ; preds = %3
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal i32 @hypre_StructVectorAssemble(ptr nocapture noundef readnone %0) #4 {
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructVectorSetConstantValues(ptr nocapture noundef readonly %0, double noundef %1) #0 {
  %3 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #34
  %4 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !39
  %6 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %5, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !20
  %8 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %7, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !21
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %106

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %15 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 1
  %16 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 2
  br label %17

17:                                               ; preds = %101, %11
  %18 = phi i64 [ 0, %11 ], [ %102, %101 ]
  %19 = load ptr, ptr %7, align 8, !tbaa !23
  %20 = getelementptr inbounds %struct.hypre_Box_struct, ptr %19, i64 %18
  %21 = load ptr, ptr %12, align 8, !tbaa !25
  %22 = load ptr, ptr %21, align 8, !tbaa !23
  %23 = load ptr, ptr %13, align 8, !tbaa !27
  %24 = load ptr, ptr %14, align 8, !tbaa !28
  %25 = getelementptr inbounds i32, ptr %24, i64 %18
  %26 = load i32, ptr %25, align 4, !tbaa !7
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, ptr %23, i64 %27
  %29 = call i32 @hypre_BoxGetSize(ptr noundef %20, ptr noundef nonnull %3) #33
  %30 = load i32, ptr %3, align 4, !tbaa !7
  %31 = load i32, ptr %15, align 4, !tbaa !7
  %32 = load i32, ptr %16, align 4, !tbaa !7
  %33 = call i32 @llvm.smax.i32(i32 %31, i32 %30)
  %34 = call i32 @llvm.smax.i32(i32 %32, i32 %33)
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %101

36:                                               ; preds = %17
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18
  %38 = load i32, ptr %37, align 4, !tbaa !7
  %39 = getelementptr inbounds [3 x i32], ptr %37, i64 0, i64 1
  %40 = load i32, ptr %39, align 4, !tbaa !7
  %41 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18, i32 1, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !7
  %43 = sub nsw i32 %42, %40
  %44 = icmp slt i32 %43, 0
  %45 = add nsw i32 %43, 1
  %46 = select i1 %44, i32 0, i32 %45
  %47 = getelementptr inbounds %struct.hypre_Box_struct, ptr %22, i64 %18, i32 1
  %48 = load i32, ptr %47, align 4, !tbaa !7
  %49 = sub nsw i32 %48, %38
  %50 = icmp slt i32 %49, 0
  %51 = add nsw i32 %49, 1
  %52 = select i1 %50, i32 0, i32 %51
  %53 = icmp sgt i32 %32, 0
  %54 = icmp sgt i32 %31, 0
  %55 = icmp sgt i32 %30, 0
  %56 = sub i32 %52, %30
  %57 = sub i32 %46, %31
  %58 = mul i32 %52, %57
  br i1 %53, label %59, label %101

59:                                               ; preds = %36
  %60 = load i32, ptr %20, align 4, !tbaa !7
  %61 = sub i32 %60, %38
  %62 = getelementptr inbounds i32, ptr %20, i64 1
  %63 = load i32, ptr %62, align 4, !tbaa !7
  %64 = sub i32 %63, %40
  %65 = getelementptr inbounds i32, ptr %20, i64 2
  %66 = load i32, ptr %65, align 4, !tbaa !7
  %67 = getelementptr inbounds [3 x i32], ptr %37, i64 0, i64 2
  %68 = load i32, ptr %67, align 4, !tbaa !7
  %69 = sub nsw i32 %66, %68
  %70 = mul nsw i32 %46, %69
  %71 = add nsw i32 %64, %70
  %72 = mul nsw i32 %71, %52
  %73 = add nsw i32 %61, %72
  br label %74

74:                                               ; preds = %96, %59
  %75 = phi i32 [ %98, %96 ], [ %73, %59 ]
  %76 = phi i32 [ %99, %96 ], [ 0, %59 ]
  br i1 %54, label %77, label %96

77:                                               ; preds = %91, %74
  %78 = phi i32 [ %93, %91 ], [ %75, %74 ]
  %79 = phi i32 [ %94, %91 ], [ 0, %74 ]
  br i1 %55, label %80, label %91

80:                                               ; preds = %77
  %81 = sext i32 %78 to i64
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ %81, %80 ], [ %86, %82 ]
  %84 = phi i32 [ 0, %80 ], [ %87, %82 ]
  %85 = getelementptr inbounds double, ptr %28, i64 %83
  store double %1, ptr %85, align 8, !tbaa !29
  %86 = add nsw i64 %83, 1
  %87 = add nuw nsw i32 %84, 1
  %88 = icmp eq i32 %87, %30
  br i1 %88, label %89, label %82, !llvm.loop !737

89:                                               ; preds = %82
  %.lcssa = phi i64 [ %86, %82 ]
  %90 = trunc i64 %.lcssa to i32
  br label %91

91:                                               ; preds = %89, %77
  %92 = phi i32 [ %78, %77 ], [ %90, %89 ]
  %93 = add nsw i32 %56, %92
  %94 = add nuw nsw i32 %79, 1
  %95 = icmp eq i32 %94, %31
  br i1 %95, label %96, label %77, !llvm.loop !738

96:                                               ; preds = %91, %74
  %97 = phi i32 [ %75, %74 ], [ %93, %91 ]
  %98 = add nsw i32 %97, %58
  %99 = add nuw nsw i32 %76, 1
  %100 = icmp eq i32 %99, %32
  br i1 %100, label %101, label %74, !llvm.loop !739

101:                                              ; preds = %96, %36, %17
  %102 = add nuw nsw i64 %18, 1
  %103 = load i32, ptr %8, align 8, !tbaa !21
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %102, %104
  br i1 %105, label %17, label %106, !llvm.loop !740

106:                                              ; preds = %101, %2
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #34
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_StructVectorClearGhostValues(ptr nocapture noundef readonly %0) #0 {
  %2 = alloca [3 x i32], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %2) #34
  %3 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !39
  %5 = getelementptr inbounds %struct.hypre_StructGrid_struct, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !20
  %7 = tail call ptr @hypre_BoxArrayCreate(i32 noundef 0) #33
  %8 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %6, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !21
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %117

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 3
  %14 = getelementptr inbounds %struct.hypre_StructVector_struct, ptr %0, i64 0, i32 6
  %15 = getelementptr inbounds %struct.hypre_BoxArray_struct, ptr %7, i64 0, i32 1
  %16 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 1
  %17 = getelementptr inbounds [3 x i32], ptr %2, i64 0, i64 2
  br label %18

18:                                               ; preds = %112, %11
  %19 = phi i64 [ 0, %11 ], [ %113, %112 ]
  %20 = load ptr, ptr %6, align 8, !tbaa !23
  %21 = getelementptr inbounds %struct.hypre_Box_struct, ptr %20, i64 %19
  %22 = load ptr, ptr %12, align 8, !tbaa !25
  %23 = load ptr, ptr %22, align 8, !tbaa !23
  %24 = getelementptr inbounds %struct.hypre_Box_struct, ptr %23, i64 %19
  %25 = load ptr, ptr %13, align 8, !tbaa !27
  %26 = load ptr, ptr %14, align 8, !tbaa !28
  %27 = getelementptr inbounds i32, ptr %26, i64 %19
  %28 = load i32, ptr %27, align 4, !tbaa !7
  %29 = call i32 @hypre_SubtractBoxes(ptr noundef %24, ptr noundef %21, ptr noundef %7) #33
  %30 = load i32, ptr %15, align 8, !tbaa !21
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %112

32:                                               ; preds = %18
  %33 = sext i32 %28 to i64
  %34 = getelementptr inbounds [3 x i32], ptr %24, i64 0, i64 1
  %35 = getelementptr inbounds [3 x i32], ptr %24, i64 0, i64 2
  %36 = getelementptr inbounds %struct.hypre_Box_struct, ptr %23, i64 %19, i32 1
  %37 = getelementptr inbounds %struct.hypre_Box_struct, ptr %23, i64 %19, i32 1, i64 1
  %38 = shl nsw i64 %33, 3
  %39 = getelementptr i8, ptr %25, i64 %38
  br label %40

40:                                               ; preds = %107, %32
  %41 = phi i64 [ 0, %32 ], [ %108, %107 ]
  %42 = load ptr, ptr %7, align 8, !tbaa !23
  %43 = getelementptr inbounds %struct.hypre_Box_struct, ptr %42, i64 %41
  %44 = call i32 @hypre_BoxGetSize(ptr noundef %43, ptr noundef nonnull %2) #33
  %45 = load i32, ptr %2, align 4, !tbaa !7
  %46 = load i32, ptr %16, align 4, !tbaa !7
  %47 = load i32, ptr %17, align 4, !tbaa !7
  %48 = call i32 @llvm.smax.i32(i32 %46, i32 %45)
  %49 = call i32 @llvm.smax.i32(i32 %47, i32 %48)
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %107

51:                                               ; preds = %40
  %52 = load i32, ptr %24, align 4, !tbaa !7
  %53 = load i32, ptr %34, align 4, !tbaa !7
  %54 = load i32, ptr %37, align 4, !tbaa !7
  %55 = sub nsw i32 %54, %53
  %56 = icmp slt i32 %55, 0
  %57 = add nsw i32 %55, 1
  %58 = select i1 %56, i32 0, i32 %57
  %59 = load i32, ptr %36, align 4, !tbaa !7
  %60 = sub nsw i32 %59, %52
  %61 = icmp slt i32 %60, 0
  %62 = add nsw i32 %60, 1
  %63 = select i1 %61, i32 0, i32 %62
  %64 = icmp sgt i32 %47, 0
  %65 = icmp sgt i32 %46, 0
  %66 = icmp sgt i32 %45, 0
  %67 = sub i32 %63, %45
  %68 = sub i32 %58, %46
  %69 = mul i32 %63, %68
  br i1 %64, label %70, label %107

70:                                               ; preds = %51
  %71 = load i32, ptr %43, align 4, !tbaa !7
  %72 = sub i32 %71, %52
  %73 = getelementptr inbounds i32, ptr %43, i64 1
  %74 = load i32, ptr %73, align 4, !tbaa !7
  %75 = sub i32 %74, %53
  %76 = getelementptr inbounds i32, ptr %43, i64 2
  %77 = load i32, ptr %76, align 4, !tbaa !7
  %78 = load i32, ptr %35, align 4, !tbaa !7
  %79 = sub nsw i32 %77, %78
  %80 = mul nsw i32 %58, %79
  %81 = add nsw i32 %75, %80
  %82 = mul nsw i32 %81, %63
  %83 = add nsw i32 %72, %82
  %84 = zext i32 %45 to i64
  %85 = shl nuw nsw i64 %84, 3
  br label %86

86:                                               ; preds = %102, %70
  %87 = phi i32 [ %104, %102 ], [ %83, %70 ]
  %88 = phi i32 [ %105, %102 ], [ 0, %70 ]
  br i1 %65, label %89, label %102

89:                                               ; preds = %97, %86
  %90 = phi i32 [ %99, %97 ], [ %87, %86 ]
  %91 = phi i32 [ %100, %97 ], [ 0, %86 ]
  br i1 %66, label %92, label %97

92:                                               ; preds = %89
  %93 = sext i32 %90 to i64
  %94 = shl nsw i64 %93, 3
  %95 = getelementptr i8, ptr %39, i64 %94
  call void @llvm.memset.p0.i64(ptr align 8 %95, i8 0, i64 %85, i1 false), !tbaa !29
  %96 = add i32 %45, %90
  br label %97

97:                                               ; preds = %92, %89
  %98 = phi i32 [ %90, %89 ], [ %96, %92 ]
  %99 = add nsw i32 %67, %98
  %100 = add nuw nsw i32 %91, 1
  %101 = icmp eq i32 %100, %46
  br i1 %101, label %102, label %89, !llvm.loop !741

102:                                              ; preds = %97, %86
  %103 = phi i32 [ %87, %86 ], [ %99, %97 ]
  %104 = add nsw i32 %103, %69
  %105 = add nuw nsw i32 %88, 1
  %106 = icmp eq i32 %105, %47
  br i1 %106, label %107, label %86, !llvm.loop !742

107:                                              ; preds = %102, %51, %40
  %108 = add nuw nsw i64 %41, 1
  %109 = load i32, ptr %15, align 8, !tbaa !21
  %110 = sext i32 %109 to i64
  %111 = icmp slt i64 %108, %110
  br i1 %111, label %40, label %112, !llvm.loop !743

112:                                              ; preds = %107, %18
  %113 = add nuw nsw i64 %19, 1
  %114 = load i32, ptr %8, align 8, !tbaa !21
  %115 = sext i32 %114 to i64
  %116 = icmp slt i64 %113, %115
  br i1 %116, label %18, label %117, !llvm.loop !744

117:                                              ; preds = %112, %1
  %118 = call i32 @hypre_BoxArrayDestroy(ptr noundef %7) #33
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %2) #34
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal double @time_getWallclockSeconds() #4 {
  ret double 0.000000e+00
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable
define internal double @time_getCPUSeconds() #4 {
  ret double 0.000000e+00
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_InitializeTiming(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %3 = icmp eq ptr %2, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %1
  %5 = tail call ptr @hypre_CAlloc(i32 noundef 1, i32 noundef 80) #33
  store ptr %5, ptr @hypre_global_timing, align 8, !tbaa !14
  br label %6

6:                                                ; preds = %4, %1
  %7 = phi ptr [ %5, %4 ], [ %2, %1 ]
  %8 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 7
  %9 = load i32, ptr %8, align 4, !tbaa !745
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %49

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !747
  %14 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 3
  %15 = zext i32 %9 to i64
  br label %21

16:                                               ; preds = %36
  br i1 %10, label %17, label %49

17:                                               ; preds = %16
  %18 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !747
  %20 = zext i32 %9 to i64
  br label %39

21:                                               ; preds = %36, %11
  %22 = phi i64 [ 0, %11 ], [ %37, %36 ]
  %23 = getelementptr inbounds i32, ptr %13, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !7
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %21
  %27 = load ptr, ptr %14, align 8, !tbaa !748
  %28 = getelementptr inbounds ptr, ptr %27, i64 %22
  %29 = load ptr, ptr %28, align 8, !tbaa !14
  %30 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %0, ptr noundef nonnull dereferenceable(1) %29) #39
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %26
  %.lcssa3 = phi i64 [ %22, %26 ]
  %.lcssa1 = phi i32 [ %24, %26 ]
  %33 = getelementptr inbounds i32, ptr %13, i64 %.lcssa3
  %34 = trunc i64 %.lcssa3 to i32
  %35 = add nuw nsw i32 %.lcssa1, 1
  store i32 %35, ptr %33, align 4, !tbaa !7
  br label %148

36:                                               ; preds = %26, %21
  %37 = add nuw nsw i64 %22, 1
  %38 = icmp eq i64 %37, %15
  br i1 %38, label %16, label %21, !llvm.loop !749

39:                                               ; preds = %44, %17
  %40 = phi i64 [ 0, %17 ], [ %45, %44 ]
  %41 = getelementptr inbounds i32, ptr %19, i64 %40
  %42 = load i32, ptr %41, align 4, !tbaa !7
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %39
  %45 = add nuw nsw i64 %40, 1
  %46 = icmp eq i64 %45, %20
  br i1 %46, label %52, label %39, !llvm.loop !750

47:                                               ; preds = %39
  %.lcssa = phi i64 [ %40, %39 ]
  %48 = trunc i64 %.lcssa to i32
  br label %49

49:                                               ; preds = %47, %16, %6
  %50 = phi i32 [ 0, %16 ], [ 0, %6 ], [ %48, %47 ]
  %51 = icmp eq i32 %50, %9
  br i1 %51, label %52, label %125

52:                                               ; preds = %49, %44
  %53 = phi i32 [ %50, %49 ], [ %9, %44 ]
  %54 = load ptr, ptr %7, align 8, !tbaa !751
  %55 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !752
  %57 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !753
  %59 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 3
  %60 = load ptr, ptr %59, align 8, !tbaa !748
  %61 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 4
  %62 = load ptr, ptr %61, align 8, !tbaa !754
  %63 = getelementptr inbounds %struct.hypre_TimingType, ptr %7, i64 0, i32 5
  %64 = load ptr, ptr %63, align 8, !tbaa !747
  %65 = add nuw nsw i32 %9, 1
  %66 = tail call ptr @hypre_CAlloc(i32 noundef %65, i32 noundef 8) #33
  %67 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  store ptr %66, ptr %67, align 8, !tbaa !751
  %68 = tail call ptr @hypre_CAlloc(i32 noundef %65, i32 noundef 8) #33
  %69 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %70 = getelementptr inbounds %struct.hypre_TimingType, ptr %69, i64 0, i32 1
  store ptr %68, ptr %70, align 8, !tbaa !752
  %71 = tail call ptr @hypre_CAlloc(i32 noundef %65, i32 noundef 8) #33
  %72 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %73 = getelementptr inbounds %struct.hypre_TimingType, ptr %72, i64 0, i32 2
  store ptr %71, ptr %73, align 8, !tbaa !753
  %74 = tail call ptr @hypre_CAlloc(i32 noundef %65, i32 noundef 8) #33
  %75 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %76 = getelementptr inbounds %struct.hypre_TimingType, ptr %75, i64 0, i32 3
  store ptr %74, ptr %76, align 8, !tbaa !748
  %77 = tail call ptr @hypre_CAlloc(i32 noundef %65, i32 noundef 4) #33
  %78 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %79 = getelementptr inbounds %struct.hypre_TimingType, ptr %78, i64 0, i32 4
  store ptr %77, ptr %79, align 8, !tbaa !754
  %80 = tail call ptr @hypre_CAlloc(i32 noundef %65, i32 noundef 4) #33
  %81 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %82 = getelementptr inbounds %struct.hypre_TimingType, ptr %81, i64 0, i32 5
  store ptr %80, ptr %82, align 8, !tbaa !747
  %83 = getelementptr inbounds %struct.hypre_TimingType, ptr %81, i64 0, i32 7
  %84 = load i32, ptr %83, align 4, !tbaa !745
  %85 = add nsw i32 %84, 1
  store i32 %85, ptr %83, align 4, !tbaa !745
  %86 = icmp eq i32 %9, 0
  br i1 %86, label %124, label %87

87:                                               ; preds = %52
  %88 = zext i32 %9 to i64
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi ptr [ %81, %87 ], [ %113, %89 ]
  %91 = phi i64 [ 0, %87 ], [ %122, %89 ]
  %92 = getelementptr inbounds double, ptr %54, i64 %91
  %93 = load double, ptr %92, align 8, !tbaa !29
  %94 = load ptr, ptr %90, align 8, !tbaa !751
  %95 = getelementptr inbounds double, ptr %94, i64 %91
  store double %93, ptr %95, align 8, !tbaa !29
  %96 = getelementptr inbounds double, ptr %56, i64 %91
  %97 = load double, ptr %96, align 8, !tbaa !29
  %98 = getelementptr inbounds %struct.hypre_TimingType, ptr %90, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !752
  %100 = getelementptr inbounds double, ptr %99, i64 %91
  store double %97, ptr %100, align 8, !tbaa !29
  %101 = getelementptr inbounds double, ptr %58, i64 %91
  %102 = load double, ptr %101, align 8, !tbaa !29
  %103 = getelementptr inbounds %struct.hypre_TimingType, ptr %90, i64 0, i32 2
  %104 = load ptr, ptr %103, align 8, !tbaa !753
  %105 = getelementptr inbounds double, ptr %104, i64 %91
  store double %102, ptr %105, align 8, !tbaa !29
  %106 = getelementptr inbounds ptr, ptr %60, i64 %91
  %107 = load ptr, ptr %106, align 8, !tbaa !14
  %108 = getelementptr inbounds %struct.hypre_TimingType, ptr %90, i64 0, i32 3
  %109 = load ptr, ptr %108, align 8, !tbaa !748
  %110 = getelementptr inbounds ptr, ptr %109, i64 %91
  store ptr %107, ptr %110, align 8, !tbaa !14
  %111 = getelementptr inbounds i32, ptr %62, i64 %91
  %112 = load i32, ptr %111, align 4, !tbaa !7
  %113 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %114 = getelementptr inbounds %struct.hypre_TimingType, ptr %113, i64 0, i32 4
  %115 = load ptr, ptr %114, align 8, !tbaa !754
  %116 = getelementptr inbounds i32, ptr %115, i64 %91
  store i32 %112, ptr %116, align 4, !tbaa !7
  %117 = getelementptr inbounds i32, ptr %64, i64 %91
  %118 = load i32, ptr %117, align 4, !tbaa !7
  %119 = getelementptr inbounds %struct.hypre_TimingType, ptr %113, i64 0, i32 5
  %120 = load ptr, ptr %119, align 8, !tbaa !747
  %121 = getelementptr inbounds i32, ptr %120, i64 %91
  store i32 %118, ptr %121, align 4, !tbaa !7
  %122 = add nuw nsw i64 %91, 1
  %123 = icmp eq i64 %122, %88
  br i1 %123, label %124, label %89, !llvm.loop !755

124:                                              ; preds = %89, %52
  tail call void @hypre_Free(ptr noundef %54) #33
  tail call void @hypre_Free(ptr noundef %56) #33
  tail call void @hypre_Free(ptr noundef %58) #33
  tail call void @hypre_Free(ptr noundef %60) #33
  tail call void @hypre_Free(ptr noundef %62) #33
  tail call void @hypre_Free(ptr noundef %64) #33
  br label %125

125:                                              ; preds = %124, %49
  %126 = phi i32 [ %53, %124 ], [ %50, %49 ]
  %127 = tail call ptr @hypre_CAlloc(i32 noundef 80, i32 noundef 1) #33
  %128 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %129 = getelementptr inbounds %struct.hypre_TimingType, ptr %128, i64 0, i32 3
  %130 = load ptr, ptr %129, align 8, !tbaa !748
  %131 = zext i32 %126 to i64
  %132 = getelementptr inbounds ptr, ptr %130, i64 %131
  store ptr %127, ptr %132, align 8, !tbaa !14
  %133 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %134 = getelementptr inbounds %struct.hypre_TimingType, ptr %133, i64 0, i32 3
  %135 = load ptr, ptr %134, align 8, !tbaa !748
  %136 = getelementptr inbounds ptr, ptr %135, i64 %131
  %137 = load ptr, ptr %136, align 8, !tbaa !14
  %138 = tail call ptr @strncpy(ptr noundef nonnull dereferenceable(1) %137, ptr noundef nonnull dereferenceable(1) %0, i64 noundef 79) #33
  %139 = getelementptr inbounds %struct.hypre_TimingType, ptr %133, i64 0, i32 4
  %140 = load ptr, ptr %139, align 8, !tbaa !754
  %141 = getelementptr inbounds i32, ptr %140, i64 %131
  store i32 0, ptr %141, align 4, !tbaa !7
  %142 = getelementptr inbounds %struct.hypre_TimingType, ptr %133, i64 0, i32 5
  %143 = load ptr, ptr %142, align 8, !tbaa !747
  %144 = getelementptr inbounds i32, ptr %143, i64 %131
  store i32 1, ptr %144, align 4, !tbaa !7
  %145 = getelementptr inbounds %struct.hypre_TimingType, ptr %133, i64 0, i32 6
  %146 = load i32, ptr %145, align 8, !tbaa !756
  %147 = add nsw i32 %146, 1
  store i32 %147, ptr %145, align 8, !tbaa !756
  br label %148

148:                                              ; preds = %125, %32
  %149 = phi i32 [ %34, %32 ], [ %126, %125 ]
  ret i32 %149
}

; Function Attrs: mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite)
declare ptr @strncpy(ptr noalias noundef returned writeonly, ptr noalias nocapture noundef readonly, i64 noundef) local_unnamed_addr #31

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_FinalizeTiming(i32 noundef %0) #0 {
  %2 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %3 = icmp eq ptr %2, null
  br i1 %3, label %74, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.hypre_TimingType, ptr %2, i64 0, i32 7
  %6 = load i32, ptr %5, align 4, !tbaa !745
  %7 = icmp sgt i32 %6, %0
  br i1 %7, label %8, label %33

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.hypre_TimingType, ptr %2, i64 0, i32 5
  %10 = load ptr, ptr %9, align 8, !tbaa !747
  %11 = sext i32 %0 to i64
  %12 = getelementptr inbounds i32, ptr %10, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !7
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %8
  %16 = add nsw i32 %13, -1
  store i32 %16, ptr %12, align 4, !tbaa !7
  br label %17

17:                                               ; preds = %15, %8
  %18 = phi i32 [ %16, %15 ], [ %13, %8 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.hypre_TimingType, ptr %2, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !748
  %23 = getelementptr inbounds ptr, ptr %22, i64 %11
  %24 = load ptr, ptr %23, align 8, !tbaa !14
  tail call void @hypre_Free(ptr noundef %24) #33
  %25 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %26 = getelementptr inbounds %struct.hypre_TimingType, ptr %25, i64 0, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !748
  %28 = getelementptr inbounds ptr, ptr %27, i64 %11
  store ptr null, ptr %28, align 8, !tbaa !14
  %29 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %30 = getelementptr inbounds %struct.hypre_TimingType, ptr %29, i64 0, i32 6
  %31 = load i32, ptr %30, align 8, !tbaa !756
  %32 = add nsw i32 %31, -1
  store i32 %32, ptr %30, align 8, !tbaa !756
  br label %33

33:                                               ; preds = %20, %17, %4
  %34 = phi ptr [ %2, %17 ], [ %29, %20 ], [ %2, %4 ]
  %35 = getelementptr inbounds %struct.hypre_TimingType, ptr %34, i64 0, i32 6
  %36 = load i32, ptr %35, align 8, !tbaa !756
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %74

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.hypre_TimingType, ptr %34, i64 0, i32 7
  %40 = load i32, ptr %39, align 4, !tbaa !745
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %72

42:                                               ; preds = %42, %38
  %43 = phi ptr [ %66, %42 ], [ %34, %38 ]
  %44 = phi i32 [ %68, %42 ], [ 0, %38 ]
  %45 = load ptr, ptr %43, align 8, !tbaa !751
  tail call void @hypre_Free(ptr noundef %45) #33
  %46 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  store ptr null, ptr %46, align 8, !tbaa !751
  %47 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %48 = getelementptr inbounds %struct.hypre_TimingType, ptr %47, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !752
  tail call void @hypre_Free(ptr noundef %49) #33
  %50 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %51 = getelementptr inbounds %struct.hypre_TimingType, ptr %50, i64 0, i32 1
  store ptr null, ptr %51, align 8, !tbaa !752
  %52 = getelementptr inbounds %struct.hypre_TimingType, ptr %50, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !753
  tail call void @hypre_Free(ptr noundef %53) #33
  %54 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %55 = getelementptr inbounds %struct.hypre_TimingType, ptr %54, i64 0, i32 2
  store ptr null, ptr %55, align 8, !tbaa !753
  %56 = getelementptr inbounds %struct.hypre_TimingType, ptr %54, i64 0, i32 3
  %57 = load ptr, ptr %56, align 8, !tbaa !748
  tail call void @hypre_Free(ptr noundef %57) #33
  %58 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %59 = getelementptr inbounds %struct.hypre_TimingType, ptr %58, i64 0, i32 3
  store ptr null, ptr %59, align 8, !tbaa !748
  %60 = getelementptr inbounds %struct.hypre_TimingType, ptr %58, i64 0, i32 4
  %61 = load ptr, ptr %60, align 8, !tbaa !754
  tail call void @hypre_Free(ptr noundef %61) #33
  %62 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %63 = getelementptr inbounds %struct.hypre_TimingType, ptr %62, i64 0, i32 4
  store ptr null, ptr %63, align 8, !tbaa !754
  %64 = getelementptr inbounds %struct.hypre_TimingType, ptr %62, i64 0, i32 5
  %65 = load ptr, ptr %64, align 8, !tbaa !747
  tail call void @hypre_Free(ptr noundef %65) #33
  %66 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %67 = getelementptr inbounds %struct.hypre_TimingType, ptr %66, i64 0, i32 5
  store ptr null, ptr %67, align 8, !tbaa !747
  %68 = add nuw nsw i32 %44, 1
  %69 = getelementptr inbounds %struct.hypre_TimingType, ptr %66, i64 0, i32 7
  %70 = load i32, ptr %69, align 4, !tbaa !745
  %71 = icmp slt i32 %68, %70
  br i1 %71, label %42, label %72, !llvm.loop !757

72:                                               ; preds = %42, %38
  %73 = phi ptr [ %34, %38 ], [ %66, %42 ]
  tail call void @hypre_Free(ptr noundef nonnull %73) #33
  store ptr null, ptr @hypre_global_timing, align 8, !tbaa !14
  br label %74

74:                                               ; preds = %72, %33, %1
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_IncFLOPCount(i32 noundef %0) #32 {
  %2 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %3 = icmp eq ptr %2, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %1
  %5 = sitofp i32 %0 to double
  %6 = getelementptr inbounds %struct.hypre_TimingType, ptr %2, i64 0, i32 10
  %7 = load double, ptr %6, align 8, !tbaa !758
  %8 = fadd double %7, %5
  store double %8, ptr %6, align 8, !tbaa !758
  br label %9

9:                                                ; preds = %4, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_BeginTiming(i32 noundef %0) #0 {
  %2 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %3 = icmp eq ptr %2, null
  br i1 %3, label %60, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.hypre_TimingType, ptr %2, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !754
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %55

11:                                               ; preds = %4
  %12 = tail call double @time_getWallclockSeconds() #33
  %13 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %14 = getelementptr inbounds %struct.hypre_TimingType, ptr %13, i64 0, i32 8
  %15 = load double, ptr %14, align 8, !tbaa !759
  %16 = fadd double %12, %15
  store double %16, ptr %14, align 8, !tbaa !759
  %17 = tail call double @time_getCPUSeconds() #33
  %18 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %19 = getelementptr inbounds %struct.hypre_TimingType, ptr %18, i64 0, i32 9
  %20 = load double, ptr %19, align 8, !tbaa !760
  %21 = fadd double %17, %20
  store double %21, ptr %19, align 8, !tbaa !760
  %22 = getelementptr inbounds %struct.hypre_TimingType, ptr %18, i64 0, i32 8
  %23 = load double, ptr %22, align 8, !tbaa !759
  %24 = load ptr, ptr %18, align 8, !tbaa !751
  %25 = getelementptr inbounds double, ptr %24, i64 %7
  %26 = load double, ptr %25, align 8, !tbaa !29
  %27 = fsub double %26, %23
  store double %27, ptr %25, align 8, !tbaa !29
  %28 = load double, ptr %19, align 8, !tbaa !760
  %29 = getelementptr inbounds %struct.hypre_TimingType, ptr %18, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !752
  %31 = getelementptr inbounds double, ptr %30, i64 %7
  %32 = load double, ptr %31, align 8, !tbaa !29
  %33 = fsub double %32, %28
  store double %33, ptr %31, align 8, !tbaa !29
  %34 = getelementptr inbounds %struct.hypre_TimingType, ptr %18, i64 0, i32 10
  %35 = load double, ptr %34, align 8, !tbaa !758
  %36 = getelementptr inbounds %struct.hypre_TimingType, ptr %18, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !753
  %38 = getelementptr inbounds double, ptr %37, i64 %7
  %39 = load double, ptr %38, align 8, !tbaa !29
  %40 = fsub double %39, %35
  store double %40, ptr %38, align 8, !tbaa !29
  %41 = tail call double @time_getWallclockSeconds() #33
  %42 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %43 = getelementptr inbounds %struct.hypre_TimingType, ptr %42, i64 0, i32 8
  %44 = load double, ptr %43, align 8, !tbaa !759
  %45 = fsub double %44, %41
  store double %45, ptr %43, align 8, !tbaa !759
  %46 = tail call double @time_getCPUSeconds() #33
  %47 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %48 = getelementptr inbounds %struct.hypre_TimingType, ptr %47, i64 0, i32 9
  %49 = load double, ptr %48, align 8, !tbaa !760
  %50 = fsub double %49, %46
  store double %50, ptr %48, align 8, !tbaa !760
  %51 = getelementptr inbounds %struct.hypre_TimingType, ptr %47, i64 0, i32 4
  %52 = load ptr, ptr %51, align 8, !tbaa !754
  %53 = getelementptr inbounds i32, ptr %52, i64 %7
  %54 = load i32, ptr %53, align 4, !tbaa !7
  br label %55

55:                                               ; preds = %11, %4
  %56 = phi i32 [ %54, %11 ], [ %9, %4 ]
  %57 = phi ptr [ %52, %11 ], [ %6, %4 ]
  %58 = getelementptr inbounds i32, ptr %57, i64 %7
  %59 = add nsw i32 %56, 1
  store i32 %59, ptr %58, align 4, !tbaa !7
  br label %60

60:                                               ; preds = %55, %1
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_EndTiming(i32 noundef %0) #0 {
  %2 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %3 = icmp eq ptr %2, null
  br i1 %3, label %52, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.hypre_TimingType, ptr %2, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !754
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !7
  %10 = add nsw i32 %9, -1
  store i32 %10, ptr %8, align 4, !tbaa !7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %52

12:                                               ; preds = %4
  %13 = tail call double @time_getWallclockSeconds() #33
  %14 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %15 = getelementptr inbounds %struct.hypre_TimingType, ptr %14, i64 0, i32 8
  %16 = load double, ptr %15, align 8, !tbaa !759
  %17 = fadd double %13, %16
  store double %17, ptr %15, align 8, !tbaa !759
  %18 = tail call double @time_getCPUSeconds() #33
  %19 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.hypre_TimingType, ptr %19, i64 0, i32 9
  %21 = load double, ptr %20, align 8, !tbaa !760
  %22 = fadd double %18, %21
  store double %22, ptr %20, align 8, !tbaa !760
  %23 = getelementptr inbounds %struct.hypre_TimingType, ptr %19, i64 0, i32 8
  %24 = load double, ptr %23, align 8, !tbaa !759
  %25 = load ptr, ptr %19, align 8, !tbaa !751
  %26 = getelementptr inbounds double, ptr %25, i64 %7
  %27 = load double, ptr %26, align 8, !tbaa !29
  %28 = fadd double %24, %27
  store double %28, ptr %26, align 8, !tbaa !29
  %29 = load double, ptr %20, align 8, !tbaa !760
  %30 = getelementptr inbounds %struct.hypre_TimingType, ptr %19, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !752
  %32 = getelementptr inbounds double, ptr %31, i64 %7
  %33 = load double, ptr %32, align 8, !tbaa !29
  %34 = fadd double %29, %33
  store double %34, ptr %32, align 8, !tbaa !29
  %35 = getelementptr inbounds %struct.hypre_TimingType, ptr %19, i64 0, i32 10
  %36 = load double, ptr %35, align 8, !tbaa !758
  %37 = getelementptr inbounds %struct.hypre_TimingType, ptr %19, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !753
  %39 = getelementptr inbounds double, ptr %38, i64 %7
  %40 = load double, ptr %39, align 8, !tbaa !29
  %41 = fadd double %36, %40
  store double %41, ptr %39, align 8, !tbaa !29
  %42 = tail call double @time_getWallclockSeconds() #33
  %43 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %44 = getelementptr inbounds %struct.hypre_TimingType, ptr %43, i64 0, i32 8
  %45 = load double, ptr %44, align 8, !tbaa !759
  %46 = fsub double %45, %42
  store double %46, ptr %44, align 8, !tbaa !759
  %47 = tail call double @time_getCPUSeconds() #33
  %48 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %49 = getelementptr inbounds %struct.hypre_TimingType, ptr %48, i64 0, i32 9
  %50 = load double, ptr %49, align 8, !tbaa !760
  %51 = fsub double %50, %47
  store double %51, ptr %49, align 8, !tbaa !760
  br label %52

52:                                               ; preds = %12, %4, %1
  ret i32 0
}

; Function Attrs: nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @hypre_ClearTiming() #24 {
  %1 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %2 = icmp eq ptr %1, null
  br i1 %2, label %21, label %3

3:                                                ; preds = %0
  %4 = getelementptr inbounds %struct.hypre_TimingType, ptr %1, i64 0, i32 7
  %5 = load i32, ptr %4, align 4, !tbaa !745
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %3
  %8 = load ptr, ptr %1, align 8, !tbaa !751
  %9 = getelementptr inbounds %struct.hypre_TimingType, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !752
  %11 = getelementptr inbounds %struct.hypre_TimingType, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !753
  %13 = zext i32 %5 to i64
  br label %14

14:                                               ; preds = %14, %7
  %15 = phi i64 [ 0, %7 ], [ %19, %14 ]
  %16 = getelementptr inbounds double, ptr %8, i64 %15
  store double 0.000000e+00, ptr %16, align 8, !tbaa !29
  %17 = getelementptr inbounds double, ptr %10, i64 %15
  store double 0.000000e+00, ptr %17, align 8, !tbaa !29
  %18 = getelementptr inbounds double, ptr %12, i64 %15
  store double 0.000000e+00, ptr %18, align 8, !tbaa !29
  %19 = add nuw nsw i64 %15, 1
  %20 = icmp eq i64 %19, %13
  br i1 %20, label %21, label %14, !llvm.loop !761

21:                                               ; preds = %14, %3, %0
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define internal i32 @hypre_PrintTiming(ptr noundef %0, i32 noundef %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #34
  %8 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %9 = icmp eq ptr %8, null
  br i1 %9, label %62, label %10

10:                                               ; preds = %2
  %11 = call i32 @hypre_MPI_Comm_rank(i32 noundef %1, ptr noundef nonnull %7) #33
  %12 = load i32, ptr %7, align 4, !tbaa !7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = call i32 @puts(ptr nonnull dereferenceable(1) @str.4)
  %16 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.250, ptr noundef %0) #35
  %17 = call i32 @puts(ptr nonnull dereferenceable(1) @str.4)
  br label %18

18:                                               ; preds = %14, %10
  %19 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  %20 = getelementptr inbounds %struct.hypre_TimingType, ptr %19, i64 0, i32 7
  %21 = load i32, ptr %20, align 4, !tbaa !745
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %62

23:                                               ; preds = %55, %18
  %24 = phi ptr [ %56, %55 ], [ %19, %18 ]
  %25 = phi i64 [ %57, %55 ], [ 0, %18 ]
  %26 = getelementptr inbounds %struct.hypre_TimingType, ptr %24, i64 0, i32 5
  %27 = load ptr, ptr %26, align 8, !tbaa !747
  %28 = getelementptr inbounds i32, ptr %27, i64 %25
  %29 = load i32, ptr %28, align 4, !tbaa !7
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %55

31:                                               ; preds = %23
  %32 = load ptr, ptr %24, align 8, !tbaa !751
  %33 = getelementptr inbounds double, ptr %32, i64 %25
  %34 = load double, ptr %33, align 8, !tbaa !29
  store double %34, ptr %3, align 8, !tbaa !29
  %35 = getelementptr inbounds %struct.hypre_TimingType, ptr %24, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !752
  %37 = getelementptr inbounds double, ptr %36, i64 %25
  %38 = load double, ptr %37, align 8, !tbaa !29
  store double %38, ptr %4, align 8, !tbaa !29
  %39 = call i32 @hypre_MPI_Allreduce(ptr noundef nonnull %3, ptr noundef nonnull %5, i32 noundef 1, i32 noundef 0, i32 noundef 2, i32 noundef %1) #33
  %40 = call i32 @hypre_MPI_Allreduce(ptr noundef nonnull %4, ptr noundef nonnull %6, i32 noundef 1, i32 noundef 0, i32 noundef 2, i32 noundef %1) #33
  %41 = load i32, ptr %7, align 4, !tbaa !7
  %42 = icmp eq i32 %41, 0
  %43 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  br i1 %42, label %44, label %55

44:                                               ; preds = %31
  %45 = getelementptr inbounds %struct.hypre_TimingType, ptr %43, i64 0, i32 3
  %46 = load ptr, ptr %45, align 8, !tbaa !748
  %47 = getelementptr inbounds ptr, ptr %46, i64 %25
  %48 = load ptr, ptr %47, align 8, !tbaa !14
  %49 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1.250, ptr noundef %48) #35
  %50 = load double, ptr %5, align 8, !tbaa !29
  %51 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.251, double noundef %50) #35
  %52 = load double, ptr %6, align 8, !tbaa !29
  %53 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.252, double noundef %52) #35
  %54 = load ptr, ptr @hypre_global_timing, align 8, !tbaa !14
  br label %55

55:                                               ; preds = %44, %31, %23
  %56 = phi ptr [ %54, %44 ], [ %24, %23 ], [ %43, %31 ]
  %57 = add nuw nsw i64 %25, 1
  %58 = getelementptr inbounds %struct.hypre_TimingType, ptr %56, i64 0, i32 7
  %59 = load i32, ptr %58, align 4, !tbaa !745
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %57, %60
  br i1 %61, label %23, label %62, !llvm.loop !762

62:                                               ; preds = %55, %18, %2
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #34
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #34
  ret i32 0
}

attributes #0 = { nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nofree norecurse nosync nounwind optsize memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree norecurse nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(argmem: read) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind optsize memory(argmem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { nofree norecurse nosync nounwind optsize memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #13 = { nofree norecurse nosync nounwind optsize memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nofree nounwind optsize uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nofree nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { mustprogress nofree nounwind optsize willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { mustprogress nounwind optsize willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nounwind optsize willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { mustprogress nounwind optsize willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { mustprogress nofree nounwind optsize willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(write, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nofree norecurse nosync nounwind optsize memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { mustprogress nofree nosync nounwind optsize willreturn memory(argmem: write) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #26 = { mustprogress nofree nounwind optsize willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #27 = { mustprogress nofree nounwind optsize willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #28 = { nofree nounwind }
attributes #29 = { noreturn nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #30 = { nofree norecurse nosync nounwind optsize memory(read, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #31 = { mustprogress nofree nounwind optsize willreturn memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #32 = { mustprogress nofree norecurse nosync nounwind optsize willreturn memory(readwrite, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #33 = { nounwind optsize }
attributes #34 = { nounwind }
attributes #35 = { optsize }
attributes #36 = { nounwind optsize allocsize(0) }
attributes #37 = { nounwind optsize allocsize(0,1) }
attributes #38 = { nounwind optsize allocsize(1) }
attributes #39 = { nounwind optsize willreturn memory(read) }
attributes #40 = { noreturn nounwind optsize }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}

!0 = !{!"clang version 17.0.6 (https://github.com/Casperento/llvm-project.git 9b0073551ece0d22bf3378af2b03e456a26031b6)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!12, !8, i64 4}
!12 = !{!"hypre_StructGrid_struct", !8, i64 0, !8, i64 4, !13, i64 8, !13, i64 16, !13, i64 24, !8, i64 32, !13, i64 40, !8, i64 48, !8, i64 52, !9, i64 56, !8, i64 68}
!13 = !{!"any pointer", !9, i64 0}
!14 = !{!13, !13, i64 0}
!15 = !{!16, !13, i64 8}
!16 = !{!"hypre_StructMatrix_struct", !8, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !8, i64 32, !13, i64 40, !13, i64 48, !8, i64 56, !8, i64 60, !13, i64 64, !8, i64 72, !13, i64 80, !9, i64 88, !8, i64 112, !13, i64 120, !8, i64 128}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.mustprogress"}
!19 = !{!16, !8, i64 72}
!20 = !{!12, !13, i64 8}
!21 = !{!22, !8, i64 8}
!22 = !{!"hypre_BoxArray_struct", !13, i64 0, !8, i64 8, !8, i64 12}
!23 = !{!22, !13, i64 0}
!24 = !{!16, !13, i64 40}
!25 = !{!26, !13, i64 16}
!26 = !{!"hypre_StructVector_struct", !8, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !8, i64 32, !8, i64 36, !13, i64 40, !9, i64 48, !8, i64 72, !8, i64 76}
!27 = !{!26, !13, i64 24}
!28 = !{!26, !13, i64 40}
!29 = !{!30, !30, i64 0}
!30 = !{!"double", !9, i64 0}
!31 = distinct !{!31, !18}
!32 = distinct !{!32, !18}
!33 = distinct !{!33, !18}
!34 = distinct !{!34, !18}
!35 = !{!36, !13, i64 0}
!36 = !{!"hypre_StructStencil_struct", !13, i64 0, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20}
!37 = !{!36, !8, i64 16}
!38 = distinct !{!38, !18}
!39 = !{!26, !13, i64 8}
!40 = distinct !{!40, !18}
!41 = !{!22, !8, i64 12}
!42 = !{!43, !13, i64 0}
!43 = !{!"hypre_BoxArrayArray_struct", !13, i64 0, !8, i64 8}
!44 = distinct !{!44, !18}
!45 = !{!43, !8, i64 8}
!46 = distinct !{!46, !18}
!47 = distinct !{!47, !18}
!48 = distinct !{!48, !18}
!49 = distinct !{!49, !18}
!50 = distinct !{!50, !18}
!51 = distinct !{!51, !18}
!52 = distinct !{!52, !18}
!53 = distinct !{!53, !18}
!54 = distinct !{!54, !18}
!55 = distinct !{!55, !18}
!56 = distinct !{!56, !18}
!57 = distinct !{!57, !18}
!58 = distinct !{!58, !18}
!59 = distinct !{!59, !18}
!60 = distinct !{!60, !18}
!61 = distinct !{!61, !18}
!62 = distinct !{!62, !18}
!63 = distinct !{!63, !18}
!64 = distinct !{!64, !18}
!65 = distinct !{!65, !18}
!66 = distinct !{!66, !18}
!67 = distinct !{!67, !18}
!68 = distinct !{!68, !18}
!69 = distinct !{!69, !18}
!70 = distinct !{!70, !18}
!71 = distinct !{!71, !18}
!72 = !{!73, !13, i64 40}
!73 = !{!"hypre_BoxNeighbors_struct", !13, i64 0, !13, i64 8, !13, i64 16, !8, i64 24, !8, i64 28, !8, i64 32, !13, i64 40}
!74 = !{!73, !13, i64 0}
!75 = !{!73, !13, i64 8}
!76 = !{!73, !13, i64 16}
!77 = !{!73, !8, i64 24}
!78 = !{!73, !8, i64 28}
!79 = !{!73, !8, i64 32}
!80 = distinct !{!80, !18}
!81 = !{!82, !8, i64 0}
!82 = !{!"hypre_RankLink_struct", !8, i64 0, !13, i64 8}
!83 = !{!82, !13, i64 8}
!84 = distinct !{!84, !18}
!85 = distinct !{!85, !18}
!86 = distinct !{!86, !18}
!87 = distinct !{!87, !18}
!88 = distinct !{!88, !18}
!89 = distinct !{!89, !18}
!90 = distinct !{!90, !18}
!91 = distinct !{!91, !18}
!92 = !{!12, !8, i64 0}
!93 = !{!12, !13, i64 24}
!94 = distinct !{!94, !18}
!95 = distinct !{!95, !18}
!96 = !{!12, !8, i64 32}
!97 = !{!12, !13, i64 40}
!98 = distinct !{!98, !18}
!99 = distinct !{!99, !18}
!100 = distinct !{!100, !18}
!101 = distinct !{!101, !18}
!102 = distinct !{!102, !18}
!103 = distinct !{!103, !18}
!104 = distinct !{!104, !18}
!105 = distinct !{!105, !18}
!106 = distinct !{!106, !18}
!107 = distinct !{!107, !18}
!108 = distinct !{!108, !18}
!109 = distinct !{!109, !18}
!110 = distinct !{!110, !18}
!111 = distinct !{!111, !18}
!112 = !{!113, !8, i64 0}
!113 = !{!"hypre_CommPkg_struct", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !13, i64 16, !13, i64 24, !13, i64 32, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !13, i64 72}
!114 = !{!113, !8, i64 4}
!115 = !{!113, !8, i64 8}
!116 = !{!113, !13, i64 16}
!117 = !{!113, !13, i64 32}
!118 = !{!113, !13, i64 64}
!119 = !{!113, !8, i64 12}
!120 = !{!113, !13, i64 24}
!121 = !{!113, !13, i64 40}
!122 = !{!113, !13, i64 72}
!123 = distinct !{!123, !18}
!124 = distinct !{!124, !18}
!125 = distinct !{!125, !18}
!126 = distinct !{!126, !18}
!127 = distinct !{!127, !18}
!128 = distinct !{!128, !18}
!129 = distinct !{!129, !18}
!130 = distinct !{!130, !18}
!131 = !{!132, !13, i64 0}
!132 = !{!"hypre_CommType_struct", !13, i64 0, !8, i64 8}
!133 = !{!132, !8, i64 8}
!134 = distinct !{!134, !18}
!135 = !{!113, !13, i64 48}
!136 = !{!113, !13, i64 56}
!137 = distinct !{!137, !18}
!138 = !{!139, !8, i64 24}
!139 = !{!"hypre_CommTypeEntry_struct", !9, i64 0, !9, i64 12, !8, i64 24, !8, i64 28, !9, i64 32, !9, i64 48}
!140 = distinct !{!140, !18}
!141 = distinct !{!141, !18}
!142 = distinct !{!142, !18}
!143 = !{!139, !8, i64 28}
!144 = distinct !{!144, !18}
!145 = distinct !{!145, !18}
!146 = distinct !{!146, !18}
!147 = distinct !{!147, !18}
!148 = distinct !{!148, !18}
!149 = distinct !{!149, !18}
!150 = distinct !{!150, !18}
!151 = distinct !{!151, !18}
!152 = distinct !{!152, !18}
!153 = distinct !{!153, !18}
!154 = distinct !{!154, !18}
!155 = distinct !{!155, !18}
!156 = distinct !{!156, !18}
!157 = distinct !{!157, !18}
!158 = distinct !{!158, !18}
!159 = distinct !{!159, !18}
!160 = !{!161, !13, i64 0}
!161 = !{!"hypre_CommHandle_struct", !13, i64 0, !13, i64 8, !13, i64 16, !8, i64 24, !13, i64 32, !13, i64 40}
!162 = !{!161, !13, i64 8}
!163 = !{!161, !13, i64 16}
!164 = !{!161, !8, i64 24}
!165 = !{!161, !13, i64 32}
!166 = !{!161, !13, i64 40}
!167 = distinct !{!167, !18}
!168 = distinct !{!168, !18}
!169 = distinct !{!169, !18}
!170 = distinct !{!170, !18}
!171 = distinct !{!171, !18}
!172 = !{!36, !8, i64 8}
!173 = distinct !{!173, !18}
!174 = distinct !{!174, !18}
!175 = distinct !{!175, !18}
!176 = distinct !{!176, !18}
!177 = distinct !{!177, !18}
!178 = distinct !{!178, !18}
!179 = distinct !{!179, !18}
!180 = distinct !{!180, !18}
!181 = distinct !{!181, !18}
!182 = distinct !{!182, !18}
!183 = distinct !{!183, !18}
!184 = distinct !{!184, !18}
!185 = distinct !{!185, !18}
!186 = distinct !{!186, !18}
!187 = distinct !{!187, !18}
!188 = distinct !{!188, !18}
!189 = distinct !{!189, !18}
!190 = distinct !{!190, !18}
!191 = distinct !{!191, !18}
!192 = distinct !{!192, !18}
!193 = distinct !{!193, !18}
!194 = distinct !{!194, !18}
!195 = !{!12, !13, i64 16}
!196 = distinct !{!196, !18}
!197 = distinct !{!197, !18}
!198 = distinct !{!198, !18}
!199 = distinct !{!199, !18}
!200 = distinct !{!200, !18}
!201 = distinct !{!201, !18}
!202 = distinct !{!202, !18}
!203 = distinct !{!203, !18}
!204 = distinct !{!204, !18}
!205 = distinct !{!205, !18}
!206 = distinct !{!206, !18}
!207 = distinct !{!207, !18}
!208 = !{!209, !13, i64 0}
!209 = !{!"hypre_ComputePkg_struct", !13, i64 0, !13, i64 8, !13, i64 16, !9, i64 24, !13, i64 40, !13, i64 48, !8, i64 56}
!210 = !{!209, !13, i64 8}
!211 = !{!209, !13, i64 16}
!212 = !{!209, !13, i64 48}
!213 = !{!209, !8, i64 56}
!214 = !{!209, !13, i64 40}
!215 = !{!216, !8, i64 0}
!216 = !{!"", !8, i64 0, !8, i64 4, !8, i64 8, !9, i64 12, !9, i64 24, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !13, i64 72, !13, i64 80, !13, i64 88, !13, i64 96, !8, i64 104, !8, i64 108}
!217 = !{!216, !8, i64 8}
!218 = !{!216, !8, i64 104}
!219 = distinct !{!219, !18}
!220 = distinct !{!220, !18}
!221 = !{!16, !8, i64 0}
!222 = distinct !{!222, !18}
!223 = distinct !{!223, !18}
!224 = distinct !{!224, !18}
!225 = distinct !{!225, !18}
!226 = distinct !{!226, !18}
!227 = distinct !{!227, !18}
!228 = distinct !{!228, !18}
!229 = distinct !{!229, !18}
!230 = distinct !{!230, !18}
!231 = distinct !{!231, !18}
!232 = distinct !{!232, !18}
!233 = distinct !{!233, !18}
!234 = distinct !{!234, !18}
!235 = distinct !{!235, !18}
!236 = distinct !{!236, !18}
!237 = !{!216, !8, i64 4}
!238 = !{!216, !13, i64 40}
!239 = !{!216, !13, i64 48}
!240 = distinct !{!240, !18}
!241 = !{!216, !13, i64 56}
!242 = !{!216, !13, i64 64}
!243 = !{!16, !8, i64 60}
!244 = !{!26, !8, i64 36}
!245 = distinct !{!245, !18}
!246 = distinct !{!246, !18}
!247 = !{!216, !13, i64 72}
!248 = !{!216, !13, i64 80}
!249 = distinct !{!249, !18}
!250 = !{!16, !13, i64 24}
!251 = distinct !{!251, !18}
!252 = !{!216, !13, i64 88}
!253 = !{!216, !13, i64 96}
!254 = !{!26, !8, i64 72}
!255 = !{!216, !8, i64 108}
!256 = distinct !{!256, !18}
!257 = distinct !{!257, !18}
!258 = distinct !{!258, !18}
!259 = distinct !{!259, !18}
!260 = distinct !{!260, !18}
!261 = distinct !{!261, !18}
!262 = distinct !{!262, !18}
!263 = distinct !{!263, !18}
!264 = distinct !{!264, !18}
!265 = distinct !{!265, !18}
!266 = distinct !{!266, !18}
!267 = distinct !{!267, !18}
!268 = distinct !{!268, !18}
!269 = distinct !{!269, !18}
!270 = distinct !{!270, !18}
!271 = distinct !{!271, !18}
!272 = distinct !{!272, !18}
!273 = distinct !{!273, !18}
!274 = distinct !{!274, !18}
!275 = distinct !{!275, !18}
!276 = distinct !{!276, !18}
!277 = distinct !{!277, !18}
!278 = distinct !{!278, !18}
!279 = distinct !{!279, !18}
!280 = distinct !{!280, !18}
!281 = distinct !{!281, !18}
!282 = distinct !{!282, !18}
!283 = distinct !{!283, !18}
!284 = distinct !{!284, !18}
!285 = distinct !{!285, !18}
!286 = distinct !{!286, !18}
!287 = distinct !{!287, !18}
!288 = distinct !{!288, !18}
!289 = !{!9, !9, i64 0}
!290 = distinct !{!290, !18}
!291 = !{!292, !13, i64 0}
!292 = !{!"", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !13, i64 32, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !13, i64 72, !13, i64 80, !13, i64 88, !13, i64 96, !13, i64 104}
!293 = !{!292, !13, i64 8}
!294 = !{!292, !13, i64 16}
!295 = !{!292, !13, i64 24}
!296 = !{!292, !13, i64 32}
!297 = !{!292, !13, i64 40}
!298 = !{!292, !13, i64 48}
!299 = !{!292, !13, i64 56}
!300 = !{!292, !13, i64 64}
!301 = !{!292, !13, i64 72}
!302 = !{!292, !13, i64 80}
!303 = !{!292, !13, i64 88}
!304 = !{!292, !13, i64 104}
!305 = !{!292, !13, i64 96}
!306 = !{!307, !13, i64 80}
!307 = !{!"", !30, i64 0, !30, i64 8, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !13, i64 32, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !13, i64 72, !13, i64 80, !8, i64 88, !8, i64 92, !13, i64 96, !13, i64 104}
!308 = !{!307, !8, i64 92}
!309 = !{!307, !13, i64 96}
!310 = !{!307, !13, i64 104}
!311 = !{!307, !13, i64 64}
!312 = !{!307, !13, i64 40}
!313 = !{!307, !13, i64 48}
!314 = !{!307, !13, i64 56}
!315 = !{!307, !8, i64 16}
!316 = !{!307, !13, i64 72}
!317 = !{!307, !13, i64 32}
!318 = !{!307, !30, i64 0}
!319 = !{!307, !30, i64 8}
!320 = !{!307, !8, i64 20}
!321 = !{!307, !8, i64 24}
!322 = !{!307, !8, i64 28}
!323 = distinct !{!323, !18}
!324 = !{!307, !8, i64 88}
!325 = !{!26, !8, i64 0}
!326 = distinct !{!326, !18}
!327 = distinct !{!327, !18}
!328 = distinct !{!328, !18}
!329 = distinct !{!329, !18}
!330 = !{!331, !8, i64 60}
!331 = !{!"", !13, i64 0, !8, i64 8, !13, i64 16, !9, i64 24, !9, i64 36, !9, i64 48, !8, i64 60}
!332 = !{!331, !13, i64 0}
!333 = !{!331, !8, i64 8}
!334 = !{!331, !13, i64 16}
!335 = distinct !{!335, !18}
!336 = distinct !{!336, !18}
!337 = distinct !{!337, !18}
!338 = distinct !{!338, !18}
!339 = distinct !{!339, !18}
!340 = !{!16, !13, i64 48}
!341 = !{!16, !13, i64 64}
!342 = distinct !{!342, !18}
!343 = distinct !{!343, !18}
!344 = distinct !{!344, !18}
!345 = distinct !{!345, !18}
!346 = distinct !{!346, !18}
!347 = distinct !{!347, !18}
!348 = !{!349, !8, i64 48}
!349 = !{!"", !13, i64 0, !8, i64 8, !13, i64 16, !9, i64 24, !9, i64 36, !8, i64 48}
!350 = !{!349, !13, i64 0}
!351 = !{!349, !8, i64 8}
!352 = !{!349, !13, i64 16}
!353 = distinct !{!353, !18}
!354 = distinct !{!354, !18}
!355 = distinct !{!355, !18}
!356 = distinct !{!356, !18}
!357 = distinct !{!357, !18}
!358 = distinct !{!358, !18}
!359 = distinct !{!359, !18}
!360 = !{!361, !8, i64 0}
!361 = !{!"", !8, i64 0, !8, i64 4, !30, i64 8, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !8, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !9, i64 48, !9, i64 60, !13, i64 72, !13, i64 80, !13, i64 88, !13, i64 96, !13, i64 104, !13, i64 112, !13, i64 120, !13, i64 128, !13, i64 136, !13, i64 144, !13, i64 152, !13, i64 160, !13, i64 168, !13, i64 176, !13, i64 184, !13, i64 192, !8, i64 200, !8, i64 204, !8, i64 208, !13, i64 216, !13, i64 224}
!362 = !{!361, !8, i64 204}
!363 = !{!361, !8, i64 4}
!364 = !{!361, !30, i64 8}
!365 = !{!361, !8, i64 208}
!366 = !{!361, !13, i64 216}
!367 = !{!361, !13, i64 224}
!368 = !{!361, !8, i64 32}
!369 = !{!361, !13, i64 168}
!370 = !{!361, !13, i64 176}
!371 = !{!361, !13, i64 184}
!372 = !{!361, !13, i64 192}
!373 = distinct !{!373, !18}
!374 = !{!361, !13, i64 136}
!375 = !{!361, !13, i64 144}
!376 = !{!361, !13, i64 72}
!377 = !{!361, !13, i64 96}
!378 = !{!361, !13, i64 120}
!379 = !{!361, !13, i64 128}
!380 = !{!361, !13, i64 80}
!381 = !{!361, !13, i64 104}
!382 = !{!361, !13, i64 112}
!383 = distinct !{!383, !18}
!384 = !{!361, !13, i64 88}
!385 = !{!361, !8, i64 16}
!386 = !{!361, !8, i64 20}
!387 = !{!361, !8, i64 24}
!388 = !{!361, !8, i64 36}
!389 = !{!361, !8, i64 40}
!390 = distinct !{!390, !18}
!391 = !{!361, !8, i64 200}
!392 = distinct !{!392, !18}
!393 = distinct !{!393, !18}
!394 = distinct !{!394, !18}
!395 = distinct !{!395, !18}
!396 = distinct !{!396, !18}
!397 = distinct !{!397, !18}
!398 = distinct !{!398, !18}
!399 = distinct !{!399, !18}
!400 = distinct !{!400, !18}
!401 = distinct !{!401, !18}
!402 = distinct !{!402, !18}
!403 = distinct !{!403, !18}
!404 = distinct !{!404, !18}
!405 = distinct !{!405, !18}
!406 = distinct !{!406, !18}
!407 = distinct !{!407, !18}
!408 = distinct !{!408, !18}
!409 = distinct !{!409, !18}
!410 = distinct !{!410, !18}
!411 = distinct !{!411, !18}
!412 = distinct !{!412, !18, !413, !414}
!413 = !{!"llvm.loop.isvectorized", i32 1}
!414 = !{!"llvm.loop.unroll.runtime.disable"}
!415 = distinct !{!415, !18}
!416 = distinct !{!416, !18}
!417 = distinct !{!417, !18}
!418 = distinct !{!418, !18}
!419 = distinct !{!419, !18}
!420 = distinct !{!420, !18}
!421 = distinct !{!421, !18}
!422 = distinct !{!422, !18}
!423 = distinct !{!423, !18}
!424 = distinct !{!424, !18}
!425 = distinct !{!425, !18}
!426 = distinct !{!426, !18}
!427 = distinct !{!427, !18}
!428 = distinct !{!428, !18}
!429 = distinct !{!429, !18}
!430 = distinct !{!430, !18}
!431 = distinct !{!431, !18}
!432 = distinct !{!432, !18}
!433 = distinct !{!433, !18}
!434 = distinct !{!434, !18}
!435 = distinct !{!435, !18}
!436 = distinct !{!436, !18}
!437 = distinct !{!437, !18}
!438 = distinct !{!438, !18}
!439 = distinct !{!439, !18}
!440 = distinct !{!440, !18}
!441 = distinct !{!441, !18}
!442 = distinct !{!442, !18}
!443 = distinct !{!443, !18}
!444 = distinct !{!444, !18}
!445 = distinct !{!445, !18}
!446 = distinct !{!446, !18}
!447 = distinct !{!447, !18}
!448 = distinct !{!448, !18}
!449 = distinct !{!449, !18}
!450 = distinct !{!450, !18}
!451 = distinct !{!451, !18}
!452 = distinct !{!452, !18}
!453 = distinct !{!453, !18}
!454 = distinct !{!454, !18}
!455 = distinct !{!455, !18}
!456 = distinct !{!456, !18}
!457 = distinct !{!457, !18}
!458 = distinct !{!458, !18}
!459 = distinct !{!459, !18}
!460 = distinct !{!460, !18}
!461 = distinct !{!461, !18}
!462 = distinct !{!462, !18}
!463 = distinct !{!463, !18}
!464 = distinct !{!464, !18}
!465 = distinct !{!465, !18}
!466 = distinct !{!466, !18}
!467 = distinct !{!467, !18}
!468 = distinct !{!468, !18}
!469 = distinct !{!469, !18}
!470 = distinct !{!470, !18}
!471 = distinct !{!471, !18}
!472 = distinct !{!472, !18}
!473 = distinct !{!473, !18}
!474 = distinct !{!474, !18}
!475 = distinct !{!475, !18}
!476 = distinct !{!476, !18}
!477 = distinct !{!477, !18}
!478 = distinct !{!478, !18}
!479 = distinct !{!479, !18}
!480 = distinct !{!480, !18}
!481 = distinct !{!481, !18}
!482 = distinct !{!482, !18}
!483 = distinct !{!483, !18}
!484 = distinct !{!484, !18}
!485 = distinct !{!485, !18}
!486 = distinct !{!486, !18}
!487 = distinct !{!487, !18}
!488 = distinct !{!488, !18}
!489 = distinct !{!489, !18}
!490 = distinct !{!490, !18}
!491 = distinct !{!491, !18}
!492 = distinct !{!492, !18}
!493 = distinct !{!493, !18}
!494 = distinct !{!494, !18}
!495 = distinct !{!495, !18}
!496 = distinct !{!496, !18}
!497 = distinct !{!497, !18}
!498 = distinct !{!498, !18}
!499 = distinct !{!499, !18}
!500 = distinct !{!500, !18}
!501 = distinct !{!501, !18}
!502 = distinct !{!502, !18}
!503 = distinct !{!503, !18}
!504 = distinct !{!504, !18}
!505 = distinct !{!505, !18}
!506 = distinct !{!506, !18}
!507 = distinct !{!507, !18}
!508 = distinct !{!508, !18}
!509 = distinct !{!509, !18}
!510 = distinct !{!510, !18}
!511 = distinct !{!511, !18}
!512 = distinct !{!512, !18}
!513 = distinct !{!513, !18}
!514 = !{!515, !8, i64 0}
!515 = !{!"", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !30, i64 24, !8, i64 32, !8, i64 36, !8, i64 40, !13, i64 48, !13, i64 56, !8, i64 64, !8, i64 68, !13, i64 72, !13, i64 80, !9, i64 88, !9, i64 100, !13, i64 112, !8, i64 120, !13, i64 128, !13, i64 136, !13, i64 144, !13, i64 152, !13, i64 160, !13, i64 168, !13, i64 176, !13, i64 184, !8, i64 192, !8, i64 196, !8, i64 200, !8, i64 204}
!516 = !{!515, !8, i64 4}
!517 = !{!515, !8, i64 8}
!518 = !{!515, !8, i64 12}
!519 = !{!515, !13, i64 112}
!520 = !{!515, !8, i64 196}
!521 = !{!515, !8, i64 16}
!522 = !{!515, !30, i64 24}
!523 = !{!515, !8, i64 32}
!524 = !{!515, !8, i64 36}
!525 = !{!515, !8, i64 40}
!526 = !{!515, !13, i64 48}
!527 = !{!515, !13, i64 56}
!528 = !{!515, !8, i64 64}
!529 = !{!515, !8, i64 68}
!530 = !{!515, !13, i64 72}
!531 = !{!515, !13, i64 80}
!532 = !{!515, !8, i64 200}
!533 = !{!515, !8, i64 204}
!534 = !{!515, !13, i64 168}
!535 = !{!515, !13, i64 176}
!536 = distinct !{!536, !18}
!537 = !{!515, !13, i64 160}
!538 = !{!515, !8, i64 120}
!539 = !{!515, !13, i64 184}
!540 = distinct !{!540, !18}
!541 = !{!515, !13, i64 128}
!542 = !{!515, !13, i64 136}
!543 = !{!515, !13, i64 144}
!544 = !{!515, !13, i64 152}
!545 = distinct !{!545, !18}
!546 = !{!515, !8, i64 192}
!547 = distinct !{!547, !18}
!548 = distinct !{!548, !18}
!549 = distinct !{!549, !18}
!550 = distinct !{!550, !18}
!551 = distinct !{!551, !18}
!552 = distinct !{!552, !18}
!553 = distinct !{!553, !18}
!554 = distinct !{!554, !18}
!555 = distinct !{!555, !18}
!556 = !{!557, !8, i64 72}
!557 = !{!"", !9, i64 0, !9, i64 12, !13, i64 24, !13, i64 32, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !8, i64 72, !8, i64 76}
!558 = !{!557, !13, i64 24}
!559 = !{!557, !13, i64 32}
!560 = !{!557, !13, i64 40}
!561 = !{!557, !13, i64 48}
!562 = !{!557, !13, i64 56}
!563 = !{!557, !13, i64 64}
!564 = !{!16, !8, i64 112}
!565 = !{!557, !8, i64 76}
!566 = distinct !{!566, !18}
!567 = distinct !{!567, !18}
!568 = distinct !{!568, !18}
!569 = distinct !{!569, !18}
!570 = distinct !{!570, !18}
!571 = distinct !{!571, !18}
!572 = distinct !{!572, !18}
!573 = distinct !{!573, !18}
!574 = distinct !{!574, !18}
!575 = distinct !{!575, !18}
!576 = distinct !{!576, !18}
!577 = distinct !{!577, !18}
!578 = !{!361, !8, i64 44}
!579 = !{!361, !8, i64 28}
!580 = distinct !{!580, !18}
!581 = distinct !{!581, !18}
!582 = distinct !{!582, !18}
!583 = !{!361, !13, i64 152}
!584 = !{!361, !13, i64 160}
!585 = !{!26, !8, i64 32}
!586 = distinct !{!586, !18}
!587 = distinct !{!587, !18}
!588 = distinct !{!588, !18}
!589 = distinct !{!589, !18}
!590 = distinct !{!590, !18}
!591 = distinct !{!591, !18}
!592 = distinct !{!592, !18}
!593 = distinct !{!593, !18}
!594 = distinct !{!594, !18}
!595 = distinct !{!595, !18}
!596 = distinct !{!596, !18}
!597 = distinct !{!597, !18}
!598 = distinct !{!598, !18}
!599 = distinct !{!599, !18}
!600 = distinct !{!600, !18}
!601 = distinct !{!601, !18}
!602 = distinct !{!602, !18}
!603 = distinct !{!603, !18}
!604 = distinct !{!604, !18}
!605 = distinct !{!605, !18}
!606 = distinct !{!606, !18}
!607 = !{!12, !8, i64 68}
!608 = distinct !{!608, !18}
!609 = distinct !{!609, !18}
!610 = distinct !{!610, !18}
!611 = distinct !{!611, !18}
!612 = distinct !{!612, !18}
!613 = !{!12, !8, i64 52}
!614 = distinct !{!614, !18}
!615 = distinct !{!615, !18}
!616 = distinct !{!616, !18}
!617 = !{!12, !8, i64 48}
!618 = distinct !{!618, !18}
!619 = distinct !{!619, !18}
!620 = distinct !{!620, !18}
!621 = distinct !{!621, !18}
!622 = distinct !{!622, !18}
!623 = distinct !{!623, !18}
!624 = distinct !{!624, !18}
!625 = distinct !{!625, !18}
!626 = distinct !{!626, !18}
!627 = distinct !{!627, !18}
!628 = distinct !{!628, !18}
!629 = distinct !{!629, !18}
!630 = distinct !{!630, !18}
!631 = distinct !{!631, !18}
!632 = distinct !{!632, !18}
!633 = !{!16, !13, i64 16}
!634 = !{!16, !8, i64 56}
!635 = !{!16, !8, i64 128}
!636 = !{!16, !13, i64 120}
!637 = distinct !{!637, !18}
!638 = !{!16, !13, i64 80}
!639 = !{!16, !8, i64 32}
!640 = distinct !{!640, !18}
!641 = distinct !{!641, !18}
!642 = distinct !{!642, !18}
!643 = distinct !{!643, !18}
!644 = distinct !{!644, !18}
!645 = distinct !{!645, !18}
!646 = distinct !{!646, !18}
!647 = distinct !{!647, !18}
!648 = distinct !{!648, !18}
!649 = distinct !{!649, !18}
!650 = distinct !{!650, !18}
!651 = distinct !{!651, !18}
!652 = distinct !{!652, !18}
!653 = distinct !{!653, !18}
!654 = distinct !{!654, !18}
!655 = distinct !{!655, !18}
!656 = distinct !{!656, !18}
!657 = distinct !{!657, !18}
!658 = distinct !{!658, !18}
!659 = distinct !{!659, !18}
!660 = distinct !{!660, !18}
!661 = distinct !{!661, !18}
!662 = distinct !{!662, !18}
!663 = distinct !{!663, !18}
!664 = distinct !{!664, !18}
!665 = distinct !{!665, !18}
!666 = distinct !{!666, !18}
!667 = !{!668, !13, i64 0}
!668 = !{!"", !13, i64 0, !13, i64 8, !13, i64 16}
!669 = !{!668, !13, i64 8}
!670 = !{!668, !13, i64 16}
!671 = distinct !{!671, !18}
!672 = distinct !{!672, !18}
!673 = distinct !{!673, !18}
!674 = distinct !{!674, !18}
!675 = distinct !{!675, !18}
!676 = distinct !{!676, !18}
!677 = distinct !{!677, !18}
!678 = distinct !{!678, !18}
!679 = distinct !{!679, !18}
!680 = distinct !{!680, !18}
!681 = distinct !{!681, !18}
!682 = distinct !{!682, !18}
!683 = distinct !{!683, !18}
!684 = distinct !{!684, !18}
!685 = distinct !{!685, !18}
!686 = distinct !{!686, !18}
!687 = distinct !{!687, !18}
!688 = distinct !{!688, !18}
!689 = distinct !{!689, !18}
!690 = distinct !{!690, !18}
!691 = distinct !{!691, !18}
!692 = distinct !{!692, !18}
!693 = distinct !{!693, !18}
!694 = distinct !{!694, !18}
!695 = distinct !{!695, !18}
!696 = distinct !{!696, !18}
!697 = distinct !{!697, !18}
!698 = distinct !{!698, !18}
!699 = distinct !{!699, !18}
!700 = distinct !{!700, !18}
!701 = distinct !{!701, !18}
!702 = distinct !{!702, !18}
!703 = distinct !{!703, !18}
!704 = distinct !{!704, !18}
!705 = distinct !{!705, !18}
!706 = distinct !{!706, !18}
!707 = distinct !{!707, !18}
!708 = distinct !{!708, !18}
!709 = distinct !{!709, !18}
!710 = distinct !{!710, !18}
!711 = distinct !{!711, !18}
!712 = distinct !{!712, !18}
!713 = distinct !{!713, !18}
!714 = !{!36, !8, i64 20}
!715 = distinct !{!715, !18}
!716 = distinct !{!716, !18}
!717 = !{!36, !8, i64 12}
!718 = distinct !{!718, !18}
!719 = distinct !{!719, !18}
!720 = distinct !{!720, !18}
!721 = distinct !{!721, !18}
!722 = distinct !{!722, !18}
!723 = !{!26, !8, i64 76}
!724 = distinct !{!724, !18, !413, !414}
!725 = distinct !{!725, !18}
!726 = distinct !{!726, !18}
!727 = distinct !{!727, !18}
!728 = distinct !{!728, !18}
!729 = distinct !{!729, !18}
!730 = distinct !{!730, !18}
!731 = distinct !{!731, !18}
!732 = distinct !{!732, !18}
!733 = distinct !{!733, !18}
!734 = distinct !{!734, !18}
!735 = distinct !{!735, !18}
!736 = distinct !{!736, !18}
!737 = distinct !{!737, !18}
!738 = distinct !{!738, !18}
!739 = distinct !{!739, !18}
!740 = distinct !{!740, !18}
!741 = distinct !{!741, !18}
!742 = distinct !{!742, !18}
!743 = distinct !{!743, !18}
!744 = distinct !{!744, !18}
!745 = !{!746, !8, i64 52}
!746 = !{!"", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !13, i64 32, !13, i64 40, !8, i64 48, !8, i64 52, !30, i64 56, !30, i64 64, !30, i64 72}
!747 = !{!746, !13, i64 40}
!748 = !{!746, !13, i64 24}
!749 = distinct !{!749, !18}
!750 = distinct !{!750, !18}
!751 = !{!746, !13, i64 0}
!752 = !{!746, !13, i64 8}
!753 = !{!746, !13, i64 16}
!754 = !{!746, !13, i64 32}
!755 = distinct !{!755, !18}
!756 = !{!746, !8, i64 48}
!757 = distinct !{!757, !18}
!758 = !{!746, !30, i64 72}
!759 = !{!746, !30, i64 56}
!760 = !{!746, !30, i64 64}
!761 = distinct !{!761, !18}
!762 = distinct !{!762, !18}
